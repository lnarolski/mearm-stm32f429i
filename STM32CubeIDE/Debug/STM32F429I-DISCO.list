
STM32F429I-DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002f7a8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005de0  0802f958  0802f958  0003f958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00002dfa  08035738  08035738  00045738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000001dc  08038534  08038534  00048534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 000000d4  08038710  08038710  00048710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 ExtFlashSection 00042988  080387e4  080387e4  000487e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    0000010c  0807b16c  0807b16c  0008b16c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .ARM          000001a0  0807b278  0807b278  0008b278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  0807b418  0807b418  00090178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000018  0807b418  0807b418  0008b418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  0807b430  0807b430  0008b430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         00000178  20000000  0807b438  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          00012e94  20000178  0807b5b0  00090178  2**2
                  ALLOC
 14 ._user_heap_stack 00001404  2001300c  0807b5b0  0009300c  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  00090178  2**0
                  CONTENTS, READONLY
 16 TouchGFX_Framebuffer 0004b000  d0000000  d0000000  000a0000  2**2
                  ALLOC
 17 .debug_line   00038400  00000000  00000000  000901a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_info   000a8cc6  00000000  00000000  000c85a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 00011dd7  00000000  00000000  0017126e  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_aranges 000040b8  00000000  00000000  00183048  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    00109209  00000000  00000000  00187100  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 00003b20  00000000  00000000  00290310  2**3
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  000306fe  00000000  00000000  00293e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      000000fa  00000000  00000000  002c452e  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00012fec  00000000  00000000  002c4628  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000178 	.word	0x20000178
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0802f940 	.word	0x0802f940

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000017c 	.word	0x2000017c
 80001ec:	0802f940 	.word	0x0802f940

080001f0 <d_make_comp>:
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	1e4c      	subs	r4, r1, #1
 80001f4:	4605      	mov	r5, r0
 80001f6:	2c4e      	cmp	r4, #78	; 0x4e
 80001f8:	d83f      	bhi.n	800027a <d_make_comp+0x8a>
 80001fa:	e8df f004 	tbb	[pc, r4]
 80001fe:	3b3b      	.short	0x3b3b
 8000200:	3e3e3b3b 	.word	0x3e3e3b3b
 8000204:	28283e3e 	.word	0x28283e3e
 8000208:	2828283b 	.word	0x2828283b
 800020c:	28282828 	.word	0x28282828
 8000210:	28282828 	.word	0x28282828
 8000214:	29293e28 	.word	0x29293e28
 8000218:	29292929 	.word	0x29292929
 800021c:	283b2929 	.word	0x283b2929
 8000220:	28282828 	.word	0x28282828
 8000224:	3c29283e 	.word	0x3c29283e
 8000228:	293b3e3b 	.word	0x293b3e3b
 800022c:	3e3e3c29 	.word	0x3e3e3c29
 8000230:	3b282828 	.word	0x3b282828
 8000234:	3b3b3b3b 	.word	0x3b3b3b3b
 8000238:	283b3b28 	.word	0x283b3b28
 800023c:	283e3e3b 	.word	0x283e3e3b
 8000240:	3e3e2828 	.word	0x3e3e2828
 8000244:	2828283e 	.word	0x2828283e
 8000248:	293b293b 	.word	0x293b293b
 800024c:	29          	.byte	0x29
 800024d:	00          	.byte	0x00
 800024e:	b1a2      	cbz	r2, 800027a <d_make_comp+0x8a>
 8000250:	e9d5 4005 	ldrd	r4, r0, [r5, #20]
 8000254:	4284      	cmp	r4, r0
 8000256:	da10      	bge.n	800027a <d_make_comp+0x8a>
 8000258:	692f      	ldr	r7, [r5, #16]
 800025a:	0126      	lsls	r6, r4, #4
 800025c:	19b8      	adds	r0, r7, r6
 800025e:	3401      	adds	r4, #1
 8000260:	f04f 0c00 	mov.w	ip, #0
 8000264:	f8c0 c004 	str.w	ip, [r0, #4]
 8000268:	616c      	str	r4, [r5, #20]
 800026a:	55b9      	strb	r1, [r7, r6]
 800026c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8000270:	bcf0      	pop	{r4, r5, r6, r7}
 8000272:	4770      	bx	lr
 8000274:	b10a      	cbz	r2, 800027a <d_make_comp+0x8a>
 8000276:	2b00      	cmp	r3, #0
 8000278:	d1ea      	bne.n	8000250 <d_make_comp+0x60>
 800027a:	2000      	movs	r0, #0
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
 800027e:	4770      	bx	lr

08000280 <d_ref_qualifier>:
 8000280:	b410      	push	{r4}
 8000282:	68c3      	ldr	r3, [r0, #12]
 8000284:	781c      	ldrb	r4, [r3, #0]
 8000286:	2c52      	cmp	r4, #82	; 0x52
 8000288:	460a      	mov	r2, r1
 800028a:	d00f      	beq.n	80002ac <d_ref_qualifier+0x2c>
 800028c:	2c4f      	cmp	r4, #79	; 0x4f
 800028e:	d003      	beq.n	8000298 <d_ref_qualifier+0x18>
 8000290:	4608      	mov	r0, r1
 8000292:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000296:	4770      	bx	lr
 8000298:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800029a:	3103      	adds	r1, #3
 800029c:	6301      	str	r1, [r0, #48]	; 0x30
 800029e:	2120      	movs	r1, #32
 80002a0:	3301      	adds	r3, #1
 80002a2:	60c3      	str	r3, [r0, #12]
 80002a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80002a8:	2300      	movs	r3, #0
 80002aa:	e7a1      	b.n	80001f0 <d_make_comp>
 80002ac:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80002ae:	3102      	adds	r1, #2
 80002b0:	6301      	str	r1, [r0, #48]	; 0x30
 80002b2:	211f      	movs	r1, #31
 80002b4:	e7f4      	b.n	80002a0 <d_ref_qualifier+0x20>
 80002b6:	bf00      	nop

080002b8 <d_count_templates_scopes>:
 80002b8:	2a00      	cmp	r2, #0
 80002ba:	d04e      	beq.n	800035a <d_count_templates_scopes+0xa2>
 80002bc:	b570      	push	{r4, r5, r6, lr}
 80002be:	4605      	mov	r5, r0
 80002c0:	460e      	mov	r6, r1
 80002c2:	4614      	mov	r4, r2
 80002c4:	7823      	ldrb	r3, [r4, #0]
 80002c6:	3b01      	subs	r3, #1
 80002c8:	2b4e      	cmp	r3, #78	; 0x4e
 80002ca:	d82c      	bhi.n	8000326 <d_count_templates_scopes+0x6e>
 80002cc:	e8df f003 	tbb	[pc, r3]
 80002d0:	40373737 	.word	0x40373737
 80002d4:	28282b2b 	.word	0x28282b2b
 80002d8:	37373737 	.word	0x37373737
 80002dc:	37373737 	.word	0x37373737
 80002e0:	37373737 	.word	0x37373737
 80002e4:	2b373737 	.word	0x2b373737
 80002e8:	37373737 	.word	0x37373737
 80002ec:	37373737 	.word	0x37373737
 80002f0:	30303737 	.word	0x30303737
 80002f4:	372b3737 	.word	0x372b3737
 80002f8:	2c373737 	.word	0x2c373737
 80002fc:	37373737 	.word	0x37373737
 8000300:	3737282b 	.word	0x3737282b
 8000304:	37373737 	.word	0x37373737
 8000308:	37373737 	.word	0x37373737
 800030c:	2b373737 	.word	0x2b373737
 8000310:	2c2c372b 	.word	0x2c2c372b
 8000314:	372b2c2c 	.word	0x372b2c2c
 8000318:	37373737 	.word	0x37373737
 800031c:	3737      	.short	0x3737
 800031e:	37          	.byte	0x37
 800031f:	00          	.byte	0x00
 8000320:	68e4      	ldr	r4, [r4, #12]
 8000322:	2c00      	cmp	r4, #0
 8000324:	d1ce      	bne.n	80002c4 <d_count_templates_scopes+0xc>
 8000326:	bd70      	pop	{r4, r5, r6, pc}
 8000328:	68a4      	ldr	r4, [r4, #8]
 800032a:	2c00      	cmp	r4, #0
 800032c:	d1ca      	bne.n	80002c4 <d_count_templates_scopes+0xc>
 800032e:	e7fa      	b.n	8000326 <d_count_templates_scopes+0x6e>
 8000330:	68a2      	ldr	r2, [r4, #8]
 8000332:	7813      	ldrb	r3, [r2, #0]
 8000334:	2b05      	cmp	r3, #5
 8000336:	d103      	bne.n	8000340 <d_count_templates_scopes+0x88>
 8000338:	6833      	ldr	r3, [r6, #0]
 800033a:	3301      	adds	r3, #1
 800033c:	6033      	str	r3, [r6, #0]
 800033e:	68a2      	ldr	r2, [r4, #8]
 8000340:	4631      	mov	r1, r6
 8000342:	4628      	mov	r0, r5
 8000344:	f7ff ffb8 	bl	80002b8 <d_count_templates_scopes>
 8000348:	68e4      	ldr	r4, [r4, #12]
 800034a:	2c00      	cmp	r4, #0
 800034c:	d1ba      	bne.n	80002c4 <d_count_templates_scopes+0xc>
 800034e:	e7ea      	b.n	8000326 <d_count_templates_scopes+0x6e>
 8000350:	682b      	ldr	r3, [r5, #0]
 8000352:	3301      	adds	r3, #1
 8000354:	602b      	str	r3, [r5, #0]
 8000356:	68a2      	ldr	r2, [r4, #8]
 8000358:	e7f2      	b.n	8000340 <d_count_templates_scopes+0x88>
 800035a:	4770      	bx	lr

0800035c <d_append_buffer>:
 800035c:	b39a      	cbz	r2, 80003c6 <d_append_buffer+0x6a>
 800035e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000362:	188e      	adds	r6, r1, r2
 8000364:	4604      	mov	r4, r0
 8000366:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800036a:	3e01      	subs	r6, #1
 800036c:	1e4d      	subs	r5, r1, #1
 800036e:	2700      	movs	r7, #0
 8000370:	e016      	b.n	80003a0 <d_append_buffer+0x44>
 8000372:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8000376:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800037a:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 800037e:	4798      	blx	r3
 8000380:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8000384:	2200      	movs	r2, #0
 8000386:	3301      	adds	r3, #1
 8000388:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800038c:	42b5      	cmp	r5, r6
 800038e:	f04f 0301 	mov.w	r3, #1
 8000392:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8000396:	f804 8002 	strb.w	r8, [r4, r2]
 800039a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800039e:	d010      	beq.n	80003c2 <d_append_buffer+0x66>
 80003a0:	2bff      	cmp	r3, #255	; 0xff
 80003a2:	4619      	mov	r1, r3
 80003a4:	4620      	mov	r0, r4
 80003a6:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 80003aa:	d0e2      	beq.n	8000372 <d_append_buffer+0x16>
 80003ac:	461a      	mov	r2, r3
 80003ae:	42b5      	cmp	r5, r6
 80003b0:	f103 0301 	add.w	r3, r3, #1
 80003b4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80003b8:	f804 8002 	strb.w	r8, [r4, r2]
 80003bc:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80003c0:	d1ee      	bne.n	80003a0 <d_append_buffer+0x44>
 80003c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80003c6:	4770      	bx	lr

080003c8 <is_fnqual_component_type>:
 80003c8:	f1a0 031c 	sub.w	r3, r0, #28
 80003cc:	2b04      	cmp	r3, #4
 80003ce:	d907      	bls.n	80003e0 <is_fnqual_component_type+0x18>
 80003d0:	284c      	cmp	r0, #76	; 0x4c
 80003d2:	d005      	beq.n	80003e0 <is_fnqual_component_type+0x18>
 80003d4:	384e      	subs	r0, #78	; 0x4e
 80003d6:	2801      	cmp	r0, #1
 80003d8:	bf8c      	ite	hi
 80003da:	2000      	movhi	r0, #0
 80003dc:	2001      	movls	r0, #1
 80003de:	4770      	bx	lr
 80003e0:	2001      	movs	r0, #1
 80003e2:	4770      	bx	lr

080003e4 <d_number.isra.1>:
 80003e4:	b470      	push	{r4, r5, r6}
 80003e6:	6802      	ldr	r2, [r0, #0]
 80003e8:	7811      	ldrb	r1, [r2, #0]
 80003ea:	296e      	cmp	r1, #110	; 0x6e
 80003ec:	d018      	beq.n	8000420 <d_number.isra.1+0x3c>
 80003ee:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80003f2:	2b09      	cmp	r3, #9
 80003f4:	d81e      	bhi.n	8000434 <d_number.isra.1+0x50>
 80003f6:	2600      	movs	r6, #0
 80003f8:	2300      	movs	r3, #0
 80003fa:	3201      	adds	r2, #1
 80003fc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000400:	6002      	str	r2, [r0, #0]
 8000402:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 8000406:	7811      	ldrb	r1, [r2, #0]
 8000408:	f1a1 0530 	sub.w	r5, r1, #48	; 0x30
 800040c:	2d09      	cmp	r5, #9
 800040e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8000412:	d9f2      	bls.n	80003fa <d_number.isra.1+0x16>
 8000414:	b10e      	cbz	r6, 800041a <d_number.isra.1+0x36>
 8000416:	f1c4 0330 	rsb	r3, r4, #48	; 0x30
 800041a:	4618      	mov	r0, r3
 800041c:	bc70      	pop	{r4, r5, r6}
 800041e:	4770      	bx	lr
 8000420:	1c53      	adds	r3, r2, #1
 8000422:	6003      	str	r3, [r0, #0]
 8000424:	7851      	ldrb	r1, [r2, #1]
 8000426:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800042a:	2a09      	cmp	r2, #9
 800042c:	d802      	bhi.n	8000434 <d_number.isra.1+0x50>
 800042e:	461a      	mov	r2, r3
 8000430:	2601      	movs	r6, #1
 8000432:	e7e1      	b.n	80003f8 <d_number.isra.1+0x14>
 8000434:	2300      	movs	r3, #0
 8000436:	4618      	mov	r0, r3
 8000438:	bc70      	pop	{r4, r5, r6}
 800043a:	4770      	bx	lr

0800043c <d_number_component>:
 800043c:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8000440:	4293      	cmp	r3, r2
 8000442:	b570      	push	{r4, r5, r6, lr}
 8000444:	da0e      	bge.n	8000464 <d_number_component+0x28>
 8000446:	6901      	ldr	r1, [r0, #16]
 8000448:	011a      	lsls	r2, r3, #4
 800044a:	188c      	adds	r4, r1, r2
 800044c:	3301      	adds	r3, #1
 800044e:	2600      	movs	r6, #0
 8000450:	2541      	movs	r5, #65	; 0x41
 8000452:	6066      	str	r6, [r4, #4]
 8000454:	300c      	adds	r0, #12
 8000456:	6083      	str	r3, [r0, #8]
 8000458:	548d      	strb	r5, [r1, r2]
 800045a:	f7ff ffc3 	bl	80003e4 <d_number.isra.1>
 800045e:	60a0      	str	r0, [r4, #8]
 8000460:	4620      	mov	r0, r4
 8000462:	bd70      	pop	{r4, r5, r6, pc}
 8000464:	2400      	movs	r4, #0
 8000466:	4620      	mov	r0, r4
 8000468:	bd70      	pop	{r4, r5, r6, pc}
 800046a:	bf00      	nop

0800046c <d_compact_number>:
 800046c:	b510      	push	{r4, lr}
 800046e:	68c3      	ldr	r3, [r0, #12]
 8000470:	781a      	ldrb	r2, [r3, #0]
 8000472:	2a5f      	cmp	r2, #95	; 0x5f
 8000474:	4604      	mov	r4, r0
 8000476:	d00d      	beq.n	8000494 <d_compact_number+0x28>
 8000478:	2a6e      	cmp	r2, #110	; 0x6e
 800047a:	d00d      	beq.n	8000498 <d_compact_number+0x2c>
 800047c:	300c      	adds	r0, #12
 800047e:	f7ff ffb1 	bl	80003e4 <d_number.isra.1>
 8000482:	3001      	adds	r0, #1
 8000484:	d408      	bmi.n	8000498 <d_compact_number+0x2c>
 8000486:	68e3      	ldr	r3, [r4, #12]
 8000488:	781a      	ldrb	r2, [r3, #0]
 800048a:	2a5f      	cmp	r2, #95	; 0x5f
 800048c:	d104      	bne.n	8000498 <d_compact_number+0x2c>
 800048e:	3301      	adds	r3, #1
 8000490:	60e3      	str	r3, [r4, #12]
 8000492:	bd10      	pop	{r4, pc}
 8000494:	2000      	movs	r0, #0
 8000496:	e7fa      	b.n	800048e <d_compact_number+0x22>
 8000498:	f04f 30ff 	mov.w	r0, #4294967295
 800049c:	bd10      	pop	{r4, pc}
 800049e:	bf00      	nop

080004a0 <d_template_param>:
 80004a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004a2:	68c3      	ldr	r3, [r0, #12]
 80004a4:	781a      	ldrb	r2, [r3, #0]
 80004a6:	2a54      	cmp	r2, #84	; 0x54
 80004a8:	d119      	bne.n	80004de <d_template_param+0x3e>
 80004aa:	3301      	adds	r3, #1
 80004ac:	60c3      	str	r3, [r0, #12]
 80004ae:	4604      	mov	r4, r0
 80004b0:	f7ff ffdc 	bl	800046c <d_compact_number>
 80004b4:	1e05      	subs	r5, r0, #0
 80004b6:	db12      	blt.n	80004de <d_template_param+0x3e>
 80004b8:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 80004bc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80004be:	428b      	cmp	r3, r1
 80004c0:	f102 0201 	add.w	r2, r2, #1
 80004c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80004c6:	da0a      	bge.n	80004de <d_template_param+0x3e>
 80004c8:	6921      	ldr	r1, [r4, #16]
 80004ca:	011a      	lsls	r2, r3, #4
 80004cc:	1888      	adds	r0, r1, r2
 80004ce:	3301      	adds	r3, #1
 80004d0:	2700      	movs	r7, #0
 80004d2:	2605      	movs	r6, #5
 80004d4:	6047      	str	r7, [r0, #4]
 80004d6:	6163      	str	r3, [r4, #20]
 80004d8:	548e      	strb	r6, [r1, r2]
 80004da:	6085      	str	r5, [r0, #8]
 80004dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004de:	2000      	movs	r0, #0
 80004e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004e2:	bf00      	nop

080004e4 <d_source_name>:
 80004e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80004e8:	4604      	mov	r4, r0
 80004ea:	300c      	adds	r0, #12
 80004ec:	f7ff ff7a 	bl	80003e4 <d_number.isra.1>
 80004f0:	1e07      	subs	r7, r0, #0
 80004f2:	dd49      	ble.n	8000588 <d_source_name+0xa4>
 80004f4:	68e5      	ldr	r5, [r4, #12]
 80004f6:	6863      	ldr	r3, [r4, #4]
 80004f8:	1b5b      	subs	r3, r3, r5
 80004fa:	429f      	cmp	r7, r3
 80004fc:	dc42      	bgt.n	8000584 <d_source_name+0xa0>
 80004fe:	68a2      	ldr	r2, [r4, #8]
 8000500:	19eb      	adds	r3, r5, r7
 8000502:	0752      	lsls	r2, r2, #29
 8000504:	60e3      	str	r3, [r4, #12]
 8000506:	d504      	bpl.n	8000512 <d_source_name+0x2e>
 8000508:	5dea      	ldrb	r2, [r5, r7]
 800050a:	2a24      	cmp	r2, #36	; 0x24
 800050c:	bf04      	itt	eq
 800050e:	3301      	addeq	r3, #1
 8000510:	60e3      	streq	r3, [r4, #12]
 8000512:	2f09      	cmp	r7, #9
 8000514:	e9d4 6805 	ldrd	r6, r8, [r4, #20]
 8000518:	dc10      	bgt.n	800053c <d_source_name+0x58>
 800051a:	45b0      	cmp	r8, r6
 800051c:	dd32      	ble.n	8000584 <d_source_name+0xa0>
 800051e:	6921      	ldr	r1, [r4, #16]
 8000520:	0132      	lsls	r2, r6, #4
 8000522:	1888      	adds	r0, r1, r2
 8000524:	3601      	adds	r6, #1
 8000526:	2300      	movs	r3, #0
 8000528:	6043      	str	r3, [r0, #4]
 800052a:	6166      	str	r6, [r4, #20]
 800052c:	b355      	cbz	r5, 8000584 <d_source_name+0xa0>
 800052e:	6043      	str	r3, [r0, #4]
 8000530:	548b      	strb	r3, [r1, r2]
 8000532:	e9c0 5702 	strd	r5, r7, [r0, #8]
 8000536:	62e0      	str	r0, [r4, #44]	; 0x2c
 8000538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800053c:	2208      	movs	r2, #8
 800053e:	4914      	ldr	r1, [pc, #80]	; (8000590 <d_source_name+0xac>)
 8000540:	4628      	mov	r0, r5
 8000542:	f02e f81f 	bl	802e584 <memcmp>
 8000546:	2800      	cmp	r0, #0
 8000548:	d1e7      	bne.n	800051a <d_source_name+0x36>
 800054a:	7a2b      	ldrb	r3, [r5, #8]
 800054c:	2b2e      	cmp	r3, #46	; 0x2e
 800054e:	d003      	beq.n	8000558 <d_source_name+0x74>
 8000550:	2b5f      	cmp	r3, #95	; 0x5f
 8000552:	d001      	beq.n	8000558 <d_source_name+0x74>
 8000554:	2b24      	cmp	r3, #36	; 0x24
 8000556:	d1e0      	bne.n	800051a <d_source_name+0x36>
 8000558:	7a6b      	ldrb	r3, [r5, #9]
 800055a:	2b4e      	cmp	r3, #78	; 0x4e
 800055c:	d1dd      	bne.n	800051a <d_source_name+0x36>
 800055e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000560:	3316      	adds	r3, #22
 8000562:	1bdf      	subs	r7, r3, r7
 8000564:	45b0      	cmp	r8, r6
 8000566:	6327      	str	r7, [r4, #48]	; 0x30
 8000568:	dd0c      	ble.n	8000584 <d_source_name+0xa0>
 800056a:	6922      	ldr	r2, [r4, #16]
 800056c:	4d09      	ldr	r5, [pc, #36]	; (8000594 <d_source_name+0xb0>)
 800056e:	0133      	lsls	r3, r6, #4
 8000570:	18d0      	adds	r0, r2, r3
 8000572:	2100      	movs	r1, #0
 8000574:	3601      	adds	r6, #1
 8000576:	6166      	str	r6, [r4, #20]
 8000578:	6041      	str	r1, [r0, #4]
 800057a:	54d1      	strb	r1, [r2, r3]
 800057c:	2315      	movs	r3, #21
 800057e:	e9c0 5302 	strd	r5, r3, [r0, #8]
 8000582:	e7d8      	b.n	8000536 <d_source_name+0x52>
 8000584:	2000      	movs	r0, #0
 8000586:	e7d6      	b.n	8000536 <d_source_name+0x52>
 8000588:	2000      	movs	r0, #0
 800058a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800058e:	bf00      	nop
 8000590:	08034dfc 	.word	0x08034dfc
 8000594:	08034e08 	.word	0x08034e08

08000598 <d_abi_tags>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	68c3      	ldr	r3, [r0, #12]
 800059c:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 800059e:	781a      	ldrb	r2, [r3, #0]
 80005a0:	2a42      	cmp	r2, #66	; 0x42
 80005a2:	4604      	mov	r4, r0
 80005a4:	460d      	mov	r5, r1
 80005a6:	d10f      	bne.n	80005c8 <d_abi_tags+0x30>
 80005a8:	3301      	adds	r3, #1
 80005aa:	60e3      	str	r3, [r4, #12]
 80005ac:	4620      	mov	r0, r4
 80005ae:	f7ff ff99 	bl	80004e4 <d_source_name>
 80005b2:	462a      	mov	r2, r5
 80005b4:	4603      	mov	r3, r0
 80005b6:	214b      	movs	r1, #75	; 0x4b
 80005b8:	4620      	mov	r0, r4
 80005ba:	f7ff fe19 	bl	80001f0 <d_make_comp>
 80005be:	68e3      	ldr	r3, [r4, #12]
 80005c0:	781a      	ldrb	r2, [r3, #0]
 80005c2:	2a42      	cmp	r2, #66	; 0x42
 80005c4:	4605      	mov	r5, r0
 80005c6:	d0ef      	beq.n	80005a8 <d_abi_tags+0x10>
 80005c8:	62e6      	str	r6, [r4, #44]	; 0x2c
 80005ca:	4628      	mov	r0, r5
 80005cc:	bd70      	pop	{r4, r5, r6, pc}
 80005ce:	bf00      	nop

080005d0 <d_substitution>:
 80005d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80005d4:	4605      	mov	r5, r0
 80005d6:	68c0      	ldr	r0, [r0, #12]
 80005d8:	7803      	ldrb	r3, [r0, #0]
 80005da:	2b53      	cmp	r3, #83	; 0x53
 80005dc:	d131      	bne.n	8000642 <d_substitution+0x72>
 80005de:	1c43      	adds	r3, r0, #1
 80005e0:	60eb      	str	r3, [r5, #12]
 80005e2:	7842      	ldrb	r2, [r0, #1]
 80005e4:	b3a2      	cbz	r2, 8000650 <d_substitution+0x80>
 80005e6:	1c83      	adds	r3, r0, #2
 80005e8:	60eb      	str	r3, [r5, #12]
 80005ea:	7842      	ldrb	r2, [r0, #1]
 80005ec:	2a5f      	cmp	r2, #95	; 0x5f
 80005ee:	f000 8089 	beq.w	8000704 <d_substitution+0x134>
 80005f2:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 80005f6:	b2e3      	uxtb	r3, r4
 80005f8:	2b09      	cmp	r3, #9
 80005fa:	d825      	bhi.n	8000648 <d_substitution+0x78>
 80005fc:	2100      	movs	r1, #0
 80005fe:	e00e      	b.n	800061e <d_substitution+0x4e>
 8000600:	3b30      	subs	r3, #48	; 0x30
 8000602:	4299      	cmp	r1, r3
 8000604:	d81d      	bhi.n	8000642 <d_substitution+0x72>
 8000606:	68e9      	ldr	r1, [r5, #12]
 8000608:	780a      	ldrb	r2, [r1, #0]
 800060a:	1c48      	adds	r0, r1, #1
 800060c:	b122      	cbz	r2, 8000618 <d_substitution+0x48>
 800060e:	60e8      	str	r0, [r5, #12]
 8000610:	780a      	ldrb	r2, [r1, #0]
 8000612:	2a5f      	cmp	r2, #95	; 0x5f
 8000614:	f000 8082 	beq.w	800071c <d_substitution+0x14c>
 8000618:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 800061c:	4619      	mov	r1, r3
 800061e:	b2e4      	uxtb	r4, r4
 8000620:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8000624:	2c09      	cmp	r4, #9
 8000626:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
 800062a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800062e:	d9e7      	bls.n	8000600 <d_substitution+0x30>
 8000630:	2819      	cmp	r0, #25
 8000632:	d806      	bhi.n	8000642 <d_substitution+0x72>
 8000634:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8000638:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800063c:	3b37      	subs	r3, #55	; 0x37
 800063e:	4299      	cmp	r1, r3
 8000640:	d9e1      	bls.n	8000606 <d_substitution+0x36>
 8000642:	2000      	movs	r0, #0
 8000644:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000648:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 800064c:	2b19      	cmp	r3, #25
 800064e:	d9d5      	bls.n	80005fc <d_substitution+0x2c>
 8000650:	68ab      	ldr	r3, [r5, #8]
 8000652:	f003 0308 	and.w	r3, r3, #8
 8000656:	2b00      	cmp	r3, #0
 8000658:	bf14      	ite	ne
 800065a:	2401      	movne	r4, #1
 800065c:	2400      	moveq	r4, #0
 800065e:	d101      	bne.n	8000664 <d_substitution+0x94>
 8000660:	2900      	cmp	r1, #0
 8000662:	d15d      	bne.n	8000720 <d_substitution+0x150>
 8000664:	4b35      	ldr	r3, [pc, #212]	; (800073c <d_substitution+0x16c>)
 8000666:	2174      	movs	r1, #116	; 0x74
 8000668:	4291      	cmp	r1, r2
 800066a:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
 800066e:	d005      	beq.n	800067c <d_substitution+0xac>
 8000670:	331c      	adds	r3, #28
 8000672:	4283      	cmp	r3, r0
 8000674:	d2e5      	bcs.n	8000642 <d_substitution+0x72>
 8000676:	7819      	ldrb	r1, [r3, #0]
 8000678:	4291      	cmp	r1, r2
 800067a:	d1f9      	bne.n	8000670 <d_substitution+0xa0>
 800067c:	6958      	ldr	r0, [r3, #20]
 800067e:	e9d5 2105 	ldrd	r2, r1, [r5, #20]
 8000682:	b1a8      	cbz	r0, 80006b0 <d_substitution+0xe0>
 8000684:	428a      	cmp	r2, r1
 8000686:	da57      	bge.n	8000738 <d_substitution+0x168>
 8000688:	f8d5 c010 	ldr.w	ip, [r5, #16]
 800068c:	f8d3 e018 	ldr.w	lr, [r3, #24]
 8000690:	0117      	lsls	r7, r2, #4
 8000692:	eb0c 0607 	add.w	r6, ip, r7
 8000696:	3201      	adds	r2, #1
 8000698:	f04f 0900 	mov.w	r9, #0
 800069c:	f04f 0818 	mov.w	r8, #24
 80006a0:	f8c6 9004 	str.w	r9, [r6, #4]
 80006a4:	616a      	str	r2, [r5, #20]
 80006a6:	f80c 8007 	strb.w	r8, [ip, r7]
 80006aa:	e9c6 0e02 	strd	r0, lr, [r6, #8]
 80006ae:	62ee      	str	r6, [r5, #44]	; 0x2c
 80006b0:	2c00      	cmp	r4, #0
 80006b2:	d13c      	bne.n	800072e <d_substitution+0x15e>
 80006b4:	e9d3 6401 	ldrd	r6, r4, [r3, #4]
 80006b8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80006ba:	4291      	cmp	r1, r2
 80006bc:	4423      	add	r3, r4
 80006be:	632b      	str	r3, [r5, #48]	; 0x30
 80006c0:	dd38      	ble.n	8000734 <d_substitution+0x164>
 80006c2:	6929      	ldr	r1, [r5, #16]
 80006c4:	0113      	lsls	r3, r2, #4
 80006c6:	18c8      	adds	r0, r1, r3
 80006c8:	3201      	adds	r2, #1
 80006ca:	f04f 0c00 	mov.w	ip, #0
 80006ce:	2718      	movs	r7, #24
 80006d0:	f8c0 c004 	str.w	ip, [r0, #4]
 80006d4:	616a      	str	r2, [r5, #20]
 80006d6:	54cf      	strb	r7, [r1, r3]
 80006d8:	e9c0 6402 	strd	r6, r4, [r0, #8]
 80006dc:	68eb      	ldr	r3, [r5, #12]
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b42      	cmp	r3, #66	; 0x42
 80006e2:	d1af      	bne.n	8000644 <d_substitution+0x74>
 80006e4:	4601      	mov	r1, r0
 80006e6:	4628      	mov	r0, r5
 80006e8:	f7ff ff56 	bl	8000598 <d_abi_tags>
 80006ec:	2800      	cmp	r0, #0
 80006ee:	d0a8      	beq.n	8000642 <d_substitution+0x72>
 80006f0:	e9d5 3208 	ldrd	r3, r2, [r5, #32]
 80006f4:	4293      	cmp	r3, r2
 80006f6:	daa5      	bge.n	8000644 <d_substitution+0x74>
 80006f8:	69e9      	ldr	r1, [r5, #28]
 80006fa:	1c5a      	adds	r2, r3, #1
 80006fc:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8000700:	622a      	str	r2, [r5, #32]
 8000702:	e79f      	b.n	8000644 <d_substitution+0x74>
 8000704:	2300      	movs	r3, #0
 8000706:	6a2a      	ldr	r2, [r5, #32]
 8000708:	429a      	cmp	r2, r3
 800070a:	d99a      	bls.n	8000642 <d_substitution+0x72>
 800070c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800070e:	69e9      	ldr	r1, [r5, #28]
 8000710:	3201      	adds	r2, #1
 8000712:	62aa      	str	r2, [r5, #40]	; 0x28
 8000714:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8000718:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800071c:	3301      	adds	r3, #1
 800071e:	e7f2      	b.n	8000706 <d_substitution+0x136>
 8000720:	68eb      	ldr	r3, [r5, #12]
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	3b43      	subs	r3, #67	; 0x43
 8000726:	2b01      	cmp	r3, #1
 8000728:	bf98      	it	ls
 800072a:	460c      	movls	r4, r1
 800072c:	e79a      	b.n	8000664 <d_substitution+0x94>
 800072e:	e9d3 6403 	ldrd	r6, r4, [r3, #12]
 8000732:	e7c1      	b.n	80006b8 <d_substitution+0xe8>
 8000734:	2000      	movs	r0, #0
 8000736:	e7d1      	b.n	80006dc <d_substitution+0x10c>
 8000738:	2600      	movs	r6, #0
 800073a:	e7b8      	b.n	80006ae <d_substitution+0xde>
 800073c:	08030248 	.word	0x08030248

08000740 <d_discriminator>:
 8000740:	68c3      	ldr	r3, [r0, #12]
 8000742:	781a      	ldrb	r2, [r3, #0]
 8000744:	2a5f      	cmp	r2, #95	; 0x5f
 8000746:	d001      	beq.n	800074c <d_discriminator+0xc>
 8000748:	2001      	movs	r0, #1
 800074a:	4770      	bx	lr
 800074c:	b510      	push	{r4, lr}
 800074e:	1c5a      	adds	r2, r3, #1
 8000750:	4604      	mov	r4, r0
 8000752:	f840 2f0c 	str.w	r2, [r0, #12]!
 8000756:	785a      	ldrb	r2, [r3, #1]
 8000758:	2a5f      	cmp	r2, #95	; 0x5f
 800075a:	d004      	beq.n	8000766 <d_discriminator+0x26>
 800075c:	f7ff fe42 	bl	80003e4 <d_number.isra.1>
 8000760:	43c0      	mvns	r0, r0
 8000762:	0fc0      	lsrs	r0, r0, #31
 8000764:	bd10      	pop	{r4, pc}
 8000766:	3302      	adds	r3, #2
 8000768:	60e3      	str	r3, [r4, #12]
 800076a:	f7ff fe3b 	bl	80003e4 <d_number.isra.1>
 800076e:	2800      	cmp	r0, #0
 8000770:	db05      	blt.n	800077e <d_discriminator+0x3e>
 8000772:	2809      	cmp	r0, #9
 8000774:	dd07      	ble.n	8000786 <d_discriminator+0x46>
 8000776:	68e3      	ldr	r3, [r4, #12]
 8000778:	781a      	ldrb	r2, [r3, #0]
 800077a:	2a5f      	cmp	r2, #95	; 0x5f
 800077c:	d001      	beq.n	8000782 <d_discriminator+0x42>
 800077e:	2000      	movs	r0, #0
 8000780:	bd10      	pop	{r4, pc}
 8000782:	3301      	adds	r3, #1
 8000784:	60e3      	str	r3, [r4, #12]
 8000786:	2001      	movs	r0, #1
 8000788:	bd10      	pop	{r4, pc}
 800078a:	bf00      	nop

0800078c <d_index_template_argument.part.9>:
 800078c:	b170      	cbz	r0, 80007ac <d_index_template_argument.part.9+0x20>
 800078e:	7803      	ldrb	r3, [r0, #0]
 8000790:	2b2f      	cmp	r3, #47	; 0x2f
 8000792:	d10f      	bne.n	80007b4 <d_index_template_argument.part.9+0x28>
 8000794:	2900      	cmp	r1, #0
 8000796:	dc04      	bgt.n	80007a2 <d_index_template_argument.part.9+0x16>
 8000798:	e009      	b.n	80007ae <d_index_template_argument.part.9+0x22>
 800079a:	7803      	ldrb	r3, [r0, #0]
 800079c:	2b2f      	cmp	r3, #47	; 0x2f
 800079e:	d109      	bne.n	80007b4 <d_index_template_argument.part.9+0x28>
 80007a0:	b131      	cbz	r1, 80007b0 <d_index_template_argument.part.9+0x24>
 80007a2:	68c0      	ldr	r0, [r0, #12]
 80007a4:	3901      	subs	r1, #1
 80007a6:	2800      	cmp	r0, #0
 80007a8:	d1f7      	bne.n	800079a <d_index_template_argument.part.9+0xe>
 80007aa:	4770      	bx	lr
 80007ac:	4770      	bx	lr
 80007ae:	d101      	bne.n	80007b4 <d_index_template_argument.part.9+0x28>
 80007b0:	6880      	ldr	r0, [r0, #8]
 80007b2:	4770      	bx	lr
 80007b4:	2000      	movs	r0, #0
 80007b6:	4770      	bx	lr

080007b8 <d_lookup_template_argument.isra.10>:
 80007b8:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 80007bc:	b133      	cbz	r3, 80007cc <d_lookup_template_argument.isra.10+0x14>
 80007be:	6809      	ldr	r1, [r1, #0]
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	2900      	cmp	r1, #0
 80007c4:	68db      	ldr	r3, [r3, #12]
 80007c6:	db04      	blt.n	80007d2 <d_lookup_template_argument.isra.10+0x1a>
 80007c8:	4618      	mov	r0, r3
 80007ca:	e7df      	b.n	800078c <d_index_template_argument.part.9>
 80007cc:	2201      	movs	r2, #1
 80007ce:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
 80007d2:	4618      	mov	r0, r3
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop

080007d8 <d_find_pack>:
 80007d8:	2900      	cmp	r1, #0
 80007da:	d042      	beq.n	8000862 <d_find_pack+0x8a>
 80007dc:	b538      	push	{r3, r4, r5, lr}
 80007de:	4605      	mov	r5, r0
 80007e0:	460c      	mov	r4, r1
 80007e2:	7823      	ldrb	r3, [r4, #0]
 80007e4:	2b4b      	cmp	r3, #75	; 0x4b
 80007e6:	d827      	bhi.n	8000838 <d_find_pack+0x60>
 80007e8:	e8df f003 	tbb	[pc, r3]
 80007ec:	2626262e 	.word	0x2626262e
 80007f0:	2b2e3026 	.word	0x2b2e3026
 80007f4:	2626262b 	.word	0x2626262b
 80007f8:	26262626 	.word	0x26262626
 80007fc:	26262626 	.word	0x26262626
 8000800:	26262626 	.word	0x26262626
 8000804:	2626262e 	.word	0x2626262e
 8000808:	26262626 	.word	0x26262626
 800080c:	26262626 	.word	0x26262626
 8000810:	2e262626 	.word	0x2e262626
 8000814:	26262626 	.word	0x26262626
 8000818:	2626262e 	.word	0x2626262e
 800081c:	262b2e26 	.word	0x262b2e26
 8000820:	26262626 	.word	0x26262626
 8000824:	26262626 	.word	0x26262626
 8000828:	26262626 	.word	0x26262626
 800082c:	26262e2e 	.word	0x26262e2e
 8000830:	2e2e2e26 	.word	0x2e2e2e26
 8000834:	2e2e2626 	.word	0x2e2e2626
 8000838:	68a1      	ldr	r1, [r4, #8]
 800083a:	4628      	mov	r0, r5
 800083c:	f7ff ffcc 	bl	80007d8 <d_find_pack>
 8000840:	b918      	cbnz	r0, 800084a <d_find_pack+0x72>
 8000842:	68e4      	ldr	r4, [r4, #12]
 8000844:	2c00      	cmp	r4, #0
 8000846:	d1cc      	bne.n	80007e2 <d_find_pack+0xa>
 8000848:	2000      	movs	r0, #0
 800084a:	bd38      	pop	{r3, r4, r5, pc}
 800084c:	f104 0108 	add.w	r1, r4, #8
 8000850:	4628      	mov	r0, r5
 8000852:	f7ff ffb1 	bl	80007b8 <d_lookup_template_argument.isra.10>
 8000856:	2800      	cmp	r0, #0
 8000858:	d0f6      	beq.n	8000848 <d_find_pack+0x70>
 800085a:	7803      	ldrb	r3, [r0, #0]
 800085c:	2b2f      	cmp	r3, #47	; 0x2f
 800085e:	d1f3      	bne.n	8000848 <d_find_pack+0x70>
 8000860:	bd38      	pop	{r3, r4, r5, pc}
 8000862:	2000      	movs	r0, #0
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop

08000868 <d_growable_string_callback_adapter>:
 8000868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800086c:	4614      	mov	r4, r2
 800086e:	e9d4 5702 	ldrd	r5, r7, [r4, #8]
 8000872:	6852      	ldr	r2, [r2, #4]
 8000874:	1c4b      	adds	r3, r1, #1
 8000876:	4413      	add	r3, r2
 8000878:	42ab      	cmp	r3, r5
 800087a:	b082      	sub	sp, #8
 800087c:	460e      	mov	r6, r1
 800087e:	4680      	mov	r8, r0
 8000880:	d814      	bhi.n	80008ac <d_growable_string_callback_adapter+0x44>
 8000882:	b117      	cbz	r7, 800088a <d_growable_string_callback_adapter+0x22>
 8000884:	b002      	add	sp, #8
 8000886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800088a:	e9d4 0300 	ldrd	r0, r3, [r4]
 800088e:	4632      	mov	r2, r6
 8000890:	4641      	mov	r1, r8
 8000892:	4418      	add	r0, r3
 8000894:	f02d fe85 	bl	802e5a2 <memcpy>
 8000898:	e9d4 3200 	ldrd	r3, r2, [r4]
 800089c:	4433      	add	r3, r6
 800089e:	549f      	strb	r7, [r3, r2]
 80008a0:	6863      	ldr	r3, [r4, #4]
 80008a2:	441e      	add	r6, r3
 80008a4:	6066      	str	r6, [r4, #4]
 80008a6:	b002      	add	sp, #8
 80008a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80008ac:	2f00      	cmp	r7, #0
 80008ae:	d1e9      	bne.n	8000884 <d_growable_string_callback_adapter+0x1c>
 80008b0:	b91d      	cbnz	r5, 80008ba <d_growable_string_callback_adapter+0x52>
 80008b2:	2b02      	cmp	r3, #2
 80008b4:	f04f 0502 	mov.w	r5, #2
 80008b8:	d902      	bls.n	80008c0 <d_growable_string_callback_adapter+0x58>
 80008ba:	006d      	lsls	r5, r5, #1
 80008bc:	42ab      	cmp	r3, r5
 80008be:	d8fc      	bhi.n	80008ba <d_growable_string_callback_adapter+0x52>
 80008c0:	4629      	mov	r1, r5
 80008c2:	6820      	ldr	r0, [r4, #0]
 80008c4:	f02e fa26 	bl	802ed14 <realloc>
 80008c8:	b128      	cbz	r0, 80008d6 <d_growable_string_callback_adapter+0x6e>
 80008ca:	68e7      	ldr	r7, [r4, #12]
 80008cc:	6020      	str	r0, [r4, #0]
 80008ce:	60a5      	str	r5, [r4, #8]
 80008d0:	2f00      	cmp	r7, #0
 80008d2:	d1d7      	bne.n	8000884 <d_growable_string_callback_adapter+0x1c>
 80008d4:	e7d9      	b.n	800088a <d_growable_string_callback_adapter+0x22>
 80008d6:	9001      	str	r0, [sp, #4]
 80008d8:	6820      	ldr	r0, [r4, #0]
 80008da:	f02d fe4b 	bl	802e574 <free>
 80008de:	9b01      	ldr	r3, [sp, #4]
 80008e0:	2201      	movs	r2, #1
 80008e2:	e9c4 3300 	strd	r3, r3, [r4]
 80008e6:	e9c4 3202 	strd	r3, r2, [r4, #8]
 80008ea:	e7cb      	b.n	8000884 <d_growable_string_callback_adapter+0x1c>

080008ec <d_call_offset>:
 80008ec:	b538      	push	{r3, r4, r5, lr}
 80008ee:	4604      	mov	r4, r0
 80008f0:	b929      	cbnz	r1, 80008fe <d_call_offset+0x12>
 80008f2:	68c3      	ldr	r3, [r0, #12]
 80008f4:	781a      	ldrb	r2, [r3, #0]
 80008f6:	b132      	cbz	r2, 8000906 <d_call_offset+0x1a>
 80008f8:	1c5a      	adds	r2, r3, #1
 80008fa:	60c2      	str	r2, [r0, #12]
 80008fc:	7819      	ldrb	r1, [r3, #0]
 80008fe:	2968      	cmp	r1, #104	; 0x68
 8000900:	d012      	beq.n	8000928 <d_call_offset+0x3c>
 8000902:	2976      	cmp	r1, #118	; 0x76
 8000904:	d001      	beq.n	800090a <d_call_offset+0x1e>
 8000906:	2000      	movs	r0, #0
 8000908:	bd38      	pop	{r3, r4, r5, pc}
 800090a:	f104 050c 	add.w	r5, r4, #12
 800090e:	4628      	mov	r0, r5
 8000910:	f7ff fd68 	bl	80003e4 <d_number.isra.1>
 8000914:	68e3      	ldr	r3, [r4, #12]
 8000916:	781a      	ldrb	r2, [r3, #0]
 8000918:	2a5f      	cmp	r2, #95	; 0x5f
 800091a:	d1f4      	bne.n	8000906 <d_call_offset+0x1a>
 800091c:	3301      	adds	r3, #1
 800091e:	60e3      	str	r3, [r4, #12]
 8000920:	4628      	mov	r0, r5
 8000922:	f7ff fd5f 	bl	80003e4 <d_number.isra.1>
 8000926:	e003      	b.n	8000930 <d_call_offset+0x44>
 8000928:	f104 000c 	add.w	r0, r4, #12
 800092c:	f7ff fd5a 	bl	80003e4 <d_number.isra.1>
 8000930:	68e3      	ldr	r3, [r4, #12]
 8000932:	781a      	ldrb	r2, [r3, #0]
 8000934:	2a5f      	cmp	r2, #95	; 0x5f
 8000936:	d1e6      	bne.n	8000906 <d_call_offset+0x1a>
 8000938:	3301      	adds	r3, #1
 800093a:	60e3      	str	r3, [r4, #12]
 800093c:	2001      	movs	r0, #1
 800093e:	bd38      	pop	{r3, r4, r5, pc}

08000940 <d_append_num>:
 8000940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000944:	b088      	sub	sp, #32
 8000946:	460a      	mov	r2, r1
 8000948:	4604      	mov	r4, r0
 800094a:	491c      	ldr	r1, [pc, #112]	; (80009bc <d_append_num+0x7c>)
 800094c:	a801      	add	r0, sp, #4
 800094e:	f02e fa71 	bl	802ee34 <siprintf>
 8000952:	a801      	add	r0, sp, #4
 8000954:	f006 f9c4 	bl	8006ce0 <strlen>
 8000958:	b368      	cbz	r0, 80009b6 <d_append_num+0x76>
 800095a:	ad01      	add	r5, sp, #4
 800095c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8000960:	182e      	adds	r6, r5, r0
 8000962:	2700      	movs	r7, #0
 8000964:	e016      	b.n	8000994 <d_append_num+0x54>
 8000966:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800096a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800096e:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8000972:	4798      	blx	r3
 8000974:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8000978:	2200      	movs	r2, #0
 800097a:	3301      	adds	r3, #1
 800097c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8000980:	42ae      	cmp	r6, r5
 8000982:	f04f 0301 	mov.w	r3, #1
 8000986:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800098a:	f804 8002 	strb.w	r8, [r4, r2]
 800098e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8000992:	d010      	beq.n	80009b6 <d_append_num+0x76>
 8000994:	2bff      	cmp	r3, #255	; 0xff
 8000996:	4619      	mov	r1, r3
 8000998:	4620      	mov	r0, r4
 800099a:	f815 8b01 	ldrb.w	r8, [r5], #1
 800099e:	d0e2      	beq.n	8000966 <d_append_num+0x26>
 80009a0:	461a      	mov	r2, r3
 80009a2:	42ae      	cmp	r6, r5
 80009a4:	f103 0301 	add.w	r3, r3, #1
 80009a8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80009ac:	f804 8002 	strb.w	r8, [r4, r2]
 80009b0:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80009b4:	d1ee      	bne.n	8000994 <d_append_num+0x54>
 80009b6:	b008      	add	sp, #32
 80009b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80009bc:	08034e20 	.word	0x08034e20

080009c0 <d_exprlist>:
 80009c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009c4:	68c3      	ldr	r3, [r0, #12]
 80009c6:	781d      	ldrb	r5, [r3, #0]
 80009c8:	b083      	sub	sp, #12
 80009ca:	2200      	movs	r2, #0
 80009cc:	428d      	cmp	r5, r1
 80009ce:	4604      	mov	r4, r0
 80009d0:	9201      	str	r2, [sp, #4]
 80009d2:	f000 8199 	beq.w	8000d08 <d_exprlist+0x348>
 80009d6:	f8df 94c0 	ldr.w	r9, [pc, #1216]	; 8000e98 <d_exprlist+0x4d8>
 80009da:	4688      	mov	r8, r1
 80009dc:	af01      	add	r7, sp, #4
 80009de:	2501      	movs	r5, #1
 80009e0:	6b66      	ldr	r6, [r4, #52]	; 0x34
 80009e2:	6365      	str	r5, [r4, #52]	; 0x34
 80009e4:	781a      	ldrb	r2, [r3, #0]
 80009e6:	2a4c      	cmp	r2, #76	; 0x4c
 80009e8:	d05c      	beq.n	8000aa4 <d_exprlist+0xe4>
 80009ea:	2a54      	cmp	r2, #84	; 0x54
 80009ec:	d066      	beq.n	8000abc <d_exprlist+0xfc>
 80009ee:	2a73      	cmp	r2, #115	; 0x73
 80009f0:	d045      	beq.n	8000a7e <d_exprlist+0xbe>
 80009f2:	2a66      	cmp	r2, #102	; 0x66
 80009f4:	d11c      	bne.n	8000a30 <d_exprlist+0x70>
 80009f6:	785a      	ldrb	r2, [r3, #1]
 80009f8:	2a70      	cmp	r2, #112	; 0x70
 80009fa:	f000 8087 	beq.w	8000b0c <d_exprlist+0x14c>
 80009fe:	4620      	mov	r0, r4
 8000a00:	f001 fa70 	bl	8001ee4 <d_operator_name>
 8000a04:	4605      	mov	r5, r0
 8000a06:	2800      	cmp	r0, #0
 8000a08:	f000 818c 	beq.w	8000d24 <d_exprlist+0x364>
 8000a0c:	7803      	ldrb	r3, [r0, #0]
 8000a0e:	2b31      	cmp	r3, #49	; 0x31
 8000a10:	f000 8098 	beq.w	8000b44 <d_exprlist+0x184>
 8000a14:	2b32      	cmp	r3, #50	; 0x32
 8000a16:	d056      	beq.n	8000ac6 <d_exprlist+0x106>
 8000a18:	2b33      	cmp	r3, #51	; 0x33
 8000a1a:	d171      	bne.n	8000b00 <d_exprlist+0x140>
 8000a1c:	68e3      	ldr	r3, [r4, #12]
 8000a1e:	781a      	ldrb	r2, [r3, #0]
 8000a20:	2a5f      	cmp	r2, #95	; 0x5f
 8000a22:	f000 81da 	beq.w	8000dda <d_exprlist+0x41a>
 8000a26:	4620      	mov	r0, r4
 8000a28:	f000 fa38 	bl	8000e9c <d_expression_1>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	e0c1      	b.n	8000bb4 <d_exprlist+0x1f4>
 8000a30:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8000a34:	2909      	cmp	r1, #9
 8000a36:	f200 80e7 	bhi.w	8000c08 <d_exprlist+0x248>
 8000a3a:	4620      	mov	r0, r4
 8000a3c:	f001 fbfe 	bl	800223c <d_unqualified_name>
 8000a40:	4605      	mov	r5, r0
 8000a42:	2800      	cmp	r0, #0
 8000a44:	f000 816e 	beq.w	8000d24 <d_exprlist+0x364>
 8000a48:	68e3      	ldr	r3, [r4, #12]
 8000a4a:	781a      	ldrb	r2, [r3, #0]
 8000a4c:	2a49      	cmp	r2, #73	; 0x49
 8000a4e:	f000 80b8 	beq.w	8000bc2 <d_exprlist+0x202>
 8000a52:	6366      	str	r6, [r4, #52]	; 0x34
 8000a54:	462a      	mov	r2, r5
 8000a56:	2300      	movs	r3, #0
 8000a58:	212e      	movs	r1, #46	; 0x2e
 8000a5a:	4620      	mov	r0, r4
 8000a5c:	f7ff fbc8 	bl	80001f0 <d_make_comp>
 8000a60:	6038      	str	r0, [r7, #0]
 8000a62:	b330      	cbz	r0, 8000ab2 <d_exprlist+0xf2>
 8000a64:	68e3      	ldr	r3, [r4, #12]
 8000a66:	781a      	ldrb	r2, [r3, #0]
 8000a68:	4542      	cmp	r2, r8
 8000a6a:	f100 070c 	add.w	r7, r0, #12
 8000a6e:	d1b6      	bne.n	80009de <d_exprlist+0x1e>
 8000a70:	3301      	adds	r3, #1
 8000a72:	9d01      	ldr	r5, [sp, #4]
 8000a74:	60e3      	str	r3, [r4, #12]
 8000a76:	4628      	mov	r0, r5
 8000a78:	b003      	add	sp, #12
 8000a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a7e:	785a      	ldrb	r2, [r3, #1]
 8000a80:	2a72      	cmp	r2, #114	; 0x72
 8000a82:	f000 80ab 	beq.w	8000bdc <d_exprlist+0x21c>
 8000a86:	2a70      	cmp	r2, #112	; 0x70
 8000a88:	d1b9      	bne.n	80009fe <d_exprlist+0x3e>
 8000a8a:	3302      	adds	r3, #2
 8000a8c:	60e3      	str	r3, [r4, #12]
 8000a8e:	4620      	mov	r0, r4
 8000a90:	f000 fa04 	bl	8000e9c <d_expression_1>
 8000a94:	2300      	movs	r3, #0
 8000a96:	4602      	mov	r2, r0
 8000a98:	214a      	movs	r1, #74	; 0x4a
 8000a9a:	4620      	mov	r0, r4
 8000a9c:	f7ff fba8 	bl	80001f0 <d_make_comp>
 8000aa0:	4605      	mov	r5, r0
 8000aa2:	e003      	b.n	8000aac <d_exprlist+0xec>
 8000aa4:	4620      	mov	r0, r4
 8000aa6:	f002 f813 	bl	8002ad0 <d_expr_primary>
 8000aaa:	4605      	mov	r5, r0
 8000aac:	6366      	str	r6, [r4, #52]	; 0x34
 8000aae:	2d00      	cmp	r5, #0
 8000ab0:	d1d0      	bne.n	8000a54 <d_exprlist+0x94>
 8000ab2:	2500      	movs	r5, #0
 8000ab4:	4628      	mov	r0, r5
 8000ab6:	b003      	add	sp, #12
 8000ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000abc:	4620      	mov	r0, r4
 8000abe:	f7ff fcef 	bl	80004a0 <d_template_param>
 8000ac2:	4605      	mov	r5, r0
 8000ac4:	e7f2      	b.n	8000aac <d_exprlist+0xec>
 8000ac6:	6883      	ldr	r3, [r0, #8]
 8000ac8:	2b03      	cmp	r3, #3
 8000aca:	d819      	bhi.n	8000b00 <d_exprlist+0x140>
 8000acc:	a201      	add	r2, pc, #4	; (adr r2, 8000ad4 <d_exprlist+0x114>)
 8000ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad2:	bf00      	nop
 8000ad4:	08000c67 	.word	0x08000c67
 8000ad8:	08000a27 	.word	0x08000a27
 8000adc:	08000b01 	.word	0x08000b01
 8000ae0:	08000b01 	.word	0x08000b01
 8000ae4:	2a74      	cmp	r2, #116	; 0x74
 8000ae6:	d18a      	bne.n	80009fe <d_exprlist+0x3e>
 8000ae8:	785b      	ldrb	r3, [r3, #1]
 8000aea:	2b6c      	cmp	r3, #108	; 0x6c
 8000aec:	d187      	bne.n	80009fe <d_exprlist+0x3e>
 8000aee:	4620      	mov	r0, r4
 8000af0:	f000 fdfe 	bl	80016f0 <d_type>
 8000af4:	68e3      	ldr	r3, [r4, #12]
 8000af6:	785a      	ldrb	r2, [r3, #1]
 8000af8:	4605      	mov	r5, r0
 8000afa:	2a00      	cmp	r2, #0
 8000afc:	f040 8123 	bne.w	8000d46 <d_exprlist+0x386>
 8000b00:	2500      	movs	r5, #0
 8000b02:	4628      	mov	r0, r5
 8000b04:	6366      	str	r6, [r4, #52]	; 0x34
 8000b06:	b003      	add	sp, #12
 8000b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b0c:	1c9a      	adds	r2, r3, #2
 8000b0e:	60e2      	str	r2, [r4, #12]
 8000b10:	789a      	ldrb	r2, [r3, #2]
 8000b12:	2a54      	cmp	r2, #84	; 0x54
 8000b14:	f040 8082 	bne.w	8000c1c <d_exprlist+0x25c>
 8000b18:	3303      	adds	r3, #3
 8000b1a:	60e3      	str	r3, [r4, #12]
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8000b22:	4293      	cmp	r3, r2
 8000b24:	daec      	bge.n	8000b00 <d_exprlist+0x140>
 8000b26:	6921      	ldr	r1, [r4, #16]
 8000b28:	011a      	lsls	r2, r3, #4
 8000b2a:	188d      	adds	r5, r1, r2
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	f04f 0e00 	mov.w	lr, #0
 8000b32:	f04f 0c06 	mov.w	ip, #6
 8000b36:	f8c5 e004 	str.w	lr, [r5, #4]
 8000b3a:	6163      	str	r3, [r4, #20]
 8000b3c:	f801 c002 	strb.w	ip, [r1, r2]
 8000b40:	60a8      	str	r0, [r5, #8]
 8000b42:	e786      	b.n	8000a52 <d_exprlist+0x92>
 8000b44:	f8d0 b008 	ldr.w	fp, [r0, #8]
 8000b48:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b4a:	f8db 2008 	ldr.w	r2, [fp, #8]
 8000b4e:	f8db a000 	ldr.w	sl, [fp]
 8000b52:	3a02      	subs	r2, #2
 8000b54:	4413      	add	r3, r2
 8000b56:	6323      	str	r3, [r4, #48]	; 0x30
 8000b58:	4650      	mov	r0, sl
 8000b5a:	4649      	mov	r1, r9
 8000b5c:	f006 f8b6 	bl	8006ccc <strcmp>
 8000b60:	2800      	cmp	r0, #0
 8000b62:	f000 80e4 	beq.w	8000d2e <d_exprlist+0x36e>
 8000b66:	f8db b00c 	ldr.w	fp, [fp, #12]
 8000b6a:	f1bb 0f03 	cmp.w	fp, #3
 8000b6e:	d8c7      	bhi.n	8000b00 <d_exprlist+0x140>
 8000b70:	e8df f01b 	tbh	[pc, fp, lsl #1]
 8000b74:	00040079 	.word	0x00040079
 8000b78:	008100f7 	.word	0x008100f7
 8000b7c:	f89a 3000 	ldrb.w	r3, [sl]
 8000b80:	2b70      	cmp	r3, #112	; 0x70
 8000b82:	d065      	beq.n	8000c50 <d_exprlist+0x290>
 8000b84:	2b6d      	cmp	r3, #109	; 0x6d
 8000b86:	d063      	beq.n	8000c50 <d_exprlist+0x290>
 8000b88:	f04f 0b00 	mov.w	fp, #0
 8000b8c:	4650      	mov	r0, sl
 8000b8e:	49bd      	ldr	r1, [pc, #756]	; (8000e84 <d_exprlist+0x4c4>)
 8000b90:	f006 f89c 	bl	8006ccc <strcmp>
 8000b94:	2800      	cmp	r0, #0
 8000b96:	f040 80c0 	bne.w	8000d1a <d_exprlist+0x35a>
 8000b9a:	4620      	mov	r0, r4
 8000b9c:	f000 fb90 	bl	80012c0 <d_template_args_1>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	f1bb 0f00 	cmp.w	fp, #0
 8000ba6:	d005      	beq.n	8000bb4 <d_exprlist+0x1f4>
 8000ba8:	461a      	mov	r2, r3
 8000baa:	2138      	movs	r1, #56	; 0x38
 8000bac:	4620      	mov	r0, r4
 8000bae:	f7ff fb1f 	bl	80001f0 <d_make_comp>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	462a      	mov	r2, r5
 8000bb6:	2136      	movs	r1, #54	; 0x36
 8000bb8:	4620      	mov	r0, r4
 8000bba:	f7ff fb19 	bl	80001f0 <d_make_comp>
 8000bbe:	4605      	mov	r5, r0
 8000bc0:	e774      	b.n	8000aac <d_exprlist+0xec>
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	60e3      	str	r3, [r4, #12]
 8000bc6:	4620      	mov	r0, r4
 8000bc8:	f000 fb7a 	bl	80012c0 <d_template_args_1>
 8000bcc:	462a      	mov	r2, r5
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2104      	movs	r1, #4
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	f7ff fb0c 	bl	80001f0 <d_make_comp>
 8000bd8:	4605      	mov	r5, r0
 8000bda:	e767      	b.n	8000aac <d_exprlist+0xec>
 8000bdc:	3302      	adds	r3, #2
 8000bde:	60e3      	str	r3, [r4, #12]
 8000be0:	4620      	mov	r0, r4
 8000be2:	f000 fd85 	bl	80016f0 <d_type>
 8000be6:	4682      	mov	sl, r0
 8000be8:	4620      	mov	r0, r4
 8000bea:	f001 fb27 	bl	800223c <d_unqualified_name>
 8000bee:	68e3      	ldr	r3, [r4, #12]
 8000bf0:	781a      	ldrb	r2, [r3, #0]
 8000bf2:	2a49      	cmp	r2, #73	; 0x49
 8000bf4:	4683      	mov	fp, r0
 8000bf6:	d01e      	beq.n	8000c36 <d_exprlist+0x276>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	4629      	mov	r1, r5
 8000bfc:	4652      	mov	r2, sl
 8000bfe:	4620      	mov	r0, r4
 8000c00:	f7ff faf6 	bl	80001f0 <d_make_comp>
 8000c04:	4605      	mov	r5, r0
 8000c06:	e751      	b.n	8000aac <d_exprlist+0xec>
 8000c08:	2a6f      	cmp	r2, #111	; 0x6f
 8000c0a:	f040 8094 	bne.w	8000d36 <d_exprlist+0x376>
 8000c0e:	785a      	ldrb	r2, [r3, #1]
 8000c10:	2a6e      	cmp	r2, #110	; 0x6e
 8000c12:	f47f aef4 	bne.w	80009fe <d_exprlist+0x3e>
 8000c16:	3302      	adds	r3, #2
 8000c18:	60e3      	str	r3, [r4, #12]
 8000c1a:	e70e      	b.n	8000a3a <d_exprlist+0x7a>
 8000c1c:	4620      	mov	r0, r4
 8000c1e:	f7ff fc25 	bl	800046c <d_compact_number>
 8000c22:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8000c26:	4298      	cmp	r0, r3
 8000c28:	f43f af6a 	beq.w	8000b00 <d_exprlist+0x140>
 8000c2c:	1c43      	adds	r3, r0, #1
 8000c2e:	f43f af67 	beq.w	8000b00 <d_exprlist+0x140>
 8000c32:	3001      	adds	r0, #1
 8000c34:	e773      	b.n	8000b1e <d_exprlist+0x15e>
 8000c36:	3301      	adds	r3, #1
 8000c38:	60e3      	str	r3, [r4, #12]
 8000c3a:	4620      	mov	r0, r4
 8000c3c:	f000 fb40 	bl	80012c0 <d_template_args_1>
 8000c40:	465a      	mov	r2, fp
 8000c42:	4603      	mov	r3, r0
 8000c44:	2104      	movs	r1, #4
 8000c46:	4620      	mov	r0, r4
 8000c48:	f7ff fad2 	bl	80001f0 <d_make_comp>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	e7d4      	b.n	8000bfa <d_exprlist+0x23a>
 8000c50:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d197      	bne.n	8000b88 <d_exprlist+0x1c8>
 8000c58:	68e3      	ldr	r3, [r4, #12]
 8000c5a:	781a      	ldrb	r2, [r3, #0]
 8000c5c:	2a5f      	cmp	r2, #95	; 0x5f
 8000c5e:	d195      	bne.n	8000b8c <d_exprlist+0x1cc>
 8000c60:	3301      	adds	r3, #1
 8000c62:	60e3      	str	r3, [r4, #12]
 8000c64:	e790      	b.n	8000b88 <d_exprlist+0x1c8>
 8000c66:	462a      	mov	r2, r5
 8000c68:	2300      	movs	r3, #0
 8000c6a:	2135      	movs	r1, #53	; 0x35
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	f7ff fabf 	bl	80001f0 <d_make_comp>
 8000c72:	4605      	mov	r5, r0
 8000c74:	e71a      	b.n	8000aac <d_exprlist+0xec>
 8000c76:	f1ba 0f00 	cmp.w	sl, #0
 8000c7a:	f43f af41 	beq.w	8000b00 <d_exprlist+0x140>
 8000c7e:	4982      	ldr	r1, [pc, #520]	; (8000e88 <d_exprlist+0x4c8>)
 8000c80:	4650      	mov	r0, sl
 8000c82:	f006 f823 	bl	8006ccc <strcmp>
 8000c86:	2800      	cmp	r0, #0
 8000c88:	f000 80c7 	beq.w	8000e1a <d_exprlist+0x45a>
 8000c8c:	f89a 3000 	ldrb.w	r3, [sl]
 8000c90:	2b66      	cmp	r3, #102	; 0x66
 8000c92:	f000 80ed 	beq.w	8000e70 <d_exprlist+0x4b0>
 8000c96:	2b6e      	cmp	r3, #110	; 0x6e
 8000c98:	f47f af32 	bne.w	8000b00 <d_exprlist+0x140>
 8000c9c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8000ca0:	2b77      	cmp	r3, #119	; 0x77
 8000ca2:	d002      	beq.n	8000caa <d_exprlist+0x2ea>
 8000ca4:	2b61      	cmp	r3, #97	; 0x61
 8000ca6:	f47f af2b 	bne.w	8000b00 <d_exprlist+0x140>
 8000caa:	215f      	movs	r1, #95	; 0x5f
 8000cac:	4620      	mov	r0, r4
 8000cae:	f7ff fe87 	bl	80009c0 <d_exprlist>
 8000cb2:	4682      	mov	sl, r0
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f000 fd1b 	bl	80016f0 <d_type>
 8000cba:	68e3      	ldr	r3, [r4, #12]
 8000cbc:	781a      	ldrb	r2, [r3, #0]
 8000cbe:	2a45      	cmp	r2, #69	; 0x45
 8000cc0:	4683      	mov	fp, r0
 8000cc2:	f000 8086 	beq.w	8000dd2 <d_exprlist+0x412>
 8000cc6:	2a70      	cmp	r2, #112	; 0x70
 8000cc8:	f000 80c6 	beq.w	8000e58 <d_exprlist+0x498>
 8000ccc:	2a69      	cmp	r2, #105	; 0x69
 8000cce:	f47f af17 	bne.w	8000b00 <d_exprlist+0x140>
 8000cd2:	785b      	ldrb	r3, [r3, #1]
 8000cd4:	2b6c      	cmp	r3, #108	; 0x6c
 8000cd6:	f47f af13 	bne.w	8000b00 <d_exprlist+0x140>
 8000cda:	4620      	mov	r0, r4
 8000cdc:	f000 f8de 	bl	8000e9c <d_expression_1>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	465a      	mov	r2, fp
 8000ce4:	213b      	movs	r1, #59	; 0x3b
 8000ce6:	4620      	mov	r0, r4
 8000ce8:	f7ff fa82 	bl	80001f0 <d_make_comp>
 8000cec:	4652      	mov	r2, sl
 8000cee:	4603      	mov	r3, r0
 8000cf0:	213a      	movs	r1, #58	; 0x3a
 8000cf2:	4620      	mov	r0, r4
 8000cf4:	f7ff fa7c 	bl	80001f0 <d_make_comp>
 8000cf8:	462a      	mov	r2, r5
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2139      	movs	r1, #57	; 0x39
 8000cfe:	4620      	mov	r0, r4
 8000d00:	f7ff fa76 	bl	80001f0 <d_make_comp>
 8000d04:	4605      	mov	r5, r0
 8000d06:	e6d1      	b.n	8000aac <d_exprlist+0xec>
 8000d08:	3301      	adds	r3, #1
 8000d0a:	60c3      	str	r3, [r0, #12]
 8000d0c:	212e      	movs	r1, #46	; 0x2e
 8000d0e:	4613      	mov	r3, r2
 8000d10:	b003      	add	sp, #12
 8000d12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d16:	f7ff ba6b 	b.w	80001f0 <d_make_comp>
 8000d1a:	4620      	mov	r0, r4
 8000d1c:	f000 f8be 	bl	8000e9c <d_expression_1>
 8000d20:	4603      	mov	r3, r0
 8000d22:	e73e      	b.n	8000ba2 <d_exprlist+0x1e2>
 8000d24:	4628      	mov	r0, r5
 8000d26:	6366      	str	r6, [r4, #52]	; 0x34
 8000d28:	b003      	add	sp, #12
 8000d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d2e:	4620      	mov	r0, r4
 8000d30:	f000 fcde 	bl	80016f0 <d_type>
 8000d34:	e73d      	b.n	8000bb2 <d_exprlist+0x1f2>
 8000d36:	2a69      	cmp	r2, #105	; 0x69
 8000d38:	f47f aed4 	bne.w	8000ae4 <d_exprlist+0x124>
 8000d3c:	785a      	ldrb	r2, [r3, #1]
 8000d3e:	2a6c      	cmp	r2, #108	; 0x6c
 8000d40:	f47f ae5d 	bne.w	80009fe <d_exprlist+0x3e>
 8000d44:	2500      	movs	r5, #0
 8000d46:	3302      	adds	r3, #2
 8000d48:	60e3      	str	r3, [r4, #12]
 8000d4a:	2145      	movs	r1, #69	; 0x45
 8000d4c:	4620      	mov	r0, r4
 8000d4e:	f7ff fe37 	bl	80009c0 <d_exprlist>
 8000d52:	462a      	mov	r2, r5
 8000d54:	4603      	mov	r3, r0
 8000d56:	2130      	movs	r1, #48	; 0x30
 8000d58:	4620      	mov	r0, r4
 8000d5a:	f7ff fa49 	bl	80001f0 <d_make_comp>
 8000d5e:	4605      	mov	r5, r0
 8000d60:	e6a4      	b.n	8000aac <d_exprlist+0xec>
 8000d62:	f1ba 0f00 	cmp.w	sl, #0
 8000d66:	f43f aecb 	beq.w	8000b00 <d_exprlist+0x140>
 8000d6a:	68ab      	ldr	r3, [r5, #8]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	785a      	ldrb	r2, [r3, #1]
 8000d70:	2a63      	cmp	r2, #99	; 0x63
 8000d72:	d03a      	beq.n	8000dea <d_exprlist+0x42a>
 8000d74:	f89a 3000 	ldrb.w	r3, [sl]
 8000d78:	2b66      	cmp	r3, #102	; 0x66
 8000d7a:	d149      	bne.n	8000e10 <d_exprlist+0x450>
 8000d7c:	4620      	mov	r0, r4
 8000d7e:	f001 f8b1 	bl	8001ee4 <d_operator_name>
 8000d82:	4683      	mov	fp, r0
 8000d84:	4941      	ldr	r1, [pc, #260]	; (8000e8c <d_exprlist+0x4cc>)
 8000d86:	4650      	mov	r0, sl
 8000d88:	f005 ffa0 	bl	8006ccc <strcmp>
 8000d8c:	2800      	cmp	r0, #0
 8000d8e:	d039      	beq.n	8000e04 <d_exprlist+0x444>
 8000d90:	493f      	ldr	r1, [pc, #252]	; (8000e90 <d_exprlist+0x4d0>)
 8000d92:	4650      	mov	r0, sl
 8000d94:	f005 ff9a 	bl	8006ccc <strcmp>
 8000d98:	b128      	cbz	r0, 8000da6 <d_exprlist+0x3e6>
 8000d9a:	4650      	mov	r0, sl
 8000d9c:	493d      	ldr	r1, [pc, #244]	; (8000e94 <d_exprlist+0x4d4>)
 8000d9e:	f005 ff95 	bl	8006ccc <strcmp>
 8000da2:	2800      	cmp	r0, #0
 8000da4:	d168      	bne.n	8000e78 <d_exprlist+0x4b8>
 8000da6:	4620      	mov	r0, r4
 8000da8:	f001 fa48 	bl	800223c <d_unqualified_name>
 8000dac:	68e3      	ldr	r3, [r4, #12]
 8000dae:	781a      	ldrb	r2, [r3, #0]
 8000db0:	2a49      	cmp	r2, #73	; 0x49
 8000db2:	4682      	mov	sl, r0
 8000db4:	d043      	beq.n	8000e3e <d_exprlist+0x47e>
 8000db6:	4653      	mov	r3, sl
 8000db8:	465a      	mov	r2, fp
 8000dba:	2138      	movs	r1, #56	; 0x38
 8000dbc:	4620      	mov	r0, r4
 8000dbe:	f7ff fa17 	bl	80001f0 <d_make_comp>
 8000dc2:	462a      	mov	r2, r5
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2137      	movs	r1, #55	; 0x37
 8000dc8:	4620      	mov	r0, r4
 8000dca:	f7ff fa11 	bl	80001f0 <d_make_comp>
 8000dce:	4605      	mov	r5, r0
 8000dd0:	e66c      	b.n	8000aac <d_exprlist+0xec>
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	60e3      	str	r3, [r4, #12]
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e783      	b.n	8000ce2 <d_exprlist+0x322>
 8000dda:	3301      	adds	r3, #1
 8000ddc:	60e3      	str	r3, [r4, #12]
 8000dde:	2145      	movs	r1, #69	; 0x45
 8000de0:	4620      	mov	r0, r4
 8000de2:	f7ff fded 	bl	80009c0 <d_exprlist>
 8000de6:	4603      	mov	r3, r0
 8000de8:	e6e4      	b.n	8000bb4 <d_exprlist+0x1f4>
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 8000df0:	2a01      	cmp	r2, #1
 8000df2:	d902      	bls.n	8000dfa <d_exprlist+0x43a>
 8000df4:	3b72      	subs	r3, #114	; 0x72
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d8bc      	bhi.n	8000d74 <d_exprlist+0x3b4>
 8000dfa:	4620      	mov	r0, r4
 8000dfc:	f000 fc78 	bl	80016f0 <d_type>
 8000e00:	4683      	mov	fp, r0
 8000e02:	e7bf      	b.n	8000d84 <d_exprlist+0x3c4>
 8000e04:	2145      	movs	r1, #69	; 0x45
 8000e06:	4620      	mov	r0, r4
 8000e08:	f7ff fdda 	bl	80009c0 <d_exprlist>
 8000e0c:	4682      	mov	sl, r0
 8000e0e:	e7d2      	b.n	8000db6 <d_exprlist+0x3f6>
 8000e10:	4620      	mov	r0, r4
 8000e12:	f000 f843 	bl	8000e9c <d_expression_1>
 8000e16:	4683      	mov	fp, r0
 8000e18:	e7b4      	b.n	8000d84 <d_exprlist+0x3c4>
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	f000 f83e 	bl	8000e9c <d_expression_1>
 8000e20:	4682      	mov	sl, r0
 8000e22:	4620      	mov	r0, r4
 8000e24:	f000 f83a 	bl	8000e9c <d_expression_1>
 8000e28:	4683      	mov	fp, r0
 8000e2a:	4620      	mov	r0, r4
 8000e2c:	f000 f836 	bl	8000e9c <d_expression_1>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2800      	cmp	r0, #0
 8000e34:	f47f af55 	bne.w	8000ce2 <d_exprlist+0x322>
 8000e38:	6366      	str	r6, [r4, #52]	; 0x34
 8000e3a:	4605      	mov	r5, r0
 8000e3c:	e61b      	b.n	8000a76 <d_exprlist+0xb6>
 8000e3e:	3301      	adds	r3, #1
 8000e40:	60e3      	str	r3, [r4, #12]
 8000e42:	4620      	mov	r0, r4
 8000e44:	f000 fa3c 	bl	80012c0 <d_template_args_1>
 8000e48:	4652      	mov	r2, sl
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2104      	movs	r1, #4
 8000e4e:	4620      	mov	r0, r4
 8000e50:	f7ff f9ce 	bl	80001f0 <d_make_comp>
 8000e54:	4682      	mov	sl, r0
 8000e56:	e7ae      	b.n	8000db6 <d_exprlist+0x3f6>
 8000e58:	785a      	ldrb	r2, [r3, #1]
 8000e5a:	2a69      	cmp	r2, #105	; 0x69
 8000e5c:	f47f ae50 	bne.w	8000b00 <d_exprlist+0x140>
 8000e60:	3302      	adds	r3, #2
 8000e62:	60e3      	str	r3, [r4, #12]
 8000e64:	2145      	movs	r1, #69	; 0x45
 8000e66:	4620      	mov	r0, r4
 8000e68:	f7ff fdaa 	bl	80009c0 <d_exprlist>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	e738      	b.n	8000ce2 <d_exprlist+0x322>
 8000e70:	4620      	mov	r0, r4
 8000e72:	f001 f837 	bl	8001ee4 <d_operator_name>
 8000e76:	e7d3      	b.n	8000e20 <d_exprlist+0x460>
 8000e78:	4620      	mov	r0, r4
 8000e7a:	f000 f80f 	bl	8000e9c <d_expression_1>
 8000e7e:	4682      	mov	sl, r0
 8000e80:	e799      	b.n	8000db6 <d_exprlist+0x3f6>
 8000e82:	bf00      	nop
 8000e84:	08034e24 	.word	0x08034e24
 8000e88:	08034e34 	.word	0x08034e34
 8000e8c:	08034e28 	.word	0x08034e28
 8000e90:	08034e2c 	.word	0x08034e2c
 8000e94:	08034e30 	.word	0x08034e30
 8000e98:	08035340 	.word	0x08035340

08000e9c <d_expression_1>:
 8000e9c:	68c1      	ldr	r1, [r0, #12]
 8000e9e:	780b      	ldrb	r3, [r1, #0]
 8000ea0:	2b4c      	cmp	r3, #76	; 0x4c
 8000ea2:	d067      	beq.n	8000f74 <d_expression_1+0xd8>
 8000ea4:	2b54      	cmp	r3, #84	; 0x54
 8000ea6:	d067      	beq.n	8000f78 <d_expression_1+0xdc>
 8000ea8:	2b73      	cmp	r3, #115	; 0x73
 8000eaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000eae:	4604      	mov	r4, r0
 8000eb0:	d01c      	beq.n	8000eec <d_expression_1+0x50>
 8000eb2:	2b66      	cmp	r3, #102	; 0x66
 8000eb4:	d13d      	bne.n	8000f32 <d_expression_1+0x96>
 8000eb6:	784b      	ldrb	r3, [r1, #1]
 8000eb8:	2b70      	cmp	r3, #112	; 0x70
 8000eba:	d11d      	bne.n	8000ef8 <d_expression_1+0x5c>
 8000ebc:	1c8b      	adds	r3, r1, #2
 8000ebe:	60c3      	str	r3, [r0, #12]
 8000ec0:	788b      	ldrb	r3, [r1, #2]
 8000ec2:	2b54      	cmp	r3, #84	; 0x54
 8000ec4:	f040 809a 	bne.w	8000ffc <d_expression_1+0x160>
 8000ec8:	3103      	adds	r1, #3
 8000eca:	60c1      	str	r1, [r0, #12]
 8000ecc:	2000      	movs	r0, #0
 8000ece:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	da4a      	bge.n	8000f6c <d_expression_1+0xd0>
 8000ed6:	6921      	ldr	r1, [r4, #16]
 8000ed8:	011a      	lsls	r2, r3, #4
 8000eda:	188d      	adds	r5, r1, r2
 8000edc:	3301      	adds	r3, #1
 8000ede:	2700      	movs	r7, #0
 8000ee0:	2606      	movs	r6, #6
 8000ee2:	606f      	str	r7, [r5, #4]
 8000ee4:	6163      	str	r3, [r4, #20]
 8000ee6:	548e      	strb	r6, [r1, r2]
 8000ee8:	60a8      	str	r0, [r5, #8]
 8000eea:	e02f      	b.n	8000f4c <d_expression_1+0xb0>
 8000eec:	784b      	ldrb	r3, [r1, #1]
 8000eee:	2b72      	cmp	r3, #114	; 0x72
 8000ef0:	d06e      	beq.n	8000fd0 <d_expression_1+0x134>
 8000ef2:	2b70      	cmp	r3, #112	; 0x70
 8000ef4:	f000 8160 	beq.w	80011b8 <d_expression_1+0x31c>
 8000ef8:	4620      	mov	r0, r4
 8000efa:	f000 fff3 	bl	8001ee4 <d_operator_name>
 8000efe:	4605      	mov	r5, r0
 8000f00:	b3a0      	cbz	r0, 8000f6c <d_expression_1+0xd0>
 8000f02:	7803      	ldrb	r3, [r0, #0]
 8000f04:	2b31      	cmp	r3, #49	; 0x31
 8000f06:	d039      	beq.n	8000f7c <d_expression_1+0xe0>
 8000f08:	2b32      	cmp	r3, #50	; 0x32
 8000f0a:	f000 8127 	beq.w	800115c <d_expression_1+0x2c0>
 8000f0e:	2b33      	cmp	r3, #51	; 0x33
 8000f10:	d12c      	bne.n	8000f6c <d_expression_1+0xd0>
 8000f12:	68e3      	ldr	r3, [r4, #12]
 8000f14:	781a      	ldrb	r2, [r3, #0]
 8000f16:	2a5f      	cmp	r2, #95	; 0x5f
 8000f18:	f000 8176 	beq.w	8001208 <d_expression_1+0x36c>
 8000f1c:	4620      	mov	r0, r4
 8000f1e:	f7ff ffbd 	bl	8000e9c <d_expression_1>
 8000f22:	4603      	mov	r3, r0
 8000f24:	462a      	mov	r2, r5
 8000f26:	4620      	mov	r0, r4
 8000f28:	2136      	movs	r1, #54	; 0x36
 8000f2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f2e:	f7ff b95f 	b.w	80001f0 <d_make_comp>
 8000f32:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000f36:	2a09      	cmp	r2, #9
 8000f38:	d841      	bhi.n	8000fbe <d_expression_1+0x122>
 8000f3a:	4620      	mov	r0, r4
 8000f3c:	f001 f97e 	bl	800223c <d_unqualified_name>
 8000f40:	4605      	mov	r5, r0
 8000f42:	b198      	cbz	r0, 8000f6c <d_expression_1+0xd0>
 8000f44:	68e3      	ldr	r3, [r4, #12]
 8000f46:	781a      	ldrb	r2, [r3, #0]
 8000f48:	2a49      	cmp	r2, #73	; 0x49
 8000f4a:	d02b      	beq.n	8000fa4 <d_expression_1+0x108>
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f52:	2b74      	cmp	r3, #116	; 0x74
 8000f54:	d1d0      	bne.n	8000ef8 <d_expression_1+0x5c>
 8000f56:	784b      	ldrb	r3, [r1, #1]
 8000f58:	2b6c      	cmp	r3, #108	; 0x6c
 8000f5a:	d1cd      	bne.n	8000ef8 <d_expression_1+0x5c>
 8000f5c:	f000 fbc8 	bl	80016f0 <d_type>
 8000f60:	68e1      	ldr	r1, [r4, #12]
 8000f62:	784b      	ldrb	r3, [r1, #1]
 8000f64:	4605      	mov	r5, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f040 8190 	bne.w	800128c <d_expression_1+0x3f0>
 8000f6c:	2500      	movs	r5, #0
 8000f6e:	4628      	mov	r0, r5
 8000f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f74:	f001 bdac 	b.w	8002ad0 <d_expr_primary>
 8000f78:	f7ff ba92 	b.w	80004a0 <d_template_param>
 8000f7c:	6887      	ldr	r7, [r0, #8]
 8000f7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000f80:	68ba      	ldr	r2, [r7, #8]
 8000f82:	683e      	ldr	r6, [r7, #0]
 8000f84:	49c8      	ldr	r1, [pc, #800]	; (80012a8 <d_expression_1+0x40c>)
 8000f86:	3a02      	subs	r2, #2
 8000f88:	4413      	add	r3, r2
 8000f8a:	6323      	str	r3, [r4, #48]	; 0x30
 8000f8c:	4630      	mov	r0, r6
 8000f8e:	f005 fe9d 	bl	8006ccc <strcmp>
 8000f92:	2800      	cmp	r0, #0
 8000f94:	d05b      	beq.n	800104e <d_expression_1+0x1b2>
 8000f96:	68ff      	ldr	r7, [r7, #12]
 8000f98:	2f03      	cmp	r7, #3
 8000f9a:	d8e7      	bhi.n	8000f6c <d_expression_1+0xd0>
 8000f9c:	e8df f007 	tbb	[pc, r7]
 8000fa0:	64a7385c 	.word	0x64a7385c
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	60e3      	str	r3, [r4, #12]
 8000fa8:	4620      	mov	r0, r4
 8000faa:	f000 f989 	bl	80012c0 <d_template_args_1>
 8000fae:	462a      	mov	r2, r5
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2104      	movs	r1, #4
 8000fb4:	4620      	mov	r0, r4
 8000fb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000fba:	f7ff b919 	b.w	80001f0 <d_make_comp>
 8000fbe:	2b6f      	cmp	r3, #111	; 0x6f
 8000fc0:	f040 815c 	bne.w	800127c <d_expression_1+0x3e0>
 8000fc4:	784b      	ldrb	r3, [r1, #1]
 8000fc6:	2b6e      	cmp	r3, #110	; 0x6e
 8000fc8:	d196      	bne.n	8000ef8 <d_expression_1+0x5c>
 8000fca:	3102      	adds	r1, #2
 8000fcc:	60c1      	str	r1, [r0, #12]
 8000fce:	e7b4      	b.n	8000f3a <d_expression_1+0x9e>
 8000fd0:	3102      	adds	r1, #2
 8000fd2:	60c1      	str	r1, [r0, #12]
 8000fd4:	f000 fb8c 	bl	80016f0 <d_type>
 8000fd8:	4605      	mov	r5, r0
 8000fda:	4620      	mov	r0, r4
 8000fdc:	f001 f92e 	bl	800223c <d_unqualified_name>
 8000fe0:	68e3      	ldr	r3, [r4, #12]
 8000fe2:	7819      	ldrb	r1, [r3, #0]
 8000fe4:	2949      	cmp	r1, #73	; 0x49
 8000fe6:	4606      	mov	r6, r0
 8000fe8:	f000 80d9 	beq.w	800119e <d_expression_1+0x302>
 8000fec:	4603      	mov	r3, r0
 8000fee:	462a      	mov	r2, r5
 8000ff0:	4620      	mov	r0, r4
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000ff8:	f7ff b8fa 	b.w	80001f0 <d_make_comp>
 8000ffc:	f7ff fa36 	bl	800046c <d_compact_number>
 8001000:	43c3      	mvns	r3, r0
 8001002:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 8001006:	bf18      	it	ne
 8001008:	3001      	addne	r0, #1
 800100a:	f47f af60 	bne.w	8000ece <d_expression_1+0x32>
 800100e:	e7ad      	b.n	8000f6c <d_expression_1+0xd0>
 8001010:	2e00      	cmp	r6, #0
 8001012:	d083      	beq.n	8000f1c <d_expression_1+0x80>
 8001014:	7833      	ldrb	r3, [r6, #0]
 8001016:	2b70      	cmp	r3, #112	; 0x70
 8001018:	f000 80b0 	beq.w	800117c <d_expression_1+0x2e0>
 800101c:	2b6d      	cmp	r3, #109	; 0x6d
 800101e:	f000 80ad 	beq.w	800117c <d_expression_1+0x2e0>
 8001022:	2700      	movs	r7, #0
 8001024:	4630      	mov	r0, r6
 8001026:	49a1      	ldr	r1, [pc, #644]	; (80012ac <d_expression_1+0x410>)
 8001028:	f005 fe50 	bl	8006ccc <strcmp>
 800102c:	2800      	cmp	r0, #0
 800102e:	f040 80b1 	bne.w	8001194 <d_expression_1+0x2f8>
 8001032:	4620      	mov	r0, r4
 8001034:	f000 f944 	bl	80012c0 <d_template_args_1>
 8001038:	4603      	mov	r3, r0
 800103a:	2f00      	cmp	r7, #0
 800103c:	f43f af72 	beq.w	8000f24 <d_expression_1+0x88>
 8001040:	461a      	mov	r2, r3
 8001042:	2138      	movs	r1, #56	; 0x38
 8001044:	4620      	mov	r0, r4
 8001046:	f7ff f8d3 	bl	80001f0 <d_make_comp>
 800104a:	4603      	mov	r3, r0
 800104c:	e76a      	b.n	8000f24 <d_expression_1+0x88>
 800104e:	4620      	mov	r0, r4
 8001050:	f000 fb4e 	bl	80016f0 <d_type>
 8001054:	4603      	mov	r3, r0
 8001056:	e765      	b.n	8000f24 <d_expression_1+0x88>
 8001058:	462a      	mov	r2, r5
 800105a:	4620      	mov	r0, r4
 800105c:	2300      	movs	r3, #0
 800105e:	2135      	movs	r1, #53	; 0x35
 8001060:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001064:	f7ff b8c4 	b.w	80001f0 <d_make_comp>
 8001068:	4991      	ldr	r1, [pc, #580]	; (80012b0 <d_expression_1+0x414>)
 800106a:	4630      	mov	r0, r6
 800106c:	f005 fe2e 	bl	8006ccc <strcmp>
 8001070:	2800      	cmp	r0, #0
 8001072:	f000 80d1 	beq.w	8001218 <d_expression_1+0x37c>
 8001076:	7833      	ldrb	r3, [r6, #0]
 8001078:	2b66      	cmp	r3, #102	; 0x66
 800107a:	f000 80f6 	beq.w	800126a <d_expression_1+0x3ce>
 800107e:	2b6e      	cmp	r3, #110	; 0x6e
 8001080:	f47f af74 	bne.w	8000f6c <d_expression_1+0xd0>
 8001084:	7873      	ldrb	r3, [r6, #1]
 8001086:	2b77      	cmp	r3, #119	; 0x77
 8001088:	d002      	beq.n	8001090 <d_expression_1+0x1f4>
 800108a:	2b61      	cmp	r3, #97	; 0x61
 800108c:	f47f af6e 	bne.w	8000f6c <d_expression_1+0xd0>
 8001090:	215f      	movs	r1, #95	; 0x5f
 8001092:	4620      	mov	r0, r4
 8001094:	f7ff fc94 	bl	80009c0 <d_exprlist>
 8001098:	4606      	mov	r6, r0
 800109a:	4620      	mov	r0, r4
 800109c:	f000 fb28 	bl	80016f0 <d_type>
 80010a0:	68e3      	ldr	r3, [r4, #12]
 80010a2:	7819      	ldrb	r1, [r3, #0]
 80010a4:	2945      	cmp	r1, #69	; 0x45
 80010a6:	4607      	mov	r7, r0
 80010a8:	f000 80aa 	beq.w	8001200 <d_expression_1+0x364>
 80010ac:	2970      	cmp	r1, #112	; 0x70
 80010ae:	f000 80d0 	beq.w	8001252 <d_expression_1+0x3b6>
 80010b2:	2969      	cmp	r1, #105	; 0x69
 80010b4:	f47f af5a 	bne.w	8000f6c <d_expression_1+0xd0>
 80010b8:	785b      	ldrb	r3, [r3, #1]
 80010ba:	2b6c      	cmp	r3, #108	; 0x6c
 80010bc:	f47f af56 	bne.w	8000f6c <d_expression_1+0xd0>
 80010c0:	4620      	mov	r0, r4
 80010c2:	f7ff feeb 	bl	8000e9c <d_expression_1>
 80010c6:	4603      	mov	r3, r0
 80010c8:	463a      	mov	r2, r7
 80010ca:	213b      	movs	r1, #59	; 0x3b
 80010cc:	4620      	mov	r0, r4
 80010ce:	f7ff f88f 	bl	80001f0 <d_make_comp>
 80010d2:	4632      	mov	r2, r6
 80010d4:	4603      	mov	r3, r0
 80010d6:	213a      	movs	r1, #58	; 0x3a
 80010d8:	4620      	mov	r0, r4
 80010da:	f7ff f889 	bl	80001f0 <d_make_comp>
 80010de:	462a      	mov	r2, r5
 80010e0:	4603      	mov	r3, r0
 80010e2:	2139      	movs	r1, #57	; 0x39
 80010e4:	4620      	mov	r0, r4
 80010e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80010ea:	f7ff b881 	b.w	80001f0 <d_make_comp>
 80010ee:	2e00      	cmp	r6, #0
 80010f0:	f43f af3c 	beq.w	8000f6c <d_expression_1+0xd0>
 80010f4:	68ab      	ldr	r3, [r5, #8]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	785a      	ldrb	r2, [r3, #1]
 80010fa:	2a63      	cmp	r2, #99	; 0x63
 80010fc:	d068      	beq.n	80011d0 <d_expression_1+0x334>
 80010fe:	7833      	ldrb	r3, [r6, #0]
 8001100:	2b66      	cmp	r3, #102	; 0x66
 8001102:	d178      	bne.n	80011f6 <d_expression_1+0x35a>
 8001104:	4620      	mov	r0, r4
 8001106:	f000 feed 	bl	8001ee4 <d_operator_name>
 800110a:	4607      	mov	r7, r0
 800110c:	4969      	ldr	r1, [pc, #420]	; (80012b4 <d_expression_1+0x418>)
 800110e:	4630      	mov	r0, r6
 8001110:	f005 fddc 	bl	8006ccc <strcmp>
 8001114:	2800      	cmp	r0, #0
 8001116:	d068      	beq.n	80011ea <d_expression_1+0x34e>
 8001118:	4967      	ldr	r1, [pc, #412]	; (80012b8 <d_expression_1+0x41c>)
 800111a:	4630      	mov	r0, r6
 800111c:	f005 fdd6 	bl	8006ccc <strcmp>
 8001120:	b130      	cbz	r0, 8001130 <d_expression_1+0x294>
 8001122:	4630      	mov	r0, r6
 8001124:	4965      	ldr	r1, [pc, #404]	; (80012bc <d_expression_1+0x420>)
 8001126:	f005 fdd1 	bl	8006ccc <strcmp>
 800112a:	2800      	cmp	r0, #0
 800112c:	f040 80a1 	bne.w	8001272 <d_expression_1+0x3d6>
 8001130:	4620      	mov	r0, r4
 8001132:	f001 f883 	bl	800223c <d_unqualified_name>
 8001136:	68e3      	ldr	r3, [r4, #12]
 8001138:	781a      	ldrb	r2, [r3, #0]
 800113a:	2a49      	cmp	r2, #73	; 0x49
 800113c:	4606      	mov	r6, r0
 800113e:	d07b      	beq.n	8001238 <d_expression_1+0x39c>
 8001140:	4633      	mov	r3, r6
 8001142:	463a      	mov	r2, r7
 8001144:	2138      	movs	r1, #56	; 0x38
 8001146:	4620      	mov	r0, r4
 8001148:	f7ff f852 	bl	80001f0 <d_make_comp>
 800114c:	462a      	mov	r2, r5
 800114e:	4603      	mov	r3, r0
 8001150:	2137      	movs	r1, #55	; 0x37
 8001152:	4620      	mov	r0, r4
 8001154:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001158:	f7ff b84a 	b.w	80001f0 <d_make_comp>
 800115c:	6883      	ldr	r3, [r0, #8]
 800115e:	2b03      	cmp	r3, #3
 8001160:	f63f af04 	bhi.w	8000f6c <d_expression_1+0xd0>
 8001164:	a201      	add	r2, pc, #4	; (adr r2, 800116c <d_expression_1+0x2d0>)
 8001166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800116a:	bf00      	nop
 800116c:	08001059 	.word	0x08001059
 8001170:	08000f1d 	.word	0x08000f1d
 8001174:	08000f6d 	.word	0x08000f6d
 8001178:	08000f6d 	.word	0x08000f6d
 800117c:	7872      	ldrb	r2, [r6, #1]
 800117e:	429a      	cmp	r2, r3
 8001180:	f47f af4f 	bne.w	8001022 <d_expression_1+0x186>
 8001184:	68e3      	ldr	r3, [r4, #12]
 8001186:	781a      	ldrb	r2, [r3, #0]
 8001188:	2a5f      	cmp	r2, #95	; 0x5f
 800118a:	f47f af4b 	bne.w	8001024 <d_expression_1+0x188>
 800118e:	3301      	adds	r3, #1
 8001190:	60e3      	str	r3, [r4, #12]
 8001192:	e746      	b.n	8001022 <d_expression_1+0x186>
 8001194:	4620      	mov	r0, r4
 8001196:	f7ff fe81 	bl	8000e9c <d_expression_1>
 800119a:	4603      	mov	r3, r0
 800119c:	e74d      	b.n	800103a <d_expression_1+0x19e>
 800119e:	3301      	adds	r3, #1
 80011a0:	60e3      	str	r3, [r4, #12]
 80011a2:	4620      	mov	r0, r4
 80011a4:	f000 f88c 	bl	80012c0 <d_template_args_1>
 80011a8:	4632      	mov	r2, r6
 80011aa:	4603      	mov	r3, r0
 80011ac:	2104      	movs	r1, #4
 80011ae:	4620      	mov	r0, r4
 80011b0:	f7ff f81e 	bl	80001f0 <d_make_comp>
 80011b4:	4603      	mov	r3, r0
 80011b6:	e71a      	b.n	8000fee <d_expression_1+0x152>
 80011b8:	3102      	adds	r1, #2
 80011ba:	60e1      	str	r1, [r4, #12]
 80011bc:	f7ff fe6e 	bl	8000e9c <d_expression_1>
 80011c0:	2300      	movs	r3, #0
 80011c2:	4602      	mov	r2, r0
 80011c4:	214a      	movs	r1, #74	; 0x4a
 80011c6:	4620      	mov	r0, r4
 80011c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80011cc:	f7ff b810 	b.w	80001f0 <d_make_comp>
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 80011d6:	2a01      	cmp	r2, #1
 80011d8:	d902      	bls.n	80011e0 <d_expression_1+0x344>
 80011da:	3b72      	subs	r3, #114	; 0x72
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d88e      	bhi.n	80010fe <d_expression_1+0x262>
 80011e0:	4620      	mov	r0, r4
 80011e2:	f000 fa85 	bl	80016f0 <d_type>
 80011e6:	4607      	mov	r7, r0
 80011e8:	e790      	b.n	800110c <d_expression_1+0x270>
 80011ea:	2145      	movs	r1, #69	; 0x45
 80011ec:	4620      	mov	r0, r4
 80011ee:	f7ff fbe7 	bl	80009c0 <d_exprlist>
 80011f2:	4606      	mov	r6, r0
 80011f4:	e7a4      	b.n	8001140 <d_expression_1+0x2a4>
 80011f6:	4620      	mov	r0, r4
 80011f8:	f7ff fe50 	bl	8000e9c <d_expression_1>
 80011fc:	4607      	mov	r7, r0
 80011fe:	e785      	b.n	800110c <d_expression_1+0x270>
 8001200:	3301      	adds	r3, #1
 8001202:	60e3      	str	r3, [r4, #12]
 8001204:	2300      	movs	r3, #0
 8001206:	e75f      	b.n	80010c8 <d_expression_1+0x22c>
 8001208:	3301      	adds	r3, #1
 800120a:	60e3      	str	r3, [r4, #12]
 800120c:	2145      	movs	r1, #69	; 0x45
 800120e:	4620      	mov	r0, r4
 8001210:	f7ff fbd6 	bl	80009c0 <d_exprlist>
 8001214:	4603      	mov	r3, r0
 8001216:	e685      	b.n	8000f24 <d_expression_1+0x88>
 8001218:	4620      	mov	r0, r4
 800121a:	f7ff fe3f 	bl	8000e9c <d_expression_1>
 800121e:	4606      	mov	r6, r0
 8001220:	4620      	mov	r0, r4
 8001222:	f7ff fe3b 	bl	8000e9c <d_expression_1>
 8001226:	4607      	mov	r7, r0
 8001228:	4620      	mov	r0, r4
 800122a:	f7ff fe37 	bl	8000e9c <d_expression_1>
 800122e:	4603      	mov	r3, r0
 8001230:	2800      	cmp	r0, #0
 8001232:	f47f af49 	bne.w	80010c8 <d_expression_1+0x22c>
 8001236:	e699      	b.n	8000f6c <d_expression_1+0xd0>
 8001238:	3301      	adds	r3, #1
 800123a:	60e3      	str	r3, [r4, #12]
 800123c:	4620      	mov	r0, r4
 800123e:	f000 f83f 	bl	80012c0 <d_template_args_1>
 8001242:	4632      	mov	r2, r6
 8001244:	4603      	mov	r3, r0
 8001246:	2104      	movs	r1, #4
 8001248:	4620      	mov	r0, r4
 800124a:	f7fe ffd1 	bl	80001f0 <d_make_comp>
 800124e:	4606      	mov	r6, r0
 8001250:	e776      	b.n	8001140 <d_expression_1+0x2a4>
 8001252:	785a      	ldrb	r2, [r3, #1]
 8001254:	2a69      	cmp	r2, #105	; 0x69
 8001256:	f47f ae89 	bne.w	8000f6c <d_expression_1+0xd0>
 800125a:	3302      	adds	r3, #2
 800125c:	60e3      	str	r3, [r4, #12]
 800125e:	2145      	movs	r1, #69	; 0x45
 8001260:	4620      	mov	r0, r4
 8001262:	f7ff fbad 	bl	80009c0 <d_exprlist>
 8001266:	4603      	mov	r3, r0
 8001268:	e72e      	b.n	80010c8 <d_expression_1+0x22c>
 800126a:	4620      	mov	r0, r4
 800126c:	f000 fe3a 	bl	8001ee4 <d_operator_name>
 8001270:	e7d5      	b.n	800121e <d_expression_1+0x382>
 8001272:	4620      	mov	r0, r4
 8001274:	f7ff fe12 	bl	8000e9c <d_expression_1>
 8001278:	4606      	mov	r6, r0
 800127a:	e761      	b.n	8001140 <d_expression_1+0x2a4>
 800127c:	2b69      	cmp	r3, #105	; 0x69
 800127e:	f47f ae68 	bne.w	8000f52 <d_expression_1+0xb6>
 8001282:	784b      	ldrb	r3, [r1, #1]
 8001284:	2b6c      	cmp	r3, #108	; 0x6c
 8001286:	f47f ae37 	bne.w	8000ef8 <d_expression_1+0x5c>
 800128a:	2500      	movs	r5, #0
 800128c:	3102      	adds	r1, #2
 800128e:	60e1      	str	r1, [r4, #12]
 8001290:	4620      	mov	r0, r4
 8001292:	2145      	movs	r1, #69	; 0x45
 8001294:	f7ff fb94 	bl	80009c0 <d_exprlist>
 8001298:	462a      	mov	r2, r5
 800129a:	4603      	mov	r3, r0
 800129c:	2130      	movs	r1, #48	; 0x30
 800129e:	4620      	mov	r0, r4
 80012a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80012a4:	f7fe bfa4 	b.w	80001f0 <d_make_comp>
 80012a8:	08035340 	.word	0x08035340
 80012ac:	08034e24 	.word	0x08034e24
 80012b0:	08034e34 	.word	0x08034e34
 80012b4:	08034e28 	.word	0x08034e28
 80012b8:	08034e2c 	.word	0x08034e2c
 80012bc:	08034e30 	.word	0x08034e30

080012c0 <d_template_args_1>:
 80012c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012c4:	68c2      	ldr	r2, [r0, #12]
 80012c6:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80012c8:	7813      	ldrb	r3, [r2, #0]
 80012ca:	2b45      	cmp	r3, #69	; 0x45
 80012cc:	b082      	sub	sp, #8
 80012ce:	4604      	mov	r4, r0
 80012d0:	d04e      	beq.n	8001370 <d_template_args_1+0xb0>
 80012d2:	ad02      	add	r5, sp, #8
 80012d4:	2100      	movs	r1, #0
 80012d6:	f845 1d04 	str.w	r1, [r5, #-4]!
 80012da:	2601      	movs	r6, #1
 80012dc:	3b49      	subs	r3, #73	; 0x49
 80012de:	2b0f      	cmp	r3, #15
 80012e0:	d83d      	bhi.n	800135e <d_template_args_1+0x9e>
 80012e2:	e8df f003 	tbb	[pc, r3]
 80012e6:	3737      	.short	0x3737
 80012e8:	3c3c323c 	.word	0x3c3c323c
 80012ec:	3c3c3c3c 	.word	0x3c3c3c3c
 80012f0:	3c3c3c3c 	.word	0x3c3c3c3c
 80012f4:	083c      	.short	0x083c
 80012f6:	3201      	adds	r2, #1
 80012f8:	f8d4 8034 	ldr.w	r8, [r4, #52]	; 0x34
 80012fc:	60e2      	str	r2, [r4, #12]
 80012fe:	6366      	str	r6, [r4, #52]	; 0x34
 8001300:	4620      	mov	r0, r4
 8001302:	f7ff fdcb 	bl	8000e9c <d_expression_1>
 8001306:	68e3      	ldr	r3, [r4, #12]
 8001308:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
 800130c:	781a      	ldrb	r2, [r3, #0]
 800130e:	2a45      	cmp	r2, #69	; 0x45
 8001310:	4684      	mov	ip, r0
 8001312:	f103 0301 	add.w	r3, r3, #1
 8001316:	d127      	bne.n	8001368 <d_template_args_1+0xa8>
 8001318:	60e3      	str	r3, [r4, #12]
 800131a:	2300      	movs	r3, #0
 800131c:	212f      	movs	r1, #47	; 0x2f
 800131e:	4662      	mov	r2, ip
 8001320:	4620      	mov	r0, r4
 8001322:	f1bc 0f00 	cmp.w	ip, #0
 8001326:	d01f      	beq.n	8001368 <d_template_args_1+0xa8>
 8001328:	f7fe ff62 	bl	80001f0 <d_make_comp>
 800132c:	6028      	str	r0, [r5, #0]
 800132e:	f100 050c 	add.w	r5, r0, #12
 8001332:	b1c8      	cbz	r0, 8001368 <d_template_args_1+0xa8>
 8001334:	68e2      	ldr	r2, [r4, #12]
 8001336:	7813      	ldrb	r3, [r2, #0]
 8001338:	2b45      	cmp	r3, #69	; 0x45
 800133a:	d1cf      	bne.n	80012dc <d_template_args_1+0x1c>
 800133c:	9801      	ldr	r0, [sp, #4]
 800133e:	62e7      	str	r7, [r4, #44]	; 0x2c
 8001340:	3201      	adds	r2, #1
 8001342:	60e2      	str	r2, [r4, #12]
 8001344:	b002      	add	sp, #8
 8001346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800134a:	4620      	mov	r0, r4
 800134c:	f001 fbc0 	bl	8002ad0 <d_expr_primary>
 8001350:	4684      	mov	ip, r0
 8001352:	e7e2      	b.n	800131a <d_template_args_1+0x5a>
 8001354:	4620      	mov	r0, r4
 8001356:	f000 f815 	bl	8001384 <d_template_args>
 800135a:	4684      	mov	ip, r0
 800135c:	e7dd      	b.n	800131a <d_template_args_1+0x5a>
 800135e:	4620      	mov	r0, r4
 8001360:	f000 f9c6 	bl	80016f0 <d_type>
 8001364:	4684      	mov	ip, r0
 8001366:	e7d8      	b.n	800131a <d_template_args_1+0x5a>
 8001368:	2000      	movs	r0, #0
 800136a:	b002      	add	sp, #8
 800136c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001370:	3201      	adds	r2, #1
 8001372:	2300      	movs	r3, #0
 8001374:	60c2      	str	r2, [r0, #12]
 8001376:	212f      	movs	r1, #47	; 0x2f
 8001378:	461a      	mov	r2, r3
 800137a:	b002      	add	sp, #8
 800137c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001380:	f7fe bf36 	b.w	80001f0 <d_make_comp>

08001384 <d_template_args>:
 8001384:	68c3      	ldr	r3, [r0, #12]
 8001386:	781a      	ldrb	r2, [r3, #0]
 8001388:	3a49      	subs	r2, #73	; 0x49
 800138a:	2a01      	cmp	r2, #1
 800138c:	d802      	bhi.n	8001394 <d_template_args+0x10>
 800138e:	3301      	adds	r3, #1
 8001390:	60c3      	str	r3, [r0, #12]
 8001392:	e795      	b.n	80012c0 <d_template_args_1>
 8001394:	2000      	movs	r0, #0
 8001396:	4770      	bx	lr

08001398 <d_name>:
 8001398:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800139c:	68c2      	ldr	r2, [r0, #12]
 800139e:	7813      	ldrb	r3, [r2, #0]
 80013a0:	3b4e      	subs	r3, #78	; 0x4e
 80013a2:	b083      	sub	sp, #12
 80013a4:	4604      	mov	r4, r0
 80013a6:	2b0c      	cmp	r3, #12
 80013a8:	d846      	bhi.n	8001438 <d_name+0xa0>
 80013aa:	e8df f003 	tbb	[pc, r3]
 80013ae:	4567      	.short	0x4567
 80013b0:	0e454545 	.word	0x0e454545
 80013b4:	45450745 	.word	0x45450745
 80013b8:	4545      	.short	0x4545
 80013ba:	a4          	.byte	0xa4
 80013bb:	00          	.byte	0x00
 80013bc:	f000 ff3e 	bl	800223c <d_unqualified_name>
 80013c0:	4605      	mov	r5, r0
 80013c2:	4628      	mov	r0, r5
 80013c4:	b003      	add	sp, #12
 80013c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013ca:	7853      	ldrb	r3, [r2, #1]
 80013cc:	2b74      	cmp	r3, #116	; 0x74
 80013ce:	f040 80d7 	bne.w	8001580 <d_name+0x1e8>
 80013d2:	e9d0 3105 	ldrd	r3, r1, [r0, #20]
 80013d6:	3202      	adds	r2, #2
 80013d8:	428b      	cmp	r3, r1
 80013da:	60c2      	str	r2, [r0, #12]
 80013dc:	f280 8127 	bge.w	800162e <d_name+0x296>
 80013e0:	6901      	ldr	r1, [r0, #16]
 80013e2:	48c0      	ldr	r0, [pc, #768]	; (80016e4 <d_name+0x34c>)
 80013e4:	011a      	lsls	r2, r3, #4
 80013e6:	188d      	adds	r5, r1, r2
 80013e8:	3301      	adds	r3, #1
 80013ea:	6163      	str	r3, [r4, #20]
 80013ec:	2300      	movs	r3, #0
 80013ee:	606b      	str	r3, [r5, #4]
 80013f0:	548b      	strb	r3, [r1, r2]
 80013f2:	2303      	movs	r3, #3
 80013f4:	e9c5 0302 	strd	r0, r3, [r5, #8]
 80013f8:	4620      	mov	r0, r4
 80013fa:	f000 ff1f 	bl	800223c <d_unqualified_name>
 80013fe:	462a      	mov	r2, r5
 8001400:	4603      	mov	r3, r0
 8001402:	2101      	movs	r1, #1
 8001404:	4620      	mov	r0, r4
 8001406:	f7fe fef3 	bl	80001f0 <d_make_comp>
 800140a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800140c:	68e2      	ldr	r2, [r4, #12]
 800140e:	3303      	adds	r3, #3
 8001410:	6323      	str	r3, [r4, #48]	; 0x30
 8001412:	7813      	ldrb	r3, [r2, #0]
 8001414:	2b49      	cmp	r3, #73	; 0x49
 8001416:	4605      	mov	r5, r0
 8001418:	d1d3      	bne.n	80013c2 <d_name+0x2a>
 800141a:	2800      	cmp	r0, #0
 800141c:	f000 80ba 	beq.w	8001594 <d_name+0x1fc>
 8001420:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8001424:	4293      	cmp	r3, r2
 8001426:	f280 80b5 	bge.w	8001594 <d_name+0x1fc>
 800142a:	69e1      	ldr	r1, [r4, #28]
 800142c:	1c5a      	adds	r2, r3, #1
 800142e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8001432:	6222      	str	r2, [r4, #32]
 8001434:	4620      	mov	r0, r4
 8001436:	e014      	b.n	8001462 <d_name+0xca>
 8001438:	f000 ff00 	bl	800223c <d_unqualified_name>
 800143c:	68e3      	ldr	r3, [r4, #12]
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b49      	cmp	r3, #73	; 0x49
 8001442:	4605      	mov	r5, r0
 8001444:	d1bd      	bne.n	80013c2 <d_name+0x2a>
 8001446:	2800      	cmp	r0, #0
 8001448:	f000 80a4 	beq.w	8001594 <d_name+0x1fc>
 800144c:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8001450:	4293      	cmp	r3, r2
 8001452:	f280 809f 	bge.w	8001594 <d_name+0x1fc>
 8001456:	69e1      	ldr	r1, [r4, #28]
 8001458:	1c5a      	adds	r2, r3, #1
 800145a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800145e:	4620      	mov	r0, r4
 8001460:	6222      	str	r2, [r4, #32]
 8001462:	f7ff ff8f 	bl	8001384 <d_template_args>
 8001466:	462a      	mov	r2, r5
 8001468:	4603      	mov	r3, r0
 800146a:	2104      	movs	r1, #4
 800146c:	4620      	mov	r0, r4
 800146e:	f7fe febf 	bl	80001f0 <d_make_comp>
 8001472:	4605      	mov	r5, r0
 8001474:	4628      	mov	r0, r5
 8001476:	b003      	add	sp, #12
 8001478:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800147c:	3201      	adds	r2, #1
 800147e:	60c2      	str	r2, [r0, #12]
 8001480:	a901      	add	r1, sp, #4
 8001482:	2201      	movs	r2, #1
 8001484:	f000 fde6 	bl	8002054 <d_cv_qualifiers>
 8001488:	4680      	mov	r8, r0
 800148a:	2800      	cmp	r0, #0
 800148c:	f000 8082 	beq.w	8001594 <d_name+0x1fc>
 8001490:	2100      	movs	r1, #0
 8001492:	4620      	mov	r0, r4
 8001494:	f7fe fef4 	bl	8000280 <d_ref_qualifier>
 8001498:	68e2      	ldr	r2, [r4, #12]
 800149a:	4e93      	ldr	r6, [pc, #588]	; (80016e8 <d_name+0x350>)
 800149c:	7815      	ldrb	r5, [r2, #0]
 800149e:	4681      	mov	r9, r0
 80014a0:	2700      	movs	r7, #0
 80014a2:	2d00      	cmp	r5, #0
 80014a4:	f000 80b3 	beq.w	800160e <d_name+0x276>
 80014a8:	2d44      	cmp	r5, #68	; 0x44
 80014aa:	f000 8096 	beq.w	80015da <d_name+0x242>
 80014ae:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2b1c      	cmp	r3, #28
 80014b6:	d96f      	bls.n	8001598 <d_name+0x200>
 80014b8:	f1a5 0361 	sub.w	r3, r5, #97	; 0x61
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b19      	cmp	r3, #25
 80014c0:	d96e      	bls.n	80015a0 <d_name+0x208>
 80014c2:	2d55      	cmp	r5, #85	; 0x55
 80014c4:	f000 80a1 	beq.w	800160a <d_name+0x272>
 80014c8:	2d53      	cmp	r5, #83	; 0x53
 80014ca:	f000 80b2 	beq.w	8001632 <d_name+0x29a>
 80014ce:	2d49      	cmp	r5, #73	; 0x49
 80014d0:	f000 80a4 	beq.w	800161c <d_name+0x284>
 80014d4:	2d54      	cmp	r5, #84	; 0x54
 80014d6:	f000 80e6 	beq.w	80016a6 <d_name+0x30e>
 80014da:	2d45      	cmp	r5, #69	; 0x45
 80014dc:	f000 80e9 	beq.w	80016b2 <d_name+0x31a>
 80014e0:	2d4d      	cmp	r5, #77	; 0x4d
 80014e2:	f040 8094 	bne.w	800160e <d_name+0x276>
 80014e6:	2f00      	cmp	r7, #0
 80014e8:	f000 8091 	beq.w	800160e <d_name+0x276>
 80014ec:	1c53      	adds	r3, r2, #1
 80014ee:	60e3      	str	r3, [r4, #12]
 80014f0:	7855      	ldrb	r5, [r2, #1]
 80014f2:	461a      	mov	r2, r3
 80014f4:	e7d5      	b.n	80014a2 <d_name+0x10a>
 80014f6:	3201      	adds	r2, #1
 80014f8:	60c2      	str	r2, [r0, #12]
 80014fa:	2100      	movs	r1, #0
 80014fc:	f001 f83a 	bl	8002574 <d_encoding>
 8001500:	68e3      	ldr	r3, [r4, #12]
 8001502:	781a      	ldrb	r2, [r3, #0]
 8001504:	2a45      	cmp	r2, #69	; 0x45
 8001506:	4606      	mov	r6, r0
 8001508:	d144      	bne.n	8001594 <d_name+0x1fc>
 800150a:	1c5a      	adds	r2, r3, #1
 800150c:	60e2      	str	r2, [r4, #12]
 800150e:	785a      	ldrb	r2, [r3, #1]
 8001510:	2a73      	cmp	r2, #115	; 0x73
 8001512:	f000 80b0 	beq.w	8001676 <d_name+0x2de>
 8001516:	2a64      	cmp	r2, #100	; 0x64
 8001518:	f000 8095 	beq.w	8001646 <d_name+0x2ae>
 800151c:	4620      	mov	r0, r4
 800151e:	f7ff ff3b 	bl	8001398 <d_name>
 8001522:	4605      	mov	r5, r0
 8001524:	b308      	cbz	r0, 800156a <d_name+0x1d2>
 8001526:	7803      	ldrb	r3, [r0, #0]
 8001528:	2b45      	cmp	r3, #69	; 0x45
 800152a:	d01e      	beq.n	800156a <d_name+0x1d2>
 800152c:	2b47      	cmp	r3, #71	; 0x47
 800152e:	d01c      	beq.n	800156a <d_name+0x1d2>
 8001530:	f04f 37ff 	mov.w	r7, #4294967295
 8001534:	4620      	mov	r0, r4
 8001536:	f7ff f903 	bl	8000740 <d_discriminator>
 800153a:	b358      	cbz	r0, 8001594 <d_name+0x1fc>
 800153c:	1c7b      	adds	r3, r7, #1
 800153e:	d014      	beq.n	800156a <d_name+0x1d2>
 8001540:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8001544:	4293      	cmp	r3, r2
 8001546:	f280 8094 	bge.w	8001672 <d_name+0x2da>
 800154a:	6920      	ldr	r0, [r4, #16]
 800154c:	0119      	lsls	r1, r3, #4
 800154e:	1842      	adds	r2, r0, r1
 8001550:	3301      	adds	r3, #1
 8001552:	f04f 0e00 	mov.w	lr, #0
 8001556:	f04f 0c46 	mov.w	ip, #70	; 0x46
 800155a:	f8c2 e004 	str.w	lr, [r2, #4]
 800155e:	6163      	str	r3, [r4, #20]
 8001560:	f800 c001 	strb.w	ip, [r0, r1]
 8001564:	e9c2 5702 	strd	r5, r7, [r2, #8]
 8001568:	4615      	mov	r5, r2
 800156a:	462b      	mov	r3, r5
 800156c:	4632      	mov	r2, r6
 800156e:	4620      	mov	r0, r4
 8001570:	2102      	movs	r1, #2
 8001572:	f7fe fe3d 	bl	80001f0 <d_make_comp>
 8001576:	4605      	mov	r5, r0
 8001578:	4628      	mov	r0, r5
 800157a:	b003      	add	sp, #12
 800157c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001580:	2100      	movs	r1, #0
 8001582:	f7ff f825 	bl	80005d0 <d_substitution>
 8001586:	68e3      	ldr	r3, [r4, #12]
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b49      	cmp	r3, #73	; 0x49
 800158c:	4605      	mov	r5, r0
 800158e:	f47f af18 	bne.w	80013c2 <d_name+0x2a>
 8001592:	e74f      	b.n	8001434 <d_name+0x9c>
 8001594:	2500      	movs	r5, #0
 8001596:	e714      	b.n	80013c2 <d_name+0x2a>
 8001598:	fa26 f303 	lsr.w	r3, r6, r3
 800159c:	07d9      	lsls	r1, r3, #31
 800159e:	d58b      	bpl.n	80014b8 <d_name+0x120>
 80015a0:	4620      	mov	r0, r4
 80015a2:	f000 fe4b 	bl	800223c <d_unqualified_name>
 80015a6:	b35f      	cbz	r7, 8001600 <d_name+0x268>
 80015a8:	2101      	movs	r1, #1
 80015aa:	4603      	mov	r3, r0
 80015ac:	463a      	mov	r2, r7
 80015ae:	4620      	mov	r0, r4
 80015b0:	f7fe fe1e 	bl	80001f0 <d_make_comp>
 80015b4:	4607      	mov	r7, r0
 80015b6:	68e2      	ldr	r2, [r4, #12]
 80015b8:	2d53      	cmp	r5, #83	; 0x53
 80015ba:	7813      	ldrb	r3, [r2, #0]
 80015bc:	d01e      	beq.n	80015fc <d_name+0x264>
 80015be:	2b45      	cmp	r3, #69	; 0x45
 80015c0:	d01a      	beq.n	80015f8 <d_name+0x260>
 80015c2:	b327      	cbz	r7, 800160e <d_name+0x276>
 80015c4:	e9d4 3108 	ldrd	r3, r1, [r4, #32]
 80015c8:	428b      	cmp	r3, r1
 80015ca:	da20      	bge.n	800160e <d_name+0x276>
 80015cc:	69e1      	ldr	r1, [r4, #28]
 80015ce:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
 80015d2:	3301      	adds	r3, #1
 80015d4:	6223      	str	r3, [r4, #32]
 80015d6:	7815      	ldrb	r5, [r2, #0]
 80015d8:	e763      	b.n	80014a2 <d_name+0x10a>
 80015da:	7853      	ldrb	r3, [r2, #1]
 80015dc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80015e0:	2b54      	cmp	r3, #84	; 0x54
 80015e2:	4620      	mov	r0, r4
 80015e4:	d00e      	beq.n	8001604 <d_name+0x26c>
 80015e6:	f000 fe29 	bl	800223c <d_unqualified_name>
 80015ea:	2f00      	cmp	r7, #0
 80015ec:	d1dc      	bne.n	80015a8 <d_name+0x210>
 80015ee:	68e2      	ldr	r2, [r4, #12]
 80015f0:	7813      	ldrb	r3, [r2, #0]
 80015f2:	2b45      	cmp	r3, #69	; 0x45
 80015f4:	4607      	mov	r7, r0
 80015f6:	d1e4      	bne.n	80015c2 <d_name+0x22a>
 80015f8:	461d      	mov	r5, r3
 80015fa:	e758      	b.n	80014ae <d_name+0x116>
 80015fc:	461d      	mov	r5, r3
 80015fe:	e750      	b.n	80014a2 <d_name+0x10a>
 8001600:	4607      	mov	r7, r0
 8001602:	e7d8      	b.n	80015b6 <d_name+0x21e>
 8001604:	f000 f874 	bl	80016f0 <d_type>
 8001608:	e7ef      	b.n	80015ea <d_name+0x252>
 800160a:	4620      	mov	r0, r4
 800160c:	e7eb      	b.n	80015e6 <d_name+0x24e>
 800160e:	2500      	movs	r5, #0
 8001610:	4628      	mov	r0, r5
 8001612:	f8c8 5000 	str.w	r5, [r8]
 8001616:	b003      	add	sp, #12
 8001618:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800161c:	2f00      	cmp	r7, #0
 800161e:	d0f6      	beq.n	800160e <d_name+0x276>
 8001620:	3201      	adds	r2, #1
 8001622:	60e2      	str	r2, [r4, #12]
 8001624:	4620      	mov	r0, r4
 8001626:	f7ff fe4b 	bl	80012c0 <d_template_args_1>
 800162a:	2104      	movs	r1, #4
 800162c:	e7bd      	b.n	80015aa <d_name+0x212>
 800162e:	2500      	movs	r5, #0
 8001630:	e6e2      	b.n	80013f8 <d_name+0x60>
 8001632:	2101      	movs	r1, #1
 8001634:	4620      	mov	r0, r4
 8001636:	f7fe ffcb 	bl	80005d0 <d_substitution>
 800163a:	2f00      	cmp	r7, #0
 800163c:	d1b4      	bne.n	80015a8 <d_name+0x210>
 800163e:	68e2      	ldr	r2, [r4, #12]
 8001640:	4607      	mov	r7, r0
 8001642:	7815      	ldrb	r5, [r2, #0]
 8001644:	e72d      	b.n	80014a2 <d_name+0x10a>
 8001646:	3302      	adds	r3, #2
 8001648:	60e3      	str	r3, [r4, #12]
 800164a:	4620      	mov	r0, r4
 800164c:	f7fe ff0e 	bl	800046c <d_compact_number>
 8001650:	1e07      	subs	r7, r0, #0
 8001652:	db9f      	blt.n	8001594 <d_name+0x1fc>
 8001654:	4620      	mov	r0, r4
 8001656:	f7ff fe9f 	bl	8001398 <d_name>
 800165a:	4605      	mov	r5, r0
 800165c:	2800      	cmp	r0, #0
 800165e:	f43f af6f 	beq.w	8001540 <d_name+0x1a8>
 8001662:	7803      	ldrb	r3, [r0, #0]
 8001664:	2b45      	cmp	r3, #69	; 0x45
 8001666:	f43f af69 	beq.w	800153c <d_name+0x1a4>
 800166a:	2b47      	cmp	r3, #71	; 0x47
 800166c:	f43f af66 	beq.w	800153c <d_name+0x1a4>
 8001670:	e760      	b.n	8001534 <d_name+0x19c>
 8001672:	2500      	movs	r5, #0
 8001674:	e779      	b.n	800156a <d_name+0x1d2>
 8001676:	3302      	adds	r3, #2
 8001678:	60e3      	str	r3, [r4, #12]
 800167a:	4620      	mov	r0, r4
 800167c:	f7ff f860 	bl	8000740 <d_discriminator>
 8001680:	2800      	cmp	r0, #0
 8001682:	d087      	beq.n	8001594 <d_name+0x1fc>
 8001684:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 8001688:	429a      	cmp	r2, r3
 800168a:	da10      	bge.n	80016ae <d_name+0x316>
 800168c:	6920      	ldr	r0, [r4, #16]
 800168e:	4d17      	ldr	r5, [pc, #92]	; (80016ec <d_name+0x354>)
 8001690:	0111      	lsls	r1, r2, #4
 8001692:	1843      	adds	r3, r0, r1
 8001694:	3201      	adds	r2, #1
 8001696:	6162      	str	r2, [r4, #20]
 8001698:	2200      	movs	r2, #0
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	5442      	strb	r2, [r0, r1]
 800169e:	220e      	movs	r2, #14
 80016a0:	e9c3 5202 	strd	r5, r2, [r3, #8]
 80016a4:	e762      	b.n	800156c <d_name+0x1d4>
 80016a6:	4620      	mov	r0, r4
 80016a8:	f7fe fefa 	bl	80004a0 <d_template_param>
 80016ac:	e79d      	b.n	80015ea <d_name+0x252>
 80016ae:	2300      	movs	r3, #0
 80016b0:	e75c      	b.n	800156c <d_name+0x1d4>
 80016b2:	f8c8 7000 	str.w	r7, [r8]
 80016b6:	2f00      	cmp	r7, #0
 80016b8:	f43f af6c 	beq.w	8001594 <d_name+0x1fc>
 80016bc:	f1b9 0f00 	cmp.w	r9, #0
 80016c0:	d004      	beq.n	80016cc <d_name+0x334>
 80016c2:	9b01      	ldr	r3, [sp, #4]
 80016c4:	f8c9 3008 	str.w	r3, [r9, #8]
 80016c8:	f8cd 9004 	str.w	r9, [sp, #4]
 80016cc:	7813      	ldrb	r3, [r2, #0]
 80016ce:	2b45      	cmp	r3, #69	; 0x45
 80016d0:	f47f af60 	bne.w	8001594 <d_name+0x1fc>
 80016d4:	9d01      	ldr	r5, [sp, #4]
 80016d6:	3201      	adds	r2, #1
 80016d8:	4628      	mov	r0, r5
 80016da:	60e2      	str	r2, [r4, #12]
 80016dc:	b003      	add	sp, #12
 80016de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80016e2:	bf00      	nop
 80016e4:	08034e48 	.word	0x08034e48
 80016e8:	100803ff 	.word	0x100803ff
 80016ec:	08034e38 	.word	0x08034e38

080016f0 <d_type>:
 80016f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016f4:	68c2      	ldr	r2, [r0, #12]
 80016f6:	7813      	ldrb	r3, [r2, #0]
 80016f8:	2b72      	cmp	r3, #114	; 0x72
 80016fa:	b083      	sub	sp, #12
 80016fc:	4604      	mov	r4, r0
 80016fe:	d05f      	beq.n	80017c0 <d_type+0xd0>
 8001700:	2b56      	cmp	r3, #86	; 0x56
 8001702:	d05d      	beq.n	80017c0 <d_type+0xd0>
 8001704:	2b4b      	cmp	r3, #75	; 0x4b
 8001706:	d05b      	beq.n	80017c0 <d_type+0xd0>
 8001708:	2b44      	cmp	r3, #68	; 0x44
 800170a:	d051      	beq.n	80017b0 <d_type+0xc0>
 800170c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8001710:	294a      	cmp	r1, #74	; 0x4a
 8001712:	f200 809e 	bhi.w	8001852 <d_type+0x162>
 8001716:	e8df f011 	tbh	[pc, r1, lsl #1]
 800171a:	0111      	.short	0x0111
 800171c:	01110111 	.word	0x01110111
 8001720:	01110111 	.word	0x01110111
 8001724:	01110111 	.word	0x01110111
 8001728:	01110111 	.word	0x01110111
 800172c:	009c0111 	.word	0x009c0111
 8001730:	009c009c 	.word	0x009c009c
 8001734:	009c009c 	.word	0x009c009c
 8001738:	009c009c 	.word	0x009c009c
 800173c:	009c021e 	.word	0x009c021e
 8001740:	009c013b 	.word	0x009c013b
 8001744:	0135009c 	.word	0x0135009c
 8001748:	009c0149 	.word	0x009c0149
 800174c:	009c009c 	.word	0x009c009c
 8001750:	009c009c 	.word	0x009c009c
 8001754:	01110206 	.word	0x01110206
 8001758:	01650157 	.word	0x01650157
 800175c:	0173009c 	.word	0x0173009c
 8001760:	01a50181 	.word	0x01a50181
 8001764:	009c01cc 	.word	0x009c01cc
 8001768:	009c009c 	.word	0x009c009c
 800176c:	0111009c 	.word	0x0111009c
 8001770:	009c009c 	.word	0x009c009c
 8001774:	009c009c 	.word	0x009c009c
 8001778:	009c009c 	.word	0x009c009c
 800177c:	01e401e4 	.word	0x01e401e4
 8001780:	01e401e4 	.word	0x01e401e4
 8001784:	01e401e4 	.word	0x01e401e4
 8001788:	01e401e4 	.word	0x01e401e4
 800178c:	01e401e4 	.word	0x01e401e4
 8001790:	01e4009c 	.word	0x01e4009c
 8001794:	01e401e4 	.word	0x01e401e4
 8001798:	009c01e4 	.word	0x009c01e4
 800179c:	009c009c 	.word	0x009c009c
 80017a0:	01e401e4 	.word	0x01e401e4
 80017a4:	01e40127 	.word	0x01e40127
 80017a8:	01e401e4 	.word	0x01e401e4
 80017ac:	01e401e4 	.word	0x01e401e4
 80017b0:	7853      	ldrb	r3, [r2, #1]
 80017b2:	f003 01df 	and.w	r1, r3, #223	; 0xdf
 80017b6:	294f      	cmp	r1, #79	; 0x4f
 80017b8:	d002      	beq.n	80017c0 <d_type+0xd0>
 80017ba:	3b77      	subs	r3, #119	; 0x77
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d84d      	bhi.n	800185c <d_type+0x16c>
 80017c0:	2200      	movs	r2, #0
 80017c2:	a901      	add	r1, sp, #4
 80017c4:	4620      	mov	r0, r4
 80017c6:	f000 fc45 	bl	8002054 <d_cv_qualifiers>
 80017ca:	4605      	mov	r5, r0
 80017cc:	2800      	cmp	r0, #0
 80017ce:	d040      	beq.n	8001852 <d_type+0x162>
 80017d0:	68e3      	ldr	r3, [r4, #12]
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b46      	cmp	r3, #70	; 0x46
 80017d6:	4620      	mov	r0, r4
 80017d8:	d119      	bne.n	800180e <d_type+0x11e>
 80017da:	f000 fd0f 	bl	80021fc <d_function_type>
 80017de:	6028      	str	r0, [r5, #0]
 80017e0:	2800      	cmp	r0, #0
 80017e2:	d036      	beq.n	8001852 <d_type+0x162>
 80017e4:	7803      	ldrb	r3, [r0, #0]
 80017e6:	9a01      	ldr	r2, [sp, #4]
 80017e8:	3b1f      	subs	r3, #31
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d913      	bls.n	8001816 <d_type+0x126>
 80017ee:	2a00      	cmp	r2, #0
 80017f0:	d02f      	beq.n	8001852 <d_type+0x162>
 80017f2:	e9d4 3108 	ldrd	r3, r1, [r4, #32]
 80017f6:	428b      	cmp	r3, r1
 80017f8:	da2b      	bge.n	8001852 <d_type+0x162>
 80017fa:	69e0      	ldr	r0, [r4, #28]
 80017fc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8001800:	1c59      	adds	r1, r3, #1
 8001802:	9d01      	ldr	r5, [sp, #4]
 8001804:	6221      	str	r1, [r4, #32]
 8001806:	4628      	mov	r0, r5
 8001808:	b003      	add	sp, #12
 800180a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800180e:	f7ff ff6f 	bl	80016f0 <d_type>
 8001812:	6028      	str	r0, [r5, #0]
 8001814:	e7e4      	b.n	80017e0 <d_type+0xf0>
 8001816:	6883      	ldr	r3, [r0, #8]
 8001818:	6082      	str	r2, [r0, #8]
 800181a:	682a      	ldr	r2, [r5, #0]
 800181c:	9201      	str	r2, [sp, #4]
 800181e:	602b      	str	r3, [r5, #0]
 8001820:	9a01      	ldr	r2, [sp, #4]
 8001822:	e7e4      	b.n	80017ee <d_type+0xfe>
 8001824:	2301      	movs	r3, #1
 8001826:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8001828:	6343      	str	r3, [r0, #52]	; 0x34
 800182a:	f7ff fb37 	bl	8000e9c <d_expression_1>
 800182e:	6365      	str	r5, [r4, #52]	; 0x34
 8001830:	4602      	mov	r2, r0
 8001832:	2300      	movs	r3, #0
 8001834:	2142      	movs	r1, #66	; 0x42
 8001836:	4620      	mov	r0, r4
 8001838:	f7fe fcda 	bl	80001f0 <d_make_comp>
 800183c:	4605      	mov	r5, r0
 800183e:	9001      	str	r0, [sp, #4]
 8001840:	b138      	cbz	r0, 8001852 <d_type+0x162>
 8001842:	68e3      	ldr	r3, [r4, #12]
 8001844:	781a      	ldrb	r2, [r3, #0]
 8001846:	b122      	cbz	r2, 8001852 <d_type+0x162>
 8001848:	1c5a      	adds	r2, r3, #1
 800184a:	60e2      	str	r2, [r4, #12]
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b45      	cmp	r3, #69	; 0x45
 8001850:	d07b      	beq.n	800194a <d_type+0x25a>
 8001852:	2500      	movs	r5, #0
 8001854:	4628      	mov	r0, r5
 8001856:	b003      	add	sp, #12
 8001858:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800185c:	1c53      	adds	r3, r2, #1
 800185e:	60c3      	str	r3, [r0, #12]
 8001860:	7853      	ldrb	r3, [r2, #1]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0f5      	beq.n	8001852 <d_type+0x162>
 8001866:	1c93      	adds	r3, r2, #2
 8001868:	60c3      	str	r3, [r0, #12]
 800186a:	7853      	ldrb	r3, [r2, #1]
 800186c:	3b46      	subs	r3, #70	; 0x46
 800186e:	2b30      	cmp	r3, #48	; 0x30
 8001870:	d8ef      	bhi.n	8001852 <d_type+0x162>
 8001872:	a101      	add	r1, pc, #4	; (adr r1, 8001878 <d_type+0x188>)
 8001874:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001878:	08001d35 	.word	0x08001d35
 800187c:	08001853 	.word	0x08001853
 8001880:	08001853 	.word	0x08001853
 8001884:	08001853 	.word	0x08001853
 8001888:	08001853 	.word	0x08001853
 800188c:	08001853 	.word	0x08001853
 8001890:	08001853 	.word	0x08001853
 8001894:	08001853 	.word	0x08001853
 8001898:	08001853 	.word	0x08001853
 800189c:	08001853 	.word	0x08001853
 80018a0:	08001853 	.word	0x08001853
 80018a4:	08001853 	.word	0x08001853
 80018a8:	08001853 	.word	0x08001853
 80018ac:	08001853 	.word	0x08001853
 80018b0:	08001825 	.word	0x08001825
 80018b4:	08001853 	.word	0x08001853
 80018b8:	08001853 	.word	0x08001853
 80018bc:	08001853 	.word	0x08001853
 80018c0:	08001853 	.word	0x08001853
 80018c4:	08001853 	.word	0x08001853
 80018c8:	08001853 	.word	0x08001853
 80018cc:	08001853 	.word	0x08001853
 80018d0:	08001853 	.word	0x08001853
 80018d4:	08001853 	.word	0x08001853
 80018d8:	08001853 	.word	0x08001853
 80018dc:	08001853 	.word	0x08001853
 80018e0:	08001853 	.word	0x08001853
 80018e4:	08001d11 	.word	0x08001d11
 80018e8:	08001853 	.word	0x08001853
 80018ec:	08001ced 	.word	0x08001ced
 80018f0:	08001cc5 	.word	0x08001cc5
 80018f4:	08001c9d 	.word	0x08001c9d
 80018f8:	08001c75 	.word	0x08001c75
 80018fc:	08001853 	.word	0x08001853
 8001900:	08001c4d 	.word	0x08001c4d
 8001904:	08001de9 	.word	0x08001de9
 8001908:	08001853 	.word	0x08001853
 800190c:	08001853 	.word	0x08001853
 8001910:	08001853 	.word	0x08001853
 8001914:	08001853 	.word	0x08001853
 8001918:	08001d9d 	.word	0x08001d9d
 800191c:	08001853 	.word	0x08001853
 8001920:	08001c37 	.word	0x08001c37
 8001924:	08001853 	.word	0x08001853
 8001928:	08001853 	.word	0x08001853
 800192c:	08001c0f 	.word	0x08001c0f
 8001930:	08001825 	.word	0x08001825
 8001934:	08001853 	.word	0x08001853
 8001938:	08001bd5 	.word	0x08001bd5
 800193c:	4620      	mov	r0, r4
 800193e:	f7ff fd2b 	bl	8001398 <d_name>
 8001942:	4605      	mov	r5, r0
 8001944:	9001      	str	r0, [sp, #4]
 8001946:	2d00      	cmp	r5, #0
 8001948:	d083      	beq.n	8001852 <d_type+0x162>
 800194a:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 800194e:	4293      	cmp	r3, r2
 8001950:	f6bf af7f 	bge.w	8001852 <d_type+0x162>
 8001954:	69e1      	ldr	r1, [r4, #28]
 8001956:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
 800195a:	9d01      	ldr	r5, [sp, #4]
 800195c:	1c5a      	adds	r2, r3, #1
 800195e:	4628      	mov	r0, r5
 8001960:	6222      	str	r2, [r4, #32]
 8001962:	b003      	add	sp, #12
 8001964:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001968:	3201      	adds	r2, #1
 800196a:	60e2      	str	r2, [r4, #12]
 800196c:	4620      	mov	r0, r4
 800196e:	f7fe fdb9 	bl	80004e4 <d_source_name>
 8001972:	2300      	movs	r3, #0
 8001974:	4602      	mov	r2, r0
 8001976:	2128      	movs	r1, #40	; 0x28
 8001978:	4620      	mov	r0, r4
 800197a:	f7fe fc39 	bl	80001f0 <d_make_comp>
 800197e:	4605      	mov	r5, r0
 8001980:	9001      	str	r0, [sp, #4]
 8001982:	e7e0      	b.n	8001946 <d_type+0x256>
 8001984:	4620      	mov	r0, r4
 8001986:	f000 fc39 	bl	80021fc <d_function_type>
 800198a:	4605      	mov	r5, r0
 800198c:	9001      	str	r0, [sp, #4]
 800198e:	e7da      	b.n	8001946 <d_type+0x256>
 8001990:	3201      	adds	r2, #1
 8001992:	60e2      	str	r2, [r4, #12]
 8001994:	4620      	mov	r0, r4
 8001996:	f7ff feab 	bl	80016f0 <d_type>
 800199a:	2300      	movs	r3, #0
 800199c:	4602      	mov	r2, r0
 800199e:	2125      	movs	r1, #37	; 0x25
 80019a0:	4620      	mov	r0, r4
 80019a2:	f7fe fc25 	bl	80001f0 <d_make_comp>
 80019a6:	4605      	mov	r5, r0
 80019a8:	9001      	str	r0, [sp, #4]
 80019aa:	e7cc      	b.n	8001946 <d_type+0x256>
 80019ac:	3201      	adds	r2, #1
 80019ae:	60e2      	str	r2, [r4, #12]
 80019b0:	4620      	mov	r0, r4
 80019b2:	f7ff fe9d 	bl	80016f0 <d_type>
 80019b6:	2300      	movs	r3, #0
 80019b8:	4602      	mov	r2, r0
 80019ba:	2126      	movs	r1, #38	; 0x26
 80019bc:	4620      	mov	r0, r4
 80019be:	f7fe fc17 	bl	80001f0 <d_make_comp>
 80019c2:	4605      	mov	r5, r0
 80019c4:	9001      	str	r0, [sp, #4]
 80019c6:	e7be      	b.n	8001946 <d_type+0x256>
 80019c8:	3201      	adds	r2, #1
 80019ca:	60e2      	str	r2, [r4, #12]
 80019cc:	4620      	mov	r0, r4
 80019ce:	f7ff fe8f 	bl	80016f0 <d_type>
 80019d2:	2300      	movs	r3, #0
 80019d4:	4602      	mov	r2, r0
 80019d6:	2124      	movs	r1, #36	; 0x24
 80019d8:	4620      	mov	r0, r4
 80019da:	f7fe fc09 	bl	80001f0 <d_make_comp>
 80019de:	4605      	mov	r5, r0
 80019e0:	9001      	str	r0, [sp, #4]
 80019e2:	e7b0      	b.n	8001946 <d_type+0x256>
 80019e4:	3201      	adds	r2, #1
 80019e6:	60e2      	str	r2, [r4, #12]
 80019e8:	4620      	mov	r0, r4
 80019ea:	f7ff fe81 	bl	80016f0 <d_type>
 80019ee:	2300      	movs	r3, #0
 80019f0:	4602      	mov	r2, r0
 80019f2:	2122      	movs	r1, #34	; 0x22
 80019f4:	4620      	mov	r0, r4
 80019f6:	f7fe fbfb 	bl	80001f0 <d_make_comp>
 80019fa:	4605      	mov	r5, r0
 80019fc:	9001      	str	r0, [sp, #4]
 80019fe:	e7a2      	b.n	8001946 <d_type+0x256>
 8001a00:	3201      	adds	r2, #1
 8001a02:	60e2      	str	r2, [r4, #12]
 8001a04:	4620      	mov	r0, r4
 8001a06:	f7ff fe73 	bl	80016f0 <d_type>
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	2123      	movs	r1, #35	; 0x23
 8001a10:	4620      	mov	r0, r4
 8001a12:	f7fe fbed 	bl	80001f0 <d_make_comp>
 8001a16:	4605      	mov	r5, r0
 8001a18:	9001      	str	r0, [sp, #4]
 8001a1a:	e794      	b.n	8001946 <d_type+0x256>
 8001a1c:	7853      	ldrb	r3, [r2, #1]
 8001a1e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001a22:	2a09      	cmp	r2, #9
 8001a24:	d905      	bls.n	8001a32 <d_type+0x342>
 8001a26:	2b5f      	cmp	r3, #95	; 0x5f
 8001a28:	d003      	beq.n	8001a32 <d_type+0x342>
 8001a2a:	3b41      	subs	r3, #65	; 0x41
 8001a2c:	2b19      	cmp	r3, #25
 8001a2e:	f200 820f 	bhi.w	8001e50 <d_type+0x760>
 8001a32:	2100      	movs	r1, #0
 8001a34:	4620      	mov	r0, r4
 8001a36:	f7fe fdcb 	bl	80005d0 <d_substitution>
 8001a3a:	68e3      	ldr	r3, [r4, #12]
 8001a3c:	9001      	str	r0, [sp, #4]
 8001a3e:	781a      	ldrb	r2, [r3, #0]
 8001a40:	2a49      	cmp	r2, #73	; 0x49
 8001a42:	4605      	mov	r5, r0
 8001a44:	f47f aedf 	bne.w	8001806 <d_type+0x116>
 8001a48:	3301      	adds	r3, #1
 8001a4a:	60e3      	str	r3, [r4, #12]
 8001a4c:	4620      	mov	r0, r4
 8001a4e:	f7ff fc37 	bl	80012c0 <d_template_args_1>
 8001a52:	4603      	mov	r3, r0
 8001a54:	462a      	mov	r2, r5
 8001a56:	2104      	movs	r1, #4
 8001a58:	4620      	mov	r0, r4
 8001a5a:	f7fe fbc9 	bl	80001f0 <d_make_comp>
 8001a5e:	4605      	mov	r5, r0
 8001a60:	9001      	str	r0, [sp, #4]
 8001a62:	e770      	b.n	8001946 <d_type+0x256>
 8001a64:	4620      	mov	r0, r4
 8001a66:	f7fe fd1b 	bl	80004a0 <d_template_param>
 8001a6a:	68e6      	ldr	r6, [r4, #12]
 8001a6c:	9001      	str	r0, [sp, #4]
 8001a6e:	7833      	ldrb	r3, [r6, #0]
 8001a70:	2b49      	cmp	r3, #73	; 0x49
 8001a72:	4605      	mov	r5, r0
 8001a74:	f47f af67 	bne.w	8001946 <d_type+0x256>
 8001a78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f040 81f5 	bne.w	8001e6a <d_type+0x77a>
 8001a80:	2800      	cmp	r0, #0
 8001a82:	f43f aee6 	beq.w	8001852 <d_type+0x162>
 8001a86:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
 8001a8a:	428a      	cmp	r2, r1
 8001a8c:	f6bf aee1 	bge.w	8001852 <d_type+0x162>
 8001a90:	69e1      	ldr	r1, [r4, #28]
 8001a92:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 8001a96:	3201      	adds	r2, #1
 8001a98:	6222      	str	r2, [r4, #32]
 8001a9a:	7831      	ldrb	r1, [r6, #0]
 8001a9c:	9d01      	ldr	r5, [sp, #4]
 8001a9e:	3949      	subs	r1, #73	; 0x49
 8001aa0:	2901      	cmp	r1, #1
 8001aa2:	d8d7      	bhi.n	8001a54 <d_type+0x364>
 8001aa4:	3601      	adds	r6, #1
 8001aa6:	60e6      	str	r6, [r4, #12]
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	f7ff fc09 	bl	80012c0 <d_template_args_1>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	e7d0      	b.n	8001a54 <d_type+0x364>
 8001ab2:	3201      	adds	r2, #1
 8001ab4:	60e2      	str	r2, [r4, #12]
 8001ab6:	4620      	mov	r0, r4
 8001ab8:	f7fe fd14 	bl	80004e4 <d_source_name>
 8001abc:	68e3      	ldr	r3, [r4, #12]
 8001abe:	9001      	str	r0, [sp, #4]
 8001ac0:	781a      	ldrb	r2, [r3, #0]
 8001ac2:	2a49      	cmp	r2, #73	; 0x49
 8001ac4:	4605      	mov	r5, r0
 8001ac6:	f000 81a8 	beq.w	8001e1a <d_type+0x72a>
 8001aca:	4620      	mov	r0, r4
 8001acc:	f7ff fe10 	bl	80016f0 <d_type>
 8001ad0:	9b01      	ldr	r3, [sp, #4]
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	2121      	movs	r1, #33	; 0x21
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	f7fe fb8a 	bl	80001f0 <d_make_comp>
 8001adc:	4605      	mov	r5, r0
 8001ade:	9001      	str	r0, [sp, #4]
 8001ae0:	e731      	b.n	8001946 <d_type+0x256>
 8001ae2:	e9d4 1005 	ldrd	r1, r0, [r4, #20]
 8001ae6:	3b61      	subs	r3, #97	; 0x61
 8001ae8:	4db6      	ldr	r5, [pc, #728]	; (8001dc4 <d_type+0x6d4>)
 8001aea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001aee:	4281      	cmp	r1, r0
 8001af0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001af4:	f280 818b 	bge.w	8001e0e <d_type+0x71e>
 8001af8:	6858      	ldr	r0, [r3, #4]
 8001afa:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8001afc:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8001b00:	010f      	lsls	r7, r1, #4
 8001b02:	eb0c 0507 	add.w	r5, ip, r7
 8001b06:	4406      	add	r6, r0
 8001b08:	4630      	mov	r0, r6
 8001b0a:	3201      	adds	r2, #1
 8001b0c:	3101      	adds	r1, #1
 8001b0e:	f04f 0e00 	mov.w	lr, #0
 8001b12:	2627      	movs	r6, #39	; 0x27
 8001b14:	f8c5 e004 	str.w	lr, [r5, #4]
 8001b18:	6161      	str	r1, [r4, #20]
 8001b1a:	f80c 6007 	strb.w	r6, [ip, r7]
 8001b1e:	60ab      	str	r3, [r5, #8]
 8001b20:	60e2      	str	r2, [r4, #12]
 8001b22:	6320      	str	r0, [r4, #48]	; 0x30
 8001b24:	e66f      	b.n	8001806 <d_type+0x116>
 8001b26:	3201      	adds	r2, #1
 8001b28:	60e2      	str	r2, [r4, #12]
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	f7ff fde0 	bl	80016f0 <d_type>
 8001b30:	4605      	mov	r5, r0
 8001b32:	2800      	cmp	r0, #0
 8001b34:	f43f ae8d 	beq.w	8001852 <d_type+0x162>
 8001b38:	4620      	mov	r0, r4
 8001b3a:	f7ff fdd9 	bl	80016f0 <d_type>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2800      	cmp	r0, #0
 8001b42:	f43f ae86 	beq.w	8001852 <d_type+0x162>
 8001b46:	462a      	mov	r2, r5
 8001b48:	212b      	movs	r1, #43	; 0x2b
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	f7fe fb50 	bl	80001f0 <d_make_comp>
 8001b50:	4605      	mov	r5, r0
 8001b52:	9001      	str	r0, [sp, #4]
 8001b54:	e6f7      	b.n	8001946 <d_type+0x256>
 8001b56:	1c55      	adds	r5, r2, #1
 8001b58:	60e5      	str	r5, [r4, #12]
 8001b5a:	7853      	ldrb	r3, [r2, #1]
 8001b5c:	2b5f      	cmp	r3, #95	; 0x5f
 8001b5e:	f000 815a 	beq.w	8001e16 <d_type+0x726>
 8001b62:	3b30      	subs	r3, #48	; 0x30
 8001b64:	2b09      	cmp	r3, #9
 8001b66:	f200 8165 	bhi.w	8001e34 <d_type+0x744>
 8001b6a:	4628      	mov	r0, r5
 8001b6c:	e000      	b.n	8001b70 <d_type+0x480>
 8001b6e:	4608      	mov	r0, r1
 8001b70:	1c41      	adds	r1, r0, #1
 8001b72:	60e1      	str	r1, [r4, #12]
 8001b74:	7843      	ldrb	r3, [r0, #1]
 8001b76:	3b30      	subs	r3, #48	; 0x30
 8001b78:	2b09      	cmp	r3, #9
 8001b7a:	d9f8      	bls.n	8001b6e <d_type+0x47e>
 8001b7c:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8001b80:	4293      	cmp	r3, r2
 8001b82:	eba1 0705 	sub.w	r7, r1, r5
 8001b86:	f6bf ae64 	bge.w	8001852 <d_type+0x162>
 8001b8a:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8001b8e:	ea4f 1c03 	mov.w	ip, r3, lsl #4
 8001b92:	eb0e 060c 	add.w	r6, lr, ip
 8001b96:	3301      	adds	r3, #1
 8001b98:	2200      	movs	r2, #0
 8001b9a:	6072      	str	r2, [r6, #4]
 8001b9c:	6163      	str	r3, [r4, #20]
 8001b9e:	2f00      	cmp	r7, #0
 8001ba0:	f43f ae57 	beq.w	8001852 <d_type+0x162>
 8001ba4:	6072      	str	r2, [r6, #4]
 8001ba6:	f80e 200c 	strb.w	r2, [lr, ip]
 8001baa:	e9c6 5702 	strd	r5, r7, [r6, #8]
 8001bae:	7843      	ldrb	r3, [r0, #1]
 8001bb0:	460d      	mov	r5, r1
 8001bb2:	2b5f      	cmp	r3, #95	; 0x5f
 8001bb4:	f47f ae4d 	bne.w	8001852 <d_type+0x162>
 8001bb8:	3501      	adds	r5, #1
 8001bba:	60e5      	str	r5, [r4, #12]
 8001bbc:	4620      	mov	r0, r4
 8001bbe:	f7ff fd97 	bl	80016f0 <d_type>
 8001bc2:	4632      	mov	r2, r6
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	212a      	movs	r1, #42	; 0x2a
 8001bc8:	4620      	mov	r0, r4
 8001bca:	f7fe fb11 	bl	80001f0 <d_make_comp>
 8001bce:	4605      	mov	r5, r0
 8001bd0:	9001      	str	r0, [sp, #4]
 8001bd2:	e6b8      	b.n	8001946 <d_type+0x256>
 8001bd4:	7893      	ldrb	r3, [r2, #2]
 8001bd6:	2b5f      	cmp	r3, #95	; 0x5f
 8001bd8:	f000 8178 	beq.w	8001ecc <d_type+0x7dc>
 8001bdc:	f7fe fc2e 	bl	800043c <d_number_component>
 8001be0:	4605      	mov	r5, r0
 8001be2:	2d00      	cmp	r5, #0
 8001be4:	f43f ae35 	beq.w	8001852 <d_type+0x162>
 8001be8:	68e3      	ldr	r3, [r4, #12]
 8001bea:	781a      	ldrb	r2, [r3, #0]
 8001bec:	2a5f      	cmp	r2, #95	; 0x5f
 8001bee:	f47f ae30 	bne.w	8001852 <d_type+0x162>
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	60e3      	str	r3, [r4, #12]
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	f7ff fd7a 	bl	80016f0 <d_type>
 8001bfc:	462a      	mov	r2, r5
 8001bfe:	4603      	mov	r3, r0
 8001c00:	212d      	movs	r1, #45	; 0x2d
 8001c02:	4620      	mov	r0, r4
 8001c04:	f7fe faf4 	bl	80001f0 <d_make_comp>
 8001c08:	4605      	mov	r5, r0
 8001c0a:	9001      	str	r0, [sp, #4]
 8001c0c:	e69b      	b.n	8001946 <d_type+0x256>
 8001c0e:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001c12:	4293      	cmp	r3, r2
 8001c14:	f280 80fb 	bge.w	8001e0e <d_type+0x71e>
 8001c18:	6900      	ldr	r0, [r0, #16]
 8001c1a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c1c:	0119      	lsls	r1, r3, #4
 8001c1e:	1845      	adds	r5, r0, r1
 8001c20:	3301      	adds	r3, #1
 8001c22:	2600      	movs	r6, #0
 8001c24:	606e      	str	r6, [r5, #4]
 8001c26:	3208      	adds	r2, #8
 8001c28:	6163      	str	r3, [r4, #20]
 8001c2a:	2627      	movs	r6, #39	; 0x27
 8001c2c:	4b66      	ldr	r3, [pc, #408]	; (8001dc8 <d_type+0x6d8>)
 8001c2e:	5446      	strb	r6, [r0, r1]
 8001c30:	60ab      	str	r3, [r5, #8]
 8001c32:	6322      	str	r2, [r4, #48]	; 0x30
 8001c34:	e5e7      	b.n	8001806 <d_type+0x116>
 8001c36:	f7ff fd5b 	bl	80016f0 <d_type>
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	214a      	movs	r1, #74	; 0x4a
 8001c40:	4620      	mov	r0, r4
 8001c42:	f7fe fad5 	bl	80001f0 <d_make_comp>
 8001c46:	4605      	mov	r5, r0
 8001c48:	9001      	str	r0, [sp, #4]
 8001c4a:	e67c      	b.n	8001946 <d_type+0x256>
 8001c4c:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001c50:	4293      	cmp	r3, r2
 8001c52:	f280 80dc 	bge.w	8001e0e <d_type+0x71e>
 8001c56:	6900      	ldr	r0, [r0, #16]
 8001c58:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c5a:	0119      	lsls	r1, r3, #4
 8001c5c:	1845      	adds	r5, r0, r1
 8001c5e:	3301      	adds	r3, #1
 8001c60:	2600      	movs	r6, #0
 8001c62:	606e      	str	r6, [r5, #4]
 8001c64:	3204      	adds	r2, #4
 8001c66:	6163      	str	r3, [r4, #20]
 8001c68:	2627      	movs	r6, #39	; 0x27
 8001c6a:	4b58      	ldr	r3, [pc, #352]	; (8001dcc <d_type+0x6dc>)
 8001c6c:	5446      	strb	r6, [r0, r1]
 8001c6e:	60ab      	str	r3, [r5, #8]
 8001c70:	6322      	str	r2, [r4, #48]	; 0x30
 8001c72:	e5c8      	b.n	8001806 <d_type+0x116>
 8001c74:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	f280 80c8 	bge.w	8001e0e <d_type+0x71e>
 8001c7e:	6900      	ldr	r0, [r0, #16]
 8001c80:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c82:	0119      	lsls	r1, r3, #4
 8001c84:	1845      	adds	r5, r0, r1
 8001c86:	3301      	adds	r3, #1
 8001c88:	2600      	movs	r6, #0
 8001c8a:	606e      	str	r6, [r5, #4]
 8001c8c:	3209      	adds	r2, #9
 8001c8e:	6163      	str	r3, [r4, #20]
 8001c90:	2627      	movs	r6, #39	; 0x27
 8001c92:	4b4f      	ldr	r3, [pc, #316]	; (8001dd0 <d_type+0x6e0>)
 8001c94:	5446      	strb	r6, [r0, r1]
 8001c96:	60ab      	str	r3, [r5, #8]
 8001c98:	6322      	str	r2, [r4, #48]	; 0x30
 8001c9a:	e5b4      	b.n	8001806 <d_type+0x116>
 8001c9c:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	f280 80b4 	bge.w	8001e0e <d_type+0x71e>
 8001ca6:	6900      	ldr	r0, [r0, #16]
 8001ca8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001caa:	0119      	lsls	r1, r3, #4
 8001cac:	1845      	adds	r5, r0, r1
 8001cae:	3301      	adds	r3, #1
 8001cb0:	2600      	movs	r6, #0
 8001cb2:	606e      	str	r6, [r5, #4]
 8001cb4:	320a      	adds	r2, #10
 8001cb6:	6163      	str	r3, [r4, #20]
 8001cb8:	2627      	movs	r6, #39	; 0x27
 8001cba:	4b46      	ldr	r3, [pc, #280]	; (8001dd4 <d_type+0x6e4>)
 8001cbc:	5446      	strb	r6, [r0, r1]
 8001cbe:	60ab      	str	r3, [r5, #8]
 8001cc0:	6322      	str	r2, [r4, #48]	; 0x30
 8001cc2:	e5a0      	b.n	8001806 <d_type+0x116>
 8001cc4:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	f280 80a0 	bge.w	8001e0e <d_type+0x71e>
 8001cce:	6900      	ldr	r0, [r0, #16]
 8001cd0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001cd2:	0119      	lsls	r1, r3, #4
 8001cd4:	1845      	adds	r5, r0, r1
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	2600      	movs	r6, #0
 8001cda:	606e      	str	r6, [r5, #4]
 8001cdc:	3209      	adds	r2, #9
 8001cde:	6163      	str	r3, [r4, #20]
 8001ce0:	2627      	movs	r6, #39	; 0x27
 8001ce2:	4b3d      	ldr	r3, [pc, #244]	; (8001dd8 <d_type+0x6e8>)
 8001ce4:	5446      	strb	r6, [r0, r1]
 8001ce6:	60ab      	str	r3, [r5, #8]
 8001ce8:	6322      	str	r2, [r4, #48]	; 0x30
 8001cea:	e58c      	b.n	8001806 <d_type+0x116>
 8001cec:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	f6bf adae 	bge.w	8001852 <d_type+0x162>
 8001cf6:	6901      	ldr	r1, [r0, #16]
 8001cf8:	4e38      	ldr	r6, [pc, #224]	; (8001ddc <d_type+0x6ec>)
 8001cfa:	011a      	lsls	r2, r3, #4
 8001cfc:	188d      	adds	r5, r1, r2
 8001cfe:	3301      	adds	r3, #1
 8001d00:	6143      	str	r3, [r0, #20]
 8001d02:	2300      	movs	r3, #0
 8001d04:	200e      	movs	r0, #14
 8001d06:	606b      	str	r3, [r5, #4]
 8001d08:	548b      	strb	r3, [r1, r2]
 8001d0a:	e9c5 6002 	strd	r6, r0, [r5, #8]
 8001d0e:	e57a      	b.n	8001806 <d_type+0x116>
 8001d10:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001d14:	4293      	cmp	r3, r2
 8001d16:	f6bf ad9c 	bge.w	8001852 <d_type+0x162>
 8001d1a:	6901      	ldr	r1, [r0, #16]
 8001d1c:	4e30      	ldr	r6, [pc, #192]	; (8001de0 <d_type+0x6f0>)
 8001d1e:	011a      	lsls	r2, r3, #4
 8001d20:	188d      	adds	r5, r1, r2
 8001d22:	3301      	adds	r3, #1
 8001d24:	6143      	str	r3, [r0, #20]
 8001d26:	2300      	movs	r3, #0
 8001d28:	2004      	movs	r0, #4
 8001d2a:	606b      	str	r3, [r5, #4]
 8001d2c:	548b      	strb	r3, [r1, r2]
 8001d2e:	e9c5 6002 	strd	r6, r0, [r5, #8]
 8001d32:	e568      	b.n	8001806 <d_type+0x116>
 8001d34:	e9d0 3105 	ldrd	r3, r1, [r0, #20]
 8001d38:	428b      	cmp	r3, r1
 8001d3a:	f280 80af 	bge.w	8001e9c <d_type+0x7ac>
 8001d3e:	6905      	ldr	r5, [r0, #16]
 8001d40:	0118      	lsls	r0, r3, #4
 8001d42:	1829      	adds	r1, r5, r0
 8001d44:	3301      	adds	r3, #1
 8001d46:	2700      	movs	r7, #0
 8001d48:	262c      	movs	r6, #44	; 0x2c
 8001d4a:	604f      	str	r7, [r1, #4]
 8001d4c:	9101      	str	r1, [sp, #4]
 8001d4e:	6163      	str	r3, [r4, #20]
 8001d50:	542e      	strb	r6, [r5, r0]
 8001d52:	7893      	ldrb	r3, [r2, #2]
 8001d54:	3b30      	subs	r3, #48	; 0x30
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b09      	cmp	r3, #9
 8001d5a:	bf94      	ite	ls
 8001d5c:	2301      	movls	r3, #1
 8001d5e:	463b      	movhi	r3, r7
 8001d60:	818b      	strh	r3, [r1, #12]
 8001d62:	f240 80ae 	bls.w	8001ec2 <d_type+0x7d2>
 8001d66:	4620      	mov	r0, r4
 8001d68:	9d01      	ldr	r5, [sp, #4]
 8001d6a:	f7ff fcc1 	bl	80016f0 <d_type>
 8001d6e:	9b01      	ldr	r3, [sp, #4]
 8001d70:	60a8      	str	r0, [r5, #8]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f43f ad6c 	beq.w	8001852 <d_type+0x162>
 8001d7a:	f104 000c 	add.w	r0, r4, #12
 8001d7e:	f7fe fb31 	bl	80003e4 <d_number.isra.1>
 8001d82:	68e2      	ldr	r2, [r4, #12]
 8001d84:	7813      	ldrb	r3, [r2, #0]
 8001d86:	b113      	cbz	r3, 8001d8e <d_type+0x69e>
 8001d88:	1c53      	adds	r3, r2, #1
 8001d8a:	60e3      	str	r3, [r4, #12]
 8001d8c:	7813      	ldrb	r3, [r2, #0]
 8001d8e:	9d01      	ldr	r5, [sp, #4]
 8001d90:	f1a3 0273 	sub.w	r2, r3, #115	; 0x73
 8001d94:	4253      	negs	r3, r2
 8001d96:	4153      	adcs	r3, r2
 8001d98:	81eb      	strh	r3, [r5, #14]
 8001d9a:	e534      	b.n	8001806 <d_type+0x116>
 8001d9c:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001da0:	4293      	cmp	r3, r2
 8001da2:	da34      	bge.n	8001e0e <d_type+0x71e>
 8001da4:	6900      	ldr	r0, [r0, #16]
 8001da6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001da8:	0119      	lsls	r1, r3, #4
 8001daa:	1845      	adds	r5, r0, r1
 8001dac:	3301      	adds	r3, #1
 8001dae:	2600      	movs	r6, #0
 8001db0:	606e      	str	r6, [r5, #4]
 8001db2:	3211      	adds	r2, #17
 8001db4:	6163      	str	r3, [r4, #20]
 8001db6:	2627      	movs	r6, #39	; 0x27
 8001db8:	4b0a      	ldr	r3, [pc, #40]	; (8001de4 <d_type+0x6f4>)
 8001dba:	5446      	strb	r6, [r0, r1]
 8001dbc:	60ab      	str	r3, [r5, #8]
 8001dbe:	6322      	str	r2, [r4, #48]	; 0x30
 8001dc0:	e521      	b.n	8001806 <d_type+0x116>
 8001dc2:	bf00      	nop
 8001dc4:	0803030c 	.word	0x0803030c
 8001dc8:	08030564 	.word	0x08030564
 8001dcc:	08030550 	.word	0x08030550
 8001dd0:	08030514 	.word	0x08030514
 8001dd4:	0803053c 	.word	0x0803053c
 8001dd8:	08030528 	.word	0x08030528
 8001ddc:	08034e54 	.word	0x08034e54
 8001de0:	08034e4c 	.word	0x08034e4c
 8001de4:	0803058c 	.word	0x0803058c
 8001de8:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001dec:	4293      	cmp	r3, r2
 8001dee:	da0e      	bge.n	8001e0e <d_type+0x71e>
 8001df0:	6900      	ldr	r0, [r0, #16]
 8001df2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001df4:	0119      	lsls	r1, r3, #4
 8001df6:	1845      	adds	r5, r0, r1
 8001df8:	3301      	adds	r3, #1
 8001dfa:	2600      	movs	r6, #0
 8001dfc:	606e      	str	r6, [r5, #4]
 8001dfe:	3208      	adds	r2, #8
 8001e00:	6163      	str	r3, [r4, #20]
 8001e02:	2627      	movs	r6, #39	; 0x27
 8001e04:	4b36      	ldr	r3, [pc, #216]	; (8001ee0 <d_type+0x7f0>)
 8001e06:	5446      	strb	r6, [r0, r1]
 8001e08:	60ab      	str	r3, [r5, #8]
 8001e0a:	6322      	str	r2, [r4, #48]	; 0x30
 8001e0c:	e4fb      	b.n	8001806 <d_type+0x116>
 8001e0e:	2300      	movs	r3, #0
 8001e10:	9301      	str	r3, [sp, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	deff      	udf	#255	; 0xff
 8001e16:	2600      	movs	r6, #0
 8001e18:	e6ce      	b.n	8001bb8 <d_type+0x4c8>
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	60e3      	str	r3, [r4, #12]
 8001e1e:	4620      	mov	r0, r4
 8001e20:	f7ff fa4e 	bl	80012c0 <d_template_args_1>
 8001e24:	462a      	mov	r2, r5
 8001e26:	4603      	mov	r3, r0
 8001e28:	2104      	movs	r1, #4
 8001e2a:	4620      	mov	r0, r4
 8001e2c:	f7fe f9e0 	bl	80001f0 <d_make_comp>
 8001e30:	9001      	str	r0, [sp, #4]
 8001e32:	e64a      	b.n	8001aca <d_type+0x3da>
 8001e34:	2301      	movs	r3, #1
 8001e36:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8001e38:	6363      	str	r3, [r4, #52]	; 0x34
 8001e3a:	4620      	mov	r0, r4
 8001e3c:	f7ff f82e 	bl	8000e9c <d_expression_1>
 8001e40:	6365      	str	r5, [r4, #52]	; 0x34
 8001e42:	4606      	mov	r6, r0
 8001e44:	2800      	cmp	r0, #0
 8001e46:	f43f ad04 	beq.w	8001852 <d_type+0x162>
 8001e4a:	68e5      	ldr	r5, [r4, #12]
 8001e4c:	782b      	ldrb	r3, [r5, #0]
 8001e4e:	e6b0      	b.n	8001bb2 <d_type+0x4c2>
 8001e50:	4620      	mov	r0, r4
 8001e52:	f7ff faa1 	bl	8001398 <d_name>
 8001e56:	4605      	mov	r5, r0
 8001e58:	9001      	str	r0, [sp, #4]
 8001e5a:	2800      	cmp	r0, #0
 8001e5c:	f43f acf9 	beq.w	8001852 <d_type+0x162>
 8001e60:	7803      	ldrb	r3, [r0, #0]
 8001e62:	2b18      	cmp	r3, #24
 8001e64:	f47f ad71 	bne.w	800194a <d_type+0x25a>
 8001e68:	e4cd      	b.n	8001806 <d_type+0x116>
 8001e6a:	1c73      	adds	r3, r6, #1
 8001e6c:	60e3      	str	r3, [r4, #12]
 8001e6e:	4620      	mov	r0, r4
 8001e70:	f8d4 9014 	ldr.w	r9, [r4, #20]
 8001e74:	f8d4 8020 	ldr.w	r8, [r4, #32]
 8001e78:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8001e7a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8001e7c:	f7ff fa20 	bl	80012c0 <d_template_args_1>
 8001e80:	68e2      	ldr	r2, [r4, #12]
 8001e82:	7812      	ldrb	r2, [r2, #0]
 8001e84:	2a49      	cmp	r2, #73	; 0x49
 8001e86:	4603      	mov	r3, r0
 8001e88:	d00b      	beq.n	8001ea2 <d_type+0x7b2>
 8001e8a:	6325      	str	r5, [r4, #48]	; 0x30
 8001e8c:	60e6      	str	r6, [r4, #12]
 8001e8e:	f8c4 9014 	str.w	r9, [r4, #20]
 8001e92:	f8c4 8020 	str.w	r8, [r4, #32]
 8001e96:	62a7      	str	r7, [r4, #40]	; 0x28
 8001e98:	9d01      	ldr	r5, [sp, #4]
 8001e9a:	e554      	b.n	8001946 <d_type+0x256>
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	701b      	strb	r3, [r3, #0]
 8001ea0:	deff      	udf	#255	; 0xff
 8001ea2:	9901      	ldr	r1, [sp, #4]
 8001ea4:	2900      	cmp	r1, #0
 8001ea6:	f43f acd4 	beq.w	8001852 <d_type+0x162>
 8001eaa:	e9d4 2008 	ldrd	r2, r0, [r4, #32]
 8001eae:	4282      	cmp	r2, r0
 8001eb0:	f6bf accf 	bge.w	8001852 <d_type+0x162>
 8001eb4:	69e0      	ldr	r0, [r4, #28]
 8001eb6:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
 8001eba:	3201      	adds	r2, #1
 8001ebc:	6222      	str	r2, [r4, #32]
 8001ebe:	9a01      	ldr	r2, [sp, #4]
 8001ec0:	e5c9      	b.n	8001a56 <d_type+0x366>
 8001ec2:	f104 000c 	add.w	r0, r4, #12
 8001ec6:	f7fe fa8d 	bl	80003e4 <d_number.isra.1>
 8001eca:	e74c      	b.n	8001d66 <d_type+0x676>
 8001ecc:	3203      	adds	r2, #3
 8001ece:	2301      	movs	r3, #1
 8001ed0:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8001ed2:	60c2      	str	r2, [r0, #12]
 8001ed4:	6343      	str	r3, [r0, #52]	; 0x34
 8001ed6:	f7fe ffe1 	bl	8000e9c <d_expression_1>
 8001eda:	6366      	str	r6, [r4, #52]	; 0x34
 8001edc:	4605      	mov	r5, r0
 8001ede:	e680      	b.n	8001be2 <d_type+0x4f2>
 8001ee0:	08030578 	.word	0x08030578

08001ee4 <d_operator_name>:
 8001ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ee6:	68c3      	ldr	r3, [r0, #12]
 8001ee8:	781e      	ldrb	r6, [r3, #0]
 8001eea:	4686      	mov	lr, r0
 8001eec:	b336      	cbz	r6, 8001f3c <d_operator_name+0x58>
 8001eee:	1c5a      	adds	r2, r3, #1
 8001ef0:	60c2      	str	r2, [r0, #12]
 8001ef2:	785a      	ldrb	r2, [r3, #1]
 8001ef4:	781e      	ldrb	r6, [r3, #0]
 8001ef6:	2a00      	cmp	r2, #0
 8001ef8:	d04a      	beq.n	8001f90 <d_operator_name+0xac>
 8001efa:	1c9a      	adds	r2, r3, #2
 8001efc:	60c2      	str	r2, [r0, #12]
 8001efe:	2e76      	cmp	r6, #118	; 0x76
 8001f00:	4604      	mov	r4, r0
 8001f02:	f893 c001 	ldrb.w	ip, [r3, #1]
 8001f06:	d145      	bne.n	8001f94 <d_operator_name+0xb0>
 8001f08:	f1ac 0530 	sub.w	r5, ip, #48	; 0x30
 8001f0c:	b2eb      	uxtb	r3, r5
 8001f0e:	2b09      	cmp	r3, #9
 8001f10:	d815      	bhi.n	8001f3e <d_operator_name+0x5a>
 8001f12:	f7fe fae7 	bl	80004e4 <d_source_name>
 8001f16:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8001f1a:	428b      	cmp	r3, r1
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	da21      	bge.n	8001f64 <d_operator_name+0x80>
 8001f20:	6926      	ldr	r6, [r4, #16]
 8001f22:	0119      	lsls	r1, r3, #4
 8001f24:	1870      	adds	r0, r6, r1
 8001f26:	3301      	adds	r3, #1
 8001f28:	2700      	movs	r7, #0
 8001f2a:	6047      	str	r7, [r0, #4]
 8001f2c:	6163      	str	r3, [r4, #20]
 8001f2e:	b1ca      	cbz	r2, 8001f64 <d_operator_name+0x80>
 8001f30:	2332      	movs	r3, #50	; 0x32
 8001f32:	6047      	str	r7, [r0, #4]
 8001f34:	5473      	strb	r3, [r6, r1]
 8001f36:	e9c0 5202 	strd	r5, r2, [r0, #8]
 8001f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f3c:	46b4      	mov	ip, r6
 8001f3e:	4c23      	ldr	r4, [pc, #140]	; (8001fcc <d_operator_name+0xe8>)
 8001f40:	2043      	movs	r0, #67	; 0x43
 8001f42:	2200      	movs	r2, #0
 8001f44:	1a83      	subs	r3, r0, r2
 8001f46:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8001f4a:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8001f4e:	0119      	lsls	r1, r3, #4
 8001f50:	1867      	adds	r7, r4, r1
 8001f52:	5861      	ldr	r1, [r4, r1]
 8001f54:	780d      	ldrb	r5, [r1, #0]
 8001f56:	42b5      	cmp	r5, r6
 8001f58:	d006      	beq.n	8001f68 <d_operator_name+0x84>
 8001f5a:	bf94      	ite	ls
 8001f5c:	1c5a      	addls	r2, r3, #1
 8001f5e:	4618      	movhi	r0, r3
 8001f60:	4282      	cmp	r2, r0
 8001f62:	d1ef      	bne.n	8001f44 <d_operator_name+0x60>
 8001f64:	2000      	movs	r0, #0
 8001f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f68:	7849      	ldrb	r1, [r1, #1]
 8001f6a:	4561      	cmp	r1, ip
 8001f6c:	d1f5      	bne.n	8001f5a <d_operator_name+0x76>
 8001f6e:	e9de 3205 	ldrd	r3, r2, [lr, #20]
 8001f72:	4293      	cmp	r3, r2
 8001f74:	daf6      	bge.n	8001f64 <d_operator_name+0x80>
 8001f76:	f8de 1010 	ldr.w	r1, [lr, #16]
 8001f7a:	011a      	lsls	r2, r3, #4
 8001f7c:	1888      	adds	r0, r1, r2
 8001f7e:	3301      	adds	r3, #1
 8001f80:	2500      	movs	r5, #0
 8001f82:	2431      	movs	r4, #49	; 0x31
 8001f84:	6045      	str	r5, [r0, #4]
 8001f86:	f8ce 3014 	str.w	r3, [lr, #20]
 8001f8a:	548c      	strb	r4, [r1, r2]
 8001f8c:	6087      	str	r7, [r0, #8]
 8001f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f90:	4694      	mov	ip, r2
 8001f92:	e7d4      	b.n	8001f3e <d_operator_name+0x5a>
 8001f94:	2e63      	cmp	r6, #99	; 0x63
 8001f96:	d1d2      	bne.n	8001f3e <d_operator_name+0x5a>
 8001f98:	f1bc 0f76 	cmp.w	ip, #118	; 0x76
 8001f9c:	d1cf      	bne.n	8001f3e <d_operator_name+0x5a>
 8001f9e:	e9d0 350d 	ldrd	r3, r5, [r0, #52]	; 0x34
 8001fa2:	fab3 f383 	clz	r3, r3
 8001fa6:	095b      	lsrs	r3, r3, #5
 8001fa8:	6383      	str	r3, [r0, #56]	; 0x38
 8001faa:	f7ff fba1 	bl	80016f0 <d_type>
 8001fae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	b92b      	cbnz	r3, 8001fc0 <d_operator_name+0xdc>
 8001fb4:	2133      	movs	r1, #51	; 0x33
 8001fb6:	4620      	mov	r0, r4
 8001fb8:	f7fe f91a 	bl	80001f0 <d_make_comp>
 8001fbc:	63a5      	str	r5, [r4, #56]	; 0x38
 8001fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	2134      	movs	r1, #52	; 0x34
 8001fc4:	4620      	mov	r0, r4
 8001fc6:	f7fe f913 	bl	80001f0 <d_make_comp>
 8001fca:	e7f7      	b.n	8001fbc <d_operator_name+0xd8>
 8001fcc:	080305a0 	.word	0x080305a0

08001fd0 <d_parmlist>:
 8001fd0:	b530      	push	{r4, r5, lr}
 8001fd2:	68c2      	ldr	r2, [r0, #12]
 8001fd4:	b083      	sub	sp, #12
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	9301      	str	r3, [sp, #4]
 8001fda:	7813      	ldrb	r3, [r2, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d036      	beq.n	800204e <d_parmlist+0x7e>
 8001fe0:	2b45      	cmp	r3, #69	; 0x45
 8001fe2:	d034      	beq.n	800204e <d_parmlist+0x7e>
 8001fe4:	2b2e      	cmp	r3, #46	; 0x2e
 8001fe6:	d032      	beq.n	800204e <d_parmlist+0x7e>
 8001fe8:	4604      	mov	r4, r0
 8001fea:	ad01      	add	r5, sp, #4
 8001fec:	e015      	b.n	800201a <d_parmlist+0x4a>
 8001fee:	2b4f      	cmp	r3, #79	; 0x4f
 8001ff0:	d016      	beq.n	8002020 <d_parmlist+0x50>
 8001ff2:	f7ff fb7d 	bl	80016f0 <d_type>
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	212e      	movs	r1, #46	; 0x2e
 8001ffc:	b338      	cbz	r0, 800204e <d_parmlist+0x7e>
 8001ffe:	4620      	mov	r0, r4
 8002000:	f7fe f8f6 	bl	80001f0 <d_make_comp>
 8002004:	6028      	str	r0, [r5, #0]
 8002006:	b310      	cbz	r0, 800204e <d_parmlist+0x7e>
 8002008:	68e2      	ldr	r2, [r4, #12]
 800200a:	7813      	ldrb	r3, [r2, #0]
 800200c:	f100 050c 	add.w	r5, r0, #12
 8002010:	b14b      	cbz	r3, 8002026 <d_parmlist+0x56>
 8002012:	2b45      	cmp	r3, #69	; 0x45
 8002014:	d007      	beq.n	8002026 <d_parmlist+0x56>
 8002016:	2b2e      	cmp	r3, #46	; 0x2e
 8002018:	d005      	beq.n	8002026 <d_parmlist+0x56>
 800201a:	2b52      	cmp	r3, #82	; 0x52
 800201c:	4620      	mov	r0, r4
 800201e:	d1e6      	bne.n	8001fee <d_parmlist+0x1e>
 8002020:	7853      	ldrb	r3, [r2, #1]
 8002022:	2b45      	cmp	r3, #69	; 0x45
 8002024:	d1e5      	bne.n	8001ff2 <d_parmlist+0x22>
 8002026:	9801      	ldr	r0, [sp, #4]
 8002028:	b188      	cbz	r0, 800204e <d_parmlist+0x7e>
 800202a:	68c3      	ldr	r3, [r0, #12]
 800202c:	b10b      	cbz	r3, 8002032 <d_parmlist+0x62>
 800202e:	b003      	add	sp, #12
 8002030:	bd30      	pop	{r4, r5, pc}
 8002032:	6882      	ldr	r2, [r0, #8]
 8002034:	7811      	ldrb	r1, [r2, #0]
 8002036:	2927      	cmp	r1, #39	; 0x27
 8002038:	d1f9      	bne.n	800202e <d_parmlist+0x5e>
 800203a:	6892      	ldr	r2, [r2, #8]
 800203c:	7c11      	ldrb	r1, [r2, #16]
 800203e:	2909      	cmp	r1, #9
 8002040:	d1f5      	bne.n	800202e <d_parmlist+0x5e>
 8002042:	6851      	ldr	r1, [r2, #4]
 8002044:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002046:	1a52      	subs	r2, r2, r1
 8002048:	6322      	str	r2, [r4, #48]	; 0x30
 800204a:	6083      	str	r3, [r0, #8]
 800204c:	e7ef      	b.n	800202e <d_parmlist+0x5e>
 800204e:	2000      	movs	r0, #0
 8002050:	b003      	add	sp, #12
 8002052:	bd30      	pop	{r4, r5, pc}

08002054 <d_cv_qualifiers>:
 8002054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002058:	4689      	mov	r9, r1
 800205a:	b083      	sub	sp, #12
 800205c:	68c1      	ldr	r1, [r0, #12]
 800205e:	1e13      	subs	r3, r2, #0
 8002060:	9301      	str	r3, [sp, #4]
 8002062:	4604      	mov	r4, r0
 8002064:	780b      	ldrb	r3, [r1, #0]
 8002066:	bf15      	itete	ne
 8002068:	f04f 081e 	movne.w	r8, #30
 800206c:	f04f 081b 	moveq.w	r8, #27
 8002070:	271d      	movne	r7, #29
 8002072:	271a      	moveq	r7, #26
 8002074:	bf14      	ite	ne
 8002076:	261c      	movne	r6, #28
 8002078:	2619      	moveq	r6, #25
 800207a:	464d      	mov	r5, r9
 800207c:	f04f 0a01 	mov.w	sl, #1
 8002080:	e01c      	b.n	80020bc <d_cv_qualifiers+0x68>
 8002082:	2b56      	cmp	r3, #86	; 0x56
 8002084:	d03f      	beq.n	8002106 <d_cv_qualifiers+0xb2>
 8002086:	2b4b      	cmp	r3, #75	; 0x4b
 8002088:	d043      	beq.n	8002112 <d_cv_qualifiers+0xbe>
 800208a:	784b      	ldrb	r3, [r1, #1]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d035      	beq.n	80020fc <d_cv_qualifiers+0xa8>
 8002090:	1c8b      	adds	r3, r1, #2
 8002092:	60e3      	str	r3, [r4, #12]
 8002094:	784b      	ldrb	r3, [r1, #1]
 8002096:	2b78      	cmp	r3, #120	; 0x78
 8002098:	d041      	beq.n	800211e <d_cv_qualifiers+0xca>
 800209a:	2b6f      	cmp	r3, #111	; 0x6f
 800209c:	d145      	bne.n	800212a <d_cv_qualifiers+0xd6>
 800209e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80020a0:	3309      	adds	r3, #9
 80020a2:	6323      	str	r3, [r4, #48]	; 0x30
 80020a4:	214e      	movs	r1, #78	; 0x4e
 80020a6:	2300      	movs	r3, #0
 80020a8:	2200      	movs	r2, #0
 80020aa:	4620      	mov	r0, r4
 80020ac:	f7fe f8a0 	bl	80001f0 <d_make_comp>
 80020b0:	6028      	str	r0, [r5, #0]
 80020b2:	b318      	cbz	r0, 80020fc <d_cv_qualifiers+0xa8>
 80020b4:	68e1      	ldr	r1, [r4, #12]
 80020b6:	780b      	ldrb	r3, [r1, #0]
 80020b8:	f100 0508 	add.w	r5, r0, #8
 80020bc:	2b72      	cmp	r3, #114	; 0x72
 80020be:	d00d      	beq.n	80020dc <d_cv_qualifiers+0x88>
 80020c0:	2b56      	cmp	r3, #86	; 0x56
 80020c2:	d00b      	beq.n	80020dc <d_cv_qualifiers+0x88>
 80020c4:	2b4b      	cmp	r3, #75	; 0x4b
 80020c6:	d009      	beq.n	80020dc <d_cv_qualifiers+0x88>
 80020c8:	2b44      	cmp	r3, #68	; 0x44
 80020ca:	d146      	bne.n	800215a <d_cv_qualifiers+0x106>
 80020cc:	784a      	ldrb	r2, [r1, #1]
 80020ce:	f002 00df 	and.w	r0, r2, #223	; 0xdf
 80020d2:	284f      	cmp	r0, #79	; 0x4f
 80020d4:	d002      	beq.n	80020dc <d_cv_qualifiers+0x88>
 80020d6:	3a77      	subs	r2, #119	; 0x77
 80020d8:	2a01      	cmp	r2, #1
 80020da:	d83e      	bhi.n	800215a <d_cv_qualifiers+0x106>
 80020dc:	1c4a      	adds	r2, r1, #1
 80020de:	2b72      	cmp	r3, #114	; 0x72
 80020e0:	60e2      	str	r2, [r4, #12]
 80020e2:	d1ce      	bne.n	8002082 <d_cv_qualifiers+0x2e>
 80020e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80020e6:	3309      	adds	r3, #9
 80020e8:	6323      	str	r3, [r4, #48]	; 0x30
 80020ea:	4631      	mov	r1, r6
 80020ec:	2300      	movs	r3, #0
 80020ee:	2200      	movs	r2, #0
 80020f0:	4620      	mov	r0, r4
 80020f2:	f7fe f87d 	bl	80001f0 <d_make_comp>
 80020f6:	6028      	str	r0, [r5, #0]
 80020f8:	2800      	cmp	r0, #0
 80020fa:	d1db      	bne.n	80020b4 <d_cv_qualifiers+0x60>
 80020fc:	2500      	movs	r5, #0
 80020fe:	4628      	mov	r0, r5
 8002100:	b003      	add	sp, #12
 8002102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002106:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002108:	3309      	adds	r3, #9
 800210a:	6323      	str	r3, [r4, #48]	; 0x30
 800210c:	4639      	mov	r1, r7
 800210e:	2300      	movs	r3, #0
 8002110:	e7ca      	b.n	80020a8 <d_cv_qualifiers+0x54>
 8002112:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002114:	3306      	adds	r3, #6
 8002116:	6323      	str	r3, [r4, #48]	; 0x30
 8002118:	4641      	mov	r1, r8
 800211a:	2300      	movs	r3, #0
 800211c:	e7c4      	b.n	80020a8 <d_cv_qualifiers+0x54>
 800211e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002120:	3311      	adds	r3, #17
 8002122:	6323      	str	r3, [r4, #48]	; 0x30
 8002124:	214c      	movs	r1, #76	; 0x4c
 8002126:	2300      	movs	r3, #0
 8002128:	e7be      	b.n	80020a8 <d_cv_qualifiers+0x54>
 800212a:	2b4f      	cmp	r3, #79	; 0x4f
 800212c:	d132      	bne.n	8002194 <d_cv_qualifiers+0x140>
 800212e:	e9d4 3b0c 	ldrd	r3, fp, [r4, #48]	; 0x30
 8002132:	3309      	adds	r3, #9
 8002134:	6323      	str	r3, [r4, #48]	; 0x30
 8002136:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
 800213a:	4620      	mov	r0, r4
 800213c:	f7fe feae 	bl	8000e9c <d_expression_1>
 8002140:	f8c4 b034 	str.w	fp, [r4, #52]	; 0x34
 8002144:	4603      	mov	r3, r0
 8002146:	2800      	cmp	r0, #0
 8002148:	d0d8      	beq.n	80020fc <d_cv_qualifiers+0xa8>
 800214a:	68e2      	ldr	r2, [r4, #12]
 800214c:	7811      	ldrb	r1, [r2, #0]
 800214e:	2945      	cmp	r1, #69	; 0x45
 8002150:	d1d4      	bne.n	80020fc <d_cv_qualifiers+0xa8>
 8002152:	3201      	adds	r2, #1
 8002154:	60e2      	str	r2, [r4, #12]
 8002156:	214e      	movs	r1, #78	; 0x4e
 8002158:	e7a6      	b.n	80020a8 <d_cv_qualifiers+0x54>
 800215a:	9a01      	ldr	r2, [sp, #4]
 800215c:	2a00      	cmp	r2, #0
 800215e:	d1ce      	bne.n	80020fe <d_cv_qualifiers+0xaa>
 8002160:	2b46      	cmp	r3, #70	; 0x46
 8002162:	d1cc      	bne.n	80020fe <d_cv_qualifiers+0xaa>
 8002164:	454d      	cmp	r5, r9
 8002166:	d0ca      	beq.n	80020fe <d_cv_qualifiers+0xaa>
 8002168:	241d      	movs	r4, #29
 800216a:	201e      	movs	r0, #30
 800216c:	211c      	movs	r1, #28
 800216e:	e008      	b.n	8002182 <d_cv_qualifiers+0x12e>
 8002170:	2a1b      	cmp	r2, #27
 8002172:	d00d      	beq.n	8002190 <d_cv_qualifiers+0x13c>
 8002174:	2a19      	cmp	r2, #25
 8002176:	d100      	bne.n	800217a <d_cv_qualifiers+0x126>
 8002178:	7019      	strb	r1, [r3, #0]
 800217a:	f103 0908 	add.w	r9, r3, #8
 800217e:	454d      	cmp	r5, r9
 8002180:	d0bd      	beq.n	80020fe <d_cv_qualifiers+0xaa>
 8002182:	f8d9 3000 	ldr.w	r3, [r9]
 8002186:	781a      	ldrb	r2, [r3, #0]
 8002188:	2a1a      	cmp	r2, #26
 800218a:	d1f1      	bne.n	8002170 <d_cv_qualifiers+0x11c>
 800218c:	701c      	strb	r4, [r3, #0]
 800218e:	e7f4      	b.n	800217a <d_cv_qualifiers+0x126>
 8002190:	7018      	strb	r0, [r3, #0]
 8002192:	e7f2      	b.n	800217a <d_cv_qualifiers+0x126>
 8002194:	2b77      	cmp	r3, #119	; 0x77
 8002196:	d1b1      	bne.n	80020fc <d_cv_qualifiers+0xa8>
 8002198:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800219a:	3306      	adds	r3, #6
 800219c:	6323      	str	r3, [r4, #48]	; 0x30
 800219e:	4620      	mov	r0, r4
 80021a0:	f7ff ff16 	bl	8001fd0 <d_parmlist>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2800      	cmp	r0, #0
 80021a8:	d0a8      	beq.n	80020fc <d_cv_qualifiers+0xa8>
 80021aa:	68e2      	ldr	r2, [r4, #12]
 80021ac:	7811      	ldrb	r1, [r2, #0]
 80021ae:	2945      	cmp	r1, #69	; 0x45
 80021b0:	d1a4      	bne.n	80020fc <d_cv_qualifiers+0xa8>
 80021b2:	3201      	adds	r2, #1
 80021b4:	60e2      	str	r2, [r4, #12]
 80021b6:	214f      	movs	r1, #79	; 0x4f
 80021b8:	e776      	b.n	80020a8 <d_cv_qualifiers+0x54>
 80021ba:	bf00      	nop

080021bc <d_bare_function_type>:
 80021bc:	b570      	push	{r4, r5, r6, lr}
 80021be:	68c3      	ldr	r3, [r0, #12]
 80021c0:	781a      	ldrb	r2, [r3, #0]
 80021c2:	2a4a      	cmp	r2, #74	; 0x4a
 80021c4:	4604      	mov	r4, r0
 80021c6:	d013      	beq.n	80021f0 <d_bare_function_type+0x34>
 80021c8:	b181      	cbz	r1, 80021ec <d_bare_function_type+0x30>
 80021ca:	4620      	mov	r0, r4
 80021cc:	f7ff fa90 	bl	80016f0 <d_type>
 80021d0:	4605      	mov	r5, r0
 80021d2:	b180      	cbz	r0, 80021f6 <d_bare_function_type+0x3a>
 80021d4:	4620      	mov	r0, r4
 80021d6:	f7ff fefb 	bl	8001fd0 <d_parmlist>
 80021da:	b160      	cbz	r0, 80021f6 <d_bare_function_type+0x3a>
 80021dc:	4603      	mov	r3, r0
 80021de:	462a      	mov	r2, r5
 80021e0:	4620      	mov	r0, r4
 80021e2:	2129      	movs	r1, #41	; 0x29
 80021e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80021e8:	f7fe b802 	b.w	80001f0 <d_make_comp>
 80021ec:	460d      	mov	r5, r1
 80021ee:	e7f1      	b.n	80021d4 <d_bare_function_type+0x18>
 80021f0:	3301      	adds	r3, #1
 80021f2:	60c3      	str	r3, [r0, #12]
 80021f4:	e7e9      	b.n	80021ca <d_bare_function_type+0xe>
 80021f6:	2000      	movs	r0, #0
 80021f8:	bd70      	pop	{r4, r5, r6, pc}
 80021fa:	bf00      	nop

080021fc <d_function_type>:
 80021fc:	68c3      	ldr	r3, [r0, #12]
 80021fe:	781a      	ldrb	r2, [r3, #0]
 8002200:	2a46      	cmp	r2, #70	; 0x46
 8002202:	d118      	bne.n	8002236 <d_function_type+0x3a>
 8002204:	b510      	push	{r4, lr}
 8002206:	1c5a      	adds	r2, r3, #1
 8002208:	60c2      	str	r2, [r0, #12]
 800220a:	785a      	ldrb	r2, [r3, #1]
 800220c:	2a59      	cmp	r2, #89	; 0x59
 800220e:	bf04      	itt	eq
 8002210:	3302      	addeq	r3, #2
 8002212:	60c3      	streq	r3, [r0, #12]
 8002214:	2101      	movs	r1, #1
 8002216:	4604      	mov	r4, r0
 8002218:	f7ff ffd0 	bl	80021bc <d_bare_function_type>
 800221c:	4601      	mov	r1, r0
 800221e:	4620      	mov	r0, r4
 8002220:	f7fe f82e 	bl	8000280 <d_ref_qualifier>
 8002224:	68e3      	ldr	r3, [r4, #12]
 8002226:	781a      	ldrb	r2, [r3, #0]
 8002228:	2a45      	cmp	r2, #69	; 0x45
 800222a:	d102      	bne.n	8002232 <d_function_type+0x36>
 800222c:	3301      	adds	r3, #1
 800222e:	60e3      	str	r3, [r4, #12]
 8002230:	bd10      	pop	{r4, pc}
 8002232:	2000      	movs	r0, #0
 8002234:	bd10      	pop	{r4, pc}
 8002236:	2000      	movs	r0, #0
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop

0800223c <d_unqualified_name>:
 800223c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002240:	68c1      	ldr	r1, [r0, #12]
 8002242:	780b      	ldrb	r3, [r1, #0]
 8002244:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002248:	2a09      	cmp	r2, #9
 800224a:	4604      	mov	r4, r0
 800224c:	d93c      	bls.n	80022c8 <d_unqualified_name+0x8c>
 800224e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8002252:	2a19      	cmp	r2, #25
 8002254:	d922      	bls.n	800229c <d_unqualified_name+0x60>
 8002256:	f1a3 0243 	sub.w	r2, r3, #67	; 0x43
 800225a:	2a01      	cmp	r2, #1
 800225c:	d969      	bls.n	8002332 <d_unqualified_name+0xf6>
 800225e:	2b4c      	cmp	r3, #76	; 0x4c
 8002260:	d056      	beq.n	8002310 <d_unqualified_name+0xd4>
 8002262:	2b55      	cmp	r3, #85	; 0x55
 8002264:	d15f      	bne.n	8002326 <d_unqualified_name+0xea>
 8002266:	784b      	ldrb	r3, [r1, #1]
 8002268:	2b6c      	cmp	r3, #108	; 0x6c
 800226a:	f000 80e5 	beq.w	8002438 <d_unqualified_name+0x1fc>
 800226e:	2b74      	cmp	r3, #116	; 0x74
 8002270:	d159      	bne.n	8002326 <d_unqualified_name+0xea>
 8002272:	1c4b      	adds	r3, r1, #1
 8002274:	60c3      	str	r3, [r0, #12]
 8002276:	784b      	ldrb	r3, [r1, #1]
 8002278:	2b74      	cmp	r3, #116	; 0x74
 800227a:	d158      	bne.n	800232e <d_unqualified_name+0xf2>
 800227c:	3102      	adds	r1, #2
 800227e:	60c1      	str	r1, [r0, #12]
 8002280:	f7fe f8f4 	bl	800046c <d_compact_number>
 8002284:	2800      	cmp	r0, #0
 8002286:	f2c0 8155 	blt.w	8002534 <d_unqualified_name+0x2f8>
 800228a:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 800228e:	4293      	cmp	r3, r2
 8002290:	68e7      	ldr	r7, [r4, #12]
 8002292:	f2c0 80f3 	blt.w	800247c <d_unqualified_name+0x240>
 8002296:	783b      	ldrb	r3, [r7, #0]
 8002298:	2500      	movs	r5, #0
 800229a:	e010      	b.n	80022be <d_unqualified_name+0x82>
 800229c:	2b6f      	cmp	r3, #111	; 0x6f
 800229e:	d104      	bne.n	80022aa <d_unqualified_name+0x6e>
 80022a0:	784b      	ldrb	r3, [r1, #1]
 80022a2:	2b6e      	cmp	r3, #110	; 0x6e
 80022a4:	bf04      	itt	eq
 80022a6:	3102      	addeq	r1, #2
 80022a8:	60c1      	streq	r1, [r0, #12]
 80022aa:	4620      	mov	r0, r4
 80022ac:	f7ff fe1a 	bl	8001ee4 <d_operator_name>
 80022b0:	4605      	mov	r5, r0
 80022b2:	b110      	cbz	r0, 80022ba <d_unqualified_name+0x7e>
 80022b4:	7803      	ldrb	r3, [r0, #0]
 80022b6:	2b31      	cmp	r3, #49	; 0x31
 80022b8:	d013      	beq.n	80022e2 <d_unqualified_name+0xa6>
 80022ba:	68e3      	ldr	r3, [r4, #12]
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b42      	cmp	r3, #66	; 0x42
 80022c0:	d009      	beq.n	80022d6 <d_unqualified_name+0x9a>
 80022c2:	4628      	mov	r0, r5
 80022c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022c8:	f7fe f90c 	bl	80004e4 <d_source_name>
 80022cc:	68e3      	ldr	r3, [r4, #12]
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b42      	cmp	r3, #66	; 0x42
 80022d2:	4605      	mov	r5, r0
 80022d4:	d1f5      	bne.n	80022c2 <d_unqualified_name+0x86>
 80022d6:	4629      	mov	r1, r5
 80022d8:	4620      	mov	r0, r4
 80022da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80022de:	f7fe b95b 	b.w	8000598 <d_abi_tags>
 80022e2:	6882      	ldr	r2, [r0, #8]
 80022e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80022e6:	6896      	ldr	r6, [r2, #8]
 80022e8:	6810      	ldr	r0, [r2, #0]
 80022ea:	49a1      	ldr	r1, [pc, #644]	; (8002570 <d_unqualified_name+0x334>)
 80022ec:	3307      	adds	r3, #7
 80022ee:	4433      	add	r3, r6
 80022f0:	6323      	str	r3, [r4, #48]	; 0x30
 80022f2:	f004 fceb 	bl	8006ccc <strcmp>
 80022f6:	2800      	cmp	r0, #0
 80022f8:	d1df      	bne.n	80022ba <d_unqualified_name+0x7e>
 80022fa:	4620      	mov	r0, r4
 80022fc:	f7fe f8f2 	bl	80004e4 <d_source_name>
 8002300:	462a      	mov	r2, r5
 8002302:	4603      	mov	r3, r0
 8002304:	2136      	movs	r1, #54	; 0x36
 8002306:	4620      	mov	r0, r4
 8002308:	f7fd ff72 	bl	80001f0 <d_make_comp>
 800230c:	4605      	mov	r5, r0
 800230e:	e7d4      	b.n	80022ba <d_unqualified_name+0x7e>
 8002310:	3101      	adds	r1, #1
 8002312:	60c1      	str	r1, [r0, #12]
 8002314:	f7fe f8e6 	bl	80004e4 <d_source_name>
 8002318:	4605      	mov	r5, r0
 800231a:	b120      	cbz	r0, 8002326 <d_unqualified_name+0xea>
 800231c:	4620      	mov	r0, r4
 800231e:	f7fe fa0f 	bl	8000740 <d_discriminator>
 8002322:	2800      	cmp	r0, #0
 8002324:	d1c9      	bne.n	80022ba <d_unqualified_name+0x7e>
 8002326:	2500      	movs	r5, #0
 8002328:	4628      	mov	r0, r5
 800232a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800232e:	2500      	movs	r5, #0
 8002330:	e7c5      	b.n	80022be <d_unqualified_name+0x82>
 8002332:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002334:	b132      	cbz	r2, 8002344 <d_unqualified_name+0x108>
 8002336:	7810      	ldrb	r0, [r2, #0]
 8002338:	b9e0      	cbnz	r0, 8002374 <d_unqualified_name+0x138>
 800233a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800233c:	68d0      	ldr	r0, [r2, #12]
 800233e:	4403      	add	r3, r0
 8002340:	6323      	str	r3, [r4, #48]	; 0x30
 8002342:	780b      	ldrb	r3, [r1, #0]
 8002344:	2b43      	cmp	r3, #67	; 0x43
 8002346:	d018      	beq.n	800237a <d_unqualified_name+0x13e>
 8002348:	2b44      	cmp	r3, #68	; 0x44
 800234a:	d1f0      	bne.n	800232e <d_unqualified_name+0xf2>
 800234c:	784b      	ldrb	r3, [r1, #1]
 800234e:	3b30      	subs	r3, #48	; 0x30
 8002350:	2b05      	cmp	r3, #5
 8002352:	d8e8      	bhi.n	8002326 <d_unqualified_name+0xea>
 8002354:	a001      	add	r0, pc, #4	; (adr r0, 800235c <d_unqualified_name+0x120>)
 8002356:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800235a:	bf00      	nop
 800235c:	080023cd 	.word	0x080023cd
 8002360:	08002397 	.word	0x08002397
 8002364:	080023df 	.word	0x080023df
 8002368:	08002327 	.word	0x08002327
 800236c:	080023d9 	.word	0x080023d9
 8002370:	080023d3 	.word	0x080023d3
 8002374:	2818      	cmp	r0, #24
 8002376:	d1e5      	bne.n	8002344 <d_unqualified_name+0x108>
 8002378:	e7df      	b.n	800233a <d_unqualified_name+0xfe>
 800237a:	784b      	ldrb	r3, [r1, #1]
 800237c:	2b49      	cmp	r3, #73	; 0x49
 800237e:	f000 80b0 	beq.w	80024e2 <d_unqualified_name+0x2a6>
 8002382:	3b31      	subs	r3, #49	; 0x31
 8002384:	2b04      	cmp	r3, #4
 8002386:	d8ce      	bhi.n	8002326 <d_unqualified_name+0xea>
 8002388:	e8df f013 	tbh	[pc, r3, lsl #1]
 800238c:	005100ed 	.word	0x005100ed
 8002390:	0047004c 	.word	0x0047004c
 8002394:	002c      	.short	0x002c
 8002396:	f04f 0c02 	mov.w	ip, #2
 800239a:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 800239e:	1c8d      	adds	r5, r1, #2
 80023a0:	4283      	cmp	r3, r0
 80023a2:	60e5      	str	r5, [r4, #12]
 80023a4:	f280 80d0 	bge.w	8002548 <d_unqualified_name+0x30c>
 80023a8:	6926      	ldr	r6, [r4, #16]
 80023aa:	0118      	lsls	r0, r3, #4
 80023ac:	1835      	adds	r5, r6, r0
 80023ae:	3301      	adds	r3, #1
 80023b0:	2700      	movs	r7, #0
 80023b2:	606f      	str	r7, [r5, #4]
 80023b4:	6163      	str	r3, [r4, #20]
 80023b6:	2a00      	cmp	r2, #0
 80023b8:	f000 80cf 	beq.w	800255a <d_unqualified_name+0x31e>
 80023bc:	2308      	movs	r3, #8
 80023be:	606f      	str	r7, [r5, #4]
 80023c0:	5433      	strb	r3, [r6, r0]
 80023c2:	f885 c008 	strb.w	ip, [r5, #8]
 80023c6:	60ea      	str	r2, [r5, #12]
 80023c8:	788b      	ldrb	r3, [r1, #2]
 80023ca:	e778      	b.n	80022be <d_unqualified_name+0x82>
 80023cc:	f04f 0c01 	mov.w	ip, #1
 80023d0:	e7e3      	b.n	800239a <d_unqualified_name+0x15e>
 80023d2:	f04f 0c05 	mov.w	ip, #5
 80023d6:	e7e0      	b.n	800239a <d_unqualified_name+0x15e>
 80023d8:	f04f 0c04 	mov.w	ip, #4
 80023dc:	e7dd      	b.n	800239a <d_unqualified_name+0x15e>
 80023de:	f04f 0c03 	mov.w	ip, #3
 80023e2:	e7da      	b.n	800239a <d_unqualified_name+0x15e>
 80023e4:	3102      	adds	r1, #2
 80023e6:	60e1      	str	r1, [r4, #12]
 80023e8:	f04f 0805 	mov.w	r8, #5
 80023ec:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80023f0:	4283      	cmp	r3, r0
 80023f2:	f280 80ac 	bge.w	800254e <d_unqualified_name+0x312>
 80023f6:	6926      	ldr	r6, [r4, #16]
 80023f8:	0118      	lsls	r0, r3, #4
 80023fa:	1835      	adds	r5, r6, r0
 80023fc:	3301      	adds	r3, #1
 80023fe:	2700      	movs	r7, #0
 8002400:	606f      	str	r7, [r5, #4]
 8002402:	6163      	str	r3, [r4, #20]
 8002404:	2a00      	cmp	r2, #0
 8002406:	f000 80ab 	beq.w	8002560 <d_unqualified_name+0x324>
 800240a:	2307      	movs	r3, #7
 800240c:	606f      	str	r7, [r5, #4]
 800240e:	5433      	strb	r3, [r6, r0]
 8002410:	f885 8008 	strb.w	r8, [r5, #8]
 8002414:	60ea      	str	r2, [r5, #12]
 8002416:	780b      	ldrb	r3, [r1, #0]
 8002418:	e751      	b.n	80022be <d_unqualified_name+0x82>
 800241a:	3102      	adds	r1, #2
 800241c:	60e1      	str	r1, [r4, #12]
 800241e:	f04f 0804 	mov.w	r8, #4
 8002422:	e7e3      	b.n	80023ec <d_unqualified_name+0x1b0>
 8002424:	3102      	adds	r1, #2
 8002426:	60e1      	str	r1, [r4, #12]
 8002428:	f04f 0803 	mov.w	r8, #3
 800242c:	e7de      	b.n	80023ec <d_unqualified_name+0x1b0>
 800242e:	3102      	adds	r1, #2
 8002430:	60e1      	str	r1, [r4, #12]
 8002432:	f04f 0802 	mov.w	r8, #2
 8002436:	e7d9      	b.n	80023ec <d_unqualified_name+0x1b0>
 8002438:	1c4b      	adds	r3, r1, #1
 800243a:	60c3      	str	r3, [r0, #12]
 800243c:	784b      	ldrb	r3, [r1, #1]
 800243e:	2b6c      	cmp	r3, #108	; 0x6c
 8002440:	f47f af75 	bne.w	800232e <d_unqualified_name+0xf2>
 8002444:	3102      	adds	r1, #2
 8002446:	60c1      	str	r1, [r0, #12]
 8002448:	f7ff fdc2 	bl	8001fd0 <d_parmlist>
 800244c:	4606      	mov	r6, r0
 800244e:	2800      	cmp	r0, #0
 8002450:	d070      	beq.n	8002534 <d_unqualified_name+0x2f8>
 8002452:	68e2      	ldr	r2, [r4, #12]
 8002454:	7813      	ldrb	r3, [r2, #0]
 8002456:	2b45      	cmp	r3, #69	; 0x45
 8002458:	f47f af69 	bne.w	800232e <d_unqualified_name+0xf2>
 800245c:	3201      	adds	r2, #1
 800245e:	60e2      	str	r2, [r4, #12]
 8002460:	4620      	mov	r0, r4
 8002462:	f7fe f803 	bl	800046c <d_compact_number>
 8002466:	f1b0 0e00 	subs.w	lr, r0, #0
 800246a:	db63      	blt.n	8002534 <d_unqualified_name+0x2f8>
 800246c:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8002470:	4293      	cmp	r3, r2
 8002472:	68e0      	ldr	r0, [r4, #12]
 8002474:	db1b      	blt.n	80024ae <d_unqualified_name+0x272>
 8002476:	7803      	ldrb	r3, [r0, #0]
 8002478:	2500      	movs	r5, #0
 800247a:	e720      	b.n	80022be <d_unqualified_name+0x82>
 800247c:	6926      	ldr	r6, [r4, #16]
 800247e:	6a22      	ldr	r2, [r4, #32]
 8002480:	f8d4 e024 	ldr.w	lr, [r4, #36]	; 0x24
 8002484:	0119      	lsls	r1, r3, #4
 8002486:	1875      	adds	r5, r6, r1
 8002488:	3301      	adds	r3, #1
 800248a:	f04f 0c00 	mov.w	ip, #0
 800248e:	f8c5 c004 	str.w	ip, [r5, #4]
 8002492:	4572      	cmp	r2, lr
 8002494:	6163      	str	r3, [r4, #20]
 8002496:	f04f 0347 	mov.w	r3, #71	; 0x47
 800249a:	5473      	strb	r3, [r6, r1]
 800249c:	60a8      	str	r0, [r5, #8]
 800249e:	da4d      	bge.n	800253c <d_unqualified_name+0x300>
 80024a0:	69e3      	ldr	r3, [r4, #28]
 80024a2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80024a6:	3201      	adds	r2, #1
 80024a8:	6222      	str	r2, [r4, #32]
 80024aa:	783b      	ldrb	r3, [r7, #0]
 80024ac:	e707      	b.n	80022be <d_unqualified_name+0x82>
 80024ae:	6927      	ldr	r7, [r4, #16]
 80024b0:	6a22      	ldr	r2, [r4, #32]
 80024b2:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 80024b6:	0119      	lsls	r1, r3, #4
 80024b8:	187d      	adds	r5, r7, r1
 80024ba:	3301      	adds	r3, #1
 80024bc:	f04f 0c00 	mov.w	ip, #0
 80024c0:	f8c5 c004 	str.w	ip, [r5, #4]
 80024c4:	4542      	cmp	r2, r8
 80024c6:	6163      	str	r3, [r4, #20]
 80024c8:	f04f 0345 	mov.w	r3, #69	; 0x45
 80024cc:	547b      	strb	r3, [r7, r1]
 80024ce:	e9c5 6e02 	strd	r6, lr, [r5, #8]
 80024d2:	da36      	bge.n	8002542 <d_unqualified_name+0x306>
 80024d4:	69e3      	ldr	r3, [r4, #28]
 80024d6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80024da:	3201      	adds	r2, #1
 80024dc:	6222      	str	r2, [r4, #32]
 80024de:	7803      	ldrb	r3, [r0, #0]
 80024e0:	e6ed      	b.n	80022be <d_unqualified_name+0x82>
 80024e2:	1c4b      	adds	r3, r1, #1
 80024e4:	60e3      	str	r3, [r4, #12]
 80024e6:	788b      	ldrb	r3, [r1, #2]
 80024e8:	3b31      	subs	r3, #49	; 0x31
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d832      	bhi.n	8002554 <d_unqualified_name+0x318>
 80024ee:	e8df f003 	tbb	[pc, r3]
 80024f2:	1c03      	.short	0x1c03
 80024f4:	1217      	.short	0x1217
 80024f6:	0d          	.byte	0x0d
 80024f7:	00          	.byte	0x00
 80024f8:	3103      	adds	r1, #3
 80024fa:	60e1      	str	r1, [r4, #12]
 80024fc:	f04f 0801 	mov.w	r8, #1
 8002500:	4620      	mov	r0, r4
 8002502:	f7ff f8f5 	bl	80016f0 <d_type>
 8002506:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002508:	68e1      	ldr	r1, [r4, #12]
 800250a:	e76f      	b.n	80023ec <d_unqualified_name+0x1b0>
 800250c:	3103      	adds	r1, #3
 800250e:	60e1      	str	r1, [r4, #12]
 8002510:	f04f 0805 	mov.w	r8, #5
 8002514:	e7f4      	b.n	8002500 <d_unqualified_name+0x2c4>
 8002516:	3103      	adds	r1, #3
 8002518:	60e1      	str	r1, [r4, #12]
 800251a:	f04f 0804 	mov.w	r8, #4
 800251e:	e7ef      	b.n	8002500 <d_unqualified_name+0x2c4>
 8002520:	3103      	adds	r1, #3
 8002522:	60e1      	str	r1, [r4, #12]
 8002524:	f04f 0803 	mov.w	r8, #3
 8002528:	e7ea      	b.n	8002500 <d_unqualified_name+0x2c4>
 800252a:	3103      	adds	r1, #3
 800252c:	60e1      	str	r1, [r4, #12]
 800252e:	f04f 0802 	mov.w	r8, #2
 8002532:	e7e5      	b.n	8002500 <d_unqualified_name+0x2c4>
 8002534:	68e3      	ldr	r3, [r4, #12]
 8002536:	2500      	movs	r5, #0
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	e6c0      	b.n	80022be <d_unqualified_name+0x82>
 800253c:	783b      	ldrb	r3, [r7, #0]
 800253e:	4665      	mov	r5, ip
 8002540:	e6bd      	b.n	80022be <d_unqualified_name+0x82>
 8002542:	7803      	ldrb	r3, [r0, #0]
 8002544:	4665      	mov	r5, ip
 8002546:	e6ba      	b.n	80022be <d_unqualified_name+0x82>
 8002548:	788b      	ldrb	r3, [r1, #2]
 800254a:	2500      	movs	r5, #0
 800254c:	e6b7      	b.n	80022be <d_unqualified_name+0x82>
 800254e:	780b      	ldrb	r3, [r1, #0]
 8002550:	2500      	movs	r5, #0
 8002552:	e6b4      	b.n	80022be <d_unqualified_name+0x82>
 8002554:	784b      	ldrb	r3, [r1, #1]
 8002556:	2500      	movs	r5, #0
 8002558:	e6b1      	b.n	80022be <d_unqualified_name+0x82>
 800255a:	788b      	ldrb	r3, [r1, #2]
 800255c:	4615      	mov	r5, r2
 800255e:	e6ae      	b.n	80022be <d_unqualified_name+0x82>
 8002560:	780b      	ldrb	r3, [r1, #0]
 8002562:	4615      	mov	r5, r2
 8002564:	e6ab      	b.n	80022be <d_unqualified_name+0x82>
 8002566:	3102      	adds	r1, #2
 8002568:	60e1      	str	r1, [r4, #12]
 800256a:	f04f 0801 	mov.w	r8, #1
 800256e:	e73d      	b.n	80023ec <d_unqualified_name+0x1b0>
 8002570:	08034e64 	.word	0x08034e64

08002574 <d_encoding>:
 8002574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002578:	68c3      	ldr	r3, [r0, #12]
 800257a:	781a      	ldrb	r2, [r3, #0]
 800257c:	2a47      	cmp	r2, #71	; 0x47
 800257e:	4604      	mov	r4, r0
 8002580:	d019      	beq.n	80025b6 <d_encoding+0x42>
 8002582:	2a54      	cmp	r2, #84	; 0x54
 8002584:	d017      	beq.n	80025b6 <d_encoding+0x42>
 8002586:	460e      	mov	r6, r1
 8002588:	f7fe ff06 	bl	8001398 <d_name>
 800258c:	4605      	mov	r5, r0
 800258e:	2800      	cmp	r0, #0
 8002590:	d07d      	beq.n	800268e <d_encoding+0x11a>
 8002592:	2e00      	cmp	r6, #0
 8002594:	d057      	beq.n	8002646 <d_encoding+0xd2>
 8002596:	68a3      	ldr	r3, [r4, #8]
 8002598:	07db      	lsls	r3, r3, #31
 800259a:	d454      	bmi.n	8002646 <d_encoding+0xd2>
 800259c:	e000      	b.n	80025a0 <d_encoding+0x2c>
 800259e:	68ad      	ldr	r5, [r5, #8]
 80025a0:	782b      	ldrb	r3, [r5, #0]
 80025a2:	f1a3 021c 	sub.w	r2, r3, #28
 80025a6:	2a04      	cmp	r2, #4
 80025a8:	d9f9      	bls.n	800259e <d_encoding+0x2a>
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	f000 8186 	beq.w	80028bc <d_encoding+0x348>
 80025b0:	4628      	mov	r0, r5
 80025b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025b6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80025b8:	f101 0214 	add.w	r2, r1, #20
 80025bc:	6322      	str	r2, [r4, #48]	; 0x30
 80025be:	781a      	ldrb	r2, [r3, #0]
 80025c0:	2a54      	cmp	r2, #84	; 0x54
 80025c2:	d068      	beq.n	8002696 <d_encoding+0x122>
 80025c4:	2a47      	cmp	r2, #71	; 0x47
 80025c6:	d162      	bne.n	800268e <d_encoding+0x11a>
 80025c8:	1c5a      	adds	r2, r3, #1
 80025ca:	60e2      	str	r2, [r4, #12]
 80025cc:	785a      	ldrb	r2, [r3, #1]
 80025ce:	2a00      	cmp	r2, #0
 80025d0:	d05d      	beq.n	800268e <d_encoding+0x11a>
 80025d2:	1c9a      	adds	r2, r3, #2
 80025d4:	60e2      	str	r2, [r4, #12]
 80025d6:	785a      	ldrb	r2, [r3, #1]
 80025d8:	3a41      	subs	r2, #65	; 0x41
 80025da:	2a31      	cmp	r2, #49	; 0x31
 80025dc:	d857      	bhi.n	800268e <d_encoding+0x11a>
 80025de:	e8df f012 	tbh	[pc, r2, lsl #1]
 80025e2:	013e      	.short	0x013e
 80025e4:	00560056 	.word	0x00560056
 80025e8:	00560056 	.word	0x00560056
 80025ec:	00560056 	.word	0x00560056
 80025f0:	00560056 	.word	0x00560056
 80025f4:	00560056 	.word	0x00560056
 80025f8:	00560056 	.word	0x00560056
 80025fc:	00560056 	.word	0x00560056
 8002600:	00560056 	.word	0x00560056
 8002604:	0056014a 	.word	0x0056014a
 8002608:	00560159 	.word	0x00560159
 800260c:	005600e0 	.word	0x005600e0
 8002610:	00560056 	.word	0x00560056
 8002614:	00560056 	.word	0x00560056
 8002618:	00560056 	.word	0x00560056
 800261c:	00560056 	.word	0x00560056
 8002620:	00560056 	.word	0x00560056
 8002624:	00560056 	.word	0x00560056
 8002628:	00560056 	.word	0x00560056
 800262c:	00560056 	.word	0x00560056
 8002630:	00560056 	.word	0x00560056
 8002634:	00560056 	.word	0x00560056
 8002638:	00560056 	.word	0x00560056
 800263c:	00560056 	.word	0x00560056
 8002640:	00560056 	.word	0x00560056
 8002644:	00eb      	.short	0x00eb
 8002646:	68e3      	ldr	r3, [r4, #12]
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0b0      	beq.n	80025b0 <d_encoding+0x3c>
 800264e:	2b45      	cmp	r3, #69	; 0x45
 8002650:	d0ae      	beq.n	80025b0 <d_encoding+0x3c>
 8002652:	4629      	mov	r1, r5
 8002654:	780b      	ldrb	r3, [r1, #0]
 8002656:	2b20      	cmp	r3, #32
 8002658:	f200 8218 	bhi.w	8002a8c <d_encoding+0x518>
 800265c:	2b1c      	cmp	r3, #28
 800265e:	f080 821e 	bcs.w	8002a9e <d_encoding+0x52a>
 8002662:	2b04      	cmp	r3, #4
 8002664:	f040 8091 	bne.w	800278a <d_encoding+0x216>
 8002668:	688a      	ldr	r2, [r1, #8]
 800266a:	b16a      	cbz	r2, 8002688 <d_encoding+0x114>
 800266c:	7813      	ldrb	r3, [r2, #0]
 800266e:	2b08      	cmp	r3, #8
 8002670:	f103 31ff 	add.w	r1, r3, #4294967295
 8002674:	f200 8086 	bhi.w	8002784 <d_encoding+0x210>
 8002678:	2b07      	cmp	r3, #7
 800267a:	f080 8086 	bcs.w	800278a <d_encoding+0x216>
 800267e:	2901      	cmp	r1, #1
 8002680:	d802      	bhi.n	8002688 <d_encoding+0x114>
 8002682:	68d2      	ldr	r2, [r2, #12]
 8002684:	2a00      	cmp	r2, #0
 8002686:	d1f1      	bne.n	800266c <d_encoding+0xf8>
 8002688:	2101      	movs	r1, #1
 800268a:	e07f      	b.n	800278c <d_encoding+0x218>
 800268c:	60e7      	str	r7, [r4, #12]
 800268e:	2500      	movs	r5, #0
 8002690:	4628      	mov	r0, r5
 8002692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002696:	1c5a      	adds	r2, r3, #1
 8002698:	60e2      	str	r2, [r4, #12]
 800269a:	785a      	ldrb	r2, [r3, #1]
 800269c:	2a00      	cmp	r2, #0
 800269e:	d0f6      	beq.n	800268e <d_encoding+0x11a>
 80026a0:	1c9a      	adds	r2, r3, #2
 80026a2:	60e2      	str	r2, [r4, #12]
 80026a4:	785b      	ldrb	r3, [r3, #1]
 80026a6:	3b43      	subs	r3, #67	; 0x43
 80026a8:	2b33      	cmp	r3, #51	; 0x33
 80026aa:	d8f0      	bhi.n	800268e <d_encoding+0x11a>
 80026ac:	a201      	add	r2, pc, #4	; (adr r2, 80026b4 <d_encoding+0x140>)
 80026ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b2:	bf00      	nop
 80026b4:	08002a09 	.word	0x08002a09
 80026b8:	0800268f 	.word	0x0800268f
 80026bc:	0800268f 	.word	0x0800268f
 80026c0:	080029f3 	.word	0x080029f3
 80026c4:	0800268f 	.word	0x0800268f
 80026c8:	080029dd 	.word	0x080029dd
 80026cc:	080029c7 	.word	0x080029c7
 80026d0:	080029b1 	.word	0x080029b1
 80026d4:	0800268f 	.word	0x0800268f
 80026d8:	0800268f 	.word	0x0800268f
 80026dc:	0800268f 	.word	0x0800268f
 80026e0:	0800268f 	.word	0x0800268f
 80026e4:	0800268f 	.word	0x0800268f
 80026e8:	0800268f 	.word	0x0800268f
 80026ec:	0800268f 	.word	0x0800268f
 80026f0:	0800268f 	.word	0x0800268f
 80026f4:	0800299b 	.word	0x0800299b
 80026f8:	08002981 	.word	0x08002981
 80026fc:	0800268f 	.word	0x0800268f
 8002700:	08002967 	.word	0x08002967
 8002704:	08002951 	.word	0x08002951
 8002708:	0800268f 	.word	0x0800268f
 800270c:	0800268f 	.word	0x0800268f
 8002710:	0800268f 	.word	0x0800268f
 8002714:	0800268f 	.word	0x0800268f
 8002718:	0800268f 	.word	0x0800268f
 800271c:	0800268f 	.word	0x0800268f
 8002720:	0800268f 	.word	0x0800268f
 8002724:	0800268f 	.word	0x0800268f
 8002728:	0800268f 	.word	0x0800268f
 800272c:	0800268f 	.word	0x0800268f
 8002730:	0800268f 	.word	0x0800268f
 8002734:	0800291d 	.word	0x0800291d
 8002738:	0800268f 	.word	0x0800268f
 800273c:	0800268f 	.word	0x0800268f
 8002740:	0800268f 	.word	0x0800268f
 8002744:	0800268f 	.word	0x0800268f
 8002748:	080028f7 	.word	0x080028f7
 800274c:	0800268f 	.word	0x0800268f
 8002750:	0800268f 	.word	0x0800268f
 8002754:	0800268f 	.word	0x0800268f
 8002758:	0800268f 	.word	0x0800268f
 800275c:	0800268f 	.word	0x0800268f
 8002760:	0800268f 	.word	0x0800268f
 8002764:	0800268f 	.word	0x0800268f
 8002768:	0800268f 	.word	0x0800268f
 800276c:	0800268f 	.word	0x0800268f
 8002770:	0800268f 	.word	0x0800268f
 8002774:	0800268f 	.word	0x0800268f
 8002778:	0800268f 	.word	0x0800268f
 800277c:	0800268f 	.word	0x0800268f
 8002780:	080028d1 	.word	0x080028d1
 8002784:	2b34      	cmp	r3, #52	; 0x34
 8002786:	f47f af7f 	bne.w	8002688 <d_encoding+0x114>
 800278a:	2100      	movs	r1, #0
 800278c:	4620      	mov	r0, r4
 800278e:	f7ff fd15 	bl	80021bc <d_bare_function_type>
 8002792:	462a      	mov	r2, r5
 8002794:	4603      	mov	r3, r0
 8002796:	2103      	movs	r1, #3
 8002798:	4620      	mov	r0, r4
 800279a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800279e:	f7fd bd27 	b.w	80001f0 <d_make_comp>
 80027a2:	4620      	mov	r0, r4
 80027a4:	f7fe fdf8 	bl	8001398 <d_name>
 80027a8:	2300      	movs	r3, #0
 80027aa:	4602      	mov	r2, r0
 80027ac:	2113      	movs	r1, #19
 80027ae:	4620      	mov	r0, r4
 80027b0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027b4:	f7fd bd1c 	b.w	80001f0 <d_make_comp>
 80027b8:	f104 000c 	add.w	r0, r4, #12
 80027bc:	f7fd fe12 	bl	80003e4 <d_number.isra.1>
 80027c0:	2801      	cmp	r0, #1
 80027c2:	f77f af64 	ble.w	800268e <d_encoding+0x11a>
 80027c6:	68e3      	ldr	r3, [r4, #12]
 80027c8:	781a      	ldrb	r2, [r3, #0]
 80027ca:	2a00      	cmp	r2, #0
 80027cc:	f43f af5f 	beq.w	800268e <d_encoding+0x11a>
 80027d0:	1c5f      	adds	r7, r3, #1
 80027d2:	60e7      	str	r7, [r4, #12]
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b5f      	cmp	r3, #95	; 0x5f
 80027d8:	f47f af59 	bne.w	800268e <d_encoding+0x11a>
 80027dc:	2200      	movs	r2, #0
 80027de:	1e45      	subs	r5, r0, #1
 80027e0:	4690      	mov	r8, r2
 80027e2:	f04f 0940 	mov.w	r9, #64	; 0x40
 80027e6:	783b      	ldrb	r3, [r7, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f43f af50 	beq.w	800268e <d_encoding+0x11a>
 80027ee:	2b24      	cmp	r3, #36	; 0x24
 80027f0:	f040 812a 	bne.w	8002a48 <d_encoding+0x4d4>
 80027f4:	787b      	ldrb	r3, [r7, #1]
 80027f6:	2b53      	cmp	r3, #83	; 0x53
 80027f8:	f000 8156 	beq.w	8002aa8 <d_encoding+0x534>
 80027fc:	2b5f      	cmp	r3, #95	; 0x5f
 80027fe:	f000 8155 	beq.w	8002aac <d_encoding+0x538>
 8002802:	2b24      	cmp	r3, #36	; 0x24
 8002804:	f47f af43 	bne.w	800268e <d_encoding+0x11a>
 8002808:	4619      	mov	r1, r3
 800280a:	e9d4 0305 	ldrd	r0, r3, [r4, #20]
 800280e:	68e7      	ldr	r7, [r4, #12]
 8002810:	4298      	cmp	r0, r3
 8002812:	f107 0702 	add.w	r7, r7, #2
 8002816:	f6bf af39 	bge.w	800268c <d_encoding+0x118>
 800281a:	f8d4 c010 	ldr.w	ip, [r4, #16]
 800281e:	0106      	lsls	r6, r0, #4
 8002820:	eb0c 0306 	add.w	r3, ip, r6
 8002824:	3001      	adds	r0, #1
 8002826:	f8c3 8004 	str.w	r8, [r3, #4]
 800282a:	3d02      	subs	r5, #2
 800282c:	6160      	str	r0, [r4, #20]
 800282e:	f80c 9006 	strb.w	r9, [ip, r6]
 8002832:	6099      	str	r1, [r3, #8]
 8002834:	60e7      	str	r7, [r4, #12]
 8002836:	2a00      	cmp	r2, #0
 8002838:	f000 8126 	beq.w	8002a88 <d_encoding+0x514>
 800283c:	213f      	movs	r1, #63	; 0x3f
 800283e:	4620      	mov	r0, r4
 8002840:	f7fd fcd6 	bl	80001f0 <d_make_comp>
 8002844:	4602      	mov	r2, r0
 8002846:	2800      	cmp	r0, #0
 8002848:	f43f af21 	beq.w	800268e <d_encoding+0x11a>
 800284c:	2d00      	cmp	r5, #0
 800284e:	dcca      	bgt.n	80027e6 <d_encoding+0x272>
 8002850:	4620      	mov	r0, r4
 8002852:	2300      	movs	r3, #0
 8002854:	213e      	movs	r1, #62	; 0x3e
 8002856:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800285a:	f7fd bcc9 	b.w	80001f0 <d_make_comp>
 800285e:	2100      	movs	r1, #0
 8002860:	4620      	mov	r0, r4
 8002862:	f7ff fe87 	bl	8002574 <d_encoding>
 8002866:	2300      	movs	r3, #0
 8002868:	4602      	mov	r2, r0
 800286a:	2117      	movs	r1, #23
 800286c:	4620      	mov	r0, r4
 800286e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002872:	f7fd bcbd 	b.w	80001f0 <d_make_comp>
 8002876:	4620      	mov	r0, r4
 8002878:	f7fe fd8e 	bl	8001398 <d_name>
 800287c:	4605      	mov	r5, r0
 800287e:	4620      	mov	r0, r4
 8002880:	f7fd fddc 	bl	800043c <d_number_component>
 8002884:	462a      	mov	r2, r5
 8002886:	4603      	mov	r3, r0
 8002888:	2116      	movs	r1, #22
 800288a:	4620      	mov	r0, r4
 800288c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002890:	f7fd bcae 	b.w	80001f0 <d_make_comp>
 8002894:	789a      	ldrb	r2, [r3, #2]
 8002896:	2100      	movs	r1, #0
 8002898:	4620      	mov	r0, r4
 800289a:	b12a      	cbz	r2, 80028a8 <d_encoding+0x334>
 800289c:	1cda      	adds	r2, r3, #3
 800289e:	60e2      	str	r2, [r4, #12]
 80028a0:	789b      	ldrb	r3, [r3, #2]
 80028a2:	2b6e      	cmp	r3, #110	; 0x6e
 80028a4:	f000 8109 	beq.w	8002aba <d_encoding+0x546>
 80028a8:	f7ff fe64 	bl	8002574 <d_encoding>
 80028ac:	2300      	movs	r3, #0
 80028ae:	4602      	mov	r2, r0
 80028b0:	2148      	movs	r1, #72	; 0x48
 80028b2:	4620      	mov	r0, r4
 80028b4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028b8:	f7fd bc9a 	b.w	80001f0 <d_make_comp>
 80028bc:	68ea      	ldr	r2, [r5, #12]
 80028be:	e000      	b.n	80028c2 <d_encoding+0x34e>
 80028c0:	6892      	ldr	r2, [r2, #8]
 80028c2:	7810      	ldrb	r0, [r2, #0]
 80028c4:	f7fd fd80 	bl	80003c8 <is_fnqual_component_type>
 80028c8:	2800      	cmp	r0, #0
 80028ca:	d1f9      	bne.n	80028c0 <d_encoding+0x34c>
 80028cc:	60ea      	str	r2, [r5, #12]
 80028ce:	e66f      	b.n	80025b0 <d_encoding+0x3c>
 80028d0:	2176      	movs	r1, #118	; 0x76
 80028d2:	4620      	mov	r0, r4
 80028d4:	f7fe f80a 	bl	80008ec <d_call_offset>
 80028d8:	2800      	cmp	r0, #0
 80028da:	f43f aed8 	beq.w	800268e <d_encoding+0x11a>
 80028de:	2100      	movs	r1, #0
 80028e0:	4620      	mov	r0, r4
 80028e2:	f7ff fe47 	bl	8002574 <d_encoding>
 80028e6:	2300      	movs	r3, #0
 80028e8:	4602      	mov	r2, r0
 80028ea:	2110      	movs	r1, #16
 80028ec:	4620      	mov	r0, r4
 80028ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028f2:	f7fd bc7d 	b.w	80001f0 <d_make_comp>
 80028f6:	2168      	movs	r1, #104	; 0x68
 80028f8:	4620      	mov	r0, r4
 80028fa:	f7fd fff7 	bl	80008ec <d_call_offset>
 80028fe:	2800      	cmp	r0, #0
 8002900:	f43f aec5 	beq.w	800268e <d_encoding+0x11a>
 8002904:	2100      	movs	r1, #0
 8002906:	4620      	mov	r0, r4
 8002908:	f7ff fe34 	bl	8002574 <d_encoding>
 800290c:	2300      	movs	r3, #0
 800290e:	4602      	mov	r2, r0
 8002910:	210f      	movs	r1, #15
 8002912:	4620      	mov	r0, r4
 8002914:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002918:	f7fd bc6a 	b.w	80001f0 <d_make_comp>
 800291c:	2100      	movs	r1, #0
 800291e:	4620      	mov	r0, r4
 8002920:	f7fd ffe4 	bl	80008ec <d_call_offset>
 8002924:	2800      	cmp	r0, #0
 8002926:	f43f aeb2 	beq.w	800268e <d_encoding+0x11a>
 800292a:	2100      	movs	r1, #0
 800292c:	4620      	mov	r0, r4
 800292e:	f7fd ffdd 	bl	80008ec <d_call_offset>
 8002932:	2800      	cmp	r0, #0
 8002934:	f43f aeab 	beq.w	800268e <d_encoding+0x11a>
 8002938:	2100      	movs	r1, #0
 800293a:	4620      	mov	r0, r4
 800293c:	f7ff fe1a 	bl	8002574 <d_encoding>
 8002940:	2300      	movs	r3, #0
 8002942:	4602      	mov	r2, r0
 8002944:	2111      	movs	r1, #17
 8002946:	4620      	mov	r0, r4
 8002948:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800294c:	f7fd bc50 	b.w	80001f0 <d_make_comp>
 8002950:	4620      	mov	r0, r4
 8002952:	f7fe fd21 	bl	8001398 <d_name>
 8002956:	2300      	movs	r3, #0
 8002958:	4602      	mov	r2, r0
 800295a:	2115      	movs	r1, #21
 800295c:	4620      	mov	r0, r4
 800295e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002962:	f7fd bc45 	b.w	80001f0 <d_make_comp>
 8002966:	310f      	adds	r1, #15
 8002968:	6321      	str	r1, [r4, #48]	; 0x30
 800296a:	4620      	mov	r0, r4
 800296c:	f7fe fec0 	bl	80016f0 <d_type>
 8002970:	2300      	movs	r3, #0
 8002972:	4602      	mov	r2, r0
 8002974:	2109      	movs	r1, #9
 8002976:	4620      	mov	r0, r4
 8002978:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800297c:	f7fd bc38 	b.w	80001f0 <d_make_comp>
 8002980:	310a      	adds	r1, #10
 8002982:	6321      	str	r1, [r4, #48]	; 0x30
 8002984:	4620      	mov	r0, r4
 8002986:	f7fe feb3 	bl	80016f0 <d_type>
 800298a:	2300      	movs	r3, #0
 800298c:	4602      	mov	r2, r0
 800298e:	210a      	movs	r1, #10
 8002990:	4620      	mov	r0, r4
 8002992:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002996:	f7fd bc2b 	b.w	80001f0 <d_make_comp>
 800299a:	4620      	mov	r0, r4
 800299c:	f7fe fea8 	bl	80016f0 <d_type>
 80029a0:	2300      	movs	r3, #0
 80029a2:	4602      	mov	r2, r0
 80029a4:	210d      	movs	r1, #13
 80029a6:	4620      	mov	r0, r4
 80029a8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029ac:	f7fd bc20 	b.w	80001f0 <d_make_comp>
 80029b0:	4620      	mov	r0, r4
 80029b2:	f7fe fe9d 	bl	80016f0 <d_type>
 80029b6:	2300      	movs	r3, #0
 80029b8:	4602      	mov	r2, r0
 80029ba:	2112      	movs	r1, #18
 80029bc:	4620      	mov	r0, r4
 80029be:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029c2:	f7fd bc15 	b.w	80001f0 <d_make_comp>
 80029c6:	4620      	mov	r0, r4
 80029c8:	f7fe fe92 	bl	80016f0 <d_type>
 80029cc:	2300      	movs	r3, #0
 80029ce:	4602      	mov	r2, r0
 80029d0:	210c      	movs	r1, #12
 80029d2:	4620      	mov	r0, r4
 80029d4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029d8:	f7fd bc0a 	b.w	80001f0 <d_make_comp>
 80029dc:	4620      	mov	r0, r4
 80029de:	f7fe fcdb 	bl	8001398 <d_name>
 80029e2:	2300      	movs	r3, #0
 80029e4:	4602      	mov	r2, r0
 80029e6:	2114      	movs	r1, #20
 80029e8:	4620      	mov	r0, r4
 80029ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029ee:	f7fd bbff 	b.w	80001f0 <d_make_comp>
 80029f2:	4620      	mov	r0, r4
 80029f4:	f7fe fe7c 	bl	80016f0 <d_type>
 80029f8:	2300      	movs	r3, #0
 80029fa:	4602      	mov	r2, r0
 80029fc:	210e      	movs	r1, #14
 80029fe:	4620      	mov	r0, r4
 8002a00:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a04:	f7fd bbf4 	b.w	80001f0 <d_make_comp>
 8002a08:	4620      	mov	r0, r4
 8002a0a:	f7fe fe71 	bl	80016f0 <d_type>
 8002a0e:	4605      	mov	r5, r0
 8002a10:	f104 000c 	add.w	r0, r4, #12
 8002a14:	f7fd fce6 	bl	80003e4 <d_number.isra.1>
 8002a18:	2800      	cmp	r0, #0
 8002a1a:	f6ff ae38 	blt.w	800268e <d_encoding+0x11a>
 8002a1e:	68e3      	ldr	r3, [r4, #12]
 8002a20:	781a      	ldrb	r2, [r3, #0]
 8002a22:	2a5f      	cmp	r2, #95	; 0x5f
 8002a24:	f47f ae33 	bne.w	800268e <d_encoding+0x11a>
 8002a28:	3301      	adds	r3, #1
 8002a2a:	60e3      	str	r3, [r4, #12]
 8002a2c:	4620      	mov	r0, r4
 8002a2e:	f7fe fe5f 	bl	80016f0 <d_type>
 8002a32:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002a34:	1d59      	adds	r1, r3, #5
 8002a36:	6321      	str	r1, [r4, #48]	; 0x30
 8002a38:	4602      	mov	r2, r0
 8002a3a:	462b      	mov	r3, r5
 8002a3c:	4620      	mov	r0, r4
 8002a3e:	210b      	movs	r1, #11
 8002a40:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a44:	f7fd bbd4 	b.w	80001f0 <d_make_comp>
 8002a48:	463e      	mov	r6, r7
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	e004      	b.n	8002a58 <d_encoding+0x4e4>
 8002a4e:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 8002a52:	b123      	cbz	r3, 8002a5e <d_encoding+0x4ea>
 8002a54:	2b24      	cmp	r3, #36	; 0x24
 8002a56:	d002      	beq.n	8002a5e <d_encoding+0x4ea>
 8002a58:	3101      	adds	r1, #1
 8002a5a:	42a9      	cmp	r1, r5
 8002a5c:	dbf7      	blt.n	8002a4e <d_encoding+0x4da>
 8002a5e:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8002a62:	4283      	cmp	r3, r0
 8002a64:	da24      	bge.n	8002ab0 <d_encoding+0x53c>
 8002a66:	e9d4 c603 	ldrd	ip, r6, [r4, #12]
 8002a6a:	0118      	lsls	r0, r3, #4
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	6163      	str	r3, [r4, #20]
 8002a70:	1833      	adds	r3, r6, r0
 8002a72:	1a6d      	subs	r5, r5, r1
 8002a74:	f8c3 8004 	str.w	r8, [r3, #4]
 8002a78:	f806 8000 	strb.w	r8, [r6, r0]
 8002a7c:	609f      	str	r7, [r3, #8]
 8002a7e:	eb0c 0701 	add.w	r7, ip, r1
 8002a82:	60d9      	str	r1, [r3, #12]
 8002a84:	60e7      	str	r7, [r4, #12]
 8002a86:	e6d6      	b.n	8002836 <d_encoding+0x2c2>
 8002a88:	461a      	mov	r2, r3
 8002a8a:	e6df      	b.n	800284c <d_encoding+0x2d8>
 8002a8c:	2b4c      	cmp	r3, #76	; 0x4c
 8002a8e:	f1a3 024e 	sub.w	r2, r3, #78	; 0x4e
 8002a92:	d004      	beq.n	8002a9e <d_encoding+0x52a>
 8002a94:	f4ff ae79 	bcc.w	800278a <d_encoding+0x216>
 8002a98:	2a01      	cmp	r2, #1
 8002a9a:	f63f ae76 	bhi.w	800278a <d_encoding+0x216>
 8002a9e:	6889      	ldr	r1, [r1, #8]
 8002aa0:	2900      	cmp	r1, #0
 8002aa2:	f47f add7 	bne.w	8002654 <d_encoding+0xe0>
 8002aa6:	e671      	b.n	800278c <d_encoding+0x218>
 8002aa8:	212f      	movs	r1, #47	; 0x2f
 8002aaa:	e6ae      	b.n	800280a <d_encoding+0x296>
 8002aac:	212e      	movs	r1, #46	; 0x2e
 8002aae:	e6ac      	b.n	800280a <d_encoding+0x296>
 8002ab0:	68e3      	ldr	r3, [r4, #12]
 8002ab2:	440b      	add	r3, r1
 8002ab4:	60e3      	str	r3, [r4, #12]
 8002ab6:	2500      	movs	r5, #0
 8002ab8:	e57a      	b.n	80025b0 <d_encoding+0x3c>
 8002aba:	f7ff fd5b 	bl	8002574 <d_encoding>
 8002abe:	2300      	movs	r3, #0
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	2149      	movs	r1, #73	; 0x49
 8002ac4:	4620      	mov	r0, r4
 8002ac6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002aca:	f7fd bb91 	b.w	80001f0 <d_make_comp>
 8002ace:	bf00      	nop

08002ad0 <d_expr_primary>:
 8002ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ad2:	68c2      	ldr	r2, [r0, #12]
 8002ad4:	7813      	ldrb	r3, [r2, #0]
 8002ad6:	2b4c      	cmp	r3, #76	; 0x4c
 8002ad8:	d144      	bne.n	8002b64 <d_expr_primary+0x94>
 8002ada:	1c53      	adds	r3, r2, #1
 8002adc:	60c3      	str	r3, [r0, #12]
 8002ade:	7851      	ldrb	r1, [r2, #1]
 8002ae0:	295f      	cmp	r1, #95	; 0x5f
 8002ae2:	4604      	mov	r4, r0
 8002ae4:	d040      	beq.n	8002b68 <d_expr_primary+0x98>
 8002ae6:	295a      	cmp	r1, #90	; 0x5a
 8002ae8:	d10c      	bne.n	8002b04 <d_expr_primary+0x34>
 8002aea:	3301      	adds	r3, #1
 8002aec:	60e3      	str	r3, [r4, #12]
 8002aee:	2100      	movs	r1, #0
 8002af0:	4620      	mov	r0, r4
 8002af2:	f7ff fd3f 	bl	8002574 <d_encoding>
 8002af6:	68e3      	ldr	r3, [r4, #12]
 8002af8:	781a      	ldrb	r2, [r3, #0]
 8002afa:	2a45      	cmp	r2, #69	; 0x45
 8002afc:	d132      	bne.n	8002b64 <d_expr_primary+0x94>
 8002afe:	3301      	adds	r3, #1
 8002b00:	60e3      	str	r3, [r4, #12]
 8002b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b04:	f7fe fdf4 	bl	80016f0 <d_type>
 8002b08:	b360      	cbz	r0, 8002b64 <d_expr_primary+0x94>
 8002b0a:	7803      	ldrb	r3, [r0, #0]
 8002b0c:	2b27      	cmp	r3, #39	; 0x27
 8002b0e:	d032      	beq.n	8002b76 <d_expr_primary+0xa6>
 8002b10:	68e6      	ldr	r6, [r4, #12]
 8002b12:	7833      	ldrb	r3, [r6, #0]
 8002b14:	2b6e      	cmp	r3, #110	; 0x6e
 8002b16:	d037      	beq.n	8002b88 <d_expr_primary+0xb8>
 8002b18:	213c      	movs	r1, #60	; 0x3c
 8002b1a:	2b45      	cmp	r3, #69	; 0x45
 8002b1c:	d040      	beq.n	8002ba0 <d_expr_primary+0xd0>
 8002b1e:	b30b      	cbz	r3, 8002b64 <d_expr_primary+0x94>
 8002b20:	4633      	mov	r3, r6
 8002b22:	e000      	b.n	8002b26 <d_expr_primary+0x56>
 8002b24:	b1f5      	cbz	r5, 8002b64 <d_expr_primary+0x94>
 8002b26:	3301      	adds	r3, #1
 8002b28:	60e3      	str	r3, [r4, #12]
 8002b2a:	781d      	ldrb	r5, [r3, #0]
 8002b2c:	2d45      	cmp	r5, #69	; 0x45
 8002b2e:	d1f9      	bne.n	8002b24 <d_expr_primary+0x54>
 8002b30:	1b9d      	subs	r5, r3, r6
 8002b32:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	da0b      	bge.n	8002b52 <d_expr_primary+0x82>
 8002b3a:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8002b3e:	ea4f 1c02 	mov.w	ip, r2, lsl #4
 8002b42:	eb0e 030c 	add.w	r3, lr, ip
 8002b46:	3201      	adds	r2, #1
 8002b48:	2700      	movs	r7, #0
 8002b4a:	605f      	str	r7, [r3, #4]
 8002b4c:	6162      	str	r2, [r4, #20]
 8002b4e:	b106      	cbz	r6, 8002b52 <d_expr_primary+0x82>
 8002b50:	bb05      	cbnz	r5, 8002b94 <d_expr_primary+0xc4>
 8002b52:	2300      	movs	r3, #0
 8002b54:	4602      	mov	r2, r0
 8002b56:	4620      	mov	r0, r4
 8002b58:	f7fd fb4a 	bl	80001f0 <d_make_comp>
 8002b5c:	68e3      	ldr	r3, [r4, #12]
 8002b5e:	781a      	ldrb	r2, [r3, #0]
 8002b60:	2a45      	cmp	r2, #69	; 0x45
 8002b62:	d0cc      	beq.n	8002afe <d_expr_primary+0x2e>
 8002b64:	2000      	movs	r0, #0
 8002b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b68:	1c93      	adds	r3, r2, #2
 8002b6a:	60c3      	str	r3, [r0, #12]
 8002b6c:	7892      	ldrb	r2, [r2, #2]
 8002b6e:	2a5a      	cmp	r2, #90	; 0x5a
 8002b70:	d0bb      	beq.n	8002aea <d_expr_primary+0x1a>
 8002b72:	2000      	movs	r0, #0
 8002b74:	e7c1      	b.n	8002afa <d_expr_primary+0x2a>
 8002b76:	6883      	ldr	r3, [r0, #8]
 8002b78:	7c1a      	ldrb	r2, [r3, #16]
 8002b7a:	2a00      	cmp	r2, #0
 8002b7c:	d0c8      	beq.n	8002b10 <d_expr_primary+0x40>
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b82:	1a9b      	subs	r3, r3, r2
 8002b84:	6323      	str	r3, [r4, #48]	; 0x30
 8002b86:	e7c3      	b.n	8002b10 <d_expr_primary+0x40>
 8002b88:	1c72      	adds	r2, r6, #1
 8002b8a:	60e2      	str	r2, [r4, #12]
 8002b8c:	7873      	ldrb	r3, [r6, #1]
 8002b8e:	213d      	movs	r1, #61	; 0x3d
 8002b90:	4616      	mov	r6, r2
 8002b92:	e7c2      	b.n	8002b1a <d_expr_primary+0x4a>
 8002b94:	605f      	str	r7, [r3, #4]
 8002b96:	f80e 700c 	strb.w	r7, [lr, ip]
 8002b9a:	e9c3 6502 	strd	r6, r5, [r3, #8]
 8002b9e:	e7d9      	b.n	8002b54 <d_expr_primary+0x84>
 8002ba0:	2500      	movs	r5, #0
 8002ba2:	e7c6      	b.n	8002b32 <d_expr_primary+0x62>

08002ba4 <d_print_comp>:
 8002ba4:	b112      	cbz	r2, 8002bac <d_print_comp+0x8>
 8002ba6:	6853      	ldr	r3, [r2, #4]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	dd03      	ble.n	8002bb4 <d_print_comp+0x10>
 8002bac:	2301      	movs	r3, #1
 8002bae:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8002bb2:	4770      	bx	lr
 8002bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bb8:	4615      	mov	r5, r2
 8002bba:	1c5a      	adds	r2, r3, #1
 8002bbc:	606a      	str	r2, [r5, #4]
 8002bbe:	b099      	sub	sp, #100	; 0x64
 8002bc0:	f8d0 7118 	ldr.w	r7, [r0, #280]	; 0x118
 8002bc4:	9504      	str	r5, [sp, #16]
 8002bc6:	460e      	mov	r6, r1
 8002bc8:	ab04      	add	r3, sp, #16
 8002bca:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
 8002bce:	9105      	str	r1, [sp, #20]
 8002bd0:	4604      	mov	r4, r0
 8002bd2:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
 8002bd6:	2f00      	cmp	r7, #0
 8002bd8:	f040 80d7 	bne.w	8002d8a <d_print_comp+0x1e6>
 8002bdc:	7828      	ldrb	r0, [r5, #0]
 8002bde:	284f      	cmp	r0, #79	; 0x4f
 8002be0:	f201 82ef 	bhi.w	80041c2 <d_print_comp+0x161e>
 8002be4:	e8df f010 	tbh	[pc, r0, lsl #1]
 8002be8:	0ab80a87 	.word	0x0ab80a87
 8002bec:	0a4f0ab8 	.word	0x0a4f0ab8
 8002bf0:	079407c6 	.word	0x079407c6
 8002bf4:	075e0767 	.word	0x075e0767
 8002bf8:	070f0737 	.word	0x070f0737
 8002bfc:	06bf06e7 	.word	0x06bf06e7
 8002c00:	066f0697 	.word	0x066f0697
 8002c04:	061f0647 	.word	0x061f0647
 8002c08:	091f0947 	.word	0x091f0947
 8002c0c:	08cf08f7 	.word	0x08cf08f7
 8002c10:	087f08a7 	.word	0x087f08a7
 8002c14:	082f0857 	.word	0x082f0857
 8002c18:	09bf09d6 	.word	0x09bf09d6
 8002c1c:	09bf09bf 	.word	0x09bf09bf
 8002c20:	09990999 	.word	0x09990999
 8002c24:	09990999 	.word	0x09990999
 8002c28:	09990999 	.word	0x09990999
 8002c2c:	096f0999 	.word	0x096f0999
 8002c30:	0999096f 	.word	0x0999096f
 8002c34:	0a1d0999 	.word	0x0a1d0999
 8002c38:	06060a14 	.word	0x06060a14
 8002c3c:	05720592 	.word	0x05720592
 8002c40:	0572051b 	.word	0x0572051b
 8002c44:	04d304d3 	.word	0x04d304d3
 8002c48:	045c0488 	.word	0x045c0488
 8002c4c:	0aed0434 	.word	0x0aed0434
 8002c50:	0404040c 	.word	0x0404040c
 8002c54:	039c03b0 	.word	0x039c03b0
 8002c58:	038d0397 	.word	0x038d0397
 8002c5c:	03880388 	.word	0x03880388
 8002c60:	03330333 	.word	0x03330333
 8002c64:	02fe030b 	.word	0x02fe030b
 8002c68:	02aa02dc 	.word	0x02aa02dc
 8002c6c:	025a0282 	.word	0x025a0282
 8002c70:	01f80232 	.word	0x01f80232
 8002c74:	01d00aed 	.word	0x01d00aed
 8002c78:	015301a8 	.word	0x015301a8
 8002c7c:	017b0105 	.word	0x017b0105
 8002c80:	00d80999 	.word	0x00d80999
 8002c84:	09990999 	.word	0x09990999
 8002c88:	68aa      	ldr	r2, [r5, #8]
 8002c8a:	6893      	ldr	r3, [r2, #8]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	7859      	ldrb	r1, [r3, #1]
 8002c90:	2963      	cmp	r1, #99	; 0x63
 8002c92:	d109      	bne.n	8002ca8 <d_print_comp+0x104>
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	f1a3 0163 	sub.w	r1, r3, #99	; 0x63
 8002c9a:	2901      	cmp	r1, #1
 8002c9c:	f242 8319 	bls.w	80052d2 <d_print_comp+0x272e>
 8002ca0:	3b72      	subs	r3, #114	; 0x72
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	f242 8315 	bls.w	80052d2 <d_print_comp+0x272e>
 8002ca8:	f105 030c 	add.w	r3, r5, #12
 8002cac:	4631      	mov	r1, r6
 8002cae:	4620      	mov	r0, r4
 8002cb0:	f003 fcd2 	bl	8006658 <d_maybe_print_fold_expression.isra.20>
 8002cb4:	4680      	mov	r8, r0
 8002cb6:	2800      	cmp	r0, #0
 8002cb8:	f042 8400 	bne.w	80054bc <d_print_comp+0x2918>
 8002cbc:	68ab      	ldr	r3, [r5, #8]
 8002cbe:	781a      	ldrb	r2, [r3, #0]
 8002cc0:	2a31      	cmp	r2, #49	; 0x31
 8002cc2:	f002 8592 	beq.w	80057ea <d_print_comp+0x2c46>
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	49d7      	ldr	r1, [pc, #860]	; (8003028 <d_print_comp+0x484>)
 8002cca:	6818      	ldr	r0, [r3, #0]
 8002ccc:	f003 fffe 	bl	8006ccc <strcmp>
 8002cd0:	68eb      	ldr	r3, [r5, #12]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	b918      	cbnz	r0, 8002cde <d_print_comp+0x13a>
 8002cd6:	7813      	ldrb	r3, [r2, #0]
 8002cd8:	2b03      	cmp	r3, #3
 8002cda:	f002 85d4 	beq.w	8005886 <d_print_comp+0x2ce2>
 8002cde:	4631      	mov	r1, r6
 8002ce0:	4620      	mov	r0, r4
 8002ce2:	f003 fc67 	bl	80065b4 <d_print_subexpr>
 8002ce6:	68af      	ldr	r7, [r5, #8]
 8002ce8:	49d0      	ldr	r1, [pc, #832]	; (800302c <d_print_comp+0x488>)
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	f8d3 8000 	ldr.w	r8, [r3]
 8002cf0:	4640      	mov	r0, r8
 8002cf2:	f003 ffeb 	bl	8006ccc <strcmp>
 8002cf6:	4681      	mov	r9, r0
 8002cf8:	2800      	cmp	r0, #0
 8002cfa:	f042 83d0 	bne.w	800549e <d_print_comp+0x28fa>
 8002cfe:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8002d02:	2fff      	cmp	r7, #255	; 0xff
 8002d04:	d110      	bne.n	8002d28 <d_print_comp+0x184>
 8002d06:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 8002d0a:	4639      	mov	r1, r7
 8002d0c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002d10:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002d14:	4620      	mov	r0, r4
 8002d16:	4798      	blx	r3
 8002d18:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002d1c:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 8002d20:	3301      	adds	r3, #1
 8002d22:	464f      	mov	r7, r9
 8002d24:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002d28:	1c7a      	adds	r2, r7, #1
 8002d2a:	235b      	movs	r3, #91	; 0x5b
 8002d2c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002d30:	55e3      	strb	r3, [r4, r7]
 8002d32:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002d36:	68eb      	ldr	r3, [r5, #12]
 8002d38:	4631      	mov	r1, r6
 8002d3a:	68da      	ldr	r2, [r3, #12]
 8002d3c:	4620      	mov	r0, r4
 8002d3e:	f7ff ff31 	bl	8002ba4 <d_print_comp>
 8002d42:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8002d46:	2fff      	cmp	r7, #255	; 0xff
 8002d48:	d111      	bne.n	8002d6e <d_print_comp+0x1ca>
 8002d4a:	2600      	movs	r6, #0
 8002d4c:	4639      	mov	r1, r7
 8002d4e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002d52:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8002d56:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002d5a:	4620      	mov	r0, r4
 8002d5c:	4798      	blx	r3
 8002d5e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002d62:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8002d66:	3301      	adds	r3, #1
 8002d68:	4637      	mov	r7, r6
 8002d6a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002d6e:	235d      	movs	r3, #93	; 0x5d
 8002d70:	1c7a      	adds	r2, r7, #1
 8002d72:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002d76:	55e3      	strb	r3, [r4, r7]
 8002d78:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002d7c:	68ab      	ldr	r3, [r5, #8]
 8002d7e:	781a      	ldrb	r2, [r3, #0]
 8002d80:	2a31      	cmp	r2, #49	; 0x31
 8002d82:	f002 83ad 	beq.w	80054e0 <d_print_comp+0x293c>
 8002d86:	9905      	ldr	r1, [sp, #20]
 8002d88:	686a      	ldr	r2, [r5, #4]
 8002d8a:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
 8002d8e:	3a01      	subs	r2, #1
 8002d90:	606a      	str	r2, [r5, #4]
 8002d92:	b019      	add	sp, #100	; 0x64
 8002d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d98:	4fa5      	ldr	r7, [pc, #660]	; (8003030 <d_print_comp+0x48c>)
 8002d9a:	68aa      	ldr	r2, [r5, #8]
 8002d9c:	4631      	mov	r1, r6
 8002d9e:	4620      	mov	r0, r4
 8002da0:	f7ff ff00 	bl	8002ba4 <d_print_comp>
 8002da4:	f107 0808 	add.w	r8, r7, #8
 8002da8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002dac:	f04f 0900 	mov.w	r9, #0
 8002db0:	e016      	b.n	8002de0 <d_print_comp+0x23c>
 8002db2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002db6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002dba:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002dbe:	4798      	blx	r3
 8002dc0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002dca:	2200      	movs	r2, #0
 8002dcc:	2301      	movs	r3, #1
 8002dce:	45b8      	cmp	r8, r7
 8002dd0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002dd4:	f804 a002 	strb.w	sl, [r4, r2]
 8002dd8:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8002ddc:	f001 82f9 	beq.w	80043d2 <d_print_comp+0x182e>
 8002de0:	2bff      	cmp	r3, #255	; 0xff
 8002de2:	4619      	mov	r1, r3
 8002de4:	4620      	mov	r0, r4
 8002de6:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8002dea:	d0e2      	beq.n	8002db2 <d_print_comp+0x20e>
 8002dec:	461a      	mov	r2, r3
 8002dee:	3301      	adds	r3, #1
 8002df0:	e7ed      	b.n	8002dce <d_print_comp+0x22a>
 8002df2:	68a9      	ldr	r1, [r5, #8]
 8002df4:	4620      	mov	r0, r4
 8002df6:	f7fd fcef 	bl	80007d8 <d_find_pack>
 8002dfa:	2800      	cmp	r0, #0
 8002dfc:	f002 81e1 	beq.w	80051c2 <d_print_comp+0x261e>
 8002e00:	2300      	movs	r3, #0
 8002e02:	7802      	ldrb	r2, [r0, #0]
 8002e04:	2a2f      	cmp	r2, #47	; 0x2f
 8002e06:	f041 85df 	bne.w	80049c8 <d_print_comp+0x1e24>
 8002e0a:	6882      	ldr	r2, [r0, #8]
 8002e0c:	2a00      	cmp	r2, #0
 8002e0e:	f001 85db 	beq.w	80049c8 <d_print_comp+0x1e24>
 8002e12:	68c0      	ldr	r0, [r0, #12]
 8002e14:	3301      	adds	r3, #1
 8002e16:	2800      	cmp	r0, #0
 8002e18:	d1f3      	bne.n	8002e02 <d_print_comp+0x25e>
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	68ab      	ldr	r3, [r5, #8]
 8002e1e:	9301      	str	r3, [sp, #4]
 8002e20:	1e4a      	subs	r2, r1, #1
 8002e22:	9202      	str	r2, [sp, #8]
 8002e24:	f04f 0a00 	mov.w	sl, #0
 8002e28:	4689      	mov	r9, r1
 8002e2a:	9503      	str	r5, [sp, #12]
 8002e2c:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
 8002e30:	9a01      	ldr	r2, [sp, #4]
 8002e32:	4631      	mov	r1, r6
 8002e34:	4620      	mov	r0, r4
 8002e36:	f7ff feb5 	bl	8002ba4 <d_print_comp>
 8002e3a:	9b02      	ldr	r3, [sp, #8]
 8002e3c:	429f      	cmp	r7, r3
 8002e3e:	f281 81c6 	bge.w	80041ce <d_print_comp+0x162a>
 8002e42:	4d7c      	ldr	r5, [pc, #496]	; (8003034 <d_print_comp+0x490>)
 8002e44:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002e48:	f105 0802 	add.w	r8, r5, #2
 8002e4c:	e016      	b.n	8002e7c <d_print_comp+0x2d8>
 8002e4e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002e52:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002e56:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8002e5a:	4798      	blx	r3
 8002e5c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002e60:	3301      	adds	r3, #1
 8002e62:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002e66:	2200      	movs	r2, #0
 8002e68:	2301      	movs	r3, #1
 8002e6a:	45a8      	cmp	r8, r5
 8002e6c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002e70:	f804 b002 	strb.w	fp, [r4, r2]
 8002e74:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 8002e78:	f001 81a9 	beq.w	80041ce <d_print_comp+0x162a>
 8002e7c:	2bff      	cmp	r3, #255	; 0xff
 8002e7e:	4619      	mov	r1, r3
 8002e80:	4620      	mov	r0, r4
 8002e82:	f815 bb01 	ldrb.w	fp, [r5], #1
 8002e86:	d0e2      	beq.n	8002e4e <d_print_comp+0x2aa>
 8002e88:	461a      	mov	r2, r3
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	e7ed      	b.n	8002e6a <d_print_comp+0x2c6>
 8002e8e:	4f6a      	ldr	r7, [pc, #424]	; (8003038 <d_print_comp+0x494>)
 8002e90:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002e94:	f107 081a 	add.w	r8, r7, #26
 8002e98:	f04f 0900 	mov.w	r9, #0
 8002e9c:	e016      	b.n	8002ecc <d_print_comp+0x328>
 8002e9e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002ea2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002ea6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002eaa:	4798      	blx	r3
 8002eac:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	2301      	movs	r3, #1
 8002eba:	45b8      	cmp	r8, r7
 8002ebc:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002ec0:	f804 a002 	strb.w	sl, [r4, r2]
 8002ec4:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8002ec8:	f001 82f1 	beq.w	80044ae <d_print_comp+0x190a>
 8002ecc:	2bff      	cmp	r3, #255	; 0xff
 8002ece:	4619      	mov	r1, r3
 8002ed0:	4620      	mov	r0, r4
 8002ed2:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8002ed6:	d0e2      	beq.n	8002e9e <d_print_comp+0x2fa>
 8002ed8:	461a      	mov	r2, r3
 8002eda:	3301      	adds	r3, #1
 8002edc:	e7ed      	b.n	8002eba <d_print_comp+0x316>
 8002ede:	4f57      	ldr	r7, [pc, #348]	; (800303c <d_print_comp+0x498>)
 8002ee0:	68aa      	ldr	r2, [r5, #8]
 8002ee2:	4631      	mov	r1, r6
 8002ee4:	4620      	mov	r0, r4
 8002ee6:	f7ff fe5d 	bl	8002ba4 <d_print_comp>
 8002eea:	f107 0805 	add.w	r8, r7, #5
 8002eee:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002ef2:	f04f 0900 	mov.w	r9, #0
 8002ef6:	e016      	b.n	8002f26 <d_print_comp+0x382>
 8002ef8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002efc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002f00:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002f04:	4798      	blx	r3
 8002f06:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002f10:	2200      	movs	r2, #0
 8002f12:	2301      	movs	r3, #1
 8002f14:	45b8      	cmp	r8, r7
 8002f16:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002f1a:	f804 a002 	strb.w	sl, [r4, r2]
 8002f1e:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8002f22:	f001 827c 	beq.w	800441e <d_print_comp+0x187a>
 8002f26:	2bff      	cmp	r3, #255	; 0xff
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4620      	mov	r0, r4
 8002f2c:	f817 ab01 	ldrb.w	sl, [r7], #1
 8002f30:	d0e2      	beq.n	8002ef8 <d_print_comp+0x354>
 8002f32:	461a      	mov	r2, r3
 8002f34:	3301      	adds	r3, #1
 8002f36:	e7ed      	b.n	8002f14 <d_print_comp+0x370>
 8002f38:	4f41      	ldr	r7, [pc, #260]	; (8003040 <d_print_comp+0x49c>)
 8002f3a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002f3e:	f107 0816 	add.w	r8, r7, #22
 8002f42:	f04f 0900 	mov.w	r9, #0
 8002f46:	e016      	b.n	8002f76 <d_print_comp+0x3d2>
 8002f48:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002f4c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002f50:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002f54:	4798      	blx	r3
 8002f56:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002f60:	2200      	movs	r2, #0
 8002f62:	2301      	movs	r3, #1
 8002f64:	45b8      	cmp	r8, r7
 8002f66:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002f6a:	f804 a002 	strb.w	sl, [r4, r2]
 8002f6e:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8002f72:	f001 81f4 	beq.w	800435e <d_print_comp+0x17ba>
 8002f76:	2bff      	cmp	r3, #255	; 0xff
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4620      	mov	r0, r4
 8002f7c:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8002f80:	d0e2      	beq.n	8002f48 <d_print_comp+0x3a4>
 8002f82:	461a      	mov	r2, r3
 8002f84:	3301      	adds	r3, #1
 8002f86:	e7ed      	b.n	8002f64 <d_print_comp+0x3c0>
 8002f88:	4e2e      	ldr	r6, [pc, #184]	; (8003044 <d_print_comp+0x4a0>)
 8002f8a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002f8e:	f106 070e 	add.w	r7, r6, #14
 8002f92:	f04f 0800 	mov.w	r8, #0
 8002f96:	e016      	b.n	8002fc6 <d_print_comp+0x422>
 8002f98:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002f9c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002fa0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8002fa4:	4798      	blx	r3
 8002fa6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002faa:	3301      	adds	r3, #1
 8002fac:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	42b7      	cmp	r7, r6
 8002fb6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002fba:	f804 9002 	strb.w	r9, [r4, r2]
 8002fbe:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 8002fc2:	f001 81d5 	beq.w	8004370 <d_print_comp+0x17cc>
 8002fc6:	2bff      	cmp	r3, #255	; 0xff
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4620      	mov	r0, r4
 8002fcc:	f816 9f01 	ldrb.w	r9, [r6, #1]!
 8002fd0:	d0e2      	beq.n	8002f98 <d_print_comp+0x3f4>
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	e7ed      	b.n	8002fb4 <d_print_comp+0x410>
 8002fd8:	4f1b      	ldr	r7, [pc, #108]	; (8003048 <d_print_comp+0x4a4>)
 8002fda:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002fde:	f107 0808 	add.w	r8, r7, #8
 8002fe2:	f04f 0900 	mov.w	r9, #0
 8002fe6:	e016      	b.n	8003016 <d_print_comp+0x472>
 8002fe8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002fec:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002ff0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002ff4:	4798      	blx	r3
 8002ff6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003000:	2200      	movs	r2, #0
 8003002:	2301      	movs	r3, #1
 8003004:	45b8      	cmp	r8, r7
 8003006:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800300a:	f804 a002 	strb.w	sl, [r4, r2]
 800300e:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003012:	f001 8114 	beq.w	800423e <d_print_comp+0x169a>
 8003016:	2bff      	cmp	r3, #255	; 0xff
 8003018:	4619      	mov	r1, r3
 800301a:	4620      	mov	r0, r4
 800301c:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003020:	d0e2      	beq.n	8002fe8 <d_print_comp+0x444>
 8003022:	461a      	mov	r2, r3
 8003024:	3301      	adds	r3, #1
 8003026:	e7ed      	b.n	8003004 <d_print_comp+0x460>
 8003028:	08034e28 	.word	0x08034e28
 800302c:	08035028 	.word	0x08035028
 8003030:	080350e3 	.word	0x080350e3
 8003034:	08034ffc 	.word	0x08034ffc
 8003038:	08034fc7 	.word	0x08034fc7
 800303c:	08034e68 	.word	0x08034e68
 8003040:	08034fcb 	.word	0x08034fcb
 8003044:	080350d3 	.word	0x080350d3
 8003048:	080350c3 	.word	0x080350c3
 800304c:	4fb9      	ldr	r7, [pc, #740]	; (8003334 <d_print_comp+0x790>)
 800304e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003052:	f107 081c 	add.w	r8, r7, #28
 8003056:	f04f 0900 	mov.w	r9, #0
 800305a:	e016      	b.n	800308a <d_print_comp+0x4e6>
 800305c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003060:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003064:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003068:	4798      	blx	r3
 800306a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800306e:	3301      	adds	r3, #1
 8003070:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003074:	2200      	movs	r2, #0
 8003076:	2301      	movs	r3, #1
 8003078:	45b8      	cmp	r8, r7
 800307a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800307e:	f804 a002 	strb.w	sl, [r4, r2]
 8003082:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003086:	f001 810f 	beq.w	80042a8 <d_print_comp+0x1704>
 800308a:	2bff      	cmp	r3, #255	; 0xff
 800308c:	4619      	mov	r1, r3
 800308e:	4620      	mov	r0, r4
 8003090:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003094:	d0e2      	beq.n	800305c <d_print_comp+0x4b8>
 8003096:	461a      	mov	r2, r3
 8003098:	3301      	adds	r3, #1
 800309a:	e7ed      	b.n	8003078 <d_print_comp+0x4d4>
 800309c:	4fa6      	ldr	r7, [pc, #664]	; (8003338 <d_print_comp+0x794>)
 800309e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80030a2:	f107 081d 	add.w	r8, r7, #29
 80030a6:	f04f 0900 	mov.w	r9, #0
 80030aa:	e016      	b.n	80030da <d_print_comp+0x536>
 80030ac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80030b0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80030b4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80030b8:	4798      	blx	r3
 80030ba:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80030be:	3301      	adds	r3, #1
 80030c0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80030c4:	2200      	movs	r2, #0
 80030c6:	2301      	movs	r3, #1
 80030c8:	4547      	cmp	r7, r8
 80030ca:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80030ce:	f804 a002 	strb.w	sl, [r4, r2]
 80030d2:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80030d6:	f001 8083 	beq.w	80041e0 <d_print_comp+0x163c>
 80030da:	2bff      	cmp	r3, #255	; 0xff
 80030dc:	4619      	mov	r1, r3
 80030de:	4620      	mov	r0, r4
 80030e0:	f817 af01 	ldrb.w	sl, [r7, #1]!
 80030e4:	d0e2      	beq.n	80030ac <d_print_comp+0x508>
 80030e6:	461a      	mov	r2, r3
 80030e8:	3301      	adds	r3, #1
 80030ea:	e7ed      	b.n	80030c8 <d_print_comp+0x524>
 80030ec:	4f93      	ldr	r7, [pc, #588]	; (800333c <d_print_comp+0x798>)
 80030ee:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80030f2:	f107 080a 	add.w	r8, r7, #10
 80030f6:	f04f 0900 	mov.w	r9, #0
 80030fa:	e016      	b.n	800312a <d_print_comp+0x586>
 80030fc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003100:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003104:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003108:	4798      	blx	r3
 800310a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800310e:	3301      	adds	r3, #1
 8003110:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003114:	2200      	movs	r2, #0
 8003116:	2301      	movs	r3, #1
 8003118:	45b8      	cmp	r8, r7
 800311a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800311e:	f804 a002 	strb.w	sl, [r4, r2]
 8003122:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003126:	f001 8064 	beq.w	80041f2 <d_print_comp+0x164e>
 800312a:	2bff      	cmp	r3, #255	; 0xff
 800312c:	4619      	mov	r1, r3
 800312e:	4620      	mov	r0, r4
 8003130:	f817 ab01 	ldrb.w	sl, [r7], #1
 8003134:	d0e2      	beq.n	80030fc <d_print_comp+0x558>
 8003136:	461a      	mov	r2, r3
 8003138:	3301      	adds	r3, #1
 800313a:	e7ed      	b.n	8003118 <d_print_comp+0x574>
 800313c:	a808      	add	r0, sp, #32
 800313e:	68aa      	ldr	r2, [r5, #8]
 8003140:	497f      	ldr	r1, [pc, #508]	; (8003340 <d_print_comp+0x79c>)
 8003142:	f02b fe77 	bl	802ee34 <siprintf>
 8003146:	a808      	add	r0, sp, #32
 8003148:	f003 fdca 	bl	8006ce0 <strlen>
 800314c:	2800      	cmp	r0, #0
 800314e:	f001 81b7 	beq.w	80044c0 <d_print_comp+0x191c>
 8003152:	ae08      	add	r6, sp, #32
 8003154:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003158:	1837      	adds	r7, r6, r0
 800315a:	f04f 0800 	mov.w	r8, #0
 800315e:	e016      	b.n	800318e <d_print_comp+0x5ea>
 8003160:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003164:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003168:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800316c:	4798      	blx	r3
 800316e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003172:	3301      	adds	r3, #1
 8003174:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003178:	2200      	movs	r2, #0
 800317a:	2301      	movs	r3, #1
 800317c:	42be      	cmp	r6, r7
 800317e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003182:	f804 9002 	strb.w	r9, [r4, r2]
 8003186:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 800318a:	f001 8199 	beq.w	80044c0 <d_print_comp+0x191c>
 800318e:	2bff      	cmp	r3, #255	; 0xff
 8003190:	4619      	mov	r1, r3
 8003192:	4620      	mov	r0, r4
 8003194:	f816 9b01 	ldrb.w	r9, [r6], #1
 8003198:	d0e2      	beq.n	8003160 <d_print_comp+0x5bc>
 800319a:	461a      	mov	r2, r3
 800319c:	3301      	adds	r3, #1
 800319e:	e7ed      	b.n	800317c <d_print_comp+0x5d8>
 80031a0:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80031a4:	f895 8008 	ldrb.w	r8, [r5, #8]
 80031a8:	2fff      	cmp	r7, #255	; 0xff
 80031aa:	d111      	bne.n	80031d0 <d_print_comp+0x62c>
 80031ac:	2600      	movs	r6, #0
 80031ae:	4639      	mov	r1, r7
 80031b0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80031b4:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80031b8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80031bc:	4620      	mov	r0, r4
 80031be:	4798      	blx	r3
 80031c0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80031c4:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80031c8:	3301      	adds	r3, #1
 80031ca:	4637      	mov	r7, r6
 80031cc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80031d0:	1c7b      	adds	r3, r7, #1
 80031d2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80031d6:	f804 8007 	strb.w	r8, [r4, r7]
 80031da:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80031de:	686a      	ldr	r2, [r5, #4]
 80031e0:	9905      	ldr	r1, [sp, #20]
 80031e2:	e5d2      	b.n	8002d8a <d_print_comp+0x1e6>
 80031e4:	68aa      	ldr	r2, [r5, #8]
 80031e6:	4631      	mov	r1, r6
 80031e8:	4620      	mov	r0, r4
 80031ea:	f7ff fcdb 	bl	8002ba4 <d_print_comp>
 80031ee:	4631      	mov	r1, r6
 80031f0:	68ea      	ldr	r2, [r5, #12]
 80031f2:	4620      	mov	r0, r4
 80031f4:	f7ff fcd6 	bl	8002ba4 <d_print_comp>
 80031f8:	9905      	ldr	r1, [sp, #20]
 80031fa:	686a      	ldr	r2, [r5, #4]
 80031fc:	e5c5      	b.n	8002d8a <d_print_comp+0x1e6>
 80031fe:	4f51      	ldr	r7, [pc, #324]	; (8003344 <d_print_comp+0x7a0>)
 8003200:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003204:	f107 080e 	add.w	r8, r7, #14
 8003208:	f04f 0900 	mov.w	r9, #0
 800320c:	e016      	b.n	800323c <d_print_comp+0x698>
 800320e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003212:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003216:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800321a:	4798      	blx	r3
 800321c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003220:	3301      	adds	r3, #1
 8003222:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003226:	2200      	movs	r2, #0
 8003228:	2301      	movs	r3, #1
 800322a:	45b8      	cmp	r8, r7
 800322c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003230:	f804 a002 	strb.w	sl, [r4, r2]
 8003234:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003238:	f001 8146 	beq.w	80044c8 <d_print_comp+0x1924>
 800323c:	2bff      	cmp	r3, #255	; 0xff
 800323e:	4619      	mov	r1, r3
 8003240:	4620      	mov	r0, r4
 8003242:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003246:	d0e2      	beq.n	800320e <d_print_comp+0x66a>
 8003248:	461a      	mov	r2, r3
 800324a:	3301      	adds	r3, #1
 800324c:	e7ed      	b.n	800322a <d_print_comp+0x686>
 800324e:	68ab      	ldr	r3, [r5, #8]
 8003250:	781a      	ldrb	r2, [r3, #0]
 8003252:	2a27      	cmp	r2, #39	; 0x27
 8003254:	f001 8572 	beq.w	8004d3c <d_print_comp+0x2198>
 8003258:	f04f 0800 	mov.w	r8, #0
 800325c:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003260:	2fff      	cmp	r7, #255	; 0xff
 8003262:	d112      	bne.n	800328a <d_print_comp+0x6e6>
 8003264:	f04f 0900 	mov.w	r9, #0
 8003268:	4639      	mov	r1, r7
 800326a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800326e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003272:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003276:	4620      	mov	r0, r4
 8003278:	4798      	blx	r3
 800327a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800327e:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 8003282:	3301      	adds	r3, #1
 8003284:	464f      	mov	r7, r9
 8003286:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800328a:	2328      	movs	r3, #40	; 0x28
 800328c:	1c7a      	adds	r2, r7, #1
 800328e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003292:	55e3      	strb	r3, [r4, r7]
 8003294:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003298:	68aa      	ldr	r2, [r5, #8]
 800329a:	4631      	mov	r1, r6
 800329c:	4620      	mov	r0, r4
 800329e:	f7ff fc81 	bl	8002ba4 <d_print_comp>
 80032a2:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80032a6:	2bff      	cmp	r3, #255	; 0xff
 80032a8:	f041 85b8 	bne.w	8004e1c <d_print_comp+0x2278>
 80032ac:	2200      	movs	r2, #0
 80032ae:	4619      	mov	r1, r3
 80032b0:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 80032b4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80032b8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80032bc:	4620      	mov	r0, r4
 80032be:	4798      	blx	r3
 80032c0:	2329      	movs	r3, #41	; 0x29
 80032c2:	7023      	strb	r3, [r4, #0]
 80032c4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80032c8:	782a      	ldrb	r2, [r5, #0]
 80032ca:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80032ce:	2101      	movs	r1, #1
 80032d0:	3301      	adds	r3, #1
 80032d2:	2a3d      	cmp	r2, #61	; 0x3d
 80032d4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80032d8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80032dc:	f001 85bb 	beq.w	8004e56 <d_print_comp+0x22b2>
 80032e0:	f1b8 0f08 	cmp.w	r8, #8
 80032e4:	f001 8556 	beq.w	8004d94 <d_print_comp+0x21f0>
 80032e8:	4631      	mov	r1, r6
 80032ea:	68ea      	ldr	r2, [r5, #12]
 80032ec:	4620      	mov	r0, r4
 80032ee:	f7ff fc59 	bl	8002ba4 <d_print_comp>
 80032f2:	9905      	ldr	r1, [sp, #20]
 80032f4:	686a      	ldr	r2, [r5, #4]
 80032f6:	e548      	b.n	8002d8a <d_print_comp+0x1e6>
 80032f8:	2301      	movs	r3, #1
 80032fa:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80032fe:	686a      	ldr	r2, [r5, #4]
 8003300:	e543      	b.n	8002d8a <d_print_comp+0x1e6>
 8003302:	68eb      	ldr	r3, [r5, #12]
 8003304:	781a      	ldrb	r2, [r3, #0]
 8003306:	2a3a      	cmp	r2, #58	; 0x3a
 8003308:	f001 8405 	beq.w	8004b16 <d_print_comp+0x1f72>
 800330c:	2301      	movs	r3, #1
 800330e:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8003312:	686a      	ldr	r2, [r5, #4]
 8003314:	e539      	b.n	8002d8a <d_print_comp+0x1e6>
 8003316:	2301      	movs	r3, #1
 8003318:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 800331c:	686a      	ldr	r2, [r5, #4]
 800331e:	e534      	b.n	8002d8a <d_print_comp+0x1e6>
 8003320:	68eb      	ldr	r3, [r5, #12]
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	2b38      	cmp	r3, #56	; 0x38
 8003326:	f43f acaf 	beq.w	8002c88 <d_print_comp+0xe4>
 800332a:	2301      	movs	r3, #1
 800332c:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8003330:	686a      	ldr	r2, [r5, #4]
 8003332:	e52a      	b.n	8002d8a <d_print_comp+0x1e6>
 8003334:	080350a3 	.word	0x080350a3
 8003338:	08035083 	.word	0x08035083
 800333c:	08035064 	.word	0x08035064
 8003340:	08034e20 	.word	0x08034e20
 8003344:	08035053 	.word	0x08035053
 8003348:	e9d5 9802 	ldrd	r9, r8, [r5, #8]
 800334c:	f899 3000 	ldrb.w	r3, [r9]
 8003350:	2b31      	cmp	r3, #49	; 0x31
 8003352:	f001 843a 	beq.w	8004bca <d_print_comp+0x2026>
 8003356:	2b33      	cmp	r3, #51	; 0x33
 8003358:	f042 8192 	bne.w	8005680 <d_print_comp+0x2adc>
 800335c:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003360:	2fff      	cmp	r7, #255	; 0xff
 8003362:	d112      	bne.n	800338a <d_print_comp+0x7e6>
 8003364:	f04f 0a00 	mov.w	sl, #0
 8003368:	4639      	mov	r1, r7
 800336a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800336e:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8003372:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003376:	4620      	mov	r0, r4
 8003378:	4798      	blx	r3
 800337a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800337e:	f8c4 a100 	str.w	sl, [r4, #256]	; 0x100
 8003382:	3301      	adds	r3, #1
 8003384:	4657      	mov	r7, sl
 8003386:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800338a:	1c7a      	adds	r2, r7, #1
 800338c:	2328      	movs	r3, #40	; 0x28
 800338e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003392:	55e3      	strb	r3, [r4, r7]
 8003394:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003398:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800339c:	4631      	mov	r1, r6
 800339e:	4620      	mov	r0, r4
 80033a0:	f7ff fc00 	bl	8002ba4 <d_print_comp>
 80033a4:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80033a8:	2fff      	cmp	r7, #255	; 0xff
 80033aa:	d112      	bne.n	80033d2 <d_print_comp+0x82e>
 80033ac:	f04f 0900 	mov.w	r9, #0
 80033b0:	4639      	mov	r1, r7
 80033b2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80033b6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80033ba:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80033be:	4620      	mov	r0, r4
 80033c0:	4798      	blx	r3
 80033c2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80033c6:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 80033ca:	3301      	adds	r3, #1
 80033cc:	464f      	mov	r7, r9
 80033ce:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80033d2:	2329      	movs	r3, #41	; 0x29
 80033d4:	1c7a      	adds	r2, r7, #1
 80033d6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80033da:	55e3      	strb	r3, [r4, r7]
 80033dc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80033e0:	4642      	mov	r2, r8
 80033e2:	4631      	mov	r1, r6
 80033e4:	4620      	mov	r0, r4
 80033e6:	f003 f8e5 	bl	80065b4 <d_print_subexpr>
 80033ea:	9905      	ldr	r1, [sp, #20]
 80033ec:	686a      	ldr	r2, [r5, #4]
 80033ee:	e4cc      	b.n	8002d8a <d_print_comp+0x1e6>
 80033f0:	4631      	mov	r1, r6
 80033f2:	68aa      	ldr	r2, [r5, #8]
 80033f4:	4620      	mov	r0, r4
 80033f6:	f003 f89d 	bl	8006534 <d_print_expr_op>
 80033fa:	9905      	ldr	r1, [sp, #20]
 80033fc:	686a      	ldr	r2, [r5, #4]
 80033fe:	e4c4      	b.n	8002d8a <d_print_comp+0x1e6>
 8003400:	4fd2      	ldr	r7, [pc, #840]	; (800374c <d_print_comp+0xba8>)
 8003402:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003406:	f107 0809 	add.w	r8, r7, #9
 800340a:	f04f 0900 	mov.w	r9, #0
 800340e:	e016      	b.n	800343e <d_print_comp+0x89a>
 8003410:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003414:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003418:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800341c:	4798      	blx	r3
 800341e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003422:	3301      	adds	r3, #1
 8003424:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003428:	2200      	movs	r2, #0
 800342a:	2301      	movs	r3, #1
 800342c:	45b8      	cmp	r8, r7
 800342e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003432:	f804 a002 	strb.w	sl, [r4, r2]
 8003436:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 800343a:	f001 8057 	beq.w	80044ec <d_print_comp+0x1948>
 800343e:	2bff      	cmp	r3, #255	; 0xff
 8003440:	4619      	mov	r1, r3
 8003442:	4620      	mov	r0, r4
 8003444:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003448:	d0e2      	beq.n	8003410 <d_print_comp+0x86c>
 800344a:	461a      	mov	r2, r3
 800344c:	3301      	adds	r3, #1
 800344e:	e7ed      	b.n	800342c <d_print_comp+0x888>
 8003450:	4fbe      	ldr	r7, [pc, #760]	; (800374c <d_print_comp+0xba8>)
 8003452:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003456:	f107 0809 	add.w	r8, r7, #9
 800345a:	f04f 0900 	mov.w	r9, #0
 800345e:	e016      	b.n	800348e <d_print_comp+0x8ea>
 8003460:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003464:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003468:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800346c:	4798      	blx	r3
 800346e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003472:	3301      	adds	r3, #1
 8003474:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003478:	2200      	movs	r2, #0
 800347a:	2301      	movs	r3, #1
 800347c:	45b8      	cmp	r8, r7
 800347e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003482:	f804 a002 	strb.w	sl, [r4, r2]
 8003486:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 800348a:	f001 8026 	beq.w	80044da <d_print_comp+0x1936>
 800348e:	2bff      	cmp	r3, #255	; 0xff
 8003490:	4619      	mov	r1, r3
 8003492:	4620      	mov	r0, r4
 8003494:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003498:	d0e2      	beq.n	8003460 <d_print_comp+0x8bc>
 800349a:	461a      	mov	r2, r3
 800349c:	3301      	adds	r3, #1
 800349e:	e7ed      	b.n	800347c <d_print_comp+0x8d8>
 80034a0:	f8d5 a008 	ldr.w	sl, [r5, #8]
 80034a4:	4eaa      	ldr	r6, [pc, #680]	; (8003750 <d_print_comp+0xbac>)
 80034a6:	f8da 7008 	ldr.w	r7, [sl, #8]
 80034aa:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80034ae:	f106 0808 	add.w	r8, r6, #8
 80034b2:	f04f 0900 	mov.w	r9, #0
 80034b6:	e016      	b.n	80034e6 <d_print_comp+0x942>
 80034b8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80034bc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80034c0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80034c4:	4798      	blx	r3
 80034c6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80034ca:	3301      	adds	r3, #1
 80034cc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80034d0:	2200      	movs	r2, #0
 80034d2:	2301      	movs	r3, #1
 80034d4:	4546      	cmp	r6, r8
 80034d6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80034da:	f804 b002 	strb.w	fp, [r4, r2]
 80034de:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 80034e2:	f001 8021 	beq.w	8004528 <d_print_comp+0x1984>
 80034e6:	2bff      	cmp	r3, #255	; 0xff
 80034e8:	4619      	mov	r1, r3
 80034ea:	4620      	mov	r0, r4
 80034ec:	f816 bf01 	ldrb.w	fp, [r6, #1]!
 80034f0:	d0e2      	beq.n	80034b8 <d_print_comp+0x914>
 80034f2:	461a      	mov	r2, r3
 80034f4:	3301      	adds	r3, #1
 80034f6:	e7ed      	b.n	80034d4 <d_print_comp+0x930>
 80034f8:	e9d5 2802 	ldrd	r2, r8, [r5, #8]
 80034fc:	b11a      	cbz	r2, 8003506 <d_print_comp+0x962>
 80034fe:	4631      	mov	r1, r6
 8003500:	4620      	mov	r0, r4
 8003502:	f7ff fb4f 	bl	8002ba4 <d_print_comp>
 8003506:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800350a:	2fff      	cmp	r7, #255	; 0xff
 800350c:	d112      	bne.n	8003534 <d_print_comp+0x990>
 800350e:	f04f 0900 	mov.w	r9, #0
 8003512:	4639      	mov	r1, r7
 8003514:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003518:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800351c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003520:	4620      	mov	r0, r4
 8003522:	4798      	blx	r3
 8003524:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003528:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 800352c:	3301      	adds	r3, #1
 800352e:	464f      	mov	r7, r9
 8003530:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003534:	1c78      	adds	r0, r7, #1
 8003536:	237b      	movs	r3, #123	; 0x7b
 8003538:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 800353c:	4642      	mov	r2, r8
 800353e:	55e3      	strb	r3, [r4, r7]
 8003540:	4631      	mov	r1, r6
 8003542:	4620      	mov	r0, r4
 8003544:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003548:	f7ff fb2c 	bl	8002ba4 <d_print_comp>
 800354c:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003550:	2fff      	cmp	r7, #255	; 0xff
 8003552:	d111      	bne.n	8003578 <d_print_comp+0x9d4>
 8003554:	2600      	movs	r6, #0
 8003556:	4639      	mov	r1, r7
 8003558:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800355c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8003560:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003564:	4620      	mov	r0, r4
 8003566:	4798      	blx	r3
 8003568:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800356c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8003570:	3301      	adds	r3, #1
 8003572:	4637      	mov	r7, r6
 8003574:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003578:	1c7a      	adds	r2, r7, #1
 800357a:	237d      	movs	r3, #125	; 0x7d
 800357c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003580:	55e3      	strb	r3, [r4, r7]
 8003582:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003586:	686a      	ldr	r2, [r5, #4]
 8003588:	9905      	ldr	r1, [sp, #20]
 800358a:	f7ff bbfe 	b.w	8002d8a <d_print_comp+0x1e6>
 800358e:	68aa      	ldr	r2, [r5, #8]
 8003590:	b11a      	cbz	r2, 800359a <d_print_comp+0x9f6>
 8003592:	4631      	mov	r1, r6
 8003594:	4620      	mov	r0, r4
 8003596:	f7ff fb05 	bl	8002ba4 <d_print_comp>
 800359a:	68eb      	ldr	r3, [r5, #12]
 800359c:	2b00      	cmp	r3, #0
 800359e:	f001 853d 	beq.w	800501c <d_print_comp+0x2478>
 80035a2:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80035a6:	2ffd      	cmp	r7, #253	; 0xfd
 80035a8:	d912      	bls.n	80035d0 <d_print_comp+0xa2c>
 80035aa:	f04f 0800 	mov.w	r8, #0
 80035ae:	f804 8007 	strb.w	r8, [r4, r7]
 80035b2:	4639      	mov	r1, r7
 80035b4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80035b8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80035bc:	4620      	mov	r0, r4
 80035be:	4798      	blx	r3
 80035c0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80035c4:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 80035c8:	3301      	adds	r3, #1
 80035ca:	4647      	mov	r7, r8
 80035cc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80035d0:	f8df 8188 	ldr.w	r8, [pc, #392]	; 800375c <d_print_comp+0xbb8>
 80035d4:	f04f 0a00 	mov.w	sl, #0
 80035d8:	f108 0b02 	add.w	fp, r8, #2
 80035dc:	e016      	b.n	800360c <d_print_comp+0xa68>
 80035de:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80035e2:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 80035e6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80035ea:	4798      	blx	r3
 80035ec:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80035f0:	3301      	adds	r3, #1
 80035f2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80035f6:	2701      	movs	r7, #1
 80035f8:	2300      	movs	r3, #0
 80035fa:	45c3      	cmp	fp, r8
 80035fc:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 8003600:	f804 9003 	strb.w	r9, [r4, r3]
 8003604:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 8003608:	f001 80cf 	beq.w	80047aa <d_print_comp+0x1c06>
 800360c:	2fff      	cmp	r7, #255	; 0xff
 800360e:	4639      	mov	r1, r7
 8003610:	4620      	mov	r0, r4
 8003612:	f818 9b01 	ldrb.w	r9, [r8], #1
 8003616:	d0e2      	beq.n	80035de <d_print_comp+0xa3a>
 8003618:	463b      	mov	r3, r7
 800361a:	3701      	adds	r7, #1
 800361c:	e7ed      	b.n	80035fa <d_print_comp+0xa56>
 800361e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003622:	2b00      	cmp	r3, #0
 8003624:	f041 84a0 	bne.w	8004f68 <d_print_comp+0x23c4>
 8003628:	68aa      	ldr	r2, [r5, #8]
 800362a:	4b4a      	ldr	r3, [pc, #296]	; (8003754 <d_print_comp+0xbb0>)
 800362c:	6891      	ldr	r1, [r2, #8]
 800362e:	4299      	cmp	r1, r3
 8003630:	d020      	beq.n	8003674 <d_print_comp+0xad0>
 8003632:	4631      	mov	r1, r6
 8003634:	4620      	mov	r0, r4
 8003636:	f7ff fab5 	bl	8002ba4 <d_print_comp>
 800363a:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800363e:	2fff      	cmp	r7, #255	; 0xff
 8003640:	d111      	bne.n	8003666 <d_print_comp+0xac2>
 8003642:	2600      	movs	r6, #0
 8003644:	4639      	mov	r1, r7
 8003646:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800364a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800364e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003652:	4620      	mov	r0, r4
 8003654:	4798      	blx	r3
 8003656:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800365a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800365e:	3301      	adds	r3, #1
 8003660:	4637      	mov	r7, r6
 8003662:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003666:	2320      	movs	r3, #32
 8003668:	1c7a      	adds	r2, r7, #1
 800366a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800366e:	55e3      	strb	r3, [r4, r7]
 8003670:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003674:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
 8003678:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800367c:	2a00      	cmp	r2, #0
 800367e:	f001 80a6 	beq.w	80047ce <d_print_comp+0x1c2a>
 8003682:	4e35      	ldr	r6, [pc, #212]	; (8003758 <d_print_comp+0xbb4>)
 8003684:	f04f 0800 	mov.w	r8, #0
 8003688:	f106 0906 	add.w	r9, r6, #6
 800368c:	e015      	b.n	80036ba <d_print_comp+0xb16>
 800368e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003692:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003696:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800369a:	4798      	blx	r3
 800369c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80036a0:	3301      	adds	r3, #1
 80036a2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80036a6:	2200      	movs	r2, #0
 80036a8:	2301      	movs	r3, #1
 80036aa:	45b1      	cmp	r9, r6
 80036ac:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80036b0:	54a7      	strb	r7, [r4, r2]
 80036b2:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80036b6:	f001 8183 	beq.w	80049c0 <d_print_comp+0x1e1c>
 80036ba:	2bff      	cmp	r3, #255	; 0xff
 80036bc:	4619      	mov	r1, r3
 80036be:	4620      	mov	r0, r4
 80036c0:	f816 7b01 	ldrb.w	r7, [r6], #1
 80036c4:	d0e3      	beq.n	800368e <d_print_comp+0xaea>
 80036c6:	461a      	mov	r2, r3
 80036c8:	3301      	adds	r3, #1
 80036ca:	e7ee      	b.n	80036aa <d_print_comp+0xb06>
 80036cc:	ab18      	add	r3, sp, #96	; 0x60
 80036ce:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
 80036d2:	f843 2d40 	str.w	r2, [r3, #-64]!
 80036d6:	2000      	movs	r0, #0
 80036d8:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 80036dc:	900a      	str	r0, [sp, #40]	; 0x28
 80036de:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80036e2:	68ea      	ldr	r2, [r5, #12]
 80036e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80036e6:	4631      	mov	r1, r6
 80036e8:	4620      	mov	r0, r4
 80036ea:	9509      	str	r5, [sp, #36]	; 0x24
 80036ec:	f7ff fa5a 	bl	8002ba4 <d_print_comp>
 80036f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80036f2:	b923      	cbnz	r3, 80036fe <d_print_comp+0xb5a>
 80036f4:	4631      	mov	r1, r6
 80036f6:	462a      	mov	r2, r5
 80036f8:	4620      	mov	r0, r4
 80036fa:	f002 f8e9 	bl	80058d0 <d_print_mod>
 80036fe:	9b08      	ldr	r3, [sp, #32]
 8003700:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003704:	9905      	ldr	r1, [sp, #20]
 8003706:	686a      	ldr	r2, [r5, #4]
 8003708:	f7ff bb3f 	b.w	8002d8a <d_print_comp+0x1e6>
 800370c:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 8003710:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 8003714:	f849 cd40 	str.w	ip, [r9, #-64]!
 8003718:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 800371c:	f8cd c004 	str.w	ip, [sp, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	4667      	mov	r7, ip
 8003724:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 8003728:	9509      	str	r5, [sp, #36]	; 0x24
 800372a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800372e:	2f00      	cmp	r7, #0
 8003730:	f001 852f 	beq.w	8005192 <d_print_comp+0x25ee>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	3b19      	subs	r3, #25
 800373a:	2b02      	cmp	r3, #2
 800373c:	f201 8529 	bhi.w	8005192 <d_print_comp+0x25ee>
 8003740:	4623      	mov	r3, r4
 8003742:	f04f 0801 	mov.w	r8, #1
 8003746:	464c      	mov	r4, r9
 8003748:	469c      	mov	ip, r3
 800374a:	e00e      	b.n	800376a <d_print_comp+0xbc6>
 800374c:	0803500b 	.word	0x0803500b
 8003750:	08034fff 	.word	0x08034fff
 8003754:	080303ac 	.word	0x080303ac
 8003758:	08034fec 	.word	0x08034fec
 800375c:	08034ffc 	.word	0x08034ffc
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	3b19      	subs	r3, #25
 8003766:	2b02      	cmp	r3, #2
 8003768:	d81d      	bhi.n	80037a6 <d_print_comp+0xc02>
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	ea4f 1e08 	mov.w	lr, r8, lsl #4
 8003770:	aa18      	add	r2, sp, #96	; 0x60
 8003772:	eb02 0b0e 	add.w	fp, r2, lr
 8003776:	b99b      	cbnz	r3, 80037a0 <d_print_comp+0xbfc>
 8003778:	f1b8 0f03 	cmp.w	r8, #3
 800377c:	f201 8517 	bhi.w	80051ae <d_print_comp+0x260a>
 8003780:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8003784:	f1ab 0a40 	sub.w	sl, fp, #64	; 0x40
 8003788:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
 800378c:	f84b 4c40 	str.w	r4, [fp, #-64]
 8003790:	2301      	movs	r3, #1
 8003792:	eb09 040e 	add.w	r4, r9, lr
 8003796:	f8cc 4114 	str.w	r4, [ip, #276]	; 0x114
 800379a:	f108 0801 	add.w	r8, r8, #1
 800379e:	60bb      	str	r3, [r7, #8]
 80037a0:	683f      	ldr	r7, [r7, #0]
 80037a2:	2f00      	cmp	r7, #0
 80037a4:	d1dc      	bne.n	8003760 <d_print_comp+0xbbc>
 80037a6:	68ea      	ldr	r2, [r5, #12]
 80037a8:	4631      	mov	r1, r6
 80037aa:	4660      	mov	r0, ip
 80037ac:	4664      	mov	r4, ip
 80037ae:	f7ff f9f9 	bl	8002ba4 <d_print_comp>
 80037b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037b4:	9a01      	ldr	r2, [sp, #4]
 80037b6:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 80037ba:	b9bb      	cbnz	r3, 80037ec <d_print_comp+0xc48>
 80037bc:	f1b8 0f01 	cmp.w	r8, #1
 80037c0:	d00c      	beq.n	80037dc <d_print_comp+0xc38>
 80037c2:	eb09 1808 	add.w	r8, r9, r8, lsl #4
 80037c6:	af0c      	add	r7, sp, #48	; 0x30
 80037c8:	f858 2c0c 	ldr.w	r2, [r8, #-12]
 80037cc:	4631      	mov	r1, r6
 80037ce:	f1a8 0810 	sub.w	r8, r8, #16
 80037d2:	4620      	mov	r0, r4
 80037d4:	f002 f87c 	bl	80058d0 <d_print_mod>
 80037d8:	4547      	cmp	r7, r8
 80037da:	d1f5      	bne.n	80037c8 <d_print_comp+0xc24>
 80037dc:	4631      	mov	r1, r6
 80037de:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80037e2:	f105 0208 	add.w	r2, r5, #8
 80037e6:	4620      	mov	r0, r4
 80037e8:	f002 fdca 	bl	8006380 <d_print_array_type.isra.14>
 80037ec:	9905      	ldr	r1, [sp, #20]
 80037ee:	686a      	ldr	r2, [r5, #4]
 80037f0:	f7ff bacb 	b.w	8002d8a <d_print_comp+0x1e6>
 80037f4:	06b2      	lsls	r2, r6, #26
 80037f6:	f026 0860 	bic.w	r8, r6, #96	; 0x60
 80037fa:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80037fe:	f101 825a 	bmi.w	8004cb6 <d_print_comp+0x2112>
 8003802:	68aa      	ldr	r2, [r5, #8]
 8003804:	b11a      	cbz	r2, 800380e <d_print_comp+0xc6a>
 8003806:	f016 0640 	ands.w	r6, r6, #64	; 0x40
 800380a:	f001 85c3 	beq.w	8005394 <d_print_comp+0x27f0>
 800380e:	4641      	mov	r1, r8
 8003810:	f105 020c 	add.w	r2, r5, #12
 8003814:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8003818:	4620      	mov	r0, r4
 800381a:	f002 fb87 	bl	8005f2c <d_print_function_type.isra.15>
 800381e:	9905      	ldr	r1, [sp, #20]
 8003820:	686a      	ldr	r2, [r5, #4]
 8003822:	f7ff bab2 	b.w	8002d8a <d_print_comp+0x1e6>
 8003826:	4fcb      	ldr	r7, [pc, #812]	; (8003b54 <d_print_comp+0xfb0>)
 8003828:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800382c:	f107 0815 	add.w	r8, r7, #21
 8003830:	f04f 0900 	mov.w	r9, #0
 8003834:	e016      	b.n	8003864 <d_print_comp+0xcc0>
 8003836:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800383a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800383e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003842:	4798      	blx	r3
 8003844:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003848:	3301      	adds	r3, #1
 800384a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800384e:	2200      	movs	r2, #0
 8003850:	2301      	movs	r3, #1
 8003852:	45b8      	cmp	r8, r7
 8003854:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003858:	f804 a002 	strb.w	sl, [r4, r2]
 800385c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003860:	f000 8789 	beq.w	8004776 <d_print_comp+0x1bd2>
 8003864:	2bff      	cmp	r3, #255	; 0xff
 8003866:	4619      	mov	r1, r3
 8003868:	4620      	mov	r0, r4
 800386a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 800386e:	d0e2      	beq.n	8003836 <d_print_comp+0xc92>
 8003870:	461a      	mov	r2, r3
 8003872:	3301      	adds	r3, #1
 8003874:	e7ed      	b.n	8003852 <d_print_comp+0xcae>
 8003876:	4fb8      	ldr	r7, [pc, #736]	; (8003b58 <d_print_comp+0xfb4>)
 8003878:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800387c:	f107 0810 	add.w	r8, r7, #16
 8003880:	f04f 0900 	mov.w	r9, #0
 8003884:	e016      	b.n	80038b4 <d_print_comp+0xd10>
 8003886:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800388a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800388e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003892:	4798      	blx	r3
 8003894:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003898:	3301      	adds	r3, #1
 800389a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800389e:	2200      	movs	r2, #0
 80038a0:	2301      	movs	r3, #1
 80038a2:	45b8      	cmp	r8, r7
 80038a4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80038a8:	f804 a002 	strb.w	sl, [r4, r2]
 80038ac:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80038b0:	f000 876a 	beq.w	8004788 <d_print_comp+0x1be4>
 80038b4:	2bff      	cmp	r3, #255	; 0xff
 80038b6:	4619      	mov	r1, r3
 80038b8:	4620      	mov	r0, r4
 80038ba:	f817 af01 	ldrb.w	sl, [r7, #1]!
 80038be:	d0e2      	beq.n	8003886 <d_print_comp+0xce2>
 80038c0:	461a      	mov	r2, r3
 80038c2:	3301      	adds	r3, #1
 80038c4:	e7ed      	b.n	80038a2 <d_print_comp+0xcfe>
 80038c6:	4fa5      	ldr	r7, [pc, #660]	; (8003b5c <d_print_comp+0xfb8>)
 80038c8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80038cc:	f107 0812 	add.w	r8, r7, #18
 80038d0:	f04f 0900 	mov.w	r9, #0
 80038d4:	e016      	b.n	8003904 <d_print_comp+0xd60>
 80038d6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80038da:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80038de:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80038e2:	4798      	blx	r3
 80038e4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80038e8:	3301      	adds	r3, #1
 80038ea:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80038ee:	2200      	movs	r2, #0
 80038f0:	2301      	movs	r3, #1
 80038f2:	45b8      	cmp	r8, r7
 80038f4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80038f8:	f804 a002 	strb.w	sl, [r4, r2]
 80038fc:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003900:	f000 8727 	beq.w	8004752 <d_print_comp+0x1bae>
 8003904:	2bff      	cmp	r3, #255	; 0xff
 8003906:	4619      	mov	r1, r3
 8003908:	4620      	mov	r0, r4
 800390a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 800390e:	d0e2      	beq.n	80038d6 <d_print_comp+0xd32>
 8003910:	461a      	mov	r2, r3
 8003912:	3301      	adds	r3, #1
 8003914:	e7ed      	b.n	80038f2 <d_print_comp+0xd4e>
 8003916:	4f92      	ldr	r7, [pc, #584]	; (8003b60 <d_print_comp+0xfbc>)
 8003918:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800391c:	f107 080d 	add.w	r8, r7, #13
 8003920:	f04f 0900 	mov.w	r9, #0
 8003924:	e016      	b.n	8003954 <d_print_comp+0xdb0>
 8003926:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800392a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800392e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003932:	4798      	blx	r3
 8003934:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003938:	3301      	adds	r3, #1
 800393a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800393e:	2200      	movs	r2, #0
 8003940:	2301      	movs	r3, #1
 8003942:	45b8      	cmp	r8, r7
 8003944:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003948:	f804 a002 	strb.w	sl, [r4, r2]
 800394c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003950:	f000 8708 	beq.w	8004764 <d_print_comp+0x1bc0>
 8003954:	2bff      	cmp	r3, #255	; 0xff
 8003956:	4619      	mov	r1, r3
 8003958:	4620      	mov	r0, r4
 800395a:	f817 ab01 	ldrb.w	sl, [r7], #1
 800395e:	d0e2      	beq.n	8003926 <d_print_comp+0xd82>
 8003960:	461a      	mov	r2, r3
 8003962:	3301      	adds	r3, #1
 8003964:	e7ed      	b.n	8003942 <d_print_comp+0xd9e>
 8003966:	4f7f      	ldr	r7, [pc, #508]	; (8003b64 <d_print_comp+0xfc0>)
 8003968:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800396c:	f107 0818 	add.w	r8, r7, #24
 8003970:	f04f 0900 	mov.w	r9, #0
 8003974:	e016      	b.n	80039a4 <d_print_comp+0xe00>
 8003976:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800397a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800397e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003982:	4798      	blx	r3
 8003984:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003988:	3301      	adds	r3, #1
 800398a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800398e:	2200      	movs	r2, #0
 8003990:	2301      	movs	r3, #1
 8003992:	45b8      	cmp	r8, r7
 8003994:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003998:	f804 a002 	strb.w	sl, [r4, r2]
 800399c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80039a0:	f000 8699 	beq.w	80046d6 <d_print_comp+0x1b32>
 80039a4:	2bff      	cmp	r3, #255	; 0xff
 80039a6:	4619      	mov	r1, r3
 80039a8:	4620      	mov	r0, r4
 80039aa:	f817 af01 	ldrb.w	sl, [r7, #1]!
 80039ae:	d0e2      	beq.n	8003976 <d_print_comp+0xdd2>
 80039b0:	461a      	mov	r2, r3
 80039b2:	3301      	adds	r3, #1
 80039b4:	e7ed      	b.n	8003992 <d_print_comp+0xdee>
 80039b6:	4f6c      	ldr	r7, [pc, #432]	; (8003b68 <d_print_comp+0xfc4>)
 80039b8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80039bc:	f107 0808 	add.w	r8, r7, #8
 80039c0:	f04f 0900 	mov.w	r9, #0
 80039c4:	e016      	b.n	80039f4 <d_print_comp+0xe50>
 80039c6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80039ca:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80039ce:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80039d2:	4798      	blx	r3
 80039d4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80039d8:	3301      	adds	r3, #1
 80039da:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80039de:	2200      	movs	r2, #0
 80039e0:	2301      	movs	r3, #1
 80039e2:	45b8      	cmp	r8, r7
 80039e4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80039e8:	f804 a002 	strb.w	sl, [r4, r2]
 80039ec:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80039f0:	f000 86a6 	beq.w	8004740 <d_print_comp+0x1b9c>
 80039f4:	2bff      	cmp	r3, #255	; 0xff
 80039f6:	4619      	mov	r1, r3
 80039f8:	4620      	mov	r0, r4
 80039fa:	f817 af01 	ldrb.w	sl, [r7, #1]!
 80039fe:	d0e2      	beq.n	80039c6 <d_print_comp+0xe22>
 8003a00:	461a      	mov	r2, r3
 8003a02:	3301      	adds	r3, #1
 8003a04:	e7ed      	b.n	80039e2 <d_print_comp+0xe3e>
 8003a06:	4f59      	ldr	r7, [pc, #356]	; (8003b6c <d_print_comp+0xfc8>)
 8003a08:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003a0c:	f107 080b 	add.w	r8, r7, #11
 8003a10:	f04f 0900 	mov.w	r9, #0
 8003a14:	e016      	b.n	8003a44 <d_print_comp+0xea0>
 8003a16:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003a1a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003a1e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003a22:	4798      	blx	r3
 8003a24:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003a28:	3301      	adds	r3, #1
 8003a2a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003a2e:	2200      	movs	r2, #0
 8003a30:	2301      	movs	r3, #1
 8003a32:	45b8      	cmp	r8, r7
 8003a34:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003a38:	f804 a002 	strb.w	sl, [r4, r2]
 8003a3c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003a40:	f000 85cc 	beq.w	80045dc <d_print_comp+0x1a38>
 8003a44:	2bff      	cmp	r3, #255	; 0xff
 8003a46:	4619      	mov	r1, r3
 8003a48:	4620      	mov	r0, r4
 8003a4a:	f817 ab01 	ldrb.w	sl, [r7], #1
 8003a4e:	d0e2      	beq.n	8003a16 <d_print_comp+0xe72>
 8003a50:	461a      	mov	r2, r3
 8003a52:	3301      	adds	r3, #1
 8003a54:	e7ed      	b.n	8003a32 <d_print_comp+0xe8e>
 8003a56:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003a5a:	2fff      	cmp	r7, #255	; 0xff
 8003a5c:	d112      	bne.n	8003a84 <d_print_comp+0xee0>
 8003a5e:	f04f 0800 	mov.w	r8, #0
 8003a62:	4639      	mov	r1, r7
 8003a64:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003a68:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003a6c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003a70:	4620      	mov	r0, r4
 8003a72:	4798      	blx	r3
 8003a74:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003a78:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	4647      	mov	r7, r8
 8003a80:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003a84:	237e      	movs	r3, #126	; 0x7e
 8003a86:	1c7a      	adds	r2, r7, #1
 8003a88:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003a8c:	55e3      	strb	r3, [r4, r7]
 8003a8e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003a92:	4631      	mov	r1, r6
 8003a94:	68ea      	ldr	r2, [r5, #12]
 8003a96:	4620      	mov	r0, r4
 8003a98:	f7ff f884 	bl	8002ba4 <d_print_comp>
 8003a9c:	9905      	ldr	r1, [sp, #20]
 8003a9e:	686a      	ldr	r2, [r5, #4]
 8003aa0:	f7ff b973 	b.w	8002d8a <d_print_comp+0x1e6>
 8003aa4:	4631      	mov	r1, r6
 8003aa6:	68ea      	ldr	r2, [r5, #12]
 8003aa8:	4620      	mov	r0, r4
 8003aaa:	f7ff f87b 	bl	8002ba4 <d_print_comp>
 8003aae:	9905      	ldr	r1, [sp, #20]
 8003ab0:	686a      	ldr	r2, [r5, #4]
 8003ab2:	f7ff b96a 	b.w	8002d8a <d_print_comp+0x1e6>
 8003ab6:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8003aba:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003abe:	f1b8 0f00 	cmp.w	r8, #0
 8003ac2:	f000 878b 	beq.w	80049dc <d_print_comp+0x1e38>
 8003ac6:	4e2a      	ldr	r6, [pc, #168]	; (8003b70 <d_print_comp+0xfcc>)
 8003ac8:	f04f 0900 	mov.w	r9, #0
 8003acc:	f106 0a06 	add.w	sl, r6, #6
 8003ad0:	e015      	b.n	8003afe <d_print_comp+0xf5a>
 8003ad2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003ad6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003ada:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003ade:	4798      	blx	r3
 8003ae0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003aea:	2200      	movs	r2, #0
 8003aec:	2301      	movs	r3, #1
 8003aee:	45b2      	cmp	sl, r6
 8003af0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003af4:	54a7      	strb	r7, [r4, r2]
 8003af6:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003afa:	f000 868f 	beq.w	800481c <d_print_comp+0x1c78>
 8003afe:	2bff      	cmp	r3, #255	; 0xff
 8003b00:	4619      	mov	r1, r3
 8003b02:	4620      	mov	r0, r4
 8003b04:	f816 7b01 	ldrb.w	r7, [r6], #1
 8003b08:	d0e3      	beq.n	8003ad2 <d_print_comp+0xf2e>
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	e7ee      	b.n	8003aee <d_print_comp+0xf4a>
 8003b10:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f040 86d1 	bne.w	80048bc <d_print_comp+0x1d18>
 8003b1a:	f105 0108 	add.w	r1, r5, #8
 8003b1e:	4620      	mov	r0, r4
 8003b20:	f7fc fe4a 	bl	80007b8 <d_lookup_template_argument.isra.10>
 8003b24:	4602      	mov	r2, r0
 8003b26:	2800      	cmp	r0, #0
 8003b28:	f001 8271 	beq.w	800500e <d_print_comp+0x246a>
 8003b2c:	7803      	ldrb	r3, [r0, #0]
 8003b2e:	2b2f      	cmp	r3, #47	; 0x2f
 8003b30:	f001 8262 	beq.w	8004ff8 <d_print_comp+0x2454>
 8003b34:	f8d4 7110 	ldr.w	r7, [r4, #272]	; 0x110
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8003b3e:	4631      	mov	r1, r6
 8003b40:	4620      	mov	r0, r4
 8003b42:	f7ff f82f 	bl	8002ba4 <d_print_comp>
 8003b46:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
 8003b4a:	9905      	ldr	r1, [sp, #20]
 8003b4c:	686a      	ldr	r2, [r5, #4]
 8003b4e:	f7ff b91c 	b.w	8002d8a <d_print_comp+0x1e6>
 8003b52:	bf00      	nop
 8003b54:	08034f0f 	.word	0x08034f0f
 8003b58:	08034efb 	.word	0x08034efb
 8003b5c:	08034ee7 	.word	0x08034ee7
 8003b60:	08034ed8 	.word	0x08034ed8
 8003b64:	08034eb3 	.word	0x08034eb3
 8003b68:	08034ea7 	.word	0x08034ea7
 8003b6c:	08034e9c 	.word	0x08034e9c
 8003b70:	0803507c 	.word	0x0803507c
 8003b74:	2300      	movs	r3, #0
 8003b76:	0771      	lsls	r1, r6, #29
 8003b78:	f8d4 9114 	ldr.w	r9, [r4, #276]	; 0x114
 8003b7c:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144
 8003b80:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003b84:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
 8003b88:	68af      	ldr	r7, [r5, #8]
 8003b8a:	d505      	bpl.n	8003b98 <d_print_comp+0xff4>
 8003b8c:	783b      	ldrb	r3, [r7, #0]
 8003b8e:	b91b      	cbnz	r3, 8003b98 <d_print_comp+0xff4>
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	2a06      	cmp	r2, #6
 8003b94:	f001 8433 	beq.w	80053fe <d_print_comp+0x285a>
 8003b98:	463a      	mov	r2, r7
 8003b9a:	4631      	mov	r1, r6
 8003b9c:	4620      	mov	r0, r4
 8003b9e:	f7ff f801 	bl	8002ba4 <d_print_comp>
 8003ba2:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8003ba6:	2b3c      	cmp	r3, #60	; 0x3c
 8003ba8:	f001 8206 	beq.w	8004fb8 <d_print_comp+0x2414>
 8003bac:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003bb0:	2fff      	cmp	r7, #255	; 0xff
 8003bb2:	d112      	bne.n	8003bda <d_print_comp+0x1036>
 8003bb4:	f04f 0a00 	mov.w	sl, #0
 8003bb8:	4639      	mov	r1, r7
 8003bba:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003bbe:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8003bc2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003bc6:	4620      	mov	r0, r4
 8003bc8:	4798      	blx	r3
 8003bca:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003bce:	f8c4 a100 	str.w	sl, [r4, #256]	; 0x100
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	4657      	mov	r7, sl
 8003bd6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003bda:	233c      	movs	r3, #60	; 0x3c
 8003bdc:	1c7a      	adds	r2, r7, #1
 8003bde:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003be2:	55e3      	strb	r3, [r4, r7]
 8003be4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003be8:	4631      	mov	r1, r6
 8003bea:	68ea      	ldr	r2, [r5, #12]
 8003bec:	4620      	mov	r0, r4
 8003bee:	f7fe ffd9 	bl	8002ba4 <d_print_comp>
 8003bf2:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8003bf6:	2b3e      	cmp	r3, #62	; 0x3e
 8003bf8:	f001 806f 	beq.w	8004cda <d_print_comp+0x2136>
 8003bfc:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003c00:	2fff      	cmp	r7, #255	; 0xff
 8003c02:	d111      	bne.n	8003c28 <d_print_comp+0x1084>
 8003c04:	2600      	movs	r6, #0
 8003c06:	4639      	mov	r1, r7
 8003c08:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003c0c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8003c10:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003c14:	4620      	mov	r0, r4
 8003c16:	4798      	blx	r3
 8003c18:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003c1c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8003c20:	3301      	adds	r3, #1
 8003c22:	4637      	mov	r7, r6
 8003c24:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003c28:	233e      	movs	r3, #62	; 0x3e
 8003c2a:	1c7a      	adds	r2, r7, #1
 8003c2c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003c30:	55e3      	strb	r3, [r4, r7]
 8003c32:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003c36:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 8003c3a:	f8c4 8144 	str.w	r8, [r4, #324]	; 0x144
 8003c3e:	9905      	ldr	r1, [sp, #20]
 8003c40:	686a      	ldr	r2, [r5, #4]
 8003c42:	f7ff b8a2 	b.w	8002d8a <d_print_comp+0x1e6>
 8003c46:	4fda      	ldr	r7, [pc, #872]	; (8003fb0 <d_print_comp+0x140c>)
 8003c48:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003c4c:	f107 0811 	add.w	r8, r7, #17
 8003c50:	f04f 0900 	mov.w	r9, #0
 8003c54:	e016      	b.n	8003c84 <d_print_comp+0x10e0>
 8003c56:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003c5a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003c5e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003c62:	4798      	blx	r3
 8003c64:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003c68:	3301      	adds	r3, #1
 8003c6a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003c6e:	2200      	movs	r2, #0
 8003c70:	2301      	movs	r3, #1
 8003c72:	45b8      	cmp	r8, r7
 8003c74:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003c78:	f804 a002 	strb.w	sl, [r4, r2]
 8003c7c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003c80:	f000 84eb 	beq.w	800465a <d_print_comp+0x1ab6>
 8003c84:	2bff      	cmp	r3, #255	; 0xff
 8003c86:	4619      	mov	r1, r3
 8003c88:	4620      	mov	r0, r4
 8003c8a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003c8e:	d0e2      	beq.n	8003c56 <d_print_comp+0x10b2>
 8003c90:	461a      	mov	r2, r3
 8003c92:	3301      	adds	r3, #1
 8003c94:	e7ed      	b.n	8003c72 <d_print_comp+0x10ce>
 8003c96:	4fc7      	ldr	r7, [pc, #796]	; (8003fb4 <d_print_comp+0x1410>)
 8003c98:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003c9c:	f107 0815 	add.w	r8, r7, #21
 8003ca0:	f04f 0900 	mov.w	r9, #0
 8003ca4:	e016      	b.n	8003cd4 <d_print_comp+0x1130>
 8003ca6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003caa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003cae:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003cb2:	4798      	blx	r3
 8003cb4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003cb8:	3301      	adds	r3, #1
 8003cba:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	45b8      	cmp	r8, r7
 8003cc4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003cc8:	f804 a002 	strb.w	sl, [r4, r2]
 8003ccc:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003cd0:	f000 84cc 	beq.w	800466c <d_print_comp+0x1ac8>
 8003cd4:	2bff      	cmp	r3, #255	; 0xff
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	4620      	mov	r0, r4
 8003cda:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003cde:	d0e2      	beq.n	8003ca6 <d_print_comp+0x1102>
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	e7ed      	b.n	8003cc2 <d_print_comp+0x111e>
 8003ce6:	4fb4      	ldr	r7, [pc, #720]	; (8003fb8 <d_print_comp+0x1414>)
 8003ce8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003cec:	f107 0819 	add.w	r8, r7, #25
 8003cf0:	f04f 0900 	mov.w	r9, #0
 8003cf4:	e016      	b.n	8003d24 <d_print_comp+0x1180>
 8003cf6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003cfa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003cfe:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003d02:	4798      	blx	r3
 8003d04:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003d08:	3301      	adds	r3, #1
 8003d0a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003d0e:	2200      	movs	r2, #0
 8003d10:	2301      	movs	r3, #1
 8003d12:	45b8      	cmp	r8, r7
 8003d14:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003d18:	f804 a002 	strb.w	sl, [r4, r2]
 8003d1c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003d20:	f000 8489 	beq.w	8004636 <d_print_comp+0x1a92>
 8003d24:	2bff      	cmp	r3, #255	; 0xff
 8003d26:	4619      	mov	r1, r3
 8003d28:	4620      	mov	r0, r4
 8003d2a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003d2e:	d0e2      	beq.n	8003cf6 <d_print_comp+0x1152>
 8003d30:	461a      	mov	r2, r3
 8003d32:	3301      	adds	r3, #1
 8003d34:	e7ed      	b.n	8003d12 <d_print_comp+0x116e>
 8003d36:	4fa1      	ldr	r7, [pc, #644]	; (8003fbc <d_print_comp+0x1418>)
 8003d38:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003d3c:	f107 0816 	add.w	r8, r7, #22
 8003d40:	f04f 0900 	mov.w	r9, #0
 8003d44:	e016      	b.n	8003d74 <d_print_comp+0x11d0>
 8003d46:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003d4a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003d4e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003d52:	4798      	blx	r3
 8003d54:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003d58:	3301      	adds	r3, #1
 8003d5a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003d5e:	2200      	movs	r2, #0
 8003d60:	2301      	movs	r3, #1
 8003d62:	45b8      	cmp	r8, r7
 8003d64:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003d68:	f804 a002 	strb.w	sl, [r4, r2]
 8003d6c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003d70:	f000 846a 	beq.w	8004648 <d_print_comp+0x1aa4>
 8003d74:	2bff      	cmp	r3, #255	; 0xff
 8003d76:	4619      	mov	r1, r3
 8003d78:	4620      	mov	r0, r4
 8003d7a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003d7e:	d0e2      	beq.n	8003d46 <d_print_comp+0x11a2>
 8003d80:	461a      	mov	r2, r3
 8003d82:	3301      	adds	r3, #1
 8003d84:	e7ed      	b.n	8003d62 <d_print_comp+0x11be>
 8003d86:	4f8e      	ldr	r7, [pc, #568]	; (8003fc0 <d_print_comp+0x141c>)
 8003d88:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003d8c:	f107 0813 	add.w	r8, r7, #19
 8003d90:	f04f 0900 	mov.w	r9, #0
 8003d94:	e016      	b.n	8003dc4 <d_print_comp+0x1220>
 8003d96:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003d9a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003d9e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003da2:	4798      	blx	r3
 8003da4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003da8:	3301      	adds	r3, #1
 8003daa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003dae:	2200      	movs	r2, #0
 8003db0:	2301      	movs	r3, #1
 8003db2:	45b8      	cmp	r8, r7
 8003db4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003db8:	f804 a002 	strb.w	sl, [r4, r2]
 8003dbc:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003dc0:	f000 8427 	beq.w	8004612 <d_print_comp+0x1a6e>
 8003dc4:	2bff      	cmp	r3, #255	; 0xff
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	4620      	mov	r0, r4
 8003dca:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003dce:	d0e2      	beq.n	8003d96 <d_print_comp+0x11f2>
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	e7ed      	b.n	8003db2 <d_print_comp+0x120e>
 8003dd6:	4f7b      	ldr	r7, [pc, #492]	; (8003fc4 <d_print_comp+0x1420>)
 8003dd8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003ddc:	f107 080f 	add.w	r8, r7, #15
 8003de0:	f04f 0900 	mov.w	r9, #0
 8003de4:	e016      	b.n	8003e14 <d_print_comp+0x1270>
 8003de6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003dea:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003dee:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003df2:	4798      	blx	r3
 8003df4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003df8:	3301      	adds	r3, #1
 8003dfa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003dfe:	2200      	movs	r2, #0
 8003e00:	2301      	movs	r3, #1
 8003e02:	45b8      	cmp	r8, r7
 8003e04:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003e08:	f804 a002 	strb.w	sl, [r4, r2]
 8003e0c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003e10:	f000 8408 	beq.w	8004624 <d_print_comp+0x1a80>
 8003e14:	2bff      	cmp	r3, #255	; 0xff
 8003e16:	4619      	mov	r1, r3
 8003e18:	4620      	mov	r0, r4
 8003e1a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003e1e:	d0e2      	beq.n	8003de6 <d_print_comp+0x1242>
 8003e20:	461a      	mov	r2, r3
 8003e22:	3301      	adds	r3, #1
 8003e24:	e7ed      	b.n	8003e02 <d_print_comp+0x125e>
 8003e26:	4f68      	ldr	r7, [pc, #416]	; (8003fc8 <d_print_comp+0x1424>)
 8003e28:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003e2c:	f107 081a 	add.w	r8, r7, #26
 8003e30:	f04f 0900 	mov.w	r9, #0
 8003e34:	e016      	b.n	8003e64 <d_print_comp+0x12c0>
 8003e36:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003e3a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003e3e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003e42:	4798      	blx	r3
 8003e44:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003e48:	3301      	adds	r3, #1
 8003e4a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003e4e:	2200      	movs	r2, #0
 8003e50:	2301      	movs	r3, #1
 8003e52:	45b8      	cmp	r8, r7
 8003e54:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003e58:	f804 a002 	strb.w	sl, [r4, r2]
 8003e5c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003e60:	f000 83c5 	beq.w	80045ee <d_print_comp+0x1a4a>
 8003e64:	2bff      	cmp	r3, #255	; 0xff
 8003e66:	4619      	mov	r1, r3
 8003e68:	4620      	mov	r0, r4
 8003e6a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003e6e:	d0e2      	beq.n	8003e36 <d_print_comp+0x1292>
 8003e70:	461a      	mov	r2, r3
 8003e72:	3301      	adds	r3, #1
 8003e74:	e7ed      	b.n	8003e52 <d_print_comp+0x12ae>
 8003e76:	4f55      	ldr	r7, [pc, #340]	; (8003fcc <d_print_comp+0x1428>)
 8003e78:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003e7c:	f107 0811 	add.w	r8, r7, #17
 8003e80:	f04f 0900 	mov.w	r9, #0
 8003e84:	e016      	b.n	8003eb4 <d_print_comp+0x1310>
 8003e86:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003e8a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003e8e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003e92:	4798      	blx	r3
 8003e94:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003e98:	3301      	adds	r3, #1
 8003e9a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	45b8      	cmp	r8, r7
 8003ea4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003ea8:	f804 a002 	strb.w	sl, [r4, r2]
 8003eac:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003eb0:	f000 83a6 	beq.w	8004600 <d_print_comp+0x1a5c>
 8003eb4:	2bff      	cmp	r3, #255	; 0xff
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	4620      	mov	r0, r4
 8003eba:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003ebe:	d0e2      	beq.n	8003e86 <d_print_comp+0x12e2>
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	e7ed      	b.n	8003ea2 <d_print_comp+0x12fe>
 8003ec6:	f8d4 711c 	ldr.w	r7, [r4, #284]	; 0x11c
 8003eca:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8003ece:	2f00      	cmp	r7, #0
 8003ed0:	f040 85ae 	bne.w	8004a30 <d_print_comp+0x1e8c>
 8003ed4:	f899 2000 	ldrb.w	r2, [r9]
 8003ed8:	2a05      	cmp	r2, #5
 8003eda:	f001 8180 	beq.w	80051de <d_print_comp+0x263a>
 8003ede:	f899 3000 	ldrb.w	r3, [r9]
 8003ee2:	2b23      	cmp	r3, #35	; 0x23
 8003ee4:	f000 85a0 	beq.w	8004a28 <d_print_comp+0x1e84>
 8003ee8:	782a      	ldrb	r2, [r5, #0]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	f000 859c 	beq.w	8004a28 <d_print_comp+0x1e84>
 8003ef0:	2b24      	cmp	r3, #36	; 0x24
 8003ef2:	f001 8162 	beq.w	80051ba <d_print_comp+0x2616>
 8003ef6:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 8003efa:	46a9      	mov	r9, r5
 8003efc:	ab18      	add	r3, sp, #96	; 0x60
 8003efe:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
 8003f02:	f843 cd40 	str.w	ip, [r3, #-64]!
 8003f06:	2100      	movs	r1, #0
 8003f08:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 8003f0c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8003f10:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003f14:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8003f18:	e010      	b.n	8003f3c <d_print_comp+0x1398>
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	ab18      	add	r3, sp, #96	; 0x60
 8003f1e:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
 8003f22:	f843 1d40 	str.w	r1, [r3, #-64]!
 8003f26:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
 8003f2a:	9509      	str	r5, [sp, #36]	; 0x24
 8003f2c:	2000      	movs	r0, #0
 8003f2e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003f32:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003f36:	46a9      	mov	r9, r5
 8003f38:	2a00      	cmp	r2, #0
 8003f3a:	d0eb      	beq.n	8003f14 <d_print_comp+0x1370>
 8003f3c:	4631      	mov	r1, r6
 8003f3e:	4620      	mov	r0, r4
 8003f40:	f7fe fe30 	bl	8002ba4 <d_print_comp>
 8003f44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f46:	b923      	cbnz	r3, 8003f52 <d_print_comp+0x13ae>
 8003f48:	464a      	mov	r2, r9
 8003f4a:	4631      	mov	r1, r6
 8003f4c:	4620      	mov	r0, r4
 8003f4e:	f001 fcbf 	bl	80058d0 <d_print_mod>
 8003f52:	9b08      	ldr	r3, [sp, #32]
 8003f54:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003f58:	b10f      	cbz	r7, 8003f5e <d_print_comp+0x13ba>
 8003f5a:	f8c4 8110 	str.w	r8, [r4, #272]	; 0x110
 8003f5e:	9905      	ldr	r1, [sp, #20]
 8003f60:	686a      	ldr	r2, [r5, #4]
 8003f62:	f7fe bf12 	b.w	8002d8a <d_print_comp+0x1e6>
 8003f66:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 8003f6a:	4663      	mov	r3, ip
 8003f6c:	f1bc 0f00 	cmp.w	ip, #0
 8003f70:	d0c3      	beq.n	8003efa <d_print_comp+0x1356>
 8003f72:	6899      	ldr	r1, [r3, #8]
 8003f74:	b951      	cbnz	r1, 8003f8c <d_print_comp+0x13e8>
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	7812      	ldrb	r2, [r2, #0]
 8003f7a:	f1a2 0e19 	sub.w	lr, r2, #25
 8003f7e:	f1be 0f02 	cmp.w	lr, #2
 8003f82:	f201 80fc 	bhi.w	800517e <d_print_comp+0x25da>
 8003f86:	4290      	cmp	r0, r2
 8003f88:	f001 80f0 	beq.w	800516c <d_print_comp+0x25c8>
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1ef      	bne.n	8003f72 <d_print_comp+0x13ce>
 8003f92:	e7b2      	b.n	8003efa <d_print_comp+0x1356>
 8003f94:	e9d5 6702 	ldrd	r6, r7, [r5, #8]
 8003f98:	2f00      	cmp	r7, #0
 8003f9a:	f43e aef6 	beq.w	8002d8a <d_print_comp+0x1e6>
 8003f9e:	4437      	add	r7, r6
 8003fa0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003fa4:	3f01      	subs	r7, #1
 8003fa6:	3e01      	subs	r6, #1
 8003fa8:	f04f 0800 	mov.w	r8, #0
 8003fac:	e027      	b.n	8003ffe <d_print_comp+0x145a>
 8003fae:	bf00      	nop
 8003fb0:	08034fb3 	.word	0x08034fb3
 8003fb4:	08034f9b 	.word	0x08034f9b
 8003fb8:	08034f7f 	.word	0x08034f7f
 8003fbc:	08034f67 	.word	0x08034f67
 8003fc0:	08034f53 	.word	0x08034f53
 8003fc4:	08034f43 	.word	0x08034f43
 8003fc8:	08034f27 	.word	0x08034f27
 8003fcc:	08034f13 	.word	0x08034f13
 8003fd0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003fd4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003fd8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003fdc:	4798      	blx	r3
 8003fde:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003fe8:	2200      	movs	r2, #0
 8003fea:	2301      	movs	r3, #1
 8003fec:	42b7      	cmp	r7, r6
 8003fee:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003ff2:	f804 9002 	strb.w	r9, [r4, r2]
 8003ff6:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 8003ffa:	f000 83ce 	beq.w	800479a <d_print_comp+0x1bf6>
 8003ffe:	2bff      	cmp	r3, #255	; 0xff
 8004000:	4619      	mov	r1, r3
 8004002:	4620      	mov	r0, r4
 8004004:	f816 9f01 	ldrb.w	r9, [r6, #1]!
 8004008:	d0e2      	beq.n	8003fd0 <d_print_comp+0x142c>
 800400a:	461a      	mov	r2, r3
 800400c:	3301      	adds	r3, #1
 800400e:	e7ed      	b.n	8003fec <d_print_comp+0x1448>
 8004010:	4631      	mov	r1, r6
 8004012:	68aa      	ldr	r2, [r5, #8]
 8004014:	4620      	mov	r0, r4
 8004016:	f7fe fdc5 	bl	8002ba4 <d_print_comp>
 800401a:	9905      	ldr	r1, [sp, #20]
 800401c:	686a      	ldr	r2, [r5, #4]
 800401e:	f7fe beb4 	b.w	8002d8a <d_print_comp+0x1e6>
 8004022:	f016 0604 	ands.w	r6, r6, #4
 8004026:	68a8      	ldr	r0, [r5, #8]
 8004028:	f040 8505 	bne.w	8004a36 <d_print_comp+0x1e92>
 800402c:	e9d0 7300 	ldrd	r7, r3, [r0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	f43e aeaa 	beq.w	8002d8a <d_print_comp+0x1e6>
 8004036:	eb07 0803 	add.w	r8, r7, r3
 800403a:	f108 38ff 	add.w	r8, r8, #4294967295
 800403e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004042:	3f01      	subs	r7, #1
 8004044:	46b1      	mov	r9, r6
 8004046:	e015      	b.n	8004074 <d_print_comp+0x14d0>
 8004048:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800404c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004050:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8004054:	4798      	blx	r3
 8004056:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800405a:	3301      	adds	r3, #1
 800405c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004060:	2200      	movs	r2, #0
 8004062:	2301      	movs	r3, #1
 8004064:	45b8      	cmp	r8, r7
 8004066:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800406a:	54a6      	strb	r6, [r4, r2]
 800406c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004070:	f000 8545 	beq.w	8004afe <d_print_comp+0x1f5a>
 8004074:	2bff      	cmp	r3, #255	; 0xff
 8004076:	4619      	mov	r1, r3
 8004078:	4620      	mov	r0, r4
 800407a:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 800407e:	d0e3      	beq.n	8004048 <d_print_comp+0x14a4>
 8004080:	461a      	mov	r2, r3
 8004082:	3301      	adds	r3, #1
 8004084:	e7ee      	b.n	8004064 <d_print_comp+0x14c0>
 8004086:	f8d5 8008 	ldr.w	r8, [r5, #8]
 800408a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800408e:	9302      	str	r3, [sp, #8]
 8004090:	2200      	movs	r2, #0
 8004092:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 8004096:	f1b8 0f00 	cmp.w	r8, #0
 800409a:	d025      	beq.n	80040e8 <d_print_comp+0x1544>
 800409c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80040a0:	9301      	str	r3, [sp, #4]
 80040a2:	f10d 0920 	add.w	r9, sp, #32
 80040a6:	4623      	mov	r3, r4
 80040a8:	4617      	mov	r7, r2
 80040aa:	4644      	mov	r4, r8
 80040ac:	4692      	mov	sl, r2
 80040ae:	4649      	mov	r1, r9
 80040b0:	46ab      	mov	fp, r5
 80040b2:	4698      	mov	r8, r3
 80040b4:	7825      	ldrb	r5, [r4, #0]
 80040b6:	9b01      	ldr	r3, [sp, #4]
 80040b8:	600a      	str	r2, [r1, #0]
 80040ba:	4628      	mov	r0, r5
 80040bc:	e9c1 4a01 	strd	r4, sl, [r1, #4]
 80040c0:	60cb      	str	r3, [r1, #12]
 80040c2:	3701      	adds	r7, #1
 80040c4:	460a      	mov	r2, r1
 80040c6:	f7fc f97f 	bl	80003c8 <is_fnqual_component_type>
 80040ca:	2800      	cmp	r0, #0
 80040cc:	f000 87c8 	beq.w	8005060 <d_print_comp+0x24bc>
 80040d0:	68a4      	ldr	r4, [r4, #8]
 80040d2:	2c00      	cmp	r4, #0
 80040d4:	f001 8057 	beq.w	8005186 <d_print_comp+0x25e2>
 80040d8:	2f04      	cmp	r7, #4
 80040da:	f101 0110 	add.w	r1, r1, #16
 80040de:	d1e9      	bne.n	80040b4 <d_print_comp+0x1510>
 80040e0:	4644      	mov	r4, r8
 80040e2:	465d      	mov	r5, fp
 80040e4:	f8c8 2114 	str.w	r2, [r8, #276]	; 0x114
 80040e8:	2301      	movs	r3, #1
 80040ea:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80040ee:	9905      	ldr	r1, [sp, #20]
 80040f0:	686a      	ldr	r2, [r5, #4]
 80040f2:	f7fe be4a 	b.w	8002d8a <d_print_comp+0x1e6>
 80040f6:	f016 0604 	ands.w	r6, r6, #4
 80040fa:	68af      	ldr	r7, [r5, #8]
 80040fc:	f040 8405 	bne.w	800490a <d_print_comp+0x1d66>
 8004100:	68eb      	ldr	r3, [r5, #12]
 8004102:	2b00      	cmp	r3, #0
 8004104:	f43e ae41 	beq.w	8002d8a <d_print_comp+0x1e6>
 8004108:	eb07 0803 	add.w	r8, r7, r3
 800410c:	f108 38ff 	add.w	r8, r8, #4294967295
 8004110:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004114:	3f01      	subs	r7, #1
 8004116:	46b1      	mov	r9, r6
 8004118:	e015      	b.n	8004146 <d_print_comp+0x15a2>
 800411a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800411e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004122:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8004126:	4798      	blx	r3
 8004128:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800412c:	3301      	adds	r3, #1
 800412e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004132:	2200      	movs	r2, #0
 8004134:	2301      	movs	r3, #1
 8004136:	45b8      	cmp	r8, r7
 8004138:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800413c:	54a6      	strb	r6, [r4, r2]
 800413e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004142:	f000 84e0 	beq.w	8004b06 <d_print_comp+0x1f62>
 8004146:	2bff      	cmp	r3, #255	; 0xff
 8004148:	4619      	mov	r1, r3
 800414a:	4620      	mov	r0, r4
 800414c:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 8004150:	d0e3      	beq.n	800411a <d_print_comp+0x1576>
 8004152:	461a      	mov	r2, r3
 8004154:	3301      	adds	r3, #1
 8004156:	e7ee      	b.n	8004136 <d_print_comp+0x1592>
 8004158:	68aa      	ldr	r2, [r5, #8]
 800415a:	4631      	mov	r1, r6
 800415c:	4620      	mov	r0, r4
 800415e:	f7fe fd21 	bl	8002ba4 <d_print_comp>
 8004162:	f016 0904 	ands.w	r9, r6, #4
 8004166:	f000 8681 	beq.w	8004e6c <d_print_comp+0x22c8>
 800416a:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800416e:	2fff      	cmp	r7, #255	; 0xff
 8004170:	d112      	bne.n	8004198 <d_print_comp+0x15f4>
 8004172:	f04f 0800 	mov.w	r8, #0
 8004176:	4639      	mov	r1, r7
 8004178:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800417c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004180:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004184:	4620      	mov	r0, r4
 8004186:	4798      	blx	r3
 8004188:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800418c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8004190:	3301      	adds	r3, #1
 8004192:	4647      	mov	r7, r8
 8004194:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004198:	232e      	movs	r3, #46	; 0x2e
 800419a:	1c7a      	adds	r2, r7, #1
 800419c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80041a0:	55e3      	strb	r3, [r4, r7]
 80041a2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80041a6:	68ef      	ldr	r7, [r5, #12]
 80041a8:	783b      	ldrb	r3, [r7, #0]
 80041aa:	2b46      	cmp	r3, #70	; 0x46
 80041ac:	f000 873a 	beq.w	8005024 <d_print_comp+0x2480>
 80041b0:	463a      	mov	r2, r7
 80041b2:	4631      	mov	r1, r6
 80041b4:	4620      	mov	r0, r4
 80041b6:	f7fe fcf5 	bl	8002ba4 <d_print_comp>
 80041ba:	9905      	ldr	r1, [sp, #20]
 80041bc:	686a      	ldr	r2, [r5, #4]
 80041be:	f7fe bde4 	b.w	8002d8a <d_print_comp+0x1e6>
 80041c2:	2301      	movs	r3, #1
 80041c4:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80041c8:	686a      	ldr	r2, [r5, #4]
 80041ca:	f7fe bdde 	b.w	8002d8a <d_print_comp+0x1e6>
 80041ce:	3701      	adds	r7, #1
 80041d0:	454f      	cmp	r7, r9
 80041d2:	f47e ae2b 	bne.w	8002e2c <d_print_comp+0x288>
 80041d6:	9d03      	ldr	r5, [sp, #12]
 80041d8:	9905      	ldr	r1, [sp, #20]
 80041da:	686a      	ldr	r2, [r5, #4]
 80041dc:	f7fe bdd5 	b.w	8002d8a <d_print_comp+0x1e6>
 80041e0:	4631      	mov	r1, r6
 80041e2:	68aa      	ldr	r2, [r5, #8]
 80041e4:	4620      	mov	r0, r4
 80041e6:	f7fe fcdd 	bl	8002ba4 <d_print_comp>
 80041ea:	9905      	ldr	r1, [sp, #20]
 80041ec:	686a      	ldr	r2, [r5, #4]
 80041ee:	f7fe bdcc 	b.w	8002d8a <d_print_comp+0x1e6>
 80041f2:	4631      	mov	r1, r6
 80041f4:	68aa      	ldr	r2, [r5, #8]
 80041f6:	4620      	mov	r0, r4
 80041f8:	f7fe fcd4 	bl	8002ba4 <d_print_comp>
 80041fc:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004200:	2fff      	cmp	r7, #255	; 0xff
 8004202:	d111      	bne.n	8004228 <d_print_comp+0x1684>
 8004204:	2600      	movs	r6, #0
 8004206:	4639      	mov	r1, r7
 8004208:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800420c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004210:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004214:	4620      	mov	r0, r4
 8004216:	4798      	blx	r3
 8004218:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800421c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004220:	3301      	adds	r3, #1
 8004222:	4637      	mov	r7, r6
 8004224:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004228:	1c7a      	adds	r2, r7, #1
 800422a:	2329      	movs	r3, #41	; 0x29
 800422c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004230:	55e3      	strb	r3, [r4, r7]
 8004232:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004236:	686a      	ldr	r2, [r5, #4]
 8004238:	9905      	ldr	r1, [sp, #20]
 800423a:	f7fe bda6 	b.w	8002d8a <d_print_comp+0x1e6>
 800423e:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8004242:	68aa      	ldr	r2, [r5, #8]
 8004244:	4fd3      	ldr	r7, [pc, #844]	; (8004594 <d_print_comp+0x19f0>)
 8004246:	3301      	adds	r3, #1
 8004248:	4631      	mov	r1, r6
 800424a:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
 800424e:	4620      	mov	r0, r4
 8004250:	f7fe fca8 	bl	8002ba4 <d_print_comp>
 8004254:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
 8004258:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800425c:	3a01      	subs	r2, #1
 800425e:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
 8004262:	1cbe      	adds	r6, r7, #2
 8004264:	f04f 0800 	mov.w	r8, #0
 8004268:	e015      	b.n	8004296 <d_print_comp+0x16f2>
 800426a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800426e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004272:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004276:	4798      	blx	r3
 8004278:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800427c:	3301      	adds	r3, #1
 800427e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004282:	2200      	movs	r2, #0
 8004284:	2301      	movs	r3, #1
 8004286:	42b7      	cmp	r7, r6
 8004288:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800428c:	f804 9002 	strb.w	r9, [r4, r2]
 8004290:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 8004294:	d011      	beq.n	80042ba <d_print_comp+0x1716>
 8004296:	2bff      	cmp	r3, #255	; 0xff
 8004298:	4619      	mov	r1, r3
 800429a:	4620      	mov	r0, r4
 800429c:	f817 9b01 	ldrb.w	r9, [r7], #1
 80042a0:	d0e3      	beq.n	800426a <d_print_comp+0x16c6>
 80042a2:	461a      	mov	r2, r3
 80042a4:	3301      	adds	r3, #1
 80042a6:	e7ee      	b.n	8004286 <d_print_comp+0x16e2>
 80042a8:	4631      	mov	r1, r6
 80042aa:	68aa      	ldr	r2, [r5, #8]
 80042ac:	4620      	mov	r0, r4
 80042ae:	f7fe fc79 	bl	8002ba4 <d_print_comp>
 80042b2:	9905      	ldr	r1, [sp, #20]
 80042b4:	686a      	ldr	r2, [r5, #4]
 80042b6:	f7fe bd68 	b.w	8002d8a <d_print_comp+0x1e6>
 80042ba:	68ea      	ldr	r2, [r5, #12]
 80042bc:	49b6      	ldr	r1, [pc, #728]	; (8004598 <d_print_comp+0x19f4>)
 80042be:	3201      	adds	r2, #1
 80042c0:	a808      	add	r0, sp, #32
 80042c2:	f02a fdb7 	bl	802ee34 <siprintf>
 80042c6:	a808      	add	r0, sp, #32
 80042c8:	f002 fd0a 	bl	8006ce0 <strlen>
 80042cc:	b328      	cbz	r0, 800431a <d_print_comp+0x1776>
 80042ce:	ae08      	add	r6, sp, #32
 80042d0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80042d4:	1837      	adds	r7, r6, r0
 80042d6:	f04f 0800 	mov.w	r8, #0
 80042da:	e015      	b.n	8004308 <d_print_comp+0x1764>
 80042dc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80042e0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80042e4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80042e8:	4798      	blx	r3
 80042ea:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80042ee:	3301      	adds	r3, #1
 80042f0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80042f4:	2200      	movs	r2, #0
 80042f6:	2301      	movs	r3, #1
 80042f8:	42be      	cmp	r6, r7
 80042fa:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80042fe:	f804 9002 	strb.w	r9, [r4, r2]
 8004302:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 8004306:	d00a      	beq.n	800431e <d_print_comp+0x177a>
 8004308:	2bff      	cmp	r3, #255	; 0xff
 800430a:	4619      	mov	r1, r3
 800430c:	4620      	mov	r0, r4
 800430e:	f816 9b01 	ldrb.w	r9, [r6], #1
 8004312:	d0e3      	beq.n	80042dc <d_print_comp+0x1738>
 8004314:	461a      	mov	r2, r3
 8004316:	3301      	adds	r3, #1
 8004318:	e7ee      	b.n	80042f8 <d_print_comp+0x1754>
 800431a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800431e:	2bff      	cmp	r3, #255	; 0xff
 8004320:	d110      	bne.n	8004344 <d_print_comp+0x17a0>
 8004322:	2600      	movs	r6, #0
 8004324:	4619      	mov	r1, r3
 8004326:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800432a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800432e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004332:	4620      	mov	r0, r4
 8004334:	4798      	blx	r3
 8004336:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800433a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800433e:	3301      	adds	r3, #1
 8004340:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004344:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 8004348:	9905      	ldr	r1, [sp, #20]
 800434a:	1c50      	adds	r0, r2, #1
 800434c:	237d      	movs	r3, #125	; 0x7d
 800434e:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 8004352:	54a3      	strb	r3, [r4, r2]
 8004354:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004358:	686a      	ldr	r2, [r5, #4]
 800435a:	f7fe bd16 	b.w	8002d8a <d_print_comp+0x1e6>
 800435e:	4631      	mov	r1, r6
 8004360:	68aa      	ldr	r2, [r5, #8]
 8004362:	4620      	mov	r0, r4
 8004364:	f7fe fc1e 	bl	8002ba4 <d_print_comp>
 8004368:	9905      	ldr	r1, [sp, #20]
 800436a:	686a      	ldr	r2, [r5, #4]
 800436c:	f7fe bd0d 	b.w	8002d8a <d_print_comp+0x1e6>
 8004370:	68aa      	ldr	r2, [r5, #8]
 8004372:	4989      	ldr	r1, [pc, #548]	; (8004598 <d_print_comp+0x19f4>)
 8004374:	3201      	adds	r2, #1
 8004376:	a808      	add	r0, sp, #32
 8004378:	f02a fd5c 	bl	802ee34 <siprintf>
 800437c:	a808      	add	r0, sp, #32
 800437e:	f002 fcaf 	bl	8006ce0 <strlen>
 8004382:	2800      	cmp	r0, #0
 8004384:	d071      	beq.n	800446a <d_print_comp+0x18c6>
 8004386:	ae08      	add	r6, sp, #32
 8004388:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800438c:	1837      	adds	r7, r6, r0
 800438e:	f04f 0800 	mov.w	r8, #0
 8004392:	e015      	b.n	80043c0 <d_print_comp+0x181c>
 8004394:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004398:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800439c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80043a0:	4798      	blx	r3
 80043a2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80043a6:	3301      	adds	r3, #1
 80043a8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80043ac:	2200      	movs	r2, #0
 80043ae:	2301      	movs	r3, #1
 80043b0:	42b7      	cmp	r7, r6
 80043b2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80043b6:	f804 9002 	strb.w	r9, [r4, r2]
 80043ba:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80043be:	d056      	beq.n	800446e <d_print_comp+0x18ca>
 80043c0:	2bff      	cmp	r3, #255	; 0xff
 80043c2:	4619      	mov	r1, r3
 80043c4:	4620      	mov	r0, r4
 80043c6:	f816 9b01 	ldrb.w	r9, [r6], #1
 80043ca:	d0e3      	beq.n	8004394 <d_print_comp+0x17f0>
 80043cc:	461a      	mov	r2, r3
 80043ce:	3301      	adds	r3, #1
 80043d0:	e7ee      	b.n	80043b0 <d_print_comp+0x180c>
 80043d2:	4631      	mov	r1, r6
 80043d4:	68ea      	ldr	r2, [r5, #12]
 80043d6:	4620      	mov	r0, r4
 80043d8:	f7fe fbe4 	bl	8002ba4 <d_print_comp>
 80043dc:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80043e0:	2fff      	cmp	r7, #255	; 0xff
 80043e2:	d111      	bne.n	8004408 <d_print_comp+0x1864>
 80043e4:	2600      	movs	r6, #0
 80043e6:	4639      	mov	r1, r7
 80043e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80043ec:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80043f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80043f4:	4620      	mov	r0, r4
 80043f6:	4798      	blx	r3
 80043f8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80043fc:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004400:	3301      	adds	r3, #1
 8004402:	4637      	mov	r7, r6
 8004404:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004408:	1c7a      	adds	r2, r7, #1
 800440a:	235d      	movs	r3, #93	; 0x5d
 800440c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004410:	55e3      	strb	r3, [r4, r7]
 8004412:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004416:	686a      	ldr	r2, [r5, #4]
 8004418:	9905      	ldr	r1, [sp, #20]
 800441a:	f7fe bcb6 	b.w	8002d8a <d_print_comp+0x1e6>
 800441e:	4631      	mov	r1, r6
 8004420:	68ea      	ldr	r2, [r5, #12]
 8004422:	4620      	mov	r0, r4
 8004424:	f7fe fbbe 	bl	8002ba4 <d_print_comp>
 8004428:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800442c:	2fff      	cmp	r7, #255	; 0xff
 800442e:	d111      	bne.n	8004454 <d_print_comp+0x18b0>
 8004430:	2600      	movs	r6, #0
 8004432:	4639      	mov	r1, r7
 8004434:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004438:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800443c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004440:	4620      	mov	r0, r4
 8004442:	4798      	blx	r3
 8004444:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004448:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800444c:	3301      	adds	r3, #1
 800444e:	4637      	mov	r7, r6
 8004450:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004454:	1c7a      	adds	r2, r7, #1
 8004456:	235d      	movs	r3, #93	; 0x5d
 8004458:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800445c:	55e3      	strb	r3, [r4, r7]
 800445e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004462:	686a      	ldr	r2, [r5, #4]
 8004464:	9905      	ldr	r1, [sp, #20]
 8004466:	f7fe bc90 	b.w	8002d8a <d_print_comp+0x1e6>
 800446a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800446e:	2bff      	cmp	r3, #255	; 0xff
 8004470:	d110      	bne.n	8004494 <d_print_comp+0x18f0>
 8004472:	2600      	movs	r6, #0
 8004474:	4619      	mov	r1, r3
 8004476:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800447a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800447e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004482:	4620      	mov	r0, r4
 8004484:	4798      	blx	r3
 8004486:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800448a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800448e:	3301      	adds	r3, #1
 8004490:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004494:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 8004498:	9905      	ldr	r1, [sp, #20]
 800449a:	1c50      	adds	r0, r2, #1
 800449c:	237d      	movs	r3, #125	; 0x7d
 800449e:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 80044a2:	54a3      	strb	r3, [r4, r2]
 80044a4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80044a8:	686a      	ldr	r2, [r5, #4]
 80044aa:	f7fe bc6e 	b.w	8002d8a <d_print_comp+0x1e6>
 80044ae:	4631      	mov	r1, r6
 80044b0:	68aa      	ldr	r2, [r5, #8]
 80044b2:	4620      	mov	r0, r4
 80044b4:	f7fe fb76 	bl	8002ba4 <d_print_comp>
 80044b8:	9905      	ldr	r1, [sp, #20]
 80044ba:	686a      	ldr	r2, [r5, #4]
 80044bc:	f7fe bc65 	b.w	8002d8a <d_print_comp+0x1e6>
 80044c0:	9905      	ldr	r1, [sp, #20]
 80044c2:	686a      	ldr	r2, [r5, #4]
 80044c4:	f7fe bc61 	b.w	8002d8a <d_print_comp+0x1e6>
 80044c8:	4631      	mov	r1, r6
 80044ca:	68aa      	ldr	r2, [r5, #8]
 80044cc:	4620      	mov	r0, r4
 80044ce:	f7fe fb69 	bl	8002ba4 <d_print_comp>
 80044d2:	9905      	ldr	r1, [sp, #20]
 80044d4:	686a      	ldr	r2, [r5, #4]
 80044d6:	f7fe bc58 	b.w	8002d8a <d_print_comp+0x1e6>
 80044da:	4631      	mov	r1, r6
 80044dc:	68ea      	ldr	r2, [r5, #12]
 80044de:	4620      	mov	r0, r4
 80044e0:	f7fe fb60 	bl	8002ba4 <d_print_comp>
 80044e4:	9905      	ldr	r1, [sp, #20]
 80044e6:	686a      	ldr	r2, [r5, #4]
 80044e8:	f7fe bc4f 	b.w	8002d8a <d_print_comp+0x1e6>
 80044ec:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
 80044f0:	b13a      	cbz	r2, 8004502 <d_print_comp+0x195e>
 80044f2:	ab18      	add	r3, sp, #96	; 0x60
 80044f4:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
 80044f8:	f843 1d40 	str.w	r1, [r3, #-64]!
 80044fc:	9209      	str	r2, [sp, #36]	; 0x24
 80044fe:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8004502:	68aa      	ldr	r2, [r5, #8]
 8004504:	7813      	ldrb	r3, [r2, #0]
 8004506:	2b04      	cmp	r3, #4
 8004508:	f000 84d6 	beq.w	8004eb8 <d_print_comp+0x2314>
 800450c:	4631      	mov	r1, r6
 800450e:	4620      	mov	r0, r4
 8004510:	f7fe fb48 	bl	8002ba4 <d_print_comp>
 8004514:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 8004518:	b113      	cbz	r3, 8004520 <d_print_comp+0x197c>
 800451a:	9b08      	ldr	r3, [sp, #32]
 800451c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8004520:	9905      	ldr	r1, [sp, #20]
 8004522:	686a      	ldr	r2, [r5, #4]
 8004524:	f7fe bc31 	b.w	8002d8a <d_print_comp+0x1e6>
 8004528:	f8da 6004 	ldr.w	r6, [sl, #4]
 800452c:	7832      	ldrb	r2, [r6, #0]
 800452e:	3a61      	subs	r2, #97	; 0x61
 8004530:	2a19      	cmp	r2, #25
 8004532:	d81d      	bhi.n	8004570 <d_print_comp+0x19cc>
 8004534:	2bff      	cmp	r3, #255	; 0xff
 8004536:	d110      	bne.n	800455a <d_print_comp+0x19b6>
 8004538:	2600      	movs	r6, #0
 800453a:	4619      	mov	r1, r3
 800453c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004540:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004544:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004548:	4620      	mov	r0, r4
 800454a:	4798      	blx	r3
 800454c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004550:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004554:	3301      	adds	r3, #1
 8004556:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800455a:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 800455e:	2320      	movs	r3, #32
 8004560:	1c51      	adds	r1, r2, #1
 8004562:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004566:	54a3      	strb	r3, [r4, r2]
 8004568:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800456c:	f8da 6004 	ldr.w	r6, [sl, #4]
 8004570:	19f3      	adds	r3, r6, r7
 8004572:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8004576:	2b20      	cmp	r3, #32
 8004578:	bf08      	it	eq
 800457a:	f107 37ff 	addeq.w	r7, r7, #4294967295
 800457e:	2f00      	cmp	r7, #0
 8004580:	f000 86fb 	beq.w	800537a <d_print_comp+0x27d6>
 8004584:	3e01      	subs	r6, #1
 8004586:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800458a:	4437      	add	r7, r6
 800458c:	f04f 0800 	mov.w	r8, #0
 8004590:	e01b      	b.n	80045ca <d_print_comp+0x1a26>
 8004592:	bf00      	nop
 8004594:	080350d0 	.word	0x080350d0
 8004598:	08034e20 	.word	0x08034e20
 800459c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80045a0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80045a4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80045a8:	4798      	blx	r3
 80045aa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80045ae:	3301      	adds	r3, #1
 80045b0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80045b4:	2200      	movs	r2, #0
 80045b6:	2301      	movs	r3, #1
 80045b8:	42be      	cmp	r6, r7
 80045ba:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80045be:	f804 9002 	strb.w	r9, [r4, r2]
 80045c2:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80045c6:	f000 80ec 	beq.w	80047a2 <d_print_comp+0x1bfe>
 80045ca:	2bff      	cmp	r3, #255	; 0xff
 80045cc:	4619      	mov	r1, r3
 80045ce:	4620      	mov	r0, r4
 80045d0:	f816 9f01 	ldrb.w	r9, [r6, #1]!
 80045d4:	d0e2      	beq.n	800459c <d_print_comp+0x19f8>
 80045d6:	461a      	mov	r2, r3
 80045d8:	3301      	adds	r3, #1
 80045da:	e7ed      	b.n	80045b8 <d_print_comp+0x1a14>
 80045dc:	4631      	mov	r1, r6
 80045de:	68aa      	ldr	r2, [r5, #8]
 80045e0:	4620      	mov	r0, r4
 80045e2:	f7fe fadf 	bl	8002ba4 <d_print_comp>
 80045e6:	9905      	ldr	r1, [sp, #20]
 80045e8:	686a      	ldr	r2, [r5, #4]
 80045ea:	f7fe bbce 	b.w	8002d8a <d_print_comp+0x1e6>
 80045ee:	4631      	mov	r1, r6
 80045f0:	68aa      	ldr	r2, [r5, #8]
 80045f2:	4620      	mov	r0, r4
 80045f4:	f7fe fad6 	bl	8002ba4 <d_print_comp>
 80045f8:	9905      	ldr	r1, [sp, #20]
 80045fa:	686a      	ldr	r2, [r5, #4]
 80045fc:	f7fe bbc5 	b.w	8002d8a <d_print_comp+0x1e6>
 8004600:	4631      	mov	r1, r6
 8004602:	68aa      	ldr	r2, [r5, #8]
 8004604:	4620      	mov	r0, r4
 8004606:	f7fe facd 	bl	8002ba4 <d_print_comp>
 800460a:	9905      	ldr	r1, [sp, #20]
 800460c:	686a      	ldr	r2, [r5, #4]
 800460e:	f7fe bbbc 	b.w	8002d8a <d_print_comp+0x1e6>
 8004612:	4631      	mov	r1, r6
 8004614:	68aa      	ldr	r2, [r5, #8]
 8004616:	4620      	mov	r0, r4
 8004618:	f7fe fac4 	bl	8002ba4 <d_print_comp>
 800461c:	9905      	ldr	r1, [sp, #20]
 800461e:	686a      	ldr	r2, [r5, #4]
 8004620:	f7fe bbb3 	b.w	8002d8a <d_print_comp+0x1e6>
 8004624:	4631      	mov	r1, r6
 8004626:	68aa      	ldr	r2, [r5, #8]
 8004628:	4620      	mov	r0, r4
 800462a:	f7fe fabb 	bl	8002ba4 <d_print_comp>
 800462e:	9905      	ldr	r1, [sp, #20]
 8004630:	686a      	ldr	r2, [r5, #4]
 8004632:	f7fe bbaa 	b.w	8002d8a <d_print_comp+0x1e6>
 8004636:	4631      	mov	r1, r6
 8004638:	68aa      	ldr	r2, [r5, #8]
 800463a:	4620      	mov	r0, r4
 800463c:	f7fe fab2 	bl	8002ba4 <d_print_comp>
 8004640:	9905      	ldr	r1, [sp, #20]
 8004642:	686a      	ldr	r2, [r5, #4]
 8004644:	f7fe bba1 	b.w	8002d8a <d_print_comp+0x1e6>
 8004648:	4631      	mov	r1, r6
 800464a:	68aa      	ldr	r2, [r5, #8]
 800464c:	4620      	mov	r0, r4
 800464e:	f7fe faa9 	bl	8002ba4 <d_print_comp>
 8004652:	9905      	ldr	r1, [sp, #20]
 8004654:	686a      	ldr	r2, [r5, #4]
 8004656:	f7fe bb98 	b.w	8002d8a <d_print_comp+0x1e6>
 800465a:	4631      	mov	r1, r6
 800465c:	68aa      	ldr	r2, [r5, #8]
 800465e:	4620      	mov	r0, r4
 8004660:	f7fe faa0 	bl	8002ba4 <d_print_comp>
 8004664:	9905      	ldr	r1, [sp, #20]
 8004666:	686a      	ldr	r2, [r5, #4]
 8004668:	f7fe bb8f 	b.w	8002d8a <d_print_comp+0x1e6>
 800466c:	4fcf      	ldr	r7, [pc, #828]	; (80049ac <d_print_comp+0x1e08>)
 800466e:	68ea      	ldr	r2, [r5, #12]
 8004670:	4631      	mov	r1, r6
 8004672:	4620      	mov	r0, r4
 8004674:	f7fe fa96 	bl	8002ba4 <d_print_comp>
 8004678:	f107 0805 	add.w	r8, r7, #5
 800467c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004680:	f04f 0900 	mov.w	r9, #0
 8004684:	e015      	b.n	80046b2 <d_print_comp+0x1b0e>
 8004686:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800468a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800468e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8004692:	4798      	blx	r3
 8004694:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004698:	3301      	adds	r3, #1
 800469a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800469e:	2200      	movs	r2, #0
 80046a0:	2301      	movs	r3, #1
 80046a2:	4547      	cmp	r7, r8
 80046a4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80046a8:	f804 a002 	strb.w	sl, [r4, r2]
 80046ac:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80046b0:	d008      	beq.n	80046c4 <d_print_comp+0x1b20>
 80046b2:	2bff      	cmp	r3, #255	; 0xff
 80046b4:	4619      	mov	r1, r3
 80046b6:	4620      	mov	r0, r4
 80046b8:	f817 ab01 	ldrb.w	sl, [r7], #1
 80046bc:	d0e3      	beq.n	8004686 <d_print_comp+0x1ae2>
 80046be:	461a      	mov	r2, r3
 80046c0:	3301      	adds	r3, #1
 80046c2:	e7ee      	b.n	80046a2 <d_print_comp+0x1afe>
 80046c4:	4631      	mov	r1, r6
 80046c6:	68aa      	ldr	r2, [r5, #8]
 80046c8:	4620      	mov	r0, r4
 80046ca:	f7fe fa6b 	bl	8002ba4 <d_print_comp>
 80046ce:	9905      	ldr	r1, [sp, #20]
 80046d0:	686a      	ldr	r2, [r5, #4]
 80046d2:	f7fe bb5a 	b.w	8002d8a <d_print_comp+0x1e6>
 80046d6:	4fb6      	ldr	r7, [pc, #728]	; (80049b0 <d_print_comp+0x1e0c>)
 80046d8:	68aa      	ldr	r2, [r5, #8]
 80046da:	4631      	mov	r1, r6
 80046dc:	4620      	mov	r0, r4
 80046de:	f7fe fa61 	bl	8002ba4 <d_print_comp>
 80046e2:	f107 0804 	add.w	r8, r7, #4
 80046e6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80046ea:	f04f 0900 	mov.w	r9, #0
 80046ee:	e015      	b.n	800471c <d_print_comp+0x1b78>
 80046f0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80046f4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80046f8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80046fc:	4798      	blx	r3
 80046fe:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004702:	3301      	adds	r3, #1
 8004704:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004708:	2200      	movs	r2, #0
 800470a:	2301      	movs	r3, #1
 800470c:	45b8      	cmp	r8, r7
 800470e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004712:	f804 a002 	strb.w	sl, [r4, r2]
 8004716:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 800471a:	d008      	beq.n	800472e <d_print_comp+0x1b8a>
 800471c:	2bff      	cmp	r3, #255	; 0xff
 800471e:	4619      	mov	r1, r3
 8004720:	4620      	mov	r0, r4
 8004722:	f817 ab01 	ldrb.w	sl, [r7], #1
 8004726:	d0e3      	beq.n	80046f0 <d_print_comp+0x1b4c>
 8004728:	461a      	mov	r2, r3
 800472a:	3301      	adds	r3, #1
 800472c:	e7ee      	b.n	800470c <d_print_comp+0x1b68>
 800472e:	4631      	mov	r1, r6
 8004730:	68ea      	ldr	r2, [r5, #12]
 8004732:	4620      	mov	r0, r4
 8004734:	f7fe fa36 	bl	8002ba4 <d_print_comp>
 8004738:	9905      	ldr	r1, [sp, #20]
 800473a:	686a      	ldr	r2, [r5, #4]
 800473c:	f7fe bb25 	b.w	8002d8a <d_print_comp+0x1e6>
 8004740:	4631      	mov	r1, r6
 8004742:	68aa      	ldr	r2, [r5, #8]
 8004744:	4620      	mov	r0, r4
 8004746:	f7fe fa2d 	bl	8002ba4 <d_print_comp>
 800474a:	9905      	ldr	r1, [sp, #20]
 800474c:	686a      	ldr	r2, [r5, #4]
 800474e:	f7fe bb1c 	b.w	8002d8a <d_print_comp+0x1e6>
 8004752:	4631      	mov	r1, r6
 8004754:	68aa      	ldr	r2, [r5, #8]
 8004756:	4620      	mov	r0, r4
 8004758:	f7fe fa24 	bl	8002ba4 <d_print_comp>
 800475c:	9905      	ldr	r1, [sp, #20]
 800475e:	686a      	ldr	r2, [r5, #4]
 8004760:	f7fe bb13 	b.w	8002d8a <d_print_comp+0x1e6>
 8004764:	4631      	mov	r1, r6
 8004766:	68aa      	ldr	r2, [r5, #8]
 8004768:	4620      	mov	r0, r4
 800476a:	f7fe fa1b 	bl	8002ba4 <d_print_comp>
 800476e:	9905      	ldr	r1, [sp, #20]
 8004770:	686a      	ldr	r2, [r5, #4]
 8004772:	f7fe bb0a 	b.w	8002d8a <d_print_comp+0x1e6>
 8004776:	4631      	mov	r1, r6
 8004778:	68aa      	ldr	r2, [r5, #8]
 800477a:	4620      	mov	r0, r4
 800477c:	f7fe fa12 	bl	8002ba4 <d_print_comp>
 8004780:	9905      	ldr	r1, [sp, #20]
 8004782:	686a      	ldr	r2, [r5, #4]
 8004784:	f7fe bb01 	b.w	8002d8a <d_print_comp+0x1e6>
 8004788:	4631      	mov	r1, r6
 800478a:	68aa      	ldr	r2, [r5, #8]
 800478c:	4620      	mov	r0, r4
 800478e:	f7fe fa09 	bl	8002ba4 <d_print_comp>
 8004792:	9905      	ldr	r1, [sp, #20]
 8004794:	686a      	ldr	r2, [r5, #4]
 8004796:	f7fe baf8 	b.w	8002d8a <d_print_comp+0x1e6>
 800479a:	9905      	ldr	r1, [sp, #20]
 800479c:	686a      	ldr	r2, [r5, #4]
 800479e:	f7fe baf4 	b.w	8002d8a <d_print_comp+0x1e6>
 80047a2:	9905      	ldr	r1, [sp, #20]
 80047a4:	686a      	ldr	r2, [r5, #4]
 80047a6:	f7fe baf0 	b.w	8002d8a <d_print_comp+0x1e6>
 80047aa:	4631      	mov	r1, r6
 80047ac:	68ea      	ldr	r2, [r5, #12]
 80047ae:	9301      	str	r3, [sp, #4]
 80047b0:	4620      	mov	r0, r4
 80047b2:	f8d4 6124 	ldr.w	r6, [r4, #292]	; 0x124
 80047b6:	f7fe f9f5 	bl	8002ba4 <d_print_comp>
 80047ba:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80047be:	9b01      	ldr	r3, [sp, #4]
 80047c0:	4296      	cmp	r6, r2
 80047c2:	f000 8441 	beq.w	8005048 <d_print_comp+0x24a4>
 80047c6:	9905      	ldr	r1, [sp, #20]
 80047c8:	686a      	ldr	r2, [r5, #4]
 80047ca:	f7fe bade 	b.w	8002d8a <d_print_comp+0x1e6>
 80047ce:	4e79      	ldr	r6, [pc, #484]	; (80049b4 <d_print_comp+0x1e10>)
 80047d0:	4690      	mov	r8, r2
 80047d2:	f106 0906 	add.w	r9, r6, #6
 80047d6:	e014      	b.n	8004802 <d_print_comp+0x1c5e>
 80047d8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80047dc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80047e0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80047e4:	4798      	blx	r3
 80047e6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80047ea:	3301      	adds	r3, #1
 80047ec:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80047f0:	2200      	movs	r2, #0
 80047f2:	2301      	movs	r3, #1
 80047f4:	45b1      	cmp	r9, r6
 80047f6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80047fa:	54a7      	strb	r7, [r4, r2]
 80047fc:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004800:	d008      	beq.n	8004814 <d_print_comp+0x1c70>
 8004802:	2bff      	cmp	r3, #255	; 0xff
 8004804:	4619      	mov	r1, r3
 8004806:	4620      	mov	r0, r4
 8004808:	f816 7b01 	ldrb.w	r7, [r6], #1
 800480c:	d0e4      	beq.n	80047d8 <d_print_comp+0x1c34>
 800480e:	461a      	mov	r2, r3
 8004810:	3301      	adds	r3, #1
 8004812:	e7ef      	b.n	80047f4 <d_print_comp+0x1c50>
 8004814:	9905      	ldr	r1, [sp, #20]
 8004816:	686a      	ldr	r2, [r5, #4]
 8004818:	f7fe bab7 	b.w	8002d8a <d_print_comp+0x1e6>
 800481c:	4642      	mov	r2, r8
 800481e:	a808      	add	r0, sp, #32
 8004820:	4965      	ldr	r1, [pc, #404]	; (80049b8 <d_print_comp+0x1e14>)
 8004822:	f02a fb07 	bl	802ee34 <siprintf>
 8004826:	a808      	add	r0, sp, #32
 8004828:	f002 fa5a 	bl	8006ce0 <strlen>
 800482c:	b328      	cbz	r0, 800487a <d_print_comp+0x1cd6>
 800482e:	ae08      	add	r6, sp, #32
 8004830:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004834:	eb06 0900 	add.w	r9, r6, r0
 8004838:	f04f 0800 	mov.w	r8, #0
 800483c:	e014      	b.n	8004868 <d_print_comp+0x1cc4>
 800483e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004842:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004846:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800484a:	4798      	blx	r3
 800484c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004850:	3301      	adds	r3, #1
 8004852:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004856:	2200      	movs	r2, #0
 8004858:	2301      	movs	r3, #1
 800485a:	45b1      	cmp	r9, r6
 800485c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004860:	54a7      	strb	r7, [r4, r2]
 8004862:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004866:	d008      	beq.n	800487a <d_print_comp+0x1cd6>
 8004868:	2bff      	cmp	r3, #255	; 0xff
 800486a:	4619      	mov	r1, r3
 800486c:	4620      	mov	r0, r4
 800486e:	f816 7b01 	ldrb.w	r7, [r6], #1
 8004872:	d0e4      	beq.n	800483e <d_print_comp+0x1c9a>
 8004874:	461a      	mov	r2, r3
 8004876:	3301      	adds	r3, #1
 8004878:	e7ef      	b.n	800485a <d_print_comp+0x1cb6>
 800487a:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800487e:	2fff      	cmp	r7, #255	; 0xff
 8004880:	d111      	bne.n	80048a6 <d_print_comp+0x1d02>
 8004882:	2600      	movs	r6, #0
 8004884:	4639      	mov	r1, r7
 8004886:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800488a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800488e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004892:	4620      	mov	r0, r4
 8004894:	4798      	blx	r3
 8004896:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800489a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800489e:	3301      	adds	r3, #1
 80048a0:	4637      	mov	r7, r6
 80048a2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80048a6:	1c7a      	adds	r2, r7, #1
 80048a8:	237d      	movs	r3, #125	; 0x7d
 80048aa:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80048ae:	55e3      	strb	r3, [r4, r7]
 80048b0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80048b4:	686a      	ldr	r2, [r5, #4]
 80048b6:	9905      	ldr	r1, [sp, #20]
 80048b8:	f7fe ba67 	b.w	8002d8a <d_print_comp+0x1e6>
 80048bc:	4e3f      	ldr	r6, [pc, #252]	; (80049bc <d_print_comp+0x1e18>)
 80048be:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80048c2:	f106 0905 	add.w	r9, r6, #5
 80048c6:	f04f 0800 	mov.w	r8, #0
 80048ca:	e015      	b.n	80048f8 <d_print_comp+0x1d54>
 80048cc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80048d0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80048d4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80048d8:	4798      	blx	r3
 80048da:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80048de:	3301      	adds	r3, #1
 80048e0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80048e4:	2200      	movs	r2, #0
 80048e6:	2301      	movs	r3, #1
 80048e8:	45b1      	cmp	r9, r6
 80048ea:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80048ee:	54a7      	strb	r7, [r4, r2]
 80048f0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80048f4:	f000 80cf 	beq.w	8004a96 <d_print_comp+0x1ef2>
 80048f8:	2bff      	cmp	r3, #255	; 0xff
 80048fa:	4619      	mov	r1, r3
 80048fc:	4620      	mov	r0, r4
 80048fe:	f816 7b01 	ldrb.w	r7, [r6], #1
 8004902:	d0e3      	beq.n	80048cc <d_print_comp+0x1d28>
 8004904:	461a      	mov	r2, r3
 8004906:	3301      	adds	r3, #1
 8004908:	e7ee      	b.n	80048e8 <d_print_comp+0x1d44>
 800490a:	68ee      	ldr	r6, [r5, #12]
 800490c:	443e      	add	r6, r7
 800490e:	42be      	cmp	r6, r7
 8004910:	f67e aa3b 	bls.w	8002d8a <d_print_comp+0x1e6>
 8004914:	f04f 0800 	mov.w	r8, #0
 8004918:	e018      	b.n	800494c <d_print_comp+0x1da8>
 800491a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800491e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004922:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004926:	4620      	mov	r0, r4
 8004928:	4798      	blx	r3
 800492a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800492e:	3301      	adds	r3, #1
 8004930:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004934:	2100      	movs	r1, #0
 8004936:	2301      	movs	r3, #1
 8004938:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800493c:	f804 9001 	strb.w	r9, [r4, r1]
 8004940:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 8004944:	3701      	adds	r7, #1
 8004946:	42be      	cmp	r6, r7
 8004948:	f240 80e1 	bls.w	8004b0e <d_print_comp+0x1f6a>
 800494c:	1bf3      	subs	r3, r6, r7
 800494e:	2b03      	cmp	r3, #3
 8004950:	f897 9000 	ldrb.w	r9, [r7]
 8004954:	dd02      	ble.n	800495c <d_print_comp+0x1db8>
 8004956:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
 800495a:	d005      	beq.n	8004968 <d_print_comp+0x1dc4>
 800495c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004960:	29ff      	cmp	r1, #255	; 0xff
 8004962:	d0da      	beq.n	800491a <d_print_comp+0x1d76>
 8004964:	1c4b      	adds	r3, r1, #1
 8004966:	e7e7      	b.n	8004938 <d_print_comp+0x1d94>
 8004968:	787b      	ldrb	r3, [r7, #1]
 800496a:	2b5f      	cmp	r3, #95	; 0x5f
 800496c:	d1f6      	bne.n	800495c <d_print_comp+0x1db8>
 800496e:	78bb      	ldrb	r3, [r7, #2]
 8004970:	2b55      	cmp	r3, #85	; 0x55
 8004972:	d1f3      	bne.n	800495c <d_print_comp+0x1db8>
 8004974:	1cf9      	adds	r1, r7, #3
 8004976:	2000      	movs	r0, #0
 8004978:	e002      	b.n	8004980 <d_print_comp+0x1ddc>
 800497a:	4613      	mov	r3, r2
 800497c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8004980:	428e      	cmp	r6, r1
 8004982:	468a      	mov	sl, r1
 8004984:	d9ea      	bls.n	800495c <d_print_comp+0x1db8>
 8004986:	f811 3b01 	ldrb.w	r3, [r1], #1
 800498a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800498e:	fa5f fe82 	uxtb.w	lr, r2
 8004992:	f1be 0f09 	cmp.w	lr, #9
 8004996:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 800499a:	d9ee      	bls.n	800497a <d_print_comp+0x1dd6>
 800499c:	f1bc 0f05 	cmp.w	ip, #5
 80049a0:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80049a4:	f200 85c7 	bhi.w	8005536 <d_print_comp+0x2992>
 80049a8:	3b37      	subs	r3, #55	; 0x37
 80049aa:	e7e7      	b.n	800497c <d_print_comp+0x1dd8>
 80049ac:	08034f94 	.word	0x08034f94
 80049b0:	08034ed0 	.word	0x08034ed0
 80049b4:	08034ff4 	.word	0x08034ff4
 80049b8:	08034e20 	.word	0x08034e20
 80049bc:	08034e94 	.word	0x08034e94
 80049c0:	9905      	ldr	r1, [sp, #20]
 80049c2:	686a      	ldr	r2, [r5, #4]
 80049c4:	f7fe b9e1 	b.w	8002d8a <d_print_comp+0x1e6>
 80049c8:	68aa      	ldr	r2, [r5, #8]
 80049ca:	9201      	str	r2, [sp, #4]
 80049cc:	4619      	mov	r1, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f47e aa26 	bne.w	8002e20 <d_print_comp+0x27c>
 80049d4:	9905      	ldr	r1, [sp, #20]
 80049d6:	686a      	ldr	r2, [r5, #4]
 80049d8:	f7fe b9d7 	b.w	8002d8a <d_print_comp+0x1e6>
 80049dc:	4ece      	ldr	r6, [pc, #824]	; (8004d18 <d_print_comp+0x2174>)
 80049de:	f106 0904 	add.w	r9, r6, #4
 80049e2:	e014      	b.n	8004a0e <d_print_comp+0x1e6a>
 80049e4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80049e8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80049ec:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80049f0:	4798      	blx	r3
 80049f2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80049f6:	3301      	adds	r3, #1
 80049f8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80049fc:	2200      	movs	r2, #0
 80049fe:	2301      	movs	r3, #1
 8004a00:	45b1      	cmp	r9, r6
 8004a02:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004a06:	54a7      	strb	r7, [r4, r2]
 8004a08:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004a0c:	d008      	beq.n	8004a20 <d_print_comp+0x1e7c>
 8004a0e:	2bff      	cmp	r3, #255	; 0xff
 8004a10:	4619      	mov	r1, r3
 8004a12:	4620      	mov	r0, r4
 8004a14:	f816 7b01 	ldrb.w	r7, [r6], #1
 8004a18:	d0e4      	beq.n	80049e4 <d_print_comp+0x1e40>
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	e7ef      	b.n	8004a00 <d_print_comp+0x1e5c>
 8004a20:	9905      	ldr	r1, [sp, #20]
 8004a22:	686a      	ldr	r2, [r5, #4]
 8004a24:	f7fe b9b1 	b.w	8002d8a <d_print_comp+0x1e6>
 8004a28:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 8004a2c:	f7ff ba66 	b.w	8003efc <d_print_comp+0x1358>
 8004a30:	2700      	movs	r7, #0
 8004a32:	f7ff ba54 	b.w	8003ede <d_print_comp+0x133a>
 8004a36:	e9d0 6702 	ldrd	r6, r7, [r0, #8]
 8004a3a:	2f00      	cmp	r7, #0
 8004a3c:	f43e a9a5 	beq.w	8002d8a <d_print_comp+0x1e6>
 8004a40:	4437      	add	r7, r6
 8004a42:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004a46:	3f01      	subs	r7, #1
 8004a48:	3e01      	subs	r6, #1
 8004a4a:	f04f 0900 	mov.w	r9, #0
 8004a4e:	e015      	b.n	8004a7c <d_print_comp+0x1ed8>
 8004a50:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004a54:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004a58:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8004a5c:	4798      	blx	r3
 8004a5e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004a62:	3301      	adds	r3, #1
 8004a64:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004a68:	2200      	movs	r2, #0
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	42b7      	cmp	r7, r6
 8004a6e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004a72:	f804 8002 	strb.w	r8, [r4, r2]
 8004a76:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8004a7a:	d008      	beq.n	8004a8e <d_print_comp+0x1eea>
 8004a7c:	2bff      	cmp	r3, #255	; 0xff
 8004a7e:	4619      	mov	r1, r3
 8004a80:	4620      	mov	r0, r4
 8004a82:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8004a86:	d0e3      	beq.n	8004a50 <d_print_comp+0x1eac>
 8004a88:	461a      	mov	r2, r3
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	e7ee      	b.n	8004a6c <d_print_comp+0x1ec8>
 8004a8e:	9905      	ldr	r1, [sp, #20]
 8004a90:	686a      	ldr	r2, [r5, #4]
 8004a92:	f7fe b97a 	b.w	8002d8a <d_print_comp+0x1e6>
 8004a96:	68aa      	ldr	r2, [r5, #8]
 8004a98:	49a0      	ldr	r1, [pc, #640]	; (8004d1c <d_print_comp+0x2178>)
 8004a9a:	3201      	adds	r2, #1
 8004a9c:	a808      	add	r0, sp, #32
 8004a9e:	f02a f9c9 	bl	802ee34 <siprintf>
 8004aa2:	a808      	add	r0, sp, #32
 8004aa4:	f002 f91c 	bl	8006ce0 <strlen>
 8004aa8:	b328      	cbz	r0, 8004af6 <d_print_comp+0x1f52>
 8004aaa:	ae08      	add	r6, sp, #32
 8004aac:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004ab0:	eb06 0900 	add.w	r9, r6, r0
 8004ab4:	f04f 0800 	mov.w	r8, #0
 8004ab8:	e014      	b.n	8004ae4 <d_print_comp+0x1f40>
 8004aba:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004abe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004ac2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004ac6:	4798      	blx	r3
 8004ac8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004acc:	3301      	adds	r3, #1
 8004ace:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	45b1      	cmp	r9, r6
 8004ad8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004adc:	54a7      	strb	r7, [r4, r2]
 8004ade:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004ae2:	d008      	beq.n	8004af6 <d_print_comp+0x1f52>
 8004ae4:	2bff      	cmp	r3, #255	; 0xff
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	4620      	mov	r0, r4
 8004aea:	f816 7b01 	ldrb.w	r7, [r6], #1
 8004aee:	d0e4      	beq.n	8004aba <d_print_comp+0x1f16>
 8004af0:	461a      	mov	r2, r3
 8004af2:	3301      	adds	r3, #1
 8004af4:	e7ef      	b.n	8004ad6 <d_print_comp+0x1f32>
 8004af6:	9905      	ldr	r1, [sp, #20]
 8004af8:	686a      	ldr	r2, [r5, #4]
 8004afa:	f7fe b946 	b.w	8002d8a <d_print_comp+0x1e6>
 8004afe:	9905      	ldr	r1, [sp, #20]
 8004b00:	686a      	ldr	r2, [r5, #4]
 8004b02:	f7fe b942 	b.w	8002d8a <d_print_comp+0x1e6>
 8004b06:	9905      	ldr	r1, [sp, #20]
 8004b08:	686a      	ldr	r2, [r5, #4]
 8004b0a:	f7fe b93e 	b.w	8002d8a <d_print_comp+0x1e6>
 8004b0e:	9905      	ldr	r1, [sp, #20]
 8004b10:	686a      	ldr	r2, [r5, #4]
 8004b12:	f7fe b93a 	b.w	8002d8a <d_print_comp+0x1e6>
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	2b3b      	cmp	r3, #59	; 0x3b
 8004b1c:	f47e abf6 	bne.w	800330c <d_print_comp+0x768>
 8004b20:	f105 030c 	add.w	r3, r5, #12
 8004b24:	68aa      	ldr	r2, [r5, #8]
 8004b26:	4631      	mov	r1, r6
 8004b28:	4620      	mov	r0, r4
 8004b2a:	f001 fd95 	bl	8006658 <d_maybe_print_fold_expression.isra.20>
 8004b2e:	4680      	mov	r8, r0
 8004b30:	2800      	cmp	r0, #0
 8004b32:	f040 86a0 	bne.w	8005876 <d_print_comp+0x2cd2>
 8004b36:	e9d5 7202 	ldrd	r7, r2, [r5, #8]
 8004b3a:	68b9      	ldr	r1, [r7, #8]
 8004b3c:	68d3      	ldr	r3, [r2, #12]
 8004b3e:	6808      	ldr	r0, [r1, #0]
 8004b40:	4977      	ldr	r1, [pc, #476]	; (8004d20 <d_print_comp+0x217c>)
 8004b42:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8004b46:	e9d3 a902 	ldrd	sl, r9, [r3, #8]
 8004b4a:	f002 f8bf 	bl	8006ccc <strcmp>
 8004b4e:	2800      	cmp	r0, #0
 8004b50:	f000 8674 	beq.w	800583c <d_print_comp+0x2c98>
 8004b54:	2204      	movs	r2, #4
 8004b56:	4973      	ldr	r1, [pc, #460]	; (8004d24 <d_print_comp+0x2180>)
 8004b58:	4620      	mov	r0, r4
 8004b5a:	f7fb fbff 	bl	800035c <d_append_buffer>
 8004b5e:	f8db 3008 	ldr.w	r3, [fp, #8]
 8004b62:	b303      	cbz	r3, 8004ba6 <d_print_comp+0x2002>
 8004b64:	465a      	mov	r2, fp
 8004b66:	4631      	mov	r1, r6
 8004b68:	4620      	mov	r0, r4
 8004b6a:	f001 fd23 	bl	80065b4 <d_print_subexpr>
 8004b6e:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004b72:	2fff      	cmp	r7, #255	; 0xff
 8004b74:	d110      	bne.n	8004b98 <d_print_comp+0x1ff4>
 8004b76:	4639      	mov	r1, r7
 8004b78:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004b7c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004b80:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004b84:	4620      	mov	r0, r4
 8004b86:	4798      	blx	r3
 8004b88:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004b8c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8004b90:	3301      	adds	r3, #1
 8004b92:	4647      	mov	r7, r8
 8004b94:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004b98:	2320      	movs	r3, #32
 8004b9a:	1c7a      	adds	r2, r7, #1
 8004b9c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004ba0:	55e3      	strb	r3, [r4, r7]
 8004ba2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004ba6:	4652      	mov	r2, sl
 8004ba8:	4631      	mov	r1, r6
 8004baa:	4620      	mov	r0, r4
 8004bac:	f7fd fffa 	bl	8002ba4 <d_print_comp>
 8004bb0:	f1b9 0f00 	cmp.w	r9, #0
 8004bb4:	f000 8663 	beq.w	800587e <d_print_comp+0x2cda>
 8004bb8:	464a      	mov	r2, r9
 8004bba:	4631      	mov	r1, r6
 8004bbc:	4620      	mov	r0, r4
 8004bbe:	f001 fcf9 	bl	80065b4 <d_print_subexpr>
 8004bc2:	9905      	ldr	r1, [sp, #20]
 8004bc4:	686a      	ldr	r2, [r5, #4]
 8004bc6:	f7fe b8e0 	b.w	8002d8a <d_print_comp+0x1e6>
 8004bca:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8004bce:	4956      	ldr	r1, [pc, #344]	; (8004d28 <d_print_comp+0x2184>)
 8004bd0:	f8d3 a000 	ldr.w	sl, [r3]
 8004bd4:	4650      	mov	r0, sl
 8004bd6:	f002 f879 	bl	8006ccc <strcmp>
 8004bda:	f898 3000 	ldrb.w	r3, [r8]
 8004bde:	b910      	cbnz	r0, 8004be6 <d_print_comp+0x2042>
 8004be0:	2b03      	cmp	r3, #3
 8004be2:	f000 852b 	beq.w	800563c <d_print_comp+0x2a98>
 8004be6:	2b38      	cmp	r3, #56	; 0x38
 8004be8:	f000 850c 	beq.w	8005604 <d_print_comp+0x2a60>
 8004bec:	494f      	ldr	r1, [pc, #316]	; (8004d2c <d_print_comp+0x2188>)
 8004bee:	4650      	mov	r0, sl
 8004bf0:	f002 f86c 	bl	8006ccc <strcmp>
 8004bf4:	4607      	mov	r7, r0
 8004bf6:	2800      	cmp	r0, #0
 8004bf8:	f000 8513 	beq.w	8005622 <d_print_comp+0x2a7e>
 8004bfc:	494c      	ldr	r1, [pc, #304]	; (8004d30 <d_print_comp+0x218c>)
 8004bfe:	4650      	mov	r0, sl
 8004c00:	f002 f864 	bl	8006ccc <strcmp>
 8004c04:	2800      	cmp	r0, #0
 8004c06:	f000 8333 	beq.w	8005270 <d_print_comp+0x26cc>
 8004c0a:	4631      	mov	r1, r6
 8004c0c:	4620      	mov	r0, r4
 8004c0e:	464a      	mov	r2, r9
 8004c10:	f001 fc90 	bl	8006534 <d_print_expr_op>
 8004c14:	4947      	ldr	r1, [pc, #284]	; (8004d34 <d_print_comp+0x2190>)
 8004c16:	4650      	mov	r0, sl
 8004c18:	f002 f858 	bl	8006ccc <strcmp>
 8004c1c:	2800      	cmp	r0, #0
 8004c1e:	f000 83b0 	beq.w	8005382 <d_print_comp+0x27de>
 8004c22:	4650      	mov	r0, sl
 8004c24:	4944      	ldr	r1, [pc, #272]	; (8004d38 <d_print_comp+0x2194>)
 8004c26:	f002 f851 	bl	8006ccc <strcmp>
 8004c2a:	4681      	mov	r9, r0
 8004c2c:	2800      	cmp	r0, #0
 8004c2e:	f47e abd7 	bne.w	80033e0 <d_print_comp+0x83c>
 8004c32:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004c36:	2fff      	cmp	r7, #255	; 0xff
 8004c38:	d110      	bne.n	8004c5c <d_print_comp+0x20b8>
 8004c3a:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 8004c3e:	4639      	mov	r1, r7
 8004c40:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004c44:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004c48:	4620      	mov	r0, r4
 8004c4a:	4798      	blx	r3
 8004c4c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004c50:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 8004c54:	3301      	adds	r3, #1
 8004c56:	464f      	mov	r7, r9
 8004c58:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004c5c:	1c78      	adds	r0, r7, #1
 8004c5e:	2328      	movs	r3, #40	; 0x28
 8004c60:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 8004c64:	4642      	mov	r2, r8
 8004c66:	55e3      	strb	r3, [r4, r7]
 8004c68:	4631      	mov	r1, r6
 8004c6a:	4620      	mov	r0, r4
 8004c6c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004c70:	f7fd ff98 	bl	8002ba4 <d_print_comp>
 8004c74:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004c78:	2fff      	cmp	r7, #255	; 0xff
 8004c7a:	d111      	bne.n	8004ca0 <d_print_comp+0x20fc>
 8004c7c:	2600      	movs	r6, #0
 8004c7e:	4639      	mov	r1, r7
 8004c80:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004c84:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004c88:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004c8c:	4620      	mov	r0, r4
 8004c8e:	4798      	blx	r3
 8004c90:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004c94:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004c98:	3301      	adds	r3, #1
 8004c9a:	4637      	mov	r7, r6
 8004c9c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004ca0:	1c7a      	adds	r2, r7, #1
 8004ca2:	2329      	movs	r3, #41	; 0x29
 8004ca4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004ca8:	55e3      	strb	r3, [r4, r7]
 8004caa:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004cae:	686a      	ldr	r2, [r5, #4]
 8004cb0:	9905      	ldr	r1, [sp, #20]
 8004cb2:	f7fe b86a 	b.w	8002d8a <d_print_comp+0x1e6>
 8004cb6:	f105 020c 	add.w	r2, r5, #12
 8004cba:	4641      	mov	r1, r8
 8004cbc:	4620      	mov	r0, r4
 8004cbe:	f001 f935 	bl	8005f2c <d_print_function_type.isra.15>
 8004cc2:	68aa      	ldr	r2, [r5, #8]
 8004cc4:	2a00      	cmp	r2, #0
 8004cc6:	f000 83fd 	beq.w	80054c4 <d_print_comp+0x2920>
 8004cca:	4641      	mov	r1, r8
 8004ccc:	4620      	mov	r0, r4
 8004cce:	f7fd ff69 	bl	8002ba4 <d_print_comp>
 8004cd2:	9905      	ldr	r1, [sp, #20]
 8004cd4:	686a      	ldr	r2, [r5, #4]
 8004cd6:	f7fe b858 	b.w	8002d8a <d_print_comp+0x1e6>
 8004cda:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004cde:	2fff      	cmp	r7, #255	; 0xff
 8004ce0:	d111      	bne.n	8004d06 <d_print_comp+0x2162>
 8004ce2:	2600      	movs	r6, #0
 8004ce4:	4639      	mov	r1, r7
 8004ce6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004cea:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004cee:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004cf2:	4620      	mov	r0, r4
 8004cf4:	4798      	blx	r3
 8004cf6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004cfa:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004cfe:	3301      	adds	r3, #1
 8004d00:	4637      	mov	r7, r6
 8004d02:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004d06:	2320      	movs	r3, #32
 8004d08:	1c7a      	adds	r2, r7, #1
 8004d0a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004d0e:	55e3      	strb	r3, [r4, r7]
 8004d10:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004d14:	f7fe bf72 	b.w	8003bfc <d_print_comp+0x1058>
 8004d18:	08035074 	.word	0x08035074
 8004d1c:	08034e20 	.word	0x08034e20
 8004d20:	08034e34 	.word	0x08034e34
 8004d24:	08035030 	.word	0x08035030
 8004d28:	08035018 	.word	0x08035018
 8004d2c:	0803501c 	.word	0x0803501c
 8004d30:	08034e24 	.word	0x08034e24
 8004d34:	08035020 	.word	0x08035020
 8004d38:	08035340 	.word	0x08035340
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f893 8010 	ldrb.w	r8, [r3, #16]
 8004d42:	f1b8 0f00 	cmp.w	r8, #0
 8004d46:	f43e aa89 	beq.w	800325c <d_print_comp+0x6b8>
 8004d4a:	f1b8 0f06 	cmp.w	r8, #6
 8004d4e:	f240 843f 	bls.w	80055d0 <d_print_comp+0x2a2c>
 8004d52:	f1b8 0f07 	cmp.w	r8, #7
 8004d56:	f47e aa81 	bne.w	800325c <d_print_comp+0x6b8>
 8004d5a:	68eb      	ldr	r3, [r5, #12]
 8004d5c:	781a      	ldrb	r2, [r3, #0]
 8004d5e:	2a00      	cmp	r2, #0
 8004d60:	f47e aa7c 	bne.w	800325c <d_print_comp+0x6b8>
 8004d64:	68da      	ldr	r2, [r3, #12]
 8004d66:	2a01      	cmp	r2, #1
 8004d68:	f47e aa78 	bne.w	800325c <d_print_comp+0x6b8>
 8004d6c:	283c      	cmp	r0, #60	; 0x3c
 8004d6e:	f47e aa75 	bne.w	800325c <d_print_comp+0x6b8>
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	2b30      	cmp	r3, #48	; 0x30
 8004d78:	f000 84b6 	beq.w	80056e8 <d_print_comp+0x2b44>
 8004d7c:	2b31      	cmp	r3, #49	; 0x31
 8004d7e:	f47e aa6d 	bne.w	800325c <d_print_comp+0x6b8>
 8004d82:	2204      	movs	r2, #4
 8004d84:	49c3      	ldr	r1, [pc, #780]	; (8005094 <d_print_comp+0x24f0>)
 8004d86:	4620      	mov	r0, r4
 8004d88:	f7fb fae8 	bl	800035c <d_append_buffer>
 8004d8c:	9905      	ldr	r1, [sp, #20]
 8004d8e:	686a      	ldr	r2, [r5, #4]
 8004d90:	f7fd bffb 	b.w	8002d8a <d_print_comp+0x1e6>
 8004d94:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004d98:	2fff      	cmp	r7, #255	; 0xff
 8004d9a:	d112      	bne.n	8004dc2 <d_print_comp+0x221e>
 8004d9c:	f04f 0800 	mov.w	r8, #0
 8004da0:	4639      	mov	r1, r7
 8004da2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004da6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004daa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004dae:	4620      	mov	r0, r4
 8004db0:	4798      	blx	r3
 8004db2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004db6:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8004dba:	3301      	adds	r3, #1
 8004dbc:	4647      	mov	r7, r8
 8004dbe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004dc2:	1c7a      	adds	r2, r7, #1
 8004dc4:	235b      	movs	r3, #91	; 0x5b
 8004dc6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004dca:	55e3      	strb	r3, [r4, r7]
 8004dcc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004dd0:	4631      	mov	r1, r6
 8004dd2:	68ea      	ldr	r2, [r5, #12]
 8004dd4:	4620      	mov	r0, r4
 8004dd6:	f7fd fee5 	bl	8002ba4 <d_print_comp>
 8004dda:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004dde:	2fff      	cmp	r7, #255	; 0xff
 8004de0:	d111      	bne.n	8004e06 <d_print_comp+0x2262>
 8004de2:	2600      	movs	r6, #0
 8004de4:	4639      	mov	r1, r7
 8004de6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004dea:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004dee:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004df2:	4620      	mov	r0, r4
 8004df4:	4798      	blx	r3
 8004df6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004dfa:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004dfe:	3301      	adds	r3, #1
 8004e00:	4637      	mov	r7, r6
 8004e02:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004e06:	1c7a      	adds	r2, r7, #1
 8004e08:	235d      	movs	r3, #93	; 0x5d
 8004e0a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004e0e:	55e3      	strb	r3, [r4, r7]
 8004e10:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004e14:	686a      	ldr	r2, [r5, #4]
 8004e16:	9905      	ldr	r1, [sp, #20]
 8004e18:	f7fd bfb7 	b.w	8002d8a <d_print_comp+0x1e6>
 8004e1c:	1c59      	adds	r1, r3, #1
 8004e1e:	2229      	movs	r2, #41	; 0x29
 8004e20:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004e24:	54e2      	strb	r2, [r4, r3]
 8004e26:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8004e2a:	782b      	ldrb	r3, [r5, #0]
 8004e2c:	2b3d      	cmp	r3, #61	; 0x3d
 8004e2e:	f47e aa57 	bne.w	80032e0 <d_print_comp+0x73c>
 8004e32:	29ff      	cmp	r1, #255	; 0xff
 8004e34:	d10f      	bne.n	8004e56 <d_print_comp+0x22b2>
 8004e36:	2700      	movs	r7, #0
 8004e38:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004e3c:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8004e40:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004e44:	4620      	mov	r0, r4
 8004e46:	4798      	blx	r3
 8004e48:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004e4c:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 8004e50:	3301      	adds	r3, #1
 8004e52:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004e56:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 8004e5a:	232d      	movs	r3, #45	; 0x2d
 8004e5c:	1c51      	adds	r1, r2, #1
 8004e5e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004e62:	54a3      	strb	r3, [r4, r2]
 8004e64:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004e68:	f7fe ba3a 	b.w	80032e0 <d_print_comp+0x73c>
 8004e6c:	4f8a      	ldr	r7, [pc, #552]	; (8005098 <d_print_comp+0x24f4>)
 8004e6e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004e72:	f107 0a02 	add.w	sl, r7, #2
 8004e76:	e016      	b.n	8004ea6 <d_print_comp+0x2302>
 8004e78:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004e7c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004e80:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8004e84:	4798      	blx	r3
 8004e86:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004e90:	2200      	movs	r2, #0
 8004e92:	2301      	movs	r3, #1
 8004e94:	45ba      	cmp	sl, r7
 8004e96:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004e9a:	f804 8002 	strb.w	r8, [r4, r2]
 8004e9e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8004ea2:	f43f a980 	beq.w	80041a6 <d_print_comp+0x1602>
 8004ea6:	2bff      	cmp	r3, #255	; 0xff
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	4620      	mov	r0, r4
 8004eac:	f817 8b01 	ldrb.w	r8, [r7], #1
 8004eb0:	d0e2      	beq.n	8004e78 <d_print_comp+0x22d4>
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	e7ed      	b.n	8004e94 <d_print_comp+0x22f0>
 8004eb8:	6892      	ldr	r2, [r2, #8]
 8004eba:	4631      	mov	r1, r6
 8004ebc:	4620      	mov	r0, r4
 8004ebe:	f7fd fe71 	bl	8002ba4 <d_print_comp>
 8004ec2:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 8004ec6:	b113      	cbz	r3, 8004ece <d_print_comp+0x232a>
 8004ec8:	9b08      	ldr	r3, [sp, #32]
 8004eca:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8004ece:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8004ed2:	2b3c      	cmp	r3, #60	; 0x3c
 8004ed4:	f000 82c4 	beq.w	8005460 <d_print_comp+0x28bc>
 8004ed8:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004edc:	2fff      	cmp	r7, #255	; 0xff
 8004ede:	d112      	bne.n	8004f06 <d_print_comp+0x2362>
 8004ee0:	f04f 0800 	mov.w	r8, #0
 8004ee4:	4639      	mov	r1, r7
 8004ee6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004eea:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004eee:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004ef2:	4620      	mov	r0, r4
 8004ef4:	4798      	blx	r3
 8004ef6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004efa:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8004efe:	3301      	adds	r3, #1
 8004f00:	4647      	mov	r7, r8
 8004f02:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004f06:	233c      	movs	r3, #60	; 0x3c
 8004f08:	1c7a      	adds	r2, r7, #1
 8004f0a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004f0e:	55e3      	strb	r3, [r4, r7]
 8004f10:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004f14:	68ab      	ldr	r3, [r5, #8]
 8004f16:	4631      	mov	r1, r6
 8004f18:	68da      	ldr	r2, [r3, #12]
 8004f1a:	4620      	mov	r0, r4
 8004f1c:	f7fd fe42 	bl	8002ba4 <d_print_comp>
 8004f20:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8004f24:	2b3e      	cmp	r3, #62	; 0x3e
 8004f26:	f000 827d 	beq.w	8005424 <d_print_comp+0x2880>
 8004f2a:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004f2e:	2fff      	cmp	r7, #255	; 0xff
 8004f30:	d111      	bne.n	8004f56 <d_print_comp+0x23b2>
 8004f32:	2600      	movs	r6, #0
 8004f34:	4639      	mov	r1, r7
 8004f36:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004f3a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004f3e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004f42:	4620      	mov	r0, r4
 8004f44:	4798      	blx	r3
 8004f46:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004f4a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004f4e:	3301      	adds	r3, #1
 8004f50:	4637      	mov	r7, r6
 8004f52:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004f56:	233e      	movs	r3, #62	; 0x3e
 8004f58:	1c7a      	adds	r2, r7, #1
 8004f5a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004f5e:	55e3      	strb	r3, [r4, r7]
 8004f60:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004f64:	f7ff badc 	b.w	8004520 <d_print_comp+0x197c>
 8004f68:	4f4c      	ldr	r7, [pc, #304]	; (800509c <d_print_comp+0x24f8>)
 8004f6a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004f6e:	f107 0905 	add.w	r9, r7, #5
 8004f72:	f04f 0a00 	mov.w	sl, #0
 8004f76:	e016      	b.n	8004fa6 <d_print_comp+0x2402>
 8004f78:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004f7c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004f80:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8004f84:	4798      	blx	r3
 8004f86:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004f90:	2200      	movs	r2, #0
 8004f92:	2301      	movs	r3, #1
 8004f94:	45b9      	cmp	r9, r7
 8004f96:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004f9a:	f804 8002 	strb.w	r8, [r4, r2]
 8004f9e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8004fa2:	f43e ab41 	beq.w	8003628 <d_print_comp+0xa84>
 8004fa6:	2bff      	cmp	r3, #255	; 0xff
 8004fa8:	4619      	mov	r1, r3
 8004faa:	4620      	mov	r0, r4
 8004fac:	f817 8b01 	ldrb.w	r8, [r7], #1
 8004fb0:	d0e2      	beq.n	8004f78 <d_print_comp+0x23d4>
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	e7ed      	b.n	8004f94 <d_print_comp+0x23f0>
 8004fb8:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004fbc:	2fff      	cmp	r7, #255	; 0xff
 8004fbe:	d112      	bne.n	8004fe6 <d_print_comp+0x2442>
 8004fc0:	f04f 0a00 	mov.w	sl, #0
 8004fc4:	4639      	mov	r1, r7
 8004fc6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004fca:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8004fce:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004fd2:	4620      	mov	r0, r4
 8004fd4:	4798      	blx	r3
 8004fd6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004fda:	f8c4 a100 	str.w	sl, [r4, #256]	; 0x100
 8004fde:	3301      	adds	r3, #1
 8004fe0:	4657      	mov	r7, sl
 8004fe2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004fe6:	2320      	movs	r3, #32
 8004fe8:	1c7a      	adds	r2, r7, #1
 8004fea:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004fee:	55e3      	strb	r3, [r4, r7]
 8004ff0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004ff4:	f7fe bdda 	b.w	8003bac <d_print_comp+0x1008>
 8004ff8:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
 8004ffc:	2900      	cmp	r1, #0
 8004ffe:	f6fe ad99 	blt.w	8003b34 <d_print_comp+0xf90>
 8005002:	f7fb fbc3 	bl	800078c <d_index_template_argument.part.9>
 8005006:	4602      	mov	r2, r0
 8005008:	2800      	cmp	r0, #0
 800500a:	f47e ad93 	bne.w	8003b34 <d_print_comp+0xf90>
 800500e:	2301      	movs	r3, #1
 8005010:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8005014:	686a      	ldr	r2, [r5, #4]
 8005016:	9905      	ldr	r1, [sp, #20]
 8005018:	f7fd beb7 	b.w	8002d8a <d_print_comp+0x1e6>
 800501c:	9905      	ldr	r1, [sp, #20]
 800501e:	686a      	ldr	r2, [r5, #4]
 8005020:	f7fd beb3 	b.w	8002d8a <d_print_comp+0x1e6>
 8005024:	220d      	movs	r2, #13
 8005026:	491e      	ldr	r1, [pc, #120]	; (80050a0 <d_print_comp+0x24fc>)
 8005028:	4620      	mov	r0, r4
 800502a:	f7fb f997 	bl	800035c <d_append_buffer>
 800502e:	68f9      	ldr	r1, [r7, #12]
 8005030:	4620      	mov	r0, r4
 8005032:	3101      	adds	r1, #1
 8005034:	f7fb fc84 	bl	8000940 <d_append_num>
 8005038:	2203      	movs	r2, #3
 800503a:	491a      	ldr	r1, [pc, #104]	; (80050a4 <d_print_comp+0x2500>)
 800503c:	4620      	mov	r0, r4
 800503e:	f7fb f98d 	bl	800035c <d_append_buffer>
 8005042:	68bf      	ldr	r7, [r7, #8]
 8005044:	f7ff b8b4 	b.w	80041b0 <d_print_comp+0x160c>
 8005048:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 800504c:	9905      	ldr	r1, [sp, #20]
 800504e:	686a      	ldr	r2, [r5, #4]
 8005050:	42b8      	cmp	r0, r7
 8005052:	f47d ae9a 	bne.w	8002d8a <d_print_comp+0x1e6>
 8005056:	3b01      	subs	r3, #1
 8005058:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800505c:	f7fd be95 	b.w	8002d8a <d_print_comp+0x1e6>
 8005060:	4642      	mov	r2, r8
 8005062:	465b      	mov	r3, fp
 8005064:	46ab      	mov	fp, r5
 8005066:	f1bb 0f04 	cmp.w	fp, #4
 800506a:	46a0      	mov	r8, r4
 800506c:	461d      	mov	r5, r3
 800506e:	4614      	mov	r4, r2
 8005070:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
 8005074:	f000 82a3 	beq.w	80055be <d_print_comp+0x2a1a>
 8005078:	f1bb 0f02 	cmp.w	fp, #2
 800507c:	d137      	bne.n	80050ee <d_print_comp+0x254a>
 800507e:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 8005082:	f89a 3000 	ldrb.w	r3, [sl]
 8005086:	2b46      	cmp	r3, #70	; 0x46
 8005088:	f000 8327 	beq.w	80056da <d_print_comp+0x2b36>
 800508c:	eb09 1207 	add.w	r2, r9, r7, lsl #4
 8005090:	3a0c      	subs	r2, #12
 8005092:	e020      	b.n	80050d6 <d_print_comp+0x2532>
 8005094:	0803504c 	.word	0x0803504c
 8005098:	08034e70 	.word	0x08034e70
 800509c:	08034fe4 	.word	0x08034fe4
 80050a0:	08034e74 	.word	0x08034e74
 80050a4:	08034e84 	.word	0x08034e84
 80050a8:	2f04      	cmp	r7, #4
 80050aa:	f43f a81d 	beq.w	80040e8 <d_print_comp+0x1544>
 80050ae:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 80050b2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80050b6:	2300      	movs	r3, #0
 80050b8:	f84e 3c0c 	str.w	r3, [lr, #-12]
 80050bc:	f84e ac10 	str.w	sl, [lr, #-16]
 80050c0:	9b01      	ldr	r3, [sp, #4]
 80050c2:	f8da a008 	ldr.w	sl, [sl, #8]
 80050c6:	f8c4 c114 	str.w	ip, [r4, #276]	; 0x114
 80050ca:	3701      	adds	r7, #1
 80050cc:	f84e bc04 	str.w	fp, [lr, #-4]
 80050d0:	f84e 3c08 	str.w	r3, [lr, #-8]
 80050d4:	4672      	mov	r2, lr
 80050d6:	f89a 0000 	ldrb.w	r0, [sl]
 80050da:	f7fb f975 	bl	80003c8 <is_fnqual_component_type>
 80050de:	f1a2 0b04 	sub.w	fp, r2, #4
 80050e2:	f102 0e10 	add.w	lr, r2, #16
 80050e6:	f102 0c0c 	add.w	ip, r2, #12
 80050ea:	2800      	cmp	r0, #0
 80050ec:	d1dc      	bne.n	80050a8 <d_print_comp+0x2504>
 80050ee:	68ea      	ldr	r2, [r5, #12]
 80050f0:	4631      	mov	r1, r6
 80050f2:	4620      	mov	r0, r4
 80050f4:	f7fd fd56 	bl	8002ba4 <d_print_comp>
 80050f8:	f898 3000 	ldrb.w	r3, [r8]
 80050fc:	2b04      	cmp	r3, #4
 80050fe:	bf04      	itt	eq
 8005100:	9b06      	ldreq	r3, [sp, #24]
 8005102:	f8c4 3110 	streq.w	r3, [r4, #272]	; 0x110
 8005106:	013f      	lsls	r7, r7, #4
 8005108:	f04f 0a20 	mov.w	sl, #32
 800510c:	46a8      	mov	r8, r5
 800510e:	eb09 0b07 	add.w	fp, r9, r7
 8005112:	f85b 5c08 	ldr.w	r5, [fp, #-8]
 8005116:	bb0d      	cbnz	r5, 800515c <d_print_comp+0x25b8>
 8005118:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800511c:	2bff      	cmp	r3, #255	; 0xff
 800511e:	4620      	mov	r0, r4
 8005120:	4619      	mov	r1, r3
 8005122:	d10e      	bne.n	8005142 <d_print_comp+0x259e>
 8005124:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005128:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800512c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005130:	4798      	blx	r3
 8005132:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005136:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 800513a:	1c5a      	adds	r2, r3, #1
 800513c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005140:	462b      	mov	r3, r5
 8005142:	1c59      	adds	r1, r3, #1
 8005144:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005148:	f85b 2c0c 	ldr.w	r2, [fp, #-12]
 800514c:	f804 a003 	strb.w	sl, [r4, r3]
 8005150:	4631      	mov	r1, r6
 8005152:	4620      	mov	r0, r4
 8005154:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8005158:	f000 fbba 	bl	80058d0 <d_print_mod>
 800515c:	3f10      	subs	r7, #16
 800515e:	d1d6      	bne.n	800510e <d_print_comp+0x256a>
 8005160:	9b02      	ldr	r3, [sp, #8]
 8005162:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8005166:	4645      	mov	r5, r8
 8005168:	f7fe bfc1 	b.w	80040ee <d_print_comp+0x154a>
 800516c:	4631      	mov	r1, r6
 800516e:	68aa      	ldr	r2, [r5, #8]
 8005170:	4620      	mov	r0, r4
 8005172:	f7fd fd17 	bl	8002ba4 <d_print_comp>
 8005176:	9905      	ldr	r1, [sp, #20]
 8005178:	686a      	ldr	r2, [r5, #4]
 800517a:	f7fd be06 	b.w	8002d8a <d_print_comp+0x1e6>
 800517e:	460f      	mov	r7, r1
 8005180:	46a9      	mov	r9, r5
 8005182:	f7fe bebb 	b.w	8003efc <d_print_comp+0x1358>
 8005186:	4644      	mov	r4, r8
 8005188:	465d      	mov	r5, fp
 800518a:	f8c8 1114 	str.w	r1, [r8, #276]	; 0x114
 800518e:	f7fe bfab 	b.w	80040e8 <d_print_comp+0x1544>
 8005192:	68ea      	ldr	r2, [r5, #12]
 8005194:	4631      	mov	r1, r6
 8005196:	4620      	mov	r0, r4
 8005198:	f7fd fd04 	bl	8002ba4 <d_print_comp>
 800519c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800519e:	9a01      	ldr	r2, [sp, #4]
 80051a0:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f43e ab19 	beq.w	80037dc <d_print_comp+0xc38>
 80051aa:	f7fe bb1f 	b.w	80037ec <d_print_comp+0xc48>
 80051ae:	2301      	movs	r3, #1
 80051b0:	4664      	mov	r4, ip
 80051b2:	f8cc 3118 	str.w	r3, [ip, #280]	; 0x118
 80051b6:	f7fe bb19 	b.w	80037ec <d_print_comp+0xc48>
 80051ba:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80051be:	f7fe bead 	b.w	8003f1c <d_print_comp+0x1378>
 80051c2:	4631      	mov	r1, r6
 80051c4:	68aa      	ldr	r2, [r5, #8]
 80051c6:	4620      	mov	r0, r4
 80051c8:	f001 f9f4 	bl	80065b4 <d_print_subexpr>
 80051cc:	2203      	movs	r2, #3
 80051ce:	49bf      	ldr	r1, [pc, #764]	; (80054cc <d_print_comp+0x2928>)
 80051d0:	4620      	mov	r0, r4
 80051d2:	f7fb f8c3 	bl	800035c <d_append_buffer>
 80051d6:	9905      	ldr	r1, [sp, #20]
 80051d8:	686a      	ldr	r2, [r5, #4]
 80051da:	f7fd bdd6 	b.w	8002d8a <d_print_comp+0x1e6>
 80051de:	f8d4 e130 	ldr.w	lr, [r4, #304]	; 0x130
 80051e2:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
 80051e6:	f1be 0f00 	cmp.w	lr, #0
 80051ea:	dd17      	ble.n	800521c <d_print_comp+0x2678>
 80051ec:	6810      	ldr	r0, [r2, #0]
 80051ee:	4581      	cmp	r9, r0
 80051f0:	f000 81a7 	beq.w	8005542 <d_print_comp+0x299e>
 80051f4:	f102 0b08 	add.w	fp, r2, #8
 80051f8:	46bc      	mov	ip, r7
 80051fa:	9101      	str	r1, [sp, #4]
 80051fc:	4670      	mov	r0, lr
 80051fe:	e004      	b.n	800520a <d_print_comp+0x2666>
 8005200:	f852 103c 	ldr.w	r1, [r2, ip, lsl #3]
 8005204:	4589      	cmp	r9, r1
 8005206:	f000 819d 	beq.w	8005544 <d_print_comp+0x29a0>
 800520a:	f10c 0c01 	add.w	ip, ip, #1
 800520e:	4560      	cmp	r0, ip
 8005210:	46da      	mov	sl, fp
 8005212:	f10b 0b08 	add.w	fp, fp, #8
 8005216:	d1f3      	bne.n	8005200 <d_print_comp+0x265c>
 8005218:	9901      	ldr	r1, [sp, #4]
 800521a:	4686      	mov	lr, r0
 800521c:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
 8005220:	459e      	cmp	lr, r3
 8005222:	f280 8344 	bge.w	80058ae <d_print_comp+0x2d0a>
 8005226:	f10e 0301 	add.w	r3, lr, #1
 800522a:	eb02 0cce 	add.w	ip, r2, lr, lsl #3
 800522e:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
 8005232:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
 8005236:	f842 903e 	str.w	r9, [r2, lr, lsl #3]
 800523a:	f10c 0c04 	add.w	ip, ip, #4
 800523e:	2800      	cmp	r0, #0
 8005240:	f000 825b 	beq.w	80056fa <d_print_comp+0x2b56>
 8005244:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 8005248:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 800524c:	429a      	cmp	r2, r3
 800524e:	f102 0e01 	add.w	lr, r2, #1
 8005252:	f280 832c 	bge.w	80058ae <d_print_comp+0x2d0a>
 8005256:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800525a:	f8c4 e13c 	str.w	lr, [r4, #316]	; 0x13c
 800525e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005262:	6842      	ldr	r2, [r0, #4]
 8005264:	605a      	str	r2, [r3, #4]
 8005266:	f8cc 3000 	str.w	r3, [ip]
 800526a:	6800      	ldr	r0, [r0, #0]
 800526c:	469c      	mov	ip, r3
 800526e:	e7e6      	b.n	800523e <d_print_comp+0x269a>
 8005270:	4606      	mov	r6, r0
 8005272:	4647      	mov	r7, r8
 8005274:	e001      	b.n	800527a <d_print_comp+0x26d6>
 8005276:	68ff      	ldr	r7, [r7, #12]
 8005278:	b31f      	cbz	r7, 80052c2 <d_print_comp+0x271e>
 800527a:	783b      	ldrb	r3, [r7, #0]
 800527c:	2b2f      	cmp	r3, #47	; 0x2f
 800527e:	d120      	bne.n	80052c2 <d_print_comp+0x271e>
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	b1f3      	cbz	r3, 80052c2 <d_print_comp+0x271e>
 8005284:	781a      	ldrb	r2, [r3, #0]
 8005286:	2a4a      	cmp	r2, #74	; 0x4a
 8005288:	bf18      	it	ne
 800528a:	3601      	addne	r6, #1
 800528c:	d1f3      	bne.n	8005276 <d_print_comp+0x26d2>
 800528e:	6899      	ldr	r1, [r3, #8]
 8005290:	4620      	mov	r0, r4
 8005292:	f7fb faa1 	bl	80007d8 <d_find_pack>
 8005296:	2800      	cmp	r0, #0
 8005298:	f000 81ef 	beq.w	800567a <d_print_comp+0x2ad6>
 800529c:	7803      	ldrb	r3, [r0, #0]
 800529e:	2b2f      	cmp	r3, #47	; 0x2f
 80052a0:	f040 81eb 	bne.w	800567a <d_print_comp+0x2ad6>
 80052a4:	6883      	ldr	r3, [r0, #8]
 80052a6:	b153      	cbz	r3, 80052be <d_print_comp+0x271a>
 80052a8:	2300      	movs	r3, #0
 80052aa:	e004      	b.n	80052b6 <d_print_comp+0x2712>
 80052ac:	7802      	ldrb	r2, [r0, #0]
 80052ae:	2a2f      	cmp	r2, #47	; 0x2f
 80052b0:	d105      	bne.n	80052be <d_print_comp+0x271a>
 80052b2:	6882      	ldr	r2, [r0, #8]
 80052b4:	b11a      	cbz	r2, 80052be <d_print_comp+0x271a>
 80052b6:	68c0      	ldr	r0, [r0, #12]
 80052b8:	3301      	adds	r3, #1
 80052ba:	2800      	cmp	r0, #0
 80052bc:	d1f6      	bne.n	80052ac <d_print_comp+0x2708>
 80052be:	441e      	add	r6, r3
 80052c0:	e7d9      	b.n	8005276 <d_print_comp+0x26d2>
 80052c2:	4631      	mov	r1, r6
 80052c4:	4620      	mov	r0, r4
 80052c6:	f7fb fb3b 	bl	8000940 <d_append_num>
 80052ca:	9905      	ldr	r1, [sp, #20]
 80052cc:	686a      	ldr	r2, [r5, #4]
 80052ce:	f7fd bd5c 	b.w	8002d8a <d_print_comp+0x1e6>
 80052d2:	4631      	mov	r1, r6
 80052d4:	4620      	mov	r0, r4
 80052d6:	f001 f92d 	bl	8006534 <d_print_expr_op>
 80052da:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80052de:	2fff      	cmp	r7, #255	; 0xff
 80052e0:	d112      	bne.n	8005308 <d_print_comp+0x2764>
 80052e2:	f04f 0800 	mov.w	r8, #0
 80052e6:	4639      	mov	r1, r7
 80052e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80052ec:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80052f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80052f4:	4620      	mov	r0, r4
 80052f6:	4798      	blx	r3
 80052f8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80052fc:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8005300:	3301      	adds	r3, #1
 8005302:	4647      	mov	r7, r8
 8005304:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005308:	1c7a      	adds	r2, r7, #1
 800530a:	233c      	movs	r3, #60	; 0x3c
 800530c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005310:	55e3      	strb	r3, [r4, r7]
 8005312:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005316:	68eb      	ldr	r3, [r5, #12]
 8005318:	4631      	mov	r1, r6
 800531a:	689a      	ldr	r2, [r3, #8]
 800531c:	4620      	mov	r0, r4
 800531e:	f7fd fc41 	bl	8002ba4 <d_print_comp>
 8005322:	2202      	movs	r2, #2
 8005324:	496a      	ldr	r1, [pc, #424]	; (80054d0 <d_print_comp+0x292c>)
 8005326:	4620      	mov	r0, r4
 8005328:	f7fb f818 	bl	800035c <d_append_buffer>
 800532c:	68eb      	ldr	r3, [r5, #12]
 800532e:	4631      	mov	r1, r6
 8005330:	68da      	ldr	r2, [r3, #12]
 8005332:	4620      	mov	r0, r4
 8005334:	f7fd fc36 	bl	8002ba4 <d_print_comp>
 8005338:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800533c:	2fff      	cmp	r7, #255	; 0xff
 800533e:	d111      	bne.n	8005364 <d_print_comp+0x27c0>
 8005340:	2600      	movs	r6, #0
 8005342:	4639      	mov	r1, r7
 8005344:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005348:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800534c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005350:	4620      	mov	r0, r4
 8005352:	4798      	blx	r3
 8005354:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005358:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800535c:	3301      	adds	r3, #1
 800535e:	4637      	mov	r7, r6
 8005360:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005364:	1c7a      	adds	r2, r7, #1
 8005366:	2329      	movs	r3, #41	; 0x29
 8005368:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800536c:	55e3      	strb	r3, [r4, r7]
 800536e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005372:	686a      	ldr	r2, [r5, #4]
 8005374:	9905      	ldr	r1, [sp, #20]
 8005376:	f7fd bd08 	b.w	8002d8a <d_print_comp+0x1e6>
 800537a:	9905      	ldr	r1, [sp, #20]
 800537c:	686a      	ldr	r2, [r5, #4]
 800537e:	f7fd bd04 	b.w	8002d8a <d_print_comp+0x1e6>
 8005382:	4642      	mov	r2, r8
 8005384:	4631      	mov	r1, r6
 8005386:	4620      	mov	r0, r4
 8005388:	f7fd fc0c 	bl	8002ba4 <d_print_comp>
 800538c:	9905      	ldr	r1, [sp, #20]
 800538e:	686a      	ldr	r2, [r5, #4]
 8005390:	f7fd bcfb 	b.w	8002d8a <d_print_comp+0x1e6>
 8005394:	a918      	add	r1, sp, #96	; 0x60
 8005396:	4620      	mov	r0, r4
 8005398:	f841 3d40 	str.w	r3, [r1, #-64]!
 800539c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80053a0:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
 80053a4:	4641      	mov	r1, r8
 80053a6:	960a      	str	r6, [sp, #40]	; 0x28
 80053a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80053aa:	9509      	str	r5, [sp, #36]	; 0x24
 80053ac:	f7fd fbfa 	bl	8002ba4 <d_print_comp>
 80053b0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80053b2:	9b08      	ldr	r3, [sp, #32]
 80053b4:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 80053b8:	b9ee      	cbnz	r6, 80053f6 <d_print_comp+0x2852>
 80053ba:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80053be:	2fff      	cmp	r7, #255	; 0xff
 80053c0:	d110      	bne.n	80053e4 <d_print_comp+0x2840>
 80053c2:	4639      	mov	r1, r7
 80053c4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80053c8:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80053cc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80053d0:	4620      	mov	r0, r4
 80053d2:	4798      	blx	r3
 80053d4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80053d8:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80053dc:	3301      	adds	r3, #1
 80053de:	4637      	mov	r7, r6
 80053e0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80053e4:	2320      	movs	r3, #32
 80053e6:	1c7a      	adds	r2, r7, #1
 80053e8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80053ec:	55e3      	strb	r3, [r4, r7]
 80053ee:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80053f2:	f7fe ba0c 	b.w	800380e <d_print_comp+0xc6a>
 80053f6:	9905      	ldr	r1, [sp, #20]
 80053f8:	686a      	ldr	r2, [r5, #4]
 80053fa:	f7fd bcc6 	b.w	8002d8a <d_print_comp+0x1e6>
 80053fe:	4935      	ldr	r1, [pc, #212]	; (80054d4 <d_print_comp+0x2930>)
 8005400:	68b8      	ldr	r0, [r7, #8]
 8005402:	f029 fd37 	bl	802ee74 <strncmp>
 8005406:	2800      	cmp	r0, #0
 8005408:	f47e abc6 	bne.w	8003b98 <d_print_comp+0xff4>
 800540c:	4631      	mov	r1, r6
 800540e:	68ea      	ldr	r2, [r5, #12]
 8005410:	4620      	mov	r0, r4
 8005412:	f7fd fbc7 	bl	8002ba4 <d_print_comp>
 8005416:	2202      	movs	r2, #2
 8005418:	492f      	ldr	r1, [pc, #188]	; (80054d8 <d_print_comp+0x2934>)
 800541a:	4620      	mov	r0, r4
 800541c:	f7fa ff9e 	bl	800035c <d_append_buffer>
 8005420:	f7fe bc09 	b.w	8003c36 <d_print_comp+0x1092>
 8005424:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8005428:	2fff      	cmp	r7, #255	; 0xff
 800542a:	d111      	bne.n	8005450 <d_print_comp+0x28ac>
 800542c:	2600      	movs	r6, #0
 800542e:	4639      	mov	r1, r7
 8005430:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005434:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005438:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800543c:	4620      	mov	r0, r4
 800543e:	4798      	blx	r3
 8005440:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005444:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005448:	3301      	adds	r3, #1
 800544a:	4637      	mov	r7, r6
 800544c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005450:	2320      	movs	r3, #32
 8005452:	1c7a      	adds	r2, r7, #1
 8005454:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005458:	55e3      	strb	r3, [r4, r7]
 800545a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800545e:	e564      	b.n	8004f2a <d_print_comp+0x2386>
 8005460:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8005464:	2fff      	cmp	r7, #255	; 0xff
 8005466:	d112      	bne.n	800548e <d_print_comp+0x28ea>
 8005468:	f04f 0800 	mov.w	r8, #0
 800546c:	4639      	mov	r1, r7
 800546e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005472:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005476:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800547a:	4620      	mov	r0, r4
 800547c:	4798      	blx	r3
 800547e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005482:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8005486:	3301      	adds	r3, #1
 8005488:	4647      	mov	r7, r8
 800548a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800548e:	2320      	movs	r3, #32
 8005490:	1c7a      	adds	r2, r7, #1
 8005492:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005496:	55e3      	strb	r3, [r4, r7]
 8005498:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800549c:	e51c      	b.n	8004ed8 <d_print_comp+0x2334>
 800549e:	4640      	mov	r0, r8
 80054a0:	490e      	ldr	r1, [pc, #56]	; (80054dc <d_print_comp+0x2938>)
 80054a2:	f001 fc13 	bl	8006ccc <strcmp>
 80054a6:	2800      	cmp	r0, #0
 80054a8:	f040 81fb 	bne.w	80058a2 <d_print_comp+0x2cfe>
 80054ac:	68eb      	ldr	r3, [r5, #12]
 80054ae:	4631      	mov	r1, r6
 80054b0:	68da      	ldr	r2, [r3, #12]
 80054b2:	4620      	mov	r0, r4
 80054b4:	f001 f87e 	bl	80065b4 <d_print_subexpr>
 80054b8:	f7fd bc60 	b.w	8002d7c <d_print_comp+0x1d8>
 80054bc:	9905      	ldr	r1, [sp, #20]
 80054be:	686a      	ldr	r2, [r5, #4]
 80054c0:	f7fd bc63 	b.w	8002d8a <d_print_comp+0x1e6>
 80054c4:	9905      	ldr	r1, [sp, #20]
 80054c6:	686a      	ldr	r2, [r5, #4]
 80054c8:	f7fd bc5f 	b.w	8002d8a <d_print_comp+0x1e6>
 80054cc:	08035070 	.word	0x08035070
 80054d0:	08035024 	.word	0x08035024
 80054d4:	08034e88 	.word	0x08034e88
 80054d8:	08034e90 	.word	0x08034e90
 80054dc:	08034e28 	.word	0x08034e28
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	689a      	ldr	r2, [r3, #8]
 80054e4:	2a01      	cmp	r2, #1
 80054e6:	f47d ac4e 	bne.w	8002d86 <d_print_comp+0x1e2>
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	2b3e      	cmp	r3, #62	; 0x3e
 80054f0:	f47d ac49 	bne.w	8002d86 <d_print_comp+0x1e2>
 80054f4:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80054f8:	2fff      	cmp	r7, #255	; 0xff
 80054fa:	d111      	bne.n	8005520 <d_print_comp+0x297c>
 80054fc:	2600      	movs	r6, #0
 80054fe:	4639      	mov	r1, r7
 8005500:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005504:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005508:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800550c:	4620      	mov	r0, r4
 800550e:	4798      	blx	r3
 8005510:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005514:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005518:	3301      	adds	r3, #1
 800551a:	4637      	mov	r7, r6
 800551c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005520:	1c7a      	adds	r2, r7, #1
 8005522:	2329      	movs	r3, #41	; 0x29
 8005524:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005528:	55e3      	strb	r3, [r4, r7]
 800552a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800552e:	686a      	ldr	r2, [r5, #4]
 8005530:	9905      	ldr	r1, [sp, #20]
 8005532:	f7fd bc2a 	b.w	8002d8a <d_print_comp+0x1e6>
 8005536:	2a05      	cmp	r2, #5
 8005538:	f200 80a9 	bhi.w	800568e <d_print_comp+0x2aea>
 800553c:	3b57      	subs	r3, #87	; 0x57
 800553e:	f7ff ba1d 	b.w	800497c <d_print_comp+0x1dd8>
 8005542:	4692      	mov	sl, r2
 8005544:	461a      	mov	r2, r3
 8005546:	e001      	b.n	800554c <d_print_comp+0x29a8>
 8005548:	6852      	ldr	r2, [r2, #4]
 800554a:	b342      	cbz	r2, 800559e <d_print_comp+0x29fa>
 800554c:	6811      	ldr	r1, [r2, #0]
 800554e:	4589      	cmp	r9, r1
 8005550:	d003      	beq.n	800555a <d_print_comp+0x29b6>
 8005552:	428d      	cmp	r5, r1
 8005554:	d1f8      	bne.n	8005548 <d_print_comp+0x29a4>
 8005556:	429a      	cmp	r2, r3
 8005558:	d0f6      	beq.n	8005548 <d_print_comp+0x29a4>
 800555a:	f109 0108 	add.w	r1, r9, #8
 800555e:	4620      	mov	r0, r4
 8005560:	f7fb f92a 	bl	80007b8 <d_lookup_template_argument.isra.10>
 8005564:	4681      	mov	r9, r0
 8005566:	b198      	cbz	r0, 8005590 <d_print_comp+0x29ec>
 8005568:	f899 3000 	ldrb.w	r3, [r9]
 800556c:	2b2f      	cmp	r3, #47	; 0x2f
 800556e:	f47e acb6 	bne.w	8003ede <d_print_comp+0x133a>
 8005572:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
 8005576:	2900      	cmp	r1, #0
 8005578:	f6fe acb6 	blt.w	8003ee8 <d_print_comp+0x1344>
 800557c:	4648      	mov	r0, r9
 800557e:	f7fb f905 	bl	800078c <d_index_template_argument.part.9>
 8005582:	4681      	mov	r9, r0
 8005584:	2800      	cmp	r0, #0
 8005586:	f47e acaa 	bne.w	8003ede <d_print_comp+0x133a>
 800558a:	b10f      	cbz	r7, 8005590 <d_print_comp+0x29ec>
 800558c:	f8c4 8110 	str.w	r8, [r4, #272]	; 0x110
 8005590:	2301      	movs	r3, #1
 8005592:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8005596:	686a      	ldr	r2, [r5, #4]
 8005598:	9905      	ldr	r1, [sp, #20]
 800559a:	f7fd bbf6 	b.w	8002d8a <d_print_comp+0x1e6>
 800559e:	f8da 3004 	ldr.w	r3, [sl, #4]
 80055a2:	f8d4 8110 	ldr.w	r8, [r4, #272]	; 0x110
 80055a6:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80055aa:	f109 0108 	add.w	r1, r9, #8
 80055ae:	4620      	mov	r0, r4
 80055b0:	f7fb f902 	bl	80007b8 <d_lookup_template_argument.isra.10>
 80055b4:	2701      	movs	r7, #1
 80055b6:	4681      	mov	r9, r0
 80055b8:	2800      	cmp	r0, #0
 80055ba:	d1d5      	bne.n	8005568 <d_print_comp+0x29c4>
 80055bc:	e7e6      	b.n	800558c <d_print_comp+0x29e8>
 80055be:	ab18      	add	r3, sp, #96	; 0x60
 80055c0:	9a01      	ldr	r2, [sp, #4]
 80055c2:	f843 2d48 	str.w	r2, [r3, #-72]!
 80055c6:	f8cd 801c 	str.w	r8, [sp, #28]
 80055ca:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80055ce:	e58e      	b.n	80050ee <d_print_comp+0x254a>
 80055d0:	68eb      	ldr	r3, [r5, #12]
 80055d2:	f893 9000 	ldrb.w	r9, [r3]
 80055d6:	f1b9 0f00 	cmp.w	r9, #0
 80055da:	f47d ae3f 	bne.w	800325c <d_print_comp+0x6b8>
 80055de:	283d      	cmp	r0, #61	; 0x3d
 80055e0:	f000 80e6 	beq.w	80057b0 <d_print_comp+0x2c0c>
 80055e4:	4631      	mov	r1, r6
 80055e6:	68ea      	ldr	r2, [r5, #12]
 80055e8:	4620      	mov	r0, r4
 80055ea:	f1a8 0802 	sub.w	r8, r8, #2
 80055ee:	f7fd fad9 	bl	8002ba4 <d_print_comp>
 80055f2:	f1b8 0f04 	cmp.w	r8, #4
 80055f6:	f200 80d7 	bhi.w	80057a8 <d_print_comp+0x2c04>
 80055fa:	e8df f008 	tbb	[pc, r8]
 80055fe:	93b4      	.short	0x93b4
 8005600:	818a      	.short	0x818a
 8005602:	35          	.byte	0x35
 8005603:	00          	.byte	0x00
 8005604:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8005608:	4631      	mov	r1, r6
 800560a:	4620      	mov	r0, r4
 800560c:	f000 ffd2 	bl	80065b4 <d_print_subexpr>
 8005610:	464a      	mov	r2, r9
 8005612:	4631      	mov	r1, r6
 8005614:	4620      	mov	r0, r4
 8005616:	f000 ff8d 	bl	8006534 <d_print_expr_op>
 800561a:	9905      	ldr	r1, [sp, #20]
 800561c:	686a      	ldr	r2, [r5, #4]
 800561e:	f7fd bbb4 	b.w	8002d8a <d_print_comp+0x1e6>
 8005622:	4641      	mov	r1, r8
 8005624:	4620      	mov	r0, r4
 8005626:	f7fb f8d7 	bl	80007d8 <d_find_pack>
 800562a:	b1a8      	cbz	r0, 8005658 <d_print_comp+0x2ab4>
 800562c:	7803      	ldrb	r3, [r0, #0]
 800562e:	2b2f      	cmp	r3, #47	; 0x2f
 8005630:	d112      	bne.n	8005658 <d_print_comp+0x2ab4>
 8005632:	6883      	ldr	r3, [r0, #8]
 8005634:	b183      	cbz	r3, 8005658 <d_print_comp+0x2ab4>
 8005636:	68c0      	ldr	r0, [r0, #12]
 8005638:	3701      	adds	r7, #1
 800563a:	e7f6      	b.n	800562a <d_print_comp+0x2a86>
 800563c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005640:	781a      	ldrb	r2, [r3, #0]
 8005642:	2a01      	cmp	r2, #1
 8005644:	f47f aad2 	bne.w	8004bec <d_print_comp+0x2048>
 8005648:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800564c:	7812      	ldrb	r2, [r2, #0]
 800564e:	2a29      	cmp	r2, #41	; 0x29
 8005650:	bf08      	it	eq
 8005652:	4698      	moveq	r8, r3
 8005654:	f7ff baca 	b.w	8004bec <d_print_comp+0x2048>
 8005658:	4639      	mov	r1, r7
 800565a:	4620      	mov	r0, r4
 800565c:	f7fb f970 	bl	8000940 <d_append_num>
 8005660:	9905      	ldr	r1, [sp, #20]
 8005662:	686a      	ldr	r2, [r5, #4]
 8005664:	f7fd bb91 	b.w	8002d8a <d_print_comp+0x1e6>
 8005668:	2203      	movs	r2, #3
 800566a:	4994      	ldr	r1, [pc, #592]	; (80058bc <d_print_comp+0x2d18>)
 800566c:	4620      	mov	r0, r4
 800566e:	f7fa fe75 	bl	800035c <d_append_buffer>
 8005672:	9905      	ldr	r1, [sp, #20]
 8005674:	686a      	ldr	r2, [r5, #4]
 8005676:	f7fd bb88 	b.w	8002d8a <d_print_comp+0x1e6>
 800567a:	2300      	movs	r3, #0
 800567c:	441e      	add	r6, r3
 800567e:	e5fa      	b.n	8005276 <d_print_comp+0x26d2>
 8005680:	464a      	mov	r2, r9
 8005682:	4631      	mov	r1, r6
 8005684:	4620      	mov	r0, r4
 8005686:	f000 ff55 	bl	8006534 <d_print_expr_op>
 800568a:	f7fd bea9 	b.w	80033e0 <d_print_comp+0x83c>
 800568e:	2b5f      	cmp	r3, #95	; 0x5f
 8005690:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005694:	f47f a964 	bne.w	8004960 <d_print_comp+0x1dbc>
 8005698:	28ff      	cmp	r0, #255	; 0xff
 800569a:	f63f a961 	bhi.w	8004960 <d_print_comp+0x1dbc>
 800569e:	29ff      	cmp	r1, #255	; 0xff
 80056a0:	fa5f f980 	uxtb.w	r9, r0
 80056a4:	d10f      	bne.n	80056c6 <d_print_comp+0x2b22>
 80056a6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80056aa:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80056ae:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80056b2:	4620      	mov	r0, r4
 80056b4:	4798      	blx	r3
 80056b6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80056ba:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 80056be:	3301      	adds	r3, #1
 80056c0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80056c4:	2100      	movs	r1, #0
 80056c6:	1c4b      	adds	r3, r1, #1
 80056c8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80056cc:	4657      	mov	r7, sl
 80056ce:	f804 9001 	strb.w	r9, [r4, r1]
 80056d2:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80056d6:	f7ff b935 	b.w	8004944 <d_print_comp+0x1da0>
 80056da:	f8da a008 	ldr.w	sl, [sl, #8]
 80056de:	f1ba 0f00 	cmp.w	sl, #0
 80056e2:	f43e ad01 	beq.w	80040e8 <d_print_comp+0x1544>
 80056e6:	e4d1      	b.n	800508c <d_print_comp+0x24e8>
 80056e8:	2205      	movs	r2, #5
 80056ea:	4975      	ldr	r1, [pc, #468]	; (80058c0 <d_print_comp+0x2d1c>)
 80056ec:	4620      	mov	r0, r4
 80056ee:	f7fa fe35 	bl	800035c <d_append_buffer>
 80056f2:	9905      	ldr	r1, [sp, #20]
 80056f4:	686a      	ldr	r2, [r5, #4]
 80056f6:	f7fd bb48 	b.w	8002d8a <d_print_comp+0x1e6>
 80056fa:	f8cc 0000 	str.w	r0, [ip]
 80056fe:	e72c      	b.n	800555a <d_print_comp+0x29b6>
 8005700:	2202      	movs	r2, #2
 8005702:	4970      	ldr	r1, [pc, #448]	; (80058c4 <d_print_comp+0x2d20>)
 8005704:	4620      	mov	r0, r4
 8005706:	f7fa fe29 	bl	800035c <d_append_buffer>
 800570a:	9905      	ldr	r1, [sp, #20]
 800570c:	686a      	ldr	r2, [r5, #4]
 800570e:	f7fd bb3c 	b.w	8002d8a <d_print_comp+0x1e6>
 8005712:	2202      	movs	r2, #2
 8005714:	496c      	ldr	r1, [pc, #432]	; (80058c8 <d_print_comp+0x2d24>)
 8005716:	4620      	mov	r0, r4
 8005718:	f7fa fe20 	bl	800035c <d_append_buffer>
 800571c:	9905      	ldr	r1, [sp, #20]
 800571e:	686a      	ldr	r2, [r5, #4]
 8005720:	f7fd bb33 	b.w	8002d8a <d_print_comp+0x1e6>
 8005724:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8005728:	2fff      	cmp	r7, #255	; 0xff
 800572a:	d111      	bne.n	8005750 <d_print_comp+0x2bac>
 800572c:	2600      	movs	r6, #0
 800572e:	4639      	mov	r1, r7
 8005730:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005734:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005738:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800573c:	4620      	mov	r0, r4
 800573e:	4798      	blx	r3
 8005740:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005744:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005748:	3301      	adds	r3, #1
 800574a:	4637      	mov	r7, r6
 800574c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005750:	1c7a      	adds	r2, r7, #1
 8005752:	236c      	movs	r3, #108	; 0x6c
 8005754:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005758:	55e3      	strb	r3, [r4, r7]
 800575a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800575e:	686a      	ldr	r2, [r5, #4]
 8005760:	9905      	ldr	r1, [sp, #20]
 8005762:	f7fd bb12 	b.w	8002d8a <d_print_comp+0x1e6>
 8005766:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800576a:	2fff      	cmp	r7, #255	; 0xff
 800576c:	d111      	bne.n	8005792 <d_print_comp+0x2bee>
 800576e:	2600      	movs	r6, #0
 8005770:	4639      	mov	r1, r7
 8005772:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005776:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800577a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800577e:	4620      	mov	r0, r4
 8005780:	4798      	blx	r3
 8005782:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005786:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800578a:	3301      	adds	r3, #1
 800578c:	4637      	mov	r7, r6
 800578e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005792:	1c7a      	adds	r2, r7, #1
 8005794:	2375      	movs	r3, #117	; 0x75
 8005796:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800579a:	55e3      	strb	r3, [r4, r7]
 800579c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80057a0:	686a      	ldr	r2, [r5, #4]
 80057a2:	9905      	ldr	r1, [sp, #20]
 80057a4:	f7fd baf1 	b.w	8002d8a <d_print_comp+0x1e6>
 80057a8:	9905      	ldr	r1, [sp, #20]
 80057aa:	686a      	ldr	r2, [r5, #4]
 80057ac:	f7fd baed 	b.w	8002d8a <d_print_comp+0x1e6>
 80057b0:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80057b4:	2fff      	cmp	r7, #255	; 0xff
 80057b6:	d110      	bne.n	80057da <d_print_comp+0x2c36>
 80057b8:	4639      	mov	r1, r7
 80057ba:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80057be:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80057c2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80057c6:	4620      	mov	r0, r4
 80057c8:	4798      	blx	r3
 80057ca:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80057ce:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 80057d2:	3301      	adds	r3, #1
 80057d4:	464f      	mov	r7, r9
 80057d6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80057da:	232d      	movs	r3, #45	; 0x2d
 80057dc:	1c7a      	adds	r2, r7, #1
 80057de:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80057e2:	55e3      	strb	r3, [r4, r7]
 80057e4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80057e8:	e6fc      	b.n	80055e4 <d_print_comp+0x2a40>
 80057ea:	689a      	ldr	r2, [r3, #8]
 80057ec:	6891      	ldr	r1, [r2, #8]
 80057ee:	2901      	cmp	r1, #1
 80057f0:	f47d aa69 	bne.w	8002cc6 <d_print_comp+0x122>
 80057f4:	6852      	ldr	r2, [r2, #4]
 80057f6:	7812      	ldrb	r2, [r2, #0]
 80057f8:	2a3e      	cmp	r2, #62	; 0x3e
 80057fa:	f47d aa64 	bne.w	8002cc6 <d_print_comp+0x122>
 80057fe:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8005802:	2fff      	cmp	r7, #255	; 0xff
 8005804:	d110      	bne.n	8005828 <d_print_comp+0x2c84>
 8005806:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 800580a:	4639      	mov	r1, r7
 800580c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005810:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005814:	4620      	mov	r0, r4
 8005816:	4798      	blx	r3
 8005818:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800581c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8005820:	3301      	adds	r3, #1
 8005822:	4647      	mov	r7, r8
 8005824:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005828:	2328      	movs	r3, #40	; 0x28
 800582a:	1c7a      	adds	r2, r7, #1
 800582c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005830:	55e3      	strb	r3, [r4, r7]
 8005832:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005836:	68ab      	ldr	r3, [r5, #8]
 8005838:	f7fd ba45 	b.w	8002cc6 <d_print_comp+0x122>
 800583c:	465a      	mov	r2, fp
 800583e:	4631      	mov	r1, r6
 8005840:	4620      	mov	r0, r4
 8005842:	f000 feb7 	bl	80065b4 <d_print_subexpr>
 8005846:	463a      	mov	r2, r7
 8005848:	4631      	mov	r1, r6
 800584a:	4620      	mov	r0, r4
 800584c:	f000 fe72 	bl	8006534 <d_print_expr_op>
 8005850:	4652      	mov	r2, sl
 8005852:	4631      	mov	r1, r6
 8005854:	4620      	mov	r0, r4
 8005856:	f000 fead 	bl	80065b4 <d_print_subexpr>
 800585a:	2203      	movs	r2, #3
 800585c:	491b      	ldr	r1, [pc, #108]	; (80058cc <d_print_comp+0x2d28>)
 800585e:	4620      	mov	r0, r4
 8005860:	f7fa fd7c 	bl	800035c <d_append_buffer>
 8005864:	464a      	mov	r2, r9
 8005866:	4631      	mov	r1, r6
 8005868:	4620      	mov	r0, r4
 800586a:	f000 fea3 	bl	80065b4 <d_print_subexpr>
 800586e:	9905      	ldr	r1, [sp, #20]
 8005870:	686a      	ldr	r2, [r5, #4]
 8005872:	f7fd ba8a 	b.w	8002d8a <d_print_comp+0x1e6>
 8005876:	9905      	ldr	r1, [sp, #20]
 8005878:	686a      	ldr	r2, [r5, #4]
 800587a:	f7fd ba86 	b.w	8002d8a <d_print_comp+0x1e6>
 800587e:	9905      	ldr	r1, [sp, #20]
 8005880:	686a      	ldr	r2, [r5, #4]
 8005882:	f7fd ba82 	b.w	8002d8a <d_print_comp+0x1e6>
 8005886:	68d3      	ldr	r3, [r2, #12]
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	2b29      	cmp	r3, #41	; 0x29
 800588c:	bf1c      	itt	ne
 800588e:	2301      	movne	r3, #1
 8005890:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
 8005894:	6892      	ldr	r2, [r2, #8]
 8005896:	4631      	mov	r1, r6
 8005898:	4620      	mov	r0, r4
 800589a:	f000 fe8b 	bl	80065b4 <d_print_subexpr>
 800589e:	f7fd ba22 	b.w	8002ce6 <d_print_comp+0x142>
 80058a2:	463a      	mov	r2, r7
 80058a4:	4631      	mov	r1, r6
 80058a6:	4620      	mov	r0, r4
 80058a8:	f000 fe44 	bl	8006534 <d_print_expr_op>
 80058ac:	e5fe      	b.n	80054ac <d_print_comp+0x2908>
 80058ae:	2301      	movs	r3, #1
 80058b0:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80058b4:	686a      	ldr	r2, [r5, #4]
 80058b6:	f7fd ba68 	b.w	8002d8a <d_print_comp+0x1e6>
 80058ba:	bf00      	nop
 80058bc:	08035040 	.word	0x08035040
 80058c0:	08035044 	.word	0x08035044
 80058c4:	0803503c 	.word	0x0803503c
 80058c8:	08035038 	.word	0x08035038
 80058cc:	0803502c 	.word	0x0803502c

080058d0 <d_print_mod>:
 80058d0:	7813      	ldrb	r3, [r2, #0]
 80058d2:	3b03      	subs	r3, #3
 80058d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058d8:	4615      	mov	r5, r2
 80058da:	4604      	mov	r4, r0
 80058dc:	460e      	mov	r6, r1
 80058de:	2b4c      	cmp	r3, #76	; 0x4c
 80058e0:	f200 82c8 	bhi.w	8005e74 <d_print_mod+0x5a4>
 80058e4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80058e8:	02c60075 	.word	0x02c60075
 80058ec:	02c602c6 	.word	0x02c602c6
 80058f0:	02c602c6 	.word	0x02c602c6
 80058f4:	02c602c6 	.word	0x02c602c6
 80058f8:	02c602c6 	.word	0x02c602c6
 80058fc:	02c602c6 	.word	0x02c602c6
 8005900:	02c602c6 	.word	0x02c602c6
 8005904:	02c602c6 	.word	0x02c602c6
 8005908:	02c602c6 	.word	0x02c602c6
 800590c:	02c602c6 	.word	0x02c602c6
 8005910:	02c602c6 	.word	0x02c602c6
 8005914:	00a1007a 	.word	0x00a1007a
 8005918:	007a00c8 	.word	0x007a00c8
 800591c:	00c800a1 	.word	0x00c800a1
 8005920:	010a00ee 	.word	0x010a00ee
 8005924:	01480126 	.word	0x01480126
 8005928:	02790166 	.word	0x02790166
 800592c:	029f0252 	.word	0x029f0252
 8005930:	02c602c6 	.word	0x02c602c6
 8005934:	02c602c6 	.word	0x02c602c6
 8005938:	02c60184 	.word	0x02c60184
 800593c:	02c601cc 	.word	0x02c601cc
 8005940:	02c602c6 	.word	0x02c602c6
 8005944:	02c602c6 	.word	0x02c602c6
 8005948:	02c602c6 	.word	0x02c602c6
 800594c:	02c602c6 	.word	0x02c602c6
 8005950:	02c602c6 	.word	0x02c602c6
 8005954:	02c602c6 	.word	0x02c602c6
 8005958:	02c602c6 	.word	0x02c602c6
 800595c:	02c602c6 	.word	0x02c602c6
 8005960:	02c602c6 	.word	0x02c602c6
 8005964:	02c602c6 	.word	0x02c602c6
 8005968:	02c602c6 	.word	0x02c602c6
 800596c:	02c602c6 	.word	0x02c602c6
 8005970:	02c602c6 	.word	0x02c602c6
 8005974:	02c602c6 	.word	0x02c602c6
 8005978:	01f402c6 	.word	0x01f402c6
 800597c:	022a02c6 	.word	0x022a02c6
 8005980:	004d      	.short	0x004d
 8005982:	4fd7      	ldr	r7, [pc, #860]	; (8005ce0 <d_print_mod+0x410>)
 8005984:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005988:	f107 0806 	add.w	r8, r7, #6
 800598c:	f04f 0900 	mov.w	r9, #0
 8005990:	e016      	b.n	80059c0 <d_print_mod+0xf0>
 8005992:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005996:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800599a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800599e:	4798      	blx	r3
 80059a0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80059a4:	3301      	adds	r3, #1
 80059a6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80059aa:	2200      	movs	r2, #0
 80059ac:	2301      	movs	r3, #1
 80059ae:	4547      	cmp	r7, r8
 80059b0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80059b4:	f804 a002 	strb.w	sl, [r4, r2]
 80059b8:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80059bc:	f000 825f 	beq.w	8005e7e <d_print_mod+0x5ae>
 80059c0:	2bff      	cmp	r3, #255	; 0xff
 80059c2:	4619      	mov	r1, r3
 80059c4:	4620      	mov	r0, r4
 80059c6:	f817 ab01 	ldrb.w	sl, [r7], #1
 80059ca:	d0e2      	beq.n	8005992 <d_print_mod+0xc2>
 80059cc:	461a      	mov	r2, r3
 80059ce:	3301      	adds	r3, #1
 80059d0:	e7ed      	b.n	80059ae <d_print_mod+0xde>
 80059d2:	68aa      	ldr	r2, [r5, #8]
 80059d4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059d8:	f7fd b8e4 	b.w	8002ba4 <d_print_comp>
 80059dc:	4dc1      	ldr	r5, [pc, #772]	; (8005ce4 <d_print_mod+0x414>)
 80059de:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80059e2:	f105 0609 	add.w	r6, r5, #9
 80059e6:	2700      	movs	r7, #0
 80059e8:	e016      	b.n	8005a18 <d_print_mod+0x148>
 80059ea:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80059ee:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80059f2:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 80059f6:	4798      	blx	r3
 80059f8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80059fc:	3301      	adds	r3, #1
 80059fe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005a02:	2200      	movs	r2, #0
 8005a04:	2301      	movs	r3, #1
 8005a06:	42ae      	cmp	r6, r5
 8005a08:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005a0c:	f804 8002 	strb.w	r8, [r4, r2]
 8005a10:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005a14:	f000 80ea 	beq.w	8005bec <d_print_mod+0x31c>
 8005a18:	2bff      	cmp	r3, #255	; 0xff
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	4620      	mov	r0, r4
 8005a1e:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 8005a22:	d0e2      	beq.n	80059ea <d_print_mod+0x11a>
 8005a24:	461a      	mov	r2, r3
 8005a26:	3301      	adds	r3, #1
 8005a28:	e7ed      	b.n	8005a06 <d_print_mod+0x136>
 8005a2a:	4daf      	ldr	r5, [pc, #700]	; (8005ce8 <d_print_mod+0x418>)
 8005a2c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005a30:	f105 0609 	add.w	r6, r5, #9
 8005a34:	2700      	movs	r7, #0
 8005a36:	e016      	b.n	8005a66 <d_print_mod+0x196>
 8005a38:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005a3c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005a40:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005a44:	4798      	blx	r3
 8005a46:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005a50:	2200      	movs	r2, #0
 8005a52:	2301      	movs	r3, #1
 8005a54:	42ae      	cmp	r6, r5
 8005a56:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005a5a:	f804 8002 	strb.w	r8, [r4, r2]
 8005a5e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005a62:	f000 80c3 	beq.w	8005bec <d_print_mod+0x31c>
 8005a66:	2bff      	cmp	r3, #255	; 0xff
 8005a68:	4619      	mov	r1, r3
 8005a6a:	4620      	mov	r0, r4
 8005a6c:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 8005a70:	d0e2      	beq.n	8005a38 <d_print_mod+0x168>
 8005a72:	461a      	mov	r2, r3
 8005a74:	3301      	adds	r3, #1
 8005a76:	e7ed      	b.n	8005a54 <d_print_mod+0x184>
 8005a78:	4d9c      	ldr	r5, [pc, #624]	; (8005cec <d_print_mod+0x41c>)
 8005a7a:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005a7e:	1dae      	adds	r6, r5, #6
 8005a80:	2700      	movs	r7, #0
 8005a82:	e016      	b.n	8005ab2 <d_print_mod+0x1e2>
 8005a84:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005a88:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005a8c:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005a90:	4798      	blx	r3
 8005a92:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005a96:	3301      	adds	r3, #1
 8005a98:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	42b5      	cmp	r5, r6
 8005aa2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005aa6:	f804 8002 	strb.w	r8, [r4, r2]
 8005aaa:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005aae:	f000 809d 	beq.w	8005bec <d_print_mod+0x31c>
 8005ab2:	2bff      	cmp	r3, #255	; 0xff
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	f815 8b01 	ldrb.w	r8, [r5], #1
 8005abc:	d0e2      	beq.n	8005a84 <d_print_mod+0x1b4>
 8005abe:	461a      	mov	r2, r3
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	e7ed      	b.n	8005aa0 <d_print_mod+0x1d0>
 8005ac4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005ac8:	29ff      	cmp	r1, #255	; 0xff
 8005aca:	d10f      	bne.n	8005aec <d_print_mod+0x21c>
 8005acc:	2500      	movs	r5, #0
 8005ace:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005ad2:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8005ad6:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005ada:	4798      	blx	r3
 8005adc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005ae0:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	4629      	mov	r1, r5
 8005ae8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005aec:	2220      	movs	r2, #32
 8005aee:	1c4b      	adds	r3, r1, #1
 8005af0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005af4:	5462      	strb	r2, [r4, r1]
 8005af6:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005afa:	e05d      	b.n	8005bb8 <d_print_mod+0x2e8>
 8005afc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005b00:	29ff      	cmp	r1, #255	; 0xff
 8005b02:	d10f      	bne.n	8005b24 <d_print_mod+0x254>
 8005b04:	2500      	movs	r5, #0
 8005b06:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005b0a:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8005b0e:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005b12:	4798      	blx	r3
 8005b14:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005b18:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	4629      	mov	r1, r5
 8005b20:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005b24:	2220      	movs	r2, #32
 8005b26:	1c4b      	adds	r3, r1, #1
 8005b28:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005b2c:	5462      	strb	r2, [r4, r1]
 8005b2e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005b32:	e154      	b.n	8005dde <d_print_mod+0x50e>
 8005b34:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005b38:	29ff      	cmp	r1, #255	; 0xff
 8005b3a:	d10f      	bne.n	8005b5c <d_print_mod+0x28c>
 8005b3c:	2700      	movs	r7, #0
 8005b3e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005b42:	f880 70ff 	strb.w	r7, [r0, #255]	; 0xff
 8005b46:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005b4a:	4798      	blx	r3
 8005b4c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005b50:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 8005b54:	3301      	adds	r3, #1
 8005b56:	4639      	mov	r1, r7
 8005b58:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005b5c:	1c4a      	adds	r2, r1, #1
 8005b5e:	2320      	movs	r3, #32
 8005b60:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005b64:	5463      	strb	r3, [r4, r1]
 8005b66:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005b6a:	4631      	mov	r1, r6
 8005b6c:	68ea      	ldr	r2, [r5, #12]
 8005b6e:	4620      	mov	r0, r4
 8005b70:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b74:	f7fd b816 	b.w	8002ba4 <d_print_comp>
 8005b78:	f011 0604 	ands.w	r6, r1, #4
 8005b7c:	d136      	bne.n	8005bec <d_print_mod+0x31c>
 8005b7e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005b82:	29ff      	cmp	r1, #255	; 0xff
 8005b84:	d10e      	bne.n	8005ba4 <d_print_mod+0x2d4>
 8005b86:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005b8a:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8005b8e:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005b92:	4798      	blx	r3
 8005b94:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005b98:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	4631      	mov	r1, r6
 8005ba0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005ba4:	232a      	movs	r3, #42	; 0x2a
 8005ba6:	1c4a      	adds	r2, r1, #1
 8005ba8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005bac:	5463      	strb	r3, [r4, r1]
 8005bae:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005bb2:	e01b      	b.n	8005bec <d_print_mod+0x31c>
 8005bb4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005bb8:	2bff      	cmp	r3, #255	; 0xff
 8005bba:	f040 81a9 	bne.w	8005f10 <d_print_mod+0x640>
 8005bbe:	2500      	movs	r5, #0
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005bc6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005bca:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005bce:	4620      	mov	r0, r4
 8005bd0:	4798      	blx	r3
 8005bd2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005bd6:	1c5a      	adds	r2, r3, #1
 8005bd8:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005bdc:	462b      	mov	r3, r5
 8005bde:	2101      	movs	r1, #1
 8005be0:	2226      	movs	r2, #38	; 0x26
 8005be2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005be6:	54e2      	strb	r2, [r4, r3]
 8005be8:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bf0:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
 8005bf4:	2b28      	cmp	r3, #40	; 0x28
 8005bf6:	d019      	beq.n	8005c2c <d_print_mod+0x35c>
 8005bf8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005bfc:	29ff      	cmp	r1, #255	; 0xff
 8005bfe:	f040 818b 	bne.w	8005f18 <d_print_mod+0x648>
 8005c02:	2700      	movs	r7, #0
 8005c04:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005c08:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005c0c:	f880 70ff 	strb.w	r7, [r0, #255]	; 0xff
 8005c10:	4798      	blx	r3
 8005c12:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005c16:	3301      	adds	r3, #1
 8005c18:	4639      	mov	r1, r7
 8005c1a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005c1e:	2201      	movs	r2, #1
 8005c20:	2320      	movs	r3, #32
 8005c22:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005c26:	5463      	strb	r3, [r4, r1]
 8005c28:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005c2c:	68aa      	ldr	r2, [r5, #8]
 8005c2e:	4d30      	ldr	r5, [pc, #192]	; (8005cf0 <d_print_mod+0x420>)
 8005c30:	4631      	mov	r1, r6
 8005c32:	4620      	mov	r0, r4
 8005c34:	f7fc ffb6 	bl	8002ba4 <d_print_comp>
 8005c38:	1cee      	adds	r6, r5, #3
 8005c3a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005c3e:	2700      	movs	r7, #0
 8005c40:	e015      	b.n	8005c6e <d_print_mod+0x39e>
 8005c42:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005c46:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005c4a:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005c4e:	4798      	blx	r3
 8005c50:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005c54:	3301      	adds	r3, #1
 8005c56:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	42ae      	cmp	r6, r5
 8005c60:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005c64:	f804 8002 	strb.w	r8, [r4, r2]
 8005c68:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005c6c:	d0be      	beq.n	8005bec <d_print_mod+0x31c>
 8005c6e:	2bff      	cmp	r3, #255	; 0xff
 8005c70:	4619      	mov	r1, r3
 8005c72:	4620      	mov	r0, r4
 8005c74:	f815 8b01 	ldrb.w	r8, [r5], #1
 8005c78:	d0e3      	beq.n	8005c42 <d_print_mod+0x372>
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	e7ee      	b.n	8005c5e <d_print_mod+0x38e>
 8005c80:	4f1c      	ldr	r7, [pc, #112]	; (8005cf4 <d_print_mod+0x424>)
 8005c82:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005c86:	f107 080a 	add.w	r8, r7, #10
 8005c8a:	f04f 0900 	mov.w	r9, #0
 8005c8e:	e016      	b.n	8005cbe <d_print_mod+0x3ee>
 8005c90:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005c94:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005c98:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005c9c:	4798      	blx	r3
 8005c9e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005ca8:	2200      	movs	r2, #0
 8005caa:	2301      	movs	r3, #1
 8005cac:	45b8      	cmp	r8, r7
 8005cae:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005cb2:	f804 a002 	strb.w	sl, [r4, r2]
 8005cb6:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8005cba:	f000 811e 	beq.w	8005efa <d_print_mod+0x62a>
 8005cbe:	2bff      	cmp	r3, #255	; 0xff
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	4620      	mov	r0, r4
 8005cc4:	f817 ab01 	ldrb.w	sl, [r7], #1
 8005cc8:	d0e2      	beq.n	8005c90 <d_print_mod+0x3c0>
 8005cca:	461a      	mov	r2, r3
 8005ccc:	3301      	adds	r3, #1
 8005cce:	e7ed      	b.n	8005cac <d_print_mod+0x3dc>
 8005cd0:	4d09      	ldr	r5, [pc, #36]	; (8005cf8 <d_print_mod+0x428>)
 8005cd2:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005cd6:	f105 0611 	add.w	r6, r5, #17
 8005cda:	2700      	movs	r7, #0
 8005cdc:	e025      	b.n	8005d2a <d_print_mod+0x45a>
 8005cde:	bf00      	nop
 8005ce0:	08035130 	.word	0x08035130
 8005ce4:	080350ef 	.word	0x080350ef
 8005ce8:	080350fb 	.word	0x080350fb
 8005cec:	08035108 	.word	0x08035108
 8005cf0:	08035154 	.word	0x08035154
 8005cf4:	08035158 	.word	0x08035158
 8005cf8:	0803510f 	.word	0x0803510f
 8005cfc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005d00:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005d04:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005d08:	4798      	blx	r3
 8005d0a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005d0e:	3301      	adds	r3, #1
 8005d10:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005d14:	2200      	movs	r2, #0
 8005d16:	2301      	movs	r3, #1
 8005d18:	42ae      	cmp	r6, r5
 8005d1a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005d1e:	f804 8002 	strb.w	r8, [r4, r2]
 8005d22:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005d26:	f43f af61 	beq.w	8005bec <d_print_mod+0x31c>
 8005d2a:	2bff      	cmp	r3, #255	; 0xff
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	4620      	mov	r0, r4
 8005d30:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 8005d34:	d0e2      	beq.n	8005cfc <d_print_mod+0x42c>
 8005d36:	461a      	mov	r2, r3
 8005d38:	3301      	adds	r3, #1
 8005d3a:	e7ed      	b.n	8005d18 <d_print_mod+0x448>
 8005d3c:	4f77      	ldr	r7, [pc, #476]	; (8005f1c <d_print_mod+0x64c>)
 8005d3e:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005d42:	f107 0809 	add.w	r8, r7, #9
 8005d46:	f04f 0900 	mov.w	r9, #0
 8005d4a:	e016      	b.n	8005d7a <d_print_mod+0x4aa>
 8005d4c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005d50:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005d54:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005d58:	4798      	blx	r3
 8005d5a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005d5e:	3301      	adds	r3, #1
 8005d60:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005d64:	2200      	movs	r2, #0
 8005d66:	2301      	movs	r3, #1
 8005d68:	4547      	cmp	r7, r8
 8005d6a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005d6e:	f804 a002 	strb.w	sl, [r4, r2]
 8005d72:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8005d76:	f000 8082 	beq.w	8005e7e <d_print_mod+0x5ae>
 8005d7a:	2bff      	cmp	r3, #255	; 0xff
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	4620      	mov	r0, r4
 8005d80:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8005d84:	d0e2      	beq.n	8005d4c <d_print_mod+0x47c>
 8005d86:	461a      	mov	r2, r3
 8005d88:	3301      	adds	r3, #1
 8005d8a:	e7ed      	b.n	8005d68 <d_print_mod+0x498>
 8005d8c:	4d64      	ldr	r5, [pc, #400]	; (8005f20 <d_print_mod+0x650>)
 8005d8e:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005d92:	f105 0608 	add.w	r6, r5, #8
 8005d96:	2700      	movs	r7, #0
 8005d98:	e016      	b.n	8005dc8 <d_print_mod+0x4f8>
 8005d9a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005d9e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005da2:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005da6:	4798      	blx	r3
 8005da8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005dac:	3301      	adds	r3, #1
 8005dae:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005db2:	2200      	movs	r2, #0
 8005db4:	2301      	movs	r3, #1
 8005db6:	42ae      	cmp	r6, r5
 8005db8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005dbc:	f804 8002 	strb.w	r8, [r4, r2]
 8005dc0:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005dc4:	f43f af12 	beq.w	8005bec <d_print_mod+0x31c>
 8005dc8:	2bff      	cmp	r3, #255	; 0xff
 8005dca:	4619      	mov	r1, r3
 8005dcc:	4620      	mov	r0, r4
 8005dce:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 8005dd2:	d0e2      	beq.n	8005d9a <d_print_mod+0x4ca>
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	e7ed      	b.n	8005db6 <d_print_mod+0x4e6>
 8005dda:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005dde:	4d51      	ldr	r5, [pc, #324]	; (8005f24 <d_print_mod+0x654>)
 8005de0:	2700      	movs	r7, #0
 8005de2:	1cae      	adds	r6, r5, #2
 8005de4:	e016      	b.n	8005e14 <d_print_mod+0x544>
 8005de6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005dea:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005dee:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005df2:	4798      	blx	r3
 8005df4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005df8:	3301      	adds	r3, #1
 8005dfa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005dfe:	2200      	movs	r2, #0
 8005e00:	2301      	movs	r3, #1
 8005e02:	42b5      	cmp	r5, r6
 8005e04:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005e08:	f804 8002 	strb.w	r8, [r4, r2]
 8005e0c:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005e10:	f43f aeec 	beq.w	8005bec <d_print_mod+0x31c>
 8005e14:	2bff      	cmp	r3, #255	; 0xff
 8005e16:	4619      	mov	r1, r3
 8005e18:	4620      	mov	r0, r4
 8005e1a:	f815 8b01 	ldrb.w	r8, [r5], #1
 8005e1e:	d0e2      	beq.n	8005de6 <d_print_mod+0x516>
 8005e20:	461a      	mov	r2, r3
 8005e22:	3301      	adds	r3, #1
 8005e24:	e7ed      	b.n	8005e02 <d_print_mod+0x532>
 8005e26:	4d40      	ldr	r5, [pc, #256]	; (8005f28 <d_print_mod+0x658>)
 8005e28:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005e2c:	f105 060a 	add.w	r6, r5, #10
 8005e30:	2700      	movs	r7, #0
 8005e32:	e016      	b.n	8005e62 <d_print_mod+0x592>
 8005e34:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005e38:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005e3c:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005e40:	4798      	blx	r3
 8005e42:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005e46:	3301      	adds	r3, #1
 8005e48:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	2301      	movs	r3, #1
 8005e50:	42b5      	cmp	r5, r6
 8005e52:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005e56:	f804 8002 	strb.w	r8, [r4, r2]
 8005e5a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005e5e:	f43f aec5 	beq.w	8005bec <d_print_mod+0x31c>
 8005e62:	2bff      	cmp	r3, #255	; 0xff
 8005e64:	4619      	mov	r1, r3
 8005e66:	4620      	mov	r0, r4
 8005e68:	f815 8b01 	ldrb.w	r8, [r5], #1
 8005e6c:	d0e2      	beq.n	8005e34 <d_print_mod+0x564>
 8005e6e:	461a      	mov	r2, r3
 8005e70:	3301      	adds	r3, #1
 8005e72:	e7ed      	b.n	8005e50 <d_print_mod+0x580>
 8005e74:	462a      	mov	r2, r5
 8005e76:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e7a:	f7fc be93 	b.w	8002ba4 <d_print_comp>
 8005e7e:	68ea      	ldr	r2, [r5, #12]
 8005e80:	2a00      	cmp	r2, #0
 8005e82:	f43f aeb3 	beq.w	8005bec <d_print_mod+0x31c>
 8005e86:	2bff      	cmp	r3, #255	; 0xff
 8005e88:	d144      	bne.n	8005f14 <d_print_mod+0x644>
 8005e8a:	2700      	movs	r7, #0
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005e92:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005e96:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005e9a:	4620      	mov	r0, r4
 8005e9c:	4798      	blx	r3
 8005e9e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005ea2:	68ea      	ldr	r2, [r5, #12]
 8005ea4:	1c59      	adds	r1, r3, #1
 8005ea6:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
 8005eaa:	463b      	mov	r3, r7
 8005eac:	2101      	movs	r1, #1
 8005eae:	2528      	movs	r5, #40	; 0x28
 8005eb0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	4631      	mov	r1, r6
 8005eb8:	54e5      	strb	r5, [r4, r3]
 8005eba:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8005ebe:	f7fc fe71 	bl	8002ba4 <d_print_comp>
 8005ec2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005ec6:	29ff      	cmp	r1, #255	; 0xff
 8005ec8:	d120      	bne.n	8005f0c <d_print_mod+0x63c>
 8005eca:	2500      	movs	r5, #0
 8005ecc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005ed0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005ed4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005ed8:	4620      	mov	r0, r4
 8005eda:	4798      	blx	r3
 8005edc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	4629      	mov	r1, r5
 8005ee4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005ee8:	2201      	movs	r2, #1
 8005eea:	2329      	movs	r3, #41	; 0x29
 8005eec:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005ef0:	5463      	strb	r3, [r4, r1]
 8005ef2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005efa:	4631      	mov	r1, r6
 8005efc:	68aa      	ldr	r2, [r5, #8]
 8005efe:	4620      	mov	r0, r4
 8005f00:	f7fc fe50 	bl	8002ba4 <d_print_comp>
 8005f04:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005f08:	29ff      	cmp	r1, #255	; 0xff
 8005f0a:	d0de      	beq.n	8005eca <d_print_mod+0x5fa>
 8005f0c:	1c4a      	adds	r2, r1, #1
 8005f0e:	e7ec      	b.n	8005eea <d_print_mod+0x61a>
 8005f10:	1c59      	adds	r1, r3, #1
 8005f12:	e665      	b.n	8005be0 <d_print_mod+0x310>
 8005f14:	1c59      	adds	r1, r3, #1
 8005f16:	e7ca      	b.n	8005eae <d_print_mod+0x5de>
 8005f18:	1c4a      	adds	r2, r1, #1
 8005f1a:	e681      	b.n	8005c20 <d_print_mod+0x350>
 8005f1c:	08035123 	.word	0x08035123
 8005f20:	0803513b 	.word	0x0803513b
 8005f24:	08035138 	.word	0x08035138
 8005f28:	08035148 	.word	0x08035148

08005f2c <d_print_function_type.isra.15>:
 8005f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f30:	4604      	mov	r4, r0
 8005f32:	460e      	mov	r6, r1
 8005f34:	4617      	mov	r7, r2
 8005f36:	461d      	mov	r5, r3
 8005f38:	b1d3      	cbz	r3, 8005f70 <d_print_function_type.isra.15+0x44>
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	b9c3      	cbnz	r3, 8005f70 <d_print_function_type.isra.15+0x44>
 8005f3e:	462a      	mov	r2, r5
 8005f40:	2001      	movs	r0, #1
 8005f42:	f8df c1c8 	ldr.w	ip, [pc, #456]	; 800610c <d_print_function_type.isra.15+0x1e0>
 8005f46:	e001      	b.n	8005f4c <d_print_function_type.isra.15+0x20>
 8005f48:	6893      	ldr	r3, [r2, #8]
 8005f4a:	b98b      	cbnz	r3, 8005f70 <d_print_function_type.isra.15+0x44>
 8005f4c:	6853      	ldr	r3, [r2, #4]
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	3b19      	subs	r3, #25
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	2b12      	cmp	r3, #18
 8005f56:	fa00 f103 	lsl.w	r1, r0, r3
 8005f5a:	d806      	bhi.n	8005f6a <d_print_function_type.isra.15+0x3e>
 8005f5c:	ea11 0f0c 	tst.w	r1, ip
 8005f60:	f040 80c7 	bne.w	80060f2 <d_print_function_type.isra.15+0x1c6>
 8005f64:	f411 6f60 	tst.w	r1, #3584	; 0xe00
 8005f68:	d154      	bne.n	8006014 <d_print_function_type.isra.15+0xe8>
 8005f6a:	6812      	ldr	r2, [r2, #0]
 8005f6c:	2a00      	cmp	r2, #0
 8005f6e:	d1eb      	bne.n	8005f48 <d_print_function_type.isra.15+0x1c>
 8005f70:	2300      	movs	r3, #0
 8005f72:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
 8005f76:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8005f7a:	4631      	mov	r1, r6
 8005f7c:	462a      	mov	r2, r5
 8005f7e:	4620      	mov	r0, r4
 8005f80:	f000 f8c6 	bl	8006110 <d_print_mod_list>
 8005f84:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005f88:	29ff      	cmp	r1, #255	; 0xff
 8005f8a:	f040 80a4 	bne.w	80060d6 <d_print_function_type.isra.15+0x1aa>
 8005f8e:	2300      	movs	r3, #0
 8005f90:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 8005f94:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005f98:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	4798      	blx	r3
 8005fa0:	2328      	movs	r3, #40	; 0x28
 8005fa2:	7023      	strb	r3, [r4, #0]
 8005fa4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005fa8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005fac:	683a      	ldr	r2, [r7, #0]
 8005fae:	1c59      	adds	r1, r3, #1
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
 8005fb6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005fba:	2a00      	cmp	r2, #0
 8005fbc:	f000 8097 	beq.w	80060ee <d_print_function_type.isra.15+0x1c2>
 8005fc0:	4631      	mov	r1, r6
 8005fc2:	4620      	mov	r0, r4
 8005fc4:	f7fc fdee 	bl	8002ba4 <d_print_comp>
 8005fc8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005fcc:	2bff      	cmp	r3, #255	; 0xff
 8005fce:	f040 808e 	bne.w	80060ee <d_print_function_type.isra.15+0x1c2>
 8005fd2:	2700      	movs	r7, #0
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005fda:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005fde:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005fe2:	4620      	mov	r0, r4
 8005fe4:	4798      	blx	r3
 8005fe6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005fea:	1c5a      	adds	r2, r3, #1
 8005fec:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005ff0:	463b      	mov	r3, r7
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	2029      	movs	r0, #41	; 0x29
 8005ff6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005ffa:	4631      	mov	r1, r6
 8005ffc:	54e0      	strb	r0, [r4, r3]
 8005ffe:	462a      	mov	r2, r5
 8006000:	f884 0104 	strb.w	r0, [r4, #260]	; 0x104
 8006004:	2301      	movs	r3, #1
 8006006:	4620      	mov	r0, r4
 8006008:	f000 f882 	bl	8006110 <d_print_mod_list>
 800600c:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
 8006010:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006014:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8006018:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800601c:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8006020:	2a28      	cmp	r2, #40	; 0x28
 8006022:	d01e      	beq.n	8006062 <d_print_function_type.isra.15+0x136>
 8006024:	2b20      	cmp	r3, #32
 8006026:	d01c      	beq.n	8006062 <d_print_function_type.isra.15+0x136>
 8006028:	29ff      	cmp	r1, #255	; 0xff
 800602a:	d112      	bne.n	8006052 <d_print_function_type.isra.15+0x126>
 800602c:	2300      	movs	r3, #0
 800602e:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 8006032:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006036:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800603a:	4620      	mov	r0, r4
 800603c:	4798      	blx	r3
 800603e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006042:	2220      	movs	r2, #32
 8006044:	3301      	adds	r3, #1
 8006046:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800604a:	7022      	strb	r2, [r4, #0]
 800604c:	2101      	movs	r1, #1
 800604e:	1c4a      	adds	r2, r1, #1
 8006050:	e01a      	b.n	8006088 <d_print_function_type.isra.15+0x15c>
 8006052:	1c4b      	adds	r3, r1, #1
 8006054:	2220      	movs	r2, #32
 8006056:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800605a:	5462      	strb	r2, [r4, r1]
 800605c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8006060:	4619      	mov	r1, r3
 8006062:	29ff      	cmp	r1, #255	; 0xff
 8006064:	d1f3      	bne.n	800604e <d_print_function_type.isra.15+0x122>
 8006066:	f04f 0800 	mov.w	r8, #0
 800606a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800606e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006072:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006076:	4620      	mov	r0, r4
 8006078:	4798      	blx	r3
 800607a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800607e:	3301      	adds	r3, #1
 8006080:	4641      	mov	r1, r8
 8006082:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006086:	2201      	movs	r2, #1
 8006088:	2328      	movs	r3, #40	; 0x28
 800608a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800608e:	5463      	strb	r3, [r4, r1]
 8006090:	f04f 0900 	mov.w	r9, #0
 8006094:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006098:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
 800609c:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 80060a0:	464b      	mov	r3, r9
 80060a2:	462a      	mov	r2, r5
 80060a4:	4631      	mov	r1, r6
 80060a6:	4620      	mov	r0, r4
 80060a8:	f000 f832 	bl	8006110 <d_print_mod_list>
 80060ac:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80060b0:	2bff      	cmp	r3, #255	; 0xff
 80060b2:	d123      	bne.n	80060fc <d_print_function_type.isra.15+0x1d0>
 80060b4:	4619      	mov	r1, r3
 80060b6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80060ba:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80060be:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80060c2:	4620      	mov	r0, r4
 80060c4:	4798      	blx	r3
 80060c6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80060ca:	2229      	movs	r2, #41	; 0x29
 80060cc:	3301      	adds	r3, #1
 80060ce:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80060d2:	7022      	strb	r2, [r4, #0]
 80060d4:	2101      	movs	r1, #1
 80060d6:	2228      	movs	r2, #40	; 0x28
 80060d8:	1c4b      	adds	r3, r1, #1
 80060da:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80060de:	5462      	strb	r2, [r4, r1]
 80060e0:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80060e4:	683a      	ldr	r2, [r7, #0]
 80060e6:	2a00      	cmp	r2, #0
 80060e8:	f43f af70 	beq.w	8005fcc <d_print_function_type.isra.15+0xa0>
 80060ec:	e768      	b.n	8005fc0 <d_print_function_type.isra.15+0x94>
 80060ee:	1c5a      	adds	r2, r3, #1
 80060f0:	e780      	b.n	8005ff4 <d_print_function_type.isra.15+0xc8>
 80060f2:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 80060f6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80060fa:	e793      	b.n	8006024 <d_print_function_type.isra.15+0xf8>
 80060fc:	2229      	movs	r2, #41	; 0x29
 80060fe:	1c59      	adds	r1, r3, #1
 8006100:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006104:	54e2      	strb	r2, [r4, r3]
 8006106:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800610a:	e73d      	b.n	8005f88 <d_print_function_type.isra.15+0x5c>
 800610c:	00043107 	.word	0x00043107

08006110 <d_print_mod_list>:
 8006110:	2a00      	cmp	r2, #0
 8006112:	f000 80ac 	beq.w	800626e <d_print_mod_list+0x15e>
 8006116:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800611a:	461f      	mov	r7, r3
 800611c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 8006120:	b089      	sub	sp, #36	; 0x24
 8006122:	4605      	mov	r5, r0
 8006124:	bb4b      	cbnz	r3, 800617a <d_print_mod_list+0x6a>
 8006126:	4688      	mov	r8, r1
 8006128:	4614      	mov	r4, r2
 800612a:	f04f 0901 	mov.w	r9, #1
 800612e:	e002      	b.n	8006136 <d_print_mod_list+0x26>
 8006130:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8006134:	bb0b      	cbnz	r3, 800617a <d_print_mod_list+0x6a>
 8006136:	68a3      	ldr	r3, [r4, #8]
 8006138:	b9e3      	cbnz	r3, 8006174 <d_print_mod_list+0x64>
 800613a:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800613e:	f89a 6000 	ldrb.w	r6, [sl]
 8006142:	4630      	mov	r0, r6
 8006144:	b917      	cbnz	r7, 800614c <d_print_mod_list+0x3c>
 8006146:	f7fa f93f 	bl	80003c8 <is_fnqual_component_type>
 800614a:	b998      	cbnz	r0, 8006174 <d_print_mod_list+0x64>
 800614c:	68e3      	ldr	r3, [r4, #12]
 800614e:	f8c4 9008 	str.w	r9, [r4, #8]
 8006152:	2e29      	cmp	r6, #41	; 0x29
 8006154:	f8d5 b110 	ldr.w	fp, [r5, #272]	; 0x110
 8006158:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
 800615c:	4652      	mov	r2, sl
 800615e:	4641      	mov	r1, r8
 8006160:	4628      	mov	r0, r5
 8006162:	d00d      	beq.n	8006180 <d_print_mod_list+0x70>
 8006164:	2e2a      	cmp	r6, #42	; 0x2a
 8006166:	d015      	beq.n	8006194 <d_print_mod_list+0x84>
 8006168:	2e02      	cmp	r6, #2
 800616a:	d01d      	beq.n	80061a8 <d_print_mod_list+0x98>
 800616c:	f7ff fbb0 	bl	80058d0 <d_print_mod>
 8006170:	f8c5 b110 	str.w	fp, [r5, #272]	; 0x110
 8006174:	6824      	ldr	r4, [r4, #0]
 8006176:	2c00      	cmp	r4, #0
 8006178:	d1da      	bne.n	8006130 <d_print_mod_list+0x20>
 800617a:	b009      	add	sp, #36	; 0x24
 800617c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006180:	6823      	ldr	r3, [r4, #0]
 8006182:	f10a 020c 	add.w	r2, sl, #12
 8006186:	f7ff fed1 	bl	8005f2c <d_print_function_type.isra.15>
 800618a:	f8c5 b110 	str.w	fp, [r5, #272]	; 0x110
 800618e:	b009      	add	sp, #36	; 0x24
 8006190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006194:	6823      	ldr	r3, [r4, #0]
 8006196:	f10a 0208 	add.w	r2, sl, #8
 800619a:	f000 f8f1 	bl	8006380 <d_print_array_type.isra.14>
 800619e:	f8c5 b110 	str.w	fp, [r5, #272]	; 0x110
 80061a2:	b009      	add	sp, #36	; 0x24
 80061a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061a8:	2600      	movs	r6, #0
 80061aa:	f8d5 7114 	ldr.w	r7, [r5, #276]	; 0x114
 80061ae:	f8da 2008 	ldr.w	r2, [sl, #8]
 80061b2:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
 80061b6:	f7fc fcf5 	bl	8002ba4 <d_print_comp>
 80061ba:	f8c5 7114 	str.w	r7, [r5, #276]	; 0x114
 80061be:	f018 0704 	ands.w	r7, r8, #4
 80061c2:	d02f      	beq.n	8006224 <d_print_mod_list+0x114>
 80061c4:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 80061c8:	29ff      	cmp	r1, #255	; 0xff
 80061ca:	f040 80cf 	bne.w	800636c <d_print_mod_list+0x25c>
 80061ce:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 80061d2:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 80061d6:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
 80061da:	4628      	mov	r0, r5
 80061dc:	4798      	blx	r3
 80061de:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 80061e2:	3301      	adds	r3, #1
 80061e4:	4631      	mov	r1, r6
 80061e6:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 80061ea:	2201      	movs	r2, #1
 80061ec:	232e      	movs	r3, #46	; 0x2e
 80061ee:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
 80061f2:	546b      	strb	r3, [r5, r1]
 80061f4:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
 80061f8:	6863      	ldr	r3, [r4, #4]
 80061fa:	68dc      	ldr	r4, [r3, #12]
 80061fc:	7820      	ldrb	r0, [r4, #0]
 80061fe:	2846      	cmp	r0, #70	; 0x46
 8006200:	d102      	bne.n	8006208 <d_print_mod_list+0xf8>
 8006202:	e035      	b.n	8006270 <d_print_mod_list+0x160>
 8006204:	68a4      	ldr	r4, [r4, #8]
 8006206:	7820      	ldrb	r0, [r4, #0]
 8006208:	f7fa f8de 	bl	80003c8 <is_fnqual_component_type>
 800620c:	2800      	cmp	r0, #0
 800620e:	d1f9      	bne.n	8006204 <d_print_mod_list+0xf4>
 8006210:	4622      	mov	r2, r4
 8006212:	4641      	mov	r1, r8
 8006214:	4628      	mov	r0, r5
 8006216:	f7fc fcc5 	bl	8002ba4 <d_print_comp>
 800621a:	f8c5 b110 	str.w	fp, [r5, #272]	; 0x110
 800621e:	b009      	add	sp, #36	; 0x24
 8006220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006224:	4e52      	ldr	r6, [pc, #328]	; (8006370 <d_print_mod_list+0x260>)
 8006226:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 800622a:	f106 0902 	add.w	r9, r6, #2
 800622e:	e015      	b.n	800625c <d_print_mod_list+0x14c>
 8006230:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8006234:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8006238:	f885 70ff 	strb.w	r7, [r5, #255]	; 0xff
 800623c:	4798      	blx	r3
 800623e:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8006242:	3301      	adds	r3, #1
 8006244:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8006248:	2200      	movs	r2, #0
 800624a:	2301      	movs	r3, #1
 800624c:	45b1      	cmp	r9, r6
 800624e:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
 8006252:	f805 a002 	strb.w	sl, [r5, r2]
 8006256:	f885 a104 	strb.w	sl, [r5, #260]	; 0x104
 800625a:	d0cd      	beq.n	80061f8 <d_print_mod_list+0xe8>
 800625c:	2bff      	cmp	r3, #255	; 0xff
 800625e:	4619      	mov	r1, r3
 8006260:	4628      	mov	r0, r5
 8006262:	f816 ab01 	ldrb.w	sl, [r6], #1
 8006266:	d0e3      	beq.n	8006230 <d_print_mod_list+0x120>
 8006268:	461a      	mov	r2, r3
 800626a:	3301      	adds	r3, #1
 800626c:	e7ee      	b.n	800624c <d_print_mod_list+0x13c>
 800626e:	4770      	bx	lr
 8006270:	4e40      	ldr	r6, [pc, #256]	; (8006374 <d_print_mod_list+0x264>)
 8006272:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 8006276:	f106 070d 	add.w	r7, r6, #13
 800627a:	f04f 0900 	mov.w	r9, #0
 800627e:	e015      	b.n	80062ac <d_print_mod_list+0x19c>
 8006280:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8006284:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8006288:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
 800628c:	4798      	blx	r3
 800628e:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8006292:	3301      	adds	r3, #1
 8006294:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8006298:	2200      	movs	r2, #0
 800629a:	2301      	movs	r3, #1
 800629c:	42b7      	cmp	r7, r6
 800629e:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
 80062a2:	f805 a002 	strb.w	sl, [r5, r2]
 80062a6:	f885 a104 	strb.w	sl, [r5, #260]	; 0x104
 80062aa:	d008      	beq.n	80062be <d_print_mod_list+0x1ae>
 80062ac:	2bff      	cmp	r3, #255	; 0xff
 80062ae:	4619      	mov	r1, r3
 80062b0:	4628      	mov	r0, r5
 80062b2:	f816 ab01 	ldrb.w	sl, [r6], #1
 80062b6:	d0e3      	beq.n	8006280 <d_print_mod_list+0x170>
 80062b8:	461a      	mov	r2, r3
 80062ba:	3301      	adds	r3, #1
 80062bc:	e7ee      	b.n	800629c <d_print_mod_list+0x18c>
 80062be:	68e2      	ldr	r2, [r4, #12]
 80062c0:	492d      	ldr	r1, [pc, #180]	; (8006378 <d_print_mod_list+0x268>)
 80062c2:	3201      	adds	r2, #1
 80062c4:	a801      	add	r0, sp, #4
 80062c6:	f028 fdb5 	bl	802ee34 <siprintf>
 80062ca:	a801      	add	r0, sp, #4
 80062cc:	f000 fd08 	bl	8006ce0 <strlen>
 80062d0:	b328      	cbz	r0, 800631e <d_print_mod_list+0x20e>
 80062d2:	ae01      	add	r6, sp, #4
 80062d4:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 80062d8:	1837      	adds	r7, r6, r0
 80062da:	f04f 0900 	mov.w	r9, #0
 80062de:	e015      	b.n	800630c <d_print_mod_list+0x1fc>
 80062e0:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 80062e4:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 80062e8:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
 80062ec:	4798      	blx	r3
 80062ee:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 80062f2:	3301      	adds	r3, #1
 80062f4:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 80062f8:	2200      	movs	r2, #0
 80062fa:	2301      	movs	r3, #1
 80062fc:	42be      	cmp	r6, r7
 80062fe:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
 8006302:	f805 a002 	strb.w	sl, [r5, r2]
 8006306:	f885 a104 	strb.w	sl, [r5, #260]	; 0x104
 800630a:	d00a      	beq.n	8006322 <d_print_mod_list+0x212>
 800630c:	2bff      	cmp	r3, #255	; 0xff
 800630e:	4619      	mov	r1, r3
 8006310:	4628      	mov	r0, r5
 8006312:	f816 ab01 	ldrb.w	sl, [r6], #1
 8006316:	d0e3      	beq.n	80062e0 <d_print_mod_list+0x1d0>
 8006318:	461a      	mov	r2, r3
 800631a:	3301      	adds	r3, #1
 800631c:	e7ee      	b.n	80062fc <d_print_mod_list+0x1ec>
 800631e:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 8006322:	4e16      	ldr	r6, [pc, #88]	; (800637c <d_print_mod_list+0x26c>)
 8006324:	f04f 0900 	mov.w	r9, #0
 8006328:	1cf7      	adds	r7, r6, #3
 800632a:	e016      	b.n	800635a <d_print_mod_list+0x24a>
 800632c:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8006330:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8006334:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
 8006338:	4798      	blx	r3
 800633a:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 800633e:	3301      	adds	r3, #1
 8006340:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8006344:	2200      	movs	r2, #0
 8006346:	2301      	movs	r3, #1
 8006348:	42b7      	cmp	r7, r6
 800634a:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
 800634e:	f805 a002 	strb.w	sl, [r5, r2]
 8006352:	f885 a104 	strb.w	sl, [r5, #260]	; 0x104
 8006356:	f43f af55 	beq.w	8006204 <d_print_mod_list+0xf4>
 800635a:	2bff      	cmp	r3, #255	; 0xff
 800635c:	4619      	mov	r1, r3
 800635e:	4628      	mov	r0, r5
 8006360:	f816 ab01 	ldrb.w	sl, [r6], #1
 8006364:	d0e2      	beq.n	800632c <d_print_mod_list+0x21c>
 8006366:	461a      	mov	r2, r3
 8006368:	3301      	adds	r3, #1
 800636a:	e7ed      	b.n	8006348 <d_print_mod_list+0x238>
 800636c:	1c4a      	adds	r2, r1, #1
 800636e:	e73d      	b.n	80061ec <d_print_mod_list+0xdc>
 8006370:	08034e70 	.word	0x08034e70
 8006374:	08034e74 	.word	0x08034e74
 8006378:	08034e20 	.word	0x08034e20
 800637c:	08034e84 	.word	0x08034e84

08006380 <d_print_array_type.isra.14>:
 8006380:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006384:	4604      	mov	r4, r0
 8006386:	460f      	mov	r7, r1
 8006388:	4690      	mov	r8, r2
 800638a:	b15b      	cbz	r3, 80063a4 <d_print_array_type.isra.14+0x24>
 800638c:	461e      	mov	r6, r3
 800638e:	689d      	ldr	r5, [r3, #8]
 8006390:	2d00      	cmp	r5, #0
 8006392:	d042      	beq.n	800641a <d_print_array_type.isra.14+0x9a>
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1f9      	bne.n	800638e <d_print_array_type.isra.14+0xe>
 800639a:	4632      	mov	r2, r6
 800639c:	4639      	mov	r1, r7
 800639e:	4620      	mov	r0, r4
 80063a0:	f7ff feb6 	bl	8006110 <d_print_mod_list>
 80063a4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80063a8:	29ff      	cmp	r1, #255	; 0xff
 80063aa:	f040 80b1 	bne.w	8006510 <d_print_array_type.isra.14+0x190>
 80063ae:	2300      	movs	r3, #0
 80063b0:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 80063b4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80063b8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80063bc:	4620      	mov	r0, r4
 80063be:	4798      	blx	r3
 80063c0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80063c4:	2220      	movs	r2, #32
 80063c6:	3301      	adds	r3, #1
 80063c8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80063cc:	7022      	strb	r2, [r4, #0]
 80063ce:	2301      	movs	r3, #1
 80063d0:	225b      	movs	r2, #91	; 0x5b
 80063d2:	1c59      	adds	r1, r3, #1
 80063d4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80063d8:	54e2      	strb	r2, [r4, r3]
 80063da:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80063de:	f8d8 2000 	ldr.w	r2, [r8]
 80063e2:	2a00      	cmp	r2, #0
 80063e4:	d140      	bne.n	8006468 <d_print_array_type.isra.14+0xe8>
 80063e6:	29ff      	cmp	r1, #255	; 0xff
 80063e8:	d145      	bne.n	8006476 <d_print_array_type.isra.14+0xf6>
 80063ea:	2500      	movs	r5, #0
 80063ec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80063f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80063f4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80063f8:	4620      	mov	r0, r4
 80063fa:	4798      	blx	r3
 80063fc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006400:	3301      	adds	r3, #1
 8006402:	4629      	mov	r1, r5
 8006404:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006408:	2201      	movs	r2, #1
 800640a:	235d      	movs	r3, #93	; 0x5d
 800640c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8006410:	5463      	strb	r3, [r4, r1]
 8006412:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006416:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	2b2a      	cmp	r3, #42	; 0x2a
 8006420:	d12b      	bne.n	800647a <d_print_array_type.isra.14+0xfa>
 8006422:	462b      	mov	r3, r5
 8006424:	4632      	mov	r2, r6
 8006426:	4639      	mov	r1, r7
 8006428:	4620      	mov	r0, r4
 800642a:	f7ff fe71 	bl	8006110 <d_print_mod_list>
 800642e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8006432:	2bff      	cmp	r3, #255	; 0xff
 8006434:	d1cc      	bne.n	80063d0 <d_print_array_type.isra.14+0x50>
 8006436:	2200      	movs	r2, #0
 8006438:	4619      	mov	r1, r3
 800643a:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 800643e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006442:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006446:	4620      	mov	r0, r4
 8006448:	4798      	blx	r3
 800644a:	235b      	movs	r3, #91	; 0x5b
 800644c:	7023      	strb	r3, [r4, #0]
 800644e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006452:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006456:	f8d8 2000 	ldr.w	r2, [r8]
 800645a:	3301      	adds	r3, #1
 800645c:	2101      	movs	r1, #1
 800645e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006462:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006466:	b132      	cbz	r2, 8006476 <d_print_array_type.isra.14+0xf6>
 8006468:	4639      	mov	r1, r7
 800646a:	4620      	mov	r0, r4
 800646c:	f7fc fb9a 	bl	8002ba4 <d_print_comp>
 8006470:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006474:	e7b7      	b.n	80063e6 <d_print_array_type.isra.14+0x66>
 8006476:	1c4a      	adds	r2, r1, #1
 8006478:	e7c7      	b.n	800640a <d_print_array_type.isra.14+0x8a>
 800647a:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8006530 <d_print_array_type.isra.14+0x1b0>
 800647e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8006482:	f109 0a02 	add.w	sl, r9, #2
 8006486:	e016      	b.n	80064b6 <d_print_array_type.isra.14+0x136>
 8006488:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800648c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006490:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8006494:	4798      	blx	r3
 8006496:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800649a:	2200      	movs	r2, #0
 800649c:	3301      	adds	r3, #1
 800649e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80064a2:	45ca      	cmp	sl, r9
 80064a4:	f04f 0301 	mov.w	r3, #1
 80064a8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80064ac:	f804 b002 	strb.w	fp, [r4, r2]
 80064b0:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 80064b4:	d010      	beq.n	80064d8 <d_print_array_type.isra.14+0x158>
 80064b6:	2bff      	cmp	r3, #255	; 0xff
 80064b8:	4619      	mov	r1, r3
 80064ba:	4620      	mov	r0, r4
 80064bc:	f819 bb01 	ldrb.w	fp, [r9], #1
 80064c0:	d0e2      	beq.n	8006488 <d_print_array_type.isra.14+0x108>
 80064c2:	461a      	mov	r2, r3
 80064c4:	45ca      	cmp	sl, r9
 80064c6:	f103 0301 	add.w	r3, r3, #1
 80064ca:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80064ce:	f804 b002 	strb.w	fp, [r4, r2]
 80064d2:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 80064d6:	d1ee      	bne.n	80064b6 <d_print_array_type.isra.14+0x136>
 80064d8:	2300      	movs	r3, #0
 80064da:	4632      	mov	r2, r6
 80064dc:	4639      	mov	r1, r7
 80064de:	4620      	mov	r0, r4
 80064e0:	f7ff fe16 	bl	8006110 <d_print_mod_list>
 80064e4:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80064e8:	2bff      	cmp	r3, #255	; 0xff
 80064ea:	d119      	bne.n	8006520 <d_print_array_type.isra.14+0x1a0>
 80064ec:	2200      	movs	r2, #0
 80064ee:	4619      	mov	r1, r3
 80064f0:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 80064f4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80064f8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80064fc:	4620      	mov	r0, r4
 80064fe:	4798      	blx	r3
 8006500:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006504:	2229      	movs	r2, #41	; 0x29
 8006506:	3301      	adds	r3, #1
 8006508:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800650c:	7022      	strb	r2, [r4, #0]
 800650e:	2101      	movs	r1, #1
 8006510:	2220      	movs	r2, #32
 8006512:	1c4b      	adds	r3, r1, #1
 8006514:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8006518:	5462      	strb	r2, [r4, r1]
 800651a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800651e:	e788      	b.n	8006432 <d_print_array_type.isra.14+0xb2>
 8006520:	2229      	movs	r2, #41	; 0x29
 8006522:	1c59      	adds	r1, r3, #1
 8006524:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006528:	54e2      	strb	r2, [r4, r3]
 800652a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800652e:	e73b      	b.n	80063a8 <d_print_array_type.isra.14+0x28>
 8006530:	0803506c 	.word	0x0803506c

08006534 <d_print_expr_op>:
 8006534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006538:	7815      	ldrb	r5, [r2, #0]
 800653a:	2d31      	cmp	r5, #49	; 0x31
 800653c:	d003      	beq.n	8006546 <d_print_expr_op+0x12>
 800653e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006542:	f7fc bb2f 	b.w	8002ba4 <d_print_comp>
 8006546:	6893      	ldr	r3, [r2, #8]
 8006548:	e9d3 5601 	ldrd	r5, r6, [r3, #4]
 800654c:	b37e      	cbz	r6, 80065ae <d_print_expr_op+0x7a>
 800654e:	442e      	add	r6, r5
 8006550:	4604      	mov	r4, r0
 8006552:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8006556:	3e01      	subs	r6, #1
 8006558:	3d01      	subs	r5, #1
 800655a:	2700      	movs	r7, #0
 800655c:	e016      	b.n	800658c <d_print_expr_op+0x58>
 800655e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006562:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006566:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 800656a:	4798      	blx	r3
 800656c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006570:	2200      	movs	r2, #0
 8006572:	3301      	adds	r3, #1
 8006574:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006578:	42b5      	cmp	r5, r6
 800657a:	f04f 0301 	mov.w	r3, #1
 800657e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8006582:	f804 8002 	strb.w	r8, [r4, r2]
 8006586:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800658a:	d010      	beq.n	80065ae <d_print_expr_op+0x7a>
 800658c:	2bff      	cmp	r3, #255	; 0xff
 800658e:	4619      	mov	r1, r3
 8006590:	4620      	mov	r0, r4
 8006592:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 8006596:	d0e2      	beq.n	800655e <d_print_expr_op+0x2a>
 8006598:	461a      	mov	r2, r3
 800659a:	42b5      	cmp	r5, r6
 800659c:	f103 0301 	add.w	r3, r3, #1
 80065a0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80065a4:	f804 8002 	strb.w	r8, [r4, r2]
 80065a8:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80065ac:	d1ee      	bne.n	800658c <d_print_expr_op+0x58>
 80065ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065b2:	bf00      	nop

080065b4 <d_print_subexpr>:
 80065b4:	7813      	ldrb	r3, [r2, #0]
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065bc:	4604      	mov	r4, r0
 80065be:	d941      	bls.n	8006644 <d_print_subexpr+0x90>
 80065c0:	2b30      	cmp	r3, #48	; 0x30
 80065c2:	d03f      	beq.n	8006644 <d_print_subexpr+0x90>
 80065c4:	2b06      	cmp	r3, #6
 80065c6:	d03d      	beq.n	8006644 <d_print_subexpr+0x90>
 80065c8:	f8d0 7100 	ldr.w	r7, [r0, #256]	; 0x100
 80065cc:	2fff      	cmp	r7, #255	; 0xff
 80065ce:	460e      	mov	r6, r1
 80065d0:	4615      	mov	r5, r2
 80065d2:	d13e      	bne.n	8006652 <d_print_subexpr+0x9e>
 80065d4:	f04f 0800 	mov.w	r8, #0
 80065d8:	4639      	mov	r1, r7
 80065da:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80065de:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 80065e2:	f880 80ff 	strb.w	r8, [r0, #255]	; 0xff
 80065e6:	4798      	blx	r3
 80065e8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80065ec:	3301      	adds	r3, #1
 80065ee:	4647      	mov	r7, r8
 80065f0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80065f4:	2201      	movs	r2, #1
 80065f6:	2328      	movs	r3, #40	; 0x28
 80065f8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80065fc:	4631      	mov	r1, r6
 80065fe:	55e3      	strb	r3, [r4, r7]
 8006600:	462a      	mov	r2, r5
 8006602:	4620      	mov	r0, r4
 8006604:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006608:	f7fc facc 	bl	8002ba4 <d_print_comp>
 800660c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006610:	29ff      	cmp	r1, #255	; 0xff
 8006612:	d11c      	bne.n	800664e <d_print_subexpr+0x9a>
 8006614:	2500      	movs	r5, #0
 8006616:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800661a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800661e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8006622:	4620      	mov	r0, r4
 8006624:	4798      	blx	r3
 8006626:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800662a:	3301      	adds	r3, #1
 800662c:	4629      	mov	r1, r5
 800662e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006632:	2201      	movs	r2, #1
 8006634:	2329      	movs	r3, #41	; 0x29
 8006636:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800663a:	5463      	strb	r3, [r4, r1]
 800663c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006644:	4620      	mov	r0, r4
 8006646:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800664a:	f7fc baab 	b.w	8002ba4 <d_print_comp>
 800664e:	1c4a      	adds	r2, r1, #1
 8006650:	e7f0      	b.n	8006634 <d_print_subexpr+0x80>
 8006652:	1c7a      	adds	r2, r7, #1
 8006654:	e7cf      	b.n	80065f6 <d_print_subexpr+0x42>
 8006656:	bf00      	nop

08006658 <d_maybe_print_fold_expression.isra.20>:
 8006658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800665c:	6892      	ldr	r2, [r2, #8]
 800665e:	6812      	ldr	r2, [r2, #0]
 8006660:	7816      	ldrb	r6, [r2, #0]
 8006662:	2e66      	cmp	r6, #102	; 0x66
 8006664:	b083      	sub	sp, #12
 8006666:	d003      	beq.n	8006670 <d_maybe_print_fold_expression.isra.20+0x18>
 8006668:	2000      	movs	r0, #0
 800666a:	b003      	add	sp, #12
 800666c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8006676:	f899 3000 	ldrb.w	r3, [r9]
 800667a:	2b3b      	cmp	r3, #59	; 0x3b
 800667c:	f000 8110 	beq.w	80068a0 <d_maybe_print_fold_expression.isra.20+0x248>
 8006680:	2300      	movs	r3, #0
 8006682:	9301      	str	r3, [sp, #4]
 8006684:	f04f 33ff 	mov.w	r3, #4294967295
 8006688:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
 800668c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
 8006690:	7853      	ldrb	r3, [r2, #1]
 8006692:	3b4c      	subs	r3, #76	; 0x4c
 8006694:	460d      	mov	r5, r1
 8006696:	4604      	mov	r4, r0
 8006698:	2b26      	cmp	r3, #38	; 0x26
 800669a:	d83a      	bhi.n	8006712 <d_maybe_print_fold_expression.isra.20+0xba>
 800669c:	e8df f003 	tbb	[pc, r3]
 80066a0:	393939b0 	.word	0x393939b0
 80066a4:	39b03939 	.word	0x39b03939
 80066a8:	39393939 	.word	0x39393939
 80066ac:	39393939 	.word	0x39393939
 80066b0:	39393939 	.word	0x39393939
 80066b4:	39393939 	.word	0x39393939
 80066b8:	39393939 	.word	0x39393939
 80066bc:	39393939 	.word	0x39393939
 80066c0:	39393989 	.word	0x39393989
 80066c4:	3939      	.short	0x3939
 80066c6:	3f          	.byte	0x3f
 80066c7:	00          	.byte	0x00
 80066c8:	4642      	mov	r2, r8
 80066ca:	4629      	mov	r1, r5
 80066cc:	4620      	mov	r0, r4
 80066ce:	f7ff ff31 	bl	8006534 <d_print_expr_op>
 80066d2:	9a01      	ldr	r2, [sp, #4]
 80066d4:	4629      	mov	r1, r5
 80066d6:	4620      	mov	r0, r4
 80066d8:	f7ff ff6c 	bl	80065b4 <d_print_subexpr>
 80066dc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80066e0:	29ff      	cmp	r1, #255	; 0xff
 80066e2:	f040 80ea 	bne.w	80068ba <d_maybe_print_fold_expression.isra.20+0x262>
 80066e6:	2500      	movs	r5, #0
 80066e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80066ec:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80066f0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80066f4:	4620      	mov	r0, r4
 80066f6:	4798      	blx	r3
 80066f8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80066fc:	3301      	adds	r3, #1
 80066fe:	4629      	mov	r1, r5
 8006700:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006704:	2201      	movs	r2, #1
 8006706:	2329      	movs	r3, #41	; 0x29
 8006708:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800670c:	5463      	strb	r3, [r4, r1]
 800670e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006712:	2001      	movs	r0, #1
 8006714:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
 8006718:	b003      	add	sp, #12
 800671a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800671e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8006722:	29ff      	cmp	r1, #255	; 0xff
 8006724:	f040 80cb 	bne.w	80068be <d_maybe_print_fold_expression.isra.20+0x266>
 8006728:	2600      	movs	r6, #0
 800672a:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800672e:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8006732:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8006736:	4798      	blx	r3
 8006738:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800673c:	3301      	adds	r3, #1
 800673e:	4631      	mov	r1, r6
 8006740:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006744:	2201      	movs	r2, #1
 8006746:	2328      	movs	r3, #40	; 0x28
 8006748:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800674c:	4620      	mov	r0, r4
 800674e:	5463      	strb	r3, [r4, r1]
 8006750:	464a      	mov	r2, r9
 8006752:	4629      	mov	r1, r5
 8006754:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006758:	f7ff ff2c 	bl	80065b4 <d_print_subexpr>
 800675c:	4629      	mov	r1, r5
 800675e:	4d59      	ldr	r5, [pc, #356]	; (80068c4 <d_maybe_print_fold_expression.isra.20+0x26c>)
 8006760:	4642      	mov	r2, r8
 8006762:	4620      	mov	r0, r4
 8006764:	f7ff fee6 	bl	8006534 <d_print_expr_op>
 8006768:	1d2e      	adds	r6, r5, #4
 800676a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800676e:	f04f 0800 	mov.w	r8, #0
 8006772:	e015      	b.n	80067a0 <d_maybe_print_fold_expression.isra.20+0x148>
 8006774:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006778:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800677c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006780:	4798      	blx	r3
 8006782:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006786:	3301      	adds	r3, #1
 8006788:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800678c:	2200      	movs	r2, #0
 800678e:	2301      	movs	r3, #1
 8006790:	42ae      	cmp	r6, r5
 8006792:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8006796:	f804 9002 	strb.w	r9, [r4, r2]
 800679a:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 800679e:	d0b8      	beq.n	8006712 <d_maybe_print_fold_expression.isra.20+0xba>
 80067a0:	2bff      	cmp	r3, #255	; 0xff
 80067a2:	4619      	mov	r1, r3
 80067a4:	4620      	mov	r0, r4
 80067a6:	f815 9b01 	ldrb.w	r9, [r5], #1
 80067aa:	d0e3      	beq.n	8006774 <d_maybe_print_fold_expression.isra.20+0x11c>
 80067ac:	461a      	mov	r2, r3
 80067ae:	3301      	adds	r3, #1
 80067b0:	e7ee      	b.n	8006790 <d_maybe_print_fold_expression.isra.20+0x138>
 80067b2:	4e45      	ldr	r6, [pc, #276]	; (80068c8 <d_maybe_print_fold_expression.isra.20+0x270>)
 80067b4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80067b8:	f106 0a04 	add.w	sl, r6, #4
 80067bc:	e017      	b.n	80067ee <d_maybe_print_fold_expression.isra.20+0x196>
 80067be:	f04f 0300 	mov.w	r3, #0
 80067c2:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 80067c6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80067ca:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80067ce:	4798      	blx	r3
 80067d0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80067d4:	3301      	adds	r3, #1
 80067d6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80067da:	2200      	movs	r2, #0
 80067dc:	2301      	movs	r3, #1
 80067de:	45b2      	cmp	sl, r6
 80067e0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80067e4:	f804 b002 	strb.w	fp, [r4, r2]
 80067e8:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 80067ec:	d05e      	beq.n	80068ac <d_maybe_print_fold_expression.isra.20+0x254>
 80067ee:	2bff      	cmp	r3, #255	; 0xff
 80067f0:	4619      	mov	r1, r3
 80067f2:	4620      	mov	r0, r4
 80067f4:	f816 bb01 	ldrb.w	fp, [r6], #1
 80067f8:	d0e1      	beq.n	80067be <d_maybe_print_fold_expression.isra.20+0x166>
 80067fa:	461a      	mov	r2, r3
 80067fc:	3301      	adds	r3, #1
 80067fe:	e7ee      	b.n	80067de <d_maybe_print_fold_expression.isra.20+0x186>
 8006800:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8006804:	2bff      	cmp	r3, #255	; 0xff
 8006806:	d110      	bne.n	800682a <d_maybe_print_fold_expression.isra.20+0x1d2>
 8006808:	2600      	movs	r6, #0
 800680a:	4619      	mov	r1, r3
 800680c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8006810:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8006814:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8006818:	4798      	blx	r3
 800681a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800681e:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8006822:	1c5a      	adds	r2, r3, #1
 8006824:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8006828:	4633      	mov	r3, r6
 800682a:	1c59      	adds	r1, r3, #1
 800682c:	f04f 0c28 	mov.w	ip, #40	; 0x28
 8006830:	464a      	mov	r2, r9
 8006832:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006836:	4620      	mov	r0, r4
 8006838:	f804 c003 	strb.w	ip, [r4, r3]
 800683c:	4629      	mov	r1, r5
 800683e:	f884 c104 	strb.w	ip, [r4, #260]	; 0x104
 8006842:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80068cc <d_maybe_print_fold_expression.isra.20+0x274>
 8006846:	f7ff feb5 	bl	80065b4 <d_print_subexpr>
 800684a:	4642      	mov	r2, r8
 800684c:	4629      	mov	r1, r5
 800684e:	4620      	mov	r0, r4
 8006850:	f7ff fe70 	bl	8006534 <d_print_expr_op>
 8006854:	f109 0a03 	add.w	sl, r9, #3
 8006858:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800685c:	2600      	movs	r6, #0
 800685e:	e016      	b.n	800688e <d_maybe_print_fold_expression.isra.20+0x236>
 8006860:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006864:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006868:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800686c:	4798      	blx	r3
 800686e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006872:	3301      	adds	r3, #1
 8006874:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006878:	2200      	movs	r2, #0
 800687a:	2301      	movs	r3, #1
 800687c:	45d1      	cmp	r9, sl
 800687e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8006882:	f804 b002 	strb.w	fp, [r4, r2]
 8006886:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 800688a:	f43f af1d 	beq.w	80066c8 <d_maybe_print_fold_expression.isra.20+0x70>
 800688e:	2bff      	cmp	r3, #255	; 0xff
 8006890:	4619      	mov	r1, r3
 8006892:	4620      	mov	r0, r4
 8006894:	f819 bb01 	ldrb.w	fp, [r9], #1
 8006898:	d0e2      	beq.n	8006860 <d_maybe_print_fold_expression.isra.20+0x208>
 800689a:	461a      	mov	r2, r3
 800689c:	3301      	adds	r3, #1
 800689e:	e7ed      	b.n	800687c <d_maybe_print_fold_expression.isra.20+0x224>
 80068a0:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80068a4:	9301      	str	r3, [sp, #4]
 80068a6:	f8d9 9008 	ldr.w	r9, [r9, #8]
 80068aa:	e6eb      	b.n	8006684 <d_maybe_print_fold_expression.isra.20+0x2c>
 80068ac:	4642      	mov	r2, r8
 80068ae:	4629      	mov	r1, r5
 80068b0:	4620      	mov	r0, r4
 80068b2:	f7ff fe3f 	bl	8006534 <d_print_expr_op>
 80068b6:	464a      	mov	r2, r9
 80068b8:	e70c      	b.n	80066d4 <d_maybe_print_fold_expression.isra.20+0x7c>
 80068ba:	1c4a      	adds	r2, r1, #1
 80068bc:	e723      	b.n	8006706 <d_maybe_print_fold_expression.isra.20+0xae>
 80068be:	1c4a      	adds	r2, r1, #1
 80068c0:	e741      	b.n	8006746 <d_maybe_print_fold_expression.isra.20+0xee>
 80068c2:	bf00      	nop
 80068c4:	0803516c 	.word	0x0803516c
 80068c8:	08035164 	.word	0x08035164
 80068cc:	08035070 	.word	0x08035070

080068d0 <d_demangle_callback.constprop.22>:
 80068d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068d4:	b0e5      	sub	sp, #404	; 0x194
 80068d6:	f890 a000 	ldrb.w	sl, [r0]
 80068da:	f1ba 0f5f 	cmp.w	sl, #95	; 0x5f
 80068de:	af00      	add	r7, sp, #0
 80068e0:	4605      	mov	r5, r0
 80068e2:	4688      	mov	r8, r1
 80068e4:	4616      	mov	r6, r2
 80068e6:	f000 80f3 	beq.w	8006ad0 <d_demangle_callback.constprop.22+0x200>
 80068ea:	2208      	movs	r2, #8
 80068ec:	49bb      	ldr	r1, [pc, #748]	; (8006bdc <d_demangle_callback.constprop.22+0x30c>)
 80068ee:	4628      	mov	r0, r5
 80068f0:	f028 fac0 	bl	802ee74 <strncmp>
 80068f4:	b948      	cbnz	r0, 800690a <d_demangle_callback.constprop.22+0x3a>
 80068f6:	7a2b      	ldrb	r3, [r5, #8]
 80068f8:	2b2e      	cmp	r3, #46	; 0x2e
 80068fa:	f000 80d8 	beq.w	8006aae <d_demangle_callback.constprop.22+0x1de>
 80068fe:	2b5f      	cmp	r3, #95	; 0x5f
 8006900:	f000 80d5 	beq.w	8006aae <d_demangle_callback.constprop.22+0x1de>
 8006904:	2b24      	cmp	r3, #36	; 0x24
 8006906:	f000 80d2 	beq.w	8006aae <d_demangle_callback.constprop.22+0x1de>
 800690a:	f04f 0900 	mov.w	r9, #0
 800690e:	4628      	mov	r0, r5
 8006910:	f000 f9e6 	bl	8006ce0 <strlen>
 8006914:	0142      	lsls	r2, r0, #5
 8006916:	0083      	lsls	r3, r0, #2
 8006918:	3208      	adds	r2, #8
 800691a:	330a      	adds	r3, #10
 800691c:	ebad 0d02 	sub.w	sp, sp, r2
 8006920:	f023 0307 	bic.w	r3, r3, #7
 8006924:	2400      	movs	r4, #0
 8006926:	46eb      	mov	fp, sp
 8006928:	1829      	adds	r1, r5, r0
 800692a:	ebad 0d03 	sub.w	sp, sp, r3
 800692e:	2211      	movs	r2, #17
 8006930:	0043      	lsls	r3, r0, #1
 8006932:	f1b9 0f01 	cmp.w	r9, #1
 8006936:	f8c7 b01c 	str.w	fp, [r7, #28]
 800693a:	f8c7 d028 	str.w	sp, [r7, #40]	; 0x28
 800693e:	60fd      	str	r5, [r7, #12]
 8006940:	61bd      	str	r5, [r7, #24]
 8006942:	6338      	str	r0, [r7, #48]	; 0x30
 8006944:	6139      	str	r1, [r7, #16]
 8006946:	627b      	str	r3, [r7, #36]	; 0x24
 8006948:	617a      	str	r2, [r7, #20]
 800694a:	623c      	str	r4, [r7, #32]
 800694c:	62fc      	str	r4, [r7, #44]	; 0x2c
 800694e:	e9c7 440d 	strd	r4, r4, [r7, #52]	; 0x34
 8006952:	e9c7 440f 	strd	r4, r4, [r7, #60]	; 0x3c
 8006956:	647c      	str	r4, [r7, #68]	; 0x44
 8006958:	f000 80a0 	beq.w	8006a9c <d_demangle_callback.constprop.22+0x1cc>
 800695c:	f0c0 80bf 	bcc.w	8006ade <d_demangle_callback.constprop.22+0x20e>
 8006960:	7aea      	ldrb	r2, [r5, #11]
 8006962:	f1b9 0f02 	cmp.w	r9, #2
 8006966:	f105 0a0b 	add.w	sl, r5, #11
 800696a:	bf14      	ite	ne
 800696c:	f04f 0944 	movne.w	r9, #68	; 0x44
 8006970:	f04f 0943 	moveq.w	r9, #67	; 0x43
 8006974:	2a5f      	cmp	r2, #95	; 0x5f
 8006976:	f8c7 a018 	str.w	sl, [r7, #24]
 800697a:	f000 80b9 	beq.w	8006af0 <d_demangle_callback.constprop.22+0x220>
 800697e:	4650      	mov	r0, sl
 8006980:	607b      	str	r3, [r7, #4]
 8006982:	f000 f9ad 	bl	8006ce0 <strlen>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2b00      	cmp	r3, #0
 800698a:	f340 8123 	ble.w	8006bd4 <d_demangle_callback.constprop.22+0x304>
 800698e:	2300      	movs	r3, #0
 8006990:	2201      	movs	r2, #1
 8006992:	f8cb 3004 	str.w	r3, [fp, #4]
 8006996:	623a      	str	r2, [r7, #32]
 8006998:	2800      	cmp	r0, #0
 800699a:	f000 811b 	beq.w	8006bd4 <d_demangle_callback.constprop.22+0x304>
 800699e:	e9cb a002 	strd	sl, r0, [fp, #8]
 80069a2:	f88b 3000 	strb.w	r3, [fp]
 80069a6:	4649      	mov	r1, r9
 80069a8:	2300      	movs	r3, #0
 80069aa:	465a      	mov	r2, fp
 80069ac:	f107 000c 	add.w	r0, r7, #12
 80069b0:	f7f9 fc1e 	bl	80001f0 <d_make_comp>
 80069b4:	69bc      	ldr	r4, [r7, #24]
 80069b6:	4605      	mov	r5, r0
 80069b8:	4620      	mov	r0, r4
 80069ba:	f000 f991 	bl	8006ce0 <strlen>
 80069be:	1823      	adds	r3, r4, r0
 80069c0:	61bb      	str	r3, [r7, #24]
 80069c2:	f814 9000 	ldrb.w	r9, [r4, r0]
 80069c6:	f1b9 0f00 	cmp.w	r9, #0
 80069ca:	d16a      	bne.n	8006aa2 <d_demangle_callback.constprop.22+0x1d2>
 80069cc:	2d00      	cmp	r5, #0
 80069ce:	d068      	beq.n	8006aa2 <d_demangle_callback.constprop.22+0x1d2>
 80069d0:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80069d4:	462a      	mov	r2, r5
 80069d6:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 80069da:	f507 70c4 	add.w	r0, r7, #392	; 0x188
 80069de:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
 80069e2:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
 80069e6:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 80069ea:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80069ee:	f8c4 9110 	str.w	r9, [r4, #272]	; 0x110
 80069f2:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 80069f6:	f8c4 9120 	str.w	r9, [r4, #288]	; 0x120
 80069fa:	f8c4 9124 	str.w	r9, [r4, #292]	; 0x124
 80069fe:	f8c4 9118 	str.w	r9, [r4, #280]	; 0x118
 8006a02:	f8c4 911c 	str.w	r9, [r4, #284]	; 0x11c
 8006a06:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
 8006a0a:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
 8006a0e:	f8c4 9130 	str.w	r9, [r4, #304]	; 0x130
 8006a12:	f8c4 9134 	str.w	r9, [r4, #308]	; 0x134
 8006a16:	f8c4 9138 	str.w	r9, [r4, #312]	; 0x138
 8006a1a:	f8c4 913c 	str.w	r9, [r4, #316]	; 0x13c
 8006a1e:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
 8006a22:	f7f9 fc49 	bl	80002b8 <d_count_templates_scopes>
 8006a26:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
 8006a2a:	f8d4 6140 	ldr.w	r6, [r4, #320]	; 0x140
 8006a2e:	f8c4 9144 	str.w	r9, [r4, #324]	; 0x144
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	fb06 f603 	mul.w	r6, r6, r3
 8006a38:	461a      	mov	r2, r3
 8006a3a:	bfb8      	it	lt
 8006a3c:	2201      	movlt	r2, #1
 8006a3e:	00d2      	lsls	r2, r2, #3
 8006a40:	2e01      	cmp	r6, #1
 8006a42:	4633      	mov	r3, r6
 8006a44:	f102 0208 	add.w	r2, r2, #8
 8006a48:	bfb8      	it	lt
 8006a4a:	2301      	movlt	r3, #1
 8006a4c:	46e8      	mov	r8, sp
 8006a4e:	00db      	lsls	r3, r3, #3
 8006a50:	ebad 0d02 	sub.w	sp, sp, r2
 8006a54:	3308      	adds	r3, #8
 8006a56:	4669      	mov	r1, sp
 8006a58:	462a      	mov	r2, r5
 8006a5a:	ebad 0d03 	sub.w	sp, sp, r3
 8006a5e:	4620      	mov	r0, r4
 8006a60:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
 8006a64:	2111      	movs	r1, #17
 8006a66:	f8c4 d138 	str.w	sp, [r4, #312]	; 0x138
 8006a6a:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
 8006a6e:	f7fc f899 	bl	8002ba4 <d_print_comp>
 8006a72:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006a76:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006a7a:	f804 9001 	strb.w	r9, [r4, r1]
 8006a7e:	4620      	mov	r0, r4
 8006a80:	46c5      	mov	sp, r8
 8006a82:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006a86:	4798      	blx	r3
 8006a88:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
 8006a8c:	fab0 f080 	clz	r0, r0
 8006a90:	0940      	lsrs	r0, r0, #5
 8006a92:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8006a96:	46bd      	mov	sp, r7
 8006a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a9c:	f1ba 0f5f 	cmp.w	sl, #95	; 0x5f
 8006aa0:	d033      	beq.n	8006b0a <d_demangle_callback.constprop.22+0x23a>
 8006aa2:	2000      	movs	r0, #0
 8006aa4:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aae:	7a6b      	ldrb	r3, [r5, #9]
 8006ab0:	2b44      	cmp	r3, #68	; 0x44
 8006ab2:	d002      	beq.n	8006aba <d_demangle_callback.constprop.22+0x1ea>
 8006ab4:	2b49      	cmp	r3, #73	; 0x49
 8006ab6:	f47f af28 	bne.w	800690a <d_demangle_callback.constprop.22+0x3a>
 8006aba:	7aaa      	ldrb	r2, [r5, #10]
 8006abc:	2a5f      	cmp	r2, #95	; 0x5f
 8006abe:	f47f af24 	bne.w	800690a <d_demangle_callback.constprop.22+0x3a>
 8006ac2:	2b49      	cmp	r3, #73	; 0x49
 8006ac4:	bf14      	ite	ne
 8006ac6:	f04f 0903 	movne.w	r9, #3
 8006aca:	f04f 0902 	moveq.w	r9, #2
 8006ace:	e71e      	b.n	800690e <d_demangle_callback.constprop.22+0x3e>
 8006ad0:	7843      	ldrb	r3, [r0, #1]
 8006ad2:	2b5a      	cmp	r3, #90	; 0x5a
 8006ad4:	f47f af09 	bne.w	80068ea <d_demangle_callback.constprop.22+0x1a>
 8006ad8:	f04f 0901 	mov.w	r9, #1
 8006adc:	e717      	b.n	800690e <d_demangle_callback.constprop.22+0x3e>
 8006ade:	f107 000c 	add.w	r0, r7, #12
 8006ae2:	f7fa fe05 	bl	80016f0 <d_type>
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	4605      	mov	r5, r0
 8006aea:	f893 9000 	ldrb.w	r9, [r3]
 8006aee:	e76a      	b.n	80069c6 <d_demangle_callback.constprop.22+0xf6>
 8006af0:	7b2a      	ldrb	r2, [r5, #12]
 8006af2:	2a5a      	cmp	r2, #90	; 0x5a
 8006af4:	f47f af43 	bne.w	800697e <d_demangle_callback.constprop.22+0xae>
 8006af8:	350d      	adds	r5, #13
 8006afa:	4621      	mov	r1, r4
 8006afc:	f107 000c 	add.w	r0, r7, #12
 8006b00:	61bd      	str	r5, [r7, #24]
 8006b02:	f7fb fd37 	bl	8002574 <d_encoding>
 8006b06:	4683      	mov	fp, r0
 8006b08:	e74d      	b.n	80069a6 <d_demangle_callback.constprop.22+0xd6>
 8006b0a:	786b      	ldrb	r3, [r5, #1]
 8006b0c:	2b5a      	cmp	r3, #90	; 0x5a
 8006b0e:	d1c8      	bne.n	8006aa2 <d_demangle_callback.constprop.22+0x1d2>
 8006b10:	3502      	adds	r5, #2
 8006b12:	4649      	mov	r1, r9
 8006b14:	f107 000c 	add.w	r0, r7, #12
 8006b18:	61bd      	str	r5, [r7, #24]
 8006b1a:	f7fb fd2b 	bl	8002574 <d_encoding>
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	07db      	lsls	r3, r3, #31
 8006b22:	4605      	mov	r5, r0
 8006b24:	d552      	bpl.n	8006bcc <d_demangle_callback.constprop.22+0x2fc>
 8006b26:	69b8      	ldr	r0, [r7, #24]
 8006b28:	f890 9000 	ldrb.w	r9, [r0]
 8006b2c:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
 8006b30:	f47f af49 	bne.w	80069c6 <d_demangle_callback.constprop.22+0xf6>
 8006b34:	7843      	ldrb	r3, [r0, #1]
 8006b36:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006b3a:	2a19      	cmp	r2, #25
 8006b3c:	d93a      	bls.n	8006bb4 <d_demangle_callback.constprop.22+0x2e4>
 8006b3e:	2b5f      	cmp	r3, #95	; 0x5f
 8006b40:	d038      	beq.n	8006bb4 <d_demangle_callback.constprop.22+0x2e4>
 8006b42:	3b30      	subs	r3, #48	; 0x30
 8006b44:	2b09      	cmp	r3, #9
 8006b46:	d841      	bhi.n	8006bcc <d_demangle_callback.constprop.22+0x2fc>
 8006b48:	7803      	ldrb	r3, [r0, #0]
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	2b2e      	cmp	r3, #46	; 0x2e
 8006b4e:	d112      	bne.n	8006b76 <d_demangle_callback.constprop.22+0x2a6>
 8006b50:	7853      	ldrb	r3, [r2, #1]
 8006b52:	3b30      	subs	r3, #48	; 0x30
 8006b54:	2b09      	cmp	r3, #9
 8006b56:	d80e      	bhi.n	8006b76 <d_demangle_callback.constprop.22+0x2a6>
 8006b58:	7893      	ldrb	r3, [r2, #2]
 8006b5a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006b5e:	2909      	cmp	r1, #9
 8006b60:	f102 0202 	add.w	r2, r2, #2
 8006b64:	d8f2      	bhi.n	8006b4c <d_demangle_callback.constprop.22+0x27c>
 8006b66:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8006b6a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006b6e:	2909      	cmp	r1, #9
 8006b70:	d9f9      	bls.n	8006b66 <d_demangle_callback.constprop.22+0x296>
 8006b72:	2b2e      	cmp	r3, #46	; 0x2e
 8006b74:	d0ec      	beq.n	8006b50 <d_demangle_callback.constprop.22+0x280>
 8006b76:	e9d7 1308 	ldrd	r1, r3, [r7, #32]
 8006b7a:	4299      	cmp	r1, r3
 8006b7c:	61ba      	str	r2, [r7, #24]
 8006b7e:	da17      	bge.n	8006bb0 <d_demangle_callback.constprop.22+0x2e0>
 8006b80:	f8d7 e01c 	ldr.w	lr, [r7, #28]
 8006b84:	ea4f 1c01 	mov.w	ip, r1, lsl #4
 8006b88:	eb0e 030c 	add.w	r3, lr, ip
 8006b8c:	3101      	adds	r1, #1
 8006b8e:	1a12      	subs	r2, r2, r0
 8006b90:	605c      	str	r4, [r3, #4]
 8006b92:	6239      	str	r1, [r7, #32]
 8006b94:	d00c      	beq.n	8006bb0 <d_demangle_callback.constprop.22+0x2e0>
 8006b96:	605c      	str	r4, [r3, #4]
 8006b98:	f80e 400c 	strb.w	r4, [lr, ip]
 8006b9c:	e9c3 0202 	strd	r0, r2, [r3, #8]
 8006ba0:	462a      	mov	r2, r5
 8006ba2:	214d      	movs	r1, #77	; 0x4d
 8006ba4:	f107 000c 	add.w	r0, r7, #12
 8006ba8:	f7f9 fb22 	bl	80001f0 <d_make_comp>
 8006bac:	4605      	mov	r5, r0
 8006bae:	e7ba      	b.n	8006b26 <d_demangle_callback.constprop.22+0x256>
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	e7f5      	b.n	8006ba0 <d_demangle_callback.constprop.22+0x2d0>
 8006bb4:	1c81      	adds	r1, r0, #2
 8006bb6:	460a      	mov	r2, r1
 8006bb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bbc:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 8006bc0:	f1bc 0f19 	cmp.w	ip, #25
 8006bc4:	d9f7      	bls.n	8006bb6 <d_demangle_callback.constprop.22+0x2e6>
 8006bc6:	2b5f      	cmp	r3, #95	; 0x5f
 8006bc8:	d0f5      	beq.n	8006bb6 <d_demangle_callback.constprop.22+0x2e6>
 8006bca:	e7bf      	b.n	8006b4c <d_demangle_callback.constprop.22+0x27c>
 8006bcc:	69bb      	ldr	r3, [r7, #24]
 8006bce:	f893 9000 	ldrb.w	r9, [r3]
 8006bd2:	e6f8      	b.n	80069c6 <d_demangle_callback.constprop.22+0xf6>
 8006bd4:	f04f 0b00 	mov.w	fp, #0
 8006bd8:	e6e5      	b.n	80069a6 <d_demangle_callback.constprop.22+0xd6>
 8006bda:	bf00      	nop
 8006bdc:	08034dfc 	.word	0x08034dfc

08006be0 <__cxa_demangle>:
 8006be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006be4:	b084      	sub	sp, #16
 8006be6:	b380      	cbz	r0, 8006c4a <__cxa_demangle+0x6a>
 8006be8:	b101      	cbz	r1, 8006bec <__cxa_demangle+0xc>
 8006bea:	b372      	cbz	r2, 8006c4a <__cxa_demangle+0x6a>
 8006bec:	2400      	movs	r4, #0
 8006bee:	4617      	mov	r7, r2
 8006bf0:	460e      	mov	r6, r1
 8006bf2:	466a      	mov	r2, sp
 8006bf4:	492b      	ldr	r1, [pc, #172]	; (8006ca4 <__cxa_demangle+0xc4>)
 8006bf6:	461d      	mov	r5, r3
 8006bf8:	e9cd 4400 	strd	r4, r4, [sp]
 8006bfc:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8006c00:	f7ff fe66 	bl	80068d0 <d_demangle_callback.constprop.22>
 8006c04:	2800      	cmp	r0, #0
 8006c06:	d047      	beq.n	8006c98 <__cxa_demangle+0xb8>
 8006c08:	9b03      	ldr	r3, [sp, #12]
 8006c0a:	9c00      	ldr	r4, [sp, #0]
 8006c0c:	b9ab      	cbnz	r3, 8006c3a <__cxa_demangle+0x5a>
 8006c0e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006c12:	b36c      	cbz	r4, 8006c70 <__cxa_demangle+0x90>
 8006c14:	b1b6      	cbz	r6, 8006c44 <__cxa_demangle+0x64>
 8006c16:	4620      	mov	r0, r4
 8006c18:	f000 f862 	bl	8006ce0 <strlen>
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	4298      	cmp	r0, r3
 8006c20:	d31c      	bcc.n	8006c5c <__cxa_demangle+0x7c>
 8006c22:	4630      	mov	r0, r6
 8006c24:	f027 fca6 	bl	802e574 <free>
 8006c28:	f8c7 8000 	str.w	r8, [r7]
 8006c2c:	b195      	cbz	r5, 8006c54 <__cxa_demangle+0x74>
 8006c2e:	2300      	movs	r3, #0
 8006c30:	4620      	mov	r0, r4
 8006c32:	602b      	str	r3, [r5, #0]
 8006c34:	b004      	add	sp, #16
 8006c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c3a:	b334      	cbz	r4, 8006c8a <__cxa_demangle+0xaa>
 8006c3c:	f04f 0801 	mov.w	r8, #1
 8006c40:	2e00      	cmp	r6, #0
 8006c42:	d1e8      	bne.n	8006c16 <__cxa_demangle+0x36>
 8006c44:	2f00      	cmp	r7, #0
 8006c46:	d1ef      	bne.n	8006c28 <__cxa_demangle+0x48>
 8006c48:	e7f0      	b.n	8006c2c <__cxa_demangle+0x4c>
 8006c4a:	b113      	cbz	r3, 8006c52 <__cxa_demangle+0x72>
 8006c4c:	f06f 0202 	mvn.w	r2, #2
 8006c50:	601a      	str	r2, [r3, #0]
 8006c52:	2400      	movs	r4, #0
 8006c54:	4620      	mov	r0, r4
 8006c56:	b004      	add	sp, #16
 8006c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c5c:	1c42      	adds	r2, r0, #1
 8006c5e:	4621      	mov	r1, r4
 8006c60:	4630      	mov	r0, r6
 8006c62:	f027 fc9e 	bl	802e5a2 <memcpy>
 8006c66:	4620      	mov	r0, r4
 8006c68:	f027 fc84 	bl	802e574 <free>
 8006c6c:	4634      	mov	r4, r6
 8006c6e:	e7dd      	b.n	8006c2c <__cxa_demangle+0x4c>
 8006c70:	2d00      	cmp	r5, #0
 8006c72:	d0ee      	beq.n	8006c52 <__cxa_demangle+0x72>
 8006c74:	f1b8 0f01 	cmp.w	r8, #1
 8006c78:	d009      	beq.n	8006c8e <__cxa_demangle+0xae>
 8006c7a:	2400      	movs	r4, #0
 8006c7c:	f06f 0301 	mvn.w	r3, #1
 8006c80:	4620      	mov	r0, r4
 8006c82:	602b      	str	r3, [r5, #0]
 8006c84:	b004      	add	sp, #16
 8006c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c8a:	2d00      	cmp	r5, #0
 8006c8c:	d0e1      	beq.n	8006c52 <__cxa_demangle+0x72>
 8006c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006c92:	602b      	str	r3, [r5, #0]
 8006c94:	2400      	movs	r4, #0
 8006c96:	e7dd      	b.n	8006c54 <__cxa_demangle+0x74>
 8006c98:	9800      	ldr	r0, [sp, #0]
 8006c9a:	f027 fc6b 	bl	802e574 <free>
 8006c9e:	2d00      	cmp	r5, #0
 8006ca0:	d1eb      	bne.n	8006c7a <__cxa_demangle+0x9a>
 8006ca2:	e7d6      	b.n	8006c52 <__cxa_demangle+0x72>
 8006ca4:	08000869 	.word	0x08000869

08006ca8 <__gcclibcxx_demangle_callback>:
 8006ca8:	b160      	cbz	r0, 8006cc4 <__gcclibcxx_demangle_callback+0x1c>
 8006caa:	b508      	push	{r3, lr}
 8006cac:	b139      	cbz	r1, 8006cbe <__gcclibcxx_demangle_callback+0x16>
 8006cae:	f7ff fe0f 	bl	80068d0 <d_demangle_callback.constprop.22>
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	bf0c      	ite	eq
 8006cb6:	f06f 0001 	mvneq.w	r0, #1
 8006cba:	2000      	movne	r0, #0
 8006cbc:	bd08      	pop	{r3, pc}
 8006cbe:	f06f 0002 	mvn.w	r0, #2
 8006cc2:	bd08      	pop	{r3, pc}
 8006cc4:	f06f 0002 	mvn.w	r0, #2
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop

08006ccc <strcmp>:
 8006ccc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cd4:	2a01      	cmp	r2, #1
 8006cd6:	bf28      	it	cs
 8006cd8:	429a      	cmpcs	r2, r3
 8006cda:	d0f7      	beq.n	8006ccc <strcmp>
 8006cdc:	1ad0      	subs	r0, r2, r3
 8006cde:	4770      	bx	lr

08006ce0 <strlen>:
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ce6:	2a00      	cmp	r2, #0
 8006ce8:	d1fb      	bne.n	8006ce2 <strlen+0x2>
 8006cea:	1a18      	subs	r0, r3, r0
 8006cec:	3801      	subs	r0, #1
 8006cee:	4770      	bx	lr

08006cf0 <memchr>:
 8006cf0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8006cf4:	2a10      	cmp	r2, #16
 8006cf6:	db2b      	blt.n	8006d50 <memchr+0x60>
 8006cf8:	f010 0f07 	tst.w	r0, #7
 8006cfc:	d008      	beq.n	8006d10 <memchr+0x20>
 8006cfe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006d02:	3a01      	subs	r2, #1
 8006d04:	428b      	cmp	r3, r1
 8006d06:	d02d      	beq.n	8006d64 <memchr+0x74>
 8006d08:	f010 0f07 	tst.w	r0, #7
 8006d0c:	b342      	cbz	r2, 8006d60 <memchr+0x70>
 8006d0e:	d1f6      	bne.n	8006cfe <memchr+0xe>
 8006d10:	b4f0      	push	{r4, r5, r6, r7}
 8006d12:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8006d16:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8006d1a:	f022 0407 	bic.w	r4, r2, #7
 8006d1e:	f07f 0700 	mvns.w	r7, #0
 8006d22:	2300      	movs	r3, #0
 8006d24:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8006d28:	3c08      	subs	r4, #8
 8006d2a:	ea85 0501 	eor.w	r5, r5, r1
 8006d2e:	ea86 0601 	eor.w	r6, r6, r1
 8006d32:	fa85 f547 	uadd8	r5, r5, r7
 8006d36:	faa3 f587 	sel	r5, r3, r7
 8006d3a:	fa86 f647 	uadd8	r6, r6, r7
 8006d3e:	faa5 f687 	sel	r6, r5, r7
 8006d42:	b98e      	cbnz	r6, 8006d68 <memchr+0x78>
 8006d44:	d1ee      	bne.n	8006d24 <memchr+0x34>
 8006d46:	bcf0      	pop	{r4, r5, r6, r7}
 8006d48:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8006d4c:	f002 0207 	and.w	r2, r2, #7
 8006d50:	b132      	cbz	r2, 8006d60 <memchr+0x70>
 8006d52:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006d56:	3a01      	subs	r2, #1
 8006d58:	ea83 0301 	eor.w	r3, r3, r1
 8006d5c:	b113      	cbz	r3, 8006d64 <memchr+0x74>
 8006d5e:	d1f8      	bne.n	8006d52 <memchr+0x62>
 8006d60:	2000      	movs	r0, #0
 8006d62:	4770      	bx	lr
 8006d64:	3801      	subs	r0, #1
 8006d66:	4770      	bx	lr
 8006d68:	2d00      	cmp	r5, #0
 8006d6a:	bf06      	itte	eq
 8006d6c:	4635      	moveq	r5, r6
 8006d6e:	3803      	subeq	r0, #3
 8006d70:	3807      	subne	r0, #7
 8006d72:	f015 0f01 	tst.w	r5, #1
 8006d76:	d107      	bne.n	8006d88 <memchr+0x98>
 8006d78:	3001      	adds	r0, #1
 8006d7a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8006d7e:	bf02      	ittt	eq
 8006d80:	3001      	addeq	r0, #1
 8006d82:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8006d86:	3001      	addeq	r0, #1
 8006d88:	bcf0      	pop	{r4, r5, r6, r7}
 8006d8a:	3801      	subs	r0, #1
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop

08006d90 <__aeabi_drsub>:
 8006d90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8006d94:	e002      	b.n	8006d9c <__adddf3>
 8006d96:	bf00      	nop

08006d98 <__aeabi_dsub>:
 8006d98:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08006d9c <__adddf3>:
 8006d9c:	b530      	push	{r4, r5, lr}
 8006d9e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8006da2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8006da6:	ea94 0f05 	teq	r4, r5
 8006daa:	bf08      	it	eq
 8006dac:	ea90 0f02 	teqeq	r0, r2
 8006db0:	bf1f      	itttt	ne
 8006db2:	ea54 0c00 	orrsne.w	ip, r4, r0
 8006db6:	ea55 0c02 	orrsne.w	ip, r5, r2
 8006dba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8006dbe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006dc2:	f000 80e2 	beq.w	8006f8a <__adddf3+0x1ee>
 8006dc6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8006dca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8006dce:	bfb8      	it	lt
 8006dd0:	426d      	neglt	r5, r5
 8006dd2:	dd0c      	ble.n	8006dee <__adddf3+0x52>
 8006dd4:	442c      	add	r4, r5
 8006dd6:	ea80 0202 	eor.w	r2, r0, r2
 8006dda:	ea81 0303 	eor.w	r3, r1, r3
 8006dde:	ea82 0000 	eor.w	r0, r2, r0
 8006de2:	ea83 0101 	eor.w	r1, r3, r1
 8006de6:	ea80 0202 	eor.w	r2, r0, r2
 8006dea:	ea81 0303 	eor.w	r3, r1, r3
 8006dee:	2d36      	cmp	r5, #54	; 0x36
 8006df0:	bf88      	it	hi
 8006df2:	bd30      	pophi	{r4, r5, pc}
 8006df4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006df8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006dfc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8006e00:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8006e04:	d002      	beq.n	8006e0c <__adddf3+0x70>
 8006e06:	4240      	negs	r0, r0
 8006e08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006e0c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8006e10:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006e14:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8006e18:	d002      	beq.n	8006e20 <__adddf3+0x84>
 8006e1a:	4252      	negs	r2, r2
 8006e1c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8006e20:	ea94 0f05 	teq	r4, r5
 8006e24:	f000 80a7 	beq.w	8006f76 <__adddf3+0x1da>
 8006e28:	f1a4 0401 	sub.w	r4, r4, #1
 8006e2c:	f1d5 0e20 	rsbs	lr, r5, #32
 8006e30:	db0d      	blt.n	8006e4e <__adddf3+0xb2>
 8006e32:	fa02 fc0e 	lsl.w	ip, r2, lr
 8006e36:	fa22 f205 	lsr.w	r2, r2, r5
 8006e3a:	1880      	adds	r0, r0, r2
 8006e3c:	f141 0100 	adc.w	r1, r1, #0
 8006e40:	fa03 f20e 	lsl.w	r2, r3, lr
 8006e44:	1880      	adds	r0, r0, r2
 8006e46:	fa43 f305 	asr.w	r3, r3, r5
 8006e4a:	4159      	adcs	r1, r3
 8006e4c:	e00e      	b.n	8006e6c <__adddf3+0xd0>
 8006e4e:	f1a5 0520 	sub.w	r5, r5, #32
 8006e52:	f10e 0e20 	add.w	lr, lr, #32
 8006e56:	2a01      	cmp	r2, #1
 8006e58:	fa03 fc0e 	lsl.w	ip, r3, lr
 8006e5c:	bf28      	it	cs
 8006e5e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8006e62:	fa43 f305 	asr.w	r3, r3, r5
 8006e66:	18c0      	adds	r0, r0, r3
 8006e68:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8006e6c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006e70:	d507      	bpl.n	8006e82 <__adddf3+0xe6>
 8006e72:	f04f 0e00 	mov.w	lr, #0
 8006e76:	f1dc 0c00 	rsbs	ip, ip, #0
 8006e7a:	eb7e 0000 	sbcs.w	r0, lr, r0
 8006e7e:	eb6e 0101 	sbc.w	r1, lr, r1
 8006e82:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006e86:	d31b      	bcc.n	8006ec0 <__adddf3+0x124>
 8006e88:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8006e8c:	d30c      	bcc.n	8006ea8 <__adddf3+0x10c>
 8006e8e:	0849      	lsrs	r1, r1, #1
 8006e90:	ea5f 0030 	movs.w	r0, r0, rrx
 8006e94:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8006e98:	f104 0401 	add.w	r4, r4, #1
 8006e9c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8006ea0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8006ea4:	f080 809a 	bcs.w	8006fdc <__adddf3+0x240>
 8006ea8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8006eac:	bf08      	it	eq
 8006eae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006eb2:	f150 0000 	adcs.w	r0, r0, #0
 8006eb6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006eba:	ea41 0105 	orr.w	r1, r1, r5
 8006ebe:	bd30      	pop	{r4, r5, pc}
 8006ec0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8006ec4:	4140      	adcs	r0, r0
 8006ec6:	eb41 0101 	adc.w	r1, r1, r1
 8006eca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006ece:	f1a4 0401 	sub.w	r4, r4, #1
 8006ed2:	d1e9      	bne.n	8006ea8 <__adddf3+0x10c>
 8006ed4:	f091 0f00 	teq	r1, #0
 8006ed8:	bf04      	itt	eq
 8006eda:	4601      	moveq	r1, r0
 8006edc:	2000      	moveq	r0, #0
 8006ede:	fab1 f381 	clz	r3, r1
 8006ee2:	bf08      	it	eq
 8006ee4:	3320      	addeq	r3, #32
 8006ee6:	f1a3 030b 	sub.w	r3, r3, #11
 8006eea:	f1b3 0220 	subs.w	r2, r3, #32
 8006eee:	da0c      	bge.n	8006f0a <__adddf3+0x16e>
 8006ef0:	320c      	adds	r2, #12
 8006ef2:	dd08      	ble.n	8006f06 <__adddf3+0x16a>
 8006ef4:	f102 0c14 	add.w	ip, r2, #20
 8006ef8:	f1c2 020c 	rsb	r2, r2, #12
 8006efc:	fa01 f00c 	lsl.w	r0, r1, ip
 8006f00:	fa21 f102 	lsr.w	r1, r1, r2
 8006f04:	e00c      	b.n	8006f20 <__adddf3+0x184>
 8006f06:	f102 0214 	add.w	r2, r2, #20
 8006f0a:	bfd8      	it	le
 8006f0c:	f1c2 0c20 	rsble	ip, r2, #32
 8006f10:	fa01 f102 	lsl.w	r1, r1, r2
 8006f14:	fa20 fc0c 	lsr.w	ip, r0, ip
 8006f18:	bfdc      	itt	le
 8006f1a:	ea41 010c 	orrle.w	r1, r1, ip
 8006f1e:	4090      	lslle	r0, r2
 8006f20:	1ae4      	subs	r4, r4, r3
 8006f22:	bfa2      	ittt	ge
 8006f24:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8006f28:	4329      	orrge	r1, r5
 8006f2a:	bd30      	popge	{r4, r5, pc}
 8006f2c:	ea6f 0404 	mvn.w	r4, r4
 8006f30:	3c1f      	subs	r4, #31
 8006f32:	da1c      	bge.n	8006f6e <__adddf3+0x1d2>
 8006f34:	340c      	adds	r4, #12
 8006f36:	dc0e      	bgt.n	8006f56 <__adddf3+0x1ba>
 8006f38:	f104 0414 	add.w	r4, r4, #20
 8006f3c:	f1c4 0220 	rsb	r2, r4, #32
 8006f40:	fa20 f004 	lsr.w	r0, r0, r4
 8006f44:	fa01 f302 	lsl.w	r3, r1, r2
 8006f48:	ea40 0003 	orr.w	r0, r0, r3
 8006f4c:	fa21 f304 	lsr.w	r3, r1, r4
 8006f50:	ea45 0103 	orr.w	r1, r5, r3
 8006f54:	bd30      	pop	{r4, r5, pc}
 8006f56:	f1c4 040c 	rsb	r4, r4, #12
 8006f5a:	f1c4 0220 	rsb	r2, r4, #32
 8006f5e:	fa20 f002 	lsr.w	r0, r0, r2
 8006f62:	fa01 f304 	lsl.w	r3, r1, r4
 8006f66:	ea40 0003 	orr.w	r0, r0, r3
 8006f6a:	4629      	mov	r1, r5
 8006f6c:	bd30      	pop	{r4, r5, pc}
 8006f6e:	fa21 f004 	lsr.w	r0, r1, r4
 8006f72:	4629      	mov	r1, r5
 8006f74:	bd30      	pop	{r4, r5, pc}
 8006f76:	f094 0f00 	teq	r4, #0
 8006f7a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8006f7e:	bf06      	itte	eq
 8006f80:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8006f84:	3401      	addeq	r4, #1
 8006f86:	3d01      	subne	r5, #1
 8006f88:	e74e      	b.n	8006e28 <__adddf3+0x8c>
 8006f8a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006f8e:	bf18      	it	ne
 8006f90:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006f94:	d029      	beq.n	8006fea <__adddf3+0x24e>
 8006f96:	ea94 0f05 	teq	r4, r5
 8006f9a:	bf08      	it	eq
 8006f9c:	ea90 0f02 	teqeq	r0, r2
 8006fa0:	d005      	beq.n	8006fae <__adddf3+0x212>
 8006fa2:	ea54 0c00 	orrs.w	ip, r4, r0
 8006fa6:	bf04      	itt	eq
 8006fa8:	4619      	moveq	r1, r3
 8006faa:	4610      	moveq	r0, r2
 8006fac:	bd30      	pop	{r4, r5, pc}
 8006fae:	ea91 0f03 	teq	r1, r3
 8006fb2:	bf1e      	ittt	ne
 8006fb4:	2100      	movne	r1, #0
 8006fb6:	2000      	movne	r0, #0
 8006fb8:	bd30      	popne	{r4, r5, pc}
 8006fba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8006fbe:	d105      	bne.n	8006fcc <__adddf3+0x230>
 8006fc0:	0040      	lsls	r0, r0, #1
 8006fc2:	4149      	adcs	r1, r1
 8006fc4:	bf28      	it	cs
 8006fc6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8006fca:	bd30      	pop	{r4, r5, pc}
 8006fcc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8006fd0:	bf3c      	itt	cc
 8006fd2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8006fd6:	bd30      	popcc	{r4, r5, pc}
 8006fd8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006fdc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8006fe0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006fe4:	f04f 0000 	mov.w	r0, #0
 8006fe8:	bd30      	pop	{r4, r5, pc}
 8006fea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006fee:	bf1a      	itte	ne
 8006ff0:	4619      	movne	r1, r3
 8006ff2:	4610      	movne	r0, r2
 8006ff4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8006ff8:	bf1c      	itt	ne
 8006ffa:	460b      	movne	r3, r1
 8006ffc:	4602      	movne	r2, r0
 8006ffe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8007002:	bf06      	itte	eq
 8007004:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8007008:	ea91 0f03 	teqeq	r1, r3
 800700c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8007010:	bd30      	pop	{r4, r5, pc}
 8007012:	bf00      	nop

08007014 <__aeabi_ui2d>:
 8007014:	f090 0f00 	teq	r0, #0
 8007018:	bf04      	itt	eq
 800701a:	2100      	moveq	r1, #0
 800701c:	4770      	bxeq	lr
 800701e:	b530      	push	{r4, r5, lr}
 8007020:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007024:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007028:	f04f 0500 	mov.w	r5, #0
 800702c:	f04f 0100 	mov.w	r1, #0
 8007030:	e750      	b.n	8006ed4 <__adddf3+0x138>
 8007032:	bf00      	nop

08007034 <__aeabi_i2d>:
 8007034:	f090 0f00 	teq	r0, #0
 8007038:	bf04      	itt	eq
 800703a:	2100      	moveq	r1, #0
 800703c:	4770      	bxeq	lr
 800703e:	b530      	push	{r4, r5, lr}
 8007040:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007044:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007048:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800704c:	bf48      	it	mi
 800704e:	4240      	negmi	r0, r0
 8007050:	f04f 0100 	mov.w	r1, #0
 8007054:	e73e      	b.n	8006ed4 <__adddf3+0x138>
 8007056:	bf00      	nop

08007058 <__aeabi_f2d>:
 8007058:	0042      	lsls	r2, r0, #1
 800705a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800705e:	ea4f 0131 	mov.w	r1, r1, rrx
 8007062:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8007066:	bf1f      	itttt	ne
 8007068:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800706c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8007070:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8007074:	4770      	bxne	lr
 8007076:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800707a:	bf08      	it	eq
 800707c:	4770      	bxeq	lr
 800707e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8007082:	bf04      	itt	eq
 8007084:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8007088:	4770      	bxeq	lr
 800708a:	b530      	push	{r4, r5, lr}
 800708c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8007090:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007094:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007098:	e71c      	b.n	8006ed4 <__adddf3+0x138>
 800709a:	bf00      	nop

0800709c <__aeabi_ul2d>:
 800709c:	ea50 0201 	orrs.w	r2, r0, r1
 80070a0:	bf08      	it	eq
 80070a2:	4770      	bxeq	lr
 80070a4:	b530      	push	{r4, r5, lr}
 80070a6:	f04f 0500 	mov.w	r5, #0
 80070aa:	e00a      	b.n	80070c2 <__aeabi_l2d+0x16>

080070ac <__aeabi_l2d>:
 80070ac:	ea50 0201 	orrs.w	r2, r0, r1
 80070b0:	bf08      	it	eq
 80070b2:	4770      	bxeq	lr
 80070b4:	b530      	push	{r4, r5, lr}
 80070b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80070ba:	d502      	bpl.n	80070c2 <__aeabi_l2d+0x16>
 80070bc:	4240      	negs	r0, r0
 80070be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80070c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80070c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80070ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80070ce:	f43f aed8 	beq.w	8006e82 <__adddf3+0xe6>
 80070d2:	f04f 0203 	mov.w	r2, #3
 80070d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80070da:	bf18      	it	ne
 80070dc:	3203      	addne	r2, #3
 80070de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80070e2:	bf18      	it	ne
 80070e4:	3203      	addne	r2, #3
 80070e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80070ea:	f1c2 0320 	rsb	r3, r2, #32
 80070ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80070f2:	fa20 f002 	lsr.w	r0, r0, r2
 80070f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80070fa:	ea40 000e 	orr.w	r0, r0, lr
 80070fe:	fa21 f102 	lsr.w	r1, r1, r2
 8007102:	4414      	add	r4, r2
 8007104:	e6bd      	b.n	8006e82 <__adddf3+0xe6>
 8007106:	bf00      	nop

08007108 <__aeabi_dmul>:
 8007108:	b570      	push	{r4, r5, r6, lr}
 800710a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800710e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8007112:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8007116:	bf1d      	ittte	ne
 8007118:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800711c:	ea94 0f0c 	teqne	r4, ip
 8007120:	ea95 0f0c 	teqne	r5, ip
 8007124:	f000 f8de 	bleq	80072e4 <__aeabi_dmul+0x1dc>
 8007128:	442c      	add	r4, r5
 800712a:	ea81 0603 	eor.w	r6, r1, r3
 800712e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8007132:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8007136:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800713a:	bf18      	it	ne
 800713c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8007140:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007144:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007148:	d038      	beq.n	80071bc <__aeabi_dmul+0xb4>
 800714a:	fba0 ce02 	umull	ip, lr, r0, r2
 800714e:	f04f 0500 	mov.w	r5, #0
 8007152:	fbe1 e502 	umlal	lr, r5, r1, r2
 8007156:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800715a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800715e:	f04f 0600 	mov.w	r6, #0
 8007162:	fbe1 5603 	umlal	r5, r6, r1, r3
 8007166:	f09c 0f00 	teq	ip, #0
 800716a:	bf18      	it	ne
 800716c:	f04e 0e01 	orrne.w	lr, lr, #1
 8007170:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8007174:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8007178:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800717c:	d204      	bcs.n	8007188 <__aeabi_dmul+0x80>
 800717e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8007182:	416d      	adcs	r5, r5
 8007184:	eb46 0606 	adc.w	r6, r6, r6
 8007188:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800718c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8007190:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8007194:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8007198:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800719c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80071a0:	bf88      	it	hi
 80071a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80071a6:	d81e      	bhi.n	80071e6 <__aeabi_dmul+0xde>
 80071a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80071ac:	bf08      	it	eq
 80071ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80071b2:	f150 0000 	adcs.w	r0, r0, #0
 80071b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80071ba:	bd70      	pop	{r4, r5, r6, pc}
 80071bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80071c0:	ea46 0101 	orr.w	r1, r6, r1
 80071c4:	ea40 0002 	orr.w	r0, r0, r2
 80071c8:	ea81 0103 	eor.w	r1, r1, r3
 80071cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80071d0:	bfc2      	ittt	gt
 80071d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80071d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80071da:	bd70      	popgt	{r4, r5, r6, pc}
 80071dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80071e0:	f04f 0e00 	mov.w	lr, #0
 80071e4:	3c01      	subs	r4, #1
 80071e6:	f300 80ab 	bgt.w	8007340 <__aeabi_dmul+0x238>
 80071ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80071ee:	bfde      	ittt	le
 80071f0:	2000      	movle	r0, #0
 80071f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80071f6:	bd70      	pople	{r4, r5, r6, pc}
 80071f8:	f1c4 0400 	rsb	r4, r4, #0
 80071fc:	3c20      	subs	r4, #32
 80071fe:	da35      	bge.n	800726c <__aeabi_dmul+0x164>
 8007200:	340c      	adds	r4, #12
 8007202:	dc1b      	bgt.n	800723c <__aeabi_dmul+0x134>
 8007204:	f104 0414 	add.w	r4, r4, #20
 8007208:	f1c4 0520 	rsb	r5, r4, #32
 800720c:	fa00 f305 	lsl.w	r3, r0, r5
 8007210:	fa20 f004 	lsr.w	r0, r0, r4
 8007214:	fa01 f205 	lsl.w	r2, r1, r5
 8007218:	ea40 0002 	orr.w	r0, r0, r2
 800721c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8007220:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007224:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8007228:	fa21 f604 	lsr.w	r6, r1, r4
 800722c:	eb42 0106 	adc.w	r1, r2, r6
 8007230:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007234:	bf08      	it	eq
 8007236:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800723a:	bd70      	pop	{r4, r5, r6, pc}
 800723c:	f1c4 040c 	rsb	r4, r4, #12
 8007240:	f1c4 0520 	rsb	r5, r4, #32
 8007244:	fa00 f304 	lsl.w	r3, r0, r4
 8007248:	fa20 f005 	lsr.w	r0, r0, r5
 800724c:	fa01 f204 	lsl.w	r2, r1, r4
 8007250:	ea40 0002 	orr.w	r0, r0, r2
 8007254:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007258:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800725c:	f141 0100 	adc.w	r1, r1, #0
 8007260:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007264:	bf08      	it	eq
 8007266:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800726a:	bd70      	pop	{r4, r5, r6, pc}
 800726c:	f1c4 0520 	rsb	r5, r4, #32
 8007270:	fa00 f205 	lsl.w	r2, r0, r5
 8007274:	ea4e 0e02 	orr.w	lr, lr, r2
 8007278:	fa20 f304 	lsr.w	r3, r0, r4
 800727c:	fa01 f205 	lsl.w	r2, r1, r5
 8007280:	ea43 0302 	orr.w	r3, r3, r2
 8007284:	fa21 f004 	lsr.w	r0, r1, r4
 8007288:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800728c:	fa21 f204 	lsr.w	r2, r1, r4
 8007290:	ea20 0002 	bic.w	r0, r0, r2
 8007294:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8007298:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800729c:	bf08      	it	eq
 800729e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80072a2:	bd70      	pop	{r4, r5, r6, pc}
 80072a4:	f094 0f00 	teq	r4, #0
 80072a8:	d10f      	bne.n	80072ca <__aeabi_dmul+0x1c2>
 80072aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80072ae:	0040      	lsls	r0, r0, #1
 80072b0:	eb41 0101 	adc.w	r1, r1, r1
 80072b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80072b8:	bf08      	it	eq
 80072ba:	3c01      	subeq	r4, #1
 80072bc:	d0f7      	beq.n	80072ae <__aeabi_dmul+0x1a6>
 80072be:	ea41 0106 	orr.w	r1, r1, r6
 80072c2:	f095 0f00 	teq	r5, #0
 80072c6:	bf18      	it	ne
 80072c8:	4770      	bxne	lr
 80072ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80072ce:	0052      	lsls	r2, r2, #1
 80072d0:	eb43 0303 	adc.w	r3, r3, r3
 80072d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80072d8:	bf08      	it	eq
 80072da:	3d01      	subeq	r5, #1
 80072dc:	d0f7      	beq.n	80072ce <__aeabi_dmul+0x1c6>
 80072de:	ea43 0306 	orr.w	r3, r3, r6
 80072e2:	4770      	bx	lr
 80072e4:	ea94 0f0c 	teq	r4, ip
 80072e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80072ec:	bf18      	it	ne
 80072ee:	ea95 0f0c 	teqne	r5, ip
 80072f2:	d00c      	beq.n	800730e <__aeabi_dmul+0x206>
 80072f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80072f8:	bf18      	it	ne
 80072fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80072fe:	d1d1      	bne.n	80072a4 <__aeabi_dmul+0x19c>
 8007300:	ea81 0103 	eor.w	r1, r1, r3
 8007304:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007308:	f04f 0000 	mov.w	r0, #0
 800730c:	bd70      	pop	{r4, r5, r6, pc}
 800730e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007312:	bf06      	itte	eq
 8007314:	4610      	moveq	r0, r2
 8007316:	4619      	moveq	r1, r3
 8007318:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800731c:	d019      	beq.n	8007352 <__aeabi_dmul+0x24a>
 800731e:	ea94 0f0c 	teq	r4, ip
 8007322:	d102      	bne.n	800732a <__aeabi_dmul+0x222>
 8007324:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8007328:	d113      	bne.n	8007352 <__aeabi_dmul+0x24a>
 800732a:	ea95 0f0c 	teq	r5, ip
 800732e:	d105      	bne.n	800733c <__aeabi_dmul+0x234>
 8007330:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8007334:	bf1c      	itt	ne
 8007336:	4610      	movne	r0, r2
 8007338:	4619      	movne	r1, r3
 800733a:	d10a      	bne.n	8007352 <__aeabi_dmul+0x24a>
 800733c:	ea81 0103 	eor.w	r1, r1, r3
 8007340:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007344:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8007348:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800734c:	f04f 0000 	mov.w	r0, #0
 8007350:	bd70      	pop	{r4, r5, r6, pc}
 8007352:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8007356:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800735a:	bd70      	pop	{r4, r5, r6, pc}

0800735c <__aeabi_ddiv>:
 800735c:	b570      	push	{r4, r5, r6, lr}
 800735e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8007362:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8007366:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800736a:	bf1d      	ittte	ne
 800736c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8007370:	ea94 0f0c 	teqne	r4, ip
 8007374:	ea95 0f0c 	teqne	r5, ip
 8007378:	f000 f8a7 	bleq	80074ca <__aeabi_ddiv+0x16e>
 800737c:	eba4 0405 	sub.w	r4, r4, r5
 8007380:	ea81 0e03 	eor.w	lr, r1, r3
 8007384:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8007388:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800738c:	f000 8088 	beq.w	80074a0 <__aeabi_ddiv+0x144>
 8007390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8007394:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8007398:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800739c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80073a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80073a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80073a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80073ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80073b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80073b4:	429d      	cmp	r5, r3
 80073b6:	bf08      	it	eq
 80073b8:	4296      	cmpeq	r6, r2
 80073ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80073be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80073c2:	d202      	bcs.n	80073ca <__aeabi_ddiv+0x6e>
 80073c4:	085b      	lsrs	r3, r3, #1
 80073c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80073ca:	1ab6      	subs	r6, r6, r2
 80073cc:	eb65 0503 	sbc.w	r5, r5, r3
 80073d0:	085b      	lsrs	r3, r3, #1
 80073d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80073d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80073da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80073de:	ebb6 0e02 	subs.w	lr, r6, r2
 80073e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80073e6:	bf22      	ittt	cs
 80073e8:	1ab6      	subcs	r6, r6, r2
 80073ea:	4675      	movcs	r5, lr
 80073ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80073f0:	085b      	lsrs	r3, r3, #1
 80073f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80073f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80073fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80073fe:	bf22      	ittt	cs
 8007400:	1ab6      	subcs	r6, r6, r2
 8007402:	4675      	movcs	r5, lr
 8007404:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8007408:	085b      	lsrs	r3, r3, #1
 800740a:	ea4f 0232 	mov.w	r2, r2, rrx
 800740e:	ebb6 0e02 	subs.w	lr, r6, r2
 8007412:	eb75 0e03 	sbcs.w	lr, r5, r3
 8007416:	bf22      	ittt	cs
 8007418:	1ab6      	subcs	r6, r6, r2
 800741a:	4675      	movcs	r5, lr
 800741c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8007420:	085b      	lsrs	r3, r3, #1
 8007422:	ea4f 0232 	mov.w	r2, r2, rrx
 8007426:	ebb6 0e02 	subs.w	lr, r6, r2
 800742a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800742e:	bf22      	ittt	cs
 8007430:	1ab6      	subcs	r6, r6, r2
 8007432:	4675      	movcs	r5, lr
 8007434:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8007438:	ea55 0e06 	orrs.w	lr, r5, r6
 800743c:	d018      	beq.n	8007470 <__aeabi_ddiv+0x114>
 800743e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8007442:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8007446:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800744a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800744e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8007452:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8007456:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800745a:	d1c0      	bne.n	80073de <__aeabi_ddiv+0x82>
 800745c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007460:	d10b      	bne.n	800747a <__aeabi_ddiv+0x11e>
 8007462:	ea41 0100 	orr.w	r1, r1, r0
 8007466:	f04f 0000 	mov.w	r0, #0
 800746a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800746e:	e7b6      	b.n	80073de <__aeabi_ddiv+0x82>
 8007470:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007474:	bf04      	itt	eq
 8007476:	4301      	orreq	r1, r0
 8007478:	2000      	moveq	r0, #0
 800747a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800747e:	bf88      	it	hi
 8007480:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8007484:	f63f aeaf 	bhi.w	80071e6 <__aeabi_dmul+0xde>
 8007488:	ebb5 0c03 	subs.w	ip, r5, r3
 800748c:	bf04      	itt	eq
 800748e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8007492:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8007496:	f150 0000 	adcs.w	r0, r0, #0
 800749a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800749e:	bd70      	pop	{r4, r5, r6, pc}
 80074a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80074a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80074a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80074ac:	bfc2      	ittt	gt
 80074ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80074b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80074b6:	bd70      	popgt	{r4, r5, r6, pc}
 80074b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80074bc:	f04f 0e00 	mov.w	lr, #0
 80074c0:	3c01      	subs	r4, #1
 80074c2:	e690      	b.n	80071e6 <__aeabi_dmul+0xde>
 80074c4:	ea45 0e06 	orr.w	lr, r5, r6
 80074c8:	e68d      	b.n	80071e6 <__aeabi_dmul+0xde>
 80074ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80074ce:	ea94 0f0c 	teq	r4, ip
 80074d2:	bf08      	it	eq
 80074d4:	ea95 0f0c 	teqeq	r5, ip
 80074d8:	f43f af3b 	beq.w	8007352 <__aeabi_dmul+0x24a>
 80074dc:	ea94 0f0c 	teq	r4, ip
 80074e0:	d10a      	bne.n	80074f8 <__aeabi_ddiv+0x19c>
 80074e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80074e6:	f47f af34 	bne.w	8007352 <__aeabi_dmul+0x24a>
 80074ea:	ea95 0f0c 	teq	r5, ip
 80074ee:	f47f af25 	bne.w	800733c <__aeabi_dmul+0x234>
 80074f2:	4610      	mov	r0, r2
 80074f4:	4619      	mov	r1, r3
 80074f6:	e72c      	b.n	8007352 <__aeabi_dmul+0x24a>
 80074f8:	ea95 0f0c 	teq	r5, ip
 80074fc:	d106      	bne.n	800750c <__aeabi_ddiv+0x1b0>
 80074fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8007502:	f43f aefd 	beq.w	8007300 <__aeabi_dmul+0x1f8>
 8007506:	4610      	mov	r0, r2
 8007508:	4619      	mov	r1, r3
 800750a:	e722      	b.n	8007352 <__aeabi_dmul+0x24a>
 800750c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007510:	bf18      	it	ne
 8007512:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8007516:	f47f aec5 	bne.w	80072a4 <__aeabi_dmul+0x19c>
 800751a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800751e:	f47f af0d 	bne.w	800733c <__aeabi_dmul+0x234>
 8007522:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8007526:	f47f aeeb 	bne.w	8007300 <__aeabi_dmul+0x1f8>
 800752a:	e712      	b.n	8007352 <__aeabi_dmul+0x24a>

0800752c <__aeabi_d2iz>:
 800752c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8007530:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8007534:	d215      	bcs.n	8007562 <__aeabi_d2iz+0x36>
 8007536:	d511      	bpl.n	800755c <__aeabi_d2iz+0x30>
 8007538:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800753c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8007540:	d912      	bls.n	8007568 <__aeabi_d2iz+0x3c>
 8007542:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8007546:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800754a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800754e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8007552:	fa23 f002 	lsr.w	r0, r3, r2
 8007556:	bf18      	it	ne
 8007558:	4240      	negne	r0, r0
 800755a:	4770      	bx	lr
 800755c:	f04f 0000 	mov.w	r0, #0
 8007560:	4770      	bx	lr
 8007562:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8007566:	d105      	bne.n	8007574 <__aeabi_d2iz+0x48>
 8007568:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800756c:	bf08      	it	eq
 800756e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8007572:	4770      	bx	lr
 8007574:	f04f 0000 	mov.w	r0, #0
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop

0800757c <__aeabi_uldivmod>:
 800757c:	b953      	cbnz	r3, 8007594 <__aeabi_uldivmod+0x18>
 800757e:	b94a      	cbnz	r2, 8007594 <__aeabi_uldivmod+0x18>
 8007580:	2900      	cmp	r1, #0
 8007582:	bf08      	it	eq
 8007584:	2800      	cmpeq	r0, #0
 8007586:	bf1c      	itt	ne
 8007588:	f04f 31ff 	movne.w	r1, #4294967295
 800758c:	f04f 30ff 	movne.w	r0, #4294967295
 8007590:	f001 b8f8 	b.w	8008784 <__aeabi_idiv0>
 8007594:	f1ad 0c08 	sub.w	ip, sp, #8
 8007598:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800759c:	f000 f806 	bl	80075ac <__udivmoddi4>
 80075a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80075a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075a8:	b004      	add	sp, #16
 80075aa:	4770      	bx	lr

080075ac <__udivmoddi4>:
 80075ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075b0:	9e08      	ldr	r6, [sp, #32]
 80075b2:	4604      	mov	r4, r0
 80075b4:	4688      	mov	r8, r1
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d14b      	bne.n	8007652 <__udivmoddi4+0xa6>
 80075ba:	428a      	cmp	r2, r1
 80075bc:	4615      	mov	r5, r2
 80075be:	d967      	bls.n	8007690 <__udivmoddi4+0xe4>
 80075c0:	fab2 f282 	clz	r2, r2
 80075c4:	b14a      	cbz	r2, 80075da <__udivmoddi4+0x2e>
 80075c6:	f1c2 0720 	rsb	r7, r2, #32
 80075ca:	fa01 f302 	lsl.w	r3, r1, r2
 80075ce:	fa20 f707 	lsr.w	r7, r0, r7
 80075d2:	4095      	lsls	r5, r2
 80075d4:	ea47 0803 	orr.w	r8, r7, r3
 80075d8:	4094      	lsls	r4, r2
 80075da:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80075de:	0c23      	lsrs	r3, r4, #16
 80075e0:	fbb8 f7fe 	udiv	r7, r8, lr
 80075e4:	fa1f fc85 	uxth.w	ip, r5
 80075e8:	fb0e 8817 	mls	r8, lr, r7, r8
 80075ec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80075f0:	fb07 f10c 	mul.w	r1, r7, ip
 80075f4:	4299      	cmp	r1, r3
 80075f6:	d909      	bls.n	800760c <__udivmoddi4+0x60>
 80075f8:	18eb      	adds	r3, r5, r3
 80075fa:	f107 30ff 	add.w	r0, r7, #4294967295
 80075fe:	f080 811b 	bcs.w	8007838 <__udivmoddi4+0x28c>
 8007602:	4299      	cmp	r1, r3
 8007604:	f240 8118 	bls.w	8007838 <__udivmoddi4+0x28c>
 8007608:	3f02      	subs	r7, #2
 800760a:	442b      	add	r3, r5
 800760c:	1a5b      	subs	r3, r3, r1
 800760e:	b2a4      	uxth	r4, r4
 8007610:	fbb3 f0fe 	udiv	r0, r3, lr
 8007614:	fb0e 3310 	mls	r3, lr, r0, r3
 8007618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800761c:	fb00 fc0c 	mul.w	ip, r0, ip
 8007620:	45a4      	cmp	ip, r4
 8007622:	d909      	bls.n	8007638 <__udivmoddi4+0x8c>
 8007624:	192c      	adds	r4, r5, r4
 8007626:	f100 33ff 	add.w	r3, r0, #4294967295
 800762a:	f080 8107 	bcs.w	800783c <__udivmoddi4+0x290>
 800762e:	45a4      	cmp	ip, r4
 8007630:	f240 8104 	bls.w	800783c <__udivmoddi4+0x290>
 8007634:	3802      	subs	r0, #2
 8007636:	442c      	add	r4, r5
 8007638:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800763c:	eba4 040c 	sub.w	r4, r4, ip
 8007640:	2700      	movs	r7, #0
 8007642:	b11e      	cbz	r6, 800764c <__udivmoddi4+0xa0>
 8007644:	40d4      	lsrs	r4, r2
 8007646:	2300      	movs	r3, #0
 8007648:	e9c6 4300 	strd	r4, r3, [r6]
 800764c:	4639      	mov	r1, r7
 800764e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007652:	428b      	cmp	r3, r1
 8007654:	d909      	bls.n	800766a <__udivmoddi4+0xbe>
 8007656:	2e00      	cmp	r6, #0
 8007658:	f000 80eb 	beq.w	8007832 <__udivmoddi4+0x286>
 800765c:	2700      	movs	r7, #0
 800765e:	e9c6 0100 	strd	r0, r1, [r6]
 8007662:	4638      	mov	r0, r7
 8007664:	4639      	mov	r1, r7
 8007666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800766a:	fab3 f783 	clz	r7, r3
 800766e:	2f00      	cmp	r7, #0
 8007670:	d147      	bne.n	8007702 <__udivmoddi4+0x156>
 8007672:	428b      	cmp	r3, r1
 8007674:	d302      	bcc.n	800767c <__udivmoddi4+0xd0>
 8007676:	4282      	cmp	r2, r0
 8007678:	f200 80fa 	bhi.w	8007870 <__udivmoddi4+0x2c4>
 800767c:	1a84      	subs	r4, r0, r2
 800767e:	eb61 0303 	sbc.w	r3, r1, r3
 8007682:	2001      	movs	r0, #1
 8007684:	4698      	mov	r8, r3
 8007686:	2e00      	cmp	r6, #0
 8007688:	d0e0      	beq.n	800764c <__udivmoddi4+0xa0>
 800768a:	e9c6 4800 	strd	r4, r8, [r6]
 800768e:	e7dd      	b.n	800764c <__udivmoddi4+0xa0>
 8007690:	b902      	cbnz	r2, 8007694 <__udivmoddi4+0xe8>
 8007692:	deff      	udf	#255	; 0xff
 8007694:	fab2 f282 	clz	r2, r2
 8007698:	2a00      	cmp	r2, #0
 800769a:	f040 808f 	bne.w	80077bc <__udivmoddi4+0x210>
 800769e:	1b49      	subs	r1, r1, r5
 80076a0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80076a4:	fa1f f885 	uxth.w	r8, r5
 80076a8:	2701      	movs	r7, #1
 80076aa:	fbb1 fcfe 	udiv	ip, r1, lr
 80076ae:	0c23      	lsrs	r3, r4, #16
 80076b0:	fb0e 111c 	mls	r1, lr, ip, r1
 80076b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80076b8:	fb08 f10c 	mul.w	r1, r8, ip
 80076bc:	4299      	cmp	r1, r3
 80076be:	d907      	bls.n	80076d0 <__udivmoddi4+0x124>
 80076c0:	18eb      	adds	r3, r5, r3
 80076c2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80076c6:	d202      	bcs.n	80076ce <__udivmoddi4+0x122>
 80076c8:	4299      	cmp	r1, r3
 80076ca:	f200 80cd 	bhi.w	8007868 <__udivmoddi4+0x2bc>
 80076ce:	4684      	mov	ip, r0
 80076d0:	1a59      	subs	r1, r3, r1
 80076d2:	b2a3      	uxth	r3, r4
 80076d4:	fbb1 f0fe 	udiv	r0, r1, lr
 80076d8:	fb0e 1410 	mls	r4, lr, r0, r1
 80076dc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80076e0:	fb08 f800 	mul.w	r8, r8, r0
 80076e4:	45a0      	cmp	r8, r4
 80076e6:	d907      	bls.n	80076f8 <__udivmoddi4+0x14c>
 80076e8:	192c      	adds	r4, r5, r4
 80076ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80076ee:	d202      	bcs.n	80076f6 <__udivmoddi4+0x14a>
 80076f0:	45a0      	cmp	r8, r4
 80076f2:	f200 80b6 	bhi.w	8007862 <__udivmoddi4+0x2b6>
 80076f6:	4618      	mov	r0, r3
 80076f8:	eba4 0408 	sub.w	r4, r4, r8
 80076fc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8007700:	e79f      	b.n	8007642 <__udivmoddi4+0x96>
 8007702:	f1c7 0c20 	rsb	ip, r7, #32
 8007706:	40bb      	lsls	r3, r7
 8007708:	fa22 fe0c 	lsr.w	lr, r2, ip
 800770c:	ea4e 0e03 	orr.w	lr, lr, r3
 8007710:	fa01 f407 	lsl.w	r4, r1, r7
 8007714:	fa20 f50c 	lsr.w	r5, r0, ip
 8007718:	fa21 f30c 	lsr.w	r3, r1, ip
 800771c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8007720:	4325      	orrs	r5, r4
 8007722:	fbb3 f9f8 	udiv	r9, r3, r8
 8007726:	0c2c      	lsrs	r4, r5, #16
 8007728:	fb08 3319 	mls	r3, r8, r9, r3
 800772c:	fa1f fa8e 	uxth.w	sl, lr
 8007730:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8007734:	fb09 f40a 	mul.w	r4, r9, sl
 8007738:	429c      	cmp	r4, r3
 800773a:	fa02 f207 	lsl.w	r2, r2, r7
 800773e:	fa00 f107 	lsl.w	r1, r0, r7
 8007742:	d90b      	bls.n	800775c <__udivmoddi4+0x1b0>
 8007744:	eb1e 0303 	adds.w	r3, lr, r3
 8007748:	f109 30ff 	add.w	r0, r9, #4294967295
 800774c:	f080 8087 	bcs.w	800785e <__udivmoddi4+0x2b2>
 8007750:	429c      	cmp	r4, r3
 8007752:	f240 8084 	bls.w	800785e <__udivmoddi4+0x2b2>
 8007756:	f1a9 0902 	sub.w	r9, r9, #2
 800775a:	4473      	add	r3, lr
 800775c:	1b1b      	subs	r3, r3, r4
 800775e:	b2ad      	uxth	r5, r5
 8007760:	fbb3 f0f8 	udiv	r0, r3, r8
 8007764:	fb08 3310 	mls	r3, r8, r0, r3
 8007768:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800776c:	fb00 fa0a 	mul.w	sl, r0, sl
 8007770:	45a2      	cmp	sl, r4
 8007772:	d908      	bls.n	8007786 <__udivmoddi4+0x1da>
 8007774:	eb1e 0404 	adds.w	r4, lr, r4
 8007778:	f100 33ff 	add.w	r3, r0, #4294967295
 800777c:	d26b      	bcs.n	8007856 <__udivmoddi4+0x2aa>
 800777e:	45a2      	cmp	sl, r4
 8007780:	d969      	bls.n	8007856 <__udivmoddi4+0x2aa>
 8007782:	3802      	subs	r0, #2
 8007784:	4474      	add	r4, lr
 8007786:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800778a:	fba0 8902 	umull	r8, r9, r0, r2
 800778e:	eba4 040a 	sub.w	r4, r4, sl
 8007792:	454c      	cmp	r4, r9
 8007794:	46c2      	mov	sl, r8
 8007796:	464b      	mov	r3, r9
 8007798:	d354      	bcc.n	8007844 <__udivmoddi4+0x298>
 800779a:	d051      	beq.n	8007840 <__udivmoddi4+0x294>
 800779c:	2e00      	cmp	r6, #0
 800779e:	d069      	beq.n	8007874 <__udivmoddi4+0x2c8>
 80077a0:	ebb1 050a 	subs.w	r5, r1, sl
 80077a4:	eb64 0403 	sbc.w	r4, r4, r3
 80077a8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80077ac:	40fd      	lsrs	r5, r7
 80077ae:	40fc      	lsrs	r4, r7
 80077b0:	ea4c 0505 	orr.w	r5, ip, r5
 80077b4:	e9c6 5400 	strd	r5, r4, [r6]
 80077b8:	2700      	movs	r7, #0
 80077ba:	e747      	b.n	800764c <__udivmoddi4+0xa0>
 80077bc:	f1c2 0320 	rsb	r3, r2, #32
 80077c0:	fa20 f703 	lsr.w	r7, r0, r3
 80077c4:	4095      	lsls	r5, r2
 80077c6:	fa01 f002 	lsl.w	r0, r1, r2
 80077ca:	fa21 f303 	lsr.w	r3, r1, r3
 80077ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80077d2:	4338      	orrs	r0, r7
 80077d4:	0c01      	lsrs	r1, r0, #16
 80077d6:	fbb3 f7fe 	udiv	r7, r3, lr
 80077da:	fa1f f885 	uxth.w	r8, r5
 80077de:	fb0e 3317 	mls	r3, lr, r7, r3
 80077e2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80077e6:	fb07 f308 	mul.w	r3, r7, r8
 80077ea:	428b      	cmp	r3, r1
 80077ec:	fa04 f402 	lsl.w	r4, r4, r2
 80077f0:	d907      	bls.n	8007802 <__udivmoddi4+0x256>
 80077f2:	1869      	adds	r1, r5, r1
 80077f4:	f107 3cff 	add.w	ip, r7, #4294967295
 80077f8:	d22f      	bcs.n	800785a <__udivmoddi4+0x2ae>
 80077fa:	428b      	cmp	r3, r1
 80077fc:	d92d      	bls.n	800785a <__udivmoddi4+0x2ae>
 80077fe:	3f02      	subs	r7, #2
 8007800:	4429      	add	r1, r5
 8007802:	1acb      	subs	r3, r1, r3
 8007804:	b281      	uxth	r1, r0
 8007806:	fbb3 f0fe 	udiv	r0, r3, lr
 800780a:	fb0e 3310 	mls	r3, lr, r0, r3
 800780e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007812:	fb00 f308 	mul.w	r3, r0, r8
 8007816:	428b      	cmp	r3, r1
 8007818:	d907      	bls.n	800782a <__udivmoddi4+0x27e>
 800781a:	1869      	adds	r1, r5, r1
 800781c:	f100 3cff 	add.w	ip, r0, #4294967295
 8007820:	d217      	bcs.n	8007852 <__udivmoddi4+0x2a6>
 8007822:	428b      	cmp	r3, r1
 8007824:	d915      	bls.n	8007852 <__udivmoddi4+0x2a6>
 8007826:	3802      	subs	r0, #2
 8007828:	4429      	add	r1, r5
 800782a:	1ac9      	subs	r1, r1, r3
 800782c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8007830:	e73b      	b.n	80076aa <__udivmoddi4+0xfe>
 8007832:	4637      	mov	r7, r6
 8007834:	4630      	mov	r0, r6
 8007836:	e709      	b.n	800764c <__udivmoddi4+0xa0>
 8007838:	4607      	mov	r7, r0
 800783a:	e6e7      	b.n	800760c <__udivmoddi4+0x60>
 800783c:	4618      	mov	r0, r3
 800783e:	e6fb      	b.n	8007638 <__udivmoddi4+0x8c>
 8007840:	4541      	cmp	r1, r8
 8007842:	d2ab      	bcs.n	800779c <__udivmoddi4+0x1f0>
 8007844:	ebb8 0a02 	subs.w	sl, r8, r2
 8007848:	eb69 020e 	sbc.w	r2, r9, lr
 800784c:	3801      	subs	r0, #1
 800784e:	4613      	mov	r3, r2
 8007850:	e7a4      	b.n	800779c <__udivmoddi4+0x1f0>
 8007852:	4660      	mov	r0, ip
 8007854:	e7e9      	b.n	800782a <__udivmoddi4+0x27e>
 8007856:	4618      	mov	r0, r3
 8007858:	e795      	b.n	8007786 <__udivmoddi4+0x1da>
 800785a:	4667      	mov	r7, ip
 800785c:	e7d1      	b.n	8007802 <__udivmoddi4+0x256>
 800785e:	4681      	mov	r9, r0
 8007860:	e77c      	b.n	800775c <__udivmoddi4+0x1b0>
 8007862:	3802      	subs	r0, #2
 8007864:	442c      	add	r4, r5
 8007866:	e747      	b.n	80076f8 <__udivmoddi4+0x14c>
 8007868:	f1ac 0c02 	sub.w	ip, ip, #2
 800786c:	442b      	add	r3, r5
 800786e:	e72f      	b.n	80076d0 <__udivmoddi4+0x124>
 8007870:	4638      	mov	r0, r7
 8007872:	e708      	b.n	8007686 <__udivmoddi4+0xda>
 8007874:	4637      	mov	r7, r6
 8007876:	e6e9      	b.n	800764c <__udivmoddi4+0xa0>

08007878 <selfrel_offset31>:
 8007878:	6803      	ldr	r3, [r0, #0]
 800787a:	005a      	lsls	r2, r3, #1
 800787c:	bf4c      	ite	mi
 800787e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8007882:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8007886:	4418      	add	r0, r3
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop

0800788c <search_EIT_table>:
 800788c:	b361      	cbz	r1, 80078e8 <search_EIT_table+0x5c>
 800788e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007892:	f101 3aff 	add.w	sl, r1, #4294967295
 8007896:	4690      	mov	r8, r2
 8007898:	4606      	mov	r6, r0
 800789a:	46d1      	mov	r9, sl
 800789c:	2700      	movs	r7, #0
 800789e:	eb07 0409 	add.w	r4, r7, r9
 80078a2:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 80078a6:	1064      	asrs	r4, r4, #1
 80078a8:	00e5      	lsls	r5, r4, #3
 80078aa:	1971      	adds	r1, r6, r5
 80078ac:	4608      	mov	r0, r1
 80078ae:	f7ff ffe3 	bl	8007878 <selfrel_offset31>
 80078b2:	45a2      	cmp	sl, r4
 80078b4:	4683      	mov	fp, r0
 80078b6:	f105 0008 	add.w	r0, r5, #8
 80078ba:	4430      	add	r0, r6
 80078bc:	d009      	beq.n	80078d2 <search_EIT_table+0x46>
 80078be:	f7ff ffdb 	bl	8007878 <selfrel_offset31>
 80078c2:	45c3      	cmp	fp, r8
 80078c4:	f100 30ff 	add.w	r0, r0, #4294967295
 80078c8:	d805      	bhi.n	80078d6 <search_EIT_table+0x4a>
 80078ca:	4540      	cmp	r0, r8
 80078cc:	d209      	bcs.n	80078e2 <search_EIT_table+0x56>
 80078ce:	1c67      	adds	r7, r4, #1
 80078d0:	e7e5      	b.n	800789e <search_EIT_table+0x12>
 80078d2:	45c3      	cmp	fp, r8
 80078d4:	d905      	bls.n	80078e2 <search_EIT_table+0x56>
 80078d6:	42a7      	cmp	r7, r4
 80078d8:	d002      	beq.n	80078e0 <search_EIT_table+0x54>
 80078da:	f104 39ff 	add.w	r9, r4, #4294967295
 80078de:	e7de      	b.n	800789e <search_EIT_table+0x12>
 80078e0:	2100      	movs	r1, #0
 80078e2:	4608      	mov	r0, r1
 80078e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078e8:	4608      	mov	r0, r1
 80078ea:	4770      	bx	lr

080078ec <__gnu_unwind_get_pr_addr>:
 80078ec:	2801      	cmp	r0, #1
 80078ee:	d007      	beq.n	8007900 <__gnu_unwind_get_pr_addr+0x14>
 80078f0:	2802      	cmp	r0, #2
 80078f2:	d007      	beq.n	8007904 <__gnu_unwind_get_pr_addr+0x18>
 80078f4:	4b04      	ldr	r3, [pc, #16]	; (8007908 <__gnu_unwind_get_pr_addr+0x1c>)
 80078f6:	2800      	cmp	r0, #0
 80078f8:	bf0c      	ite	eq
 80078fa:	4618      	moveq	r0, r3
 80078fc:	2000      	movne	r0, #0
 80078fe:	4770      	bx	lr
 8007900:	4802      	ldr	r0, [pc, #8]	; (800790c <__gnu_unwind_get_pr_addr+0x20>)
 8007902:	4770      	bx	lr
 8007904:	4802      	ldr	r0, [pc, #8]	; (8007910 <__gnu_unwind_get_pr_addr+0x24>)
 8007906:	4770      	bx	lr
 8007908:	08007fd9 	.word	0x08007fd9
 800790c:	08007fdd 	.word	0x08007fdd
 8007910:	08007fe1 	.word	0x08007fe1

08007914 <get_eit_entry>:
 8007914:	b530      	push	{r4, r5, lr}
 8007916:	4b25      	ldr	r3, [pc, #148]	; (80079ac <get_eit_entry+0x98>)
 8007918:	b083      	sub	sp, #12
 800791a:	4604      	mov	r4, r0
 800791c:	1e8d      	subs	r5, r1, #2
 800791e:	b34b      	cbz	r3, 8007974 <get_eit_entry+0x60>
 8007920:	a901      	add	r1, sp, #4
 8007922:	4628      	mov	r0, r5
 8007924:	f3af 8000 	nop.w
 8007928:	b1f0      	cbz	r0, 8007968 <get_eit_entry+0x54>
 800792a:	9901      	ldr	r1, [sp, #4]
 800792c:	462a      	mov	r2, r5
 800792e:	f7ff ffad 	bl	800788c <search_EIT_table>
 8007932:	4601      	mov	r1, r0
 8007934:	b1c0      	cbz	r0, 8007968 <get_eit_entry+0x54>
 8007936:	f7ff ff9f 	bl	8007878 <selfrel_offset31>
 800793a:	684b      	ldr	r3, [r1, #4]
 800793c:	64a0      	str	r0, [r4, #72]	; 0x48
 800793e:	2b01      	cmp	r3, #1
 8007940:	d02e      	beq.n	80079a0 <get_eit_entry+0x8c>
 8007942:	2b00      	cmp	r3, #0
 8007944:	f101 0004 	add.w	r0, r1, #4
 8007948:	db26      	blt.n	8007998 <get_eit_entry+0x84>
 800794a:	f7ff ff95 	bl	8007878 <selfrel_offset31>
 800794e:	2300      	movs	r3, #0
 8007950:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8007954:	6803      	ldr	r3, [r0, #0]
 8007956:	2b00      	cmp	r3, #0
 8007958:	db12      	blt.n	8007980 <get_eit_entry+0x6c>
 800795a:	f7ff ff8d 	bl	8007878 <selfrel_offset31>
 800795e:	2300      	movs	r3, #0
 8007960:	6120      	str	r0, [r4, #16]
 8007962:	4618      	mov	r0, r3
 8007964:	b003      	add	sp, #12
 8007966:	bd30      	pop	{r4, r5, pc}
 8007968:	2300      	movs	r3, #0
 800796a:	6123      	str	r3, [r4, #16]
 800796c:	2309      	movs	r3, #9
 800796e:	4618      	mov	r0, r3
 8007970:	b003      	add	sp, #12
 8007972:	bd30      	pop	{r4, r5, pc}
 8007974:	490e      	ldr	r1, [pc, #56]	; (80079b0 <get_eit_entry+0x9c>)
 8007976:	480f      	ldr	r0, [pc, #60]	; (80079b4 <get_eit_entry+0xa0>)
 8007978:	1a09      	subs	r1, r1, r0
 800797a:	10c9      	asrs	r1, r1, #3
 800797c:	9101      	str	r1, [sp, #4]
 800797e:	e7d5      	b.n	800792c <get_eit_entry+0x18>
 8007980:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8007984:	f7ff ffb2 	bl	80078ec <__gnu_unwind_get_pr_addr>
 8007988:	2800      	cmp	r0, #0
 800798a:	bf14      	ite	ne
 800798c:	2300      	movne	r3, #0
 800798e:	2309      	moveq	r3, #9
 8007990:	6120      	str	r0, [r4, #16]
 8007992:	4618      	mov	r0, r3
 8007994:	b003      	add	sp, #12
 8007996:	bd30      	pop	{r4, r5, pc}
 8007998:	2301      	movs	r3, #1
 800799a:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 800799e:	e7d9      	b.n	8007954 <get_eit_entry+0x40>
 80079a0:	2300      	movs	r3, #0
 80079a2:	6123      	str	r3, [r4, #16]
 80079a4:	2305      	movs	r3, #5
 80079a6:	4618      	mov	r0, r3
 80079a8:	b003      	add	sp, #12
 80079aa:	bd30      	pop	{r4, r5, pc}
 80079ac:	00000000 	.word	0x00000000
 80079b0:	0807b418 	.word	0x0807b418
 80079b4:	0807b278 	.word	0x0807b278

080079b8 <restore_non_core_regs>:
 80079b8:	6803      	ldr	r3, [r0, #0]
 80079ba:	07da      	lsls	r2, r3, #31
 80079bc:	b510      	push	{r4, lr}
 80079be:	4604      	mov	r4, r0
 80079c0:	d406      	bmi.n	80079d0 <restore_non_core_regs+0x18>
 80079c2:	079b      	lsls	r3, r3, #30
 80079c4:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80079c8:	d509      	bpl.n	80079de <restore_non_core_regs+0x26>
 80079ca:	f000 fc5f 	bl	800828c <__gnu_Unwind_Restore_VFP_D>
 80079ce:	6823      	ldr	r3, [r4, #0]
 80079d0:	0759      	lsls	r1, r3, #29
 80079d2:	d509      	bpl.n	80079e8 <restore_non_core_regs+0x30>
 80079d4:	071a      	lsls	r2, r3, #28
 80079d6:	d50e      	bpl.n	80079f6 <restore_non_core_regs+0x3e>
 80079d8:	06db      	lsls	r3, r3, #27
 80079da:	d513      	bpl.n	8007a04 <restore_non_core_regs+0x4c>
 80079dc:	bd10      	pop	{r4, pc}
 80079de:	f000 fc4d 	bl	800827c <__gnu_Unwind_Restore_VFP>
 80079e2:	6823      	ldr	r3, [r4, #0]
 80079e4:	0759      	lsls	r1, r3, #29
 80079e6:	d4f5      	bmi.n	80079d4 <restore_non_core_regs+0x1c>
 80079e8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80079ec:	f000 fc56 	bl	800829c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80079f0:	6823      	ldr	r3, [r4, #0]
 80079f2:	071a      	lsls	r2, r3, #28
 80079f4:	d4f0      	bmi.n	80079d8 <restore_non_core_regs+0x20>
 80079f6:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80079fa:	f000 fc57 	bl	80082ac <__gnu_Unwind_Restore_WMMXD>
 80079fe:	6823      	ldr	r3, [r4, #0]
 8007a00:	06db      	lsls	r3, r3, #27
 8007a02:	d4eb      	bmi.n	80079dc <restore_non_core_regs+0x24>
 8007a04:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8007a08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a0c:	f000 bc92 	b.w	8008334 <__gnu_Unwind_Restore_WMMXC>

08007a10 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8007a10:	6803      	ldr	r3, [r0, #0]
 8007a12:	b103      	cbz	r3, 8007a16 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8007a14:	4403      	add	r3, r0
 8007a16:	4618      	mov	r0, r3
 8007a18:	4770      	bx	lr
 8007a1a:	bf00      	nop

08007a1c <__gnu_unwind_24bit.isra.1>:
 8007a1c:	2009      	movs	r0, #9
 8007a1e:	4770      	bx	lr

08007a20 <_Unwind_DebugHook>:
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop

08007a24 <unwind_phase2>:
 8007a24:	b570      	push	{r4, r5, r6, lr}
 8007a26:	4604      	mov	r4, r0
 8007a28:	460d      	mov	r5, r1
 8007a2a:	e008      	b.n	8007a3e <unwind_phase2+0x1a>
 8007a2c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8007a2e:	6163      	str	r3, [r4, #20]
 8007a30:	462a      	mov	r2, r5
 8007a32:	6923      	ldr	r3, [r4, #16]
 8007a34:	4621      	mov	r1, r4
 8007a36:	2001      	movs	r0, #1
 8007a38:	4798      	blx	r3
 8007a3a:	2808      	cmp	r0, #8
 8007a3c:	d108      	bne.n	8007a50 <unwind_phase2+0x2c>
 8007a3e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8007a40:	4620      	mov	r0, r4
 8007a42:	f7ff ff67 	bl	8007914 <get_eit_entry>
 8007a46:	4606      	mov	r6, r0
 8007a48:	2800      	cmp	r0, #0
 8007a4a:	d0ef      	beq.n	8007a2c <unwind_phase2+0x8>
 8007a4c:	f026 fc3c 	bl	802e2c8 <abort>
 8007a50:	2807      	cmp	r0, #7
 8007a52:	d1fb      	bne.n	8007a4c <unwind_phase2+0x28>
 8007a54:	4630      	mov	r0, r6
 8007a56:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8007a58:	f7ff ffe2 	bl	8007a20 <_Unwind_DebugHook>
 8007a5c:	1d28      	adds	r0, r5, #4
 8007a5e:	f000 fc01 	bl	8008264 <__restore_core_regs>
 8007a62:	bf00      	nop

08007a64 <unwind_phase2_forced>:
 8007a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a68:	1d0c      	adds	r4, r1, #4
 8007a6a:	4605      	mov	r5, r0
 8007a6c:	4617      	mov	r7, r2
 8007a6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007a70:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8007a74:	ae03      	add	r6, sp, #12
 8007a76:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007a78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007a7a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007a7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007a7e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007a80:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007a84:	ac02      	add	r4, sp, #8
 8007a86:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8007a8a:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8007a8e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8007a92:	2300      	movs	r3, #0
 8007a94:	6023      	str	r3, [r4, #0]
 8007a96:	e021      	b.n	8007adc <unwind_phase2_forced+0x78>
 8007a98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a9a:	616b      	str	r3, [r5, #20]
 8007a9c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007aa0:	4621      	mov	r1, r4
 8007aa2:	a87a      	add	r0, sp, #488	; 0x1e8
 8007aa4:	f026 fd7d 	bl	802e5a2 <memcpy>
 8007aa8:	692b      	ldr	r3, [r5, #16]
 8007aaa:	aa7a      	add	r2, sp, #488	; 0x1e8
 8007aac:	4629      	mov	r1, r5
 8007aae:	4630      	mov	r0, r6
 8007ab0:	4798      	blx	r3
 8007ab2:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8007ab4:	e9cd 4900 	strd	r4, r9, [sp]
 8007ab8:	4682      	mov	sl, r0
 8007aba:	6463      	str	r3, [r4, #68]	; 0x44
 8007abc:	4631      	mov	r1, r6
 8007abe:	462b      	mov	r3, r5
 8007ac0:	462a      	mov	r2, r5
 8007ac2:	2001      	movs	r0, #1
 8007ac4:	47c0      	blx	r8
 8007ac6:	4607      	mov	r7, r0
 8007ac8:	b9f8      	cbnz	r0, 8007b0a <unwind_phase2_forced+0xa6>
 8007aca:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007ace:	a97a      	add	r1, sp, #488	; 0x1e8
 8007ad0:	4620      	mov	r0, r4
 8007ad2:	f026 fd66 	bl	802e5a2 <memcpy>
 8007ad6:	f1ba 0f08 	cmp.w	sl, #8
 8007ada:	d11c      	bne.n	8007b16 <unwind_phase2_forced+0xb2>
 8007adc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007ade:	4628      	mov	r0, r5
 8007ae0:	f7ff ff18 	bl	8007914 <get_eit_entry>
 8007ae4:	2f00      	cmp	r7, #0
 8007ae6:	bf08      	it	eq
 8007ae8:	2609      	moveq	r6, #9
 8007aea:	4607      	mov	r7, r0
 8007aec:	bf18      	it	ne
 8007aee:	260a      	movne	r6, #10
 8007af0:	2800      	cmp	r0, #0
 8007af2:	d0d1      	beq.n	8007a98 <unwind_phase2_forced+0x34>
 8007af4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007af6:	f046 0110 	orr.w	r1, r6, #16
 8007afa:	e9cd 4900 	strd	r4, r9, [sp]
 8007afe:	462a      	mov	r2, r5
 8007b00:	6463      	str	r3, [r4, #68]	; 0x44
 8007b02:	2001      	movs	r0, #1
 8007b04:	462b      	mov	r3, r5
 8007b06:	47c0      	blx	r8
 8007b08:	b100      	cbz	r0, 8007b0c <unwind_phase2_forced+0xa8>
 8007b0a:	2709      	movs	r7, #9
 8007b0c:	4638      	mov	r0, r7
 8007b0e:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8007b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b16:	f1ba 0f07 	cmp.w	sl, #7
 8007b1a:	d1f6      	bne.n	8007b0a <unwind_phase2_forced+0xa6>
 8007b1c:	4638      	mov	r0, r7
 8007b1e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007b20:	f7ff ff7e 	bl	8007a20 <_Unwind_DebugHook>
 8007b24:	a803      	add	r0, sp, #12
 8007b26:	f000 fb9d 	bl	8008264 <__restore_core_regs>
 8007b2a:	bf00      	nop

08007b2c <_Unwind_GetCFA>:
 8007b2c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8007b2e:	4770      	bx	lr

08007b30 <__gnu_Unwind_RaiseException>:
 8007b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b32:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8007b34:	640b      	str	r3, [r1, #64]	; 0x40
 8007b36:	1d0d      	adds	r5, r1, #4
 8007b38:	460f      	mov	r7, r1
 8007b3a:	4606      	mov	r6, r0
 8007b3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b3e:	b0f9      	sub	sp, #484	; 0x1e4
 8007b40:	ac01      	add	r4, sp, #4
 8007b42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b4c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007b50:	f04f 35ff 	mov.w	r5, #4294967295
 8007b54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007b58:	9500      	str	r5, [sp, #0]
 8007b5a:	e006      	b.n	8007b6a <__gnu_Unwind_RaiseException+0x3a>
 8007b5c:	6933      	ldr	r3, [r6, #16]
 8007b5e:	466a      	mov	r2, sp
 8007b60:	4631      	mov	r1, r6
 8007b62:	4798      	blx	r3
 8007b64:	2808      	cmp	r0, #8
 8007b66:	4604      	mov	r4, r0
 8007b68:	d108      	bne.n	8007b7c <__gnu_Unwind_RaiseException+0x4c>
 8007b6a:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007b6c:	4630      	mov	r0, r6
 8007b6e:	f7ff fed1 	bl	8007914 <get_eit_entry>
 8007b72:	2800      	cmp	r0, #0
 8007b74:	d0f2      	beq.n	8007b5c <__gnu_Unwind_RaiseException+0x2c>
 8007b76:	2009      	movs	r0, #9
 8007b78:	b079      	add	sp, #484	; 0x1e4
 8007b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b7c:	4668      	mov	r0, sp
 8007b7e:	f7ff ff1b 	bl	80079b8 <restore_non_core_regs>
 8007b82:	2c06      	cmp	r4, #6
 8007b84:	d1f7      	bne.n	8007b76 <__gnu_Unwind_RaiseException+0x46>
 8007b86:	4639      	mov	r1, r7
 8007b88:	4630      	mov	r0, r6
 8007b8a:	f7ff ff4b 	bl	8007a24 <unwind_phase2>
 8007b8e:	bf00      	nop

08007b90 <__gnu_Unwind_ForcedUnwind>:
 8007b90:	b430      	push	{r4, r5}
 8007b92:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8007b94:	60c1      	str	r1, [r0, #12]
 8007b96:	6182      	str	r2, [r0, #24]
 8007b98:	4619      	mov	r1, r3
 8007b9a:	641d      	str	r5, [r3, #64]	; 0x40
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	bc30      	pop	{r4, r5}
 8007ba0:	e760      	b.n	8007a64 <unwind_phase2_forced>
 8007ba2:	bf00      	nop

08007ba4 <__gnu_Unwind_Resume>:
 8007ba4:	b570      	push	{r4, r5, r6, lr}
 8007ba6:	68c6      	ldr	r6, [r0, #12]
 8007ba8:	6943      	ldr	r3, [r0, #20]
 8007baa:	640b      	str	r3, [r1, #64]	; 0x40
 8007bac:	b9be      	cbnz	r6, 8007bde <__gnu_Unwind_Resume+0x3a>
 8007bae:	6903      	ldr	r3, [r0, #16]
 8007bb0:	460a      	mov	r2, r1
 8007bb2:	4604      	mov	r4, r0
 8007bb4:	460d      	mov	r5, r1
 8007bb6:	4601      	mov	r1, r0
 8007bb8:	2002      	movs	r0, #2
 8007bba:	4798      	blx	r3
 8007bbc:	2807      	cmp	r0, #7
 8007bbe:	d007      	beq.n	8007bd0 <__gnu_Unwind_Resume+0x2c>
 8007bc0:	2808      	cmp	r0, #8
 8007bc2:	d103      	bne.n	8007bcc <__gnu_Unwind_Resume+0x28>
 8007bc4:	4629      	mov	r1, r5
 8007bc6:	4620      	mov	r0, r4
 8007bc8:	f7ff ff2c 	bl	8007a24 <unwind_phase2>
 8007bcc:	f026 fb7c 	bl	802e2c8 <abort>
 8007bd0:	4630      	mov	r0, r6
 8007bd2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8007bd4:	f7ff ff24 	bl	8007a20 <_Unwind_DebugHook>
 8007bd8:	1d28      	adds	r0, r5, #4
 8007bda:	f000 fb43 	bl	8008264 <__restore_core_regs>
 8007bde:	2201      	movs	r2, #1
 8007be0:	f7ff ff40 	bl	8007a64 <unwind_phase2_forced>
 8007be4:	f026 fb70 	bl	802e2c8 <abort>

08007be8 <__gnu_Unwind_Resume_or_Rethrow>:
 8007be8:	68c2      	ldr	r2, [r0, #12]
 8007bea:	b11a      	cbz	r2, 8007bf4 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8007bec:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8007bee:	640a      	str	r2, [r1, #64]	; 0x40
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	e737      	b.n	8007a64 <unwind_phase2_forced>
 8007bf4:	e79c      	b.n	8007b30 <__gnu_Unwind_RaiseException>
 8007bf6:	bf00      	nop

08007bf8 <_Unwind_Complete>:
 8007bf8:	4770      	bx	lr
 8007bfa:	bf00      	nop

08007bfc <_Unwind_DeleteException>:
 8007bfc:	6883      	ldr	r3, [r0, #8]
 8007bfe:	b113      	cbz	r3, 8007c06 <_Unwind_DeleteException+0xa>
 8007c00:	4601      	mov	r1, r0
 8007c02:	2001      	movs	r0, #1
 8007c04:	4718      	bx	r3
 8007c06:	4770      	bx	lr

08007c08 <_Unwind_VRS_Get>:
 8007c08:	2904      	cmp	r1, #4
 8007c0a:	d807      	bhi.n	8007c1c <_Unwind_VRS_Get+0x14>
 8007c0c:	e8df f001 	tbb	[pc, r1]
 8007c10:	08060803 	.word	0x08060803
 8007c14:	08          	.byte	0x08
 8007c15:	00          	.byte	0x00
 8007c16:	b90b      	cbnz	r3, 8007c1c <_Unwind_VRS_Get+0x14>
 8007c18:	2a0f      	cmp	r2, #15
 8007c1a:	d903      	bls.n	8007c24 <_Unwind_VRS_Get+0x1c>
 8007c1c:	2002      	movs	r0, #2
 8007c1e:	4770      	bx	lr
 8007c20:	2001      	movs	r0, #1
 8007c22:	4770      	bx	lr
 8007c24:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007c28:	4618      	mov	r0, r3
 8007c2a:	6853      	ldr	r3, [r2, #4]
 8007c2c:	9a00      	ldr	r2, [sp, #0]
 8007c2e:	6013      	str	r3, [r2, #0]
 8007c30:	4770      	bx	lr
 8007c32:	bf00      	nop

08007c34 <_Unwind_GetGR>:
 8007c34:	b510      	push	{r4, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	2300      	movs	r3, #0
 8007c3a:	ac03      	add	r4, sp, #12
 8007c3c:	460a      	mov	r2, r1
 8007c3e:	9400      	str	r4, [sp, #0]
 8007c40:	4619      	mov	r1, r3
 8007c42:	f7ff ffe1 	bl	8007c08 <_Unwind_VRS_Get>
 8007c46:	9803      	ldr	r0, [sp, #12]
 8007c48:	b004      	add	sp, #16
 8007c4a:	bd10      	pop	{r4, pc}

08007c4c <_Unwind_VRS_Set>:
 8007c4c:	2904      	cmp	r1, #4
 8007c4e:	d807      	bhi.n	8007c60 <_Unwind_VRS_Set+0x14>
 8007c50:	e8df f001 	tbb	[pc, r1]
 8007c54:	08060803 	.word	0x08060803
 8007c58:	08          	.byte	0x08
 8007c59:	00          	.byte	0x00
 8007c5a:	b90b      	cbnz	r3, 8007c60 <_Unwind_VRS_Set+0x14>
 8007c5c:	2a0f      	cmp	r2, #15
 8007c5e:	d903      	bls.n	8007c68 <_Unwind_VRS_Set+0x1c>
 8007c60:	2002      	movs	r0, #2
 8007c62:	4770      	bx	lr
 8007c64:	2001      	movs	r0, #1
 8007c66:	4770      	bx	lr
 8007c68:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8007c6c:	9a00      	ldr	r2, [sp, #0]
 8007c6e:	6812      	ldr	r2, [r2, #0]
 8007c70:	6042      	str	r2, [r0, #4]
 8007c72:	4618      	mov	r0, r3
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop

08007c78 <_Unwind_SetGR>:
 8007c78:	b510      	push	{r4, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	ac04      	add	r4, sp, #16
 8007c7e:	2300      	movs	r3, #0
 8007c80:	f844 2d04 	str.w	r2, [r4, #-4]!
 8007c84:	460a      	mov	r2, r1
 8007c86:	9400      	str	r4, [sp, #0]
 8007c88:	4619      	mov	r1, r3
 8007c8a:	f7ff ffdf 	bl	8007c4c <_Unwind_VRS_Set>
 8007c8e:	b004      	add	sp, #16
 8007c90:	bd10      	pop	{r4, pc}
 8007c92:	bf00      	nop

08007c94 <__gnu_Unwind_Backtrace>:
 8007c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c96:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8007c98:	6413      	str	r3, [r2, #64]	; 0x40
 8007c9a:	1d15      	adds	r5, r2, #4
 8007c9c:	4607      	mov	r7, r0
 8007c9e:	460e      	mov	r6, r1
 8007ca0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ca2:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8007ca6:	ac17      	add	r4, sp, #92	; 0x5c
 8007ca8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007caa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007cac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007cae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007cb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007cb2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007cb6:	f04f 35ff 	mov.w	r5, #4294967295
 8007cba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007cbe:	9516      	str	r5, [sp, #88]	; 0x58
 8007cc0:	e010      	b.n	8007ce4 <__gnu_Unwind_Backtrace+0x50>
 8007cc2:	a816      	add	r0, sp, #88	; 0x58
 8007cc4:	f7ff ffd8 	bl	8007c78 <_Unwind_SetGR>
 8007cc8:	4631      	mov	r1, r6
 8007cca:	a816      	add	r0, sp, #88	; 0x58
 8007ccc:	47b8      	blx	r7
 8007cce:	aa16      	add	r2, sp, #88	; 0x58
 8007cd0:	4669      	mov	r1, sp
 8007cd2:	b978      	cbnz	r0, 8007cf4 <__gnu_Unwind_Backtrace+0x60>
 8007cd4:	9b04      	ldr	r3, [sp, #16]
 8007cd6:	2008      	movs	r0, #8
 8007cd8:	4798      	blx	r3
 8007cda:	2805      	cmp	r0, #5
 8007cdc:	4604      	mov	r4, r0
 8007cde:	d00a      	beq.n	8007cf6 <__gnu_Unwind_Backtrace+0x62>
 8007ce0:	2809      	cmp	r0, #9
 8007ce2:	d007      	beq.n	8007cf4 <__gnu_Unwind_Backtrace+0x60>
 8007ce4:	9926      	ldr	r1, [sp, #152]	; 0x98
 8007ce6:	4668      	mov	r0, sp
 8007ce8:	f7ff fe14 	bl	8007914 <get_eit_entry>
 8007cec:	466a      	mov	r2, sp
 8007cee:	210c      	movs	r1, #12
 8007cf0:	2800      	cmp	r0, #0
 8007cf2:	d0e6      	beq.n	8007cc2 <__gnu_Unwind_Backtrace+0x2e>
 8007cf4:	2409      	movs	r4, #9
 8007cf6:	a816      	add	r0, sp, #88	; 0x58
 8007cf8:	f7ff fe5e 	bl	80079b8 <restore_non_core_regs>
 8007cfc:	4620      	mov	r0, r4
 8007cfe:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8007d02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007d04 <__gnu_unwind_pr_common>:
 8007d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d08:	460d      	mov	r5, r1
 8007d0a:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007d0c:	b089      	sub	sp, #36	; 0x24
 8007d0e:	1d0c      	adds	r4, r1, #4
 8007d10:	4616      	mov	r6, r2
 8007d12:	f000 0b03 	and.w	fp, r0, #3
 8007d16:	680a      	ldr	r2, [r1, #0]
 8007d18:	9406      	str	r4, [sp, #24]
 8007d1a:	461f      	mov	r7, r3
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d068      	beq.n	8007df2 <__gnu_unwind_pr_common+0xee>
 8007d20:	0c13      	lsrs	r3, r2, #16
 8007d22:	b2d9      	uxtb	r1, r3
 8007d24:	0412      	lsls	r2, r2, #16
 8007d26:	f88d 301d 	strb.w	r3, [sp, #29]
 8007d2a:	2302      	movs	r3, #2
 8007d2c:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8007d30:	9205      	str	r2, [sp, #20]
 8007d32:	f88d 301c 	strb.w	r3, [sp, #28]
 8007d36:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8007d38:	f1bb 0f02 	cmp.w	fp, #2
 8007d3c:	bf08      	it	eq
 8007d3e:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8007d40:	f013 0301 	ands.w	r3, r3, #1
 8007d44:	d146      	bne.n	8007dd4 <__gnu_unwind_pr_common+0xd0>
 8007d46:	9301      	str	r3, [sp, #4]
 8007d48:	f000 0308 	and.w	r3, r0, #8
 8007d4c:	9300      	str	r3, [sp, #0]
 8007d4e:	f8d4 9000 	ldr.w	r9, [r4]
 8007d52:	f1b9 0f00 	cmp.w	r9, #0
 8007d56:	f000 80f3 	beq.w	8007f40 <__gnu_unwind_pr_common+0x23c>
 8007d5a:	2f02      	cmp	r7, #2
 8007d5c:	d045      	beq.n	8007dea <__gnu_unwind_pr_common+0xe6>
 8007d5e:	f8b4 9000 	ldrh.w	r9, [r4]
 8007d62:	f8b4 8002 	ldrh.w	r8, [r4, #2]
 8007d66:	3404      	adds	r4, #4
 8007d68:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8007d6a:	f028 0a01 	bic.w	sl, r8, #1
 8007d6e:	210f      	movs	r1, #15
 8007d70:	4630      	mov	r0, r6
 8007d72:	449a      	add	sl, r3
 8007d74:	f7ff ff5e 	bl	8007c34 <_Unwind_GetGR>
 8007d78:	4582      	cmp	sl, r0
 8007d7a:	d834      	bhi.n	8007de6 <__gnu_unwind_pr_common+0xe2>
 8007d7c:	f029 0301 	bic.w	r3, r9, #1
 8007d80:	4453      	add	r3, sl
 8007d82:	4283      	cmp	r3, r0
 8007d84:	bf94      	ite	ls
 8007d86:	2000      	movls	r0, #0
 8007d88:	2001      	movhi	r0, #1
 8007d8a:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8007d8e:	f008 0802 	and.w	r8, r8, #2
 8007d92:	f009 0901 	and.w	r9, r9, #1
 8007d96:	ea48 0809 	orr.w	r8, r8, r9
 8007d9a:	f1b8 0f01 	cmp.w	r8, #1
 8007d9e:	d03a      	beq.n	8007e16 <__gnu_unwind_pr_common+0x112>
 8007da0:	d331      	bcc.n	8007e06 <__gnu_unwind_pr_common+0x102>
 8007da2:	f1b8 0f02 	cmp.w	r8, #2
 8007da6:	d11a      	bne.n	8007dde <__gnu_unwind_pr_common+0xda>
 8007da8:	6823      	ldr	r3, [r4, #0]
 8007daa:	f023 4a00 	bic.w	sl, r3, #2147483648	; 0x80000000
 8007dae:	f1bb 0f00 	cmp.w	fp, #0
 8007db2:	d166      	bne.n	8007e82 <__gnu_unwind_pr_common+0x17e>
 8007db4:	b130      	cbz	r0, 8007dc4 <__gnu_unwind_pr_common+0xc0>
 8007db6:	9a00      	ldr	r2, [sp, #0]
 8007db8:	2a00      	cmp	r2, #0
 8007dba:	d06c      	beq.n	8007e96 <__gnu_unwind_pr_common+0x192>
 8007dbc:	f1ba 0f00 	cmp.w	sl, #0
 8007dc0:	f000 8090 	beq.w	8007ee4 <__gnu_unwind_pr_common+0x1e0>
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	da00      	bge.n	8007dca <__gnu_unwind_pr_common+0xc6>
 8007dc8:	3404      	adds	r4, #4
 8007dca:	f10a 0301 	add.w	r3, sl, #1
 8007dce:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8007dd2:	e7bc      	b.n	8007d4e <__gnu_unwind_pr_common+0x4a>
 8007dd4:	4630      	mov	r0, r6
 8007dd6:	a905      	add	r1, sp, #20
 8007dd8:	f000 fb46 	bl	8008468 <__gnu_unwind_execute>
 8007ddc:	b178      	cbz	r0, 8007dfe <__gnu_unwind_pr_common+0xfa>
 8007dde:	2009      	movs	r0, #9
 8007de0:	b009      	add	sp, #36	; 0x24
 8007de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007de6:	2000      	movs	r0, #0
 8007de8:	e7cf      	b.n	8007d8a <__gnu_unwind_pr_common+0x86>
 8007dea:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8007dee:	3408      	adds	r4, #8
 8007df0:	e7ba      	b.n	8007d68 <__gnu_unwind_pr_common+0x64>
 8007df2:	0212      	lsls	r2, r2, #8
 8007df4:	2303      	movs	r3, #3
 8007df6:	9205      	str	r2, [sp, #20]
 8007df8:	f8ad 301c 	strh.w	r3, [sp, #28]
 8007dfc:	e79b      	b.n	8007d36 <__gnu_unwind_pr_common+0x32>
 8007dfe:	2008      	movs	r0, #8
 8007e00:	b009      	add	sp, #36	; 0x24
 8007e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e06:	f1bb 0f00 	cmp.w	fp, #0
 8007e0a:	d002      	beq.n	8007e12 <__gnu_unwind_pr_common+0x10e>
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	f040 80b4 	bne.w	8007f7a <__gnu_unwind_pr_common+0x276>
 8007e12:	3404      	adds	r4, #4
 8007e14:	e79b      	b.n	8007d4e <__gnu_unwind_pr_common+0x4a>
 8007e16:	f1bb 0f00 	cmp.w	fp, #0
 8007e1a:	d118      	bne.n	8007e4e <__gnu_unwind_pr_common+0x14a>
 8007e1c:	b1a8      	cbz	r0, 8007e4a <__gnu_unwind_pr_common+0x146>
 8007e1e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007e22:	1c99      	adds	r1, r3, #2
 8007e24:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8007e28:	d0d9      	beq.n	8007dde <__gnu_unwind_pr_common+0xda>
 8007e2a:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8007e2e:	3301      	adds	r3, #1
 8007e30:	9104      	str	r1, [sp, #16]
 8007e32:	f000 80b5 	beq.w	8007fa0 <__gnu_unwind_pr_common+0x29c>
 8007e36:	1d20      	adds	r0, r4, #4
 8007e38:	f7ff fdea 	bl	8007a10 <_Unwind_decode_typeinfo_ptr.isra.0>
 8007e3c:	ab04      	add	r3, sp, #16
 8007e3e:	4601      	mov	r1, r0
 8007e40:	4628      	mov	r0, r5
 8007e42:	f025 fb33 	bl	802d4ac <__cxa_type_match>
 8007e46:	2800      	cmp	r0, #0
 8007e48:	d167      	bne.n	8007f1a <__gnu_unwind_pr_common+0x216>
 8007e4a:	3408      	adds	r4, #8
 8007e4c:	e77f      	b.n	8007d4e <__gnu_unwind_pr_common+0x4a>
 8007e4e:	210d      	movs	r1, #13
 8007e50:	4630      	mov	r0, r6
 8007e52:	f8d5 8020 	ldr.w	r8, [r5, #32]
 8007e56:	f7ff feed 	bl	8007c34 <_Unwind_GetGR>
 8007e5a:	4580      	cmp	r8, r0
 8007e5c:	d1f5      	bne.n	8007e4a <__gnu_unwind_pr_common+0x146>
 8007e5e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007e60:	429c      	cmp	r4, r3
 8007e62:	d1f2      	bne.n	8007e4a <__gnu_unwind_pr_common+0x146>
 8007e64:	4620      	mov	r0, r4
 8007e66:	f7ff fd07 	bl	8007878 <selfrel_offset31>
 8007e6a:	210f      	movs	r1, #15
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	4630      	mov	r0, r6
 8007e70:	f7ff ff02 	bl	8007c78 <_Unwind_SetGR>
 8007e74:	4630      	mov	r0, r6
 8007e76:	462a      	mov	r2, r5
 8007e78:	2100      	movs	r1, #0
 8007e7a:	f7ff fefd 	bl	8007c78 <_Unwind_SetGR>
 8007e7e:	2007      	movs	r0, #7
 8007e80:	e7ae      	b.n	8007de0 <__gnu_unwind_pr_common+0xdc>
 8007e82:	210d      	movs	r1, #13
 8007e84:	4630      	mov	r0, r6
 8007e86:	f8d5 8020 	ldr.w	r8, [r5, #32]
 8007e8a:	f7ff fed3 	bl	8007c34 <_Unwind_GetGR>
 8007e8e:	4580      	cmp	r8, r0
 8007e90:	d032      	beq.n	8007ef8 <__gnu_unwind_pr_common+0x1f4>
 8007e92:	6823      	ldr	r3, [r4, #0]
 8007e94:	e796      	b.n	8007dc4 <__gnu_unwind_pr_common+0xc0>
 8007e96:	f1ba 0f00 	cmp.w	sl, #0
 8007e9a:	d023      	beq.n	8007ee4 <__gnu_unwind_pr_common+0x1e0>
 8007e9c:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8007ea0:	f104 0804 	add.w	r8, r4, #4
 8007ea4:	f8cd b008 	str.w	fp, [sp, #8]
 8007ea8:	f8dd 9000 	ldr.w	r9, [sp]
 8007eac:	9703      	str	r7, [sp, #12]
 8007eae:	46a3      	mov	fp, r4
 8007eb0:	461c      	mov	r4, r3
 8007eb2:	e002      	b.n	8007eba <__gnu_unwind_pr_common+0x1b6>
 8007eb4:	4557      	cmp	r7, sl
 8007eb6:	46b9      	mov	r9, r7
 8007eb8:	d040      	beq.n	8007f3c <__gnu_unwind_pr_common+0x238>
 8007eba:	4640      	mov	r0, r8
 8007ebc:	9404      	str	r4, [sp, #16]
 8007ebe:	f7ff fda7 	bl	8007a10 <_Unwind_decode_typeinfo_ptr.isra.0>
 8007ec2:	ab04      	add	r3, sp, #16
 8007ec4:	4601      	mov	r1, r0
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	4628      	mov	r0, r5
 8007eca:	f025 faef 	bl	802d4ac <__cxa_type_match>
 8007ece:	f109 0701 	add.w	r7, r9, #1
 8007ed2:	f108 0804 	add.w	r8, r8, #4
 8007ed6:	2800      	cmp	r0, #0
 8007ed8:	d0ec      	beq.n	8007eb4 <__gnu_unwind_pr_common+0x1b0>
 8007eda:	45d1      	cmp	r9, sl
 8007edc:	465c      	mov	r4, fp
 8007ede:	e9dd b702 	ldrd	fp, r7, [sp, #8]
 8007ee2:	d1d6      	bne.n	8007e92 <__gnu_unwind_pr_common+0x18e>
 8007ee4:	4630      	mov	r0, r6
 8007ee6:	210d      	movs	r1, #13
 8007ee8:	f7ff fea4 	bl	8007c34 <_Unwind_GetGR>
 8007eec:	9b04      	ldr	r3, [sp, #16]
 8007eee:	6228      	str	r0, [r5, #32]
 8007ef0:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
 8007ef4:	2006      	movs	r0, #6
 8007ef6:	e773      	b.n	8007de0 <__gnu_unwind_pr_common+0xdc>
 8007ef8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007efa:	429c      	cmp	r4, r3
 8007efc:	d1c9      	bne.n	8007e92 <__gnu_unwind_pr_common+0x18e>
 8007efe:	2204      	movs	r2, #4
 8007f00:	f04f 0800 	mov.w	r8, #0
 8007f04:	18a3      	adds	r3, r4, r2
 8007f06:	e9c5 a80a 	strd	sl, r8, [r5, #40]	; 0x28
 8007f0a:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
 8007f0e:	6823      	ldr	r3, [r4, #0]
 8007f10:	4543      	cmp	r3, r8
 8007f12:	db4d      	blt.n	8007fb0 <__gnu_unwind_pr_common+0x2ac>
 8007f14:	2301      	movs	r3, #1
 8007f16:	9301      	str	r3, [sp, #4]
 8007f18:	e757      	b.n	8007dca <__gnu_unwind_pr_common+0xc6>
 8007f1a:	4680      	mov	r8, r0
 8007f1c:	210d      	movs	r1, #13
 8007f1e:	4630      	mov	r0, r6
 8007f20:	f7ff fe88 	bl	8007c34 <_Unwind_GetGR>
 8007f24:	f1b8 0f02 	cmp.w	r8, #2
 8007f28:	6228      	str	r0, [r5, #32]
 8007f2a:	d13e      	bne.n	8007faa <__gnu_unwind_pr_common+0x2a6>
 8007f2c:	462b      	mov	r3, r5
 8007f2e:	9a04      	ldr	r2, [sp, #16]
 8007f30:	f843 2f2c 	str.w	r2, [r3, #44]!
 8007f34:	626b      	str	r3, [r5, #36]	; 0x24
 8007f36:	62ac      	str	r4, [r5, #40]	; 0x28
 8007f38:	2006      	movs	r0, #6
 8007f3a:	e751      	b.n	8007de0 <__gnu_unwind_pr_common+0xdc>
 8007f3c:	465c      	mov	r4, fp
 8007f3e:	e7d1      	b.n	8007ee4 <__gnu_unwind_pr_common+0x1e0>
 8007f40:	a905      	add	r1, sp, #20
 8007f42:	4630      	mov	r0, r6
 8007f44:	f000 fa90 	bl	8008468 <__gnu_unwind_execute>
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	f47f af48 	bne.w	8007dde <__gnu_unwind_pr_common+0xda>
 8007f4e:	9b01      	ldr	r3, [sp, #4]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	f43f af54 	beq.w	8007dfe <__gnu_unwind_pr_common+0xfa>
 8007f56:	210f      	movs	r1, #15
 8007f58:	4630      	mov	r0, r6
 8007f5a:	f7ff fe6b 	bl	8007c34 <_Unwind_GetGR>
 8007f5e:	210e      	movs	r1, #14
 8007f60:	4602      	mov	r2, r0
 8007f62:	4630      	mov	r0, r6
 8007f64:	f7ff fe88 	bl	8007c78 <_Unwind_SetGR>
 8007f68:	4630      	mov	r0, r6
 8007f6a:	4a1a      	ldr	r2, [pc, #104]	; (8007fd4 <__gnu_unwind_pr_common+0x2d0>)
 8007f6c:	210f      	movs	r1, #15
 8007f6e:	f7ff fe83 	bl	8007c78 <_Unwind_SetGR>
 8007f72:	2007      	movs	r0, #7
 8007f74:	b009      	add	sp, #36	; 0x24
 8007f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	f7ff fc7c 	bl	8007878 <selfrel_offset31>
 8007f80:	3404      	adds	r4, #4
 8007f82:	4607      	mov	r7, r0
 8007f84:	63ac      	str	r4, [r5, #56]	; 0x38
 8007f86:	4628      	mov	r0, r5
 8007f88:	f025 fae8 	bl	802d55c <__cxa_begin_cleanup>
 8007f8c:	2800      	cmp	r0, #0
 8007f8e:	f43f af26 	beq.w	8007dde <__gnu_unwind_pr_common+0xda>
 8007f92:	4630      	mov	r0, r6
 8007f94:	463a      	mov	r2, r7
 8007f96:	210f      	movs	r1, #15
 8007f98:	f7ff fe6e 	bl	8007c78 <_Unwind_SetGR>
 8007f9c:	2007      	movs	r0, #7
 8007f9e:	e71f      	b.n	8007de0 <__gnu_unwind_pr_common+0xdc>
 8007fa0:	4630      	mov	r0, r6
 8007fa2:	210d      	movs	r1, #13
 8007fa4:	f7ff fe46 	bl	8007c34 <_Unwind_GetGR>
 8007fa8:	6228      	str	r0, [r5, #32]
 8007faa:	9b04      	ldr	r3, [sp, #16]
 8007fac:	626b      	str	r3, [r5, #36]	; 0x24
 8007fae:	e7c2      	b.n	8007f36 <__gnu_unwind_pr_common+0x232>
 8007fb0:	f10a 0001 	add.w	r0, sl, #1
 8007fb4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8007fb8:	f7ff fc5e 	bl	8007878 <selfrel_offset31>
 8007fbc:	210f      	movs	r1, #15
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	4630      	mov	r0, r6
 8007fc2:	f7ff fe59 	bl	8007c78 <_Unwind_SetGR>
 8007fc6:	4630      	mov	r0, r6
 8007fc8:	462a      	mov	r2, r5
 8007fca:	4641      	mov	r1, r8
 8007fcc:	f7ff fe54 	bl	8007c78 <_Unwind_SetGR>
 8007fd0:	2007      	movs	r0, #7
 8007fd2:	e705      	b.n	8007de0 <__gnu_unwind_pr_common+0xdc>
 8007fd4:	0802d3c5 	.word	0x0802d3c5

08007fd8 <__aeabi_unwind_cpp_pr0>:
 8007fd8:	2300      	movs	r3, #0
 8007fda:	e693      	b.n	8007d04 <__gnu_unwind_pr_common>

08007fdc <__aeabi_unwind_cpp_pr1>:
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e691      	b.n	8007d04 <__gnu_unwind_pr_common>

08007fe0 <__aeabi_unwind_cpp_pr2>:
 8007fe0:	2302      	movs	r3, #2
 8007fe2:	e68f      	b.n	8007d04 <__gnu_unwind_pr_common>

08007fe4 <_Unwind_VRS_Pop>:
 8007fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fe8:	4605      	mov	r5, r0
 8007fea:	b0c4      	sub	sp, #272	; 0x110
 8007fec:	2904      	cmp	r1, #4
 8007fee:	d806      	bhi.n	8007ffe <_Unwind_VRS_Pop+0x1a>
 8007ff0:	e8df f001 	tbb	[pc, r1]
 8007ff4:	03052b4d 	.word	0x03052b4d
 8007ff8:	09          	.byte	0x09
 8007ff9:	00          	.byte	0x00
 8007ffa:	2b03      	cmp	r3, #3
 8007ffc:	d05f      	beq.n	80080be <_Unwind_VRS_Pop+0xda>
 8007ffe:	2002      	movs	r0, #2
 8008000:	b044      	add	sp, #272	; 0x110
 8008002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008006:	2b00      	cmp	r3, #0
 8008008:	d1f9      	bne.n	8007ffe <_Unwind_VRS_Pop+0x1a>
 800800a:	2a10      	cmp	r2, #16
 800800c:	d8f7      	bhi.n	8007ffe <_Unwind_VRS_Pop+0x1a>
 800800e:	682b      	ldr	r3, [r5, #0]
 8008010:	06dc      	lsls	r4, r3, #27
 8008012:	f100 80f4 	bmi.w	80081fe <_Unwind_VRS_Pop+0x21a>
 8008016:	ac22      	add	r4, sp, #136	; 0x88
 8008018:	4620      	mov	r0, r4
 800801a:	9201      	str	r2, [sp, #4]
 800801c:	f000 f994 	bl	8008348 <__gnu_Unwind_Save_WMMXC>
 8008020:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8008022:	9a01      	ldr	r2, [sp, #4]
 8008024:	2300      	movs	r3, #0
 8008026:	2601      	movs	r6, #1
 8008028:	fa06 f103 	lsl.w	r1, r6, r3
 800802c:	4211      	tst	r1, r2
 800802e:	d003      	beq.n	8008038 <_Unwind_VRS_Pop+0x54>
 8008030:	6801      	ldr	r1, [r0, #0]
 8008032:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 8008036:	3004      	adds	r0, #4
 8008038:	3301      	adds	r3, #1
 800803a:	2b04      	cmp	r3, #4
 800803c:	d1f4      	bne.n	8008028 <_Unwind_VRS_Pop+0x44>
 800803e:	63a8      	str	r0, [r5, #56]	; 0x38
 8008040:	4620      	mov	r0, r4
 8008042:	f000 f977 	bl	8008334 <__gnu_Unwind_Restore_WMMXC>
 8008046:	2000      	movs	r0, #0
 8008048:	e7da      	b.n	8008000 <_Unwind_VRS_Pop+0x1c>
 800804a:	2b01      	cmp	r3, #1
 800804c:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8008050:	b297      	uxth	r7, r2
 8008052:	d052      	beq.n	80080fa <_Unwind_VRS_Pop+0x116>
 8008054:	2b05      	cmp	r3, #5
 8008056:	d1d2      	bne.n	8007ffe <_Unwind_VRS_Pop+0x1a>
 8008058:	eb06 0807 	add.w	r8, r6, r7
 800805c:	f1b8 0f20 	cmp.w	r8, #32
 8008060:	d8cd      	bhi.n	8007ffe <_Unwind_VRS_Pop+0x1a>
 8008062:	2e0f      	cmp	r6, #15
 8008064:	f240 8099 	bls.w	800819a <_Unwind_VRS_Pop+0x1b6>
 8008068:	46b8      	mov	r8, r7
 800806a:	2f00      	cmp	r7, #0
 800806c:	f040 80db 	bne.w	8008226 <_Unwind_VRS_Pop+0x242>
 8008070:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8008072:	63aa      	str	r2, [r5, #56]	; 0x38
 8008074:	2e0f      	cmp	r6, #15
 8008076:	f240 80be 	bls.w	80081f6 <_Unwind_VRS_Pop+0x212>
 800807a:	f1b8 0f00 	cmp.w	r8, #0
 800807e:	d002      	beq.n	8008086 <_Unwind_VRS_Pop+0xa2>
 8008080:	a802      	add	r0, sp, #8
 8008082:	f000 f90b 	bl	800829c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8008086:	2000      	movs	r0, #0
 8008088:	b044      	add	sp, #272	; 0x110
 800808a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800808e:	2b00      	cmp	r3, #0
 8008090:	d1b5      	bne.n	8007ffe <_Unwind_VRS_Pop+0x1a>
 8008092:	6bac      	ldr	r4, [r5, #56]	; 0x38
 8008094:	b297      	uxth	r7, r2
 8008096:	1d28      	adds	r0, r5, #4
 8008098:	2601      	movs	r6, #1
 800809a:	fa06 f103 	lsl.w	r1, r6, r3
 800809e:	4239      	tst	r1, r7
 80080a0:	f103 0301 	add.w	r3, r3, #1
 80080a4:	d002      	beq.n	80080ac <_Unwind_VRS_Pop+0xc8>
 80080a6:	6821      	ldr	r1, [r4, #0]
 80080a8:	6001      	str	r1, [r0, #0]
 80080aa:	3404      	adds	r4, #4
 80080ac:	2b10      	cmp	r3, #16
 80080ae:	f100 0004 	add.w	r0, r0, #4
 80080b2:	d1f2      	bne.n	800809a <_Unwind_VRS_Pop+0xb6>
 80080b4:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 80080b8:	d1e5      	bne.n	8008086 <_Unwind_VRS_Pop+0xa2>
 80080ba:	63ac      	str	r4, [r5, #56]	; 0x38
 80080bc:	e7a0      	b.n	8008000 <_Unwind_VRS_Pop+0x1c>
 80080be:	0c16      	lsrs	r6, r2, #16
 80080c0:	b297      	uxth	r7, r2
 80080c2:	19f3      	adds	r3, r6, r7
 80080c4:	2b10      	cmp	r3, #16
 80080c6:	d89a      	bhi.n	8007ffe <_Unwind_VRS_Pop+0x1a>
 80080c8:	682b      	ldr	r3, [r5, #0]
 80080ca:	071a      	lsls	r2, r3, #28
 80080cc:	d45d      	bmi.n	800818a <_Unwind_VRS_Pop+0x1a6>
 80080ce:	ac22      	add	r4, sp, #136	; 0x88
 80080d0:	4620      	mov	r0, r4
 80080d2:	f000 f90d 	bl	80082f0 <__gnu_Unwind_Save_WMMXD>
 80080d6:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80080da:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80080dc:	b13f      	cbz	r7, 80080ee <_Unwind_VRS_Pop+0x10a>
 80080de:	eb03 02c7 	add.w	r2, r3, r7, lsl #3
 80080e2:	6818      	ldr	r0, [r3, #0]
 80080e4:	f841 0b04 	str.w	r0, [r1], #4
 80080e8:	3304      	adds	r3, #4
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d1f9      	bne.n	80080e2 <_Unwind_VRS_Pop+0xfe>
 80080ee:	4620      	mov	r0, r4
 80080f0:	63ab      	str	r3, [r5, #56]	; 0x38
 80080f2:	f000 f8db 	bl	80082ac <__gnu_Unwind_Restore_WMMXD>
 80080f6:	2000      	movs	r0, #0
 80080f8:	e782      	b.n	8008000 <_Unwind_VRS_Pop+0x1c>
 80080fa:	19f2      	adds	r2, r6, r7
 80080fc:	2a10      	cmp	r2, #16
 80080fe:	f63f af7e 	bhi.w	8007ffe <_Unwind_VRS_Pop+0x1a>
 8008102:	2e0f      	cmp	r6, #15
 8008104:	f63f af7b 	bhi.w	8007ffe <_Unwind_VRS_Pop+0x1a>
 8008108:	682a      	ldr	r2, [r5, #0]
 800810a:	07d1      	lsls	r1, r2, #31
 800810c:	d508      	bpl.n	8008120 <_Unwind_VRS_Pop+0x13c>
 800810e:	4628      	mov	r0, r5
 8008110:	f022 0203 	bic.w	r2, r2, #3
 8008114:	f840 2b48 	str.w	r2, [r0], #72
 8008118:	9301      	str	r3, [sp, #4]
 800811a:	f000 f8b3 	bl	8008284 <__gnu_Unwind_Save_VFP>
 800811e:	9b01      	ldr	r3, [sp, #4]
 8008120:	9301      	str	r3, [sp, #4]
 8008122:	ac22      	add	r4, sp, #136	; 0x88
 8008124:	4620      	mov	r0, r4
 8008126:	f000 f8ad 	bl	8008284 <__gnu_Unwind_Save_VFP>
 800812a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800812c:	9b01      	ldr	r3, [sp, #4]
 800812e:	2f00      	cmp	r7, #0
 8008130:	f000 8095 	beq.w	800825e <_Unwind_VRS_Pop+0x27a>
 8008134:	007f      	lsls	r7, r7, #1
 8008136:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800813a:	f04f 0800 	mov.w	r8, #0
 800813e:	3c04      	subs	r4, #4
 8008140:	eb01 0287 	add.w	r2, r1, r7, lsl #2
 8008144:	f851 0b04 	ldr.w	r0, [r1], #4
 8008148:	f844 0f04 	str.w	r0, [r4, #4]!
 800814c:	4291      	cmp	r1, r2
 800814e:	d1f9      	bne.n	8008144 <_Unwind_VRS_Pop+0x160>
 8008150:	f1b8 0f00 	cmp.w	r8, #0
 8008154:	d00f      	beq.n	8008176 <_Unwind_VRS_Pop+0x192>
 8008156:	ac02      	add	r4, sp, #8
 8008158:	2e10      	cmp	r6, #16
 800815a:	4631      	mov	r1, r6
 800815c:	bf38      	it	cc
 800815e:	2110      	movcc	r1, #16
 8008160:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8008164:	3984      	subs	r1, #132	; 0x84
 8008166:	eb02 04c8 	add.w	r4, r2, r8, lsl #3
 800816a:	f852 0b04 	ldr.w	r0, [r2], #4
 800816e:	f841 0f04 	str.w	r0, [r1, #4]!
 8008172:	4294      	cmp	r4, r2
 8008174:	d1f9      	bne.n	800816a <_Unwind_VRS_Pop+0x186>
 8008176:	2b01      	cmp	r3, #1
 8008178:	f47f af7b 	bne.w	8008072 <_Unwind_VRS_Pop+0x8e>
 800817c:	ac22      	add	r4, sp, #136	; 0x88
 800817e:	3204      	adds	r2, #4
 8008180:	63aa      	str	r2, [r5, #56]	; 0x38
 8008182:	4620      	mov	r0, r4
 8008184:	f000 f87a 	bl	800827c <__gnu_Unwind_Restore_VFP>
 8008188:	e77d      	b.n	8008086 <_Unwind_VRS_Pop+0xa2>
 800818a:	f023 0308 	bic.w	r3, r3, #8
 800818e:	602b      	str	r3, [r5, #0]
 8008190:	f505 70a8 	add.w	r0, r5, #336	; 0x150
 8008194:	f000 f8ac 	bl	80082f0 <__gnu_Unwind_Save_WMMXD>
 8008198:	e799      	b.n	80080ce <_Unwind_VRS_Pop+0xea>
 800819a:	f1b8 0f10 	cmp.w	r8, #16
 800819e:	682a      	ldr	r2, [r5, #0]
 80081a0:	d943      	bls.n	800822a <_Unwind_VRS_Pop+0x246>
 80081a2:	07d0      	lsls	r0, r2, #31
 80081a4:	f1a8 0810 	sub.w	r8, r8, #16
 80081a8:	d50b      	bpl.n	80081c2 <_Unwind_VRS_Pop+0x1de>
 80081aa:	4628      	mov	r0, r5
 80081ac:	f022 0201 	bic.w	r2, r2, #1
 80081b0:	f042 0202 	orr.w	r2, r2, #2
 80081b4:	f840 2b48 	str.w	r2, [r0], #72
 80081b8:	9301      	str	r3, [sp, #4]
 80081ba:	f000 f86b 	bl	8008294 <__gnu_Unwind_Save_VFP_D>
 80081be:	682a      	ldr	r2, [r5, #0]
 80081c0:	9b01      	ldr	r3, [sp, #4]
 80081c2:	0751      	lsls	r1, r2, #29
 80081c4:	d425      	bmi.n	8008212 <_Unwind_VRS_Pop+0x22e>
 80081c6:	2e0f      	cmp	r6, #15
 80081c8:	d804      	bhi.n	80081d4 <_Unwind_VRS_Pop+0x1f0>
 80081ca:	a822      	add	r0, sp, #136	; 0x88
 80081cc:	9301      	str	r3, [sp, #4]
 80081ce:	f000 f861 	bl	8008294 <__gnu_Unwind_Save_VFP_D>
 80081d2:	9b01      	ldr	r3, [sp, #4]
 80081d4:	9301      	str	r3, [sp, #4]
 80081d6:	ac02      	add	r4, sp, #8
 80081d8:	4620      	mov	r0, r4
 80081da:	f000 f863 	bl	80082a4 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80081de:	f1c6 0110 	rsb	r1, r6, #16
 80081e2:	2900      	cmp	r1, #0
 80081e4:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80081e6:	9b01      	ldr	r3, [sp, #4]
 80081e8:	ddb6      	ble.n	8008158 <_Unwind_VRS_Pop+0x174>
 80081ea:	ac22      	add	r4, sp, #136	; 0x88
 80081ec:	004f      	lsls	r7, r1, #1
 80081ee:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80081f2:	4611      	mov	r1, r2
 80081f4:	e7a3      	b.n	800813e <_Unwind_VRS_Pop+0x15a>
 80081f6:	a822      	add	r0, sp, #136	; 0x88
 80081f8:	f000 f848 	bl	800828c <__gnu_Unwind_Restore_VFP_D>
 80081fc:	e73d      	b.n	800807a <_Unwind_VRS_Pop+0x96>
 80081fe:	f023 0310 	bic.w	r3, r3, #16
 8008202:	602b      	str	r3, [r5, #0]
 8008204:	f505 70e8 	add.w	r0, r5, #464	; 0x1d0
 8008208:	9201      	str	r2, [sp, #4]
 800820a:	f000 f89d 	bl	8008348 <__gnu_Unwind_Save_WMMXC>
 800820e:	9a01      	ldr	r2, [sp, #4]
 8008210:	e701      	b.n	8008016 <_Unwind_VRS_Pop+0x32>
 8008212:	4628      	mov	r0, r5
 8008214:	f022 0204 	bic.w	r2, r2, #4
 8008218:	f840 2bd0 	str.w	r2, [r0], #208
 800821c:	9301      	str	r3, [sp, #4]
 800821e:	f000 f841 	bl	80082a4 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8008222:	9b01      	ldr	r3, [sp, #4]
 8008224:	e7cf      	b.n	80081c6 <_Unwind_VRS_Pop+0x1e2>
 8008226:	682a      	ldr	r2, [r5, #0]
 8008228:	e7cb      	b.n	80081c2 <_Unwind_VRS_Pop+0x1de>
 800822a:	07d0      	lsls	r0, r2, #31
 800822c:	d50a      	bpl.n	8008244 <_Unwind_VRS_Pop+0x260>
 800822e:	4628      	mov	r0, r5
 8008230:	f022 0201 	bic.w	r2, r2, #1
 8008234:	f042 0202 	orr.w	r2, r2, #2
 8008238:	f840 2b48 	str.w	r2, [r0], #72
 800823c:	9301      	str	r3, [sp, #4]
 800823e:	f000 f829 	bl	8008294 <__gnu_Unwind_Save_VFP_D>
 8008242:	9b01      	ldr	r3, [sp, #4]
 8008244:	9301      	str	r3, [sp, #4]
 8008246:	ac22      	add	r4, sp, #136	; 0x88
 8008248:	4620      	mov	r0, r4
 800824a:	f000 f823 	bl	8008294 <__gnu_Unwind_Save_VFP_D>
 800824e:	46b8      	mov	r8, r7
 8008250:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8008252:	9b01      	ldr	r3, [sp, #4]
 8008254:	2f00      	cmp	r7, #0
 8008256:	f47f af6d 	bne.w	8008134 <_Unwind_VRS_Pop+0x150>
 800825a:	460a      	mov	r2, r1
 800825c:	e709      	b.n	8008072 <_Unwind_VRS_Pop+0x8e>
 800825e:	460a      	mov	r2, r1
 8008260:	e78d      	b.n	800817e <_Unwind_VRS_Pop+0x19a>
 8008262:	bf00      	nop

08008264 <__restore_core_regs>:
 8008264:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8008268:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 800826c:	469c      	mov	ip, r3
 800826e:	46a6      	mov	lr, r4
 8008270:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8008274:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8008278:	46e5      	mov	sp, ip
 800827a:	bd00      	pop	{pc}

0800827c <__gnu_Unwind_Restore_VFP>:
 800827c:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8008280:	4770      	bx	lr
 8008282:	bf00      	nop

08008284 <__gnu_Unwind_Save_VFP>:
 8008284:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop

0800828c <__gnu_Unwind_Restore_VFP_D>:
 800828c:	ec90 0b20 	vldmia	r0, {d0-d15}
 8008290:	4770      	bx	lr
 8008292:	bf00      	nop

08008294 <__gnu_Unwind_Save_VFP_D>:
 8008294:	ec80 0b20 	vstmia	r0, {d0-d15}
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop

0800829c <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 800829c:	ecd0 0b20 	vldmia	r0, {d16-d31}
 80082a0:	4770      	bx	lr
 80082a2:	bf00      	nop

080082a4 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 80082a4:	ecc0 0b20 	vstmia	r0, {d16-d31}
 80082a8:	4770      	bx	lr
 80082aa:	bf00      	nop

080082ac <__gnu_Unwind_Restore_WMMXD>:
 80082ac:	ecf0 0102 	ldfe	f0, [r0], #8
 80082b0:	ecf0 1102 	ldfe	f1, [r0], #8
 80082b4:	ecf0 2102 	ldfe	f2, [r0], #8
 80082b8:	ecf0 3102 	ldfe	f3, [r0], #8
 80082bc:	ecf0 4102 	ldfe	f4, [r0], #8
 80082c0:	ecf0 5102 	ldfe	f5, [r0], #8
 80082c4:	ecf0 6102 	ldfe	f6, [r0], #8
 80082c8:	ecf0 7102 	ldfe	f7, [r0], #8
 80082cc:	ecf0 8102 	ldfp	f0, [r0], #8
 80082d0:	ecf0 9102 	ldfp	f1, [r0], #8
 80082d4:	ecf0 a102 	ldfp	f2, [r0], #8
 80082d8:	ecf0 b102 	ldfp	f3, [r0], #8
 80082dc:	ecf0 c102 	ldfp	f4, [r0], #8
 80082e0:	ecf0 d102 	ldfp	f5, [r0], #8
 80082e4:	ecf0 e102 	ldfp	f6, [r0], #8
 80082e8:	ecf0 f102 	ldfp	f7, [r0], #8
 80082ec:	4770      	bx	lr
 80082ee:	bf00      	nop

080082f0 <__gnu_Unwind_Save_WMMXD>:
 80082f0:	ece0 0102 	stfe	f0, [r0], #8
 80082f4:	ece0 1102 	stfe	f1, [r0], #8
 80082f8:	ece0 2102 	stfe	f2, [r0], #8
 80082fc:	ece0 3102 	stfe	f3, [r0], #8
 8008300:	ece0 4102 	stfe	f4, [r0], #8
 8008304:	ece0 5102 	stfe	f5, [r0], #8
 8008308:	ece0 6102 	stfe	f6, [r0], #8
 800830c:	ece0 7102 	stfe	f7, [r0], #8
 8008310:	ece0 8102 	stfp	f0, [r0], #8
 8008314:	ece0 9102 	stfp	f1, [r0], #8
 8008318:	ece0 a102 	stfp	f2, [r0], #8
 800831c:	ece0 b102 	stfp	f3, [r0], #8
 8008320:	ece0 c102 	stfp	f4, [r0], #8
 8008324:	ece0 d102 	stfp	f5, [r0], #8
 8008328:	ece0 e102 	stfp	f6, [r0], #8
 800832c:	ece0 f102 	stfp	f7, [r0], #8
 8008330:	4770      	bx	lr
 8008332:	bf00      	nop

08008334 <__gnu_Unwind_Restore_WMMXC>:
 8008334:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8008338:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 800833c:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8008340:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8008344:	4770      	bx	lr
 8008346:	bf00      	nop

08008348 <__gnu_Unwind_Save_WMMXC>:
 8008348:	fca0 8101 	stc2	1, cr8, [r0], #4
 800834c:	fca0 9101 	stc2	1, cr9, [r0], #4
 8008350:	fca0 a101 	stc2	1, cr10, [r0], #4
 8008354:	fca0 b101 	stc2	1, cr11, [r0], #4
 8008358:	4770      	bx	lr
 800835a:	bf00      	nop

0800835c <_Unwind_RaiseException>:
 800835c:	46ec      	mov	ip, sp
 800835e:	b500      	push	{lr}
 8008360:	e92d 5000 	stmdb	sp!, {ip, lr}
 8008364:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8008368:	f04f 0300 	mov.w	r3, #0
 800836c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8008370:	a901      	add	r1, sp, #4
 8008372:	f7ff fbdd 	bl	8007b30 <__gnu_Unwind_RaiseException>
 8008376:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800837a:	b012      	add	sp, #72	; 0x48
 800837c:	4770      	bx	lr
 800837e:	bf00      	nop

08008380 <_Unwind_Resume>:
 8008380:	46ec      	mov	ip, sp
 8008382:	b500      	push	{lr}
 8008384:	e92d 5000 	stmdb	sp!, {ip, lr}
 8008388:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800838c:	f04f 0300 	mov.w	r3, #0
 8008390:	e92d 000c 	stmdb	sp!, {r2, r3}
 8008394:	a901      	add	r1, sp, #4
 8008396:	f7ff fc05 	bl	8007ba4 <__gnu_Unwind_Resume>
 800839a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800839e:	b012      	add	sp, #72	; 0x48
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop

080083a4 <_Unwind_Resume_or_Rethrow>:
 80083a4:	46ec      	mov	ip, sp
 80083a6:	b500      	push	{lr}
 80083a8:	e92d 5000 	stmdb	sp!, {ip, lr}
 80083ac:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80083b0:	f04f 0300 	mov.w	r3, #0
 80083b4:	e92d 000c 	stmdb	sp!, {r2, r3}
 80083b8:	a901      	add	r1, sp, #4
 80083ba:	f7ff fc15 	bl	8007be8 <__gnu_Unwind_Resume_or_Rethrow>
 80083be:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80083c2:	b012      	add	sp, #72	; 0x48
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop

080083c8 <_Unwind_ForcedUnwind>:
 80083c8:	46ec      	mov	ip, sp
 80083ca:	b500      	push	{lr}
 80083cc:	e92d 5000 	stmdb	sp!, {ip, lr}
 80083d0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80083d4:	f04f 0300 	mov.w	r3, #0
 80083d8:	e92d 000c 	stmdb	sp!, {r2, r3}
 80083dc:	ab01      	add	r3, sp, #4
 80083de:	f7ff fbd7 	bl	8007b90 <__gnu_Unwind_ForcedUnwind>
 80083e2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80083e6:	b012      	add	sp, #72	; 0x48
 80083e8:	4770      	bx	lr
 80083ea:	bf00      	nop

080083ec <_Unwind_Backtrace>:
 80083ec:	46ec      	mov	ip, sp
 80083ee:	b500      	push	{lr}
 80083f0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80083f4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80083f8:	f04f 0300 	mov.w	r3, #0
 80083fc:	e92d 000c 	stmdb	sp!, {r2, r3}
 8008400:	aa01      	add	r2, sp, #4
 8008402:	f7ff fc47 	bl	8007c94 <__gnu_Unwind_Backtrace>
 8008406:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800840a:	b012      	add	sp, #72	; 0x48
 800840c:	4770      	bx	lr
 800840e:	bf00      	nop

08008410 <next_unwind_byte>:
 8008410:	7a02      	ldrb	r2, [r0, #8]
 8008412:	b982      	cbnz	r2, 8008436 <next_unwind_byte+0x26>
 8008414:	7a43      	ldrb	r3, [r0, #9]
 8008416:	b1ab      	cbz	r3, 8008444 <next_unwind_byte+0x34>
 8008418:	6842      	ldr	r2, [r0, #4]
 800841a:	3b01      	subs	r3, #1
 800841c:	b410      	push	{r4}
 800841e:	7243      	strb	r3, [r0, #9]
 8008420:	6813      	ldr	r3, [r2, #0]
 8008422:	2103      	movs	r1, #3
 8008424:	1d14      	adds	r4, r2, #4
 8008426:	7201      	strb	r1, [r0, #8]
 8008428:	021a      	lsls	r2, r3, #8
 800842a:	6044      	str	r4, [r0, #4]
 800842c:	6002      	str	r2, [r0, #0]
 800842e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008432:	0e18      	lsrs	r0, r3, #24
 8008434:	4770      	bx	lr
 8008436:	6803      	ldr	r3, [r0, #0]
 8008438:	3a01      	subs	r2, #1
 800843a:	7202      	strb	r2, [r0, #8]
 800843c:	021a      	lsls	r2, r3, #8
 800843e:	6002      	str	r2, [r0, #0]
 8008440:	0e18      	lsrs	r0, r3, #24
 8008442:	4770      	bx	lr
 8008444:	20b0      	movs	r0, #176	; 0xb0
 8008446:	4770      	bx	lr

08008448 <_Unwind_GetGR.constprop.0>:
 8008448:	b500      	push	{lr}
 800844a:	b085      	sub	sp, #20
 800844c:	aa03      	add	r2, sp, #12
 800844e:	2300      	movs	r3, #0
 8008450:	9200      	str	r2, [sp, #0]
 8008452:	4619      	mov	r1, r3
 8008454:	220c      	movs	r2, #12
 8008456:	f7ff fbd7 	bl	8007c08 <_Unwind_VRS_Get>
 800845a:	9803      	ldr	r0, [sp, #12]
 800845c:	b005      	add	sp, #20
 800845e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008462:	bf00      	nop

08008464 <unwind_UCB_from_context>:
 8008464:	e7f0      	b.n	8008448 <_Unwind_GetGR.constprop.0>
 8008466:	bf00      	nop

08008468 <__gnu_unwind_execute>:
 8008468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800846c:	4605      	mov	r5, r0
 800846e:	b085      	sub	sp, #20
 8008470:	460e      	mov	r6, r1
 8008472:	f04f 0800 	mov.w	r8, #0
 8008476:	4630      	mov	r0, r6
 8008478:	f7ff ffca 	bl	8008410 <next_unwind_byte>
 800847c:	28b0      	cmp	r0, #176	; 0xb0
 800847e:	4604      	mov	r4, r0
 8008480:	f000 80b1 	beq.w	80085e6 <__gnu_unwind_execute+0x17e>
 8008484:	0607      	lsls	r7, r0, #24
 8008486:	d520      	bpl.n	80084ca <__gnu_unwind_execute+0x62>
 8008488:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800848c:	2b80      	cmp	r3, #128	; 0x80
 800848e:	d065      	beq.n	800855c <__gnu_unwind_execute+0xf4>
 8008490:	2b90      	cmp	r3, #144	; 0x90
 8008492:	d036      	beq.n	8008502 <__gnu_unwind_execute+0x9a>
 8008494:	2ba0      	cmp	r3, #160	; 0xa0
 8008496:	d078      	beq.n	800858a <__gnu_unwind_execute+0x122>
 8008498:	2bb0      	cmp	r3, #176	; 0xb0
 800849a:	d047      	beq.n	800852c <__gnu_unwind_execute+0xc4>
 800849c:	2bc0      	cmp	r3, #192	; 0xc0
 800849e:	f000 808a 	beq.w	80085b6 <__gnu_unwind_execute+0x14e>
 80084a2:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80084a6:	2bd0      	cmp	r3, #208	; 0xd0
 80084a8:	d10b      	bne.n	80084c2 <__gnu_unwind_execute+0x5a>
 80084aa:	f000 0207 	and.w	r2, r0, #7
 80084ae:	3201      	adds	r2, #1
 80084b0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80084b4:	2305      	movs	r3, #5
 80084b6:	2101      	movs	r1, #1
 80084b8:	4628      	mov	r0, r5
 80084ba:	f7ff fd93 	bl	8007fe4 <_Unwind_VRS_Pop>
 80084be:	2800      	cmp	r0, #0
 80084c0:	d0d9      	beq.n	8008476 <__gnu_unwind_execute+0xe>
 80084c2:	2009      	movs	r0, #9
 80084c4:	b005      	add	sp, #20
 80084c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80084ca:	f10d 090c 	add.w	r9, sp, #12
 80084ce:	2300      	movs	r3, #0
 80084d0:	4619      	mov	r1, r3
 80084d2:	0087      	lsls	r7, r0, #2
 80084d4:	f8cd 9000 	str.w	r9, [sp]
 80084d8:	220d      	movs	r2, #13
 80084da:	4628      	mov	r0, r5
 80084dc:	f7ff fb94 	bl	8007c08 <_Unwind_VRS_Get>
 80084e0:	b2ff      	uxtb	r7, r7
 80084e2:	9b03      	ldr	r3, [sp, #12]
 80084e4:	f8cd 9000 	str.w	r9, [sp]
 80084e8:	3704      	adds	r7, #4
 80084ea:	0660      	lsls	r0, r4, #25
 80084ec:	bf4c      	ite	mi
 80084ee:	1bdf      	submi	r7, r3, r7
 80084f0:	18ff      	addpl	r7, r7, r3
 80084f2:	2300      	movs	r3, #0
 80084f4:	4619      	mov	r1, r3
 80084f6:	220d      	movs	r2, #13
 80084f8:	4628      	mov	r0, r5
 80084fa:	9703      	str	r7, [sp, #12]
 80084fc:	f7ff fba6 	bl	8007c4c <_Unwind_VRS_Set>
 8008500:	e7b9      	b.n	8008476 <__gnu_unwind_execute+0xe>
 8008502:	f000 030d 	and.w	r3, r0, #13
 8008506:	2b0d      	cmp	r3, #13
 8008508:	d0db      	beq.n	80084c2 <__gnu_unwind_execute+0x5a>
 800850a:	af03      	add	r7, sp, #12
 800850c:	2300      	movs	r3, #0
 800850e:	f000 020f 	and.w	r2, r0, #15
 8008512:	4619      	mov	r1, r3
 8008514:	9700      	str	r7, [sp, #0]
 8008516:	4628      	mov	r0, r5
 8008518:	f7ff fb76 	bl	8007c08 <_Unwind_VRS_Get>
 800851c:	2300      	movs	r3, #0
 800851e:	9700      	str	r7, [sp, #0]
 8008520:	4619      	mov	r1, r3
 8008522:	220d      	movs	r2, #13
 8008524:	4628      	mov	r0, r5
 8008526:	f7ff fb91 	bl	8007c4c <_Unwind_VRS_Set>
 800852a:	e7a4      	b.n	8008476 <__gnu_unwind_execute+0xe>
 800852c:	28b1      	cmp	r0, #177	; 0xb1
 800852e:	d05f      	beq.n	80085f0 <__gnu_unwind_execute+0x188>
 8008530:	28b2      	cmp	r0, #178	; 0xb2
 8008532:	f000 80cc 	beq.w	80086ce <__gnu_unwind_execute+0x266>
 8008536:	28b3      	cmp	r0, #179	; 0xb3
 8008538:	d07e      	beq.n	8008638 <__gnu_unwind_execute+0x1d0>
 800853a:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 800853e:	2bb4      	cmp	r3, #180	; 0xb4
 8008540:	d0bf      	beq.n	80084c2 <__gnu_unwind_execute+0x5a>
 8008542:	f000 0207 	and.w	r2, r0, #7
 8008546:	3201      	adds	r2, #1
 8008548:	2301      	movs	r3, #1
 800854a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800854e:	4619      	mov	r1, r3
 8008550:	4628      	mov	r0, r5
 8008552:	f7ff fd47 	bl	8007fe4 <_Unwind_VRS_Pop>
 8008556:	2800      	cmp	r0, #0
 8008558:	d08d      	beq.n	8008476 <__gnu_unwind_execute+0xe>
 800855a:	e7b2      	b.n	80084c2 <__gnu_unwind_execute+0x5a>
 800855c:	4630      	mov	r0, r6
 800855e:	f7ff ff57 	bl	8008410 <next_unwind_byte>
 8008562:	0224      	lsls	r4, r4, #8
 8008564:	4304      	orrs	r4, r0
 8008566:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800856a:	d0aa      	beq.n	80084c2 <__gnu_unwind_execute+0x5a>
 800856c:	0124      	lsls	r4, r4, #4
 800856e:	2300      	movs	r3, #0
 8008570:	b2a2      	uxth	r2, r4
 8008572:	4619      	mov	r1, r3
 8008574:	4628      	mov	r0, r5
 8008576:	f7ff fd35 	bl	8007fe4 <_Unwind_VRS_Pop>
 800857a:	2800      	cmp	r0, #0
 800857c:	d1a1      	bne.n	80084c2 <__gnu_unwind_execute+0x5a>
 800857e:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8008582:	bf18      	it	ne
 8008584:	f04f 0801 	movne.w	r8, #1
 8008588:	e775      	b.n	8008476 <__gnu_unwind_execute+0xe>
 800858a:	43c2      	mvns	r2, r0
 800858c:	f002 0307 	and.w	r3, r2, #7
 8008590:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8008594:	411a      	asrs	r2, r3
 8008596:	0701      	lsls	r1, r0, #28
 8008598:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 800859c:	f04f 0300 	mov.w	r3, #0
 80085a0:	bf48      	it	mi
 80085a2:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 80085a6:	4619      	mov	r1, r3
 80085a8:	4628      	mov	r0, r5
 80085aa:	f7ff fd1b 	bl	8007fe4 <_Unwind_VRS_Pop>
 80085ae:	2800      	cmp	r0, #0
 80085b0:	f43f af61 	beq.w	8008476 <__gnu_unwind_execute+0xe>
 80085b4:	e785      	b.n	80084c2 <__gnu_unwind_execute+0x5a>
 80085b6:	28c6      	cmp	r0, #198	; 0xc6
 80085b8:	d051      	beq.n	800865e <__gnu_unwind_execute+0x1f6>
 80085ba:	28c7      	cmp	r0, #199	; 0xc7
 80085bc:	d05a      	beq.n	8008674 <__gnu_unwind_execute+0x20c>
 80085be:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80085c2:	2bc0      	cmp	r3, #192	; 0xc0
 80085c4:	d069      	beq.n	800869a <__gnu_unwind_execute+0x232>
 80085c6:	28c8      	cmp	r0, #200	; 0xc8
 80085c8:	d075      	beq.n	80086b6 <__gnu_unwind_execute+0x24e>
 80085ca:	28c9      	cmp	r0, #201	; 0xc9
 80085cc:	f47f af79 	bne.w	80084c2 <__gnu_unwind_execute+0x5a>
 80085d0:	4630      	mov	r0, r6
 80085d2:	f7ff ff1d 	bl	8008410 <next_unwind_byte>
 80085d6:	0302      	lsls	r2, r0, #12
 80085d8:	f000 000f 	and.w	r0, r0, #15
 80085dc:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 80085e0:	3001      	adds	r0, #1
 80085e2:	4302      	orrs	r2, r0
 80085e4:	e766      	b.n	80084b4 <__gnu_unwind_execute+0x4c>
 80085e6:	f1b8 0f00 	cmp.w	r8, #0
 80085ea:	d014      	beq.n	8008616 <__gnu_unwind_execute+0x1ae>
 80085ec:	2000      	movs	r0, #0
 80085ee:	e769      	b.n	80084c4 <__gnu_unwind_execute+0x5c>
 80085f0:	4630      	mov	r0, r6
 80085f2:	f7ff ff0d 	bl	8008410 <next_unwind_byte>
 80085f6:	2800      	cmp	r0, #0
 80085f8:	f43f af63 	beq.w	80084c2 <__gnu_unwind_execute+0x5a>
 80085fc:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8008600:	f47f af5f 	bne.w	80084c2 <__gnu_unwind_execute+0x5a>
 8008604:	4602      	mov	r2, r0
 8008606:	4619      	mov	r1, r3
 8008608:	4628      	mov	r0, r5
 800860a:	f7ff fceb 	bl	8007fe4 <_Unwind_VRS_Pop>
 800860e:	2800      	cmp	r0, #0
 8008610:	f43f af31 	beq.w	8008476 <__gnu_unwind_execute+0xe>
 8008614:	e755      	b.n	80084c2 <__gnu_unwind_execute+0x5a>
 8008616:	ac03      	add	r4, sp, #12
 8008618:	4643      	mov	r3, r8
 800861a:	220e      	movs	r2, #14
 800861c:	4641      	mov	r1, r8
 800861e:	9400      	str	r4, [sp, #0]
 8008620:	4628      	mov	r0, r5
 8008622:	f7ff faf1 	bl	8007c08 <_Unwind_VRS_Get>
 8008626:	9400      	str	r4, [sp, #0]
 8008628:	4628      	mov	r0, r5
 800862a:	4643      	mov	r3, r8
 800862c:	220f      	movs	r2, #15
 800862e:	4641      	mov	r1, r8
 8008630:	f7ff fb0c 	bl	8007c4c <_Unwind_VRS_Set>
 8008634:	4640      	mov	r0, r8
 8008636:	e745      	b.n	80084c4 <__gnu_unwind_execute+0x5c>
 8008638:	4630      	mov	r0, r6
 800863a:	f7ff fee9 	bl	8008410 <next_unwind_byte>
 800863e:	0301      	lsls	r1, r0, #12
 8008640:	f000 000f 	and.w	r0, r0, #15
 8008644:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8008648:	1c42      	adds	r2, r0, #1
 800864a:	2301      	movs	r3, #1
 800864c:	430a      	orrs	r2, r1
 800864e:	4628      	mov	r0, r5
 8008650:	4619      	mov	r1, r3
 8008652:	f7ff fcc7 	bl	8007fe4 <_Unwind_VRS_Pop>
 8008656:	2800      	cmp	r0, #0
 8008658:	f43f af0d 	beq.w	8008476 <__gnu_unwind_execute+0xe>
 800865c:	e731      	b.n	80084c2 <__gnu_unwind_execute+0x5a>
 800865e:	4630      	mov	r0, r6
 8008660:	f7ff fed6 	bl	8008410 <next_unwind_byte>
 8008664:	0301      	lsls	r1, r0, #12
 8008666:	f000 000f 	and.w	r0, r0, #15
 800866a:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 800866e:	1c42      	adds	r2, r0, #1
 8008670:	2303      	movs	r3, #3
 8008672:	e7eb      	b.n	800864c <__gnu_unwind_execute+0x1e4>
 8008674:	4630      	mov	r0, r6
 8008676:	f7ff fecb 	bl	8008410 <next_unwind_byte>
 800867a:	4602      	mov	r2, r0
 800867c:	2800      	cmp	r0, #0
 800867e:	f43f af20 	beq.w	80084c2 <__gnu_unwind_execute+0x5a>
 8008682:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8008686:	f47f af1c 	bne.w	80084c2 <__gnu_unwind_execute+0x5a>
 800868a:	2104      	movs	r1, #4
 800868c:	4628      	mov	r0, r5
 800868e:	f7ff fca9 	bl	8007fe4 <_Unwind_VRS_Pop>
 8008692:	2800      	cmp	r0, #0
 8008694:	f43f aeef 	beq.w	8008476 <__gnu_unwind_execute+0xe>
 8008698:	e713      	b.n	80084c2 <__gnu_unwind_execute+0x5a>
 800869a:	f000 020f 	and.w	r2, r0, #15
 800869e:	3201      	adds	r2, #1
 80086a0:	2303      	movs	r3, #3
 80086a2:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 80086a6:	4619      	mov	r1, r3
 80086a8:	4628      	mov	r0, r5
 80086aa:	f7ff fc9b 	bl	8007fe4 <_Unwind_VRS_Pop>
 80086ae:	2800      	cmp	r0, #0
 80086b0:	f43f aee1 	beq.w	8008476 <__gnu_unwind_execute+0xe>
 80086b4:	e705      	b.n	80084c2 <__gnu_unwind_execute+0x5a>
 80086b6:	4630      	mov	r0, r6
 80086b8:	f7ff feaa 	bl	8008410 <next_unwind_byte>
 80086bc:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80086c0:	f000 030f 	and.w	r3, r0, #15
 80086c4:	3210      	adds	r2, #16
 80086c6:	3301      	adds	r3, #1
 80086c8:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 80086cc:	e6f2      	b.n	80084b4 <__gnu_unwind_execute+0x4c>
 80086ce:	2300      	movs	r3, #0
 80086d0:	f10d 090c 	add.w	r9, sp, #12
 80086d4:	220d      	movs	r2, #13
 80086d6:	4619      	mov	r1, r3
 80086d8:	f8cd 9000 	str.w	r9, [sp]
 80086dc:	4628      	mov	r0, r5
 80086de:	f7ff fa93 	bl	8007c08 <_Unwind_VRS_Get>
 80086e2:	4630      	mov	r0, r6
 80086e4:	f7ff fe94 	bl	8008410 <next_unwind_byte>
 80086e8:	0602      	lsls	r2, r0, #24
 80086ea:	f04f 0702 	mov.w	r7, #2
 80086ee:	d50c      	bpl.n	800870a <__gnu_unwind_execute+0x2a2>
 80086f0:	9b03      	ldr	r3, [sp, #12]
 80086f2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80086f6:	40b8      	lsls	r0, r7
 80086f8:	4403      	add	r3, r0
 80086fa:	4630      	mov	r0, r6
 80086fc:	9303      	str	r3, [sp, #12]
 80086fe:	f7ff fe87 	bl	8008410 <next_unwind_byte>
 8008702:	0603      	lsls	r3, r0, #24
 8008704:	f107 0707 	add.w	r7, r7, #7
 8008708:	d4f2      	bmi.n	80086f0 <__gnu_unwind_execute+0x288>
 800870a:	9b03      	ldr	r3, [sp, #12]
 800870c:	f8cd 9000 	str.w	r9, [sp]
 8008710:	f000 047f 	and.w	r4, r0, #127	; 0x7f
 8008714:	f503 7201 	add.w	r2, r3, #516	; 0x204
 8008718:	40bc      	lsls	r4, r7
 800871a:	2300      	movs	r3, #0
 800871c:	4414      	add	r4, r2
 800871e:	4619      	mov	r1, r3
 8008720:	220d      	movs	r2, #13
 8008722:	4628      	mov	r0, r5
 8008724:	9403      	str	r4, [sp, #12]
 8008726:	f7ff fa91 	bl	8007c4c <_Unwind_VRS_Set>
 800872a:	e6a4      	b.n	8008476 <__gnu_unwind_execute+0xe>

0800872c <__gnu_unwind_frame>:
 800872c:	b510      	push	{r4, lr}
 800872e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008730:	b084      	sub	sp, #16
 8008732:	685a      	ldr	r2, [r3, #4]
 8008734:	2003      	movs	r0, #3
 8008736:	f88d 000c 	strb.w	r0, [sp, #12]
 800873a:	79dc      	ldrb	r4, [r3, #7]
 800873c:	f88d 400d 	strb.w	r4, [sp, #13]
 8008740:	0212      	lsls	r2, r2, #8
 8008742:	3308      	adds	r3, #8
 8008744:	4608      	mov	r0, r1
 8008746:	a901      	add	r1, sp, #4
 8008748:	9201      	str	r2, [sp, #4]
 800874a:	9302      	str	r3, [sp, #8]
 800874c:	f7ff fe8c 	bl	8008468 <__gnu_unwind_execute>
 8008750:	b004      	add	sp, #16
 8008752:	bd10      	pop	{r4, pc}

08008754 <_Unwind_GetRegionStart>:
 8008754:	b508      	push	{r3, lr}
 8008756:	f7ff fe85 	bl	8008464 <unwind_UCB_from_context>
 800875a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800875c:	bd08      	pop	{r3, pc}
 800875e:	bf00      	nop

08008760 <_Unwind_GetLanguageSpecificData>:
 8008760:	b508      	push	{r3, lr}
 8008762:	f7ff fe7f 	bl	8008464 <unwind_UCB_from_context>
 8008766:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8008768:	79c3      	ldrb	r3, [r0, #7]
 800876a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800876e:	3008      	adds	r0, #8
 8008770:	bd08      	pop	{r3, pc}
 8008772:	bf00      	nop

08008774 <_Unwind_GetDataRelBase>:
 8008774:	b508      	push	{r3, lr}
 8008776:	f025 fda7 	bl	802e2c8 <abort>
 800877a:	bf00      	nop

0800877c <_Unwind_GetTextRelBase>:
 800877c:	b508      	push	{r3, lr}
 800877e:	f7ff fff9 	bl	8008774 <_Unwind_GetDataRelBase>
 8008782:	bf00      	nop

08008784 <__aeabi_idiv0>:
 8008784:	4770      	bx	lr
 8008786:	bf00      	nop

08008788 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8008788:	f8df d034 	ldr.w	sp, [pc, #52]	; 80087c0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800878c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800878e:	e003      	b.n	8008798 <LoopCopyDataInit>

08008790 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008790:	4b0c      	ldr	r3, [pc, #48]	; (80087c4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008792:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008794:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008796:	3104      	adds	r1, #4

08008798 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008798:	480b      	ldr	r0, [pc, #44]	; (80087c8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800879a:	4b0c      	ldr	r3, [pc, #48]	; (80087cc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800879c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800879e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80087a0:	d3f6      	bcc.n	8008790 <CopyDataInit>
  ldr  r2, =_sbss
 80087a2:	4a0b      	ldr	r2, [pc, #44]	; (80087d0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80087a4:	e002      	b.n	80087ac <LoopFillZerobss>

080087a6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80087a6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80087a8:	f842 3b04 	str.w	r3, [r2], #4

080087ac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80087ac:	4b09      	ldr	r3, [pc, #36]	; (80087d4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80087ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80087b0:	d3f9      	bcc.n	80087a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80087b2:	f009 fb9f 	bl	8011ef4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80087b6:	f025 feb1 	bl	802e51c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80087ba:	f002 f9ff 	bl	800abbc <main>
  bx  lr    
 80087be:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80087c0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80087c4:	0807b438 	.word	0x0807b438
  ldr  r0, =_sdata
 80087c8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80087cc:	20000178 	.word	0x20000178
  ldr  r2, =_sbss
 80087d0:	20000178 	.word	0x20000178
  ldr  r3, = _ebss
 80087d4:	2001300c 	.word	0x2001300c

080087d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80087d8:	e7fe      	b.n	80087d8 <ADC_IRQHandler>

080087da <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 80087de:	f001 fdcb 	bl	800a378 <touchgfx_init>
}
 80087e2:	bf00      	nop
 80087e4:	bd80      	pop	{r7, pc}

080087e6 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 80087e6:	b580      	push	{r7, lr}
 80087e8:	b082      	sub	sp, #8
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 80087ee:	f001 fded 	bl	800a3cc <touchgfx_taskEntry>
}
 80087f2:	bf00      	nop
 80087f4:	3708      	adds	r7, #8
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
	...

080087fc <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
    {
 8008804:	4a04      	ldr	r2, [pc, #16]	; (8008818 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	601a      	str	r2, [r3, #0]
    }
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4618      	mov	r0, r3
 800880e:	370c      	adds	r7, #12
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr
 8008818:	08030a00 	.word	0x08030a00

0800881c <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
    }
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f7ff ffe9 	bl	80087fc <_ZN8touchgfx15TouchControllerD1Ev>
 800882a:	2104      	movs	r1, #4
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f024 fc85 	bl	802d13c <_ZdlPvj>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	4618      	mov	r0, r3
 8008836:	3708      	adds	r7, #8
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <_ZN20STM32TouchController4initEv>:

uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize);
void    BSP_TS_GetState(TS_StateTypeDef* TsState);

void STM32TouchController::init()
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
    BSP_TS_Init(240, 320);
 8008844:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008848:	20f0      	movs	r0, #240	; 0xf0
 800884a:	f000 f821 	bl	8008890 <_Z11BSP_TS_Inittt>
}
 800884e:	bf00      	nop
 8008850:	3708      	adds	r7, #8
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b086      	sub	sp, #24
 800885a:	af00      	add	r7, sp, #0
 800885c:	60f8      	str	r0, [r7, #12]
 800885e:	60b9      	str	r1, [r7, #8]
 8008860:	607a      	str	r2, [r7, #4]
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    TS_StateTypeDef state;
    BSP_TS_GetState(&state);
 8008862:	f107 0310 	add.w	r3, r7, #16
 8008866:	4618      	mov	r0, r3
 8008868:	f000 f850 	bl	800890c <_Z15BSP_TS_GetStateP15TS_StateTypeDef>
    if (state.TouchDetected)
 800886c:	8a3b      	ldrh	r3, [r7, #16]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d009      	beq.n	8008886 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>
    {
        x = state.X;
 8008872:	8a7b      	ldrh	r3, [r7, #18]
 8008874:	461a      	mov	r2, r3
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	601a      	str	r2, [r3, #0]
        y = state.Y;
 800887a:	8abb      	ldrh	r3, [r7, #20]
 800887c:	461a      	mov	r2, r3
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	601a      	str	r2, [r3, #0]
        return true;
 8008882:	2301      	movs	r3, #1
 8008884:	e000      	b.n	8008888 <_ZN20STM32TouchController11sampleTouchERlS0_+0x32>
    }
    return false;
 8008886:	2300      	movs	r3, #0
}
 8008888:	4618      	mov	r0, r3
 800888a:	3718      	adds	r7, #24
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <_Z11BSP_TS_Inittt>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	4603      	mov	r3, r0
 8008898:	460a      	mov	r2, r1
 800889a:	80fb      	strh	r3, [r7, #6]
 800889c:	4613      	mov	r3, r2
 800889e:	80bb      	strh	r3, [r7, #4]
    uint8_t ret = TS_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	73fb      	strb	r3, [r7, #15]

    /* Initialize x and y positions boundaries */
    TsXBoundary = XSize;
 80088a4:	4a15      	ldr	r2, [pc, #84]	; (80088fc <_Z11BSP_TS_Inittt+0x6c>)
 80088a6:	88fb      	ldrh	r3, [r7, #6]
 80088a8:	8013      	strh	r3, [r2, #0]
    TsYBoundary = YSize;
 80088aa:	4a15      	ldr	r2, [pc, #84]	; (8008900 <_Z11BSP_TS_Inittt+0x70>)
 80088ac:	88bb      	ldrh	r3, [r7, #4]
 80088ae:	8013      	strh	r3, [r2, #0]

    /* Read ID and verify if the IO expander is ready */
    if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80088b0:	4b14      	ldr	r3, [pc, #80]	; (8008904 <_Z11BSP_TS_Inittt+0x74>)
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	2082      	movs	r0, #130	; 0x82
 80088b6:	4798      	blx	r3
 80088b8:	4603      	mov	r3, r0
 80088ba:	461a      	mov	r2, r3
 80088bc:	f640 0311 	movw	r3, #2065	; 0x811
 80088c0:	429a      	cmp	r2, r3
 80088c2:	bf0c      	ite	eq
 80088c4:	2301      	moveq	r3, #1
 80088c6:	2300      	movne	r3, #0
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d004      	beq.n	80088d8 <_Z11BSP_TS_Inittt+0x48>
    {
        /* Initialize the TS driver structure */
        TsDrv = &stmpe811_ts_drv;
 80088ce:	4b0e      	ldr	r3, [pc, #56]	; (8008908 <_Z11BSP_TS_Inittt+0x78>)
 80088d0:	4a0c      	ldr	r2, [pc, #48]	; (8008904 <_Z11BSP_TS_Inittt+0x74>)
 80088d2:	601a      	str	r2, [r3, #0]

        ret = TS_OK;
 80088d4:	2300      	movs	r3, #0
 80088d6:	73fb      	strb	r3, [r7, #15]
    }

    if (ret == TS_OK)
 80088d8:	7bfb      	ldrb	r3, [r7, #15]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d109      	bne.n	80088f2 <_Z11BSP_TS_Inittt+0x62>
    {
        /* Initialize the LL TS Driver */
        TsDrv->Init(TS_I2C_ADDRESS);
 80088de:	4b0a      	ldr	r3, [pc, #40]	; (8008908 <_Z11BSP_TS_Inittt+0x78>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	2082      	movs	r0, #130	; 0x82
 80088e6:	4798      	blx	r3
        TsDrv->Start(TS_I2C_ADDRESS);
 80088e8:	4b07      	ldr	r3, [pc, #28]	; (8008908 <_Z11BSP_TS_Inittt+0x78>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	2082      	movs	r0, #130	; 0x82
 80088f0:	4798      	blx	r3
    }

    return ret;
 80088f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3710      	adds	r7, #16
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	20000198 	.word	0x20000198
 8008900:	2000019a 	.word	0x2000019a
 8008904:	20000060 	.word	0x20000060
 8008908:	20000194 	.word	0x20000194

0800890c <_Z15BSP_TS_GetStateP15TS_StateTypeDef>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b086      	sub	sp, #24
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
    static uint32_t _x = 0, _y = 0;
    uint16_t xDiff, yDiff, x, y, xr, yr;

    TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8008914:	4b4f      	ldr	r3, [pc, #316]	; (8008a54 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x148>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	691b      	ldr	r3, [r3, #16]
 800891a:	2082      	movs	r0, #130	; 0x82
 800891c:	4798      	blx	r3
 800891e:	4603      	mov	r3, r0
 8008920:	b29a      	uxth	r2, r3
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	801a      	strh	r2, [r3, #0]

    if (TsState->TouchDetected)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	881b      	ldrh	r3, [r3, #0]
 800892a:	2b00      	cmp	r3, #0
 800892c:	f000 808d 	beq.w	8008a4a <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x13e>
    {
        TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8008930:	4b48      	ldr	r3, [pc, #288]	; (8008a54 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x148>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	695b      	ldr	r3, [r3, #20]
 8008936:	f107 020c 	add.w	r2, r7, #12
 800893a:	f107 010e 	add.w	r1, r7, #14
 800893e:	2082      	movs	r0, #130	; 0x82
 8008940:	4798      	blx	r3

        /* Y value first correction */
        y -= 360;
 8008942:	89bb      	ldrh	r3, [r7, #12]
 8008944:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8008948:	b29b      	uxth	r3, r3
 800894a:	81bb      	strh	r3, [r7, #12]

        /* Y value second correction */
        yr = y / 11;
 800894c:	89bb      	ldrh	r3, [r7, #12]
 800894e:	4a42      	ldr	r2, [pc, #264]	; (8008a58 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x14c>)
 8008950:	fba2 2303 	umull	r2, r3, r2, r3
 8008954:	08db      	lsrs	r3, r3, #3
 8008956:	82bb      	strh	r3, [r7, #20]

        /* Return y position value */
        if (yr <= 0)
 8008958:	8abb      	ldrh	r3, [r7, #20]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d102      	bne.n	8008964 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x58>
        {
            yr = 0;
 800895e:	2300      	movs	r3, #0
 8008960:	82bb      	strh	r3, [r7, #20]
 8008962:	e008      	b.n	8008976 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x6a>
        }
        else if (yr > TsYBoundary)
 8008964:	4b3d      	ldr	r3, [pc, #244]	; (8008a5c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x150>)
 8008966:	881b      	ldrh	r3, [r3, #0]
 8008968:	8aba      	ldrh	r2, [r7, #20]
 800896a:	429a      	cmp	r2, r3
 800896c:	d903      	bls.n	8008976 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x6a>
        {
            yr = TsYBoundary - 1;
 800896e:	4b3b      	ldr	r3, [pc, #236]	; (8008a5c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x150>)
 8008970:	881b      	ldrh	r3, [r3, #0]
 8008972:	3b01      	subs	r3, #1
 8008974:	82bb      	strh	r3, [r7, #20]
        }
        else
        {}
        y = yr;
 8008976:	8abb      	ldrh	r3, [r7, #20]
 8008978:	81bb      	strh	r3, [r7, #12]

        /* X value first correction */
        if (x <= 3000)
 800897a:	89fb      	ldrh	r3, [r7, #14]
 800897c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8008980:	4293      	cmp	r3, r2
 8008982:	d806      	bhi.n	8008992 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x86>
        {
            x = 3870 - x;
 8008984:	89fb      	ldrh	r3, [r7, #14]
 8008986:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 800898a:	330e      	adds	r3, #14
 800898c:	b29b      	uxth	r3, r3
 800898e:	81fb      	strh	r3, [r7, #14]
 8008990:	e005      	b.n	800899e <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x92>
        }
        else
        {
            x = 3800 - x;
 8008992:	89fb      	ldrh	r3, [r7, #14]
 8008994:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 8008998:	3308      	adds	r3, #8
 800899a:	b29b      	uxth	r3, r3
 800899c:	81fb      	strh	r3, [r7, #14]
        }

        /* X value second correction */
        xr = x / 15;
 800899e:	89fb      	ldrh	r3, [r7, #14]
 80089a0:	4a2f      	ldr	r2, [pc, #188]	; (8008a60 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x154>)
 80089a2:	fba2 2303 	umull	r2, r3, r2, r3
 80089a6:	08db      	lsrs	r3, r3, #3
 80089a8:	82fb      	strh	r3, [r7, #22]

        /* Return X position value */
        if (xr <= 0)
 80089aa:	8afb      	ldrh	r3, [r7, #22]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d102      	bne.n	80089b6 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xaa>
        {
            xr = 0;
 80089b0:	2300      	movs	r3, #0
 80089b2:	82fb      	strh	r3, [r7, #22]
 80089b4:	e008      	b.n	80089c8 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xbc>
        }
        else if (xr > TsXBoundary)
 80089b6:	4b2b      	ldr	r3, [pc, #172]	; (8008a64 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x158>)
 80089b8:	881b      	ldrh	r3, [r3, #0]
 80089ba:	8afa      	ldrh	r2, [r7, #22]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d903      	bls.n	80089c8 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xbc>
        {
            xr = TsXBoundary - 1;
 80089c0:	4b28      	ldr	r3, [pc, #160]	; (8008a64 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x158>)
 80089c2:	881b      	ldrh	r3, [r3, #0]
 80089c4:	3b01      	subs	r3, #1
 80089c6:	82fb      	strh	r3, [r7, #22]
        }
        else
        {}

        x = xr;
 80089c8:	8afb      	ldrh	r3, [r7, #22]
 80089ca:	81fb      	strh	r3, [r7, #14]
        xDiff = x > _x ? (x - _x) : (_x - x);
 80089cc:	89fb      	ldrh	r3, [r7, #14]
 80089ce:	461a      	mov	r2, r3
 80089d0:	4b25      	ldr	r3, [pc, #148]	; (8008a68 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x15c>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d906      	bls.n	80089e6 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xda>
 80089d8:	89fa      	ldrh	r2, [r7, #14]
 80089da:	4b23      	ldr	r3, [pc, #140]	; (8008a68 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x15c>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	b29b      	uxth	r3, r3
 80089e0:	1ad3      	subs	r3, r2, r3
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	e005      	b.n	80089f2 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xe6>
 80089e6:	4b20      	ldr	r3, [pc, #128]	; (8008a68 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x15c>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	b29a      	uxth	r2, r3
 80089ec:	89fb      	ldrh	r3, [r7, #14]
 80089ee:	1ad3      	subs	r3, r2, r3
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	827b      	strh	r3, [r7, #18]
        yDiff = y > _y ? (y - _y) : (_y - y);
 80089f4:	89bb      	ldrh	r3, [r7, #12]
 80089f6:	461a      	mov	r2, r3
 80089f8:	4b1c      	ldr	r3, [pc, #112]	; (8008a6c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x160>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d906      	bls.n	8008a0e <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x102>
 8008a00:	89ba      	ldrh	r2, [r7, #12]
 8008a02:	4b1a      	ldr	r3, [pc, #104]	; (8008a6c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x160>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	1ad3      	subs	r3, r2, r3
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	e005      	b.n	8008a1a <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x10e>
 8008a0e:	4b17      	ldr	r3, [pc, #92]	; (8008a6c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x160>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	b29a      	uxth	r2, r3
 8008a14:	89bb      	ldrh	r3, [r7, #12]
 8008a16:	1ad3      	subs	r3, r2, r3
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	823b      	strh	r3, [r7, #16]

        if (xDiff + yDiff > 5)
 8008a1c:	8a7a      	ldrh	r2, [r7, #18]
 8008a1e:	8a3b      	ldrh	r3, [r7, #16]
 8008a20:	4413      	add	r3, r2
 8008a22:	2b05      	cmp	r3, #5
 8008a24:	dd07      	ble.n	8008a36 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x12a>
        {
            _x = x;
 8008a26:	89fb      	ldrh	r3, [r7, #14]
 8008a28:	461a      	mov	r2, r3
 8008a2a:	4b0f      	ldr	r3, [pc, #60]	; (8008a68 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x15c>)
 8008a2c:	601a      	str	r2, [r3, #0]
            _y = y;
 8008a2e:	89bb      	ldrh	r3, [r7, #12]
 8008a30:	461a      	mov	r2, r3
 8008a32:	4b0e      	ldr	r3, [pc, #56]	; (8008a6c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x160>)
 8008a34:	601a      	str	r2, [r3, #0]
        }

        /* Update the X position */
        TsState->X = _x;
 8008a36:	4b0c      	ldr	r3, [pc, #48]	; (8008a68 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x15c>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	b29a      	uxth	r2, r3
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	805a      	strh	r2, [r3, #2]

        /* Update the Y position */
        TsState->Y = _y;
 8008a40:	4b0a      	ldr	r3, [pc, #40]	; (8008a6c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x160>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	b29a      	uxth	r2, r3
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	809a      	strh	r2, [r3, #4]
    }
}
 8008a4a:	bf00      	nop
 8008a4c:	3718      	adds	r7, #24
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	20000194 	.word	0x20000194
 8008a58:	ba2e8ba3 	.word	0xba2e8ba3
 8008a5c:	2000019a 	.word	0x2000019a
 8008a60:	88888889 	.word	0x88888889
 8008a64:	20000198 	.word	0x20000198
 8008a68:	2000019c 	.word	0x2000019c
 8008a6c:	200001a0 	.word	0x200001a0

08008a70 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	4a05      	ldr	r2, [pc, #20]	; (8008a90 <_ZN20STM32TouchControllerD1Ev+0x20>)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	601a      	str	r2, [r3, #0]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	4618      	mov	r0, r3
 8008a82:	f7ff febb 	bl	80087fc <_ZN8touchgfx15TouchControllerD1Ev>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3708      	adds	r7, #8
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}
 8008a90:	080309e8 	.word	0x080309e8

08008a94 <_ZN20STM32TouchControllerD0Ev>:
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b082      	sub	sp, #8
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f7ff ffe7 	bl	8008a70 <_ZN20STM32TouchControllerD1Ev>
 8008aa2:	2104      	movs	r1, #4
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f024 fb49 	bl	802d13c <_ZdlPvj>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	4618      	mov	r0, r3
 8008aae:	3708      	adds	r7, #8
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	4603      	mov	r3, r0
 8008abc:	71fb      	strb	r3, [r7, #7]

}
 8008abe:	bf00      	nop
 8008ac0:	370c      	adds	r7, #12
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr

08008aca <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8008aca:	b480      	push	{r7}
 8008acc:	b083      	sub	sp, #12
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	71fb      	strb	r3, [r7, #7]

}
 8008ad4:	bf00      	nop
 8008ad6:	370c      	adds	r7, #12
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b083      	sub	sp, #12
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	71fb      	strb	r3, [r7, #7]

}
 8008aea:	bf00      	nop
 8008aec:	370c      	adds	r7, #12
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr
	...

08008af8 <_ZN8touchgfx3HALD1Ev>:
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
    }

    /** Finalizes an instance of the HAL class. */
    virtual ~HAL()
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
    {
 8008b00:	4a04      	ldr	r2, [pc, #16]	; (8008b14 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	601a      	str	r2, [r3, #0]
    }
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	4618      	mov	r0, r3
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr
 8008b14:	08032a78 	.word	0x08032a78

08008b18 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
    }
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f7ff ffe9 	bl	8008af8 <_ZN8touchgfx3HALD1Ev>
 8008b26:	2178      	movs	r1, #120	; 0x78
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f024 fb07 	bl	802d13c <_ZdlPvj>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	4618      	mov	r0, r3
 8008b32:	3708      	adds	r7, #8
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	460b      	mov	r3, r1
 8008b42:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	78fa      	ldrb	r2, [r7, #3]
 8008b48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8008b54:	bf00      	nop
 8008b56:	370c      	adds	r7, #12
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr

08008b60 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 8008b60:	b480      	push	{r7}
 8008b62:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8008b64:	4b0b      	ldr	r3, [pc, #44]	; (8008b94 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d008      	beq.n	8008b82 <_ZN8touchgfx3HAL3lcdEv+0x22>
 8008b70:	4b08      	ldr	r3, [pc, #32]	; (8008b94 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d003      	beq.n	8008b82 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 8008b7a:	4b06      	ldr	r3, [pc, #24]	; (8008b94 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b80:	e002      	b.n	8008b88 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 8008b82:	4b04      	ldr	r3, [pc, #16]	; (8008b94 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	689b      	ldr	r3, [r3, #8]
        }
    }
 8008b88:	4618      	mov	r0, r3
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr
 8008b92:	bf00      	nop
 8008b94:	200127f4 	.word	0x200127f4

08008b98 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d009      	beq.n	8008bbe <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	685a      	ldr	r2, [r3, #4]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4610      	mov	r0, r2
 8008bb8:	4798      	blx	r3
 8008bba:	4603      	mov	r3, r0
 8008bbc:	e000      	b.n	8008bc0 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        else
        {
            return static_cast<BlitOperations>(0);
 8008bbe:	2300      	movs	r3, #0
        }
    }
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3708      	adds	r7, #8
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f014 fbdb 	bl	801d38c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	3394      	adds	r3, #148	; 0x94
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	4798      	blx	r3
    }
 8008be2:	bf00      	nop
 8008be4:	3708      	adds	r7, #8
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}

08008bea <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8008bea:	b480      	push	{r7}
 8008bec:	b083      	sub	sp, #12
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
 8008bf2:	6039      	str	r1, [r7, #0]
    {
        return false;
 8008bf4:	2300      	movs	r3, #0
    }
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	370c      	adds	r7, #12
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr
	...

08008c04 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
     * @param      useAnimationStorage (Optional) If true, reserve memory for animation
     *                                 storage.
     *
     * @deprecated Use HAL::setFrameBufferStartAddresses(void*,void*,void*).
     */
    TOUCHGFX_DEPRECATED(
 8008c04:	b590      	push	{r4, r7, lr}
 8008c06:	b08b      	sub	sp, #44	; 0x2c
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	4611      	mov	r1, r2
 8008c10:	461a      	mov	r2, r3
 8008c12:	460b      	mov	r3, r1
 8008c14:	80fb      	strh	r3, [r7, #6]
 8008c16:	4613      	mov	r3, r2
 8008c18:	717b      	strb	r3, [r7, #5]
        "Use HAL::setFrameBufferStartAddresses(void*,void*,void*).",
        virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true))
    {
        uint16_t stride = lcd().framebufferStride();
 8008c1a:	f7ff ffa1 	bl	8008b60 <_ZN8touchgfx3HAL3lcdEv>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	6813      	ldr	r3, [r2, #0]
 8008c22:	3324      	adds	r3, #36	; 0x24
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4610      	mov	r0, r2
 8008c28:	4798      	blx	r3
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 8008c2e:	8b7b      	ldrh	r3, [r7, #26]
 8008c30:	4a3d      	ldr	r2, [pc, #244]	; (8008d28 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 8008c32:	8812      	ldrh	r2, [r2, #0]
 8008c34:	fb02 f303 	mul.w	r3, r2, r3
 8008c38:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 8008c42:	2300      	movs	r3, #0
 8008c44:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 8008c46:	797b      	ldrb	r3, [r7, #5]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d005      	beq.n	8008c58 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 8008c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	4413      	add	r3, r2
 8008c52:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 8008c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c56:	623b      	str	r3, [r7, #32]
        }
        if (useAnimationStorage)
 8008c58:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d005      	beq.n	8008c6c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 8008c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	4413      	add	r3, r2
 8008c66:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 8008c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6a:	61fb      	str	r3, [r7, #28]
        }
        switch (depth)
 8008c6c:	88fb      	ldrh	r3, [r7, #6]
 8008c6e:	3b01      	subs	r3, #1
 8008c70:	2b1f      	cmp	r3, #31
 8008c72:	d84d      	bhi.n	8008d10 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 8008c74:	a201      	add	r2, pc, #4	; (adr r2, 8008c7c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 8008c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c7a:	bf00      	nop
 8008c7c:	08008cfd 	.word	0x08008cfd
 8008c80:	08008cfd 	.word	0x08008cfd
 8008c84:	08008d11 	.word	0x08008d11
 8008c88:	08008cfd 	.word	0x08008cfd
 8008c8c:	08008d11 	.word	0x08008d11
 8008c90:	08008d11 	.word	0x08008d11
 8008c94:	08008d11 	.word	0x08008d11
 8008c98:	08008cfd 	.word	0x08008cfd
 8008c9c:	08008d11 	.word	0x08008d11
 8008ca0:	08008d11 	.word	0x08008d11
 8008ca4:	08008d11 	.word	0x08008d11
 8008ca8:	08008d11 	.word	0x08008d11
 8008cac:	08008d11 	.word	0x08008d11
 8008cb0:	08008d11 	.word	0x08008d11
 8008cb4:	08008d11 	.word	0x08008d11
 8008cb8:	08008cfd 	.word	0x08008cfd
 8008cbc:	08008d11 	.word	0x08008d11
 8008cc0:	08008d11 	.word	0x08008d11
 8008cc4:	08008d11 	.word	0x08008d11
 8008cc8:	08008d11 	.word	0x08008d11
 8008ccc:	08008d11 	.word	0x08008d11
 8008cd0:	08008d11 	.word	0x08008d11
 8008cd4:	08008d11 	.word	0x08008d11
 8008cd8:	08008cfd 	.word	0x08008cfd
 8008cdc:	08008d11 	.word	0x08008d11
 8008ce0:	08008d11 	.word	0x08008d11
 8008ce4:	08008d11 	.word	0x08008d11
 8008ce8:	08008d11 	.word	0x08008d11
 8008cec:	08008d11 	.word	0x08008d11
 8008cf0:	08008d11 	.word	0x08008d11
 8008cf4:	08008d11 	.word	0x08008d11
 8008cf8:	08008cfd 	.word	0x08008cfd
        case 16:
        case 8:
        case 4:
        case 2:
        case 1:
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	3374      	adds	r3, #116	; 0x74
 8008d02:	681c      	ldr	r4, [r3, #0]
 8008d04:	69fb      	ldr	r3, [r7, #28]
 8008d06:	6a3a      	ldr	r2, [r7, #32]
 8008d08:	68b9      	ldr	r1, [r7, #8]
 8008d0a:	68f8      	ldr	r0, [r7, #12]
 8008d0c:	47a0      	blx	r4
            break;
 8008d0e:	e006      	b.n	8008d1e <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
        default:
            assert(0 && "Unsupported bit depth");
 8008d10:	4b06      	ldr	r3, [pc, #24]	; (8008d2c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 8008d12:	4a07      	ldr	r2, [pc, #28]	; (8008d30 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 8008d14:	f240 2189 	movw	r1, #649	; 0x289
 8008d18:	4806      	ldr	r0, [pc, #24]	; (8008d34 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 8008d1a:	f025 fadd 	bl	802e2d8 <__assert_func>
            break;
        }
    }
 8008d1e:	bf00      	nop
 8008d20:	372c      	adds	r7, #44	; 0x2c
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd90      	pop	{r4, r7, pc}
 8008d26:	bf00      	nop
 8008d28:	200127f0 	.word	0x200127f0
 8008d2c:	0802f958 	.word	0x0802f958
 8008d30:	08030b18 	.word	0x08030b18
 8008d34:	0802f978 	.word	0x0802f978

08008d38 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	607a      	str	r2, [r7, #4]
 8008d44:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d106      	bne.n	8008d5a <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8008d4c:	4b11      	ldr	r3, [pc, #68]	; (8008d94 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8008d4e:	4a12      	ldr	r2, [pc, #72]	; (8008d98 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8008d50:	f44f 7127 	mov.w	r1, #668	; 0x29c
 8008d54:	4811      	ldr	r0, [pc, #68]	; (8008d9c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8008d56:	f025 fabf 	bl	802e2d8 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	68ba      	ldr	r2, [r7, #8]
 8008d5e:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	683a      	ldr	r2, [r7, #0]
 8008d6a:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	bf14      	ite	ne
 8008d72:	2301      	movne	r3, #1
 8008d74:	2300      	moveq	r3, #0
 8008d76:	b2da      	uxtb	r2, r3
 8008d78:	4b09      	ldr	r3, [pc, #36]	; (8008da0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8008d7a:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	bf14      	ite	ne
 8008d82:	2301      	movne	r3, #1
 8008d84:	2300      	moveq	r3, #0
 8008d86:	b2da      	uxtb	r2, r3
 8008d88:	4b06      	ldr	r3, [pc, #24]	; (8008da4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8008d8a:	701a      	strb	r2, [r3, #0]
    }
 8008d8c:	bf00      	nop
 8008d8e:	3710      	adds	r7, #16
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}
 8008d94:	0802f9c0 	.word	0x0802f9c0
 8008d98:	08030ac8 	.word	0x08030ac8
 8008d9c:	0802f978 	.word	0x0802f978
 8008da0:	200127f2 	.word	0x200127f2
 8008da4:	200127f3 	.word	0x200127f3

08008da8 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8008db0:	2300      	movs	r3, #0
    }
 8008db2:	4618      	mov	r0, r3
 8008db4:	370c      	adds	r7, #12
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr

08008dbe <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b082      	sub	sp, #8
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d004      	beq.n	8008ddc <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd6:	887a      	ldrh	r2, [r7, #2]
 8008dd8:	4610      	mov	r0, r2
 8008dda:	4798      	blx	r3
        }
    }
 8008ddc:	bf00      	nop
 8008dde:	3708      	adds	r7, #8
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 8008dec:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 8008df0:	4618      	mov	r0, r3
 8008df2:	370c      	adds	r7, #12
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b082      	sub	sp, #8
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	685a      	ldr	r2, [r3, #4]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	3318      	adds	r3, #24
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4610      	mov	r0, r2
 8008e14:	4798      	blx	r3
 8008e16:	4603      	mov	r3, r0
    }
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8008e20:	b480      	push	{r7}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d017      	beq.n	8008e68 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8008e38:	4b1a      	ldr	r3, [pc, #104]	; (8008ea4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d12a      	bne.n	8008e96 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8008e40:	4b19      	ldr	r3, [pc, #100]	; (8008ea8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8008e42:	881a      	ldrh	r2, [r3, #0]
 8008e44:	4b19      	ldr	r3, [pc, #100]	; (8008eac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8008e46:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8008e48:	4b19      	ldr	r3, [pc, #100]	; (8008eb0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8008e4a:	881a      	ldrh	r2, [r3, #0]
 8008e4c:	4b19      	ldr	r3, [pc, #100]	; (8008eb4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8008e4e:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8008e50:	4b16      	ldr	r3, [pc, #88]	; (8008eac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8008e52:	881a      	ldrh	r2, [r3, #0]
 8008e54:	4b16      	ldr	r3, [pc, #88]	; (8008eb0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8008e56:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8008e58:	4b16      	ldr	r3, [pc, #88]	; (8008eb4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8008e5a:	881a      	ldrh	r2, [r3, #0]
 8008e5c:	4b12      	ldr	r3, [pc, #72]	; (8008ea8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8008e5e:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8008e60:	4b10      	ldr	r3, [pc, #64]	; (8008ea4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8008e62:	2201      	movs	r2, #1
 8008e64:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8008e66:	e016      	b.n	8008e96 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8008e68:	4b0e      	ldr	r3, [pc, #56]	; (8008ea4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d012      	beq.n	8008e96 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8008e70:	4b0f      	ldr	r3, [pc, #60]	; (8008eb0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8008e72:	881a      	ldrh	r2, [r3, #0]
 8008e74:	4b0d      	ldr	r3, [pc, #52]	; (8008eac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8008e76:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8008e78:	4b0b      	ldr	r3, [pc, #44]	; (8008ea8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8008e7a:	881a      	ldrh	r2, [r3, #0]
 8008e7c:	4b0d      	ldr	r3, [pc, #52]	; (8008eb4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8008e7e:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8008e80:	4b0c      	ldr	r3, [pc, #48]	; (8008eb4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8008e82:	881a      	ldrh	r2, [r3, #0]
 8008e84:	4b0a      	ldr	r3, [pc, #40]	; (8008eb0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8008e86:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8008e88:	4b08      	ldr	r3, [pc, #32]	; (8008eac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8008e8a:	881a      	ldrh	r2, [r3, #0]
 8008e8c:	4b06      	ldr	r3, [pc, #24]	; (8008ea8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8008e8e:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8008e90:	4b04      	ldr	r3, [pc, #16]	; (8008ea4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8008e92:	2200      	movs	r2, #0
 8008e94:	701a      	strb	r2, [r3, #0]
    }
 8008e96:	bf00      	nop
 8008e98:	370c      	adds	r7, #12
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr
 8008ea2:	bf00      	nop
 8008ea4:	200127ec 	.word	0x200127ec
 8008ea8:	200127e8 	.word	0x200127e8
 8008eac:	200127ee 	.word	0x200127ee
 8008eb0:	200127ea 	.word	0x200127ea
 8008eb4:	200127f0 	.word	0x200127f0

08008eb8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f013 fce5 	bl	801c892 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8008ec8:	bf00      	nop
 8008eca:	3708      	adds	r7, #8
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	4a05      	ldr	r2, [pc, #20]	; (8008ef0 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	601a      	str	r2, [r3, #0]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f7ff fe09 	bl	8008af8 <_ZN8touchgfx3HALD1Ev>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3708      	adds	r7, #8
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	08030f2c 	.word	0x08030f2c

08008ef4 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f7ff ffe7 	bl	8008ed0 <_ZN20TouchGFXGeneratedHALD1Ev>
 8008f02:	2178      	movs	r1, #120	; 0x78
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f024 f919 	bl	802d13c <_ZdlPvj>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3708      	adds	r7, #8
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7ff ffca 	bl	8008eb8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8008f24:	bf00      	nop
 8008f26:	3708      	adds	r7, #8
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <_ZN11TouchGFXHAL10initializeEv>:
}

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	4618      	mov	r0, r3
 8008f38:	f001 fd4a 	bl	800a9d0 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8008f3c:	bf00      	nop
 8008f3e:	3708      	adds	r7, #8
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b082      	sub	sp, #8
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
    enableLCDControllerInterrupt();
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	3368      	adds	r3, #104	; 0x68
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	4798      	blx	r3
    enableInterrupts();
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	3360      	adds	r3, #96	; 0x60
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	4798      	blx	r3

    OSWrappers::waitForVSync();
 8008f64:	f000 f936 	bl	80091d4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	3358      	adds	r3, #88	; 0x58
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4610      	mov	r0, r2
 8008f74:	4798      	blx	r3

    LCD_IO_WriteReg(0x29);
 8008f76:	2029      	movs	r0, #41	; 0x29
 8008f78:	f002 facc 	bl	800b514 <LCD_IO_WriteReg>

    for (;;)
    {
        OSWrappers::waitForVSync();
 8008f7c:	f000 f92a 	bl	80091d4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	3358      	adds	r3, #88	; 0x58
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4610      	mov	r0, r2
 8008f8c:	4798      	blx	r3
        OSWrappers::waitForVSync();
 8008f8e:	e7f5      	b.n	8008f7c <_ZN11TouchGFXHAL9taskEntryEv+0x38>

08008f90 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f001 fd9c 	bl	800aad8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8008fa0:	4603      	mov	r3, r0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3708      	adds	r7, #8
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b082      	sub	sp, #8
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
 8008fb2:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6839      	ldr	r1, [r7, #0]
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f001 fd9b 	bl	800aaf4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8008fbe:	bf00      	nop
 8008fc0:	3708      	adds	r7, #8
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b082      	sub	sp, #8
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
 8008fce:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6839      	ldr	r1, [r7, #0]
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f001 fda3 	bl	800ab20 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8008fda:	bf00      	nop
 8008fdc:	3708      	adds	r7, #8
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}

08008fe2 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8008fe2:	b580      	push	{r7, lr}
 8008fe4:	b082      	sub	sp, #8
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	4618      	mov	r0, r3
 8008fee:	f001 fd19 	bl	800aa24 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8008ff2:	bf00      	nop
 8008ff4:	3708      	adds	r7, #8
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8008ffa:	b580      	push	{r7, lr}
 8008ffc:	b082      	sub	sp, #8
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	4618      	mov	r0, r3
 8009006:	f001 fd1d 	bl	800aa44 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 800900a:	bf00      	nop
 800900c:	3708      	adds	r7, #8
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8009012:	b580      	push	{r7, lr}
 8009014:	b082      	sub	sp, #8
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	4618      	mov	r0, r3
 800901e:	f001 fd1f 	bl	800aa60 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8009022:	bf00      	nop
 8009024:	3708      	adds	r7, #8
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 800902a:	b580      	push	{r7, lr}
 800902c:	b082      	sub	sp, #8
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4618      	mov	r0, r3
 8009036:	f001 fd21 	bl	800aa7c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 800903a:	bf00      	nop
 800903c:	3708      	adds	r7, #8
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
	...

08009044 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8009044:	b580      	push	{r7, lr}
 8009046:	b082      	sub	sp, #8
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	4a05      	ldr	r2, [pc, #20]	; (8009064 <_ZN11TouchGFXHALD1Ev+0x20>)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	601a      	str	r2, [r3, #0]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	4618      	mov	r0, r3
 8009056:	f7ff ff3b 	bl	8008ed0 <_ZN20TouchGFXGeneratedHALD1Ev>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	4618      	mov	r0, r3
 800905e:	3708      	adds	r7, #8
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}
 8009064:	08030a18 	.word	0x08030a18

08009068 <_ZN11TouchGFXHALD0Ev>:
 8009068:	b580      	push	{r7, lr}
 800906a:	b082      	sub	sp, #8
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f7ff ffe7 	bl	8009044 <_ZN11TouchGFXHALD1Ev>
 8009076:	2178      	movs	r1, #120	; 0x78
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f024 f85f 	bl	802d13c <_ZdlPvj>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	4618      	mov	r0, r3
 8009082:	3708      	adds	r7, #8
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8009088:	b580      	push	{r7, lr}
 800908a:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800908c:	2200      	movs	r2, #0
 800908e:	2101      	movs	r1, #1
 8009090:	2001      	movs	r0, #1
 8009092:	f00e fb1b 	bl	80176cc <osSemaphoreNew>
 8009096:	4602      	mov	r2, r0
 8009098:	4b09      	ldr	r3, [pc, #36]	; (80090c0 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 800909a:	601a      	str	r2, [r3, #0]
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever); // take the lock
 800909c:	4b08      	ldr	r3, [pc, #32]	; (80090c0 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f04f 31ff 	mov.w	r1, #4294967295
 80090a4:	4618      	mov	r0, r3
 80090a6:	f00e fbaf 	bl	8017808 <osSemaphoreAcquire>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 80090aa:	2200      	movs	r2, #0
 80090ac:	2104      	movs	r1, #4
 80090ae:	2001      	movs	r0, #1
 80090b0:	f00e fc68 	bl	8017984 <osMessageQueueNew>
 80090b4:	4602      	mov	r2, r0
 80090b6:	4b03      	ldr	r3, [pc, #12]	; (80090c4 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 80090b8:	601a      	str	r2, [r3, #0]
}
 80090ba:	bf00      	nop
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	200001a4 	.word	0x200001a4
 80090c4:	200001a8 	.word	0x200001a8

080090c8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	af00      	add	r7, sp, #0
    assert(frame_buffer_sem);
 80090cc:	4b09      	ldr	r3, [pc, #36]	; (80090f4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x2c>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d105      	bne.n	80090e0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>
 80090d4:	4b08      	ldr	r3, [pc, #32]	; (80090f8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x30>)
 80090d6:	4a09      	ldr	r2, [pc, #36]	; (80090fc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x34>)
 80090d8:	2131      	movs	r1, #49	; 0x31
 80090da:	4809      	ldr	r0, [pc, #36]	; (8009100 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x38>)
 80090dc:	f025 f8fc 	bl	802e2d8 <__assert_func>
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 80090e0:	4b04      	ldr	r3, [pc, #16]	; (80090f4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x2c>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f04f 31ff 	mov.w	r1, #4294967295
 80090e8:	4618      	mov	r0, r3
 80090ea:	f00e fb8d 	bl	8017808 <osSemaphoreAcquire>
}
 80090ee:	bf00      	nop
 80090f0:	bd80      	pop	{r7, pc}
 80090f2:	bf00      	nop
 80090f4:	200001a4 	.word	0x200001a4
 80090f8:	0802f9f8 	.word	0x0802f9f8
 80090fc:	08030b6c 	.word	0x08030b6c
 8009100:	0802fa0c 	.word	0x0802fa0c

08009104 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8009104:	b580      	push	{r7, lr}
 8009106:	af00      	add	r7, sp, #0
    assert(frame_buffer_sem);
 8009108:	4b08      	ldr	r3, [pc, #32]	; (800912c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x28>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d105      	bne.n	800911c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>
 8009110:	4b07      	ldr	r3, [pc, #28]	; (8009130 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x2c>)
 8009112:	4a08      	ldr	r2, [pc, #32]	; (8009134 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x30>)
 8009114:	213a      	movs	r1, #58	; 0x3a
 8009116:	4808      	ldr	r0, [pc, #32]	; (8009138 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x34>)
 8009118:	f025 f8de 	bl	802e2d8 <__assert_func>
    osSemaphoreRelease(frame_buffer_sem);
 800911c:	4b03      	ldr	r3, [pc, #12]	; (800912c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x28>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4618      	mov	r0, r3
 8009122:	f00e fbd7 	bl	80178d4 <osSemaphoreRelease>
}
 8009126:	bf00      	nop
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	200001a4 	.word	0x200001a4
 8009130:	0802f9f8 	.word	0x0802f9f8
 8009134:	08030bac 	.word	0x08030bac
 8009138:	0802fa0c 	.word	0x0802fa0c

0800913c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 800913c:	b580      	push	{r7, lr}
 800913e:	af00      	add	r7, sp, #0
    assert(frame_buffer_sem);
 8009140:	4b08      	ldr	r3, [pc, #32]	; (8009164 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x28>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d105      	bne.n	8009154 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x18>
 8009148:	4b07      	ldr	r3, [pc, #28]	; (8009168 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x2c>)
 800914a:	4a08      	ldr	r2, [pc, #32]	; (800916c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x30>)
 800914c:	2147      	movs	r1, #71	; 0x47
 800914e:	4808      	ldr	r0, [pc, #32]	; (8009170 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x34>)
 8009150:	f025 f8c2 	bl	802e2d8 <__assert_func>
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8009154:	4b03      	ldr	r3, [pc, #12]	; (8009164 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x28>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	2100      	movs	r1, #0
 800915a:	4618      	mov	r0, r3
 800915c:	f00e fb54 	bl	8017808 <osSemaphoreAcquire>
}
 8009160:	bf00      	nop
 8009162:	bd80      	pop	{r7, pc}
 8009164:	200001a4 	.word	0x200001a4
 8009168:	0802f9f8 	.word	0x0802f9f8
 800916c:	08030bec 	.word	0x08030bec
 8009170:	0802fa0c 	.word	0x0802fa0c

08009174 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8009174:	b580      	push	{r7, lr}
 8009176:	af00      	add	r7, sp, #0
    assert(frame_buffer_sem);
 8009178:	4b08      	ldr	r3, [pc, #32]	; (800919c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x28>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d105      	bne.n	800918c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x18>
 8009180:	4b07      	ldr	r3, [pc, #28]	; (80091a0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2c>)
 8009182:	4a08      	ldr	r2, [pc, #32]	; (80091a4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x30>)
 8009184:	2154      	movs	r1, #84	; 0x54
 8009186:	4808      	ldr	r0, [pc, #32]	; (80091a8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x34>)
 8009188:	f025 f8a6 	bl	802e2d8 <__assert_func>
    osSemaphoreRelease(frame_buffer_sem);
 800918c:	4b03      	ldr	r3, [pc, #12]	; (800919c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x28>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4618      	mov	r0, r3
 8009192:	f00e fb9f 	bl	80178d4 <osSemaphoreRelease>
}
 8009196:	bf00      	nop
 8009198:	bd80      	pop	{r7, pc}
 800919a:	bf00      	nop
 800919c:	200001a4 	.word	0x200001a4
 80091a0:	0802f9f8 	.word	0x0802f9f8
 80091a4:	08030c2c 	.word	0x08030c2c
 80091a8:	0802fa0c 	.word	0x0802fa0c

080091ac <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	af00      	add	r7, sp, #0
    if (vsync_queue)
 80091b0:	4b06      	ldr	r3, [pc, #24]	; (80091cc <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x20>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d006      	beq.n	80091c6 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1a>
    {
        osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 80091b8:	4b04      	ldr	r3, [pc, #16]	; (80091cc <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x20>)
 80091ba:	6818      	ldr	r0, [r3, #0]
 80091bc:	2300      	movs	r3, #0
 80091be:	2200      	movs	r2, #0
 80091c0:	4903      	ldr	r1, [pc, #12]	; (80091d0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x24>)
 80091c2:	f00e fc65 	bl	8017a90 <osMessageQueuePut>
    }
}
 80091c6:	bf00      	nop
 80091c8:	bd80      	pop	{r7, pc}
 80091ca:	bf00      	nop
 80091cc:	200001a8 	.word	0x200001a8
 80091d0:	20000004 	.word	0x20000004

080091d4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
    if (vsync_queue)
 80091da:	4b0b      	ldr	r3, [pc, #44]	; (8009208 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x34>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d00e      	beq.n	8009200 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>
    {
        uint32_t dummyGet;
        // First make sure the queue is empty, by trying to remove an element with 0 timeout.
        osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 80091e2:	4b09      	ldr	r3, [pc, #36]	; (8009208 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x34>)
 80091e4:	6818      	ldr	r0, [r3, #0]
 80091e6:	1d39      	adds	r1, r7, #4
 80091e8:	2300      	movs	r3, #0
 80091ea:	2200      	movs	r2, #0
 80091ec:	f00e fcc4 	bl	8017b78 <osMessageQueueGet>

        // Then, wait for next VSYNC to occur.
        osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 80091f0:	4b05      	ldr	r3, [pc, #20]	; (8009208 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x34>)
 80091f2:	6818      	ldr	r0, [r3, #0]
 80091f4:	1d39      	adds	r1, r7, #4
 80091f6:	f04f 33ff 	mov.w	r3, #4294967295
 80091fa:	2200      	movs	r2, #0
 80091fc:	f00e fcbc 	bl	8017b78 <osMessageQueueGet>
    }
}
 8009200:	bf00      	nop
 8009202:	3708      	adds	r7, #8
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}
 8009208:	200001a8 	.word	0x200001a8

0800920c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	4603      	mov	r3, r0
 8009214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800921a:	2b00      	cmp	r3, #0
 800921c:	db0d      	blt.n	800923a <__NVIC_EnableIRQ+0x2e>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800921e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009222:	b2db      	uxtb	r3, r3
 8009224:	f003 021f 	and.w	r2, r3, #31
 8009228:	4907      	ldr	r1, [pc, #28]	; (8009248 <__NVIC_EnableIRQ+0x3c>)
 800922a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800922e:	095b      	lsrs	r3, r3, #5
 8009230:	2001      	movs	r0, #1
 8009232:	fa00 f202 	lsl.w	r2, r0, r2
 8009236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800923a:	bf00      	nop
 800923c:	370c      	adds	r7, #12
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop
 8009248:	e000e100 	.word	0xe000e100

0800924c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800924c:	b480      	push	{r7}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
 8009252:	4603      	mov	r3, r0
 8009254:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800925a:	2b00      	cmp	r3, #0
 800925c:	db12      	blt.n	8009284 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800925e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009262:	b2db      	uxtb	r3, r3
 8009264:	f003 021f 	and.w	r2, r3, #31
 8009268:	4909      	ldr	r1, [pc, #36]	; (8009290 <__NVIC_DisableIRQ+0x44>)
 800926a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800926e:	095b      	lsrs	r3, r3, #5
 8009270:	2001      	movs	r0, #1
 8009272:	fa00 f202 	lsl.w	r2, r0, r2
 8009276:	3320      	adds	r3, #32
 8009278:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800927c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009280:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8009284:	bf00      	nop
 8009286:	370c      	adds	r7, #12
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr
 8009290:	e000e100 	.word	0xe000e100

08009294 <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 8009294:	b480      	push	{r7}
 8009296:	b083      	sub	sp, #12
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
        : color(0)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	601a      	str	r2, [r3, #0]
    {
    }
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	4618      	mov	r0, r3
 80092a6:	370c      	adds	r7, #12
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr

080092b0 <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 80092b0:	b480      	push	{r7}
 80092b2:	b083      	sub	sp, #12
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
    {
        return color;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
    }
 80092bc:	4618      	mov	r0, r3
 80092be:	370c      	adds	r7, #12
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr

080092c8 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 80092c8:	b480      	push	{r7}
 80092ca:	b083      	sub	sp, #12
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
    {
 80092d0:	4a04      	ldr	r2, [pc, #16]	; (80092e4 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	601a      	str	r2, [r3, #0]
    }
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	4618      	mov	r0, r3
 80092da:	370c      	adds	r7, #12
 80092dc:	46bd      	mov	sp, r7
 80092de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e2:	4770      	bx	lr
 80092e4:	08030cc8 	.word	0x08030cc8

080092e8 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
    }
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f7ff ffe9 	bl	80092c8 <_ZN8touchgfx9DMA_QueueD1Ev>
 80092f6:	2104      	movs	r1, #4
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f023 ff1f 	bl	802d13c <_ZdlPvj>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	4618      	mov	r0, r3
 8009302:	3708      	adds	r7, #8
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8009308:	b580      	push	{r7, lr}
 800930a:	b082      	sub	sp, #8
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	3344      	adds	r3, #68	; 0x44
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	4798      	blx	r3
    }
 800931c:	bf00      	nop
 800931e:	3708      	adds	r7, #8
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA_Interface implementation. As
     * default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 8009324:	b480      	push	{r7}
 8009326:	b083      	sub	sp, #12
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 800932c:	2300      	movs	r3, #0
    }
 800932e:	4618      	mov	r0, r3
 8009330:	370c      	adds	r7, #12
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr
	...

0800933c <_ZN8touchgfx13DMA_InterfaceD1Ev>:

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 800933c:	b480      	push	{r7}
 800933e:	b083      	sub	sp, #12
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
    {
 8009344:	4a04      	ldr	r2, [pc, #16]	; (8009358 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	601a      	str	r2, [r3, #0]
    }
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	4618      	mov	r0, r3
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr
 8009358:	08032ec0 	.word	0x08032ec0

0800935c <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 800935c:	b580      	push	{r7, lr}
 800935e:	b082      	sub	sp, #8
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
    }
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f7ff ffe9 	bl	800933c <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800936a:	210c      	movs	r1, #12
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f023 fee5 	bl	802d13c <_ZdlPvj>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	4618      	mov	r0, r3
 8009376:	3708      	adds	r7, #8
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 800937c:	b480      	push	{r7}
 800937e:	b083      	sub	sp, #12
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8009386:	4a09      	ldr	r2, [pc, #36]	; (80093ac <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	601a      	str	r2, [r3, #0]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	683a      	ldr	r2, [r7, #0]
 8009390:	605a      	str	r2, [r3, #4]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	721a      	strb	r2, [r3, #8]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2200      	movs	r2, #0
 800939c:	725a      	strb	r2, [r3, #9]
    {
    }
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	4618      	mov	r0, r3
 80093a2:	370c      	adds	r7, #12
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr
 80093ac:	08032ec0 	.word	0x08032ec0

080093b0 <_ZN8touchgfx3HAL11getInstanceEv>:
    static HAL* getInstance()
 80093b0:	b480      	push	{r7}
 80093b2:	af00      	add	r7, sp, #0
        return instance;
 80093b4:	4b03      	ldr	r3, [pc, #12]	; (80093c4 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 80093b6:	681b      	ldr	r3, [r3, #0]
    }
 80093b8:	4618      	mov	r0, r3
 80093ba:	46bd      	mov	sp, r7
 80093bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c0:	4770      	bx	lr
 80093c2:	bf00      	nop
 80093c4:	200127f4 	.word	0x200127f4

080093c8 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b082      	sub	sp, #8
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	685a      	ldr	r2, [r3, #4]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	3314      	adds	r3, #20
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4610      	mov	r0, r2
 80093e0:	4798      	blx	r3
    }
 80093e2:	bf00      	nop
 80093e4:	3708      	adds	r7, #8
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}

080093ea <_ZN10STM32F4DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b082      	sub	sp, #8
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	3328      	adds	r3, #40	; 0x28
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4610      	mov	r0, r2
 80093fe:	4798      	blx	r3
    }
 8009400:	bf00      	nop
 8009402:	3708      	adds	r7, #8
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef* hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 8009408:	b480      	push	{r7}
 800940a:	b085      	sub	sp, #20
 800940c:	af00      	add	r7, sp, #0
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	60b9      	str	r1, [r7, #8]
 8009412:	607a      	str	r2, [r7, #4]
 8009414:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8009420:	68ba      	ldr	r2, [r7, #8]
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	430a      	orrs	r2, r1
 8009428:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009430:	f023 0107 	bic.w	r1, r3, #7
 8009434:	687a      	ldr	r2, [r7, #4]
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	430a      	orrs	r2, r1
 800943c:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009444:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8009448:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800944c:	6839      	ldr	r1, [r7, #0]
 800944e:	68fa      	ldr	r2, [r7, #12]
 8009450:	6812      	ldr	r2, [r2, #0]
 8009452:	430b      	orrs	r3, r1
 8009454:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 8009456:	2300      	movs	r3, #0
}
 8009458:	4618      	mov	r0, r3
 800945a:	3714      	adds	r7, #20
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <DMA2D_XferCpltCallback>:

extern "C" {

    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
        touchgfx::HAL::getInstance()->signalDMAInterrupt();
 800946c:	f7ff ffa0 	bl	80093b0 <_ZN8touchgfx3HAL11getInstanceEv>
 8009470:	4603      	mov	r3, r0
 8009472:	4618      	mov	r0, r3
 8009474:	f7ff ffa8 	bl	80093c8 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 8009478:	bf00      	nop
 800947a:	3708      	adds	r7, #8
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <DMA2D_XferErrorCallback>:

    static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
    {
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
        assert(0);
 8009488:	4b02      	ldr	r3, [pc, #8]	; (8009494 <DMA2D_XferErrorCallback+0x14>)
 800948a:	4a03      	ldr	r2, [pc, #12]	; (8009498 <DMA2D_XferErrorCallback+0x18>)
 800948c:	2136      	movs	r1, #54	; 0x36
 800948e:	4803      	ldr	r0, [pc, #12]	; (800949c <DMA2D_XferErrorCallback+0x1c>)
 8009490:	f024 ff22 	bl	802e2d8 <__assert_func>
 8009494:	0802fa5c 	.word	0x0802fa5c
 8009498:	08030ce4 	.word	0x08030ce4
 800949c:	0802fa60 	.word	0x0802fa60

080094a0 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	3318      	adds	r3, #24
 80094ac:	4618      	mov	r0, r3
 80094ae:	f7ff fef1 	bl	8009294 <_ZN8touchgfx9colortypeC1Ev>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	4618      	mov	r0, r3
 80094b6:	3708      	adds	r7, #8
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <_ZN10STM32F4DMAC1Ev>:
    }

}

STM32F4DMA::STM32F4DMA()
 80094bc:	b5b0      	push	{r4, r5, r7, lr}
 80094be:	b082      	sub	sp, #8
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 80094c4:	687a      	ldr	r2, [r7, #4]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	330c      	adds	r3, #12
 80094ca:	4619      	mov	r1, r3
 80094cc:	4610      	mov	r0, r2
 80094ce:	f7ff ff55 	bl	800937c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 80094d2:	4a0e      	ldr	r2, [pc, #56]	; (800950c <_ZN10STM32F4DMAC1Ev+0x50>)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	601a      	str	r2, [r3, #0]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f103 000c 	add.w	r0, r3, #12
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	3320      	adds	r3, #32
 80094e2:	2260      	movs	r2, #96	; 0x60
 80094e4:	4619      	mov	r1, r3
 80094e6:	f014 f877 	bl	801d5d8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	3320      	adds	r3, #32
 80094ee:	245f      	movs	r4, #95	; 0x5f
 80094f0:	461d      	mov	r5, r3
 80094f2:	2c00      	cmp	r4, #0
 80094f4:	db05      	blt.n	8009502 <_ZN10STM32F4DMAC1Ev+0x46>
 80094f6:	4628      	mov	r0, r5
 80094f8:	f7ff ffd2 	bl	80094a0 <_ZN8touchgfx6BlitOpC1Ev>
 80094fc:	3520      	adds	r5, #32
 80094fe:	3c01      	subs	r4, #1
 8009500:	e7f7      	b.n	80094f2 <_ZN10STM32F4DMAC1Ev+0x36>
{}
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	4618      	mov	r0, r3
 8009506:	3708      	adds	r7, #8
 8009508:	46bd      	mov	sp, r7
 800950a:	bdb0      	pop	{r4, r5, r7, pc}
 800950c:	08030c78 	.word	0x08030c78

08009510 <_ZN10STM32F4DMAD1Ev>:

STM32F4DMA::~STM32F4DMA()
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	4a0b      	ldr	r2, [pc, #44]	; (8009548 <_ZN10STM32F4DMAD1Ev+0x38>)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 800951e:	480b      	ldr	r0, [pc, #44]	; (800954c <_ZN10STM32F4DMAD1Ev+0x3c>)
 8009520:	f009 f8be 	bl	80126a0 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 8009524:	205a      	movs	r0, #90	; 0x5a
 8009526:	f7ff fe91 	bl	800924c <__NVIC_DisableIRQ>
STM32F4DMA::~STM32F4DMA()
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	330c      	adds	r3, #12
 800952e:	4618      	mov	r0, r3
 8009530:	f000 faa4 	bl	8009a7c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	4618      	mov	r0, r3
 8009538:	f7ff ff00 	bl	800933c <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	4618      	mov	r0, r3
 8009540:	3708      	adds	r7, #8
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop
 8009548:	08030c78 	.word	0x08030c78
 800954c:	20012e70 	.word	0x20012e70

08009550 <_ZN10STM32F4DMAD0Ev>:
STM32F4DMA::~STM32F4DMA()
 8009550:	b580      	push	{r7, lr}
 8009552:	b082      	sub	sp, #8
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
}
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f7ff ffd9 	bl	8009510 <_ZN10STM32F4DMAD1Ev>
 800955e:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f023 fdea 	bl	802d13c <_ZdlPvj>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	4618      	mov	r0, r3
 800956c:	3708      	adds	r7, #8
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}
	...

08009574 <_ZN10STM32F4DMA10initializeEv>:

void STM32F4DMA::initialize()
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 800957c:	4b09      	ldr	r3, [pc, #36]	; (80095a4 <_ZN10STM32F4DMA10initializeEv+0x30>)
 800957e:	4a0a      	ldr	r2, [pc, #40]	; (80095a8 <_ZN10STM32F4DMA10initializeEv+0x34>)
 8009580:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 8009582:	4808      	ldr	r0, [pc, #32]	; (80095a4 <_ZN10STM32F4DMA10initializeEv+0x30>)
 8009584:	f009 f842 	bl	801260c <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8009588:	4b06      	ldr	r3, [pc, #24]	; (80095a4 <_ZN10STM32F4DMA10initializeEv+0x30>)
 800958a:	4a08      	ldr	r2, [pc, #32]	; (80095ac <_ZN10STM32F4DMA10initializeEv+0x38>)
 800958c:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 800958e:	4b05      	ldr	r3, [pc, #20]	; (80095a4 <_ZN10STM32F4DMA10initializeEv+0x30>)
 8009590:	4a07      	ldr	r2, [pc, #28]	; (80095b0 <_ZN10STM32F4DMA10initializeEv+0x3c>)
 8009592:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 8009594:	205a      	movs	r0, #90	; 0x5a
 8009596:	f7ff fe39 	bl	800920c <__NVIC_EnableIRQ>
}
 800959a:	bf00      	nop
 800959c:	3708      	adds	r7, #8
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	20012e70 	.word	0x20012e70
 80095a8:	4002b000 	.word	0x4002b000
 80095ac:	08009465 	.word	0x08009465
 80095b0:	08009481 	.word	0x08009481

080095b4 <_ZN10STM32F4DMA11getBlitCapsEv>:

BlitOperations STM32F4DMA::getBlitCaps()
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 80095bc:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	370c      	adds	r7, #12
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr

080095cc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F4DMA::setupDataCopy(const BlitOp& blitOp)
{
 80095cc:	b590      	push	{r4, r7, lr}
 80095ce:	b08d      	sub	sp, #52	; 0x34
 80095d0:	af02      	add	r7, sp, #8
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 80095d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80095da:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 80095dc:	2300      	movs	r3, #0
 80095de:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 80095e4:	2b20      	cmp	r3, #32
 80095e6:	d007      	beq.n	80095f8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	2b40      	cmp	r3, #64	; 0x40
 80095ee:	d003      	beq.n	80095f8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	2b04      	cmp	r3, #4
 80095f6:	d101      	bne.n	80095fc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 80095f8:	2301      	movs	r3, #1
 80095fa:	e000      	b.n	80095fe <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 80095fc:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 80095fe:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 8009604:	2b80      	cmp	r3, #128	; 0x80
 8009606:	d004      	beq.n	8009612 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009610:	d101      	bne.n	8009616 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 8009612:	2301      	movs	r3, #1
 8009614:	e000      	b.n	8009618 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 8009616:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8009618:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 800961a:	f7ff faa1 	bl	8008b60 <_ZN8touchgfx3HAL3lcdEv>
 800961e:	4602      	mov	r2, r0
 8009620:	6813      	ldr	r3, [r2, #0]
 8009622:	331c      	adds	r3, #28
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4610      	mov	r0, r2
 8009628:	4798      	blx	r3
 800962a:	4603      	mov	r3, r0
 800962c:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	2b40      	cmp	r3, #64	; 0x40
 8009634:	d01d      	beq.n	8009672 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8009636:	2b40      	cmp	r3, #64	; 0x40
 8009638:	d804      	bhi.n	8009644 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 800963a:	2b04      	cmp	r3, #4
 800963c:	d00e      	beq.n	800965c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 800963e:	2b20      	cmp	r3, #32
 8009640:	d017      	beq.n	8009672 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8009642:	e019      	b.n	8009678 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 8009644:	2b80      	cmp	r3, #128	; 0x80
 8009646:	d003      	beq.n	8009650 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 8009648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800964c:	d003      	beq.n	8009656 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 800964e:	e013      	b.n	8009678 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 8009650:	230a      	movs	r3, #10
 8009652:	623b      	str	r3, [r7, #32]
        break;
 8009654:	e01a      	b.n	800968c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 8009656:	2309      	movs	r3, #9
 8009658:	623b      	str	r3, [r7, #32]
        break;
 800965a:	e017      	b.n	800968c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 800965c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009660:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8009662:	7f7b      	ldrb	r3, [r7, #29]
 8009664:	2b10      	cmp	r3, #16
 8009666:	d101      	bne.n	800966c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 8009668:	2302      	movs	r3, #2
 800966a:	e000      	b.n	800966e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 800966c:	2301      	movs	r3, #1
 800966e:	623b      	str	r3, [r7, #32]
        break;
 8009670:	e00c      	b.n	800968c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 8009672:	2300      	movs	r3, #0
 8009674:	623b      	str	r3, [r7, #32]
        break;
 8009676:	e009      	b.n	800968c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 8009678:	2300      	movs	r3, #0
 800967a:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 800967c:	7f7b      	ldrb	r3, [r7, #29]
 800967e:	2b10      	cmp	r3, #16
 8009680:	d101      	bne.n	8009686 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 8009682:	2302      	movs	r3, #2
 8009684:	e000      	b.n	8009688 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 8009686:	2301      	movs	r3, #1
 8009688:	623b      	str	r3, [r7, #32]
        break;
 800968a:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 800968c:	4a75      	ldr	r2, [pc, #468]	; (8009864 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800968e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009690:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8009692:	7f7b      	ldrb	r3, [r7, #29]
 8009694:	2b10      	cmp	r3, #16
 8009696:	d101      	bne.n	800969c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8009698:	2302      	movs	r3, #2
 800969a:	e000      	b.n	800969e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 800969c:	2301      	movs	r3, #1
 800969e:	4a71      	ldr	r2, [pc, #452]	; (8009864 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80096a0:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	8adb      	ldrh	r3, [r3, #22]
 80096a6:	461a      	mov	r2, r3
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	8a1b      	ldrh	r3, [r3, #16]
 80096ac:	1ad3      	subs	r3, r2, r3
 80096ae:	461a      	mov	r2, r3
 80096b0:	4b6c      	ldr	r3, [pc, #432]	; (8009864 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80096b2:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80096b4:	7f7b      	ldrb	r3, [r7, #29]
 80096b6:	2b10      	cmp	r3, #16
 80096b8:	d101      	bne.n	80096be <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 80096ba:	2202      	movs	r2, #2
 80096bc:	e000      	b.n	80096c0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 80096be:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	8adb      	ldrh	r3, [r3, #22]
 80096c4:	4619      	mov	r1, r3
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	8a1b      	ldrh	r3, [r3, #16]
 80096ca:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80096cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80096ce:	4865      	ldr	r0, [pc, #404]	; (8009864 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80096d0:	f7ff fe9a 	bl	8009408 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 80096d4:	4a63      	ldr	r2, [pc, #396]	; (8009864 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80096d6:	6a3b      	ldr	r3, [r7, #32]
 80096d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	8a9b      	ldrh	r3, [r3, #20]
 80096de:	461a      	mov	r2, r3
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	8a1b      	ldrh	r3, [r3, #16]
 80096e4:	1ad3      	subs	r3, r2, r3
 80096e6:	461a      	mov	r2, r3
 80096e8:	4b5e      	ldr	r3, [pc, #376]	; (8009864 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80096ea:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 80096ec:	7ffb      	ldrb	r3, [r7, #31]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d103      	bne.n	80096fa <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 80096f2:	7fbb      	ldrb	r3, [r7, #30]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	f000 8081 	beq.w	80097fc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
    {
        if (blitOp.alpha < 255)
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	7f1b      	ldrb	r3, [r3, #28]
 80096fe:	2bff      	cmp	r3, #255	; 0xff
 8009700:	d008      	beq.n	8009714 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 8009702:	4b58      	ldr	r3, [pc, #352]	; (8009864 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8009704:	2202      	movs	r2, #2
 8009706:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	7f1b      	ldrb	r3, [r3, #28]
 800970c:	461a      	mov	r2, r3
 800970e:	4b55      	ldr	r3, [pc, #340]	; (8009864 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8009710:	635a      	str	r2, [r3, #52]	; 0x34
 8009712:	e002      	b.n	800971a <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8009714:	4b53      	ldr	r3, [pc, #332]	; (8009864 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8009716:	2200      	movs	r2, #0
 8009718:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 800971a:	7fbb      	ldrb	r3, [r7, #30]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d058      	beq.n	80097d2 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x206>
        {
            if (bitDepth == 16)
 8009720:	7f7b      	ldrb	r3, [r7, #29]
 8009722:	2b10      	cmp	r3, #16
 8009724:	d14a      	bne.n	80097bc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	3318      	adds	r3, #24
 800972a:	4618      	mov	r0, r3
 800972c:	f7ff fdc0 	bl	80092b0 <_ZNK8touchgfx9colortypecvmEv>
 8009730:	4603      	mov	r3, r0
 8009732:	0adb      	lsrs	r3, r3, #11
 8009734:	f003 021f 	and.w	r2, r3, #31
 8009738:	4613      	mov	r3, r2
 800973a:	021b      	lsls	r3, r3, #8
 800973c:	1a9a      	subs	r2, r3, r2
 800973e:	4b4a      	ldr	r3, [pc, #296]	; (8009868 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8009740:	fba3 1302 	umull	r1, r3, r3, r2
 8009744:	1ad2      	subs	r2, r2, r3
 8009746:	0852      	lsrs	r2, r2, #1
 8009748:	4413      	add	r3, r2
 800974a:	091b      	lsrs	r3, r3, #4
 800974c:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	3318      	adds	r3, #24
 8009752:	4618      	mov	r0, r3
 8009754:	f7ff fdac 	bl	80092b0 <_ZNK8touchgfx9colortypecvmEv>
 8009758:	4603      	mov	r3, r0
 800975a:	095b      	lsrs	r3, r3, #5
 800975c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009760:	4613      	mov	r3, r2
 8009762:	021b      	lsls	r3, r3, #8
 8009764:	1a9a      	subs	r2, r3, r2
 8009766:	4b41      	ldr	r3, [pc, #260]	; (800986c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8009768:	fba3 1302 	umull	r1, r3, r3, r2
 800976c:	1ad2      	subs	r2, r2, r3
 800976e:	0852      	lsrs	r2, r2, #1
 8009770:	4413      	add	r3, r2
 8009772:	095b      	lsrs	r3, r3, #5
 8009774:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	3318      	adds	r3, #24
 800977a:	4618      	mov	r0, r3
 800977c:	f7ff fd98 	bl	80092b0 <_ZNK8touchgfx9colortypecvmEv>
 8009780:	4603      	mov	r3, r0
 8009782:	f003 021f 	and.w	r2, r3, #31
 8009786:	4613      	mov	r3, r2
 8009788:	021b      	lsls	r3, r3, #8
 800978a:	1a9a      	subs	r2, r3, r2
 800978c:	4b36      	ldr	r3, [pc, #216]	; (8009868 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800978e:	fba3 1302 	umull	r1, r3, r3, r2
 8009792:	1ad2      	subs	r2, r2, r3
 8009794:	0852      	lsrs	r2, r2, #1
 8009796:	4413      	add	r3, r2
 8009798:	091b      	lsrs	r3, r3, #4
 800979a:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	7f1b      	ldrb	r3, [r3, #28]
 80097a0:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	061a      	lsls	r2, r3, #24
 80097a6:	69bb      	ldr	r3, [r7, #24]
 80097a8:	041b      	lsls	r3, r3, #16
 80097aa:	431a      	orrs	r2, r3
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	021b      	lsls	r3, r3, #8
 80097b0:	431a      	orrs	r2, r3
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	4313      	orrs	r3, r2
 80097b6:	4a2b      	ldr	r2, [pc, #172]	; (8009864 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80097b8:	6353      	str	r3, [r2, #52]	; 0x34
 80097ba:	e00a      	b.n	80097d2 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x206>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	3318      	adds	r3, #24
 80097c0:	60bb      	str	r3, [r7, #8]
        return color;
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	683a      	ldr	r2, [r7, #0]
 80097c8:	7f12      	ldrb	r2, [r2, #28]
 80097ca:	0612      	lsls	r2, r2, #24
 80097cc:	4313      	orrs	r3, r2
 80097ce:	4a25      	ldr	r2, [pc, #148]	; (8009864 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80097d0:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	8adb      	ldrh	r3, [r3, #22]
 80097d6:	461a      	mov	r2, r3
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	8a1b      	ldrh	r3, [r3, #16]
 80097dc:	1ad3      	subs	r3, r2, r3
 80097de:	461a      	mov	r2, r3
 80097e0:	4b20      	ldr	r3, [pc, #128]	; (8009864 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80097e2:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80097e4:	7f7b      	ldrb	r3, [r7, #29]
 80097e6:	2b10      	cmp	r3, #16
 80097e8:	d101      	bne.n	80097ee <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x222>
 80097ea:	2302      	movs	r3, #2
 80097ec:	e000      	b.n	80097f0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 80097ee:	2301      	movs	r3, #1
 80097f0:	4a1c      	ldr	r2, [pc, #112]	; (8009864 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80097f2:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 80097f4:	2100      	movs	r1, #0
 80097f6:	481b      	ldr	r0, [pc, #108]	; (8009864 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80097f8:	f009 f9d2 	bl	8012ba0 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 80097fc:	2101      	movs	r1, #1
 80097fe:	4819      	ldr	r0, [pc, #100]	; (8009864 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8009800:	f009 f9ce 	bl	8012ba0 <HAL_DMA2D_ConfigLayer>

    if (blendingImage || blendingText)
 8009804:	7ffb      	ldrb	r3, [r7, #31]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d102      	bne.n	8009810 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>
 800980a:	7fbb      	ldrb	r3, [r7, #30]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d015      	beq.n	800983c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8009814:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800981a:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8009820:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8009826:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800982c:	9301      	str	r3, [sp, #4]
 800982e:	9200      	str	r2, [sp, #0]
 8009830:	4623      	mov	r3, r4
 8009832:	4602      	mov	r2, r0
 8009834:	480b      	ldr	r0, [pc, #44]	; (8009864 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8009836:	f008 ffd6 	bl	80127e6 <HAL_DMA2D_BlendingStart_IT>
 800983a:	e00f      	b.n	800985c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 8009840:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 8009846:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 800984c:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 8009852:	9300      	str	r3, [sp, #0]
 8009854:	4603      	mov	r3, r0
 8009856:	4803      	ldr	r0, [pc, #12]	; (8009864 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8009858:	f008 ff92 	bl	8012780 <HAL_DMA2D_Start_IT>
    }
}
 800985c:	bf00      	nop
 800985e:	372c      	adds	r7, #44	; 0x2c
 8009860:	46bd      	mov	sp, r7
 8009862:	bd90      	pop	{r4, r7, pc}
 8009864:	20012e70 	.word	0x20012e70
 8009868:	08421085 	.word	0x08421085
 800986c:	04104105 	.word	0x04104105

08009870 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F4DMA::setupDataFill(const BlitOp& blitOp)
{
 8009870:	b590      	push	{r4, r7, lr}
 8009872:	b08f      	sub	sp, #60	; 0x3c
 8009874:	af02      	add	r7, sp, #8
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 800987a:	f7ff f971 	bl	8008b60 <_ZN8touchgfx3HAL3lcdEv>
 800987e:	4602      	mov	r2, r0
 8009880:	6813      	ldr	r3, [r2, #0]
 8009882:	331c      	adds	r3, #28
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4610      	mov	r0, r2
 8009888:	4798      	blx	r3
 800988a:	4603      	mov	r3, r0
 800988c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8009890:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009894:	2b10      	cmp	r3, #16
 8009896:	d101      	bne.n	800989c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2c>
 8009898:	2302      	movs	r3, #2
 800989a:	e000      	b.n	800989e <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2e>
 800989c:	2301      	movs	r3, #1
 800989e:	623b      	str	r3, [r7, #32]

    uint32_t color = 0;
 80098a0:	2300      	movs	r3, #0
 80098a2:	62bb      	str	r3, [r7, #40]	; 0x28
    if (bitDepth == 16)
 80098a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098a8:	2b10      	cmp	r3, #16
 80098aa:	d149      	bne.n	8009940 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	3318      	adds	r3, #24
 80098b0:	4618      	mov	r0, r3
 80098b2:	f7ff fcfd 	bl	80092b0 <_ZNK8touchgfx9colortypecvmEv>
 80098b6:	4603      	mov	r3, r0
 80098b8:	0adb      	lsrs	r3, r3, #11
 80098ba:	f003 021f 	and.w	r2, r3, #31
 80098be:	4613      	mov	r3, r2
 80098c0:	021b      	lsls	r3, r3, #8
 80098c2:	1a9a      	subs	r2, r3, r2
 80098c4:	4b6a      	ldr	r3, [pc, #424]	; (8009a70 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 80098c6:	fba3 1302 	umull	r1, r3, r3, r2
 80098ca:	1ad2      	subs	r2, r2, r3
 80098cc:	0852      	lsrs	r2, r2, #1
 80098ce:	4413      	add	r3, r2
 80098d0:	091b      	lsrs	r3, r3, #4
 80098d2:	61fb      	str	r3, [r7, #28]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	3318      	adds	r3, #24
 80098d8:	4618      	mov	r0, r3
 80098da:	f7ff fce9 	bl	80092b0 <_ZNK8touchgfx9colortypecvmEv>
 80098de:	4603      	mov	r3, r0
 80098e0:	095b      	lsrs	r3, r3, #5
 80098e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80098e6:	4613      	mov	r3, r2
 80098e8:	021b      	lsls	r3, r3, #8
 80098ea:	1a9a      	subs	r2, r3, r2
 80098ec:	4b61      	ldr	r3, [pc, #388]	; (8009a74 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x204>)
 80098ee:	fba3 1302 	umull	r1, r3, r3, r2
 80098f2:	1ad2      	subs	r2, r2, r3
 80098f4:	0852      	lsrs	r2, r2, #1
 80098f6:	4413      	add	r3, r2
 80098f8:	095b      	lsrs	r3, r3, #5
 80098fa:	61bb      	str	r3, [r7, #24]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	3318      	adds	r3, #24
 8009900:	4618      	mov	r0, r3
 8009902:	f7ff fcd5 	bl	80092b0 <_ZNK8touchgfx9colortypecvmEv>
 8009906:	4603      	mov	r3, r0
 8009908:	f003 021f 	and.w	r2, r3, #31
 800990c:	4613      	mov	r3, r2
 800990e:	021b      	lsls	r3, r3, #8
 8009910:	1a9a      	subs	r2, r3, r2
 8009912:	4b57      	ldr	r3, [pc, #348]	; (8009a70 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8009914:	fba3 1302 	umull	r1, r3, r3, r2
 8009918:	1ad2      	subs	r2, r2, r3
 800991a:	0852      	lsrs	r2, r2, #1
 800991c:	4413      	add	r3, r2
 800991e:	091b      	lsrs	r3, r3, #4
 8009920:	617b      	str	r3, [r7, #20]
        uint32_t alpha = blitOp.alpha;
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	7f1b      	ldrb	r3, [r3, #28]
 8009926:	613b      	str	r3, [r7, #16]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	061a      	lsls	r2, r3, #24
 800992c:	69fb      	ldr	r3, [r7, #28]
 800992e:	041b      	lsls	r3, r3, #16
 8009930:	431a      	orrs	r2, r3
 8009932:	69bb      	ldr	r3, [r7, #24]
 8009934:	021b      	lsls	r3, r3, #8
 8009936:	4313      	orrs	r3, r2
 8009938:	697a      	ldr	r2, [r7, #20]
 800993a:	4313      	orrs	r3, r2
 800993c:	62bb      	str	r3, [r7, #40]	; 0x28
 800993e:	e00a      	b.n	8009956 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe6>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	7f1b      	ldrb	r3, [r3, #28]
 8009944:	061b      	lsls	r3, r3, #24
 8009946:	461a      	mov	r2, r3
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	3318      	adds	r3, #24
 800994c:	60fb      	str	r3, [r7, #12]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4313      	orrs	r3, r2
 8009954:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    switch (blitOp.operation)
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	2b08      	cmp	r3, #8
 800995c:	d103      	bne.n	8009966 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf6>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 800995e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009962:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009964:	e003      	b.n	800996e <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfe>
    default:
        dma2dTransferMode = DMA2D_R2M;
 8009966:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800996a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800996c:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 800996e:	4a42      	ldr	r2, [pc, #264]	; (8009a78 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8009970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009972:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8009974:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009978:	2b10      	cmp	r3, #16
 800997a:	d101      	bne.n	8009980 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>
 800997c:	2302      	movs	r3, #2
 800997e:	e000      	b.n	8009982 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x112>
 8009980:	2301      	movs	r3, #1
 8009982:	4a3d      	ldr	r2, [pc, #244]	; (8009a78 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8009984:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	8adb      	ldrh	r3, [r3, #22]
 800998a:	461a      	mov	r2, r3
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	8a1b      	ldrh	r3, [r3, #16]
 8009990:	1ad3      	subs	r3, r2, r3
 8009992:	461a      	mov	r2, r3
 8009994:	4b38      	ldr	r3, [pc, #224]	; (8009a78 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8009996:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8009998:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800999c:	2b10      	cmp	r3, #16
 800999e:	d101      	bne.n	80099a4 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x134>
 80099a0:	2202      	movs	r2, #2
 80099a2:	e000      	b.n	80099a6 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x136>
 80099a4:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	8adb      	ldrh	r3, [r3, #22]
 80099aa:	4619      	mov	r1, r3
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	8a1b      	ldrh	r3, [r3, #16]
 80099b0:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80099b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80099b4:	4830      	ldr	r0, [pc, #192]	; (8009a78 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 80099b6:	f7ff fd27 	bl	8009408 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 80099ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099c0:	d11f      	bne.n	8009a02 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x192>
    {
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 80099c2:	4b2d      	ldr	r3, [pc, #180]	; (8009a78 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 80099c4:	2201      	movs	r2, #1
 80099c6:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 80099c8:	4a2b      	ldr	r2, [pc, #172]	; (8009a78 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 80099ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099cc:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 80099ce:	4b2a      	ldr	r3, [pc, #168]	; (8009a78 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 80099d0:	2209      	movs	r2, #9
 80099d2:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	8adb      	ldrh	r3, [r3, #22]
 80099d8:	461a      	mov	r2, r3
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	8a1b      	ldrh	r3, [r3, #16]
 80099de:	1ad3      	subs	r3, r2, r3
 80099e0:	461a      	mov	r2, r3
 80099e2:	4b25      	ldr	r3, [pc, #148]	; (8009a78 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 80099e4:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80099e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099ea:	2b10      	cmp	r3, #16
 80099ec:	d101      	bne.n	80099f2 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x182>
 80099ee:	2302      	movs	r3, #2
 80099f0:	e000      	b.n	80099f4 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x184>
 80099f2:	2301      	movs	r3, #1
 80099f4:	4a20      	ldr	r2, [pc, #128]	; (8009a78 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 80099f6:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 80099f8:	2100      	movs	r1, #0
 80099fa:	481f      	ldr	r0, [pc, #124]	; (8009a78 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 80099fc:	f009 f8d0 	bl	8012ba0 <HAL_DMA2D_ConfigLayer>
 8009a00:	e005      	b.n	8009a0e <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x19e>
    }
    else
    {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8009a02:	4a1d      	ldr	r2, [pc, #116]	; (8009a78 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8009a04:	6a3b      	ldr	r3, [r7, #32]
 8009a06:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 8009a08:	4b1b      	ldr	r3, [pc, #108]	; (8009a78 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8009a0e:	2101      	movs	r1, #1
 8009a10:	4819      	ldr	r0, [pc, #100]	; (8009a78 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8009a12:	f009 f8c5 	bl	8012ba0 <HAL_DMA2D_ConfigLayer>

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 8009a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a1c:	d115      	bne.n	8009a4a <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1da>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8009a22:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8009a28:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8009a2e:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8009a34:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8009a3a:	9301      	str	r3, [sp, #4]
 8009a3c:	9200      	str	r2, [sp, #0]
 8009a3e:	4623      	mov	r3, r4
 8009a40:	4602      	mov	r2, r0
 8009a42:	480d      	ldr	r0, [pc, #52]	; (8009a78 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8009a44:	f008 fecf 	bl	80127e6 <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 8009a48:	e00d      	b.n	8009a66 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f6>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	68db      	ldr	r3, [r3, #12]
 8009a4e:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8009a54:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8009a5a:	9300      	str	r3, [sp, #0]
 8009a5c:	460b      	mov	r3, r1
 8009a5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a60:	4805      	ldr	r0, [pc, #20]	; (8009a78 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8009a62:	f008 fe8d 	bl	8012780 <HAL_DMA2D_Start_IT>
}
 8009a66:	bf00      	nop
 8009a68:	3734      	adds	r7, #52	; 0x34
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd90      	pop	{r4, r7, pc}
 8009a6e:	bf00      	nop
 8009a70:	08421085 	.word	0x08421085
 8009a74:	04104105 	.word	0x04104105
 8009a78:	20012e70 	.word	0x20012e70

08009a7c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b082      	sub	sp, #8
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	4a05      	ldr	r2, [pc, #20]	; (8009a9c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	601a      	str	r2, [r3, #0]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f7ff fc1b 	bl	80092c8 <_ZN8touchgfx9DMA_QueueD1Ev>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	4618      	mov	r0, r3
 8009a96:	3708      	adds	r7, #8
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	08032f10 	.word	0x08032f10

08009aa0 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b082      	sub	sp, #8
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f7ff ffe7 	bl	8009a7c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8009aae:	2114      	movs	r1, #20
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f023 fb43 	bl	802d13c <_ZdlPvj>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3708      	adds	r7, #8
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 8009ac0:	b480      	push	{r7}
 8009ac2:	b083      	sub	sp, #12
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2200      	movs	r2, #0
 8009acc:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2200      	movs	r2, #0
 8009ade:	80da      	strh	r2, [r3, #6]
    }
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	370c      	adds	r7, #12
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr
	...

08009af0 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8009af0:	b480      	push	{r7}
 8009af2:	b083      	sub	sp, #12
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8009af8:	4a04      	ldr	r2, [pc, #16]	; (8009b0c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6013      	str	r3, [r2, #0]
    }
 8009afe:	bf00      	nop
 8009b00:	370c      	adds	r7, #12
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr
 8009b0a:	bf00      	nop
 8009b0c:	20012870 	.word	0x20012870

08009b10 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 8009b10:	b480      	push	{r7}
 8009b12:	b083      	sub	sp, #12
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
    {
 8009b18:	4a04      	ldr	r2, [pc, #16]	; (8009b2c <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	601a      	str	r2, [r3, #0]
    }
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	4618      	mov	r0, r3
 8009b22:	370c      	adds	r7, #12
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr
 8009b2c:	08030f18 	.word	0x08030f18

08009b30 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b082      	sub	sp, #8
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
    }
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f7ff ffe9 	bl	8009b10 <_ZN8touchgfx12FontProviderD1Ev>
 8009b3e:	2104      	movs	r1, #4
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f023 fafb 	bl	802d13c <_ZdlPvj>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3708      	adds	r7, #8
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8009b50:	b480      	push	{r7}
 8009b52:	b085      	sub	sp, #20
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	60f8      	str	r0, [r7, #12]
 8009b58:	60b9      	str	r1, [r7, #8]
 8009b5a:	607a      	str	r2, [r7, #4]
 8009b5c:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8009b5e:	4a0b      	ldr	r2, [pc, #44]	; (8009b8c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	601a      	str	r2, [r3, #0]
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	68ba      	ldr	r2, [r7, #8]
 8009b68:	605a      	str	r2, [r3, #4]
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	687a      	ldr	r2, [r7, #4]
 8009b6e:	609a      	str	r2, [r3, #8]
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	683a      	ldr	r2, [r7, #0]
 8009b74:	60da      	str	r2, [r3, #12]
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	69ba      	ldr	r2, [r7, #24]
 8009b7a:	611a      	str	r2, [r3, #16]
    {
    }
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3714      	adds	r7, #20
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr
 8009b8a:	bf00      	nop
 8009b8c:	08030f08 	.word	0x08030f08

08009b90 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8009b90:	b480      	push	{r7}
 8009b92:	b083      	sub	sp, #12
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
    {
 8009b98:	4a04      	ldr	r2, [pc, #16]	; (8009bac <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	601a      	str	r2, [r3, #0]
    }
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	370c      	adds	r7, #12
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr
 8009bac:	08030f08 	.word	0x08030f08

08009bb0 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b082      	sub	sp, #8
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
    }
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f7ff ffe9 	bl	8009b90 <_ZN8touchgfx7MVPHeapD1Ev>
 8009bbe:	2114      	movs	r1, #20
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f023 fabb 	bl	802d13c <_ZdlPvj>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3708      	adds	r7, #8
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8009bd0:	b480      	push	{r7}
 8009bd2:	b083      	sub	sp, #12
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	6039      	str	r1, [r7, #0]
    {
    }
 8009bda:	bf00      	nop
 8009bdc:	370c      	adds	r7, #12
 8009bde:	46bd      	mov	sp, r7
 8009be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be4:	4770      	bx	lr

08009be6 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8009be6:	b480      	push	{r7}
 8009be8:	b083      	sub	sp, #12
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	6078      	str	r0, [r7, #4]
 8009bee:	6039      	str	r1, [r7, #0]
    {
    }
 8009bf0:	bf00      	nop
 8009bf2:	370c      	adds	r7, #12
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8009bfc:	b480      	push	{r7}
 8009bfe:	b083      	sub	sp, #12
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]
    {
    }
 8009c06:	bf00      	nop
 8009c08:	370c      	adds	r7, #12
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c10:	4770      	bx	lr

08009c12 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8009c12:	b480      	push	{r7}
 8009c14:	b083      	sub	sp, #12
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	6078      	str	r0, [r7, #4]
 8009c1a:	460b      	mov	r3, r1
 8009c1c:	70fb      	strb	r3, [r7, #3]
    {
    }
 8009c1e:	bf00      	nop
 8009c20:	370c      	adds	r7, #12
 8009c22:	46bd      	mov	sp, r7
 8009c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c28:	4770      	bx	lr

08009c2a <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8009c2a:	b480      	push	{r7}
 8009c2c:	b083      	sub	sp, #12
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
    {
    }
 8009c32:	bf00      	nop
 8009c34:	370c      	adds	r7, #12
 8009c36:	46bd      	mov	sp, r7
 8009c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3c:	4770      	bx	lr

08009c3e <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 8009c3e:	b480      	push	{r7}
 8009c40:	b083      	sub	sp, #12
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
    {
    }
 8009c46:	bf00      	nop
 8009c48:	370c      	adds	r7, #12
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c50:	4770      	bx	lr
	...

08009c54 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8009c54:	b480      	push	{r7}
 8009c56:	b083      	sub	sp, #12
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
    {
 8009c5c:	4a04      	ldr	r2, [pc, #16]	; (8009c70 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	601a      	str	r2, [r3, #0]
    }
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	4618      	mov	r0, r3
 8009c66:	370c      	adds	r7, #12
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr
 8009c70:	08030ee0 	.word	0x08030ee0

08009c74 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b082      	sub	sp, #8
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
    }
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f7ff ffe9 	bl	8009c54 <_ZN8touchgfx15UIEventListenerD1Ev>
 8009c82:	2104      	movs	r1, #4
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f023 fa59 	bl	802d13c <_ZdlPvj>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3708      	adds	r7, #8
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <_ZN8touchgfx3LCDD1Ev>:
 */
class LCD
{
public:
    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8009c94:	b480      	push	{r7}
 8009c96:	b083      	sub	sp, #12
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
    {
 8009c9c:	4a04      	ldr	r2, [pc, #16]	; (8009cb0 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	601a      	str	r2, [r3, #0]
    }
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	370c      	adds	r7, #12
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr
 8009cb0:	080335cc 	.word	0x080335cc

08009cb4 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b082      	sub	sp, #8
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
    }
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f7ff ffe9 	bl	8009c94 <_ZN8touchgfx3LCDD1Ev>
 8009cc2:	2108      	movs	r1, #8
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f023 fa39 	bl	802d13c <_ZdlPvj>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3708      	adds	r7, #8
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8009cd4:	b480      	push	{r7}
 8009cd6:	b083      	sub	sp, #12
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	460b      	mov	r3, r1
 8009cde:	70fb      	strb	r3, [r7, #3]
    {
    }
 8009ce0:	bf00      	nop
 8009ce2:	370c      	adds	r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr

08009cec <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 8009cec:	b480      	push	{r7}
 8009cee:	b083      	sub	sp, #12
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	683a      	ldr	r2, [r7, #0]
 8009cfa:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8009cfe:	6810      	ldr	r0, [r2, #0]
 8009d00:	6851      	ldr	r1, [r2, #4]
 8009d02:	c303      	stmia	r3!, {r0, r1}
    };
 8009d04:	bf00      	nop
 8009d06:	370c      	adds	r7, #12
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr

08009d10 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 8009d10:	b480      	push	{r7}
 8009d12:	b083      	sub	sp, #12
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
    {
 8009d18:	4a04      	ldr	r2, [pc, #16]	; (8009d2c <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	601a      	str	r2, [r3, #0]
    }
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	4618      	mov	r0, r3
 8009d22:	370c      	adds	r7, #12
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr
 8009d2c:	08030ec8 	.word	0x08030ec8

08009d30 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b082      	sub	sp, #8
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
    }
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f7ff ffe9 	bl	8009d10 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8009d3e:	2104      	movs	r1, #4
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f023 f9fb 	bl	802d13c <_ZdlPvj>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3708      	adds	r7, #8
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8009d50:	b480      	push	{r7}
 8009d52:	b083      	sub	sp, #12
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	801a      	strh	r2, [r3, #0]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2200      	movs	r2, #0
 8009d62:	805a      	strh	r2, [r3, #2]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2200      	movs	r2, #0
 8009d68:	809a      	strh	r2, [r3, #4]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	80da      	strh	r2, [r3, #6]
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	811a      	strh	r2, [r3, #8]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	815a      	strh	r2, [r3, #10]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	819a      	strh	r2, [r3, #12]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2200      	movs	r2, #0
 8009d86:	739a      	strb	r2, [r3, #14]
        {
        }
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	370c      	adds	r7, #12
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr

08009d96 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8009d96:	b580      	push	{r7, lr}
 8009d98:	b082      	sub	sp, #8
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
        : listener(0), dragThresholdValue(0)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	4618      	mov	r0, r3
 8009da2:	f7ff ffd5 	bl	8009d50 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2200      	movs	r2, #0
 8009daa:	611a      	str	r2, [r3, #16]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2200      	movs	r2, #0
 8009db0:	829a      	strh	r2, [r3, #20]
    {
    }
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	4618      	mov	r0, r3
 8009db6:	3708      	adds	r7, #8
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}

08009dbc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b084      	sub	sp, #16
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	60b9      	str	r1, [r7, #8]
 8009dc6:	607a      	str	r2, [r7, #4]
 8009dc8:	603b      	str	r3, [r7, #0]
          useDMAAcceleration(true)
 8009dca:	4a48      	ldr	r2, [pc, #288]	; (8009eec <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	601a      	str	r2, [r3, #0]
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	68ba      	ldr	r2, [r7, #8]
 8009dd4:	605a      	str	r2, [r3, #4]
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	687a      	ldr	r2, [r7, #4]
 8009dda:	609a      	str	r2, [r3, #8]
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	683a      	ldr	r2, [r7, #0]
 8009de0:	60da      	str	r2, [r3, #12]
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2200      	movs	r2, #0
 8009de6:	611a      	str	r2, [r3, #16]
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2200      	movs	r2, #0
 8009dec:	615a      	str	r2, [r3, #20]
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2200      	movs	r2, #0
 8009df2:	619a      	str	r2, [r3, #24]
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	331c      	adds	r3, #28
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f7ff ffcc 	bl	8009d96 <_ZN8touchgfx8GesturesC1Ev>
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2200      	movs	r2, #0
 8009e02:	639a      	str	r2, [r3, #56]	; 0x38
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2200      	movs	r2, #0
 8009e08:	63da      	str	r2, [r3, #60]	; 0x3c
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	641a      	str	r2, [r3, #64]	; 0x40
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2200      	movs	r2, #0
 8009e14:	645a      	str	r2, [r3, #68]	; 0x44
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2201      	movs	r2, #1
 8009e22:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2200      	movs	r2, #0
 8009e32:	64da      	str	r2, [r3, #76]	; 0x4c
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	3350      	adds	r3, #80	; 0x50
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f7ff fe41 	bl	8009ac0 <_ZN8touchgfx4RectC1Ev>
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2201      	movs	r2, #1
 8009e42:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	2200      	movs	r2, #0
 8009e52:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2201      	movs	r2, #1
 8009e5a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2200      	movs	r2, #0
 8009e62:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2200      	movs	r2, #0
 8009e72:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2200      	movs	r2, #0
 8009e82:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	671a      	str	r2, [r3, #112]	; 0x70
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2200      	movs	r2, #0
 8009e98:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
        instance = this;
 8009ea4:	4a12      	ldr	r2, [pc, #72]	; (8009ef0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 8009eaa:	4a12      	ldr	r2, [pc, #72]	; (8009ef4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 8009eac:	8b3b      	ldrh	r3, [r7, #24]
 8009eae:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8009eb0:	4a11      	ldr	r2, [pc, #68]	; (8009ef8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x13c>)
 8009eb2:	8bbb      	ldrh	r3, [r7, #28]
 8009eb4:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8009eb6:	4b11      	ldr	r3, [pc, #68]	; (8009efc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x140>)
 8009eb8:	2200      	movs	r2, #0
 8009eba:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8009ebc:	4b0d      	ldr	r3, [pc, #52]	; (8009ef4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 8009ebe:	881a      	ldrh	r2, [r3, #0]
 8009ec0:	4b0f      	ldr	r3, [pc, #60]	; (8009f00 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x144>)
 8009ec2:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8009ec4:	4b0c      	ldr	r3, [pc, #48]	; (8009ef8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x13c>)
 8009ec6:	881a      	ldrh	r2, [r3, #0]
 8009ec8:	4b0e      	ldr	r3, [pc, #56]	; (8009f04 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x148>)
 8009eca:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8009ecc:	8b3a      	ldrh	r2, [r7, #24]
 8009ece:	8bbb      	ldrh	r3, [r7, #28]
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d301      	bcc.n	8009ed8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x11c>
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	e000      	b.n	8009eda <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x11e>
 8009ed8:	2201      	movs	r2, #1
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3710      	adds	r7, #16
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
 8009eea:	bf00      	nop
 8009eec:	08032a78 	.word	0x08032a78
 8009ef0:	200127f4 	.word	0x200127f4
 8009ef4:	200127e8 	.word	0x200127e8
 8009ef8:	200127ea 	.word	0x200127ea
 8009efc:	200127ec 	.word	0x200127ec
 8009f00:	200127ee 	.word	0x200127ee
 8009f04:	200127f0 	.word	0x200127f0

08009f08 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b082      	sub	sp, #8
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	4a05      	ldr	r2, [pc, #20]	; (8009f28 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	601a      	str	r2, [r3, #0]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f7ff fe9b 	bl	8009c54 <_ZN8touchgfx15UIEventListenerD1Ev>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	4618      	mov	r0, r3
 8009f22:	3708      	adds	r7, #8
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}
 8009f28:	080336cc 	.word	0x080336cc

08009f2c <_ZN8touchgfx11ApplicationD0Ev>:
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b082      	sub	sp, #8
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f7ff ffe7 	bl	8009f08 <_ZN8touchgfx11ApplicationD1Ev>
 8009f3a:	f44f 719c 	mov.w	r1, #312	; 0x138
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f023 f8fc 	bl	802d13c <_ZdlPvj>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	4618      	mov	r0, r3
 8009f48:	3708      	adds	r7, #8
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}

08009f4e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8009f4e:	b580      	push	{r7, lr}
 8009f50:	b082      	sub	sp, #8
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f000 f804 	bl	8009f64 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8009f5c:	bf00      	nop
 8009f5e:	3708      	adds	r7, #8
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d00f      	beq.n	8009f96 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	330c      	adds	r3, #12
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	4610      	mov	r0, r2
 8009f8a:	4798      	blx	r3
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d001      	beq.n	8009f96 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8009f92:	2301      	movs	r3, #1
 8009f94:	e000      	b.n	8009f98 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8009f96:	2300      	movs	r3, #0
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d00e      	beq.n	8009fba <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	3308      	adds	r3, #8
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	4610      	mov	r0, r2
 8009fb0:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 8009fba:	bf00      	nop
 8009fbc:	3708      	adds	r7, #8
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
	...

08009fc4 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b082      	sub	sp, #8
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	4a05      	ldr	r2, [pc, #20]	; (8009fe4 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	601a      	str	r2, [r3, #0]
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f7ff ff97 	bl	8009f08 <_ZN8touchgfx11ApplicationD1Ev>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3708      	adds	r7, #8
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}
 8009fe4:	08030e84 	.word	0x08030e84

08009fe8 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b082      	sub	sp, #8
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f7ff ffe7 	bl	8009fc4 <_ZN8touchgfx14MVPApplicationD1Ev>
 8009ff6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f023 f89e 	bl	802d13c <_ZdlPvj>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	4618      	mov	r0, r3
 800a004:	3708      	adds	r7, #8
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
	...

0800a00c <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b082      	sub	sp, #8
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	4a08      	ldr	r2, [pc, #32]	; (800a038 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	601a      	str	r2, [r3, #0]
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800a020:	4618      	mov	r0, r3
 800a022:	f000 fae7 	bl	800a5f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	4618      	mov	r0, r3
 800a02a:	f7ff ffcb 	bl	8009fc4 <_ZN8touchgfx14MVPApplicationD1Ev>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	4618      	mov	r0, r3
 800a032:	3708      	adds	r7, #8
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}
 800a038:	08030e28 	.word	0x08030e28

0800a03c <_ZN23FrontendApplicationBaseD0Ev>:
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b082      	sub	sp, #8
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f7ff ffe1 	bl	800a00c <_ZN23FrontendApplicationBaseD1Ev>
 800a04a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f023 f874 	bl	802d13c <_ZdlPvj>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	4618      	mov	r0, r3
 800a058:	3708      	adds	r7, #8
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
	...

0800a060 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800a060:	b580      	push	{r7, lr}
 800a062:	b082      	sub	sp, #8
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	4a05      	ldr	r2, [pc, #20]	; (800a080 <_ZN19FrontendApplicationD1Ev+0x20>)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	601a      	str	r2, [r3, #0]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	4618      	mov	r0, r3
 800a072:	f7ff ffcb 	bl	800a00c <_ZN23FrontendApplicationBaseD1Ev>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	4618      	mov	r0, r3
 800a07a:	3708      	adds	r7, #8
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	08030de4 	.word	0x08030de4

0800a084 <_ZN19FrontendApplicationD0Ev>:
 800a084:	b580      	push	{r7, lr}
 800a086:	b082      	sub	sp, #8
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f7ff ffe7 	bl	800a060 <_ZN19FrontendApplicationD1Ev>
 800a092:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f023 f850 	bl	802d13c <_ZdlPvj>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3708      	adds	r7, #8
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}

0800a0a6 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800a0a6:	b580      	push	{r7, lr}
 800a0a8:	b082      	sub	sp, #8
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f006 fe61 	bl	8010d7c <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f014 ff2b 	bl	801ef18 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 800a0c2:	bf00      	nop
 800a0c4:	3708      	adds	r7, #8
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}

0800a0ca <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 800a0ca:	b580      	push	{r7, lr}
 800a0cc:	b082      	sub	sp, #8
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	6078      	str	r0, [r7, #4]
 800a0d2:	6039      	str	r1, [r7, #0]
    {
        app.gotomainScreenScreenNoTransition();
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f002 feae 	bl	800ce38 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>
    }
 800a0dc:	bf00      	nop
 800a0de:	3708      	adds	r7, #8
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b086      	sub	sp, #24
 800a0e8:	af02      	add	r7, sp, #8
 800a0ea:	60f8      	str	r0, [r7, #12]
 800a0ec:	60b9      	str	r1, [r7, #8]
 800a0ee:	607a      	str	r2, [r7, #4]
 800a0f0:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 800a0f2:	68f8      	ldr	r0, [r7, #12]
 800a0f4:	69bb      	ldr	r3, [r7, #24]
 800a0f6:	9300      	str	r3, [sp, #0]
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	687a      	ldr	r2, [r7, #4]
 800a0fc:	68b9      	ldr	r1, [r7, #8]
 800a0fe:	f7ff fd27 	bl	8009b50 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 800a102:	4a04      	ldr	r2, [pc, #16]	; (800a114 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	601a      	str	r2, [r3, #0]
    {

    }
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	4618      	mov	r0, r3
 800a10c:	3710      	adds	r7, #16
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
 800a112:	bf00      	nop
 800a114:	08030dd0 	.word	0x08030dd0

0800a118 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 800a118:	b580      	push	{r7, lr}
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	4801      	ldr	r0, [pc, #4]	; (800a124 <__tcf_0+0xc>)
 800a11e:	f000 f95f 	bl	800a3e0 <_ZN12FrontendHeapD1Ev>
 800a122:	bd80      	pop	{r7, pc}
 800a124:	200001ac 	.word	0x200001ac

0800a128 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 800a128:	b580      	push	{r7, lr}
 800a12a:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 800a12c:	4b12      	ldr	r3, [pc, #72]	; (800a178 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	f3bf 8f5b 	dmb	ish
 800a134:	b2db      	uxtb	r3, r3
 800a136:	f003 0301 	and.w	r3, r3, #1
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	bf0c      	ite	eq
 800a13e:	2301      	moveq	r3, #1
 800a140:	2300      	movne	r3, #0
 800a142:	b2db      	uxtb	r3, r3
 800a144:	2b00      	cmp	r3, #0
 800a146:	d013      	beq.n	800a170 <_ZN12FrontendHeap11getInstanceEv+0x48>
 800a148:	480b      	ldr	r0, [pc, #44]	; (800a178 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 800a14a:	f022 fff9 	bl	802d140 <__cxa_guard_acquire>
 800a14e:	4603      	mov	r3, r0
 800a150:	2b00      	cmp	r3, #0
 800a152:	bf14      	ite	ne
 800a154:	2301      	movne	r3, #1
 800a156:	2300      	moveq	r3, #0
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d008      	beq.n	800a170 <_ZN12FrontendHeap11getInstanceEv+0x48>
 800a15e:	4807      	ldr	r0, [pc, #28]	; (800a17c <_ZN12FrontendHeap11getInstanceEv+0x54>)
 800a160:	f000 f868 	bl	800a234 <_ZN12FrontendHeapC1Ev>
 800a164:	4804      	ldr	r0, [pc, #16]	; (800a178 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 800a166:	f023 f807 	bl	802d178 <__cxa_guard_release>
 800a16a:	4805      	ldr	r0, [pc, #20]	; (800a180 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 800a16c:	f024 f8d2 	bl	802e314 <atexit>
        return instance;
 800a170:	4b02      	ldr	r3, [pc, #8]	; (800a17c <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 800a172:	4618      	mov	r0, r3
 800a174:	bd80      	pop	{r7, pc}
 800a176:	bf00      	nop
 800a178:	20000d10 	.word	0x20000d10
 800a17c:	200001ac 	.word	0x200001ac
 800a180:	0800a119 	.word	0x0800a119

0800a184 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 800a184:	b580      	push	{r7, lr}
 800a186:	b082      	sub	sp, #8
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	4a05      	ldr	r2, [pc, #20]	; (800a1a4 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	601a      	str	r2, [r3, #0]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	4618      	mov	r0, r3
 800a196:	f7ff fcfb 	bl	8009b90 <_ZN8touchgfx7MVPHeapD1Ev>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	4618      	mov	r0, r3
 800a19e:	3708      	adds	r7, #8
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}
 800a1a4:	08030dd0 	.word	0x08030dd0

0800a1a8 <_ZN16FrontendHeapBaseD0Ev>:
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b082      	sub	sp, #8
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f7ff ffe7 	bl	800a184 <_ZN16FrontendHeapBaseD1Ev>
 800a1b6:	2114      	movs	r1, #20
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f022 ffbf 	bl	802d13c <_ZdlPvj>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3708      	adds	r7, #8
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI23sequenceScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b082      	sub	sp, #8
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f010 fdae 	bl	801ad34 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800a1d8:	4a03      	ldr	r2, [pc, #12]	; (800a1e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI23sequenceScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	601a      	str	r2, [r3, #0]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3708      	adds	r7, #8
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}
 800a1e8:	08030d9c 	.word	0x08030d9c

0800a1ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI18sequenceScreenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b082      	sub	sp, #8
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f010 fd9c 	bl	801ad34 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800a1fc:	4a03      	ldr	r2, [pc, #12]	; (800a20c <_ZN8touchgfx9PartitionINS_4meta8TypeListI18sequenceScreenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	601a      	str	r2, [r3, #0]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	4618      	mov	r0, r3
 800a206:	3708      	adds	r7, #8
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}
 800a20c:	08030d68 	.word	0x08030d68

0800a210 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
 800a210:	b580      	push	{r7, lr}
 800a212:	b082      	sub	sp, #8
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	4618      	mov	r0, r3
 800a21c:	f010 fd8a 	bl	801ad34 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800a220:	4a03      	ldr	r2, [pc, #12]	; (800a230 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	601a      	str	r2, [r3, #0]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	4618      	mov	r0, r3
 800a22a:	3708      	adds	r7, #8
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}
 800a230:	08030d34 	.word	0x08030d34

0800a234 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800a234:	b590      	push	{r4, r7, lr}
 800a236:	b085      	sub	sp, #20
 800a238:	af02      	add	r7, sp, #8
 800a23a:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f103 0114 	add.w	r1, r3, #20
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f603 14ac 	addw	r4, r3, #2476	; 0x9ac
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f603 230c 	addw	r3, r3, #2572	; 0xa0c
 800a256:	9300      	str	r3, [sp, #0]
 800a258:	4623      	mov	r3, r4
 800a25a:	f7ff ff43 	bl	800a0e4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 800a25e:	4a18      	ldr	r2, [pc, #96]	; (800a2c0 <_ZN12FrontendHeapC1Ev+0x8c>)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	601a      	str	r2, [r3, #0]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	3314      	adds	r3, #20
 800a268:	4618      	mov	r0, r3
 800a26a:	f7ff ffad 	bl	800a1c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI23sequenceScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	332c      	adds	r3, #44	; 0x2c
 800a272:	4618      	mov	r0, r3
 800a274:	f7ff ffba 	bl	800a1ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI18sequenceScreenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f603 13ac 	addw	r3, r3, #2476	; 0x9ac
 800a27e:	4618      	mov	r0, r3
 800a280:	f7ff ffc6 	bl	800a210 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 800a28a:	4618      	mov	r0, r3
 800a28c:	f006 fd68 	bl	8010d60 <_ZN5ModelC1Ev>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f603 200c 	addw	r0, r3, #2572	; 0xa0c
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 800a29c:	687a      	ldr	r2, [r7, #4]
 800a29e:	4619      	mov	r1, r3
 800a2a0:	f006 fd48 	bl	8010d34 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f603 230c 	addw	r3, r3, #2572	; 0xa0c
 800a2ac:	4619      	mov	r1, r3
 800a2ae:	4610      	mov	r0, r2
 800a2b0:	f7ff ff0b 	bl	800a0ca <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	370c      	adds	r7, #12
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd90      	pop	{r4, r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	08030d20 	.word	0x08030d20

0800a2c4 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b086      	sub	sp, #24
 800a2c8:	af02      	add	r7, sp, #8
 800a2ca:	60f8      	str	r0, [r7, #12]
 800a2cc:	60b9      	str	r1, [r7, #8]
 800a2ce:	607a      	str	r2, [r7, #4]
 800a2d0:	603b      	str	r3, [r7, #0]
 800a2d2:	68f8      	ldr	r0, [r7, #12]
 800a2d4:	8bbb      	ldrh	r3, [r7, #28]
 800a2d6:	9301      	str	r3, [sp, #4]
 800a2d8:	8b3b      	ldrh	r3, [r7, #24]
 800a2da:	9300      	str	r3, [sp, #0]
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	687a      	ldr	r2, [r7, #4]
 800a2e0:	68b9      	ldr	r1, [r7, #8]
 800a2e2:	f7ff fd6b 	bl	8009dbc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 800a2e6:	4a04      	ldr	r2, [pc, #16]	; (800a2f8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	601a      	str	r2, [r3, #0]
    }
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3710      	adds	r7, #16
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
 800a2f6:	bf00      	nop
 800a2f8:	08030f2c 	.word	0x08030f2c

0800a2fc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b086      	sub	sp, #24
 800a300:	af02      	add	r7, sp, #8
 800a302:	60f8      	str	r0, [r7, #12]
 800a304:	60b9      	str	r1, [r7, #8]
 800a306:	607a      	str	r2, [r7, #4]
 800a308:	603b      	str	r3, [r7, #0]
 800a30a:	68f8      	ldr	r0, [r7, #12]
 800a30c:	8bbb      	ldrh	r3, [r7, #28]
 800a30e:	9301      	str	r3, [sp, #4]
 800a310:	8b3b      	ldrh	r3, [r7, #24]
 800a312:	9300      	str	r3, [sp, #0]
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	687a      	ldr	r2, [r7, #4]
 800a318:	68b9      	ldr	r1, [r7, #8]
 800a31a:	f7ff ffd3 	bl	800a2c4 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800a31e:	4a04      	ldr	r2, [pc, #16]	; (800a330 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	601a      	str	r2, [r3, #0]
    }
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	4618      	mov	r0, r3
 800a328:	3710      	adds	r7, #16
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}
 800a32e:	bf00      	nop
 800a330:	08030a18 	.word	0x08030a18

0800a334 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 800a334:	b480      	push	{r7}
 800a336:	b083      	sub	sp, #12
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	4a04      	ldr	r2, [pc, #16]	; (800a350 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	601a      	str	r2, [r3, #0]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	4618      	mov	r0, r3
 800a346:	370c      	adds	r7, #12
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr
 800a350:	08030a00 	.word	0x08030a00

0800a354 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 800a354:	b580      	push	{r7, lr}
 800a356:	b082      	sub	sp, #8
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	4618      	mov	r0, r3
 800a360:	f7ff ffe8 	bl	800a334 <_ZN8touchgfx15TouchControllerC1Ev>
 800a364:	4a03      	ldr	r2, [pc, #12]	; (800a374 <_ZN20STM32TouchControllerC1Ev+0x20>)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	601a      	str	r2, [r3, #0]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	4618      	mov	r0, r3
 800a36e:	3708      	adds	r7, #8
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}
 800a374:	080309e8 	.word	0x080309e8

0800a378 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 240, 320);

void touchgfx_init()
{
 800a378:	b590      	push	{r4, r7, lr}
 800a37a:	b085      	sub	sp, #20
 800a37c:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 800a37e:	f002 f98b 	bl	800c698 <_ZN14BitmapDatabase11getInstanceEv>
 800a382:	4604      	mov	r4, r0
 800a384:	f002 f992 	bl	800c6ac <_ZN14BitmapDatabase15getInstanceSizeEv>
 800a388:	4603      	mov	r3, r0
 800a38a:	4619      	mov	r1, r3
 800a38c:	2300      	movs	r3, #0
 800a38e:	9300      	str	r3, [sp, #0]
 800a390:	2300      	movs	r3, #0
 800a392:	2200      	movs	r2, #0
 800a394:	4620      	mov	r0, r4
 800a396:	f017 fa43 	bl	8021820 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 800a39a:	4809      	ldr	r0, [pc, #36]	; (800a3c0 <touchgfx_init+0x48>)
 800a39c:	f7ff fba8 	bl	8009af0 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 800a3a0:	2000      	movs	r0, #0
 800a3a2:	f004 fbad 	bl	800eb00 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 800a3a6:	4807      	ldr	r0, [pc, #28]	; (800a3c4 <touchgfx_init+0x4c>)
 800a3a8:	f017 f984 	bl	80216b4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 800a3ac:	f7ff febc 	bl	800a128 <_ZN12FrontendHeap11getInstanceEv>
 800a3b0:	6078      	str	r0, [r7, #4]
    (void)heap; // we need to obtain the reference above to initialize the frontend heap.

    hal.initialize();
 800a3b2:	4805      	ldr	r0, [pc, #20]	; (800a3c8 <touchgfx_init+0x50>)
 800a3b4:	f7fe fdba 	bl	8008f2c <_ZN11TouchGFXHAL10initializeEv>
}
 800a3b8:	bf00      	nop
 800a3ba:	370c      	adds	r7, #12
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd90      	pop	{r4, r7, pc}
 800a3c0:	200019b0 	.word	0x200019b0
 800a3c4:	20000008 	.word	0x20000008
 800a3c8:	200019b4 	.word	0x200019b4

0800a3cc <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 800a3d0:	4802      	ldr	r0, [pc, #8]	; (800a3dc <touchgfx_taskEntry+0x10>)
 800a3d2:	f7fe fdb7 	bl	8008f44 <_ZN11TouchGFXHAL9taskEntryEv>
}
 800a3d6:	bf00      	nop
 800a3d8:	bd80      	pop	{r7, pc}
 800a3da:	bf00      	nop
 800a3dc:	200019b4 	.word	0x200019b4

0800a3e0 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b082      	sub	sp, #8
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	4a10      	ldr	r2, [pc, #64]	; (800a42c <_ZN12FrontendHeapD1Ev+0x4c>)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	601a      	str	r2, [r3, #0]
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f603 230c 	addw	r3, r3, #2572	; 0xa0c
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f7ff fe33 	bl	800a060 <_ZN19FrontendApplicationD1Ev>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f603 13ac 	addw	r3, r3, #2476	; 0x9ac
 800a400:	4618      	mov	r0, r3
 800a402:	f000 f827 	bl	800a454 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	332c      	adds	r3, #44	; 0x2c
 800a40a:	4618      	mov	r0, r3
 800a40c:	f000 f844 	bl	800a498 <_ZN8touchgfx9PartitionINS_4meta8TypeListI18sequenceScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	3314      	adds	r3, #20
 800a414:	4618      	mov	r0, r3
 800a416:	f000 f863 	bl	800a4e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI23sequenceScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	4618      	mov	r0, r3
 800a41e:	f7ff feb1 	bl	800a184 <_ZN16FrontendHeapBaseD1Ev>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	4618      	mov	r0, r3
 800a426:	3708      	adds	r7, #8
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}
 800a42c:	08030d20 	.word	0x08030d20

0800a430 <_ZN12FrontendHeapD0Ev>:
 800a430:	b580      	push	{r7, lr}
 800a432:	b082      	sub	sp, #8
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f7ff ffd1 	bl	800a3e0 <_ZN12FrontendHeapD1Ev>
 800a43e:	f640 3164 	movw	r1, #2916	; 0xb64
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f022 fe7a 	bl	802d13c <_ZdlPvj>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	4618      	mov	r0, r3
 800a44c:	3708      	adds	r7, #8
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}
	...

0800a454 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	4a05      	ldr	r2, [pc, #20]	; (800a474 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	601a      	str	r2, [r3, #0]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	4618      	mov	r0, r3
 800a466:	f010 fc63 	bl	801ad30 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	4618      	mov	r0, r3
 800a46e:	3708      	adds	r7, #8
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}
 800a474:	08030d34 	.word	0x08030d34

0800a478 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 800a478:	b580      	push	{r7, lr}
 800a47a:	b082      	sub	sp, #8
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f7ff ffe7 	bl	800a454 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 800a486:	215c      	movs	r1, #92	; 0x5c
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f022 fe57 	bl	802d13c <_ZdlPvj>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	4618      	mov	r0, r3
 800a492:	3708      	adds	r7, #8
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}

0800a498 <_ZN8touchgfx9PartitionINS_4meta8TypeListI18sequenceScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800a498:	b580      	push	{r7, lr}
 800a49a:	b082      	sub	sp, #8
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	4a05      	ldr	r2, [pc, #20]	; (800a4b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI18sequenceScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	601a      	str	r2, [r3, #0]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f010 fc41 	bl	801ad30 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	3708      	adds	r7, #8
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}
 800a4b8:	08030d68 	.word	0x08030d68

0800a4bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI18sequenceScreenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b082      	sub	sp, #8
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f7ff ffe7 	bl	800a498 <_ZN8touchgfx9PartitionINS_4meta8TypeListI18sequenceScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800a4ca:	f44f 6118 	mov.w	r1, #2432	; 0x980
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f022 fe34 	bl	802d13c <_ZdlPvj>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3708      	adds	r7, #8
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
	...

0800a4e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI23sequenceScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b082      	sub	sp, #8
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	4a05      	ldr	r2, [pc, #20]	; (800a500 <_ZN8touchgfx9PartitionINS_4meta8TypeListI23sequenceScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	601a      	str	r2, [r3, #0]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f010 fc1d 	bl	801ad30 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3708      	adds	r7, #8
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}
 800a500:	08030d9c 	.word	0x08030d9c

0800a504 <_ZN8touchgfx9PartitionINS_4meta8TypeListI23sequenceScreenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800a504:	b580      	push	{r7, lr}
 800a506:	b082      	sub	sp, #8
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f7ff ffe7 	bl	800a4e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI23sequenceScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800a512:	2118      	movs	r1, #24
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f022 fe11 	bl	802d13c <_ZdlPvj>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	4618      	mov	r0, r3
 800a51e:	3708      	adds	r7, #8
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 800a524:	b580      	push	{r7, lr}
 800a526:	b082      	sub	sp, #8
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	4a05      	ldr	r2, [pc, #20]	; (800a544 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	601a      	str	r2, [r3, #0]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	4618      	mov	r0, r3
 800a536:	f7ff fbad 	bl	8009c94 <_ZN8touchgfx3LCDD1Ev>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	4618      	mov	r0, r3
 800a53e:	3708      	adds	r7, #8
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}
 800a544:	080346d0 	.word	0x080346d0

0800a548 <_ZN8touchgfx8LCD16bppD0Ev>:
 800a548:	b580      	push	{r7, lr}
 800a54a:	b082      	sub	sp, #8
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f7ff ffe7 	bl	800a524 <_ZN8touchgfx8LCD16bppD1Ev>
 800a556:	2178      	movs	r1, #120	; 0x78
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f022 fdef 	bl	802d13c <_ZdlPvj>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	4618      	mov	r0, r3
 800a562:	3708      	adds	r7, #8
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}

0800a568 <_Z41__static_initialization_and_destruction_0ii>:
 800a568:	b580      	push	{r7, lr}
 800a56a:	b084      	sub	sp, #16
 800a56c:	af02      	add	r7, sp, #8
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	6039      	str	r1, [r7, #0]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2b01      	cmp	r3, #1
 800a576:	d118      	bne.n	800a5aa <_Z41__static_initialization_and_destruction_0ii+0x42>
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a57e:	4293      	cmp	r3, r2
 800a580:	d113      	bne.n	800a5aa <_Z41__static_initialization_and_destruction_0ii+0x42>
static STM32TouchController tc;
 800a582:	4817      	ldr	r0, [pc, #92]	; (800a5e0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800a584:	f7ff fee6 	bl	800a354 <_ZN20STM32TouchControllerC1Ev>
static STM32F4DMA dma;
 800a588:	4816      	ldr	r0, [pc, #88]	; (800a5e4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800a58a:	f7fe ff97 	bl	80094bc <_ZN10STM32F4DMAC1Ev>
static LCD16bpp display;
 800a58e:	4816      	ldr	r0, [pc, #88]	; (800a5e8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800a590:	f01a f936 	bl	8024800 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 240, 320);
 800a594:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800a598:	9301      	str	r3, [sp, #4]
 800a59a:	23f0      	movs	r3, #240	; 0xf0
 800a59c:	9300      	str	r3, [sp, #0]
 800a59e:	4b10      	ldr	r3, [pc, #64]	; (800a5e0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800a5a0:	4a11      	ldr	r2, [pc, #68]	; (800a5e8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800a5a2:	4910      	ldr	r1, [pc, #64]	; (800a5e4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800a5a4:	4811      	ldr	r0, [pc, #68]	; (800a5ec <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800a5a6:	f7ff fea9 	bl	800a2fc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d113      	bne.n	800a5d8 <_Z41__static_initialization_and_destruction_0ii+0x70>
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d10e      	bne.n	800a5d8 <_Z41__static_initialization_and_destruction_0ii+0x70>
 800a5ba:	480c      	ldr	r0, [pc, #48]	; (800a5ec <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800a5bc:	f7fe fd42 	bl	8009044 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 800a5c0:	480b      	ldr	r0, [pc, #44]	; (800a5f0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800a5c2:	f000 f839 	bl	800a638 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 800a5c6:	4808      	ldr	r0, [pc, #32]	; (800a5e8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800a5c8:	f7ff ffac 	bl	800a524 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32F4DMA dma;
 800a5cc:	4805      	ldr	r0, [pc, #20]	; (800a5e4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800a5ce:	f7fe ff9f 	bl	8009510 <_ZN10STM32F4DMAD1Ev>
static STM32TouchController tc;
 800a5d2:	4803      	ldr	r0, [pc, #12]	; (800a5e0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800a5d4:	f7fe fa4c 	bl	8008a70 <_ZN20STM32TouchControllerD1Ev>
}
 800a5d8:	bf00      	nop
 800a5da:	3708      	adds	r7, #8
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}
 800a5e0:	20000d14 	.word	0x20000d14
 800a5e4:	20000d18 	.word	0x20000d18
 800a5e8:	20001938 	.word	0x20001938
 800a5ec:	200019b4 	.word	0x200019b4
 800a5f0:	20000008 	.word	0x20000008

0800a5f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b082      	sub	sp, #8
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	4a05      	ldr	r2, [pc, #20]	; (800a614 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	601a      	str	r2, [r3, #0]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	4618      	mov	r0, r3
 800a606:	f7ff fb83 	bl	8009d10 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	4618      	mov	r0, r3
 800a60e:	3708      	adds	r7, #8
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}
 800a614:	08030e6c 	.word	0x08030e6c

0800a618 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800a618:	b580      	push	{r7, lr}
 800a61a:	b082      	sub	sp, #8
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f7ff ffe7 	bl	800a5f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800a626:	2110      	movs	r1, #16
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f022 fd87 	bl	802d13c <_ZdlPvj>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	4618      	mov	r0, r3
 800a632:	3708      	adds	r7, #8
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}

0800a638 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800a638:	b580      	push	{r7, lr}
 800a63a:	b082      	sub	sp, #8
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	4a05      	ldr	r2, [pc, #20]	; (800a658 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	601a      	str	r2, [r3, #0]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	4618      	mov	r0, r3
 800a64a:	f7ff fa61 	bl	8009b10 <_ZN8touchgfx12FontProviderD1Ev>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	4618      	mov	r0, r3
 800a652:	3708      	adds	r7, #8
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}
 800a658:	08031008 	.word	0x08031008

0800a65c <_ZN23ApplicationFontProviderD0Ev>:
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f7ff ffe7 	bl	800a638 <_ZN23ApplicationFontProviderD1Ev>
 800a66a:	2104      	movs	r1, #4
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f022 fd65 	bl	802d13c <_ZdlPvj>
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	4618      	mov	r0, r3
 800a676:	3708      	adds	r7, #8
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}

0800a67c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity
     */
    virtual uint16_t capacity() const
 800a67c:	b480      	push	{r7}
 800a67e:	b083      	sub	sp, #12
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 800a684:	2301      	movs	r3, #1
    }
 800a686:	4618      	mov	r0, r3
 800a688:	370c      	adds	r7, #12
 800a68a:	46bd      	mov	sp, r7
 800a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a690:	4770      	bx	lr

0800a692 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size
     */
    virtual uint32_t element_size()
 800a692:	b480      	push	{r7}
 800a694:	b083      	sub	sp, #12
 800a696:	af00      	add	r7, sp, #0
 800a698:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 800a69a:	2354      	movs	r3, #84	; 0x54
    }
 800a69c:	4618      	mov	r0, r3
 800a69e:	370c      	adds	r7, #12
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr

0800a6a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element
     */
    virtual void* element(uint16_t index)
 800a6a8:	b480      	push	{r7}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	460b      	mov	r3, r1
 800a6b2:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 800a6b4:	887b      	ldrh	r3, [r7, #2]
 800a6b6:	2254      	movs	r2, #84	; 0x54
 800a6b8:	fb02 f303 	mul.w	r3, r2, r3
 800a6bc:	3308      	adds	r3, #8
 800a6be:	687a      	ldr	r2, [r7, #4]
 800a6c0:	4413      	add	r3, r2
    }
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	370c      	adds	r7, #12
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6cc:	4770      	bx	lr

0800a6ce <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element
     */
    virtual const void* element(uint16_t index) const
 800a6ce:	b480      	push	{r7}
 800a6d0:	b083      	sub	sp, #12
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	6078      	str	r0, [r7, #4]
 800a6d6:	460b      	mov	r3, r1
 800a6d8:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 800a6da:	887b      	ldrh	r3, [r7, #2]
 800a6dc:	2254      	movs	r2, #84	; 0x54
 800a6de:	fb02 f303 	mul.w	r3, r2, r3
 800a6e2:	3308      	adds	r3, #8
 800a6e4:	687a      	ldr	r2, [r7, #4]
 800a6e6:	4413      	add	r3, r2
    }
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	370c      	adds	r7, #12
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr

0800a6f4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI18sequenceScreenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800a6f4:	b480      	push	{r7}
 800a6f6:	b083      	sub	sp, #12
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800a6fc:	2301      	movs	r3, #1
    }
 800a6fe:	4618      	mov	r0, r3
 800a700:	370c      	adds	r7, #12
 800a702:	46bd      	mov	sp, r7
 800a704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a708:	4770      	bx	lr

0800a70a <_ZN8touchgfx9PartitionINS_4meta8TypeListI18sequenceScreenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800a70a:	b480      	push	{r7}
 800a70c:	b083      	sub	sp, #12
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800a712:	f640 1378 	movw	r3, #2424	; 0x978
    }
 800a716:	4618      	mov	r0, r3
 800a718:	370c      	adds	r7, #12
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr

0800a722 <_ZN8touchgfx9PartitionINS_4meta8TypeListI18sequenceScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800a722:	b480      	push	{r7}
 800a724:	b083      	sub	sp, #12
 800a726:	af00      	add	r7, sp, #0
 800a728:	6078      	str	r0, [r7, #4]
 800a72a:	460b      	mov	r3, r1
 800a72c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800a72e:	887b      	ldrh	r3, [r7, #2]
 800a730:	f640 1278 	movw	r2, #2424	; 0x978
 800a734:	fb02 f303 	mul.w	r3, r2, r3
 800a738:	3308      	adds	r3, #8
 800a73a:	687a      	ldr	r2, [r7, #4]
 800a73c:	4413      	add	r3, r2
    }
 800a73e:	4618      	mov	r0, r3
 800a740:	370c      	adds	r7, #12
 800a742:	46bd      	mov	sp, r7
 800a744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a748:	4770      	bx	lr

0800a74a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI18sequenceScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800a74a:	b480      	push	{r7}
 800a74c:	b083      	sub	sp, #12
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6078      	str	r0, [r7, #4]
 800a752:	460b      	mov	r3, r1
 800a754:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800a756:	887b      	ldrh	r3, [r7, #2]
 800a758:	f640 1278 	movw	r2, #2424	; 0x978
 800a75c:	fb02 f303 	mul.w	r3, r2, r3
 800a760:	3308      	adds	r3, #8
 800a762:	687a      	ldr	r2, [r7, #4]
 800a764:	4413      	add	r3, r2
    }
 800a766:	4618      	mov	r0, r3
 800a768:	370c      	adds	r7, #12
 800a76a:	46bd      	mov	sp, r7
 800a76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a770:	4770      	bx	lr

0800a772 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI23sequenceScreenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800a772:	b480      	push	{r7}
 800a774:	b083      	sub	sp, #12
 800a776:	af00      	add	r7, sp, #0
 800a778:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800a77a:	2301      	movs	r3, #1
    }
 800a77c:	4618      	mov	r0, r3
 800a77e:	370c      	adds	r7, #12
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr

0800a788 <_ZN8touchgfx9PartitionINS_4meta8TypeListI23sequenceScreenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800a788:	b480      	push	{r7}
 800a78a:	b083      	sub	sp, #12
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800a790:	2310      	movs	r3, #16
    }
 800a792:	4618      	mov	r0, r3
 800a794:	370c      	adds	r7, #12
 800a796:	46bd      	mov	sp, r7
 800a798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79c:	4770      	bx	lr

0800a79e <_ZN8touchgfx9PartitionINS_4meta8TypeListI23sequenceScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800a79e:	b480      	push	{r7}
 800a7a0:	b083      	sub	sp, #12
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	6078      	str	r0, [r7, #4]
 800a7a6:	460b      	mov	r3, r1
 800a7a8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800a7aa:	887b      	ldrh	r3, [r7, #2]
 800a7ac:	011b      	lsls	r3, r3, #4
 800a7ae:	3308      	adds	r3, #8
 800a7b0:	687a      	ldr	r2, [r7, #4]
 800a7b2:	4413      	add	r3, r2
    }
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	370c      	adds	r7, #12
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr

0800a7c0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI23sequenceScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800a7c0:	b480      	push	{r7}
 800a7c2:	b083      	sub	sp, #12
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	460b      	mov	r3, r1
 800a7ca:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800a7cc:	887b      	ldrh	r3, [r7, #2]
 800a7ce:	011b      	lsls	r3, r3, #4
 800a7d0:	3308      	adds	r3, #8
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	4413      	add	r3, r2
    }
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	370c      	adds	r7, #12
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e0:	4770      	bx	lr

0800a7e2 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800a7e2:	b580      	push	{r7, lr}
 800a7e4:	b082      	sub	sp, #8
 800a7e6:	af00      	add	r7, sp, #0
 800a7e8:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	68d2      	ldr	r2, [r2, #12]
 800a7f2:	1052      	asrs	r2, r2, #1
 800a7f4:	1899      	adds	r1, r3, r2
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	68db      	ldr	r3, [r3, #12]
 800a7fa:	f003 0301 	and.w	r3, r3, #1
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d102      	bne.n	800a808 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	689b      	ldr	r3, [r3, #8]
 800a806:	e00a      	b.n	800a81e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	685b      	ldr	r3, [r3, #4]
 800a80c:	687a      	ldr	r2, [r7, #4]
 800a80e:	68d2      	ldr	r2, [r2, #12]
 800a810:	1052      	asrs	r2, r2, #1
 800a812:	4413      	add	r3, r2
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	687a      	ldr	r2, [r7, #4]
 800a818:	6892      	ldr	r2, [r2, #8]
 800a81a:	4413      	add	r3, r2
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	4608      	mov	r0, r1
 800a820:	4798      	blx	r3
    }
 800a822:	bf00      	nop
 800a824:	3708      	adds	r7, #8
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}

0800a82a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800a82a:	b480      	push	{r7}
 800a82c:	b083      	sub	sp, #12
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	685b      	ldr	r3, [r3, #4]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d010      	beq.n	800a85c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	689b      	ldr	r3, [r3, #8]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d107      	bne.n	800a852 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	68db      	ldr	r3, [r3, #12]
 800a846:	f003 0301 	and.w	r3, r3, #1
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d101      	bne.n	800a852 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800a84e:	2301      	movs	r3, #1
 800a850:	e000      	b.n	800a854 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800a852:	2300      	movs	r3, #0
 800a854:	2b01      	cmp	r3, #1
 800a856:	d001      	beq.n	800a85c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800a858:	2301      	movs	r3, #1
 800a85a:	e000      	b.n	800a85e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800a85c:	2300      	movs	r3, #0
    }
 800a85e:	4618      	mov	r0, r3
 800a860:	370c      	adds	r7, #12
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr

0800a86a <_GLOBAL__sub_I_touchgfx_init>:
 800a86a:	b580      	push	{r7, lr}
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a872:	2001      	movs	r0, #1
 800a874:	f7ff fe78 	bl	800a568 <_Z41__static_initialization_and_destruction_0ii>
 800a878:	bd80      	pop	{r7, pc}

0800a87a <_GLOBAL__sub_D_touchgfx_init>:
 800a87a:	b580      	push	{r7, lr}
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a882:	2000      	movs	r0, #0
 800a884:	f7ff fe70 	bl	800a568 <_Z41__static_initialization_and_destruction_0ii>
 800a888:	bd80      	pop	{r7, pc}

0800a88a <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 800a88a:	b580      	push	{r7, lr}
 800a88c:	b082      	sub	sp, #8
 800a88e:	af00      	add	r7, sp, #0
 800a890:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	3318      	adds	r3, #24
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	4798      	blx	r3
    }
 800a89e:	bf00      	nop
 800a8a0:	3708      	adds	r7, #8
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}

0800a8a6 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 800a8a6:	b480      	push	{r7}
 800a8a8:	b083      	sub	sp, #12
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
 800a8ae:	460b      	mov	r3, r1
 800a8b0:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	78fa      	ldrb	r2, [r7, #3]
 800a8b6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 800a8ba:	bf00      	nop
 800a8bc:	370c      	adds	r7, #12
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c4:	4770      	bx	lr

0800a8c6 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 800a8c6:	b480      	push	{r7}
 800a8c8:	b083      	sub	sp, #12
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800a8d4:	3301      	adds	r3, #1
 800a8d6:	b2da      	uxtb	r2, r3
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 800a8de:	bf00      	nop
 800a8e0:	370c      	adds	r7, #12
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e8:	4770      	bx	lr
	...

0800a8ec <__NVIC_EnableIRQ>:
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b083      	sub	sp, #12
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a8f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	db0d      	blt.n	800a91a <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a8fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a902:	b2db      	uxtb	r3, r3
 800a904:	f003 021f 	and.w	r2, r3, #31
 800a908:	4907      	ldr	r1, [pc, #28]	; (800a928 <__NVIC_EnableIRQ+0x3c>)
 800a90a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a90e:	095b      	lsrs	r3, r3, #5
 800a910:	2001      	movs	r0, #1
 800a912:	fa00 f202 	lsl.w	r2, r0, r2
 800a916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a91a:	bf00      	nop
 800a91c:	370c      	adds	r7, #12
 800a91e:	46bd      	mov	sp, r7
 800a920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a924:	4770      	bx	lr
 800a926:	bf00      	nop
 800a928:	e000e100 	.word	0xe000e100

0800a92c <__NVIC_DisableIRQ>:
{
 800a92c:	b480      	push	{r7}
 800a92e:	b083      	sub	sp, #12
 800a930:	af00      	add	r7, sp, #0
 800a932:	4603      	mov	r3, r0
 800a934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	db12      	blt.n	800a964 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a93e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a942:	b2db      	uxtb	r3, r3
 800a944:	f003 021f 	and.w	r2, r3, #31
 800a948:	4909      	ldr	r1, [pc, #36]	; (800a970 <__NVIC_DisableIRQ+0x44>)
 800a94a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a94e:	095b      	lsrs	r3, r3, #5
 800a950:	2001      	movs	r0, #1
 800a952:	fa00 f202 	lsl.w	r2, r0, r2
 800a956:	3320      	adds	r3, #32
 800a958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800a95c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a960:	f3bf 8f6f 	isb	sy
}
 800a964:	bf00      	nop
 800a966:	370c      	adds	r7, #12
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr
 800a970:	e000e100 	.word	0xe000e100

0800a974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a974:	b480      	push	{r7}
 800a976:	b083      	sub	sp, #12
 800a978:	af00      	add	r7, sp, #0
 800a97a:	4603      	mov	r3, r0
 800a97c:	6039      	str	r1, [r7, #0]
 800a97e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a984:	2b00      	cmp	r3, #0
 800a986:	db0c      	blt.n	800a9a2 <__NVIC_SetPriority+0x2e>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	b2db      	uxtb	r3, r3
 800a98c:	4a0e      	ldr	r2, [pc, #56]	; (800a9c8 <__NVIC_SetPriority+0x54>)
 800a98e:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800a992:	4608      	mov	r0, r1
 800a994:	011b      	lsls	r3, r3, #4
 800a996:	b2d9      	uxtb	r1, r3
 800a998:	1813      	adds	r3, r2, r0
 800a99a:	460a      	mov	r2, r1
 800a99c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a9a0:	e00c      	b.n	800a9bc <__NVIC_SetPriority+0x48>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	b2da      	uxtb	r2, r3
 800a9a6:	4909      	ldr	r1, [pc, #36]	; (800a9cc <__NVIC_SetPriority+0x58>)
 800a9a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	f003 030f 	and.w	r3, r3, #15
 800a9b2:	3b04      	subs	r3, #4
 800a9b4:	0112      	lsls	r2, r2, #4
 800a9b6:	b2d2      	uxtb	r2, r2
 800a9b8:	440b      	add	r3, r1
 800a9ba:	761a      	strb	r2, [r3, #24]
}
 800a9bc:	bf00      	nop
 800a9be:	370c      	adds	r7, #12
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr
 800a9c8:	e000e100 	.word	0xe000e100
 800a9cc:	e000ed00 	.word	0xe000ed00

0800a9d0 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
static uint16_t lcd_int_active_line;
static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 800a9d0:	b5b0      	push	{r4, r5, r7, lr}
 800a9d2:	b082      	sub	sp, #8
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f012 fa4e 	bl	801ce7c <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(touchgfx::Application::getInstance()));
 800a9e0:	687d      	ldr	r5, [r7, #4]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	334c      	adds	r3, #76	; 0x4c
 800a9e8:	681c      	ldr	r4, [r3, #0]
 800a9ea:	f014 fb6d 	bl	801f0c8 <_ZN8touchgfx11Application11getInstanceEv>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	4619      	mov	r1, r3
 800a9f2:	4628      	mov	r0, r5
 800a9f4:	47a0      	blx	r4

    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	3374      	adds	r3, #116	; 0x74
 800a9fe:	681c      	ldr	r4, [r3, #0]
 800aa00:	4a06      	ldr	r2, [pc, #24]	; (800aa1c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x4c>)
 800aa02:	2300      	movs	r3, #0
 800aa04:	4906      	ldr	r1, [pc, #24]	; (800aa20 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x50>)
 800aa06:	47a0      	blx	r4
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     *
     * Setting to false to increase performance when using double buffering
     */
    lockDMAToFrontPorch(false);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2100      	movs	r1, #0
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f7ff ff4a 	bl	800a8a6 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 800aa12:	bf00      	nop
 800aa14:	3708      	adds	r7, #8
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bdb0      	pop	{r4, r5, r7, pc}
 800aa1a:	bf00      	nop
 800aa1c:	d0025800 	.word	0xd0025800
 800aa20:	d0000000 	.word	0xd0000000

0800aa24 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b082      	sub	sp, #8
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 800aa2c:	2109      	movs	r1, #9
 800aa2e:	205a      	movs	r0, #90	; 0x5a
 800aa30:	f7ff ffa0 	bl	800a974 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 800aa34:	2109      	movs	r1, #9
 800aa36:	2058      	movs	r0, #88	; 0x58
 800aa38:	f7ff ff9c 	bl	800a974 <__NVIC_SetPriority>
}
 800aa3c:	bf00      	nop
 800aa3e:	3708      	adds	r7, #8
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}

0800aa44 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b082      	sub	sp, #8
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 800aa4c:	205a      	movs	r0, #90	; 0x5a
 800aa4e:	f7ff ff4d 	bl	800a8ec <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 800aa52:	2058      	movs	r0, #88	; 0x58
 800aa54:	f7ff ff4a 	bl	800a8ec <__NVIC_EnableIRQ>
}
 800aa58:	bf00      	nop
 800aa5a:	3708      	adds	r7, #8
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}

0800aa60 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b082      	sub	sp, #8
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 800aa68:	205a      	movs	r0, #90	; 0x5a
 800aa6a:	f7ff ff5f 	bl	800a92c <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 800aa6e:	2058      	movs	r0, #88	; 0x58
 800aa70:	f7ff ff5c 	bl	800a92c <__NVIC_DisableIRQ>
}
 800aa74:	bf00      	nop
 800aa76:	3708      	adds	r7, #8
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b083      	sub	sp, #12
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 800aa84:	4b11      	ldr	r3, [pc, #68]	; (800aacc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800aa86:	68db      	ldr	r3, [r3, #12]
 800aa88:	b29b      	uxth	r3, r3
 800aa8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aa8e:	b29b      	uxth	r3, r3
 800aa90:	3b01      	subs	r3, #1
 800aa92:	b29a      	uxth	r2, r3
 800aa94:	4b0e      	ldr	r3, [pc, #56]	; (800aad0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800aa96:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800aa98:	4b0c      	ldr	r3, [pc, #48]	; (800aacc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800aa9a:	691b      	ldr	r3, [r3, #16]
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aaa2:	b29b      	uxth	r3, r3
 800aaa4:	3b01      	subs	r3, #1
 800aaa6:	b29a      	uxth	r2, r3
 800aaa8:	4b0a      	ldr	r3, [pc, #40]	; (800aad4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 800aaaa:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 800aaac:	4b08      	ldr	r3, [pc, #32]	; (800aad0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800aaae:	881a      	ldrh	r2, [r3, #0]
 800aab0:	4b06      	ldr	r3, [pc, #24]	; (800aacc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800aab2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 800aab4:	4b05      	ldr	r3, [pc, #20]	; (800aacc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800aab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aab8:	4a04      	ldr	r2, [pc, #16]	; (800aacc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800aaba:	f043 0301 	orr.w	r3, r3, #1
 800aabe:	6353      	str	r3, [r2, #52]	; 0x34
}
 800aac0:	bf00      	nop
 800aac2:	370c      	adds	r7, #12
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr
 800aacc:	40016800 	.word	0x40016800
 800aad0:	20001a2c 	.word	0x20001a2c
 800aad4:	20001a2e 	.word	0x20001a2e

0800aad8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 800aad8:	b480      	push	{r7}
 800aada:	b083      	sub	sp, #12
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 800aae0:	4b03      	ldr	r3, [pc, #12]	; (800aaf0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 800aae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	370c      	adds	r7, #12
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr
 800aaf0:	40016884 	.word	0x40016884

0800aaf4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b083      	sub	sp, #12
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 800aafe:	4a06      	ldr	r2, [pc, #24]	; (800ab18 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 800ab04:	4b05      	ldr	r3, [pc, #20]	; (800ab1c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 800ab06:	2201      	movs	r2, #1
 800ab08:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ab0a:	bf00      	nop
 800ab0c:	370c      	adds	r7, #12
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab14:	4770      	bx	lr
 800ab16:	bf00      	nop
 800ab18:	40016884 	.word	0x40016884
 800ab1c:	40016800 	.word	0x40016800

0800ab20 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b082      	sub	sp, #8
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6839      	ldr	r1, [r7, #0]
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f011 feb5 	bl	801c89e <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 800ab34:	bf00      	nop
 800ab36:	3708      	adds	r7, #8
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b082      	sub	sp, #8
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 800ab44:	4b1a      	ldr	r3, [pc, #104]	; (800abb0 <HAL_LTDC_LineEventCallback+0x74>)
 800ab46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab48:	4a1a      	ldr	r2, [pc, #104]	; (800abb4 <HAL_LTDC_LineEventCallback+0x78>)
 800ab4a:	8812      	ldrh	r2, [r2, #0]
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	bf0c      	ite	eq
 800ab50:	2301      	moveq	r3, #1
 800ab52:	2300      	movne	r3, #0
 800ab54:	b2db      	uxtb	r3, r3
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d017      	beq.n	800ab8a <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 800ab5a:	4b17      	ldr	r3, [pc, #92]	; (800abb8 <HAL_LTDC_LineEventCallback+0x7c>)
 800ab5c:	881b      	ldrh	r3, [r3, #0]
 800ab5e:	4619      	mov	r1, r3
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f009 fcff 	bl	8014564 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 800ab66:	f7fe fc23 	bl	80093b0 <_ZN8touchgfx3HAL11getInstanceEv>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f7ff feaa 	bl	800a8c6 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 800ab72:	f7fe fb1b 	bl	80091ac <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 800ab76:	f7fe fc1b 	bl	80093b0 <_ZN8touchgfx3HAL11getInstanceEv>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f012 fc05 	bl	801d38c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 800ab82:	2000      	movs	r0, #0
 800ab84:	f7fd ff96 	bl	8008ab4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 800ab88:	e00e      	b.n	800aba8 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 800ab8a:	4b0a      	ldr	r3, [pc, #40]	; (800abb4 <HAL_LTDC_LineEventCallback+0x78>)
 800ab8c:	881b      	ldrh	r3, [r3, #0]
 800ab8e:	4619      	mov	r1, r3
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f009 fce7 	bl	8014564 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 800ab96:	2000      	movs	r0, #0
 800ab98:	f7fd ff97 	bl	8008aca <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 800ab9c:	f7fe fc08 	bl	80093b0 <_ZN8touchgfx3HAL11getInstanceEv>
 800aba0:	4603      	mov	r3, r0
 800aba2:	4618      	mov	r0, r3
 800aba4:	f7ff fe71 	bl	800a88a <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 800aba8:	bf00      	nop
 800abaa:	3708      	adds	r7, #8
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}
 800abb0:	40016800 	.word	0x40016800
 800abb4:	20001a2c 	.word	0x20001a2c
 800abb8:	20001a2e 	.word	0x20001a2e

0800abbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800abc0:	f007 f9ae 	bl	8011f20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800abc4:	f000 f82e 	bl	800ac24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800abc8:	f000 fa52 	bl	800b070 <MX_GPIO_Init>
  MX_CRC_Init();
 800abcc:	f000 f8ae 	bl	800ad2c <MX_CRC_Init>
  MX_I2C3_Init();
 800abd0:	f000 f8f2 	bl	800adb8 <MX_I2C3_Init>
  MX_SPI5_Init();
 800abd4:	f000 f9be 	bl	800af54 <MX_SPI5_Init>
  MX_FMC_Init();
 800abd8:	f000 f9f2 	bl	800afc0 <MX_FMC_Init>
  MX_LTDC_Init();
 800abdc:	f000 f92c 	bl	800ae38 <MX_LTDC_Init>
  MX_DMA2D_Init();
 800abe0:	f000 f8b8 	bl	800ad54 <MX_DMA2D_Init>
  MX_TouchGFX_Init();
 800abe4:	f7fd fdf9 	bl	80087da <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */
	MX_DMA_Init();
 800abe8:	f000 fee6 	bl	800b9b8 <MX_DMA_Init>
	MX_TIM2_Init();
 800abec:	f000 fd0c 	bl	800b608 <MX_TIM2_Init>
	MX_TIM3_Init();
 800abf0:	f000 fd80 	bl	800b6f4 <MX_TIM3_Init>
	MX_TIM4_Init();
 800abf4:	f000 fdf4 	bl	800b7e0 <MX_TIM4_Init>
	MX_TIM5_Init();
 800abf8:	f000 fe68 	bl	800b8cc <MX_TIM5_Init>
//	HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_1, &yAxisPWMDuty_R, 1);
//	HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_1, &manipulatorPWMDuty, 2);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800abfc:	f00c fc56 	bl	80174ac <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of GUI_Task */
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 800ac00:	4a05      	ldr	r2, [pc, #20]	; (800ac18 <main+0x5c>)
 800ac02:	2100      	movs	r1, #0
 800ac04:	4805      	ldr	r0, [pc, #20]	; (800ac1c <main+0x60>)
 800ac06:	f00c fcbb 	bl	8017580 <osThreadNew>
 800ac0a:	4602      	mov	r2, r0
 800ac0c:	4b04      	ldr	r3, [pc, #16]	; (800ac20 <main+0x64>)
 800ac0e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800ac10:	f00c fc80 	bl	8017514 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800ac14:	e7fe      	b.n	800ac14 <main+0x58>
 800ac16:	bf00      	nop
 800ac18:	08030fdc 	.word	0x08030fdc
 800ac1c:	080087e7 	.word	0x080087e7
 800ac20:	20012e6c 	.word	0x20012e6c

0800ac24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b0a0      	sub	sp, #128	; 0x80
 800ac28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ac2a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ac2e:	2230      	movs	r2, #48	; 0x30
 800ac30:	2100      	movs	r1, #0
 800ac32:	4618      	mov	r0, r3
 800ac34:	f023 fcc0 	bl	802e5b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ac38:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	601a      	str	r2, [r3, #0]
 800ac40:	605a      	str	r2, [r3, #4]
 800ac42:	609a      	str	r2, [r3, #8]
 800ac44:	60da      	str	r2, [r3, #12]
 800ac46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ac48:	f107 030c 	add.w	r3, r7, #12
 800ac4c:	2230      	movs	r2, #48	; 0x30
 800ac4e:	2100      	movs	r1, #0
 800ac50:	4618      	mov	r0, r3
 800ac52:	f023 fcb1 	bl	802e5b8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800ac56:	2300      	movs	r3, #0
 800ac58:	60bb      	str	r3, [r7, #8]
 800ac5a:	4b32      	ldr	r3, [pc, #200]	; (800ad24 <SystemClock_Config+0x100>)
 800ac5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac5e:	4a31      	ldr	r2, [pc, #196]	; (800ad24 <SystemClock_Config+0x100>)
 800ac60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac64:	6413      	str	r3, [r2, #64]	; 0x40
 800ac66:	4b2f      	ldr	r3, [pc, #188]	; (800ad24 <SystemClock_Config+0x100>)
 800ac68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac6e:	60bb      	str	r3, [r7, #8]
 800ac70:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800ac72:	2300      	movs	r3, #0
 800ac74:	607b      	str	r3, [r7, #4]
 800ac76:	4b2c      	ldr	r3, [pc, #176]	; (800ad28 <SystemClock_Config+0x104>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	4a2b      	ldr	r2, [pc, #172]	; (800ad28 <SystemClock_Config+0x104>)
 800ac7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ac80:	6013      	str	r3, [r2, #0]
 800ac82:	4b29      	ldr	r3, [pc, #164]	; (800ad28 <SystemClock_Config+0x104>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ac8a:	607b      	str	r3, [r7, #4]
 800ac8c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800ac8e:	2301      	movs	r3, #1
 800ac90:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800ac92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ac96:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ac98:	2302      	movs	r3, #2
 800ac9a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800ac9c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800aca0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800aca2:	2308      	movs	r3, #8
 800aca4:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 336;
 800aca6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800acaa:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800acac:	2302      	movs	r3, #2
 800acae:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800acb0:	2304      	movs	r3, #4
 800acb2:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800acb4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800acb8:	4618      	mov	r0, r3
 800acba:	f009 fe23 	bl	8014904 <HAL_RCC_OscConfig>
 800acbe:	4603      	mov	r3, r0
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d001      	beq.n	800acc8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800acc4:	f000 fc98 	bl	800b5f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800acc8:	230f      	movs	r3, #15
 800acca:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800accc:	2302      	movs	r3, #2
 800acce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800acd0:	2300      	movs	r3, #0
 800acd2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800acd4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800acd8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800acda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800acde:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800ace0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ace4:	2105      	movs	r1, #5
 800ace6:	4618      	mov	r0, r3
 800ace8:	f00a f87c 	bl	8014de4 <HAL_RCC_ClockConfig>
 800acec:	4603      	mov	r3, r0
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d001      	beq.n	800acf6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800acf2:	f000 fc81 	bl	800b5f8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800acf6:	2308      	movs	r3, #8
 800acf8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800acfa:	23c0      	movs	r3, #192	; 0xc0
 800acfc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800acfe:	2304      	movs	r3, #4
 800ad00:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800ad02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ad06:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ad08:	f107 030c 	add.w	r3, r7, #12
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f00a fa79 	bl	8015204 <HAL_RCCEx_PeriphCLKConfig>
 800ad12:	4603      	mov	r3, r0
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d001      	beq.n	800ad1c <SystemClock_Config+0xf8>
  {
    Error_Handler();
 800ad18:	f000 fc6e 	bl	800b5f8 <Error_Handler>
  }
}
 800ad1c:	bf00      	nop
 800ad1e:	3780      	adds	r7, #128	; 0x80
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}
 800ad24:	40023800 	.word	0x40023800
 800ad28:	40007000 	.word	0x40007000

0800ad2c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800ad30:	4b06      	ldr	r3, [pc, #24]	; (800ad4c <MX_CRC_Init+0x20>)
 800ad32:	4a07      	ldr	r2, [pc, #28]	; (800ad50 <MX_CRC_Init+0x24>)
 800ad34:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800ad36:	4805      	ldr	r0, [pc, #20]	; (800ad4c <MX_CRC_Init+0x20>)
 800ad38:	f007 fa68 	bl	801220c <HAL_CRC_Init>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d001      	beq.n	800ad46 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800ad42:	f000 fc59 	bl	800b5f8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800ad46:	bf00      	nop
 800ad48:	bd80      	pop	{r7, pc}
 800ad4a:	bf00      	nop
 800ad4c:	20012c1c 	.word	0x20012c1c
 800ad50:	40023000 	.word	0x40023000

0800ad54 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800ad58:	4b15      	ldr	r3, [pc, #84]	; (800adb0 <MX_DMA2D_Init+0x5c>)
 800ad5a:	4a16      	ldr	r2, [pc, #88]	; (800adb4 <MX_DMA2D_Init+0x60>)
 800ad5c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800ad5e:	4b14      	ldr	r3, [pc, #80]	; (800adb0 <MX_DMA2D_Init+0x5c>)
 800ad60:	2200      	movs	r2, #0
 800ad62:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 800ad64:	4b12      	ldr	r3, [pc, #72]	; (800adb0 <MX_DMA2D_Init+0x5c>)
 800ad66:	2202      	movs	r2, #2
 800ad68:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800ad6a:	4b11      	ldr	r3, [pc, #68]	; (800adb0 <MX_DMA2D_Init+0x5c>)
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800ad70:	4b0f      	ldr	r3, [pc, #60]	; (800adb0 <MX_DMA2D_Init+0x5c>)
 800ad72:	2200      	movs	r2, #0
 800ad74:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 800ad76:	4b0e      	ldr	r3, [pc, #56]	; (800adb0 <MX_DMA2D_Init+0x5c>)
 800ad78:	2202      	movs	r2, #2
 800ad7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800ad7c:	4b0c      	ldr	r3, [pc, #48]	; (800adb0 <MX_DMA2D_Init+0x5c>)
 800ad7e:	2200      	movs	r2, #0
 800ad80:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800ad82:	4b0b      	ldr	r3, [pc, #44]	; (800adb0 <MX_DMA2D_Init+0x5c>)
 800ad84:	2200      	movs	r2, #0
 800ad86:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800ad88:	4809      	ldr	r0, [pc, #36]	; (800adb0 <MX_DMA2D_Init+0x5c>)
 800ad8a:	f007 fc3f 	bl	801260c <HAL_DMA2D_Init>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d001      	beq.n	800ad98 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800ad94:	f000 fc30 	bl	800b5f8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800ad98:	2101      	movs	r1, #1
 800ad9a:	4805      	ldr	r0, [pc, #20]	; (800adb0 <MX_DMA2D_Init+0x5c>)
 800ad9c:	f007 ff00 	bl	8012ba0 <HAL_DMA2D_ConfigLayer>
 800ada0:	4603      	mov	r3, r0
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d001      	beq.n	800adaa <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800ada6:	f000 fc27 	bl	800b5f8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800adaa:	bf00      	nop
 800adac:	bd80      	pop	{r7, pc}
 800adae:	bf00      	nop
 800adb0:	20012e70 	.word	0x20012e70
 800adb4:	4002b000 	.word	0x4002b000

0800adb8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800adbc:	4b1b      	ldr	r3, [pc, #108]	; (800ae2c <MX_I2C3_Init+0x74>)
 800adbe:	4a1c      	ldr	r2, [pc, #112]	; (800ae30 <MX_I2C3_Init+0x78>)
 800adc0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800adc2:	4b1a      	ldr	r3, [pc, #104]	; (800ae2c <MX_I2C3_Init+0x74>)
 800adc4:	4a1b      	ldr	r2, [pc, #108]	; (800ae34 <MX_I2C3_Init+0x7c>)
 800adc6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800adc8:	4b18      	ldr	r3, [pc, #96]	; (800ae2c <MX_I2C3_Init+0x74>)
 800adca:	2200      	movs	r2, #0
 800adcc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800adce:	4b17      	ldr	r3, [pc, #92]	; (800ae2c <MX_I2C3_Init+0x74>)
 800add0:	2200      	movs	r2, #0
 800add2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800add4:	4b15      	ldr	r3, [pc, #84]	; (800ae2c <MX_I2C3_Init+0x74>)
 800add6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800adda:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800addc:	4b13      	ldr	r3, [pc, #76]	; (800ae2c <MX_I2C3_Init+0x74>)
 800adde:	2200      	movs	r2, #0
 800ade0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800ade2:	4b12      	ldr	r3, [pc, #72]	; (800ae2c <MX_I2C3_Init+0x74>)
 800ade4:	2200      	movs	r2, #0
 800ade6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800ade8:	4b10      	ldr	r3, [pc, #64]	; (800ae2c <MX_I2C3_Init+0x74>)
 800adea:	2200      	movs	r2, #0
 800adec:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800adee:	4b0f      	ldr	r3, [pc, #60]	; (800ae2c <MX_I2C3_Init+0x74>)
 800adf0:	2200      	movs	r2, #0
 800adf2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800adf4:	480d      	ldr	r0, [pc, #52]	; (800ae2c <MX_I2C3_Init+0x74>)
 800adf6:	f008 f9c5 	bl	8013184 <HAL_I2C_Init>
 800adfa:	4603      	mov	r3, r0
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d001      	beq.n	800ae04 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800ae00:	f000 fbfa 	bl	800b5f8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 800ae04:	2110      	movs	r1, #16
 800ae06:	4809      	ldr	r0, [pc, #36]	; (800ae2c <MX_I2C3_Init+0x74>)
 800ae08:	f009 f96b 	bl	80140e2 <HAL_I2CEx_ConfigAnalogFilter>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d001      	beq.n	800ae16 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800ae12:	f000 fbf1 	bl	800b5f8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800ae16:	2100      	movs	r1, #0
 800ae18:	4804      	ldr	r0, [pc, #16]	; (800ae2c <MX_I2C3_Init+0x74>)
 800ae1a:	f009 f99e 	bl	801415a <HAL_I2CEx_ConfigDigitalFilter>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d001      	beq.n	800ae28 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800ae24:	f000 fbe8 	bl	800b5f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800ae28:	bf00      	nop
 800ae2a:	bd80      	pop	{r7, pc}
 800ae2c:	20012b30 	.word	0x20012b30
 800ae30:	40005c00 	.word	0x40005c00
 800ae34:	000186a0 	.word	0x000186a0

0800ae38 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b08e      	sub	sp, #56	; 0x38
 800ae3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800ae3e:	1d3b      	adds	r3, r7, #4
 800ae40:	2234      	movs	r2, #52	; 0x34
 800ae42:	2100      	movs	r1, #0
 800ae44:	4618      	mov	r0, r3
 800ae46:	f023 fbb7 	bl	802e5b8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800ae4a:	4b3e      	ldr	r3, [pc, #248]	; (800af44 <MX_LTDC_Init+0x10c>)
 800ae4c:	4a3e      	ldr	r2, [pc, #248]	; (800af48 <MX_LTDC_Init+0x110>)
 800ae4e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800ae50:	4b3c      	ldr	r3, [pc, #240]	; (800af44 <MX_LTDC_Init+0x10c>)
 800ae52:	2200      	movs	r2, #0
 800ae54:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800ae56:	4b3b      	ldr	r3, [pc, #236]	; (800af44 <MX_LTDC_Init+0x10c>)
 800ae58:	2200      	movs	r2, #0
 800ae5a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800ae5c:	4b39      	ldr	r3, [pc, #228]	; (800af44 <MX_LTDC_Init+0x10c>)
 800ae5e:	2200      	movs	r2, #0
 800ae60:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800ae62:	4b38      	ldr	r3, [pc, #224]	; (800af44 <MX_LTDC_Init+0x10c>)
 800ae64:	2200      	movs	r2, #0
 800ae66:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 800ae68:	4b36      	ldr	r3, [pc, #216]	; (800af44 <MX_LTDC_Init+0x10c>)
 800ae6a:	2209      	movs	r2, #9
 800ae6c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 800ae6e:	4b35      	ldr	r3, [pc, #212]	; (800af44 <MX_LTDC_Init+0x10c>)
 800ae70:	2201      	movs	r2, #1
 800ae72:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 800ae74:	4b33      	ldr	r3, [pc, #204]	; (800af44 <MX_LTDC_Init+0x10c>)
 800ae76:	221d      	movs	r2, #29
 800ae78:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 800ae7a:	4b32      	ldr	r3, [pc, #200]	; (800af44 <MX_LTDC_Init+0x10c>)
 800ae7c:	2203      	movs	r2, #3
 800ae7e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 800ae80:	4b30      	ldr	r3, [pc, #192]	; (800af44 <MX_LTDC_Init+0x10c>)
 800ae82:	f240 120d 	movw	r2, #269	; 0x10d
 800ae86:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 800ae88:	4b2e      	ldr	r3, [pc, #184]	; (800af44 <MX_LTDC_Init+0x10c>)
 800ae8a:	f240 1243 	movw	r2, #323	; 0x143
 800ae8e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 800ae90:	4b2c      	ldr	r3, [pc, #176]	; (800af44 <MX_LTDC_Init+0x10c>)
 800ae92:	f240 1217 	movw	r2, #279	; 0x117
 800ae96:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 800ae98:	4b2a      	ldr	r3, [pc, #168]	; (800af44 <MX_LTDC_Init+0x10c>)
 800ae9a:	f240 1247 	movw	r2, #327	; 0x147
 800ae9e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800aea0:	4b28      	ldr	r3, [pc, #160]	; (800af44 <MX_LTDC_Init+0x10c>)
 800aea2:	2200      	movs	r2, #0
 800aea4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800aea8:	4b26      	ldr	r3, [pc, #152]	; (800af44 <MX_LTDC_Init+0x10c>)
 800aeaa:	2200      	movs	r2, #0
 800aeac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800aeb0:	4b24      	ldr	r3, [pc, #144]	; (800af44 <MX_LTDC_Init+0x10c>)
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800aeb8:	4822      	ldr	r0, [pc, #136]	; (800af44 <MX_LTDC_Init+0x10c>)
 800aeba:	f009 f98d 	bl	80141d8 <HAL_LTDC_Init>
 800aebe:	4603      	mov	r3, r0
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d001      	beq.n	800aec8 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800aec4:	f000 fb98 	bl	800b5f8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800aec8:	2300      	movs	r3, #0
 800aeca:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 800aecc:	23f0      	movs	r3, #240	; 0xf0
 800aece:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800aed0:	2300      	movs	r3, #0
 800aed2:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 800aed4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800aed8:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800aeda:	2302      	movs	r3, #2
 800aedc:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800aede:	23ff      	movs	r3, #255	; 0xff
 800aee0:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800aee2:	2300      	movs	r3, #0
 800aee4:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800aee6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aeea:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800aeec:	2305      	movs	r3, #5
 800aeee:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 800aef0:	2300      	movs	r3, #0
 800aef2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 800aef4:	23f0      	movs	r3, #240	; 0xf0
 800aef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 800aef8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800aefc:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800aefe:	2300      	movs	r3, #0
 800af00:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800af04:	2300      	movs	r3, #0
 800af06:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800af0a:	2300      	movs	r3, #0
 800af0c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800af10:	1d3b      	adds	r3, r7, #4
 800af12:	2200      	movs	r2, #0
 800af14:	4619      	mov	r1, r3
 800af16:	480b      	ldr	r0, [pc, #44]	; (800af44 <MX_LTDC_Init+0x10c>)
 800af18:	f009 fae6 	bl	80144e8 <HAL_LTDC_ConfigLayer>
 800af1c:	4603      	mov	r3, r0
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d001      	beq.n	800af26 <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 800af22:	f000 fb69 	bl	800b5f8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */
    /*Select the device */
  LcdDrv = &ili9341_drv;
 800af26:	4b09      	ldr	r3, [pc, #36]	; (800af4c <MX_LTDC_Init+0x114>)
 800af28:	4a09      	ldr	r2, [pc, #36]	; (800af50 <MX_LTDC_Init+0x118>)
 800af2a:	601a      	str	r2, [r3, #0]
  /* LCD Init */
  LcdDrv->Init();
 800af2c:	4b07      	ldr	r3, [pc, #28]	; (800af4c <MX_LTDC_Init+0x114>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	4798      	blx	r3
  
  LcdDrv->DisplayOff();
 800af34:	4b05      	ldr	r3, [pc, #20]	; (800af4c <MX_LTDC_Init+0x114>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	68db      	ldr	r3, [r3, #12]
 800af3a:	4798      	blx	r3
  /* USER CODE END LTDC_Init 2 */

}
 800af3c:	bf00      	nop
 800af3e:	3738      	adds	r7, #56	; 0x38
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}
 800af44:	20012d04 	.word	0x20012d04
 800af48:	40016800 	.word	0x40016800
 800af4c:	20001a30 	.word	0x20001a30
 800af50:	20000028 	.word	0x20000028

0800af54 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800af58:	4b17      	ldr	r3, [pc, #92]	; (800afb8 <MX_SPI5_Init+0x64>)
 800af5a:	4a18      	ldr	r2, [pc, #96]	; (800afbc <MX_SPI5_Init+0x68>)
 800af5c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800af5e:	4b16      	ldr	r3, [pc, #88]	; (800afb8 <MX_SPI5_Init+0x64>)
 800af60:	f44f 7282 	mov.w	r2, #260	; 0x104
 800af64:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800af66:	4b14      	ldr	r3, [pc, #80]	; (800afb8 <MX_SPI5_Init+0x64>)
 800af68:	2200      	movs	r2, #0
 800af6a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800af6c:	4b12      	ldr	r3, [pc, #72]	; (800afb8 <MX_SPI5_Init+0x64>)
 800af6e:	2200      	movs	r2, #0
 800af70:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800af72:	4b11      	ldr	r3, [pc, #68]	; (800afb8 <MX_SPI5_Init+0x64>)
 800af74:	2200      	movs	r2, #0
 800af76:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800af78:	4b0f      	ldr	r3, [pc, #60]	; (800afb8 <MX_SPI5_Init+0x64>)
 800af7a:	2200      	movs	r2, #0
 800af7c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800af7e:	4b0e      	ldr	r3, [pc, #56]	; (800afb8 <MX_SPI5_Init+0x64>)
 800af80:	f44f 7200 	mov.w	r2, #512	; 0x200
 800af84:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800af86:	4b0c      	ldr	r3, [pc, #48]	; (800afb8 <MX_SPI5_Init+0x64>)
 800af88:	2218      	movs	r2, #24
 800af8a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800af8c:	4b0a      	ldr	r3, [pc, #40]	; (800afb8 <MX_SPI5_Init+0x64>)
 800af8e:	2200      	movs	r2, #0
 800af90:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800af92:	4b09      	ldr	r3, [pc, #36]	; (800afb8 <MX_SPI5_Init+0x64>)
 800af94:	2200      	movs	r2, #0
 800af96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800af98:	4b07      	ldr	r3, [pc, #28]	; (800afb8 <MX_SPI5_Init+0x64>)
 800af9a:	2200      	movs	r2, #0
 800af9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800af9e:	4b06      	ldr	r3, [pc, #24]	; (800afb8 <MX_SPI5_Init+0x64>)
 800afa0:	220a      	movs	r2, #10
 800afa2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800afa4:	4804      	ldr	r0, [pc, #16]	; (800afb8 <MX_SPI5_Init+0x64>)
 800afa6:	f00a fb6a 	bl	801567e <HAL_SPI_Init>
 800afaa:	4603      	mov	r3, r0
 800afac:	2b00      	cmp	r3, #0
 800afae:	d001      	beq.n	800afb4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800afb0:	f000 fb22 	bl	800b5f8 <Error_Handler>
  
  

  /* USER CODE END SPI5_Init 2 */

}
 800afb4:	bf00      	nop
 800afb6:	bd80      	pop	{r7, pc}
 800afb8:	20012b84 	.word	0x20012b84
 800afbc:	40015000 	.word	0x40015000

0800afc0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b08c      	sub	sp, #48	; 0x30
 800afc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800afc6:	f107 0314 	add.w	r3, r7, #20
 800afca:	2200      	movs	r2, #0
 800afcc:	601a      	str	r2, [r3, #0]
 800afce:	605a      	str	r2, [r3, #4]
 800afd0:	609a      	str	r2, [r3, #8]
 800afd2:	60da      	str	r2, [r3, #12]
 800afd4:	611a      	str	r2, [r3, #16]
 800afd6:	615a      	str	r2, [r3, #20]
 800afd8:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800afda:	4b23      	ldr	r3, [pc, #140]	; (800b068 <MX_FMC_Init+0xa8>)
 800afdc:	4a23      	ldr	r2, [pc, #140]	; (800b06c <MX_FMC_Init+0xac>)
 800afde:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800afe0:	4b21      	ldr	r3, [pc, #132]	; (800b068 <MX_FMC_Init+0xa8>)
 800afe2:	2201      	movs	r2, #1
 800afe4:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800afe6:	4b20      	ldr	r3, [pc, #128]	; (800b068 <MX_FMC_Init+0xa8>)
 800afe8:	2200      	movs	r2, #0
 800afea:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800afec:	4b1e      	ldr	r3, [pc, #120]	; (800b068 <MX_FMC_Init+0xa8>)
 800afee:	2204      	movs	r2, #4
 800aff0:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800aff2:	4b1d      	ldr	r3, [pc, #116]	; (800b068 <MX_FMC_Init+0xa8>)
 800aff4:	2210      	movs	r2, #16
 800aff6:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800aff8:	4b1b      	ldr	r3, [pc, #108]	; (800b068 <MX_FMC_Init+0xa8>)
 800affa:	2240      	movs	r2, #64	; 0x40
 800affc:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800affe:	4b1a      	ldr	r3, [pc, #104]	; (800b068 <MX_FMC_Init+0xa8>)
 800b000:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800b004:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800b006:	4b18      	ldr	r3, [pc, #96]	; (800b068 <MX_FMC_Init+0xa8>)
 800b008:	2200      	movs	r2, #0
 800b00a:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800b00c:	4b16      	ldr	r3, [pc, #88]	; (800b068 <MX_FMC_Init+0xa8>)
 800b00e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b012:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800b014:	4b14      	ldr	r3, [pc, #80]	; (800b068 <MX_FMC_Init+0xa8>)
 800b016:	2200      	movs	r2, #0
 800b018:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 800b01a:	4b13      	ldr	r3, [pc, #76]	; (800b068 <MX_FMC_Init+0xa8>)
 800b01c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b020:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800b022:	2302      	movs	r3, #2
 800b024:	617b      	str	r3, [r7, #20]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800b026:	2307      	movs	r3, #7
 800b028:	61bb      	str	r3, [r7, #24]
  SdramTiming.SelfRefreshTime = 4;
 800b02a:	2304      	movs	r3, #4
 800b02c:	61fb      	str	r3, [r7, #28]
  SdramTiming.RowCycleDelay = 7;
 800b02e:	2307      	movs	r3, #7
 800b030:	623b      	str	r3, [r7, #32]
  SdramTiming.WriteRecoveryTime = 3;
 800b032:	2303      	movs	r3, #3
 800b034:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.RPDelay = 2;
 800b036:	2302      	movs	r3, #2
 800b038:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.RCDDelay = 2;
 800b03a:	2302      	movs	r3, #2
 800b03c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800b03e:	f107 0314 	add.w	r3, r7, #20
 800b042:	4619      	mov	r1, r3
 800b044:	4808      	ldr	r0, [pc, #32]	; (800b068 <MX_FMC_Init+0xa8>)
 800b046:	f00a fa9b 	bl	8015580 <HAL_SDRAM_Init>
 800b04a:	4603      	mov	r3, r0
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d001      	beq.n	800b054 <MX_FMC_Init+0x94>
  {
    Error_Handler( );
 800b050:	f000 fad2 	bl	800b5f8 <Error_Handler>
  /* USER CODE BEGIN FMC_Init 2 */
  
  FMC_SDRAM_CommandTypeDef command;
  
  /* Program the SDRAM external device */
  BSP_SDRAM_Initialization_Sequence(&hsdram1, &command);
 800b054:	1d3b      	adds	r3, r7, #4
 800b056:	4619      	mov	r1, r3
 800b058:	4803      	ldr	r0, [pc, #12]	; (800b068 <MX_FMC_Init+0xa8>)
 800b05a:	f000 f8b7 	bl	800b1cc <BSP_SDRAM_Initialization_Sequence>
  /* USER CODE END FMC_Init 2 */
}
 800b05e:	bf00      	nop
 800b060:	3730      	adds	r7, #48	; 0x30
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}
 800b066:	bf00      	nop
 800b068:	20012f50 	.word	0x20012f50
 800b06c:	a0000140 	.word	0xa0000140

0800b070 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b08e      	sub	sp, #56	; 0x38
 800b074:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b076:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b07a:	2200      	movs	r2, #0
 800b07c:	601a      	str	r2, [r3, #0]
 800b07e:	605a      	str	r2, [r3, #4]
 800b080:	609a      	str	r2, [r3, #8]
 800b082:	60da      	str	r2, [r3, #12]
 800b084:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800b086:	2300      	movs	r3, #0
 800b088:	623b      	str	r3, [r7, #32]
 800b08a:	4b4d      	ldr	r3, [pc, #308]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b08c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b08e:	4a4c      	ldr	r2, [pc, #304]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b090:	f043 0320 	orr.w	r3, r3, #32
 800b094:	6313      	str	r3, [r2, #48]	; 0x30
 800b096:	4b4a      	ldr	r3, [pc, #296]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b09a:	f003 0320 	and.w	r3, r3, #32
 800b09e:	623b      	str	r3, [r7, #32]
 800b0a0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	61fb      	str	r3, [r7, #28]
 800b0a6:	4b46      	ldr	r3, [pc, #280]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b0a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0aa:	4a45      	ldr	r2, [pc, #276]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b0ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0b0:	6313      	str	r3, [r2, #48]	; 0x30
 800b0b2:	4b43      	ldr	r3, [pc, #268]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b0b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0ba:	61fb      	str	r3, [r7, #28]
 800b0bc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b0be:	2300      	movs	r3, #0
 800b0c0:	61bb      	str	r3, [r7, #24]
 800b0c2:	4b3f      	ldr	r3, [pc, #252]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b0c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0c6:	4a3e      	ldr	r2, [pc, #248]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b0c8:	f043 0304 	orr.w	r3, r3, #4
 800b0cc:	6313      	str	r3, [r2, #48]	; 0x30
 800b0ce:	4b3c      	ldr	r3, [pc, #240]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b0d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0d2:	f003 0304 	and.w	r3, r3, #4
 800b0d6:	61bb      	str	r3, [r7, #24]
 800b0d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b0da:	2300      	movs	r3, #0
 800b0dc:	617b      	str	r3, [r7, #20]
 800b0de:	4b38      	ldr	r3, [pc, #224]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b0e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0e2:	4a37      	ldr	r2, [pc, #220]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b0e4:	f043 0301 	orr.w	r3, r3, #1
 800b0e8:	6313      	str	r3, [r2, #48]	; 0x30
 800b0ea:	4b35      	ldr	r3, [pc, #212]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b0ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0ee:	f003 0301 	and.w	r3, r3, #1
 800b0f2:	617b      	str	r3, [r7, #20]
 800b0f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	613b      	str	r3, [r7, #16]
 800b0fa:	4b31      	ldr	r3, [pc, #196]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b0fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0fe:	4a30      	ldr	r2, [pc, #192]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b100:	f043 0302 	orr.w	r3, r3, #2
 800b104:	6313      	str	r3, [r2, #48]	; 0x30
 800b106:	4b2e      	ldr	r3, [pc, #184]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b10a:	f003 0302 	and.w	r3, r3, #2
 800b10e:	613b      	str	r3, [r7, #16]
 800b110:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800b112:	2300      	movs	r3, #0
 800b114:	60fb      	str	r3, [r7, #12]
 800b116:	4b2a      	ldr	r3, [pc, #168]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b11a:	4a29      	ldr	r2, [pc, #164]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b11c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b120:	6313      	str	r3, [r2, #48]	; 0x30
 800b122:	4b27      	ldr	r3, [pc, #156]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b12a:	60fb      	str	r3, [r7, #12]
 800b12c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800b12e:	2300      	movs	r3, #0
 800b130:	60bb      	str	r3, [r7, #8]
 800b132:	4b23      	ldr	r3, [pc, #140]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b136:	4a22      	ldr	r2, [pc, #136]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b138:	f043 0310 	orr.w	r3, r3, #16
 800b13c:	6313      	str	r3, [r2, #48]	; 0x30
 800b13e:	4b20      	ldr	r3, [pc, #128]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b142:	f003 0310 	and.w	r3, r3, #16
 800b146:	60bb      	str	r3, [r7, #8]
 800b148:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b14a:	2300      	movs	r3, #0
 800b14c:	607b      	str	r3, [r7, #4]
 800b14e:	4b1c      	ldr	r3, [pc, #112]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b152:	4a1b      	ldr	r2, [pc, #108]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b154:	f043 0308 	orr.w	r3, r3, #8
 800b158:	6313      	str	r3, [r2, #48]	; 0x30
 800b15a:	4b19      	ldr	r3, [pc, #100]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b15c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b15e:	f003 0308 	and.w	r3, r3, #8
 800b162:	607b      	str	r3, [r7, #4]
 800b164:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800b166:	2200      	movs	r2, #0
 800b168:	2104      	movs	r1, #4
 800b16a:	4816      	ldr	r0, [pc, #88]	; (800b1c4 <MX_GPIO_Init+0x154>)
 800b16c:	f007 fff0 	bl	8013150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 800b170:	2200      	movs	r2, #0
 800b172:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800b176:	4814      	ldr	r0, [pc, #80]	; (800b1c8 <MX_GPIO_Init+0x158>)
 800b178:	f007 ffea 	bl	8013150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800b17c:	2304      	movs	r3, #4
 800b17e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b180:	2301      	movs	r3, #1
 800b182:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b184:	2300      	movs	r3, #0
 800b186:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b188:	2302      	movs	r3, #2
 800b18a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b18c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b190:	4619      	mov	r1, r3
 800b192:	480c      	ldr	r0, [pc, #48]	; (800b1c4 <MX_GPIO_Init+0x154>)
 800b194:	f007 fe32 	bl	8012dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800b198:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800b19c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b19e:	2301      	movs	r3, #1
 800b1a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b1a6:	2302      	movs	r3, #2
 800b1a8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b1aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b1ae:	4619      	mov	r1, r3
 800b1b0:	4805      	ldr	r0, [pc, #20]	; (800b1c8 <MX_GPIO_Init+0x158>)
 800b1b2:	f007 fe23 	bl	8012dfc <HAL_GPIO_Init>

}
 800b1b6:	bf00      	nop
 800b1b8:	3738      	adds	r7, #56	; 0x38
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}
 800b1be:	bf00      	nop
 800b1c0:	40023800 	.word	0x40023800
 800b1c4:	40020800 	.word	0x40020800
 800b1c8:	40020c00 	.word	0x40020c00

0800b1cc <BSP_SDRAM_Initialization_Sequence>:
  * @param  hsdram: SDRAM handle
  * @param  Command: Pointer to SDRAM command structure
  * @retval None
  */
static void BSP_SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b084      	sub	sp, #16
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	6039      	str	r1, [r7, #0]
 __IO uint32_t tmpmrd =0;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command->CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	2201      	movs	r2, #1
 800b1de:	601a      	str	r2, [r3, #0]
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	2208      	movs	r2, #8
 800b1e4:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber       = 1;
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	2201      	movs	r2, #1
 800b1ea:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition  = 0;
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800b1f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b1f6:	6839      	ldr	r1, [r7, #0]
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f00a f9f5 	bl	80155e8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800b1fe:	2001      	movs	r0, #1
 800b200:	f006 fed0 	bl	8011fa4 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command->CommandMode             = FMC_SDRAM_CMD_PALL;
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	2202      	movs	r2, #2
 800b208:	601a      	str	r2, [r3, #0]
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	2208      	movs	r2, #8
 800b20e:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber       = 1;
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	2201      	movs	r2, #1
 800b214:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition  = 0;
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	2200      	movs	r2, #0
 800b21a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);  
 800b21c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b220:	6839      	ldr	r1, [r7, #0]
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f00a f9e0 	bl	80155e8 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command->CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	2203      	movs	r2, #3
 800b22c:	601a      	str	r2, [r3, #0]
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	2208      	movs	r2, #8
 800b232:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber       = 4;
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	2204      	movs	r2, #4
 800b238:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition  = 0;
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	2200      	movs	r2, #0
 800b23e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800b240:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b244:	6839      	ldr	r1, [r7, #0]
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f00a f9ce 	bl	80155e8 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800b24c:	f44f 730c 	mov.w	r3, #560	; 0x230
 800b250:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command->CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	2204      	movs	r2, #4
 800b256:	601a      	str	r2, [r3, #0]
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	2208      	movs	r2, #8
 800b25c:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber       = 1;
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	2201      	movs	r2, #1
 800b262:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition  = tmpmrd;
 800b264:	68fa      	ldr	r2, [r7, #12]
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800b26a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b26e:	6839      	ldr	r1, [r7, #0]
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f00a f9b9 	bl	80155e8 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT); 
 800b276:	f240 516a 	movw	r1, #1386	; 0x56a
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f00a f9df 	bl	801563e <HAL_SDRAM_ProgramRefreshRate>
}
 800b280:	bf00      	nop
 800b282:	3710      	adds	r7, #16
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}

0800b288 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 800b288:	b480      	push	{r7}
 800b28a:	af00      	add	r7, sp, #0
  //Dummy function called when initializing to stmpe811 to setup the i2c.
  //This is done with cubmx and is therfore not done here.
}
 800b28c:	bf00      	nop
 800b28e:	46bd      	mov	sp, r7
 800b290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b294:	4770      	bx	lr

0800b296 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 800b296:	b480      	push	{r7}
 800b298:	af00      	add	r7, sp, #0
  //Dummy function called when initializing to stmpe811 to setup interupt for the i2c.
  //The interupt is not used in our case, therefore nothing is done here.
}
 800b29a:	bf00      	nop
 800b29c:	46bd      	mov	sp, r7
 800b29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a2:	4770      	bx	lr

0800b2a4 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b082      	sub	sp, #8
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	71fb      	strb	r3, [r7, #7]
 800b2ae:	460b      	mov	r3, r1
 800b2b0:	71bb      	strb	r3, [r7, #6]
 800b2b2:	4613      	mov	r3, r2
 800b2b4:	717b      	strb	r3, [r7, #5]
  I2C3_WriteData(Addr, Reg, Value);
 800b2b6:	797a      	ldrb	r2, [r7, #5]
 800b2b8:	79b9      	ldrb	r1, [r7, #6]
 800b2ba:	79fb      	ldrb	r3, [r7, #7]
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f000 f839 	bl	800b334 <I2C3_WriteData>
}
 800b2c2:	bf00      	nop
 800b2c4:	3708      	adds	r7, #8
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}

0800b2ca <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 800b2ca:	b580      	push	{r7, lr}
 800b2cc:	b082      	sub	sp, #8
 800b2ce:	af00      	add	r7, sp, #0
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	460a      	mov	r2, r1
 800b2d4:	71fb      	strb	r3, [r7, #7]
 800b2d6:	4613      	mov	r3, r2
 800b2d8:	71bb      	strb	r3, [r7, #6]
  return I2C3_ReadData(Addr, Reg);
 800b2da:	79ba      	ldrb	r2, [r7, #6]
 800b2dc:	79fb      	ldrb	r3, [r7, #7]
 800b2de:	4611      	mov	r1, r2
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f000 f84b 	bl	800b37c <I2C3_ReadData>
 800b2e6:	4603      	mov	r3, r0
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	3708      	adds	r7, #8
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}

0800b2f0 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b082      	sub	sp, #8
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	603a      	str	r2, [r7, #0]
 800b2f8:	461a      	mov	r2, r3
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	71fb      	strb	r3, [r7, #7]
 800b2fe:	460b      	mov	r3, r1
 800b300:	71bb      	strb	r3, [r7, #6]
 800b302:	4613      	mov	r3, r2
 800b304:	80bb      	strh	r3, [r7, #4]
 return I2C3_ReadBuffer(Addr, Reg, pBuffer, Length);
 800b306:	88bb      	ldrh	r3, [r7, #4]
 800b308:	79b9      	ldrb	r1, [r7, #6]
 800b30a:	79f8      	ldrb	r0, [r7, #7]
 800b30c:	683a      	ldr	r2, [r7, #0]
 800b30e:	f000 f85d 	bl	800b3cc <I2C3_ReadBuffer>
 800b312:	4603      	mov	r3, r0
 800b314:	b29b      	uxth	r3, r3
}
 800b316:	4618      	mov	r0, r3
 800b318:	3708      	adds	r7, #8
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}

0800b31e <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 800b31e:	b580      	push	{r7, lr}
 800b320:	b082      	sub	sp, #8
 800b322:	af00      	add	r7, sp, #0
 800b324:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f006 fe3c 	bl	8011fa4 <HAL_Delay>
}
 800b32c:	bf00      	nop
 800b32e:	3708      	adds	r7, #8
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}

0800b334 <I2C3_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2C3_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b088      	sub	sp, #32
 800b338:	af04      	add	r7, sp, #16
 800b33a:	4603      	mov	r3, r0
 800b33c:	71fb      	strb	r3, [r7, #7]
 800b33e:	460b      	mov	r3, r1
 800b340:	71bb      	strb	r3, [r7, #6]
 800b342:	4613      	mov	r3, r2
 800b344:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 800b346:	2300      	movs	r3, #0
 800b348:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2c3Timeout); 
 800b34a:	79fb      	ldrb	r3, [r7, #7]
 800b34c:	b299      	uxth	r1, r3
 800b34e:	79bb      	ldrb	r3, [r7, #6]
 800b350:	b29a      	uxth	r2, r3
 800b352:	4b08      	ldr	r3, [pc, #32]	; (800b374 <I2C3_WriteData+0x40>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	9302      	str	r3, [sp, #8]
 800b358:	2301      	movs	r3, #1
 800b35a:	9301      	str	r3, [sp, #4]
 800b35c:	1d7b      	adds	r3, r7, #5
 800b35e:	9300      	str	r3, [sp, #0]
 800b360:	2301      	movs	r3, #1
 800b362:	4805      	ldr	r0, [pc, #20]	; (800b378 <I2C3_WriteData+0x44>)
 800b364:	f008 f846 	bl	80133f4 <HAL_I2C_Mem_Write>
 800b368:	4603      	mov	r3, r0
 800b36a:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK)
  {
    /* Re-Initialize the BUS */
    //I2Cx_Error();
  }        
}
 800b36c:	bf00      	nop
 800b36e:	3710      	adds	r7, #16
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}
 800b374:	2000001c 	.word	0x2000001c
 800b378:	20012b30 	.word	0x20012b30

0800b37c <I2C3_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2C3_ReadData(uint8_t Addr, uint8_t Reg)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b088      	sub	sp, #32
 800b380:	af04      	add	r7, sp, #16
 800b382:	4603      	mov	r3, r0
 800b384:	460a      	mov	r2, r1
 800b386:	71fb      	strb	r3, [r7, #7]
 800b388:	4613      	mov	r3, r2
 800b38a:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800b38c:	2300      	movs	r3, #0
 800b38e:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 800b390:	2300      	movs	r3, #0
 800b392:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2c3Timeout);
 800b394:	79fb      	ldrb	r3, [r7, #7]
 800b396:	b299      	uxth	r1, r3
 800b398:	79bb      	ldrb	r3, [r7, #6]
 800b39a:	b29a      	uxth	r2, r3
 800b39c:	4b09      	ldr	r3, [pc, #36]	; (800b3c4 <I2C3_ReadData+0x48>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	9302      	str	r3, [sp, #8]
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	9301      	str	r3, [sp, #4]
 800b3a6:	f107 030e 	add.w	r3, r7, #14
 800b3aa:	9300      	str	r3, [sp, #0]
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	4806      	ldr	r0, [pc, #24]	; (800b3c8 <I2C3_ReadData+0x4c>)
 800b3b0:	f008 f91a 	bl	80135e8 <HAL_I2C_Mem_Read>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	73fb      	strb	r3, [r7, #15]
  {
    /* Re-Initialize the BUS */
    //I2Cx_Error();
  
  }
  return value;
 800b3b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3710      	adds	r7, #16
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}
 800b3c2:	bf00      	nop
 800b3c4:	2000001c 	.word	0x2000001c
 800b3c8:	20012b30 	.word	0x20012b30

0800b3cc <I2C3_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2C3_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b088      	sub	sp, #32
 800b3d0:	af04      	add	r7, sp, #16
 800b3d2:	603a      	str	r2, [r7, #0]
 800b3d4:	461a      	mov	r2, r3
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	71fb      	strb	r3, [r7, #7]
 800b3da:	460b      	mov	r3, r1
 800b3dc:	71bb      	strb	r3, [r7, #6]
 800b3de:	4613      	mov	r3, r2
 800b3e0:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2c3Timeout);
 800b3e6:	79fb      	ldrb	r3, [r7, #7]
 800b3e8:	b299      	uxth	r1, r3
 800b3ea:	79bb      	ldrb	r3, [r7, #6]
 800b3ec:	b29a      	uxth	r2, r3
 800b3ee:	4b0b      	ldr	r3, [pc, #44]	; (800b41c <I2C3_ReadBuffer+0x50>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	9302      	str	r3, [sp, #8]
 800b3f4:	88bb      	ldrh	r3, [r7, #4]
 800b3f6:	9301      	str	r3, [sp, #4]
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	9300      	str	r3, [sp, #0]
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	4808      	ldr	r0, [pc, #32]	; (800b420 <I2C3_ReadBuffer+0x54>)
 800b400:	f008 f8f2 	bl	80135e8 <HAL_I2C_Mem_Read>
 800b404:	4603      	mov	r3, r0
 800b406:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 800b408:	7bfb      	ldrb	r3, [r7, #15]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d101      	bne.n	800b412 <I2C3_ReadBuffer+0x46>
  {
    return 0;
 800b40e:	2300      	movs	r3, #0
 800b410:	e000      	b.n	800b414 <I2C3_ReadBuffer+0x48>
  else
  {
    /* Re-Initialize the BUS */
    //I2Cx_Error();

    return 1;
 800b412:	2301      	movs	r3, #1
  }
}
 800b414:	4618      	mov	r0, r3
 800b416:	3710      	adds	r7, #16
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}
 800b41c:	2000001c 	.word	0x2000001c
 800b420:	20012b30 	.word	0x20012b30

0800b424 <SPI5_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPI5_Read(uint8_t ReadSize)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b084      	sub	sp, #16
 800b428:	af00      	add	r7, sp, #0
 800b42a:	4603      	mov	r3, r0
 800b42c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800b42e:	2300      	movs	r3, #0
 800b430:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&hspi5, (uint8_t*) &readvalue, ReadSize, Spi5Timeout);
 800b432:	79fb      	ldrb	r3, [r7, #7]
 800b434:	b29a      	uxth	r2, r3
 800b436:	4b09      	ldr	r3, [pc, #36]	; (800b45c <SPI5_Read+0x38>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f107 0108 	add.w	r1, r7, #8
 800b43e:	4808      	ldr	r0, [pc, #32]	; (800b460 <SPI5_Read+0x3c>)
 800b440:	f00a fab5 	bl	80159ae <HAL_SPI_Receive>
 800b444:	4603      	mov	r3, r0
 800b446:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800b448:	7bfb      	ldrb	r3, [r7, #15]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d001      	beq.n	800b452 <SPI5_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPI5_Error();
 800b44e:	f000 f827 	bl	800b4a0 <SPI5_Error>
  }
  
  return readvalue;
 800b452:	68bb      	ldr	r3, [r7, #8]
}
 800b454:	4618      	mov	r0, r3
 800b456:	3710      	adds	r7, #16
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}
 800b45c:	20000020 	.word	0x20000020
 800b460:	20012b84 	.word	0x20012b84

0800b464 <SPI5_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI5_Write(uint16_t Value)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b084      	sub	sp, #16
 800b468:	af00      	add	r7, sp, #0
 800b46a:	4603      	mov	r3, r0
 800b46c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800b46e:	2300      	movs	r3, #0
 800b470:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&hspi5, (uint8_t*) &Value, 1, Spi5Timeout);
 800b472:	4b09      	ldr	r3, [pc, #36]	; (800b498 <SPI5_Write+0x34>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	1db9      	adds	r1, r7, #6
 800b478:	2201      	movs	r2, #1
 800b47a:	4808      	ldr	r0, [pc, #32]	; (800b49c <SPI5_Write+0x38>)
 800b47c:	f00a f963 	bl	8015746 <HAL_SPI_Transmit>
 800b480:	4603      	mov	r3, r0
 800b482:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800b484:	7bfb      	ldrb	r3, [r7, #15]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d001      	beq.n	800b48e <SPI5_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI5_Error();
 800b48a:	f000 f809 	bl	800b4a0 <SPI5_Error>
  }
}
 800b48e:	bf00      	nop
 800b490:	3710      	adds	r7, #16
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
 800b496:	bf00      	nop
 800b498:	20000020 	.word	0x20000020
 800b49c:	20012b84 	.word	0x20012b84

0800b4a0 <SPI5_Error>:

/**
  * @brief  SPI5 error treatment function.
  */
static void SPI5_Error(void)
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  //HAL_SPI_DeInit(&SpiHandle);
  
  /* Re- Initialize the SPI communication BUS */
  //SPIx_Init();
}
 800b4a4:	bf00      	nop
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ac:	4770      	bx	lr
	...

0800b4b0 <LCD_IO_Init>:

void LCD_IO_Init(void)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	af00      	add	r7, sp, #0
  /* Set or Reset the control line */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	2104      	movs	r1, #4
 800b4b8:	4804      	ldr	r0, [pc, #16]	; (800b4cc <LCD_IO_Init+0x1c>)
 800b4ba:	f007 fe49 	bl	8013150 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800b4be:	2201      	movs	r2, #1
 800b4c0:	2104      	movs	r1, #4
 800b4c2:	4802      	ldr	r0, [pc, #8]	; (800b4cc <LCD_IO_Init+0x1c>)
 800b4c4:	f007 fe44 	bl	8013150 <HAL_GPIO_WritePin>
}
 800b4c8:	bf00      	nop
 800b4ca:	bd80      	pop	{r7, pc}
 800b4cc:	40020800 	.word	0x40020800

0800b4d0 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b082      	sub	sp, #8
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800b4da:	2201      	movs	r2, #1
 800b4dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b4e0:	480a      	ldr	r0, [pc, #40]	; (800b50c <LCD_IO_WriteData+0x3c>)
 800b4e2:	f007 fe35 	bl	8013150 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	2104      	movs	r1, #4
 800b4ea:	4809      	ldr	r0, [pc, #36]	; (800b510 <LCD_IO_WriteData+0x40>)
 800b4ec:	f007 fe30 	bl	8013150 <HAL_GPIO_WritePin>
  SPI5_Write(RegValue);
 800b4f0:	88fb      	ldrh	r3, [r7, #6]
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f7ff ffb6 	bl	800b464 <SPI5_Write>
  
  /* Deselect: Chip Select high */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800b4f8:	2201      	movs	r2, #1
 800b4fa:	2104      	movs	r1, #4
 800b4fc:	4804      	ldr	r0, [pc, #16]	; (800b510 <LCD_IO_WriteData+0x40>)
 800b4fe:	f007 fe27 	bl	8013150 <HAL_GPIO_WritePin>
}
 800b502:	bf00      	nop
 800b504:	3708      	adds	r7, #8
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}
 800b50a:	bf00      	nop
 800b50c:	40020c00 	.word	0x40020c00
 800b510:	40020800 	.word	0x40020800

0800b514 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b082      	sub	sp, #8
 800b518:	af00      	add	r7, sp, #0
 800b51a:	4603      	mov	r3, r0
 800b51c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800b51e:	2200      	movs	r2, #0
 800b520:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b524:	480a      	ldr	r0, [pc, #40]	; (800b550 <LCD_IO_WriteReg+0x3c>)
 800b526:	f007 fe13 	bl	8013150 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800b52a:	2200      	movs	r2, #0
 800b52c:	2104      	movs	r1, #4
 800b52e:	4809      	ldr	r0, [pc, #36]	; (800b554 <LCD_IO_WriteReg+0x40>)
 800b530:	f007 fe0e 	bl	8013150 <HAL_GPIO_WritePin>
  SPI5_Write(Reg);
 800b534:	79fb      	ldrb	r3, [r7, #7]
 800b536:	b29b      	uxth	r3, r3
 800b538:	4618      	mov	r0, r3
 800b53a:	f7ff ff93 	bl	800b464 <SPI5_Write>
  
  /* Deselect: Chip Select high */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800b53e:	2201      	movs	r2, #1
 800b540:	2104      	movs	r1, #4
 800b542:	4804      	ldr	r0, [pc, #16]	; (800b554 <LCD_IO_WriteReg+0x40>)
 800b544:	f007 fe04 	bl	8013150 <HAL_GPIO_WritePin>
}
 800b548:	bf00      	nop
 800b54a:	3708      	adds	r7, #8
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}
 800b550:	40020c00 	.word	0x40020c00
 800b554:	40020800 	.word	0x40020800

0800b558 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b084      	sub	sp, #16
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	4603      	mov	r3, r0
 800b560:	460a      	mov	r2, r1
 800b562:	80fb      	strh	r3, [r7, #6]
 800b564:	4613      	mov	r3, r2
 800b566:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 800b568:	2300      	movs	r3, #0
 800b56a:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800b56c:	2200      	movs	r2, #0
 800b56e:	2104      	movs	r1, #4
 800b570:	4810      	ldr	r0, [pc, #64]	; (800b5b4 <LCD_IO_ReadData+0x5c>)
 800b572:	f007 fded 	bl	8013150 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800b576:	2200      	movs	r2, #0
 800b578:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b57c:	480e      	ldr	r0, [pc, #56]	; (800b5b8 <LCD_IO_ReadData+0x60>)
 800b57e:	f007 fde7 	bl	8013150 <HAL_GPIO_WritePin>
  
  SPI5_Write(RegValue);
 800b582:	88fb      	ldrh	r3, [r7, #6]
 800b584:	4618      	mov	r0, r3
 800b586:	f7ff ff6d 	bl	800b464 <SPI5_Write>
  
  readvalue = SPI5_Read(ReadSize);
 800b58a:	797b      	ldrb	r3, [r7, #5]
 800b58c:	4618      	mov	r0, r3
 800b58e:	f7ff ff49 	bl	800b424 <SPI5_Read>
 800b592:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800b594:	2201      	movs	r2, #1
 800b596:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b59a:	4807      	ldr	r0, [pc, #28]	; (800b5b8 <LCD_IO_ReadData+0x60>)
 800b59c:	f007 fdd8 	bl	8013150 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800b5a0:	2201      	movs	r2, #1
 800b5a2:	2104      	movs	r1, #4
 800b5a4:	4803      	ldr	r0, [pc, #12]	; (800b5b4 <LCD_IO_ReadData+0x5c>)
 800b5a6:	f007 fdd3 	bl	8013150 <HAL_GPIO_WritePin>
  
  return readvalue;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3710      	adds	r7, #16
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}
 800b5b4:	40020800 	.word	0x40020800
 800b5b8:	40020c00 	.word	0x40020c00

0800b5bc <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b082      	sub	sp, #8
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f006 fced 	bl	8011fa4 <HAL_Delay>
}
 800b5ca:	bf00      	nop
 800b5cc:	3708      	adds	r7, #8
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}
	...

0800b5d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b082      	sub	sp, #8
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	4a04      	ldr	r2, [pc, #16]	; (800b5f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800b5e2:	4293      	cmp	r3, r2
 800b5e4:	d101      	bne.n	800b5ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800b5e6:	f006 fcbd 	bl	8011f64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800b5ea:	bf00      	nop
 800b5ec:	3708      	adds	r7, #8
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}
 800b5f2:	bf00      	nop
 800b5f4:	40001000 	.word	0x40001000

0800b5f8 <Error_Handler>:
DMA_HandleTypeDef hdma_tim3_ch2;
DMA_HandleTypeDef hdma_tim4_ch1;
DMA_HandleTypeDef hdma_tim5_ch1;

void Error_Handler(void)
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800b5fc:	bf00      	nop
 800b5fe:	46bd      	mov	sp, r7
 800b600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b604:	4770      	bx	lr
	...

0800b608 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b08e      	sub	sp, #56	; 0x38
 800b60c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b60e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b612:	2200      	movs	r2, #0
 800b614:	601a      	str	r2, [r3, #0]
 800b616:	605a      	str	r2, [r3, #4]
 800b618:	609a      	str	r2, [r3, #8]
 800b61a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b61c:	f107 0320 	add.w	r3, r7, #32
 800b620:	2200      	movs	r2, #0
 800b622:	601a      	str	r2, [r3, #0]
 800b624:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800b626:	1d3b      	adds	r3, r7, #4
 800b628:	2200      	movs	r2, #0
 800b62a:	601a      	str	r2, [r3, #0]
 800b62c:	605a      	str	r2, [r3, #4]
 800b62e:	609a      	str	r2, [r3, #8]
 800b630:	60da      	str	r2, [r3, #12]
 800b632:	611a      	str	r2, [r3, #16]
 800b634:	615a      	str	r2, [r3, #20]
 800b636:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800b638:	4b2d      	ldr	r3, [pc, #180]	; (800b6f0 <MX_TIM2_Init+0xe8>)
 800b63a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b63e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 167;
 800b640:	4b2b      	ldr	r3, [pc, #172]	; (800b6f0 <MX_TIM2_Init+0xe8>)
 800b642:	22a7      	movs	r2, #167	; 0xa7
 800b644:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b646:	4b2a      	ldr	r3, [pc, #168]	; (800b6f0 <MX_TIM2_Init+0xe8>)
 800b648:	2200      	movs	r2, #0
 800b64a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 800b64c:	4b28      	ldr	r3, [pc, #160]	; (800b6f0 <MX_TIM2_Init+0xe8>)
 800b64e:	f242 720f 	movw	r2, #9999	; 0x270f
 800b652:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b654:	4b26      	ldr	r3, [pc, #152]	; (800b6f0 <MX_TIM2_Init+0xe8>)
 800b656:	2200      	movs	r2, #0
 800b658:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b65a:	4b25      	ldr	r3, [pc, #148]	; (800b6f0 <MX_TIM2_Init+0xe8>)
 800b65c:	2200      	movs	r2, #0
 800b65e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800b660:	4823      	ldr	r0, [pc, #140]	; (800b6f0 <MX_TIM2_Init+0xe8>)
 800b662:	f00a fd61 	bl	8016128 <HAL_TIM_Base_Init>
 800b666:	4603      	mov	r3, r0
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d001      	beq.n	800b670 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800b66c:	f7ff ffc4 	bl	800b5f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b674:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800b676:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b67a:	4619      	mov	r1, r3
 800b67c:	481c      	ldr	r0, [pc, #112]	; (800b6f0 <MX_TIM2_Init+0xe8>)
 800b67e:	f00b f8b7 	bl	80167f0 <HAL_TIM_ConfigClockSource>
 800b682:	4603      	mov	r3, r0
 800b684:	2b00      	cmp	r3, #0
 800b686:	d001      	beq.n	800b68c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800b688:	f7ff ffb6 	bl	800b5f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800b68c:	4818      	ldr	r0, [pc, #96]	; (800b6f0 <MX_TIM2_Init+0xe8>)
 800b68e:	f00a fd9a 	bl	80161c6 <HAL_TIM_PWM_Init>
 800b692:	4603      	mov	r3, r0
 800b694:	2b00      	cmp	r3, #0
 800b696:	d001      	beq.n	800b69c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800b698:	f7ff ffae 	bl	800b5f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b69c:	2300      	movs	r3, #0
 800b69e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b6a4:	f107 0320 	add.w	r3, r7, #32
 800b6a8:	4619      	mov	r1, r3
 800b6aa:	4811      	ldr	r0, [pc, #68]	; (800b6f0 <MX_TIM2_Init+0xe8>)
 800b6ac:	f00b fd26 	bl	80170fc <HAL_TIMEx_MasterConfigSynchronization>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d001      	beq.n	800b6ba <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800b6b6:	f7ff ff9f 	bl	800b5f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b6ba:	2360      	movs	r3, #96	; 0x60
 800b6bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800b6ca:	1d3b      	adds	r3, r7, #4
 800b6cc:	220c      	movs	r2, #12
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	4807      	ldr	r0, [pc, #28]	; (800b6f0 <MX_TIM2_Init+0xe8>)
 800b6d2:	f00a ffc7 	bl	8016664 <HAL_TIM_PWM_ConfigChannel>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d001      	beq.n	800b6e0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800b6dc:	f7ff ff8c 	bl	800b5f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800b6e0:	4803      	ldr	r0, [pc, #12]	; (800b6f0 <MX_TIM2_Init+0xe8>)
 800b6e2:	f000 fdbd 	bl	800c260 <HAL_TIM_MspPostInit>

}
 800b6e6:	bf00      	nop
 800b6e8:	3738      	adds	r7, #56	; 0x38
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
 800b6ee:	bf00      	nop
 800b6f0:	20012eb0 	.word	0x20012eb0

0800b6f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b08e      	sub	sp, #56	; 0x38
 800b6f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b6fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b6fe:	2200      	movs	r2, #0
 800b700:	601a      	str	r2, [r3, #0]
 800b702:	605a      	str	r2, [r3, #4]
 800b704:	609a      	str	r2, [r3, #8]
 800b706:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b708:	f107 0320 	add.w	r3, r7, #32
 800b70c:	2200      	movs	r2, #0
 800b70e:	601a      	str	r2, [r3, #0]
 800b710:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800b712:	1d3b      	adds	r3, r7, #4
 800b714:	2200      	movs	r2, #0
 800b716:	601a      	str	r2, [r3, #0]
 800b718:	605a      	str	r2, [r3, #4]
 800b71a:	609a      	str	r2, [r3, #8]
 800b71c:	60da      	str	r2, [r3, #12]
 800b71e:	611a      	str	r2, [r3, #16]
 800b720:	615a      	str	r2, [r3, #20]
 800b722:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800b724:	4b2c      	ldr	r3, [pc, #176]	; (800b7d8 <MX_TIM3_Init+0xe4>)
 800b726:	4a2d      	ldr	r2, [pc, #180]	; (800b7dc <MX_TIM3_Init+0xe8>)
 800b728:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 800b72a:	4b2b      	ldr	r3, [pc, #172]	; (800b7d8 <MX_TIM3_Init+0xe4>)
 800b72c:	22a7      	movs	r2, #167	; 0xa7
 800b72e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b730:	4b29      	ldr	r3, [pc, #164]	; (800b7d8 <MX_TIM3_Init+0xe4>)
 800b732:	2200      	movs	r2, #0
 800b734:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 800b736:	4b28      	ldr	r3, [pc, #160]	; (800b7d8 <MX_TIM3_Init+0xe4>)
 800b738:	f242 720f 	movw	r2, #9999	; 0x270f
 800b73c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b73e:	4b26      	ldr	r3, [pc, #152]	; (800b7d8 <MX_TIM3_Init+0xe4>)
 800b740:	2200      	movs	r2, #0
 800b742:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b744:	4b24      	ldr	r3, [pc, #144]	; (800b7d8 <MX_TIM3_Init+0xe4>)
 800b746:	2200      	movs	r2, #0
 800b748:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800b74a:	4823      	ldr	r0, [pc, #140]	; (800b7d8 <MX_TIM3_Init+0xe4>)
 800b74c:	f00a fcec 	bl	8016128 <HAL_TIM_Base_Init>
 800b750:	4603      	mov	r3, r0
 800b752:	2b00      	cmp	r3, #0
 800b754:	d001      	beq.n	800b75a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800b756:	f7ff ff4f 	bl	800b5f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b75a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b75e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800b760:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b764:	4619      	mov	r1, r3
 800b766:	481c      	ldr	r0, [pc, #112]	; (800b7d8 <MX_TIM3_Init+0xe4>)
 800b768:	f00b f842 	bl	80167f0 <HAL_TIM_ConfigClockSource>
 800b76c:	4603      	mov	r3, r0
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d001      	beq.n	800b776 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800b772:	f7ff ff41 	bl	800b5f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800b776:	4818      	ldr	r0, [pc, #96]	; (800b7d8 <MX_TIM3_Init+0xe4>)
 800b778:	f00a fd25 	bl	80161c6 <HAL_TIM_PWM_Init>
 800b77c:	4603      	mov	r3, r0
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d001      	beq.n	800b786 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800b782:	f7ff ff39 	bl	800b5f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b786:	2300      	movs	r3, #0
 800b788:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b78a:	2300      	movs	r3, #0
 800b78c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800b78e:	f107 0320 	add.w	r3, r7, #32
 800b792:	4619      	mov	r1, r3
 800b794:	4810      	ldr	r0, [pc, #64]	; (800b7d8 <MX_TIM3_Init+0xe4>)
 800b796:	f00b fcb1 	bl	80170fc <HAL_TIMEx_MasterConfigSynchronization>
 800b79a:	4603      	mov	r3, r0
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d001      	beq.n	800b7a4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800b7a0:	f7ff ff2a 	bl	800b5f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b7a4:	2360      	movs	r3, #96	; 0x60
 800b7a6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800b7b4:	1d3b      	adds	r3, r7, #4
 800b7b6:	2204      	movs	r2, #4
 800b7b8:	4619      	mov	r1, r3
 800b7ba:	4807      	ldr	r0, [pc, #28]	; (800b7d8 <MX_TIM3_Init+0xe4>)
 800b7bc:	f00a ff52 	bl	8016664 <HAL_TIM_PWM_ConfigChannel>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d001      	beq.n	800b7ca <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800b7c6:	f7ff ff17 	bl	800b5f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800b7ca:	4803      	ldr	r0, [pc, #12]	; (800b7d8 <MX_TIM3_Init+0xe4>)
 800b7cc:	f000 fd48 	bl	800c260 <HAL_TIM_MspPostInit>

}
 800b7d0:	bf00      	nop
 800b7d2:	3738      	adds	r7, #56	; 0x38
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}
 800b7d8:	20012cc4 	.word	0x20012cc4
 800b7dc:	40000400 	.word	0x40000400

0800b7e0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b08e      	sub	sp, #56	; 0x38
 800b7e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b7e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	601a      	str	r2, [r3, #0]
 800b7ee:	605a      	str	r2, [r3, #4]
 800b7f0:	609a      	str	r2, [r3, #8]
 800b7f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b7f4:	f107 0320 	add.w	r3, r7, #32
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	601a      	str	r2, [r3, #0]
 800b7fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800b7fe:	1d3b      	adds	r3, r7, #4
 800b800:	2200      	movs	r2, #0
 800b802:	601a      	str	r2, [r3, #0]
 800b804:	605a      	str	r2, [r3, #4]
 800b806:	609a      	str	r2, [r3, #8]
 800b808:	60da      	str	r2, [r3, #12]
 800b80a:	611a      	str	r2, [r3, #16]
 800b80c:	615a      	str	r2, [r3, #20]
 800b80e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800b810:	4b2c      	ldr	r3, [pc, #176]	; (800b8c4 <MX_TIM4_Init+0xe4>)
 800b812:	4a2d      	ldr	r2, [pc, #180]	; (800b8c8 <MX_TIM4_Init+0xe8>)
 800b814:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 167;
 800b816:	4b2b      	ldr	r3, [pc, #172]	; (800b8c4 <MX_TIM4_Init+0xe4>)
 800b818:	22a7      	movs	r2, #167	; 0xa7
 800b81a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b81c:	4b29      	ldr	r3, [pc, #164]	; (800b8c4 <MX_TIM4_Init+0xe4>)
 800b81e:	2200      	movs	r2, #0
 800b820:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 800b822:	4b28      	ldr	r3, [pc, #160]	; (800b8c4 <MX_TIM4_Init+0xe4>)
 800b824:	f242 720f 	movw	r2, #9999	; 0x270f
 800b828:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b82a:	4b26      	ldr	r3, [pc, #152]	; (800b8c4 <MX_TIM4_Init+0xe4>)
 800b82c:	2200      	movs	r2, #0
 800b82e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b830:	4b24      	ldr	r3, [pc, #144]	; (800b8c4 <MX_TIM4_Init+0xe4>)
 800b832:	2200      	movs	r2, #0
 800b834:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800b836:	4823      	ldr	r0, [pc, #140]	; (800b8c4 <MX_TIM4_Init+0xe4>)
 800b838:	f00a fc76 	bl	8016128 <HAL_TIM_Base_Init>
 800b83c:	4603      	mov	r3, r0
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d001      	beq.n	800b846 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800b842:	f7ff fed9 	bl	800b5f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b846:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b84a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800b84c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b850:	4619      	mov	r1, r3
 800b852:	481c      	ldr	r0, [pc, #112]	; (800b8c4 <MX_TIM4_Init+0xe4>)
 800b854:	f00a ffcc 	bl	80167f0 <HAL_TIM_ConfigClockSource>
 800b858:	4603      	mov	r3, r0
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d001      	beq.n	800b862 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800b85e:	f7ff fecb 	bl	800b5f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800b862:	4818      	ldr	r0, [pc, #96]	; (800b8c4 <MX_TIM4_Init+0xe4>)
 800b864:	f00a fcaf 	bl	80161c6 <HAL_TIM_PWM_Init>
 800b868:	4603      	mov	r3, r0
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d001      	beq.n	800b872 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800b86e:	f7ff fec3 	bl	800b5f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b872:	2300      	movs	r3, #0
 800b874:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b876:	2300      	movs	r3, #0
 800b878:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800b87a:	f107 0320 	add.w	r3, r7, #32
 800b87e:	4619      	mov	r1, r3
 800b880:	4810      	ldr	r0, [pc, #64]	; (800b8c4 <MX_TIM4_Init+0xe4>)
 800b882:	f00b fc3b 	bl	80170fc <HAL_TIMEx_MasterConfigSynchronization>
 800b886:	4603      	mov	r3, r0
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d001      	beq.n	800b890 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800b88c:	f7ff feb4 	bl	800b5f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b890:	2360      	movs	r3, #96	; 0x60
 800b892:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800b894:	2300      	movs	r3, #0
 800b896:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b898:	2300      	movs	r3, #0
 800b89a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b89c:	2300      	movs	r3, #0
 800b89e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b8a0:	1d3b      	adds	r3, r7, #4
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	4619      	mov	r1, r3
 800b8a6:	4807      	ldr	r0, [pc, #28]	; (800b8c4 <MX_TIM4_Init+0xe4>)
 800b8a8:	f00a fedc 	bl	8016664 <HAL_TIM_PWM_ConfigChannel>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d001      	beq.n	800b8b6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800b8b2:	f7ff fea1 	bl	800b5f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800b8b6:	4803      	ldr	r0, [pc, #12]	; (800b8c4 <MX_TIM4_Init+0xe4>)
 800b8b8:	f000 fcd2 	bl	800c260 <HAL_TIM_MspPostInit>

}
 800b8bc:	bf00      	nop
 800b8be:	3738      	adds	r7, #56	; 0x38
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}
 800b8c4:	20012bdc 	.word	0x20012bdc
 800b8c8:	40000800 	.word	0x40000800

0800b8cc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b08e      	sub	sp, #56	; 0x38
 800b8d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b8d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	601a      	str	r2, [r3, #0]
 800b8da:	605a      	str	r2, [r3, #4]
 800b8dc:	609a      	str	r2, [r3, #8]
 800b8de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b8e0:	f107 0320 	add.w	r3, r7, #32
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	601a      	str	r2, [r3, #0]
 800b8e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800b8ea:	1d3b      	adds	r3, r7, #4
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	601a      	str	r2, [r3, #0]
 800b8f0:	605a      	str	r2, [r3, #4]
 800b8f2:	609a      	str	r2, [r3, #8]
 800b8f4:	60da      	str	r2, [r3, #12]
 800b8f6:	611a      	str	r2, [r3, #16]
 800b8f8:	615a      	str	r2, [r3, #20]
 800b8fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800b8fc:	4b2c      	ldr	r3, [pc, #176]	; (800b9b0 <MX_TIM5_Init+0xe4>)
 800b8fe:	4a2d      	ldr	r2, [pc, #180]	; (800b9b4 <MX_TIM5_Init+0xe8>)
 800b900:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 167;
 800b902:	4b2b      	ldr	r3, [pc, #172]	; (800b9b0 <MX_TIM5_Init+0xe4>)
 800b904:	22a7      	movs	r2, #167	; 0xa7
 800b906:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b908:	4b29      	ldr	r3, [pc, #164]	; (800b9b0 <MX_TIM5_Init+0xe4>)
 800b90a:	2200      	movs	r2, #0
 800b90c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 9999;
 800b90e:	4b28      	ldr	r3, [pc, #160]	; (800b9b0 <MX_TIM5_Init+0xe4>)
 800b910:	f242 720f 	movw	r2, #9999	; 0x270f
 800b914:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b916:	4b26      	ldr	r3, [pc, #152]	; (800b9b0 <MX_TIM5_Init+0xe4>)
 800b918:	2200      	movs	r2, #0
 800b91a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b91c:	4b24      	ldr	r3, [pc, #144]	; (800b9b0 <MX_TIM5_Init+0xe4>)
 800b91e:	2200      	movs	r2, #0
 800b920:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800b922:	4823      	ldr	r0, [pc, #140]	; (800b9b0 <MX_TIM5_Init+0xe4>)
 800b924:	f00a fc00 	bl	8016128 <HAL_TIM_Base_Init>
 800b928:	4603      	mov	r3, r0
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d001      	beq.n	800b932 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800b92e:	f7ff fe63 	bl	800b5f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b932:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b936:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800b938:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b93c:	4619      	mov	r1, r3
 800b93e:	481c      	ldr	r0, [pc, #112]	; (800b9b0 <MX_TIM5_Init+0xe4>)
 800b940:	f00a ff56 	bl	80167f0 <HAL_TIM_ConfigClockSource>
 800b944:	4603      	mov	r3, r0
 800b946:	2b00      	cmp	r3, #0
 800b948:	d001      	beq.n	800b94e <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800b94a:	f7ff fe55 	bl	800b5f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800b94e:	4818      	ldr	r0, [pc, #96]	; (800b9b0 <MX_TIM5_Init+0xe4>)
 800b950:	f00a fc39 	bl	80161c6 <HAL_TIM_PWM_Init>
 800b954:	4603      	mov	r3, r0
 800b956:	2b00      	cmp	r3, #0
 800b958:	d001      	beq.n	800b95e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800b95a:	f7ff fe4d 	bl	800b5f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b95e:	2300      	movs	r3, #0
 800b960:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b962:	2300      	movs	r3, #0
 800b964:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800b966:	f107 0320 	add.w	r3, r7, #32
 800b96a:	4619      	mov	r1, r3
 800b96c:	4810      	ldr	r0, [pc, #64]	; (800b9b0 <MX_TIM5_Init+0xe4>)
 800b96e:	f00b fbc5 	bl	80170fc <HAL_TIMEx_MasterConfigSynchronization>
 800b972:	4603      	mov	r3, r0
 800b974:	2b00      	cmp	r3, #0
 800b976:	d001      	beq.n	800b97c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800b978:	f7ff fe3e 	bl	800b5f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b97c:	2360      	movs	r3, #96	; 0x60
 800b97e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800b980:	2300      	movs	r3, #0
 800b982:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b984:	2300      	movs	r3, #0
 800b986:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b988:	2300      	movs	r3, #0
 800b98a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b98c:	1d3b      	adds	r3, r7, #4
 800b98e:	2200      	movs	r2, #0
 800b990:	4619      	mov	r1, r3
 800b992:	4807      	ldr	r0, [pc, #28]	; (800b9b0 <MX_TIM5_Init+0xe4>)
 800b994:	f00a fe66 	bl	8016664 <HAL_TIM_PWM_ConfigChannel>
 800b998:	4603      	mov	r3, r0
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d001      	beq.n	800b9a2 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800b99e:	f7ff fe2b 	bl	800b5f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800b9a2:	4803      	ldr	r0, [pc, #12]	; (800b9b0 <MX_TIM5_Init+0xe4>)
 800b9a4:	f000 fc5c 	bl	800c260 <HAL_TIM_MspPostInit>

}
 800b9a8:	bf00      	nop
 800b9aa:	3738      	adds	r7, #56	; 0x38
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}
 800b9b0:	20012c84 	.word	0x20012c84
 800b9b4:	40000c00 	.word	0x40000c00

0800b9b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b083      	sub	sp, #12
 800b9bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800b9be:	2300      	movs	r3, #0
 800b9c0:	607b      	str	r3, [r7, #4]
 800b9c2:	4b09      	ldr	r3, [pc, #36]	; (800b9e8 <MX_DMA_Init+0x30>)
 800b9c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9c6:	4a08      	ldr	r2, [pc, #32]	; (800b9e8 <MX_DMA_Init+0x30>)
 800b9c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b9cc:	6313      	str	r3, [r2, #48]	; 0x30
 800b9ce:	4b06      	ldr	r3, [pc, #24]	; (800b9e8 <MX_DMA_Init+0x30>)
 800b9d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b9d6:	607b      	str	r3, [r7, #4]
 800b9d8:	687b      	ldr	r3, [r7, #4]
//  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
//  /* DMA1_Stream6_IRQn interrupt configuration */
//  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
//  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);

}
 800b9da:	bf00      	nop
 800b9dc:	370c      	adds	r7, #12
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e4:	4770      	bx	lr
 800b9e6:	bf00      	nop
 800b9e8:	40023800 	.word	0x40023800

0800b9ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b082      	sub	sp, #8
 800b9f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	607b      	str	r3, [r7, #4]
 800b9f6:	4b12      	ldr	r3, [pc, #72]	; (800ba40 <HAL_MspInit+0x54>)
 800b9f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9fa:	4a11      	ldr	r2, [pc, #68]	; (800ba40 <HAL_MspInit+0x54>)
 800b9fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ba00:	6453      	str	r3, [r2, #68]	; 0x44
 800ba02:	4b0f      	ldr	r3, [pc, #60]	; (800ba40 <HAL_MspInit+0x54>)
 800ba04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba0a:	607b      	str	r3, [r7, #4]
 800ba0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800ba0e:	2300      	movs	r3, #0
 800ba10:	603b      	str	r3, [r7, #0]
 800ba12:	4b0b      	ldr	r3, [pc, #44]	; (800ba40 <HAL_MspInit+0x54>)
 800ba14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba16:	4a0a      	ldr	r2, [pc, #40]	; (800ba40 <HAL_MspInit+0x54>)
 800ba18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba1c:	6413      	str	r3, [r2, #64]	; 0x40
 800ba1e:	4b08      	ldr	r3, [pc, #32]	; (800ba40 <HAL_MspInit+0x54>)
 800ba20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba26:	603b      	str	r3, [r7, #0]
 800ba28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	210f      	movs	r1, #15
 800ba2e:	f06f 0001 	mvn.w	r0, #1
 800ba32:	f006 fbb3 	bl	801219c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ba36:	bf00      	nop
 800ba38:	3708      	adds	r7, #8
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}
 800ba3e:	bf00      	nop
 800ba40:	40023800 	.word	0x40023800

0800ba44 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800ba44:	b480      	push	{r7}
 800ba46:	b085      	sub	sp, #20
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	4a0b      	ldr	r2, [pc, #44]	; (800ba80 <HAL_CRC_MspInit+0x3c>)
 800ba52:	4293      	cmp	r3, r2
 800ba54:	d10d      	bne.n	800ba72 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800ba56:	2300      	movs	r3, #0
 800ba58:	60fb      	str	r3, [r7, #12]
 800ba5a:	4b0a      	ldr	r3, [pc, #40]	; (800ba84 <HAL_CRC_MspInit+0x40>)
 800ba5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba5e:	4a09      	ldr	r2, [pc, #36]	; (800ba84 <HAL_CRC_MspInit+0x40>)
 800ba60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ba64:	6313      	str	r3, [r2, #48]	; 0x30
 800ba66:	4b07      	ldr	r3, [pc, #28]	; (800ba84 <HAL_CRC_MspInit+0x40>)
 800ba68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ba6e:	60fb      	str	r3, [r7, #12]
 800ba70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800ba72:	bf00      	nop
 800ba74:	3714      	adds	r7, #20
 800ba76:	46bd      	mov	sp, r7
 800ba78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7c:	4770      	bx	lr
 800ba7e:	bf00      	nop
 800ba80:	40023000 	.word	0x40023000
 800ba84:	40023800 	.word	0x40023800

0800ba88 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b084      	sub	sp, #16
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	4a0e      	ldr	r2, [pc, #56]	; (800bad0 <HAL_DMA2D_MspInit+0x48>)
 800ba96:	4293      	cmp	r3, r2
 800ba98:	d115      	bne.n	800bac6 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	60fb      	str	r3, [r7, #12]
 800ba9e:	4b0d      	ldr	r3, [pc, #52]	; (800bad4 <HAL_DMA2D_MspInit+0x4c>)
 800baa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baa2:	4a0c      	ldr	r2, [pc, #48]	; (800bad4 <HAL_DMA2D_MspInit+0x4c>)
 800baa4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800baa8:	6313      	str	r3, [r2, #48]	; 0x30
 800baaa:	4b0a      	ldr	r3, [pc, #40]	; (800bad4 <HAL_DMA2D_MspInit+0x4c>)
 800baac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bab2:	60fb      	str	r3, [r7, #12]
 800bab4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800bab6:	2200      	movs	r2, #0
 800bab8:	2105      	movs	r1, #5
 800baba:	205a      	movs	r0, #90	; 0x5a
 800babc:	f006 fb6e 	bl	801219c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800bac0:	205a      	movs	r0, #90	; 0x5a
 800bac2:	f006 fb87 	bl	80121d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800bac6:	bf00      	nop
 800bac8:	3710      	adds	r7, #16
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}
 800bace:	bf00      	nop
 800bad0:	4002b000 	.word	0x4002b000
 800bad4:	40023800 	.word	0x40023800

0800bad8 <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b082      	sub	sp, #8
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	4a07      	ldr	r2, [pc, #28]	; (800bb04 <HAL_DMA2D_MspDeInit+0x2c>)
 800bae6:	4293      	cmp	r3, r2
 800bae8:	d108      	bne.n	800bafc <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 800baea:	4b07      	ldr	r3, [pc, #28]	; (800bb08 <HAL_DMA2D_MspDeInit+0x30>)
 800baec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baee:	4a06      	ldr	r2, [pc, #24]	; (800bb08 <HAL_DMA2D_MspDeInit+0x30>)
 800baf0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800baf4:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 800baf6:	205a      	movs	r0, #90	; 0x5a
 800baf8:	f006 fb7a 	bl	80121f0 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 800bafc:	bf00      	nop
 800bafe:	3708      	adds	r7, #8
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}
 800bb04:	4002b000 	.word	0x4002b000
 800bb08:	40023800 	.word	0x40023800

0800bb0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b08a      	sub	sp, #40	; 0x28
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bb14:	f107 0314 	add.w	r3, r7, #20
 800bb18:	2200      	movs	r2, #0
 800bb1a:	601a      	str	r2, [r3, #0]
 800bb1c:	605a      	str	r2, [r3, #4]
 800bb1e:	609a      	str	r2, [r3, #8]
 800bb20:	60da      	str	r2, [r3, #12]
 800bb22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	4a2f      	ldr	r2, [pc, #188]	; (800bbe8 <HAL_I2C_MspInit+0xdc>)
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d157      	bne.n	800bbde <HAL_I2C_MspInit+0xd2>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800bb2e:	2300      	movs	r3, #0
 800bb30:	613b      	str	r3, [r7, #16]
 800bb32:	4b2e      	ldr	r3, [pc, #184]	; (800bbec <HAL_I2C_MspInit+0xe0>)
 800bb34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb36:	4a2d      	ldr	r2, [pc, #180]	; (800bbec <HAL_I2C_MspInit+0xe0>)
 800bb38:	f043 0304 	orr.w	r3, r3, #4
 800bb3c:	6313      	str	r3, [r2, #48]	; 0x30
 800bb3e:	4b2b      	ldr	r3, [pc, #172]	; (800bbec <HAL_I2C_MspInit+0xe0>)
 800bb40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb42:	f003 0304 	and.w	r3, r3, #4
 800bb46:	613b      	str	r3, [r7, #16]
 800bb48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	60fb      	str	r3, [r7, #12]
 800bb4e:	4b27      	ldr	r3, [pc, #156]	; (800bbec <HAL_I2C_MspInit+0xe0>)
 800bb50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb52:	4a26      	ldr	r2, [pc, #152]	; (800bbec <HAL_I2C_MspInit+0xe0>)
 800bb54:	f043 0301 	orr.w	r3, r3, #1
 800bb58:	6313      	str	r3, [r2, #48]	; 0x30
 800bb5a:	4b24      	ldr	r3, [pc, #144]	; (800bbec <HAL_I2C_MspInit+0xe0>)
 800bb5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb5e:	f003 0301 	and.w	r3, r3, #1
 800bb62:	60fb      	str	r3, [r7, #12]
 800bb64:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800bb66:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800bb6c:	2312      	movs	r3, #18
 800bb6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800bb70:	2301      	movs	r3, #1
 800bb72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bb74:	2303      	movs	r3, #3
 800bb76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800bb78:	2304      	movs	r3, #4
 800bb7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bb7c:	f107 0314 	add.w	r3, r7, #20
 800bb80:	4619      	mov	r1, r3
 800bb82:	481b      	ldr	r0, [pc, #108]	; (800bbf0 <HAL_I2C_MspInit+0xe4>)
 800bb84:	f007 f93a 	bl	8012dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800bb88:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800bb8e:	2312      	movs	r3, #18
 800bb90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800bb92:	2301      	movs	r3, #1
 800bb94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bb96:	2303      	movs	r3, #3
 800bb98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800bb9a:	2304      	movs	r3, #4
 800bb9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bb9e:	f107 0314 	add.w	r3, r7, #20
 800bba2:	4619      	mov	r1, r3
 800bba4:	4813      	ldr	r0, [pc, #76]	; (800bbf4 <HAL_I2C_MspInit+0xe8>)
 800bba6:	f007 f929 	bl	8012dfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800bbaa:	2300      	movs	r3, #0
 800bbac:	60bb      	str	r3, [r7, #8]
 800bbae:	4b0f      	ldr	r3, [pc, #60]	; (800bbec <HAL_I2C_MspInit+0xe0>)
 800bbb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbb2:	4a0e      	ldr	r2, [pc, #56]	; (800bbec <HAL_I2C_MspInit+0xe0>)
 800bbb4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bbb8:	6413      	str	r3, [r2, #64]	; 0x40
 800bbba:	4b0c      	ldr	r3, [pc, #48]	; (800bbec <HAL_I2C_MspInit+0xe0>)
 800bbbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bbc2:	60bb      	str	r3, [r7, #8]
 800bbc4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */
  /* Force the I2C Peripheral Clock Reset */  
    __HAL_RCC_I2C3_FORCE_RESET();
 800bbc6:	4b09      	ldr	r3, [pc, #36]	; (800bbec <HAL_I2C_MspInit+0xe0>)
 800bbc8:	6a1b      	ldr	r3, [r3, #32]
 800bbca:	4a08      	ldr	r2, [pc, #32]	; (800bbec <HAL_I2C_MspInit+0xe0>)
 800bbcc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bbd0:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    __HAL_RCC_I2C3_RELEASE_RESET(); 
 800bbd2:	4b06      	ldr	r3, [pc, #24]	; (800bbec <HAL_I2C_MspInit+0xe0>)
 800bbd4:	6a1b      	ldr	r3, [r3, #32]
 800bbd6:	4a05      	ldr	r2, [pc, #20]	; (800bbec <HAL_I2C_MspInit+0xe0>)
 800bbd8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800bbdc:	6213      	str	r3, [r2, #32]
  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800bbde:	bf00      	nop
 800bbe0:	3728      	adds	r7, #40	; 0x28
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}
 800bbe6:	bf00      	nop
 800bbe8:	40005c00 	.word	0x40005c00
 800bbec:	40023800 	.word	0x40023800
 800bbf0:	40020800 	.word	0x40020800
 800bbf4:	40020000 	.word	0x40020000

0800bbf8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b08e      	sub	sp, #56	; 0x38
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bc00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc04:	2200      	movs	r2, #0
 800bc06:	601a      	str	r2, [r3, #0]
 800bc08:	605a      	str	r2, [r3, #4]
 800bc0a:	609a      	str	r2, [r3, #8]
 800bc0c:	60da      	str	r2, [r3, #12]
 800bc0e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	4a7b      	ldr	r2, [pc, #492]	; (800be04 <HAL_LTDC_MspInit+0x20c>)
 800bc16:	4293      	cmp	r3, r2
 800bc18:	f040 80ef 	bne.w	800bdfa <HAL_LTDC_MspInit+0x202>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	623b      	str	r3, [r7, #32]
 800bc20:	4b79      	ldr	r3, [pc, #484]	; (800be08 <HAL_LTDC_MspInit+0x210>)
 800bc22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc24:	4a78      	ldr	r2, [pc, #480]	; (800be08 <HAL_LTDC_MspInit+0x210>)
 800bc26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bc2a:	6453      	str	r3, [r2, #68]	; 0x44
 800bc2c:	4b76      	ldr	r3, [pc, #472]	; (800be08 <HAL_LTDC_MspInit+0x210>)
 800bc2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bc34:	623b      	str	r3, [r7, #32]
 800bc36:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800bc38:	2300      	movs	r3, #0
 800bc3a:	61fb      	str	r3, [r7, #28]
 800bc3c:	4b72      	ldr	r3, [pc, #456]	; (800be08 <HAL_LTDC_MspInit+0x210>)
 800bc3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc40:	4a71      	ldr	r2, [pc, #452]	; (800be08 <HAL_LTDC_MspInit+0x210>)
 800bc42:	f043 0320 	orr.w	r3, r3, #32
 800bc46:	6313      	str	r3, [r2, #48]	; 0x30
 800bc48:	4b6f      	ldr	r3, [pc, #444]	; (800be08 <HAL_LTDC_MspInit+0x210>)
 800bc4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc4c:	f003 0320 	and.w	r3, r3, #32
 800bc50:	61fb      	str	r3, [r7, #28]
 800bc52:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bc54:	2300      	movs	r3, #0
 800bc56:	61bb      	str	r3, [r7, #24]
 800bc58:	4b6b      	ldr	r3, [pc, #428]	; (800be08 <HAL_LTDC_MspInit+0x210>)
 800bc5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc5c:	4a6a      	ldr	r2, [pc, #424]	; (800be08 <HAL_LTDC_MspInit+0x210>)
 800bc5e:	f043 0301 	orr.w	r3, r3, #1
 800bc62:	6313      	str	r3, [r2, #48]	; 0x30
 800bc64:	4b68      	ldr	r3, [pc, #416]	; (800be08 <HAL_LTDC_MspInit+0x210>)
 800bc66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc68:	f003 0301 	and.w	r3, r3, #1
 800bc6c:	61bb      	str	r3, [r7, #24]
 800bc6e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bc70:	2300      	movs	r3, #0
 800bc72:	617b      	str	r3, [r7, #20]
 800bc74:	4b64      	ldr	r3, [pc, #400]	; (800be08 <HAL_LTDC_MspInit+0x210>)
 800bc76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc78:	4a63      	ldr	r2, [pc, #396]	; (800be08 <HAL_LTDC_MspInit+0x210>)
 800bc7a:	f043 0302 	orr.w	r3, r3, #2
 800bc7e:	6313      	str	r3, [r2, #48]	; 0x30
 800bc80:	4b61      	ldr	r3, [pc, #388]	; (800be08 <HAL_LTDC_MspInit+0x210>)
 800bc82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc84:	f003 0302 	and.w	r3, r3, #2
 800bc88:	617b      	str	r3, [r7, #20]
 800bc8a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	613b      	str	r3, [r7, #16]
 800bc90:	4b5d      	ldr	r3, [pc, #372]	; (800be08 <HAL_LTDC_MspInit+0x210>)
 800bc92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc94:	4a5c      	ldr	r2, [pc, #368]	; (800be08 <HAL_LTDC_MspInit+0x210>)
 800bc96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc9a:	6313      	str	r3, [r2, #48]	; 0x30
 800bc9c:	4b5a      	ldr	r3, [pc, #360]	; (800be08 <HAL_LTDC_MspInit+0x210>)
 800bc9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bca4:	613b      	str	r3, [r7, #16]
 800bca6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800bca8:	2300      	movs	r3, #0
 800bcaa:	60fb      	str	r3, [r7, #12]
 800bcac:	4b56      	ldr	r3, [pc, #344]	; (800be08 <HAL_LTDC_MspInit+0x210>)
 800bcae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcb0:	4a55      	ldr	r2, [pc, #340]	; (800be08 <HAL_LTDC_MspInit+0x210>)
 800bcb2:	f043 0304 	orr.w	r3, r3, #4
 800bcb6:	6313      	str	r3, [r2, #48]	; 0x30
 800bcb8:	4b53      	ldr	r3, [pc, #332]	; (800be08 <HAL_LTDC_MspInit+0x210>)
 800bcba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcbc:	f003 0304 	and.w	r3, r3, #4
 800bcc0:	60fb      	str	r3, [r7, #12]
 800bcc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	60bb      	str	r3, [r7, #8]
 800bcc8:	4b4f      	ldr	r3, [pc, #316]	; (800be08 <HAL_LTDC_MspInit+0x210>)
 800bcca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bccc:	4a4e      	ldr	r2, [pc, #312]	; (800be08 <HAL_LTDC_MspInit+0x210>)
 800bcce:	f043 0308 	orr.w	r3, r3, #8
 800bcd2:	6313      	str	r3, [r2, #48]	; 0x30
 800bcd4:	4b4c      	ldr	r3, [pc, #304]	; (800be08 <HAL_LTDC_MspInit+0x210>)
 800bcd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcd8:	f003 0308 	and.w	r3, r3, #8
 800bcdc:	60bb      	str	r3, [r7, #8]
 800bcde:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800bce0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bce4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bce6:	2302      	movs	r3, #2
 800bce8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bcea:	2300      	movs	r3, #0
 800bcec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800bcee:	2302      	movs	r3, #2
 800bcf0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800bcf2:	230e      	movs	r3, #14
 800bcf4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800bcf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bcfa:	4619      	mov	r1, r3
 800bcfc:	4843      	ldr	r0, [pc, #268]	; (800be0c <HAL_LTDC_MspInit+0x214>)
 800bcfe:	f007 f87d 	bl	8012dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11 
 800bd02:	f641 0358 	movw	r3, #6232	; 0x1858
 800bd06:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd08:	2302      	movs	r3, #2
 800bd0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800bd10:	2302      	movs	r3, #2
 800bd12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800bd14:	230e      	movs	r3, #14
 800bd16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bd18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd1c:	4619      	mov	r1, r3
 800bd1e:	483c      	ldr	r0, [pc, #240]	; (800be10 <HAL_LTDC_MspInit+0x218>)
 800bd20:	f007 f86c 	bl	8012dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800bd24:	2303      	movs	r3, #3
 800bd26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd28:	2302      	movs	r3, #2
 800bd2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800bd30:	2302      	movs	r3, #2
 800bd32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800bd34:	2309      	movs	r3, #9
 800bd36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bd38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd3c:	4619      	mov	r1, r3
 800bd3e:	4835      	ldr	r0, [pc, #212]	; (800be14 <HAL_LTDC_MspInit+0x21c>)
 800bd40:	f007 f85c 	bl	8012dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 800bd44:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800bd48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd4a:	2302      	movs	r3, #2
 800bd4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800bd52:	2302      	movs	r3, #2
 800bd54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800bd56:	230e      	movs	r3, #14
 800bd58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bd5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd5e:	4619      	mov	r1, r3
 800bd60:	482c      	ldr	r0, [pc, #176]	; (800be14 <HAL_LTDC_MspInit+0x21c>)
 800bd62:	f007 f84b 	bl	8012dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 800bd66:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800bd6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd6c:	2302      	movs	r3, #2
 800bd6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd70:	2300      	movs	r3, #0
 800bd72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800bd74:	2302      	movs	r3, #2
 800bd76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800bd78:	230e      	movs	r3, #14
 800bd7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800bd7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd80:	4619      	mov	r1, r3
 800bd82:	4825      	ldr	r0, [pc, #148]	; (800be18 <HAL_LTDC_MspInit+0x220>)
 800bd84:	f007 f83a 	bl	8012dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800bd88:	23c0      	movs	r3, #192	; 0xc0
 800bd8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd8c:	2302      	movs	r3, #2
 800bd8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd90:	2300      	movs	r3, #0
 800bd92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800bd94:	2302      	movs	r3, #2
 800bd96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800bd98:	230e      	movs	r3, #14
 800bd9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bd9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bda0:	4619      	mov	r1, r3
 800bda2:	481e      	ldr	r0, [pc, #120]	; (800be1c <HAL_LTDC_MspInit+0x224>)
 800bda4:	f007 f82a 	bl	8012dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800bda8:	2308      	movs	r3, #8
 800bdaa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bdac:	2302      	movs	r3, #2
 800bdae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800bdb4:	2302      	movs	r3, #2
 800bdb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800bdb8:	230e      	movs	r3, #14
 800bdba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800bdbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bdc0:	4619      	mov	r1, r3
 800bdc2:	4817      	ldr	r0, [pc, #92]	; (800be20 <HAL_LTDC_MspInit+0x228>)
 800bdc4:	f007 f81a 	bl	8012dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800bdc8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800bdcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bdce:	2302      	movs	r3, #2
 800bdd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800bdd6:	2302      	movs	r3, #2
 800bdd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800bdda:	2309      	movs	r3, #9
 800bddc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800bdde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bde2:	4619      	mov	r1, r3
 800bde4:	480c      	ldr	r0, [pc, #48]	; (800be18 <HAL_LTDC_MspInit+0x220>)
 800bde6:	f007 f809 	bl	8012dfc <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800bdea:	2200      	movs	r2, #0
 800bdec:	2105      	movs	r1, #5
 800bdee:	2058      	movs	r0, #88	; 0x58
 800bdf0:	f006 f9d4 	bl	801219c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800bdf4:	2058      	movs	r0, #88	; 0x58
 800bdf6:	f006 f9ed 	bl	80121d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800bdfa:	bf00      	nop
 800bdfc:	3738      	adds	r7, #56	; 0x38
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}
 800be02:	bf00      	nop
 800be04:	40016800 	.word	0x40016800
 800be08:	40023800 	.word	0x40023800
 800be0c:	40021400 	.word	0x40021400
 800be10:	40020000 	.word	0x40020000
 800be14:	40020400 	.word	0x40020400
 800be18:	40021800 	.word	0x40021800
 800be1c:	40020800 	.word	0x40020800
 800be20:	40020c00 	.word	0x40020c00

0800be24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b08a      	sub	sp, #40	; 0x28
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be2c:	f107 0314 	add.w	r3, r7, #20
 800be30:	2200      	movs	r2, #0
 800be32:	601a      	str	r2, [r3, #0]
 800be34:	605a      	str	r2, [r3, #4]
 800be36:	609a      	str	r2, [r3, #8]
 800be38:	60da      	str	r2, [r3, #12]
 800be3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	4a19      	ldr	r2, [pc, #100]	; (800bea8 <HAL_SPI_MspInit+0x84>)
 800be42:	4293      	cmp	r3, r2
 800be44:	d12c      	bne.n	800bea0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800be46:	2300      	movs	r3, #0
 800be48:	613b      	str	r3, [r7, #16]
 800be4a:	4b18      	ldr	r3, [pc, #96]	; (800beac <HAL_SPI_MspInit+0x88>)
 800be4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be4e:	4a17      	ldr	r2, [pc, #92]	; (800beac <HAL_SPI_MspInit+0x88>)
 800be50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be54:	6453      	str	r3, [r2, #68]	; 0x44
 800be56:	4b15      	ldr	r3, [pc, #84]	; (800beac <HAL_SPI_MspInit+0x88>)
 800be58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800be5e:	613b      	str	r3, [r7, #16]
 800be60:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800be62:	2300      	movs	r3, #0
 800be64:	60fb      	str	r3, [r7, #12]
 800be66:	4b11      	ldr	r3, [pc, #68]	; (800beac <HAL_SPI_MspInit+0x88>)
 800be68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be6a:	4a10      	ldr	r2, [pc, #64]	; (800beac <HAL_SPI_MspInit+0x88>)
 800be6c:	f043 0320 	orr.w	r3, r3, #32
 800be70:	6313      	str	r3, [r2, #48]	; 0x30
 800be72:	4b0e      	ldr	r3, [pc, #56]	; (800beac <HAL_SPI_MspInit+0x88>)
 800be74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be76:	f003 0320 	and.w	r3, r3, #32
 800be7a:	60fb      	str	r3, [r7, #12]
 800be7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800be7e:	f44f 7360 	mov.w	r3, #896	; 0x380
 800be82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be84:	2302      	movs	r3, #2
 800be86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be88:	2300      	movs	r3, #0
 800be8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800be8c:	2303      	movs	r3, #3
 800be8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800be90:	2305      	movs	r3, #5
 800be92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800be94:	f107 0314 	add.w	r3, r7, #20
 800be98:	4619      	mov	r1, r3
 800be9a:	4805      	ldr	r0, [pc, #20]	; (800beb0 <HAL_SPI_MspInit+0x8c>)
 800be9c:	f006 ffae 	bl	8012dfc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800bea0:	bf00      	nop
 800bea2:	3728      	adds	r7, #40	; 0x28
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}
 800bea8:	40015000 	.word	0x40015000
 800beac:	40023800 	.word	0x40023800
 800beb0:	40021400 	.word	0x40021400

0800beb4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b086      	sub	sp, #24
 800beb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800beba:	1d3b      	adds	r3, r7, #4
 800bebc:	2200      	movs	r2, #0
 800bebe:	601a      	str	r2, [r3, #0]
 800bec0:	605a      	str	r2, [r3, #4]
 800bec2:	609a      	str	r2, [r3, #8]
 800bec4:	60da      	str	r2, [r3, #12]
 800bec6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800bec8:	4b3b      	ldr	r3, [pc, #236]	; (800bfb8 <HAL_FMC_MspInit+0x104>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d16f      	bne.n	800bfb0 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800bed0:	4b39      	ldr	r3, [pc, #228]	; (800bfb8 <HAL_FMC_MspInit+0x104>)
 800bed2:	2201      	movs	r2, #1
 800bed4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800bed6:	2300      	movs	r3, #0
 800bed8:	603b      	str	r3, [r7, #0]
 800beda:	4b38      	ldr	r3, [pc, #224]	; (800bfbc <HAL_FMC_MspInit+0x108>)
 800bedc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bede:	4a37      	ldr	r2, [pc, #220]	; (800bfbc <HAL_FMC_MspInit+0x108>)
 800bee0:	f043 0301 	orr.w	r3, r3, #1
 800bee4:	6393      	str	r3, [r2, #56]	; 0x38
 800bee6:	4b35      	ldr	r3, [pc, #212]	; (800bfbc <HAL_FMC_MspInit+0x108>)
 800bee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beea:	f003 0301 	and.w	r3, r3, #1
 800beee:	603b      	str	r3, [r7, #0]
 800bef0:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800bef2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800bef6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bef8:	2302      	movs	r3, #2
 800befa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800befc:	2300      	movs	r3, #0
 800befe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf00:	2303      	movs	r3, #3
 800bf02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800bf04:	230c      	movs	r3, #12
 800bf06:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800bf08:	1d3b      	adds	r3, r7, #4
 800bf0a:	4619      	mov	r1, r3
 800bf0c:	482c      	ldr	r0, [pc, #176]	; (800bfc0 <HAL_FMC_MspInit+0x10c>)
 800bf0e:	f006 ff75 	bl	8012dfc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800bf12:	2301      	movs	r3, #1
 800bf14:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf16:	2302      	movs	r3, #2
 800bf18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf1e:	2303      	movs	r3, #3
 800bf20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800bf22:	230c      	movs	r3, #12
 800bf24:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bf26:	1d3b      	adds	r3, r7, #4
 800bf28:	4619      	mov	r1, r3
 800bf2a:	4826      	ldr	r0, [pc, #152]	; (800bfc4 <HAL_FMC_MspInit+0x110>)
 800bf2c:	f006 ff66 	bl	8012dfc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 800bf30:	f248 1333 	movw	r3, #33075	; 0x8133
 800bf34:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf36:	2302      	movs	r3, #2
 800bf38:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf3e:	2303      	movs	r3, #3
 800bf40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800bf42:	230c      	movs	r3, #12
 800bf44:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800bf46:	1d3b      	adds	r3, r7, #4
 800bf48:	4619      	mov	r1, r3
 800bf4a:	481f      	ldr	r0, [pc, #124]	; (800bfc8 <HAL_FMC_MspInit+0x114>)
 800bf4c:	f006 ff56 	bl	8012dfc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 800bf50:	f64f 7383 	movw	r3, #65411	; 0xff83
 800bf54:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf56:	2302      	movs	r3, #2
 800bf58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf5e:	2303      	movs	r3, #3
 800bf60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800bf62:	230c      	movs	r3, #12
 800bf64:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800bf66:	1d3b      	adds	r3, r7, #4
 800bf68:	4619      	mov	r1, r3
 800bf6a:	4818      	ldr	r0, [pc, #96]	; (800bfcc <HAL_FMC_MspInit+0x118>)
 800bf6c:	f006 ff46 	bl	8012dfc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 800bf70:	f24c 7303 	movw	r3, #50947	; 0xc703
 800bf74:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf76:	2302      	movs	r3, #2
 800bf78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf7e:	2303      	movs	r3, #3
 800bf80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800bf82:	230c      	movs	r3, #12
 800bf84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800bf86:	1d3b      	adds	r3, r7, #4
 800bf88:	4619      	mov	r1, r3
 800bf8a:	4811      	ldr	r0, [pc, #68]	; (800bfd0 <HAL_FMC_MspInit+0x11c>)
 800bf8c:	f006 ff36 	bl	8012dfc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800bf90:	2360      	movs	r3, #96	; 0x60
 800bf92:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf94:	2302      	movs	r3, #2
 800bf96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf98:	2300      	movs	r3, #0
 800bf9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf9c:	2303      	movs	r3, #3
 800bf9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800bfa0:	230c      	movs	r3, #12
 800bfa2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bfa4:	1d3b      	adds	r3, r7, #4
 800bfa6:	4619      	mov	r1, r3
 800bfa8:	480a      	ldr	r0, [pc, #40]	; (800bfd4 <HAL_FMC_MspInit+0x120>)
 800bfaa:	f006 ff27 	bl	8012dfc <HAL_GPIO_Init>
 800bfae:	e000      	b.n	800bfb2 <HAL_FMC_MspInit+0xfe>
    return;
 800bfb0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800bfb2:	3718      	adds	r7, #24
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}
 800bfb8:	20001a34 	.word	0x20001a34
 800bfbc:	40023800 	.word	0x40023800
 800bfc0:	40021400 	.word	0x40021400
 800bfc4:	40020800 	.word	0x40020800
 800bfc8:	40021800 	.word	0x40021800
 800bfcc:	40021000 	.word	0x40021000
 800bfd0:	40020c00 	.word	0x40020c00
 800bfd4:	40020400 	.word	0x40020400

0800bfd8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b082      	sub	sp, #8
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800bfe0:	f7ff ff68 	bl	800beb4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800bfe4:	bf00      	nop
 800bfe6:	3708      	adds	r7, #8
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}

0800bfec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b086      	sub	sp, #24
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bffc:	d145      	bne.n	800c08a <HAL_TIM_Base_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800bffe:	2300      	movs	r3, #0
 800c000:	617b      	str	r3, [r7, #20]
 800c002:	4b8b      	ldr	r3, [pc, #556]	; (800c230 <HAL_TIM_Base_MspInit+0x244>)
 800c004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c006:	4a8a      	ldr	r2, [pc, #552]	; (800c230 <HAL_TIM_Base_MspInit+0x244>)
 800c008:	f043 0301 	orr.w	r3, r3, #1
 800c00c:	6413      	str	r3, [r2, #64]	; 0x40
 800c00e:	4b88      	ldr	r3, [pc, #544]	; (800c230 <HAL_TIM_Base_MspInit+0x244>)
 800c010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c012:	f003 0301 	and.w	r3, r3, #1
 800c016:	617b      	str	r3, [r7, #20]
 800c018:	697b      	ldr	r3, [r7, #20]

    /* TIM2 DMA Init */
    /* TIM2_UP_CH4 Init */
    hdma_tim2_up_ch4.Instance = DMA1_Stream7;
 800c01a:	4b86      	ldr	r3, [pc, #536]	; (800c234 <HAL_TIM_Base_MspInit+0x248>)
 800c01c:	4a86      	ldr	r2, [pc, #536]	; (800c238 <HAL_TIM_Base_MspInit+0x24c>)
 800c01e:	601a      	str	r2, [r3, #0]
    hdma_tim2_up_ch4.Init.Channel = DMA_CHANNEL_3;
 800c020:	4b84      	ldr	r3, [pc, #528]	; (800c234 <HAL_TIM_Base_MspInit+0x248>)
 800c022:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800c026:	605a      	str	r2, [r3, #4]
    hdma_tim2_up_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c028:	4b82      	ldr	r3, [pc, #520]	; (800c234 <HAL_TIM_Base_MspInit+0x248>)
 800c02a:	2240      	movs	r2, #64	; 0x40
 800c02c:	609a      	str	r2, [r3, #8]
    hdma_tim2_up_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800c02e:	4b81      	ldr	r3, [pc, #516]	; (800c234 <HAL_TIM_Base_MspInit+0x248>)
 800c030:	2200      	movs	r2, #0
 800c032:	60da      	str	r2, [r3, #12]
    hdma_tim2_up_ch4.Init.MemInc = DMA_MINC_ENABLE;
 800c034:	4b7f      	ldr	r3, [pc, #508]	; (800c234 <HAL_TIM_Base_MspInit+0x248>)
 800c036:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c03a:	611a      	str	r2, [r3, #16]
    hdma_tim2_up_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800c03c:	4b7d      	ldr	r3, [pc, #500]	; (800c234 <HAL_TIM_Base_MspInit+0x248>)
 800c03e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c042:	615a      	str	r2, [r3, #20]
    hdma_tim2_up_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800c044:	4b7b      	ldr	r3, [pc, #492]	; (800c234 <HAL_TIM_Base_MspInit+0x248>)
 800c046:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c04a:	619a      	str	r2, [r3, #24]
    hdma_tim2_up_ch4.Init.Mode = DMA_CIRCULAR;
 800c04c:	4b79      	ldr	r3, [pc, #484]	; (800c234 <HAL_TIM_Base_MspInit+0x248>)
 800c04e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c052:	61da      	str	r2, [r3, #28]
    hdma_tim2_up_ch4.Init.Priority = DMA_PRIORITY_LOW;
 800c054:	4b77      	ldr	r3, [pc, #476]	; (800c234 <HAL_TIM_Base_MspInit+0x248>)
 800c056:	2200      	movs	r2, #0
 800c058:	621a      	str	r2, [r3, #32]
    hdma_tim2_up_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c05a:	4b76      	ldr	r3, [pc, #472]	; (800c234 <HAL_TIM_Base_MspInit+0x248>)
 800c05c:	2200      	movs	r2, #0
 800c05e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_up_ch4) != HAL_OK)
 800c060:	4874      	ldr	r0, [pc, #464]	; (800c234 <HAL_TIM_Base_MspInit+0x248>)
 800c062:	f006 f8ef 	bl	8012244 <HAL_DMA_Init>
 800c066:	4603      	mov	r3, r0
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d001      	beq.n	800c070 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 800c06c:	f7ff fac4 	bl	800b5f8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up_ch4);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	4a70      	ldr	r2, [pc, #448]	; (800c234 <HAL_TIM_Base_MspInit+0x248>)
 800c074:	621a      	str	r2, [r3, #32]
 800c076:	4a6f      	ldr	r2, [pc, #444]	; (800c234 <HAL_TIM_Base_MspInit+0x248>)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_up_ch4);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	4a6d      	ldr	r2, [pc, #436]	; (800c234 <HAL_TIM_Base_MspInit+0x248>)
 800c080:	631a      	str	r2, [r3, #48]	; 0x30
 800c082:	4a6c      	ldr	r2, [pc, #432]	; (800c234 <HAL_TIM_Base_MspInit+0x248>)
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800c088:	e0cd      	b.n	800c226 <HAL_TIM_Base_MspInit+0x23a>
  else if(htim_base->Instance==TIM3)
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	4a6b      	ldr	r2, [pc, #428]	; (800c23c <HAL_TIM_Base_MspInit+0x250>)
 800c090:	4293      	cmp	r3, r2
 800c092:	d13f      	bne.n	800c114 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800c094:	2300      	movs	r3, #0
 800c096:	613b      	str	r3, [r7, #16]
 800c098:	4b65      	ldr	r3, [pc, #404]	; (800c230 <HAL_TIM_Base_MspInit+0x244>)
 800c09a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c09c:	4a64      	ldr	r2, [pc, #400]	; (800c230 <HAL_TIM_Base_MspInit+0x244>)
 800c09e:	f043 0302 	orr.w	r3, r3, #2
 800c0a2:	6413      	str	r3, [r2, #64]	; 0x40
 800c0a4:	4b62      	ldr	r3, [pc, #392]	; (800c230 <HAL_TIM_Base_MspInit+0x244>)
 800c0a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0a8:	f003 0302 	and.w	r3, r3, #2
 800c0ac:	613b      	str	r3, [r7, #16]
 800c0ae:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream5;
 800c0b0:	4b63      	ldr	r3, [pc, #396]	; (800c240 <HAL_TIM_Base_MspInit+0x254>)
 800c0b2:	4a64      	ldr	r2, [pc, #400]	; (800c244 <HAL_TIM_Base_MspInit+0x258>)
 800c0b4:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Channel = DMA_CHANNEL_5;
 800c0b6:	4b62      	ldr	r3, [pc, #392]	; (800c240 <HAL_TIM_Base_MspInit+0x254>)
 800c0b8:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800c0bc:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c0be:	4b60      	ldr	r3, [pc, #384]	; (800c240 <HAL_TIM_Base_MspInit+0x254>)
 800c0c0:	2240      	movs	r2, #64	; 0x40
 800c0c2:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800c0c4:	4b5e      	ldr	r3, [pc, #376]	; (800c240 <HAL_TIM_Base_MspInit+0x254>)
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800c0ca:	4b5d      	ldr	r3, [pc, #372]	; (800c240 <HAL_TIM_Base_MspInit+0x254>)
 800c0cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c0d0:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c0d2:	4b5b      	ldr	r3, [pc, #364]	; (800c240 <HAL_TIM_Base_MspInit+0x254>)
 800c0d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c0d8:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800c0da:	4b59      	ldr	r3, [pc, #356]	; (800c240 <HAL_TIM_Base_MspInit+0x254>)
 800c0dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c0e0:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR;
 800c0e2:	4b57      	ldr	r3, [pc, #348]	; (800c240 <HAL_TIM_Base_MspInit+0x254>)
 800c0e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c0e8:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800c0ea:	4b55      	ldr	r3, [pc, #340]	; (800c240 <HAL_TIM_Base_MspInit+0x254>)
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c0f0:	4b53      	ldr	r3, [pc, #332]	; (800c240 <HAL_TIM_Base_MspInit+0x254>)
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 800c0f6:	4852      	ldr	r0, [pc, #328]	; (800c240 <HAL_TIM_Base_MspInit+0x254>)
 800c0f8:	f006 f8a4 	bl	8012244 <HAL_DMA_Init>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d001      	beq.n	800c106 <HAL_TIM_Base_MspInit+0x11a>
      Error_Handler();
 800c102:	f7ff fa79 	bl	800b5f8 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	4a4d      	ldr	r2, [pc, #308]	; (800c240 <HAL_TIM_Base_MspInit+0x254>)
 800c10a:	629a      	str	r2, [r3, #40]	; 0x28
 800c10c:	4a4c      	ldr	r2, [pc, #304]	; (800c240 <HAL_TIM_Base_MspInit+0x254>)
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6393      	str	r3, [r2, #56]	; 0x38
}
 800c112:	e088      	b.n	800c226 <HAL_TIM_Base_MspInit+0x23a>
  else if(htim_base->Instance==TIM4)
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	4a4b      	ldr	r2, [pc, #300]	; (800c248 <HAL_TIM_Base_MspInit+0x25c>)
 800c11a:	4293      	cmp	r3, r2
 800c11c:	d13f      	bne.n	800c19e <HAL_TIM_Base_MspInit+0x1b2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800c11e:	2300      	movs	r3, #0
 800c120:	60fb      	str	r3, [r7, #12]
 800c122:	4b43      	ldr	r3, [pc, #268]	; (800c230 <HAL_TIM_Base_MspInit+0x244>)
 800c124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c126:	4a42      	ldr	r2, [pc, #264]	; (800c230 <HAL_TIM_Base_MspInit+0x244>)
 800c128:	f043 0304 	orr.w	r3, r3, #4
 800c12c:	6413      	str	r3, [r2, #64]	; 0x40
 800c12e:	4b40      	ldr	r3, [pc, #256]	; (800c230 <HAL_TIM_Base_MspInit+0x244>)
 800c130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c132:	f003 0304 	and.w	r3, r3, #4
 800c136:	60fb      	str	r3, [r7, #12]
 800c138:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 800c13a:	4b44      	ldr	r3, [pc, #272]	; (800c24c <HAL_TIM_Base_MspInit+0x260>)
 800c13c:	4a44      	ldr	r2, [pc, #272]	; (800c250 <HAL_TIM_Base_MspInit+0x264>)
 800c13e:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 800c140:	4b42      	ldr	r3, [pc, #264]	; (800c24c <HAL_TIM_Base_MspInit+0x260>)
 800c142:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800c146:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c148:	4b40      	ldr	r3, [pc, #256]	; (800c24c <HAL_TIM_Base_MspInit+0x260>)
 800c14a:	2240      	movs	r2, #64	; 0x40
 800c14c:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800c14e:	4b3f      	ldr	r3, [pc, #252]	; (800c24c <HAL_TIM_Base_MspInit+0x260>)
 800c150:	2200      	movs	r2, #0
 800c152:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800c154:	4b3d      	ldr	r3, [pc, #244]	; (800c24c <HAL_TIM_Base_MspInit+0x260>)
 800c156:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c15a:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c15c:	4b3b      	ldr	r3, [pc, #236]	; (800c24c <HAL_TIM_Base_MspInit+0x260>)
 800c15e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c162:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800c164:	4b39      	ldr	r3, [pc, #228]	; (800c24c <HAL_TIM_Base_MspInit+0x260>)
 800c166:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c16a:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_CIRCULAR;
 800c16c:	4b37      	ldr	r3, [pc, #220]	; (800c24c <HAL_TIM_Base_MspInit+0x260>)
 800c16e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c172:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800c174:	4b35      	ldr	r3, [pc, #212]	; (800c24c <HAL_TIM_Base_MspInit+0x260>)
 800c176:	2200      	movs	r2, #0
 800c178:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c17a:	4b34      	ldr	r3, [pc, #208]	; (800c24c <HAL_TIM_Base_MspInit+0x260>)
 800c17c:	2200      	movs	r2, #0
 800c17e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 800c180:	4832      	ldr	r0, [pc, #200]	; (800c24c <HAL_TIM_Base_MspInit+0x260>)
 800c182:	f006 f85f 	bl	8012244 <HAL_DMA_Init>
 800c186:	4603      	mov	r3, r0
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d001      	beq.n	800c190 <HAL_TIM_Base_MspInit+0x1a4>
      Error_Handler();
 800c18c:	f7ff fa34 	bl	800b5f8 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	4a2e      	ldr	r2, [pc, #184]	; (800c24c <HAL_TIM_Base_MspInit+0x260>)
 800c194:	625a      	str	r2, [r3, #36]	; 0x24
 800c196:	4a2d      	ldr	r2, [pc, #180]	; (800c24c <HAL_TIM_Base_MspInit+0x260>)
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800c19c:	e043      	b.n	800c226 <HAL_TIM_Base_MspInit+0x23a>
  else if(htim_base->Instance==TIM5)
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	4a2c      	ldr	r2, [pc, #176]	; (800c254 <HAL_TIM_Base_MspInit+0x268>)
 800c1a4:	4293      	cmp	r3, r2
 800c1a6:	d13e      	bne.n	800c226 <HAL_TIM_Base_MspInit+0x23a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	60bb      	str	r3, [r7, #8]
 800c1ac:	4b20      	ldr	r3, [pc, #128]	; (800c230 <HAL_TIM_Base_MspInit+0x244>)
 800c1ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1b0:	4a1f      	ldr	r2, [pc, #124]	; (800c230 <HAL_TIM_Base_MspInit+0x244>)
 800c1b2:	f043 0308 	orr.w	r3, r3, #8
 800c1b6:	6413      	str	r3, [r2, #64]	; 0x40
 800c1b8:	4b1d      	ldr	r3, [pc, #116]	; (800c230 <HAL_TIM_Base_MspInit+0x244>)
 800c1ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1bc:	f003 0308 	and.w	r3, r3, #8
 800c1c0:	60bb      	str	r3, [r7, #8]
 800c1c2:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch1.Instance = DMA1_Stream2;
 800c1c4:	4b24      	ldr	r3, [pc, #144]	; (800c258 <HAL_TIM_Base_MspInit+0x26c>)
 800c1c6:	4a25      	ldr	r2, [pc, #148]	; (800c25c <HAL_TIM_Base_MspInit+0x270>)
 800c1c8:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Channel = DMA_CHANNEL_6;
 800c1ca:	4b23      	ldr	r3, [pc, #140]	; (800c258 <HAL_TIM_Base_MspInit+0x26c>)
 800c1cc:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800c1d0:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c1d2:	4b21      	ldr	r3, [pc, #132]	; (800c258 <HAL_TIM_Base_MspInit+0x26c>)
 800c1d4:	2240      	movs	r2, #64	; 0x40
 800c1d6:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800c1d8:	4b1f      	ldr	r3, [pc, #124]	; (800c258 <HAL_TIM_Base_MspInit+0x26c>)
 800c1da:	2200      	movs	r2, #0
 800c1dc:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800c1de:	4b1e      	ldr	r3, [pc, #120]	; (800c258 <HAL_TIM_Base_MspInit+0x26c>)
 800c1e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c1e4:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800c1e6:	4b1c      	ldr	r3, [pc, #112]	; (800c258 <HAL_TIM_Base_MspInit+0x26c>)
 800c1e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c1ec:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800c1ee:	4b1a      	ldr	r3, [pc, #104]	; (800c258 <HAL_TIM_Base_MspInit+0x26c>)
 800c1f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c1f4:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Mode = DMA_CIRCULAR;
 800c1f6:	4b18      	ldr	r3, [pc, #96]	; (800c258 <HAL_TIM_Base_MspInit+0x26c>)
 800c1f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c1fc:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800c1fe:	4b16      	ldr	r3, [pc, #88]	; (800c258 <HAL_TIM_Base_MspInit+0x26c>)
 800c200:	2200      	movs	r2, #0
 800c202:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c204:	4b14      	ldr	r3, [pc, #80]	; (800c258 <HAL_TIM_Base_MspInit+0x26c>)
 800c206:	2200      	movs	r2, #0
 800c208:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 800c20a:	4813      	ldr	r0, [pc, #76]	; (800c258 <HAL_TIM_Base_MspInit+0x26c>)
 800c20c:	f006 f81a 	bl	8012244 <HAL_DMA_Init>
 800c210:	4603      	mov	r3, r0
 800c212:	2b00      	cmp	r3, #0
 800c214:	d001      	beq.n	800c21a <HAL_TIM_Base_MspInit+0x22e>
      Error_Handler();
 800c216:	f7ff f9ef 	bl	800b5f8 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	4a0e      	ldr	r2, [pc, #56]	; (800c258 <HAL_TIM_Base_MspInit+0x26c>)
 800c21e:	625a      	str	r2, [r3, #36]	; 0x24
 800c220:	4a0d      	ldr	r2, [pc, #52]	; (800c258 <HAL_TIM_Base_MspInit+0x26c>)
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6393      	str	r3, [r2, #56]	; 0x38
}
 800c226:	bf00      	nop
 800c228:	3718      	adds	r7, #24
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}
 800c22e:	bf00      	nop
 800c230:	40023800 	.word	0x40023800
 800c234:	20012ad0 	.word	0x20012ad0
 800c238:	400260b8 	.word	0x400260b8
 800c23c:	40000400 	.word	0x40000400
 800c240:	20012e0c 	.word	0x20012e0c
 800c244:	40026088 	.word	0x40026088
 800c248:	40000800 	.word	0x40000800
 800c24c:	20012ef0 	.word	0x20012ef0
 800c250:	40026010 	.word	0x40026010
 800c254:	40000c00 	.word	0x40000c00
 800c258:	20012dac 	.word	0x20012dac
 800c25c:	40026040 	.word	0x40026040

0800c260 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b08c      	sub	sp, #48	; 0x30
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c268:	f107 031c 	add.w	r3, r7, #28
 800c26c:	2200      	movs	r2, #0
 800c26e:	601a      	str	r2, [r3, #0]
 800c270:	605a      	str	r2, [r3, #4]
 800c272:	609a      	str	r2, [r3, #8]
 800c274:	60da      	str	r2, [r3, #12]
 800c276:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c280:	d11e      	bne.n	800c2c0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c282:	2300      	movs	r3, #0
 800c284:	61bb      	str	r3, [r7, #24]
 800c286:	4b46      	ldr	r3, [pc, #280]	; (800c3a0 <HAL_TIM_MspPostInit+0x140>)
 800c288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c28a:	4a45      	ldr	r2, [pc, #276]	; (800c3a0 <HAL_TIM_MspPostInit+0x140>)
 800c28c:	f043 0301 	orr.w	r3, r3, #1
 800c290:	6313      	str	r3, [r2, #48]	; 0x30
 800c292:	4b43      	ldr	r3, [pc, #268]	; (800c3a0 <HAL_TIM_MspPostInit+0x140>)
 800c294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c296:	f003 0301 	and.w	r3, r3, #1
 800c29a:	61bb      	str	r3, [r7, #24]
 800c29c:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = xAxisPWM_Pin;
 800c29e:	2308      	movs	r3, #8
 800c2a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c2a2:	2302      	movs	r3, #2
 800c2a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(xAxisPWM_GPIO_Port, &GPIO_InitStruct);
 800c2b2:	f107 031c 	add.w	r3, r7, #28
 800c2b6:	4619      	mov	r1, r3
 800c2b8:	483a      	ldr	r0, [pc, #232]	; (800c3a4 <HAL_TIM_MspPostInit+0x144>)
 800c2ba:	f006 fd9f 	bl	8012dfc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800c2be:	e06b      	b.n	800c398 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM3)
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	4a38      	ldr	r2, [pc, #224]	; (800c3a8 <HAL_TIM_MspPostInit+0x148>)
 800c2c6:	4293      	cmp	r3, r2
 800c2c8:	d11e      	bne.n	800c308 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	617b      	str	r3, [r7, #20]
 800c2ce:	4b34      	ldr	r3, [pc, #208]	; (800c3a0 <HAL_TIM_MspPostInit+0x140>)
 800c2d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2d2:	4a33      	ldr	r2, [pc, #204]	; (800c3a0 <HAL_TIM_MspPostInit+0x140>)
 800c2d4:	f043 0301 	orr.w	r3, r3, #1
 800c2d8:	6313      	str	r3, [r2, #48]	; 0x30
 800c2da:	4b31      	ldr	r3, [pc, #196]	; (800c3a0 <HAL_TIM_MspPostInit+0x140>)
 800c2dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2de:	f003 0301 	and.w	r3, r3, #1
 800c2e2:	617b      	str	r3, [r7, #20]
 800c2e4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = yAxisPWM_L_Pin;
 800c2e6:	2380      	movs	r3, #128	; 0x80
 800c2e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c2ea:	2302      	movs	r3, #2
 800c2ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800c2f6:	2302      	movs	r3, #2
 800c2f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(yAxisPWM_L_GPIO_Port, &GPIO_InitStruct);
 800c2fa:	f107 031c 	add.w	r3, r7, #28
 800c2fe:	4619      	mov	r1, r3
 800c300:	4828      	ldr	r0, [pc, #160]	; (800c3a4 <HAL_TIM_MspPostInit+0x144>)
 800c302:	f006 fd7b 	bl	8012dfc <HAL_GPIO_Init>
}
 800c306:	e047      	b.n	800c398 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM4)
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	4a27      	ldr	r2, [pc, #156]	; (800c3ac <HAL_TIM_MspPostInit+0x14c>)
 800c30e:	4293      	cmp	r3, r2
 800c310:	d11f      	bne.n	800c352 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800c312:	2300      	movs	r3, #0
 800c314:	613b      	str	r3, [r7, #16]
 800c316:	4b22      	ldr	r3, [pc, #136]	; (800c3a0 <HAL_TIM_MspPostInit+0x140>)
 800c318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c31a:	4a21      	ldr	r2, [pc, #132]	; (800c3a0 <HAL_TIM_MspPostInit+0x140>)
 800c31c:	f043 0308 	orr.w	r3, r3, #8
 800c320:	6313      	str	r3, [r2, #48]	; 0x30
 800c322:	4b1f      	ldr	r3, [pc, #124]	; (800c3a0 <HAL_TIM_MspPostInit+0x140>)
 800c324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c326:	f003 0308 	and.w	r3, r3, #8
 800c32a:	613b      	str	r3, [r7, #16]
 800c32c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = yAxisPWM_R_Pin;
 800c32e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c334:	2302      	movs	r3, #2
 800c336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c338:	2300      	movs	r3, #0
 800c33a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c33c:	2300      	movs	r3, #0
 800c33e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800c340:	2302      	movs	r3, #2
 800c342:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(yAxisPWM_R_GPIO_Port, &GPIO_InitStruct);
 800c344:	f107 031c 	add.w	r3, r7, #28
 800c348:	4619      	mov	r1, r3
 800c34a:	4819      	ldr	r0, [pc, #100]	; (800c3b0 <HAL_TIM_MspPostInit+0x150>)
 800c34c:	f006 fd56 	bl	8012dfc <HAL_GPIO_Init>
}
 800c350:	e022      	b.n	800c398 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM5)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	4a17      	ldr	r2, [pc, #92]	; (800c3b4 <HAL_TIM_MspPostInit+0x154>)
 800c358:	4293      	cmp	r3, r2
 800c35a:	d11d      	bne.n	800c398 <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c35c:	2300      	movs	r3, #0
 800c35e:	60fb      	str	r3, [r7, #12]
 800c360:	4b0f      	ldr	r3, [pc, #60]	; (800c3a0 <HAL_TIM_MspPostInit+0x140>)
 800c362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c364:	4a0e      	ldr	r2, [pc, #56]	; (800c3a0 <HAL_TIM_MspPostInit+0x140>)
 800c366:	f043 0301 	orr.w	r3, r3, #1
 800c36a:	6313      	str	r3, [r2, #48]	; 0x30
 800c36c:	4b0c      	ldr	r3, [pc, #48]	; (800c3a0 <HAL_TIM_MspPostInit+0x140>)
 800c36e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c370:	f003 0301 	and.w	r3, r3, #1
 800c374:	60fb      	str	r3, [r7, #12]
 800c376:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = manipulatorPWM_Pin;
 800c378:	2301      	movs	r3, #1
 800c37a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c37c:	2302      	movs	r3, #2
 800c37e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c380:	2300      	movs	r3, #0
 800c382:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c384:	2300      	movs	r3, #0
 800c386:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800c388:	2302      	movs	r3, #2
 800c38a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(manipulatorPWM_GPIO_Port, &GPIO_InitStruct);
 800c38c:	f107 031c 	add.w	r3, r7, #28
 800c390:	4619      	mov	r1, r3
 800c392:	4804      	ldr	r0, [pc, #16]	; (800c3a4 <HAL_TIM_MspPostInit+0x144>)
 800c394:	f006 fd32 	bl	8012dfc <HAL_GPIO_Init>
}
 800c398:	bf00      	nop
 800c39a:	3730      	adds	r7, #48	; 0x30
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}
 800c3a0:	40023800 	.word	0x40023800
 800c3a4:	40020000 	.word	0x40020000
 800c3a8:	40000400 	.word	0x40000400
 800c3ac:	40000800 	.word	0x40000800
 800c3b0:	40020c00 	.word	0x40020c00
 800c3b4:	40000c00 	.word	0x40000c00

0800c3b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b08c      	sub	sp, #48	; 0x30
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	6879      	ldr	r1, [r7, #4]
 800c3cc:	2036      	movs	r0, #54	; 0x36
 800c3ce:	f005 fee5 	bl	801219c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800c3d2:	2036      	movs	r0, #54	; 0x36
 800c3d4:	f005 fefe 	bl	80121d4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800c3d8:	2300      	movs	r3, #0
 800c3da:	60fb      	str	r3, [r7, #12]
 800c3dc:	4b1f      	ldr	r3, [pc, #124]	; (800c45c <HAL_InitTick+0xa4>)
 800c3de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3e0:	4a1e      	ldr	r2, [pc, #120]	; (800c45c <HAL_InitTick+0xa4>)
 800c3e2:	f043 0310 	orr.w	r3, r3, #16
 800c3e6:	6413      	str	r3, [r2, #64]	; 0x40
 800c3e8:	4b1c      	ldr	r3, [pc, #112]	; (800c45c <HAL_InitTick+0xa4>)
 800c3ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3ec:	f003 0310 	and.w	r3, r3, #16
 800c3f0:	60fb      	str	r3, [r7, #12]
 800c3f2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800c3f4:	f107 0210 	add.w	r2, r7, #16
 800c3f8:	f107 0314 	add.w	r3, r7, #20
 800c3fc:	4611      	mov	r1, r2
 800c3fe:	4618      	mov	r0, r3
 800c400:	f008 fece 	bl	80151a0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800c404:	f008 feb8 	bl	8015178 <HAL_RCC_GetPCLK1Freq>
 800c408:	4603      	mov	r3, r0
 800c40a:	005b      	lsls	r3, r3, #1
 800c40c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800c40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c410:	4a13      	ldr	r2, [pc, #76]	; (800c460 <HAL_InitTick+0xa8>)
 800c412:	fba2 2303 	umull	r2, r3, r2, r3
 800c416:	0c9b      	lsrs	r3, r3, #18
 800c418:	3b01      	subs	r3, #1
 800c41a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800c41c:	4b11      	ldr	r3, [pc, #68]	; (800c464 <HAL_InitTick+0xac>)
 800c41e:	4a12      	ldr	r2, [pc, #72]	; (800c468 <HAL_InitTick+0xb0>)
 800c420:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800c422:	4b10      	ldr	r3, [pc, #64]	; (800c464 <HAL_InitTick+0xac>)
 800c424:	f240 32e7 	movw	r2, #999	; 0x3e7
 800c428:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800c42a:	4a0e      	ldr	r2, [pc, #56]	; (800c464 <HAL_InitTick+0xac>)
 800c42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c42e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800c430:	4b0c      	ldr	r3, [pc, #48]	; (800c464 <HAL_InitTick+0xac>)
 800c432:	2200      	movs	r2, #0
 800c434:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c436:	4b0b      	ldr	r3, [pc, #44]	; (800c464 <HAL_InitTick+0xac>)
 800c438:	2200      	movs	r2, #0
 800c43a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800c43c:	4809      	ldr	r0, [pc, #36]	; (800c464 <HAL_InitTick+0xac>)
 800c43e:	f009 fe73 	bl	8016128 <HAL_TIM_Base_Init>
 800c442:	4603      	mov	r3, r0
 800c444:	2b00      	cmp	r3, #0
 800c446:	d104      	bne.n	800c452 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800c448:	4806      	ldr	r0, [pc, #24]	; (800c464 <HAL_InitTick+0xac>)
 800c44a:	f009 fe98 	bl	801617e <HAL_TIM_Base_Start_IT>
 800c44e:	4603      	mov	r3, r0
 800c450:	e000      	b.n	800c454 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800c452:	2301      	movs	r3, #1
}
 800c454:	4618      	mov	r0, r3
 800c456:	3730      	adds	r7, #48	; 0x30
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}
 800c45c:	40023800 	.word	0x40023800
 800c460:	431bde83 	.word	0x431bde83
 800c464:	20012f84 	.word	0x20012f84
 800c468:	40001000 	.word	0x40001000

0800c46c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c46c:	b480      	push	{r7}
 800c46e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800c470:	bf00      	nop
 800c472:	46bd      	mov	sp, r7
 800c474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c478:	4770      	bx	lr

0800c47a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c47a:	b480      	push	{r7}
 800c47c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800c47e:	e7fe      	b.n	800c47e <HardFault_Handler+0x4>

0800c480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800c480:	b480      	push	{r7}
 800c482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800c484:	e7fe      	b.n	800c484 <MemManage_Handler+0x4>

0800c486 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800c486:	b480      	push	{r7}
 800c488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800c48a:	e7fe      	b.n	800c48a <BusFault_Handler+0x4>

0800c48c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800c48c:	b480      	push	{r7}
 800c48e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800c490:	e7fe      	b.n	800c490 <UsageFault_Handler+0x4>

0800c492 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800c492:	b480      	push	{r7}
 800c494:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800c496:	bf00      	nop
 800c498:	46bd      	mov	sp, r7
 800c49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49e:	4770      	bx	lr

0800c4a0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800c4a4:	4802      	ldr	r0, [pc, #8]	; (800c4b0 <TIM6_DAC_IRQHandler+0x10>)
 800c4a6:	f009 ffd5 	bl	8016454 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800c4aa:	bf00      	nop
 800c4ac:	bd80      	pop	{r7, pc}
 800c4ae:	bf00      	nop
 800c4b0:	20012f84 	.word	0x20012f84

0800c4b4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800c4b8:	4802      	ldr	r0, [pc, #8]	; (800c4c4 <LTDC_IRQHandler+0x10>)
 800c4ba:	f007 ff5d 	bl	8014378 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800c4be:	bf00      	nop
 800c4c0:	bd80      	pop	{r7, pc}
 800c4c2:	bf00      	nop
 800c4c4:	20012d04 	.word	0x20012d04

0800c4c8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800c4cc:	4802      	ldr	r0, [pc, #8]	; (800c4d8 <DMA2D_IRQHandler+0x10>)
 800c4ce:	f006 fa56 	bl	801297e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800c4d2:	bf00      	nop
 800c4d4:	bd80      	pop	{r7, pc}
 800c4d6:	bf00      	nop
 800c4d8:	20012e70 	.word	0x20012e70

0800c4dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800c4dc:	b480      	push	{r7}
 800c4de:	af00      	add	r7, sp, #0
	return 1;
 800c4e0:	2301      	movs	r3, #1
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ea:	4770      	bx	lr

0800c4ec <_kill>:

int _kill(int pid, int sig)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b082      	sub	sp, #8
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
 800c4f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800c4f6:	f021 ff21 	bl	802e33c <__errno>
 800c4fa:	4602      	mov	r2, r0
 800c4fc:	2316      	movs	r3, #22
 800c4fe:	6013      	str	r3, [r2, #0]
	return -1;
 800c500:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c504:	4618      	mov	r0, r3
 800c506:	3708      	adds	r7, #8
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}

0800c50c <_exit>:

void _exit (int status)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b082      	sub	sp, #8
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800c514:	f04f 31ff 	mov.w	r1, #4294967295
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f7ff ffe7 	bl	800c4ec <_kill>
	while (1) {}		/* Make sure we hang here */
 800c51e:	e7fe      	b.n	800c51e <_exit+0x12>

0800c520 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b086      	sub	sp, #24
 800c524:	af00      	add	r7, sp, #0
 800c526:	60f8      	str	r0, [r7, #12]
 800c528:	60b9      	str	r1, [r7, #8]
 800c52a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c52c:	2300      	movs	r3, #0
 800c52e:	617b      	str	r3, [r7, #20]
 800c530:	e00a      	b.n	800c548 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800c532:	f3af 8000 	nop.w
 800c536:	4601      	mov	r1, r0
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	1c5a      	adds	r2, r3, #1
 800c53c:	60ba      	str	r2, [r7, #8]
 800c53e:	b2ca      	uxtb	r2, r1
 800c540:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c542:	697b      	ldr	r3, [r7, #20]
 800c544:	3301      	adds	r3, #1
 800c546:	617b      	str	r3, [r7, #20]
 800c548:	697a      	ldr	r2, [r7, #20]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	429a      	cmp	r2, r3
 800c54e:	dbf0      	blt.n	800c532 <_read+0x12>
	}

return len;
 800c550:	687b      	ldr	r3, [r7, #4]
}
 800c552:	4618      	mov	r0, r3
 800c554:	3718      	adds	r7, #24
 800c556:	46bd      	mov	sp, r7
 800c558:	bd80      	pop	{r7, pc}

0800c55a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800c55a:	b580      	push	{r7, lr}
 800c55c:	b086      	sub	sp, #24
 800c55e:	af00      	add	r7, sp, #0
 800c560:	60f8      	str	r0, [r7, #12]
 800c562:	60b9      	str	r1, [r7, #8]
 800c564:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c566:	2300      	movs	r3, #0
 800c568:	617b      	str	r3, [r7, #20]
 800c56a:	e009      	b.n	800c580 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	1c5a      	adds	r2, r3, #1
 800c570:	60ba      	str	r2, [r7, #8]
 800c572:	781b      	ldrb	r3, [r3, #0]
 800c574:	4618      	mov	r0, r3
 800c576:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	3301      	adds	r3, #1
 800c57e:	617b      	str	r3, [r7, #20]
 800c580:	697a      	ldr	r2, [r7, #20]
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	429a      	cmp	r2, r3
 800c586:	dbf1      	blt.n	800c56c <_write+0x12>
	}
	return len;
 800c588:	687b      	ldr	r3, [r7, #4]
}
 800c58a:	4618      	mov	r0, r3
 800c58c:	3718      	adds	r7, #24
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd80      	pop	{r7, pc}

0800c592 <_close>:

int _close(int file)
{
 800c592:	b480      	push	{r7}
 800c594:	b083      	sub	sp, #12
 800c596:	af00      	add	r7, sp, #0
 800c598:	6078      	str	r0, [r7, #4]
	return -1;
 800c59a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	370c      	adds	r7, #12
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a8:	4770      	bx	lr

0800c5aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 800c5aa:	b480      	push	{r7}
 800c5ac:	b083      	sub	sp, #12
 800c5ae:	af00      	add	r7, sp, #0
 800c5b0:	6078      	str	r0, [r7, #4]
 800c5b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c5ba:	605a      	str	r2, [r3, #4]
	return 0;
 800c5bc:	2300      	movs	r3, #0
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	370c      	adds	r7, #12
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c8:	4770      	bx	lr

0800c5ca <_isatty>:

int _isatty(int file)
{
 800c5ca:	b480      	push	{r7}
 800c5cc:	b083      	sub	sp, #12
 800c5ce:	af00      	add	r7, sp, #0
 800c5d0:	6078      	str	r0, [r7, #4]
	return 1;
 800c5d2:	2301      	movs	r3, #1
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	370c      	adds	r7, #12
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5de:	4770      	bx	lr

0800c5e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	b085      	sub	sp, #20
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	60f8      	str	r0, [r7, #12]
 800c5e8:	60b9      	str	r1, [r7, #8]
 800c5ea:	607a      	str	r2, [r7, #4]
	return 0;
 800c5ec:	2300      	movs	r3, #0
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3714      	adds	r7, #20
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f8:	4770      	bx	lr
	...

0800c5fc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b084      	sub	sp, #16
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800c604:	4b11      	ldr	r3, [pc, #68]	; (800c64c <_sbrk+0x50>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d102      	bne.n	800c612 <_sbrk+0x16>
		heap_end = &end;
 800c60c:	4b0f      	ldr	r3, [pc, #60]	; (800c64c <_sbrk+0x50>)
 800c60e:	4a10      	ldr	r2, [pc, #64]	; (800c650 <_sbrk+0x54>)
 800c610:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800c612:	4b0e      	ldr	r3, [pc, #56]	; (800c64c <_sbrk+0x50>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800c618:	4b0c      	ldr	r3, [pc, #48]	; (800c64c <_sbrk+0x50>)
 800c61a:	681a      	ldr	r2, [r3, #0]
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	4413      	add	r3, r2
 800c620:	466a      	mov	r2, sp
 800c622:	4293      	cmp	r3, r2
 800c624:	d907      	bls.n	800c636 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800c626:	f021 fe89 	bl	802e33c <__errno>
 800c62a:	4602      	mov	r2, r0
 800c62c:	230c      	movs	r3, #12
 800c62e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800c630:	f04f 33ff 	mov.w	r3, #4294967295
 800c634:	e006      	b.n	800c644 <_sbrk+0x48>
	}

	heap_end += incr;
 800c636:	4b05      	ldr	r3, [pc, #20]	; (800c64c <_sbrk+0x50>)
 800c638:	681a      	ldr	r2, [r3, #0]
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	4413      	add	r3, r2
 800c63e:	4a03      	ldr	r2, [pc, #12]	; (800c64c <_sbrk+0x50>)
 800c640:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800c642:	68fb      	ldr	r3, [r7, #12]
}
 800c644:	4618      	mov	r0, r3
 800c646:	3710      	adds	r7, #16
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}
 800c64c:	20001a38 	.word	0x20001a38
 800c650:	20013010 	.word	0x20013010

0800c654 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b082      	sub	sp, #8
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
 800c65c:	460b      	mov	r3, r1
 800c65e:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800c660:	887b      	ldrh	r3, [r7, #2]
 800c662:	2b01      	cmp	r3, #1
 800c664:	d008      	beq.n	800c678 <_ZN23ApplicationFontProvider7getFontEt+0x24>
 800c666:	2b02      	cmp	r3, #2
 800c668:	d00b      	beq.n	800c682 <_ZN23ApplicationFontProvider7getFontEt+0x2e>
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d10e      	bne.n	800c68c <_ZN23ApplicationFontProvider7getFontEt+0x38>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800c66e:	f002 fabf 	bl	800ebf0 <_ZN17TypedTextDatabase8getFontsEv>
 800c672:	4603      	mov	r3, r0
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	e00a      	b.n	800c68e <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800c678:	f002 faba 	bl	800ebf0 <_ZN17TypedTextDatabase8getFontsEv>
 800c67c:	4603      	mov	r3, r0
 800c67e:	685b      	ldr	r3, [r3, #4]
 800c680:	e005      	b.n	800c68e <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800c682:	f002 fab5 	bl	800ebf0 <_ZN17TypedTextDatabase8getFontsEv>
 800c686:	4603      	mov	r3, r0
 800c688:	689b      	ldr	r3, [r3, #8]
 800c68a:	e000      	b.n	800c68e <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    default:
        return 0;
 800c68c:	2300      	movs	r3, #0
    }
}
 800c68e:	4618      	mov	r0, r3
 800c690:	3708      	adds	r7, #8
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}
	...

0800c698 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 800c698:	b480      	push	{r7}
 800c69a:	af00      	add	r7, sp, #0
    return bitmap_database;
 800c69c:	4b02      	ldr	r3, [pc, #8]	; (800c6a8 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 800c69e:	4618      	mov	r0, r3
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a6:	4770      	bx	lr
 800c6a8:	08031014 	.word	0x08031014

0800c6ac <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 800c6ac:	b480      	push	{r7}
 800c6ae:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 800c6b0:	230f      	movs	r3, #15
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ba:	4770      	bx	lr

0800c6bc <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800c6bc:	b480      	push	{r7}
 800c6be:	b083      	sub	sp, #12
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
    {
 800c6c4:	4a04      	ldr	r2, [pc, #16]	; (800c6d8 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	601a      	str	r2, [r3, #0]
    }
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	370c      	adds	r7, #12
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d6:	4770      	bx	lr
 800c6d8:	0803166c 	.word	0x0803166c

0800c6dc <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b082      	sub	sp, #8
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
    }
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f7ff ffe9 	bl	800c6bc <_ZN8touchgfx4FontD1Ev>
 800c6ea:	2110      	movs	r1, #16
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f020 fd25 	bl	802d13c <_ZdlPvj>
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	3708      	adds	r7, #8
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}

0800c6fc <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800c6fc:	b590      	push	{r4, r7, lr}
 800c6fe:	b087      	sub	sp, #28
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
 800c704:	460b      	mov	r3, r1
 800c706:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800c708:	887b      	ldrh	r3, [r7, #2]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d101      	bne.n	800c712 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800c70e:	2300      	movs	r3, #0
 800c710:	e010      	b.n	800c734 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800c712:	2300      	movs	r3, #0
 800c714:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800c716:	2300      	movs	r3, #0
 800c718:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	3308      	adds	r3, #8
 800c720:	681c      	ldr	r4, [r3, #0]
 800c722:	f107 030f 	add.w	r3, r7, #15
 800c726:	f107 0210 	add.w	r2, r7, #16
 800c72a:	8879      	ldrh	r1, [r7, #2]
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	47a0      	blx	r4
 800c730:	6178      	str	r0, [r7, #20]
        return glyph;
 800c732:	697b      	ldr	r3, [r7, #20]
    }
 800c734:	4618      	mov	r0, r3
 800c736:	371c      	adds	r7, #28
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd90      	pop	{r4, r7, pc}

0800c73c <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800c73c:	b480      	push	{r7}
 800c73e:	b083      	sub	sp, #12
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	895b      	ldrh	r3, [r3, #10]
    }
 800c748:	4618      	mov	r0, r3
 800c74a:	370c      	adds	r7, #12
 800c74c:	46bd      	mov	sp, r7
 800c74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c752:	4770      	bx	lr

0800c754 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800c754:	b480      	push	{r7}
 800c756:	b083      	sub	sp, #12
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	899b      	ldrh	r3, [r3, #12]
    }
 800c760:	4618      	mov	r0, r3
 800c762:	370c      	adds	r7, #12
 800c764:	46bd      	mov	sp, r7
 800c766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76a:	4770      	bx	lr

0800c76c <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 800c76c:	b480      	push	{r7}
 800c76e:	b083      	sub	sp, #12
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	889b      	ldrh	r3, [r3, #4]
    }
 800c778:	4618      	mov	r0, r3
 800c77a:	370c      	adds	r7, #12
 800c77c:	46bd      	mov	sp, r7
 800c77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c782:	4770      	bx	lr

0800c784 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 800c784:	b480      	push	{r7}
 800c786:	b083      	sub	sp, #12
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	889a      	ldrh	r2, [r3, #4]
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	799b      	ldrb	r3, [r3, #6]
 800c794:	b29b      	uxth	r3, r3
 800c796:	4413      	add	r3, r2
 800c798:	b29b      	uxth	r3, r3
    }
 800c79a:	4618      	mov	r0, r3
 800c79c:	370c      	adds	r7, #12
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a4:	4770      	bx	lr

0800c7a6 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800c7a6:	b480      	push	{r7}
 800c7a8:	b083      	sub	sp, #12
 800c7aa:	af00      	add	r7, sp, #0
 800c7ac:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	79db      	ldrb	r3, [r3, #7]
 800c7b2:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800c7b6:	b2db      	uxtb	r3, r3
    }
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	370c      	adds	r7, #12
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c2:	4770      	bx	lr

0800c7c4 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800c7c4:	b480      	push	{r7}
 800c7c6:	b083      	sub	sp, #12
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	79db      	ldrb	r3, [r3, #7]
 800c7d0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800c7d4:	b2db      	uxtb	r3, r3
    }
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	370c      	adds	r7, #12
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e0:	4770      	bx	lr
	...

0800c7e4 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b082      	sub	sp, #8
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
 800c7ec:	4a05      	ldr	r2, [pc, #20]	; (800c804 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	601a      	str	r2, [r3, #0]
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f7ff ff61 	bl	800c6bc <_ZN8touchgfx4FontD1Ev>
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	3708      	adds	r7, #8
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}
 800c804:	08033868 	.word	0x08033868

0800c808 <_ZN8touchgfx9ConstFontD0Ev>:
 800c808:	b580      	push	{r7, lr}
 800c80a:	b082      	sub	sp, #8
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
 800c810:	6878      	ldr	r0, [r7, #4]
 800c812:	f7ff ffe7 	bl	800c7e4 <_ZN8touchgfx9ConstFontD1Ev>
 800c816:	2118      	movs	r1, #24
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f020 fc8f 	bl	802d13c <_ZdlPvj>
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	4618      	mov	r0, r3
 800c822:	3708      	adds	r7, #8
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}

0800c828 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800c828:	b580      	push	{r7, lr}
 800c82a:	b082      	sub	sp, #8
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
 800c830:	4a05      	ldr	r2, [pc, #20]	; (800c848 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	601a      	str	r2, [r3, #0]
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	4618      	mov	r0, r3
 800c83a:	f7ff ffd3 	bl	800c7e4 <_ZN8touchgfx9ConstFontD1Ev>
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	4618      	mov	r0, r3
 800c842:	3708      	adds	r7, #8
 800c844:	46bd      	mov	sp, r7
 800c846:	bd80      	pop	{r7, pc}
 800c848:	0803160c 	.word	0x0803160c

0800c84c <_ZN8touchgfx13GeneratedFontD0Ev>:
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b082      	sub	sp, #8
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f7ff ffe7 	bl	800c828 <_ZN8touchgfx13GeneratedFontD1Ev>
 800c85a:	2124      	movs	r1, #36	; 0x24
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f020 fc6d 	bl	802d13c <_ZdlPvj>
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	4618      	mov	r0, r3
 800c866:	3708      	adds	r7, #8
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}

0800c86c <_ZN8touchgfx9TypedTextD1Ev>:
    virtual ~TypedText()
 800c86c:	b480      	push	{r7}
 800c86e:	b083      	sub	sp, #12
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
    {
 800c874:	4a04      	ldr	r2, [pc, #16]	; (800c888 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	601a      	str	r2, [r3, #0]
    }
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	4618      	mov	r0, r3
 800c87e:	370c      	adds	r7, #12
 800c880:	46bd      	mov	sp, r7
 800c882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c886:	4770      	bx	lr
 800c888:	08031148 	.word	0x08031148

0800c88c <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b082      	sub	sp, #8
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
    }
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f7ff ffe9 	bl	800c86c <_ZN8touchgfx9TypedTextD1Ev>
 800c89a:	2108      	movs	r1, #8
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	f020 fc4d 	bl	802d13c <_ZdlPvj>
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	3708      	adds	r7, #8
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}

0800c8ac <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800c8ac:	b480      	push	{r7}
 800c8ae:	b083      	sub	sp, #12
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
 800c8b4:	6039      	str	r1, [r7, #0]
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	370c      	adds	r7, #12
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c2:	4770      	bx	lr

0800c8c4 <_ZN8touchgfx8DrawableD1Ev>:
          visible(true)
    {
    }

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800c8c4:	b480      	push	{r7}
 800c8c6:	b083      	sub	sp, #12
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
    {
 800c8cc:	4a04      	ldr	r2, [pc, #16]	; (800c8e0 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	601a      	str	r2, [r3, #0]
    }
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	370c      	adds	r7, #12
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8de:	4770      	bx	lr
 800c8e0:	08033800 	.word	0x08033800

0800c8e4 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b082      	sub	sp, #8
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
    }
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f7ff ffe9 	bl	800c8c4 <_ZN8touchgfx8DrawableD1Ev>
 800c8f2:	2128      	movs	r1, #40	; 0x28
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f020 fc21 	bl	802d13c <_ZdlPvj>
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	3708      	adds	r7, #8
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}

0800c904 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800c904:	b580      	push	{r7, lr}
 800c906:	b084      	sub	sp, #16
 800c908:	af00      	add	r7, sp, #0
 800c90a:	60f8      	str	r0, [r7, #12]
 800c90c:	4608      	mov	r0, r1
 800c90e:	4611      	mov	r1, r2
 800c910:	461a      	mov	r2, r3
 800c912:	4603      	mov	r3, r0
 800c914:	817b      	strh	r3, [r7, #10]
 800c916:	460b      	mov	r3, r1
 800c918:	813b      	strh	r3, [r7, #8]
 800c91a:	4613      	mov	r3, r2
 800c91c:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	3334      	adds	r3, #52	; 0x34
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800c92a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800c92e:	68f8      	ldr	r0, [r7, #12]
 800c930:	4798      	blx	r3
        setWidth(width);
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	3338      	adds	r3, #56	; 0x38
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c93e:	4611      	mov	r1, r2
 800c940:	68f8      	ldr	r0, [r7, #12]
 800c942:	4798      	blx	r3
        setHeight(height);
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	333c      	adds	r3, #60	; 0x3c
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800c950:	4611      	mov	r1, r2
 800c952:	68f8      	ldr	r0, [r7, #12]
 800c954:	4798      	blx	r3
    }
 800c956:	bf00      	nop
 800c958:	3710      	adds	r7, #16
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}

0800c95e <_ZNK8touchgfx8Drawable4getXEv>:
    /**
     * Gets the x coordinate of this Drawable, relative to its parent.
     *
     * @return The x value, relative to the parent.
     */
    int16_t getX() const
 800c95e:	b480      	push	{r7}
 800c960:	b083      	sub	sp, #12
 800c962:	af00      	add	r7, sp, #0
 800c964:	6078      	str	r0, [r7, #4]
    {
        return rect.x;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 800c96c:	4618      	mov	r0, r3
 800c96e:	370c      	adds	r7, #12
 800c970:	46bd      	mov	sp, r7
 800c972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c976:	4770      	bx	lr

0800c978 <_ZNK8touchgfx8Drawable4getYEv>:
    /**
     * Gets the y coordinate of this Drawable, relative to its parent.
     *
     * @return The y value, relative to the parent.
     */
    int16_t getY() const
 800c978:	b480      	push	{r7}
 800c97a:	b083      	sub	sp, #12
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
    {
        return rect.y;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 800c986:	4618      	mov	r0, r3
 800c988:	370c      	adds	r7, #12
 800c98a:	46bd      	mov	sp, r7
 800c98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c990:	4770      	bx	lr

0800c992 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800c992:	b480      	push	{r7}
 800c994:	b083      	sub	sp, #12
 800c996:	af00      	add	r7, sp, #0
 800c998:	6078      	str	r0, [r7, #4]
 800c99a:	460b      	mov	r3, r1
 800c99c:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	887a      	ldrh	r2, [r7, #2]
 800c9a2:	809a      	strh	r2, [r3, #4]
    }
 800c9a4:	bf00      	nop
 800c9a6:	370c      	adds	r7, #12
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ae:	4770      	bx	lr

0800c9b0 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800c9b0:	b480      	push	{r7}
 800c9b2:	b083      	sub	sp, #12
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
 800c9b8:	460b      	mov	r3, r1
 800c9ba:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	887a      	ldrh	r2, [r7, #2]
 800c9c0:	80da      	strh	r2, [r3, #6]
    }
 800c9c2:	bf00      	nop
 800c9c4:	370c      	adds	r7, #12
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9cc:	4770      	bx	lr

0800c9ce <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setXY(int16_t x, int16_t y)
 800c9ce:	b580      	push	{r7, lr}
 800c9d0:	b082      	sub	sp, #8
 800c9d2:	af00      	add	r7, sp, #0
 800c9d4:	6078      	str	r0, [r7, #4]
 800c9d6:	460b      	mov	r3, r1
 800c9d8:	807b      	strh	r3, [r7, #2]
 800c9da:	4613      	mov	r3, r2
 800c9dc:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	332c      	adds	r3, #44	; 0x2c
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800c9ea:	4611      	mov	r1, r2
 800c9ec:	6878      	ldr	r0, [r7, #4]
 800c9ee:	4798      	blx	r3
        setY(y);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	3330      	adds	r3, #48	; 0x30
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	f9b7 2000 	ldrsh.w	r2, [r7]
 800c9fc:	4611      	mov	r1, r2
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	4798      	blx	r3
    }
 800ca02:	bf00      	nop
 800ca04:	3708      	adds	r7, #8
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}

0800ca0a <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800ca0a:	b480      	push	{r7}
 800ca0c:	b083      	sub	sp, #12
 800ca0e:	af00      	add	r7, sp, #0
 800ca10:	6078      	str	r0, [r7, #4]
 800ca12:	460b      	mov	r3, r1
 800ca14:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	887a      	ldrh	r2, [r7, #2]
 800ca1a:	811a      	strh	r2, [r3, #8]
    }
 800ca1c:	bf00      	nop
 800ca1e:	370c      	adds	r7, #12
 800ca20:	46bd      	mov	sp, r7
 800ca22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca26:	4770      	bx	lr

0800ca28 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800ca28:	b480      	push	{r7}
 800ca2a:	b083      	sub	sp, #12
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
 800ca30:	460b      	mov	r3, r1
 800ca32:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	887a      	ldrh	r2, [r7, #2]
 800ca38:	815a      	strh	r2, [r3, #10]
    }
 800ca3a:	bf00      	nop
 800ca3c:	370c      	adds	r7, #12
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca44:	4770      	bx	lr

0800ca46 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800ca46:	b480      	push	{r7}
 800ca48:	b083      	sub	sp, #12
 800ca4a:	af00      	add	r7, sp, #0
 800ca4c:	6078      	str	r0, [r7, #4]
    {
    }
 800ca4e:	bf00      	nop
 800ca50:	370c      	adds	r7, #12
 800ca52:	46bd      	mov	sp, r7
 800ca54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca58:	4770      	bx	lr

0800ca5a <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * Defines the event handler interface for ClickEvents. The default implementation
     * ignores the event. The event is only received if the Drawable is touchable and visible.
     *
     * @param  evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt)
 800ca5a:	b480      	push	{r7}
 800ca5c:	b083      	sub	sp, #12
 800ca5e:	af00      	add	r7, sp, #0
 800ca60:	6078      	str	r0, [r7, #4]
 800ca62:	6039      	str	r1, [r7, #0]
    {
    }
 800ca64:	bf00      	nop
 800ca66:	370c      	adds	r7, #12
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6e:	4770      	bx	lr

0800ca70 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * Defines the event handler interface for GestureEvents. The default implementation
     * ignores the event. The event is only received if the Drawable is touchable and visible.
     *
     * @param  evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt)
 800ca70:	b480      	push	{r7}
 800ca72:	b083      	sub	sp, #12
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
 800ca78:	6039      	str	r1, [r7, #0]
    {
    }
 800ca7a:	bf00      	nop
 800ca7c:	370c      	adds	r7, #12
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca84:	4770      	bx	lr

0800ca86 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * Defines the event handler interface for DragEvents. The default implementation
     * ignores the event. The event is only received if the drawable is touchable and visible.
     *
     * @param  evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt)
 800ca86:	b480      	push	{r7}
 800ca88:	b083      	sub	sp, #12
 800ca8a:	af00      	add	r7, sp, #0
 800ca8c:	6078      	str	r0, [r7, #4]
 800ca8e:	6039      	str	r1, [r7, #0]
    {
    }
 800ca90:	bf00      	nop
 800ca92:	370c      	adds	r7, #12
 800ca94:	46bd      	mov	sp, r7
 800ca96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9a:	4770      	bx	lr

0800ca9c <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800ca9c:	b480      	push	{r7}
 800ca9e:	b083      	sub	sp, #12
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
    {
    }
 800caa4:	bf00      	nop
 800caa6:	370c      	adds	r7, #12
 800caa8:	46bd      	mov	sp, r7
 800caaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caae:	4770      	bx	lr

0800cab0 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800cab0:	b480      	push	{r7}
 800cab2:	b083      	sub	sp, #12
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800cabe:	4618      	mov	r0, r3
 800cac0:	370c      	adds	r7, #12
 800cac2:	46bd      	mov	sp, r7
 800cac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac8:	4770      	bx	lr

0800caca <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800caca:	b480      	push	{r7}
 800cacc:	b083      	sub	sp, #12
 800cace:	af00      	add	r7, sp, #0
 800cad0:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800cad8:	4618      	mov	r0, r3
 800cada:	370c      	adds	r7, #12
 800cadc:	46bd      	mov	sp, r7
 800cade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae2:	4770      	bx	lr

0800cae4 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b082      	sub	sp, #8
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
 800caec:	460b      	mov	r3, r1
 800caee:	807b      	strh	r3, [r7, #2]
 800caf0:	4613      	mov	r3, r2
 800caf2:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	3354      	adds	r3, #84	; 0x54
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	8879      	ldrh	r1, [r7, #2]
 800cafe:	687a      	ldr	r2, [r7, #4]
 800cb00:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800cb04:	b292      	uxth	r2, r2
 800cb06:	1a8a      	subs	r2, r1, r2
 800cb08:	b292      	uxth	r2, r2
 800cb0a:	b210      	sxth	r0, r2
 800cb0c:	8839      	ldrh	r1, [r7, #0]
 800cb0e:	687a      	ldr	r2, [r7, #4]
 800cb10:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800cb14:	b292      	uxth	r2, r2
 800cb16:	1a8a      	subs	r2, r1, r2
 800cb18:	b292      	uxth	r2, r2
 800cb1a:	b212      	sxth	r2, r2
 800cb1c:	4601      	mov	r1, r0
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	4798      	blx	r3
    }
 800cb22:	bf00      	nop
 800cb24:	3708      	adds	r7, #8
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}

0800cb2a <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800cb2a:	b480      	push	{r7}
 800cb2c:	b083      	sub	sp, #12
 800cb2e:	af00      	add	r7, sp, #0
 800cb30:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cb38:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cb40:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cb48:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800cb4a:	bf00      	nop
 800cb4c:	370c      	adds	r7, #12
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb54:	4770      	bx	lr

0800cb56 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800cb56:	b580      	push	{r7, lr}
 800cb58:	b084      	sub	sp, #16
 800cb5a:	af00      	add	r7, sp, #0
 800cb5c:	60f8      	str	r0, [r7, #12]
 800cb5e:	60b9      	str	r1, [r7, #8]
 800cb60:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 800cb62:	68f8      	ldr	r0, [r7, #12]
 800cb64:	f7ff ffe1 	bl	800cb2a <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681a      	ldr	r2, [r3, #0]
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	68fa      	ldr	r2, [r7, #12]
 800cb74:	601a      	str	r2, [r3, #0]
    }
 800cb76:	bf00      	nop
 800cb78:	3710      	adds	r7, #16
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}
	...

0800cb80 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800cb80:	b480      	push	{r7}
 800cb82:	b083      	sub	sp, #12
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800cb88:	4a07      	ldr	r2, [pc, #28]	; (800cba8 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	601a      	str	r2, [r3, #0]
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2200      	movs	r2, #0
 800cb92:	605a      	str	r2, [r3, #4]
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2200      	movs	r2, #0
 800cb98:	721a      	strb	r2, [r3, #8]
    {
    }
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	370c      	adds	r7, #12
 800cba0:	46bd      	mov	sp, r7
 800cba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba6:	4770      	bx	lr
 800cba8:	08031284 	.word	0x08031284

0800cbac <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800cbac:	b480      	push	{r7}
 800cbae:	b083      	sub	sp, #12
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
    {
 800cbb4:	4a04      	ldr	r2, [pc, #16]	; (800cbc8 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	601a      	str	r2, [r3, #0]
    }
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	370c      	adds	r7, #12
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc6:	4770      	bx	lr
 800cbc8:	08031284 	.word	0x08031284

0800cbcc <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b082      	sub	sp, #8
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
    }
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	f7ff ffe9 	bl	800cbac <_ZN8touchgfx10TransitionD1Ev>
 800cbda:	210c      	movs	r1, #12
 800cbdc:	6878      	ldr	r0, [r7, #4]
 800cbde:	f020 faad 	bl	802d13c <_ZdlPvj>
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3708      	adds	r7, #8
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}

0800cbec <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800cbec:	b480      	push	{r7}
 800cbee:	b083      	sub	sp, #12
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
    {
    }
 800cbf4:	bf00      	nop
 800cbf6:	370c      	adds	r7, #12
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfe:	4770      	bx	lr

0800cc00 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800cc00:	b480      	push	{r7}
 800cc02:	b083      	sub	sp, #12
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
    {
    }
 800cc08:	bf00      	nop
 800cc0a:	370c      	adds	r7, #12
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc12:	4770      	bx	lr

0800cc14 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800cc14:	b480      	push	{r7}
 800cc16:	b083      	sub	sp, #12
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
    {
    }
 800cc1c:	bf00      	nop
 800cc1e:	370c      	adds	r7, #12
 800cc20:	46bd      	mov	sp, r7
 800cc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc26:	4770      	bx	lr

0800cc28 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b082      	sub	sp, #8
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 800cc30:	f012 fa4a 	bl	801f0c8 <_ZN8touchgfx11Application11getInstanceEv>
 800cc34:	4602      	mov	r2, r0
 800cc36:	6813      	ldr	r3, [r2, #0]
 800cc38:	3330      	adds	r3, #48	; 0x30
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	4610      	mov	r0, r2
 800cc3e:	4798      	blx	r3
    }
 800cc40:	bf00      	nop
 800cc42:	3708      	adds	r7, #8
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}

0800cc48 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800cc48:	b480      	push	{r7}
 800cc4a:	b083      	sub	sp, #12
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
 800cc50:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	683a      	ldr	r2, [r7, #0]
 800cc56:	605a      	str	r2, [r3, #4]
    }
 800cc58:	bf00      	nop
 800cc5a:	370c      	adds	r7, #12
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc62:	4770      	bx	lr

0800cc64 <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication()
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b082      	sub	sp, #8
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
          pendingScreenTransitionCallback(0)
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f012 fa92 	bl	801f198 <_ZN8touchgfx11ApplicationC1Ev>
 800cc74:	4a09      	ldr	r2, [pc, #36]	; (800cc9c <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	601a      	str	r2, [r3, #0]
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	2200      	movs	r2, #0
 800cc86:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        instance = this;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	4a04      	ldr	r2, [pc, #16]	; (800cca0 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800cc8e:	6013      	str	r3, [r2, #0]
    }
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	4618      	mov	r0, r3
 800cc94:	3708      	adds	r7, #8
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}
 800cc9a:	bf00      	nop
 800cc9c:	08030e84 	.word	0x08030e84
 800cca0:	20012860 	.word	0x20012860

0800cca4 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800cca4:	b480      	push	{r7}
 800cca6:	b083      	sub	sp, #12
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
 800ccac:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	683a      	ldr	r2, [r7, #0]
 800ccb2:	601a      	str	r2, [r3, #0]
    }
 800ccb4:	bf00      	nop
 800ccb6:	370c      	adds	r7, #12
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbe:	4770      	bx	lr

0800ccc0 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800ccc0:	b480      	push	{r7}
 800ccc2:	b083      	sub	sp, #12
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2201      	movs	r2, #1
 800cccc:	721a      	strb	r2, [r3, #8]
    }
 800ccce:	bf00      	nop
 800ccd0:	370c      	adds	r7, #12
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd8:	4770      	bx	lr

0800ccda <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800ccda:	b580      	push	{r7, lr}
 800ccdc:	b084      	sub	sp, #16
 800ccde:	af00      	add	r7, sp, #0
 800cce0:	60f8      	str	r0, [r7, #12]
 800cce2:	607b      	str	r3, [r7, #4]
 800cce4:	460b      	mov	r3, r1
 800cce6:	817b      	strh	r3, [r7, #10]
 800cce8:	4613      	mov	r3, r2
 800ccea:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f7ff fede 	bl	800cab0 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d008      	beq.n	800cd0c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f7ff fee4 	bl	800caca <_ZNK8touchgfx8Drawable11isTouchableEv>
 800cd02:	4603      	mov	r3, r0
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d001      	beq.n	800cd0c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800cd08:	2301      	movs	r3, #1
 800cd0a:	e000      	b.n	800cd0e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d002      	beq.n	800cd18 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800cd12:	68fa      	ldr	r2, [r7, #12]
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	601a      	str	r2, [r3, #0]
        }
    }
 800cd18:	bf00      	nop
 800cd1a:	3710      	adds	r7, #16
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}

0800cd20 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800cd20:	b480      	push	{r7}
 800cd22:	b083      	sub	sp, #12
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
 800cd28:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	683a      	ldr	r2, [r7, #0]
 800cd2e:	605a      	str	r2, [r3, #4]
    }
 800cd30:	bf00      	nop
 800cd32:	370c      	adds	r7, #12
 800cd34:	46bd      	mov	sp, r7
 800cd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3a:	4770      	bx	lr

0800cd3c <_ZN8touchgfx6WidgetD1Ev>:
class Widget : public Drawable
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b082      	sub	sp, #8
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
 800cd44:	4a05      	ldr	r2, [pc, #20]	; (800cd5c <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	601a      	str	r2, [r3, #0]
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f7ff fdb9 	bl	800c8c4 <_ZN8touchgfx8DrawableD1Ev>
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	4618      	mov	r0, r3
 800cd56:	3708      	adds	r7, #8
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}
 800cd5c:	080311f8 	.word	0x080311f8

0800cd60 <_ZN8touchgfx6WidgetD0Ev>:
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b082      	sub	sp, #8
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
 800cd68:	6878      	ldr	r0, [r7, #4]
 800cd6a:	f7ff ffe7 	bl	800cd3c <_ZN8touchgfx6WidgetD1Ev>
 800cd6e:	2128      	movs	r1, #40	; 0x28
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f020 f9e3 	bl	802d13c <_ZdlPvj>
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	4618      	mov	r0, r3
 800cd7a:	3708      	adds	r7, #8
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}

0800cd80 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/sequencescreen_screen/sequenceScreenView.hpp>
#include <gui/sequencescreen_screen/sequenceScreenPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b084      	sub	sp, #16
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	60f8      	str	r0, [r7, #12]
 800cd88:	60b9      	str	r1, [r7, #8]
 800cd8a:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f7ff ff68 	bl	800cc64 <_ZN8touchgfx14MVPApplicationC1Ev>
 800cd94:	4a13      	ldr	r2, [pc, #76]	; (800cde4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	601a      	str	r2, [r3, #0]
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800cda0:	4618      	mov	r0, r3
 800cda2:	f000 f92b 	bl	800cffc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	687a      	ldr	r2, [r7, #4]
 800cdaa:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	68ba      	ldr	r2, [r7, #8]
 800cdb2:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 800cdb6:	f7fc fafb 	bl	80093b0 <_ZN8touchgfx3HAL11getInstanceEv>
 800cdba:	4602      	mov	r2, r0
 800cdbc:	6813      	ldr	r3, [r2, #0]
 800cdbe:	3308      	adds	r3, #8
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	2101      	movs	r1, #1
 800cdc4:	4610      	mov	r0, r2
 800cdc6:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 800cdc8:	2000      	movs	r0, #0
 800cdca:	f001 fe99 	bl	800eb00 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800cdce:	f7fb fec7 	bl	8008b60 <_ZN8touchgfx3HAL3lcdEv>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f019 f94c 	bl	8026072 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	4618      	mov	r0, r3
 800cdde:	3710      	adds	r7, #16
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}
 800cde4:	08030e28 	.word	0x08030e28

0800cde8 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800cde8:	b480      	push	{r7}
 800cdea:	b083      	sub	sp, #12
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
 800cdf0:	6039      	str	r1, [r7, #0]
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	370c      	adds	r7, #12
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfe:	4770      	bx	lr

0800ce00 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b082      	sub	sp, #8
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
 800ce08:	6039      	str	r1, [r7, #0]
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	683a      	ldr	r2, [r7, #0]
 800ce0e:	4611      	mov	r1, r2
 800ce10:	4618      	mov	r0, r3
 800ce12:	f7ff ffe9 	bl	800cde8 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	685a      	ldr	r2, [r3, #4]
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	605a      	str	r2, [r3, #4]
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	683a      	ldr	r2, [r7, #0]
 800ce22:	3308      	adds	r3, #8
 800ce24:	3208      	adds	r2, #8
 800ce26:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ce2a:	e883 0003 	stmia.w	r3, {r0, r1}
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	4618      	mov	r0, r3
 800ce32:	3708      	adds	r7, #8
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}

0800ce38 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>:
 */

// mainScreen

void FrontendApplicationBase::gotomainScreenScreenNoTransition()
{
 800ce38:	b590      	push	{r4, r7, lr}
 800ce3a:	b089      	sub	sp, #36	; 0x24
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotomainScreenScreenNoTransitionImpl);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800ce46:	4b10      	ldr	r3, [pc, #64]	; (800ce88 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv+0x50>)
 800ce48:	61bb      	str	r3, [r7, #24]
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	61fb      	str	r3, [r7, #28]
 800ce4e:	f107 0008 	add.w	r0, r7, #8
 800ce52:	f107 0318 	add.w	r3, r7, #24
 800ce56:	cb0c      	ldmia	r3, {r2, r3}
 800ce58:	6879      	ldr	r1, [r7, #4]
 800ce5a:	f000 f8eb 	bl	800d034 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800ce5e:	f107 0308 	add.w	r3, r7, #8
 800ce62:	4619      	mov	r1, r3
 800ce64:	4620      	mov	r0, r4
 800ce66:	f7ff ffcb 	bl	800ce00 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800ce6a:	f107 0308 	add.w	r3, r7, #8
 800ce6e:	4618      	mov	r0, r3
 800ce70:	f7fd fbc0 	bl	800a5f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800ce80:	bf00      	nop
 800ce82:	3724      	adds	r7, #36	; 0x24
 800ce84:	46bd      	mov	sp, r7
 800ce86:	bd90      	pop	{r4, r7, pc}
 800ce88:	0800ce8d 	.word	0x0800ce8d

0800ce8c <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotomainScreenScreenNoTransitionImpl()
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b084      	sub	sp, #16
 800ce90:	af02      	add	r7, sp, #8
 800ce92:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<mainScreenView, mainScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800cea0:	461a      	mov	r2, r3
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800cea8:	9300      	str	r3, [sp, #0]
 800ceaa:	4b04      	ldr	r3, [pc, #16]	; (800cebc <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x30>)
 800ceac:	4804      	ldr	r0, [pc, #16]	; (800cec0 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x34>)
 800ceae:	f000 f8f3 	bl	800d098 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800ceb2:	bf00      	nop
 800ceb4:	3708      	adds	r7, #8
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bd80      	pop	{r7, pc}
 800ceba:	bf00      	nop
 800cebc:	20012854 	.word	0x20012854
 800cec0:	20012850 	.word	0x20012850

0800cec4 <_ZN23FrontendApplicationBase39gotomainScreenScreenSlideTransitionWestEv>:

void FrontendApplicationBase::gotomainScreenScreenSlideTransitionWest()
{
 800cec4:	b590      	push	{r4, r7, lr}
 800cec6:	b089      	sub	sp, #36	; 0x24
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotomainScreenScreenSlideTransitionWestImpl);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800ced2:	4b10      	ldr	r3, [pc, #64]	; (800cf14 <_ZN23FrontendApplicationBase39gotomainScreenScreenSlideTransitionWestEv+0x50>)
 800ced4:	61bb      	str	r3, [r7, #24]
 800ced6:	2300      	movs	r3, #0
 800ced8:	61fb      	str	r3, [r7, #28]
 800ceda:	f107 0008 	add.w	r0, r7, #8
 800cede:	f107 0318 	add.w	r3, r7, #24
 800cee2:	cb0c      	ldmia	r3, {r2, r3}
 800cee4:	6879      	ldr	r1, [r7, #4]
 800cee6:	f000 f8a5 	bl	800d034 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800ceea:	f107 0308 	add.w	r3, r7, #8
 800ceee:	4619      	mov	r1, r3
 800cef0:	4620      	mov	r0, r4
 800cef2:	f7ff ff85 	bl	800ce00 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800cef6:	f107 0308 	add.w	r3, r7, #8
 800cefa:	4618      	mov	r0, r3
 800cefc:	f7fd fb7a 	bl	800a5f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800cf0c:	bf00      	nop
 800cf0e:	3724      	adds	r7, #36	; 0x24
 800cf10:	46bd      	mov	sp, r7
 800cf12:	bd90      	pop	{r4, r7, pc}
 800cf14:	0800cf19 	.word	0x0800cf19

0800cf18 <_ZN23FrontendApplicationBase43gotomainScreenScreenSlideTransitionWestImplEv>:

void FrontendApplicationBase::gotomainScreenScreenSlideTransitionWestImpl()
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b084      	sub	sp, #16
 800cf1c:	af02      	add	r7, sp, #8
 800cf1e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<mainScreenView, mainScreenPresenter, touchgfx::SlideTransition<WEST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800cf2c:	461a      	mov	r2, r3
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800cf34:	9300      	str	r3, [sp, #0]
 800cf36:	4b04      	ldr	r3, [pc, #16]	; (800cf48 <_ZN23FrontendApplicationBase43gotomainScreenScreenSlideTransitionWestImplEv+0x30>)
 800cf38:	4804      	ldr	r0, [pc, #16]	; (800cf4c <_ZN23FrontendApplicationBase43gotomainScreenScreenSlideTransitionWestImplEv+0x34>)
 800cf3a:	f000 f9d7 	bl	800d2ec <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800cf3e:	bf00      	nop
 800cf40:	3708      	adds	r7, #8
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}
 800cf46:	bf00      	nop
 800cf48:	20012854 	.word	0x20012854
 800cf4c:	20012850 	.word	0x20012850

0800cf50 <_ZN23FrontendApplicationBase43gotosequenceScreenScreenSlideTransitionEastEv>:

// sequenceScreen

void FrontendApplicationBase::gotosequenceScreenScreenSlideTransitionEast()
{
 800cf50:	b590      	push	{r4, r7, lr}
 800cf52:	b089      	sub	sp, #36	; 0x24
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotosequenceScreenScreenSlideTransitionEastImpl);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800cf5e:	4b10      	ldr	r3, [pc, #64]	; (800cfa0 <_ZN23FrontendApplicationBase43gotosequenceScreenScreenSlideTransitionEastEv+0x50>)
 800cf60:	61bb      	str	r3, [r7, #24]
 800cf62:	2300      	movs	r3, #0
 800cf64:	61fb      	str	r3, [r7, #28]
 800cf66:	f107 0008 	add.w	r0, r7, #8
 800cf6a:	f107 0318 	add.w	r3, r7, #24
 800cf6e:	cb0c      	ldmia	r3, {r2, r3}
 800cf70:	6879      	ldr	r1, [r7, #4]
 800cf72:	f000 f85f 	bl	800d034 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800cf76:	f107 0308 	add.w	r3, r7, #8
 800cf7a:	4619      	mov	r1, r3
 800cf7c:	4620      	mov	r0, r4
 800cf7e:	f7ff ff3f 	bl	800ce00 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800cf82:	f107 0308 	add.w	r3, r7, #8
 800cf86:	4618      	mov	r0, r3
 800cf88:	f7fd fb34 	bl	800a5f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800cf98:	bf00      	nop
 800cf9a:	3724      	adds	r7, #36	; 0x24
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd90      	pop	{r4, r7, pc}
 800cfa0:	0800cfa5 	.word	0x0800cfa5

0800cfa4 <_ZN23FrontendApplicationBase47gotosequenceScreenScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotosequenceScreenScreenSlideTransitionEastImpl()
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b084      	sub	sp, #16
 800cfa8:	af02      	add	r7, sp, #8
 800cfaa:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<sequenceScreenView, sequenceScreenPresenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800cfb8:	461a      	mov	r2, r3
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800cfc0:	9300      	str	r3, [sp, #0]
 800cfc2:	4b04      	ldr	r3, [pc, #16]	; (800cfd4 <_ZN23FrontendApplicationBase47gotosequenceScreenScreenSlideTransitionEastImplEv+0x30>)
 800cfc4:	4804      	ldr	r0, [pc, #16]	; (800cfd8 <_ZN23FrontendApplicationBase47gotosequenceScreenScreenSlideTransitionEastImplEv+0x34>)
 800cfc6:	f000 fabb 	bl	800d540 <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800cfca:	bf00      	nop
 800cfcc:	3708      	adds	r7, #8
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bd80      	pop	{r7, pc}
 800cfd2:	bf00      	nop
 800cfd4:	20012854 	.word	0x20012854
 800cfd8:	20012850 	.word	0x20012850

0800cfdc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800cfdc:	b480      	push	{r7}
 800cfde:	b083      	sub	sp, #12
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
 800cfe4:	4a04      	ldr	r2, [pc, #16]	; (800cff8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	601a      	str	r2, [r3, #0]
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	4618      	mov	r0, r3
 800cfee:	370c      	adds	r7, #12
 800cff0:	46bd      	mov	sp, r7
 800cff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff6:	4770      	bx	lr
 800cff8:	08030ec8 	.word	0x08030ec8

0800cffc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback()
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b082      	sub	sp, #8
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	4618      	mov	r0, r3
 800d008:	f7ff ffe8 	bl	800cfdc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800d00c:	4a08      	ldr	r2, [pc, #32]	; (800d030 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	601a      	str	r2, [r3, #0]
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	2200      	movs	r2, #0
 800d016:	605a      	str	r2, [r3, #4]
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2200      	movs	r2, #0
 800d01c:	609a      	str	r2, [r3, #8]
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2200      	movs	r2, #0
 800d022:	60da      	str	r2, [r3, #12]
    }
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	4618      	mov	r0, r3
 800d028:	3708      	adds	r7, #8
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}
 800d02e:	bf00      	nop
 800d030:	08030e6c 	.word	0x08030e6c

0800d034 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 800d034:	b580      	push	{r7, lr}
 800d036:	b084      	sub	sp, #16
 800d038:	af00      	add	r7, sp, #0
 800d03a:	60f8      	str	r0, [r7, #12]
 800d03c:	60b9      	str	r1, [r7, #8]
 800d03e:	4639      	mov	r1, r7
 800d040:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	4618      	mov	r0, r3
 800d048:	f7ff ffc8 	bl	800cfdc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800d04c:	4a08      	ldr	r2, [pc, #32]	; (800d070 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	68ba      	ldr	r2, [r7, #8]
 800d056:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	3308      	adds	r3, #8
 800d05c:	463a      	mov	r2, r7
 800d05e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d062:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	4618      	mov	r0, r3
 800d06a:	3710      	adds	r7, #16
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}
 800d070:	08030e6c 	.word	0x08030e6c

0800d074 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800d074:	b580      	push	{r7, lr}
 800d076:	b082      	sub	sp, #8
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	4618      	mov	r0, r3
 800d080:	f7ff fd7e 	bl	800cb80 <_ZN8touchgfx10TransitionC1Ev>
 800d084:	4a03      	ldr	r2, [pc, #12]	; (800d094 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	601a      	str	r2, [r3, #0]
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	4618      	mov	r0, r3
 800d08e:	3708      	adds	r7, #8
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}
 800d094:	08031260 	.word	0x08031260

0800d098 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800d098:	b590      	push	{r4, r7, lr}
 800d09a:	b08f      	sub	sp, #60	; 0x3c
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	60f8      	str	r0, [r7, #12]
 800d0a0:	60b9      	str	r1, [r7, #8]
 800d0a2:	607a      	str	r2, [r7, #4]
 800d0a4:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	689a      	ldr	r2, [r3, #8]
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	689b      	ldr	r3, [r3, #8]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	3320      	adds	r3, #32
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	4610      	mov	r0, r2
 800d0b6:	4798      	blx	r3
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	f5b3 6faa 	cmp.w	r3, #1360	; 0x550
 800d0be:	d205      	bcs.n	800d0cc <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800d0c0:	4b85      	ldr	r3, [pc, #532]	; (800d2d8 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x240>)
 800d0c2:	4a86      	ldr	r2, [pc, #536]	; (800d2dc <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800d0c4:	21a7      	movs	r1, #167	; 0xa7
 800d0c6:	4886      	ldr	r0, [pc, #536]	; (800d2e0 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d0c8:	f021 f906 	bl	802e2d8 <__assert_func>
 800d0cc:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	685a      	ldr	r2, [r3, #4]
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	685b      	ldr	r3, [r3, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	3320      	adds	r3, #32
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	4610      	mov	r0, r2
 800d0de:	4798      	blx	r3
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	2b0f      	cmp	r3, #15
 800d0e4:	d805      	bhi.n	800d0f2 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800d0e6:	4b7f      	ldr	r3, [pc, #508]	; (800d2e4 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d0e8:	4a7c      	ldr	r2, [pc, #496]	; (800d2dc <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800d0ea:	21a8      	movs	r1, #168	; 0xa8
 800d0ec:	487c      	ldr	r0, [pc, #496]	; (800d2e0 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d0ee:	f021 f8f3 	bl	802e2d8 <__assert_func>
 800d0f2:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	68da      	ldr	r2, [r3, #12]
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	68db      	ldr	r3, [r3, #12]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	3320      	adds	r3, #32
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	4610      	mov	r0, r2
 800d104:	4798      	blx	r3
 800d106:	4603      	mov	r3, r0
 800d108:	2b0b      	cmp	r3, #11
 800d10a:	d805      	bhi.n	800d118 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800d10c:	4b76      	ldr	r3, [pc, #472]	; (800d2e8 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800d10e:	4a73      	ldr	r2, [pc, #460]	; (800d2dc <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800d110:	21a9      	movs	r1, #169	; 0xa9
 800d112:	4873      	ldr	r0, [pc, #460]	; (800d2e0 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d114:	f021 f8e0 	bl	802e2d8 <__assert_func>
 800d118:	bf00      	nop
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d11e:	68bb      	ldr	r3, [r7, #8]
 800d120:	627b      	str	r3, [r7, #36]	; 0x24
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800d126:	f011 ffcf 	bl	801f0c8 <_ZN8touchgfx11Application11getInstanceEv>
 800d12a:	4603      	mov	r3, r0
 800d12c:	4618      	mov	r0, r3
 800d12e:	f012 f819 	bl	801f164 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800d132:	6a3b      	ldr	r3, [r7, #32]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d008      	beq.n	800d14c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800d13a:	6a3b      	ldr	r3, [r7, #32]
 800d13c:	681a      	ldr	r2, [r3, #0]
 800d13e:	6a3b      	ldr	r3, [r7, #32]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	330c      	adds	r3, #12
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	4610      	mov	r0, r2
 800d14a:	4798      	blx	r3
    if (*currentTrans)
 800d14c:	6a3b      	ldr	r3, [r7, #32]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d007      	beq.n	800d164 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800d154:	6a3b      	ldr	r3, [r7, #32]
 800d156:	681a      	ldr	r2, [r3, #0]
 800d158:	6a3b      	ldr	r3, [r7, #32]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	4610      	mov	r0, r2
 800d162:	4798      	blx	r3
    if (*currentScreen)
 800d164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d008      	beq.n	800d17e <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800d16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d16e:	681a      	ldr	r2, [r3, #0]
 800d170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	3314      	adds	r3, #20
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	4610      	mov	r0, r2
 800d17c:	4798      	blx	r3
    if (*currentPresenter)
 800d17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d008      	beq.n	800d198 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800d186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d188:	681a      	ldr	r2, [r3, #0]
 800d18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	3304      	adds	r3, #4
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	4610      	mov	r0, r2
 800d196:	4798      	blx	r3
    if (*currentScreen)
 800d198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d007      	beq.n	800d1b0 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800d1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1a2:	681a      	ldr	r2, [r3, #0]
 800d1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	4610      	mov	r0, r2
 800d1ae:	4798      	blx	r3
    if (*currentPresenter)
 800d1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d008      	beq.n	800d1ca <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800d1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ba:	681a      	ldr	r2, [r3, #0]
 800d1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	3308      	adds	r3, #8
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	4610      	mov	r0, r2
 800d1c8:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	68db      	ldr	r3, [r3, #12]
 800d1ce:	2100      	movs	r1, #0
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f000 fae1 	bl	800d798 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	4619      	mov	r1, r3
 800d1da:	200c      	movs	r0, #12
 800d1dc:	f7ff fb66 	bl	800c8ac <_ZnwjPv>
 800d1e0:	4604      	mov	r4, r0
 800d1e2:	2c00      	cmp	r4, #0
 800d1e4:	d004      	beq.n	800d1f0 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x158>
 800d1e6:	4620      	mov	r0, r4
 800d1e8:	f7ff ff44 	bl	800d074 <_ZN8touchgfx12NoTransitionC1Ev>
 800d1ec:	4623      	mov	r3, r4
 800d1ee:	e000      	b.n	800d1f2 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 800d1f0:	4623      	mov	r3, r4
 800d1f2:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	689b      	ldr	r3, [r3, #8]
 800d1f8:	2100      	movs	r1, #0
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f000 fadf 	bl	800d7be <_ZN8touchgfx17AbstractPartition2atI14mainScreenViewEERT_t>
 800d200:	4603      	mov	r3, r0
 800d202:	4619      	mov	r1, r3
 800d204:	f44f 60aa 	mov.w	r0, #1360	; 0x550
 800d208:	f7ff fb50 	bl	800c8ac <_ZnwjPv>
 800d20c:	4604      	mov	r4, r0
 800d20e:	2c00      	cmp	r4, #0
 800d210:	d004      	beq.n	800d21c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x184>
 800d212:	4620      	mov	r0, r4
 800d214:	f003 fec0 	bl	8010f98 <_ZN14mainScreenViewC1Ev>
 800d218:	4623      	mov	r3, r4
 800d21a:	e000      	b.n	800d21e <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 800d21c:	4623      	mov	r3, r4
 800d21e:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	685b      	ldr	r3, [r3, #4]
 800d224:	2100      	movs	r1, #0
 800d226:	4618      	mov	r0, r3
 800d228:	f000 fadc 	bl	800d7e4 <_ZN8touchgfx17AbstractPartition2atI19mainScreenPresenterEERT_t>
 800d22c:	4603      	mov	r3, r0
 800d22e:	4619      	mov	r1, r3
 800d230:	2010      	movs	r0, #16
 800d232:	f7ff fb3b 	bl	800c8ac <_ZnwjPv>
 800d236:	4604      	mov	r4, r0
 800d238:	2c00      	cmp	r4, #0
 800d23a:	d005      	beq.n	800d248 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 800d23c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d23e:	4620      	mov	r0, r4
 800d240:	f003 fe52 	bl	8010ee8 <_ZN19mainScreenPresenterC1ER14mainScreenView>
 800d244:	4623      	mov	r3, r4
 800d246:	e000      	b.n	800d24a <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800d248:	4623      	mov	r3, r4
 800d24a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d250:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d256:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d25c:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800d25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d260:	2b00      	cmp	r3, #0
 800d262:	d002      	beq.n	800d26a <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d2>
 800d264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d266:	3304      	adds	r3, #4
 800d268:	e000      	b.n	800d26c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 800d26a:	2300      	movs	r3, #0
 800d26c:	4619      	mov	r1, r3
 800d26e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800d270:	f7ff fd18 	bl	800cca4 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800d274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d276:	3304      	adds	r3, #4
 800d278:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d27a:	4618      	mov	r0, r3
 800d27c:	f7ff fd50 	bl	800cd20 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800d280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d282:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d284:	4618      	mov	r0, r3
 800d286:	f000 fac0 	bl	800d80a <_ZN8touchgfx4ViewI19mainScreenPresenterE4bindERS1_>
 800d28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d28c:	61fb      	str	r3, [r7, #28]
 800d28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d290:	61bb      	str	r3, [r7, #24]
 800d292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d294:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800d296:	69fb      	ldr	r3, [r7, #28]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	330c      	adds	r3, #12
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	69f8      	ldr	r0, [r7, #28]
 800d2a0:	4798      	blx	r3
    newPresenter->activate();
 800d2a2:	69bb      	ldr	r3, [r7, #24]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	69b8      	ldr	r0, [r7, #24]
 800d2aa:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800d2ac:	6979      	ldr	r1, [r7, #20]
 800d2ae:	69f8      	ldr	r0, [r7, #28]
 800d2b0:	f013 f8c2 	bl	8020438 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800d2b4:	697b      	ldr	r3, [r7, #20]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	3310      	adds	r3, #16
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	6978      	ldr	r0, [r7, #20]
 800d2be:	4798      	blx	r3
    newTransition->invalidate();
 800d2c0:	697b      	ldr	r3, [r7, #20]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	3314      	adds	r3, #20
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	6978      	ldr	r0, [r7, #20]
 800d2ca:	4798      	blx	r3

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800d2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	373c      	adds	r7, #60	; 0x3c
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	bd90      	pop	{r4, r7, pc}
 800d2d6:	bf00      	nop
 800d2d8:	0802fab8 	.word	0x0802fab8
 800d2dc:	080312a0 	.word	0x080312a0
 800d2e0:	0802fb48 	.word	0x0802fb48
 800d2e4:	0802fb90 	.word	0x0802fb90
 800d2e8:	0802fc34 	.word	0x0802fc34

0800d2ec <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800d2ec:	b590      	push	{r4, r7, lr}
 800d2ee:	b08f      	sub	sp, #60	; 0x3c
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	60f8      	str	r0, [r7, #12]
 800d2f4:	60b9      	str	r1, [r7, #8]
 800d2f6:	607a      	str	r2, [r7, #4]
 800d2f8:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	689a      	ldr	r2, [r3, #8]
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	689b      	ldr	r3, [r3, #8]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	3320      	adds	r3, #32
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	4610      	mov	r0, r2
 800d30a:	4798      	blx	r3
 800d30c:	4603      	mov	r3, r0
 800d30e:	f5b3 6faa 	cmp.w	r3, #1360	; 0x550
 800d312:	d205      	bcs.n	800d320 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800d314:	4b85      	ldr	r3, [pc, #532]	; (800d52c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x240>)
 800d316:	4a86      	ldr	r2, [pc, #536]	; (800d530 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800d318:	21a7      	movs	r1, #167	; 0xa7
 800d31a:	4886      	ldr	r0, [pc, #536]	; (800d534 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d31c:	f020 ffdc 	bl	802e2d8 <__assert_func>
 800d320:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	685a      	ldr	r2, [r3, #4]
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	685b      	ldr	r3, [r3, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	3320      	adds	r3, #32
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	4610      	mov	r0, r2
 800d332:	4798      	blx	r3
 800d334:	4603      	mov	r3, r0
 800d336:	2b0f      	cmp	r3, #15
 800d338:	d805      	bhi.n	800d346 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800d33a:	4b7f      	ldr	r3, [pc, #508]	; (800d538 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d33c:	4a7c      	ldr	r2, [pc, #496]	; (800d530 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800d33e:	21a8      	movs	r1, #168	; 0xa8
 800d340:	487c      	ldr	r0, [pc, #496]	; (800d534 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d342:	f020 ffc9 	bl	802e2d8 <__assert_func>
 800d346:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	68da      	ldr	r2, [r3, #12]
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	68db      	ldr	r3, [r3, #12]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	3320      	adds	r3, #32
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	4610      	mov	r0, r2
 800d358:	4798      	blx	r3
 800d35a:	4603      	mov	r3, r0
 800d35c:	2b53      	cmp	r3, #83	; 0x53
 800d35e:	d805      	bhi.n	800d36c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800d360:	4b76      	ldr	r3, [pc, #472]	; (800d53c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800d362:	4a73      	ldr	r2, [pc, #460]	; (800d530 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800d364:	21a9      	movs	r1, #169	; 0xa9
 800d366:	4873      	ldr	r0, [pc, #460]	; (800d534 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d368:	f020 ffb6 	bl	802e2d8 <__assert_func>
 800d36c:	bf00      	nop
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	62bb      	str	r3, [r7, #40]	; 0x28
 800d372:	68bb      	ldr	r3, [r7, #8]
 800d374:	627b      	str	r3, [r7, #36]	; 0x24
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800d37a:	f011 fea5 	bl	801f0c8 <_ZN8touchgfx11Application11getInstanceEv>
 800d37e:	4603      	mov	r3, r0
 800d380:	4618      	mov	r0, r3
 800d382:	f011 feef 	bl	801f164 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800d386:	6a3b      	ldr	r3, [r7, #32]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d008      	beq.n	800d3a0 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800d38e:	6a3b      	ldr	r3, [r7, #32]
 800d390:	681a      	ldr	r2, [r3, #0]
 800d392:	6a3b      	ldr	r3, [r7, #32]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	330c      	adds	r3, #12
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	4610      	mov	r0, r2
 800d39e:	4798      	blx	r3
    if (*currentTrans)
 800d3a0:	6a3b      	ldr	r3, [r7, #32]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d007      	beq.n	800d3b8 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800d3a8:	6a3b      	ldr	r3, [r7, #32]
 800d3aa:	681a      	ldr	r2, [r3, #0]
 800d3ac:	6a3b      	ldr	r3, [r7, #32]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	4610      	mov	r0, r2
 800d3b6:	4798      	blx	r3
    if (*currentScreen)
 800d3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d008      	beq.n	800d3d2 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800d3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c2:	681a      	ldr	r2, [r3, #0]
 800d3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	3314      	adds	r3, #20
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	4610      	mov	r0, r2
 800d3d0:	4798      	blx	r3
    if (*currentPresenter)
 800d3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d008      	beq.n	800d3ec <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800d3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3dc:	681a      	ldr	r2, [r3, #0]
 800d3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	3304      	adds	r3, #4
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	4610      	mov	r0, r2
 800d3ea:	4798      	blx	r3
    if (*currentScreen)
 800d3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d007      	beq.n	800d404 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800d3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3f6:	681a      	ldr	r2, [r3, #0]
 800d3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	4610      	mov	r0, r2
 800d402:	4798      	blx	r3
    if (*currentPresenter)
 800d404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d008      	beq.n	800d41e <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800d40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d40e:	681a      	ldr	r2, [r3, #0]
 800d410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	3308      	adds	r3, #8
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	4610      	mov	r0, r2
 800d41c:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	68db      	ldr	r3, [r3, #12]
 800d422:	2100      	movs	r1, #0
 800d424:	4618      	mov	r0, r3
 800d426:	f000 f9fe 	bl	800d826 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE3EEEEERT_t>
 800d42a:	4603      	mov	r3, r0
 800d42c:	4619      	mov	r1, r3
 800d42e:	2054      	movs	r0, #84	; 0x54
 800d430:	f7ff fa3c 	bl	800c8ac <_ZnwjPv>
 800d434:	4604      	mov	r4, r0
 800d436:	2c00      	cmp	r4, #0
 800d438:	d005      	beq.n	800d446 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 800d43a:	2114      	movs	r1, #20
 800d43c:	4620      	mov	r0, r4
 800d43e:	f000 fa49 	bl	800d8d4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh>
 800d442:	4623      	mov	r3, r4
 800d444:	e000      	b.n	800d448 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>
 800d446:	4623      	mov	r3, r4
 800d448:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	689b      	ldr	r3, [r3, #8]
 800d44e:	2100      	movs	r1, #0
 800d450:	4618      	mov	r0, r3
 800d452:	f000 f9b4 	bl	800d7be <_ZN8touchgfx17AbstractPartition2atI14mainScreenViewEERT_t>
 800d456:	4603      	mov	r3, r0
 800d458:	4619      	mov	r1, r3
 800d45a:	f44f 60aa 	mov.w	r0, #1360	; 0x550
 800d45e:	f7ff fa25 	bl	800c8ac <_ZnwjPv>
 800d462:	4604      	mov	r4, r0
 800d464:	2c00      	cmp	r4, #0
 800d466:	d004      	beq.n	800d472 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 800d468:	4620      	mov	r0, r4
 800d46a:	f003 fd95 	bl	8010f98 <_ZN14mainScreenViewC1Ev>
 800d46e:	4623      	mov	r3, r4
 800d470:	e000      	b.n	800d474 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x188>
 800d472:	4623      	mov	r3, r4
 800d474:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	685b      	ldr	r3, [r3, #4]
 800d47a:	2100      	movs	r1, #0
 800d47c:	4618      	mov	r0, r3
 800d47e:	f000 f9b1 	bl	800d7e4 <_ZN8touchgfx17AbstractPartition2atI19mainScreenPresenterEERT_t>
 800d482:	4603      	mov	r3, r0
 800d484:	4619      	mov	r1, r3
 800d486:	2010      	movs	r0, #16
 800d488:	f7ff fa10 	bl	800c8ac <_ZnwjPv>
 800d48c:	4604      	mov	r4, r0
 800d48e:	2c00      	cmp	r4, #0
 800d490:	d005      	beq.n	800d49e <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800d492:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d494:	4620      	mov	r0, r4
 800d496:	f003 fd27 	bl	8010ee8 <_ZN19mainScreenPresenterC1ER14mainScreenView>
 800d49a:	4623      	mov	r3, r4
 800d49c:	e000      	b.n	800d4a0 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800d49e:	4623      	mov	r3, r4
 800d4a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d4a6:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d4ac:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4b2:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800d4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d002      	beq.n	800d4c0 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 800d4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4bc:	3304      	adds	r3, #4
 800d4be:	e000      	b.n	800d4c2 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d6>
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	4619      	mov	r1, r3
 800d4c4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800d4c6:	f7ff fbed 	bl	800cca4 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800d4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4cc:	3304      	adds	r3, #4
 800d4ce:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f7ff fc25 	bl	800cd20 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800d4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f000 f995 	bl	800d80a <_ZN8touchgfx4ViewI19mainScreenPresenterE4bindERS1_>
 800d4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e2:	61fb      	str	r3, [r7, #28]
 800d4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4e6:	61bb      	str	r3, [r7, #24]
 800d4e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4ea:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800d4ec:	69fb      	ldr	r3, [r7, #28]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	330c      	adds	r3, #12
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	69f8      	ldr	r0, [r7, #28]
 800d4f6:	4798      	blx	r3
    newPresenter->activate();
 800d4f8:	69bb      	ldr	r3, [r7, #24]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	69b8      	ldr	r0, [r7, #24]
 800d500:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800d502:	6979      	ldr	r1, [r7, #20]
 800d504:	69f8      	ldr	r0, [r7, #28]
 800d506:	f012 ff97 	bl	8020438 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	3310      	adds	r3, #16
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	6978      	ldr	r0, [r7, #20]
 800d514:	4798      	blx	r3
    newTransition->invalidate();
 800d516:	697b      	ldr	r3, [r7, #20]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	3314      	adds	r3, #20
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	6978      	ldr	r0, [r7, #20]
 800d520:	4798      	blx	r3
    return newPresenter;
 800d522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d524:	4618      	mov	r0, r3
 800d526:	373c      	adds	r7, #60	; 0x3c
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd90      	pop	{r4, r7, pc}
 800d52c:	0802fab8 	.word	0x0802fab8
 800d530:	080313ac 	.word	0x080313ac
 800d534:	0802fb48 	.word	0x0802fb48
 800d538:	0802fb90 	.word	0x0802fb90
 800d53c:	0802fc34 	.word	0x0802fc34

0800d540 <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800d540:	b590      	push	{r4, r7, lr}
 800d542:	b08f      	sub	sp, #60	; 0x3c
 800d544:	af00      	add	r7, sp, #0
 800d546:	60f8      	str	r0, [r7, #12]
 800d548:	60b9      	str	r1, [r7, #8]
 800d54a:	607a      	str	r2, [r7, #4]
 800d54c:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	689a      	ldr	r2, [r3, #8]
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	689b      	ldr	r3, [r3, #8]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	3320      	adds	r3, #32
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	4610      	mov	r0, r2
 800d55e:	4798      	blx	r3
 800d560:	4602      	mov	r2, r0
 800d562:	f640 1377 	movw	r3, #2423	; 0x977
 800d566:	429a      	cmp	r2, r3
 800d568:	d805      	bhi.n	800d576 <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800d56a:	4b86      	ldr	r3, [pc, #536]	; (800d784 <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800d56c:	4a86      	ldr	r2, [pc, #536]	; (800d788 <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d56e:	21a7      	movs	r1, #167	; 0xa7
 800d570:	4886      	ldr	r0, [pc, #536]	; (800d78c <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d572:	f020 feb1 	bl	802e2d8 <__assert_func>
 800d576:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	685a      	ldr	r2, [r3, #4]
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	685b      	ldr	r3, [r3, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	3320      	adds	r3, #32
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	4610      	mov	r0, r2
 800d588:	4798      	blx	r3
 800d58a:	4603      	mov	r3, r0
 800d58c:	2b0f      	cmp	r3, #15
 800d58e:	d805      	bhi.n	800d59c <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800d590:	4b7f      	ldr	r3, [pc, #508]	; (800d790 <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800d592:	4a7d      	ldr	r2, [pc, #500]	; (800d788 <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d594:	21a8      	movs	r1, #168	; 0xa8
 800d596:	487d      	ldr	r0, [pc, #500]	; (800d78c <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d598:	f020 fe9e 	bl	802e2d8 <__assert_func>
 800d59c:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	68da      	ldr	r2, [r3, #12]
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	68db      	ldr	r3, [r3, #12]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	3320      	adds	r3, #32
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	4610      	mov	r0, r2
 800d5ae:	4798      	blx	r3
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	2b53      	cmp	r3, #83	; 0x53
 800d5b4:	d805      	bhi.n	800d5c2 <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800d5b6:	4b77      	ldr	r3, [pc, #476]	; (800d794 <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 800d5b8:	4a73      	ldr	r2, [pc, #460]	; (800d788 <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d5ba:	21a9      	movs	r1, #169	; 0xa9
 800d5bc:	4873      	ldr	r0, [pc, #460]	; (800d78c <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d5be:	f020 fe8b 	bl	802e2d8 <__assert_func>
 800d5c2:	bf00      	nop
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	62bb      	str	r3, [r7, #40]	; 0x28
 800d5c8:	68bb      	ldr	r3, [r7, #8]
 800d5ca:	627b      	str	r3, [r7, #36]	; 0x24
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800d5d0:	f011 fd7a 	bl	801f0c8 <_ZN8touchgfx11Application11getInstanceEv>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f011 fdc4 	bl	801f164 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800d5dc:	6a3b      	ldr	r3, [r7, #32]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d008      	beq.n	800d5f6 <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 800d5e4:	6a3b      	ldr	r3, [r7, #32]
 800d5e6:	681a      	ldr	r2, [r3, #0]
 800d5e8:	6a3b      	ldr	r3, [r7, #32]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	330c      	adds	r3, #12
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	4610      	mov	r0, r2
 800d5f4:	4798      	blx	r3
    if (*currentTrans)
 800d5f6:	6a3b      	ldr	r3, [r7, #32]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d007      	beq.n	800d60e <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 800d5fe:	6a3b      	ldr	r3, [r7, #32]
 800d600:	681a      	ldr	r2, [r3, #0]
 800d602:	6a3b      	ldr	r3, [r7, #32]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	4610      	mov	r0, r2
 800d60c:	4798      	blx	r3
    if (*currentScreen)
 800d60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d008      	beq.n	800d628 <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 800d616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d618:	681a      	ldr	r2, [r3, #0]
 800d61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	3314      	adds	r3, #20
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	4610      	mov	r0, r2
 800d626:	4798      	blx	r3
    if (*currentPresenter)
 800d628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d008      	beq.n	800d642 <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 800d630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d632:	681a      	ldr	r2, [r3, #0]
 800d634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	3304      	adds	r3, #4
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	4610      	mov	r0, r2
 800d640:	4798      	blx	r3
    if (*currentScreen)
 800d642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d007      	beq.n	800d65a <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 800d64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d64c:	681a      	ldr	r2, [r3, #0]
 800d64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	4610      	mov	r0, r2
 800d658:	4798      	blx	r3
    if (*currentPresenter)
 800d65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d008      	beq.n	800d674 <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 800d662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d664:	681a      	ldr	r2, [r3, #0]
 800d666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	3308      	adds	r3, #8
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	4610      	mov	r0, r2
 800d672:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	68db      	ldr	r3, [r3, #12]
 800d678:	2100      	movs	r1, #0
 800d67a:	4618      	mov	r0, r3
 800d67c:	f000 f9be 	bl	800d9fc <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 800d680:	4603      	mov	r3, r0
 800d682:	4619      	mov	r1, r3
 800d684:	2054      	movs	r0, #84	; 0x54
 800d686:	f7ff f911 	bl	800c8ac <_ZnwjPv>
 800d68a:	4604      	mov	r4, r0
 800d68c:	2c00      	cmp	r4, #0
 800d68e:	d005      	beq.n	800d69c <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>
 800d690:	2114      	movs	r1, #20
 800d692:	4620      	mov	r0, r4
 800d694:	f000 f9e8 	bl	800da68 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 800d698:	4623      	mov	r3, r4
 800d69a:	e000      	b.n	800d69e <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15e>
 800d69c:	4623      	mov	r3, r4
 800d69e:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	689b      	ldr	r3, [r3, #8]
 800d6a4:	2100      	movs	r1, #0
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	f000 fa72 	bl	800db90 <_ZN8touchgfx17AbstractPartition2atI18sequenceScreenViewEERT_t>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	4619      	mov	r1, r3
 800d6b0:	f640 1078 	movw	r0, #2424	; 0x978
 800d6b4:	f7ff f8fa 	bl	800c8ac <_ZnwjPv>
 800d6b8:	4604      	mov	r4, r0
 800d6ba:	2c00      	cmp	r4, #0
 800d6bc:	d004      	beq.n	800d6c8 <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x188>
 800d6be:	4620      	mov	r0, r4
 800d6c0:	f003 fe5e 	bl	8011380 <_ZN18sequenceScreenViewC1Ev>
 800d6c4:	4623      	mov	r3, r4
 800d6c6:	e000      	b.n	800d6ca <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x18a>
 800d6c8:	4623      	mov	r3, r4
 800d6ca:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	685b      	ldr	r3, [r3, #4]
 800d6d0:	2100      	movs	r1, #0
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f000 fa6f 	bl	800dbb6 <_ZN8touchgfx17AbstractPartition2atI23sequenceScreenPresenterEERT_t>
 800d6d8:	4603      	mov	r3, r0
 800d6da:	4619      	mov	r1, r3
 800d6dc:	2010      	movs	r0, #16
 800d6de:	f7ff f8e5 	bl	800c8ac <_ZnwjPv>
 800d6e2:	4604      	mov	r4, r0
 800d6e4:	2c00      	cmp	r4, #0
 800d6e6:	d005      	beq.n	800d6f4 <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800d6e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d6ea:	4620      	mov	r0, r4
 800d6ec:	f003 fdca 	bl	8011284 <_ZN23sequenceScreenPresenterC1ER18sequenceScreenView>
 800d6f0:	4623      	mov	r3, r4
 800d6f2:	e000      	b.n	800d6f6 <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 800d6f4:	4623      	mov	r3, r4
 800d6f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d6fc:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d702:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d708:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800d70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d002      	beq.n	800d716 <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d6>
 800d710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d712:	3304      	adds	r3, #4
 800d714:	e000      	b.n	800d718 <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d8>
 800d716:	2300      	movs	r3, #0
 800d718:	4619      	mov	r1, r3
 800d71a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800d71c:	f7ff fac2 	bl	800cca4 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800d720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d722:	3304      	adds	r3, #4
 800d724:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d726:	4618      	mov	r0, r3
 800d728:	f7ff fafa 	bl	800cd20 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800d72c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d72e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d730:	4618      	mov	r0, r3
 800d732:	f000 fa53 	bl	800dbdc <_ZN8touchgfx4ViewI23sequenceScreenPresenterE4bindERS1_>
 800d736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d738:	61fb      	str	r3, [r7, #28]
 800d73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d73c:	61bb      	str	r3, [r7, #24]
 800d73e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d740:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800d742:	69fb      	ldr	r3, [r7, #28]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	330c      	adds	r3, #12
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	69f8      	ldr	r0, [r7, #28]
 800d74c:	4798      	blx	r3
    newPresenter->activate();
 800d74e:	69bb      	ldr	r3, [r7, #24]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	69b8      	ldr	r0, [r7, #24]
 800d756:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800d758:	6979      	ldr	r1, [r7, #20]
 800d75a:	69f8      	ldr	r0, [r7, #28]
 800d75c:	f012 fe6c 	bl	8020438 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800d760:	697b      	ldr	r3, [r7, #20]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	3310      	adds	r3, #16
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	6978      	ldr	r0, [r7, #20]
 800d76a:	4798      	blx	r3
    newTransition->invalidate();
 800d76c:	697b      	ldr	r3, [r7, #20]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	3314      	adds	r3, #20
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	6978      	ldr	r0, [r7, #20]
 800d776:	4798      	blx	r3
    return newPresenter;
 800d778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d77a:	4618      	mov	r0, r3
 800d77c:	373c      	adds	r7, #60	; 0x3c
 800d77e:	46bd      	mov	sp, r7
 800d780:	bd90      	pop	{r4, r7, pc}
 800d782:	bf00      	nop
 800d784:	0802fab8 	.word	0x0802fab8
 800d788:	080314d4 	.word	0x080314d4
 800d78c:	0802fb48 	.word	0x0802fb48
 800d790:	0802fb90 	.word	0x0802fb90
 800d794:	0802fc34 	.word	0x0802fc34

0800d798 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800d798:	b580      	push	{r7, lr}
 800d79a:	b082      	sub	sp, #8
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
 800d7a0:	460b      	mov	r3, r1
 800d7a2:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	3324      	adds	r3, #36	; 0x24
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	887a      	ldrh	r2, [r7, #2]
 800d7ae:	4611      	mov	r1, r2
 800d7b0:	6878      	ldr	r0, [r7, #4]
 800d7b2:	4798      	blx	r3
 800d7b4:	4603      	mov	r3, r0
    }
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	3708      	adds	r7, #8
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	bd80      	pop	{r7, pc}

0800d7be <_ZN8touchgfx17AbstractPartition2atI14mainScreenViewEERT_t>:
    T& at(const uint16_t index)
 800d7be:	b580      	push	{r7, lr}
 800d7c0:	b082      	sub	sp, #8
 800d7c2:	af00      	add	r7, sp, #0
 800d7c4:	6078      	str	r0, [r7, #4]
 800d7c6:	460b      	mov	r3, r1
 800d7c8:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	3324      	adds	r3, #36	; 0x24
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	887a      	ldrh	r2, [r7, #2]
 800d7d4:	4611      	mov	r1, r2
 800d7d6:	6878      	ldr	r0, [r7, #4]
 800d7d8:	4798      	blx	r3
 800d7da:	4603      	mov	r3, r0
    }
 800d7dc:	4618      	mov	r0, r3
 800d7de:	3708      	adds	r7, #8
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bd80      	pop	{r7, pc}

0800d7e4 <_ZN8touchgfx17AbstractPartition2atI19mainScreenPresenterEERT_t>:
    T& at(const uint16_t index)
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b082      	sub	sp, #8
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
 800d7ec:	460b      	mov	r3, r1
 800d7ee:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	3324      	adds	r3, #36	; 0x24
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	887a      	ldrh	r2, [r7, #2]
 800d7fa:	4611      	mov	r1, r2
 800d7fc:	6878      	ldr	r0, [r7, #4]
 800d7fe:	4798      	blx	r3
 800d800:	4603      	mov	r3, r0
    }
 800d802:	4618      	mov	r0, r3
 800d804:	3708      	adds	r7, #8
 800d806:	46bd      	mov	sp, r7
 800d808:	bd80      	pop	{r7, pc}

0800d80a <_ZN8touchgfx4ViewI19mainScreenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 800d80a:	b480      	push	{r7}
 800d80c:	b083      	sub	sp, #12
 800d80e:	af00      	add	r7, sp, #0
 800d810:	6078      	str	r0, [r7, #4]
 800d812:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	683a      	ldr	r2, [r7, #0]
 800d818:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800d81a:	bf00      	nop
 800d81c:	370c      	adds	r7, #12
 800d81e:	46bd      	mov	sp, r7
 800d820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d824:	4770      	bx	lr

0800d826 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE3EEEEERT_t>:
    T& at(const uint16_t index)
 800d826:	b580      	push	{r7, lr}
 800d828:	b082      	sub	sp, #8
 800d82a:	af00      	add	r7, sp, #0
 800d82c:	6078      	str	r0, [r7, #4]
 800d82e:	460b      	mov	r3, r1
 800d830:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	3324      	adds	r3, #36	; 0x24
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	887a      	ldrh	r2, [r7, #2]
 800d83c:	4611      	mov	r1, r2
 800d83e:	6878      	ldr	r0, [r7, #4]
 800d840:	4798      	blx	r3
 800d842:	4603      	mov	r3, r0
    }
 800d844:	4618      	mov	r0, r3
 800d846:	3708      	adds	r7, #8
 800d848:	46bd      	mov	sp, r7
 800d84a:	bd80      	pop	{r7, pc}

0800d84c <_ZN8touchgfx14SnapshotWidgetD1Ev>:
 * A widget that is able to make a snapshot of the area the SnapshotWidget covers into either a
 * Bitmap or into animation storage (if this available). Once the snapshot has been
 * taken using SnapshowWidget::makeSnapshot(), the SnapshotWidget will show the captured
 * snapshot when it is subsequently drawn.
 */
class SnapshotWidget : public Widget
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b082      	sub	sp, #8
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
 800d854:	4a05      	ldr	r2, [pc, #20]	; (800d86c <_ZN8touchgfx14SnapshotWidgetD1Ev+0x20>)
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	601a      	str	r2, [r3, #0]
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	4618      	mov	r0, r3
 800d85e:	f7ff fa6d 	bl	800cd3c <_ZN8touchgfx6WidgetD1Ev>
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	4618      	mov	r0, r3
 800d866:	3708      	adds	r7, #8
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}
 800d86c:	080330c0 	.word	0x080330c0

0800d870 <_ZN8touchgfx14SnapshotWidgetD0Ev>:
 800d870:	b580      	push	{r7, lr}
 800d872:	b082      	sub	sp, #8
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
 800d878:	6878      	ldr	r0, [r7, #4]
 800d87a:	f7ff ffe7 	bl	800d84c <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800d87e:	212c      	movs	r1, #44	; 0x2c
 800d880:	6878      	ldr	r0, [r7, #4]
 800d882:	f01f fc5b 	bl	802d13c <_ZdlPvj>
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	4618      	mov	r0, r3
 800d88a:	3708      	adds	r7, #8
 800d88c:	46bd      	mov	sp, r7
 800d88e:	bd80      	pop	{r7, pc}

0800d890 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800d890:	b580      	push	{r7, lr}
 800d892:	b082      	sub	sp, #8
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
 800d898:	4a05      	ldr	r2, [pc, #20]	; (800d8b0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev+0x20>)
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	601a      	str	r2, [r3, #0]
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	f000 fa13 	bl	800dccc <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	3708      	adds	r7, #8
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}
 800d8b0:	08031184 	.word	0x08031184

0800d8b4 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED0Ev>:
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b082      	sub	sp, #8
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	f7ff ffe7 	bl	800d890 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>
 800d8c2:	2110      	movs	r1, #16
 800d8c4:	6878      	ldr	r0, [r7, #4]
 800d8c6:	f01f fc39 	bl	802d13c <_ZdlPvj>
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	3708      	adds	r7, #8
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}

0800d8d4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh>:
    /**
     * Initializes a new instance of the SlideTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps (ticks) in the transition animation, default is 20.
     */
    SlideTransition(const uint8_t transitionSteps = 20)
 800d8d4:	b590      	push	{r4, r7, lr}
 800d8d6:	b087      	sub	sp, #28
 800d8d8:	af02      	add	r7, sp, #8
 800d8da:	6078      	str	r0, [r7, #4]
 800d8dc:	460b      	mov	r3, r1
 800d8de:	70fb      	strb	r3, [r7, #3]
          snapshotPtr(&snapshot),
          handleTickCallback(this, &SlideTransition::tickMoveDrawable),
          direction(templateDirection),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0)
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f7ff f94c 	bl	800cb80 <_ZN8touchgfx10TransitionC1Ev>
 800d8e8:	4a3f      	ldr	r2, [pc, #252]	; (800d9e8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x114>)
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	601a      	str	r2, [r3, #0]
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	330c      	adds	r3, #12
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	f00f ff32 	bl	801d75c <_ZN8touchgfx14SnapshotWidgetC1Ev>
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	f103 020c 	add.w	r2, r3, #12
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	639a      	str	r2, [r3, #56]	; 0x38
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 800d908:	4a38      	ldr	r2, [pc, #224]	; (800d9ec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x118>)
 800d90a:	f107 0308 	add.w	r3, r7, #8
 800d90e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d912:	e883 0003 	stmia.w	r3, {r0, r1}
 800d916:	f107 0308 	add.w	r3, r7, #8
 800d91a:	cb0c      	ldmia	r3, {r2, r3}
 800d91c:	6879      	ldr	r1, [r7, #4]
 800d91e:	4620      	mov	r0, r4
 800d920:	f000 f9b4 	bl	800dc8c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2203      	movs	r2, #3
 800d928:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	78fa      	ldrb	r2, [r7, #3]
 800d930:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2200      	movs	r2, #0
 800d938:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2200      	movs	r2, #0
 800d940:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    {
        if (HAL::USE_ANIMATION_STORAGE)
 800d944:	4b2a      	ldr	r3, [pc, #168]	; (800d9f0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x11c>)
 800d946:	781b      	ldrb	r3, [r3, #0]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d047      	beq.n	800d9dc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
        {
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	f103 000c 	add.w	r0, r3, #12
 800d952:	4b28      	ldr	r3, [pc, #160]	; (800d9f4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x120>)
 800d954:	881b      	ldrh	r3, [r3, #0]
 800d956:	b21a      	sxth	r2, r3
 800d958:	4b27      	ldr	r3, [pc, #156]	; (800d9f8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x124>)
 800d95a:	881b      	ldrh	r3, [r3, #0]
 800d95c:	b21b      	sxth	r3, r3
 800d95e:	9300      	str	r3, [sp, #0]
 800d960:	4613      	mov	r3, r2
 800d962:	2200      	movs	r2, #0
 800d964:	2100      	movs	r1, #0
 800d966:	f7fe ffcd 	bl	800c904 <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	330c      	adds	r3, #12
 800d96e:	4618      	mov	r0, r3
 800d970:	f00f fe77 	bl	801d662 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>

            switch (direction)
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800d97a:	2b03      	cmp	r3, #3
 800d97c:	d82a      	bhi.n	800d9d4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x100>
 800d97e:	a201      	add	r2, pc, #4	; (adr r2, 800d984 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0xb0>)
 800d980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d984:	0800d9b5 	.word	0x0800d9b5
 800d988:	0800d9c3 	.word	0x0800d9c3
 800d98c:	0800d995 	.word	0x0800d995
 800d990:	0800d9a7 	.word	0x0800d9a7
            {
            case EAST:
                targetValue = -HAL::DISPLAY_WIDTH;
 800d994:	4b17      	ldr	r3, [pc, #92]	; (800d9f4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x120>)
 800d996:	881b      	ldrh	r3, [r3, #0]
 800d998:	425b      	negs	r3, r3
 800d99a:	b29b      	uxth	r3, r3
 800d99c:	b21a      	sxth	r2, r3
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800d9a4:	e01a      	b.n	800d9dc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
            case WEST:
                targetValue = HAL::DISPLAY_WIDTH;
 800d9a6:	4b13      	ldr	r3, [pc, #76]	; (800d9f4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x120>)
 800d9a8:	881b      	ldrh	r3, [r3, #0]
 800d9aa:	b21a      	sxth	r2, r3
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800d9b2:	e013      	b.n	800d9dc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
            case NORTH:
                targetValue = HAL::DISPLAY_HEIGHT;
 800d9b4:	4b10      	ldr	r3, [pc, #64]	; (800d9f8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x124>)
 800d9b6:	881b      	ldrh	r3, [r3, #0]
 800d9b8:	b21a      	sxth	r2, r3
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800d9c0:	e00c      	b.n	800d9dc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
            case SOUTH:
                targetValue = -HAL::DISPLAY_HEIGHT;
 800d9c2:	4b0d      	ldr	r3, [pc, #52]	; (800d9f8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x124>)
 800d9c4:	881b      	ldrh	r3, [r3, #0]
 800d9c6:	425b      	negs	r3, r3
 800d9c8:	b29b      	uxth	r3, r3
 800d9ca:	b21a      	sxth	r2, r3
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800d9d2:	e003      	b.n	800d9dc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
            default:
                done = true;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2201      	movs	r2, #1
 800d9d8:	721a      	strb	r2, [r3, #8]
                // Nothing to do here
                break;
 800d9da:	bf00      	nop
            }
        }
    }
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	4618      	mov	r0, r3
 800d9e0:	3714      	adds	r7, #20
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd90      	pop	{r4, r7, pc}
 800d9e6:	bf00      	nop
 800d9e8:	08031158 	.word	0x08031158
 800d9ec:	0802fcd8 	.word	0x0802fcd8
 800d9f0:	200127f3 	.word	0x200127f3
 800d9f4:	200127e8 	.word	0x200127e8
 800d9f8:	200127ea 	.word	0x200127ea

0800d9fc <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b082      	sub	sp, #8
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	460b      	mov	r3, r1
 800da06:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	3324      	adds	r3, #36	; 0x24
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	887a      	ldrh	r2, [r7, #2]
 800da12:	4611      	mov	r1, r2
 800da14:	6878      	ldr	r0, [r7, #4]
 800da16:	4798      	blx	r3
 800da18:	4603      	mov	r3, r0
    }
 800da1a:	4618      	mov	r0, r3
 800da1c:	3708      	adds	r7, #8
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}
	...

0800da24 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>:
 800da24:	b580      	push	{r7, lr}
 800da26:	b082      	sub	sp, #8
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
 800da2c:	4a05      	ldr	r2, [pc, #20]	; (800da44 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev+0x20>)
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	601a      	str	r2, [r3, #0]
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	4618      	mov	r0, r3
 800da36:	f000 f949 	bl	800dccc <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	4618      	mov	r0, r3
 800da3e:	3708      	adds	r7, #8
 800da40:	46bd      	mov	sp, r7
 800da42:	bd80      	pop	{r7, pc}
 800da44:	080311c8 	.word	0x080311c8

0800da48 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED0Ev>:
 800da48:	b580      	push	{r7, lr}
 800da4a:	b082      	sub	sp, #8
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
 800da50:	6878      	ldr	r0, [r7, #4]
 800da52:	f7ff ffe7 	bl	800da24 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 800da56:	2110      	movs	r1, #16
 800da58:	6878      	ldr	r0, [r7, #4]
 800da5a:	f01f fb6f 	bl	802d13c <_ZdlPvj>
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	4618      	mov	r0, r3
 800da62:	3708      	adds	r7, #8
 800da64:	46bd      	mov	sp, r7
 800da66:	bd80      	pop	{r7, pc}

0800da68 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>:
    SlideTransition(const uint8_t transitionSteps = 20)
 800da68:	b590      	push	{r4, r7, lr}
 800da6a:	b087      	sub	sp, #28
 800da6c:	af02      	add	r7, sp, #8
 800da6e:	6078      	str	r0, [r7, #4]
 800da70:	460b      	mov	r3, r1
 800da72:	70fb      	strb	r3, [r7, #3]
          calculatedValue(0)
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	4618      	mov	r0, r3
 800da78:	f7ff f882 	bl	800cb80 <_ZN8touchgfx10TransitionC1Ev>
 800da7c:	4a3f      	ldr	r2, [pc, #252]	; (800db7c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x114>)
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	601a      	str	r2, [r3, #0]
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	330c      	adds	r3, #12
 800da86:	4618      	mov	r0, r3
 800da88:	f00f fe68 	bl	801d75c <_ZN8touchgfx14SnapshotWidgetC1Ev>
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	f103 020c 	add.w	r2, r3, #12
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	639a      	str	r2, [r3, #56]	; 0x38
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 800da9c:	4a38      	ldr	r2, [pc, #224]	; (800db80 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x118>)
 800da9e:	f107 0308 	add.w	r3, r7, #8
 800daa2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800daa6:	e883 0003 	stmia.w	r3, {r0, r1}
 800daaa:	f107 0308 	add.w	r3, r7, #8
 800daae:	cb0c      	ldmia	r3, {r2, r3}
 800dab0:	6879      	ldr	r1, [r7, #4]
 800dab2:	4620      	mov	r0, r4
 800dab4:	f000 f964 	bl	800dd80 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2202      	movs	r2, #2
 800dabc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	78fa      	ldrb	r2, [r7, #3]
 800dac4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2200      	movs	r2, #0
 800dacc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2200      	movs	r2, #0
 800dad4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
        if (HAL::USE_ANIMATION_STORAGE)
 800dad8:	4b2a      	ldr	r3, [pc, #168]	; (800db84 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x11c>)
 800dada:	781b      	ldrb	r3, [r3, #0]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d047      	beq.n	800db70 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	f103 000c 	add.w	r0, r3, #12
 800dae6:	4b28      	ldr	r3, [pc, #160]	; (800db88 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 800dae8:	881b      	ldrh	r3, [r3, #0]
 800daea:	b21a      	sxth	r2, r3
 800daec:	4b27      	ldr	r3, [pc, #156]	; (800db8c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 800daee:	881b      	ldrh	r3, [r3, #0]
 800daf0:	b21b      	sxth	r3, r3
 800daf2:	9300      	str	r3, [sp, #0]
 800daf4:	4613      	mov	r3, r2
 800daf6:	2200      	movs	r2, #0
 800daf8:	2100      	movs	r1, #0
 800dafa:	f7fe ff03 	bl	800c904 <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	330c      	adds	r3, #12
 800db02:	4618      	mov	r0, r3
 800db04:	f00f fdad 	bl	801d662 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>
            switch (direction)
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800db0e:	2b03      	cmp	r3, #3
 800db10:	d82a      	bhi.n	800db68 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x100>
 800db12:	a201      	add	r2, pc, #4	; (adr r2, 800db18 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xb0>)
 800db14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db18:	0800db49 	.word	0x0800db49
 800db1c:	0800db57 	.word	0x0800db57
 800db20:	0800db29 	.word	0x0800db29
 800db24:	0800db3b 	.word	0x0800db3b
                targetValue = -HAL::DISPLAY_WIDTH;
 800db28:	4b17      	ldr	r3, [pc, #92]	; (800db88 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 800db2a:	881b      	ldrh	r3, [r3, #0]
 800db2c:	425b      	negs	r3, r3
 800db2e:	b29b      	uxth	r3, r3
 800db30:	b21a      	sxth	r2, r3
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800db38:	e01a      	b.n	800db70 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
                targetValue = HAL::DISPLAY_WIDTH;
 800db3a:	4b13      	ldr	r3, [pc, #76]	; (800db88 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 800db3c:	881b      	ldrh	r3, [r3, #0]
 800db3e:	b21a      	sxth	r2, r3
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800db46:	e013      	b.n	800db70 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
                targetValue = HAL::DISPLAY_HEIGHT;
 800db48:	4b10      	ldr	r3, [pc, #64]	; (800db8c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 800db4a:	881b      	ldrh	r3, [r3, #0]
 800db4c:	b21a      	sxth	r2, r3
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800db54:	e00c      	b.n	800db70 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
                targetValue = -HAL::DISPLAY_HEIGHT;
 800db56:	4b0d      	ldr	r3, [pc, #52]	; (800db8c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 800db58:	881b      	ldrh	r3, [r3, #0]
 800db5a:	425b      	negs	r3, r3
 800db5c:	b29b      	uxth	r3, r3
 800db5e:	b21a      	sxth	r2, r3
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800db66:	e003      	b.n	800db70 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
                done = true;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2201      	movs	r2, #1
 800db6c:	721a      	strb	r2, [r3, #8]
                break;
 800db6e:	bf00      	nop
    }
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	4618      	mov	r0, r3
 800db74:	3714      	adds	r7, #20
 800db76:	46bd      	mov	sp, r7
 800db78:	bd90      	pop	{r4, r7, pc}
 800db7a:	bf00      	nop
 800db7c:	0803119c 	.word	0x0803119c
 800db80:	0802fce0 	.word	0x0802fce0
 800db84:	200127f3 	.word	0x200127f3
 800db88:	200127e8 	.word	0x200127e8
 800db8c:	200127ea 	.word	0x200127ea

0800db90 <_ZN8touchgfx17AbstractPartition2atI18sequenceScreenViewEERT_t>:
    T& at(const uint16_t index)
 800db90:	b580      	push	{r7, lr}
 800db92:	b082      	sub	sp, #8
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
 800db98:	460b      	mov	r3, r1
 800db9a:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	3324      	adds	r3, #36	; 0x24
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	887a      	ldrh	r2, [r7, #2]
 800dba6:	4611      	mov	r1, r2
 800dba8:	6878      	ldr	r0, [r7, #4]
 800dbaa:	4798      	blx	r3
 800dbac:	4603      	mov	r3, r0
    }
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3708      	adds	r7, #8
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}

0800dbb6 <_ZN8touchgfx17AbstractPartition2atI23sequenceScreenPresenterEERT_t>:
    T& at(const uint16_t index)
 800dbb6:	b580      	push	{r7, lr}
 800dbb8:	b082      	sub	sp, #8
 800dbba:	af00      	add	r7, sp, #0
 800dbbc:	6078      	str	r0, [r7, #4]
 800dbbe:	460b      	mov	r3, r1
 800dbc0:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	3324      	adds	r3, #36	; 0x24
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	887a      	ldrh	r2, [r7, #2]
 800dbcc:	4611      	mov	r1, r2
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	4798      	blx	r3
 800dbd2:	4603      	mov	r3, r0
    }
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	3708      	adds	r7, #8
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}

0800dbdc <_ZN8touchgfx4ViewI23sequenceScreenPresenterE4bindERS1_>:
    void bind(T& presenter)
 800dbdc:	b480      	push	{r7}
 800dbde:	b083      	sub	sp, #12
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
 800dbe4:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	683a      	ldr	r2, [r7, #0]
 800dbea:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800dbec:	bf00      	nop
 800dbee:	370c      	adds	r7, #12
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf6:	4770      	bx	lr

0800dbf8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE>:
    /**
     * Moves the Drawable.
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b082      	sub	sp, #8
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
 800dc00:	6039      	str	r1, [r7, #0]
    {
        if (&d == snapshotPtr)
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc06:	683a      	ldr	r2, [r7, #0]
 800dc08:	429a      	cmp	r2, r3
 800dc0a:	d02a      	beq.n	800dc62 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x6a>
        {
            return;
        }

        switch (direction)
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800dc12:	2b03      	cmp	r3, #3
 800dc14:	d820      	bhi.n	800dc58 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x60>
 800dc16:	a201      	add	r2, pc, #4	; (adr r2, 800dc1c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x24>)
 800dc18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc1c:	0800dc43 	.word	0x0800dc43
 800dc20:	0800dc43 	.word	0x0800dc43
 800dc24:	0800dc2d 	.word	0x0800dc2d
 800dc28:	0800dc2d 	.word	0x0800dc2d
        {
        case EAST:
        case WEST:
            d.moveRelative(calculatedValue, 0);
 800dc2c:	683b      	ldr	r3, [r7, #0]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	3354      	adds	r3, #84	; 0x54
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	687a      	ldr	r2, [r7, #4]
 800dc36:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	6838      	ldr	r0, [r7, #0]
 800dc3e:	4798      	blx	r3
            break;
 800dc40:	e010      	b.n	800dc64 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x6c>
        case NORTH:
        case SOUTH:
            d.moveRelative(0, calculatedValue);
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	3354      	adds	r3, #84	; 0x54
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	687a      	ldr	r2, [r7, #4]
 800dc4c:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 800dc50:	2100      	movs	r1, #0
 800dc52:	6838      	ldr	r0, [r7, #0]
 800dc54:	4798      	blx	r3
            break;
 800dc56:	e005      	b.n	800dc64 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x6c>
        default:
            // Special case, do not move. Class NoTransition can be used instead.
            done = true;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2201      	movs	r2, #1
 800dc5c:	721a      	strb	r2, [r3, #8]
            break;
 800dc5e:	bf00      	nop
 800dc60:	e000      	b.n	800dc64 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x6c>
            return;
 800dc62:	bf00      	nop
        }
    }
 800dc64:	3708      	adds	r7, #8
 800dc66:	46bd      	mov	sp, r7
 800dc68:	bd80      	pop	{r7, pc}
 800dc6a:	bf00      	nop

0800dc6c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800dc6c:	b480      	push	{r7}
 800dc6e:	b083      	sub	sp, #12
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
 800dc74:	4a04      	ldr	r2, [pc, #16]	; (800dc88 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev+0x1c>)
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	601a      	str	r2, [r3, #0]
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	370c      	adds	r7, #12
 800dc80:	46bd      	mov	sp, r7
 800dc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc86:	4770      	bx	lr
 800dc88:	080311e0 	.word	0x080311e0

0800dc8c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b084      	sub	sp, #16
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	60f8      	str	r0, [r7, #12]
 800dc94:	60b9      	str	r1, [r7, #8]
 800dc96:	4639      	mov	r1, r7
 800dc98:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	4618      	mov	r0, r3
 800dca0:	f7ff ffe4 	bl	800dc6c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 800dca4:	4a08      	ldr	r2, [pc, #32]	; (800dcc8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	68ba      	ldr	r2, [r7, #8]
 800dcae:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	3308      	adds	r3, #8
 800dcb4:	463a      	mov	r2, r7
 800dcb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dcba:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	3710      	adds	r7, #16
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bd80      	pop	{r7, pc}
 800dcc8:	08031184 	.word	0x08031184

0800dccc <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>:
    virtual ~GenericCallback()
 800dccc:	b480      	push	{r7}
 800dcce:	b083      	sub	sp, #12
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
    }
 800dcd4:	4a04      	ldr	r2, [pc, #16]	; (800dce8 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev+0x1c>)
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	601a      	str	r2, [r3, #0]
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	4618      	mov	r0, r3
 800dcde:	370c      	adds	r7, #12
 800dce0:	46bd      	mov	sp, r7
 800dce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce6:	4770      	bx	lr
 800dce8:	080311e0 	.word	0x080311e0

0800dcec <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED0Ev>:
    virtual ~GenericCallback()
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b082      	sub	sp, #8
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
    }
 800dcf4:	6878      	ldr	r0, [r7, #4]
 800dcf6:	f7ff ffe9 	bl	800dccc <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800dcfa:	2104      	movs	r1, #4
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	f01f fa1d 	bl	802d13c <_ZdlPvj>
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	4618      	mov	r0, r3
 800dd06:	3708      	adds	r7, #8
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}

0800dd0c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE>:
    virtual void tickMoveDrawable(Drawable& d)
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b082      	sub	sp, #8
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
 800dd14:	6039      	str	r1, [r7, #0]
        if (&d == snapshotPtr)
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd1a:	683a      	ldr	r2, [r7, #0]
 800dd1c:	429a      	cmp	r2, r3
 800dd1e:	d02a      	beq.n	800dd76 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6a>
        switch (direction)
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800dd26:	2b03      	cmp	r3, #3
 800dd28:	d820      	bhi.n	800dd6c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x60>
 800dd2a:	a201      	add	r2, pc, #4	; (adr r2, 800dd30 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x24>)
 800dd2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd30:	0800dd57 	.word	0x0800dd57
 800dd34:	0800dd57 	.word	0x0800dd57
 800dd38:	0800dd41 	.word	0x0800dd41
 800dd3c:	0800dd41 	.word	0x0800dd41
            d.moveRelative(calculatedValue, 0);
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	3354      	adds	r3, #84	; 0x54
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	687a      	ldr	r2, [r7, #4]
 800dd4a:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 800dd4e:	2200      	movs	r2, #0
 800dd50:	6838      	ldr	r0, [r7, #0]
 800dd52:	4798      	blx	r3
            break;
 800dd54:	e010      	b.n	800dd78 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
            d.moveRelative(0, calculatedValue);
 800dd56:	683b      	ldr	r3, [r7, #0]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	3354      	adds	r3, #84	; 0x54
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	687a      	ldr	r2, [r7, #4]
 800dd60:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 800dd64:	2100      	movs	r1, #0
 800dd66:	6838      	ldr	r0, [r7, #0]
 800dd68:	4798      	blx	r3
            break;
 800dd6a:	e005      	b.n	800dd78 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
            done = true;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	2201      	movs	r2, #1
 800dd70:	721a      	strb	r2, [r3, #8]
            break;
 800dd72:	bf00      	nop
 800dd74:	e000      	b.n	800dd78 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
            return;
 800dd76:	bf00      	nop
    }
 800dd78:	3708      	adds	r7, #8
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bd80      	pop	{r7, pc}
 800dd7e:	bf00      	nop

0800dd80 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b084      	sub	sp, #16
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	60f8      	str	r0, [r7, #12]
 800dd88:	60b9      	str	r1, [r7, #8]
 800dd8a:	4639      	mov	r1, r7
 800dd8c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	4618      	mov	r0, r3
 800dd94:	f7ff ff6a 	bl	800dc6c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 800dd98:	4a08      	ldr	r2, [pc, #32]	; (800ddbc <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	68ba      	ldr	r2, [r7, #8]
 800dda2:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	3308      	adds	r3, #8
 800dda8:	463a      	mov	r2, r7
 800ddaa:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ddae:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	3710      	adds	r7, #16
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}
 800ddbc:	080311c8 	.word	0x080311c8

0800ddc0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev>:
class SlideTransition : public Transition
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b082      	sub	sp, #8
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
 800ddc8:	4a0a      	ldr	r2, [pc, #40]	; (800ddf4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev+0x34>)
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	601a      	str	r2, [r3, #0]
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	333c      	adds	r3, #60	; 0x3c
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f7ff fd5c 	bl	800d890 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	330c      	adds	r3, #12
 800dddc:	4618      	mov	r0, r3
 800ddde:	f7ff fd35 	bl	800d84c <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	4618      	mov	r0, r3
 800dde6:	f7fe fee1 	bl	800cbac <_ZN8touchgfx10TransitionD1Ev>
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	4618      	mov	r0, r3
 800ddee:	3708      	adds	r7, #8
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd80      	pop	{r7, pc}
 800ddf4:	08031158 	.word	0x08031158

0800ddf8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED0Ev>:
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b082      	sub	sp, #8
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
 800de00:	6878      	ldr	r0, [r7, #4]
 800de02:	f7ff ffdd 	bl	800ddc0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev>
 800de06:	2154      	movs	r1, #84	; 0x54
 800de08:	6878      	ldr	r0, [r7, #4]
 800de0a:	f01f f997 	bl	802d13c <_ZdlPvj>
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	4618      	mov	r0, r3
 800de12:	3708      	adds	r7, #8
 800de14:	46bd      	mov	sp, r7
 800de16:	bd80      	pop	{r7, pc}

0800de18 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>:
 800de18:	b580      	push	{r7, lr}
 800de1a:	b082      	sub	sp, #8
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
 800de20:	4a0a      	ldr	r2, [pc, #40]	; (800de4c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev+0x34>)
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	601a      	str	r2, [r3, #0]
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	333c      	adds	r3, #60	; 0x3c
 800de2a:	4618      	mov	r0, r3
 800de2c:	f7ff fdfa 	bl	800da24 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	330c      	adds	r3, #12
 800de34:	4618      	mov	r0, r3
 800de36:	f7ff fd09 	bl	800d84c <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	4618      	mov	r0, r3
 800de3e:	f7fe feb5 	bl	800cbac <_ZN8touchgfx10TransitionD1Ev>
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	4618      	mov	r0, r3
 800de46:	3708      	adds	r7, #8
 800de48:	46bd      	mov	sp, r7
 800de4a:	bd80      	pop	{r7, pc}
 800de4c:	0803119c 	.word	0x0803119c

0800de50 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED0Ev>:
 800de50:	b580      	push	{r7, lr}
 800de52:	b082      	sub	sp, #8
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
 800de58:	6878      	ldr	r0, [r7, #4]
 800de5a:	f7ff ffdd 	bl	800de18 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>
 800de5e:	2154      	movs	r1, #84	; 0x54
 800de60:	6878      	ldr	r0, [r7, #4]
 800de62:	f01f f96b 	bl	802d13c <_ZdlPvj>
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	4618      	mov	r0, r3
 800de6a:	3708      	adds	r7, #8
 800de6c:	46bd      	mov	sp, r7
 800de6e:	bd80      	pop	{r7, pc}

0800de70 <_ZN8touchgfx12NoTransitionD1Ev>:
 800de70:	b580      	push	{r7, lr}
 800de72:	b082      	sub	sp, #8
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
 800de78:	4a05      	ldr	r2, [pc, #20]	; (800de90 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	601a      	str	r2, [r3, #0]
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	4618      	mov	r0, r3
 800de82:	f7fe fe93 	bl	800cbac <_ZN8touchgfx10TransitionD1Ev>
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	4618      	mov	r0, r3
 800de8a:	3708      	adds	r7, #8
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}
 800de90:	08031260 	.word	0x08031260

0800de94 <_ZN8touchgfx12NoTransitionD0Ev>:
 800de94:	b580      	push	{r7, lr}
 800de96:	b082      	sub	sp, #8
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
 800de9c:	6878      	ldr	r0, [r7, #4]
 800de9e:	f7ff ffe7 	bl	800de70 <_ZN8touchgfx12NoTransitionD1Ev>
 800dea2:	210c      	movs	r1, #12
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f01f f949 	bl	802d13c <_ZdlPvj>
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	4618      	mov	r0, r3
 800deae:	3708      	adds	r7, #8
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}

0800deb4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv>:
    virtual void handleTickEvent()
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b082      	sub	sp, #8
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 800debc:	4b59      	ldr	r3, [pc, #356]	; (800e024 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x170>)
 800debe:	781b      	ldrb	r3, [r3, #0]
 800dec0:	f083 0301 	eor.w	r3, r3, #1
 800dec4:	b2db      	uxtb	r3, r3
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d003      	beq.n	800ded2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x1e>
            done = true;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	2201      	movs	r2, #1
 800dece:	721a      	strb	r2, [r3, #8]
            return;
 800ded0:	e0a5      	b.n	800e01e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x16a>
        Transition::handleTickEvent();
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	4618      	mov	r0, r3
 800ded6:	f7fe fe89 	bl	800cbec <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800dee0:	3301      	adds	r3, #1
 800dee2:	b2da      	uxtb	r2, r3
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        if (animationCounter <= animationSteps)
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800def6:	429a      	cmp	r2, r3
 800def8:	d82f      	bhi.n	800df5a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800df00:	b298      	uxth	r0, r3
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800df0e:	b29b      	uxth	r3, r3
 800df10:	2100      	movs	r1, #0
 800df12:	f012 fa97 	bl	8020444 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 800df16:	4603      	mov	r3, r0
 800df18:	461a      	mov	r2, r3
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            if (calculatedValue % 2)
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800df26:	b29b      	uxth	r3, r3
 800df28:	f003 0301 	and.w	r3, r3, #1
 800df2c:	b29b      	uxth	r3, r3
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d01b      	beq.n	800df6a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800df38:	b29b      	uxth	r3, r3
 800df3a:	687a      	ldr	r2, [r7, #4]
 800df3c:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 800df40:	2a00      	cmp	r2, #0
 800df42:	dd01      	ble.n	800df48 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x94>
 800df44:	2201      	movs	r2, #1
 800df46:	e001      	b.n	800df4c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x98>
 800df48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800df4c:	4413      	add	r3, r2
 800df4e:	b29b      	uxth	r3, r3
 800df50:	b21a      	sxth	r2, r3
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800df58:	e007      	b.n	800df6a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xb6>
            done = true;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2201      	movs	r2, #1
 800df5e:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	2200      	movs	r2, #0
 800df64:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            return;
 800df68:	e059      	b.n	800e01e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x16a>
        switch (direction)
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800df70:	2b03      	cmp	r3, #3
 800df72:	d845      	bhi.n	800e000 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x14c>
 800df74:	a201      	add	r2, pc, #4	; (adr r2, 800df7c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xc8>)
 800df76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df7a:	bf00      	nop
 800df7c:	0800dfc7 	.word	0x0800dfc7
 800df80:	0800dfc7 	.word	0x0800dfc7
 800df84:	0800df8d 	.word	0x0800df8d
 800df88:	0800df8d 	.word	0x0800df8d
            calculatedValue -= snapshot.getX();
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	330c      	adds	r3, #12
 800df90:	4618      	mov	r0, r3
 800df92:	f7fe fce4 	bl	800c95e <_ZNK8touchgfx8Drawable4getXEv>
 800df96:	4603      	mov	r3, r0
 800df98:	4619      	mov	r1, r3
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800dfa0:	b29a      	uxth	r2, r3
 800dfa2:	b28b      	uxth	r3, r1
 800dfa4:	1ad3      	subs	r3, r2, r3
 800dfa6:	b29b      	uxth	r3, r3
 800dfa8:	b21a      	sxth	r2, r3
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(calculatedValue, 0);
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	f103 000c 	add.w	r0, r3, #12
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	4619      	mov	r1, r3
 800dfc0:	f011 fdc9 	bl	801fb56 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 800dfc4:	e020      	b.n	800e008 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x154>
            calculatedValue -= snapshot.getY();
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	330c      	adds	r3, #12
 800dfca:	4618      	mov	r0, r3
 800dfcc:	f7fe fcd4 	bl	800c978 <_ZNK8touchgfx8Drawable4getYEv>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	4619      	mov	r1, r3
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800dfda:	b29a      	uxth	r2, r3
 800dfdc:	b28b      	uxth	r3, r1
 800dfde:	1ad3      	subs	r3, r2, r3
 800dfe0:	b29b      	uxth	r3, r3
 800dfe2:	b21a      	sxth	r2, r3
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(0, calculatedValue);
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	f103 000c 	add.w	r0, r3, #12
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800dff6:	461a      	mov	r2, r3
 800dff8:	2100      	movs	r1, #0
 800dffa:	f011 fdac 	bl	801fb56 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 800dffe:	e003      	b.n	800e008 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x154>
            done = true;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	2201      	movs	r2, #1
 800e004:	721a      	strb	r2, [r3, #8]
            break;
 800e006:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	6858      	ldr	r0, [r3, #4]
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	685b      	ldr	r3, [r3, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	3378      	adds	r3, #120	; 0x78
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	687a      	ldr	r2, [r7, #4]
 800e018:	323c      	adds	r2, #60	; 0x3c
 800e01a:	4611      	mov	r1, r2
 800e01c:	4798      	blx	r3
    }
 800e01e:	3708      	adds	r7, #8
 800e020:	46bd      	mov	sp, r7
 800e022:	bd80      	pop	{r7, pc}
 800e024:	200127f3 	.word	0x200127f3

0800e028 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv>:
    virtual void tearDown()
 800e028:	b580      	push	{r7, lr}
 800e02a:	b082      	sub	sp, #8
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 800e030:	4b0b      	ldr	r3, [pc, #44]	; (800e060 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x38>)
 800e032:	781b      	ldrb	r3, [r3, #0]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d00e      	beq.n	800e056 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x2e>
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	685b      	ldr	r3, [r3, #4]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d00a      	beq.n	800e056 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x2e>
            screenContainer->remove(snapshot);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	6858      	ldr	r0, [r3, #4]
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	685b      	ldr	r3, [r3, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	3364      	adds	r3, #100	; 0x64
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	687a      	ldr	r2, [r7, #4]
 800e050:	320c      	adds	r2, #12
 800e052:	4611      	mov	r1, r2
 800e054:	4798      	blx	r3
    }
 800e056:	bf00      	nop
 800e058:	3708      	adds	r7, #8
 800e05a:	46bd      	mov	sp, r7
 800e05c:	bd80      	pop	{r7, pc}
 800e05e:	bf00      	nop
 800e060:	200127f3 	.word	0x200127f3

0800e064 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv>:
    virtual void init()
 800e064:	b580      	push	{r7, lr}
 800e066:	b088      	sub	sp, #32
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 800e06c:	4b1a      	ldr	r3, [pc, #104]	; (800e0d8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x74>)
 800e06e:	781b      	ldrb	r3, [r3, #0]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d02d      	beq.n	800e0d0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x6c>
            Transition::init();
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	4618      	mov	r0, r3
 800e078:	f7fe fdcc 	bl	800cc14 <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 800e07c:	4a17      	ldr	r2, [pc, #92]	; (800e0dc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x78>)
 800e07e:	f107 0318 	add.w	r3, r7, #24
 800e082:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e086:	e883 0003 	stmia.w	r3, {r0, r1}
 800e08a:	f107 0008 	add.w	r0, r7, #8
 800e08e:	f107 0318 	add.w	r3, r7, #24
 800e092:	cb0c      	ldmia	r3, {r2, r3}
 800e094:	6879      	ldr	r1, [r7, #4]
 800e096:	f7ff fdf9 	bl	800dc8c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	685a      	ldr	r2, [r3, #4]
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	685b      	ldr	r3, [r3, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	3378      	adds	r3, #120	; 0x78
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	f107 0108 	add.w	r1, r7, #8
 800e0ac:	4610      	mov	r0, r2
 800e0ae:	4798      	blx	r3
            screenContainer->add(snapshot);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	6858      	ldr	r0, [r3, #4]
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	685b      	ldr	r3, [r3, #4]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	3360      	adds	r3, #96	; 0x60
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	687a      	ldr	r2, [r7, #4]
 800e0c0:	320c      	adds	r2, #12
 800e0c2:	4611      	mov	r1, r2
 800e0c4:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 800e0c6:	f107 0308 	add.w	r3, r7, #8
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	f7ff fbe0 	bl	800d890 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>
    }
 800e0d0:	bf00      	nop
 800e0d2:	3720      	adds	r7, #32
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	bd80      	pop	{r7, pc}
 800e0d8:	200127f3 	.word	0x200127f3
 800e0dc:	0802fce8 	.word	0x0802fce8

0800e0e0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b082      	sub	sp, #8
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
 800e0e8:	6039      	str	r1, [r7, #0]
        switch (direction)
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e0f0:	2b03      	cmp	r3, #3
 800e0f2:	d83b      	bhi.n	800e16c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8c>
 800e0f4:	a201      	add	r2, pc, #4	; (adr r2, 800e0fc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x1c>)
 800e0f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0fa:	bf00      	nop
 800e0fc:	0800e13d 	.word	0x0800e13d
 800e100:	0800e157 	.word	0x0800e157
 800e104:	0800e10d 	.word	0x0800e10d
 800e108:	0800e123 	.word	0x0800e123
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	3354      	adds	r3, #84	; 0x54
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	4a18      	ldr	r2, [pc, #96]	; (800e178 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x98>)
 800e116:	8812      	ldrh	r2, [r2, #0]
 800e118:	b211      	sxth	r1, r2
 800e11a:	2200      	movs	r2, #0
 800e11c:	6838      	ldr	r0, [r7, #0]
 800e11e:	4798      	blx	r3
            break;
 800e120:	e025      	b.n	800e16e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	3354      	adds	r3, #84	; 0x54
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	4a13      	ldr	r2, [pc, #76]	; (800e178 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x98>)
 800e12c:	8812      	ldrh	r2, [r2, #0]
 800e12e:	4252      	negs	r2, r2
 800e130:	b292      	uxth	r2, r2
 800e132:	b211      	sxth	r1, r2
 800e134:	2200      	movs	r2, #0
 800e136:	6838      	ldr	r0, [r7, #0]
 800e138:	4798      	blx	r3
            break;
 800e13a:	e018      	b.n	800e16e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, -HAL::DISPLAY_HEIGHT);
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	3354      	adds	r3, #84	; 0x54
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	4a0d      	ldr	r2, [pc, #52]	; (800e17c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 800e146:	8812      	ldrh	r2, [r2, #0]
 800e148:	4252      	negs	r2, r2
 800e14a:	b292      	uxth	r2, r2
 800e14c:	b212      	sxth	r2, r2
 800e14e:	2100      	movs	r1, #0
 800e150:	6838      	ldr	r0, [r7, #0]
 800e152:	4798      	blx	r3
            break;
 800e154:	e00b      	b.n	800e16e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	3354      	adds	r3, #84	; 0x54
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	4a07      	ldr	r2, [pc, #28]	; (800e17c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 800e160:	8812      	ldrh	r2, [r2, #0]
 800e162:	b212      	sxth	r2, r2
 800e164:	2100      	movs	r1, #0
 800e166:	6838      	ldr	r0, [r7, #0]
 800e168:	4798      	blx	r3
            break;
 800e16a:	e000      	b.n	800e16e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8e>
            break;
 800e16c:	bf00      	nop
    }
 800e16e:	bf00      	nop
 800e170:	3708      	adds	r7, #8
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}
 800e176:	bf00      	nop
 800e178:	200127e8 	.word	0x200127e8
 800e17c:	200127ea 	.word	0x200127ea

0800e180 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 800e180:	b580      	push	{r7, lr}
 800e182:	b082      	sub	sp, #8
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
 800e188:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	685b      	ldr	r3, [r3, #4]
 800e18e:	687a      	ldr	r2, [r7, #4]
 800e190:	68d2      	ldr	r2, [r2, #12]
 800e192:	1052      	asrs	r2, r2, #1
 800e194:	1898      	adds	r0, r3, r2
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	68db      	ldr	r3, [r3, #12]
 800e19a:	f003 0301 	and.w	r3, r3, #1
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d102      	bne.n	800e1a8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7executeES5_+0x28>
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	689b      	ldr	r3, [r3, #8]
 800e1a6:	e00a      	b.n	800e1be <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7executeES5_+0x3e>
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	685b      	ldr	r3, [r3, #4]
 800e1ac:	687a      	ldr	r2, [r7, #4]
 800e1ae:	68d2      	ldr	r2, [r2, #12]
 800e1b0:	1052      	asrs	r2, r2, #1
 800e1b2:	4413      	add	r3, r2
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	687a      	ldr	r2, [r7, #4]
 800e1b8:	6892      	ldr	r2, [r2, #8]
 800e1ba:	4413      	add	r3, r2
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	6839      	ldr	r1, [r7, #0]
 800e1c0:	4798      	blx	r3
    }
 800e1c2:	bf00      	nop
 800e1c4:	3708      	adds	r7, #8
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}

0800e1ca <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 800e1ca:	b480      	push	{r7}
 800e1cc:	b083      	sub	sp, #12
 800e1ce:	af00      	add	r7, sp, #0
 800e1d0:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	685b      	ldr	r3, [r3, #4]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d010      	beq.n	800e1fc <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x32>
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	689b      	ldr	r3, [r3, #8]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d107      	bne.n	800e1f2 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x28>
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	68db      	ldr	r3, [r3, #12]
 800e1e6:	f003 0301 	and.w	r3, r3, #1
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d101      	bne.n	800e1f2 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x28>
 800e1ee:	2301      	movs	r3, #1
 800e1f0:	e000      	b.n	800e1f4 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x2a>
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	2b01      	cmp	r3, #1
 800e1f6:	d001      	beq.n	800e1fc <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x32>
 800e1f8:	2301      	movs	r3, #1
 800e1fa:	e000      	b.n	800e1fe <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x34>
 800e1fc:	2300      	movs	r3, #0
    }
 800e1fe:	4618      	mov	r0, r3
 800e200:	370c      	adds	r7, #12
 800e202:	46bd      	mov	sp, r7
 800e204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e208:	4770      	bx	lr
	...

0800e20c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b082      	sub	sp, #8
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 800e214:	4b59      	ldr	r3, [pc, #356]	; (800e37c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x170>)
 800e216:	781b      	ldrb	r3, [r3, #0]
 800e218:	f083 0301 	eor.w	r3, r3, #1
 800e21c:	b2db      	uxtb	r3, r3
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d003      	beq.n	800e22a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	2201      	movs	r2, #1
 800e226:	721a      	strb	r2, [r3, #8]
            return;
 800e228:	e0a5      	b.n	800e376 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x16a>
        Transition::handleTickEvent();
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	4618      	mov	r0, r3
 800e22e:	f7fe fcdd 	bl	800cbec <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800e238:	3301      	adds	r3, #1
 800e23a:	b2da      	uxtb	r2, r3
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        if (animationCounter <= animationSteps)
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800e24e:	429a      	cmp	r2, r3
 800e250:	d82f      	bhi.n	800e2b2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800e258:	b298      	uxth	r0, r3
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800e266:	b29b      	uxth	r3, r3
 800e268:	2100      	movs	r1, #0
 800e26a:	f012 f8eb 	bl	8020444 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 800e26e:	4603      	mov	r3, r0
 800e270:	461a      	mov	r2, r3
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            if (calculatedValue % 2)
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800e27e:	b29b      	uxth	r3, r3
 800e280:	f003 0301 	and.w	r3, r3, #1
 800e284:	b29b      	uxth	r3, r3
 800e286:	2b00      	cmp	r3, #0
 800e288:	d01b      	beq.n	800e2c2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800e290:	b29b      	uxth	r3, r3
 800e292:	687a      	ldr	r2, [r7, #4]
 800e294:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 800e298:	2a00      	cmp	r2, #0
 800e29a:	dd01      	ble.n	800e2a0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>
 800e29c:	2201      	movs	r2, #1
 800e29e:	e001      	b.n	800e2a4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x98>
 800e2a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e2a4:	4413      	add	r3, r2
 800e2a6:	b29b      	uxth	r3, r3
 800e2a8:	b21a      	sxth	r2, r3
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800e2b0:	e007      	b.n	800e2c2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
            done = true;
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	2201      	movs	r2, #1
 800e2b6:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            return;
 800e2c0:	e059      	b.n	800e376 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x16a>
        switch (direction)
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e2c8:	2b03      	cmp	r3, #3
 800e2ca:	d845      	bhi.n	800e358 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x14c>
 800e2cc:	a201      	add	r2, pc, #4	; (adr r2, 800e2d4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xc8>)
 800e2ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2d2:	bf00      	nop
 800e2d4:	0800e31f 	.word	0x0800e31f
 800e2d8:	0800e31f 	.word	0x0800e31f
 800e2dc:	0800e2e5 	.word	0x0800e2e5
 800e2e0:	0800e2e5 	.word	0x0800e2e5
            calculatedValue -= snapshot.getX();
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	330c      	adds	r3, #12
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	f7fe fb38 	bl	800c95e <_ZNK8touchgfx8Drawable4getXEv>
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	4619      	mov	r1, r3
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800e2f8:	b29a      	uxth	r2, r3
 800e2fa:	b28b      	uxth	r3, r1
 800e2fc:	1ad3      	subs	r3, r2, r3
 800e2fe:	b29b      	uxth	r3, r3
 800e300:	b21a      	sxth	r2, r3
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(calculatedValue, 0);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	f103 000c 	add.w	r0, r3, #12
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800e314:	2200      	movs	r2, #0
 800e316:	4619      	mov	r1, r3
 800e318:	f011 fc1d 	bl	801fb56 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 800e31c:	e020      	b.n	800e360 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x154>
            calculatedValue -= snapshot.getY();
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	330c      	adds	r3, #12
 800e322:	4618      	mov	r0, r3
 800e324:	f7fe fb28 	bl	800c978 <_ZNK8touchgfx8Drawable4getYEv>
 800e328:	4603      	mov	r3, r0
 800e32a:	4619      	mov	r1, r3
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800e332:	b29a      	uxth	r2, r3
 800e334:	b28b      	uxth	r3, r1
 800e336:	1ad3      	subs	r3, r2, r3
 800e338:	b29b      	uxth	r3, r3
 800e33a:	b21a      	sxth	r2, r3
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(0, calculatedValue);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	f103 000c 	add.w	r0, r3, #12
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800e34e:	461a      	mov	r2, r3
 800e350:	2100      	movs	r1, #0
 800e352:	f011 fc00 	bl	801fb56 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 800e356:	e003      	b.n	800e360 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x154>
            done = true;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	2201      	movs	r2, #1
 800e35c:	721a      	strb	r2, [r3, #8]
            break;
 800e35e:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	6858      	ldr	r0, [r3, #4]
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	685b      	ldr	r3, [r3, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	3378      	adds	r3, #120	; 0x78
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	687a      	ldr	r2, [r7, #4]
 800e370:	323c      	adds	r2, #60	; 0x3c
 800e372:	4611      	mov	r1, r2
 800e374:	4798      	blx	r3
    }
 800e376:	3708      	adds	r7, #8
 800e378:	46bd      	mov	sp, r7
 800e37a:	bd80      	pop	{r7, pc}
 800e37c:	200127f3 	.word	0x200127f3

0800e380 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 800e380:	b580      	push	{r7, lr}
 800e382:	b082      	sub	sp, #8
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 800e388:	4b0b      	ldr	r3, [pc, #44]	; (800e3b8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x38>)
 800e38a:	781b      	ldrb	r3, [r3, #0]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d00e      	beq.n	800e3ae <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	685b      	ldr	r3, [r3, #4]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d00a      	beq.n	800e3ae <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
            screenContainer->remove(snapshot);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	6858      	ldr	r0, [r3, #4]
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	685b      	ldr	r3, [r3, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	3364      	adds	r3, #100	; 0x64
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	687a      	ldr	r2, [r7, #4]
 800e3a8:	320c      	adds	r2, #12
 800e3aa:	4611      	mov	r1, r2
 800e3ac:	4798      	blx	r3
    }
 800e3ae:	bf00      	nop
 800e3b0:	3708      	adds	r7, #8
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	bd80      	pop	{r7, pc}
 800e3b6:	bf00      	nop
 800e3b8:	200127f3 	.word	0x200127f3

0800e3bc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b088      	sub	sp, #32
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 800e3c4:	4b1a      	ldr	r3, [pc, #104]	; (800e430 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x74>)
 800e3c6:	781b      	ldrb	r3, [r3, #0]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d02d      	beq.n	800e428 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x6c>
            Transition::init();
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	f7fe fc20 	bl	800cc14 <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 800e3d4:	4a17      	ldr	r2, [pc, #92]	; (800e434 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x78>)
 800e3d6:	f107 0318 	add.w	r3, r7, #24
 800e3da:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e3de:	e883 0003 	stmia.w	r3, {r0, r1}
 800e3e2:	f107 0008 	add.w	r0, r7, #8
 800e3e6:	f107 0318 	add.w	r3, r7, #24
 800e3ea:	cb0c      	ldmia	r3, {r2, r3}
 800e3ec:	6879      	ldr	r1, [r7, #4]
 800e3ee:	f7ff fcc7 	bl	800dd80 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	685a      	ldr	r2, [r3, #4]
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	685b      	ldr	r3, [r3, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	3378      	adds	r3, #120	; 0x78
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	f107 0108 	add.w	r1, r7, #8
 800e404:	4610      	mov	r0, r2
 800e406:	4798      	blx	r3
            screenContainer->add(snapshot);
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	6858      	ldr	r0, [r3, #4]
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	685b      	ldr	r3, [r3, #4]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	3360      	adds	r3, #96	; 0x60
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	687a      	ldr	r2, [r7, #4]
 800e418:	320c      	adds	r2, #12
 800e41a:	4611      	mov	r1, r2
 800e41c:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 800e41e:	f107 0308 	add.w	r3, r7, #8
 800e422:	4618      	mov	r0, r3
 800e424:	f7ff fafe 	bl	800da24 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
    }
 800e428:	bf00      	nop
 800e42a:	3720      	adds	r7, #32
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd80      	pop	{r7, pc}
 800e430:	200127f3 	.word	0x200127f3
 800e434:	0802fcf0 	.word	0x0802fcf0

0800e438 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 800e438:	b580      	push	{r7, lr}
 800e43a:	b082      	sub	sp, #8
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
 800e440:	6039      	str	r1, [r7, #0]
        switch (direction)
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e448:	2b03      	cmp	r3, #3
 800e44a:	d83b      	bhi.n	800e4c4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8c>
 800e44c:	a201      	add	r2, pc, #4	; (adr r2, 800e454 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x1c>)
 800e44e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e452:	bf00      	nop
 800e454:	0800e495 	.word	0x0800e495
 800e458:	0800e4af 	.word	0x0800e4af
 800e45c:	0800e465 	.word	0x0800e465
 800e460:	0800e47b 	.word	0x0800e47b
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 800e464:	683b      	ldr	r3, [r7, #0]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	3354      	adds	r3, #84	; 0x54
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	4a18      	ldr	r2, [pc, #96]	; (800e4d0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 800e46e:	8812      	ldrh	r2, [r2, #0]
 800e470:	b211      	sxth	r1, r2
 800e472:	2200      	movs	r2, #0
 800e474:	6838      	ldr	r0, [r7, #0]
 800e476:	4798      	blx	r3
            break;
 800e478:	e025      	b.n	800e4c6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	3354      	adds	r3, #84	; 0x54
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	4a13      	ldr	r2, [pc, #76]	; (800e4d0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 800e484:	8812      	ldrh	r2, [r2, #0]
 800e486:	4252      	negs	r2, r2
 800e488:	b292      	uxth	r2, r2
 800e48a:	b211      	sxth	r1, r2
 800e48c:	2200      	movs	r2, #0
 800e48e:	6838      	ldr	r0, [r7, #0]
 800e490:	4798      	blx	r3
            break;
 800e492:	e018      	b.n	800e4c6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, -HAL::DISPLAY_HEIGHT);
 800e494:	683b      	ldr	r3, [r7, #0]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	3354      	adds	r3, #84	; 0x54
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	4a0d      	ldr	r2, [pc, #52]	; (800e4d4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 800e49e:	8812      	ldrh	r2, [r2, #0]
 800e4a0:	4252      	negs	r2, r2
 800e4a2:	b292      	uxth	r2, r2
 800e4a4:	b212      	sxth	r2, r2
 800e4a6:	2100      	movs	r1, #0
 800e4a8:	6838      	ldr	r0, [r7, #0]
 800e4aa:	4798      	blx	r3
            break;
 800e4ac:	e00b      	b.n	800e4c6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	3354      	adds	r3, #84	; 0x54
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	4a07      	ldr	r2, [pc, #28]	; (800e4d4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 800e4b8:	8812      	ldrh	r2, [r2, #0]
 800e4ba:	b212      	sxth	r2, r2
 800e4bc:	2100      	movs	r1, #0
 800e4be:	6838      	ldr	r0, [r7, #0]
 800e4c0:	4798      	blx	r3
            break;
 800e4c2:	e000      	b.n	800e4c6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            break;
 800e4c4:	bf00      	nop
    }
 800e4c6:	bf00      	nop
 800e4c8:	3708      	adds	r7, #8
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	bd80      	pop	{r7, pc}
 800e4ce:	bf00      	nop
 800e4d0:	200127e8 	.word	0x200127e8
 800e4d4:	200127ea 	.word	0x200127ea

0800e4d8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b082      	sub	sp, #8
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
 800e4e0:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	685b      	ldr	r3, [r3, #4]
 800e4e6:	687a      	ldr	r2, [r7, #4]
 800e4e8:	68d2      	ldr	r2, [r2, #12]
 800e4ea:	1052      	asrs	r2, r2, #1
 800e4ec:	1898      	adds	r0, r3, r2
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	68db      	ldr	r3, [r3, #12]
 800e4f2:	f003 0301 	and.w	r3, r3, #1
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d102      	bne.n	800e500 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x28>
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	689b      	ldr	r3, [r3, #8]
 800e4fe:	e00a      	b.n	800e516 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x3e>
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	685b      	ldr	r3, [r3, #4]
 800e504:	687a      	ldr	r2, [r7, #4]
 800e506:	68d2      	ldr	r2, [r2, #12]
 800e508:	1052      	asrs	r2, r2, #1
 800e50a:	4413      	add	r3, r2
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	687a      	ldr	r2, [r7, #4]
 800e510:	6892      	ldr	r2, [r2, #8]
 800e512:	4413      	add	r3, r2
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	6839      	ldr	r1, [r7, #0]
 800e518:	4798      	blx	r3
    }
 800e51a:	bf00      	nop
 800e51c:	3708      	adds	r7, #8
 800e51e:	46bd      	mov	sp, r7
 800e520:	bd80      	pop	{r7, pc}

0800e522 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 800e522:	b480      	push	{r7}
 800e524:	b083      	sub	sp, #12
 800e526:	af00      	add	r7, sp, #0
 800e528:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	685b      	ldr	r3, [r3, #4]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d010      	beq.n	800e554 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	689b      	ldr	r3, [r3, #8]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d107      	bne.n	800e54a <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	68db      	ldr	r3, [r3, #12]
 800e53e:	f003 0301 	and.w	r3, r3, #1
 800e542:	2b00      	cmp	r3, #0
 800e544:	d101      	bne.n	800e54a <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 800e546:	2301      	movs	r3, #1
 800e548:	e000      	b.n	800e54c <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x2a>
 800e54a:	2300      	movs	r3, #0
 800e54c:	2b01      	cmp	r3, #1
 800e54e:	d001      	beq.n	800e554 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 800e550:	2301      	movs	r3, #1
 800e552:	e000      	b.n	800e556 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x34>
 800e554:	2300      	movs	r3, #0
    }
 800e556:	4618      	mov	r0, r3
 800e558:	370c      	adds	r7, #12
 800e55a:	46bd      	mov	sp, r7
 800e55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e560:	4770      	bx	lr

0800e562 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800e562:	b480      	push	{r7}
 800e564:	b083      	sub	sp, #12
 800e566:	af00      	add	r7, sp, #0
 800e568:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	6a1b      	ldr	r3, [r3, #32]
    }
 800e56e:	4618      	mov	r0, r3
 800e570:	370c      	adds	r7, #12
 800e572:	46bd      	mov	sp, r7
 800e574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e578:	4770      	bx	lr
	...

0800e57c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b08c      	sub	sp, #48	; 0x30
 800e580:	af08      	add	r7, sp, #32
 800e582:	60f8      	str	r0, [r7, #12]
 800e584:	60b9      	str	r1, [r7, #8]
 800e586:	4611      	mov	r1, r2
 800e588:	461a      	mov	r2, r3
 800e58a:	460b      	mov	r3, r1
 800e58c:	80fb      	strh	r3, [r7, #6]
 800e58e:	4613      	mov	r3, r2
 800e590:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 800e592:	68f8      	ldr	r0, [r7, #12]
 800e594:	88b9      	ldrh	r1, [r7, #4]
 800e596:	88fa      	ldrh	r2, [r7, #6]
 800e598:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800e59a:	9306      	str	r3, [sp, #24]
 800e59c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e59e:	9305      	str	r3, [sp, #20]
 800e5a0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e5a4:	9304      	str	r3, [sp, #16]
 800e5a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e5aa:	9303      	str	r3, [sp, #12]
 800e5ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e5b0:	9302      	str	r3, [sp, #8]
 800e5b2:	7f3b      	ldrb	r3, [r7, #28]
 800e5b4:	9301      	str	r3, [sp, #4]
 800e5b6:	7e3b      	ldrb	r3, [r7, #24]
 800e5b8:	9300      	str	r3, [sp, #0]
 800e5ba:	460b      	mov	r3, r1
 800e5bc:	68b9      	ldr	r1, [r7, #8]
 800e5be:	f011 fb55 	bl	801fc6c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800e5c2:	4a08      	ldr	r2, [pc, #32]	; (800e5e4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	601a      	str	r2, [r3, #0]
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e5cc:	619a      	str	r2, [r3, #24]
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5d2:	61da      	str	r2, [r3, #28]
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e5d8:	621a      	str	r2, [r3, #32]
{
}
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	4618      	mov	r0, r3
 800e5de:	3710      	adds	r7, #16
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd80      	pop	{r7, pc}
 800e5e4:	0803160c 	.word	0x0803160c

0800e5e8 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800e5e8:	b480      	push	{r7}
 800e5ea:	b085      	sub	sp, #20
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
 800e5f0:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	699b      	ldr	r3, [r3, #24]
 800e5f6:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800e5f8:	683b      	ldr	r3, [r7, #0]
 800e5fa:	889b      	ldrh	r3, [r3, #4]
 800e5fc:	0adb      	lsrs	r3, r3, #11
 800e5fe:	b29b      	uxth	r3, r3
 800e600:	009b      	lsls	r3, r3, #2
 800e602:	68fa      	ldr	r2, [r7, #12]
 800e604:	4413      	add	r3, r2
 800e606:	681a      	ldr	r2, [r3, #0]
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	4413      	add	r3, r2
}
 800e60e:	4618      	mov	r0, r3
 800e610:	3714      	adds	r7, #20
 800e612:	46bd      	mov	sp, r7
 800e614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e618:	4770      	bx	lr

0800e61a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800e61a:	b480      	push	{r7}
 800e61c:	b089      	sub	sp, #36	; 0x24
 800e61e:	af00      	add	r7, sp, #0
 800e620:	60f8      	str	r0, [r7, #12]
 800e622:	460b      	mov	r3, r1
 800e624:	607a      	str	r2, [r7, #4]
 800e626:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d003      	beq.n	800e636 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	7b1b      	ldrb	r3, [r3, #12]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d101      	bne.n	800e63a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800e636:	2300      	movs	r3, #0
 800e638:	e030      	b.n	800e69c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	69da      	ldr	r2, [r3, #28]
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800e642:	697b      	ldr	r3, [r7, #20]
 800e644:	7b5b      	ldrb	r3, [r3, #13]
 800e646:	021b      	lsls	r3, r3, #8
 800e648:	b21b      	sxth	r3, r3
 800e64a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e64e:	b219      	sxth	r1, r3
 800e650:	697b      	ldr	r3, [r7, #20]
 800e652:	7adb      	ldrb	r3, [r3, #11]
 800e654:	b21b      	sxth	r3, r3
 800e656:	430b      	orrs	r3, r1
 800e658:	b21b      	sxth	r3, r3
 800e65a:	b29b      	uxth	r3, r3
 800e65c:	009b      	lsls	r3, r3, #2
 800e65e:	4413      	add	r3, r2
 800e660:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	7b1b      	ldrb	r3, [r3, #12]
 800e666:	837b      	strh	r3, [r7, #26]
 800e668:	8b7b      	ldrh	r3, [r7, #26]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d015      	beq.n	800e69a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800e66e:	69fb      	ldr	r3, [r7, #28]
 800e670:	881b      	ldrh	r3, [r3, #0]
 800e672:	897a      	ldrh	r2, [r7, #10]
 800e674:	429a      	cmp	r2, r3
 800e676:	d103      	bne.n	800e680 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800e678:	69fb      	ldr	r3, [r7, #28]
 800e67a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800e67e:	e00d      	b.n	800e69c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800e680:	69fb      	ldr	r3, [r7, #28]
 800e682:	881b      	ldrh	r3, [r3, #0]
 800e684:	897a      	ldrh	r2, [r7, #10]
 800e686:	429a      	cmp	r2, r3
 800e688:	d306      	bcc.n	800e698 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800e68a:	8b7b      	ldrh	r3, [r7, #26]
 800e68c:	3b01      	subs	r3, #1
 800e68e:	837b      	strh	r3, [r7, #26]
 800e690:	69fb      	ldr	r3, [r7, #28]
 800e692:	3304      	adds	r3, #4
 800e694:	61fb      	str	r3, [r7, #28]
 800e696:	e7e7      	b.n	800e668 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800e698:	bf00      	nop
        }
    }
    return 0;
 800e69a:	2300      	movs	r3, #0
}
 800e69c:	4618      	mov	r0, r3
 800e69e:	3724      	adds	r7, #36	; 0x24
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a6:	4770      	bx	lr

0800e6a8 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 94, 10, 2, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	af00      	add	r7, sp, #0
 800e6ac:	4801      	ldr	r0, [pc, #4]	; (800e6b4 <__tcf_0+0xc>)
 800e6ae:	f7fe f8bb 	bl	800c828 <_ZN8touchgfx13GeneratedFontD1Ev>
 800e6b2:	bd80      	pop	{r7, pc}
 800e6b4:	20001a3c 	.word	0x20001a3c

0800e6b8 <_Z23getFont_verdana_10_4bppv>:
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b08a      	sub	sp, #40	; 0x28
 800e6bc:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 94, 10, 2, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 800e6be:	4b1e      	ldr	r3, [pc, #120]	; (800e738 <_Z23getFont_verdana_10_4bppv+0x80>)
 800e6c0:	781b      	ldrb	r3, [r3, #0]
 800e6c2:	f3bf 8f5b 	dmb	ish
 800e6c6:	b2db      	uxtb	r3, r3
 800e6c8:	f003 0301 	and.w	r3, r3, #1
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	bf0c      	ite	eq
 800e6d0:	2301      	moveq	r3, #1
 800e6d2:	2300      	movne	r3, #0
 800e6d4:	b2db      	uxtb	r3, r3
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d02a      	beq.n	800e730 <_Z23getFont_verdana_10_4bppv+0x78>
 800e6da:	4817      	ldr	r0, [pc, #92]	; (800e738 <_Z23getFont_verdana_10_4bppv+0x80>)
 800e6dc:	f01e fd30 	bl	802d140 <__cxa_guard_acquire>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	bf14      	ite	ne
 800e6e6:	2301      	movne	r3, #1
 800e6e8:	2300      	moveq	r3, #0
 800e6ea:	b2db      	uxtb	r3, r3
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d01f      	beq.n	800e730 <_Z23getFont_verdana_10_4bppv+0x78>
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	9309      	str	r3, [sp, #36]	; 0x24
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	9308      	str	r3, [sp, #32]
 800e6f8:	233f      	movs	r3, #63	; 0x3f
 800e6fa:	9307      	str	r3, [sp, #28]
 800e6fc:	4b0f      	ldr	r3, [pc, #60]	; (800e73c <_Z23getFont_verdana_10_4bppv+0x84>)
 800e6fe:	9306      	str	r3, [sp, #24]
 800e700:	4b0f      	ldr	r3, [pc, #60]	; (800e740 <_Z23getFont_verdana_10_4bppv+0x88>)
 800e702:	9305      	str	r3, [sp, #20]
 800e704:	2301      	movs	r3, #1
 800e706:	9304      	str	r3, [sp, #16]
 800e708:	2301      	movs	r3, #1
 800e70a:	9303      	str	r3, [sp, #12]
 800e70c:	2301      	movs	r3, #1
 800e70e:	9302      	str	r3, [sp, #8]
 800e710:	2304      	movs	r3, #4
 800e712:	9301      	str	r3, [sp, #4]
 800e714:	2302      	movs	r3, #2
 800e716:	9300      	str	r3, [sp, #0]
 800e718:	230a      	movs	r3, #10
 800e71a:	225e      	movs	r2, #94	; 0x5e
 800e71c:	4909      	ldr	r1, [pc, #36]	; (800e744 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800e71e:	480a      	ldr	r0, [pc, #40]	; (800e748 <_Z23getFont_verdana_10_4bppv+0x90>)
 800e720:	f7ff ff2c 	bl	800e57c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800e724:	4804      	ldr	r0, [pc, #16]	; (800e738 <_Z23getFont_verdana_10_4bppv+0x80>)
 800e726:	f01e fd27 	bl	802d178 <__cxa_guard_release>
 800e72a:	4808      	ldr	r0, [pc, #32]	; (800e74c <_Z23getFont_verdana_10_4bppv+0x94>)
 800e72c:	f01f fdf2 	bl	802e314 <atexit>
    return verdana_10_4bpp;
 800e730:	4b05      	ldr	r3, [pc, #20]	; (800e748 <_Z23getFont_verdana_10_4bppv+0x90>)
}
 800e732:	4618      	mov	r0, r3
 800e734:	46bd      	mov	sp, r7
 800e736:	bd80      	pop	{r7, pc}
 800e738:	20001a60 	.word	0x20001a60
 800e73c:	08038534 	.word	0x08038534
 800e740:	08031658 	.word	0x08031658
 800e744:	08037adc 	.word	0x08037adc
 800e748:	20001a3c 	.word	0x20001a3c
 800e74c:	0800e6a9 	.word	0x0800e6a9

0800e750 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 94, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800e750:	b580      	push	{r7, lr}
 800e752:	af00      	add	r7, sp, #0
 800e754:	4801      	ldr	r0, [pc, #4]	; (800e75c <__tcf_0+0xc>)
 800e756:	f7fe f867 	bl	800c828 <_ZN8touchgfx13GeneratedFontD1Ev>
 800e75a:	bd80      	pop	{r7, pc}
 800e75c:	20001a64 	.word	0x20001a64

0800e760 <_Z23getFont_verdana_20_4bppv>:
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b08a      	sub	sp, #40	; 0x28
 800e764:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 94, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800e766:	4b1e      	ldr	r3, [pc, #120]	; (800e7e0 <_Z23getFont_verdana_20_4bppv+0x80>)
 800e768:	781b      	ldrb	r3, [r3, #0]
 800e76a:	f3bf 8f5b 	dmb	ish
 800e76e:	b2db      	uxtb	r3, r3
 800e770:	f003 0301 	and.w	r3, r3, #1
 800e774:	2b00      	cmp	r3, #0
 800e776:	bf0c      	ite	eq
 800e778:	2301      	moveq	r3, #1
 800e77a:	2300      	movne	r3, #0
 800e77c:	b2db      	uxtb	r3, r3
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d02a      	beq.n	800e7d8 <_Z23getFont_verdana_20_4bppv+0x78>
 800e782:	4817      	ldr	r0, [pc, #92]	; (800e7e0 <_Z23getFont_verdana_20_4bppv+0x80>)
 800e784:	f01e fcdc 	bl	802d140 <__cxa_guard_acquire>
 800e788:	4603      	mov	r3, r0
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	bf14      	ite	ne
 800e78e:	2301      	movne	r3, #1
 800e790:	2300      	moveq	r3, #0
 800e792:	b2db      	uxtb	r3, r3
 800e794:	2b00      	cmp	r3, #0
 800e796:	d01f      	beq.n	800e7d8 <_Z23getFont_verdana_20_4bppv+0x78>
 800e798:	2300      	movs	r3, #0
 800e79a:	9309      	str	r3, [sp, #36]	; 0x24
 800e79c:	2300      	movs	r3, #0
 800e79e:	9308      	str	r3, [sp, #32]
 800e7a0:	233f      	movs	r3, #63	; 0x3f
 800e7a2:	9307      	str	r3, [sp, #28]
 800e7a4:	4b0f      	ldr	r3, [pc, #60]	; (800e7e4 <_Z23getFont_verdana_20_4bppv+0x84>)
 800e7a6:	9306      	str	r3, [sp, #24]
 800e7a8:	4b0f      	ldr	r3, [pc, #60]	; (800e7e8 <_Z23getFont_verdana_20_4bppv+0x88>)
 800e7aa:	9305      	str	r3, [sp, #20]
 800e7ac:	2301      	movs	r3, #1
 800e7ae:	9304      	str	r3, [sp, #16]
 800e7b0:	2301      	movs	r3, #1
 800e7b2:	9303      	str	r3, [sp, #12]
 800e7b4:	2301      	movs	r3, #1
 800e7b6:	9302      	str	r3, [sp, #8]
 800e7b8:	2304      	movs	r3, #4
 800e7ba:	9301      	str	r3, [sp, #4]
 800e7bc:	2304      	movs	r3, #4
 800e7be:	9300      	str	r3, [sp, #0]
 800e7c0:	2314      	movs	r3, #20
 800e7c2:	225e      	movs	r2, #94	; 0x5e
 800e7c4:	4909      	ldr	r1, [pc, #36]	; (800e7ec <_Z23getFont_verdana_20_4bppv+0x8c>)
 800e7c6:	480a      	ldr	r0, [pc, #40]	; (800e7f0 <_Z23getFont_verdana_20_4bppv+0x90>)
 800e7c8:	f7ff fed8 	bl	800e57c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800e7cc:	4804      	ldr	r0, [pc, #16]	; (800e7e0 <_Z23getFont_verdana_20_4bppv+0x80>)
 800e7ce:	f01e fcd3 	bl	802d178 <__cxa_guard_release>
 800e7d2:	4808      	ldr	r0, [pc, #32]	; (800e7f4 <_Z23getFont_verdana_20_4bppv+0x94>)
 800e7d4:	f01f fd9e 	bl	802e314 <atexit>
    return verdana_20_4bpp;
 800e7d8:	4b05      	ldr	r3, [pc, #20]	; (800e7f0 <_Z23getFont_verdana_20_4bppv+0x90>)
}
 800e7da:	4618      	mov	r0, r3
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	bd80      	pop	{r7, pc}
 800e7e0:	20001a88 	.word	0x20001a88
 800e7e4:	08038568 	.word	0x08038568
 800e7e8:	0803165c 	.word	0x0803165c
 800e7ec:	08038000 	.word	0x08038000
 800e7f0:	20001a64 	.word	0x20001a64
 800e7f4:	0800e751 	.word	0x0800e751

0800e7f8 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	af00      	add	r7, sp, #0
 800e7fc:	4801      	ldr	r0, [pc, #4]	; (800e804 <__tcf_0+0xc>)
 800e7fe:	f7fe f813 	bl	800c828 <_ZN8touchgfx13GeneratedFontD1Ev>
 800e802:	bd80      	pop	{r7, pc}
 800e804:	20001a8c 	.word	0x20001a8c

0800e808 <_Z23getFont_verdana_40_4bppv>:
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b08a      	sub	sp, #40	; 0x28
 800e80c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800e80e:	4b1e      	ldr	r3, [pc, #120]	; (800e888 <_Z23getFont_verdana_40_4bppv+0x80>)
 800e810:	781b      	ldrb	r3, [r3, #0]
 800e812:	f3bf 8f5b 	dmb	ish
 800e816:	b2db      	uxtb	r3, r3
 800e818:	f003 0301 	and.w	r3, r3, #1
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	bf0c      	ite	eq
 800e820:	2301      	moveq	r3, #1
 800e822:	2300      	movne	r3, #0
 800e824:	b2db      	uxtb	r3, r3
 800e826:	2b00      	cmp	r3, #0
 800e828:	d02a      	beq.n	800e880 <_Z23getFont_verdana_40_4bppv+0x78>
 800e82a:	4817      	ldr	r0, [pc, #92]	; (800e888 <_Z23getFont_verdana_40_4bppv+0x80>)
 800e82c:	f01e fc88 	bl	802d140 <__cxa_guard_acquire>
 800e830:	4603      	mov	r3, r0
 800e832:	2b00      	cmp	r3, #0
 800e834:	bf14      	ite	ne
 800e836:	2301      	movne	r3, #1
 800e838:	2300      	moveq	r3, #0
 800e83a:	b2db      	uxtb	r3, r3
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d01f      	beq.n	800e880 <_Z23getFont_verdana_40_4bppv+0x78>
 800e840:	2300      	movs	r3, #0
 800e842:	9309      	str	r3, [sp, #36]	; 0x24
 800e844:	2300      	movs	r3, #0
 800e846:	9308      	str	r3, [sp, #32]
 800e848:	233f      	movs	r3, #63	; 0x3f
 800e84a:	9307      	str	r3, [sp, #28]
 800e84c:	4b0f      	ldr	r3, [pc, #60]	; (800e88c <_Z23getFont_verdana_40_4bppv+0x84>)
 800e84e:	9306      	str	r3, [sp, #24]
 800e850:	4b0f      	ldr	r3, [pc, #60]	; (800e890 <_Z23getFont_verdana_40_4bppv+0x88>)
 800e852:	9305      	str	r3, [sp, #20]
 800e854:	2300      	movs	r3, #0
 800e856:	9304      	str	r3, [sp, #16]
 800e858:	2300      	movs	r3, #0
 800e85a:	9303      	str	r3, [sp, #12]
 800e85c:	2301      	movs	r3, #1
 800e85e:	9302      	str	r3, [sp, #8]
 800e860:	2304      	movs	r3, #4
 800e862:	9301      	str	r3, [sp, #4]
 800e864:	2300      	movs	r3, #0
 800e866:	9300      	str	r3, [sp, #0]
 800e868:	2328      	movs	r3, #40	; 0x28
 800e86a:	2201      	movs	r2, #1
 800e86c:	4909      	ldr	r1, [pc, #36]	; (800e894 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800e86e:	480a      	ldr	r0, [pc, #40]	; (800e898 <_Z23getFont_verdana_40_4bppv+0x90>)
 800e870:	f7ff fe84 	bl	800e57c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800e874:	4804      	ldr	r0, [pc, #16]	; (800e888 <_Z23getFont_verdana_40_4bppv+0x80>)
 800e876:	f01e fc7f 	bl	802d178 <__cxa_guard_release>
 800e87a:	4808      	ldr	r0, [pc, #32]	; (800e89c <_Z23getFont_verdana_40_4bppv+0x94>)
 800e87c:	f01f fd4a 	bl	802e314 <atexit>
    return verdana_40_4bpp;
 800e880:	4b05      	ldr	r3, [pc, #20]	; (800e898 <_Z23getFont_verdana_40_4bppv+0x90>)
}
 800e882:	4618      	mov	r0, r3
 800e884:	46bd      	mov	sp, r7
 800e886:	bd80      	pop	{r7, pc}
 800e888:	20001ab0 	.word	0x20001ab0
 800e88c:	0803870c 	.word	0x0803870c
 800e890:	08031660 	.word	0x08031660
 800e894:	08038524 	.word	0x08038524
 800e898:	20001a8c 	.word	0x20001a8c
 800e89c:	0800e7f9 	.word	0x0800e7f9

0800e8a0 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 800e8a0:	b480      	push	{r7}
 800e8a2:	b085      	sub	sp, #20
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	60f8      	str	r0, [r7, #12]
 800e8a8:	460b      	mov	r3, r1
 800e8aa:	607a      	str	r2, [r7, #4]
 800e8ac:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 800e8ae:	2300      	movs	r3, #0
    }
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	3714      	adds	r7, #20
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ba:	4770      	bx	lr

0800e8bc <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 800e8bc:	b480      	push	{r7}
 800e8be:	b083      	sub	sp, #12
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800e8c4:	2300      	movs	r3, #0
    }
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	370c      	adds	r7, #12
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d0:	4770      	bx	lr
	...

0800e8d4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 800e8d4:	b480      	push	{r7}
 800e8d6:	b085      	sub	sp, #20
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	60f8      	str	r0, [r7, #12]
 800e8dc:	60b9      	str	r1, [r7, #8]
 800e8de:	4613      	mov	r3, r2
 800e8e0:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 800e8e2:	4a07      	ldr	r2, [pc, #28]	; (800e900 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	6013      	str	r3, [r2, #0]
        fonts = f;
 800e8e8:	4a06      	ldr	r2, [pc, #24]	; (800e904 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 800e8ea:	68bb      	ldr	r3, [r7, #8]
 800e8ec:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800e8ee:	4a06      	ldr	r2, [pc, #24]	; (800e908 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 800e8f0:	88fb      	ldrh	r3, [r7, #6]
 800e8f2:	8013      	strh	r3, [r2, #0]
    }
 800e8f4:	bf00      	nop
 800e8f6:	3714      	adds	r7, #20
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fe:	4770      	bx	lr
 800e900:	20012864 	.word	0x20012864
 800e904:	2001286c 	.word	0x2001286c
 800e908:	20012868 	.word	0x20012868

0800e90c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800e90c:	b40e      	push	{r1, r2, r3}
 800e90e:	b580      	push	{r7, lr}
 800e910:	b085      	sub	sp, #20
 800e912:	af00      	add	r7, sp, #0
 800e914:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 800e916:	f107 0320 	add.w	r3, r7, #32
 800e91a:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800e91c:	68bb      	ldr	r3, [r7, #8]
 800e91e:	69fa      	ldr	r2, [r7, #28]
 800e920:	2100      	movs	r1, #0
 800e922:	6878      	ldr	r0, [r7, #4]
 800e924:	f010 ffde 	bl	801f8e4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800e928:	4603      	mov	r3, r0
 800e92a:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800e92c:	89fb      	ldrh	r3, [r7, #14]
}
 800e92e:	4618      	mov	r0, r3
 800e930:	3714      	adds	r7, #20
 800e932:	46bd      	mov	sp, r7
 800e934:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e938:	b003      	add	sp, #12
 800e93a:	4770      	bx	lr

0800e93c <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800e93c:	b40c      	push	{r2, r3}
 800e93e:	b580      	push	{r7, lr}
 800e940:	b084      	sub	sp, #16
 800e942:	af00      	add	r7, sp, #0
 800e944:	6078      	str	r0, [r7, #4]
 800e946:	460b      	mov	r3, r1
 800e948:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800e94a:	f107 031c 	add.w	r3, r7, #28
 800e94e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800e950:	78f9      	ldrb	r1, [r7, #3]
 800e952:	68bb      	ldr	r3, [r7, #8]
 800e954:	69ba      	ldr	r2, [r7, #24]
 800e956:	6878      	ldr	r0, [r7, #4]
 800e958:	f010 ffc4 	bl	801f8e4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800e95c:	4603      	mov	r3, r0
 800e95e:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800e960:	89fb      	ldrh	r3, [r7, #14]
}
 800e962:	4618      	mov	r0, r3
 800e964:	3710      	adds	r7, #16
 800e966:	46bd      	mov	sp, r7
 800e968:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e96c:	b002      	add	sp, #8
 800e96e:	4770      	bx	lr

0800e970 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b08a      	sub	sp, #40	; 0x28
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
 800e978:	460b      	mov	r3, r1
 800e97a:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e980:	2b00      	cmp	r3, #0
 800e982:	d016      	beq.n	800e9b2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	331a      	adds	r3, #26
 800e988:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800e98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e98c:	8adb      	ldrh	r3, [r3, #22]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d105      	bne.n	800e99e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 800e992:	4b42      	ldr	r3, [pc, #264]	; (800ea9c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12c>)
 800e994:	4a42      	ldr	r2, [pc, #264]	; (800eaa0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800e996:	21c0      	movs	r1, #192	; 0xc0
 800e998:	4842      	ldr	r0, [pc, #264]	; (800eaa4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800e99a:	f01f fc9d 	bl	802e2d8 <__assert_func>
            return buffer[pos];
 800e99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9a0:	8a9b      	ldrh	r3, [r3, #20]
 800e9a2:	461a      	mov	r2, r3
 800e9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9a6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d001      	beq.n	800e9b2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800e9ae:	2301      	movs	r3, #1
 800e9b0:	e000      	b.n	800e9b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d068      	beq.n	800ea8a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11a>
    {
        substituteGlyphs();
 800e9b8:	6878      	ldr	r0, [r7, #4]
 800e9ba:	f012 facb 	bl	8020f54 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	331a      	adds	r3, #26
 800e9c2:	623b      	str	r3, [r7, #32]
 800e9c4:	2301      	movs	r3, #1
 800e9c6:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800e9c8:	6a3b      	ldr	r3, [r7, #32]
 800e9ca:	8adb      	ldrh	r3, [r3, #22]
 800e9cc:	8bfa      	ldrh	r2, [r7, #30]
 800e9ce:	429a      	cmp	r2, r3
 800e9d0:	d305      	bcc.n	800e9de <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 800e9d2:	4b35      	ldr	r3, [pc, #212]	; (800eaa8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800e9d4:	4a35      	ldr	r2, [pc, #212]	; (800eaac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 800e9d6:	21c5      	movs	r1, #197	; 0xc5
 800e9d8:	4832      	ldr	r0, [pc, #200]	; (800eaa4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800e9da:	f01f fc7d 	bl	802e2d8 <__assert_func>
            const uint16_t index = pos + offset;
 800e9de:	6a3b      	ldr	r3, [r7, #32]
 800e9e0:	8a9a      	ldrh	r2, [r3, #20]
 800e9e2:	8bfb      	ldrh	r3, [r7, #30]
 800e9e4:	4413      	add	r3, r2
 800e9e6:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 800e9e8:	8bbb      	ldrh	r3, [r7, #28]
 800e9ea:	2b09      	cmp	r3, #9
 800e9ec:	d801      	bhi.n	800e9f2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800e9ee:	8bbb      	ldrh	r3, [r7, #28]
 800e9f0:	e001      	b.n	800e9f6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 800e9f2:	8bbb      	ldrh	r3, [r7, #28]
 800e9f4:	3b0a      	subs	r3, #10
 800e9f6:	6a3a      	ldr	r2, [r7, #32]
 800e9f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e9fc:	f640 123f 	movw	r2, #2367	; 0x93f
 800ea00:	4293      	cmp	r3, r2
 800ea02:	bf0c      	ite	eq
 800ea04:	2301      	moveq	r3, #1
 800ea06:	2300      	movne	r3, #0
 800ea08:	b2db      	uxtb	r3, r3
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d03d      	beq.n	800ea8a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11a>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	331a      	adds	r3, #26
 800ea12:	687a      	ldr	r2, [r7, #4]
 800ea14:	321a      	adds	r2, #26
 800ea16:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 800ea18:	68ba      	ldr	r2, [r7, #8]
 800ea1a:	8ad2      	ldrh	r2, [r2, #22]
 800ea1c:	2a00      	cmp	r2, #0
 800ea1e:	d105      	bne.n	800ea2c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 800ea20:	4b1e      	ldr	r3, [pc, #120]	; (800ea9c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12c>)
 800ea22:	4a1f      	ldr	r2, [pc, #124]	; (800eaa0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800ea24:	21c0      	movs	r1, #192	; 0xc0
 800ea26:	481f      	ldr	r0, [pc, #124]	; (800eaa4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800ea28:	f01f fc56 	bl	802e2d8 <__assert_func>
            return buffer[pos];
 800ea2c:	68ba      	ldr	r2, [r7, #8]
 800ea2e:	8a92      	ldrh	r2, [r2, #20]
 800ea30:	4611      	mov	r1, r2
 800ea32:	68ba      	ldr	r2, [r7, #8]
 800ea34:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800ea38:	613b      	str	r3, [r7, #16]
 800ea3a:	4613      	mov	r3, r2
 800ea3c:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 800ea3e:	693b      	ldr	r3, [r7, #16]
 800ea40:	8adb      	ldrh	r3, [r3, #22]
 800ea42:	2b01      	cmp	r3, #1
 800ea44:	d806      	bhi.n	800ea54 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800ea46:	4b1a      	ldr	r3, [pc, #104]	; (800eab0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 800ea48:	4a1a      	ldr	r2, [pc, #104]	; (800eab4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 800ea4a:	f240 110d 	movw	r1, #269	; 0x10d
 800ea4e:	4815      	ldr	r0, [pc, #84]	; (800eaa4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800ea50:	f01f fc42 	bl	802e2d8 <__assert_func>
            const uint16_t index = pos + 1;
 800ea54:	693b      	ldr	r3, [r7, #16]
 800ea56:	8a9b      	ldrh	r3, [r3, #20]
 800ea58:	3301      	adds	r3, #1
 800ea5a:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 800ea5c:	89bb      	ldrh	r3, [r7, #12]
 800ea5e:	2b09      	cmp	r3, #9
 800ea60:	d801      	bhi.n	800ea66 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 800ea62:	89bb      	ldrh	r3, [r7, #12]
 800ea64:	e000      	b.n	800ea68 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800ea66:	2300      	movs	r3, #0
 800ea68:	693a      	ldr	r2, [r7, #16]
 800ea6a:	89f9      	ldrh	r1, [r7, #14]
 800ea6c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            nextCharacters.replaceAt0(0x093F);
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	331a      	adds	r3, #26
 800ea74:	61bb      	str	r3, [r7, #24]
 800ea76:	f640 133f 	movw	r3, #2367	; 0x93f
 800ea7a:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 800ea7c:	69bb      	ldr	r3, [r7, #24]
 800ea7e:	8a9b      	ldrh	r3, [r3, #20]
 800ea80:	4619      	mov	r1, r3
 800ea82:	69bb      	ldr	r3, [r7, #24]
 800ea84:	8afa      	ldrh	r2, [r7, #22]
 800ea86:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
    }
    return getNextChar();
 800ea8a:	6878      	ldr	r0, [r7, #4]
 800ea8c:	f012 f946 	bl	8020d1c <_ZN8touchgfx12TextProvider11getNextCharEv>
 800ea90:	4603      	mov	r3, r0
}
 800ea92:	4618      	mov	r0, r3
 800ea94:	3728      	adds	r7, #40	; 0x28
 800ea96:	46bd      	mov	sp, r7
 800ea98:	bd80      	pop	{r7, pc}
 800ea9a:	bf00      	nop
 800ea9c:	0802fcf8 	.word	0x0802fcf8
 800eaa0:	08031788 	.word	0x08031788
 800eaa4:	0802fd04 	.word	0x0802fd04
 800eaa8:	0802fd50 	.word	0x0802fd50
 800eaac:	080316b4 	.word	0x080316b4
 800eab0:	0802fd60 	.word	0x0802fd60
 800eab4:	08031834 	.word	0x08031834

0800eab8 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b082      	sub	sp, #8
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 800eac0:	6878      	ldr	r0, [r7, #4]
 800eac2:	f012 f8e5 	bl	8020c90 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800eac6:	bf00      	nop
 800eac8:	3708      	adds	r7, #8
 800eaca:	46bd      	mov	sp, r7
 800eacc:	bd80      	pop	{r7, pc}

0800eace <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 800eace:	b580      	push	{r7, lr}
 800ead0:	b088      	sub	sp, #32
 800ead2:	af02      	add	r7, sp, #8
 800ead4:	60f8      	str	r0, [r7, #12]
 800ead6:	1d38      	adds	r0, r7, #4
 800ead8:	e880 0006 	stmia.w	r0, {r1, r2}
 800eadc:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 800eade:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800eae2:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800eae4:	1d39      	adds	r1, r7, #4
 800eae6:	697b      	ldr	r3, [r7, #20]
 800eae8:	9301      	str	r3, [sp, #4]
 800eaea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaec:	9300      	str	r3, [sp, #0]
 800eaee:	6a3b      	ldr	r3, [r7, #32]
 800eaf0:	683a      	ldr	r2, [r7, #0]
 800eaf2:	68f8      	ldr	r0, [r7, #12]
 800eaf4:	f00f ff47 	bl	801e986 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 800eaf8:	bf00      	nop
 800eafa:	3718      	adds	r7, #24
 800eafc:	46bd      	mov	sp, r7
 800eafe:	bd80      	pop	{r7, pc}

0800eb00 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800eb00:	b590      	push	{r4, r7, lr}
 800eb02:	b085      	sub	sp, #20
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	4603      	mov	r3, r0
 800eb08:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800eb0e:	88fb      	ldrh	r3, [r7, #6]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d127      	bne.n	800eb64 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 800eb14:	88fb      	ldrh	r3, [r7, #6]
 800eb16:	4a1e      	ldr	r2, [pc, #120]	; (800eb90 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800eb18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d016      	beq.n	800eb4e <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 800eb20:	88fb      	ldrh	r3, [r7, #6]
 800eb22:	4a1b      	ldr	r2, [pc, #108]	; (800eb90 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800eb24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb28:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800eb2a:	68bb      	ldr	r3, [r7, #8]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	68ba      	ldr	r2, [r7, #8]
 800eb30:	4413      	add	r3, r2
 800eb32:	4a18      	ldr	r2, [pc, #96]	; (800eb94 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800eb34:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800eb36:	68bb      	ldr	r3, [r7, #8]
 800eb38:	685b      	ldr	r3, [r3, #4]
 800eb3a:	68ba      	ldr	r2, [r7, #8]
 800eb3c:	4413      	add	r3, r2
 800eb3e:	4a16      	ldr	r2, [pc, #88]	; (800eb98 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800eb40:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800eb42:	68bb      	ldr	r3, [r7, #8]
 800eb44:	689b      	ldr	r3, [r3, #8]
 800eb46:	68ba      	ldr	r2, [r7, #8]
 800eb48:	4413      	add	r3, r2
 800eb4a:	60fb      	str	r3, [r7, #12]
 800eb4c:	e00a      	b.n	800eb64 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800eb4e:	4b11      	ldr	r3, [pc, #68]	; (800eb94 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800eb50:	4a12      	ldr	r2, [pc, #72]	; (800eb9c <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800eb52:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800eb54:	4a12      	ldr	r2, [pc, #72]	; (800eba0 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800eb56:	4b10      	ldr	r3, [pc, #64]	; (800eb98 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800eb58:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800eb5a:	88fb      	ldrh	r3, [r7, #6]
 800eb5c:	4a11      	ldr	r2, [pc, #68]	; (800eba4 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800eb5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb62:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d00d      	beq.n	800eb86 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 800eb6a:	4a0f      	ldr	r2, [pc, #60]	; (800eba8 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 800eb6c:	88fb      	ldrh	r3, [r7, #6]
 800eb6e:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800eb70:	f000 f83e 	bl	800ebf0 <_ZN17TypedTextDatabase8getFontsEv>
 800eb74:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800eb76:	f000 f833 	bl	800ebe0 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	461a      	mov	r2, r3
 800eb7e:	4621      	mov	r1, r4
 800eb80:	68f8      	ldr	r0, [r7, #12]
 800eb82:	f7ff fea7 	bl	800e8d4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800eb86:	bf00      	nop
 800eb88:	3714      	adds	r7, #20
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	bd90      	pop	{r4, r7, pc}
 800eb8e:	bf00      	nop
 800eb90:	20001ab4 	.word	0x20001ab4
 800eb94:	20001abc 	.word	0x20001abc
 800eb98:	20001ac0 	.word	0x20001ac0
 800eb9c:	08038734 	.word	0x08038734
 800eba0:	08038710 	.word	0x08038710
 800eba4:	080387e0 	.word	0x080387e0
 800eba8:	20001ab8 	.word	0x20001ab8

0800ebac <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 800ebac:	b480      	push	{r7}
 800ebae:	b083      	sub	sp, #12
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
 800ebb4:	460b      	mov	r3, r1
 800ebb6:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 800ebb8:	4b07      	ldr	r3, [pc, #28]	; (800ebd8 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 800ebba:	681a      	ldr	r2, [r3, #0]
 800ebbc:	4b07      	ldr	r3, [pc, #28]	; (800ebdc <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 800ebbe:	6819      	ldr	r1, [r3, #0]
 800ebc0:	887b      	ldrh	r3, [r7, #2]
 800ebc2:	009b      	lsls	r3, r3, #2
 800ebc4:	440b      	add	r3, r1
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	005b      	lsls	r3, r3, #1
 800ebca:	4413      	add	r3, r2
}
 800ebcc:	4618      	mov	r0, r3
 800ebce:	370c      	adds	r7, #12
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd6:	4770      	bx	lr
 800ebd8:	20001abc 	.word	0x20001abc
 800ebdc:	20001ac0 	.word	0x20001ac0

0800ebe0 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 800ebe0:	b480      	push	{r7}
 800ebe2:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 800ebe4:	2309      	movs	r3, #9
}
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebee:	4770      	bx	lr

0800ebf0 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 800ebf0:	b480      	push	{r7}
 800ebf2:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 800ebf4:	4b02      	ldr	r3, [pc, #8]	; (800ec00 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfe:	4770      	bx	lr
 800ec00:	20001ac4 	.word	0x20001ac4

0800ec04 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b082      	sub	sp, #8
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
 800ec0c:	6039      	str	r1, [r7, #0]
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	2b01      	cmp	r3, #1
 800ec12:	d113      	bne.n	800ec3c <_Z41__static_initialization_and_destruction_0ii+0x38>
 800ec14:	683b      	ldr	r3, [r7, #0]
 800ec16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ec1a:	4293      	cmp	r3, r2
 800ec1c:	d10e      	bne.n	800ec3c <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 800ec1e:	f7ff fd9f 	bl	800e760 <_Z23getFont_verdana_20_4bppv>
 800ec22:	4602      	mov	r2, r0
};
 800ec24:	4b07      	ldr	r3, [pc, #28]	; (800ec44 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800ec26:	601a      	str	r2, [r3, #0]
    &(getFont_verdana_40_4bpp()),
 800ec28:	f7ff fdee 	bl	800e808 <_Z23getFont_verdana_40_4bppv>
 800ec2c:	4602      	mov	r2, r0
};
 800ec2e:	4b05      	ldr	r3, [pc, #20]	; (800ec44 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800ec30:	605a      	str	r2, [r3, #4]
    &(getFont_verdana_10_4bpp())
 800ec32:	f7ff fd41 	bl	800e6b8 <_Z23getFont_verdana_10_4bppv>
 800ec36:	4602      	mov	r2, r0
};
 800ec38:	4b02      	ldr	r3, [pc, #8]	; (800ec44 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800ec3a:	609a      	str	r2, [r3, #8]
}  // namespace TypedTextDatabase
 800ec3c:	bf00      	nop
 800ec3e:	3708      	adds	r7, #8
 800ec40:	46bd      	mov	sp, r7
 800ec42:	bd80      	pop	{r7, pc}
 800ec44:	20001ac4 	.word	0x20001ac4

0800ec48 <_GLOBAL__sub_I_touchgfx_fonts>:
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	af00      	add	r7, sp, #0
 800ec4c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ec50:	2001      	movs	r0, #1
 800ec52:	f7ff ffd7 	bl	800ec04 <_Z41__static_initialization_and_destruction_0ii>
 800ec56:	bd80      	pop	{r7, pc}

0800ec58 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 800ec58:	b480      	push	{r7}
 800ec5a:	b083      	sub	sp, #12
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
 800ec60:	6039      	str	r1, [r7, #0]
        color = col;
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	683a      	ldr	r2, [r7, #0]
 800ec66:	601a      	str	r2, [r3, #0]
    }
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	370c      	adds	r7, #12
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec74:	4770      	bx	lr

0800ec76 <_ZN8touchgfx4RectC1Essss>:
     * @param  x      The x coordinate.
     * @param  y      The y coordinate.
     * @param  width  The width.
     * @param  height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 800ec76:	b480      	push	{r7}
 800ec78:	b085      	sub	sp, #20
 800ec7a:	af00      	add	r7, sp, #0
 800ec7c:	60f8      	str	r0, [r7, #12]
 800ec7e:	4608      	mov	r0, r1
 800ec80:	4611      	mov	r1, r2
 800ec82:	461a      	mov	r2, r3
 800ec84:	4603      	mov	r3, r0
 800ec86:	817b      	strh	r3, [r7, #10]
 800ec88:	460b      	mov	r3, r1
 800ec8a:	813b      	strh	r3, [r7, #8]
 800ec8c:	4613      	mov	r3, r2
 800ec8e:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	897a      	ldrh	r2, [r7, #10]
 800ec94:	801a      	strh	r2, [r3, #0]
        this->y = y;
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	893a      	ldrh	r2, [r7, #8]
 800ec9a:	805a      	strh	r2, [r3, #2]
        this->width = width;
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	88fa      	ldrh	r2, [r7, #6]
 800eca0:	809a      	strh	r2, [r3, #4]
        this->height = height;
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	8b3a      	ldrh	r2, [r7, #24]
 800eca6:	80da      	strh	r2, [r3, #6]
    }
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	4618      	mov	r0, r3
 800ecac:	3714      	adds	r7, #20
 800ecae:	46bd      	mov	sp, r7
 800ecb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb4:	4770      	bx	lr

0800ecb6 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 800ecb6:	b480      	push	{r7}
 800ecb8:	b083      	sub	sp, #12
 800ecba:	af00      	add	r7, sp, #0
 800ecbc:	6078      	str	r0, [r7, #4]
 800ecbe:	460b      	mov	r3, r1
 800ecc0:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	887a      	ldrh	r2, [r7, #2]
 800ecc6:	801a      	strh	r2, [r3, #0]
    {
    }
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	4618      	mov	r0, r3
 800eccc:	370c      	adds	r7, #12
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd4:	4770      	bx	lr
	...

0800ecd8 <_ZN8touchgfx8DrawableC1Ev>:
    Drawable()
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b084      	sub	sp, #16
 800ecdc:	af02      	add	r7, sp, #8
 800ecde:	6078      	str	r0, [r7, #4]
          visible(true)
 800ece0:	4a13      	ldr	r2, [pc, #76]	; (800ed30 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	601a      	str	r2, [r3, #0]
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	1d18      	adds	r0, r3, #4
 800ecea:	2300      	movs	r3, #0
 800ecec:	9300      	str	r3, [sp, #0]
 800ecee:	2300      	movs	r3, #0
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	2100      	movs	r1, #0
 800ecf4:	f7ff ffbf 	bl	800ec76 <_ZN8touchgfx4RectC1Essss>
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	330c      	adds	r3, #12
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	f7fa fedf 	bl	8009ac0 <_ZN8touchgfx4RectC1Ev>
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	2200      	movs	r2, #0
 800ed06:	615a      	str	r2, [r3, #20]
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	619a      	str	r2, [r3, #24]
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	2200      	movs	r2, #0
 800ed12:	61da      	str	r2, [r3, #28]
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	2200      	movs	r2, #0
 800ed18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	2201      	movs	r2, #1
 800ed20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	4618      	mov	r0, r3
 800ed28:	3708      	adds	r7, #8
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}
 800ed2e:	bf00      	nop
 800ed30:	08033800 	.word	0x08033800

0800ed34 <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 800ed34:	b480      	push	{r7}
 800ed36:	b083      	sub	sp, #12
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
 800ed3c:	460b      	mov	r3, r1
 800ed3e:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	78fa      	ldrb	r2, [r7, #3]
 800ed44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 800ed48:	bf00      	nop
 800ed4a:	370c      	adds	r7, #12
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed52:	4770      	bx	lr

0800ed54 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b082      	sub	sp, #8
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
    {
 800ed5c:	4a06      	ldr	r2, [pc, #24]	; (800ed78 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	601a      	str	r2, [r3, #0]
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	3304      	adds	r3, #4
 800ed66:	4618      	mov	r0, r3
 800ed68:	f000 fff2 	bl	800fd50 <_ZN8touchgfx9ContainerD1Ev>
    }
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	4618      	mov	r0, r3
 800ed70:	3708      	adds	r7, #8
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bd80      	pop	{r7, pc}
 800ed76:	bf00      	nop
 800ed78:	080338d0 	.word	0x080338d0

0800ed7c <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b082      	sub	sp, #8
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
    }
 800ed84:	6878      	ldr	r0, [r7, #4]
 800ed86:	f7ff ffe5 	bl	800ed54 <_ZN8touchgfx6ScreenD1Ev>
 800ed8a:	213c      	movs	r1, #60	; 0x3c
 800ed8c:	6878      	ldr	r0, [r7, #4]
 800ed8e:	f01e f9d5 	bl	802d13c <_ZdlPvj>
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	4618      	mov	r0, r3
 800ed96:	3708      	adds	r7, #8
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bd80      	pop	{r7, pc}

0800ed9c <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800ed9c:	b480      	push	{r7}
 800ed9e:	b083      	sub	sp, #12
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
    {
    }
 800eda4:	bf00      	nop
 800eda6:	370c      	adds	r7, #12
 800eda8:	46bd      	mov	sp, r7
 800edaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edae:	4770      	bx	lr

0800edb0 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800edb0:	b480      	push	{r7}
 800edb2:	b083      	sub	sp, #12
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
    {
    }
 800edb8:	bf00      	nop
 800edba:	370c      	adds	r7, #12
 800edbc:	46bd      	mov	sp, r7
 800edbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc2:	4770      	bx	lr

0800edc4 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see touchgfx::Application::switchScreen
     */
    virtual void tearDownScreen()
 800edc4:	b480      	push	{r7}
 800edc6:	b083      	sub	sp, #12
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
    {
    }
 800edcc:	bf00      	nop
 800edce:	370c      	adds	r7, #12
 800edd0:	46bd      	mov	sp, r7
 800edd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd6:	4770      	bx	lr

0800edd8 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800edd8:	b480      	push	{r7}
 800edda:	b083      	sub	sp, #12
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
    {
    }
 800ede0:	bf00      	nop
 800ede2:	370c      	adds	r7, #12
 800ede4:	46bd      	mov	sp, r7
 800ede6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edea:	4770      	bx	lr

0800edec <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800edec:	b480      	push	{r7}
 800edee:	b083      	sub	sp, #12
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
 800edf4:	460b      	mov	r3, r1
 800edf6:	70fb      	strb	r3, [r7, #3]
    {
    }
 800edf8:	bf00      	nop
 800edfa:	370c      	adds	r7, #12
 800edfc:	46bd      	mov	sp, r7
 800edfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee02:	4770      	bx	lr

0800ee04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b082      	sub	sp, #8
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
 800ee0c:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	3304      	adds	r3, #4
 800ee12:	6839      	ldr	r1, [r7, #0]
 800ee14:	4618      	mov	r0, r3
 800ee16:	f00c f82d 	bl	801ae74 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800ee1a:	bf00      	nop
 800ee1c:	3708      	adds	r7, #8
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	bd80      	pop	{r7, pc}
	...

0800ee24 <_ZN8touchgfx6WidgetC1Ev>:
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b082      	sub	sp, #8
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	4618      	mov	r0, r3
 800ee30:	f7ff ff52 	bl	800ecd8 <_ZN8touchgfx8DrawableC1Ev>
 800ee34:	4a03      	ldr	r2, [pc, #12]	; (800ee44 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	601a      	str	r2, [r3, #0]
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	3708      	adds	r7, #8
 800ee40:	46bd      	mov	sp, r7
 800ee42:	bd80      	pop	{r7, pc}
 800ee44:	080311f8 	.word	0x080311f8

0800ee48 <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b082      	sub	sp, #8
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	4618      	mov	r0, r3
 800ee54:	2326      	movs	r3, #38	; 0x26
 800ee56:	461a      	mov	r2, r3
 800ee58:	2100      	movs	r1, #0
 800ee5a:	f01f fbad 	bl	802e5b8 <memset>
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	4618      	mov	r0, r3
 800ee62:	f7ff ffdf 	bl	800ee24 <_ZN8touchgfx6WidgetC1Ev>
 800ee66:	4a0a      	ldr	r2, [pc, #40]	; (800ee90 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	601a      	str	r2, [r3, #0]
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	2200      	movs	r2, #0
 800ee70:	629a      	str	r2, [r3, #40]	; 0x28
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	2200      	movs	r2, #0
 800ee76:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	2101      	movs	r1, #1
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f7ff ff58 	bl	800ed34 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	4618      	mov	r0, r3
 800ee88:	3708      	adds	r7, #8
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}
 800ee8e:	bf00      	nop
 800ee90:	08032fe4 	.word	0x08032fe4

0800ee94 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 800ee94:	b480      	push	{r7}
 800ee96:	b083      	sub	sp, #12
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
 800ee9c:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	683a      	ldr	r2, [r7, #0]
 800eea2:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800eea4:	bf00      	nop
 800eea6:	370c      	adds	r7, #12
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeae:	4770      	bx	lr

0800eeb0 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b082      	sub	sp, #8
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	6078      	str	r0, [r7, #4]
 800eeb8:	4a05      	ldr	r2, [pc, #20]	; (800eed0 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	601a      	str	r2, [r3, #0]
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	4618      	mov	r0, r3
 800eec2:	f7fd ff3b 	bl	800cd3c <_ZN8touchgfx6WidgetD1Ev>
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	4618      	mov	r0, r3
 800eeca:	3708      	adds	r7, #8
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd80      	pop	{r7, pc}
 800eed0:	08032fe4 	.word	0x08032fe4

0800eed4 <_ZN8touchgfx14AbstractButtonD0Ev>:
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b082      	sub	sp, #8
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
 800eedc:	6878      	ldr	r0, [r7, #4]
 800eede:	f7ff ffe7 	bl	800eeb0 <_ZN8touchgfx14AbstractButtonD1Ev>
 800eee2:	2130      	movs	r1, #48	; 0x30
 800eee4:	6878      	ldr	r0, [r7, #4]
 800eee6:	f01e f929 	bl	802d13c <_ZdlPvj>
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	4618      	mov	r0, r3
 800eeee:	3708      	adds	r7, #8
 800eef0:	46bd      	mov	sp, r7
 800eef2:	bd80      	pop	{r7, pc}

0800eef4 <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b082      	sub	sp, #8
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	4618      	mov	r0, r3
 800ef00:	f7ff ffa2 	bl	800ee48 <_ZN8touchgfx14AbstractButtonC1Ev>
 800ef04:	4a0c      	ldr	r2, [pc, #48]	; (800ef38 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	601a      	str	r2, [r3, #0]
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	332e      	adds	r3, #46	; 0x2e
 800ef0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ef12:	4618      	mov	r0, r3
 800ef14:	f7ff fecf 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	3330      	adds	r3, #48	; 0x30
 800ef1c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ef20:	4618      	mov	r0, r3
 800ef22:	f7ff fec8 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	22ff      	movs	r2, #255	; 0xff
 800ef2a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    {
    }
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	4618      	mov	r0, r3
 800ef32:	3708      	adds	r7, #8
 800ef34:	46bd      	mov	sp, r7
 800ef36:	bd80      	pop	{r7, pc}
 800ef38:	08033368 	.word	0x08033368

0800ef3c <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b082      	sub	sp, #8
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0), reportAsSolid(false)
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	4618      	mov	r0, r3
 800ef48:	2326      	movs	r3, #38	; 0x26
 800ef4a:	461a      	mov	r2, r3
 800ef4c:	2100      	movs	r1, #0
 800ef4e:	f01f fb33 	bl	802e5b8 <memset>
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	4618      	mov	r0, r3
 800ef56:	f7ff ff65 	bl	800ee24 <_ZN8touchgfx6WidgetC1Ev>
 800ef5a:	4a0b      	ldr	r2, [pc, #44]	; (800ef88 <_ZN8touchgfx3BoxC1Ev+0x4c>)
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	601a      	str	r2, [r3, #0]
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	22ff      	movs	r2, #255	; 0xff
 800ef64:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	3328      	adds	r3, #40	; 0x28
 800ef6c:	2100      	movs	r1, #0
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f7ff fe72 	bl	800ec58 <_ZN8touchgfx9colortypeC1Em>
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	2200      	movs	r2, #0
 800ef78:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	4618      	mov	r0, r3
 800ef80:	3708      	adds	r7, #8
 800ef82:	46bd      	mov	sp, r7
 800ef84:	bd80      	pop	{r7, pc}
 800ef86:	bf00      	nop
 800ef88:	0803329c 	.word	0x0803329c

0800ef8c <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 800ef8c:	b480      	push	{r7}
 800ef8e:	b083      	sub	sp, #12
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
 800ef94:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	683a      	ldr	r2, [r7, #0]
 800ef9a:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800ef9c:	bf00      	nop
 800ef9e:	370c      	adds	r7, #12
 800efa0:	46bd      	mov	sp, r7
 800efa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa6:	4770      	bx	lr

0800efa8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param  bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b082      	sub	sp, #8
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
 800efb0:	6039      	str	r1, [r7, #0]
        : Widget(), alpha(255)
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	4618      	mov	r0, r3
 800efb6:	2326      	movs	r3, #38	; 0x26
 800efb8:	461a      	mov	r2, r3
 800efba:	2100      	movs	r1, #0
 800efbc:	f01f fafc 	bl	802e5b8 <memset>
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	4618      	mov	r0, r3
 800efc4:	f7ff ff2e 	bl	800ee24 <_ZN8touchgfx6WidgetC1Ev>
 800efc8:	4a0b      	ldr	r2, [pc, #44]	; (800eff8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x50>)
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	601a      	str	r2, [r3, #0]
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	3326      	adds	r3, #38	; 0x26
 800efd2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800efd6:	4618      	mov	r0, r3
 800efd8:	f7ff fe6d 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	22ff      	movs	r2, #255	; 0xff
 800efe0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 800efe4:	6839      	ldr	r1, [r7, #0]
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	f00f f86a 	bl	801e0c0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	4618      	mov	r0, r3
 800eff0:	3708      	adds	r7, #8
 800eff2:	46bd      	mov	sp, r7
 800eff4:	bd80      	pop	{r7, pc}
 800eff6:	bf00      	nop
 800eff8:	08033560 	.word	0x08033560

0800effc <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>:
 */
class ToggleButton : public Button
{
public:

    virtual void setBitmaps(const Bitmap& bmpReleased, const Bitmap& bmpPressed)
 800effc:	b580      	push	{r7, lr}
 800effe:	b084      	sub	sp, #16
 800f000:	af00      	add	r7, sp, #0
 800f002:	60f8      	str	r0, [r7, #12]
 800f004:	60b9      	str	r1, [r7, #8]
 800f006:	607a      	str	r2, [r7, #4]
    {
        originalPressed = bmpPressed;
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	687a      	ldr	r2, [r7, #4]
 800f00c:	8812      	ldrh	r2, [r2, #0]
 800f00e:	869a      	strh	r2, [r3, #52]	; 0x34
        Button::setBitmaps(bmpReleased, bmpPressed);
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	687a      	ldr	r2, [r7, #4]
 800f014:	68b9      	ldr	r1, [r7, #8]
 800f016:	4618      	mov	r0, r3
 800f018:	f00e fdde 	bl	801dbd8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    }
 800f01c:	bf00      	nop
 800f01e:	3710      	adds	r7, #16
 800f020:	46bd      	mov	sp, r7
 800f022:	bd80      	pop	{r7, pc}

0800f024 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 800f024:	b480      	push	{r7}
 800f026:	b083      	sub	sp, #12
 800f028:	af00      	add	r7, sp, #0
 800f02a:	6078      	str	r0, [r7, #4]
 800f02c:	460b      	mov	r3, r1
 800f02e:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 800f030:	4a06      	ldr	r2, [pc, #24]	; (800f04c <_ZN8touchgfx9TypedTextC1Et+0x28>)
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	601a      	str	r2, [r3, #0]
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	887a      	ldrh	r2, [r7, #2]
 800f03a:	809a      	strh	r2, [r3, #4]
    }
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	4618      	mov	r0, r3
 800f040:	370c      	adds	r7, #12
 800f042:	46bd      	mov	sp, r7
 800f044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f048:	4770      	bx	lr
 800f04a:	bf00      	nop
 800f04c:	08031148 	.word	0x08031148

0800f050 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 800f050:	b580      	push	{r7, lr}
 800f052:	b082      	sub	sp, #8
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	4618      	mov	r0, r3
 800f05c:	2326      	movs	r3, #38	; 0x26
 800f05e:	461a      	mov	r2, r3
 800f060:	2100      	movs	r1, #0
 800f062:	f01f faa9 	bl	802e5b8 <memset>
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	4618      	mov	r0, r3
 800f06a:	f7ff fedb 	bl	800ee24 <_ZN8touchgfx6WidgetC1Ev>
 800f06e:	4a14      	ldr	r2, [pc, #80]	; (800f0c0 <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	601a      	str	r2, [r3, #0]
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	3328      	adds	r3, #40	; 0x28
 800f078:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f07c:	4618      	mov	r0, r3
 800f07e:	f7ff ffd1 	bl	800f024 <_ZN8touchgfx9TypedTextC1Et>
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	3330      	adds	r3, #48	; 0x30
 800f086:	2100      	movs	r1, #0
 800f088:	4618      	mov	r0, r3
 800f08a:	f7ff fde5 	bl	800ec58 <_ZN8touchgfx9colortypeC1Em>
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	2200      	movs	r2, #0
 800f092:	869a      	strh	r2, [r3, #52]	; 0x34
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	22ff      	movs	r2, #255	; 0xff
 800f098:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	2200      	movs	r2, #0
 800f0a0:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	3708      	adds	r7, #8
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	bd80      	pop	{r7, pc}
 800f0be:	bf00      	nop
 800f0c0:	080331f0 	.word	0x080331f0

0800f0c4 <_ZN8touchgfx6Slider19setNewValueCallbackERNS_15GenericCallbackIRKS0_ivEE>:
     * @param  callback The callback to be executed. The callback will be given a reference
     *                  to the Slider and the current value of the slider.
     *
     * @see GenericCallback
     */
    void setNewValueCallback(GenericCallback<const Slider&, int>& callback)
 800f0c4:	b480      	push	{r7}
 800f0c6:	b083      	sub	sp, #12
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
 800f0cc:	6039      	str	r1, [r7, #0]
    {
        newValueCallback = &callback;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	683a      	ldr	r2, [r7, #0]
 800f0d2:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    }
 800f0d6:	bf00      	nop
 800f0d8:	370c      	adds	r7, #12
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e0:	4770      	bx	lr

0800f0e2 <_ZN8touchgfx14ButtonWithIcon8setIconXEs>:
     *           allowed.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The value set is overwritten on a subsequent call to setBitmaps.
     */
    void setIconX(int16_t x)
 800f0e2:	b480      	push	{r7}
 800f0e4:	b083      	sub	sp, #12
 800f0e6:	af00      	add	r7, sp, #0
 800f0e8:	6078      	str	r0, [r7, #4]
 800f0ea:	460b      	mov	r3, r1
 800f0ec:	807b      	strh	r3, [r7, #2]
    {
        iconX = x;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	887a      	ldrh	r2, [r7, #2]
 800f0f2:	871a      	strh	r2, [r3, #56]	; 0x38
    }
 800f0f4:	bf00      	nop
 800f0f6:	370c      	adds	r7, #12
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fe:	4770      	bx	lr

0800f100 <_ZN8touchgfx14ButtonWithIcon8setIconYEs>:
     *           allowed.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The value set is overwritten on a subsequent call to setBitmaps.
     */
    void setIconY(int16_t y)
 800f100:	b480      	push	{r7}
 800f102:	b083      	sub	sp, #12
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
 800f108:	460b      	mov	r3, r1
 800f10a:	807b      	strh	r3, [r7, #2]
    {
        iconY = y;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	887a      	ldrh	r2, [r7, #2]
 800f110:	875a      	strh	r2, [r3, #58]	; 0x3a
    }
 800f112:	bf00      	nop
 800f114:	370c      	adds	r7, #12
 800f116:	46bd      	mov	sp, r7
 800f118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f11c:	4770      	bx	lr

0800f11e <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>:
     *           allowed.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The values set are overwritten on a subsequent call to setBitmaps.
     */
    void setIconXY(int16_t x, int16_t y)
 800f11e:	b580      	push	{r7, lr}
 800f120:	b082      	sub	sp, #8
 800f122:	af00      	add	r7, sp, #0
 800f124:	6078      	str	r0, [r7, #4]
 800f126:	460b      	mov	r3, r1
 800f128:	807b      	strh	r3, [r7, #2]
 800f12a:	4613      	mov	r3, r2
 800f12c:	803b      	strh	r3, [r7, #0]
    {
        setIconX(x);
 800f12e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f132:	4619      	mov	r1, r3
 800f134:	6878      	ldr	r0, [r7, #4]
 800f136:	f7ff ffd4 	bl	800f0e2 <_ZN8touchgfx14ButtonWithIcon8setIconXEs>
        setIconY(y);
 800f13a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800f13e:	4619      	mov	r1, r3
 800f140:	6878      	ldr	r0, [r7, #4]
 800f142:	f7ff ffdd 	bl	800f100 <_ZN8touchgfx14ButtonWithIcon8setIconYEs>
    }
 800f146:	bf00      	nop
 800f148:	3708      	adds	r7, #8
 800f14a:	46bd      	mov	sp, r7
 800f14c:	bd80      	pop	{r7, pc}
	...

0800f150 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev>:
class View : public Screen
 800f150:	b580      	push	{r7, lr}
 800f152:	b082      	sub	sp, #8
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
 800f158:	4a05      	ldr	r2, [pc, #20]	; (800f170 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x20>)
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	601a      	str	r2, [r3, #0]
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	4618      	mov	r0, r3
 800f162:	f7ff fdf7 	bl	800ed54 <_ZN8touchgfx6ScreenD1Ev>
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	4618      	mov	r0, r3
 800f16a:	3708      	adds	r7, #8
 800f16c:	46bd      	mov	sp, r7
 800f16e:	bd80      	pop	{r7, pc}
 800f170:	08031964 	.word	0x08031964

0800f174 <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev>:
 800f174:	b580      	push	{r7, lr}
 800f176:	b082      	sub	sp, #8
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
 800f17c:	6878      	ldr	r0, [r7, #4]
 800f17e:	f7ff ffe7 	bl	800f150 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev>
 800f182:	2140      	movs	r1, #64	; 0x40
 800f184:	6878      	ldr	r0, [r7, #4]
 800f186:	f01d ffd9 	bl	802d13c <_ZdlPvj>
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	4618      	mov	r0, r3
 800f18e:	3708      	adds	r7, #8
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}

0800f194 <_ZN18mainScreenViewBaseD1Ev>:

class mainScreenViewBase : public touchgfx::View<mainScreenPresenter>
{
public:
    mainScreenViewBase();
    virtual ~mainScreenViewBase() {}
 800f194:	b580      	push	{r7, lr}
 800f196:	b082      	sub	sp, #8
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
 800f19c:	4a2d      	ldr	r2, [pc, #180]	; (800f254 <_ZN18mainScreenViewBaseD1Ev+0xc0>)
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	601a      	str	r2, [r3, #0]
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	f000 fd8d 	bl	800fcc8 <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_6SliderEivED1Ev>
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	f000 fda9 	bl	800fd0c <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	f203 43f4 	addw	r3, r3, #1268	; 0x4f4
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	f000 feab 	bl	800ff1c <_ZN8touchgfx14ButtonWithIconD1Ev>
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	f000 fe47 	bl	800fe60 <_ZN8touchgfx8TextAreaD1Ev>
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 800f1d8:	4618      	mov	r0, r3
 800f1da:	f000 fe41 	bl	800fe60 <_ZN8touchgfx8TextAreaD1Ev>
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	f000 fe3b 	bl	800fe60 <_ZN8touchgfx8TextAreaD1Ev>
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	f503 7351 	add.w	r3, r3, #836	; 0x344
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	f000 fe5d 	bl	800feb0 <_ZN8touchgfx6SliderD1Ev>
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	f000 fe57 	bl	800feb0 <_ZN8touchgfx6SliderD1Ev>
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800f208:	4618      	mov	r0, r3
 800f20a:	f000 fe51 	bl	800feb0 <_ZN8touchgfx6SliderD1Ev>
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800f214:	4618      	mov	r0, r3
 800f216:	f000 fe23 	bl	800fe60 <_ZN8touchgfx8TextAreaD1Ev>
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	33d4      	adds	r3, #212	; 0xd4
 800f21e:	4618      	mov	r0, r3
 800f220:	f000 fe1e 	bl	800fe60 <_ZN8touchgfx8TextAreaD1Ev>
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	339c      	adds	r3, #156	; 0x9c
 800f228:	4618      	mov	r0, r3
 800f22a:	f000 fdf7 	bl	800fe1c <_ZN8touchgfx12ToggleButtonD1Ev>
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	3370      	adds	r3, #112	; 0x70
 800f232:	4618      	mov	r0, r3
 800f234:	f000 fdd0 	bl	800fdd8 <_ZN8touchgfx5ImageD1Ev>
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	3340      	adds	r3, #64	; 0x40
 800f23c:	4618      	mov	r0, r3
 800f23e:	f000 fda9 	bl	800fd94 <_ZN8touchgfx3BoxD1Ev>
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	4618      	mov	r0, r3
 800f246:	f7ff ff83 	bl	800f150 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev>
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	4618      	mov	r0, r3
 800f24e:	3708      	adds	r7, #8
 800f250:	46bd      	mov	sp, r7
 800f252:	bd80      	pop	{r7, pc}
 800f254:	080318f0 	.word	0x080318f0

0800f258 <_ZN18mainScreenViewBaseD0Ev>:
 800f258:	b580      	push	{r7, lr}
 800f25a:	b082      	sub	sp, #8
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
 800f260:	6878      	ldr	r0, [r7, #4]
 800f262:	f7ff ff97 	bl	800f194 <_ZN18mainScreenViewBaseD1Ev>
 800f266:	f44f 61aa 	mov.w	r1, #1360	; 0x550
 800f26a:	6878      	ldr	r0, [r7, #4]
 800f26c:	f01d ff66 	bl	802d13c <_ZdlPvj>
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	4618      	mov	r0, r3
 800f274:	3708      	adds	r7, #8
 800f276:	46bd      	mov	sp, r7
 800f278:	bd80      	pop	{r7, pc}

0800f27a <_ZN18mainScreenViewBase24XAxisSliderValue_ChangedEi>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void XAxisSliderValue_Changed(int value)
 800f27a:	b480      	push	{r7}
 800f27c:	b083      	sub	sp, #12
 800f27e:	af00      	add	r7, sp, #0
 800f280:	6078      	str	r0, [r7, #4]
 800f282:	6039      	str	r1, [r7, #0]
    {
        // Override and implement this function in mainScreen
    }
 800f284:	bf00      	nop
 800f286:	370c      	adds	r7, #12
 800f288:	46bd      	mov	sp, r7
 800f28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28e:	4770      	bx	lr

0800f290 <_ZN18mainScreenViewBase27YAxisSlider_L_Value_ChangedEi>:

    virtual void YAxisSlider_L_Value_Changed(int value)
 800f290:	b480      	push	{r7}
 800f292:	b083      	sub	sp, #12
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]
 800f298:	6039      	str	r1, [r7, #0]
    {
        // Override and implement this function in mainScreen
    }
 800f29a:	bf00      	nop
 800f29c:	370c      	adds	r7, #12
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a4:	4770      	bx	lr

0800f2a6 <_ZN18mainScreenViewBase38ManipulatorControlToggleButton_ClickedEv>:

    virtual void ManipulatorControlToggleButton_Clicked()
 800f2a6:	b480      	push	{r7}
 800f2a8:	b083      	sub	sp, #12
 800f2aa:	af00      	add	r7, sp, #0
 800f2ac:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in mainScreen
    }
 800f2ae:	bf00      	nop
 800f2b0:	370c      	adds	r7, #12
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b8:	4770      	bx	lr

0800f2ba <_ZN18mainScreenViewBase27YAxisSlider_R_Value_ChangedEi>:

    virtual void YAxisSlider_R_Value_Changed(int value)
 800f2ba:	b480      	push	{r7}
 800f2bc:	b083      	sub	sp, #12
 800f2be:	af00      	add	r7, sp, #0
 800f2c0:	6078      	str	r0, [r7, #4]
 800f2c2:	6039      	str	r1, [r7, #0]
    {
        // Override and implement this function in mainScreen
    }
 800f2c4:	bf00      	nop
 800f2c6:	370c      	adds	r7, #12
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ce:	4770      	bx	lr

0800f2d0 <_ZN18mainScreenViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b082      	sub	sp, #8
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800f2d8:	f00f fef6 	bl	801f0c8 <_ZN8touchgfx11Application11getInstanceEv>
 800f2dc:	4603      	mov	r3, r0
    }
 800f2de:	4618      	mov	r0, r3
 800f2e0:	3708      	adds	r7, #8
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	bd80      	pop	{r7, pc}
	...

0800f2e8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     *
     * @note This function is not available to call before the LCD has been setup, because the
     *       color depth is required. Consider using the function getColorFromRGB for a
     *       specific class, e.g. LCD16::getColorFromRGB().
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 800f2e8:	b590      	push	{r4, r7, lr}
 800f2ea:	b083      	sub	sp, #12
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	71fb      	strb	r3, [r7, #7]
 800f2f2:	460b      	mov	r3, r1
 800f2f4:	71bb      	strb	r3, [r7, #6]
 800f2f6:	4613      	mov	r3, r2
 800f2f8:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 800f2fa:	f7fa f859 	bl	80093b0 <_ZN8touchgfx3HAL11getInstanceEv>
 800f2fe:	4603      	mov	r3, r0
 800f300:	2b00      	cmp	r3, #0
 800f302:	d105      	bne.n	800f310 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 800f304:	4b0a      	ldr	r3, [pc, #40]	; (800f330 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 800f306:	4a0b      	ldr	r2, [pc, #44]	; (800f334 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 800f308:	2135      	movs	r1, #53	; 0x35
 800f30a:	480b      	ldr	r0, [pc, #44]	; (800f338 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 800f30c:	f01e ffe4 	bl	802e2d8 <__assert_func>
 800f310:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 800f312:	f7f9 fc25 	bl	8008b60 <_ZN8touchgfx3HAL3lcdEv>
 800f316:	6803      	ldr	r3, [r0, #0]
 800f318:	3328      	adds	r3, #40	; 0x28
 800f31a:	681c      	ldr	r4, [r3, #0]
 800f31c:	797b      	ldrb	r3, [r7, #5]
 800f31e:	79ba      	ldrb	r2, [r7, #6]
 800f320:	79f9      	ldrb	r1, [r7, #7]
 800f322:	47a0      	blx	r4
 800f324:	4603      	mov	r3, r0
    }
 800f326:	4618      	mov	r0, r3
 800f328:	370c      	adds	r7, #12
 800f32a:	46bd      	mov	sp, r7
 800f32c:	bd90      	pop	{r4, r7, pc}
 800f32e:	bf00      	nop
 800f330:	0802fd6c 	.word	0x0802fd6c
 800f334:	080319c0 	.word	0x080319c0
 800f338:	0802fdb0 	.word	0x0802fdb0

0800f33c <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b082      	sub	sp, #8
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
 800f344:	4a05      	ldr	r2, [pc, #20]	; (800f35c <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	601a      	str	r2, [r3, #0]
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	4618      	mov	r0, r3
 800f34e:	f7ff fdaf 	bl	800eeb0 <_ZN8touchgfx14AbstractButtonD1Ev>
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	4618      	mov	r0, r3
 800f356:	3708      	adds	r7, #8
 800f358:	46bd      	mov	sp, r7
 800f35a:	bd80      	pop	{r7, pc}
 800f35c:	08033368 	.word	0x08033368

0800f360 <_ZN8touchgfx6ButtonD0Ev>:
 800f360:	b580      	push	{r7, lr}
 800f362:	b082      	sub	sp, #8
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
 800f368:	6878      	ldr	r0, [r7, #4]
 800f36a:	f7ff ffe7 	bl	800f33c <_ZN8touchgfx6ButtonD1Ev>
 800f36e:	2134      	movs	r1, #52	; 0x34
 800f370:	6878      	ldr	r0, [r7, #4]
 800f372:	f01d fee3 	bl	802d13c <_ZdlPvj>
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	4618      	mov	r0, r3
 800f37a:	3708      	adds	r7, #8
 800f37c:	46bd      	mov	sp, r7
 800f37e:	bd80      	pop	{r7, pc}

0800f380 <_ZN8touchgfx12ToggleButtonC1Ev>:
class ToggleButton : public Button
 800f380:	b580      	push	{r7, lr}
 800f382:	b082      	sub	sp, #8
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	4618      	mov	r0, r3
 800f38c:	f7ff fdb2 	bl	800eef4 <_ZN8touchgfx6ButtonC1Ev>
 800f390:	4a07      	ldr	r2, [pc, #28]	; (800f3b0 <_ZN8touchgfx12ToggleButtonC1Ev+0x30>)
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	601a      	str	r2, [r3, #0]
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	3334      	adds	r3, #52	; 0x34
 800f39a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f39e:	4618      	mov	r0, r3
 800f3a0:	f7ff fc89 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	3708      	adds	r7, #8
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	bd80      	pop	{r7, pc}
 800f3ae:	bf00      	nop
 800f3b0:	08033050 	.word	0x08033050

0800f3b4 <_ZN18mainScreenViewBaseC1Ev>:
#include <gui_generated/mainscreen_screen/mainScreenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

mainScreenViewBase::mainScreenViewBase() :
 800f3b4:	b590      	push	{r4, r7, lr}
 800f3b6:	b0b9      	sub	sp, #228	; 0xe4
 800f3b8:	af02      	add	r7, sp, #8
 800f3ba:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &mainScreenViewBase::buttonCallbackHandler),
    sliderValueChangedCallback(this, &mainScreenViewBase::sliderValueChangedCallbackHandler)
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	4618      	mov	r0, r3
 800f3c0:	f000 fbcc 	bl	800fb5c <_ZN8touchgfx4ViewI19mainScreenPresenterEC1Ev>
 800f3c4:	4adc      	ldr	r2, [pc, #880]	; (800f738 <_ZN18mainScreenViewBaseC1Ev+0x384>)
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	601a      	str	r2, [r3, #0]
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	3340      	adds	r3, #64	; 0x40
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	f7ff fdb4 	bl	800ef3c <_ZN8touchgfx3BoxC1Ev>
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800f3da:	f107 0320 	add.w	r3, r7, #32
 800f3de:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	f7ff fc67 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 800f3e8:	f107 0320 	add.w	r3, r7, #32
 800f3ec:	4619      	mov	r1, r3
 800f3ee:	4620      	mov	r0, r4
 800f3f0:	f7ff fdda 	bl	800efa8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	339c      	adds	r3, #156	; 0x9c
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	f7ff ffc1 	bl	800f380 <_ZN8touchgfx12ToggleButtonC1Ev>
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	33d4      	adds	r3, #212	; 0xd4
 800f402:	4618      	mov	r0, r3
 800f404:	f7ff fe24 	bl	800f050 <_ZN8touchgfx8TextAreaC1Ev>
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800f40e:	4618      	mov	r0, r3
 800f410:	f7ff fe1e 	bl	800f050 <_ZN8touchgfx8TextAreaC1Ev>
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800f41a:	4618      	mov	r0, r3
 800f41c:	f00c f8a4 	bl	801b568 <_ZN8touchgfx6SliderC1Ev>
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800f426:	4618      	mov	r0, r3
 800f428:	f00c f89e 	bl	801b568 <_ZN8touchgfx6SliderC1Ev>
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	f503 7351 	add.w	r3, r3, #836	; 0x344
 800f432:	4618      	mov	r0, r3
 800f434:	f00c f898 	bl	801b568 <_ZN8touchgfx6SliderC1Ev>
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800f43e:	4618      	mov	r0, r3
 800f440:	f7ff fe06 	bl	800f050 <_ZN8touchgfx8TextAreaC1Ev>
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 800f44a:	4618      	mov	r0, r3
 800f44c:	f7ff fe00 	bl	800f050 <_ZN8touchgfx8TextAreaC1Ev>
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 800f456:	4618      	mov	r0, r3
 800f458:	f7ff fdfa 	bl	800f050 <_ZN8touchgfx8TextAreaC1Ev>
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	f203 43f4 	addw	r3, r3, #1268	; 0x4f4
 800f462:	4618      	mov	r0, r3
 800f464:	f00e fe08 	bl	801e078 <_ZN8touchgfx14ButtonWithIconC1Ev>
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	f503 60a6 	add.w	r0, r3, #1328	; 0x530
 800f46e:	4bb3      	ldr	r3, [pc, #716]	; (800f73c <_ZN18mainScreenViewBaseC1Ev+0x388>)
 800f470:	627b      	str	r3, [r7, #36]	; 0x24
 800f472:	2300      	movs	r3, #0
 800f474:	62bb      	str	r3, [r7, #40]	; 0x28
 800f476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f47a:	cb0c      	ldmia	r3, {r2, r3}
 800f47c:	6879      	ldr	r1, [r7, #4]
 800f47e:	f000 fb93 	bl	800fba8 <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	f503 60a8 	add.w	r0, r3, #1344	; 0x540
 800f488:	4bad      	ldr	r3, [pc, #692]	; (800f740 <_ZN18mainScreenViewBaseC1Ev+0x38c>)
 800f48a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f48c:	2300      	movs	r3, #0
 800f48e:	633b      	str	r3, [r7, #48]	; 0x30
 800f490:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f494:	cb0c      	ldmia	r3, {r2, r3}
 800f496:	6879      	ldr	r1, [r7, #4]
 800f498:	f000 fbb6 	bl	800fc08 <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE>
{

    __background.setPosition(0, 0, 240, 320);
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800f4a2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800f4a6:	9300      	str	r3, [sp, #0]
 800f4a8:	23f0      	movs	r3, #240	; 0xf0
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	2100      	movs	r1, #0
 800f4ae:	f7fd fa29 	bl	800c904 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	2100      	movs	r1, #0
 800f4bc:	2000      	movs	r0, #0
 800f4be:	f7ff ff13 	bl	800f2e8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	4619      	mov	r1, r3
 800f4c6:	4620      	mov	r0, r4
 800f4c8:	f7ff fd60 	bl	800ef8c <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    backgroundImage.setXY(0, 0);
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	3370      	adds	r3, #112	; 0x70
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	2100      	movs	r1, #0
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	f7fd fa7a 	bl	800c9ce <_ZN8touchgfx8Drawable5setXYEss>
    backgroundImage.setBitmap(touchgfx::Bitmap(BITMAP_BLUE_BACKGROUNDS_MAIN_BG_PORTRAIT_240X320PX_ID));
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800f4e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f4e4:	2100      	movs	r1, #0
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	f7ff fbe5 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 800f4ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f4f0:	4619      	mov	r1, r3
 800f4f2:	4620      	mov	r0, r4
 800f4f4:	f00e fde4 	bl	801e0c0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    manipulatorControlToggleButton.setXY(72, 193);
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	339c      	adds	r3, #156	; 0x9c
 800f4fc:	22c1      	movs	r2, #193	; 0xc1
 800f4fe:	2148      	movs	r1, #72	; 0x48
 800f500:	4618      	mov	r0, r3
 800f502:	f7fd fa64 	bl	800c9ce <_ZN8touchgfx8Drawable5setXYEss>
    manipulatorControlToggleButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_ROUND_SMALL_BUTTON_OFF_ID), touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_ROUND_SMALL_BUTTON_ON_ID));
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 800f50c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f510:	210c      	movs	r1, #12
 800f512:	4618      	mov	r0, r3
 800f514:	f7ff fbcf 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 800f518:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f51c:	210d      	movs	r1, #13
 800f51e:	4618      	mov	r0, r3
 800f520:	f7ff fbc9 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 800f524:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800f528:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f52c:	4619      	mov	r1, r3
 800f52e:	4620      	mov	r0, r4
 800f530:	f7ff fd64 	bl	800effc <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>
    manipulatorControlToggleButton.setAction(buttonCallback);
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 800f540:	4619      	mov	r1, r3
 800f542:	4610      	mov	r0, r2
 800f544:	f7ff fca6 	bl	800ee94 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    titleText.setXY(23, 15);
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	33d4      	adds	r3, #212	; 0xd4
 800f54c:	220f      	movs	r2, #15
 800f54e:	2117      	movs	r1, #23
 800f550:	4618      	mov	r0, r3
 800f552:	f7fd fa3c 	bl	800c9ce <_ZN8touchgfx8Drawable5setXYEss>
    titleText.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 800f55c:	2200      	movs	r2, #0
 800f55e:	2100      	movs	r1, #0
 800f560:	2000      	movs	r0, #0
 800f562:	f7ff fec1 	bl	800f2e8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800f566:	4603      	mov	r3, r0
 800f568:	f8c7 409c 	str.w	r4, [r7, #156]	; 0x9c
 800f56c:	61fb      	str	r3, [r7, #28]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 800f56e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f572:	69fa      	ldr	r2, [r7, #28]
 800f574:	631a      	str	r2, [r3, #48]	; 0x30
    titleText.setLinespacing(0);
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	33d4      	adds	r3, #212	; 0xd4
 800f57a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f57e:	2300      	movs	r3, #0
 800f580:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 800f584:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f588:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 800f58c:	869a      	strh	r2, [r3, #52]	; 0x34
    titleText.setTypedText(touchgfx::TypedText(T_SINGLEUSEID1));
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 800f594:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f598:	2100      	movs	r1, #0
 800f59a:	4618      	mov	r0, r3
 800f59c:	f7ff fd42 	bl	800f024 <_ZN8touchgfx9TypedTextC1Et>
 800f5a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f5a4:	4619      	mov	r1, r3
 800f5a6:	4620      	mov	r0, r4
 800f5a8:	f00e fadc 	bl	801db64 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 800f5ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	f7fd f95b 	bl	800c86c <_ZN8touchgfx9TypedTextD1Ev>

    manipulatorText.setXY(61, 128);
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800f5bc:	2280      	movs	r2, #128	; 0x80
 800f5be:	213d      	movs	r1, #61	; 0x3d
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	f7fd fa04 	bl	800c9ce <_ZN8touchgfx8Drawable5setXYEss>
    manipulatorText.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	f503 7488 	add.w	r4, r3, #272	; 0x110
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	2100      	movs	r1, #0
 800f5d0:	2000      	movs	r0, #0
 800f5d2:	f7ff fe89 	bl	800f2e8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800f5dc:	61bb      	str	r3, [r7, #24]
        this->color = color;
 800f5de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f5e2:	69ba      	ldr	r2, [r7, #24]
 800f5e4:	631a      	str	r2, [r3, #48]	; 0x30
    manipulatorText.setLinespacing(0);
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800f5ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
        linespace = space;
 800f5f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f5fa:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 800f5fe:	869a      	strh	r2, [r3, #52]	; 0x34
    manipulatorText.setTypedText(touchgfx::TypedText(T_SINGLEUSEID2));
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	f503 7488 	add.w	r4, r3, #272	; 0x110
 800f606:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f60a:	2101      	movs	r1, #1
 800f60c:	4618      	mov	r0, r3
 800f60e:	f7ff fd09 	bl	800f024 <_ZN8touchgfx9TypedTextC1Et>
 800f612:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f616:	4619      	mov	r1, r3
 800f618:	4620      	mov	r0, r4
 800f61a:	f00e faa3 	bl	801db64 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 800f61e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f622:	4618      	mov	r0, r3
 800f624:	f7fd f922 	bl	800c86c <_ZN8touchgfx9TypedTextD1Ev>

    yAxisSlider_L.setXY(23, 52);
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800f62e:	2234      	movs	r2, #52	; 0x34
 800f630:	2117      	movs	r1, #23
 800f632:	4618      	mov	r0, r3
 800f634:	f7fd f9cb 	bl	800c9ce <_ZN8touchgfx8Drawable5setXYEss>
    yAxisSlider_L.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_SLIDER_VERTICAL_SMALL_SLIDER3_VERTICAL_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_VERTICAL_SMALL_SLIDER3_VERTICAL_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_VERTICAL_SMALL_INDICATORS_SLIDER3_VERTICAL_ROUND_NOB_ID));
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 800f63e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f642:	210b      	movs	r1, #11
 800f644:	4618      	mov	r0, r3
 800f646:	f7ff fb36 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 800f64a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f64e:	210b      	movs	r1, #11
 800f650:	4618      	mov	r0, r3
 800f652:	f7ff fb30 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 800f656:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f65a:	210a      	movs	r1, #10
 800f65c:	4618      	mov	r0, r3
 800f65e:	f7ff fb2a 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 800f662:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f666:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800f66a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800f66e:	4620      	mov	r0, r4
 800f670:	f00b ffce 	bl	801b610 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>
    yAxisSlider_L.setupVerticalSlider(7, 3, 0, 0, 125);
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	f503 70a6 	add.w	r0, r3, #332	; 0x14c
 800f67a:	237d      	movs	r3, #125	; 0x7d
 800f67c:	9301      	str	r3, [sp, #4]
 800f67e:	2300      	movs	r3, #0
 800f680:	9300      	str	r3, [sp, #0]
 800f682:	2300      	movs	r3, #0
 800f684:	2203      	movs	r2, #3
 800f686:	2107      	movs	r1, #7
 800f688:	f00b fea0 	bl	801b3cc <_ZN8touchgfx6Slider19setupVerticalSliderEttttt>
    yAxisSlider_L.setValueRange(0, 100);
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800f692:	2264      	movs	r2, #100	; 0x64
 800f694:	2100      	movs	r1, #0
 800f696:	4618      	mov	r0, r3
 800f698:	f00b fd9f 	bl	801b1da <_ZN8touchgfx6Slider13setValueRangeEii>
    yAxisSlider_L.setValue(0);
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800f6a2:	2100      	movs	r1, #0
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	f00b fd24 	bl	801b0f2 <_ZN8touchgfx6Slider8setValueEi>
    yAxisSlider_L.setNewValueCallback(sliderValueChangedCallback);
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	f503 72a6 	add.w	r2, r3, #332	; 0x14c
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
 800f6b6:	4619      	mov	r1, r3
 800f6b8:	4610      	mov	r0, r2
 800f6ba:	f7ff fd03 	bl	800f0c4 <_ZN8touchgfx6Slider19setNewValueCallbackERNS_15GenericCallbackIRKS0_ivEE>

    xAxisSlider.setXY(31, 261);
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800f6c4:	f240 1205 	movw	r2, #261	; 0x105
 800f6c8:	211f      	movs	r1, #31
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	f7fd f97f 	bl	800c9ce <_ZN8touchgfx8Drawable5setXYEss>
    xAxisSlider.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_SLIDER_HORIZONTAL_SMALL_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_SLIDER_HORIZONTAL_SMALL_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_INDICATORS_SLIDER_HORIZONTAL_SMALL_ROUND_KNOB_ID));
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	f503 7412 	add.w	r4, r3, #584	; 0x248
 800f6d6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800f6da:	2109      	movs	r1, #9
 800f6dc:	4618      	mov	r0, r3
 800f6de:	f7ff faea 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 800f6e2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f6e6:	2109      	movs	r1, #9
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	f7ff fae4 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 800f6ee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800f6f2:	2108      	movs	r1, #8
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f7ff fade 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 800f6fa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800f6fe:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800f702:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800f706:	4620      	mov	r0, r4
 800f708:	f00b ff82 	bl	801b610 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>
    xAxisSlider.setupHorizontalSlider(3, 7, 0, 0, 125);
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	f503 7012 	add.w	r0, r3, #584	; 0x248
 800f712:	237d      	movs	r3, #125	; 0x7d
 800f714:	9301      	str	r3, [sp, #4]
 800f716:	2300      	movs	r3, #0
 800f718:	9300      	str	r3, [sp, #0]
 800f71a:	2300      	movs	r3, #0
 800f71c:	2207      	movs	r2, #7
 800f71e:	2103      	movs	r1, #3
 800f720:	f00b fdf0 	bl	801b304 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>
    xAxisSlider.setValueRange(0, 100);
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800f72a:	2264      	movs	r2, #100	; 0x64
 800f72c:	2100      	movs	r1, #0
 800f72e:	4618      	mov	r0, r3
 800f730:	f00b fd53 	bl	801b1da <_ZN8touchgfx6Slider13setValueRangeEii>
 800f734:	e006      	b.n	800f744 <_ZN18mainScreenViewBaseC1Ev+0x390>
 800f736:	bf00      	nop
 800f738:	080318f0 	.word	0x080318f0
 800f73c:	0800fab1 	.word	0x0800fab1
 800f740:	0800faf5 	.word	0x0800faf5
    xAxisSlider.setValue(50);
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800f74a:	2132      	movs	r1, #50	; 0x32
 800f74c:	4618      	mov	r0, r3
 800f74e:	f00b fcd0 	bl	801b0f2 <_ZN8touchgfx6Slider8setValueEi>
    xAxisSlider.setNewValueCallback(sliderValueChangedCallback);
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	f503 7212 	add.w	r2, r3, #584	; 0x248
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
 800f75e:	4619      	mov	r1, r3
 800f760:	4610      	mov	r0, r2
 800f762:	f7ff fcaf 	bl	800f0c4 <_ZN8touchgfx6Slider19setNewValueCallbackERNS_15GenericCallbackIRKS0_ivEE>

    yAxisSlider_R.setXY(183, 52);
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	f503 7351 	add.w	r3, r3, #836	; 0x344
 800f76c:	2234      	movs	r2, #52	; 0x34
 800f76e:	21b7      	movs	r1, #183	; 0xb7
 800f770:	4618      	mov	r0, r3
 800f772:	f7fd f92c 	bl	800c9ce <_ZN8touchgfx8Drawable5setXYEss>
    yAxisSlider_R.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_SLIDER_VERTICAL_SMALL_SLIDER3_VERTICAL_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_VERTICAL_SMALL_SLIDER3_VERTICAL_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_VERTICAL_SMALL_INDICATORS_SLIDER3_VERTICAL_ROUND_NOB_ID));
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	f503 7451 	add.w	r4, r3, #836	; 0x344
 800f77c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f780:	210b      	movs	r1, #11
 800f782:	4618      	mov	r0, r3
 800f784:	f7ff fa97 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 800f788:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800f78c:	210b      	movs	r1, #11
 800f78e:	4618      	mov	r0, r3
 800f790:	f7ff fa91 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 800f794:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800f798:	210a      	movs	r1, #10
 800f79a:	4618      	mov	r0, r3
 800f79c:	f7ff fa8b 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 800f7a0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800f7a4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800f7a8:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800f7ac:	4620      	mov	r0, r4
 800f7ae:	f00b ff2f 	bl	801b610 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>
    yAxisSlider_R.setupVerticalSlider(7, 3, 0, 0, 125);
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	f503 7051 	add.w	r0, r3, #836	; 0x344
 800f7b8:	237d      	movs	r3, #125	; 0x7d
 800f7ba:	9301      	str	r3, [sp, #4]
 800f7bc:	2300      	movs	r3, #0
 800f7be:	9300      	str	r3, [sp, #0]
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	2203      	movs	r2, #3
 800f7c4:	2107      	movs	r1, #7
 800f7c6:	f00b fe01 	bl	801b3cc <_ZN8touchgfx6Slider19setupVerticalSliderEttttt>
    yAxisSlider_R.setValueRange(0, 100);
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	f503 7351 	add.w	r3, r3, #836	; 0x344
 800f7d0:	2264      	movs	r2, #100	; 0x64
 800f7d2:	2100      	movs	r1, #0
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	f00b fd00 	bl	801b1da <_ZN8touchgfx6Slider13setValueRangeEii>
    yAxisSlider_R.setValue(0);
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	f503 7351 	add.w	r3, r3, #836	; 0x344
 800f7e0:	2100      	movs	r1, #0
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	f00b fc85 	bl	801b0f2 <_ZN8touchgfx6Slider8setValueEi>
    yAxisSlider_R.setNewValueCallback(sliderValueChangedCallback);
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	f503 7251 	add.w	r2, r3, #836	; 0x344
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
 800f7f4:	4619      	mov	r1, r3
 800f7f6:	4610      	mov	r0, r2
 800f7f8:	f7ff fc64 	bl	800f0c4 <_ZN8touchgfx6Slider19setNewValueCallbackERNS_15GenericCallbackIRKS0_ivEE>

    leftText.setXY(21, 239);
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800f802:	22ef      	movs	r2, #239	; 0xef
 800f804:	2115      	movs	r1, #21
 800f806:	4618      	mov	r0, r3
 800f808:	f7fd f8e1 	bl	800c9ce <_ZN8touchgfx8Drawable5setXYEss>
    leftText.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	f503 6488 	add.w	r4, r3, #1088	; 0x440
 800f812:	2200      	movs	r2, #0
 800f814:	2100      	movs	r1, #0
 800f816:	2000      	movs	r0, #0
 800f818:	f7ff fd66 	bl	800f2e8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800f81c:	4603      	mov	r3, r0
 800f81e:	f8c7 40b4 	str.w	r4, [r7, #180]	; 0xb4
 800f822:	617b      	str	r3, [r7, #20]
        this->color = color;
 800f824:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f828:	697a      	ldr	r2, [r7, #20]
 800f82a:	631a      	str	r2, [r3, #48]	; 0x30
    leftText.setLinespacing(0);
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800f832:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f836:	2300      	movs	r3, #0
 800f838:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
        linespace = space;
 800f83c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f840:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 800f844:	869a      	strh	r2, [r3, #52]	; 0x34
    leftText.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3));
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	f503 6488 	add.w	r4, r3, #1088	; 0x440
 800f84c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800f850:	2102      	movs	r1, #2
 800f852:	4618      	mov	r0, r3
 800f854:	f7ff fbe6 	bl	800f024 <_ZN8touchgfx9TypedTextC1Et>
 800f858:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800f85c:	4619      	mov	r1, r3
 800f85e:	4620      	mov	r0, r4
 800f860:	f00e f980 	bl	801db64 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 800f864:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800f868:	4618      	mov	r0, r3
 800f86a:	f7fc ffff 	bl	800c86c <_ZN8touchgfx9TypedTextD1Ev>

    rightText.setXY(174, 239);
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 800f874:	22ef      	movs	r2, #239	; 0xef
 800f876:	21ae      	movs	r1, #174	; 0xae
 800f878:	4618      	mov	r0, r3
 800f87a:	f7fd f8a8 	bl	800c9ce <_ZN8touchgfx8Drawable5setXYEss>
    rightText.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	f203 447c 	addw	r4, r3, #1148	; 0x47c
 800f884:	2200      	movs	r2, #0
 800f886:	2100      	movs	r1, #0
 800f888:	2000      	movs	r0, #0
 800f88a:	f7ff fd2d 	bl	800f2e8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800f88e:	4603      	mov	r3, r0
 800f890:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 800f894:	613b      	str	r3, [r7, #16]
        this->color = color;
 800f896:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f89a:	693a      	ldr	r2, [r7, #16]
 800f89c:	631a      	str	r2, [r3, #48]	; 0x30
    rightText.setLinespacing(0);
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 800f8a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
        linespace = space;
 800f8ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f8b2:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 800f8b6:	869a      	strh	r2, [r3, #52]	; 0x34
    rightText.setTypedText(touchgfx::TypedText(T_SINGLEUSEID4));
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	f203 447c 	addw	r4, r3, #1148	; 0x47c
 800f8be:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800f8c2:	2103      	movs	r1, #3
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	f7ff fbad 	bl	800f024 <_ZN8touchgfx9TypedTextC1Et>
 800f8ca:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800f8ce:	4619      	mov	r1, r3
 800f8d0:	4620      	mov	r0, r4
 800f8d2:	f00e f947 	bl	801db64 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 800f8d6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800f8da:	4618      	mov	r0, r3
 800f8dc:	f7fc ffc6 	bl	800c86c <_ZN8touchgfx9TypedTextD1Ev>

    baseText.setXY(96, 295);
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 800f8e6:	f240 1227 	movw	r2, #295	; 0x127
 800f8ea:	2160      	movs	r1, #96	; 0x60
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	f7fd f86e 	bl	800c9ce <_ZN8touchgfx8Drawable5setXYEss>
    baseText.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	f503 6497 	add.w	r4, r3, #1208	; 0x4b8
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	2100      	movs	r1, #0
 800f8fc:	2000      	movs	r0, #0
 800f8fe:	f7ff fcf3 	bl	800f2e8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800f902:	4603      	mov	r3, r0
 800f904:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
 800f908:	60fb      	str	r3, [r7, #12]
        this->color = color;
 800f90a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800f90e:	68fa      	ldr	r2, [r7, #12]
 800f910:	631a      	str	r2, [r3, #48]	; 0x30
    baseText.setLinespacing(0);
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 800f918:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f91c:	2300      	movs	r3, #0
 800f91e:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
        linespace = space;
 800f922:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f926:	f8b7 20d2 	ldrh.w	r2, [r7, #210]	; 0xd2
 800f92a:	869a      	strh	r2, [r3, #52]	; 0x34
    baseText.setTypedText(touchgfx::TypedText(T_SINGLEUSEID5));
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	f503 6497 	add.w	r4, r3, #1208	; 0x4b8
 800f932:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800f936:	2104      	movs	r1, #4
 800f938:	4618      	mov	r0, r3
 800f93a:	f7ff fb73 	bl	800f024 <_ZN8touchgfx9TypedTextC1Et>
 800f93e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800f942:	4619      	mov	r1, r3
 800f944:	4620      	mov	r0, r4
 800f946:	f00e f90d 	bl	801db64 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 800f94a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800f94e:	4618      	mov	r0, r3
 800f950:	f7fc ff8c 	bl	800c86c <_ZN8touchgfx9TypedTextD1Ev>

    sequenceScreenButton.setXY(90, 52);
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	f203 43f4 	addw	r3, r3, #1268	; 0x4f4
 800f95a:	2234      	movs	r2, #52	; 0x34
 800f95c:	215a      	movs	r1, #90	; 0x5a
 800f95e:	4618      	mov	r0, r3
 800f960:	f7fd f835 	bl	800c9ce <_ZN8touchgfx8Drawable5setXYEss>
    sequenceScreenButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_SEQUENCE_ICON_32_ID), touchgfx::Bitmap(BITMAP_SEQUENCE_ICON_32_ID));
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	f203 44f4 	addw	r4, r3, #1268	; 0x4f4
 800f96a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800f96e:	2101      	movs	r1, #1
 800f970:	4618      	mov	r0, r3
 800f972:	f7ff f9a0 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 800f976:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800f97a:	2102      	movs	r1, #2
 800f97c:	4618      	mov	r0, r3
 800f97e:	f7ff f99a 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 800f982:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800f986:	210e      	movs	r1, #14
 800f988:	4618      	mov	r0, r3
 800f98a:	f7ff f994 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 800f98e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800f992:	210e      	movs	r1, #14
 800f994:	4618      	mov	r0, r3
 800f996:	f7ff f98e 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 800f99a:	f107 0094 	add.w	r0, r7, #148	; 0x94
 800f99e:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800f9a2:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800f9a6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800f9aa:	9300      	str	r3, [sp, #0]
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	4620      	mov	r0, r4
 800f9b0:	f00e fabe 	bl	801df30 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    sequenceScreenButton.setIconXY(14, 14);
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	f203 43f4 	addw	r3, r3, #1268	; 0x4f4
 800f9ba:	220e      	movs	r2, #14
 800f9bc:	210e      	movs	r1, #14
 800f9be:	4618      	mov	r0, r3
 800f9c0:	f7ff fbad 	bl	800f11e <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    sequenceScreenButton.setAction(buttonCallback);
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	f203 42f4 	addw	r2, r3, #1268	; 0x4f4
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 800f9d0:	4619      	mov	r1, r3
 800f9d2:	4610      	mov	r0, r2
 800f9d4:	f7ff fa5e 	bl	800ee94 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(__background);
 800f9d8:	687a      	ldr	r2, [r7, #4]
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	3340      	adds	r3, #64	; 0x40
 800f9de:	4619      	mov	r1, r3
 800f9e0:	4610      	mov	r0, r2
 800f9e2:	f7ff fa0f 	bl	800ee04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(backgroundImage);
 800f9e6:	687a      	ldr	r2, [r7, #4]
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	3370      	adds	r3, #112	; 0x70
 800f9ec:	4619      	mov	r1, r3
 800f9ee:	4610      	mov	r0, r2
 800f9f0:	f7ff fa08 	bl	800ee04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(manipulatorControlToggleButton);
 800f9f4:	687a      	ldr	r2, [r7, #4]
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	339c      	adds	r3, #156	; 0x9c
 800f9fa:	4619      	mov	r1, r3
 800f9fc:	4610      	mov	r0, r2
 800f9fe:	f7ff fa01 	bl	800ee04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(titleText);
 800fa02:	687a      	ldr	r2, [r7, #4]
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	33d4      	adds	r3, #212	; 0xd4
 800fa08:	4619      	mov	r1, r3
 800fa0a:	4610      	mov	r0, r2
 800fa0c:	f7ff f9fa 	bl	800ee04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(manipulatorText);
 800fa10:	687a      	ldr	r2, [r7, #4]
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800fa18:	4619      	mov	r1, r3
 800fa1a:	4610      	mov	r0, r2
 800fa1c:	f7ff f9f2 	bl	800ee04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(yAxisSlider_L);
 800fa20:	687a      	ldr	r2, [r7, #4]
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800fa28:	4619      	mov	r1, r3
 800fa2a:	4610      	mov	r0, r2
 800fa2c:	f7ff f9ea 	bl	800ee04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(xAxisSlider);
 800fa30:	687a      	ldr	r2, [r7, #4]
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800fa38:	4619      	mov	r1, r3
 800fa3a:	4610      	mov	r0, r2
 800fa3c:	f7ff f9e2 	bl	800ee04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(yAxisSlider_R);
 800fa40:	687a      	ldr	r2, [r7, #4]
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	f503 7351 	add.w	r3, r3, #836	; 0x344
 800fa48:	4619      	mov	r1, r3
 800fa4a:	4610      	mov	r0, r2
 800fa4c:	f7ff f9da 	bl	800ee04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(leftText);
 800fa50:	687a      	ldr	r2, [r7, #4]
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800fa58:	4619      	mov	r1, r3
 800fa5a:	4610      	mov	r0, r2
 800fa5c:	f7ff f9d2 	bl	800ee04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rightText);
 800fa60:	687a      	ldr	r2, [r7, #4]
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 800fa68:	4619      	mov	r1, r3
 800fa6a:	4610      	mov	r0, r2
 800fa6c:	f7ff f9ca 	bl	800ee04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(baseText);
 800fa70:	687a      	ldr	r2, [r7, #4]
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 800fa78:	4619      	mov	r1, r3
 800fa7a:	4610      	mov	r0, r2
 800fa7c:	f7ff f9c2 	bl	800ee04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(sequenceScreenButton);
 800fa80:	687a      	ldr	r2, [r7, #4]
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	f203 43f4 	addw	r3, r3, #1268	; 0x4f4
 800fa88:	4619      	mov	r1, r3
 800fa8a:	4610      	mov	r0, r2
 800fa8c:	f7ff f9ba 	bl	800ee04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	4618      	mov	r0, r3
 800fa94:	37dc      	adds	r7, #220	; 0xdc
 800fa96:	46bd      	mov	sp, r7
 800fa98:	bd90      	pop	{r4, r7, pc}
 800fa9a:	bf00      	nop

0800fa9c <_ZN18mainScreenViewBase11setupScreenEv>:

void mainScreenViewBase::setupScreen()
{
 800fa9c:	b480      	push	{r7}
 800fa9e:	b083      	sub	sp, #12
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]

}
 800faa4:	bf00      	nop
 800faa6:	370c      	adds	r7, #12
 800faa8:	46bd      	mov	sp, r7
 800faaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faae:	4770      	bx	lr

0800fab0 <_ZN18mainScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void mainScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800fab0:	b580      	push	{r7, lr}
 800fab2:	b082      	sub	sp, #8
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	6078      	str	r0, [r7, #4]
 800fab8:	6039      	str	r1, [r7, #0]
    if (&src == &manipulatorControlToggleButton)
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	339c      	adds	r3, #156	; 0x9c
 800fabe:	683a      	ldr	r2, [r7, #0]
 800fac0:	429a      	cmp	r2, r3
 800fac2:	d106      	bne.n	800fad2 <_ZN18mainScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //ManipulatorControlToggleButton_Clicked
        //When manipulatorControlToggleButton clicked call virtual function
        //Call ManipulatorControlToggleButton_Clicked
        ManipulatorControlToggleButton_Clicked();
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	3334      	adds	r3, #52	; 0x34
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	6878      	ldr	r0, [r7, #4]
 800face:	4798      	blx	r3
        //sequenceScreenButton_Clicked
        //When sequenceScreenButton clicked change screen to sequenceScreen
        //Go to sequenceScreen with screen transition towards East
        application().gotosequenceScreenScreenSlideTransitionEast();
    }
}
 800fad0:	e00c      	b.n	800faec <_ZN18mainScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3c>
    else if (&src == &sequenceScreenButton)
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	f203 43f4 	addw	r3, r3, #1268	; 0x4f4
 800fad8:	683a      	ldr	r2, [r7, #0]
 800fada:	429a      	cmp	r2, r3
 800fadc:	d106      	bne.n	800faec <_ZN18mainScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3c>
        application().gotosequenceScreenScreenSlideTransitionEast();
 800fade:	6878      	ldr	r0, [r7, #4]
 800fae0:	f7ff fbf6 	bl	800f2d0 <_ZN18mainScreenViewBase11applicationEv>
 800fae4:	4603      	mov	r3, r0
 800fae6:	4618      	mov	r0, r3
 800fae8:	f7fd fa32 	bl	800cf50 <_ZN23FrontendApplicationBase43gotosequenceScreenScreenSlideTransitionEastEv>
}
 800faec:	bf00      	nop
 800faee:	3708      	adds	r7, #8
 800faf0:	46bd      	mov	sp, r7
 800faf2:	bd80      	pop	{r7, pc}

0800faf4 <_ZN18mainScreenViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi>:

void mainScreenViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b084      	sub	sp, #16
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	60f8      	str	r0, [r7, #12]
 800fafc:	60b9      	str	r1, [r7, #8]
 800fafe:	607a      	str	r2, [r7, #4]
    if (&src == &yAxisSlider_L)
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800fb06:	68ba      	ldr	r2, [r7, #8]
 800fb08:	429a      	cmp	r2, r3
 800fb0a:	d107      	bne.n	800fb1c <_ZN18mainScreenViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0x28>
    {
        //YAxisSlider_L_Value_Changed
        //When yAxisSlider_L value changed call virtual function
        //Call YAxisSlider_L_Value_Changed
        YAxisSlider_L_Value_Changed(value);
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	3330      	adds	r3, #48	; 0x30
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	6879      	ldr	r1, [r7, #4]
 800fb16:	68f8      	ldr	r0, [r7, #12]
 800fb18:	4798      	blx	r3
        //YAxisSlider_R_Value_Changed
        //When yAxisSlider_R value changed call virtual function
        //Call YAxisSlider_R_Value_Changed
        YAxisSlider_R_Value_Changed(value);
    }
}
 800fb1a:	e01a      	b.n	800fb52 <_ZN18mainScreenViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0x5e>
    else if (&src == &xAxisSlider)
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800fb22:	68ba      	ldr	r2, [r7, #8]
 800fb24:	429a      	cmp	r2, r3
 800fb26:	d107      	bne.n	800fb38 <_ZN18mainScreenViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0x44>
        XAxisSliderValue_Changed(value);
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	332c      	adds	r3, #44	; 0x2c
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	6879      	ldr	r1, [r7, #4]
 800fb32:	68f8      	ldr	r0, [r7, #12]
 800fb34:	4798      	blx	r3
}
 800fb36:	e00c      	b.n	800fb52 <_ZN18mainScreenViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0x5e>
    else if (&src == &yAxisSlider_R)
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	f503 7351 	add.w	r3, r3, #836	; 0x344
 800fb3e:	68ba      	ldr	r2, [r7, #8]
 800fb40:	429a      	cmp	r2, r3
 800fb42:	d106      	bne.n	800fb52 <_ZN18mainScreenViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0x5e>
        YAxisSlider_R_Value_Changed(value);
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	3338      	adds	r3, #56	; 0x38
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	6879      	ldr	r1, [r7, #4]
 800fb4e:	68f8      	ldr	r0, [r7, #12]
 800fb50:	4798      	blx	r3
}
 800fb52:	bf00      	nop
 800fb54:	3710      	adds	r7, #16
 800fb56:	46bd      	mov	sp, r7
 800fb58:	bd80      	pop	{r7, pc}
	...

0800fb5c <_ZN8touchgfx4ViewI19mainScreenPresenterEC1Ev>:
    View()
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b082      	sub	sp, #8
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	4618      	mov	r0, r3
 800fb68:	f010 faea 	bl	8020140 <_ZN8touchgfx6ScreenC1Ev>
 800fb6c:	4a05      	ldr	r2, [pc, #20]	; (800fb84 <_ZN8touchgfx4ViewI19mainScreenPresenterEC1Ev+0x28>)
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	601a      	str	r2, [r3, #0]
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	2200      	movs	r2, #0
 800fb76:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	3708      	adds	r7, #8
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	bd80      	pop	{r7, pc}
 800fb82:	bf00      	nop
 800fb84:	08031964 	.word	0x08031964

0800fb88 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800fb88:	b480      	push	{r7}
 800fb8a:	b083      	sub	sp, #12
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]
 800fb90:	4a04      	ldr	r2, [pc, #16]	; (800fba4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	601a      	str	r2, [r3, #0]
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	4618      	mov	r0, r3
 800fb9a:	370c      	adds	r7, #12
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba2:	4770      	bx	lr
 800fba4:	080319b0 	.word	0x080319b0

0800fba8 <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b084      	sub	sp, #16
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	60f8      	str	r0, [r7, #12]
 800fbb0:	60b9      	str	r1, [r7, #8]
 800fbb2:	4639      	mov	r1, r7
 800fbb4:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	4618      	mov	r0, r3
 800fbbc:	f7ff ffe4 	bl	800fb88 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800fbc0:	4a08      	ldr	r2, [pc, #32]	; (800fbe4 <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	68ba      	ldr	r2, [r7, #8]
 800fbca:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	3308      	adds	r3, #8
 800fbd0:	463a      	mov	r2, r7
 800fbd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fbd6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	4618      	mov	r0, r3
 800fbde:	3710      	adds	r7, #16
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	bd80      	pop	{r7, pc}
 800fbe4:	0803194c 	.word	0x0803194c

0800fbe8 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev>:
class GenericCallback<T1, T2, void>
 800fbe8:	b480      	push	{r7}
 800fbea:	b083      	sub	sp, #12
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
 800fbf0:	4a04      	ldr	r2, [pc, #16]	; (800fc04 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev+0x1c>)
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	601a      	str	r2, [r3, #0]
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	370c      	adds	r7, #12
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc02:	4770      	bx	lr
 800fc04:	08031998 	.word	0x08031998

0800fc08 <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_2)(T1, T2))
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b084      	sub	sp, #16
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	60f8      	str	r0, [r7, #12]
 800fc10:	60b9      	str	r1, [r7, #8]
 800fc12:	4639      	mov	r1, r7
 800fc14:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	f7ff ffe4 	bl	800fbe8 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev>
 800fc20:	4a08      	ldr	r2, [pc, #32]	; (800fc44 <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE+0x3c>)
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	68ba      	ldr	r2, [r7, #8]
 800fc2a:	605a      	str	r2, [r3, #4]
        this->pmemfun_2 = pmemfun_2;
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	3308      	adds	r3, #8
 800fc30:	463a      	mov	r2, r7
 800fc32:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fc36:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	3710      	adds	r7, #16
 800fc40:	46bd      	mov	sp, r7
 800fc42:	bd80      	pop	{r7, pc}
 800fc44:	08031934 	.word	0x08031934

0800fc48 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 800fc48:	b480      	push	{r7}
 800fc4a:	b083      	sub	sp, #12
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
    }
 800fc50:	4a04      	ldr	r2, [pc, #16]	; (800fc64 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	601a      	str	r2, [r3, #0]
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	4618      	mov	r0, r3
 800fc5a:	370c      	adds	r7, #12
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc62:	4770      	bx	lr
 800fc64:	080319b0 	.word	0x080319b0

0800fc68 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b082      	sub	sp, #8
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
    }
 800fc70:	6878      	ldr	r0, [r7, #4]
 800fc72:	f7ff ffe9 	bl	800fc48 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800fc76:	2104      	movs	r1, #4
 800fc78:	6878      	ldr	r0, [r7, #4]
 800fc7a:	f01d fa5f 	bl	802d13c <_ZdlPvj>
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	4618      	mov	r0, r3
 800fc82:	3708      	adds	r7, #8
 800fc84:	46bd      	mov	sp, r7
 800fc86:	bd80      	pop	{r7, pc}

0800fc88 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>:
    virtual ~GenericCallback()
 800fc88:	b480      	push	{r7}
 800fc8a:	b083      	sub	sp, #12
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	6078      	str	r0, [r7, #4]
    }
 800fc90:	4a04      	ldr	r2, [pc, #16]	; (800fca4 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev+0x1c>)
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	601a      	str	r2, [r3, #0]
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	4618      	mov	r0, r3
 800fc9a:	370c      	adds	r7, #12
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca2:	4770      	bx	lr
 800fca4:	08031998 	.word	0x08031998

0800fca8 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED0Ev>:
    virtual ~GenericCallback()
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b082      	sub	sp, #8
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]
    }
 800fcb0:	6878      	ldr	r0, [r7, #4]
 800fcb2:	f7ff ffe9 	bl	800fc88 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>
 800fcb6:	2104      	movs	r1, #4
 800fcb8:	6878      	ldr	r0, [r7, #4]
 800fcba:	f01d fa3f 	bl	802d13c <_ZdlPvj>
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	3708      	adds	r7, #8
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	bd80      	pop	{r7, pc}

0800fcc8 <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_6SliderEivED1Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	b082      	sub	sp, #8
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
 800fcd0:	4a05      	ldr	r2, [pc, #20]	; (800fce8 <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_6SliderEivED1Ev+0x20>)
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	601a      	str	r2, [r3, #0]
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	4618      	mov	r0, r3
 800fcda:	f7ff ffd5 	bl	800fc88 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	4618      	mov	r0, r3
 800fce2:	3708      	adds	r7, #8
 800fce4:	46bd      	mov	sp, r7
 800fce6:	bd80      	pop	{r7, pc}
 800fce8:	08031934 	.word	0x08031934

0800fcec <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_6SliderEivED0Ev>:
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b082      	sub	sp, #8
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	6078      	str	r0, [r7, #4]
 800fcf4:	6878      	ldr	r0, [r7, #4]
 800fcf6:	f7ff ffe7 	bl	800fcc8 <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_6SliderEivED1Ev>
 800fcfa:	2110      	movs	r1, #16
 800fcfc:	6878      	ldr	r0, [r7, #4]
 800fcfe:	f01d fa1d 	bl	802d13c <_ZdlPvj>
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	4618      	mov	r0, r3
 800fd06:	3708      	adds	r7, #8
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	bd80      	pop	{r7, pc}

0800fd0c <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b082      	sub	sp, #8
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
 800fd14:	4a05      	ldr	r2, [pc, #20]	; (800fd2c <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	601a      	str	r2, [r3, #0]
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	f7ff ff93 	bl	800fc48 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	4618      	mov	r0, r3
 800fd26:	3708      	adds	r7, #8
 800fd28:	46bd      	mov	sp, r7
 800fd2a:	bd80      	pop	{r7, pc}
 800fd2c:	0803194c 	.word	0x0803194c

0800fd30 <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b082      	sub	sp, #8
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
 800fd38:	6878      	ldr	r0, [r7, #4]
 800fd3a:	f7ff ffe7 	bl	800fd0c <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800fd3e:	2110      	movs	r1, #16
 800fd40:	6878      	ldr	r0, [r7, #4]
 800fd42:	f01d f9fb 	bl	802d13c <_ZdlPvj>
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	4618      	mov	r0, r3
 800fd4a:	3708      	adds	r7, #8
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	bd80      	pop	{r7, pc}

0800fd50 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b082      	sub	sp, #8
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
 800fd58:	4a05      	ldr	r2, [pc, #20]	; (800fd70 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	601a      	str	r2, [r3, #0]
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	4618      	mov	r0, r3
 800fd62:	f7fc fdaf 	bl	800c8c4 <_ZN8touchgfx8DrawableD1Ev>
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	4618      	mov	r0, r3
 800fd6a:	3708      	adds	r7, #8
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd80      	pop	{r7, pc}
 800fd70:	08032044 	.word	0x08032044

0800fd74 <_ZN8touchgfx9ContainerD0Ev>:
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b082      	sub	sp, #8
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	6078      	str	r0, [r7, #4]
 800fd7c:	6878      	ldr	r0, [r7, #4]
 800fd7e:	f7ff ffe7 	bl	800fd50 <_ZN8touchgfx9ContainerD1Ev>
 800fd82:	212c      	movs	r1, #44	; 0x2c
 800fd84:	6878      	ldr	r0, [r7, #4]
 800fd86:	f01d f9d9 	bl	802d13c <_ZdlPvj>
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	3708      	adds	r7, #8
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bd80      	pop	{r7, pc}

0800fd94 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b082      	sub	sp, #8
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
 800fd9c:	4a05      	ldr	r2, [pc, #20]	; (800fdb4 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	601a      	str	r2, [r3, #0]
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	4618      	mov	r0, r3
 800fda6:	f7fc ffc9 	bl	800cd3c <_ZN8touchgfx6WidgetD1Ev>
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	4618      	mov	r0, r3
 800fdae:	3708      	adds	r7, #8
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	bd80      	pop	{r7, pc}
 800fdb4:	0803329c 	.word	0x0803329c

0800fdb8 <_ZN8touchgfx3BoxD0Ev>:
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b082      	sub	sp, #8
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	6078      	str	r0, [r7, #4]
 800fdc0:	6878      	ldr	r0, [r7, #4]
 800fdc2:	f7ff ffe7 	bl	800fd94 <_ZN8touchgfx3BoxD1Ev>
 800fdc6:	2130      	movs	r1, #48	; 0x30
 800fdc8:	6878      	ldr	r0, [r7, #4]
 800fdca:	f01d f9b7 	bl	802d13c <_ZdlPvj>
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	3708      	adds	r7, #8
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	bd80      	pop	{r7, pc}

0800fdd8 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b082      	sub	sp, #8
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
 800fde0:	4a05      	ldr	r2, [pc, #20]	; (800fdf8 <_ZN8touchgfx5ImageD1Ev+0x20>)
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	601a      	str	r2, [r3, #0]
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	4618      	mov	r0, r3
 800fdea:	f7fc ffa7 	bl	800cd3c <_ZN8touchgfx6WidgetD1Ev>
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	3708      	adds	r7, #8
 800fdf4:	46bd      	mov	sp, r7
 800fdf6:	bd80      	pop	{r7, pc}
 800fdf8:	08033560 	.word	0x08033560

0800fdfc <_ZN8touchgfx5ImageD0Ev>:
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b082      	sub	sp, #8
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
 800fe04:	6878      	ldr	r0, [r7, #4]
 800fe06:	f7ff ffe7 	bl	800fdd8 <_ZN8touchgfx5ImageD1Ev>
 800fe0a:	212c      	movs	r1, #44	; 0x2c
 800fe0c:	6878      	ldr	r0, [r7, #4]
 800fe0e:	f01d f995 	bl	802d13c <_ZdlPvj>
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	4618      	mov	r0, r3
 800fe16:	3708      	adds	r7, #8
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	bd80      	pop	{r7, pc}

0800fe1c <_ZN8touchgfx12ToggleButtonD1Ev>:
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b082      	sub	sp, #8
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
 800fe24:	4a05      	ldr	r2, [pc, #20]	; (800fe3c <_ZN8touchgfx12ToggleButtonD1Ev+0x20>)
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	601a      	str	r2, [r3, #0]
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	f7ff fa85 	bl	800f33c <_ZN8touchgfx6ButtonD1Ev>
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	4618      	mov	r0, r3
 800fe36:	3708      	adds	r7, #8
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	bd80      	pop	{r7, pc}
 800fe3c:	08033050 	.word	0x08033050

0800fe40 <_ZN8touchgfx12ToggleButtonD0Ev>:
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b082      	sub	sp, #8
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
 800fe48:	6878      	ldr	r0, [r7, #4]
 800fe4a:	f7ff ffe7 	bl	800fe1c <_ZN8touchgfx12ToggleButtonD1Ev>
 800fe4e:	2138      	movs	r1, #56	; 0x38
 800fe50:	6878      	ldr	r0, [r7, #4]
 800fe52:	f01d f973 	bl	802d13c <_ZdlPvj>
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	4618      	mov	r0, r3
 800fe5a:	3708      	adds	r7, #8
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	bd80      	pop	{r7, pc}

0800fe60 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b082      	sub	sp, #8
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
 800fe68:	4a08      	ldr	r2, [pc, #32]	; (800fe8c <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	601a      	str	r2, [r3, #0]
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	3328      	adds	r3, #40	; 0x28
 800fe72:	4618      	mov	r0, r3
 800fe74:	f7fc fcfa 	bl	800c86c <_ZN8touchgfx9TypedTextD1Ev>
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	4618      	mov	r0, r3
 800fe7c:	f7fc ff5e 	bl	800cd3c <_ZN8touchgfx6WidgetD1Ev>
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	4618      	mov	r0, r3
 800fe84:	3708      	adds	r7, #8
 800fe86:	46bd      	mov	sp, r7
 800fe88:	bd80      	pop	{r7, pc}
 800fe8a:	bf00      	nop
 800fe8c:	080331f0 	.word	0x080331f0

0800fe90 <_ZN8touchgfx8TextAreaD0Ev>:
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b082      	sub	sp, #8
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
 800fe98:	6878      	ldr	r0, [r7, #4]
 800fe9a:	f7ff ffe1 	bl	800fe60 <_ZN8touchgfx8TextAreaD1Ev>
 800fe9e:	213c      	movs	r1, #60	; 0x3c
 800fea0:	6878      	ldr	r0, [r7, #4]
 800fea2:	f01d f94b 	bl	802d13c <_ZdlPvj>
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	4618      	mov	r0, r3
 800feaa:	3708      	adds	r7, #8
 800feac:	46bd      	mov	sp, r7
 800feae:	bd80      	pop	{r7, pc}

0800feb0 <_ZN8touchgfx6SliderD1Ev>:
class Slider : public Container
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b082      	sub	sp, #8
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
 800feb8:	4a0f      	ldr	r2, [pc, #60]	; (800fef8 <_ZN8touchgfx6SliderD1Ev+0x48>)
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	601a      	str	r2, [r3, #0]
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	33c0      	adds	r3, #192	; 0xc0
 800fec2:	4618      	mov	r0, r3
 800fec4:	f7ff ff44 	bl	800fd50 <_ZN8touchgfx9ContainerD1Ev>
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	3394      	adds	r3, #148	; 0x94
 800fecc:	4618      	mov	r0, r3
 800fece:	f7ff ff83 	bl	800fdd8 <_ZN8touchgfx5ImageD1Ev>
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	3368      	adds	r3, #104	; 0x68
 800fed6:	4618      	mov	r0, r3
 800fed8:	f7ff ff7e 	bl	800fdd8 <_ZN8touchgfx5ImageD1Ev>
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	333c      	adds	r3, #60	; 0x3c
 800fee0:	4618      	mov	r0, r3
 800fee2:	f7ff ff79 	bl	800fdd8 <_ZN8touchgfx5ImageD1Ev>
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	4618      	mov	r0, r3
 800feea:	f7ff ff31 	bl	800fd50 <_ZN8touchgfx9ContainerD1Ev>
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	4618      	mov	r0, r3
 800fef2:	3708      	adds	r7, #8
 800fef4:	46bd      	mov	sp, r7
 800fef6:	bd80      	pop	{r7, pc}
 800fef8:	08032358 	.word	0x08032358

0800fefc <_ZN8touchgfx6SliderD0Ev>:
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b082      	sub	sp, #8
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
 800ff04:	6878      	ldr	r0, [r7, #4]
 800ff06:	f7ff ffd3 	bl	800feb0 <_ZN8touchgfx6SliderD1Ev>
 800ff0a:	21fc      	movs	r1, #252	; 0xfc
 800ff0c:	6878      	ldr	r0, [r7, #4]
 800ff0e:	f01d f915 	bl	802d13c <_ZdlPvj>
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	4618      	mov	r0, r3
 800ff16:	3708      	adds	r7, #8
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	bd80      	pop	{r7, pc}

0800ff1c <_ZN8touchgfx14ButtonWithIconD1Ev>:
class ButtonWithIcon : public Button
 800ff1c:	b580      	push	{r7, lr}
 800ff1e:	b082      	sub	sp, #8
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]
 800ff24:	4a05      	ldr	r2, [pc, #20]	; (800ff3c <_ZN8touchgfx14ButtonWithIconD1Ev+0x20>)
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	601a      	str	r2, [r3, #0]
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	f7ff fa05 	bl	800f33c <_ZN8touchgfx6ButtonD1Ev>
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	4618      	mov	r0, r3
 800ff36:	3708      	adds	r7, #8
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	bd80      	pop	{r7, pc}
 800ff3c:	080334b8 	.word	0x080334b8

0800ff40 <_ZN8touchgfx14ButtonWithIconD0Ev>:
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b082      	sub	sp, #8
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
 800ff48:	6878      	ldr	r0, [r7, #4]
 800ff4a:	f7ff ffe7 	bl	800ff1c <_ZN8touchgfx14ButtonWithIconD1Ev>
 800ff4e:	213c      	movs	r1, #60	; 0x3c
 800ff50:	6878      	ldr	r0, [r7, #4]
 800ff52:	f01d f8f3 	bl	802d13c <_ZdlPvj>
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	4618      	mov	r0, r3
 800ff5a:	3708      	adds	r7, #8
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	bd80      	pop	{r7, pc}

0800ff60 <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_6SliderEivE7executeES4_i>:
    virtual void execute(T1 t1, T2 t2)
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b084      	sub	sp, #16
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	60f8      	str	r0, [r7, #12]
 800ff68:	60b9      	str	r1, [r7, #8]
 800ff6a:	607a      	str	r2, [r7, #4]
        (pobject->*pmemfun_2)(t1, t2);
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	685b      	ldr	r3, [r3, #4]
 800ff70:	68fa      	ldr	r2, [r7, #12]
 800ff72:	68d2      	ldr	r2, [r2, #12]
 800ff74:	1052      	asrs	r2, r2, #1
 800ff76:	1898      	adds	r0, r3, r2
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	68db      	ldr	r3, [r3, #12]
 800ff7c:	f003 0301 	and.w	r3, r3, #1
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d102      	bne.n	800ff8a <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_6SliderEivE7executeES4_i+0x2a>
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	689b      	ldr	r3, [r3, #8]
 800ff88:	e00a      	b.n	800ffa0 <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_6SliderEivE7executeES4_i+0x40>
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	685b      	ldr	r3, [r3, #4]
 800ff8e:	68fa      	ldr	r2, [r7, #12]
 800ff90:	68d2      	ldr	r2, [r2, #12]
 800ff92:	1052      	asrs	r2, r2, #1
 800ff94:	4413      	add	r3, r2
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	68fa      	ldr	r2, [r7, #12]
 800ff9a:	6892      	ldr	r2, [r2, #8]
 800ff9c:	4413      	add	r3, r2
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	687a      	ldr	r2, [r7, #4]
 800ffa2:	68b9      	ldr	r1, [r7, #8]
 800ffa4:	4798      	blx	r3
    }
 800ffa6:	bf00      	nop
 800ffa8:	3710      	adds	r7, #16
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	bd80      	pop	{r7, pc}

0800ffae <_ZNK8touchgfx8CallbackI18mainScreenViewBaseRKNS_6SliderEivE7isValidEv>:
    virtual bool isValid() const
 800ffae:	b480      	push	{r7}
 800ffb0:	b083      	sub	sp, #12
 800ffb2:	af00      	add	r7, sp, #0
 800ffb4:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_2 != 0);
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	685b      	ldr	r3, [r3, #4]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d010      	beq.n	800ffe0 <_ZNK8touchgfx8CallbackI18mainScreenViewBaseRKNS_6SliderEivE7isValidEv+0x32>
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	689b      	ldr	r3, [r3, #8]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d107      	bne.n	800ffd6 <_ZNK8touchgfx8CallbackI18mainScreenViewBaseRKNS_6SliderEivE7isValidEv+0x28>
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	68db      	ldr	r3, [r3, #12]
 800ffca:	f003 0301 	and.w	r3, r3, #1
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d101      	bne.n	800ffd6 <_ZNK8touchgfx8CallbackI18mainScreenViewBaseRKNS_6SliderEivE7isValidEv+0x28>
 800ffd2:	2301      	movs	r3, #1
 800ffd4:	e000      	b.n	800ffd8 <_ZNK8touchgfx8CallbackI18mainScreenViewBaseRKNS_6SliderEivE7isValidEv+0x2a>
 800ffd6:	2300      	movs	r3, #0
 800ffd8:	2b01      	cmp	r3, #1
 800ffda:	d001      	beq.n	800ffe0 <_ZNK8touchgfx8CallbackI18mainScreenViewBaseRKNS_6SliderEivE7isValidEv+0x32>
 800ffdc:	2301      	movs	r3, #1
 800ffde:	e000      	b.n	800ffe2 <_ZNK8touchgfx8CallbackI18mainScreenViewBaseRKNS_6SliderEivE7isValidEv+0x34>
 800ffe0:	2300      	movs	r3, #0
    }
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	370c      	adds	r7, #12
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffec:	4770      	bx	lr

0800ffee <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800ffee:	b580      	push	{r7, lr}
 800fff0:	b082      	sub	sp, #8
 800fff2:	af00      	add	r7, sp, #0
 800fff4:	6078      	str	r0, [r7, #4]
 800fff6:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	685b      	ldr	r3, [r3, #4]
 800fffc:	687a      	ldr	r2, [r7, #4]
 800fffe:	68d2      	ldr	r2, [r2, #12]
 8010000:	1052      	asrs	r2, r2, #1
 8010002:	1898      	adds	r0, r3, r2
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	68db      	ldr	r3, [r3, #12]
 8010008:	f003 0301 	and.w	r3, r3, #1
 801000c:	2b00      	cmp	r3, #0
 801000e:	d102      	bne.n	8010016 <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	689b      	ldr	r3, [r3, #8]
 8010014:	e00a      	b.n	801002c <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	685b      	ldr	r3, [r3, #4]
 801001a:	687a      	ldr	r2, [r7, #4]
 801001c:	68d2      	ldr	r2, [r2, #12]
 801001e:	1052      	asrs	r2, r2, #1
 8010020:	4413      	add	r3, r2
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	687a      	ldr	r2, [r7, #4]
 8010026:	6892      	ldr	r2, [r2, #8]
 8010028:	4413      	add	r3, r2
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	6839      	ldr	r1, [r7, #0]
 801002e:	4798      	blx	r3
    }
 8010030:	bf00      	nop
 8010032:	3708      	adds	r7, #8
 8010034:	46bd      	mov	sp, r7
 8010036:	bd80      	pop	{r7, pc}

08010038 <_ZNK8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8010038:	b480      	push	{r7}
 801003a:	b083      	sub	sp, #12
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	685b      	ldr	r3, [r3, #4]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d010      	beq.n	801006a <_ZNK8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	689b      	ldr	r3, [r3, #8]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d107      	bne.n	8010060 <_ZNK8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	68db      	ldr	r3, [r3, #12]
 8010054:	f003 0301 	and.w	r3, r3, #1
 8010058:	2b00      	cmp	r3, #0
 801005a:	d101      	bne.n	8010060 <_ZNK8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801005c:	2301      	movs	r3, #1
 801005e:	e000      	b.n	8010062 <_ZNK8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8010060:	2300      	movs	r3, #0
 8010062:	2b01      	cmp	r3, #1
 8010064:	d001      	beq.n	801006a <_ZNK8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8010066:	2301      	movs	r3, #1
 8010068:	e000      	b.n	801006c <_ZNK8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 801006a:	2300      	movs	r3, #0
    }
 801006c:	4618      	mov	r0, r3
 801006e:	370c      	adds	r7, #12
 8010070:	46bd      	mov	sp, r7
 8010072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010076:	4770      	bx	lr

08010078 <_ZN8touchgfx9ContainerC1Ev>:
{
public:
    Container()
 8010078:	b580      	push	{r7, lr}
 801007a:	b082      	sub	sp, #8
 801007c:	af00      	add	r7, sp, #0
 801007e:	6078      	str	r0, [r7, #4]
        : Drawable(),
          firstChild(0)
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	4618      	mov	r0, r3
 8010084:	f7fe fe28 	bl	800ecd8 <_ZN8touchgfx8DrawableC1Ev>
 8010088:	4a05      	ldr	r2, [pc, #20]	; (80100a0 <_ZN8touchgfx9ContainerC1Ev+0x28>)
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	601a      	str	r2, [r3, #0]
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	2200      	movs	r2, #0
 8010092:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	4618      	mov	r0, r3
 8010098:	3708      	adds	r7, #8
 801009a:	46bd      	mov	sp, r7
 801009c:	bd80      	pop	{r7, pc}
 801009e:	bf00      	nop
 80100a0:	08032044 	.word	0x08032044

080100a4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextArea
{
public:
    TextAreaWithOneWildcard()
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b082      	sub	sp, #8
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
        : TextArea(), wildcard(0)
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	4618      	mov	r0, r3
 80100b0:	f7fe ffce 	bl	800f050 <_ZN8touchgfx8TextAreaC1Ev>
 80100b4:	4a05      	ldr	r2, [pc, #20]	; (80100cc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	601a      	str	r2, [r3, #0]
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	2200      	movs	r2, #0
 80100be:	63da      	str	r2, [r3, #60]	; 0x3c
    {
    }
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	4618      	mov	r0, r3
 80100c4:	3708      	adds	r7, #8
 80100c6:	46bd      	mov	sp, r7
 80100c8:	bd80      	pop	{r7, pc}
 80100ca:	bf00      	nop
 80100cc:	0803340c 	.word	0x0803340c

080100d0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 80100d0:	b480      	push	{r7}
 80100d2:	b083      	sub	sp, #12
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
 80100d8:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	683a      	ldr	r2, [r7, #0]
 80100de:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80100e0:	bf00      	nop
 80100e2:	370c      	adds	r7, #12
 80100e4:	46bd      	mov	sp, r7
 80100e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ea:	4770      	bx	lr

080100ec <_ZN21positionContainerBaseD1Ev>:

class positionContainerBase : public touchgfx::Container
{
public:
    positionContainerBase();
    virtual ~positionContainerBase() {}
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b082      	sub	sp, #8
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
 80100f4:	4a08      	ldr	r2, [pc, #32]	; (8010118 <_ZN21positionContainerBaseD1Ev+0x2c>)
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	601a      	str	r2, [r3, #0]
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	332c      	adds	r3, #44	; 0x2c
 80100fe:	4618      	mov	r0, r3
 8010100:	f000 f8d0 	bl	80102a4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	4618      	mov	r0, r3
 8010108:	f7ff fe22 	bl	800fd50 <_ZN8touchgfx9ContainerD1Ev>
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	4618      	mov	r0, r3
 8010110:	3708      	adds	r7, #8
 8010112:	46bd      	mov	sp, r7
 8010114:	bd80      	pop	{r7, pc}
 8010116:	bf00      	nop
 8010118:	08031a24 	.word	0x08031a24

0801011c <_ZN21positionContainerBaseD0Ev>:
 801011c:	b580      	push	{r7, lr}
 801011e:	b082      	sub	sp, #8
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
 8010124:	6878      	ldr	r0, [r7, #4]
 8010126:	f7ff ffe1 	bl	80100ec <_ZN21positionContainerBaseD1Ev>
 801012a:	2190      	movs	r1, #144	; 0x90
 801012c:	6878      	ldr	r0, [r7, #4]
 801012e:	f01d f805 	bl	802d13c <_ZdlPvj>
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	4618      	mov	r0, r3
 8010136:	3708      	adds	r7, #8
 8010138:	46bd      	mov	sp, r7
 801013a:	bd80      	pop	{r7, pc}

0801013c <_ZN21positionContainerBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/containers/positionContainerBase.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

positionContainerBase::positionContainerBase()
 801013c:	b590      	push	{r4, r7, lr}
 801013e:	b08f      	sub	sp, #60	; 0x3c
 8010140:	af02      	add	r7, sp, #8
 8010142:	6078      	str	r0, [r7, #4]
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	4618      	mov	r0, r3
 8010148:	f7ff ff96 	bl	8010078 <_ZN8touchgfx9ContainerC1Ev>
 801014c:	4a47      	ldr	r2, [pc, #284]	; (801026c <_ZN21positionContainerBaseC1Ev+0x130>)
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	601a      	str	r2, [r3, #0]
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	332c      	adds	r3, #44	; 0x2c
 8010156:	4618      	mov	r0, r3
 8010158:	f7ff ffa4 	bl	80100a4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
{
    setWidth(240);
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	21f0      	movs	r1, #240	; 0xf0
 8010160:	4618      	mov	r0, r3
 8010162:	f7fc fc52 	bl	800ca0a <_ZN8touchgfx8Drawable8setWidthEs>
    setHeight(27);
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	211b      	movs	r1, #27
 801016a:	4618      	mov	r0, r3
 801016c:	f7fc fc5c 	bl	800ca28 <_ZN8touchgfx8Drawable9setHeightEs>
    positionText.setPosition(0, 0, 240, 27);
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8010176:	231b      	movs	r3, #27
 8010178:	9300      	str	r3, [sp, #0]
 801017a:	23f0      	movs	r3, #240	; 0xf0
 801017c:	2200      	movs	r2, #0
 801017e:	2100      	movs	r1, #0
 8010180:	f7fc fbc0 	bl	800c904 <_ZN8touchgfx8Drawable11setPositionEssss>
    positionText.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801018a:	2200      	movs	r2, #0
 801018c:	2100      	movs	r1, #0
 801018e:	2000      	movs	r0, #0
 8010190:	f7ff f8aa 	bl	800f2e8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010194:	4603      	mov	r3, r0
 8010196:	623c      	str	r4, [r7, #32]
 8010198:	60fb      	str	r3, [r7, #12]
        this->color = color;
 801019a:	6a3b      	ldr	r3, [r7, #32]
 801019c:	68fa      	ldr	r2, [r7, #12]
 801019e:	631a      	str	r2, [r3, #48]	; 0x30
    positionText.setLinespacing(0);
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	332c      	adds	r3, #44	; 0x2c
 80101a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80101a6:	2300      	movs	r3, #0
 80101a8:	84fb      	strh	r3, [r7, #38]	; 0x26
        linespace = space;
 80101aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101ac:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80101ae:	869a      	strh	r2, [r3, #52]	; 0x34
    Unicode::snprintf(positionTextBuffer, POSITIONTEXT_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID9).getText());
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 80101b6:	f107 0310 	add.w	r3, r7, #16
 80101ba:	2107      	movs	r1, #7
 80101bc:	4618      	mov	r0, r3
 80101be:	f7fe ff31 	bl	800f024 <_ZN8touchgfx9TypedTextC1Et>
 80101c2:	f107 0310 	add.w	r3, r7, #16
 80101c6:	62fb      	str	r3, [r7, #44]	; 0x2c

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80101c8:	4b29      	ldr	r3, [pc, #164]	; (8010270 <_ZN21positionContainerBaseC1Ev+0x134>)
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d105      	bne.n	80101dc <_ZN21positionContainerBaseC1Ev+0xa0>
 80101d0:	4b28      	ldr	r3, [pc, #160]	; (8010274 <_ZN21positionContainerBaseC1Ev+0x138>)
 80101d2:	4a29      	ldr	r2, [pc, #164]	; (8010278 <_ZN21positionContainerBaseC1Ev+0x13c>)
 80101d4:	21b1      	movs	r1, #177	; 0xb1
 80101d6:	4829      	ldr	r0, [pc, #164]	; (801027c <_ZN21positionContainerBaseC1Ev+0x140>)
 80101d8:	f01e f87e 	bl	802e2d8 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80101dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101de:	889a      	ldrh	r2, [r3, #4]
 80101e0:	4b27      	ldr	r3, [pc, #156]	; (8010280 <_ZN21positionContainerBaseC1Ev+0x144>)
 80101e2:	881b      	ldrh	r3, [r3, #0]
 80101e4:	429a      	cmp	r2, r3
 80101e6:	d305      	bcc.n	80101f4 <_ZN21positionContainerBaseC1Ev+0xb8>
 80101e8:	4b26      	ldr	r3, [pc, #152]	; (8010284 <_ZN21positionContainerBaseC1Ev+0x148>)
 80101ea:	4a23      	ldr	r2, [pc, #140]	; (8010278 <_ZN21positionContainerBaseC1Ev+0x13c>)
 80101ec:	21b2      	movs	r1, #178	; 0xb2
 80101ee:	4823      	ldr	r0, [pc, #140]	; (801027c <_ZN21positionContainerBaseC1Ev+0x140>)
 80101f0:	f01e f872 	bl	802e2d8 <__assert_func>
        return texts->getText(typedTextId);
 80101f4:	4b24      	ldr	r3, [pc, #144]	; (8010288 <_ZN21positionContainerBaseC1Ev+0x14c>)
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	8aba      	ldrh	r2, [r7, #20]
 80101fa:	4611      	mov	r1, r2
 80101fc:	4618      	mov	r0, r3
 80101fe:	f7fe fcd5 	bl	800ebac <_ZNK8touchgfx5Texts7getTextEt>
 8010202:	4603      	mov	r3, r0
 8010204:	4a21      	ldr	r2, [pc, #132]	; (801028c <_ZN21positionContainerBaseC1Ev+0x150>)
 8010206:	2111      	movs	r1, #17
 8010208:	4620      	mov	r0, r4
 801020a:	f011 fa45 	bl	8021698 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 801020e:	f107 0310 	add.w	r3, r7, #16
 8010212:	4618      	mov	r0, r3
 8010214:	f7fc fb2a 	bl	800c86c <_ZN8touchgfx9TypedTextD1Ev>
    positionText.setWildcard(positionTextBuffer);
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	336c      	adds	r3, #108	; 0x6c
 8010222:	4619      	mov	r1, r3
 8010224:	4610      	mov	r0, r2
 8010226:	f7ff ff53 	bl	80100d0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    positionText.setTypedText(touchgfx::TypedText(T_SINGLEUSEID8));
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010230:	f107 0318 	add.w	r3, r7, #24
 8010234:	2106      	movs	r1, #6
 8010236:	4618      	mov	r0, r3
 8010238:	f7fe fef4 	bl	800f024 <_ZN8touchgfx9TypedTextC1Et>
 801023c:	f107 0318 	add.w	r3, r7, #24
 8010240:	4619      	mov	r1, r3
 8010242:	4620      	mov	r0, r4
 8010244:	f00d fc8e 	bl	801db64 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8010248:	f107 0318 	add.w	r3, r7, #24
 801024c:	4618      	mov	r0, r3
 801024e:	f7fc fb0d 	bl	800c86c <_ZN8touchgfx9TypedTextD1Ev>

    add(positionText);
 8010252:	687a      	ldr	r2, [r7, #4]
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	332c      	adds	r3, #44	; 0x2c
 8010258:	4619      	mov	r1, r3
 801025a:	4610      	mov	r0, r2
 801025c:	f00a fe0a 	bl	801ae74 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	4618      	mov	r0, r3
 8010264:	3734      	adds	r7, #52	; 0x34
 8010266:	46bd      	mov	sp, r7
 8010268:	bd90      	pop	{r4, r7, pc}
 801026a:	bf00      	nop
 801026c:	08031a24 	.word	0x08031a24
 8010270:	20012864 	.word	0x20012864
 8010274:	0802fe7c 	.word	0x0802fe7c
 8010278:	08031aac 	.word	0x08031aac
 801027c:	0802fec0 	.word	0x0802fec0
 8010280:	20012868 	.word	0x20012868
 8010284:	0802ff08 	.word	0x0802ff08
 8010288:	20012870 	.word	0x20012870
 801028c:	0802ff5c 	.word	0x0802ff5c

08010290 <_ZN21positionContainerBase10initializeEv>:

void positionContainerBase::initialize()
{
 8010290:	b480      	push	{r7}
 8010292:	b083      	sub	sp, #12
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]

}
 8010298:	bf00      	nop
 801029a:	370c      	adds	r7, #12
 801029c:	46bd      	mov	sp, r7
 801029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a2:	4770      	bx	lr

080102a4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextArea
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b082      	sub	sp, #8
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
 80102ac:	4a05      	ldr	r2, [pc, #20]	; (80102c4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	601a      	str	r2, [r3, #0]
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	4618      	mov	r0, r3
 80102b6:	f7ff fdd3 	bl	800fe60 <_ZN8touchgfx8TextAreaD1Ev>
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	4618      	mov	r0, r3
 80102be:	3708      	adds	r7, #8
 80102c0:	46bd      	mov	sp, r7
 80102c2:	bd80      	pop	{r7, pc}
 80102c4:	0803340c 	.word	0x0803340c

080102c8 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 80102c8:	b580      	push	{r7, lr}
 80102ca:	b082      	sub	sp, #8
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	6078      	str	r0, [r7, #4]
 80102d0:	6878      	ldr	r0, [r7, #4]
 80102d2:	f7ff ffe7 	bl	80102a4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80102d6:	2140      	movs	r1, #64	; 0x40
 80102d8:	6878      	ldr	r0, [r7, #4]
 80102da:	f01c ff2f 	bl	802d13c <_ZdlPvj>
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	4618      	mov	r0, r3
 80102e2:	3708      	adds	r7, #8
 80102e4:	46bd      	mov	sp, r7
 80102e6:	bd80      	pop	{r7, pc}

080102e8 <_ZN8touchgfx19ScrollableContainer22enableHorizontalScrollEb>:
     * @param  enable If true (default), horizontal scrolling is enabled. If false, horizontal
     *                scrolling is disabled.
     *
     * @see enableVerticalScroll
     */
    void enableHorizontalScroll(bool enable)
 80102e8:	b480      	push	{r7}
 80102ea:	b083      	sub	sp, #12
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
 80102f0:	460b      	mov	r3, r1
 80102f2:	70fb      	strb	r3, [r7, #3]
    {
        scrollableX = enable;
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	78fa      	ldrb	r2, [r7, #3]
 80102f8:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    }
 80102fc:	bf00      	nop
 80102fe:	370c      	adds	r7, #12
 8010300:	46bd      	mov	sp, r7
 8010302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010306:	4770      	bx	lr

08010308 <_ZN8touchgfx10ListLayoutC1ENS_9DirectionE>:
     * @param  d (Optional) The direction to place the elements. ::SOUTH (Default)
     *           places the elements vertically, ::EAST places the elements horizontally.
     *
     * @see setDirection
     */
    ListLayout(const Direction d = SOUTH)
 8010308:	b580      	push	{r7, lr}
 801030a:	b082      	sub	sp, #8
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
 8010310:	460b      	mov	r3, r1
 8010312:	70fb      	strb	r3, [r7, #3]
        : Container(), direction(d), offset(0)
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	4618      	mov	r0, r3
 8010318:	f7ff feae 	bl	8010078 <_ZN8touchgfx9ContainerC1Ev>
 801031c:	4a0d      	ldr	r2, [pc, #52]	; (8010354 <_ZN8touchgfx10ListLayoutC1ENS_9DirectionE+0x4c>)
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	601a      	str	r2, [r3, #0]
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	78fa      	ldrb	r2, [r7, #3]
 8010326:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	2200      	movs	r2, #0
 801032e:	85da      	strh	r2, [r3, #46]	; 0x2e
    {
        assert((d == SOUTH || d == EAST) && "Chosen direction not supported");
 8010330:	78fb      	ldrb	r3, [r7, #3]
 8010332:	2b01      	cmp	r3, #1
 8010334:	d008      	beq.n	8010348 <_ZN8touchgfx10ListLayoutC1ENS_9DirectionE+0x40>
 8010336:	78fb      	ldrb	r3, [r7, #3]
 8010338:	2b02      	cmp	r3, #2
 801033a:	d005      	beq.n	8010348 <_ZN8touchgfx10ListLayoutC1ENS_9DirectionE+0x40>
 801033c:	4b06      	ldr	r3, [pc, #24]	; (8010358 <_ZN8touchgfx10ListLayoutC1ENS_9DirectionE+0x50>)
 801033e:	4a07      	ldr	r2, [pc, #28]	; (801035c <_ZN8touchgfx10ListLayoutC1ENS_9DirectionE+0x54>)
 8010340:	2136      	movs	r1, #54	; 0x36
 8010342:	4807      	ldr	r0, [pc, #28]	; (8010360 <_ZN8touchgfx10ListLayoutC1ENS_9DirectionE+0x58>)
 8010344:	f01d ffc8 	bl	802e2d8 <__assert_func>
    }
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	4618      	mov	r0, r3
 801034c:	3708      	adds	r7, #8
 801034e:	46bd      	mov	sp, r7
 8010350:	bd80      	pop	{r7, pc}
 8010352:	bf00      	nop
 8010354:	0803263c 	.word	0x0803263c
 8010358:	0802ff60 	.word	0x0802ff60
 801035c:	08031b6c 	.word	0x08031b6c
 8010360:	0802ffa0 	.word	0x0802ffa0

08010364 <_ZN8touchgfx4ViewI23sequenceScreenPresenterED1Ev>:
class View : public Screen
 8010364:	b580      	push	{r7, lr}
 8010366:	b082      	sub	sp, #8
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
 801036c:	4a05      	ldr	r2, [pc, #20]	; (8010384 <_ZN8touchgfx4ViewI23sequenceScreenPresenterED1Ev+0x20>)
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	601a      	str	r2, [r3, #0]
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	4618      	mov	r0, r3
 8010376:	f7fe fced 	bl	800ed54 <_ZN8touchgfx6ScreenD1Ev>
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	4618      	mov	r0, r3
 801037e:	3708      	adds	r7, #8
 8010380:	46bd      	mov	sp, r7
 8010382:	bd80      	pop	{r7, pc}
 8010384:	08031b40 	.word	0x08031b40

08010388 <_ZN8touchgfx4ViewI23sequenceScreenPresenterED0Ev>:
 8010388:	b580      	push	{r7, lr}
 801038a:	b082      	sub	sp, #8
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
 8010390:	6878      	ldr	r0, [r7, #4]
 8010392:	f7ff ffe7 	bl	8010364 <_ZN8touchgfx4ViewI23sequenceScreenPresenterED1Ev>
 8010396:	2140      	movs	r1, #64	; 0x40
 8010398:	6878      	ldr	r0, [r7, #4]
 801039a:	f01c fecf 	bl	802d13c <_ZdlPvj>
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	4618      	mov	r0, r3
 80103a2:	3708      	adds	r7, #8
 80103a4:	46bd      	mov	sp, r7
 80103a6:	bd80      	pop	{r7, pc}

080103a8 <_ZN22sequenceScreenViewBaseD1Ev>:

class sequenceScreenViewBase : public touchgfx::View<sequenceScreenPresenter>
{
public:
    sequenceScreenViewBase();
    virtual ~sequenceScreenViewBase() {}
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b082      	sub	sp, #8
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
 80103b0:	4a24      	ldr	r2, [pc, #144]	; (8010444 <_ZN22sequenceScreenViewBaseD1Ev+0x9c>)
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	601a      	str	r2, [r3, #0]
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80103bc:	4618      	mov	r0, r3
 80103be:	f000 fc03 	bl	8010bc8 <_ZN8touchgfx8CallbackI22sequenceScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80103c8:	4618      	mov	r0, r3
 80103ca:	f7ff ff6b 	bl	80102a4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80103d4:	4618      	mov	r0, r3
 80103d6:	f000 fc45 	bl	8010c64 <_ZN8touchgfx10ListLayoutD1Ev>
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80103e0:	4618      	mov	r0, r3
 80103e2:	f000 fc13 	bl	8010c0c <_ZN8touchgfx19ScrollableContainerD1Ev>
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80103ec:	4618      	mov	r0, r3
 80103ee:	f7ff fd95 	bl	800ff1c <_ZN8touchgfx14ButtonWithIconD1Ev>
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80103f8:	4618      	mov	r0, r3
 80103fa:	f7ff fd8f 	bl	800ff1c <_ZN8touchgfx14ButtonWithIconD1Ev>
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8010404:	4618      	mov	r0, r3
 8010406:	f7ff fd89 	bl	800ff1c <_ZN8touchgfx14ButtonWithIconD1Ev>
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	33d8      	adds	r3, #216	; 0xd8
 801040e:	4618      	mov	r0, r3
 8010410:	f7ff fd84 	bl	800ff1c <_ZN8touchgfx14ButtonWithIconD1Ev>
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	339c      	adds	r3, #156	; 0x9c
 8010418:	4618      	mov	r0, r3
 801041a:	f7ff fd7f 	bl	800ff1c <_ZN8touchgfx14ButtonWithIconD1Ev>
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	3370      	adds	r3, #112	; 0x70
 8010422:	4618      	mov	r0, r3
 8010424:	f7ff fcd8 	bl	800fdd8 <_ZN8touchgfx5ImageD1Ev>
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	3340      	adds	r3, #64	; 0x40
 801042c:	4618      	mov	r0, r3
 801042e:	f7ff fcb1 	bl	800fd94 <_ZN8touchgfx3BoxD1Ev>
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	4618      	mov	r0, r3
 8010436:	f7ff ff95 	bl	8010364 <_ZN8touchgfx4ViewI23sequenceScreenPresenterED1Ev>
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	4618      	mov	r0, r3
 801043e:	3708      	adds	r7, #8
 8010440:	46bd      	mov	sp, r7
 8010442:	bd80      	pop	{r7, pc}
 8010444:	08031ae4 	.word	0x08031ae4

08010448 <_ZN22sequenceScreenViewBaseD0Ev>:
 8010448:	b580      	push	{r7, lr}
 801044a:	b082      	sub	sp, #8
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
 8010450:	6878      	ldr	r0, [r7, #4]
 8010452:	f7ff ffa9 	bl	80103a8 <_ZN22sequenceScreenViewBaseD1Ev>
 8010456:	f44f 7175 	mov.w	r1, #980	; 0x3d4
 801045a:	6878      	ldr	r0, [r7, #4]
 801045c:	f01c fe6e 	bl	802d13c <_ZdlPvj>
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	4618      	mov	r0, r3
 8010464:	3708      	adds	r7, #8
 8010466:	46bd      	mov	sp, r7
 8010468:	bd80      	pop	{r7, pc}

0801046a <_ZN22sequenceScreenViewBase26SaveSequenceButton_ClickedEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void SaveSequenceButton_Clicked()
 801046a:	b480      	push	{r7}
 801046c:	b083      	sub	sp, #12
 801046e:	af00      	add	r7, sp, #0
 8010470:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in sequenceScreen
    }
 8010472:	bf00      	nop
 8010474:	370c      	adds	r7, #12
 8010476:	46bd      	mov	sp, r7
 8010478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047c:	4770      	bx	lr

0801047e <_ZN22sequenceScreenViewBase26PlaySequenceButton_ClickedEv>:

    virtual void PlaySequenceButton_Clicked()
 801047e:	b480      	push	{r7}
 8010480:	b083      	sub	sp, #12
 8010482:	af00      	add	r7, sp, #0
 8010484:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in sequenceScreen
    }
 8010486:	bf00      	nop
 8010488:	370c      	adds	r7, #12
 801048a:	46bd      	mov	sp, r7
 801048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010490:	4770      	bx	lr

08010492 <_ZN22sequenceScreenViewBase28AddNewPositionButton_ClickedEv>:

    virtual void AddNewPositionButton_Clicked()
 8010492:	b480      	push	{r7}
 8010494:	b083      	sub	sp, #12
 8010496:	af00      	add	r7, sp, #0
 8010498:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in sequenceScreen
    }
 801049a:	bf00      	nop
 801049c:	370c      	adds	r7, #12
 801049e:	46bd      	mov	sp, r7
 80104a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a4:	4770      	bx	lr

080104a6 <_ZN22sequenceScreenViewBase28DeletePositionButton_ClickedEv>:

    virtual void DeletePositionButton_Clicked()
 80104a6:	b480      	push	{r7}
 80104a8:	b083      	sub	sp, #12
 80104aa:	af00      	add	r7, sp, #0
 80104ac:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in sequenceScreen
    }
 80104ae:	bf00      	nop
 80104b0:	370c      	adds	r7, #12
 80104b2:	46bd      	mov	sp, r7
 80104b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b8:	4770      	bx	lr

080104ba <_ZN22sequenceScreenViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 80104ba:	b580      	push	{r7, lr}
 80104bc:	b082      	sub	sp, #8
 80104be:	af00      	add	r7, sp, #0
 80104c0:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80104c2:	f00e fe01 	bl	801f0c8 <_ZN8touchgfx11Application11getInstanceEv>
 80104c6:	4603      	mov	r3, r0
    }
 80104c8:	4618      	mov	r0, r3
 80104ca:	3708      	adds	r7, #8
 80104cc:	46bd      	mov	sp, r7
 80104ce:	bd80      	pop	{r7, pc}

080104d0 <_ZN22sequenceScreenViewBaseC1Ev>:
#include <gui_generated/sequencescreen_screen/sequenceScreenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

sequenceScreenViewBase::sequenceScreenViewBase() :
 80104d0:	b590      	push	{r4, r7, lr}
 80104d2:	b0a7      	sub	sp, #156	; 0x9c
 80104d4:	af02      	add	r7, sp, #8
 80104d6:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &sequenceScreenViewBase::buttonCallbackHandler)
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	4618      	mov	r0, r3
 80104dc:	f000 fb3e 	bl	8010b5c <_ZN8touchgfx4ViewI23sequenceScreenPresenterEC1Ev>
 80104e0:	4ae2      	ldr	r2, [pc, #904]	; (801086c <_ZN22sequenceScreenViewBaseC1Ev+0x39c>)
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	601a      	str	r2, [r3, #0]
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	3340      	adds	r3, #64	; 0x40
 80104ea:	4618      	mov	r0, r3
 80104ec:	f7fe fd26 	bl	800ef3c <_ZN8touchgfx3BoxC1Ev>
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80104f6:	f107 0310 	add.w	r3, r7, #16
 80104fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80104fe:	4618      	mov	r0, r3
 8010500:	f7fe fbd9 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 8010504:	f107 0310 	add.w	r3, r7, #16
 8010508:	4619      	mov	r1, r3
 801050a:	4620      	mov	r0, r4
 801050c:	f7fe fd4c 	bl	800efa8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	339c      	adds	r3, #156	; 0x9c
 8010514:	4618      	mov	r0, r3
 8010516:	f00d fdaf 	bl	801e078 <_ZN8touchgfx14ButtonWithIconC1Ev>
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	33d8      	adds	r3, #216	; 0xd8
 801051e:	4618      	mov	r0, r3
 8010520:	f00d fdaa 	bl	801e078 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	f503 738a 	add.w	r3, r3, #276	; 0x114
 801052a:	4618      	mov	r0, r3
 801052c:	f00d fda4 	bl	801e078 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010536:	4618      	mov	r0, r3
 8010538:	f00d fd9e 	bl	801e078 <_ZN8touchgfx14ButtonWithIconC1Ev>
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8010542:	4618      	mov	r0, r3
 8010544:	f00d fd98 	bl	801e078 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801054e:	4618      	mov	r0, r3
 8010550:	f00b fd6c 	bl	801c02c <_ZN8touchgfx19ScrollableContainerC1Ev>
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801055a:	2101      	movs	r1, #1
 801055c:	4618      	mov	r0, r3
 801055e:	f7ff fed3 	bl	8010308 <_ZN8touchgfx10ListLayoutC1ENS_9DirectionE>
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8010568:	4618      	mov	r0, r3
 801056a:	f7ff fd9b 	bl	80100a4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	f503 7071 	add.w	r0, r3, #964	; 0x3c4
 8010574:	4bbe      	ldr	r3, [pc, #760]	; (8010870 <_ZN22sequenceScreenViewBaseC1Ev+0x3a0>)
 8010576:	617b      	str	r3, [r7, #20]
 8010578:	2300      	movs	r3, #0
 801057a:	61bb      	str	r3, [r7, #24]
 801057c:	f107 0314 	add.w	r3, r7, #20
 8010580:	cb0c      	ldmia	r3, {r2, r3}
 8010582:	6879      	ldr	r1, [r7, #4]
 8010584:	f000 fb00 	bl	8010b88 <_ZN8touchgfx8CallbackI22sequenceScreenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 240, 320);
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	f103 0040 	add.w	r0, r3, #64	; 0x40
 801058e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8010592:	9300      	str	r3, [sp, #0]
 8010594:	23f0      	movs	r3, #240	; 0xf0
 8010596:	2200      	movs	r2, #0
 8010598:	2100      	movs	r1, #0
 801059a:	f7fc f9b3 	bl	800c904 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80105a4:	2200      	movs	r2, #0
 80105a6:	2100      	movs	r1, #0
 80105a8:	2000      	movs	r0, #0
 80105aa:	f7fe fe9d 	bl	800f2e8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80105ae:	4603      	mov	r3, r0
 80105b0:	4619      	mov	r1, r3
 80105b2:	4620      	mov	r0, r4
 80105b4:	f7fe fcea 	bl	800ef8c <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    backgroundImage.setXY(0, 0);
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	3370      	adds	r3, #112	; 0x70
 80105bc:	2200      	movs	r2, #0
 80105be:	2100      	movs	r1, #0
 80105c0:	4618      	mov	r0, r3
 80105c2:	f7fc fa04 	bl	800c9ce <_ZN8touchgfx8Drawable5setXYEss>
    backgroundImage.setBitmap(touchgfx::Bitmap(BITMAP_BLUE_BACKGROUNDS_MAIN_BG_PORTRAIT_240X320PX_ID));
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80105cc:	f107 031c 	add.w	r3, r7, #28
 80105d0:	2100      	movs	r1, #0
 80105d2:	4618      	mov	r0, r3
 80105d4:	f7fe fb6f 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 80105d8:	f107 031c 	add.w	r3, r7, #28
 80105dc:	4619      	mov	r1, r3
 80105de:	4620      	mov	r0, r4
 80105e0:	f00d fd6e 	bl	801e0c0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    backButton.setXY(0, 260);
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	339c      	adds	r3, #156	; 0x9c
 80105e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80105ec:	2100      	movs	r1, #0
 80105ee:	4618      	mov	r0, r3
 80105f0:	f7fc f9ed 	bl	800c9ce <_ZN8touchgfx8Drawable5setXYEss>
    backButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_BACK_ARROW_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_BACK_ARROW_32_ID));
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 80105fa:	f107 0320 	add.w	r3, r7, #32
 80105fe:	2101      	movs	r1, #1
 8010600:	4618      	mov	r0, r3
 8010602:	f7fe fb58 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 8010606:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801060a:	2102      	movs	r1, #2
 801060c:	4618      	mov	r0, r3
 801060e:	f7fe fb52 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 8010612:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010616:	2104      	movs	r1, #4
 8010618:	4618      	mov	r0, r3
 801061a:	f7fe fb4c 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 801061e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010622:	2104      	movs	r1, #4
 8010624:	4618      	mov	r0, r3
 8010626:	f7fe fb46 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 801062a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 801062e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8010632:	f107 0120 	add.w	r1, r7, #32
 8010636:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801063a:	9300      	str	r3, [sp, #0]
 801063c:	4603      	mov	r3, r0
 801063e:	4620      	mov	r0, r4
 8010640:	f00d fc76 	bl	801df30 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    backButton.setIconXY(22, 15);
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	339c      	adds	r3, #156	; 0x9c
 8010648:	220f      	movs	r2, #15
 801064a:	2116      	movs	r1, #22
 801064c:	4618      	mov	r0, r3
 801064e:	f7fe fd66 	bl	800f11e <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    backButton.setAction(buttonCallback);
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801065e:	4619      	mov	r1, r3
 8010660:	4610      	mov	r0, r2
 8010662:	f7fe fc17 	bl	800ee94 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    deletePositionButton.setXY(180, 0);
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	33d8      	adds	r3, #216	; 0xd8
 801066a:	2200      	movs	r2, #0
 801066c:	21b4      	movs	r1, #180	; 0xb4
 801066e:	4618      	mov	r0, r3
 8010670:	f7fc f9ad 	bl	800c9ce <_ZN8touchgfx8Drawable5setXYEss>
    deletePositionButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_REMOVE_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_REMOVE_32_ID));
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 801067a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801067e:	2101      	movs	r1, #1
 8010680:	4618      	mov	r0, r3
 8010682:	f7fe fb18 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 8010686:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801068a:	2102      	movs	r1, #2
 801068c:	4618      	mov	r0, r3
 801068e:	f7fe fb12 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 8010692:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010696:	2107      	movs	r1, #7
 8010698:	4618      	mov	r0, r3
 801069a:	f7fe fb0c 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 801069e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80106a2:	2107      	movs	r1, #7
 80106a4:	4618      	mov	r0, r3
 80106a6:	f7fe fb06 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 80106aa:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80106ae:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80106b2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80106b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80106ba:	9300      	str	r3, [sp, #0]
 80106bc:	4603      	mov	r3, r0
 80106be:	4620      	mov	r0, r4
 80106c0:	f00d fc36 	bl	801df30 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    deletePositionButton.setIconXY(16, 16);
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	33d8      	adds	r3, #216	; 0xd8
 80106c8:	2210      	movs	r2, #16
 80106ca:	2110      	movs	r1, #16
 80106cc:	4618      	mov	r0, r3
 80106ce:	f7fe fd26 	bl	800f11e <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    deletePositionButton.setAction(buttonCallback);
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80106de:	4619      	mov	r1, r3
 80106e0:	4610      	mov	r0, r2
 80106e2:	f7fe fbd7 	bl	800ee94 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    addNewPositionButton.setXY(90, 260);
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80106ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80106f0:	215a      	movs	r1, #90	; 0x5a
 80106f2:	4618      	mov	r0, r3
 80106f4:	f7fc f96b 	bl	800c9ce <_ZN8touchgfx8Drawable5setXYEss>
    addNewPositionButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_ADD_NEW_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_ADD_NEW_32_ID));
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	f503 748a 	add.w	r4, r3, #276	; 0x114
 80106fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010702:	2101      	movs	r1, #1
 8010704:	4618      	mov	r0, r3
 8010706:	f7fe fad6 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 801070a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801070e:	2102      	movs	r1, #2
 8010710:	4618      	mov	r0, r3
 8010712:	f7fe fad0 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 8010716:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801071a:	2103      	movs	r1, #3
 801071c:	4618      	mov	r0, r3
 801071e:	f7fe faca 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 8010722:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010726:	2103      	movs	r1, #3
 8010728:	4618      	mov	r0, r3
 801072a:	f7fe fac4 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 801072e:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8010732:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8010736:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801073a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801073e:	9300      	str	r3, [sp, #0]
 8010740:	4603      	mov	r3, r0
 8010742:	4620      	mov	r0, r4
 8010744:	f00d fbf4 	bl	801df30 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    addNewPositionButton.setIconXY(16, 16);
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	f503 738a 	add.w	r3, r3, #276	; 0x114
 801074e:	2210      	movs	r2, #16
 8010750:	2110      	movs	r1, #16
 8010752:	4618      	mov	r0, r3
 8010754:	f7fe fce3 	bl	800f11e <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    addNewPositionButton.setAction(buttonCallback);
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	f503 728a 	add.w	r2, r3, #276	; 0x114
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8010764:	4619      	mov	r1, r3
 8010766:	4610      	mov	r0, r2
 8010768:	f7fe fb94 	bl	800ee94 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    playSequenceButton.setXY(180, 260);
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010772:	f44f 7282 	mov.w	r2, #260	; 0x104
 8010776:	21b4      	movs	r1, #180	; 0xb4
 8010778:	4618      	mov	r0, r3
 801077a:	f7fc f928 	bl	800c9ce <_ZN8touchgfx8Drawable5setXYEss>
    playSequenceButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_PLAY_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_PLAY_32_ID));
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 8010784:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010788:	2101      	movs	r1, #1
 801078a:	4618      	mov	r0, r3
 801078c:	f7fe fa93 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 8010790:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010794:	2102      	movs	r1, #2
 8010796:	4618      	mov	r0, r3
 8010798:	f7fe fa8d 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 801079c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80107a0:	2106      	movs	r1, #6
 80107a2:	4618      	mov	r0, r3
 80107a4:	f7fe fa87 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 80107a8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80107ac:	2106      	movs	r1, #6
 80107ae:	4618      	mov	r0, r3
 80107b0:	f7fe fa81 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 80107b4:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80107b8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80107bc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80107c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80107c4:	9300      	str	r3, [sp, #0]
 80107c6:	4603      	mov	r3, r0
 80107c8:	4620      	mov	r0, r4
 80107ca:	f00d fbb1 	bl	801df30 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    playSequenceButton.setIconXY(20, 15);
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80107d4:	220f      	movs	r2, #15
 80107d6:	2114      	movs	r1, #20
 80107d8:	4618      	mov	r0, r3
 80107da:	f7fe fca0 	bl	800f11e <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    playSequenceButton.setAction(buttonCallback);
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80107ea:	4619      	mov	r1, r3
 80107ec:	4610      	mov	r0, r2
 80107ee:	f7fe fb51 	bl	800ee94 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    saveSequenceButton.setXY(0, 0);
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80107f8:	2200      	movs	r2, #0
 80107fa:	2100      	movs	r1, #0
 80107fc:	4618      	mov	r0, r3
 80107fe:	f7fc f8e6 	bl	800c9ce <_ZN8touchgfx8Drawable5setXYEss>
    saveSequenceButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_DONE_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_DONE_32_ID));
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	f503 74c6 	add.w	r4, r3, #396	; 0x18c
 8010808:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801080c:	2101      	movs	r1, #1
 801080e:	4618      	mov	r0, r3
 8010810:	f7fe fa51 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 8010814:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8010818:	2102      	movs	r1, #2
 801081a:	4618      	mov	r0, r3
 801081c:	f7fe fa4b 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 8010820:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010824:	2105      	movs	r1, #5
 8010826:	4618      	mov	r0, r3
 8010828:	f7fe fa45 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 801082c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010830:	2105      	movs	r1, #5
 8010832:	4618      	mov	r0, r3
 8010834:	f7fe fa3f 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 8010838:	f107 0068 	add.w	r0, r7, #104	; 0x68
 801083c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8010840:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8010844:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010848:	9300      	str	r3, [sp, #0]
 801084a:	4603      	mov	r3, r0
 801084c:	4620      	mov	r0, r4
 801084e:	f00d fb6f 	bl	801df30 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    saveSequenceButton.setIconXY(15, 15);
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8010858:	220f      	movs	r2, #15
 801085a:	210f      	movs	r1, #15
 801085c:	4618      	mov	r0, r3
 801085e:	f7fe fc5e 	bl	800f11e <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    saveSequenceButton.setAction(buttonCallback);
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	f503 72c6 	add.w	r2, r3, #396	; 0x18c
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	e003      	b.n	8010874 <_ZN22sequenceScreenViewBaseC1Ev+0x3a4>
 801086c:	08031ae4 	.word	0x08031ae4
 8010870:	08010acd 	.word	0x08010acd
 8010874:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8010878:	4619      	mov	r1, r3
 801087a:	4610      	mov	r0, r2
 801087c:	f7fe fb0a 	bl	800ee94 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    scrollableContainer.setPosition(0, 60, 240, 200);
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	f503 70e4 	add.w	r0, r3, #456	; 0x1c8
 8010886:	23c8      	movs	r3, #200	; 0xc8
 8010888:	9300      	str	r3, [sp, #0]
 801088a:	23f0      	movs	r3, #240	; 0xf0
 801088c:	223c      	movs	r2, #60	; 0x3c
 801088e:	2100      	movs	r1, #0
 8010890:	f7fc f838 	bl	800c904 <_ZN8touchgfx8Drawable11setPositionEssss>
    scrollableContainer.enableHorizontalScroll(false);
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801089a:	2100      	movs	r1, #0
 801089c:	4618      	mov	r0, r3
 801089e:	f7ff fd23 	bl	80102e8 <_ZN8touchgfx19ScrollableContainer22enableHorizontalScrollEb>
    scrollableContainer.setScrollbarsColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	f503 74e4 	add.w	r4, r3, #456	; 0x1c8
 80108a8:	2200      	movs	r2, #0
 80108aa:	2100      	movs	r1, #0
 80108ac:	2000      	movs	r0, #0
 80108ae:	f7fe fd1b 	bl	800f2e8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80108b2:	4603      	mov	r3, r0
 80108b4:	4619      	mov	r1, r3
 80108b6:	4620      	mov	r0, r4
 80108b8:	f00b ffcf 	bl	801c85a <_ZN8touchgfx19ScrollableContainer18setScrollbarsColorENS_9colortypeE>

    positionsList.setDirection(touchgfx::SOUTH);
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80108c2:	2101      	movs	r1, #1
 80108c4:	4618      	mov	r0, r3
 80108c6:	f00a ff9f 	bl	801b808 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE>
    positionsList.setPosition(-5, 0, 250, 250);
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	f503 7023 	add.w	r0, r3, #652	; 0x28c
 80108d0:	23fa      	movs	r3, #250	; 0xfa
 80108d2:	9300      	str	r3, [sp, #0]
 80108d4:	23fa      	movs	r3, #250	; 0xfa
 80108d6:	2200      	movs	r2, #0
 80108d8:	f06f 0104 	mvn.w	r1, #4
 80108dc:	f7fc f812 	bl	800c904 <_ZN8touchgfx8Drawable11setPositionEssss>
    scrollableContainer.add(positionsList);
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	f503 72e4 	add.w	r2, r3, #456	; 0x1c8
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80108ec:	4619      	mov	r1, r3
 80108ee:	4610      	mov	r0, r2
 80108f0:	f00b f8ef 	bl	801bad2 <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE>
    scrollableContainer.setScrollbarsPermanentlyVisible();
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80108fa:	4618      	mov	r0, r3
 80108fc:	f00b ffb5 	bl	801c86a <_ZN8touchgfx19ScrollableContainer31setScrollbarsPermanentlyVisibleEv>
    scrollableContainer.setScrollbarsVisible(false);
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8010906:	2100      	movs	r1, #0
 8010908:	4618      	mov	r0, r3
 801090a:	f00b ffab 	bl	801c864 <_ZN8touchgfx19ScrollableContainer20setScrollbarsVisibleEb>

    infoTextArea.setPosition(60, 0, 120, 60);
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	f503 702f 	add.w	r0, r3, #700	; 0x2bc
 8010914:	233c      	movs	r3, #60	; 0x3c
 8010916:	9300      	str	r3, [sp, #0]
 8010918:	2378      	movs	r3, #120	; 0x78
 801091a:	2200      	movs	r2, #0
 801091c:	213c      	movs	r1, #60	; 0x3c
 801091e:	f7fb fff1 	bl	800c904 <_ZN8touchgfx8Drawable11setPositionEssss>
    infoTextArea.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 8010928:	2200      	movs	r2, #0
 801092a:	2100      	movs	r1, #0
 801092c:	2000      	movs	r0, #0
 801092e:	f7fe fcdb 	bl	800f2e8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010932:	4603      	mov	r3, r0
 8010934:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 8010938:	60fb      	str	r3, [r7, #12]
        this->color = color;
 801093a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801093e:	68fa      	ldr	r2, [r7, #12]
 8010940:	631a      	str	r2, [r3, #48]	; 0x30
    infoTextArea.setLinespacing(0);
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8010948:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801094c:	2300      	movs	r3, #0
 801094e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
        linespace = space;
 8010952:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010956:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 801095a:	869a      	strh	r2, [r3, #52]	; 0x34
    Unicode::snprintf(infoTextAreaBuffer, INFOTEXTAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID10).getText());
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	f503 743f 	add.w	r4, r3, #764	; 0x2fc
 8010962:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8010966:	2108      	movs	r1, #8
 8010968:	4618      	mov	r0, r3
 801096a:	f7fe fb5b 	bl	800f024 <_ZN8touchgfx9TypedTextC1Et>
 801096e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8010972:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8010976:	4b48      	ldr	r3, [pc, #288]	; (8010a98 <_ZN22sequenceScreenViewBaseC1Ev+0x5c8>)
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d105      	bne.n	801098a <_ZN22sequenceScreenViewBaseC1Ev+0x4ba>
 801097e:	4b47      	ldr	r3, [pc, #284]	; (8010a9c <_ZN22sequenceScreenViewBaseC1Ev+0x5cc>)
 8010980:	4a47      	ldr	r2, [pc, #284]	; (8010aa0 <_ZN22sequenceScreenViewBaseC1Ev+0x5d0>)
 8010982:	21b1      	movs	r1, #177	; 0xb1
 8010984:	4847      	ldr	r0, [pc, #284]	; (8010aa4 <_ZN22sequenceScreenViewBaseC1Ev+0x5d4>)
 8010986:	f01d fca7 	bl	802e2d8 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 801098a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801098e:	889a      	ldrh	r2, [r3, #4]
 8010990:	4b45      	ldr	r3, [pc, #276]	; (8010aa8 <_ZN22sequenceScreenViewBaseC1Ev+0x5d8>)
 8010992:	881b      	ldrh	r3, [r3, #0]
 8010994:	429a      	cmp	r2, r3
 8010996:	d305      	bcc.n	80109a4 <_ZN22sequenceScreenViewBaseC1Ev+0x4d4>
 8010998:	4b44      	ldr	r3, [pc, #272]	; (8010aac <_ZN22sequenceScreenViewBaseC1Ev+0x5dc>)
 801099a:	4a41      	ldr	r2, [pc, #260]	; (8010aa0 <_ZN22sequenceScreenViewBaseC1Ev+0x5d0>)
 801099c:	21b2      	movs	r1, #178	; 0xb2
 801099e:	4841      	ldr	r0, [pc, #260]	; (8010aa4 <_ZN22sequenceScreenViewBaseC1Ev+0x5d4>)
 80109a0:	f01d fc9a 	bl	802e2d8 <__assert_func>
        return texts->getText(typedTextId);
 80109a4:	4b42      	ldr	r3, [pc, #264]	; (8010ab0 <_ZN22sequenceScreenViewBaseC1Ev+0x5e0>)
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 80109ac:	4611      	mov	r1, r2
 80109ae:	4618      	mov	r0, r3
 80109b0:	f7fe f8fc 	bl	800ebac <_ZNK8touchgfx5Texts7getTextEt>
 80109b4:	4603      	mov	r3, r0
 80109b6:	4a3f      	ldr	r2, [pc, #252]	; (8010ab4 <_ZN22sequenceScreenViewBaseC1Ev+0x5e4>)
 80109b8:	2164      	movs	r1, #100	; 0x64
 80109ba:	4620      	mov	r0, r4
 80109bc:	f010 fe6c 	bl	8021698 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80109c0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80109c4:	4618      	mov	r0, r3
 80109c6:	f7fb ff51 	bl	800c86c <_ZN8touchgfx9TypedTextD1Ev>
    infoTextArea.setWildcard(infoTextAreaBuffer);
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	f503 722f 	add.w	r2, r3, #700	; 0x2bc
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 80109d6:	4619      	mov	r1, r3
 80109d8:	4610      	mov	r0, r2
 80109da:	f7ff fb79 	bl	80100d0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    infoTextArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID6));
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 80109e4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80109e8:	2105      	movs	r1, #5
 80109ea:	4618      	mov	r0, r3
 80109ec:	f7fe fb1a 	bl	800f024 <_ZN8touchgfx9TypedTextC1Et>
 80109f0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80109f4:	4619      	mov	r1, r3
 80109f6:	4620      	mov	r0, r4
 80109f8:	f00d f8b4 	bl	801db64 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 80109fc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8010a00:	4618      	mov	r0, r3
 8010a02:	f7fb ff33 	bl	800c86c <_ZN8touchgfx9TypedTextD1Ev>

    add(__background);
 8010a06:	687a      	ldr	r2, [r7, #4]
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	3340      	adds	r3, #64	; 0x40
 8010a0c:	4619      	mov	r1, r3
 8010a0e:	4610      	mov	r0, r2
 8010a10:	f7fe f9f8 	bl	800ee04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(backgroundImage);
 8010a14:	687a      	ldr	r2, [r7, #4]
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	3370      	adds	r3, #112	; 0x70
 8010a1a:	4619      	mov	r1, r3
 8010a1c:	4610      	mov	r0, r2
 8010a1e:	f7fe f9f1 	bl	800ee04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(backButton);
 8010a22:	687a      	ldr	r2, [r7, #4]
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	339c      	adds	r3, #156	; 0x9c
 8010a28:	4619      	mov	r1, r3
 8010a2a:	4610      	mov	r0, r2
 8010a2c:	f7fe f9ea 	bl	800ee04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(deletePositionButton);
 8010a30:	687a      	ldr	r2, [r7, #4]
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	33d8      	adds	r3, #216	; 0xd8
 8010a36:	4619      	mov	r1, r3
 8010a38:	4610      	mov	r0, r2
 8010a3a:	f7fe f9e3 	bl	800ee04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(addNewPositionButton);
 8010a3e:	687a      	ldr	r2, [r7, #4]
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8010a46:	4619      	mov	r1, r3
 8010a48:	4610      	mov	r0, r2
 8010a4a:	f7fe f9db 	bl	800ee04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(playSequenceButton);
 8010a4e:	687a      	ldr	r2, [r7, #4]
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010a56:	4619      	mov	r1, r3
 8010a58:	4610      	mov	r0, r2
 8010a5a:	f7fe f9d3 	bl	800ee04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(saveSequenceButton);
 8010a5e:	687a      	ldr	r2, [r7, #4]
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8010a66:	4619      	mov	r1, r3
 8010a68:	4610      	mov	r0, r2
 8010a6a:	f7fe f9cb 	bl	800ee04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(scrollableContainer);
 8010a6e:	687a      	ldr	r2, [r7, #4]
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8010a76:	4619      	mov	r1, r3
 8010a78:	4610      	mov	r0, r2
 8010a7a:	f7fe f9c3 	bl	800ee04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(infoTextArea);
 8010a7e:	687a      	ldr	r2, [r7, #4]
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8010a86:	4619      	mov	r1, r3
 8010a88:	4610      	mov	r0, r2
 8010a8a:	f7fe f9bb 	bl	800ee04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	4618      	mov	r0, r3
 8010a92:	3794      	adds	r7, #148	; 0x94
 8010a94:	46bd      	mov	sp, r7
 8010a96:	bd90      	pop	{r4, r7, pc}
 8010a98:	20012864 	.word	0x20012864
 8010a9c:	0803007c 	.word	0x0803007c
 8010aa0:	08031ba4 	.word	0x08031ba4
 8010aa4:	080300c0 	.word	0x080300c0
 8010aa8:	20012868 	.word	0x20012868
 8010aac:	08030108 	.word	0x08030108
 8010ab0:	20012870 	.word	0x20012870
 8010ab4:	0803015c 	.word	0x0803015c

08010ab8 <_ZN22sequenceScreenViewBase11setupScreenEv>:

void sequenceScreenViewBase::setupScreen()
{
 8010ab8:	b480      	push	{r7}
 8010aba:	b083      	sub	sp, #12
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	6078      	str	r0, [r7, #4]

}
 8010ac0:	bf00      	nop
 8010ac2:	370c      	adds	r7, #12
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aca:	4770      	bx	lr

08010acc <_ZN22sequenceScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void sequenceScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8010acc:	b580      	push	{r7, lr}
 8010ace:	b082      	sub	sp, #8
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	6078      	str	r0, [r7, #4]
 8010ad4:	6039      	str	r1, [r7, #0]
    if (&src == &backButton)
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	339c      	adds	r3, #156	; 0x9c
 8010ada:	683a      	ldr	r2, [r7, #0]
 8010adc:	429a      	cmp	r2, r3
 8010ade:	d107      	bne.n	8010af0 <_ZN22sequenceScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //BackButton_Clicked
        //When backButton clicked change screen to mainScreen
        //Go to mainScreen with screen transition towards West
        application().gotomainScreenScreenSlideTransitionWest();
 8010ae0:	6878      	ldr	r0, [r7, #4]
 8010ae2:	f7ff fcea 	bl	80104ba <_ZN22sequenceScreenViewBase11applicationEv>
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	4618      	mov	r0, r3
 8010aea:	f7fc f9eb 	bl	800cec4 <_ZN23FrontendApplicationBase39gotomainScreenScreenSlideTransitionWestEv>
        //SaveSequenceButton_Clicked
        //When saveSequenceButton clicked call virtual function
        //Call SaveSequenceButton_Clicked
        SaveSequenceButton_Clicked();
    }
}
 8010aee:	e031      	b.n	8010b54 <_ZN22sequenceScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x88>
    else if (&src == &deletePositionButton)
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	33d8      	adds	r3, #216	; 0xd8
 8010af4:	683a      	ldr	r2, [r7, #0]
 8010af6:	429a      	cmp	r2, r3
 8010af8:	d106      	bne.n	8010b08 <_ZN22sequenceScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3c>
        DeletePositionButton_Clicked();
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	3338      	adds	r3, #56	; 0x38
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	6878      	ldr	r0, [r7, #4]
 8010b04:	4798      	blx	r3
}
 8010b06:	e025      	b.n	8010b54 <_ZN22sequenceScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x88>
    else if (&src == &addNewPositionButton)
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8010b0e:	683a      	ldr	r2, [r7, #0]
 8010b10:	429a      	cmp	r2, r3
 8010b12:	d106      	bne.n	8010b22 <_ZN22sequenceScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x56>
        AddNewPositionButton_Clicked();
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	3334      	adds	r3, #52	; 0x34
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	6878      	ldr	r0, [r7, #4]
 8010b1e:	4798      	blx	r3
}
 8010b20:	e018      	b.n	8010b54 <_ZN22sequenceScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x88>
    else if (&src == &playSequenceButton)
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010b28:	683a      	ldr	r2, [r7, #0]
 8010b2a:	429a      	cmp	r2, r3
 8010b2c:	d106      	bne.n	8010b3c <_ZN22sequenceScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x70>
        PlaySequenceButton_Clicked();
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	3330      	adds	r3, #48	; 0x30
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	6878      	ldr	r0, [r7, #4]
 8010b38:	4798      	blx	r3
}
 8010b3a:	e00b      	b.n	8010b54 <_ZN22sequenceScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x88>
    else if (&src == &saveSequenceButton)
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8010b42:	683a      	ldr	r2, [r7, #0]
 8010b44:	429a      	cmp	r2, r3
 8010b46:	d105      	bne.n	8010b54 <_ZN22sequenceScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x88>
        SaveSequenceButton_Clicked();
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	332c      	adds	r3, #44	; 0x2c
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	6878      	ldr	r0, [r7, #4]
 8010b52:	4798      	blx	r3
}
 8010b54:	bf00      	nop
 8010b56:	3708      	adds	r7, #8
 8010b58:	46bd      	mov	sp, r7
 8010b5a:	bd80      	pop	{r7, pc}

08010b5c <_ZN8touchgfx4ViewI23sequenceScreenPresenterEC1Ev>:
    View()
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	b082      	sub	sp, #8
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	4618      	mov	r0, r3
 8010b68:	f00f faea 	bl	8020140 <_ZN8touchgfx6ScreenC1Ev>
 8010b6c:	4a05      	ldr	r2, [pc, #20]	; (8010b84 <_ZN8touchgfx4ViewI23sequenceScreenPresenterEC1Ev+0x28>)
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	601a      	str	r2, [r3, #0]
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	2200      	movs	r2, #0
 8010b76:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	3708      	adds	r7, #8
 8010b7e:	46bd      	mov	sp, r7
 8010b80:	bd80      	pop	{r7, pc}
 8010b82:	bf00      	nop
 8010b84:	08031b40 	.word	0x08031b40

08010b88 <_ZN8touchgfx8CallbackI22sequenceScreenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8010b88:	b580      	push	{r7, lr}
 8010b8a:	b084      	sub	sp, #16
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	60f8      	str	r0, [r7, #12]
 8010b90:	60b9      	str	r1, [r7, #8]
 8010b92:	4639      	mov	r1, r7
 8010b94:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	f7fe fff4 	bl	800fb88 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8010ba0:	4a08      	ldr	r2, [pc, #32]	; (8010bc4 <_ZN8touchgfx8CallbackI22sequenceScreenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	68ba      	ldr	r2, [r7, #8]
 8010baa:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	3308      	adds	r3, #8
 8010bb0:	463a      	mov	r2, r7
 8010bb2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010bb6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	3710      	adds	r7, #16
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	bd80      	pop	{r7, pc}
 8010bc4:	08031b28 	.word	0x08031b28

08010bc8 <_ZN8touchgfx8CallbackI22sequenceScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8010bc8:	b580      	push	{r7, lr}
 8010bca:	b082      	sub	sp, #8
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
 8010bd0:	4a05      	ldr	r2, [pc, #20]	; (8010be8 <_ZN8touchgfx8CallbackI22sequenceScreenViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	601a      	str	r2, [r3, #0]
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	4618      	mov	r0, r3
 8010bda:	f7ff f835 	bl	800fc48 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	4618      	mov	r0, r3
 8010be2:	3708      	adds	r7, #8
 8010be4:	46bd      	mov	sp, r7
 8010be6:	bd80      	pop	{r7, pc}
 8010be8:	08031b28 	.word	0x08031b28

08010bec <_ZN8touchgfx8CallbackI22sequenceScreenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8010bec:	b580      	push	{r7, lr}
 8010bee:	b082      	sub	sp, #8
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	6078      	str	r0, [r7, #4]
 8010bf4:	6878      	ldr	r0, [r7, #4]
 8010bf6:	f7ff ffe7 	bl	8010bc8 <_ZN8touchgfx8CallbackI22sequenceScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8010bfa:	2110      	movs	r1, #16
 8010bfc:	6878      	ldr	r0, [r7, #4]
 8010bfe:	f01c fa9d 	bl	802d13c <_ZdlPvj>
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	4618      	mov	r0, r3
 8010c06:	3708      	adds	r7, #8
 8010c08:	46bd      	mov	sp, r7
 8010c0a:	bd80      	pop	{r7, pc}

08010c0c <_ZN8touchgfx19ScrollableContainerD1Ev>:
class ScrollableContainer : public Container
 8010c0c:	b580      	push	{r7, lr}
 8010c0e:	b082      	sub	sp, #8
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	6078      	str	r0, [r7, #4]
 8010c14:	4a0a      	ldr	r2, [pc, #40]	; (8010c40 <_ZN8touchgfx19ScrollableContainerD1Ev+0x34>)
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	601a      	str	r2, [r3, #0]
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	3368      	adds	r3, #104	; 0x68
 8010c1e:	4618      	mov	r0, r3
 8010c20:	f7ff f8b8 	bl	800fd94 <_ZN8touchgfx3BoxD1Ev>
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	3338      	adds	r3, #56	; 0x38
 8010c28:	4618      	mov	r0, r3
 8010c2a:	f7ff f8b3 	bl	800fd94 <_ZN8touchgfx3BoxD1Ev>
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	4618      	mov	r0, r3
 8010c32:	f7ff f88d 	bl	800fd50 <_ZN8touchgfx9ContainerD1Ev>
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	4618      	mov	r0, r3
 8010c3a:	3708      	adds	r7, #8
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	bd80      	pop	{r7, pc}
 8010c40:	080327a8 	.word	0x080327a8

08010c44 <_ZN8touchgfx19ScrollableContainerD0Ev>:
 8010c44:	b580      	push	{r7, lr}
 8010c46:	b082      	sub	sp, #8
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	6078      	str	r0, [r7, #4]
 8010c4c:	6878      	ldr	r0, [r7, #4]
 8010c4e:	f7ff ffdd 	bl	8010c0c <_ZN8touchgfx19ScrollableContainerD1Ev>
 8010c52:	21c4      	movs	r1, #196	; 0xc4
 8010c54:	6878      	ldr	r0, [r7, #4]
 8010c56:	f01c fa71 	bl	802d13c <_ZdlPvj>
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	3708      	adds	r7, #8
 8010c60:	46bd      	mov	sp, r7
 8010c62:	bd80      	pop	{r7, pc}

08010c64 <_ZN8touchgfx10ListLayoutD1Ev>:
class ListLayout : public Container
 8010c64:	b580      	push	{r7, lr}
 8010c66:	b082      	sub	sp, #8
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	6078      	str	r0, [r7, #4]
 8010c6c:	4a05      	ldr	r2, [pc, #20]	; (8010c84 <_ZN8touchgfx10ListLayoutD1Ev+0x20>)
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	601a      	str	r2, [r3, #0]
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	4618      	mov	r0, r3
 8010c76:	f7ff f86b 	bl	800fd50 <_ZN8touchgfx9ContainerD1Ev>
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	3708      	adds	r7, #8
 8010c80:	46bd      	mov	sp, r7
 8010c82:	bd80      	pop	{r7, pc}
 8010c84:	0803263c 	.word	0x0803263c

08010c88 <_ZN8touchgfx10ListLayoutD0Ev>:
 8010c88:	b580      	push	{r7, lr}
 8010c8a:	b082      	sub	sp, #8
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	6078      	str	r0, [r7, #4]
 8010c90:	6878      	ldr	r0, [r7, #4]
 8010c92:	f7ff ffe7 	bl	8010c64 <_ZN8touchgfx10ListLayoutD1Ev>
 8010c96:	2130      	movs	r1, #48	; 0x30
 8010c98:	6878      	ldr	r0, [r7, #4]
 8010c9a:	f01c fa4f 	bl	802d13c <_ZdlPvj>
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	3708      	adds	r7, #8
 8010ca4:	46bd      	mov	sp, r7
 8010ca6:	bd80      	pop	{r7, pc}

08010ca8 <_ZN8touchgfx8CallbackI22sequenceScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b082      	sub	sp, #8
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
 8010cb0:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	685b      	ldr	r3, [r3, #4]
 8010cb6:	687a      	ldr	r2, [r7, #4]
 8010cb8:	68d2      	ldr	r2, [r2, #12]
 8010cba:	1052      	asrs	r2, r2, #1
 8010cbc:	1898      	adds	r0, r3, r2
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	68db      	ldr	r3, [r3, #12]
 8010cc2:	f003 0301 	and.w	r3, r3, #1
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d102      	bne.n	8010cd0 <_ZN8touchgfx8CallbackI22sequenceScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	689b      	ldr	r3, [r3, #8]
 8010cce:	e00a      	b.n	8010ce6 <_ZN8touchgfx8CallbackI22sequenceScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	685b      	ldr	r3, [r3, #4]
 8010cd4:	687a      	ldr	r2, [r7, #4]
 8010cd6:	68d2      	ldr	r2, [r2, #12]
 8010cd8:	1052      	asrs	r2, r2, #1
 8010cda:	4413      	add	r3, r2
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	687a      	ldr	r2, [r7, #4]
 8010ce0:	6892      	ldr	r2, [r2, #8]
 8010ce2:	4413      	add	r3, r2
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	6839      	ldr	r1, [r7, #0]
 8010ce8:	4798      	blx	r3
    }
 8010cea:	bf00      	nop
 8010cec:	3708      	adds	r7, #8
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	bd80      	pop	{r7, pc}

08010cf2 <_ZNK8touchgfx8CallbackI22sequenceScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8010cf2:	b480      	push	{r7}
 8010cf4:	b083      	sub	sp, #12
 8010cf6:	af00      	add	r7, sp, #0
 8010cf8:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	685b      	ldr	r3, [r3, #4]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d010      	beq.n	8010d24 <_ZNK8touchgfx8CallbackI22sequenceScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	689b      	ldr	r3, [r3, #8]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d107      	bne.n	8010d1a <_ZNK8touchgfx8CallbackI22sequenceScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	68db      	ldr	r3, [r3, #12]
 8010d0e:	f003 0301 	and.w	r3, r3, #1
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d101      	bne.n	8010d1a <_ZNK8touchgfx8CallbackI22sequenceScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8010d16:	2301      	movs	r3, #1
 8010d18:	e000      	b.n	8010d1c <_ZNK8touchgfx8CallbackI22sequenceScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	2b01      	cmp	r3, #1
 8010d1e:	d001      	beq.n	8010d24 <_ZNK8touchgfx8CallbackI22sequenceScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8010d20:	2301      	movs	r3, #1
 8010d22:	e000      	b.n	8010d26 <_ZNK8touchgfx8CallbackI22sequenceScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8010d24:	2300      	movs	r3, #0
    }
 8010d26:	4618      	mov	r0, r3
 8010d28:	370c      	adds	r7, #12
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d30:	4770      	bx	lr
	...

08010d34 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8010d34:	b580      	push	{r7, lr}
 8010d36:	b084      	sub	sp, #16
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	60f8      	str	r0, [r7, #12]
 8010d3c:	60b9      	str	r1, [r7, #8]
 8010d3e:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	687a      	ldr	r2, [r7, #4]
 8010d44:	68b9      	ldr	r1, [r7, #8]
 8010d46:	4618      	mov	r0, r3
 8010d48:	f7fc f81a 	bl	800cd80 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8010d4c:	4a03      	ldr	r2, [pc, #12]	; (8010d5c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	601a      	str	r2, [r3, #0]
{

}
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	4618      	mov	r0, r3
 8010d56:	3710      	adds	r7, #16
 8010d58:	46bd      	mov	sp, r7
 8010d5a:	bd80      	pop	{r7, pc}
 8010d5c:	08030de4 	.word	0x08030de4

08010d60 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8010d60:	b480      	push	{r7}
 8010d62:	b083      	sub	sp, #12
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	6078      	str	r0, [r7, #4]
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	2200      	movs	r2, #0
 8010d6c:	601a      	str	r2, [r3, #0]
{

}
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	4618      	mov	r0, r3
 8010d72:	370c      	adds	r7, #12
 8010d74:	46bd      	mov	sp, r7
 8010d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d7a:	4770      	bx	lr

08010d7c <_ZN5Model4tickEv>:

void Model::tick()
{
 8010d7c:	b480      	push	{r7}
 8010d7e:	b083      	sub	sp, #12
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	6078      	str	r0, [r7, #4]

}
 8010d84:	bf00      	nop
 8010d86:	370c      	adds	r7, #12
 8010d88:	46bd      	mov	sp, r7
 8010d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8e:	4770      	bx	lr

08010d90 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8010d90:	b480      	push	{r7}
 8010d92:	b083      	sub	sp, #12
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	6078      	str	r0, [r7, #4]
    {
    }
 8010d98:	bf00      	nop
 8010d9a:	370c      	adds	r7, #12
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da2:	4770      	bx	lr

08010da4 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8010da4:	b480      	push	{r7}
 8010da6:	b083      	sub	sp, #12
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	6078      	str	r0, [r7, #4]
    {
    }
 8010dac:	bf00      	nop
 8010dae:	370c      	adds	r7, #12
 8010db0:	46bd      	mov	sp, r7
 8010db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db6:	4770      	bx	lr

08010db8 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8010db8:	b480      	push	{r7}
 8010dba:	b083      	sub	sp, #12
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	6078      	str	r0, [r7, #4]
    {
 8010dc0:	4a04      	ldr	r2, [pc, #16]	; (8010dd4 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	601a      	str	r2, [r3, #0]
    }
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	4618      	mov	r0, r3
 8010dca:	370c      	adds	r7, #12
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd2:	4770      	bx	lr
 8010dd4:	08031c14 	.word	0x08031c14

08010dd8 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	b082      	sub	sp, #8
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	6078      	str	r0, [r7, #4]
    }
 8010de0:	6878      	ldr	r0, [r7, #4]
 8010de2:	f7ff ffe9 	bl	8010db8 <_ZN8touchgfx9PresenterD1Ev>
 8010de6:	2104      	movs	r1, #4
 8010de8:	6878      	ldr	r0, [r7, #4]
 8010dea:	f01c f9a7 	bl	802d13c <_ZdlPvj>
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	4618      	mov	r0, r3
 8010df2:	3708      	adds	r7, #8
 8010df4:	46bd      	mov	sp, r7
 8010df6:	bd80      	pop	{r7, pc}

08010df8 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8010df8:	b480      	push	{r7}
 8010dfa:	b083      	sub	sp, #12
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	6078      	str	r0, [r7, #4]
    {
 8010e00:	4a04      	ldr	r2, [pc, #16]	; (8010e14 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	601a      	str	r2, [r3, #0]
    }
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	4618      	mov	r0, r3
 8010e0a:	370c      	adds	r7, #12
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e12:	4770      	bx	lr
 8010e14:	08031c14 	.word	0x08031c14

08010e18 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8010e18:	b480      	push	{r7}
 8010e1a:	b083      	sub	sp, #12
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
 8010e20:	4a06      	ldr	r2, [pc, #24]	; (8010e3c <_ZN13ModelListenerC1Ev+0x24>)
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	601a      	str	r2, [r3, #0]
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	2200      	movs	r2, #0
 8010e2a:	605a      	str	r2, [r3, #4]
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	4618      	mov	r0, r3
 8010e30:	370c      	adds	r7, #12
 8010e32:	46bd      	mov	sp, r7
 8010e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e38:	4770      	bx	lr
 8010e3a:	bf00      	nop
 8010e3c:	08031c04 	.word	0x08031c04

08010e40 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8010e40:	b480      	push	{r7}
 8010e42:	b083      	sub	sp, #12
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]
 8010e48:	4a04      	ldr	r2, [pc, #16]	; (8010e5c <_ZN13ModelListenerD1Ev+0x1c>)
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	601a      	str	r2, [r3, #0]
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	4618      	mov	r0, r3
 8010e52:	370c      	adds	r7, #12
 8010e54:	46bd      	mov	sp, r7
 8010e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5a:	4770      	bx	lr
 8010e5c:	08031c04 	.word	0x08031c04

08010e60 <_ZN13ModelListenerD0Ev>:
 8010e60:	b580      	push	{r7, lr}
 8010e62:	b082      	sub	sp, #8
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	6078      	str	r0, [r7, #4]
 8010e68:	6878      	ldr	r0, [r7, #4]
 8010e6a:	f7ff ffe9 	bl	8010e40 <_ZN13ModelListenerD1Ev>
 8010e6e:	2108      	movs	r1, #8
 8010e70:	6878      	ldr	r0, [r7, #4]
 8010e72:	f01c f963 	bl	802d13c <_ZdlPvj>
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	4618      	mov	r0, r3
 8010e7a:	3708      	adds	r7, #8
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	bd80      	pop	{r7, pc}

08010e80 <_ZN19mainScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~mainScreenPresenter() {};
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b082      	sub	sp, #8
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	6078      	str	r0, [r7, #4]
 8010e88:	4a09      	ldr	r2, [pc, #36]	; (8010eb0 <_ZN19mainScreenPresenterD1Ev+0x30>)
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	601a      	str	r2, [r3, #0]
 8010e8e:	4a09      	ldr	r2, [pc, #36]	; (8010eb4 <_ZN19mainScreenPresenterD1Ev+0x34>)
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	605a      	str	r2, [r3, #4]
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	3304      	adds	r3, #4
 8010e98:	4618      	mov	r0, r3
 8010e9a:	f7ff ffd1 	bl	8010e40 <_ZN13ModelListenerD1Ev>
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	f7ff ff89 	bl	8010db8 <_ZN8touchgfx9PresenterD1Ev>
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	3708      	adds	r7, #8
 8010eac:	46bd      	mov	sp, r7
 8010eae:	bd80      	pop	{r7, pc}
 8010eb0:	08031bdc 	.word	0x08031bdc
 8010eb4:	08031bf4 	.word	0x08031bf4

08010eb8 <_ZThn4_N19mainScreenPresenterD1Ev>:
 8010eb8:	f1a0 0004 	sub.w	r0, r0, #4
 8010ebc:	e7e0      	b.n	8010e80 <_ZN19mainScreenPresenterD1Ev>
 8010ebe:	bf00      	nop

08010ec0 <_ZN19mainScreenPresenterD0Ev>:
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b082      	sub	sp, #8
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	6078      	str	r0, [r7, #4]
 8010ec8:	6878      	ldr	r0, [r7, #4]
 8010eca:	f7ff ffd9 	bl	8010e80 <_ZN19mainScreenPresenterD1Ev>
 8010ece:	2110      	movs	r1, #16
 8010ed0:	6878      	ldr	r0, [r7, #4]
 8010ed2:	f01c f933 	bl	802d13c <_ZdlPvj>
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	4618      	mov	r0, r3
 8010eda:	3708      	adds	r7, #8
 8010edc:	46bd      	mov	sp, r7
 8010ede:	bd80      	pop	{r7, pc}

08010ee0 <_ZThn4_N19mainScreenPresenterD0Ev>:
 8010ee0:	f1a0 0004 	sub.w	r0, r0, #4
 8010ee4:	e7ec      	b.n	8010ec0 <_ZN19mainScreenPresenterD0Ev>
	...

08010ee8 <_ZN19mainScreenPresenterC1ER14mainScreenView>:
#include <gui/mainscreen_screen/mainScreenView.hpp>
#include <gui/mainscreen_screen/mainScreenPresenter.hpp>

mainScreenPresenter::mainScreenPresenter(mainScreenView& v)
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b082      	sub	sp, #8
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	6078      	str	r0, [r7, #4]
 8010ef0:	6039      	str	r1, [r7, #0]
    : view(v)
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	f7ff ff7f 	bl	8010df8 <_ZN8touchgfx9PresenterC1Ev>
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	3304      	adds	r3, #4
 8010efe:	4618      	mov	r0, r3
 8010f00:	f7ff ff8a 	bl	8010e18 <_ZN13ModelListenerC1Ev>
 8010f04:	4a06      	ldr	r2, [pc, #24]	; (8010f20 <_ZN19mainScreenPresenterC1ER14mainScreenView+0x38>)
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	601a      	str	r2, [r3, #0]
 8010f0a:	4a06      	ldr	r2, [pc, #24]	; (8010f24 <_ZN19mainScreenPresenterC1ER14mainScreenView+0x3c>)
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	605a      	str	r2, [r3, #4]
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	683a      	ldr	r2, [r7, #0]
 8010f14:	60da      	str	r2, [r3, #12]
{

}
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	4618      	mov	r0, r3
 8010f1a:	3708      	adds	r7, #8
 8010f1c:	46bd      	mov	sp, r7
 8010f1e:	bd80      	pop	{r7, pc}
 8010f20:	08031bdc 	.word	0x08031bdc
 8010f24:	08031bf4 	.word	0x08031bf4

08010f28 <_ZN19mainScreenPresenter8activateEv>:

void mainScreenPresenter::activate()
{
 8010f28:	b480      	push	{r7}
 8010f2a:	b083      	sub	sp, #12
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	6078      	str	r0, [r7, #4]

}
 8010f30:	bf00      	nop
 8010f32:	370c      	adds	r7, #12
 8010f34:	46bd      	mov	sp, r7
 8010f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f3a:	4770      	bx	lr

08010f3c <_ZN19mainScreenPresenter10deactivateEv>:

void mainScreenPresenter::deactivate()
{
 8010f3c:	b480      	push	{r7}
 8010f3e:	b083      	sub	sp, #12
 8010f40:	af00      	add	r7, sp, #0
 8010f42:	6078      	str	r0, [r7, #4]

}
 8010f44:	bf00      	nop
 8010f46:	370c      	adds	r7, #12
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f4e:	4770      	bx	lr

08010f50 <_ZN14mainScreenViewD1Ev>:

class mainScreenView : public mainScreenViewBase
{
public:
    mainScreenView();
    virtual ~mainScreenView() {}
 8010f50:	b580      	push	{r7, lr}
 8010f52:	b082      	sub	sp, #8
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	6078      	str	r0, [r7, #4]
 8010f58:	4a05      	ldr	r2, [pc, #20]	; (8010f70 <_ZN14mainScreenViewD1Ev+0x20>)
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	601a      	str	r2, [r3, #0]
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	4618      	mov	r0, r3
 8010f62:	f7fe f917 	bl	800f194 <_ZN18mainScreenViewBaseD1Ev>
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	4618      	mov	r0, r3
 8010f6a:	3708      	adds	r7, #8
 8010f6c:	46bd      	mov	sp, r7
 8010f6e:	bd80      	pop	{r7, pc}
 8010f70:	08031c2c 	.word	0x08031c2c

08010f74 <_ZN14mainScreenViewD0Ev>:
 8010f74:	b580      	push	{r7, lr}
 8010f76:	b082      	sub	sp, #8
 8010f78:	af00      	add	r7, sp, #0
 8010f7a:	6078      	str	r0, [r7, #4]
 8010f7c:	6878      	ldr	r0, [r7, #4]
 8010f7e:	f7ff ffe7 	bl	8010f50 <_ZN14mainScreenViewD1Ev>
 8010f82:	f44f 61aa 	mov.w	r1, #1360	; 0x550
 8010f86:	6878      	ldr	r0, [r7, #4]
 8010f88:	f01c f8d8 	bl	802d13c <_ZdlPvj>
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	4618      	mov	r0, r3
 8010f90:	3708      	adds	r7, #8
 8010f92:	46bd      	mov	sp, r7
 8010f94:	bd80      	pop	{r7, pc}
	...

08010f98 <_ZN14mainScreenViewC1Ev>:
extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim4;
extern TIM_HandleTypeDef htim5;

mainScreenView::mainScreenView()
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	b082      	sub	sp, #8
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	6078      	str	r0, [r7, #4]
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	f7fe fa06 	bl	800f3b4 <_ZN18mainScreenViewBaseC1Ev>
 8010fa8:	4a0f      	ldr	r2, [pc, #60]	; (8010fe8 <_ZN14mainScreenViewC1Ev+0x50>)
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	601a      	str	r2, [r3, #0]
{
	/* Initialize all configured peripherals */
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_4, &xAxisPWMDuty, 1);
 8010fae:	2301      	movs	r3, #1
 8010fb0:	4a0e      	ldr	r2, [pc, #56]	; (8010fec <_ZN14mainScreenViewC1Ev+0x54>)
 8010fb2:	210c      	movs	r1, #12
 8010fb4:	480e      	ldr	r0, [pc, #56]	; (8010ff0 <_ZN14mainScreenViewC1Ev+0x58>)
 8010fb6:	f005 f93b 	bl	8016230 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, &yAxisPWMDuty_L, 1);
 8010fba:	2301      	movs	r3, #1
 8010fbc:	4a0d      	ldr	r2, [pc, #52]	; (8010ff4 <_ZN14mainScreenViewC1Ev+0x5c>)
 8010fbe:	2104      	movs	r1, #4
 8010fc0:	480d      	ldr	r0, [pc, #52]	; (8010ff8 <_ZN14mainScreenViewC1Ev+0x60>)
 8010fc2:	f005 f935 	bl	8016230 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_1, &yAxisPWMDuty_R, 1);
 8010fc6:	2301      	movs	r3, #1
 8010fc8:	4a0c      	ldr	r2, [pc, #48]	; (8010ffc <_ZN14mainScreenViewC1Ev+0x64>)
 8010fca:	2100      	movs	r1, #0
 8010fcc:	480c      	ldr	r0, [pc, #48]	; (8011000 <_ZN14mainScreenViewC1Ev+0x68>)
 8010fce:	f005 f92f 	bl	8016230 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_1, &manipulatorPWMDuty, 1);
 8010fd2:	2301      	movs	r3, #1
 8010fd4:	4a0b      	ldr	r2, [pc, #44]	; (8011004 <_ZN14mainScreenViewC1Ev+0x6c>)
 8010fd6:	2100      	movs	r1, #0
 8010fd8:	480b      	ldr	r0, [pc, #44]	; (8011008 <_ZN14mainScreenViewC1Ev+0x70>)
 8010fda:	f005 f929 	bl	8016230 <HAL_TIM_PWM_Start_DMA>
}
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	3708      	adds	r7, #8
 8010fe4:	46bd      	mov	sp, r7
 8010fe6:	bd80      	pop	{r7, pc}
 8010fe8:	08031c2c 	.word	0x08031c2c
 8010fec:	2000000c 	.word	0x2000000c
 8010ff0:	20012eb0 	.word	0x20012eb0
 8010ff4:	20000010 	.word	0x20000010
 8010ff8:	20012cc4 	.word	0x20012cc4
 8010ffc:	20000014 	.word	0x20000014
 8011000:	20012bdc 	.word	0x20012bdc
 8011004:	20000018 	.word	0x20000018
 8011008:	20012c84 	.word	0x20012c84

0801100c <_ZN14mainScreenView11setupScreenEv>:

void mainScreenView::setupScreen()
{
 801100c:	b580      	push	{r7, lr}
 801100e:	b082      	sub	sp, #8
 8011010:	af00      	add	r7, sp, #0
 8011012:	6078      	str	r0, [r7, #4]
    mainScreenViewBase::setupScreen();
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	4618      	mov	r0, r3
 8011018:	f7fe fd40 	bl	800fa9c <_ZN18mainScreenViewBase11setupScreenEv>
}
 801101c:	bf00      	nop
 801101e:	3708      	adds	r7, #8
 8011020:	46bd      	mov	sp, r7
 8011022:	bd80      	pop	{r7, pc}

08011024 <_ZN14mainScreenView14tearDownScreenEv>:

void mainScreenView::tearDownScreen()
{
 8011024:	b580      	push	{r7, lr}
 8011026:	b082      	sub	sp, #8
 8011028:	af00      	add	r7, sp, #0
 801102a:	6078      	str	r0, [r7, #4]
    mainScreenViewBase::tearDownScreen();
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	4618      	mov	r0, r3
 8011030:	f7fd fec8 	bl	800edc4 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8011034:	bf00      	nop
 8011036:	3708      	adds	r7, #8
 8011038:	46bd      	mov	sp, r7
 801103a:	bd80      	pop	{r7, pc}

0801103c <_ZN14mainScreenView24XAxisSliderValue_ChangedEi>:

void mainScreenView::XAxisSliderValue_Changed(int value)
{
 801103c:	b480      	push	{r7}
 801103e:	b083      	sub	sp, #12
 8011040:	af00      	add	r7, sp, #0
 8011042:	6078      	str	r0, [r7, #4]
 8011044:	6039      	str	r1, [r7, #0]
	xAxisPWMDuty = 275 + 9 * value;
 8011046:	683a      	ldr	r2, [r7, #0]
 8011048:	4613      	mov	r3, r2
 801104a:	00db      	lsls	r3, r3, #3
 801104c:	4413      	add	r3, r2
 801104e:	f203 1313 	addw	r3, r3, #275	; 0x113
 8011052:	461a      	mov	r2, r3
 8011054:	4b03      	ldr	r3, [pc, #12]	; (8011064 <_ZN14mainScreenView24XAxisSliderValue_ChangedEi+0x28>)
 8011056:	601a      	str	r2, [r3, #0]
}
 8011058:	bf00      	nop
 801105a:	370c      	adds	r7, #12
 801105c:	46bd      	mov	sp, r7
 801105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011062:	4770      	bx	lr
 8011064:	2000000c 	.word	0x2000000c

08011068 <_ZN14mainScreenView27YAxisSlider_L_Value_ChangedEi>:

void mainScreenView::YAxisSlider_L_Value_Changed(int value)
{
 8011068:	b590      	push	{r4, r7, lr}
 801106a:	b083      	sub	sp, #12
 801106c:	af00      	add	r7, sp, #0
 801106e:	6078      	str	r0, [r7, #4]
 8011070:	6039      	str	r1, [r7, #0]
	yAxisPWMDuty_L = (int) (842.0 + 5.06 * (float)value);
 8011072:	683b      	ldr	r3, [r7, #0]
 8011074:	ee07 3a90 	vmov	s15, r3
 8011078:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801107c:	ee17 0a90 	vmov	r0, s15
 8011080:	f7f5 ffea 	bl	8007058 <__aeabi_f2d>
 8011084:	a310      	add	r3, pc, #64	; (adr r3, 80110c8 <_ZN14mainScreenView27YAxisSlider_L_Value_ChangedEi+0x60>)
 8011086:	e9d3 2300 	ldrd	r2, r3, [r3]
 801108a:	f7f6 f83d 	bl	8007108 <__aeabi_dmul>
 801108e:	4603      	mov	r3, r0
 8011090:	460c      	mov	r4, r1
 8011092:	4618      	mov	r0, r3
 8011094:	4621      	mov	r1, r4
 8011096:	f04f 0200 	mov.w	r2, #0
 801109a:	4b09      	ldr	r3, [pc, #36]	; (80110c0 <_ZN14mainScreenView27YAxisSlider_L_Value_ChangedEi+0x58>)
 801109c:	f7f5 fe7e 	bl	8006d9c <__adddf3>
 80110a0:	4603      	mov	r3, r0
 80110a2:	460c      	mov	r4, r1
 80110a4:	4618      	mov	r0, r3
 80110a6:	4621      	mov	r1, r4
 80110a8:	f7f6 fa40 	bl	800752c <__aeabi_d2iz>
 80110ac:	4603      	mov	r3, r0
 80110ae:	461a      	mov	r2, r3
 80110b0:	4b04      	ldr	r3, [pc, #16]	; (80110c4 <_ZN14mainScreenView27YAxisSlider_L_Value_ChangedEi+0x5c>)
 80110b2:	601a      	str	r2, [r3, #0]
}
 80110b4:	bf00      	nop
 80110b6:	370c      	adds	r7, #12
 80110b8:	46bd      	mov	sp, r7
 80110ba:	bd90      	pop	{r4, r7, pc}
 80110bc:	f3af 8000 	nop.w
 80110c0:	408a5000 	.word	0x408a5000
 80110c4:	20000010 	.word	0x20000010
 80110c8:	a3d70a3d 	.word	0xa3d70a3d
 80110cc:	40143d70 	.word	0x40143d70

080110d0 <_ZN14mainScreenView27YAxisSlider_R_Value_ChangedEi>:

void mainScreenView::YAxisSlider_R_Value_Changed(int value)
{
 80110d0:	b590      	push	{r4, r7, lr}
 80110d2:	b083      	sub	sp, #12
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	6078      	str	r0, [r7, #4]
 80110d8:	6039      	str	r1, [r7, #0]
	yAxisPWMDuty_R = (int) (842.0 + 3.42 * (float)value);
 80110da:	683b      	ldr	r3, [r7, #0]
 80110dc:	ee07 3a90 	vmov	s15, r3
 80110e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80110e4:	ee17 0a90 	vmov	r0, s15
 80110e8:	f7f5 ffb6 	bl	8007058 <__aeabi_f2d>
 80110ec:	a310      	add	r3, pc, #64	; (adr r3, 8011130 <_ZN14mainScreenView27YAxisSlider_R_Value_ChangedEi+0x60>)
 80110ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110f2:	f7f6 f809 	bl	8007108 <__aeabi_dmul>
 80110f6:	4603      	mov	r3, r0
 80110f8:	460c      	mov	r4, r1
 80110fa:	4618      	mov	r0, r3
 80110fc:	4621      	mov	r1, r4
 80110fe:	f04f 0200 	mov.w	r2, #0
 8011102:	4b09      	ldr	r3, [pc, #36]	; (8011128 <_ZN14mainScreenView27YAxisSlider_R_Value_ChangedEi+0x58>)
 8011104:	f7f5 fe4a 	bl	8006d9c <__adddf3>
 8011108:	4603      	mov	r3, r0
 801110a:	460c      	mov	r4, r1
 801110c:	4618      	mov	r0, r3
 801110e:	4621      	mov	r1, r4
 8011110:	f7f6 fa0c 	bl	800752c <__aeabi_d2iz>
 8011114:	4603      	mov	r3, r0
 8011116:	461a      	mov	r2, r3
 8011118:	4b04      	ldr	r3, [pc, #16]	; (801112c <_ZN14mainScreenView27YAxisSlider_R_Value_ChangedEi+0x5c>)
 801111a:	601a      	str	r2, [r3, #0]
}
 801111c:	bf00      	nop
 801111e:	370c      	adds	r7, #12
 8011120:	46bd      	mov	sp, r7
 8011122:	bd90      	pop	{r4, r7, pc}
 8011124:	f3af 8000 	nop.w
 8011128:	408a5000 	.word	0x408a5000
 801112c:	20000014 	.word	0x20000014
 8011130:	f5c28f5c 	.word	0xf5c28f5c
 8011134:	400b5c28 	.word	0x400b5c28

08011138 <_ZN14mainScreenView38ManipulatorControlToggleButton_ClickedEv>:

void mainScreenView::ManipulatorControlToggleButton_Clicked()
{
 8011138:	b480      	push	{r7}
 801113a:	b083      	sub	sp, #12
 801113c:	af00      	add	r7, sp, #0
 801113e:	6078      	str	r0, [r7, #4]
	static bool state = false;

	if (state)
 8011140:	4b0c      	ldr	r3, [pc, #48]	; (8011174 <_ZN14mainScreenView38ManipulatorControlToggleButton_ClickedEv+0x3c>)
 8011142:	781b      	ldrb	r3, [r3, #0]
 8011144:	2b00      	cmp	r3, #0
 8011146:	d007      	beq.n	8011158 <_ZN14mainScreenView38ManipulatorControlToggleButton_ClickedEv+0x20>
	{
		manipulatorPWMDuty = 275;
 8011148:	4b0b      	ldr	r3, [pc, #44]	; (8011178 <_ZN14mainScreenView38ManipulatorControlToggleButton_ClickedEv+0x40>)
 801114a:	f240 1213 	movw	r2, #275	; 0x113
 801114e:	601a      	str	r2, [r3, #0]
		state = false;
 8011150:	4b08      	ldr	r3, [pc, #32]	; (8011174 <_ZN14mainScreenView38ManipulatorControlToggleButton_ClickedEv+0x3c>)
 8011152:	2200      	movs	r2, #0
 8011154:	701a      	strb	r2, [r3, #0]
	else
	{
		manipulatorPWMDuty = 700;
		state = true;
	}
}
 8011156:	e006      	b.n	8011166 <_ZN14mainScreenView38ManipulatorControlToggleButton_ClickedEv+0x2e>
		manipulatorPWMDuty = 700;
 8011158:	4b07      	ldr	r3, [pc, #28]	; (8011178 <_ZN14mainScreenView38ManipulatorControlToggleButton_ClickedEv+0x40>)
 801115a:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 801115e:	601a      	str	r2, [r3, #0]
		state = true;
 8011160:	4b04      	ldr	r3, [pc, #16]	; (8011174 <_ZN14mainScreenView38ManipulatorControlToggleButton_ClickedEv+0x3c>)
 8011162:	2201      	movs	r2, #1
 8011164:	701a      	strb	r2, [r3, #0]
}
 8011166:	bf00      	nop
 8011168:	370c      	adds	r7, #12
 801116a:	46bd      	mov	sp, r7
 801116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011170:	4770      	bx	lr
 8011172:	bf00      	nop
 8011174:	20001ad0 	.word	0x20001ad0
 8011178:	20000018 	.word	0x20000018

0801117c <_ZN17positionContainerD1Ev>:

class positionContainer : public positionContainerBase
{
public:
    positionContainer();
    virtual ~positionContainer() {}
 801117c:	b580      	push	{r7, lr}
 801117e:	b082      	sub	sp, #8
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
 8011184:	4a05      	ldr	r2, [pc, #20]	; (801119c <_ZN17positionContainerD1Ev+0x20>)
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	601a      	str	r2, [r3, #0]
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	4618      	mov	r0, r3
 801118e:	f7fe ffad 	bl	80100ec <_ZN21positionContainerBaseD1Ev>
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	4618      	mov	r0, r3
 8011196:	3708      	adds	r7, #8
 8011198:	46bd      	mov	sp, r7
 801119a:	bd80      	pop	{r7, pc}
 801119c:	08031c70 	.word	0x08031c70

080111a0 <_ZN17positionContainerD0Ev>:
 80111a0:	b580      	push	{r7, lr}
 80111a2:	b082      	sub	sp, #8
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	6078      	str	r0, [r7, #4]
 80111a8:	6878      	ldr	r0, [r7, #4]
 80111aa:	f7ff ffe7 	bl	801117c <_ZN17positionContainerD1Ev>
 80111ae:	2190      	movs	r1, #144	; 0x90
 80111b0:	6878      	ldr	r0, [r7, #4]
 80111b2:	f01b ffc3 	bl	802d13c <_ZdlPvj>
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	4618      	mov	r0, r3
 80111ba:	3708      	adds	r7, #8
 80111bc:	46bd      	mov	sp, r7
 80111be:	bd80      	pop	{r7, pc}

080111c0 <_ZN17positionContainerC1Ev>:
#include <gui/containers/positionContainer.hpp>

positionContainer::positionContainer()
 80111c0:	b580      	push	{r7, lr}
 80111c2:	b082      	sub	sp, #8
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	6078      	str	r0, [r7, #4]
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	4618      	mov	r0, r3
 80111cc:	f7fe ffb6 	bl	801013c <_ZN21positionContainerBaseC1Ev>
 80111d0:	4a03      	ldr	r2, [pc, #12]	; (80111e0 <_ZN17positionContainerC1Ev+0x20>)
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	601a      	str	r2, [r3, #0]
{

}
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	4618      	mov	r0, r3
 80111da:	3708      	adds	r7, #8
 80111dc:	46bd      	mov	sp, r7
 80111de:	bd80      	pop	{r7, pc}
 80111e0:	08031c70 	.word	0x08031c70

080111e4 <_ZN17positionContainer10initializeEv>:

void positionContainer::initialize()
{
 80111e4:	b580      	push	{r7, lr}
 80111e6:	b082      	sub	sp, #8
 80111e8:	af00      	add	r7, sp, #0
 80111ea:	6078      	str	r0, [r7, #4]
    positionContainerBase::initialize();
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	4618      	mov	r0, r3
 80111f0:	f7ff f84e 	bl	8010290 <_ZN21positionContainerBase10initializeEv>
}
 80111f4:	bf00      	nop
 80111f6:	3708      	adds	r7, #8
 80111f8:	46bd      	mov	sp, r7
 80111fa:	bd80      	pop	{r7, pc}

080111fc <_ZN17positionContainer7SetTextEPc>:

void positionContainer::SetText(char* t)
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b082      	sub	sp, #8
 8011200:	af00      	add	r7, sp, #0
 8011202:	6078      	str	r0, [r7, #4]
 8011204:	6039      	str	r1, [r7, #0]
		Unicode::snprintf(positionTextBuffer, POSITIONTEXT_SIZE, t);
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	336c      	adds	r3, #108	; 0x6c
 801120a:	683a      	ldr	r2, [r7, #0]
 801120c:	2111      	movs	r1, #17
 801120e:	4618      	mov	r0, r3
 8011210:	f010 fa42 	bl	8021698 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
}
 8011214:	bf00      	nop
 8011216:	3708      	adds	r7, #8
 8011218:	46bd      	mov	sp, r7
 801121a:	bd80      	pop	{r7, pc}

0801121c <_ZN23sequenceScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~sequenceScreenPresenter() {};
 801121c:	b580      	push	{r7, lr}
 801121e:	b082      	sub	sp, #8
 8011220:	af00      	add	r7, sp, #0
 8011222:	6078      	str	r0, [r7, #4]
 8011224:	4a09      	ldr	r2, [pc, #36]	; (801124c <_ZN23sequenceScreenPresenterD1Ev+0x30>)
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	601a      	str	r2, [r3, #0]
 801122a:	4a09      	ldr	r2, [pc, #36]	; (8011250 <_ZN23sequenceScreenPresenterD1Ev+0x34>)
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	605a      	str	r2, [r3, #4]
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	3304      	adds	r3, #4
 8011234:	4618      	mov	r0, r3
 8011236:	f7ff fe03 	bl	8010e40 <_ZN13ModelListenerD1Ev>
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	4618      	mov	r0, r3
 801123e:	f7ff fdbb 	bl	8010db8 <_ZN8touchgfx9PresenterD1Ev>
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	4618      	mov	r0, r3
 8011246:	3708      	adds	r7, #8
 8011248:	46bd      	mov	sp, r7
 801124a:	bd80      	pop	{r7, pc}
 801124c:	08031d00 	.word	0x08031d00
 8011250:	08031d18 	.word	0x08031d18

08011254 <_ZThn4_N23sequenceScreenPresenterD1Ev>:
 8011254:	f1a0 0004 	sub.w	r0, r0, #4
 8011258:	e7e0      	b.n	801121c <_ZN23sequenceScreenPresenterD1Ev>
 801125a:	bf00      	nop

0801125c <_ZN23sequenceScreenPresenterD0Ev>:
 801125c:	b580      	push	{r7, lr}
 801125e:	b082      	sub	sp, #8
 8011260:	af00      	add	r7, sp, #0
 8011262:	6078      	str	r0, [r7, #4]
 8011264:	6878      	ldr	r0, [r7, #4]
 8011266:	f7ff ffd9 	bl	801121c <_ZN23sequenceScreenPresenterD1Ev>
 801126a:	2110      	movs	r1, #16
 801126c:	6878      	ldr	r0, [r7, #4]
 801126e:	f01b ff65 	bl	802d13c <_ZdlPvj>
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	4618      	mov	r0, r3
 8011276:	3708      	adds	r7, #8
 8011278:	46bd      	mov	sp, r7
 801127a:	bd80      	pop	{r7, pc}

0801127c <_ZThn4_N23sequenceScreenPresenterD0Ev>:
 801127c:	f1a0 0004 	sub.w	r0, r0, #4
 8011280:	e7ec      	b.n	801125c <_ZN23sequenceScreenPresenterD0Ev>
	...

08011284 <_ZN23sequenceScreenPresenterC1ER18sequenceScreenView>:
#include <gui/sequencescreen_screen/sequenceScreenView.hpp>
#include <gui/sequencescreen_screen/sequenceScreenPresenter.hpp>

sequenceScreenPresenter::sequenceScreenPresenter(sequenceScreenView& v)
 8011284:	b580      	push	{r7, lr}
 8011286:	b082      	sub	sp, #8
 8011288:	af00      	add	r7, sp, #0
 801128a:	6078      	str	r0, [r7, #4]
 801128c:	6039      	str	r1, [r7, #0]
    : view(v)
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	4618      	mov	r0, r3
 8011292:	f7ff fdb1 	bl	8010df8 <_ZN8touchgfx9PresenterC1Ev>
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	3304      	adds	r3, #4
 801129a:	4618      	mov	r0, r3
 801129c:	f7ff fdbc 	bl	8010e18 <_ZN13ModelListenerC1Ev>
 80112a0:	4a06      	ldr	r2, [pc, #24]	; (80112bc <_ZN23sequenceScreenPresenterC1ER18sequenceScreenView+0x38>)
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	601a      	str	r2, [r3, #0]
 80112a6:	4a06      	ldr	r2, [pc, #24]	; (80112c0 <_ZN23sequenceScreenPresenterC1ER18sequenceScreenView+0x3c>)
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	605a      	str	r2, [r3, #4]
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	683a      	ldr	r2, [r7, #0]
 80112b0:	60da      	str	r2, [r3, #12]
{

}
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	4618      	mov	r0, r3
 80112b6:	3708      	adds	r7, #8
 80112b8:	46bd      	mov	sp, r7
 80112ba:	bd80      	pop	{r7, pc}
 80112bc:	08031d00 	.word	0x08031d00
 80112c0:	08031d18 	.word	0x08031d18

080112c4 <_ZN23sequenceScreenPresenter8activateEv>:

void sequenceScreenPresenter::activate()
{
 80112c4:	b480      	push	{r7}
 80112c6:	b083      	sub	sp, #12
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	6078      	str	r0, [r7, #4]

}
 80112cc:	bf00      	nop
 80112ce:	370c      	adds	r7, #12
 80112d0:	46bd      	mov	sp, r7
 80112d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d6:	4770      	bx	lr

080112d8 <_ZN23sequenceScreenPresenter10deactivateEv>:

void sequenceScreenPresenter::deactivate()
{
 80112d8:	b480      	push	{r7}
 80112da:	b083      	sub	sp, #12
 80112dc:	af00      	add	r7, sp, #0
 80112de:	6078      	str	r0, [r7, #4]

}
 80112e0:	bf00      	nop
 80112e2:	370c      	adds	r7, #12
 80112e4:	46bd      	mov	sp, r7
 80112e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ea:	4770      	bx	lr

080112ec <_ZN8touchgfx8TextArea17setWideTextActionENS_14WideTextActionE>:
     *
     * @param  action The action to perform for wide lines of text.
     *
     * @see WideTextAction, getWideTextAction, resizeHeightToCurrentText
     */
    void setWideTextAction(WideTextAction action)
 80112ec:	b480      	push	{r7}
 80112ee:	b083      	sub	sp, #12
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
 80112f4:	460b      	mov	r3, r1
 80112f6:	70fb      	strb	r3, [r7, #3]
    {
        wideTextAction = action;
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	78fa      	ldrb	r2, [r7, #3]
 80112fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
 8011300:	bf00      	nop
 8011302:	370c      	adds	r7, #12
 8011304:	46bd      	mov	sp, r7
 8011306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801130a:	4770      	bx	lr

0801130c <_ZN18sequenceScreenViewD1Ev>:

class sequenceScreenView : public sequenceScreenViewBase
{
public:
    sequenceScreenView();
    virtual ~sequenceScreenView() {}
 801130c:	b590      	push	{r4, r7, lr}
 801130e:	b083      	sub	sp, #12
 8011310:	af00      	add	r7, sp, #0
 8011312:	6078      	str	r0, [r7, #4]
 8011314:	4a10      	ldr	r2, [pc, #64]	; (8011358 <_ZN18sequenceScreenViewD1Ev+0x4c>)
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	601a      	str	r2, [r3, #0]
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	f503 7376 	add.w	r3, r3, #984	; 0x3d8
 8011320:	2b00      	cmp	r3, #0
 8011322:	d00f      	beq.n	8011344 <_ZN18sequenceScreenViewD1Ev+0x38>
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	f503 7376 	add.w	r3, r3, #984	; 0x3d8
 801132a:	f503 64b4 	add.w	r4, r3, #1440	; 0x5a0
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	f503 7376 	add.w	r3, r3, #984	; 0x3d8
 8011334:	429c      	cmp	r4, r3
 8011336:	d005      	beq.n	8011344 <_ZN18sequenceScreenViewD1Ev+0x38>
 8011338:	3c90      	subs	r4, #144	; 0x90
 801133a:	6823      	ldr	r3, [r4, #0]
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	4620      	mov	r0, r4
 8011340:	4798      	blx	r3
 8011342:	e7f4      	b.n	801132e <_ZN18sequenceScreenViewD1Ev+0x22>
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	4618      	mov	r0, r3
 8011348:	f7ff f82e 	bl	80103a8 <_ZN22sequenceScreenViewBaseD1Ev>
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	4618      	mov	r0, r3
 8011350:	370c      	adds	r7, #12
 8011352:	46bd      	mov	sp, r7
 8011354:	bd90      	pop	{r4, r7, pc}
 8011356:	bf00      	nop
 8011358:	08031d28 	.word	0x08031d28

0801135c <_ZN18sequenceScreenViewD0Ev>:
 801135c:	b580      	push	{r7, lr}
 801135e:	b082      	sub	sp, #8
 8011360:	af00      	add	r7, sp, #0
 8011362:	6078      	str	r0, [r7, #4]
 8011364:	6878      	ldr	r0, [r7, #4]
 8011366:	f7ff ffd1 	bl	801130c <_ZN18sequenceScreenViewD1Ev>
 801136a:	f640 1178 	movw	r1, #2424	; 0x978
 801136e:	6878      	ldr	r0, [r7, #4]
 8011370:	f01b fee4 	bl	802d13c <_ZdlPvj>
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	4618      	mov	r0, r3
 8011378:	3708      	adds	r7, #8
 801137a:	46bd      	mov	sp, r7
 801137c:	bd80      	pop	{r7, pc}
	...

08011380 <_ZN18sequenceScreenViewC1Ev>:
extern uint32_t xAxisPWMDuty;
extern uint32_t yAxisPWMDuty_L;
extern uint32_t yAxisPWMDuty_R;
extern uint32_t manipulatorPWMDuty;

sequenceScreenView::sequenceScreenView()
 8011380:	b5b0      	push	{r4, r5, r7, lr}
 8011382:	b082      	sub	sp, #8
 8011384:	af00      	add	r7, sp, #0
 8011386:	6078      	str	r0, [r7, #4]
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	4618      	mov	r0, r3
 801138c:	f7ff f8a0 	bl	80104d0 <_ZN22sequenceScreenViewBaseC1Ev>
 8011390:	4a0c      	ldr	r2, [pc, #48]	; (80113c4 <_ZN18sequenceScreenViewC1Ev+0x44>)
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	601a      	str	r2, [r3, #0]
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	2200      	movs	r2, #0
 801139a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	f503 7376 	add.w	r3, r3, #984	; 0x3d8
 80113a4:	2409      	movs	r4, #9
 80113a6:	461d      	mov	r5, r3
 80113a8:	2c00      	cmp	r4, #0
 80113aa:	db05      	blt.n	80113b8 <_ZN18sequenceScreenViewC1Ev+0x38>
 80113ac:	4628      	mov	r0, r5
 80113ae:	f7ff ff07 	bl	80111c0 <_ZN17positionContainerC1Ev>
 80113b2:	3590      	adds	r5, #144	; 0x90
 80113b4:	3c01      	subs	r4, #1
 80113b6:	e7f7      	b.n	80113a8 <_ZN18sequenceScreenViewC1Ev+0x28>
{

}
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	4618      	mov	r0, r3
 80113bc:	3708      	adds	r7, #8
 80113be:	46bd      	mov	sp, r7
 80113c0:	bdb0      	pop	{r4, r5, r7, pc}
 80113c2:	bf00      	nop
 80113c4:	08031d28 	.word	0x08031d28

080113c8 <_ZN18sequenceScreenView11setupScreenEv>:

void sequenceScreenView::setupScreen()
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b08c      	sub	sp, #48	; 0x30
 80113cc:	af04      	add	r7, sp, #16
 80113ce:	6078      	str	r0, [r7, #4]
    sequenceScreenViewBase::setupScreen();
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	4618      	mov	r0, r3
 80113d4:	f7ff fb70 	bl	8010ab8 <_ZN22sequenceScreenViewBase11setupScreenEv>

	positionsList.removeAll();
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80113de:	4618      	mov	r0, r3
 80113e0:	f00a f9ce 	bl	801b780 <_ZN8touchgfx10ListLayout9removeAllEv>
	scrollableContainer.invalidate();
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80113ea:	4618      	mov	r0, r3
 80113ec:	f00e fb83 	bl	801faf6 <_ZNK8touchgfx8Drawable10invalidateEv>

	char positionChar[17];
	memset(positionChar, '\0', 17);
 80113f0:	f107 030c 	add.w	r3, r7, #12
 80113f4:	2211      	movs	r2, #17
 80113f6:	2100      	movs	r1, #0
 80113f8:	4618      	mov	r0, r3
 80113fa:	f00e fcc2 	bl	801fd82 <_ZN8touchgfx6memsetEPvhm>
	snprintf(positionChar, 17, "%d,%d,%d,%d", 100, 100, 100, 1);
 80113fe:	f107 000c 	add.w	r0, r7, #12
 8011402:	2301      	movs	r3, #1
 8011404:	9302      	str	r3, [sp, #8]
 8011406:	2364      	movs	r3, #100	; 0x64
 8011408:	9301      	str	r3, [sp, #4]
 801140a:	2364      	movs	r3, #100	; 0x64
 801140c:	9300      	str	r3, [sp, #0]
 801140e:	2364      	movs	r3, #100	; 0x64
 8011410:	4a3c      	ldr	r2, [pc, #240]	; (8011504 <_ZN18sequenceScreenView11setupScreenEv+0x13c>)
 8011412:	2111      	movs	r1, #17
 8011414:	f01d fcda 	bl	802edcc <sniprintf>
	positionContainersList[numOfListItems].SetText(positionChar);
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	f8d3 23d4 	ldr.w	r2, [r3, #980]	; 0x3d4
 801141e:	4613      	mov	r3, r2
 8011420:	00db      	lsls	r3, r3, #3
 8011422:	4413      	add	r3, r2
 8011424:	011b      	lsls	r3, r3, #4
 8011426:	f503 7376 	add.w	r3, r3, #984	; 0x3d8
 801142a:	687a      	ldr	r2, [r7, #4]
 801142c:	4413      	add	r3, r2
 801142e:	f107 020c 	add.w	r2, r7, #12
 8011432:	4611      	mov	r1, r2
 8011434:	4618      	mov	r0, r3
 8011436:	f7ff fee1 	bl	80111fc <_ZN17positionContainer7SetTextEPc>
	positionsList.add(positionContainersList[numOfListItems]);
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	f503 7023 	add.w	r0, r3, #652	; 0x28c
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	f8d3 23d4 	ldr.w	r2, [r3, #980]	; 0x3d4
 8011446:	4613      	mov	r3, r2
 8011448:	00db      	lsls	r3, r3, #3
 801144a:	4413      	add	r3, r2
 801144c:	011b      	lsls	r3, r3, #4
 801144e:	f503 7376 	add.w	r3, r3, #984	; 0x3d8
 8011452:	687a      	ldr	r2, [r7, #4]
 8011454:	4413      	add	r3, r2
 8011456:	4619      	mov	r1, r3
 8011458:	f00a fa48 	bl	801b8ec <_ZN8touchgfx10ListLayout3addERNS_8DrawableE>
	scrollableContainer.invalidate();
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8011462:	4618      	mov	r0, r3
 8011464:	f00e fb47 	bl	801faf6 <_ZNK8touchgfx8Drawable10invalidateEv>
	++numOfListItems;
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801146e:	1c5a      	adds	r2, r3, #1
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

	memset(positionChar, '\0', 17);
 8011476:	f107 030c 	add.w	r3, r7, #12
 801147a:	2211      	movs	r2, #17
 801147c:	2100      	movs	r1, #0
 801147e:	4618      	mov	r0, r3
 8011480:	f00e fc7f 	bl	801fd82 <_ZN8touchgfx6memsetEPvhm>
	snprintf(positionChar, 17, "%d,%d,%d,%d", 200, 200, 200, 2);
 8011484:	f107 000c 	add.w	r0, r7, #12
 8011488:	2302      	movs	r3, #2
 801148a:	9302      	str	r3, [sp, #8]
 801148c:	23c8      	movs	r3, #200	; 0xc8
 801148e:	9301      	str	r3, [sp, #4]
 8011490:	23c8      	movs	r3, #200	; 0xc8
 8011492:	9300      	str	r3, [sp, #0]
 8011494:	23c8      	movs	r3, #200	; 0xc8
 8011496:	4a1b      	ldr	r2, [pc, #108]	; (8011504 <_ZN18sequenceScreenView11setupScreenEv+0x13c>)
 8011498:	2111      	movs	r1, #17
 801149a:	f01d fc97 	bl	802edcc <sniprintf>
	positionContainersList[numOfListItems].SetText(positionChar);
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	f8d3 23d4 	ldr.w	r2, [r3, #980]	; 0x3d4
 80114a4:	4613      	mov	r3, r2
 80114a6:	00db      	lsls	r3, r3, #3
 80114a8:	4413      	add	r3, r2
 80114aa:	011b      	lsls	r3, r3, #4
 80114ac:	f503 7376 	add.w	r3, r3, #984	; 0x3d8
 80114b0:	687a      	ldr	r2, [r7, #4]
 80114b2:	4413      	add	r3, r2
 80114b4:	f107 020c 	add.w	r2, r7, #12
 80114b8:	4611      	mov	r1, r2
 80114ba:	4618      	mov	r0, r3
 80114bc:	f7ff fe9e 	bl	80111fc <_ZN17positionContainer7SetTextEPc>
	positionsList.add(positionContainersList[numOfListItems]);
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	f503 7023 	add.w	r0, r3, #652	; 0x28c
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	f8d3 23d4 	ldr.w	r2, [r3, #980]	; 0x3d4
 80114cc:	4613      	mov	r3, r2
 80114ce:	00db      	lsls	r3, r3, #3
 80114d0:	4413      	add	r3, r2
 80114d2:	011b      	lsls	r3, r3, #4
 80114d4:	f503 7376 	add.w	r3, r3, #984	; 0x3d8
 80114d8:	687a      	ldr	r2, [r7, #4]
 80114da:	4413      	add	r3, r2
 80114dc:	4619      	mov	r1, r3
 80114de:	f00a fa05 	bl	801b8ec <_ZN8touchgfx10ListLayout3addERNS_8DrawableE>
	scrollableContainer.invalidate();
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80114e8:	4618      	mov	r0, r3
 80114ea:	f00e fb04 	bl	801faf6 <_ZNK8touchgfx8Drawable10invalidateEv>
	++numOfListItems;
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80114f4:	1c5a      	adds	r2, r3, #1
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
}
 80114fc:	bf00      	nop
 80114fe:	3720      	adds	r7, #32
 8011500:	46bd      	mov	sp, r7
 8011502:	bd80      	pop	{r7, pc}
 8011504:	08030160 	.word	0x08030160

08011508 <_ZN18sequenceScreenView14tearDownScreenEv>:

void sequenceScreenView::tearDownScreen()
{
 8011508:	b580      	push	{r7, lr}
 801150a:	b082      	sub	sp, #8
 801150c:	af00      	add	r7, sp, #0
 801150e:	6078      	str	r0, [r7, #4]
    sequenceScreenViewBase::tearDownScreen();
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	4618      	mov	r0, r3
 8011514:	f7fd fc56 	bl	800edc4 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8011518:	bf00      	nop
 801151a:	3708      	adds	r7, #8
 801151c:	46bd      	mov	sp, r7
 801151e:	bd80      	pop	{r7, pc}

08011520 <_ZN18sequenceScreenView26SaveSequenceButton_ClickedEv>:

void sequenceScreenView::SaveSequenceButton_Clicked()
{
 8011520:	b480      	push	{r7}
 8011522:	b083      	sub	sp, #12
 8011524:	af00      	add	r7, sp, #0
 8011526:	6078      	str	r0, [r7, #4]

}
 8011528:	bf00      	nop
 801152a:	370c      	adds	r7, #12
 801152c:	46bd      	mov	sp, r7
 801152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011532:	4770      	bx	lr

08011534 <_ZN18sequenceScreenView26PlaySequenceButton_ClickedEv>:

void sequenceScreenView::PlaySequenceButton_Clicked()
{
 8011534:	b480      	push	{r7}
 8011536:	b083      	sub	sp, #12
 8011538:	af00      	add	r7, sp, #0
 801153a:	6078      	str	r0, [r7, #4]

}
 801153c:	bf00      	nop
 801153e:	370c      	adds	r7, #12
 8011540:	46bd      	mov	sp, r7
 8011542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011546:	4770      	bx	lr

08011548 <_ZN18sequenceScreenView28AddNewPositionButton_ClickedEv>:

void sequenceScreenView::AddNewPositionButton_Clicked()
{
 8011548:	b590      	push	{r4, r7, lr}
 801154a:	b08d      	sub	sp, #52	; 0x34
 801154c:	af04      	add	r7, sp, #16
 801154e:	6078      	str	r0, [r7, #4]
	if (numOfListItems < maxNumOfPositions)
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011556:	2b09      	cmp	r3, #9
 8011558:	d856      	bhi.n	8011608 <_ZN18sequenceScreenView28AddNewPositionButton_ClickedEv+0xc0>
	{
		static unsigned int temp = 3;

		char positionChar[17];
		memset(positionChar, '\0', 17);
 801155a:	f107 030c 	add.w	r3, r7, #12
 801155e:	2211      	movs	r2, #17
 8011560:	2100      	movs	r1, #0
 8011562:	4618      	mov	r0, r3
 8011564:	f00e fc0d 	bl	801fd82 <_ZN8touchgfx6memsetEPvhm>
		snprintf(positionChar, 17, "%d,%d,%d,%d", 100 * temp, 100 * temp, 100 * temp, 1 * temp);
 8011568:	4b34      	ldr	r3, [pc, #208]	; (801163c <_ZN18sequenceScreenView28AddNewPositionButton_ClickedEv+0xf4>)
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	2264      	movs	r2, #100	; 0x64
 801156e:	fb02 f403 	mul.w	r4, r2, r3
 8011572:	4b32      	ldr	r3, [pc, #200]	; (801163c <_ZN18sequenceScreenView28AddNewPositionButton_ClickedEv+0xf4>)
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	2264      	movs	r2, #100	; 0x64
 8011578:	fb02 f303 	mul.w	r3, r2, r3
 801157c:	4a2f      	ldr	r2, [pc, #188]	; (801163c <_ZN18sequenceScreenView28AddNewPositionButton_ClickedEv+0xf4>)
 801157e:	6812      	ldr	r2, [r2, #0]
 8011580:	2164      	movs	r1, #100	; 0x64
 8011582:	fb01 f202 	mul.w	r2, r1, r2
 8011586:	492d      	ldr	r1, [pc, #180]	; (801163c <_ZN18sequenceScreenView28AddNewPositionButton_ClickedEv+0xf4>)
 8011588:	6809      	ldr	r1, [r1, #0]
 801158a:	f107 000c 	add.w	r0, r7, #12
 801158e:	9102      	str	r1, [sp, #8]
 8011590:	9201      	str	r2, [sp, #4]
 8011592:	9300      	str	r3, [sp, #0]
 8011594:	4623      	mov	r3, r4
 8011596:	4a2a      	ldr	r2, [pc, #168]	; (8011640 <_ZN18sequenceScreenView28AddNewPositionButton_ClickedEv+0xf8>)
 8011598:	2111      	movs	r1, #17
 801159a:	f01d fc17 	bl	802edcc <sniprintf>
		positionContainersList[numOfListItems].SetText(positionChar);
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	f8d3 23d4 	ldr.w	r2, [r3, #980]	; 0x3d4
 80115a4:	4613      	mov	r3, r2
 80115a6:	00db      	lsls	r3, r3, #3
 80115a8:	4413      	add	r3, r2
 80115aa:	011b      	lsls	r3, r3, #4
 80115ac:	f503 7376 	add.w	r3, r3, #984	; 0x3d8
 80115b0:	687a      	ldr	r2, [r7, #4]
 80115b2:	4413      	add	r3, r2
 80115b4:	f107 020c 	add.w	r2, r7, #12
 80115b8:	4611      	mov	r1, r2
 80115ba:	4618      	mov	r0, r3
 80115bc:	f7ff fe1e 	bl	80111fc <_ZN17positionContainer7SetTextEPc>
		positionsList.add(positionContainersList[numOfListItems]);
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	f503 7023 	add.w	r0, r3, #652	; 0x28c
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	f8d3 23d4 	ldr.w	r2, [r3, #980]	; 0x3d4
 80115cc:	4613      	mov	r3, r2
 80115ce:	00db      	lsls	r3, r3, #3
 80115d0:	4413      	add	r3, r2
 80115d2:	011b      	lsls	r3, r3, #4
 80115d4:	f503 7376 	add.w	r3, r3, #984	; 0x3d8
 80115d8:	687a      	ldr	r2, [r7, #4]
 80115da:	4413      	add	r3, r2
 80115dc:	4619      	mov	r1, r3
 80115de:	f00a f985 	bl	801b8ec <_ZN8touchgfx10ListLayout3addERNS_8DrawableE>
		scrollableContainer.invalidate();
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80115e8:	4618      	mov	r0, r3
 80115ea:	f00e fa84 	bl	801faf6 <_ZNK8touchgfx8Drawable10invalidateEv>
		++numOfListItems;
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80115f4:	1c5a      	adds	r2, r3, #1
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

		++temp;
 80115fc:	4b0f      	ldr	r3, [pc, #60]	; (801163c <_ZN18sequenceScreenView28AddNewPositionButton_ClickedEv+0xf4>)
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	3301      	adds	r3, #1
 8011602:	4a0e      	ldr	r2, [pc, #56]	; (801163c <_ZN18sequenceScreenView28AddNewPositionButton_ClickedEv+0xf4>)
 8011604:	6013      	str	r3, [r2, #0]
	{
		Unicode::snprintf(infoTextAreaBuffer, INFOTEXTAREA_SIZE, "ERROR:\nMaximum number of positions!");
		infoTextArea.setWideTextAction(WIDE_TEXT_WORDWRAP);
		infoTextArea.invalidate();
	}
}
 8011606:	e014      	b.n	8011632 <_ZN18sequenceScreenView28AddNewPositionButton_ClickedEv+0xea>
		Unicode::snprintf(infoTextAreaBuffer, INFOTEXTAREA_SIZE, "ERROR:\nMaximum number of positions!");
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 801160e:	4a0d      	ldr	r2, [pc, #52]	; (8011644 <_ZN18sequenceScreenView28AddNewPositionButton_ClickedEv+0xfc>)
 8011610:	2164      	movs	r1, #100	; 0x64
 8011612:	4618      	mov	r0, r3
 8011614:	f010 f840 	bl	8021698 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		infoTextArea.setWideTextAction(WIDE_TEXT_WORDWRAP);
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 801161e:	2101      	movs	r1, #1
 8011620:	4618      	mov	r0, r3
 8011622:	f7ff fe63 	bl	80112ec <_ZN8touchgfx8TextArea17setWideTextActionENS_14WideTextActionE>
		infoTextArea.invalidate();
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 801162c:	4618      	mov	r0, r3
 801162e:	f00e fa62 	bl	801faf6 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8011632:	bf00      	nop
 8011634:	3724      	adds	r7, #36	; 0x24
 8011636:	46bd      	mov	sp, r7
 8011638:	bd90      	pop	{r4, r7, pc}
 801163a:	bf00      	nop
 801163c:	20000024 	.word	0x20000024
 8011640:	08030160 	.word	0x08030160
 8011644:	0803016c 	.word	0x0803016c

08011648 <_ZN18sequenceScreenView28DeletePositionButton_ClickedEv>:

void sequenceScreenView::DeletePositionButton_Clicked()
{
 8011648:	b580      	push	{r7, lr}
 801164a:	b082      	sub	sp, #8
 801164c:	af00      	add	r7, sp, #0
 801164e:	6078      	str	r0, [r7, #4]
	positionsList.removeAll();
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8011656:	4618      	mov	r0, r3
 8011658:	f00a f892 	bl	801b780 <_ZN8touchgfx10ListLayout9removeAllEv>
	scrollableContainer.invalidate();
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8011662:	4618      	mov	r0, r3
 8011664:	f00e fa47 	bl	801faf6 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(infoTextAreaBuffer, INFOTEXTAREA_SIZE, "INFO:");
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 801166e:	4a0d      	ldr	r2, [pc, #52]	; (80116a4 <_ZN18sequenceScreenView28DeletePositionButton_ClickedEv+0x5c>)
 8011670:	2164      	movs	r1, #100	; 0x64
 8011672:	4618      	mov	r0, r3
 8011674:	f010 f810 	bl	8021698 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	infoTextArea.setWideTextAction(WIDE_TEXT_WORDWRAP);
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 801167e:	2101      	movs	r1, #1
 8011680:	4618      	mov	r0, r3
 8011682:	f7ff fe33 	bl	80112ec <_ZN8touchgfx8TextArea17setWideTextActionENS_14WideTextActionE>
	infoTextArea.invalidate();
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 801168c:	4618      	mov	r0, r3
 801168e:	f00e fa32 	bl	801faf6 <_ZNK8touchgfx8Drawable10invalidateEv>

	numOfListItems = 0;
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	2200      	movs	r2, #0
 8011696:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
}
 801169a:	bf00      	nop
 801169c:	3708      	adds	r7, #8
 801169e:	46bd      	mov	sp, r7
 80116a0:	bd80      	pop	{r7, pc}
 80116a2:	bf00      	nop
 80116a4:	08030190 	.word	0x08030190

080116a8 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80116a8:	b580      	push	{r7, lr}
 80116aa:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80116ac:	f7f9 ff00 	bl	800b4b0 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80116b0:	20ca      	movs	r0, #202	; 0xca
 80116b2:	f000 f95d 	bl	8011970 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80116b6:	20c3      	movs	r0, #195	; 0xc3
 80116b8:	f000 f967 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80116bc:	2008      	movs	r0, #8
 80116be:	f000 f964 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80116c2:	2050      	movs	r0, #80	; 0x50
 80116c4:	f000 f961 	bl	801198a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80116c8:	20cf      	movs	r0, #207	; 0xcf
 80116ca:	f000 f951 	bl	8011970 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80116ce:	2000      	movs	r0, #0
 80116d0:	f000 f95b 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80116d4:	20c1      	movs	r0, #193	; 0xc1
 80116d6:	f000 f958 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80116da:	2030      	movs	r0, #48	; 0x30
 80116dc:	f000 f955 	bl	801198a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80116e0:	20ed      	movs	r0, #237	; 0xed
 80116e2:	f000 f945 	bl	8011970 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80116e6:	2064      	movs	r0, #100	; 0x64
 80116e8:	f000 f94f 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80116ec:	2003      	movs	r0, #3
 80116ee:	f000 f94c 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80116f2:	2012      	movs	r0, #18
 80116f4:	f000 f949 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80116f8:	2081      	movs	r0, #129	; 0x81
 80116fa:	f000 f946 	bl	801198a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80116fe:	20e8      	movs	r0, #232	; 0xe8
 8011700:	f000 f936 	bl	8011970 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8011704:	2085      	movs	r0, #133	; 0x85
 8011706:	f000 f940 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 801170a:	2000      	movs	r0, #0
 801170c:	f000 f93d 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8011710:	2078      	movs	r0, #120	; 0x78
 8011712:	f000 f93a 	bl	801198a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8011716:	20cb      	movs	r0, #203	; 0xcb
 8011718:	f000 f92a 	bl	8011970 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 801171c:	2039      	movs	r0, #57	; 0x39
 801171e:	f000 f934 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8011722:	202c      	movs	r0, #44	; 0x2c
 8011724:	f000 f931 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8011728:	2000      	movs	r0, #0
 801172a:	f000 f92e 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x34);
 801172e:	2034      	movs	r0, #52	; 0x34
 8011730:	f000 f92b 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8011734:	2002      	movs	r0, #2
 8011736:	f000 f928 	bl	801198a <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 801173a:	20f7      	movs	r0, #247	; 0xf7
 801173c:	f000 f918 	bl	8011970 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8011740:	2020      	movs	r0, #32
 8011742:	f000 f922 	bl	801198a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8011746:	20ea      	movs	r0, #234	; 0xea
 8011748:	f000 f912 	bl	8011970 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 801174c:	2000      	movs	r0, #0
 801174e:	f000 f91c 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8011752:	2000      	movs	r0, #0
 8011754:	f000 f919 	bl	801198a <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8011758:	20b1      	movs	r0, #177	; 0xb1
 801175a:	f000 f909 	bl	8011970 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 801175e:	2000      	movs	r0, #0
 8011760:	f000 f913 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8011764:	201b      	movs	r0, #27
 8011766:	f000 f910 	bl	801198a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 801176a:	20b6      	movs	r0, #182	; 0xb6
 801176c:	f000 f900 	bl	8011970 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8011770:	200a      	movs	r0, #10
 8011772:	f000 f90a 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8011776:	20a2      	movs	r0, #162	; 0xa2
 8011778:	f000 f907 	bl	801198a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 801177c:	20c0      	movs	r0, #192	; 0xc0
 801177e:	f000 f8f7 	bl	8011970 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8011782:	2010      	movs	r0, #16
 8011784:	f000 f901 	bl	801198a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8011788:	20c1      	movs	r0, #193	; 0xc1
 801178a:	f000 f8f1 	bl	8011970 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 801178e:	2010      	movs	r0, #16
 8011790:	f000 f8fb 	bl	801198a <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8011794:	20c5      	movs	r0, #197	; 0xc5
 8011796:	f000 f8eb 	bl	8011970 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 801179a:	2045      	movs	r0, #69	; 0x45
 801179c:	f000 f8f5 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80117a0:	2015      	movs	r0, #21
 80117a2:	f000 f8f2 	bl	801198a <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80117a6:	20c7      	movs	r0, #199	; 0xc7
 80117a8:	f000 f8e2 	bl	8011970 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80117ac:	2090      	movs	r0, #144	; 0x90
 80117ae:	f000 f8ec 	bl	801198a <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80117b2:	2036      	movs	r0, #54	; 0x36
 80117b4:	f000 f8dc 	bl	8011970 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80117b8:	20c8      	movs	r0, #200	; 0xc8
 80117ba:	f000 f8e6 	bl	801198a <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80117be:	20f2      	movs	r0, #242	; 0xf2
 80117c0:	f000 f8d6 	bl	8011970 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80117c4:	2000      	movs	r0, #0
 80117c6:	f000 f8e0 	bl	801198a <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80117ca:	20b0      	movs	r0, #176	; 0xb0
 80117cc:	f000 f8d0 	bl	8011970 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80117d0:	20c2      	movs	r0, #194	; 0xc2
 80117d2:	f000 f8da 	bl	801198a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80117d6:	20b6      	movs	r0, #182	; 0xb6
 80117d8:	f000 f8ca 	bl	8011970 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80117dc:	200a      	movs	r0, #10
 80117de:	f000 f8d4 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80117e2:	20a7      	movs	r0, #167	; 0xa7
 80117e4:	f000 f8d1 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80117e8:	2027      	movs	r0, #39	; 0x27
 80117ea:	f000 f8ce 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80117ee:	2004      	movs	r0, #4
 80117f0:	f000 f8cb 	bl	801198a <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80117f4:	202a      	movs	r0, #42	; 0x2a
 80117f6:	f000 f8bb 	bl	8011970 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80117fa:	2000      	movs	r0, #0
 80117fc:	f000 f8c5 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8011800:	2000      	movs	r0, #0
 8011802:	f000 f8c2 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8011806:	2000      	movs	r0, #0
 8011808:	f000 f8bf 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 801180c:	20ef      	movs	r0, #239	; 0xef
 801180e:	f000 f8bc 	bl	801198a <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8011812:	202b      	movs	r0, #43	; 0x2b
 8011814:	f000 f8ac 	bl	8011970 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8011818:	2000      	movs	r0, #0
 801181a:	f000 f8b6 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 801181e:	2000      	movs	r0, #0
 8011820:	f000 f8b3 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8011824:	2001      	movs	r0, #1
 8011826:	f000 f8b0 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 801182a:	203f      	movs	r0, #63	; 0x3f
 801182c:	f000 f8ad 	bl	801198a <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8011830:	20f6      	movs	r0, #246	; 0xf6
 8011832:	f000 f89d 	bl	8011970 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8011836:	2001      	movs	r0, #1
 8011838:	f000 f8a7 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 801183c:	2000      	movs	r0, #0
 801183e:	f000 f8a4 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8011842:	2006      	movs	r0, #6
 8011844:	f000 f8a1 	bl	801198a <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8011848:	202c      	movs	r0, #44	; 0x2c
 801184a:	f000 f891 	bl	8011970 <ili9341_WriteReg>
  LCD_Delay(200);
 801184e:	20c8      	movs	r0, #200	; 0xc8
 8011850:	f7f9 feb4 	bl	800b5bc <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8011854:	2026      	movs	r0, #38	; 0x26
 8011856:	f000 f88b 	bl	8011970 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 801185a:	2001      	movs	r0, #1
 801185c:	f000 f895 	bl	801198a <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8011860:	20e0      	movs	r0, #224	; 0xe0
 8011862:	f000 f885 	bl	8011970 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8011866:	200f      	movs	r0, #15
 8011868:	f000 f88f 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x29);
 801186c:	2029      	movs	r0, #41	; 0x29
 801186e:	f000 f88c 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8011872:	2024      	movs	r0, #36	; 0x24
 8011874:	f000 f889 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8011878:	200c      	movs	r0, #12
 801187a:	f000 f886 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 801187e:	200e      	movs	r0, #14
 8011880:	f000 f883 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8011884:	2009      	movs	r0, #9
 8011886:	f000 f880 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 801188a:	204e      	movs	r0, #78	; 0x4e
 801188c:	f000 f87d 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8011890:	2078      	movs	r0, #120	; 0x78
 8011892:	f000 f87a 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8011896:	203c      	movs	r0, #60	; 0x3c
 8011898:	f000 f877 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x09);
 801189c:	2009      	movs	r0, #9
 801189e:	f000 f874 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80118a2:	2013      	movs	r0, #19
 80118a4:	f000 f871 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80118a8:	2005      	movs	r0, #5
 80118aa:	f000 f86e 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80118ae:	2017      	movs	r0, #23
 80118b0:	f000 f86b 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80118b4:	2011      	movs	r0, #17
 80118b6:	f000 f868 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80118ba:	2000      	movs	r0, #0
 80118bc:	f000 f865 	bl	801198a <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80118c0:	20e1      	movs	r0, #225	; 0xe1
 80118c2:	f000 f855 	bl	8011970 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80118c6:	2000      	movs	r0, #0
 80118c8:	f000 f85f 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80118cc:	2016      	movs	r0, #22
 80118ce:	f000 f85c 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80118d2:	201b      	movs	r0, #27
 80118d4:	f000 f859 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80118d8:	2004      	movs	r0, #4
 80118da:	f000 f856 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80118de:	2011      	movs	r0, #17
 80118e0:	f000 f853 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80118e4:	2007      	movs	r0, #7
 80118e6:	f000 f850 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80118ea:	2031      	movs	r0, #49	; 0x31
 80118ec:	f000 f84d 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80118f0:	2033      	movs	r0, #51	; 0x33
 80118f2:	f000 f84a 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80118f6:	2042      	movs	r0, #66	; 0x42
 80118f8:	f000 f847 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80118fc:	2005      	movs	r0, #5
 80118fe:	f000 f844 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8011902:	200c      	movs	r0, #12
 8011904:	f000 f841 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8011908:	200a      	movs	r0, #10
 801190a:	f000 f83e 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x28);
 801190e:	2028      	movs	r0, #40	; 0x28
 8011910:	f000 f83b 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8011914:	202f      	movs	r0, #47	; 0x2f
 8011916:	f000 f838 	bl	801198a <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 801191a:	200f      	movs	r0, #15
 801191c:	f000 f835 	bl	801198a <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8011920:	2011      	movs	r0, #17
 8011922:	f000 f825 	bl	8011970 <ili9341_WriteReg>
  LCD_Delay(200);
 8011926:	20c8      	movs	r0, #200	; 0xc8
 8011928:	f7f9 fe48 	bl	800b5bc <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 801192c:	2029      	movs	r0, #41	; 0x29
 801192e:	f000 f81f 	bl	8011970 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8011932:	202c      	movs	r0, #44	; 0x2c
 8011934:	f000 f81c 	bl	8011970 <ili9341_WriteReg>
}
 8011938:	bf00      	nop
 801193a:	bd80      	pop	{r7, pc}

0801193c <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 801193c:	b580      	push	{r7, lr}
 801193e:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8011940:	f7f9 fdb6 	bl	800b4b0 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8011944:	2103      	movs	r1, #3
 8011946:	20d3      	movs	r0, #211	; 0xd3
 8011948:	f000 f82c 	bl	80119a4 <ili9341_ReadData>
 801194c:	4603      	mov	r3, r0
 801194e:	b29b      	uxth	r3, r3
}
 8011950:	4618      	mov	r0, r3
 8011952:	bd80      	pop	{r7, pc}

08011954 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8011954:	b580      	push	{r7, lr}
 8011956:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8011958:	2029      	movs	r0, #41	; 0x29
 801195a:	f000 f809 	bl	8011970 <ili9341_WriteReg>
}
 801195e:	bf00      	nop
 8011960:	bd80      	pop	{r7, pc}

08011962 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8011962:	b580      	push	{r7, lr}
 8011964:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8011966:	2028      	movs	r0, #40	; 0x28
 8011968:	f000 f802 	bl	8011970 <ili9341_WriteReg>
}
 801196c:	bf00      	nop
 801196e:	bd80      	pop	{r7, pc}

08011970 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8011970:	b580      	push	{r7, lr}
 8011972:	b082      	sub	sp, #8
 8011974:	af00      	add	r7, sp, #0
 8011976:	4603      	mov	r3, r0
 8011978:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 801197a:	79fb      	ldrb	r3, [r7, #7]
 801197c:	4618      	mov	r0, r3
 801197e:	f7f9 fdc9 	bl	800b514 <LCD_IO_WriteReg>
}
 8011982:	bf00      	nop
 8011984:	3708      	adds	r7, #8
 8011986:	46bd      	mov	sp, r7
 8011988:	bd80      	pop	{r7, pc}

0801198a <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 801198a:	b580      	push	{r7, lr}
 801198c:	b082      	sub	sp, #8
 801198e:	af00      	add	r7, sp, #0
 8011990:	4603      	mov	r3, r0
 8011992:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8011994:	88fb      	ldrh	r3, [r7, #6]
 8011996:	4618      	mov	r0, r3
 8011998:	f7f9 fd9a 	bl	800b4d0 <LCD_IO_WriteData>
}
 801199c:	bf00      	nop
 801199e:	3708      	adds	r7, #8
 80119a0:	46bd      	mov	sp, r7
 80119a2:	bd80      	pop	{r7, pc}

080119a4 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80119a4:	b580      	push	{r7, lr}
 80119a6:	b082      	sub	sp, #8
 80119a8:	af00      	add	r7, sp, #0
 80119aa:	4603      	mov	r3, r0
 80119ac:	460a      	mov	r2, r1
 80119ae:	80fb      	strh	r3, [r7, #6]
 80119b0:	4613      	mov	r3, r2
 80119b2:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80119b4:	797a      	ldrb	r2, [r7, #5]
 80119b6:	88fb      	ldrh	r3, [r7, #6]
 80119b8:	4611      	mov	r1, r2
 80119ba:	4618      	mov	r0, r3
 80119bc:	f7f9 fdcc 	bl	800b558 <LCD_IO_ReadData>
 80119c0:	4603      	mov	r3, r0
}
 80119c2:	4618      	mov	r0, r3
 80119c4:	3708      	adds	r7, #8
 80119c6:	46bd      	mov	sp, r7
 80119c8:	bd80      	pop	{r7, pc}

080119ca <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80119ca:	b480      	push	{r7}
 80119cc:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80119ce:	23f0      	movs	r3, #240	; 0xf0
}
 80119d0:	4618      	mov	r0, r3
 80119d2:	46bd      	mov	sp, r7
 80119d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d8:	4770      	bx	lr

080119da <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80119da:	b480      	push	{r7}
 80119dc:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80119de:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80119e2:	4618      	mov	r0, r3
 80119e4:	46bd      	mov	sp, r7
 80119e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ea:	4770      	bx	lr

080119ec <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 80119ec:	b580      	push	{r7, lr}
 80119ee:	b084      	sub	sp, #16
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	4603      	mov	r3, r0
 80119f4:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 80119f6:	88fb      	ldrh	r3, [r7, #6]
 80119f8:	4618      	mov	r0, r3
 80119fa:	f000 fa59 	bl	8011eb0 <stmpe811_GetInstance>
 80119fe:	4603      	mov	r3, r0
 8011a00:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8011a02:	7bfb      	ldrb	r3, [r7, #15]
 8011a04:	2bff      	cmp	r3, #255	; 0xff
 8011a06:	d112      	bne.n	8011a2e <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8011a08:	2000      	movs	r0, #0
 8011a0a:	f000 fa51 	bl	8011eb0 <stmpe811_GetInstance>
 8011a0e:	4603      	mov	r3, r0
 8011a10:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8011a12:	7bbb      	ldrb	r3, [r7, #14]
 8011a14:	2b01      	cmp	r3, #1
 8011a16:	d80a      	bhi.n	8011a2e <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8011a18:	7bbb      	ldrb	r3, [r7, #14]
 8011a1a:	88fa      	ldrh	r2, [r7, #6]
 8011a1c:	b2d1      	uxtb	r1, r2
 8011a1e:	4a06      	ldr	r2, [pc, #24]	; (8011a38 <stmpe811_Init+0x4c>)
 8011a20:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8011a22:	f7f9 fc31 	bl	800b288 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8011a26:	88fb      	ldrh	r3, [r7, #6]
 8011a28:	4618      	mov	r0, r3
 8011a2a:	f000 f807 	bl	8011a3c <stmpe811_Reset>
    }
  }
}
 8011a2e:	bf00      	nop
 8011a30:	3710      	adds	r7, #16
 8011a32:	46bd      	mov	sp, r7
 8011a34:	bd80      	pop	{r7, pc}
 8011a36:	bf00      	nop
 8011a38:	20001ad4 	.word	0x20001ad4

08011a3c <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8011a3c:	b580      	push	{r7, lr}
 8011a3e:	b082      	sub	sp, #8
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	4603      	mov	r3, r0
 8011a44:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8011a46:	88fb      	ldrh	r3, [r7, #6]
 8011a48:	b2db      	uxtb	r3, r3
 8011a4a:	2202      	movs	r2, #2
 8011a4c:	2103      	movs	r1, #3
 8011a4e:	4618      	mov	r0, r3
 8011a50:	f7f9 fc28 	bl	800b2a4 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8011a54:	200a      	movs	r0, #10
 8011a56:	f7f9 fc62 	bl	800b31e <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8011a5a:	88fb      	ldrh	r3, [r7, #6]
 8011a5c:	b2db      	uxtb	r3, r3
 8011a5e:	2200      	movs	r2, #0
 8011a60:	2103      	movs	r1, #3
 8011a62:	4618      	mov	r0, r3
 8011a64:	f7f9 fc1e 	bl	800b2a4 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8011a68:	2002      	movs	r0, #2
 8011a6a:	f7f9 fc58 	bl	800b31e <IOE_Delay>
}
 8011a6e:	bf00      	nop
 8011a70:	3708      	adds	r7, #8
 8011a72:	46bd      	mov	sp, r7
 8011a74:	bd80      	pop	{r7, pc}

08011a76 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8011a76:	b590      	push	{r4, r7, lr}
 8011a78:	b083      	sub	sp, #12
 8011a7a:	af00      	add	r7, sp, #0
 8011a7c:	4603      	mov	r3, r0
 8011a7e:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8011a80:	f7f9 fc02 	bl	800b288 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8011a84:	88fb      	ldrh	r3, [r7, #6]
 8011a86:	b2db      	uxtb	r3, r3
 8011a88:	2100      	movs	r1, #0
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	f7f9 fc1d 	bl	800b2ca <IOE_Read>
 8011a90:	4603      	mov	r3, r0
 8011a92:	021b      	lsls	r3, r3, #8
 8011a94:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8011a96:	88fb      	ldrh	r3, [r7, #6]
 8011a98:	b2db      	uxtb	r3, r3
 8011a9a:	2101      	movs	r1, #1
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	f7f9 fc14 	bl	800b2ca <IOE_Read>
 8011aa2:	4603      	mov	r3, r0
 8011aa4:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8011aa6:	4323      	orrs	r3, r4
 8011aa8:	b21b      	sxth	r3, r3
 8011aaa:	b29b      	uxth	r3, r3
}
 8011aac:	4618      	mov	r0, r3
 8011aae:	370c      	adds	r7, #12
 8011ab0:	46bd      	mov	sp, r7
 8011ab2:	bd90      	pop	{r4, r7, pc}

08011ab4 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8011ab4:	b580      	push	{r7, lr}
 8011ab6:	b084      	sub	sp, #16
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	4603      	mov	r3, r0
 8011abc:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8011abe:	2300      	movs	r3, #0
 8011ac0:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8011ac2:	88fb      	ldrh	r3, [r7, #6]
 8011ac4:	b2db      	uxtb	r3, r3
 8011ac6:	2109      	movs	r1, #9
 8011ac8:	4618      	mov	r0, r3
 8011aca:	f7f9 fbfe 	bl	800b2ca <IOE_Read>
 8011ace:	4603      	mov	r3, r0
 8011ad0:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8011ad2:	7bfb      	ldrb	r3, [r7, #15]
 8011ad4:	f043 0301 	orr.w	r3, r3, #1
 8011ad8:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8011ada:	88fb      	ldrh	r3, [r7, #6]
 8011adc:	b2db      	uxtb	r3, r3
 8011ade:	7bfa      	ldrb	r2, [r7, #15]
 8011ae0:	2109      	movs	r1, #9
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	f7f9 fbde 	bl	800b2a4 <IOE_Write>
}
 8011ae8:	bf00      	nop
 8011aea:	3710      	adds	r7, #16
 8011aec:	46bd      	mov	sp, r7
 8011aee:	bd80      	pop	{r7, pc}

08011af0 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8011af0:	b580      	push	{r7, lr}
 8011af2:	b084      	sub	sp, #16
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	4603      	mov	r3, r0
 8011af8:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8011afa:	2300      	movs	r3, #0
 8011afc:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8011afe:	88fb      	ldrh	r3, [r7, #6]
 8011b00:	b2db      	uxtb	r3, r3
 8011b02:	2109      	movs	r1, #9
 8011b04:	4618      	mov	r0, r3
 8011b06:	f7f9 fbe0 	bl	800b2ca <IOE_Read>
 8011b0a:	4603      	mov	r3, r0
 8011b0c:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8011b0e:	7bfb      	ldrb	r3, [r7, #15]
 8011b10:	f023 0301 	bic.w	r3, r3, #1
 8011b14:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8011b16:	88fb      	ldrh	r3, [r7, #6]
 8011b18:	b2db      	uxtb	r3, r3
 8011b1a:	7bfa      	ldrb	r2, [r7, #15]
 8011b1c:	2109      	movs	r1, #9
 8011b1e:	4618      	mov	r0, r3
 8011b20:	f7f9 fbc0 	bl	800b2a4 <IOE_Write>
    
}
 8011b24:	bf00      	nop
 8011b26:	3710      	adds	r7, #16
 8011b28:	46bd      	mov	sp, r7
 8011b2a:	bd80      	pop	{r7, pc}

08011b2c <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8011b2c:	b580      	push	{r7, lr}
 8011b2e:	b084      	sub	sp, #16
 8011b30:	af00      	add	r7, sp, #0
 8011b32:	4603      	mov	r3, r0
 8011b34:	460a      	mov	r2, r1
 8011b36:	80fb      	strh	r3, [r7, #6]
 8011b38:	4613      	mov	r3, r2
 8011b3a:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8011b3c:	2300      	movs	r3, #0
 8011b3e:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8011b40:	88fb      	ldrh	r3, [r7, #6]
 8011b42:	b2db      	uxtb	r3, r3
 8011b44:	210a      	movs	r1, #10
 8011b46:	4618      	mov	r0, r3
 8011b48:	f7f9 fbbf 	bl	800b2ca <IOE_Read>
 8011b4c:	4603      	mov	r3, r0
 8011b4e:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8011b50:	7bfa      	ldrb	r2, [r7, #15]
 8011b52:	797b      	ldrb	r3, [r7, #5]
 8011b54:	4313      	orrs	r3, r2
 8011b56:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8011b58:	88fb      	ldrh	r3, [r7, #6]
 8011b5a:	b2db      	uxtb	r3, r3
 8011b5c:	7bfa      	ldrb	r2, [r7, #15]
 8011b5e:	210a      	movs	r1, #10
 8011b60:	4618      	mov	r0, r3
 8011b62:	f7f9 fb9f 	bl	800b2a4 <IOE_Write>
}
 8011b66:	bf00      	nop
 8011b68:	3710      	adds	r7, #16
 8011b6a:	46bd      	mov	sp, r7
 8011b6c:	bd80      	pop	{r7, pc}

08011b6e <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8011b6e:	b580      	push	{r7, lr}
 8011b70:	b084      	sub	sp, #16
 8011b72:	af00      	add	r7, sp, #0
 8011b74:	4603      	mov	r3, r0
 8011b76:	460a      	mov	r2, r1
 8011b78:	80fb      	strh	r3, [r7, #6]
 8011b7a:	4613      	mov	r3, r2
 8011b7c:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8011b7e:	2300      	movs	r3, #0
 8011b80:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8011b82:	88fb      	ldrh	r3, [r7, #6]
 8011b84:	b2db      	uxtb	r3, r3
 8011b86:	210a      	movs	r1, #10
 8011b88:	4618      	mov	r0, r3
 8011b8a:	f7f9 fb9e 	bl	800b2ca <IOE_Read>
 8011b8e:	4603      	mov	r3, r0
 8011b90:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8011b92:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8011b96:	43db      	mvns	r3, r3
 8011b98:	b25a      	sxtb	r2, r3
 8011b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011b9e:	4013      	ands	r3, r2
 8011ba0:	b25b      	sxtb	r3, r3
 8011ba2:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8011ba4:	88fb      	ldrh	r3, [r7, #6]
 8011ba6:	b2db      	uxtb	r3, r3
 8011ba8:	7bfa      	ldrb	r2, [r7, #15]
 8011baa:	210a      	movs	r1, #10
 8011bac:	4618      	mov	r0, r3
 8011bae:	f7f9 fb79 	bl	800b2a4 <IOE_Write>
}
 8011bb2:	bf00      	nop
 8011bb4:	3710      	adds	r7, #16
 8011bb6:	46bd      	mov	sp, r7
 8011bb8:	bd80      	pop	{r7, pc}

08011bba <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8011bba:	b580      	push	{r7, lr}
 8011bbc:	b082      	sub	sp, #8
 8011bbe:	af00      	add	r7, sp, #0
 8011bc0:	4603      	mov	r3, r0
 8011bc2:	460a      	mov	r2, r1
 8011bc4:	80fb      	strh	r3, [r7, #6]
 8011bc6:	4613      	mov	r3, r2
 8011bc8:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8011bca:	88fb      	ldrh	r3, [r7, #6]
 8011bcc:	b2db      	uxtb	r3, r3
 8011bce:	210b      	movs	r1, #11
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	f7f9 fb7a 	bl	800b2ca <IOE_Read>
 8011bd6:	4603      	mov	r3, r0
 8011bd8:	461a      	mov	r2, r3
 8011bda:	797b      	ldrb	r3, [r7, #5]
 8011bdc:	4013      	ands	r3, r2
 8011bde:	b2db      	uxtb	r3, r3
}
 8011be0:	4618      	mov	r0, r3
 8011be2:	3708      	adds	r7, #8
 8011be4:	46bd      	mov	sp, r7
 8011be6:	bd80      	pop	{r7, pc}

08011be8 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8011be8:	b580      	push	{r7, lr}
 8011bea:	b082      	sub	sp, #8
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	4603      	mov	r3, r0
 8011bf0:	460a      	mov	r2, r1
 8011bf2:	80fb      	strh	r3, [r7, #6]
 8011bf4:	4613      	mov	r3, r2
 8011bf6:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8011bf8:	88fb      	ldrh	r3, [r7, #6]
 8011bfa:	b2db      	uxtb	r3, r3
 8011bfc:	797a      	ldrb	r2, [r7, #5]
 8011bfe:	210b      	movs	r1, #11
 8011c00:	4618      	mov	r0, r3
 8011c02:	f7f9 fb4f 	bl	800b2a4 <IOE_Write>
}
 8011c06:	bf00      	nop
 8011c08:	3708      	adds	r7, #8
 8011c0a:	46bd      	mov	sp, r7
 8011c0c:	bd80      	pop	{r7, pc}

08011c0e <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8011c0e:	b580      	push	{r7, lr}
 8011c10:	b084      	sub	sp, #16
 8011c12:	af00      	add	r7, sp, #0
 8011c14:	4603      	mov	r3, r0
 8011c16:	6039      	str	r1, [r7, #0]
 8011c18:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8011c1a:	2300      	movs	r3, #0
 8011c1c:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8011c1e:	88fb      	ldrh	r3, [r7, #6]
 8011c20:	b2db      	uxtb	r3, r3
 8011c22:	2117      	movs	r1, #23
 8011c24:	4618      	mov	r0, r3
 8011c26:	f7f9 fb50 	bl	800b2ca <IOE_Read>
 8011c2a:	4603      	mov	r3, r0
 8011c2c:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8011c2e:	683b      	ldr	r3, [r7, #0]
 8011c30:	b25b      	sxtb	r3, r3
 8011c32:	43db      	mvns	r3, r3
 8011c34:	b25a      	sxtb	r2, r3
 8011c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c3a:	4013      	ands	r3, r2
 8011c3c:	b25b      	sxtb	r3, r3
 8011c3e:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8011c40:	88fb      	ldrh	r3, [r7, #6]
 8011c42:	b2db      	uxtb	r3, r3
 8011c44:	7bfa      	ldrb	r2, [r7, #15]
 8011c46:	2117      	movs	r1, #23
 8011c48:	4618      	mov	r0, r3
 8011c4a:	f7f9 fb2b 	bl	800b2a4 <IOE_Write>
}
 8011c4e:	bf00      	nop
 8011c50:	3710      	adds	r7, #16
 8011c52:	46bd      	mov	sp, r7
 8011c54:	bd80      	pop	{r7, pc}

08011c56 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8011c56:	b580      	push	{r7, lr}
 8011c58:	b084      	sub	sp, #16
 8011c5a:	af00      	add	r7, sp, #0
 8011c5c:	4603      	mov	r3, r0
 8011c5e:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8011c60:	88fb      	ldrh	r3, [r7, #6]
 8011c62:	b2db      	uxtb	r3, r3
 8011c64:	2104      	movs	r1, #4
 8011c66:	4618      	mov	r0, r3
 8011c68:	f7f9 fb2f 	bl	800b2ca <IOE_Read>
 8011c6c:	4603      	mov	r3, r0
 8011c6e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8011c70:	7bfb      	ldrb	r3, [r7, #15]
 8011c72:	f023 0304 	bic.w	r3, r3, #4
 8011c76:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8011c78:	88fb      	ldrh	r3, [r7, #6]
 8011c7a:	b2db      	uxtb	r3, r3
 8011c7c:	7bfa      	ldrb	r2, [r7, #15]
 8011c7e:	2104      	movs	r1, #4
 8011c80:	4618      	mov	r0, r3
 8011c82:	f7f9 fb0f 	bl	800b2a4 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8011c86:	88fb      	ldrh	r3, [r7, #6]
 8011c88:	21f0      	movs	r1, #240	; 0xf0
 8011c8a:	4618      	mov	r0, r3
 8011c8c:	f7ff ffbf 	bl	8011c0e <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8011c90:	7bfb      	ldrb	r3, [r7, #15]
 8011c92:	f023 0303 	bic.w	r3, r3, #3
 8011c96:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8011c98:	88fb      	ldrh	r3, [r7, #6]
 8011c9a:	b2db      	uxtb	r3, r3
 8011c9c:	7bfa      	ldrb	r2, [r7, #15]
 8011c9e:	2104      	movs	r1, #4
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	f7f9 faff 	bl	800b2a4 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8011ca6:	88fb      	ldrh	r3, [r7, #6]
 8011ca8:	b2db      	uxtb	r3, r3
 8011caa:	2249      	movs	r2, #73	; 0x49
 8011cac:	2120      	movs	r1, #32
 8011cae:	4618      	mov	r0, r3
 8011cb0:	f7f9 faf8 	bl	800b2a4 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8011cb4:	2002      	movs	r0, #2
 8011cb6:	f7f9 fb32 	bl	800b31e <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8011cba:	88fb      	ldrh	r3, [r7, #6]
 8011cbc:	b2db      	uxtb	r3, r3
 8011cbe:	2201      	movs	r2, #1
 8011cc0:	2121      	movs	r1, #33	; 0x21
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	f7f9 faee 	bl	800b2a4 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8011cc8:	88fb      	ldrh	r3, [r7, #6]
 8011cca:	b2db      	uxtb	r3, r3
 8011ccc:	229a      	movs	r2, #154	; 0x9a
 8011cce:	2141      	movs	r1, #65	; 0x41
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	f7f9 fae7 	bl	800b2a4 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8011cd6:	88fb      	ldrh	r3, [r7, #6]
 8011cd8:	b2db      	uxtb	r3, r3
 8011cda:	2201      	movs	r2, #1
 8011cdc:	214a      	movs	r1, #74	; 0x4a
 8011cde:	4618      	mov	r0, r3
 8011ce0:	f7f9 fae0 	bl	800b2a4 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8011ce4:	88fb      	ldrh	r3, [r7, #6]
 8011ce6:	b2db      	uxtb	r3, r3
 8011ce8:	2201      	movs	r2, #1
 8011cea:	214b      	movs	r1, #75	; 0x4b
 8011cec:	4618      	mov	r0, r3
 8011cee:	f7f9 fad9 	bl	800b2a4 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8011cf2:	88fb      	ldrh	r3, [r7, #6]
 8011cf4:	b2db      	uxtb	r3, r3
 8011cf6:	2200      	movs	r2, #0
 8011cf8:	214b      	movs	r1, #75	; 0x4b
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	f7f9 fad2 	bl	800b2a4 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8011d00:	88fb      	ldrh	r3, [r7, #6]
 8011d02:	b2db      	uxtb	r3, r3
 8011d04:	2201      	movs	r2, #1
 8011d06:	2156      	movs	r1, #86	; 0x56
 8011d08:	4618      	mov	r0, r3
 8011d0a:	f7f9 facb 	bl	800b2a4 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8011d0e:	88fb      	ldrh	r3, [r7, #6]
 8011d10:	b2db      	uxtb	r3, r3
 8011d12:	2201      	movs	r2, #1
 8011d14:	2158      	movs	r1, #88	; 0x58
 8011d16:	4618      	mov	r0, r3
 8011d18:	f7f9 fac4 	bl	800b2a4 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8011d1c:	88fb      	ldrh	r3, [r7, #6]
 8011d1e:	b2db      	uxtb	r3, r3
 8011d20:	2201      	movs	r2, #1
 8011d22:	2140      	movs	r1, #64	; 0x40
 8011d24:	4618      	mov	r0, r3
 8011d26:	f7f9 fabd 	bl	800b2a4 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8011d2a:	88fb      	ldrh	r3, [r7, #6]
 8011d2c:	b2db      	uxtb	r3, r3
 8011d2e:	22ff      	movs	r2, #255	; 0xff
 8011d30:	210b      	movs	r1, #11
 8011d32:	4618      	mov	r0, r3
 8011d34:	f7f9 fab6 	bl	800b2a4 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8011d38:	2002      	movs	r0, #2
 8011d3a:	f7f9 faf0 	bl	800b31e <IOE_Delay>
}
 8011d3e:	bf00      	nop
 8011d40:	3710      	adds	r7, #16
 8011d42:	46bd      	mov	sp, r7
 8011d44:	bd80      	pop	{r7, pc}

08011d46 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8011d46:	b580      	push	{r7, lr}
 8011d48:	b084      	sub	sp, #16
 8011d4a:	af00      	add	r7, sp, #0
 8011d4c:	4603      	mov	r3, r0
 8011d4e:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8011d50:	2300      	movs	r3, #0
 8011d52:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8011d54:	88fb      	ldrh	r3, [r7, #6]
 8011d56:	b2db      	uxtb	r3, r3
 8011d58:	2140      	movs	r1, #64	; 0x40
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	f7f9 fab5 	bl	800b2ca <IOE_Read>
 8011d60:	4603      	mov	r3, r0
 8011d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011d66:	2b80      	cmp	r3, #128	; 0x80
 8011d68:	bf0c      	ite	eq
 8011d6a:	2301      	moveq	r3, #1
 8011d6c:	2300      	movne	r3, #0
 8011d6e:	b2db      	uxtb	r3, r3
 8011d70:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8011d72:	7bbb      	ldrb	r3, [r7, #14]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d00b      	beq.n	8011d90 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8011d78:	88fb      	ldrh	r3, [r7, #6]
 8011d7a:	b2db      	uxtb	r3, r3
 8011d7c:	214c      	movs	r1, #76	; 0x4c
 8011d7e:	4618      	mov	r0, r3
 8011d80:	f7f9 faa3 	bl	800b2ca <IOE_Read>
 8011d84:	4603      	mov	r3, r0
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d010      	beq.n	8011dac <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8011d8a:	2301      	movs	r3, #1
 8011d8c:	73fb      	strb	r3, [r7, #15]
 8011d8e:	e00d      	b.n	8011dac <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8011d90:	88fb      	ldrh	r3, [r7, #6]
 8011d92:	b2db      	uxtb	r3, r3
 8011d94:	2201      	movs	r2, #1
 8011d96:	214b      	movs	r1, #75	; 0x4b
 8011d98:	4618      	mov	r0, r3
 8011d9a:	f7f9 fa83 	bl	800b2a4 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8011d9e:	88fb      	ldrh	r3, [r7, #6]
 8011da0:	b2db      	uxtb	r3, r3
 8011da2:	2200      	movs	r2, #0
 8011da4:	214b      	movs	r1, #75	; 0x4b
 8011da6:	4618      	mov	r0, r3
 8011da8:	f7f9 fa7c 	bl	800b2a4 <IOE_Write>
  }
  
  return ret;
 8011dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8011dae:	4618      	mov	r0, r3
 8011db0:	3710      	adds	r7, #16
 8011db2:	46bd      	mov	sp, r7
 8011db4:	bd80      	pop	{r7, pc}

08011db6 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8011db6:	b580      	push	{r7, lr}
 8011db8:	b086      	sub	sp, #24
 8011dba:	af00      	add	r7, sp, #0
 8011dbc:	4603      	mov	r3, r0
 8011dbe:	60b9      	str	r1, [r7, #8]
 8011dc0:	607a      	str	r2, [r7, #4]
 8011dc2:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8011dc4:	89fb      	ldrh	r3, [r7, #14]
 8011dc6:	b2d8      	uxtb	r0, r3
 8011dc8:	f107 0210 	add.w	r2, r7, #16
 8011dcc:	2304      	movs	r3, #4
 8011dce:	21d7      	movs	r1, #215	; 0xd7
 8011dd0:	f7f9 fa8e 	bl	800b2f0 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8011dd4:	7c3b      	ldrb	r3, [r7, #16]
 8011dd6:	061a      	lsls	r2, r3, #24
 8011dd8:	7c7b      	ldrb	r3, [r7, #17]
 8011dda:	041b      	lsls	r3, r3, #16
 8011ddc:	431a      	orrs	r2, r3
 8011dde:	7cbb      	ldrb	r3, [r7, #18]
 8011de0:	021b      	lsls	r3, r3, #8
 8011de2:	4313      	orrs	r3, r2
 8011de4:	7cfa      	ldrb	r2, [r7, #19]
 8011de6:	4313      	orrs	r3, r2
 8011de8:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8011dea:	697b      	ldr	r3, [r7, #20]
 8011dec:	0d1b      	lsrs	r3, r3, #20
 8011dee:	b29a      	uxth	r2, r3
 8011df0:	68bb      	ldr	r3, [r7, #8]
 8011df2:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8011df4:	697b      	ldr	r3, [r7, #20]
 8011df6:	0a1b      	lsrs	r3, r3, #8
 8011df8:	b29b      	uxth	r3, r3
 8011dfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011dfe:	b29a      	uxth	r2, r3
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8011e04:	89fb      	ldrh	r3, [r7, #14]
 8011e06:	b2db      	uxtb	r3, r3
 8011e08:	2201      	movs	r2, #1
 8011e0a:	214b      	movs	r1, #75	; 0x4b
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	f7f9 fa49 	bl	800b2a4 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8011e12:	89fb      	ldrh	r3, [r7, #14]
 8011e14:	b2db      	uxtb	r3, r3
 8011e16:	2200      	movs	r2, #0
 8011e18:	214b      	movs	r1, #75	; 0x4b
 8011e1a:	4618      	mov	r0, r3
 8011e1c:	f7f9 fa42 	bl	800b2a4 <IOE_Write>
}
 8011e20:	bf00      	nop
 8011e22:	3718      	adds	r7, #24
 8011e24:	46bd      	mov	sp, r7
 8011e26:	bd80      	pop	{r7, pc}

08011e28 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8011e28:	b580      	push	{r7, lr}
 8011e2a:	b082      	sub	sp, #8
 8011e2c:	af00      	add	r7, sp, #0
 8011e2e:	4603      	mov	r3, r0
 8011e30:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8011e32:	f7f9 fa30 	bl	800b296 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8011e36:	88fb      	ldrh	r3, [r7, #6]
 8011e38:	211f      	movs	r1, #31
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	f7ff fe76 	bl	8011b2c <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8011e40:	88fb      	ldrh	r3, [r7, #6]
 8011e42:	4618      	mov	r0, r3
 8011e44:	f7ff fe36 	bl	8011ab4 <stmpe811_EnableGlobalIT>
}
 8011e48:	bf00      	nop
 8011e4a:	3708      	adds	r7, #8
 8011e4c:	46bd      	mov	sp, r7
 8011e4e:	bd80      	pop	{r7, pc}

08011e50 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8011e50:	b580      	push	{r7, lr}
 8011e52:	b082      	sub	sp, #8
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	4603      	mov	r3, r0
 8011e58:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8011e5a:	88fb      	ldrh	r3, [r7, #6]
 8011e5c:	4618      	mov	r0, r3
 8011e5e:	f7ff fe47 	bl	8011af0 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8011e62:	88fb      	ldrh	r3, [r7, #6]
 8011e64:	211f      	movs	r1, #31
 8011e66:	4618      	mov	r0, r3
 8011e68:	f7ff fe81 	bl	8011b6e <stmpe811_DisableITSource>
}
 8011e6c:	bf00      	nop
 8011e6e:	3708      	adds	r7, #8
 8011e70:	46bd      	mov	sp, r7
 8011e72:	bd80      	pop	{r7, pc}

08011e74 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8011e74:	b580      	push	{r7, lr}
 8011e76:	b082      	sub	sp, #8
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	4603      	mov	r3, r0
 8011e7c:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8011e7e:	88fb      	ldrh	r3, [r7, #6]
 8011e80:	211f      	movs	r1, #31
 8011e82:	4618      	mov	r0, r3
 8011e84:	f7ff fe99 	bl	8011bba <stmpe811_ReadGITStatus>
 8011e88:	4603      	mov	r3, r0
}
 8011e8a:	4618      	mov	r0, r3
 8011e8c:	3708      	adds	r7, #8
 8011e8e:	46bd      	mov	sp, r7
 8011e90:	bd80      	pop	{r7, pc}

08011e92 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8011e92:	b580      	push	{r7, lr}
 8011e94:	b082      	sub	sp, #8
 8011e96:	af00      	add	r7, sp, #0
 8011e98:	4603      	mov	r3, r0
 8011e9a:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8011e9c:	88fb      	ldrh	r3, [r7, #6]
 8011e9e:	211f      	movs	r1, #31
 8011ea0:	4618      	mov	r0, r3
 8011ea2:	f7ff fea1 	bl	8011be8 <stmpe811_ClearGlobalIT>
}
 8011ea6:	bf00      	nop
 8011ea8:	3708      	adds	r7, #8
 8011eaa:	46bd      	mov	sp, r7
 8011eac:	bd80      	pop	{r7, pc}
	...

08011eb0 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8011eb0:	b480      	push	{r7}
 8011eb2:	b085      	sub	sp, #20
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	4603      	mov	r3, r0
 8011eb8:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8011eba:	2300      	movs	r3, #0
 8011ebc:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8011ebe:	2300      	movs	r3, #0
 8011ec0:	73fb      	strb	r3, [r7, #15]
 8011ec2:	e00b      	b.n	8011edc <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8011ec4:	7bfb      	ldrb	r3, [r7, #15]
 8011ec6:	4a0a      	ldr	r2, [pc, #40]	; (8011ef0 <stmpe811_GetInstance+0x40>)
 8011ec8:	5cd3      	ldrb	r3, [r2, r3]
 8011eca:	b29b      	uxth	r3, r3
 8011ecc:	88fa      	ldrh	r2, [r7, #6]
 8011ece:	429a      	cmp	r2, r3
 8011ed0:	d101      	bne.n	8011ed6 <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8011ed2:	7bfb      	ldrb	r3, [r7, #15]
 8011ed4:	e006      	b.n	8011ee4 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8011ed6:	7bfb      	ldrb	r3, [r7, #15]
 8011ed8:	3301      	adds	r3, #1
 8011eda:	73fb      	strb	r3, [r7, #15]
 8011edc:	7bfb      	ldrb	r3, [r7, #15]
 8011ede:	2b01      	cmp	r3, #1
 8011ee0:	d9f0      	bls.n	8011ec4 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8011ee2:	23ff      	movs	r3, #255	; 0xff
}
 8011ee4:	4618      	mov	r0, r3
 8011ee6:	3714      	adds	r7, #20
 8011ee8:	46bd      	mov	sp, r7
 8011eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eee:	4770      	bx	lr
 8011ef0:	20001ad4 	.word	0x20001ad4

08011ef4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8011ef4:	b480      	push	{r7}
 8011ef6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8011ef8:	4b08      	ldr	r3, [pc, #32]	; (8011f1c <SystemInit+0x28>)
 8011efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011efe:	4a07      	ldr	r2, [pc, #28]	; (8011f1c <SystemInit+0x28>)
 8011f00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011f04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8011f08:	4b04      	ldr	r3, [pc, #16]	; (8011f1c <SystemInit+0x28>)
 8011f0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8011f0e:	609a      	str	r2, [r3, #8]
#endif
}
 8011f10:	bf00      	nop
 8011f12:	46bd      	mov	sp, r7
 8011f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f18:	4770      	bx	lr
 8011f1a:	bf00      	nop
 8011f1c:	e000ed00 	.word	0xe000ed00

08011f20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8011f20:	b580      	push	{r7, lr}
 8011f22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8011f24:	4b0e      	ldr	r3, [pc, #56]	; (8011f60 <HAL_Init+0x40>)
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	4a0d      	ldr	r2, [pc, #52]	; (8011f60 <HAL_Init+0x40>)
 8011f2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011f2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8011f30:	4b0b      	ldr	r3, [pc, #44]	; (8011f60 <HAL_Init+0x40>)
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	4a0a      	ldr	r2, [pc, #40]	; (8011f60 <HAL_Init+0x40>)
 8011f36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011f3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8011f3c:	4b08      	ldr	r3, [pc, #32]	; (8011f60 <HAL_Init+0x40>)
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	4a07      	ldr	r2, [pc, #28]	; (8011f60 <HAL_Init+0x40>)
 8011f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011f46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8011f48:	2003      	movs	r0, #3
 8011f4a:	f000 f91c 	bl	8012186 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8011f4e:	2000      	movs	r0, #0
 8011f50:	f7fa fa32 	bl	800c3b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8011f54:	f7f9 fd4a 	bl	800b9ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8011f58:	2300      	movs	r3, #0
}
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	bd80      	pop	{r7, pc}
 8011f5e:	bf00      	nop
 8011f60:	40023c00 	.word	0x40023c00

08011f64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8011f64:	b480      	push	{r7}
 8011f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8011f68:	4b06      	ldr	r3, [pc, #24]	; (8011f84 <HAL_IncTick+0x20>)
 8011f6a:	781b      	ldrb	r3, [r3, #0]
 8011f6c:	461a      	mov	r2, r3
 8011f6e:	4b06      	ldr	r3, [pc, #24]	; (8011f88 <HAL_IncTick+0x24>)
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	4413      	add	r3, r2
 8011f74:	4a04      	ldr	r2, [pc, #16]	; (8011f88 <HAL_IncTick+0x24>)
 8011f76:	6013      	str	r3, [r2, #0]
}
 8011f78:	bf00      	nop
 8011f7a:	46bd      	mov	sp, r7
 8011f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f80:	4770      	bx	lr
 8011f82:	bf00      	nop
 8011f84:	20000090 	.word	0x20000090
 8011f88:	20012fc4 	.word	0x20012fc4

08011f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8011f8c:	b480      	push	{r7}
 8011f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8011f90:	4b03      	ldr	r3, [pc, #12]	; (8011fa0 <HAL_GetTick+0x14>)
 8011f92:	681b      	ldr	r3, [r3, #0]
}
 8011f94:	4618      	mov	r0, r3
 8011f96:	46bd      	mov	sp, r7
 8011f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f9c:	4770      	bx	lr
 8011f9e:	bf00      	nop
 8011fa0:	20012fc4 	.word	0x20012fc4

08011fa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8011fa4:	b580      	push	{r7, lr}
 8011fa6:	b084      	sub	sp, #16
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8011fac:	f7ff ffee 	bl	8011f8c <HAL_GetTick>
 8011fb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fbc:	d005      	beq.n	8011fca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8011fbe:	4b09      	ldr	r3, [pc, #36]	; (8011fe4 <HAL_Delay+0x40>)
 8011fc0:	781b      	ldrb	r3, [r3, #0]
 8011fc2:	461a      	mov	r2, r3
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	4413      	add	r3, r2
 8011fc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8011fca:	bf00      	nop
 8011fcc:	f7ff ffde 	bl	8011f8c <HAL_GetTick>
 8011fd0:	4602      	mov	r2, r0
 8011fd2:	68bb      	ldr	r3, [r7, #8]
 8011fd4:	1ad3      	subs	r3, r2, r3
 8011fd6:	68fa      	ldr	r2, [r7, #12]
 8011fd8:	429a      	cmp	r2, r3
 8011fda:	d8f7      	bhi.n	8011fcc <HAL_Delay+0x28>
  {
  }
}
 8011fdc:	bf00      	nop
 8011fde:	3710      	adds	r7, #16
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	bd80      	pop	{r7, pc}
 8011fe4:	20000090 	.word	0x20000090

08011fe8 <__NVIC_SetPriorityGrouping>:
{
 8011fe8:	b480      	push	{r7}
 8011fea:	b085      	sub	sp, #20
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	f003 0307 	and.w	r3, r3, #7
 8011ff6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8011ff8:	4b0c      	ldr	r3, [pc, #48]	; (801202c <__NVIC_SetPriorityGrouping+0x44>)
 8011ffa:	68db      	ldr	r3, [r3, #12]
 8011ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8011ffe:	68ba      	ldr	r2, [r7, #8]
 8012000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8012004:	4013      	ands	r3, r2
 8012006:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801200c:	68bb      	ldr	r3, [r7, #8]
 801200e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8012010:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8012014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801201a:	4a04      	ldr	r2, [pc, #16]	; (801202c <__NVIC_SetPriorityGrouping+0x44>)
 801201c:	68bb      	ldr	r3, [r7, #8]
 801201e:	60d3      	str	r3, [r2, #12]
}
 8012020:	bf00      	nop
 8012022:	3714      	adds	r7, #20
 8012024:	46bd      	mov	sp, r7
 8012026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801202a:	4770      	bx	lr
 801202c:	e000ed00 	.word	0xe000ed00

08012030 <__NVIC_GetPriorityGrouping>:
{
 8012030:	b480      	push	{r7}
 8012032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8012034:	4b04      	ldr	r3, [pc, #16]	; (8012048 <__NVIC_GetPriorityGrouping+0x18>)
 8012036:	68db      	ldr	r3, [r3, #12]
 8012038:	0a1b      	lsrs	r3, r3, #8
 801203a:	f003 0307 	and.w	r3, r3, #7
}
 801203e:	4618      	mov	r0, r3
 8012040:	46bd      	mov	sp, r7
 8012042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012046:	4770      	bx	lr
 8012048:	e000ed00 	.word	0xe000ed00

0801204c <__NVIC_EnableIRQ>:
{
 801204c:	b480      	push	{r7}
 801204e:	b083      	sub	sp, #12
 8012050:	af00      	add	r7, sp, #0
 8012052:	4603      	mov	r3, r0
 8012054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801205a:	2b00      	cmp	r3, #0
 801205c:	db0b      	blt.n	8012076 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801205e:	79fb      	ldrb	r3, [r7, #7]
 8012060:	f003 021f 	and.w	r2, r3, #31
 8012064:	4907      	ldr	r1, [pc, #28]	; (8012084 <__NVIC_EnableIRQ+0x38>)
 8012066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801206a:	095b      	lsrs	r3, r3, #5
 801206c:	2001      	movs	r0, #1
 801206e:	fa00 f202 	lsl.w	r2, r0, r2
 8012072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8012076:	bf00      	nop
 8012078:	370c      	adds	r7, #12
 801207a:	46bd      	mov	sp, r7
 801207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012080:	4770      	bx	lr
 8012082:	bf00      	nop
 8012084:	e000e100 	.word	0xe000e100

08012088 <__NVIC_DisableIRQ>:
{
 8012088:	b480      	push	{r7}
 801208a:	b083      	sub	sp, #12
 801208c:	af00      	add	r7, sp, #0
 801208e:	4603      	mov	r3, r0
 8012090:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012096:	2b00      	cmp	r3, #0
 8012098:	db10      	blt.n	80120bc <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801209a:	79fb      	ldrb	r3, [r7, #7]
 801209c:	f003 021f 	and.w	r2, r3, #31
 80120a0:	4909      	ldr	r1, [pc, #36]	; (80120c8 <__NVIC_DisableIRQ+0x40>)
 80120a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80120a6:	095b      	lsrs	r3, r3, #5
 80120a8:	2001      	movs	r0, #1
 80120aa:	fa00 f202 	lsl.w	r2, r0, r2
 80120ae:	3320      	adds	r3, #32
 80120b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80120b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80120b8:	f3bf 8f6f 	isb	sy
}
 80120bc:	bf00      	nop
 80120be:	370c      	adds	r7, #12
 80120c0:	46bd      	mov	sp, r7
 80120c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c6:	4770      	bx	lr
 80120c8:	e000e100 	.word	0xe000e100

080120cc <__NVIC_SetPriority>:
{
 80120cc:	b480      	push	{r7}
 80120ce:	b083      	sub	sp, #12
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	4603      	mov	r3, r0
 80120d4:	6039      	str	r1, [r7, #0]
 80120d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80120d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	db0a      	blt.n	80120f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80120e0:	683b      	ldr	r3, [r7, #0]
 80120e2:	b2da      	uxtb	r2, r3
 80120e4:	490c      	ldr	r1, [pc, #48]	; (8012118 <__NVIC_SetPriority+0x4c>)
 80120e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80120ea:	0112      	lsls	r2, r2, #4
 80120ec:	b2d2      	uxtb	r2, r2
 80120ee:	440b      	add	r3, r1
 80120f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80120f4:	e00a      	b.n	801210c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80120f6:	683b      	ldr	r3, [r7, #0]
 80120f8:	b2da      	uxtb	r2, r3
 80120fa:	4908      	ldr	r1, [pc, #32]	; (801211c <__NVIC_SetPriority+0x50>)
 80120fc:	79fb      	ldrb	r3, [r7, #7]
 80120fe:	f003 030f 	and.w	r3, r3, #15
 8012102:	3b04      	subs	r3, #4
 8012104:	0112      	lsls	r2, r2, #4
 8012106:	b2d2      	uxtb	r2, r2
 8012108:	440b      	add	r3, r1
 801210a:	761a      	strb	r2, [r3, #24]
}
 801210c:	bf00      	nop
 801210e:	370c      	adds	r7, #12
 8012110:	46bd      	mov	sp, r7
 8012112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012116:	4770      	bx	lr
 8012118:	e000e100 	.word	0xe000e100
 801211c:	e000ed00 	.word	0xe000ed00

08012120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8012120:	b480      	push	{r7}
 8012122:	b089      	sub	sp, #36	; 0x24
 8012124:	af00      	add	r7, sp, #0
 8012126:	60f8      	str	r0, [r7, #12]
 8012128:	60b9      	str	r1, [r7, #8]
 801212a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	f003 0307 	and.w	r3, r3, #7
 8012132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8012134:	69fb      	ldr	r3, [r7, #28]
 8012136:	f1c3 0307 	rsb	r3, r3, #7
 801213a:	2b04      	cmp	r3, #4
 801213c:	bf28      	it	cs
 801213e:	2304      	movcs	r3, #4
 8012140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8012142:	69fb      	ldr	r3, [r7, #28]
 8012144:	3304      	adds	r3, #4
 8012146:	2b06      	cmp	r3, #6
 8012148:	d902      	bls.n	8012150 <NVIC_EncodePriority+0x30>
 801214a:	69fb      	ldr	r3, [r7, #28]
 801214c:	3b03      	subs	r3, #3
 801214e:	e000      	b.n	8012152 <NVIC_EncodePriority+0x32>
 8012150:	2300      	movs	r3, #0
 8012152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012154:	f04f 32ff 	mov.w	r2, #4294967295
 8012158:	69bb      	ldr	r3, [r7, #24]
 801215a:	fa02 f303 	lsl.w	r3, r2, r3
 801215e:	43da      	mvns	r2, r3
 8012160:	68bb      	ldr	r3, [r7, #8]
 8012162:	401a      	ands	r2, r3
 8012164:	697b      	ldr	r3, [r7, #20]
 8012166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8012168:	f04f 31ff 	mov.w	r1, #4294967295
 801216c:	697b      	ldr	r3, [r7, #20]
 801216e:	fa01 f303 	lsl.w	r3, r1, r3
 8012172:	43d9      	mvns	r1, r3
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012178:	4313      	orrs	r3, r2
         );
}
 801217a:	4618      	mov	r0, r3
 801217c:	3724      	adds	r7, #36	; 0x24
 801217e:	46bd      	mov	sp, r7
 8012180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012184:	4770      	bx	lr

08012186 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8012186:	b580      	push	{r7, lr}
 8012188:	b082      	sub	sp, #8
 801218a:	af00      	add	r7, sp, #0
 801218c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801218e:	6878      	ldr	r0, [r7, #4]
 8012190:	f7ff ff2a 	bl	8011fe8 <__NVIC_SetPriorityGrouping>
}
 8012194:	bf00      	nop
 8012196:	3708      	adds	r7, #8
 8012198:	46bd      	mov	sp, r7
 801219a:	bd80      	pop	{r7, pc}

0801219c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801219c:	b580      	push	{r7, lr}
 801219e:	b086      	sub	sp, #24
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	4603      	mov	r3, r0
 80121a4:	60b9      	str	r1, [r7, #8]
 80121a6:	607a      	str	r2, [r7, #4]
 80121a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80121aa:	2300      	movs	r3, #0
 80121ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80121ae:	f7ff ff3f 	bl	8012030 <__NVIC_GetPriorityGrouping>
 80121b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80121b4:	687a      	ldr	r2, [r7, #4]
 80121b6:	68b9      	ldr	r1, [r7, #8]
 80121b8:	6978      	ldr	r0, [r7, #20]
 80121ba:	f7ff ffb1 	bl	8012120 <NVIC_EncodePriority>
 80121be:	4602      	mov	r2, r0
 80121c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80121c4:	4611      	mov	r1, r2
 80121c6:	4618      	mov	r0, r3
 80121c8:	f7ff ff80 	bl	80120cc <__NVIC_SetPriority>
}
 80121cc:	bf00      	nop
 80121ce:	3718      	adds	r7, #24
 80121d0:	46bd      	mov	sp, r7
 80121d2:	bd80      	pop	{r7, pc}

080121d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b082      	sub	sp, #8
 80121d8:	af00      	add	r7, sp, #0
 80121da:	4603      	mov	r3, r0
 80121dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80121de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80121e2:	4618      	mov	r0, r3
 80121e4:	f7ff ff32 	bl	801204c <__NVIC_EnableIRQ>
}
 80121e8:	bf00      	nop
 80121ea:	3708      	adds	r7, #8
 80121ec:	46bd      	mov	sp, r7
 80121ee:	bd80      	pop	{r7, pc}

080121f0 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80121f0:	b580      	push	{r7, lr}
 80121f2:	b082      	sub	sp, #8
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	4603      	mov	r3, r0
 80121f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80121fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80121fe:	4618      	mov	r0, r3
 8012200:	f7ff ff42 	bl	8012088 <__NVIC_DisableIRQ>
}
 8012204:	bf00      	nop
 8012206:	3708      	adds	r7, #8
 8012208:	46bd      	mov	sp, r7
 801220a:	bd80      	pop	{r7, pc}

0801220c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 801220c:	b580      	push	{r7, lr}
 801220e:	b082      	sub	sp, #8
 8012210:	af00      	add	r7, sp, #0
 8012212:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	2b00      	cmp	r3, #0
 8012218:	d101      	bne.n	801221e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 801221a:	2301      	movs	r3, #1
 801221c:	e00e      	b.n	801223c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	795b      	ldrb	r3, [r3, #5]
 8012222:	b2db      	uxtb	r3, r3
 8012224:	2b00      	cmp	r3, #0
 8012226:	d105      	bne.n	8012234 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	2200      	movs	r2, #0
 801222c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 801222e:	6878      	ldr	r0, [r7, #4]
 8012230:	f7f9 fc08 	bl	800ba44 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	2201      	movs	r2, #1
 8012238:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 801223a:	2300      	movs	r3, #0
}
 801223c:	4618      	mov	r0, r3
 801223e:	3708      	adds	r7, #8
 8012240:	46bd      	mov	sp, r7
 8012242:	bd80      	pop	{r7, pc}

08012244 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8012244:	b580      	push	{r7, lr}
 8012246:	b086      	sub	sp, #24
 8012248:	af00      	add	r7, sp, #0
 801224a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 801224c:	2300      	movs	r3, #0
 801224e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8012250:	f7ff fe9c 	bl	8011f8c <HAL_GetTick>
 8012254:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	2b00      	cmp	r3, #0
 801225a:	d101      	bne.n	8012260 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 801225c:	2301      	movs	r3, #1
 801225e:	e099      	b.n	8012394 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	2200      	movs	r2, #0
 8012264:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	2202      	movs	r2, #2
 801226c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	681a      	ldr	r2, [r3, #0]
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	f022 0201 	bic.w	r2, r2, #1
 801227e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8012280:	e00f      	b.n	80122a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8012282:	f7ff fe83 	bl	8011f8c <HAL_GetTick>
 8012286:	4602      	mov	r2, r0
 8012288:	693b      	ldr	r3, [r7, #16]
 801228a:	1ad3      	subs	r3, r2, r3
 801228c:	2b05      	cmp	r3, #5
 801228e:	d908      	bls.n	80122a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	2220      	movs	r2, #32
 8012294:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	2203      	movs	r2, #3
 801229a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 801229e:	2303      	movs	r3, #3
 80122a0:	e078      	b.n	8012394 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	f003 0301 	and.w	r3, r3, #1
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d1e8      	bne.n	8012282 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80122b8:	697a      	ldr	r2, [r7, #20]
 80122ba:	4b38      	ldr	r3, [pc, #224]	; (801239c <HAL_DMA_Init+0x158>)
 80122bc:	4013      	ands	r3, r2
 80122be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	685a      	ldr	r2, [r3, #4]
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	689b      	ldr	r3, [r3, #8]
 80122c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80122ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	691b      	ldr	r3, [r3, #16]
 80122d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80122da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	699b      	ldr	r3, [r3, #24]
 80122e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80122e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	6a1b      	ldr	r3, [r3, #32]
 80122ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80122ee:	697a      	ldr	r2, [r7, #20]
 80122f0:	4313      	orrs	r3, r2
 80122f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122f8:	2b04      	cmp	r3, #4
 80122fa:	d107      	bne.n	801230c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012304:	4313      	orrs	r3, r2
 8012306:	697a      	ldr	r2, [r7, #20]
 8012308:	4313      	orrs	r3, r2
 801230a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	697a      	ldr	r2, [r7, #20]
 8012312:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	695b      	ldr	r3, [r3, #20]
 801231a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801231c:	697b      	ldr	r3, [r7, #20]
 801231e:	f023 0307 	bic.w	r3, r3, #7
 8012322:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012328:	697a      	ldr	r2, [r7, #20]
 801232a:	4313      	orrs	r3, r2
 801232c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012332:	2b04      	cmp	r3, #4
 8012334:	d117      	bne.n	8012366 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801233a:	697a      	ldr	r2, [r7, #20]
 801233c:	4313      	orrs	r3, r2
 801233e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012344:	2b00      	cmp	r3, #0
 8012346:	d00e      	beq.n	8012366 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8012348:	6878      	ldr	r0, [r7, #4]
 801234a:	f000 f8e5 	bl	8012518 <DMA_CheckFifoParam>
 801234e:	4603      	mov	r3, r0
 8012350:	2b00      	cmp	r3, #0
 8012352:	d008      	beq.n	8012366 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	2240      	movs	r2, #64	; 0x40
 8012358:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	2201      	movs	r2, #1
 801235e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8012362:	2301      	movs	r3, #1
 8012364:	e016      	b.n	8012394 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	697a      	ldr	r2, [r7, #20]
 801236c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801236e:	6878      	ldr	r0, [r7, #4]
 8012370:	f000 f89c 	bl	80124ac <DMA_CalcBaseAndBitshift>
 8012374:	4603      	mov	r3, r0
 8012376:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801237c:	223f      	movs	r2, #63	; 0x3f
 801237e:	409a      	lsls	r2, r3
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	2200      	movs	r2, #0
 8012388:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	2201      	movs	r2, #1
 801238e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8012392:	2300      	movs	r3, #0
}
 8012394:	4618      	mov	r0, r3
 8012396:	3718      	adds	r7, #24
 8012398:	46bd      	mov	sp, r7
 801239a:	bd80      	pop	{r7, pc}
 801239c:	f010803f 	.word	0xf010803f

080123a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80123a0:	b580      	push	{r7, lr}
 80123a2:	b086      	sub	sp, #24
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	60f8      	str	r0, [r7, #12]
 80123a8:	60b9      	str	r1, [r7, #8]
 80123aa:	607a      	str	r2, [r7, #4]
 80123ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80123ae:	2300      	movs	r3, #0
 80123b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80123b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80123be:	2b01      	cmp	r3, #1
 80123c0:	d101      	bne.n	80123c6 <HAL_DMA_Start_IT+0x26>
 80123c2:	2302      	movs	r3, #2
 80123c4:	e040      	b.n	8012448 <HAL_DMA_Start_IT+0xa8>
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	2201      	movs	r2, #1
 80123ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80123d4:	b2db      	uxtb	r3, r3
 80123d6:	2b01      	cmp	r3, #1
 80123d8:	d12f      	bne.n	801243a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	2202      	movs	r2, #2
 80123de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	2200      	movs	r2, #0
 80123e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80123e8:	683b      	ldr	r3, [r7, #0]
 80123ea:	687a      	ldr	r2, [r7, #4]
 80123ec:	68b9      	ldr	r1, [r7, #8]
 80123ee:	68f8      	ldr	r0, [r7, #12]
 80123f0:	f000 f82e 	bl	8012450 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80123f8:	223f      	movs	r2, #63	; 0x3f
 80123fa:	409a      	lsls	r2, r3
 80123fc:	693b      	ldr	r3, [r7, #16]
 80123fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	681a      	ldr	r2, [r3, #0]
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	f042 0216 	orr.w	r2, r2, #22
 801240e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012414:	2b00      	cmp	r3, #0
 8012416:	d007      	beq.n	8012428 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	681a      	ldr	r2, [r3, #0]
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	f042 0208 	orr.w	r2, r2, #8
 8012426:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	681a      	ldr	r2, [r3, #0]
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	f042 0201 	orr.w	r2, r2, #1
 8012436:	601a      	str	r2, [r3, #0]
 8012438:	e005      	b.n	8012446 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	2200      	movs	r2, #0
 801243e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8012442:	2302      	movs	r3, #2
 8012444:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8012446:	7dfb      	ldrb	r3, [r7, #23]
}
 8012448:	4618      	mov	r0, r3
 801244a:	3718      	adds	r7, #24
 801244c:	46bd      	mov	sp, r7
 801244e:	bd80      	pop	{r7, pc}

08012450 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8012450:	b480      	push	{r7}
 8012452:	b085      	sub	sp, #20
 8012454:	af00      	add	r7, sp, #0
 8012456:	60f8      	str	r0, [r7, #12]
 8012458:	60b9      	str	r1, [r7, #8]
 801245a:	607a      	str	r2, [r7, #4]
 801245c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	681a      	ldr	r2, [r3, #0]
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801246c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	683a      	ldr	r2, [r7, #0]
 8012474:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	689b      	ldr	r3, [r3, #8]
 801247a:	2b40      	cmp	r3, #64	; 0x40
 801247c:	d108      	bne.n	8012490 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	687a      	ldr	r2, [r7, #4]
 8012484:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	68ba      	ldr	r2, [r7, #8]
 801248c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 801248e:	e007      	b.n	80124a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	68ba      	ldr	r2, [r7, #8]
 8012496:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	687a      	ldr	r2, [r7, #4]
 801249e:	60da      	str	r2, [r3, #12]
}
 80124a0:	bf00      	nop
 80124a2:	3714      	adds	r7, #20
 80124a4:	46bd      	mov	sp, r7
 80124a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124aa:	4770      	bx	lr

080124ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80124ac:	b480      	push	{r7}
 80124ae:	b085      	sub	sp, #20
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	b2db      	uxtb	r3, r3
 80124ba:	3b10      	subs	r3, #16
 80124bc:	4a14      	ldr	r2, [pc, #80]	; (8012510 <DMA_CalcBaseAndBitshift+0x64>)
 80124be:	fba2 2303 	umull	r2, r3, r2, r3
 80124c2:	091b      	lsrs	r3, r3, #4
 80124c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80124c6:	4a13      	ldr	r2, [pc, #76]	; (8012514 <DMA_CalcBaseAndBitshift+0x68>)
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	4413      	add	r3, r2
 80124cc:	781b      	ldrb	r3, [r3, #0]
 80124ce:	461a      	mov	r2, r3
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	2b03      	cmp	r3, #3
 80124d8:	d909      	bls.n	80124ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80124e2:	f023 0303 	bic.w	r3, r3, #3
 80124e6:	1d1a      	adds	r2, r3, #4
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	659a      	str	r2, [r3, #88]	; 0x58
 80124ec:	e007      	b.n	80124fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80124f6:	f023 0303 	bic.w	r3, r3, #3
 80124fa:	687a      	ldr	r2, [r7, #4]
 80124fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8012502:	4618      	mov	r0, r3
 8012504:	3714      	adds	r7, #20
 8012506:	46bd      	mov	sp, r7
 8012508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801250c:	4770      	bx	lr
 801250e:	bf00      	nop
 8012510:	aaaaaaab 	.word	0xaaaaaaab
 8012514:	08031d7c 	.word	0x08031d7c

08012518 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8012518:	b480      	push	{r7}
 801251a:	b085      	sub	sp, #20
 801251c:	af00      	add	r7, sp, #0
 801251e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012520:	2300      	movs	r3, #0
 8012522:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012528:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	699b      	ldr	r3, [r3, #24]
 801252e:	2b00      	cmp	r3, #0
 8012530:	d11f      	bne.n	8012572 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8012532:	68bb      	ldr	r3, [r7, #8]
 8012534:	2b03      	cmp	r3, #3
 8012536:	d855      	bhi.n	80125e4 <DMA_CheckFifoParam+0xcc>
 8012538:	a201      	add	r2, pc, #4	; (adr r2, 8012540 <DMA_CheckFifoParam+0x28>)
 801253a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801253e:	bf00      	nop
 8012540:	08012551 	.word	0x08012551
 8012544:	08012563 	.word	0x08012563
 8012548:	08012551 	.word	0x08012551
 801254c:	080125e5 	.word	0x080125e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012554:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012558:	2b00      	cmp	r3, #0
 801255a:	d045      	beq.n	80125e8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 801255c:	2301      	movs	r3, #1
 801255e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012560:	e042      	b.n	80125e8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012566:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801256a:	d13f      	bne.n	80125ec <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 801256c:	2301      	movs	r3, #1
 801256e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012570:	e03c      	b.n	80125ec <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	699b      	ldr	r3, [r3, #24]
 8012576:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801257a:	d121      	bne.n	80125c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 801257c:	68bb      	ldr	r3, [r7, #8]
 801257e:	2b03      	cmp	r3, #3
 8012580:	d836      	bhi.n	80125f0 <DMA_CheckFifoParam+0xd8>
 8012582:	a201      	add	r2, pc, #4	; (adr r2, 8012588 <DMA_CheckFifoParam+0x70>)
 8012584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012588:	08012599 	.word	0x08012599
 801258c:	0801259f 	.word	0x0801259f
 8012590:	08012599 	.word	0x08012599
 8012594:	080125b1 	.word	0x080125b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8012598:	2301      	movs	r3, #1
 801259a:	73fb      	strb	r3, [r7, #15]
      break;
 801259c:	e02f      	b.n	80125fe <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d024      	beq.n	80125f4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80125aa:	2301      	movs	r3, #1
 80125ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80125ae:	e021      	b.n	80125f4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80125b8:	d11e      	bne.n	80125f8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80125ba:	2301      	movs	r3, #1
 80125bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80125be:	e01b      	b.n	80125f8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80125c0:	68bb      	ldr	r3, [r7, #8]
 80125c2:	2b02      	cmp	r3, #2
 80125c4:	d902      	bls.n	80125cc <DMA_CheckFifoParam+0xb4>
 80125c6:	2b03      	cmp	r3, #3
 80125c8:	d003      	beq.n	80125d2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80125ca:	e018      	b.n	80125fe <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80125cc:	2301      	movs	r3, #1
 80125ce:	73fb      	strb	r3, [r7, #15]
      break;
 80125d0:	e015      	b.n	80125fe <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d00e      	beq.n	80125fc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80125de:	2301      	movs	r3, #1
 80125e0:	73fb      	strb	r3, [r7, #15]
      break;
 80125e2:	e00b      	b.n	80125fc <DMA_CheckFifoParam+0xe4>
      break;
 80125e4:	bf00      	nop
 80125e6:	e00a      	b.n	80125fe <DMA_CheckFifoParam+0xe6>
      break;
 80125e8:	bf00      	nop
 80125ea:	e008      	b.n	80125fe <DMA_CheckFifoParam+0xe6>
      break;
 80125ec:	bf00      	nop
 80125ee:	e006      	b.n	80125fe <DMA_CheckFifoParam+0xe6>
      break;
 80125f0:	bf00      	nop
 80125f2:	e004      	b.n	80125fe <DMA_CheckFifoParam+0xe6>
      break;
 80125f4:	bf00      	nop
 80125f6:	e002      	b.n	80125fe <DMA_CheckFifoParam+0xe6>
      break;   
 80125f8:	bf00      	nop
 80125fa:	e000      	b.n	80125fe <DMA_CheckFifoParam+0xe6>
      break;
 80125fc:	bf00      	nop
    }
  } 
  
  return status; 
 80125fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8012600:	4618      	mov	r0, r3
 8012602:	3714      	adds	r7, #20
 8012604:	46bd      	mov	sp, r7
 8012606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801260a:	4770      	bx	lr

0801260c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 801260c:	b580      	push	{r7, lr}
 801260e:	b082      	sub	sp, #8
 8012610:	af00      	add	r7, sp, #0
 8012612:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	2b00      	cmp	r3, #0
 8012618:	d101      	bne.n	801261e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 801261a:	2301      	movs	r3, #1
 801261c:	e03b      	b.n	8012696 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8012624:	b2db      	uxtb	r3, r3
 8012626:	2b00      	cmp	r3, #0
 8012628:	d106      	bne.n	8012638 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	2200      	movs	r2, #0
 801262e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8012632:	6878      	ldr	r0, [r7, #4]
 8012634:	f7f9 fa28 	bl	800ba88 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	2202      	movs	r2, #2
 801263c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	685a      	ldr	r2, [r3, #4]
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	430a      	orrs	r2, r1
 8012654:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801265c:	f023 0107 	bic.w	r1, r3, #7
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	689a      	ldr	r2, [r3, #8]
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	430a      	orrs	r2, r1
 801266a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012672:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8012676:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801267a:	687a      	ldr	r2, [r7, #4]
 801267c:	68d1      	ldr	r1, [r2, #12]
 801267e:	687a      	ldr	r2, [r7, #4]
 8012680:	6812      	ldr	r2, [r2, #0]
 8012682:	430b      	orrs	r3, r1
 8012684:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	2200      	movs	r2, #0
 801268a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	2201      	movs	r2, #1
 8012690:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8012694:	2300      	movs	r3, #0
}
 8012696:	4618      	mov	r0, r3
 8012698:	3708      	adds	r7, #8
 801269a:	46bd      	mov	sp, r7
 801269c:	bd80      	pop	{r7, pc}
	...

080126a0 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 80126a0:	b580      	push	{r7, lr}
 80126a2:	b082      	sub	sp, #8
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d101      	bne.n	80126b2 <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 80126ae:	2301      	movs	r3, #1
 80126b0:	e05f      	b.n	8012772 <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 80126b2:	4b32      	ldr	r3, [pc, #200]	; (801277c <HAL_DMA2D_DeInit+0xdc>)
 80126b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d02e      	beq.n	801271c <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	681b      	ldr	r3, [r3, #0]
 80126c4:	f003 0301 	and.w	r3, r3, #1
 80126c8:	2b01      	cmp	r3, #1
 80126ca:	d107      	bne.n	80126dc <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 80126cc:	6878      	ldr	r0, [r7, #4]
 80126ce:	f000 f8c1 	bl	8012854 <HAL_DMA2D_Abort>
 80126d2:	4603      	mov	r3, r0
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d021      	beq.n	801271c <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 80126d8:	2301      	movs	r3, #1
 80126da:	e04a      	b.n	8012772 <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126e2:	f003 0320 	and.w	r3, r3, #32
 80126e6:	2b20      	cmp	r3, #32
 80126e8:	d108      	bne.n	80126fc <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 80126ea:	2100      	movs	r1, #0
 80126ec:	6878      	ldr	r0, [r7, #4]
 80126ee:	f000 f8f7 	bl	80128e0 <HAL_DMA2D_CLUTLoading_Abort>
 80126f2:	4603      	mov	r3, r0
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d011      	beq.n	801271c <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 80126f8:	2301      	movs	r3, #1
 80126fa:	e03a      	b.n	8012772 <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	69db      	ldr	r3, [r3, #28]
 8012702:	f003 0320 	and.w	r3, r3, #32
 8012706:	2b20      	cmp	r3, #32
 8012708:	d108      	bne.n	801271c <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 801270a:	2101      	movs	r1, #1
 801270c:	6878      	ldr	r0, [r7, #4]
 801270e:	f000 f8e7 	bl	80128e0 <HAL_DMA2D_CLUTLoading_Abort>
 8012712:	4603      	mov	r3, r0
 8012714:	2b00      	cmp	r3, #0
 8012716:	d001      	beq.n	801271c <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8012718:	2301      	movs	r3, #1
 801271a:	e02a      	b.n	8012772 <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	2200      	movs	r2, #0
 8012722:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	223f      	movs	r2, #63	; 0x3f
 801272a:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	2200      	movs	r2, #0
 8012732:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	2200      	movs	r2, #0
 801273a:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	2200      	movs	r2, #0
 8012742:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	2200      	movs	r2, #0
 801274a:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	2200      	movs	r2, #0
 8012752:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 8012754:	6878      	ldr	r0, [r7, #4]
 8012756:	f7f9 f9bf 	bl	800bad8 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	2200      	movs	r2, #0
 801275e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	2200      	movs	r2, #0
 8012764:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	2200      	movs	r2, #0
 801276c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8012770:	2300      	movs	r3, #0
}
 8012772:	4618      	mov	r0, r3
 8012774:	3708      	adds	r7, #8
 8012776:	46bd      	mov	sp, r7
 8012778:	bd80      	pop	{r7, pc}
 801277a:	bf00      	nop
 801277c:	40023800 	.word	0x40023800

08012780 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8012780:	b580      	push	{r7, lr}
 8012782:	b086      	sub	sp, #24
 8012784:	af02      	add	r7, sp, #8
 8012786:	60f8      	str	r0, [r7, #12]
 8012788:	60b9      	str	r1, [r7, #8]
 801278a:	607a      	str	r2, [r7, #4]
 801278c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012794:	2b01      	cmp	r3, #1
 8012796:	d101      	bne.n	801279c <HAL_DMA2D_Start_IT+0x1c>
 8012798:	2302      	movs	r3, #2
 801279a:	e020      	b.n	80127de <HAL_DMA2D_Start_IT+0x5e>
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	2201      	movs	r2, #1
 80127a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	2202      	movs	r2, #2
 80127a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80127ac:	69bb      	ldr	r3, [r7, #24]
 80127ae:	9300      	str	r3, [sp, #0]
 80127b0:	683b      	ldr	r3, [r7, #0]
 80127b2:	687a      	ldr	r2, [r7, #4]
 80127b4:	68b9      	ldr	r1, [r7, #8]
 80127b6:	68f8      	ldr	r0, [r7, #12]
 80127b8:	f000 fa84 	bl	8012cc4 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	681a      	ldr	r2, [r3, #0]
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	681b      	ldr	r3, [r3, #0]
 80127c6:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 80127ca:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80127cc:	68fb      	ldr	r3, [r7, #12]
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	681a      	ldr	r2, [r3, #0]
 80127d2:	68fb      	ldr	r3, [r7, #12]
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	f042 0201 	orr.w	r2, r2, #1
 80127da:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80127dc:	2300      	movs	r3, #0
}
 80127de:	4618      	mov	r0, r3
 80127e0:	3710      	adds	r7, #16
 80127e2:	46bd      	mov	sp, r7
 80127e4:	bd80      	pop	{r7, pc}

080127e6 <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80127e6:	b580      	push	{r7, lr}
 80127e8:	b086      	sub	sp, #24
 80127ea:	af02      	add	r7, sp, #8
 80127ec:	60f8      	str	r0, [r7, #12]
 80127ee:	60b9      	str	r1, [r7, #8]
 80127f0:	607a      	str	r2, [r7, #4]
 80127f2:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80127fa:	2b01      	cmp	r3, #1
 80127fc:	d101      	bne.n	8012802 <HAL_DMA2D_BlendingStart_IT+0x1c>
 80127fe:	2302      	movs	r3, #2
 8012800:	e024      	b.n	801284c <HAL_DMA2D_BlendingStart_IT+0x66>
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	2201      	movs	r2, #1
 8012806:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	2202      	movs	r2, #2
 801280e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	687a      	ldr	r2, [r7, #4]
 8012818:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 801281a:	69fb      	ldr	r3, [r7, #28]
 801281c:	9300      	str	r3, [sp, #0]
 801281e:	69bb      	ldr	r3, [r7, #24]
 8012820:	683a      	ldr	r2, [r7, #0]
 8012822:	68b9      	ldr	r1, [r7, #8]
 8012824:	68f8      	ldr	r0, [r7, #12]
 8012826:	f000 fa4d 	bl	8012cc4 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	681a      	ldr	r2, [r3, #0]
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8012838:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	681a      	ldr	r2, [r3, #0]
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	f042 0201 	orr.w	r2, r2, #1
 8012848:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 801284a:	2300      	movs	r3, #0
}
 801284c:	4618      	mov	r0, r3
 801284e:	3710      	adds	r7, #16
 8012850:	46bd      	mov	sp, r7
 8012852:	bd80      	pop	{r7, pc}

08012854 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 8012854:	b580      	push	{r7, lr}
 8012856:	b084      	sub	sp, #16
 8012858:	af00      	add	r7, sp, #0
 801285a:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	f023 0205 	bic.w	r2, r3, #5
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	f042 0204 	orr.w	r2, r2, #4
 801286e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8012870:	f7ff fb8c 	bl	8011f8c <HAL_GetTick>
 8012874:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8012876:	e017      	b.n	80128a8 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8012878:	f7ff fb88 	bl	8011f8c <HAL_GetTick>
 801287c:	4602      	mov	r2, r0
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	1ad3      	subs	r3, r2, r3
 8012882:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012886:	d90f      	bls.n	80128a8 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801288c:	f043 0220 	orr.w	r2, r3, #32
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	2203      	movs	r2, #3
 8012898:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	2200      	movs	r2, #0
 80128a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 80128a4:	2303      	movs	r3, #3
 80128a6:	e017      	b.n	80128d8 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	f003 0301 	and.w	r3, r3, #1
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d1e0      	bne.n	8012878 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	681a      	ldr	r2, [r3, #0]
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 80128c4:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	2201      	movs	r2, #1
 80128ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	2200      	movs	r2, #0
 80128d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80128d6:	2300      	movs	r3, #0
}
 80128d8:	4618      	mov	r0, r3
 80128da:	3710      	adds	r7, #16
 80128dc:	46bd      	mov	sp, r7
 80128de:	bd80      	pop	{r7, pc}

080128e0 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80128e0:	b580      	push	{r7, lr}
 80128e2:	b084      	sub	sp, #16
 80128e4:	af00      	add	r7, sp, #0
 80128e6:	6078      	str	r0, [r7, #4]
 80128e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	3324      	adds	r3, #36	; 0x24
 80128f0:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	681a      	ldr	r2, [r3, #0]
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	f042 0204 	orr.w	r2, r2, #4
 8012900:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 8012902:	683b      	ldr	r3, [r7, #0]
 8012904:	2b01      	cmp	r3, #1
 8012906:	d103      	bne.n	8012910 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	331c      	adds	r3, #28
 801290e:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 8012910:	f7ff fb3c 	bl	8011f8c <HAL_GetTick>
 8012914:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8012916:	e017      	b.n	8012948 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8012918:	f7ff fb38 	bl	8011f8c <HAL_GetTick>
 801291c:	4602      	mov	r2, r0
 801291e:	68bb      	ldr	r3, [r7, #8]
 8012920:	1ad3      	subs	r3, r2, r3
 8012922:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012926:	d90f      	bls.n	8012948 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801292c:	f043 0220 	orr.w	r2, r3, #32
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	2203      	movs	r2, #3
 8012938:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	2200      	movs	r2, #0
 8012940:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8012944:	2303      	movs	r3, #3
 8012946:	e016      	b.n	8012976 <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	f003 0320 	and.w	r3, r3, #32
 8012950:	2b00      	cmp	r3, #0
 8012952:	d1e1      	bne.n	8012918 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	681a      	ldr	r2, [r3, #0]
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 8012962:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	2201      	movs	r2, #1
 8012968:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	2200      	movs	r2, #0
 8012970:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8012974:	2300      	movs	r3, #0
}
 8012976:	4618      	mov	r0, r3
 8012978:	3710      	adds	r7, #16
 801297a:	46bd      	mov	sp, r7
 801297c:	bd80      	pop	{r7, pc}

0801297e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 801297e:	b580      	push	{r7, lr}
 8012980:	b084      	sub	sp, #16
 8012982:	af00      	add	r7, sp, #0
 8012984:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	685b      	ldr	r3, [r3, #4]
 801298c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	f003 0301 	and.w	r3, r3, #1
 801299c:	2b00      	cmp	r3, #0
 801299e:	d026      	beq.n	80129ee <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80129a0:	68bb      	ldr	r3, [r7, #8]
 80129a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d021      	beq.n	80129ee <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	681a      	ldr	r2, [r3, #0]
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80129b8:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80129be:	f043 0201 	orr.w	r2, r3, #1
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	2201      	movs	r2, #1
 80129cc:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	2204      	movs	r2, #4
 80129d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	2200      	movs	r2, #0
 80129da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	695b      	ldr	r3, [r3, #20]
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d003      	beq.n	80129ee <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	695b      	ldr	r3, [r3, #20]
 80129ea:	6878      	ldr	r0, [r7, #4]
 80129ec:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	f003 0320 	and.w	r3, r3, #32
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d026      	beq.n	8012a46 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80129f8:	68bb      	ldr	r3, [r7, #8]
 80129fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d021      	beq.n	8012a46 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	681b      	ldr	r3, [r3, #0]
 8012a06:	681a      	ldr	r2, [r3, #0]
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8012a10:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	2220      	movs	r2, #32
 8012a18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012a1e:	f043 0202 	orr.w	r2, r3, #2
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	2204      	movs	r2, #4
 8012a2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	2200      	movs	r2, #0
 8012a32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	695b      	ldr	r3, [r3, #20]
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d003      	beq.n	8012a46 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	695b      	ldr	r3, [r3, #20]
 8012a42:	6878      	ldr	r0, [r7, #4]
 8012a44:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8012a46:	68fb      	ldr	r3, [r7, #12]
 8012a48:	f003 0308 	and.w	r3, r3, #8
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d026      	beq.n	8012a9e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8012a50:	68bb      	ldr	r3, [r7, #8]
 8012a52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d021      	beq.n	8012a9e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	681a      	ldr	r2, [r3, #0]
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012a68:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	2208      	movs	r2, #8
 8012a70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012a76:	f043 0204 	orr.w	r2, r3, #4
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	2204      	movs	r2, #4
 8012a82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	2200      	movs	r2, #0
 8012a8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	695b      	ldr	r3, [r3, #20]
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d003      	beq.n	8012a9e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	695b      	ldr	r3, [r3, #20]
 8012a9a:	6878      	ldr	r0, [r7, #4]
 8012a9c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	f003 0304 	and.w	r3, r3, #4
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d013      	beq.n	8012ad0 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8012aa8:	68bb      	ldr	r3, [r7, #8]
 8012aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d00e      	beq.n	8012ad0 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	681a      	ldr	r2, [r3, #0]
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012ac0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	2204      	movs	r2, #4
 8012ac8:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8012aca:	6878      	ldr	r0, [r7, #4]
 8012acc:	f000 f853 	bl	8012b76 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	f003 0302 	and.w	r3, r3, #2
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d024      	beq.n	8012b24 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8012ada:	68bb      	ldr	r3, [r7, #8]
 8012adc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d01f      	beq.n	8012b24 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	681a      	ldr	r2, [r3, #0]
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8012af2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	2202      	movs	r2, #2
 8012afa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	2201      	movs	r2, #1
 8012b08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	2200      	movs	r2, #0
 8012b10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	691b      	ldr	r3, [r3, #16]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d003      	beq.n	8012b24 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	691b      	ldr	r3, [r3, #16]
 8012b20:	6878      	ldr	r0, [r7, #4]
 8012b22:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	f003 0310 	and.w	r3, r3, #16
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d01f      	beq.n	8012b6e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8012b2e:	68bb      	ldr	r3, [r7, #8]
 8012b30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d01a      	beq.n	8012b6e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	681a      	ldr	r2, [r3, #0]
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8012b46:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	2210      	movs	r2, #16
 8012b4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	2201      	movs	r2, #1
 8012b5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	2200      	movs	r2, #0
 8012b64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8012b68:	6878      	ldr	r0, [r7, #4]
 8012b6a:	f000 f80e 	bl	8012b8a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8012b6e:	bf00      	nop
 8012b70:	3710      	adds	r7, #16
 8012b72:	46bd      	mov	sp, r7
 8012b74:	bd80      	pop	{r7, pc}

08012b76 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8012b76:	b480      	push	{r7}
 8012b78:	b083      	sub	sp, #12
 8012b7a:	af00      	add	r7, sp, #0
 8012b7c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8012b7e:	bf00      	nop
 8012b80:	370c      	adds	r7, #12
 8012b82:	46bd      	mov	sp, r7
 8012b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b88:	4770      	bx	lr

08012b8a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8012b8a:	b480      	push	{r7}
 8012b8c:	b083      	sub	sp, #12
 8012b8e:	af00      	add	r7, sp, #0
 8012b90:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8012b92:	bf00      	nop
 8012b94:	370c      	adds	r7, #12
 8012b96:	46bd      	mov	sp, r7
 8012b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b9c:	4770      	bx	lr
	...

08012ba0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8012ba0:	b480      	push	{r7}
 8012ba2:	b087      	sub	sp, #28
 8012ba4:	af00      	add	r7, sp, #0
 8012ba6:	6078      	str	r0, [r7, #4]
 8012ba8:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	685b      	ldr	r3, [r3, #4]
 8012bae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012bb8:	2b01      	cmp	r3, #1
 8012bba:	d101      	bne.n	8012bc0 <HAL_DMA2D_ConfigLayer+0x20>
 8012bbc:	2302      	movs	r3, #2
 8012bbe:	e079      	b.n	8012cb4 <HAL_DMA2D_ConfigLayer+0x114>
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	2201      	movs	r2, #1
 8012bc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	2202      	movs	r2, #2
 8012bcc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8012bd0:	683b      	ldr	r3, [r7, #0]
 8012bd2:	011b      	lsls	r3, r3, #4
 8012bd4:	3318      	adds	r3, #24
 8012bd6:	687a      	ldr	r2, [r7, #4]
 8012bd8:	4413      	add	r3, r2
 8012bda:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8012bdc:	693b      	ldr	r3, [r7, #16]
 8012bde:	685a      	ldr	r2, [r3, #4]
 8012be0:	693b      	ldr	r3, [r7, #16]
 8012be2:	689b      	ldr	r3, [r3, #8]
 8012be4:	041b      	lsls	r3, r3, #16
 8012be6:	4313      	orrs	r3, r2
 8012be8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8012bea:	4b35      	ldr	r3, [pc, #212]	; (8012cc0 <HAL_DMA2D_ConfigLayer+0x120>)
 8012bec:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8012bee:	693b      	ldr	r3, [r7, #16]
 8012bf0:	685b      	ldr	r3, [r3, #4]
 8012bf2:	2b0a      	cmp	r3, #10
 8012bf4:	d003      	beq.n	8012bfe <HAL_DMA2D_ConfigLayer+0x5e>
 8012bf6:	693b      	ldr	r3, [r7, #16]
 8012bf8:	685b      	ldr	r3, [r3, #4]
 8012bfa:	2b09      	cmp	r3, #9
 8012bfc:	d107      	bne.n	8012c0e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8012bfe:	693b      	ldr	r3, [r7, #16]
 8012c00:	68db      	ldr	r3, [r3, #12]
 8012c02:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012c06:	697a      	ldr	r2, [r7, #20]
 8012c08:	4313      	orrs	r3, r2
 8012c0a:	617b      	str	r3, [r7, #20]
 8012c0c:	e005      	b.n	8012c1a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8012c0e:	693b      	ldr	r3, [r7, #16]
 8012c10:	68db      	ldr	r3, [r3, #12]
 8012c12:	061b      	lsls	r3, r3, #24
 8012c14:	697a      	ldr	r2, [r7, #20]
 8012c16:	4313      	orrs	r3, r2
 8012c18:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8012c1a:	683b      	ldr	r3, [r7, #0]
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d120      	bne.n	8012c62 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	43db      	mvns	r3, r3
 8012c2a:	ea02 0103 	and.w	r1, r2, r3
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	697a      	ldr	r2, [r7, #20]
 8012c34:	430a      	orrs	r2, r1
 8012c36:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	693a      	ldr	r2, [r7, #16]
 8012c3e:	6812      	ldr	r2, [r2, #0]
 8012c40:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8012c42:	693b      	ldr	r3, [r7, #16]
 8012c44:	685b      	ldr	r3, [r3, #4]
 8012c46:	2b0a      	cmp	r3, #10
 8012c48:	d003      	beq.n	8012c52 <HAL_DMA2D_ConfigLayer+0xb2>
 8012c4a:	693b      	ldr	r3, [r7, #16]
 8012c4c:	685b      	ldr	r3, [r3, #4]
 8012c4e:	2b09      	cmp	r3, #9
 8012c50:	d127      	bne.n	8012ca2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8012c52:	693b      	ldr	r3, [r7, #16]
 8012c54:	68da      	ldr	r2, [r3, #12]
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8012c5e:	629a      	str	r2, [r3, #40]	; 0x28
 8012c60:	e01f      	b.n	8012ca2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	69da      	ldr	r2, [r3, #28]
 8012c68:	68fb      	ldr	r3, [r7, #12]
 8012c6a:	43db      	mvns	r3, r3
 8012c6c:	ea02 0103 	and.w	r1, r2, r3
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	697a      	ldr	r2, [r7, #20]
 8012c76:	430a      	orrs	r2, r1
 8012c78:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	693a      	ldr	r2, [r7, #16]
 8012c80:	6812      	ldr	r2, [r2, #0]
 8012c82:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8012c84:	693b      	ldr	r3, [r7, #16]
 8012c86:	685b      	ldr	r3, [r3, #4]
 8012c88:	2b0a      	cmp	r3, #10
 8012c8a:	d003      	beq.n	8012c94 <HAL_DMA2D_ConfigLayer+0xf4>
 8012c8c:	693b      	ldr	r3, [r7, #16]
 8012c8e:	685b      	ldr	r3, [r3, #4]
 8012c90:	2b09      	cmp	r3, #9
 8012c92:	d106      	bne.n	8012ca2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8012c94:	693b      	ldr	r3, [r7, #16]
 8012c96:	68da      	ldr	r2, [r3, #12]
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8012ca0:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	2201      	movs	r2, #1
 8012ca6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	2200      	movs	r2, #0
 8012cae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8012cb2:	2300      	movs	r3, #0
}
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	371c      	adds	r7, #28
 8012cb8:	46bd      	mov	sp, r7
 8012cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cbe:	4770      	bx	lr
 8012cc0:	ff03000f 	.word	0xff03000f

08012cc4 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8012cc4:	b480      	push	{r7}
 8012cc6:	b08b      	sub	sp, #44	; 0x2c
 8012cc8:	af00      	add	r7, sp, #0
 8012cca:	60f8      	str	r0, [r7, #12]
 8012ccc:	60b9      	str	r1, [r7, #8]
 8012cce:	607a      	str	r2, [r7, #4]
 8012cd0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012cd8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8012cdc:	683b      	ldr	r3, [r7, #0]
 8012cde:	041a      	lsls	r2, r3, #16
 8012ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ce2:	431a      	orrs	r2, r3
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	430a      	orrs	r2, r1
 8012cea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	687a      	ldr	r2, [r7, #4]
 8012cf2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	685b      	ldr	r3, [r3, #4]
 8012cf8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8012cfc:	d174      	bne.n	8012de8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8012cfe:	68bb      	ldr	r3, [r7, #8]
 8012d00:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012d04:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8012d06:	68bb      	ldr	r3, [r7, #8]
 8012d08:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8012d0c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8012d0e:	68bb      	ldr	r3, [r7, #8]
 8012d10:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8012d14:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8012d16:	68bb      	ldr	r3, [r7, #8]
 8012d18:	b2db      	uxtb	r3, r3
 8012d1a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	689b      	ldr	r3, [r3, #8]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d108      	bne.n	8012d36 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8012d24:	69ba      	ldr	r2, [r7, #24]
 8012d26:	69fb      	ldr	r3, [r7, #28]
 8012d28:	431a      	orrs	r2, r3
 8012d2a:	6a3b      	ldr	r3, [r7, #32]
 8012d2c:	4313      	orrs	r3, r2
 8012d2e:	697a      	ldr	r2, [r7, #20]
 8012d30:	4313      	orrs	r3, r2
 8012d32:	627b      	str	r3, [r7, #36]	; 0x24
 8012d34:	e053      	b.n	8012dde <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	689b      	ldr	r3, [r3, #8]
 8012d3a:	2b01      	cmp	r3, #1
 8012d3c:	d106      	bne.n	8012d4c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8012d3e:	69ba      	ldr	r2, [r7, #24]
 8012d40:	69fb      	ldr	r3, [r7, #28]
 8012d42:	4313      	orrs	r3, r2
 8012d44:	697a      	ldr	r2, [r7, #20]
 8012d46:	4313      	orrs	r3, r2
 8012d48:	627b      	str	r3, [r7, #36]	; 0x24
 8012d4a:	e048      	b.n	8012dde <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	689b      	ldr	r3, [r3, #8]
 8012d50:	2b02      	cmp	r3, #2
 8012d52:	d111      	bne.n	8012d78 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8012d54:	69fb      	ldr	r3, [r7, #28]
 8012d56:	0cdb      	lsrs	r3, r3, #19
 8012d58:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8012d5a:	69bb      	ldr	r3, [r7, #24]
 8012d5c:	0a9b      	lsrs	r3, r3, #10
 8012d5e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8012d60:	697b      	ldr	r3, [r7, #20]
 8012d62:	08db      	lsrs	r3, r3, #3
 8012d64:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8012d66:	69bb      	ldr	r3, [r7, #24]
 8012d68:	015a      	lsls	r2, r3, #5
 8012d6a:	69fb      	ldr	r3, [r7, #28]
 8012d6c:	02db      	lsls	r3, r3, #11
 8012d6e:	4313      	orrs	r3, r2
 8012d70:	697a      	ldr	r2, [r7, #20]
 8012d72:	4313      	orrs	r3, r2
 8012d74:	627b      	str	r3, [r7, #36]	; 0x24
 8012d76:	e032      	b.n	8012dde <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	689b      	ldr	r3, [r3, #8]
 8012d7c:	2b03      	cmp	r3, #3
 8012d7e:	d117      	bne.n	8012db0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8012d80:	6a3b      	ldr	r3, [r7, #32]
 8012d82:	0fdb      	lsrs	r3, r3, #31
 8012d84:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8012d86:	69fb      	ldr	r3, [r7, #28]
 8012d88:	0cdb      	lsrs	r3, r3, #19
 8012d8a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8012d8c:	69bb      	ldr	r3, [r7, #24]
 8012d8e:	0adb      	lsrs	r3, r3, #11
 8012d90:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8012d92:	697b      	ldr	r3, [r7, #20]
 8012d94:	08db      	lsrs	r3, r3, #3
 8012d96:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8012d98:	69bb      	ldr	r3, [r7, #24]
 8012d9a:	015a      	lsls	r2, r3, #5
 8012d9c:	69fb      	ldr	r3, [r7, #28]
 8012d9e:	029b      	lsls	r3, r3, #10
 8012da0:	431a      	orrs	r2, r3
 8012da2:	6a3b      	ldr	r3, [r7, #32]
 8012da4:	03db      	lsls	r3, r3, #15
 8012da6:	4313      	orrs	r3, r2
 8012da8:	697a      	ldr	r2, [r7, #20]
 8012daa:	4313      	orrs	r3, r2
 8012dac:	627b      	str	r3, [r7, #36]	; 0x24
 8012dae:	e016      	b.n	8012dde <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8012db0:	6a3b      	ldr	r3, [r7, #32]
 8012db2:	0f1b      	lsrs	r3, r3, #28
 8012db4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8012db6:	69fb      	ldr	r3, [r7, #28]
 8012db8:	0d1b      	lsrs	r3, r3, #20
 8012dba:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8012dbc:	69bb      	ldr	r3, [r7, #24]
 8012dbe:	0b1b      	lsrs	r3, r3, #12
 8012dc0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8012dc2:	697b      	ldr	r3, [r7, #20]
 8012dc4:	091b      	lsrs	r3, r3, #4
 8012dc6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8012dc8:	69bb      	ldr	r3, [r7, #24]
 8012dca:	011a      	lsls	r2, r3, #4
 8012dcc:	69fb      	ldr	r3, [r7, #28]
 8012dce:	021b      	lsls	r3, r3, #8
 8012dd0:	431a      	orrs	r2, r3
 8012dd2:	6a3b      	ldr	r3, [r7, #32]
 8012dd4:	031b      	lsls	r3, r3, #12
 8012dd6:	4313      	orrs	r3, r2
 8012dd8:	697a      	ldr	r2, [r7, #20]
 8012dda:	4313      	orrs	r3, r2
 8012ddc:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012de4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8012de6:	e003      	b.n	8012df0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	68ba      	ldr	r2, [r7, #8]
 8012dee:	60da      	str	r2, [r3, #12]
}
 8012df0:	bf00      	nop
 8012df2:	372c      	adds	r7, #44	; 0x2c
 8012df4:	46bd      	mov	sp, r7
 8012df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dfa:	4770      	bx	lr

08012dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8012dfc:	b480      	push	{r7}
 8012dfe:	b089      	sub	sp, #36	; 0x24
 8012e00:	af00      	add	r7, sp, #0
 8012e02:	6078      	str	r0, [r7, #4]
 8012e04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8012e06:	2300      	movs	r3, #0
 8012e08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8012e0a:	2300      	movs	r3, #0
 8012e0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8012e0e:	2300      	movs	r3, #0
 8012e10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8012e12:	2300      	movs	r3, #0
 8012e14:	61fb      	str	r3, [r7, #28]
 8012e16:	e177      	b.n	8013108 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8012e18:	2201      	movs	r2, #1
 8012e1a:	69fb      	ldr	r3, [r7, #28]
 8012e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8012e20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8012e22:	683b      	ldr	r3, [r7, #0]
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	697a      	ldr	r2, [r7, #20]
 8012e28:	4013      	ands	r3, r2
 8012e2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8012e2c:	693a      	ldr	r2, [r7, #16]
 8012e2e:	697b      	ldr	r3, [r7, #20]
 8012e30:	429a      	cmp	r2, r3
 8012e32:	f040 8166 	bne.w	8013102 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8012e36:	683b      	ldr	r3, [r7, #0]
 8012e38:	685b      	ldr	r3, [r3, #4]
 8012e3a:	2b01      	cmp	r3, #1
 8012e3c:	d00b      	beq.n	8012e56 <HAL_GPIO_Init+0x5a>
 8012e3e:	683b      	ldr	r3, [r7, #0]
 8012e40:	685b      	ldr	r3, [r3, #4]
 8012e42:	2b02      	cmp	r3, #2
 8012e44:	d007      	beq.n	8012e56 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8012e46:	683b      	ldr	r3, [r7, #0]
 8012e48:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8012e4a:	2b11      	cmp	r3, #17
 8012e4c:	d003      	beq.n	8012e56 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8012e4e:	683b      	ldr	r3, [r7, #0]
 8012e50:	685b      	ldr	r3, [r3, #4]
 8012e52:	2b12      	cmp	r3, #18
 8012e54:	d130      	bne.n	8012eb8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	689b      	ldr	r3, [r3, #8]
 8012e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8012e5c:	69fb      	ldr	r3, [r7, #28]
 8012e5e:	005b      	lsls	r3, r3, #1
 8012e60:	2203      	movs	r2, #3
 8012e62:	fa02 f303 	lsl.w	r3, r2, r3
 8012e66:	43db      	mvns	r3, r3
 8012e68:	69ba      	ldr	r2, [r7, #24]
 8012e6a:	4013      	ands	r3, r2
 8012e6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8012e6e:	683b      	ldr	r3, [r7, #0]
 8012e70:	68da      	ldr	r2, [r3, #12]
 8012e72:	69fb      	ldr	r3, [r7, #28]
 8012e74:	005b      	lsls	r3, r3, #1
 8012e76:	fa02 f303 	lsl.w	r3, r2, r3
 8012e7a:	69ba      	ldr	r2, [r7, #24]
 8012e7c:	4313      	orrs	r3, r2
 8012e7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	69ba      	ldr	r2, [r7, #24]
 8012e84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	685b      	ldr	r3, [r3, #4]
 8012e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8012e8c:	2201      	movs	r2, #1
 8012e8e:	69fb      	ldr	r3, [r7, #28]
 8012e90:	fa02 f303 	lsl.w	r3, r2, r3
 8012e94:	43db      	mvns	r3, r3
 8012e96:	69ba      	ldr	r2, [r7, #24]
 8012e98:	4013      	ands	r3, r2
 8012e9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8012e9c:	683b      	ldr	r3, [r7, #0]
 8012e9e:	685b      	ldr	r3, [r3, #4]
 8012ea0:	091b      	lsrs	r3, r3, #4
 8012ea2:	f003 0201 	and.w	r2, r3, #1
 8012ea6:	69fb      	ldr	r3, [r7, #28]
 8012ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8012eac:	69ba      	ldr	r2, [r7, #24]
 8012eae:	4313      	orrs	r3, r2
 8012eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	69ba      	ldr	r2, [r7, #24]
 8012eb6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	68db      	ldr	r3, [r3, #12]
 8012ebc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8012ebe:	69fb      	ldr	r3, [r7, #28]
 8012ec0:	005b      	lsls	r3, r3, #1
 8012ec2:	2203      	movs	r2, #3
 8012ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8012ec8:	43db      	mvns	r3, r3
 8012eca:	69ba      	ldr	r2, [r7, #24]
 8012ecc:	4013      	ands	r3, r2
 8012ece:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8012ed0:	683b      	ldr	r3, [r7, #0]
 8012ed2:	689a      	ldr	r2, [r3, #8]
 8012ed4:	69fb      	ldr	r3, [r7, #28]
 8012ed6:	005b      	lsls	r3, r3, #1
 8012ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8012edc:	69ba      	ldr	r2, [r7, #24]
 8012ede:	4313      	orrs	r3, r2
 8012ee0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	69ba      	ldr	r2, [r7, #24]
 8012ee6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8012ee8:	683b      	ldr	r3, [r7, #0]
 8012eea:	685b      	ldr	r3, [r3, #4]
 8012eec:	2b02      	cmp	r3, #2
 8012eee:	d003      	beq.n	8012ef8 <HAL_GPIO_Init+0xfc>
 8012ef0:	683b      	ldr	r3, [r7, #0]
 8012ef2:	685b      	ldr	r3, [r3, #4]
 8012ef4:	2b12      	cmp	r3, #18
 8012ef6:	d123      	bne.n	8012f40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8012ef8:	69fb      	ldr	r3, [r7, #28]
 8012efa:	08da      	lsrs	r2, r3, #3
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	3208      	adds	r2, #8
 8012f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8012f06:	69fb      	ldr	r3, [r7, #28]
 8012f08:	f003 0307 	and.w	r3, r3, #7
 8012f0c:	009b      	lsls	r3, r3, #2
 8012f0e:	220f      	movs	r2, #15
 8012f10:	fa02 f303 	lsl.w	r3, r2, r3
 8012f14:	43db      	mvns	r3, r3
 8012f16:	69ba      	ldr	r2, [r7, #24]
 8012f18:	4013      	ands	r3, r2
 8012f1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8012f1c:	683b      	ldr	r3, [r7, #0]
 8012f1e:	691a      	ldr	r2, [r3, #16]
 8012f20:	69fb      	ldr	r3, [r7, #28]
 8012f22:	f003 0307 	and.w	r3, r3, #7
 8012f26:	009b      	lsls	r3, r3, #2
 8012f28:	fa02 f303 	lsl.w	r3, r2, r3
 8012f2c:	69ba      	ldr	r2, [r7, #24]
 8012f2e:	4313      	orrs	r3, r2
 8012f30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8012f32:	69fb      	ldr	r3, [r7, #28]
 8012f34:	08da      	lsrs	r2, r3, #3
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	3208      	adds	r2, #8
 8012f3a:	69b9      	ldr	r1, [r7, #24]
 8012f3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8012f46:	69fb      	ldr	r3, [r7, #28]
 8012f48:	005b      	lsls	r3, r3, #1
 8012f4a:	2203      	movs	r2, #3
 8012f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8012f50:	43db      	mvns	r3, r3
 8012f52:	69ba      	ldr	r2, [r7, #24]
 8012f54:	4013      	ands	r3, r2
 8012f56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8012f58:	683b      	ldr	r3, [r7, #0]
 8012f5a:	685b      	ldr	r3, [r3, #4]
 8012f5c:	f003 0203 	and.w	r2, r3, #3
 8012f60:	69fb      	ldr	r3, [r7, #28]
 8012f62:	005b      	lsls	r3, r3, #1
 8012f64:	fa02 f303 	lsl.w	r3, r2, r3
 8012f68:	69ba      	ldr	r2, [r7, #24]
 8012f6a:	4313      	orrs	r3, r2
 8012f6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	69ba      	ldr	r2, [r7, #24]
 8012f72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8012f74:	683b      	ldr	r3, [r7, #0]
 8012f76:	685b      	ldr	r3, [r3, #4]
 8012f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	f000 80c0 	beq.w	8013102 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012f82:	2300      	movs	r3, #0
 8012f84:	60fb      	str	r3, [r7, #12]
 8012f86:	4b65      	ldr	r3, [pc, #404]	; (801311c <HAL_GPIO_Init+0x320>)
 8012f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012f8a:	4a64      	ldr	r2, [pc, #400]	; (801311c <HAL_GPIO_Init+0x320>)
 8012f8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012f90:	6453      	str	r3, [r2, #68]	; 0x44
 8012f92:	4b62      	ldr	r3, [pc, #392]	; (801311c <HAL_GPIO_Init+0x320>)
 8012f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012f9a:	60fb      	str	r3, [r7, #12]
 8012f9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8012f9e:	4a60      	ldr	r2, [pc, #384]	; (8013120 <HAL_GPIO_Init+0x324>)
 8012fa0:	69fb      	ldr	r3, [r7, #28]
 8012fa2:	089b      	lsrs	r3, r3, #2
 8012fa4:	3302      	adds	r3, #2
 8012fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8012fac:	69fb      	ldr	r3, [r7, #28]
 8012fae:	f003 0303 	and.w	r3, r3, #3
 8012fb2:	009b      	lsls	r3, r3, #2
 8012fb4:	220f      	movs	r2, #15
 8012fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8012fba:	43db      	mvns	r3, r3
 8012fbc:	69ba      	ldr	r2, [r7, #24]
 8012fbe:	4013      	ands	r3, r2
 8012fc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	4a57      	ldr	r2, [pc, #348]	; (8013124 <HAL_GPIO_Init+0x328>)
 8012fc6:	4293      	cmp	r3, r2
 8012fc8:	d037      	beq.n	801303a <HAL_GPIO_Init+0x23e>
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	4a56      	ldr	r2, [pc, #344]	; (8013128 <HAL_GPIO_Init+0x32c>)
 8012fce:	4293      	cmp	r3, r2
 8012fd0:	d031      	beq.n	8013036 <HAL_GPIO_Init+0x23a>
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	4a55      	ldr	r2, [pc, #340]	; (801312c <HAL_GPIO_Init+0x330>)
 8012fd6:	4293      	cmp	r3, r2
 8012fd8:	d02b      	beq.n	8013032 <HAL_GPIO_Init+0x236>
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	4a54      	ldr	r2, [pc, #336]	; (8013130 <HAL_GPIO_Init+0x334>)
 8012fde:	4293      	cmp	r3, r2
 8012fe0:	d025      	beq.n	801302e <HAL_GPIO_Init+0x232>
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	4a53      	ldr	r2, [pc, #332]	; (8013134 <HAL_GPIO_Init+0x338>)
 8012fe6:	4293      	cmp	r3, r2
 8012fe8:	d01f      	beq.n	801302a <HAL_GPIO_Init+0x22e>
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	4a52      	ldr	r2, [pc, #328]	; (8013138 <HAL_GPIO_Init+0x33c>)
 8012fee:	4293      	cmp	r3, r2
 8012ff0:	d019      	beq.n	8013026 <HAL_GPIO_Init+0x22a>
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	4a51      	ldr	r2, [pc, #324]	; (801313c <HAL_GPIO_Init+0x340>)
 8012ff6:	4293      	cmp	r3, r2
 8012ff8:	d013      	beq.n	8013022 <HAL_GPIO_Init+0x226>
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	4a50      	ldr	r2, [pc, #320]	; (8013140 <HAL_GPIO_Init+0x344>)
 8012ffe:	4293      	cmp	r3, r2
 8013000:	d00d      	beq.n	801301e <HAL_GPIO_Init+0x222>
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	4a4f      	ldr	r2, [pc, #316]	; (8013144 <HAL_GPIO_Init+0x348>)
 8013006:	4293      	cmp	r3, r2
 8013008:	d007      	beq.n	801301a <HAL_GPIO_Init+0x21e>
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	4a4e      	ldr	r2, [pc, #312]	; (8013148 <HAL_GPIO_Init+0x34c>)
 801300e:	4293      	cmp	r3, r2
 8013010:	d101      	bne.n	8013016 <HAL_GPIO_Init+0x21a>
 8013012:	2309      	movs	r3, #9
 8013014:	e012      	b.n	801303c <HAL_GPIO_Init+0x240>
 8013016:	230a      	movs	r3, #10
 8013018:	e010      	b.n	801303c <HAL_GPIO_Init+0x240>
 801301a:	2308      	movs	r3, #8
 801301c:	e00e      	b.n	801303c <HAL_GPIO_Init+0x240>
 801301e:	2307      	movs	r3, #7
 8013020:	e00c      	b.n	801303c <HAL_GPIO_Init+0x240>
 8013022:	2306      	movs	r3, #6
 8013024:	e00a      	b.n	801303c <HAL_GPIO_Init+0x240>
 8013026:	2305      	movs	r3, #5
 8013028:	e008      	b.n	801303c <HAL_GPIO_Init+0x240>
 801302a:	2304      	movs	r3, #4
 801302c:	e006      	b.n	801303c <HAL_GPIO_Init+0x240>
 801302e:	2303      	movs	r3, #3
 8013030:	e004      	b.n	801303c <HAL_GPIO_Init+0x240>
 8013032:	2302      	movs	r3, #2
 8013034:	e002      	b.n	801303c <HAL_GPIO_Init+0x240>
 8013036:	2301      	movs	r3, #1
 8013038:	e000      	b.n	801303c <HAL_GPIO_Init+0x240>
 801303a:	2300      	movs	r3, #0
 801303c:	69fa      	ldr	r2, [r7, #28]
 801303e:	f002 0203 	and.w	r2, r2, #3
 8013042:	0092      	lsls	r2, r2, #2
 8013044:	4093      	lsls	r3, r2
 8013046:	69ba      	ldr	r2, [r7, #24]
 8013048:	4313      	orrs	r3, r2
 801304a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801304c:	4934      	ldr	r1, [pc, #208]	; (8013120 <HAL_GPIO_Init+0x324>)
 801304e:	69fb      	ldr	r3, [r7, #28]
 8013050:	089b      	lsrs	r3, r3, #2
 8013052:	3302      	adds	r3, #2
 8013054:	69ba      	ldr	r2, [r7, #24]
 8013056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801305a:	4b3c      	ldr	r3, [pc, #240]	; (801314c <HAL_GPIO_Init+0x350>)
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8013060:	693b      	ldr	r3, [r7, #16]
 8013062:	43db      	mvns	r3, r3
 8013064:	69ba      	ldr	r2, [r7, #24]
 8013066:	4013      	ands	r3, r2
 8013068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801306a:	683b      	ldr	r3, [r7, #0]
 801306c:	685b      	ldr	r3, [r3, #4]
 801306e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013072:	2b00      	cmp	r3, #0
 8013074:	d003      	beq.n	801307e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8013076:	69ba      	ldr	r2, [r7, #24]
 8013078:	693b      	ldr	r3, [r7, #16]
 801307a:	4313      	orrs	r3, r2
 801307c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801307e:	4a33      	ldr	r2, [pc, #204]	; (801314c <HAL_GPIO_Init+0x350>)
 8013080:	69bb      	ldr	r3, [r7, #24]
 8013082:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8013084:	4b31      	ldr	r3, [pc, #196]	; (801314c <HAL_GPIO_Init+0x350>)
 8013086:	685b      	ldr	r3, [r3, #4]
 8013088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801308a:	693b      	ldr	r3, [r7, #16]
 801308c:	43db      	mvns	r3, r3
 801308e:	69ba      	ldr	r2, [r7, #24]
 8013090:	4013      	ands	r3, r2
 8013092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8013094:	683b      	ldr	r3, [r7, #0]
 8013096:	685b      	ldr	r3, [r3, #4]
 8013098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801309c:	2b00      	cmp	r3, #0
 801309e:	d003      	beq.n	80130a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80130a0:	69ba      	ldr	r2, [r7, #24]
 80130a2:	693b      	ldr	r3, [r7, #16]
 80130a4:	4313      	orrs	r3, r2
 80130a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80130a8:	4a28      	ldr	r2, [pc, #160]	; (801314c <HAL_GPIO_Init+0x350>)
 80130aa:	69bb      	ldr	r3, [r7, #24]
 80130ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80130ae:	4b27      	ldr	r3, [pc, #156]	; (801314c <HAL_GPIO_Init+0x350>)
 80130b0:	689b      	ldr	r3, [r3, #8]
 80130b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80130b4:	693b      	ldr	r3, [r7, #16]
 80130b6:	43db      	mvns	r3, r3
 80130b8:	69ba      	ldr	r2, [r7, #24]
 80130ba:	4013      	ands	r3, r2
 80130bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80130be:	683b      	ldr	r3, [r7, #0]
 80130c0:	685b      	ldr	r3, [r3, #4]
 80130c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d003      	beq.n	80130d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80130ca:	69ba      	ldr	r2, [r7, #24]
 80130cc:	693b      	ldr	r3, [r7, #16]
 80130ce:	4313      	orrs	r3, r2
 80130d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80130d2:	4a1e      	ldr	r2, [pc, #120]	; (801314c <HAL_GPIO_Init+0x350>)
 80130d4:	69bb      	ldr	r3, [r7, #24]
 80130d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80130d8:	4b1c      	ldr	r3, [pc, #112]	; (801314c <HAL_GPIO_Init+0x350>)
 80130da:	68db      	ldr	r3, [r3, #12]
 80130dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80130de:	693b      	ldr	r3, [r7, #16]
 80130e0:	43db      	mvns	r3, r3
 80130e2:	69ba      	ldr	r2, [r7, #24]
 80130e4:	4013      	ands	r3, r2
 80130e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80130e8:	683b      	ldr	r3, [r7, #0]
 80130ea:	685b      	ldr	r3, [r3, #4]
 80130ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d003      	beq.n	80130fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80130f4:	69ba      	ldr	r2, [r7, #24]
 80130f6:	693b      	ldr	r3, [r7, #16]
 80130f8:	4313      	orrs	r3, r2
 80130fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80130fc:	4a13      	ldr	r2, [pc, #76]	; (801314c <HAL_GPIO_Init+0x350>)
 80130fe:	69bb      	ldr	r3, [r7, #24]
 8013100:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8013102:	69fb      	ldr	r3, [r7, #28]
 8013104:	3301      	adds	r3, #1
 8013106:	61fb      	str	r3, [r7, #28]
 8013108:	69fb      	ldr	r3, [r7, #28]
 801310a:	2b0f      	cmp	r3, #15
 801310c:	f67f ae84 	bls.w	8012e18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8013110:	bf00      	nop
 8013112:	3724      	adds	r7, #36	; 0x24
 8013114:	46bd      	mov	sp, r7
 8013116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801311a:	4770      	bx	lr
 801311c:	40023800 	.word	0x40023800
 8013120:	40013800 	.word	0x40013800
 8013124:	40020000 	.word	0x40020000
 8013128:	40020400 	.word	0x40020400
 801312c:	40020800 	.word	0x40020800
 8013130:	40020c00 	.word	0x40020c00
 8013134:	40021000 	.word	0x40021000
 8013138:	40021400 	.word	0x40021400
 801313c:	40021800 	.word	0x40021800
 8013140:	40021c00 	.word	0x40021c00
 8013144:	40022000 	.word	0x40022000
 8013148:	40022400 	.word	0x40022400
 801314c:	40013c00 	.word	0x40013c00

08013150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8013150:	b480      	push	{r7}
 8013152:	b083      	sub	sp, #12
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
 8013158:	460b      	mov	r3, r1
 801315a:	807b      	strh	r3, [r7, #2]
 801315c:	4613      	mov	r3, r2
 801315e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8013160:	787b      	ldrb	r3, [r7, #1]
 8013162:	2b00      	cmp	r3, #0
 8013164:	d003      	beq.n	801316e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8013166:	887a      	ldrh	r2, [r7, #2]
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 801316c:	e003      	b.n	8013176 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801316e:	887b      	ldrh	r3, [r7, #2]
 8013170:	041a      	lsls	r2, r3, #16
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	619a      	str	r2, [r3, #24]
}
 8013176:	bf00      	nop
 8013178:	370c      	adds	r7, #12
 801317a:	46bd      	mov	sp, r7
 801317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013180:	4770      	bx	lr
	...

08013184 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8013184:	b580      	push	{r7, lr}
 8013186:	b084      	sub	sp, #16
 8013188:	af00      	add	r7, sp, #0
 801318a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	2b00      	cmp	r3, #0
 8013190:	d101      	bne.n	8013196 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8013192:	2301      	movs	r3, #1
 8013194:	e11f      	b.n	80133d6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801319c:	b2db      	uxtb	r3, r3
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d106      	bne.n	80131b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	2200      	movs	r2, #0
 80131a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80131aa:	6878      	ldr	r0, [r7, #4]
 80131ac:	f7f8 fcae 	bl	800bb0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	2224      	movs	r2, #36	; 0x24
 80131b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	681a      	ldr	r2, [r3, #0]
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	f022 0201 	bic.w	r2, r2, #1
 80131c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	681a      	ldr	r2, [r3, #0]
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80131d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	681a      	ldr	r2, [r3, #0]
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80131e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80131e8:	f001 ffc6 	bl	8015178 <HAL_RCC_GetPCLK1Freq>
 80131ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	685b      	ldr	r3, [r3, #4]
 80131f2:	4a7b      	ldr	r2, [pc, #492]	; (80133e0 <HAL_I2C_Init+0x25c>)
 80131f4:	4293      	cmp	r3, r2
 80131f6:	d807      	bhi.n	8013208 <HAL_I2C_Init+0x84>
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	4a7a      	ldr	r2, [pc, #488]	; (80133e4 <HAL_I2C_Init+0x260>)
 80131fc:	4293      	cmp	r3, r2
 80131fe:	bf94      	ite	ls
 8013200:	2301      	movls	r3, #1
 8013202:	2300      	movhi	r3, #0
 8013204:	b2db      	uxtb	r3, r3
 8013206:	e006      	b.n	8013216 <HAL_I2C_Init+0x92>
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	4a77      	ldr	r2, [pc, #476]	; (80133e8 <HAL_I2C_Init+0x264>)
 801320c:	4293      	cmp	r3, r2
 801320e:	bf94      	ite	ls
 8013210:	2301      	movls	r3, #1
 8013212:	2300      	movhi	r3, #0
 8013214:	b2db      	uxtb	r3, r3
 8013216:	2b00      	cmp	r3, #0
 8013218:	d001      	beq.n	801321e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 801321a:	2301      	movs	r3, #1
 801321c:	e0db      	b.n	80133d6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	4a72      	ldr	r2, [pc, #456]	; (80133ec <HAL_I2C_Init+0x268>)
 8013222:	fba2 2303 	umull	r2, r3, r2, r3
 8013226:	0c9b      	lsrs	r3, r3, #18
 8013228:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	685b      	ldr	r3, [r3, #4]
 8013230:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	68ba      	ldr	r2, [r7, #8]
 801323a:	430a      	orrs	r2, r1
 801323c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	6a1b      	ldr	r3, [r3, #32]
 8013244:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	685b      	ldr	r3, [r3, #4]
 801324c:	4a64      	ldr	r2, [pc, #400]	; (80133e0 <HAL_I2C_Init+0x25c>)
 801324e:	4293      	cmp	r3, r2
 8013250:	d802      	bhi.n	8013258 <HAL_I2C_Init+0xd4>
 8013252:	68bb      	ldr	r3, [r7, #8]
 8013254:	3301      	adds	r3, #1
 8013256:	e009      	b.n	801326c <HAL_I2C_Init+0xe8>
 8013258:	68bb      	ldr	r3, [r7, #8]
 801325a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801325e:	fb02 f303 	mul.w	r3, r2, r3
 8013262:	4a63      	ldr	r2, [pc, #396]	; (80133f0 <HAL_I2C_Init+0x26c>)
 8013264:	fba2 2303 	umull	r2, r3, r2, r3
 8013268:	099b      	lsrs	r3, r3, #6
 801326a:	3301      	adds	r3, #1
 801326c:	687a      	ldr	r2, [r7, #4]
 801326e:	6812      	ldr	r2, [r2, #0]
 8013270:	430b      	orrs	r3, r1
 8013272:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	69db      	ldr	r3, [r3, #28]
 801327a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 801327e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	685b      	ldr	r3, [r3, #4]
 8013286:	4956      	ldr	r1, [pc, #344]	; (80133e0 <HAL_I2C_Init+0x25c>)
 8013288:	428b      	cmp	r3, r1
 801328a:	d80d      	bhi.n	80132a8 <HAL_I2C_Init+0x124>
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	1e59      	subs	r1, r3, #1
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	685b      	ldr	r3, [r3, #4]
 8013294:	005b      	lsls	r3, r3, #1
 8013296:	fbb1 f3f3 	udiv	r3, r1, r3
 801329a:	3301      	adds	r3, #1
 801329c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80132a0:	2b04      	cmp	r3, #4
 80132a2:	bf38      	it	cc
 80132a4:	2304      	movcc	r3, #4
 80132a6:	e04f      	b.n	8013348 <HAL_I2C_Init+0x1c4>
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	689b      	ldr	r3, [r3, #8]
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d111      	bne.n	80132d4 <HAL_I2C_Init+0x150>
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	1e58      	subs	r0, r3, #1
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	6859      	ldr	r1, [r3, #4]
 80132b8:	460b      	mov	r3, r1
 80132ba:	005b      	lsls	r3, r3, #1
 80132bc:	440b      	add	r3, r1
 80132be:	fbb0 f3f3 	udiv	r3, r0, r3
 80132c2:	3301      	adds	r3, #1
 80132c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	bf0c      	ite	eq
 80132cc:	2301      	moveq	r3, #1
 80132ce:	2300      	movne	r3, #0
 80132d0:	b2db      	uxtb	r3, r3
 80132d2:	e012      	b.n	80132fa <HAL_I2C_Init+0x176>
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	1e58      	subs	r0, r3, #1
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	6859      	ldr	r1, [r3, #4]
 80132dc:	460b      	mov	r3, r1
 80132de:	009b      	lsls	r3, r3, #2
 80132e0:	440b      	add	r3, r1
 80132e2:	0099      	lsls	r1, r3, #2
 80132e4:	440b      	add	r3, r1
 80132e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80132ea:	3301      	adds	r3, #1
 80132ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	bf0c      	ite	eq
 80132f4:	2301      	moveq	r3, #1
 80132f6:	2300      	movne	r3, #0
 80132f8:	b2db      	uxtb	r3, r3
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d001      	beq.n	8013302 <HAL_I2C_Init+0x17e>
 80132fe:	2301      	movs	r3, #1
 8013300:	e022      	b.n	8013348 <HAL_I2C_Init+0x1c4>
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	689b      	ldr	r3, [r3, #8]
 8013306:	2b00      	cmp	r3, #0
 8013308:	d10e      	bne.n	8013328 <HAL_I2C_Init+0x1a4>
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	1e58      	subs	r0, r3, #1
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	6859      	ldr	r1, [r3, #4]
 8013312:	460b      	mov	r3, r1
 8013314:	005b      	lsls	r3, r3, #1
 8013316:	440b      	add	r3, r1
 8013318:	fbb0 f3f3 	udiv	r3, r0, r3
 801331c:	3301      	adds	r3, #1
 801331e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013322:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013326:	e00f      	b.n	8013348 <HAL_I2C_Init+0x1c4>
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	1e58      	subs	r0, r3, #1
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	6859      	ldr	r1, [r3, #4]
 8013330:	460b      	mov	r3, r1
 8013332:	009b      	lsls	r3, r3, #2
 8013334:	440b      	add	r3, r1
 8013336:	0099      	lsls	r1, r3, #2
 8013338:	440b      	add	r3, r1
 801333a:	fbb0 f3f3 	udiv	r3, r0, r3
 801333e:	3301      	adds	r3, #1
 8013340:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013344:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8013348:	6879      	ldr	r1, [r7, #4]
 801334a:	6809      	ldr	r1, [r1, #0]
 801334c:	4313      	orrs	r3, r2
 801334e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	681b      	ldr	r3, [r3, #0]
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	69da      	ldr	r2, [r3, #28]
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	6a1b      	ldr	r3, [r3, #32]
 8013362:	431a      	orrs	r2, r3
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	430a      	orrs	r2, r1
 801336a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	689b      	ldr	r3, [r3, #8]
 8013372:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8013376:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801337a:	687a      	ldr	r2, [r7, #4]
 801337c:	6911      	ldr	r1, [r2, #16]
 801337e:	687a      	ldr	r2, [r7, #4]
 8013380:	68d2      	ldr	r2, [r2, #12]
 8013382:	4311      	orrs	r1, r2
 8013384:	687a      	ldr	r2, [r7, #4]
 8013386:	6812      	ldr	r2, [r2, #0]
 8013388:	430b      	orrs	r3, r1
 801338a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	68db      	ldr	r3, [r3, #12]
 8013392:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	695a      	ldr	r2, [r3, #20]
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	699b      	ldr	r3, [r3, #24]
 801339e:	431a      	orrs	r2, r3
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	681b      	ldr	r3, [r3, #0]
 80133a4:	430a      	orrs	r2, r1
 80133a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	681b      	ldr	r3, [r3, #0]
 80133ac:	681a      	ldr	r2, [r3, #0]
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	681b      	ldr	r3, [r3, #0]
 80133b2:	f042 0201 	orr.w	r2, r2, #1
 80133b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	2200      	movs	r2, #0
 80133bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	2220      	movs	r2, #32
 80133c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	2200      	movs	r2, #0
 80133ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	2200      	movs	r2, #0
 80133d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80133d4:	2300      	movs	r3, #0
}
 80133d6:	4618      	mov	r0, r3
 80133d8:	3710      	adds	r7, #16
 80133da:	46bd      	mov	sp, r7
 80133dc:	bd80      	pop	{r7, pc}
 80133de:	bf00      	nop
 80133e0:	000186a0 	.word	0x000186a0
 80133e4:	001e847f 	.word	0x001e847f
 80133e8:	003d08ff 	.word	0x003d08ff
 80133ec:	431bde83 	.word	0x431bde83
 80133f0:	10624dd3 	.word	0x10624dd3

080133f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80133f4:	b580      	push	{r7, lr}
 80133f6:	b088      	sub	sp, #32
 80133f8:	af02      	add	r7, sp, #8
 80133fa:	60f8      	str	r0, [r7, #12]
 80133fc:	4608      	mov	r0, r1
 80133fe:	4611      	mov	r1, r2
 8013400:	461a      	mov	r2, r3
 8013402:	4603      	mov	r3, r0
 8013404:	817b      	strh	r3, [r7, #10]
 8013406:	460b      	mov	r3, r1
 8013408:	813b      	strh	r3, [r7, #8]
 801340a:	4613      	mov	r3, r2
 801340c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 801340e:	f7fe fdbd 	bl	8011f8c <HAL_GetTick>
 8013412:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801341a:	b2db      	uxtb	r3, r3
 801341c:	2b20      	cmp	r3, #32
 801341e:	f040 80d9 	bne.w	80135d4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8013422:	697b      	ldr	r3, [r7, #20]
 8013424:	9300      	str	r3, [sp, #0]
 8013426:	2319      	movs	r3, #25
 8013428:	2201      	movs	r2, #1
 801342a:	496d      	ldr	r1, [pc, #436]	; (80135e0 <HAL_I2C_Mem_Write+0x1ec>)
 801342c:	68f8      	ldr	r0, [r7, #12]
 801342e:	f000 fc7b 	bl	8013d28 <I2C_WaitOnFlagUntilTimeout>
 8013432:	4603      	mov	r3, r0
 8013434:	2b00      	cmp	r3, #0
 8013436:	d001      	beq.n	801343c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8013438:	2302      	movs	r3, #2
 801343a:	e0cc      	b.n	80135d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013442:	2b01      	cmp	r3, #1
 8013444:	d101      	bne.n	801344a <HAL_I2C_Mem_Write+0x56>
 8013446:	2302      	movs	r3, #2
 8013448:	e0c5      	b.n	80135d6 <HAL_I2C_Mem_Write+0x1e2>
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	2201      	movs	r2, #1
 801344e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8013452:	68fb      	ldr	r3, [r7, #12]
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	f003 0301 	and.w	r3, r3, #1
 801345c:	2b01      	cmp	r3, #1
 801345e:	d007      	beq.n	8013470 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	681a      	ldr	r2, [r3, #0]
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	f042 0201 	orr.w	r2, r2, #1
 801346e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	681a      	ldr	r2, [r3, #0]
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801347e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	2221      	movs	r2, #33	; 0x21
 8013484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	2240      	movs	r2, #64	; 0x40
 801348c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	2200      	movs	r2, #0
 8013494:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	6a3a      	ldr	r2, [r7, #32]
 801349a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80134a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80134a6:	b29a      	uxth	r2, r3
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	4a4d      	ldr	r2, [pc, #308]	; (80135e4 <HAL_I2C_Mem_Write+0x1f0>)
 80134b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80134b2:	88f8      	ldrh	r0, [r7, #6]
 80134b4:	893a      	ldrh	r2, [r7, #8]
 80134b6:	8979      	ldrh	r1, [r7, #10]
 80134b8:	697b      	ldr	r3, [r7, #20]
 80134ba:	9301      	str	r3, [sp, #4]
 80134bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134be:	9300      	str	r3, [sp, #0]
 80134c0:	4603      	mov	r3, r0
 80134c2:	68f8      	ldr	r0, [r7, #12]
 80134c4:	f000 fab6 	bl	8013a34 <I2C_RequestMemoryWrite>
 80134c8:	4603      	mov	r3, r0
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d052      	beq.n	8013574 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80134ce:	2301      	movs	r3, #1
 80134d0:	e081      	b.n	80135d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80134d2:	697a      	ldr	r2, [r7, #20]
 80134d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80134d6:	68f8      	ldr	r0, [r7, #12]
 80134d8:	f000 fcfc 	bl	8013ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 80134dc:	4603      	mov	r3, r0
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d00d      	beq.n	80134fe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134e6:	2b04      	cmp	r3, #4
 80134e8:	d107      	bne.n	80134fa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	681a      	ldr	r2, [r3, #0]
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80134f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80134fa:	2301      	movs	r3, #1
 80134fc:	e06b      	b.n	80135d6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013502:	781a      	ldrb	r2, [r3, #0]
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801350e:	1c5a      	adds	r2, r3, #1
 8013510:	68fb      	ldr	r3, [r7, #12]
 8013512:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013518:	3b01      	subs	r3, #1
 801351a:	b29a      	uxth	r2, r3
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013524:	b29b      	uxth	r3, r3
 8013526:	3b01      	subs	r3, #1
 8013528:	b29a      	uxth	r2, r3
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	695b      	ldr	r3, [r3, #20]
 8013534:	f003 0304 	and.w	r3, r3, #4
 8013538:	2b04      	cmp	r3, #4
 801353a:	d11b      	bne.n	8013574 <HAL_I2C_Mem_Write+0x180>
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013540:	2b00      	cmp	r3, #0
 8013542:	d017      	beq.n	8013574 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013548:	781a      	ldrb	r2, [r3, #0]
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013554:	1c5a      	adds	r2, r3, #1
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 801355a:	68fb      	ldr	r3, [r7, #12]
 801355c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801355e:	3b01      	subs	r3, #1
 8013560:	b29a      	uxth	r2, r3
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801356a:	b29b      	uxth	r3, r3
 801356c:	3b01      	subs	r3, #1
 801356e:	b29a      	uxth	r2, r3
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013578:	2b00      	cmp	r3, #0
 801357a:	d1aa      	bne.n	80134d2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801357c:	697a      	ldr	r2, [r7, #20]
 801357e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013580:	68f8      	ldr	r0, [r7, #12]
 8013582:	f000 fce8 	bl	8013f56 <I2C_WaitOnBTFFlagUntilTimeout>
 8013586:	4603      	mov	r3, r0
 8013588:	2b00      	cmp	r3, #0
 801358a:	d00d      	beq.n	80135a8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013590:	2b04      	cmp	r3, #4
 8013592:	d107      	bne.n	80135a4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	681a      	ldr	r2, [r3, #0]
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80135a2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80135a4:	2301      	movs	r3, #1
 80135a6:	e016      	b.n	80135d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	681a      	ldr	r2, [r3, #0]
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80135b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	2220      	movs	r2, #32
 80135bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	2200      	movs	r2, #0
 80135c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	2200      	movs	r2, #0
 80135cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80135d0:	2300      	movs	r3, #0
 80135d2:	e000      	b.n	80135d6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80135d4:	2302      	movs	r3, #2
  }
}
 80135d6:	4618      	mov	r0, r3
 80135d8:	3718      	adds	r7, #24
 80135da:	46bd      	mov	sp, r7
 80135dc:	bd80      	pop	{r7, pc}
 80135de:	bf00      	nop
 80135e0:	00100002 	.word	0x00100002
 80135e4:	ffff0000 	.word	0xffff0000

080135e8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80135e8:	b580      	push	{r7, lr}
 80135ea:	b08c      	sub	sp, #48	; 0x30
 80135ec:	af02      	add	r7, sp, #8
 80135ee:	60f8      	str	r0, [r7, #12]
 80135f0:	4608      	mov	r0, r1
 80135f2:	4611      	mov	r1, r2
 80135f4:	461a      	mov	r2, r3
 80135f6:	4603      	mov	r3, r0
 80135f8:	817b      	strh	r3, [r7, #10]
 80135fa:	460b      	mov	r3, r1
 80135fc:	813b      	strh	r3, [r7, #8]
 80135fe:	4613      	mov	r3, r2
 8013600:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8013602:	f7fe fcc3 	bl	8011f8c <HAL_GetTick>
 8013606:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801360e:	b2db      	uxtb	r3, r3
 8013610:	2b20      	cmp	r3, #32
 8013612:	f040 8208 	bne.w	8013a26 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8013616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013618:	9300      	str	r3, [sp, #0]
 801361a:	2319      	movs	r3, #25
 801361c:	2201      	movs	r2, #1
 801361e:	497b      	ldr	r1, [pc, #492]	; (801380c <HAL_I2C_Mem_Read+0x224>)
 8013620:	68f8      	ldr	r0, [r7, #12]
 8013622:	f000 fb81 	bl	8013d28 <I2C_WaitOnFlagUntilTimeout>
 8013626:	4603      	mov	r3, r0
 8013628:	2b00      	cmp	r3, #0
 801362a:	d001      	beq.n	8013630 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 801362c:	2302      	movs	r3, #2
 801362e:	e1fb      	b.n	8013a28 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013636:	2b01      	cmp	r3, #1
 8013638:	d101      	bne.n	801363e <HAL_I2C_Mem_Read+0x56>
 801363a:	2302      	movs	r3, #2
 801363c:	e1f4      	b.n	8013a28 <HAL_I2C_Mem_Read+0x440>
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	2201      	movs	r2, #1
 8013642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	f003 0301 	and.w	r3, r3, #1
 8013650:	2b01      	cmp	r3, #1
 8013652:	d007      	beq.n	8013664 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	681a      	ldr	r2, [r3, #0]
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	f042 0201 	orr.w	r2, r2, #1
 8013662:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	681b      	ldr	r3, [r3, #0]
 8013668:	681a      	ldr	r2, [r3, #0]
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8013672:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	2222      	movs	r2, #34	; 0x22
 8013678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	2240      	movs	r2, #64	; 0x40
 8013680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	2200      	movs	r2, #0
 8013688:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801368a:	68fb      	ldr	r3, [r7, #12]
 801368c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801368e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8013694:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801369a:	b29a      	uxth	r2, r3
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	4a5b      	ldr	r2, [pc, #364]	; (8013810 <HAL_I2C_Mem_Read+0x228>)
 80136a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80136a6:	88f8      	ldrh	r0, [r7, #6]
 80136a8:	893a      	ldrh	r2, [r7, #8]
 80136aa:	8979      	ldrh	r1, [r7, #10]
 80136ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136ae:	9301      	str	r3, [sp, #4]
 80136b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136b2:	9300      	str	r3, [sp, #0]
 80136b4:	4603      	mov	r3, r0
 80136b6:	68f8      	ldr	r0, [r7, #12]
 80136b8:	f000 fa50 	bl	8013b5c <I2C_RequestMemoryRead>
 80136bc:	4603      	mov	r3, r0
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d001      	beq.n	80136c6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80136c2:	2301      	movs	r3, #1
 80136c4:	e1b0      	b.n	8013a28 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80136c6:	68fb      	ldr	r3, [r7, #12]
 80136c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d113      	bne.n	80136f6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80136ce:	2300      	movs	r3, #0
 80136d0:	623b      	str	r3, [r7, #32]
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	695b      	ldr	r3, [r3, #20]
 80136d8:	623b      	str	r3, [r7, #32]
 80136da:	68fb      	ldr	r3, [r7, #12]
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	699b      	ldr	r3, [r3, #24]
 80136e0:	623b      	str	r3, [r7, #32]
 80136e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	681a      	ldr	r2, [r3, #0]
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80136f2:	601a      	str	r2, [r3, #0]
 80136f4:	e184      	b.n	8013a00 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80136fa:	2b01      	cmp	r3, #1
 80136fc:	d11b      	bne.n	8013736 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	681a      	ldr	r2, [r3, #0]
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	681b      	ldr	r3, [r3, #0]
 8013708:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801370c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801370e:	2300      	movs	r3, #0
 8013710:	61fb      	str	r3, [r7, #28]
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	681b      	ldr	r3, [r3, #0]
 8013716:	695b      	ldr	r3, [r3, #20]
 8013718:	61fb      	str	r3, [r7, #28]
 801371a:	68fb      	ldr	r3, [r7, #12]
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	699b      	ldr	r3, [r3, #24]
 8013720:	61fb      	str	r3, [r7, #28]
 8013722:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013724:	68fb      	ldr	r3, [r7, #12]
 8013726:	681b      	ldr	r3, [r3, #0]
 8013728:	681a      	ldr	r2, [r3, #0]
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013732:	601a      	str	r2, [r3, #0]
 8013734:	e164      	b.n	8013a00 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801373a:	2b02      	cmp	r3, #2
 801373c:	d11b      	bne.n	8013776 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	681a      	ldr	r2, [r3, #0]
 8013744:	68fb      	ldr	r3, [r7, #12]
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801374c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	681a      	ldr	r2, [r3, #0]
 8013754:	68fb      	ldr	r3, [r7, #12]
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801375c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801375e:	2300      	movs	r3, #0
 8013760:	61bb      	str	r3, [r7, #24]
 8013762:	68fb      	ldr	r3, [r7, #12]
 8013764:	681b      	ldr	r3, [r3, #0]
 8013766:	695b      	ldr	r3, [r3, #20]
 8013768:	61bb      	str	r3, [r7, #24]
 801376a:	68fb      	ldr	r3, [r7, #12]
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	699b      	ldr	r3, [r3, #24]
 8013770:	61bb      	str	r3, [r7, #24]
 8013772:	69bb      	ldr	r3, [r7, #24]
 8013774:	e144      	b.n	8013a00 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8013776:	2300      	movs	r3, #0
 8013778:	617b      	str	r3, [r7, #20]
 801377a:	68fb      	ldr	r3, [r7, #12]
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	695b      	ldr	r3, [r3, #20]
 8013780:	617b      	str	r3, [r7, #20]
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	699b      	ldr	r3, [r3, #24]
 8013788:	617b      	str	r3, [r7, #20]
 801378a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 801378c:	e138      	b.n	8013a00 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013792:	2b03      	cmp	r3, #3
 8013794:	f200 80f1 	bhi.w	801397a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801379c:	2b01      	cmp	r3, #1
 801379e:	d123      	bne.n	80137e8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80137a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80137a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80137a4:	68f8      	ldr	r0, [r7, #12]
 80137a6:	f000 fc17 	bl	8013fd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80137aa:	4603      	mov	r3, r0
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d001      	beq.n	80137b4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80137b0:	2301      	movs	r3, #1
 80137b2:	e139      	b.n	8013a28 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	681b      	ldr	r3, [r3, #0]
 80137b8:	691a      	ldr	r2, [r3, #16]
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137be:	b2d2      	uxtb	r2, r2
 80137c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80137c2:	68fb      	ldr	r3, [r7, #12]
 80137c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137c6:	1c5a      	adds	r2, r3, #1
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80137cc:	68fb      	ldr	r3, [r7, #12]
 80137ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80137d0:	3b01      	subs	r3, #1
 80137d2:	b29a      	uxth	r2, r3
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80137dc:	b29b      	uxth	r3, r3
 80137de:	3b01      	subs	r3, #1
 80137e0:	b29a      	uxth	r2, r3
 80137e2:	68fb      	ldr	r3, [r7, #12]
 80137e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80137e6:	e10b      	b.n	8013a00 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80137e8:	68fb      	ldr	r3, [r7, #12]
 80137ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80137ec:	2b02      	cmp	r3, #2
 80137ee:	d14e      	bne.n	801388e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80137f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137f2:	9300      	str	r3, [sp, #0]
 80137f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137f6:	2200      	movs	r2, #0
 80137f8:	4906      	ldr	r1, [pc, #24]	; (8013814 <HAL_I2C_Mem_Read+0x22c>)
 80137fa:	68f8      	ldr	r0, [r7, #12]
 80137fc:	f000 fa94 	bl	8013d28 <I2C_WaitOnFlagUntilTimeout>
 8013800:	4603      	mov	r3, r0
 8013802:	2b00      	cmp	r3, #0
 8013804:	d008      	beq.n	8013818 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8013806:	2301      	movs	r3, #1
 8013808:	e10e      	b.n	8013a28 <HAL_I2C_Mem_Read+0x440>
 801380a:	bf00      	nop
 801380c:	00100002 	.word	0x00100002
 8013810:	ffff0000 	.word	0xffff0000
 8013814:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	681b      	ldr	r3, [r3, #0]
 801381c:	681a      	ldr	r2, [r3, #0]
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013826:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	691a      	ldr	r2, [r3, #16]
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013832:	b2d2      	uxtb	r2, r2
 8013834:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8013836:	68fb      	ldr	r3, [r7, #12]
 8013838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801383a:	1c5a      	adds	r2, r3, #1
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013844:	3b01      	subs	r3, #1
 8013846:	b29a      	uxth	r2, r3
 8013848:	68fb      	ldr	r3, [r7, #12]
 801384a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013850:	b29b      	uxth	r3, r3
 8013852:	3b01      	subs	r3, #1
 8013854:	b29a      	uxth	r2, r3
 8013856:	68fb      	ldr	r3, [r7, #12]
 8013858:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	681b      	ldr	r3, [r3, #0]
 801385e:	691a      	ldr	r2, [r3, #16]
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013864:	b2d2      	uxtb	r2, r2
 8013866:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801386c:	1c5a      	adds	r2, r3, #1
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013876:	3b01      	subs	r3, #1
 8013878:	b29a      	uxth	r2, r3
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013882:	b29b      	uxth	r3, r3
 8013884:	3b01      	subs	r3, #1
 8013886:	b29a      	uxth	r2, r3
 8013888:	68fb      	ldr	r3, [r7, #12]
 801388a:	855a      	strh	r2, [r3, #42]	; 0x2a
 801388c:	e0b8      	b.n	8013a00 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 801388e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013890:	9300      	str	r3, [sp, #0]
 8013892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013894:	2200      	movs	r2, #0
 8013896:	4966      	ldr	r1, [pc, #408]	; (8013a30 <HAL_I2C_Mem_Read+0x448>)
 8013898:	68f8      	ldr	r0, [r7, #12]
 801389a:	f000 fa45 	bl	8013d28 <I2C_WaitOnFlagUntilTimeout>
 801389e:	4603      	mov	r3, r0
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d001      	beq.n	80138a8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80138a4:	2301      	movs	r3, #1
 80138a6:	e0bf      	b.n	8013a28 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80138a8:	68fb      	ldr	r3, [r7, #12]
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	681a      	ldr	r2, [r3, #0]
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80138b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	691a      	ldr	r2, [r3, #16]
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138c2:	b2d2      	uxtb	r2, r2
 80138c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80138c6:	68fb      	ldr	r3, [r7, #12]
 80138c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138ca:	1c5a      	adds	r2, r3, #1
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80138d4:	3b01      	subs	r3, #1
 80138d6:	b29a      	uxth	r2, r3
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80138e0:	b29b      	uxth	r3, r3
 80138e2:	3b01      	subs	r3, #1
 80138e4:	b29a      	uxth	r2, r3
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80138ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138ec:	9300      	str	r3, [sp, #0]
 80138ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138f0:	2200      	movs	r2, #0
 80138f2:	494f      	ldr	r1, [pc, #316]	; (8013a30 <HAL_I2C_Mem_Read+0x448>)
 80138f4:	68f8      	ldr	r0, [r7, #12]
 80138f6:	f000 fa17 	bl	8013d28 <I2C_WaitOnFlagUntilTimeout>
 80138fa:	4603      	mov	r3, r0
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d001      	beq.n	8013904 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8013900:	2301      	movs	r3, #1
 8013902:	e091      	b.n	8013a28 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	681a      	ldr	r2, [r3, #0]
 801390a:	68fb      	ldr	r3, [r7, #12]
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013912:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	681b      	ldr	r3, [r3, #0]
 8013918:	691a      	ldr	r2, [r3, #16]
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801391e:	b2d2      	uxtb	r2, r2
 8013920:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013926:	1c5a      	adds	r2, r3, #1
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013930:	3b01      	subs	r3, #1
 8013932:	b29a      	uxth	r2, r3
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801393c:	b29b      	uxth	r3, r3
 801393e:	3b01      	subs	r3, #1
 8013940:	b29a      	uxth	r2, r3
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	691a      	ldr	r2, [r3, #16]
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013950:	b2d2      	uxtb	r2, r2
 8013952:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8013954:	68fb      	ldr	r3, [r7, #12]
 8013956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013958:	1c5a      	adds	r2, r3, #1
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 801395e:	68fb      	ldr	r3, [r7, #12]
 8013960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013962:	3b01      	subs	r3, #1
 8013964:	b29a      	uxth	r2, r3
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801396e:	b29b      	uxth	r3, r3
 8013970:	3b01      	subs	r3, #1
 8013972:	b29a      	uxth	r2, r3
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	855a      	strh	r2, [r3, #42]	; 0x2a
 8013978:	e042      	b.n	8013a00 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801397a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801397c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801397e:	68f8      	ldr	r0, [r7, #12]
 8013980:	f000 fb2a 	bl	8013fd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8013984:	4603      	mov	r3, r0
 8013986:	2b00      	cmp	r3, #0
 8013988:	d001      	beq.n	801398e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 801398a:	2301      	movs	r3, #1
 801398c:	e04c      	b.n	8013a28 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	691a      	ldr	r2, [r3, #16]
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013998:	b2d2      	uxtb	r2, r2
 801399a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 801399c:	68fb      	ldr	r3, [r7, #12]
 801399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139a0:	1c5a      	adds	r2, r3, #1
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80139aa:	3b01      	subs	r3, #1
 80139ac:	b29a      	uxth	r2, r3
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80139b6:	b29b      	uxth	r3, r3
 80139b8:	3b01      	subs	r3, #1
 80139ba:	b29a      	uxth	r2, r3
 80139bc:	68fb      	ldr	r3, [r7, #12]
 80139be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	695b      	ldr	r3, [r3, #20]
 80139c6:	f003 0304 	and.w	r3, r3, #4
 80139ca:	2b04      	cmp	r3, #4
 80139cc:	d118      	bne.n	8013a00 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	691a      	ldr	r2, [r3, #16]
 80139d4:	68fb      	ldr	r3, [r7, #12]
 80139d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139d8:	b2d2      	uxtb	r2, r2
 80139da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139e0:	1c5a      	adds	r2, r3, #1
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80139ea:	3b01      	subs	r3, #1
 80139ec:	b29a      	uxth	r2, r3
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80139f6:	b29b      	uxth	r3, r3
 80139f8:	3b01      	subs	r3, #1
 80139fa:	b29a      	uxth	r2, r3
 80139fc:	68fb      	ldr	r3, [r7, #12]
 80139fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	f47f aec2 	bne.w	801378e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	2220      	movs	r2, #32
 8013a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	2200      	movs	r2, #0
 8013a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	2200      	movs	r2, #0
 8013a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8013a22:	2300      	movs	r3, #0
 8013a24:	e000      	b.n	8013a28 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8013a26:	2302      	movs	r3, #2
  }
}
 8013a28:	4618      	mov	r0, r3
 8013a2a:	3728      	adds	r7, #40	; 0x28
 8013a2c:	46bd      	mov	sp, r7
 8013a2e:	bd80      	pop	{r7, pc}
 8013a30:	00010004 	.word	0x00010004

08013a34 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8013a34:	b580      	push	{r7, lr}
 8013a36:	b088      	sub	sp, #32
 8013a38:	af02      	add	r7, sp, #8
 8013a3a:	60f8      	str	r0, [r7, #12]
 8013a3c:	4608      	mov	r0, r1
 8013a3e:	4611      	mov	r1, r2
 8013a40:	461a      	mov	r2, r3
 8013a42:	4603      	mov	r3, r0
 8013a44:	817b      	strh	r3, [r7, #10]
 8013a46:	460b      	mov	r3, r1
 8013a48:	813b      	strh	r3, [r7, #8]
 8013a4a:	4613      	mov	r3, r2
 8013a4c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	681a      	ldr	r2, [r3, #0]
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013a5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8013a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a60:	9300      	str	r3, [sp, #0]
 8013a62:	6a3b      	ldr	r3, [r7, #32]
 8013a64:	2200      	movs	r2, #0
 8013a66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8013a6a:	68f8      	ldr	r0, [r7, #12]
 8013a6c:	f000 f95c 	bl	8013d28 <I2C_WaitOnFlagUntilTimeout>
 8013a70:	4603      	mov	r3, r0
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d00c      	beq.n	8013a90 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d003      	beq.n	8013a8c <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013a8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8013a8c:	2303      	movs	r3, #3
 8013a8e:	e05f      	b.n	8013b50 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8013a90:	897b      	ldrh	r3, [r7, #10]
 8013a92:	b2db      	uxtb	r3, r3
 8013a94:	461a      	mov	r2, r3
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8013a9e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8013aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aa2:	6a3a      	ldr	r2, [r7, #32]
 8013aa4:	492c      	ldr	r1, [pc, #176]	; (8013b58 <I2C_RequestMemoryWrite+0x124>)
 8013aa6:	68f8      	ldr	r0, [r7, #12]
 8013aa8:	f000 f995 	bl	8013dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8013aac:	4603      	mov	r3, r0
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d001      	beq.n	8013ab6 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8013ab2:	2301      	movs	r3, #1
 8013ab4:	e04c      	b.n	8013b50 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8013ab6:	2300      	movs	r3, #0
 8013ab8:	617b      	str	r3, [r7, #20]
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	695b      	ldr	r3, [r3, #20]
 8013ac0:	617b      	str	r3, [r7, #20]
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	699b      	ldr	r3, [r3, #24]
 8013ac8:	617b      	str	r3, [r7, #20]
 8013aca:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8013acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ace:	6a39      	ldr	r1, [r7, #32]
 8013ad0:	68f8      	ldr	r0, [r7, #12]
 8013ad2:	f000 f9ff 	bl	8013ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 8013ad6:	4603      	mov	r3, r0
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d00d      	beq.n	8013af8 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ae0:	2b04      	cmp	r3, #4
 8013ae2:	d107      	bne.n	8013af4 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	681a      	ldr	r2, [r3, #0]
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013af2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8013af4:	2301      	movs	r3, #1
 8013af6:	e02b      	b.n	8013b50 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8013af8:	88fb      	ldrh	r3, [r7, #6]
 8013afa:	2b01      	cmp	r3, #1
 8013afc:	d105      	bne.n	8013b0a <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8013afe:	893b      	ldrh	r3, [r7, #8]
 8013b00:	b2da      	uxtb	r2, r3
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	681b      	ldr	r3, [r3, #0]
 8013b06:	611a      	str	r2, [r3, #16]
 8013b08:	e021      	b.n	8013b4e <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8013b0a:	893b      	ldrh	r3, [r7, #8]
 8013b0c:	0a1b      	lsrs	r3, r3, #8
 8013b0e:	b29b      	uxth	r3, r3
 8013b10:	b2da      	uxtb	r2, r3
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8013b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b1a:	6a39      	ldr	r1, [r7, #32]
 8013b1c:	68f8      	ldr	r0, [r7, #12]
 8013b1e:	f000 f9d9 	bl	8013ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 8013b22:	4603      	mov	r3, r0
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d00d      	beq.n	8013b44 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b2c:	2b04      	cmp	r3, #4
 8013b2e:	d107      	bne.n	8013b40 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	681a      	ldr	r2, [r3, #0]
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013b3e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8013b40:	2301      	movs	r3, #1
 8013b42:	e005      	b.n	8013b50 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8013b44:	893b      	ldrh	r3, [r7, #8]
 8013b46:	b2da      	uxtb	r2, r3
 8013b48:	68fb      	ldr	r3, [r7, #12]
 8013b4a:	681b      	ldr	r3, [r3, #0]
 8013b4c:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8013b4e:	2300      	movs	r3, #0
}
 8013b50:	4618      	mov	r0, r3
 8013b52:	3718      	adds	r7, #24
 8013b54:	46bd      	mov	sp, r7
 8013b56:	bd80      	pop	{r7, pc}
 8013b58:	00010002 	.word	0x00010002

08013b5c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8013b5c:	b580      	push	{r7, lr}
 8013b5e:	b088      	sub	sp, #32
 8013b60:	af02      	add	r7, sp, #8
 8013b62:	60f8      	str	r0, [r7, #12]
 8013b64:	4608      	mov	r0, r1
 8013b66:	4611      	mov	r1, r2
 8013b68:	461a      	mov	r2, r3
 8013b6a:	4603      	mov	r3, r0
 8013b6c:	817b      	strh	r3, [r7, #10]
 8013b6e:	460b      	mov	r3, r1
 8013b70:	813b      	strh	r3, [r7, #8]
 8013b72:	4613      	mov	r3, r2
 8013b74:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	681b      	ldr	r3, [r3, #0]
 8013b7a:	681a      	ldr	r2, [r3, #0]
 8013b7c:	68fb      	ldr	r3, [r7, #12]
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8013b84:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	681b      	ldr	r3, [r3, #0]
 8013b8a:	681a      	ldr	r2, [r3, #0]
 8013b8c:	68fb      	ldr	r3, [r7, #12]
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013b94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8013b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b98:	9300      	str	r3, [sp, #0]
 8013b9a:	6a3b      	ldr	r3, [r7, #32]
 8013b9c:	2200      	movs	r2, #0
 8013b9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8013ba2:	68f8      	ldr	r0, [r7, #12]
 8013ba4:	f000 f8c0 	bl	8013d28 <I2C_WaitOnFlagUntilTimeout>
 8013ba8:	4603      	mov	r3, r0
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d00c      	beq.n	8013bc8 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	681b      	ldr	r3, [r3, #0]
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d003      	beq.n	8013bc4 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013bc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8013bc4:	2303      	movs	r3, #3
 8013bc6:	e0a9      	b.n	8013d1c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8013bc8:	897b      	ldrh	r3, [r7, #10]
 8013bca:	b2db      	uxtb	r3, r3
 8013bcc:	461a      	mov	r2, r3
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8013bd6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8013bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bda:	6a3a      	ldr	r2, [r7, #32]
 8013bdc:	4951      	ldr	r1, [pc, #324]	; (8013d24 <I2C_RequestMemoryRead+0x1c8>)
 8013bde:	68f8      	ldr	r0, [r7, #12]
 8013be0:	f000 f8f9 	bl	8013dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8013be4:	4603      	mov	r3, r0
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d001      	beq.n	8013bee <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8013bea:	2301      	movs	r3, #1
 8013bec:	e096      	b.n	8013d1c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8013bee:	2300      	movs	r3, #0
 8013bf0:	617b      	str	r3, [r7, #20]
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	695b      	ldr	r3, [r3, #20]
 8013bf8:	617b      	str	r3, [r7, #20]
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	699b      	ldr	r3, [r3, #24]
 8013c00:	617b      	str	r3, [r7, #20]
 8013c02:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8013c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013c06:	6a39      	ldr	r1, [r7, #32]
 8013c08:	68f8      	ldr	r0, [r7, #12]
 8013c0a:	f000 f963 	bl	8013ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 8013c0e:	4603      	mov	r3, r0
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d00d      	beq.n	8013c30 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c18:	2b04      	cmp	r3, #4
 8013c1a:	d107      	bne.n	8013c2c <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	681a      	ldr	r2, [r3, #0]
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	681b      	ldr	r3, [r3, #0]
 8013c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013c2a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8013c2c:	2301      	movs	r3, #1
 8013c2e:	e075      	b.n	8013d1c <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8013c30:	88fb      	ldrh	r3, [r7, #6]
 8013c32:	2b01      	cmp	r3, #1
 8013c34:	d105      	bne.n	8013c42 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8013c36:	893b      	ldrh	r3, [r7, #8]
 8013c38:	b2da      	uxtb	r2, r3
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	611a      	str	r2, [r3, #16]
 8013c40:	e021      	b.n	8013c86 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8013c42:	893b      	ldrh	r3, [r7, #8]
 8013c44:	0a1b      	lsrs	r3, r3, #8
 8013c46:	b29b      	uxth	r3, r3
 8013c48:	b2da      	uxtb	r2, r3
 8013c4a:	68fb      	ldr	r3, [r7, #12]
 8013c4c:	681b      	ldr	r3, [r3, #0]
 8013c4e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8013c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013c52:	6a39      	ldr	r1, [r7, #32]
 8013c54:	68f8      	ldr	r0, [r7, #12]
 8013c56:	f000 f93d 	bl	8013ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 8013c5a:	4603      	mov	r3, r0
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d00d      	beq.n	8013c7c <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c64:	2b04      	cmp	r3, #4
 8013c66:	d107      	bne.n	8013c78 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013c68:	68fb      	ldr	r3, [r7, #12]
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	681a      	ldr	r2, [r3, #0]
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013c76:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8013c78:	2301      	movs	r3, #1
 8013c7a:	e04f      	b.n	8013d1c <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8013c7c:	893b      	ldrh	r3, [r7, #8]
 8013c7e:	b2da      	uxtb	r2, r3
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8013c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013c88:	6a39      	ldr	r1, [r7, #32]
 8013c8a:	68f8      	ldr	r0, [r7, #12]
 8013c8c:	f000 f922 	bl	8013ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 8013c90:	4603      	mov	r3, r0
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d00d      	beq.n	8013cb2 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c9a:	2b04      	cmp	r3, #4
 8013c9c:	d107      	bne.n	8013cae <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	681a      	ldr	r2, [r3, #0]
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013cac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8013cae:	2301      	movs	r3, #1
 8013cb0:	e034      	b.n	8013d1c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	681a      	ldr	r2, [r3, #0]
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013cc0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8013cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cc4:	9300      	str	r3, [sp, #0]
 8013cc6:	6a3b      	ldr	r3, [r7, #32]
 8013cc8:	2200      	movs	r2, #0
 8013cca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8013cce:	68f8      	ldr	r0, [r7, #12]
 8013cd0:	f000 f82a 	bl	8013d28 <I2C_WaitOnFlagUntilTimeout>
 8013cd4:	4603      	mov	r3, r0
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d00c      	beq.n	8013cf4 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	681b      	ldr	r3, [r3, #0]
 8013ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d003      	beq.n	8013cf0 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013cee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8013cf0:	2303      	movs	r3, #3
 8013cf2:	e013      	b.n	8013d1c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8013cf4:	897b      	ldrh	r3, [r7, #10]
 8013cf6:	b2db      	uxtb	r3, r3
 8013cf8:	f043 0301 	orr.w	r3, r3, #1
 8013cfc:	b2da      	uxtb	r2, r3
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8013d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d06:	6a3a      	ldr	r2, [r7, #32]
 8013d08:	4906      	ldr	r1, [pc, #24]	; (8013d24 <I2C_RequestMemoryRead+0x1c8>)
 8013d0a:	68f8      	ldr	r0, [r7, #12]
 8013d0c:	f000 f863 	bl	8013dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8013d10:	4603      	mov	r3, r0
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d001      	beq.n	8013d1a <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8013d16:	2301      	movs	r3, #1
 8013d18:	e000      	b.n	8013d1c <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8013d1a:	2300      	movs	r3, #0
}
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	3718      	adds	r7, #24
 8013d20:	46bd      	mov	sp, r7
 8013d22:	bd80      	pop	{r7, pc}
 8013d24:	00010002 	.word	0x00010002

08013d28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8013d28:	b580      	push	{r7, lr}
 8013d2a:	b084      	sub	sp, #16
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	60f8      	str	r0, [r7, #12]
 8013d30:	60b9      	str	r1, [r7, #8]
 8013d32:	603b      	str	r3, [r7, #0]
 8013d34:	4613      	mov	r3, r2
 8013d36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8013d38:	e025      	b.n	8013d86 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013d3a:	683b      	ldr	r3, [r7, #0]
 8013d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d40:	d021      	beq.n	8013d86 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013d42:	f7fe f923 	bl	8011f8c <HAL_GetTick>
 8013d46:	4602      	mov	r2, r0
 8013d48:	69bb      	ldr	r3, [r7, #24]
 8013d4a:	1ad3      	subs	r3, r2, r3
 8013d4c:	683a      	ldr	r2, [r7, #0]
 8013d4e:	429a      	cmp	r2, r3
 8013d50:	d302      	bcc.n	8013d58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8013d52:	683b      	ldr	r3, [r7, #0]
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d116      	bne.n	8013d86 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	2200      	movs	r2, #0
 8013d5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	2220      	movs	r2, #32
 8013d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8013d66:	68fb      	ldr	r3, [r7, #12]
 8013d68:	2200      	movs	r2, #0
 8013d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d72:	f043 0220 	orr.w	r2, r3, #32
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	2200      	movs	r2, #0
 8013d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8013d82:	2301      	movs	r3, #1
 8013d84:	e023      	b.n	8013dce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8013d86:	68bb      	ldr	r3, [r7, #8]
 8013d88:	0c1b      	lsrs	r3, r3, #16
 8013d8a:	b2db      	uxtb	r3, r3
 8013d8c:	2b01      	cmp	r3, #1
 8013d8e:	d10d      	bne.n	8013dac <I2C_WaitOnFlagUntilTimeout+0x84>
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	695b      	ldr	r3, [r3, #20]
 8013d96:	43da      	mvns	r2, r3
 8013d98:	68bb      	ldr	r3, [r7, #8]
 8013d9a:	4013      	ands	r3, r2
 8013d9c:	b29b      	uxth	r3, r3
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	bf0c      	ite	eq
 8013da2:	2301      	moveq	r3, #1
 8013da4:	2300      	movne	r3, #0
 8013da6:	b2db      	uxtb	r3, r3
 8013da8:	461a      	mov	r2, r3
 8013daa:	e00c      	b.n	8013dc6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	681b      	ldr	r3, [r3, #0]
 8013db0:	699b      	ldr	r3, [r3, #24]
 8013db2:	43da      	mvns	r2, r3
 8013db4:	68bb      	ldr	r3, [r7, #8]
 8013db6:	4013      	ands	r3, r2
 8013db8:	b29b      	uxth	r3, r3
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	bf0c      	ite	eq
 8013dbe:	2301      	moveq	r3, #1
 8013dc0:	2300      	movne	r3, #0
 8013dc2:	b2db      	uxtb	r3, r3
 8013dc4:	461a      	mov	r2, r3
 8013dc6:	79fb      	ldrb	r3, [r7, #7]
 8013dc8:	429a      	cmp	r2, r3
 8013dca:	d0b6      	beq.n	8013d3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8013dcc:	2300      	movs	r3, #0
}
 8013dce:	4618      	mov	r0, r3
 8013dd0:	3710      	adds	r7, #16
 8013dd2:	46bd      	mov	sp, r7
 8013dd4:	bd80      	pop	{r7, pc}

08013dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8013dd6:	b580      	push	{r7, lr}
 8013dd8:	b084      	sub	sp, #16
 8013dda:	af00      	add	r7, sp, #0
 8013ddc:	60f8      	str	r0, [r7, #12]
 8013dde:	60b9      	str	r1, [r7, #8]
 8013de0:	607a      	str	r2, [r7, #4]
 8013de2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8013de4:	e051      	b.n	8013e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	695b      	ldr	r3, [r3, #20]
 8013dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013df4:	d123      	bne.n	8013e3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	681a      	ldr	r2, [r3, #0]
 8013dfc:	68fb      	ldr	r3, [r7, #12]
 8013dfe:	681b      	ldr	r3, [r3, #0]
 8013e00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013e04:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	681b      	ldr	r3, [r3, #0]
 8013e0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8013e0e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	2200      	movs	r2, #0
 8013e14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	2220      	movs	r2, #32
 8013e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	2200      	movs	r2, #0
 8013e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e2a:	f043 0204 	orr.w	r2, r3, #4
 8013e2e:	68fb      	ldr	r3, [r7, #12]
 8013e30:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	2200      	movs	r2, #0
 8013e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8013e3a:	2301      	movs	r3, #1
 8013e3c:	e046      	b.n	8013ecc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e44:	d021      	beq.n	8013e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013e46:	f7fe f8a1 	bl	8011f8c <HAL_GetTick>
 8013e4a:	4602      	mov	r2, r0
 8013e4c:	683b      	ldr	r3, [r7, #0]
 8013e4e:	1ad3      	subs	r3, r2, r3
 8013e50:	687a      	ldr	r2, [r7, #4]
 8013e52:	429a      	cmp	r2, r3
 8013e54:	d302      	bcc.n	8013e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d116      	bne.n	8013e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	2200      	movs	r2, #0
 8013e60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	2220      	movs	r2, #32
 8013e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	2200      	movs	r2, #0
 8013e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e76:	f043 0220 	orr.w	r2, r3, #32
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	2200      	movs	r2, #0
 8013e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8013e86:	2301      	movs	r3, #1
 8013e88:	e020      	b.n	8013ecc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8013e8a:	68bb      	ldr	r3, [r7, #8]
 8013e8c:	0c1b      	lsrs	r3, r3, #16
 8013e8e:	b2db      	uxtb	r3, r3
 8013e90:	2b01      	cmp	r3, #1
 8013e92:	d10c      	bne.n	8013eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	681b      	ldr	r3, [r3, #0]
 8013e98:	695b      	ldr	r3, [r3, #20]
 8013e9a:	43da      	mvns	r2, r3
 8013e9c:	68bb      	ldr	r3, [r7, #8]
 8013e9e:	4013      	ands	r3, r2
 8013ea0:	b29b      	uxth	r3, r3
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	bf14      	ite	ne
 8013ea6:	2301      	movne	r3, #1
 8013ea8:	2300      	moveq	r3, #0
 8013eaa:	b2db      	uxtb	r3, r3
 8013eac:	e00b      	b.n	8013ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8013eae:	68fb      	ldr	r3, [r7, #12]
 8013eb0:	681b      	ldr	r3, [r3, #0]
 8013eb2:	699b      	ldr	r3, [r3, #24]
 8013eb4:	43da      	mvns	r2, r3
 8013eb6:	68bb      	ldr	r3, [r7, #8]
 8013eb8:	4013      	ands	r3, r2
 8013eba:	b29b      	uxth	r3, r3
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	bf14      	ite	ne
 8013ec0:	2301      	movne	r3, #1
 8013ec2:	2300      	moveq	r3, #0
 8013ec4:	b2db      	uxtb	r3, r3
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d18d      	bne.n	8013de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8013eca:	2300      	movs	r3, #0
}
 8013ecc:	4618      	mov	r0, r3
 8013ece:	3710      	adds	r7, #16
 8013ed0:	46bd      	mov	sp, r7
 8013ed2:	bd80      	pop	{r7, pc}

08013ed4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8013ed4:	b580      	push	{r7, lr}
 8013ed6:	b084      	sub	sp, #16
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	60f8      	str	r0, [r7, #12]
 8013edc:	60b9      	str	r1, [r7, #8]
 8013ede:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8013ee0:	e02d      	b.n	8013f3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8013ee2:	68f8      	ldr	r0, [r7, #12]
 8013ee4:	f000 f8ce 	bl	8014084 <I2C_IsAcknowledgeFailed>
 8013ee8:	4603      	mov	r3, r0
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d001      	beq.n	8013ef2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8013eee:	2301      	movs	r3, #1
 8013ef0:	e02d      	b.n	8013f4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013ef2:	68bb      	ldr	r3, [r7, #8]
 8013ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ef8:	d021      	beq.n	8013f3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013efa:	f7fe f847 	bl	8011f8c <HAL_GetTick>
 8013efe:	4602      	mov	r2, r0
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	1ad3      	subs	r3, r2, r3
 8013f04:	68ba      	ldr	r2, [r7, #8]
 8013f06:	429a      	cmp	r2, r3
 8013f08:	d302      	bcc.n	8013f10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8013f0a:	68bb      	ldr	r3, [r7, #8]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d116      	bne.n	8013f3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	2200      	movs	r2, #0
 8013f14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	2220      	movs	r2, #32
 8013f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	2200      	movs	r2, #0
 8013f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8013f26:	68fb      	ldr	r3, [r7, #12]
 8013f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f2a:	f043 0220 	orr.w	r2, r3, #32
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	2200      	movs	r2, #0
 8013f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8013f3a:	2301      	movs	r3, #1
 8013f3c:	e007      	b.n	8013f4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	681b      	ldr	r3, [r3, #0]
 8013f42:	695b      	ldr	r3, [r3, #20]
 8013f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013f48:	2b80      	cmp	r3, #128	; 0x80
 8013f4a:	d1ca      	bne.n	8013ee2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8013f4c:	2300      	movs	r3, #0
}
 8013f4e:	4618      	mov	r0, r3
 8013f50:	3710      	adds	r7, #16
 8013f52:	46bd      	mov	sp, r7
 8013f54:	bd80      	pop	{r7, pc}

08013f56 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8013f56:	b580      	push	{r7, lr}
 8013f58:	b084      	sub	sp, #16
 8013f5a:	af00      	add	r7, sp, #0
 8013f5c:	60f8      	str	r0, [r7, #12]
 8013f5e:	60b9      	str	r1, [r7, #8]
 8013f60:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8013f62:	e02d      	b.n	8013fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8013f64:	68f8      	ldr	r0, [r7, #12]
 8013f66:	f000 f88d 	bl	8014084 <I2C_IsAcknowledgeFailed>
 8013f6a:	4603      	mov	r3, r0
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d001      	beq.n	8013f74 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8013f70:	2301      	movs	r3, #1
 8013f72:	e02d      	b.n	8013fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013f74:	68bb      	ldr	r3, [r7, #8]
 8013f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f7a:	d021      	beq.n	8013fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013f7c:	f7fe f806 	bl	8011f8c <HAL_GetTick>
 8013f80:	4602      	mov	r2, r0
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	1ad3      	subs	r3, r2, r3
 8013f86:	68ba      	ldr	r2, [r7, #8]
 8013f88:	429a      	cmp	r2, r3
 8013f8a:	d302      	bcc.n	8013f92 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8013f8c:	68bb      	ldr	r3, [r7, #8]
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d116      	bne.n	8013fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	2200      	movs	r2, #0
 8013f96:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	2220      	movs	r2, #32
 8013f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	2200      	movs	r2, #0
 8013fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013fac:	f043 0220 	orr.w	r2, r3, #32
 8013fb0:	68fb      	ldr	r3, [r7, #12]
 8013fb2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013fb4:	68fb      	ldr	r3, [r7, #12]
 8013fb6:	2200      	movs	r2, #0
 8013fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8013fbc:	2301      	movs	r3, #1
 8013fbe:	e007      	b.n	8013fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	681b      	ldr	r3, [r3, #0]
 8013fc4:	695b      	ldr	r3, [r3, #20]
 8013fc6:	f003 0304 	and.w	r3, r3, #4
 8013fca:	2b04      	cmp	r3, #4
 8013fcc:	d1ca      	bne.n	8013f64 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8013fce:	2300      	movs	r3, #0
}
 8013fd0:	4618      	mov	r0, r3
 8013fd2:	3710      	adds	r7, #16
 8013fd4:	46bd      	mov	sp, r7
 8013fd6:	bd80      	pop	{r7, pc}

08013fd8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8013fd8:	b580      	push	{r7, lr}
 8013fda:	b084      	sub	sp, #16
 8013fdc:	af00      	add	r7, sp, #0
 8013fde:	60f8      	str	r0, [r7, #12]
 8013fe0:	60b9      	str	r1, [r7, #8]
 8013fe2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8013fe4:	e042      	b.n	801406c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	681b      	ldr	r3, [r3, #0]
 8013fea:	695b      	ldr	r3, [r3, #20]
 8013fec:	f003 0310 	and.w	r3, r3, #16
 8013ff0:	2b10      	cmp	r3, #16
 8013ff2:	d119      	bne.n	8014028 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8013ff4:	68fb      	ldr	r3, [r7, #12]
 8013ff6:	681b      	ldr	r3, [r3, #0]
 8013ff8:	f06f 0210 	mvn.w	r2, #16
 8013ffc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8013ffe:	68fb      	ldr	r3, [r7, #12]
 8014000:	2200      	movs	r2, #0
 8014002:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8014004:	68fb      	ldr	r3, [r7, #12]
 8014006:	2220      	movs	r2, #32
 8014008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801400c:	68fb      	ldr	r3, [r7, #12]
 801400e:	2200      	movs	r2, #0
 8014010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014018:	68fb      	ldr	r3, [r7, #12]
 801401a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801401c:	68fb      	ldr	r3, [r7, #12]
 801401e:	2200      	movs	r2, #0
 8014020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8014024:	2301      	movs	r3, #1
 8014026:	e029      	b.n	801407c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014028:	f7fd ffb0 	bl	8011f8c <HAL_GetTick>
 801402c:	4602      	mov	r2, r0
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	1ad3      	subs	r3, r2, r3
 8014032:	68ba      	ldr	r2, [r7, #8]
 8014034:	429a      	cmp	r2, r3
 8014036:	d302      	bcc.n	801403e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8014038:	68bb      	ldr	r3, [r7, #8]
 801403a:	2b00      	cmp	r3, #0
 801403c:	d116      	bne.n	801406c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	2200      	movs	r2, #0
 8014042:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8014044:	68fb      	ldr	r3, [r7, #12]
 8014046:	2220      	movs	r2, #32
 8014048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	2200      	movs	r2, #0
 8014050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014058:	f043 0220 	orr.w	r2, r3, #32
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	2200      	movs	r2, #0
 8014064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8014068:	2301      	movs	r3, #1
 801406a:	e007      	b.n	801407c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	695b      	ldr	r3, [r3, #20]
 8014072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014076:	2b40      	cmp	r3, #64	; 0x40
 8014078:	d1b5      	bne.n	8013fe6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 801407a:	2300      	movs	r3, #0
}
 801407c:	4618      	mov	r0, r3
 801407e:	3710      	adds	r7, #16
 8014080:	46bd      	mov	sp, r7
 8014082:	bd80      	pop	{r7, pc}

08014084 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8014084:	b480      	push	{r7}
 8014086:	b083      	sub	sp, #12
 8014088:	af00      	add	r7, sp, #0
 801408a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	695b      	ldr	r3, [r3, #20]
 8014092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014096:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801409a:	d11b      	bne.n	80140d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80140a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	2200      	movs	r2, #0
 80140aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	2220      	movs	r2, #32
 80140b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	2200      	movs	r2, #0
 80140b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80140c0:	f043 0204 	orr.w	r2, r3, #4
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	2200      	movs	r2, #0
 80140cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80140d0:	2301      	movs	r3, #1
 80140d2:	e000      	b.n	80140d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80140d4:	2300      	movs	r3, #0
}
 80140d6:	4618      	mov	r0, r3
 80140d8:	370c      	adds	r7, #12
 80140da:	46bd      	mov	sp, r7
 80140dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140e0:	4770      	bx	lr

080140e2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80140e2:	b480      	push	{r7}
 80140e4:	b083      	sub	sp, #12
 80140e6:	af00      	add	r7, sp, #0
 80140e8:	6078      	str	r0, [r7, #4]
 80140ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80140f2:	b2db      	uxtb	r3, r3
 80140f4:	2b20      	cmp	r3, #32
 80140f6:	d129      	bne.n	801414c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	2224      	movs	r2, #36	; 0x24
 80140fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	681a      	ldr	r2, [r3, #0]
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	f022 0201 	bic.w	r2, r2, #1
 801410e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	f022 0210 	bic.w	r2, r2, #16
 801411e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	681b      	ldr	r3, [r3, #0]
 8014124:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	683a      	ldr	r2, [r7, #0]
 801412c:	430a      	orrs	r2, r1
 801412e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	681a      	ldr	r2, [r3, #0]
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	681b      	ldr	r3, [r3, #0]
 801413a:	f042 0201 	orr.w	r2, r2, #1
 801413e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	2220      	movs	r2, #32
 8014144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8014148:	2300      	movs	r3, #0
 801414a:	e000      	b.n	801414e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 801414c:	2302      	movs	r3, #2
  }
}
 801414e:	4618      	mov	r0, r3
 8014150:	370c      	adds	r7, #12
 8014152:	46bd      	mov	sp, r7
 8014154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014158:	4770      	bx	lr

0801415a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801415a:	b480      	push	{r7}
 801415c:	b085      	sub	sp, #20
 801415e:	af00      	add	r7, sp, #0
 8014160:	6078      	str	r0, [r7, #4]
 8014162:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8014164:	2300      	movs	r3, #0
 8014166:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801416e:	b2db      	uxtb	r3, r3
 8014170:	2b20      	cmp	r3, #32
 8014172:	d12a      	bne.n	80141ca <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	2224      	movs	r2, #36	; 0x24
 8014178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	681b      	ldr	r3, [r3, #0]
 8014180:	681a      	ldr	r2, [r3, #0]
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	f022 0201 	bic.w	r2, r2, #1
 801418a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014192:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8014194:	89fb      	ldrh	r3, [r7, #14]
 8014196:	f023 030f 	bic.w	r3, r3, #15
 801419a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 801419c:	683b      	ldr	r3, [r7, #0]
 801419e:	b29a      	uxth	r2, r3
 80141a0:	89fb      	ldrh	r3, [r7, #14]
 80141a2:	4313      	orrs	r3, r2
 80141a4:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	681b      	ldr	r3, [r3, #0]
 80141aa:	89fa      	ldrh	r2, [r7, #14]
 80141ac:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	681a      	ldr	r2, [r3, #0]
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	f042 0201 	orr.w	r2, r2, #1
 80141bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	2220      	movs	r2, #32
 80141c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80141c6:	2300      	movs	r3, #0
 80141c8:	e000      	b.n	80141cc <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80141ca:	2302      	movs	r3, #2
  }
}
 80141cc:	4618      	mov	r0, r3
 80141ce:	3714      	adds	r7, #20
 80141d0:	46bd      	mov	sp, r7
 80141d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141d6:	4770      	bx	lr

080141d8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80141d8:	b580      	push	{r7, lr}
 80141da:	b084      	sub	sp, #16
 80141dc:	af00      	add	r7, sp, #0
 80141de:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d101      	bne.n	80141ea <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80141e6:	2301      	movs	r3, #1
 80141e8:	e0bf      	b.n	801436a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80141f0:	b2db      	uxtb	r3, r3
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d106      	bne.n	8014204 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	2200      	movs	r2, #0
 80141fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80141fe:	6878      	ldr	r0, [r7, #4]
 8014200:	f7f7 fcfa 	bl	800bbf8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	2202      	movs	r2, #2
 8014208:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	699a      	ldr	r2, [r3, #24]
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 801421a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	6999      	ldr	r1, [r3, #24]
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	685a      	ldr	r2, [r3, #4]
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	689b      	ldr	r3, [r3, #8]
 801422a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8014230:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	691b      	ldr	r3, [r3, #16]
 8014236:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	430a      	orrs	r2, r1
 801423e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	6899      	ldr	r1, [r3, #8]
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	681a      	ldr	r2, [r3, #0]
 801424a:	4b4a      	ldr	r3, [pc, #296]	; (8014374 <HAL_LTDC_Init+0x19c>)
 801424c:	400b      	ands	r3, r1
 801424e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	695b      	ldr	r3, [r3, #20]
 8014254:	041b      	lsls	r3, r3, #16
 8014256:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	681b      	ldr	r3, [r3, #0]
 801425c:	6899      	ldr	r1, [r3, #8]
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	699a      	ldr	r2, [r3, #24]
 8014262:	68fb      	ldr	r3, [r7, #12]
 8014264:	431a      	orrs	r2, r3
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	430a      	orrs	r2, r1
 801426c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	68d9      	ldr	r1, [r3, #12]
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	681a      	ldr	r2, [r3, #0]
 8014278:	4b3e      	ldr	r3, [pc, #248]	; (8014374 <HAL_LTDC_Init+0x19c>)
 801427a:	400b      	ands	r3, r1
 801427c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	69db      	ldr	r3, [r3, #28]
 8014282:	041b      	lsls	r3, r3, #16
 8014284:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	68d9      	ldr	r1, [r3, #12]
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	6a1a      	ldr	r2, [r3, #32]
 8014290:	68fb      	ldr	r3, [r7, #12]
 8014292:	431a      	orrs	r2, r3
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	681b      	ldr	r3, [r3, #0]
 8014298:	430a      	orrs	r2, r1
 801429a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	6919      	ldr	r1, [r3, #16]
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	681a      	ldr	r2, [r3, #0]
 80142a6:	4b33      	ldr	r3, [pc, #204]	; (8014374 <HAL_LTDC_Init+0x19c>)
 80142a8:	400b      	ands	r3, r1
 80142aa:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142b0:	041b      	lsls	r3, r3, #16
 80142b2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	681b      	ldr	r3, [r3, #0]
 80142b8:	6919      	ldr	r1, [r3, #16]
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	431a      	orrs	r2, r3
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	430a      	orrs	r2, r1
 80142c8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	6959      	ldr	r1, [r3, #20]
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	681a      	ldr	r2, [r3, #0]
 80142d4:	4b27      	ldr	r3, [pc, #156]	; (8014374 <HAL_LTDC_Init+0x19c>)
 80142d6:	400b      	ands	r3, r1
 80142d8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142de:	041b      	lsls	r3, r3, #16
 80142e0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	681b      	ldr	r3, [r3, #0]
 80142e6:	6959      	ldr	r1, [r3, #20]
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80142ec:	68fb      	ldr	r3, [r7, #12]
 80142ee:	431a      	orrs	r2, r3
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	681b      	ldr	r3, [r3, #0]
 80142f4:	430a      	orrs	r2, r1
 80142f6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80142fe:	021b      	lsls	r3, r3, #8
 8014300:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8014308:	041b      	lsls	r3, r3, #16
 801430a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	681b      	ldr	r3, [r3, #0]
 8014316:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 801431a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8014322:	68ba      	ldr	r2, [r7, #8]
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	4313      	orrs	r3, r2
 8014328:	687a      	ldr	r2, [r7, #4]
 801432a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 801432e:	431a      	orrs	r2, r3
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	430a      	orrs	r2, r1
 8014336:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	681b      	ldr	r3, [r3, #0]
 801433c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	681b      	ldr	r3, [r3, #0]
 8014342:	f042 0206 	orr.w	r2, r2, #6
 8014346:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	699a      	ldr	r2, [r3, #24]
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	f042 0201 	orr.w	r2, r2, #1
 8014356:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	2200      	movs	r2, #0
 801435c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	2201      	movs	r2, #1
 8014364:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8014368:	2300      	movs	r3, #0
}
 801436a:	4618      	mov	r0, r3
 801436c:	3710      	adds	r7, #16
 801436e:	46bd      	mov	sp, r7
 8014370:	bd80      	pop	{r7, pc}
 8014372:	bf00      	nop
 8014374:	f000f800 	.word	0xf000f800

08014378 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8014378:	b580      	push	{r7, lr}
 801437a:	b084      	sub	sp, #16
 801437c:	af00      	add	r7, sp, #0
 801437e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	681b      	ldr	r3, [r3, #0]
 8014384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014386:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801438e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8014390:	68fb      	ldr	r3, [r7, #12]
 8014392:	f003 0304 	and.w	r3, r3, #4
 8014396:	2b00      	cmp	r3, #0
 8014398:	d023      	beq.n	80143e2 <HAL_LTDC_IRQHandler+0x6a>
 801439a:	68bb      	ldr	r3, [r7, #8]
 801439c:	f003 0304 	and.w	r3, r3, #4
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d01e      	beq.n	80143e2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	681b      	ldr	r3, [r3, #0]
 80143ae:	f022 0204 	bic.w	r2, r2, #4
 80143b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	681b      	ldr	r3, [r3, #0]
 80143b8:	2204      	movs	r2, #4
 80143ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80143c2:	f043 0201 	orr.w	r2, r3, #1
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	2204      	movs	r2, #4
 80143d0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	2200      	movs	r2, #0
 80143d8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80143dc:	6878      	ldr	r0, [r7, #4]
 80143de:	f000 f86f 	bl	80144c0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	f003 0302 	and.w	r3, r3, #2
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d023      	beq.n	8014434 <HAL_LTDC_IRQHandler+0xbc>
 80143ec:	68bb      	ldr	r3, [r7, #8]
 80143ee:	f003 0302 	and.w	r3, r3, #2
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d01e      	beq.n	8014434 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	681b      	ldr	r3, [r3, #0]
 80143fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	f022 0202 	bic.w	r2, r2, #2
 8014404:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	2202      	movs	r2, #2
 801440c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8014414:	f043 0202 	orr.w	r2, r3, #2
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	2204      	movs	r2, #4
 8014422:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	2200      	movs	r2, #0
 801442a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 801442e:	6878      	ldr	r0, [r7, #4]
 8014430:	f000 f846 	bl	80144c0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8014434:	68fb      	ldr	r3, [r7, #12]
 8014436:	f003 0301 	and.w	r3, r3, #1
 801443a:	2b00      	cmp	r3, #0
 801443c:	d01b      	beq.n	8014476 <HAL_LTDC_IRQHandler+0xfe>
 801443e:	68bb      	ldr	r3, [r7, #8]
 8014440:	f003 0301 	and.w	r3, r3, #1
 8014444:	2b00      	cmp	r3, #0
 8014446:	d016      	beq.n	8014476 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	681b      	ldr	r3, [r3, #0]
 801444c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	681b      	ldr	r3, [r3, #0]
 8014452:	f022 0201 	bic.w	r2, r2, #1
 8014456:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	681b      	ldr	r3, [r3, #0]
 801445c:	2201      	movs	r2, #1
 801445e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	2201      	movs	r2, #1
 8014464:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	2200      	movs	r2, #0
 801446c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8014470:	6878      	ldr	r0, [r7, #4]
 8014472:	f7f6 fb63 	bl	800ab3c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	f003 0308 	and.w	r3, r3, #8
 801447c:	2b00      	cmp	r3, #0
 801447e:	d01b      	beq.n	80144b8 <HAL_LTDC_IRQHandler+0x140>
 8014480:	68bb      	ldr	r3, [r7, #8]
 8014482:	f003 0308 	and.w	r3, r3, #8
 8014486:	2b00      	cmp	r3, #0
 8014488:	d016      	beq.n	80144b8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	681b      	ldr	r3, [r3, #0]
 801448e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	681b      	ldr	r3, [r3, #0]
 8014494:	f022 0208 	bic.w	r2, r2, #8
 8014498:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	2208      	movs	r2, #8
 80144a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	2201      	movs	r2, #1
 80144a6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	2200      	movs	r2, #0
 80144ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80144b2:	6878      	ldr	r0, [r7, #4]
 80144b4:	f000 f80e 	bl	80144d4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80144b8:	bf00      	nop
 80144ba:	3710      	adds	r7, #16
 80144bc:	46bd      	mov	sp, r7
 80144be:	bd80      	pop	{r7, pc}

080144c0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80144c0:	b480      	push	{r7}
 80144c2:	b083      	sub	sp, #12
 80144c4:	af00      	add	r7, sp, #0
 80144c6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80144c8:	bf00      	nop
 80144ca:	370c      	adds	r7, #12
 80144cc:	46bd      	mov	sp, r7
 80144ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144d2:	4770      	bx	lr

080144d4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80144d4:	b480      	push	{r7}
 80144d6:	b083      	sub	sp, #12
 80144d8:	af00      	add	r7, sp, #0
 80144da:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80144dc:	bf00      	nop
 80144de:	370c      	adds	r7, #12
 80144e0:	46bd      	mov	sp, r7
 80144e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144e6:	4770      	bx	lr

080144e8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80144e8:	b5b0      	push	{r4, r5, r7, lr}
 80144ea:	b084      	sub	sp, #16
 80144ec:	af00      	add	r7, sp, #0
 80144ee:	60f8      	str	r0, [r7, #12]
 80144f0:	60b9      	str	r1, [r7, #8]
 80144f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80144fa:	2b01      	cmp	r3, #1
 80144fc:	d101      	bne.n	8014502 <HAL_LTDC_ConfigLayer+0x1a>
 80144fe:	2302      	movs	r3, #2
 8014500:	e02c      	b.n	801455c <HAL_LTDC_ConfigLayer+0x74>
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	2201      	movs	r2, #1
 8014506:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 801450a:	68fb      	ldr	r3, [r7, #12]
 801450c:	2202      	movs	r2, #2
 801450e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8014512:	68fa      	ldr	r2, [r7, #12]
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	2134      	movs	r1, #52	; 0x34
 8014518:	fb01 f303 	mul.w	r3, r1, r3
 801451c:	4413      	add	r3, r2
 801451e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8014522:	68bb      	ldr	r3, [r7, #8]
 8014524:	4614      	mov	r4, r2
 8014526:	461d      	mov	r5, r3
 8014528:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801452a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801452c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801452e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014530:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014532:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014534:	682b      	ldr	r3, [r5, #0]
 8014536:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8014538:	687a      	ldr	r2, [r7, #4]
 801453a:	68b9      	ldr	r1, [r7, #8]
 801453c:	68f8      	ldr	r0, [r7, #12]
 801453e:	f000 f849 	bl	80145d4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	2201      	movs	r2, #1
 8014548:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	2201      	movs	r2, #1
 801454e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8014552:	68fb      	ldr	r3, [r7, #12]
 8014554:	2200      	movs	r2, #0
 8014556:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 801455a:	2300      	movs	r3, #0
}
 801455c:	4618      	mov	r0, r3
 801455e:	3710      	adds	r7, #16
 8014560:	46bd      	mov	sp, r7
 8014562:	bdb0      	pop	{r4, r5, r7, pc}

08014564 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8014564:	b480      	push	{r7}
 8014566:	b083      	sub	sp, #12
 8014568:	af00      	add	r7, sp, #0
 801456a:	6078      	str	r0, [r7, #4]
 801456c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8014574:	2b01      	cmp	r3, #1
 8014576:	d101      	bne.n	801457c <HAL_LTDC_ProgramLineEvent+0x18>
 8014578:	2302      	movs	r3, #2
 801457a:	e023      	b.n	80145c4 <HAL_LTDC_ProgramLineEvent+0x60>
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	2201      	movs	r2, #1
 8014580:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	2202      	movs	r2, #2
 8014588:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	681b      	ldr	r3, [r3, #0]
 8014590:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	f022 0201 	bic.w	r2, r2, #1
 801459a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 801459c:	4a0c      	ldr	r2, [pc, #48]	; (80145d0 <HAL_LTDC_ProgramLineEvent+0x6c>)
 801459e:	683b      	ldr	r3, [r7, #0]
 80145a0:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	681b      	ldr	r3, [r3, #0]
 80145a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	f042 0201 	orr.w	r2, r2, #1
 80145b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	2201      	movs	r2, #1
 80145b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	2200      	movs	r2, #0
 80145be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80145c2:	2300      	movs	r3, #0
}
 80145c4:	4618      	mov	r0, r3
 80145c6:	370c      	adds	r7, #12
 80145c8:	46bd      	mov	sp, r7
 80145ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ce:	4770      	bx	lr
 80145d0:	40016800 	.word	0x40016800

080145d4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80145d4:	b480      	push	{r7}
 80145d6:	b089      	sub	sp, #36	; 0x24
 80145d8:	af00      	add	r7, sp, #0
 80145da:	60f8      	str	r0, [r7, #12]
 80145dc:	60b9      	str	r1, [r7, #8]
 80145de:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80145e0:	68bb      	ldr	r3, [r7, #8]
 80145e2:	685a      	ldr	r2, [r3, #4]
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	68db      	ldr	r3, [r3, #12]
 80145ea:	0c1b      	lsrs	r3, r3, #16
 80145ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80145f0:	4413      	add	r3, r2
 80145f2:	041b      	lsls	r3, r3, #16
 80145f4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80145f6:	68fb      	ldr	r3, [r7, #12]
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	461a      	mov	r2, r3
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	01db      	lsls	r3, r3, #7
 8014600:	4413      	add	r3, r2
 8014602:	3384      	adds	r3, #132	; 0x84
 8014604:	685b      	ldr	r3, [r3, #4]
 8014606:	68fa      	ldr	r2, [r7, #12]
 8014608:	6812      	ldr	r2, [r2, #0]
 801460a:	4611      	mov	r1, r2
 801460c:	687a      	ldr	r2, [r7, #4]
 801460e:	01d2      	lsls	r2, r2, #7
 8014610:	440a      	add	r2, r1
 8014612:	3284      	adds	r2, #132	; 0x84
 8014614:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8014618:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 801461a:	68bb      	ldr	r3, [r7, #8]
 801461c:	681a      	ldr	r2, [r3, #0]
 801461e:	68fb      	ldr	r3, [r7, #12]
 8014620:	681b      	ldr	r3, [r3, #0]
 8014622:	68db      	ldr	r3, [r3, #12]
 8014624:	0c1b      	lsrs	r3, r3, #16
 8014626:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801462a:	4413      	add	r3, r2
 801462c:	1c5a      	adds	r2, r3, #1
 801462e:	68fb      	ldr	r3, [r7, #12]
 8014630:	681b      	ldr	r3, [r3, #0]
 8014632:	4619      	mov	r1, r3
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	01db      	lsls	r3, r3, #7
 8014638:	440b      	add	r3, r1
 801463a:	3384      	adds	r3, #132	; 0x84
 801463c:	4619      	mov	r1, r3
 801463e:	69fb      	ldr	r3, [r7, #28]
 8014640:	4313      	orrs	r3, r2
 8014642:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8014644:	68bb      	ldr	r3, [r7, #8]
 8014646:	68da      	ldr	r2, [r3, #12]
 8014648:	68fb      	ldr	r3, [r7, #12]
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	68db      	ldr	r3, [r3, #12]
 801464e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014652:	4413      	add	r3, r2
 8014654:	041b      	lsls	r3, r3, #16
 8014656:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	681b      	ldr	r3, [r3, #0]
 801465c:	461a      	mov	r2, r3
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	01db      	lsls	r3, r3, #7
 8014662:	4413      	add	r3, r2
 8014664:	3384      	adds	r3, #132	; 0x84
 8014666:	689b      	ldr	r3, [r3, #8]
 8014668:	68fa      	ldr	r2, [r7, #12]
 801466a:	6812      	ldr	r2, [r2, #0]
 801466c:	4611      	mov	r1, r2
 801466e:	687a      	ldr	r2, [r7, #4]
 8014670:	01d2      	lsls	r2, r2, #7
 8014672:	440a      	add	r2, r1
 8014674:	3284      	adds	r2, #132	; 0x84
 8014676:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 801467a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 801467c:	68bb      	ldr	r3, [r7, #8]
 801467e:	689a      	ldr	r2, [r3, #8]
 8014680:	68fb      	ldr	r3, [r7, #12]
 8014682:	681b      	ldr	r3, [r3, #0]
 8014684:	68db      	ldr	r3, [r3, #12]
 8014686:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801468a:	4413      	add	r3, r2
 801468c:	1c5a      	adds	r2, r3, #1
 801468e:	68fb      	ldr	r3, [r7, #12]
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	4619      	mov	r1, r3
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	01db      	lsls	r3, r3, #7
 8014698:	440b      	add	r3, r1
 801469a:	3384      	adds	r3, #132	; 0x84
 801469c:	4619      	mov	r1, r3
 801469e:	69fb      	ldr	r3, [r7, #28]
 80146a0:	4313      	orrs	r3, r2
 80146a2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80146a4:	68fb      	ldr	r3, [r7, #12]
 80146a6:	681b      	ldr	r3, [r3, #0]
 80146a8:	461a      	mov	r2, r3
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	01db      	lsls	r3, r3, #7
 80146ae:	4413      	add	r3, r2
 80146b0:	3384      	adds	r3, #132	; 0x84
 80146b2:	691b      	ldr	r3, [r3, #16]
 80146b4:	68fa      	ldr	r2, [r7, #12]
 80146b6:	6812      	ldr	r2, [r2, #0]
 80146b8:	4611      	mov	r1, r2
 80146ba:	687a      	ldr	r2, [r7, #4]
 80146bc:	01d2      	lsls	r2, r2, #7
 80146be:	440a      	add	r2, r1
 80146c0:	3284      	adds	r2, #132	; 0x84
 80146c2:	f023 0307 	bic.w	r3, r3, #7
 80146c6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	681b      	ldr	r3, [r3, #0]
 80146cc:	461a      	mov	r2, r3
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	01db      	lsls	r3, r3, #7
 80146d2:	4413      	add	r3, r2
 80146d4:	3384      	adds	r3, #132	; 0x84
 80146d6:	461a      	mov	r2, r3
 80146d8:	68bb      	ldr	r3, [r7, #8]
 80146da:	691b      	ldr	r3, [r3, #16]
 80146dc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80146de:	68bb      	ldr	r3, [r7, #8]
 80146e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80146e4:	021b      	lsls	r3, r3, #8
 80146e6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80146e8:	68bb      	ldr	r3, [r7, #8]
 80146ea:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80146ee:	041b      	lsls	r3, r3, #16
 80146f0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80146f2:	68bb      	ldr	r3, [r7, #8]
 80146f4:	699b      	ldr	r3, [r3, #24]
 80146f6:	061b      	lsls	r3, r3, #24
 80146f8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80146fa:	68fb      	ldr	r3, [r7, #12]
 80146fc:	681b      	ldr	r3, [r3, #0]
 80146fe:	461a      	mov	r2, r3
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	01db      	lsls	r3, r3, #7
 8014704:	4413      	add	r3, r2
 8014706:	3384      	adds	r3, #132	; 0x84
 8014708:	699b      	ldr	r3, [r3, #24]
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	681b      	ldr	r3, [r3, #0]
 801470e:	461a      	mov	r2, r3
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	01db      	lsls	r3, r3, #7
 8014714:	4413      	add	r3, r2
 8014716:	3384      	adds	r3, #132	; 0x84
 8014718:	461a      	mov	r2, r3
 801471a:	2300      	movs	r3, #0
 801471c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 801471e:	68bb      	ldr	r3, [r7, #8]
 8014720:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014724:	461a      	mov	r2, r3
 8014726:	69fb      	ldr	r3, [r7, #28]
 8014728:	431a      	orrs	r2, r3
 801472a:	69bb      	ldr	r3, [r7, #24]
 801472c:	431a      	orrs	r2, r3
 801472e:	68fb      	ldr	r3, [r7, #12]
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	4619      	mov	r1, r3
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	01db      	lsls	r3, r3, #7
 8014738:	440b      	add	r3, r1
 801473a:	3384      	adds	r3, #132	; 0x84
 801473c:	4619      	mov	r1, r3
 801473e:	697b      	ldr	r3, [r7, #20]
 8014740:	4313      	orrs	r3, r2
 8014742:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8014744:	68fb      	ldr	r3, [r7, #12]
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	461a      	mov	r2, r3
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	01db      	lsls	r3, r3, #7
 801474e:	4413      	add	r3, r2
 8014750:	3384      	adds	r3, #132	; 0x84
 8014752:	695b      	ldr	r3, [r3, #20]
 8014754:	68fa      	ldr	r2, [r7, #12]
 8014756:	6812      	ldr	r2, [r2, #0]
 8014758:	4611      	mov	r1, r2
 801475a:	687a      	ldr	r2, [r7, #4]
 801475c:	01d2      	lsls	r2, r2, #7
 801475e:	440a      	add	r2, r1
 8014760:	3284      	adds	r2, #132	; 0x84
 8014762:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8014766:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8014768:	68fb      	ldr	r3, [r7, #12]
 801476a:	681b      	ldr	r3, [r3, #0]
 801476c:	461a      	mov	r2, r3
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	01db      	lsls	r3, r3, #7
 8014772:	4413      	add	r3, r2
 8014774:	3384      	adds	r3, #132	; 0x84
 8014776:	461a      	mov	r2, r3
 8014778:	68bb      	ldr	r3, [r7, #8]
 801477a:	695b      	ldr	r3, [r3, #20]
 801477c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 801477e:	68fb      	ldr	r3, [r7, #12]
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	461a      	mov	r2, r3
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	01db      	lsls	r3, r3, #7
 8014788:	4413      	add	r3, r2
 801478a:	3384      	adds	r3, #132	; 0x84
 801478c:	69db      	ldr	r3, [r3, #28]
 801478e:	68fa      	ldr	r2, [r7, #12]
 8014790:	6812      	ldr	r2, [r2, #0]
 8014792:	4611      	mov	r1, r2
 8014794:	687a      	ldr	r2, [r7, #4]
 8014796:	01d2      	lsls	r2, r2, #7
 8014798:	440a      	add	r2, r1
 801479a:	3284      	adds	r2, #132	; 0x84
 801479c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80147a0:	f023 0307 	bic.w	r3, r3, #7
 80147a4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80147a6:	68bb      	ldr	r3, [r7, #8]
 80147a8:	69da      	ldr	r2, [r3, #28]
 80147aa:	68bb      	ldr	r3, [r7, #8]
 80147ac:	6a1b      	ldr	r3, [r3, #32]
 80147ae:	68f9      	ldr	r1, [r7, #12]
 80147b0:	6809      	ldr	r1, [r1, #0]
 80147b2:	4608      	mov	r0, r1
 80147b4:	6879      	ldr	r1, [r7, #4]
 80147b6:	01c9      	lsls	r1, r1, #7
 80147b8:	4401      	add	r1, r0
 80147ba:	3184      	adds	r1, #132	; 0x84
 80147bc:	4313      	orrs	r3, r2
 80147be:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	461a      	mov	r2, r3
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	01db      	lsls	r3, r3, #7
 80147ca:	4413      	add	r3, r2
 80147cc:	3384      	adds	r3, #132	; 0x84
 80147ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80147d0:	68fb      	ldr	r3, [r7, #12]
 80147d2:	681b      	ldr	r3, [r3, #0]
 80147d4:	461a      	mov	r2, r3
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	01db      	lsls	r3, r3, #7
 80147da:	4413      	add	r3, r2
 80147dc:	3384      	adds	r3, #132	; 0x84
 80147de:	461a      	mov	r2, r3
 80147e0:	2300      	movs	r3, #0
 80147e2:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80147e4:	68fb      	ldr	r3, [r7, #12]
 80147e6:	681b      	ldr	r3, [r3, #0]
 80147e8:	461a      	mov	r2, r3
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	01db      	lsls	r3, r3, #7
 80147ee:	4413      	add	r3, r2
 80147f0:	3384      	adds	r3, #132	; 0x84
 80147f2:	461a      	mov	r2, r3
 80147f4:	68bb      	ldr	r3, [r7, #8]
 80147f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147f8:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80147fa:	68bb      	ldr	r3, [r7, #8]
 80147fc:	691b      	ldr	r3, [r3, #16]
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d102      	bne.n	8014808 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8014802:	2304      	movs	r3, #4
 8014804:	61fb      	str	r3, [r7, #28]
 8014806:	e01b      	b.n	8014840 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8014808:	68bb      	ldr	r3, [r7, #8]
 801480a:	691b      	ldr	r3, [r3, #16]
 801480c:	2b01      	cmp	r3, #1
 801480e:	d102      	bne.n	8014816 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8014810:	2303      	movs	r3, #3
 8014812:	61fb      	str	r3, [r7, #28]
 8014814:	e014      	b.n	8014840 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8014816:	68bb      	ldr	r3, [r7, #8]
 8014818:	691b      	ldr	r3, [r3, #16]
 801481a:	2b04      	cmp	r3, #4
 801481c:	d00b      	beq.n	8014836 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 801481e:	68bb      	ldr	r3, [r7, #8]
 8014820:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8014822:	2b02      	cmp	r3, #2
 8014824:	d007      	beq.n	8014836 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8014826:	68bb      	ldr	r3, [r7, #8]
 8014828:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 801482a:	2b03      	cmp	r3, #3
 801482c:	d003      	beq.n	8014836 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 801482e:	68bb      	ldr	r3, [r7, #8]
 8014830:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8014832:	2b07      	cmp	r3, #7
 8014834:	d102      	bne.n	801483c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8014836:	2302      	movs	r3, #2
 8014838:	61fb      	str	r3, [r7, #28]
 801483a:	e001      	b.n	8014840 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 801483c:	2301      	movs	r3, #1
 801483e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	461a      	mov	r2, r3
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	01db      	lsls	r3, r3, #7
 801484a:	4413      	add	r3, r2
 801484c:	3384      	adds	r3, #132	; 0x84
 801484e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014850:	68fa      	ldr	r2, [r7, #12]
 8014852:	6812      	ldr	r2, [r2, #0]
 8014854:	4611      	mov	r1, r2
 8014856:	687a      	ldr	r2, [r7, #4]
 8014858:	01d2      	lsls	r2, r2, #7
 801485a:	440a      	add	r2, r1
 801485c:	3284      	adds	r2, #132	; 0x84
 801485e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8014862:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8014864:	68bb      	ldr	r3, [r7, #8]
 8014866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014868:	69fa      	ldr	r2, [r7, #28]
 801486a:	fb02 f303 	mul.w	r3, r2, r3
 801486e:	041a      	lsls	r2, r3, #16
 8014870:	68bb      	ldr	r3, [r7, #8]
 8014872:	6859      	ldr	r1, [r3, #4]
 8014874:	68bb      	ldr	r3, [r7, #8]
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	1acb      	subs	r3, r1, r3
 801487a:	69f9      	ldr	r1, [r7, #28]
 801487c:	fb01 f303 	mul.w	r3, r1, r3
 8014880:	3303      	adds	r3, #3
 8014882:	68f9      	ldr	r1, [r7, #12]
 8014884:	6809      	ldr	r1, [r1, #0]
 8014886:	4608      	mov	r0, r1
 8014888:	6879      	ldr	r1, [r7, #4]
 801488a:	01c9      	lsls	r1, r1, #7
 801488c:	4401      	add	r1, r0
 801488e:	3184      	adds	r1, #132	; 0x84
 8014890:	4313      	orrs	r3, r2
 8014892:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	461a      	mov	r2, r3
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	01db      	lsls	r3, r3, #7
 801489e:	4413      	add	r3, r2
 80148a0:	3384      	adds	r3, #132	; 0x84
 80148a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80148a4:	68fa      	ldr	r2, [r7, #12]
 80148a6:	6812      	ldr	r2, [r2, #0]
 80148a8:	4611      	mov	r1, r2
 80148aa:	687a      	ldr	r2, [r7, #4]
 80148ac:	01d2      	lsls	r2, r2, #7
 80148ae:	440a      	add	r2, r1
 80148b0:	3284      	adds	r2, #132	; 0x84
 80148b2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80148b6:	f023 0307 	bic.w	r3, r3, #7
 80148ba:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80148bc:	68fb      	ldr	r3, [r7, #12]
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	461a      	mov	r2, r3
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	01db      	lsls	r3, r3, #7
 80148c6:	4413      	add	r3, r2
 80148c8:	3384      	adds	r3, #132	; 0x84
 80148ca:	461a      	mov	r2, r3
 80148cc:	68bb      	ldr	r3, [r7, #8]
 80148ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148d0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	461a      	mov	r2, r3
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	01db      	lsls	r3, r3, #7
 80148dc:	4413      	add	r3, r2
 80148de:	3384      	adds	r3, #132	; 0x84
 80148e0:	681b      	ldr	r3, [r3, #0]
 80148e2:	68fa      	ldr	r2, [r7, #12]
 80148e4:	6812      	ldr	r2, [r2, #0]
 80148e6:	4611      	mov	r1, r2
 80148e8:	687a      	ldr	r2, [r7, #4]
 80148ea:	01d2      	lsls	r2, r2, #7
 80148ec:	440a      	add	r2, r1
 80148ee:	3284      	adds	r2, #132	; 0x84
 80148f0:	f043 0301 	orr.w	r3, r3, #1
 80148f4:	6013      	str	r3, [r2, #0]
}
 80148f6:	bf00      	nop
 80148f8:	3724      	adds	r7, #36	; 0x24
 80148fa:	46bd      	mov	sp, r7
 80148fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014900:	4770      	bx	lr
	...

08014904 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8014904:	b580      	push	{r7, lr}
 8014906:	b086      	sub	sp, #24
 8014908:	af00      	add	r7, sp, #0
 801490a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	2b00      	cmp	r3, #0
 8014910:	d101      	bne.n	8014916 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8014912:	2301      	movs	r3, #1
 8014914:	e25b      	b.n	8014dce <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	681b      	ldr	r3, [r3, #0]
 801491a:	f003 0301 	and.w	r3, r3, #1
 801491e:	2b00      	cmp	r3, #0
 8014920:	d075      	beq.n	8014a0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8014922:	4ba3      	ldr	r3, [pc, #652]	; (8014bb0 <HAL_RCC_OscConfig+0x2ac>)
 8014924:	689b      	ldr	r3, [r3, #8]
 8014926:	f003 030c 	and.w	r3, r3, #12
 801492a:	2b04      	cmp	r3, #4
 801492c:	d00c      	beq.n	8014948 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801492e:	4ba0      	ldr	r3, [pc, #640]	; (8014bb0 <HAL_RCC_OscConfig+0x2ac>)
 8014930:	689b      	ldr	r3, [r3, #8]
 8014932:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8014936:	2b08      	cmp	r3, #8
 8014938:	d112      	bne.n	8014960 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801493a:	4b9d      	ldr	r3, [pc, #628]	; (8014bb0 <HAL_RCC_OscConfig+0x2ac>)
 801493c:	685b      	ldr	r3, [r3, #4]
 801493e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014942:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8014946:	d10b      	bne.n	8014960 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014948:	4b99      	ldr	r3, [pc, #612]	; (8014bb0 <HAL_RCC_OscConfig+0x2ac>)
 801494a:	681b      	ldr	r3, [r3, #0]
 801494c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014950:	2b00      	cmp	r3, #0
 8014952:	d05b      	beq.n	8014a0c <HAL_RCC_OscConfig+0x108>
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	685b      	ldr	r3, [r3, #4]
 8014958:	2b00      	cmp	r3, #0
 801495a:	d157      	bne.n	8014a0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801495c:	2301      	movs	r3, #1
 801495e:	e236      	b.n	8014dce <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	685b      	ldr	r3, [r3, #4]
 8014964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014968:	d106      	bne.n	8014978 <HAL_RCC_OscConfig+0x74>
 801496a:	4b91      	ldr	r3, [pc, #580]	; (8014bb0 <HAL_RCC_OscConfig+0x2ac>)
 801496c:	681b      	ldr	r3, [r3, #0]
 801496e:	4a90      	ldr	r2, [pc, #576]	; (8014bb0 <HAL_RCC_OscConfig+0x2ac>)
 8014970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014974:	6013      	str	r3, [r2, #0]
 8014976:	e01d      	b.n	80149b4 <HAL_RCC_OscConfig+0xb0>
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	685b      	ldr	r3, [r3, #4]
 801497c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8014980:	d10c      	bne.n	801499c <HAL_RCC_OscConfig+0x98>
 8014982:	4b8b      	ldr	r3, [pc, #556]	; (8014bb0 <HAL_RCC_OscConfig+0x2ac>)
 8014984:	681b      	ldr	r3, [r3, #0]
 8014986:	4a8a      	ldr	r2, [pc, #552]	; (8014bb0 <HAL_RCC_OscConfig+0x2ac>)
 8014988:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801498c:	6013      	str	r3, [r2, #0]
 801498e:	4b88      	ldr	r3, [pc, #544]	; (8014bb0 <HAL_RCC_OscConfig+0x2ac>)
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	4a87      	ldr	r2, [pc, #540]	; (8014bb0 <HAL_RCC_OscConfig+0x2ac>)
 8014994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014998:	6013      	str	r3, [r2, #0]
 801499a:	e00b      	b.n	80149b4 <HAL_RCC_OscConfig+0xb0>
 801499c:	4b84      	ldr	r3, [pc, #528]	; (8014bb0 <HAL_RCC_OscConfig+0x2ac>)
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	4a83      	ldr	r2, [pc, #524]	; (8014bb0 <HAL_RCC_OscConfig+0x2ac>)
 80149a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80149a6:	6013      	str	r3, [r2, #0]
 80149a8:	4b81      	ldr	r3, [pc, #516]	; (8014bb0 <HAL_RCC_OscConfig+0x2ac>)
 80149aa:	681b      	ldr	r3, [r3, #0]
 80149ac:	4a80      	ldr	r2, [pc, #512]	; (8014bb0 <HAL_RCC_OscConfig+0x2ac>)
 80149ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80149b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	685b      	ldr	r3, [r3, #4]
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d013      	beq.n	80149e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80149bc:	f7fd fae6 	bl	8011f8c <HAL_GetTick>
 80149c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80149c2:	e008      	b.n	80149d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80149c4:	f7fd fae2 	bl	8011f8c <HAL_GetTick>
 80149c8:	4602      	mov	r2, r0
 80149ca:	693b      	ldr	r3, [r7, #16]
 80149cc:	1ad3      	subs	r3, r2, r3
 80149ce:	2b64      	cmp	r3, #100	; 0x64
 80149d0:	d901      	bls.n	80149d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80149d2:	2303      	movs	r3, #3
 80149d4:	e1fb      	b.n	8014dce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80149d6:	4b76      	ldr	r3, [pc, #472]	; (8014bb0 <HAL_RCC_OscConfig+0x2ac>)
 80149d8:	681b      	ldr	r3, [r3, #0]
 80149da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d0f0      	beq.n	80149c4 <HAL_RCC_OscConfig+0xc0>
 80149e2:	e014      	b.n	8014a0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80149e4:	f7fd fad2 	bl	8011f8c <HAL_GetTick>
 80149e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80149ea:	e008      	b.n	80149fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80149ec:	f7fd face 	bl	8011f8c <HAL_GetTick>
 80149f0:	4602      	mov	r2, r0
 80149f2:	693b      	ldr	r3, [r7, #16]
 80149f4:	1ad3      	subs	r3, r2, r3
 80149f6:	2b64      	cmp	r3, #100	; 0x64
 80149f8:	d901      	bls.n	80149fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80149fa:	2303      	movs	r3, #3
 80149fc:	e1e7      	b.n	8014dce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80149fe:	4b6c      	ldr	r3, [pc, #432]	; (8014bb0 <HAL_RCC_OscConfig+0x2ac>)
 8014a00:	681b      	ldr	r3, [r3, #0]
 8014a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d1f0      	bne.n	80149ec <HAL_RCC_OscConfig+0xe8>
 8014a0a:	e000      	b.n	8014a0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014a0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	f003 0302 	and.w	r3, r3, #2
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d063      	beq.n	8014ae2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8014a1a:	4b65      	ldr	r3, [pc, #404]	; (8014bb0 <HAL_RCC_OscConfig+0x2ac>)
 8014a1c:	689b      	ldr	r3, [r3, #8]
 8014a1e:	f003 030c 	and.w	r3, r3, #12
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	d00b      	beq.n	8014a3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8014a26:	4b62      	ldr	r3, [pc, #392]	; (8014bb0 <HAL_RCC_OscConfig+0x2ac>)
 8014a28:	689b      	ldr	r3, [r3, #8]
 8014a2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8014a2e:	2b08      	cmp	r3, #8
 8014a30:	d11c      	bne.n	8014a6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8014a32:	4b5f      	ldr	r3, [pc, #380]	; (8014bb0 <HAL_RCC_OscConfig+0x2ac>)
 8014a34:	685b      	ldr	r3, [r3, #4]
 8014a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d116      	bne.n	8014a6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8014a3e:	4b5c      	ldr	r3, [pc, #368]	; (8014bb0 <HAL_RCC_OscConfig+0x2ac>)
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	f003 0302 	and.w	r3, r3, #2
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d005      	beq.n	8014a56 <HAL_RCC_OscConfig+0x152>
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	68db      	ldr	r3, [r3, #12]
 8014a4e:	2b01      	cmp	r3, #1
 8014a50:	d001      	beq.n	8014a56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8014a52:	2301      	movs	r3, #1
 8014a54:	e1bb      	b.n	8014dce <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014a56:	4b56      	ldr	r3, [pc, #344]	; (8014bb0 <HAL_RCC_OscConfig+0x2ac>)
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	691b      	ldr	r3, [r3, #16]
 8014a62:	00db      	lsls	r3, r3, #3
 8014a64:	4952      	ldr	r1, [pc, #328]	; (8014bb0 <HAL_RCC_OscConfig+0x2ac>)
 8014a66:	4313      	orrs	r3, r2
 8014a68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8014a6a:	e03a      	b.n	8014ae2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	68db      	ldr	r3, [r3, #12]
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d020      	beq.n	8014ab6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8014a74:	4b4f      	ldr	r3, [pc, #316]	; (8014bb4 <HAL_RCC_OscConfig+0x2b0>)
 8014a76:	2201      	movs	r2, #1
 8014a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014a7a:	f7fd fa87 	bl	8011f8c <HAL_GetTick>
 8014a7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8014a80:	e008      	b.n	8014a94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8014a82:	f7fd fa83 	bl	8011f8c <HAL_GetTick>
 8014a86:	4602      	mov	r2, r0
 8014a88:	693b      	ldr	r3, [r7, #16]
 8014a8a:	1ad3      	subs	r3, r2, r3
 8014a8c:	2b02      	cmp	r3, #2
 8014a8e:	d901      	bls.n	8014a94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8014a90:	2303      	movs	r3, #3
 8014a92:	e19c      	b.n	8014dce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8014a94:	4b46      	ldr	r3, [pc, #280]	; (8014bb0 <HAL_RCC_OscConfig+0x2ac>)
 8014a96:	681b      	ldr	r3, [r3, #0]
 8014a98:	f003 0302 	and.w	r3, r3, #2
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d0f0      	beq.n	8014a82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014aa0:	4b43      	ldr	r3, [pc, #268]	; (8014bb0 <HAL_RCC_OscConfig+0x2ac>)
 8014aa2:	681b      	ldr	r3, [r3, #0]
 8014aa4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	691b      	ldr	r3, [r3, #16]
 8014aac:	00db      	lsls	r3, r3, #3
 8014aae:	4940      	ldr	r1, [pc, #256]	; (8014bb0 <HAL_RCC_OscConfig+0x2ac>)
 8014ab0:	4313      	orrs	r3, r2
 8014ab2:	600b      	str	r3, [r1, #0]
 8014ab4:	e015      	b.n	8014ae2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8014ab6:	4b3f      	ldr	r3, [pc, #252]	; (8014bb4 <HAL_RCC_OscConfig+0x2b0>)
 8014ab8:	2200      	movs	r2, #0
 8014aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014abc:	f7fd fa66 	bl	8011f8c <HAL_GetTick>
 8014ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8014ac2:	e008      	b.n	8014ad6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8014ac4:	f7fd fa62 	bl	8011f8c <HAL_GetTick>
 8014ac8:	4602      	mov	r2, r0
 8014aca:	693b      	ldr	r3, [r7, #16]
 8014acc:	1ad3      	subs	r3, r2, r3
 8014ace:	2b02      	cmp	r3, #2
 8014ad0:	d901      	bls.n	8014ad6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8014ad2:	2303      	movs	r3, #3
 8014ad4:	e17b      	b.n	8014dce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8014ad6:	4b36      	ldr	r3, [pc, #216]	; (8014bb0 <HAL_RCC_OscConfig+0x2ac>)
 8014ad8:	681b      	ldr	r3, [r3, #0]
 8014ada:	f003 0302 	and.w	r3, r3, #2
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d1f0      	bne.n	8014ac4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	f003 0308 	and.w	r3, r3, #8
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d030      	beq.n	8014b50 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	695b      	ldr	r3, [r3, #20]
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d016      	beq.n	8014b24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8014af6:	4b30      	ldr	r3, [pc, #192]	; (8014bb8 <HAL_RCC_OscConfig+0x2b4>)
 8014af8:	2201      	movs	r2, #1
 8014afa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014afc:	f7fd fa46 	bl	8011f8c <HAL_GetTick>
 8014b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8014b02:	e008      	b.n	8014b16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8014b04:	f7fd fa42 	bl	8011f8c <HAL_GetTick>
 8014b08:	4602      	mov	r2, r0
 8014b0a:	693b      	ldr	r3, [r7, #16]
 8014b0c:	1ad3      	subs	r3, r2, r3
 8014b0e:	2b02      	cmp	r3, #2
 8014b10:	d901      	bls.n	8014b16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8014b12:	2303      	movs	r3, #3
 8014b14:	e15b      	b.n	8014dce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8014b16:	4b26      	ldr	r3, [pc, #152]	; (8014bb0 <HAL_RCC_OscConfig+0x2ac>)
 8014b18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014b1a:	f003 0302 	and.w	r3, r3, #2
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d0f0      	beq.n	8014b04 <HAL_RCC_OscConfig+0x200>
 8014b22:	e015      	b.n	8014b50 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8014b24:	4b24      	ldr	r3, [pc, #144]	; (8014bb8 <HAL_RCC_OscConfig+0x2b4>)
 8014b26:	2200      	movs	r2, #0
 8014b28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8014b2a:	f7fd fa2f 	bl	8011f8c <HAL_GetTick>
 8014b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8014b30:	e008      	b.n	8014b44 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8014b32:	f7fd fa2b 	bl	8011f8c <HAL_GetTick>
 8014b36:	4602      	mov	r2, r0
 8014b38:	693b      	ldr	r3, [r7, #16]
 8014b3a:	1ad3      	subs	r3, r2, r3
 8014b3c:	2b02      	cmp	r3, #2
 8014b3e:	d901      	bls.n	8014b44 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8014b40:	2303      	movs	r3, #3
 8014b42:	e144      	b.n	8014dce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8014b44:	4b1a      	ldr	r3, [pc, #104]	; (8014bb0 <HAL_RCC_OscConfig+0x2ac>)
 8014b46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014b48:	f003 0302 	and.w	r3, r3, #2
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d1f0      	bne.n	8014b32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	f003 0304 	and.w	r3, r3, #4
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	f000 80a0 	beq.w	8014c9e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8014b5e:	2300      	movs	r3, #0
 8014b60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8014b62:	4b13      	ldr	r3, [pc, #76]	; (8014bb0 <HAL_RCC_OscConfig+0x2ac>)
 8014b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d10f      	bne.n	8014b8e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8014b6e:	2300      	movs	r3, #0
 8014b70:	60bb      	str	r3, [r7, #8]
 8014b72:	4b0f      	ldr	r3, [pc, #60]	; (8014bb0 <HAL_RCC_OscConfig+0x2ac>)
 8014b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b76:	4a0e      	ldr	r2, [pc, #56]	; (8014bb0 <HAL_RCC_OscConfig+0x2ac>)
 8014b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8014b7e:	4b0c      	ldr	r3, [pc, #48]	; (8014bb0 <HAL_RCC_OscConfig+0x2ac>)
 8014b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014b86:	60bb      	str	r3, [r7, #8]
 8014b88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8014b8a:	2301      	movs	r3, #1
 8014b8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014b8e:	4b0b      	ldr	r3, [pc, #44]	; (8014bbc <HAL_RCC_OscConfig+0x2b8>)
 8014b90:	681b      	ldr	r3, [r3, #0]
 8014b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d121      	bne.n	8014bde <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8014b9a:	4b08      	ldr	r3, [pc, #32]	; (8014bbc <HAL_RCC_OscConfig+0x2b8>)
 8014b9c:	681b      	ldr	r3, [r3, #0]
 8014b9e:	4a07      	ldr	r2, [pc, #28]	; (8014bbc <HAL_RCC_OscConfig+0x2b8>)
 8014ba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014ba4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8014ba6:	f7fd f9f1 	bl	8011f8c <HAL_GetTick>
 8014baa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014bac:	e011      	b.n	8014bd2 <HAL_RCC_OscConfig+0x2ce>
 8014bae:	bf00      	nop
 8014bb0:	40023800 	.word	0x40023800
 8014bb4:	42470000 	.word	0x42470000
 8014bb8:	42470e80 	.word	0x42470e80
 8014bbc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8014bc0:	f7fd f9e4 	bl	8011f8c <HAL_GetTick>
 8014bc4:	4602      	mov	r2, r0
 8014bc6:	693b      	ldr	r3, [r7, #16]
 8014bc8:	1ad3      	subs	r3, r2, r3
 8014bca:	2b02      	cmp	r3, #2
 8014bcc:	d901      	bls.n	8014bd2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8014bce:	2303      	movs	r3, #3
 8014bd0:	e0fd      	b.n	8014dce <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014bd2:	4b81      	ldr	r3, [pc, #516]	; (8014dd8 <HAL_RCC_OscConfig+0x4d4>)
 8014bd4:	681b      	ldr	r3, [r3, #0]
 8014bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d0f0      	beq.n	8014bc0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	689b      	ldr	r3, [r3, #8]
 8014be2:	2b01      	cmp	r3, #1
 8014be4:	d106      	bne.n	8014bf4 <HAL_RCC_OscConfig+0x2f0>
 8014be6:	4b7d      	ldr	r3, [pc, #500]	; (8014ddc <HAL_RCC_OscConfig+0x4d8>)
 8014be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014bea:	4a7c      	ldr	r2, [pc, #496]	; (8014ddc <HAL_RCC_OscConfig+0x4d8>)
 8014bec:	f043 0301 	orr.w	r3, r3, #1
 8014bf0:	6713      	str	r3, [r2, #112]	; 0x70
 8014bf2:	e01c      	b.n	8014c2e <HAL_RCC_OscConfig+0x32a>
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	689b      	ldr	r3, [r3, #8]
 8014bf8:	2b05      	cmp	r3, #5
 8014bfa:	d10c      	bne.n	8014c16 <HAL_RCC_OscConfig+0x312>
 8014bfc:	4b77      	ldr	r3, [pc, #476]	; (8014ddc <HAL_RCC_OscConfig+0x4d8>)
 8014bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014c00:	4a76      	ldr	r2, [pc, #472]	; (8014ddc <HAL_RCC_OscConfig+0x4d8>)
 8014c02:	f043 0304 	orr.w	r3, r3, #4
 8014c06:	6713      	str	r3, [r2, #112]	; 0x70
 8014c08:	4b74      	ldr	r3, [pc, #464]	; (8014ddc <HAL_RCC_OscConfig+0x4d8>)
 8014c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014c0c:	4a73      	ldr	r2, [pc, #460]	; (8014ddc <HAL_RCC_OscConfig+0x4d8>)
 8014c0e:	f043 0301 	orr.w	r3, r3, #1
 8014c12:	6713      	str	r3, [r2, #112]	; 0x70
 8014c14:	e00b      	b.n	8014c2e <HAL_RCC_OscConfig+0x32a>
 8014c16:	4b71      	ldr	r3, [pc, #452]	; (8014ddc <HAL_RCC_OscConfig+0x4d8>)
 8014c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014c1a:	4a70      	ldr	r2, [pc, #448]	; (8014ddc <HAL_RCC_OscConfig+0x4d8>)
 8014c1c:	f023 0301 	bic.w	r3, r3, #1
 8014c20:	6713      	str	r3, [r2, #112]	; 0x70
 8014c22:	4b6e      	ldr	r3, [pc, #440]	; (8014ddc <HAL_RCC_OscConfig+0x4d8>)
 8014c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014c26:	4a6d      	ldr	r2, [pc, #436]	; (8014ddc <HAL_RCC_OscConfig+0x4d8>)
 8014c28:	f023 0304 	bic.w	r3, r3, #4
 8014c2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	689b      	ldr	r3, [r3, #8]
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d015      	beq.n	8014c62 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014c36:	f7fd f9a9 	bl	8011f8c <HAL_GetTick>
 8014c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8014c3c:	e00a      	b.n	8014c54 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8014c3e:	f7fd f9a5 	bl	8011f8c <HAL_GetTick>
 8014c42:	4602      	mov	r2, r0
 8014c44:	693b      	ldr	r3, [r7, #16]
 8014c46:	1ad3      	subs	r3, r2, r3
 8014c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8014c4c:	4293      	cmp	r3, r2
 8014c4e:	d901      	bls.n	8014c54 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8014c50:	2303      	movs	r3, #3
 8014c52:	e0bc      	b.n	8014dce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8014c54:	4b61      	ldr	r3, [pc, #388]	; (8014ddc <HAL_RCC_OscConfig+0x4d8>)
 8014c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014c58:	f003 0302 	and.w	r3, r3, #2
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d0ee      	beq.n	8014c3e <HAL_RCC_OscConfig+0x33a>
 8014c60:	e014      	b.n	8014c8c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8014c62:	f7fd f993 	bl	8011f8c <HAL_GetTick>
 8014c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8014c68:	e00a      	b.n	8014c80 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8014c6a:	f7fd f98f 	bl	8011f8c <HAL_GetTick>
 8014c6e:	4602      	mov	r2, r0
 8014c70:	693b      	ldr	r3, [r7, #16]
 8014c72:	1ad3      	subs	r3, r2, r3
 8014c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8014c78:	4293      	cmp	r3, r2
 8014c7a:	d901      	bls.n	8014c80 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8014c7c:	2303      	movs	r3, #3
 8014c7e:	e0a6      	b.n	8014dce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8014c80:	4b56      	ldr	r3, [pc, #344]	; (8014ddc <HAL_RCC_OscConfig+0x4d8>)
 8014c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014c84:	f003 0302 	and.w	r3, r3, #2
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d1ee      	bne.n	8014c6a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8014c8c:	7dfb      	ldrb	r3, [r7, #23]
 8014c8e:	2b01      	cmp	r3, #1
 8014c90:	d105      	bne.n	8014c9e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8014c92:	4b52      	ldr	r3, [pc, #328]	; (8014ddc <HAL_RCC_OscConfig+0x4d8>)
 8014c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c96:	4a51      	ldr	r2, [pc, #324]	; (8014ddc <HAL_RCC_OscConfig+0x4d8>)
 8014c98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014c9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	699b      	ldr	r3, [r3, #24]
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	f000 8092 	beq.w	8014dcc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8014ca8:	4b4c      	ldr	r3, [pc, #304]	; (8014ddc <HAL_RCC_OscConfig+0x4d8>)
 8014caa:	689b      	ldr	r3, [r3, #8]
 8014cac:	f003 030c 	and.w	r3, r3, #12
 8014cb0:	2b08      	cmp	r3, #8
 8014cb2:	d05c      	beq.n	8014d6e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	699b      	ldr	r3, [r3, #24]
 8014cb8:	2b02      	cmp	r3, #2
 8014cba:	d141      	bne.n	8014d40 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014cbc:	4b48      	ldr	r3, [pc, #288]	; (8014de0 <HAL_RCC_OscConfig+0x4dc>)
 8014cbe:	2200      	movs	r2, #0
 8014cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014cc2:	f7fd f963 	bl	8011f8c <HAL_GetTick>
 8014cc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8014cc8:	e008      	b.n	8014cdc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014cca:	f7fd f95f 	bl	8011f8c <HAL_GetTick>
 8014cce:	4602      	mov	r2, r0
 8014cd0:	693b      	ldr	r3, [r7, #16]
 8014cd2:	1ad3      	subs	r3, r2, r3
 8014cd4:	2b02      	cmp	r3, #2
 8014cd6:	d901      	bls.n	8014cdc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8014cd8:	2303      	movs	r3, #3
 8014cda:	e078      	b.n	8014dce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8014cdc:	4b3f      	ldr	r3, [pc, #252]	; (8014ddc <HAL_RCC_OscConfig+0x4d8>)
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d1f0      	bne.n	8014cca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	69da      	ldr	r2, [r3, #28]
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	6a1b      	ldr	r3, [r3, #32]
 8014cf0:	431a      	orrs	r2, r3
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014cf6:	019b      	lsls	r3, r3, #6
 8014cf8:	431a      	orrs	r2, r3
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014cfe:	085b      	lsrs	r3, r3, #1
 8014d00:	3b01      	subs	r3, #1
 8014d02:	041b      	lsls	r3, r3, #16
 8014d04:	431a      	orrs	r2, r3
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d0a:	061b      	lsls	r3, r3, #24
 8014d0c:	4933      	ldr	r1, [pc, #204]	; (8014ddc <HAL_RCC_OscConfig+0x4d8>)
 8014d0e:	4313      	orrs	r3, r2
 8014d10:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8014d12:	4b33      	ldr	r3, [pc, #204]	; (8014de0 <HAL_RCC_OscConfig+0x4dc>)
 8014d14:	2201      	movs	r2, #1
 8014d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014d18:	f7fd f938 	bl	8011f8c <HAL_GetTick>
 8014d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8014d1e:	e008      	b.n	8014d32 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014d20:	f7fd f934 	bl	8011f8c <HAL_GetTick>
 8014d24:	4602      	mov	r2, r0
 8014d26:	693b      	ldr	r3, [r7, #16]
 8014d28:	1ad3      	subs	r3, r2, r3
 8014d2a:	2b02      	cmp	r3, #2
 8014d2c:	d901      	bls.n	8014d32 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8014d2e:	2303      	movs	r3, #3
 8014d30:	e04d      	b.n	8014dce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8014d32:	4b2a      	ldr	r3, [pc, #168]	; (8014ddc <HAL_RCC_OscConfig+0x4d8>)
 8014d34:	681b      	ldr	r3, [r3, #0]
 8014d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d0f0      	beq.n	8014d20 <HAL_RCC_OscConfig+0x41c>
 8014d3e:	e045      	b.n	8014dcc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014d40:	4b27      	ldr	r3, [pc, #156]	; (8014de0 <HAL_RCC_OscConfig+0x4dc>)
 8014d42:	2200      	movs	r2, #0
 8014d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014d46:	f7fd f921 	bl	8011f8c <HAL_GetTick>
 8014d4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8014d4c:	e008      	b.n	8014d60 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014d4e:	f7fd f91d 	bl	8011f8c <HAL_GetTick>
 8014d52:	4602      	mov	r2, r0
 8014d54:	693b      	ldr	r3, [r7, #16]
 8014d56:	1ad3      	subs	r3, r2, r3
 8014d58:	2b02      	cmp	r3, #2
 8014d5a:	d901      	bls.n	8014d60 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8014d5c:	2303      	movs	r3, #3
 8014d5e:	e036      	b.n	8014dce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8014d60:	4b1e      	ldr	r3, [pc, #120]	; (8014ddc <HAL_RCC_OscConfig+0x4d8>)
 8014d62:	681b      	ldr	r3, [r3, #0]
 8014d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d1f0      	bne.n	8014d4e <HAL_RCC_OscConfig+0x44a>
 8014d6c:	e02e      	b.n	8014dcc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	699b      	ldr	r3, [r3, #24]
 8014d72:	2b01      	cmp	r3, #1
 8014d74:	d101      	bne.n	8014d7a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8014d76:	2301      	movs	r3, #1
 8014d78:	e029      	b.n	8014dce <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8014d7a:	4b18      	ldr	r3, [pc, #96]	; (8014ddc <HAL_RCC_OscConfig+0x4d8>)
 8014d7c:	685b      	ldr	r3, [r3, #4]
 8014d7e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	69db      	ldr	r3, [r3, #28]
 8014d8a:	429a      	cmp	r2, r3
 8014d8c:	d11c      	bne.n	8014dc8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014d98:	429a      	cmp	r2, r3
 8014d9a:	d115      	bne.n	8014dc8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8014d9c:	68fa      	ldr	r2, [r7, #12]
 8014d9e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8014da2:	4013      	ands	r3, r2
 8014da4:	687a      	ldr	r2, [r7, #4]
 8014da6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8014da8:	4293      	cmp	r3, r2
 8014daa:	d10d      	bne.n	8014dc8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8014dac:	68fb      	ldr	r3, [r7, #12]
 8014dae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8014db6:	429a      	cmp	r2, r3
 8014db8:	d106      	bne.n	8014dc8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8014dc4:	429a      	cmp	r2, r3
 8014dc6:	d001      	beq.n	8014dcc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8014dc8:	2301      	movs	r3, #1
 8014dca:	e000      	b.n	8014dce <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8014dcc:	2300      	movs	r3, #0
}
 8014dce:	4618      	mov	r0, r3
 8014dd0:	3718      	adds	r7, #24
 8014dd2:	46bd      	mov	sp, r7
 8014dd4:	bd80      	pop	{r7, pc}
 8014dd6:	bf00      	nop
 8014dd8:	40007000 	.word	0x40007000
 8014ddc:	40023800 	.word	0x40023800
 8014de0:	42470060 	.word	0x42470060

08014de4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8014de4:	b580      	push	{r7, lr}
 8014de6:	b084      	sub	sp, #16
 8014de8:	af00      	add	r7, sp, #0
 8014dea:	6078      	str	r0, [r7, #4]
 8014dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d101      	bne.n	8014df8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8014df4:	2301      	movs	r3, #1
 8014df6:	e0cc      	b.n	8014f92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8014df8:	4b68      	ldr	r3, [pc, #416]	; (8014f9c <HAL_RCC_ClockConfig+0x1b8>)
 8014dfa:	681b      	ldr	r3, [r3, #0]
 8014dfc:	f003 030f 	and.w	r3, r3, #15
 8014e00:	683a      	ldr	r2, [r7, #0]
 8014e02:	429a      	cmp	r2, r3
 8014e04:	d90c      	bls.n	8014e20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014e06:	4b65      	ldr	r3, [pc, #404]	; (8014f9c <HAL_RCC_ClockConfig+0x1b8>)
 8014e08:	683a      	ldr	r2, [r7, #0]
 8014e0a:	b2d2      	uxtb	r2, r2
 8014e0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8014e0e:	4b63      	ldr	r3, [pc, #396]	; (8014f9c <HAL_RCC_ClockConfig+0x1b8>)
 8014e10:	681b      	ldr	r3, [r3, #0]
 8014e12:	f003 030f 	and.w	r3, r3, #15
 8014e16:	683a      	ldr	r2, [r7, #0]
 8014e18:	429a      	cmp	r2, r3
 8014e1a:	d001      	beq.n	8014e20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8014e1c:	2301      	movs	r3, #1
 8014e1e:	e0b8      	b.n	8014f92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	681b      	ldr	r3, [r3, #0]
 8014e24:	f003 0302 	and.w	r3, r3, #2
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d020      	beq.n	8014e6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	681b      	ldr	r3, [r3, #0]
 8014e30:	f003 0304 	and.w	r3, r3, #4
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d005      	beq.n	8014e44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8014e38:	4b59      	ldr	r3, [pc, #356]	; (8014fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8014e3a:	689b      	ldr	r3, [r3, #8]
 8014e3c:	4a58      	ldr	r2, [pc, #352]	; (8014fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8014e3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8014e42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	681b      	ldr	r3, [r3, #0]
 8014e48:	f003 0308 	and.w	r3, r3, #8
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d005      	beq.n	8014e5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8014e50:	4b53      	ldr	r3, [pc, #332]	; (8014fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8014e52:	689b      	ldr	r3, [r3, #8]
 8014e54:	4a52      	ldr	r2, [pc, #328]	; (8014fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8014e56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8014e5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8014e5c:	4b50      	ldr	r3, [pc, #320]	; (8014fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8014e5e:	689b      	ldr	r3, [r3, #8]
 8014e60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	689b      	ldr	r3, [r3, #8]
 8014e68:	494d      	ldr	r1, [pc, #308]	; (8014fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8014e6a:	4313      	orrs	r3, r2
 8014e6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	681b      	ldr	r3, [r3, #0]
 8014e72:	f003 0301 	and.w	r3, r3, #1
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d044      	beq.n	8014f04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	685b      	ldr	r3, [r3, #4]
 8014e7e:	2b01      	cmp	r3, #1
 8014e80:	d107      	bne.n	8014e92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8014e82:	4b47      	ldr	r3, [pc, #284]	; (8014fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8014e84:	681b      	ldr	r3, [r3, #0]
 8014e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d119      	bne.n	8014ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8014e8e:	2301      	movs	r3, #1
 8014e90:	e07f      	b.n	8014f92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	685b      	ldr	r3, [r3, #4]
 8014e96:	2b02      	cmp	r3, #2
 8014e98:	d003      	beq.n	8014ea2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8014e9e:	2b03      	cmp	r3, #3
 8014ea0:	d107      	bne.n	8014eb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8014ea2:	4b3f      	ldr	r3, [pc, #252]	; (8014fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8014ea4:	681b      	ldr	r3, [r3, #0]
 8014ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	d109      	bne.n	8014ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8014eae:	2301      	movs	r3, #1
 8014eb0:	e06f      	b.n	8014f92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8014eb2:	4b3b      	ldr	r3, [pc, #236]	; (8014fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8014eb4:	681b      	ldr	r3, [r3, #0]
 8014eb6:	f003 0302 	and.w	r3, r3, #2
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d101      	bne.n	8014ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8014ebe:	2301      	movs	r3, #1
 8014ec0:	e067      	b.n	8014f92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8014ec2:	4b37      	ldr	r3, [pc, #220]	; (8014fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8014ec4:	689b      	ldr	r3, [r3, #8]
 8014ec6:	f023 0203 	bic.w	r2, r3, #3
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	685b      	ldr	r3, [r3, #4]
 8014ece:	4934      	ldr	r1, [pc, #208]	; (8014fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8014ed0:	4313      	orrs	r3, r2
 8014ed2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8014ed4:	f7fd f85a 	bl	8011f8c <HAL_GetTick>
 8014ed8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8014eda:	e00a      	b.n	8014ef2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014edc:	f7fd f856 	bl	8011f8c <HAL_GetTick>
 8014ee0:	4602      	mov	r2, r0
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	1ad3      	subs	r3, r2, r3
 8014ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8014eea:	4293      	cmp	r3, r2
 8014eec:	d901      	bls.n	8014ef2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8014eee:	2303      	movs	r3, #3
 8014ef0:	e04f      	b.n	8014f92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8014ef2:	4b2b      	ldr	r3, [pc, #172]	; (8014fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8014ef4:	689b      	ldr	r3, [r3, #8]
 8014ef6:	f003 020c 	and.w	r2, r3, #12
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	685b      	ldr	r3, [r3, #4]
 8014efe:	009b      	lsls	r3, r3, #2
 8014f00:	429a      	cmp	r2, r3
 8014f02:	d1eb      	bne.n	8014edc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8014f04:	4b25      	ldr	r3, [pc, #148]	; (8014f9c <HAL_RCC_ClockConfig+0x1b8>)
 8014f06:	681b      	ldr	r3, [r3, #0]
 8014f08:	f003 030f 	and.w	r3, r3, #15
 8014f0c:	683a      	ldr	r2, [r7, #0]
 8014f0e:	429a      	cmp	r2, r3
 8014f10:	d20c      	bcs.n	8014f2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014f12:	4b22      	ldr	r3, [pc, #136]	; (8014f9c <HAL_RCC_ClockConfig+0x1b8>)
 8014f14:	683a      	ldr	r2, [r7, #0]
 8014f16:	b2d2      	uxtb	r2, r2
 8014f18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8014f1a:	4b20      	ldr	r3, [pc, #128]	; (8014f9c <HAL_RCC_ClockConfig+0x1b8>)
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	f003 030f 	and.w	r3, r3, #15
 8014f22:	683a      	ldr	r2, [r7, #0]
 8014f24:	429a      	cmp	r2, r3
 8014f26:	d001      	beq.n	8014f2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8014f28:	2301      	movs	r3, #1
 8014f2a:	e032      	b.n	8014f92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	681b      	ldr	r3, [r3, #0]
 8014f30:	f003 0304 	and.w	r3, r3, #4
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d008      	beq.n	8014f4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8014f38:	4b19      	ldr	r3, [pc, #100]	; (8014fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8014f3a:	689b      	ldr	r3, [r3, #8]
 8014f3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	68db      	ldr	r3, [r3, #12]
 8014f44:	4916      	ldr	r1, [pc, #88]	; (8014fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8014f46:	4313      	orrs	r3, r2
 8014f48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	681b      	ldr	r3, [r3, #0]
 8014f4e:	f003 0308 	and.w	r3, r3, #8
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d009      	beq.n	8014f6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8014f56:	4b12      	ldr	r3, [pc, #72]	; (8014fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8014f58:	689b      	ldr	r3, [r3, #8]
 8014f5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	691b      	ldr	r3, [r3, #16]
 8014f62:	00db      	lsls	r3, r3, #3
 8014f64:	490e      	ldr	r1, [pc, #56]	; (8014fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8014f66:	4313      	orrs	r3, r2
 8014f68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8014f6a:	f000 f821 	bl	8014fb0 <HAL_RCC_GetSysClockFreq>
 8014f6e:	4601      	mov	r1, r0
 8014f70:	4b0b      	ldr	r3, [pc, #44]	; (8014fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8014f72:	689b      	ldr	r3, [r3, #8]
 8014f74:	091b      	lsrs	r3, r3, #4
 8014f76:	f003 030f 	and.w	r3, r3, #15
 8014f7a:	4a0a      	ldr	r2, [pc, #40]	; (8014fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8014f7c:	5cd3      	ldrb	r3, [r2, r3]
 8014f7e:	fa21 f303 	lsr.w	r3, r1, r3
 8014f82:	4a09      	ldr	r2, [pc, #36]	; (8014fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8014f84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8014f86:	4b09      	ldr	r3, [pc, #36]	; (8014fac <HAL_RCC_ClockConfig+0x1c8>)
 8014f88:	681b      	ldr	r3, [r3, #0]
 8014f8a:	4618      	mov	r0, r3
 8014f8c:	f7f7 fa14 	bl	800c3b8 <HAL_InitTick>

  return HAL_OK;
 8014f90:	2300      	movs	r3, #0
}
 8014f92:	4618      	mov	r0, r3
 8014f94:	3710      	adds	r7, #16
 8014f96:	46bd      	mov	sp, r7
 8014f98:	bd80      	pop	{r7, pc}
 8014f9a:	bf00      	nop
 8014f9c:	40023c00 	.word	0x40023c00
 8014fa0:	40023800 	.word	0x40023800
 8014fa4:	08031d64 	.word	0x08031d64
 8014fa8:	20000088 	.word	0x20000088
 8014fac:	2000008c 	.word	0x2000008c

08014fb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8014fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014fb2:	b085      	sub	sp, #20
 8014fb4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8014fb6:	2300      	movs	r3, #0
 8014fb8:	607b      	str	r3, [r7, #4]
 8014fba:	2300      	movs	r3, #0
 8014fbc:	60fb      	str	r3, [r7, #12]
 8014fbe:	2300      	movs	r3, #0
 8014fc0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8014fc2:	2300      	movs	r3, #0
 8014fc4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8014fc6:	4b63      	ldr	r3, [pc, #396]	; (8015154 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8014fc8:	689b      	ldr	r3, [r3, #8]
 8014fca:	f003 030c 	and.w	r3, r3, #12
 8014fce:	2b04      	cmp	r3, #4
 8014fd0:	d007      	beq.n	8014fe2 <HAL_RCC_GetSysClockFreq+0x32>
 8014fd2:	2b08      	cmp	r3, #8
 8014fd4:	d008      	beq.n	8014fe8 <HAL_RCC_GetSysClockFreq+0x38>
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	f040 80b4 	bne.w	8015144 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8014fdc:	4b5e      	ldr	r3, [pc, #376]	; (8015158 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8014fde:	60bb      	str	r3, [r7, #8]
       break;
 8014fe0:	e0b3      	b.n	801514a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8014fe2:	4b5e      	ldr	r3, [pc, #376]	; (801515c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8014fe4:	60bb      	str	r3, [r7, #8]
      break;
 8014fe6:	e0b0      	b.n	801514a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8014fe8:	4b5a      	ldr	r3, [pc, #360]	; (8015154 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8014fea:	685b      	ldr	r3, [r3, #4]
 8014fec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014ff0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8014ff2:	4b58      	ldr	r3, [pc, #352]	; (8015154 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8014ff4:	685b      	ldr	r3, [r3, #4]
 8014ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d04a      	beq.n	8015094 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8014ffe:	4b55      	ldr	r3, [pc, #340]	; (8015154 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8015000:	685b      	ldr	r3, [r3, #4]
 8015002:	099b      	lsrs	r3, r3, #6
 8015004:	f04f 0400 	mov.w	r4, #0
 8015008:	f240 11ff 	movw	r1, #511	; 0x1ff
 801500c:	f04f 0200 	mov.w	r2, #0
 8015010:	ea03 0501 	and.w	r5, r3, r1
 8015014:	ea04 0602 	and.w	r6, r4, r2
 8015018:	4629      	mov	r1, r5
 801501a:	4632      	mov	r2, r6
 801501c:	f04f 0300 	mov.w	r3, #0
 8015020:	f04f 0400 	mov.w	r4, #0
 8015024:	0154      	lsls	r4, r2, #5
 8015026:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 801502a:	014b      	lsls	r3, r1, #5
 801502c:	4619      	mov	r1, r3
 801502e:	4622      	mov	r2, r4
 8015030:	1b49      	subs	r1, r1, r5
 8015032:	eb62 0206 	sbc.w	r2, r2, r6
 8015036:	f04f 0300 	mov.w	r3, #0
 801503a:	f04f 0400 	mov.w	r4, #0
 801503e:	0194      	lsls	r4, r2, #6
 8015040:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8015044:	018b      	lsls	r3, r1, #6
 8015046:	1a5b      	subs	r3, r3, r1
 8015048:	eb64 0402 	sbc.w	r4, r4, r2
 801504c:	f04f 0100 	mov.w	r1, #0
 8015050:	f04f 0200 	mov.w	r2, #0
 8015054:	00e2      	lsls	r2, r4, #3
 8015056:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 801505a:	00d9      	lsls	r1, r3, #3
 801505c:	460b      	mov	r3, r1
 801505e:	4614      	mov	r4, r2
 8015060:	195b      	adds	r3, r3, r5
 8015062:	eb44 0406 	adc.w	r4, r4, r6
 8015066:	f04f 0100 	mov.w	r1, #0
 801506a:	f04f 0200 	mov.w	r2, #0
 801506e:	0262      	lsls	r2, r4, #9
 8015070:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8015074:	0259      	lsls	r1, r3, #9
 8015076:	460b      	mov	r3, r1
 8015078:	4614      	mov	r4, r2
 801507a:	4618      	mov	r0, r3
 801507c:	4621      	mov	r1, r4
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	f04f 0400 	mov.w	r4, #0
 8015084:	461a      	mov	r2, r3
 8015086:	4623      	mov	r3, r4
 8015088:	f7f2 fa78 	bl	800757c <__aeabi_uldivmod>
 801508c:	4603      	mov	r3, r0
 801508e:	460c      	mov	r4, r1
 8015090:	60fb      	str	r3, [r7, #12]
 8015092:	e049      	b.n	8015128 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8015094:	4b2f      	ldr	r3, [pc, #188]	; (8015154 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8015096:	685b      	ldr	r3, [r3, #4]
 8015098:	099b      	lsrs	r3, r3, #6
 801509a:	f04f 0400 	mov.w	r4, #0
 801509e:	f240 11ff 	movw	r1, #511	; 0x1ff
 80150a2:	f04f 0200 	mov.w	r2, #0
 80150a6:	ea03 0501 	and.w	r5, r3, r1
 80150aa:	ea04 0602 	and.w	r6, r4, r2
 80150ae:	4629      	mov	r1, r5
 80150b0:	4632      	mov	r2, r6
 80150b2:	f04f 0300 	mov.w	r3, #0
 80150b6:	f04f 0400 	mov.w	r4, #0
 80150ba:	0154      	lsls	r4, r2, #5
 80150bc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80150c0:	014b      	lsls	r3, r1, #5
 80150c2:	4619      	mov	r1, r3
 80150c4:	4622      	mov	r2, r4
 80150c6:	1b49      	subs	r1, r1, r5
 80150c8:	eb62 0206 	sbc.w	r2, r2, r6
 80150cc:	f04f 0300 	mov.w	r3, #0
 80150d0:	f04f 0400 	mov.w	r4, #0
 80150d4:	0194      	lsls	r4, r2, #6
 80150d6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80150da:	018b      	lsls	r3, r1, #6
 80150dc:	1a5b      	subs	r3, r3, r1
 80150de:	eb64 0402 	sbc.w	r4, r4, r2
 80150e2:	f04f 0100 	mov.w	r1, #0
 80150e6:	f04f 0200 	mov.w	r2, #0
 80150ea:	00e2      	lsls	r2, r4, #3
 80150ec:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80150f0:	00d9      	lsls	r1, r3, #3
 80150f2:	460b      	mov	r3, r1
 80150f4:	4614      	mov	r4, r2
 80150f6:	195b      	adds	r3, r3, r5
 80150f8:	eb44 0406 	adc.w	r4, r4, r6
 80150fc:	f04f 0100 	mov.w	r1, #0
 8015100:	f04f 0200 	mov.w	r2, #0
 8015104:	02a2      	lsls	r2, r4, #10
 8015106:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 801510a:	0299      	lsls	r1, r3, #10
 801510c:	460b      	mov	r3, r1
 801510e:	4614      	mov	r4, r2
 8015110:	4618      	mov	r0, r3
 8015112:	4621      	mov	r1, r4
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	f04f 0400 	mov.w	r4, #0
 801511a:	461a      	mov	r2, r3
 801511c:	4623      	mov	r3, r4
 801511e:	f7f2 fa2d 	bl	800757c <__aeabi_uldivmod>
 8015122:	4603      	mov	r3, r0
 8015124:	460c      	mov	r4, r1
 8015126:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8015128:	4b0a      	ldr	r3, [pc, #40]	; (8015154 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801512a:	685b      	ldr	r3, [r3, #4]
 801512c:	0c1b      	lsrs	r3, r3, #16
 801512e:	f003 0303 	and.w	r3, r3, #3
 8015132:	3301      	adds	r3, #1
 8015134:	005b      	lsls	r3, r3, #1
 8015136:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8015138:	68fa      	ldr	r2, [r7, #12]
 801513a:	683b      	ldr	r3, [r7, #0]
 801513c:	fbb2 f3f3 	udiv	r3, r2, r3
 8015140:	60bb      	str	r3, [r7, #8]
      break;
 8015142:	e002      	b.n	801514a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8015144:	4b04      	ldr	r3, [pc, #16]	; (8015158 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8015146:	60bb      	str	r3, [r7, #8]
      break;
 8015148:	bf00      	nop
    }
  }
  return sysclockfreq;
 801514a:	68bb      	ldr	r3, [r7, #8]
}
 801514c:	4618      	mov	r0, r3
 801514e:	3714      	adds	r7, #20
 8015150:	46bd      	mov	sp, r7
 8015152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015154:	40023800 	.word	0x40023800
 8015158:	00f42400 	.word	0x00f42400
 801515c:	007a1200 	.word	0x007a1200

08015160 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8015160:	b480      	push	{r7}
 8015162:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8015164:	4b03      	ldr	r3, [pc, #12]	; (8015174 <HAL_RCC_GetHCLKFreq+0x14>)
 8015166:	681b      	ldr	r3, [r3, #0]
}
 8015168:	4618      	mov	r0, r3
 801516a:	46bd      	mov	sp, r7
 801516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015170:	4770      	bx	lr
 8015172:	bf00      	nop
 8015174:	20000088 	.word	0x20000088

08015178 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8015178:	b580      	push	{r7, lr}
 801517a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 801517c:	f7ff fff0 	bl	8015160 <HAL_RCC_GetHCLKFreq>
 8015180:	4601      	mov	r1, r0
 8015182:	4b05      	ldr	r3, [pc, #20]	; (8015198 <HAL_RCC_GetPCLK1Freq+0x20>)
 8015184:	689b      	ldr	r3, [r3, #8]
 8015186:	0a9b      	lsrs	r3, r3, #10
 8015188:	f003 0307 	and.w	r3, r3, #7
 801518c:	4a03      	ldr	r2, [pc, #12]	; (801519c <HAL_RCC_GetPCLK1Freq+0x24>)
 801518e:	5cd3      	ldrb	r3, [r2, r3]
 8015190:	fa21 f303 	lsr.w	r3, r1, r3
}
 8015194:	4618      	mov	r0, r3
 8015196:	bd80      	pop	{r7, pc}
 8015198:	40023800 	.word	0x40023800
 801519c:	08031d74 	.word	0x08031d74

080151a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80151a0:	b480      	push	{r7}
 80151a2:	b083      	sub	sp, #12
 80151a4:	af00      	add	r7, sp, #0
 80151a6:	6078      	str	r0, [r7, #4]
 80151a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	220f      	movs	r2, #15
 80151ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80151b0:	4b12      	ldr	r3, [pc, #72]	; (80151fc <HAL_RCC_GetClockConfig+0x5c>)
 80151b2:	689b      	ldr	r3, [r3, #8]
 80151b4:	f003 0203 	and.w	r2, r3, #3
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80151bc:	4b0f      	ldr	r3, [pc, #60]	; (80151fc <HAL_RCC_GetClockConfig+0x5c>)
 80151be:	689b      	ldr	r3, [r3, #8]
 80151c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80151c8:	4b0c      	ldr	r3, [pc, #48]	; (80151fc <HAL_RCC_GetClockConfig+0x5c>)
 80151ca:	689b      	ldr	r3, [r3, #8]
 80151cc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80151d4:	4b09      	ldr	r3, [pc, #36]	; (80151fc <HAL_RCC_GetClockConfig+0x5c>)
 80151d6:	689b      	ldr	r3, [r3, #8]
 80151d8:	08db      	lsrs	r3, r3, #3
 80151da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80151e2:	4b07      	ldr	r3, [pc, #28]	; (8015200 <HAL_RCC_GetClockConfig+0x60>)
 80151e4:	681b      	ldr	r3, [r3, #0]
 80151e6:	f003 020f 	and.w	r2, r3, #15
 80151ea:	683b      	ldr	r3, [r7, #0]
 80151ec:	601a      	str	r2, [r3, #0]
}
 80151ee:	bf00      	nop
 80151f0:	370c      	adds	r7, #12
 80151f2:	46bd      	mov	sp, r7
 80151f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151f8:	4770      	bx	lr
 80151fa:	bf00      	nop
 80151fc:	40023800 	.word	0x40023800
 8015200:	40023c00 	.word	0x40023c00

08015204 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8015204:	b580      	push	{r7, lr}
 8015206:	b086      	sub	sp, #24
 8015208:	af00      	add	r7, sp, #0
 801520a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801520c:	2300      	movs	r3, #0
 801520e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8015210:	2300      	movs	r3, #0
 8015212:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	681b      	ldr	r3, [r3, #0]
 8015218:	f003 0301 	and.w	r3, r3, #1
 801521c:	2b00      	cmp	r3, #0
 801521e:	d10b      	bne.n	8015238 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	681b      	ldr	r3, [r3, #0]
 8015224:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8015228:	2b00      	cmp	r3, #0
 801522a:	d105      	bne.n	8015238 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	681b      	ldr	r3, [r3, #0]
 8015230:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8015234:	2b00      	cmp	r3, #0
 8015236:	d075      	beq.n	8015324 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8015238:	4bad      	ldr	r3, [pc, #692]	; (80154f0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 801523a:	2200      	movs	r2, #0
 801523c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801523e:	f7fc fea5 	bl	8011f8c <HAL_GetTick>
 8015242:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8015244:	e008      	b.n	8015258 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8015246:	f7fc fea1 	bl	8011f8c <HAL_GetTick>
 801524a:	4602      	mov	r2, r0
 801524c:	697b      	ldr	r3, [r7, #20]
 801524e:	1ad3      	subs	r3, r2, r3
 8015250:	2b02      	cmp	r3, #2
 8015252:	d901      	bls.n	8015258 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8015254:	2303      	movs	r3, #3
 8015256:	e18b      	b.n	8015570 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8015258:	4ba6      	ldr	r3, [pc, #664]	; (80154f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 801525a:	681b      	ldr	r3, [r3, #0]
 801525c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8015260:	2b00      	cmp	r3, #0
 8015262:	d1f0      	bne.n	8015246 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	681b      	ldr	r3, [r3, #0]
 8015268:	f003 0301 	and.w	r3, r3, #1
 801526c:	2b00      	cmp	r3, #0
 801526e:	d009      	beq.n	8015284 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	685b      	ldr	r3, [r3, #4]
 8015274:	019a      	lsls	r2, r3, #6
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	689b      	ldr	r3, [r3, #8]
 801527a:	071b      	lsls	r3, r3, #28
 801527c:	499d      	ldr	r1, [pc, #628]	; (80154f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 801527e:	4313      	orrs	r3, r2
 8015280:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	681b      	ldr	r3, [r3, #0]
 8015288:	f003 0302 	and.w	r3, r3, #2
 801528c:	2b00      	cmp	r3, #0
 801528e:	d01f      	beq.n	80152d0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8015290:	4b98      	ldr	r3, [pc, #608]	; (80154f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8015292:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015296:	0f1b      	lsrs	r3, r3, #28
 8015298:	f003 0307 	and.w	r3, r3, #7
 801529c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	685b      	ldr	r3, [r3, #4]
 80152a2:	019a      	lsls	r2, r3, #6
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	68db      	ldr	r3, [r3, #12]
 80152a8:	061b      	lsls	r3, r3, #24
 80152aa:	431a      	orrs	r2, r3
 80152ac:	693b      	ldr	r3, [r7, #16]
 80152ae:	071b      	lsls	r3, r3, #28
 80152b0:	4990      	ldr	r1, [pc, #576]	; (80154f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80152b2:	4313      	orrs	r3, r2
 80152b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80152b8:	4b8e      	ldr	r3, [pc, #568]	; (80154f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80152ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80152be:	f023 021f 	bic.w	r2, r3, #31
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	69db      	ldr	r3, [r3, #28]
 80152c6:	3b01      	subs	r3, #1
 80152c8:	498a      	ldr	r1, [pc, #552]	; (80154f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80152ca:	4313      	orrs	r3, r2
 80152cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	681b      	ldr	r3, [r3, #0]
 80152d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80152d8:	2b00      	cmp	r3, #0
 80152da:	d00d      	beq.n	80152f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	685b      	ldr	r3, [r3, #4]
 80152e0:	019a      	lsls	r2, r3, #6
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	68db      	ldr	r3, [r3, #12]
 80152e6:	061b      	lsls	r3, r3, #24
 80152e8:	431a      	orrs	r2, r3
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	689b      	ldr	r3, [r3, #8]
 80152ee:	071b      	lsls	r3, r3, #28
 80152f0:	4980      	ldr	r1, [pc, #512]	; (80154f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80152f2:	4313      	orrs	r3, r2
 80152f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80152f8:	4b7d      	ldr	r3, [pc, #500]	; (80154f0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80152fa:	2201      	movs	r2, #1
 80152fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80152fe:	f7fc fe45 	bl	8011f8c <HAL_GetTick>
 8015302:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8015304:	e008      	b.n	8015318 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8015306:	f7fc fe41 	bl	8011f8c <HAL_GetTick>
 801530a:	4602      	mov	r2, r0
 801530c:	697b      	ldr	r3, [r7, #20]
 801530e:	1ad3      	subs	r3, r2, r3
 8015310:	2b02      	cmp	r3, #2
 8015312:	d901      	bls.n	8015318 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8015314:	2303      	movs	r3, #3
 8015316:	e12b      	b.n	8015570 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8015318:	4b76      	ldr	r3, [pc, #472]	; (80154f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 801531a:	681b      	ldr	r3, [r3, #0]
 801531c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8015320:	2b00      	cmp	r3, #0
 8015322:	d0f0      	beq.n	8015306 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	681b      	ldr	r3, [r3, #0]
 8015328:	f003 0304 	and.w	r3, r3, #4
 801532c:	2b00      	cmp	r3, #0
 801532e:	d105      	bne.n	801533c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	681b      	ldr	r3, [r3, #0]
 8015334:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8015338:	2b00      	cmp	r3, #0
 801533a:	d079      	beq.n	8015430 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 801533c:	4b6e      	ldr	r3, [pc, #440]	; (80154f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801533e:	2200      	movs	r2, #0
 8015340:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8015342:	f7fc fe23 	bl	8011f8c <HAL_GetTick>
 8015346:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8015348:	e008      	b.n	801535c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 801534a:	f7fc fe1f 	bl	8011f8c <HAL_GetTick>
 801534e:	4602      	mov	r2, r0
 8015350:	697b      	ldr	r3, [r7, #20]
 8015352:	1ad3      	subs	r3, r2, r3
 8015354:	2b02      	cmp	r3, #2
 8015356:	d901      	bls.n	801535c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8015358:	2303      	movs	r3, #3
 801535a:	e109      	b.n	8015570 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801535c:	4b65      	ldr	r3, [pc, #404]	; (80154f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 801535e:	681b      	ldr	r3, [r3, #0]
 8015360:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8015364:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015368:	d0ef      	beq.n	801534a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	681b      	ldr	r3, [r3, #0]
 801536e:	f003 0304 	and.w	r3, r3, #4
 8015372:	2b00      	cmp	r3, #0
 8015374:	d020      	beq.n	80153b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8015376:	4b5f      	ldr	r3, [pc, #380]	; (80154f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8015378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801537c:	0f1b      	lsrs	r3, r3, #28
 801537e:	f003 0307 	and.w	r3, r3, #7
 8015382:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	691b      	ldr	r3, [r3, #16]
 8015388:	019a      	lsls	r2, r3, #6
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	695b      	ldr	r3, [r3, #20]
 801538e:	061b      	lsls	r3, r3, #24
 8015390:	431a      	orrs	r2, r3
 8015392:	693b      	ldr	r3, [r7, #16]
 8015394:	071b      	lsls	r3, r3, #28
 8015396:	4957      	ldr	r1, [pc, #348]	; (80154f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8015398:	4313      	orrs	r3, r2
 801539a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 801539e:	4b55      	ldr	r3, [pc, #340]	; (80154f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80153a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80153a4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	6a1b      	ldr	r3, [r3, #32]
 80153ac:	3b01      	subs	r3, #1
 80153ae:	021b      	lsls	r3, r3, #8
 80153b0:	4950      	ldr	r1, [pc, #320]	; (80154f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80153b2:	4313      	orrs	r3, r2
 80153b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	f003 0308 	and.w	r3, r3, #8
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d01e      	beq.n	8015402 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80153c4:	4b4b      	ldr	r3, [pc, #300]	; (80154f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80153c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80153ca:	0e1b      	lsrs	r3, r3, #24
 80153cc:	f003 030f 	and.w	r3, r3, #15
 80153d0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	691b      	ldr	r3, [r3, #16]
 80153d6:	019a      	lsls	r2, r3, #6
 80153d8:	693b      	ldr	r3, [r7, #16]
 80153da:	061b      	lsls	r3, r3, #24
 80153dc:	431a      	orrs	r2, r3
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	699b      	ldr	r3, [r3, #24]
 80153e2:	071b      	lsls	r3, r3, #28
 80153e4:	4943      	ldr	r1, [pc, #268]	; (80154f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80153e6:	4313      	orrs	r3, r2
 80153e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80153ec:	4b41      	ldr	r3, [pc, #260]	; (80154f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80153ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80153f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153fa:	493e      	ldr	r1, [pc, #248]	; (80154f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80153fc:	4313      	orrs	r3, r2
 80153fe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8015402:	4b3d      	ldr	r3, [pc, #244]	; (80154f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8015404:	2201      	movs	r2, #1
 8015406:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8015408:	f7fc fdc0 	bl	8011f8c <HAL_GetTick>
 801540c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801540e:	e008      	b.n	8015422 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8015410:	f7fc fdbc 	bl	8011f8c <HAL_GetTick>
 8015414:	4602      	mov	r2, r0
 8015416:	697b      	ldr	r3, [r7, #20]
 8015418:	1ad3      	subs	r3, r2, r3
 801541a:	2b02      	cmp	r3, #2
 801541c:	d901      	bls.n	8015422 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801541e:	2303      	movs	r3, #3
 8015420:	e0a6      	b.n	8015570 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8015422:	4b34      	ldr	r3, [pc, #208]	; (80154f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8015424:	681b      	ldr	r3, [r3, #0]
 8015426:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801542a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801542e:	d1ef      	bne.n	8015410 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	f003 0320 	and.w	r3, r3, #32
 8015438:	2b00      	cmp	r3, #0
 801543a:	f000 808d 	beq.w	8015558 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 801543e:	2300      	movs	r3, #0
 8015440:	60fb      	str	r3, [r7, #12]
 8015442:	4b2c      	ldr	r3, [pc, #176]	; (80154f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8015444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015446:	4a2b      	ldr	r2, [pc, #172]	; (80154f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8015448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801544c:	6413      	str	r3, [r2, #64]	; 0x40
 801544e:	4b29      	ldr	r3, [pc, #164]	; (80154f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8015450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015456:	60fb      	str	r3, [r7, #12]
 8015458:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 801545a:	4b28      	ldr	r3, [pc, #160]	; (80154fc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 801545c:	681b      	ldr	r3, [r3, #0]
 801545e:	4a27      	ldr	r2, [pc, #156]	; (80154fc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8015460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015464:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8015466:	f7fc fd91 	bl	8011f8c <HAL_GetTick>
 801546a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 801546c:	e008      	b.n	8015480 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 801546e:	f7fc fd8d 	bl	8011f8c <HAL_GetTick>
 8015472:	4602      	mov	r2, r0
 8015474:	697b      	ldr	r3, [r7, #20]
 8015476:	1ad3      	subs	r3, r2, r3
 8015478:	2b02      	cmp	r3, #2
 801547a:	d901      	bls.n	8015480 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 801547c:	2303      	movs	r3, #3
 801547e:	e077      	b.n	8015570 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8015480:	4b1e      	ldr	r3, [pc, #120]	; (80154fc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8015482:	681b      	ldr	r3, [r3, #0]
 8015484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015488:	2b00      	cmp	r3, #0
 801548a:	d0f0      	beq.n	801546e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 801548c:	4b19      	ldr	r3, [pc, #100]	; (80154f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 801548e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015490:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015494:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8015496:	693b      	ldr	r3, [r7, #16]
 8015498:	2b00      	cmp	r3, #0
 801549a:	d039      	beq.n	8015510 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80154a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80154a4:	693a      	ldr	r2, [r7, #16]
 80154a6:	429a      	cmp	r2, r3
 80154a8:	d032      	beq.n	8015510 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80154aa:	4b12      	ldr	r3, [pc, #72]	; (80154f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80154ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80154ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80154b2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80154b4:	4b12      	ldr	r3, [pc, #72]	; (8015500 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80154b6:	2201      	movs	r2, #1
 80154b8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80154ba:	4b11      	ldr	r3, [pc, #68]	; (8015500 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80154bc:	2200      	movs	r2, #0
 80154be:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80154c0:	4a0c      	ldr	r2, [pc, #48]	; (80154f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80154c2:	693b      	ldr	r3, [r7, #16]
 80154c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80154c6:	4b0b      	ldr	r3, [pc, #44]	; (80154f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80154c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80154ca:	f003 0301 	and.w	r3, r3, #1
 80154ce:	2b01      	cmp	r3, #1
 80154d0:	d11e      	bne.n	8015510 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80154d2:	f7fc fd5b 	bl	8011f8c <HAL_GetTick>
 80154d6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80154d8:	e014      	b.n	8015504 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80154da:	f7fc fd57 	bl	8011f8c <HAL_GetTick>
 80154de:	4602      	mov	r2, r0
 80154e0:	697b      	ldr	r3, [r7, #20]
 80154e2:	1ad3      	subs	r3, r2, r3
 80154e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80154e8:	4293      	cmp	r3, r2
 80154ea:	d90b      	bls.n	8015504 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 80154ec:	2303      	movs	r3, #3
 80154ee:	e03f      	b.n	8015570 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 80154f0:	42470068 	.word	0x42470068
 80154f4:	40023800 	.word	0x40023800
 80154f8:	42470070 	.word	0x42470070
 80154fc:	40007000 	.word	0x40007000
 8015500:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8015504:	4b1c      	ldr	r3, [pc, #112]	; (8015578 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8015506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015508:	f003 0302 	and.w	r3, r3, #2
 801550c:	2b00      	cmp	r3, #0
 801550e:	d0e4      	beq.n	80154da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015514:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015518:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801551c:	d10d      	bne.n	801553a <HAL_RCCEx_PeriphCLKConfig+0x336>
 801551e:	4b16      	ldr	r3, [pc, #88]	; (8015578 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8015520:	689b      	ldr	r3, [r3, #8]
 8015522:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801552a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801552e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015532:	4911      	ldr	r1, [pc, #68]	; (8015578 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8015534:	4313      	orrs	r3, r2
 8015536:	608b      	str	r3, [r1, #8]
 8015538:	e005      	b.n	8015546 <HAL_RCCEx_PeriphCLKConfig+0x342>
 801553a:	4b0f      	ldr	r3, [pc, #60]	; (8015578 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 801553c:	689b      	ldr	r3, [r3, #8]
 801553e:	4a0e      	ldr	r2, [pc, #56]	; (8015578 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8015540:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8015544:	6093      	str	r3, [r2, #8]
 8015546:	4b0c      	ldr	r3, [pc, #48]	; (8015578 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8015548:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801554e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015552:	4909      	ldr	r1, [pc, #36]	; (8015578 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8015554:	4313      	orrs	r3, r2
 8015556:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	681b      	ldr	r3, [r3, #0]
 801555c:	f003 0310 	and.w	r3, r3, #16
 8015560:	2b00      	cmp	r3, #0
 8015562:	d004      	beq.n	801556e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801556a:	4b04      	ldr	r3, [pc, #16]	; (801557c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 801556c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 801556e:	2300      	movs	r3, #0
}
 8015570:	4618      	mov	r0, r3
 8015572:	3718      	adds	r7, #24
 8015574:	46bd      	mov	sp, r7
 8015576:	bd80      	pop	{r7, pc}
 8015578:	40023800 	.word	0x40023800
 801557c:	424711e0 	.word	0x424711e0

08015580 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8015580:	b580      	push	{r7, lr}
 8015582:	b082      	sub	sp, #8
 8015584:	af00      	add	r7, sp, #0
 8015586:	6078      	str	r0, [r7, #4]
 8015588:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	2b00      	cmp	r3, #0
 801558e:	d101      	bne.n	8015594 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8015590:	2301      	movs	r3, #1
 8015592:	e025      	b.n	80155e0 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801559a:	b2db      	uxtb	r3, r3
 801559c:	2b00      	cmp	r3, #0
 801559e:	d106      	bne.n	80155ae <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	2200      	movs	r2, #0
 80155a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80155a8:	6878      	ldr	r0, [r7, #4]
 80155aa:	f7f6 fd15 	bl	800bfd8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	2202      	movs	r2, #2
 80155b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	681a      	ldr	r2, [r3, #0]
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	3304      	adds	r3, #4
 80155be:	4619      	mov	r1, r3
 80155c0:	4610      	mov	r0, r2
 80155c2:	f001 fe2b 	bl	801721c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	6818      	ldr	r0, [r3, #0]
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	685b      	ldr	r3, [r3, #4]
 80155ce:	461a      	mov	r2, r3
 80155d0:	6839      	ldr	r1, [r7, #0]
 80155d2:	f001 fe96 	bl	8017302 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	2201      	movs	r2, #1
 80155da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80155de:	2300      	movs	r3, #0
}
 80155e0:	4618      	mov	r0, r3
 80155e2:	3708      	adds	r7, #8
 80155e4:	46bd      	mov	sp, r7
 80155e6:	bd80      	pop	{r7, pc}

080155e8 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80155e8:	b580      	push	{r7, lr}
 80155ea:	b084      	sub	sp, #16
 80155ec:	af00      	add	r7, sp, #0
 80155ee:	60f8      	str	r0, [r7, #12]
 80155f0:	60b9      	str	r1, [r7, #8]
 80155f2:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80155f4:	68fb      	ldr	r3, [r7, #12]
 80155f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80155fa:	b2db      	uxtb	r3, r3
 80155fc:	2b02      	cmp	r3, #2
 80155fe:	d101      	bne.n	8015604 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8015600:	2302      	movs	r3, #2
 8015602:	e018      	b.n	8015636 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8015604:	68fb      	ldr	r3, [r7, #12]
 8015606:	2202      	movs	r2, #2
 8015608:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 801560c:	68fb      	ldr	r3, [r7, #12]
 801560e:	681b      	ldr	r3, [r3, #0]
 8015610:	687a      	ldr	r2, [r7, #4]
 8015612:	68b9      	ldr	r1, [r7, #8]
 8015614:	4618      	mov	r0, r3
 8015616:	f001 fef3 	bl	8017400 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 801561a:	68bb      	ldr	r3, [r7, #8]
 801561c:	681b      	ldr	r3, [r3, #0]
 801561e:	2b02      	cmp	r3, #2
 8015620:	d104      	bne.n	801562c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8015622:	68fb      	ldr	r3, [r7, #12]
 8015624:	2205      	movs	r2, #5
 8015626:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 801562a:	e003      	b.n	8015634 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 801562c:	68fb      	ldr	r3, [r7, #12]
 801562e:	2201      	movs	r2, #1
 8015630:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8015634:	2300      	movs	r3, #0
}
 8015636:	4618      	mov	r0, r3
 8015638:	3710      	adds	r7, #16
 801563a:	46bd      	mov	sp, r7
 801563c:	bd80      	pop	{r7, pc}

0801563e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 801563e:	b580      	push	{r7, lr}
 8015640:	b082      	sub	sp, #8
 8015642:	af00      	add	r7, sp, #0
 8015644:	6078      	str	r0, [r7, #4]
 8015646:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801564e:	b2db      	uxtb	r3, r3
 8015650:	2b02      	cmp	r3, #2
 8015652:	d101      	bne.n	8015658 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8015654:	2302      	movs	r3, #2
 8015656:	e00e      	b.n	8015676 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	2202      	movs	r2, #2
 801565c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	681b      	ldr	r3, [r3, #0]
 8015664:	6839      	ldr	r1, [r7, #0]
 8015666:	4618      	mov	r0, r3
 8015668:	f001 ff06 	bl	8017478 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	2201      	movs	r2, #1
 8015670:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8015674:	2300      	movs	r3, #0
}
 8015676:	4618      	mov	r0, r3
 8015678:	3708      	adds	r7, #8
 801567a:	46bd      	mov	sp, r7
 801567c:	bd80      	pop	{r7, pc}

0801567e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801567e:	b580      	push	{r7, lr}
 8015680:	b082      	sub	sp, #8
 8015682:	af00      	add	r7, sp, #0
 8015684:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	2b00      	cmp	r3, #0
 801568a:	d101      	bne.n	8015690 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801568c:	2301      	movs	r3, #1
 801568e:	e056      	b.n	801573e <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	2200      	movs	r2, #0
 8015694:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801569c:	b2db      	uxtb	r3, r3
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d106      	bne.n	80156b0 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	2200      	movs	r2, #0
 80156a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80156aa:	6878      	ldr	r0, [r7, #4]
 80156ac:	f7f6 fbba 	bl	800be24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	2202      	movs	r2, #2
 80156b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	681b      	ldr	r3, [r3, #0]
 80156bc:	681a      	ldr	r2, [r3, #0]
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	681b      	ldr	r3, [r3, #0]
 80156c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80156c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	685a      	ldr	r2, [r3, #4]
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	689b      	ldr	r3, [r3, #8]
 80156d0:	431a      	orrs	r2, r3
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	68db      	ldr	r3, [r3, #12]
 80156d6:	431a      	orrs	r2, r3
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	691b      	ldr	r3, [r3, #16]
 80156dc:	431a      	orrs	r2, r3
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	695b      	ldr	r3, [r3, #20]
 80156e2:	431a      	orrs	r2, r3
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	699b      	ldr	r3, [r3, #24]
 80156e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80156ec:	431a      	orrs	r2, r3
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	69db      	ldr	r3, [r3, #28]
 80156f2:	431a      	orrs	r2, r3
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	6a1b      	ldr	r3, [r3, #32]
 80156f8:	ea42 0103 	orr.w	r1, r2, r3
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	681b      	ldr	r3, [r3, #0]
 8015704:	430a      	orrs	r2, r1
 8015706:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	699b      	ldr	r3, [r3, #24]
 801570c:	0c1b      	lsrs	r3, r3, #16
 801570e:	f003 0104 	and.w	r1, r3, #4
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	430a      	orrs	r2, r1
 801571c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	681b      	ldr	r3, [r3, #0]
 8015722:	69da      	ldr	r2, [r3, #28]
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	681b      	ldr	r3, [r3, #0]
 8015728:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801572c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	2200      	movs	r2, #0
 8015732:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	2201      	movs	r2, #1
 8015738:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 801573c:	2300      	movs	r3, #0
}
 801573e:	4618      	mov	r0, r3
 8015740:	3708      	adds	r7, #8
 8015742:	46bd      	mov	sp, r7
 8015744:	bd80      	pop	{r7, pc}

08015746 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015746:	b580      	push	{r7, lr}
 8015748:	b088      	sub	sp, #32
 801574a:	af00      	add	r7, sp, #0
 801574c:	60f8      	str	r0, [r7, #12]
 801574e:	60b9      	str	r1, [r7, #8]
 8015750:	603b      	str	r3, [r7, #0]
 8015752:	4613      	mov	r3, r2
 8015754:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8015756:	2300      	movs	r3, #0
 8015758:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8015760:	2b01      	cmp	r3, #1
 8015762:	d101      	bne.n	8015768 <HAL_SPI_Transmit+0x22>
 8015764:	2302      	movs	r3, #2
 8015766:	e11e      	b.n	80159a6 <HAL_SPI_Transmit+0x260>
 8015768:	68fb      	ldr	r3, [r7, #12]
 801576a:	2201      	movs	r2, #1
 801576c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8015770:	f7fc fc0c 	bl	8011f8c <HAL_GetTick>
 8015774:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8015776:	88fb      	ldrh	r3, [r7, #6]
 8015778:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801577a:	68fb      	ldr	r3, [r7, #12]
 801577c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8015780:	b2db      	uxtb	r3, r3
 8015782:	2b01      	cmp	r3, #1
 8015784:	d002      	beq.n	801578c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8015786:	2302      	movs	r3, #2
 8015788:	77fb      	strb	r3, [r7, #31]
    goto error;
 801578a:	e103      	b.n	8015994 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 801578c:	68bb      	ldr	r3, [r7, #8]
 801578e:	2b00      	cmp	r3, #0
 8015790:	d002      	beq.n	8015798 <HAL_SPI_Transmit+0x52>
 8015792:	88fb      	ldrh	r3, [r7, #6]
 8015794:	2b00      	cmp	r3, #0
 8015796:	d102      	bne.n	801579e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8015798:	2301      	movs	r3, #1
 801579a:	77fb      	strb	r3, [r7, #31]
    goto error;
 801579c:	e0fa      	b.n	8015994 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	2203      	movs	r2, #3
 80157a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80157a6:	68fb      	ldr	r3, [r7, #12]
 80157a8:	2200      	movs	r2, #0
 80157aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	68ba      	ldr	r2, [r7, #8]
 80157b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	88fa      	ldrh	r2, [r7, #6]
 80157b6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	88fa      	ldrh	r2, [r7, #6]
 80157bc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80157be:	68fb      	ldr	r3, [r7, #12]
 80157c0:	2200      	movs	r2, #0
 80157c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	2200      	movs	r2, #0
 80157c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80157ca:	68fb      	ldr	r3, [r7, #12]
 80157cc:	2200      	movs	r2, #0
 80157ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80157d0:	68fb      	ldr	r3, [r7, #12]
 80157d2:	2200      	movs	r2, #0
 80157d4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80157d6:	68fb      	ldr	r3, [r7, #12]
 80157d8:	2200      	movs	r2, #0
 80157da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80157dc:	68fb      	ldr	r3, [r7, #12]
 80157de:	689b      	ldr	r3, [r3, #8]
 80157e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80157e4:	d107      	bne.n	80157f6 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80157e6:	68fb      	ldr	r3, [r7, #12]
 80157e8:	681b      	ldr	r3, [r3, #0]
 80157ea:	681a      	ldr	r2, [r3, #0]
 80157ec:	68fb      	ldr	r3, [r7, #12]
 80157ee:	681b      	ldr	r3, [r3, #0]
 80157f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80157f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	681b      	ldr	r3, [r3, #0]
 80157fa:	681b      	ldr	r3, [r3, #0]
 80157fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015800:	2b40      	cmp	r3, #64	; 0x40
 8015802:	d007      	beq.n	8015814 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8015804:	68fb      	ldr	r3, [r7, #12]
 8015806:	681b      	ldr	r3, [r3, #0]
 8015808:	681a      	ldr	r2, [r3, #0]
 801580a:	68fb      	ldr	r3, [r7, #12]
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015812:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	68db      	ldr	r3, [r3, #12]
 8015818:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801581c:	d14b      	bne.n	80158b6 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	685b      	ldr	r3, [r3, #4]
 8015822:	2b00      	cmp	r3, #0
 8015824:	d002      	beq.n	801582c <HAL_SPI_Transmit+0xe6>
 8015826:	8afb      	ldrh	r3, [r7, #22]
 8015828:	2b01      	cmp	r3, #1
 801582a:	d13e      	bne.n	80158aa <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801582c:	68fb      	ldr	r3, [r7, #12]
 801582e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015830:	881a      	ldrh	r2, [r3, #0]
 8015832:	68fb      	ldr	r3, [r7, #12]
 8015834:	681b      	ldr	r3, [r3, #0]
 8015836:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8015838:	68fb      	ldr	r3, [r7, #12]
 801583a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801583c:	1c9a      	adds	r2, r3, #2
 801583e:	68fb      	ldr	r3, [r7, #12]
 8015840:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8015846:	b29b      	uxth	r3, r3
 8015848:	3b01      	subs	r3, #1
 801584a:	b29a      	uxth	r2, r3
 801584c:	68fb      	ldr	r3, [r7, #12]
 801584e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8015850:	e02b      	b.n	80158aa <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8015852:	68fb      	ldr	r3, [r7, #12]
 8015854:	681b      	ldr	r3, [r3, #0]
 8015856:	689b      	ldr	r3, [r3, #8]
 8015858:	f003 0302 	and.w	r3, r3, #2
 801585c:	2b02      	cmp	r3, #2
 801585e:	d112      	bne.n	8015886 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8015860:	68fb      	ldr	r3, [r7, #12]
 8015862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015864:	881a      	ldrh	r2, [r3, #0]
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	681b      	ldr	r3, [r3, #0]
 801586a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801586c:	68fb      	ldr	r3, [r7, #12]
 801586e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015870:	1c9a      	adds	r2, r3, #2
 8015872:	68fb      	ldr	r3, [r7, #12]
 8015874:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8015876:	68fb      	ldr	r3, [r7, #12]
 8015878:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801587a:	b29b      	uxth	r3, r3
 801587c:	3b01      	subs	r3, #1
 801587e:	b29a      	uxth	r2, r3
 8015880:	68fb      	ldr	r3, [r7, #12]
 8015882:	86da      	strh	r2, [r3, #54]	; 0x36
 8015884:	e011      	b.n	80158aa <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8015886:	f7fc fb81 	bl	8011f8c <HAL_GetTick>
 801588a:	4602      	mov	r2, r0
 801588c:	69bb      	ldr	r3, [r7, #24]
 801588e:	1ad3      	subs	r3, r2, r3
 8015890:	683a      	ldr	r2, [r7, #0]
 8015892:	429a      	cmp	r2, r3
 8015894:	d803      	bhi.n	801589e <HAL_SPI_Transmit+0x158>
 8015896:	683b      	ldr	r3, [r7, #0]
 8015898:	f1b3 3fff 	cmp.w	r3, #4294967295
 801589c:	d102      	bne.n	80158a4 <HAL_SPI_Transmit+0x15e>
 801589e:	683b      	ldr	r3, [r7, #0]
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	d102      	bne.n	80158aa <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80158a4:	2303      	movs	r3, #3
 80158a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80158a8:	e074      	b.n	8015994 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80158ae:	b29b      	uxth	r3, r3
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d1ce      	bne.n	8015852 <HAL_SPI_Transmit+0x10c>
 80158b4:	e04c      	b.n	8015950 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	685b      	ldr	r3, [r3, #4]
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d002      	beq.n	80158c4 <HAL_SPI_Transmit+0x17e>
 80158be:	8afb      	ldrh	r3, [r7, #22]
 80158c0:	2b01      	cmp	r3, #1
 80158c2:	d140      	bne.n	8015946 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80158c4:	68fb      	ldr	r3, [r7, #12]
 80158c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80158c8:	68fb      	ldr	r3, [r7, #12]
 80158ca:	681b      	ldr	r3, [r3, #0]
 80158cc:	330c      	adds	r3, #12
 80158ce:	7812      	ldrb	r2, [r2, #0]
 80158d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80158d2:	68fb      	ldr	r3, [r7, #12]
 80158d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80158d6:	1c5a      	adds	r2, r3, #1
 80158d8:	68fb      	ldr	r3, [r7, #12]
 80158da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80158dc:	68fb      	ldr	r3, [r7, #12]
 80158de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80158e0:	b29b      	uxth	r3, r3
 80158e2:	3b01      	subs	r3, #1
 80158e4:	b29a      	uxth	r2, r3
 80158e6:	68fb      	ldr	r3, [r7, #12]
 80158e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80158ea:	e02c      	b.n	8015946 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80158ec:	68fb      	ldr	r3, [r7, #12]
 80158ee:	681b      	ldr	r3, [r3, #0]
 80158f0:	689b      	ldr	r3, [r3, #8]
 80158f2:	f003 0302 	and.w	r3, r3, #2
 80158f6:	2b02      	cmp	r3, #2
 80158f8:	d113      	bne.n	8015922 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80158fa:	68fb      	ldr	r3, [r7, #12]
 80158fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80158fe:	68fb      	ldr	r3, [r7, #12]
 8015900:	681b      	ldr	r3, [r3, #0]
 8015902:	330c      	adds	r3, #12
 8015904:	7812      	ldrb	r2, [r2, #0]
 8015906:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801590c:	1c5a      	adds	r2, r3, #1
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8015912:	68fb      	ldr	r3, [r7, #12]
 8015914:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8015916:	b29b      	uxth	r3, r3
 8015918:	3b01      	subs	r3, #1
 801591a:	b29a      	uxth	r2, r3
 801591c:	68fb      	ldr	r3, [r7, #12]
 801591e:	86da      	strh	r2, [r3, #54]	; 0x36
 8015920:	e011      	b.n	8015946 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8015922:	f7fc fb33 	bl	8011f8c <HAL_GetTick>
 8015926:	4602      	mov	r2, r0
 8015928:	69bb      	ldr	r3, [r7, #24]
 801592a:	1ad3      	subs	r3, r2, r3
 801592c:	683a      	ldr	r2, [r7, #0]
 801592e:	429a      	cmp	r2, r3
 8015930:	d803      	bhi.n	801593a <HAL_SPI_Transmit+0x1f4>
 8015932:	683b      	ldr	r3, [r7, #0]
 8015934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015938:	d102      	bne.n	8015940 <HAL_SPI_Transmit+0x1fa>
 801593a:	683b      	ldr	r3, [r7, #0]
 801593c:	2b00      	cmp	r3, #0
 801593e:	d102      	bne.n	8015946 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8015940:	2303      	movs	r3, #3
 8015942:	77fb      	strb	r3, [r7, #31]
          goto error;
 8015944:	e026      	b.n	8015994 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8015946:	68fb      	ldr	r3, [r7, #12]
 8015948:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801594a:	b29b      	uxth	r3, r3
 801594c:	2b00      	cmp	r3, #0
 801594e:	d1cd      	bne.n	80158ec <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8015950:	69ba      	ldr	r2, [r7, #24]
 8015952:	6839      	ldr	r1, [r7, #0]
 8015954:	68f8      	ldr	r0, [r7, #12]
 8015956:	f000 fba5 	bl	80160a4 <SPI_EndRxTxTransaction>
 801595a:	4603      	mov	r3, r0
 801595c:	2b00      	cmp	r3, #0
 801595e:	d002      	beq.n	8015966 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8015960:	68fb      	ldr	r3, [r7, #12]
 8015962:	2220      	movs	r2, #32
 8015964:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8015966:	68fb      	ldr	r3, [r7, #12]
 8015968:	689b      	ldr	r3, [r3, #8]
 801596a:	2b00      	cmp	r3, #0
 801596c:	d10a      	bne.n	8015984 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801596e:	2300      	movs	r3, #0
 8015970:	613b      	str	r3, [r7, #16]
 8015972:	68fb      	ldr	r3, [r7, #12]
 8015974:	681b      	ldr	r3, [r3, #0]
 8015976:	68db      	ldr	r3, [r3, #12]
 8015978:	613b      	str	r3, [r7, #16]
 801597a:	68fb      	ldr	r3, [r7, #12]
 801597c:	681b      	ldr	r3, [r3, #0]
 801597e:	689b      	ldr	r3, [r3, #8]
 8015980:	613b      	str	r3, [r7, #16]
 8015982:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015988:	2b00      	cmp	r3, #0
 801598a:	d002      	beq.n	8015992 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 801598c:	2301      	movs	r3, #1
 801598e:	77fb      	strb	r3, [r7, #31]
 8015990:	e000      	b.n	8015994 <HAL_SPI_Transmit+0x24e>
  }

error:
 8015992:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8015994:	68fb      	ldr	r3, [r7, #12]
 8015996:	2201      	movs	r2, #1
 8015998:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801599c:	68fb      	ldr	r3, [r7, #12]
 801599e:	2200      	movs	r2, #0
 80159a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80159a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80159a6:	4618      	mov	r0, r3
 80159a8:	3720      	adds	r7, #32
 80159aa:	46bd      	mov	sp, r7
 80159ac:	bd80      	pop	{r7, pc}

080159ae <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80159ae:	b580      	push	{r7, lr}
 80159b0:	b088      	sub	sp, #32
 80159b2:	af02      	add	r7, sp, #8
 80159b4:	60f8      	str	r0, [r7, #12]
 80159b6:	60b9      	str	r1, [r7, #8]
 80159b8:	603b      	str	r3, [r7, #0]
 80159ba:	4613      	mov	r3, r2
 80159bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80159be:	2300      	movs	r3, #0
 80159c0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80159c2:	68fb      	ldr	r3, [r7, #12]
 80159c4:	685b      	ldr	r3, [r3, #4]
 80159c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80159ca:	d112      	bne.n	80159f2 <HAL_SPI_Receive+0x44>
 80159cc:	68fb      	ldr	r3, [r7, #12]
 80159ce:	689b      	ldr	r3, [r3, #8]
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	d10e      	bne.n	80159f2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80159d4:	68fb      	ldr	r3, [r7, #12]
 80159d6:	2204      	movs	r2, #4
 80159d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80159dc:	88fa      	ldrh	r2, [r7, #6]
 80159de:	683b      	ldr	r3, [r7, #0]
 80159e0:	9300      	str	r3, [sp, #0]
 80159e2:	4613      	mov	r3, r2
 80159e4:	68ba      	ldr	r2, [r7, #8]
 80159e6:	68b9      	ldr	r1, [r7, #8]
 80159e8:	68f8      	ldr	r0, [r7, #12]
 80159ea:	f000 f8e9 	bl	8015bc0 <HAL_SPI_TransmitReceive>
 80159ee:	4603      	mov	r3, r0
 80159f0:	e0e2      	b.n	8015bb8 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80159f2:	68fb      	ldr	r3, [r7, #12]
 80159f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80159f8:	2b01      	cmp	r3, #1
 80159fa:	d101      	bne.n	8015a00 <HAL_SPI_Receive+0x52>
 80159fc:	2302      	movs	r3, #2
 80159fe:	e0db      	b.n	8015bb8 <HAL_SPI_Receive+0x20a>
 8015a00:	68fb      	ldr	r3, [r7, #12]
 8015a02:	2201      	movs	r2, #1
 8015a04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8015a08:	f7fc fac0 	bl	8011f8c <HAL_GetTick>
 8015a0c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8015a0e:	68fb      	ldr	r3, [r7, #12]
 8015a10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8015a14:	b2db      	uxtb	r3, r3
 8015a16:	2b01      	cmp	r3, #1
 8015a18:	d002      	beq.n	8015a20 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8015a1a:	2302      	movs	r3, #2
 8015a1c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8015a1e:	e0c2      	b.n	8015ba6 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8015a20:	68bb      	ldr	r3, [r7, #8]
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	d002      	beq.n	8015a2c <HAL_SPI_Receive+0x7e>
 8015a26:	88fb      	ldrh	r3, [r7, #6]
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d102      	bne.n	8015a32 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8015a2c:	2301      	movs	r3, #1
 8015a2e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8015a30:	e0b9      	b.n	8015ba6 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8015a32:	68fb      	ldr	r3, [r7, #12]
 8015a34:	2204      	movs	r2, #4
 8015a36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8015a3a:	68fb      	ldr	r3, [r7, #12]
 8015a3c:	2200      	movs	r2, #0
 8015a3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8015a40:	68fb      	ldr	r3, [r7, #12]
 8015a42:	68ba      	ldr	r2, [r7, #8]
 8015a44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8015a46:	68fb      	ldr	r3, [r7, #12]
 8015a48:	88fa      	ldrh	r2, [r7, #6]
 8015a4a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	88fa      	ldrh	r2, [r7, #6]
 8015a50:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8015a52:	68fb      	ldr	r3, [r7, #12]
 8015a54:	2200      	movs	r2, #0
 8015a56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8015a58:	68fb      	ldr	r3, [r7, #12]
 8015a5a:	2200      	movs	r2, #0
 8015a5c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8015a5e:	68fb      	ldr	r3, [r7, #12]
 8015a60:	2200      	movs	r2, #0
 8015a62:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8015a64:	68fb      	ldr	r3, [r7, #12]
 8015a66:	2200      	movs	r2, #0
 8015a68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8015a6a:	68fb      	ldr	r3, [r7, #12]
 8015a6c:	2200      	movs	r2, #0
 8015a6e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015a70:	68fb      	ldr	r3, [r7, #12]
 8015a72:	689b      	ldr	r3, [r3, #8]
 8015a74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015a78:	d107      	bne.n	8015a8a <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8015a7a:	68fb      	ldr	r3, [r7, #12]
 8015a7c:	681b      	ldr	r3, [r3, #0]
 8015a7e:	681a      	ldr	r2, [r3, #0]
 8015a80:	68fb      	ldr	r3, [r7, #12]
 8015a82:	681b      	ldr	r3, [r3, #0]
 8015a84:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8015a88:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8015a8a:	68fb      	ldr	r3, [r7, #12]
 8015a8c:	681b      	ldr	r3, [r3, #0]
 8015a8e:	681b      	ldr	r3, [r3, #0]
 8015a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015a94:	2b40      	cmp	r3, #64	; 0x40
 8015a96:	d007      	beq.n	8015aa8 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8015a98:	68fb      	ldr	r3, [r7, #12]
 8015a9a:	681b      	ldr	r3, [r3, #0]
 8015a9c:	681a      	ldr	r2, [r3, #0]
 8015a9e:	68fb      	ldr	r3, [r7, #12]
 8015aa0:	681b      	ldr	r3, [r3, #0]
 8015aa2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015aa6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8015aa8:	68fb      	ldr	r3, [r7, #12]
 8015aaa:	68db      	ldr	r3, [r3, #12]
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d162      	bne.n	8015b76 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8015ab0:	e02e      	b.n	8015b10 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8015ab2:	68fb      	ldr	r3, [r7, #12]
 8015ab4:	681b      	ldr	r3, [r3, #0]
 8015ab6:	689b      	ldr	r3, [r3, #8]
 8015ab8:	f003 0301 	and.w	r3, r3, #1
 8015abc:	2b01      	cmp	r3, #1
 8015abe:	d115      	bne.n	8015aec <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	681b      	ldr	r3, [r3, #0]
 8015ac4:	f103 020c 	add.w	r2, r3, #12
 8015ac8:	68fb      	ldr	r3, [r7, #12]
 8015aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015acc:	7812      	ldrb	r2, [r2, #0]
 8015ace:	b2d2      	uxtb	r2, r2
 8015ad0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015ad6:	1c5a      	adds	r2, r3, #1
 8015ad8:	68fb      	ldr	r3, [r7, #12]
 8015ada:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8015adc:	68fb      	ldr	r3, [r7, #12]
 8015ade:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015ae0:	b29b      	uxth	r3, r3
 8015ae2:	3b01      	subs	r3, #1
 8015ae4:	b29a      	uxth	r2, r3
 8015ae6:	68fb      	ldr	r3, [r7, #12]
 8015ae8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8015aea:	e011      	b.n	8015b10 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8015aec:	f7fc fa4e 	bl	8011f8c <HAL_GetTick>
 8015af0:	4602      	mov	r2, r0
 8015af2:	693b      	ldr	r3, [r7, #16]
 8015af4:	1ad3      	subs	r3, r2, r3
 8015af6:	683a      	ldr	r2, [r7, #0]
 8015af8:	429a      	cmp	r2, r3
 8015afa:	d803      	bhi.n	8015b04 <HAL_SPI_Receive+0x156>
 8015afc:	683b      	ldr	r3, [r7, #0]
 8015afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b02:	d102      	bne.n	8015b0a <HAL_SPI_Receive+0x15c>
 8015b04:	683b      	ldr	r3, [r7, #0]
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d102      	bne.n	8015b10 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8015b0a:	2303      	movs	r3, #3
 8015b0c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8015b0e:	e04a      	b.n	8015ba6 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8015b10:	68fb      	ldr	r3, [r7, #12]
 8015b12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015b14:	b29b      	uxth	r3, r3
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d1cb      	bne.n	8015ab2 <HAL_SPI_Receive+0x104>
 8015b1a:	e031      	b.n	8015b80 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8015b1c:	68fb      	ldr	r3, [r7, #12]
 8015b1e:	681b      	ldr	r3, [r3, #0]
 8015b20:	689b      	ldr	r3, [r3, #8]
 8015b22:	f003 0301 	and.w	r3, r3, #1
 8015b26:	2b01      	cmp	r3, #1
 8015b28:	d113      	bne.n	8015b52 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8015b2a:	68fb      	ldr	r3, [r7, #12]
 8015b2c:	681b      	ldr	r3, [r3, #0]
 8015b2e:	68da      	ldr	r2, [r3, #12]
 8015b30:	68fb      	ldr	r3, [r7, #12]
 8015b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015b34:	b292      	uxth	r2, r2
 8015b36:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8015b38:	68fb      	ldr	r3, [r7, #12]
 8015b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015b3c:	1c9a      	adds	r2, r3, #2
 8015b3e:	68fb      	ldr	r3, [r7, #12]
 8015b40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8015b42:	68fb      	ldr	r3, [r7, #12]
 8015b44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015b46:	b29b      	uxth	r3, r3
 8015b48:	3b01      	subs	r3, #1
 8015b4a:	b29a      	uxth	r2, r3
 8015b4c:	68fb      	ldr	r3, [r7, #12]
 8015b4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8015b50:	e011      	b.n	8015b76 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8015b52:	f7fc fa1b 	bl	8011f8c <HAL_GetTick>
 8015b56:	4602      	mov	r2, r0
 8015b58:	693b      	ldr	r3, [r7, #16]
 8015b5a:	1ad3      	subs	r3, r2, r3
 8015b5c:	683a      	ldr	r2, [r7, #0]
 8015b5e:	429a      	cmp	r2, r3
 8015b60:	d803      	bhi.n	8015b6a <HAL_SPI_Receive+0x1bc>
 8015b62:	683b      	ldr	r3, [r7, #0]
 8015b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b68:	d102      	bne.n	8015b70 <HAL_SPI_Receive+0x1c2>
 8015b6a:	683b      	ldr	r3, [r7, #0]
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d102      	bne.n	8015b76 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8015b70:	2303      	movs	r3, #3
 8015b72:	75fb      	strb	r3, [r7, #23]
          goto error;
 8015b74:	e017      	b.n	8015ba6 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8015b76:	68fb      	ldr	r3, [r7, #12]
 8015b78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015b7a:	b29b      	uxth	r3, r3
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d1cd      	bne.n	8015b1c <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8015b80:	693a      	ldr	r2, [r7, #16]
 8015b82:	6839      	ldr	r1, [r7, #0]
 8015b84:	68f8      	ldr	r0, [r7, #12]
 8015b86:	f000 fa27 	bl	8015fd8 <SPI_EndRxTransaction>
 8015b8a:	4603      	mov	r3, r0
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d002      	beq.n	8015b96 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8015b90:	68fb      	ldr	r3, [r7, #12]
 8015b92:	2220      	movs	r2, #32
 8015b94:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015b96:	68fb      	ldr	r3, [r7, #12]
 8015b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d002      	beq.n	8015ba4 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8015b9e:	2301      	movs	r3, #1
 8015ba0:	75fb      	strb	r3, [r7, #23]
 8015ba2:	e000      	b.n	8015ba6 <HAL_SPI_Receive+0x1f8>
  }

error :
 8015ba4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8015ba6:	68fb      	ldr	r3, [r7, #12]
 8015ba8:	2201      	movs	r2, #1
 8015baa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8015bae:	68fb      	ldr	r3, [r7, #12]
 8015bb0:	2200      	movs	r2, #0
 8015bb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8015bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8015bb8:	4618      	mov	r0, r3
 8015bba:	3718      	adds	r7, #24
 8015bbc:	46bd      	mov	sp, r7
 8015bbe:	bd80      	pop	{r7, pc}

08015bc0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8015bc0:	b580      	push	{r7, lr}
 8015bc2:	b08c      	sub	sp, #48	; 0x30
 8015bc4:	af00      	add	r7, sp, #0
 8015bc6:	60f8      	str	r0, [r7, #12]
 8015bc8:	60b9      	str	r1, [r7, #8]
 8015bca:	607a      	str	r2, [r7, #4]
 8015bcc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8015bce:	2301      	movs	r3, #1
 8015bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8015bd2:	2300      	movs	r3, #0
 8015bd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8015bd8:	68fb      	ldr	r3, [r7, #12]
 8015bda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8015bde:	2b01      	cmp	r3, #1
 8015be0:	d101      	bne.n	8015be6 <HAL_SPI_TransmitReceive+0x26>
 8015be2:	2302      	movs	r3, #2
 8015be4:	e18a      	b.n	8015efc <HAL_SPI_TransmitReceive+0x33c>
 8015be6:	68fb      	ldr	r3, [r7, #12]
 8015be8:	2201      	movs	r2, #1
 8015bea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8015bee:	f7fc f9cd 	bl	8011f8c <HAL_GetTick>
 8015bf2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8015bf4:	68fb      	ldr	r3, [r7, #12]
 8015bf6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8015bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8015bfe:	68fb      	ldr	r3, [r7, #12]
 8015c00:	685b      	ldr	r3, [r3, #4]
 8015c02:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8015c04:	887b      	ldrh	r3, [r7, #2]
 8015c06:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8015c08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015c0c:	2b01      	cmp	r3, #1
 8015c0e:	d00f      	beq.n	8015c30 <HAL_SPI_TransmitReceive+0x70>
 8015c10:	69fb      	ldr	r3, [r7, #28]
 8015c12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8015c16:	d107      	bne.n	8015c28 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8015c18:	68fb      	ldr	r3, [r7, #12]
 8015c1a:	689b      	ldr	r3, [r3, #8]
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	d103      	bne.n	8015c28 <HAL_SPI_TransmitReceive+0x68>
 8015c20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015c24:	2b04      	cmp	r3, #4
 8015c26:	d003      	beq.n	8015c30 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8015c28:	2302      	movs	r3, #2
 8015c2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8015c2e:	e15b      	b.n	8015ee8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8015c30:	68bb      	ldr	r3, [r7, #8]
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	d005      	beq.n	8015c42 <HAL_SPI_TransmitReceive+0x82>
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d002      	beq.n	8015c42 <HAL_SPI_TransmitReceive+0x82>
 8015c3c:	887b      	ldrh	r3, [r7, #2]
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	d103      	bne.n	8015c4a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8015c42:	2301      	movs	r3, #1
 8015c44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8015c48:	e14e      	b.n	8015ee8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8015c4a:	68fb      	ldr	r3, [r7, #12]
 8015c4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8015c50:	b2db      	uxtb	r3, r3
 8015c52:	2b04      	cmp	r3, #4
 8015c54:	d003      	beq.n	8015c5e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8015c56:	68fb      	ldr	r3, [r7, #12]
 8015c58:	2205      	movs	r2, #5
 8015c5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8015c5e:	68fb      	ldr	r3, [r7, #12]
 8015c60:	2200      	movs	r2, #0
 8015c62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8015c64:	68fb      	ldr	r3, [r7, #12]
 8015c66:	687a      	ldr	r2, [r7, #4]
 8015c68:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8015c6a:	68fb      	ldr	r3, [r7, #12]
 8015c6c:	887a      	ldrh	r2, [r7, #2]
 8015c6e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8015c70:	68fb      	ldr	r3, [r7, #12]
 8015c72:	887a      	ldrh	r2, [r7, #2]
 8015c74:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8015c76:	68fb      	ldr	r3, [r7, #12]
 8015c78:	68ba      	ldr	r2, [r7, #8]
 8015c7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8015c7c:	68fb      	ldr	r3, [r7, #12]
 8015c7e:	887a      	ldrh	r2, [r7, #2]
 8015c80:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8015c82:	68fb      	ldr	r3, [r7, #12]
 8015c84:	887a      	ldrh	r2, [r7, #2]
 8015c86:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8015c88:	68fb      	ldr	r3, [r7, #12]
 8015c8a:	2200      	movs	r2, #0
 8015c8c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8015c8e:	68fb      	ldr	r3, [r7, #12]
 8015c90:	2200      	movs	r2, #0
 8015c92:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8015c94:	68fb      	ldr	r3, [r7, #12]
 8015c96:	681b      	ldr	r3, [r3, #0]
 8015c98:	681b      	ldr	r3, [r3, #0]
 8015c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015c9e:	2b40      	cmp	r3, #64	; 0x40
 8015ca0:	d007      	beq.n	8015cb2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8015ca2:	68fb      	ldr	r3, [r7, #12]
 8015ca4:	681b      	ldr	r3, [r3, #0]
 8015ca6:	681a      	ldr	r2, [r3, #0]
 8015ca8:	68fb      	ldr	r3, [r7, #12]
 8015caa:	681b      	ldr	r3, [r3, #0]
 8015cac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015cb0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8015cb2:	68fb      	ldr	r3, [r7, #12]
 8015cb4:	68db      	ldr	r3, [r3, #12]
 8015cb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015cba:	d178      	bne.n	8015dae <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8015cbc:	68fb      	ldr	r3, [r7, #12]
 8015cbe:	685b      	ldr	r3, [r3, #4]
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d002      	beq.n	8015cca <HAL_SPI_TransmitReceive+0x10a>
 8015cc4:	8b7b      	ldrh	r3, [r7, #26]
 8015cc6:	2b01      	cmp	r3, #1
 8015cc8:	d166      	bne.n	8015d98 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8015cca:	68fb      	ldr	r3, [r7, #12]
 8015ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015cce:	881a      	ldrh	r2, [r3, #0]
 8015cd0:	68fb      	ldr	r3, [r7, #12]
 8015cd2:	681b      	ldr	r3, [r3, #0]
 8015cd4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8015cd6:	68fb      	ldr	r3, [r7, #12]
 8015cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015cda:	1c9a      	adds	r2, r3, #2
 8015cdc:	68fb      	ldr	r3, [r7, #12]
 8015cde:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8015ce0:	68fb      	ldr	r3, [r7, #12]
 8015ce2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8015ce4:	b29b      	uxth	r3, r3
 8015ce6:	3b01      	subs	r3, #1
 8015ce8:	b29a      	uxth	r2, r3
 8015cea:	68fb      	ldr	r3, [r7, #12]
 8015cec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8015cee:	e053      	b.n	8015d98 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8015cf0:	68fb      	ldr	r3, [r7, #12]
 8015cf2:	681b      	ldr	r3, [r3, #0]
 8015cf4:	689b      	ldr	r3, [r3, #8]
 8015cf6:	f003 0302 	and.w	r3, r3, #2
 8015cfa:	2b02      	cmp	r3, #2
 8015cfc:	d11b      	bne.n	8015d36 <HAL_SPI_TransmitReceive+0x176>
 8015cfe:	68fb      	ldr	r3, [r7, #12]
 8015d00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8015d02:	b29b      	uxth	r3, r3
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	d016      	beq.n	8015d36 <HAL_SPI_TransmitReceive+0x176>
 8015d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d0a:	2b01      	cmp	r3, #1
 8015d0c:	d113      	bne.n	8015d36 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8015d0e:	68fb      	ldr	r3, [r7, #12]
 8015d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d12:	881a      	ldrh	r2, [r3, #0]
 8015d14:	68fb      	ldr	r3, [r7, #12]
 8015d16:	681b      	ldr	r3, [r3, #0]
 8015d18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8015d1a:	68fb      	ldr	r3, [r7, #12]
 8015d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d1e:	1c9a      	adds	r2, r3, #2
 8015d20:	68fb      	ldr	r3, [r7, #12]
 8015d22:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8015d24:	68fb      	ldr	r3, [r7, #12]
 8015d26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8015d28:	b29b      	uxth	r3, r3
 8015d2a:	3b01      	subs	r3, #1
 8015d2c:	b29a      	uxth	r2, r3
 8015d2e:	68fb      	ldr	r3, [r7, #12]
 8015d30:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8015d32:	2300      	movs	r3, #0
 8015d34:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8015d36:	68fb      	ldr	r3, [r7, #12]
 8015d38:	681b      	ldr	r3, [r3, #0]
 8015d3a:	689b      	ldr	r3, [r3, #8]
 8015d3c:	f003 0301 	and.w	r3, r3, #1
 8015d40:	2b01      	cmp	r3, #1
 8015d42:	d119      	bne.n	8015d78 <HAL_SPI_TransmitReceive+0x1b8>
 8015d44:	68fb      	ldr	r3, [r7, #12]
 8015d46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015d48:	b29b      	uxth	r3, r3
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	d014      	beq.n	8015d78 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8015d4e:	68fb      	ldr	r3, [r7, #12]
 8015d50:	681b      	ldr	r3, [r3, #0]
 8015d52:	68da      	ldr	r2, [r3, #12]
 8015d54:	68fb      	ldr	r3, [r7, #12]
 8015d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015d58:	b292      	uxth	r2, r2
 8015d5a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8015d5c:	68fb      	ldr	r3, [r7, #12]
 8015d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015d60:	1c9a      	adds	r2, r3, #2
 8015d62:	68fb      	ldr	r3, [r7, #12]
 8015d64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8015d66:	68fb      	ldr	r3, [r7, #12]
 8015d68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015d6a:	b29b      	uxth	r3, r3
 8015d6c:	3b01      	subs	r3, #1
 8015d6e:	b29a      	uxth	r2, r3
 8015d70:	68fb      	ldr	r3, [r7, #12]
 8015d72:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8015d74:	2301      	movs	r3, #1
 8015d76:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8015d78:	f7fc f908 	bl	8011f8c <HAL_GetTick>
 8015d7c:	4602      	mov	r2, r0
 8015d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d80:	1ad3      	subs	r3, r2, r3
 8015d82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015d84:	429a      	cmp	r2, r3
 8015d86:	d807      	bhi.n	8015d98 <HAL_SPI_TransmitReceive+0x1d8>
 8015d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d8e:	d003      	beq.n	8015d98 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8015d90:	2303      	movs	r3, #3
 8015d92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8015d96:	e0a7      	b.n	8015ee8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8015d98:	68fb      	ldr	r3, [r7, #12]
 8015d9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8015d9c:	b29b      	uxth	r3, r3
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d1a6      	bne.n	8015cf0 <HAL_SPI_TransmitReceive+0x130>
 8015da2:	68fb      	ldr	r3, [r7, #12]
 8015da4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015da6:	b29b      	uxth	r3, r3
 8015da8:	2b00      	cmp	r3, #0
 8015daa:	d1a1      	bne.n	8015cf0 <HAL_SPI_TransmitReceive+0x130>
 8015dac:	e07c      	b.n	8015ea8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8015dae:	68fb      	ldr	r3, [r7, #12]
 8015db0:	685b      	ldr	r3, [r3, #4]
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d002      	beq.n	8015dbc <HAL_SPI_TransmitReceive+0x1fc>
 8015db6:	8b7b      	ldrh	r3, [r7, #26]
 8015db8:	2b01      	cmp	r3, #1
 8015dba:	d16b      	bne.n	8015e94 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8015dbc:	68fb      	ldr	r3, [r7, #12]
 8015dbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015dc0:	68fb      	ldr	r3, [r7, #12]
 8015dc2:	681b      	ldr	r3, [r3, #0]
 8015dc4:	330c      	adds	r3, #12
 8015dc6:	7812      	ldrb	r2, [r2, #0]
 8015dc8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8015dca:	68fb      	ldr	r3, [r7, #12]
 8015dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015dce:	1c5a      	adds	r2, r3, #1
 8015dd0:	68fb      	ldr	r3, [r7, #12]
 8015dd2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8015dd4:	68fb      	ldr	r3, [r7, #12]
 8015dd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8015dd8:	b29b      	uxth	r3, r3
 8015dda:	3b01      	subs	r3, #1
 8015ddc:	b29a      	uxth	r2, r3
 8015dde:	68fb      	ldr	r3, [r7, #12]
 8015de0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8015de2:	e057      	b.n	8015e94 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8015de4:	68fb      	ldr	r3, [r7, #12]
 8015de6:	681b      	ldr	r3, [r3, #0]
 8015de8:	689b      	ldr	r3, [r3, #8]
 8015dea:	f003 0302 	and.w	r3, r3, #2
 8015dee:	2b02      	cmp	r3, #2
 8015df0:	d11c      	bne.n	8015e2c <HAL_SPI_TransmitReceive+0x26c>
 8015df2:	68fb      	ldr	r3, [r7, #12]
 8015df4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8015df6:	b29b      	uxth	r3, r3
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d017      	beq.n	8015e2c <HAL_SPI_TransmitReceive+0x26c>
 8015dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dfe:	2b01      	cmp	r3, #1
 8015e00:	d114      	bne.n	8015e2c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8015e02:	68fb      	ldr	r3, [r7, #12]
 8015e04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015e06:	68fb      	ldr	r3, [r7, #12]
 8015e08:	681b      	ldr	r3, [r3, #0]
 8015e0a:	330c      	adds	r3, #12
 8015e0c:	7812      	ldrb	r2, [r2, #0]
 8015e0e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8015e10:	68fb      	ldr	r3, [r7, #12]
 8015e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e14:	1c5a      	adds	r2, r3, #1
 8015e16:	68fb      	ldr	r3, [r7, #12]
 8015e18:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8015e1a:	68fb      	ldr	r3, [r7, #12]
 8015e1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8015e1e:	b29b      	uxth	r3, r3
 8015e20:	3b01      	subs	r3, #1
 8015e22:	b29a      	uxth	r2, r3
 8015e24:	68fb      	ldr	r3, [r7, #12]
 8015e26:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8015e28:	2300      	movs	r3, #0
 8015e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8015e2c:	68fb      	ldr	r3, [r7, #12]
 8015e2e:	681b      	ldr	r3, [r3, #0]
 8015e30:	689b      	ldr	r3, [r3, #8]
 8015e32:	f003 0301 	and.w	r3, r3, #1
 8015e36:	2b01      	cmp	r3, #1
 8015e38:	d119      	bne.n	8015e6e <HAL_SPI_TransmitReceive+0x2ae>
 8015e3a:	68fb      	ldr	r3, [r7, #12]
 8015e3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015e3e:	b29b      	uxth	r3, r3
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	d014      	beq.n	8015e6e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8015e44:	68fb      	ldr	r3, [r7, #12]
 8015e46:	681b      	ldr	r3, [r3, #0]
 8015e48:	68da      	ldr	r2, [r3, #12]
 8015e4a:	68fb      	ldr	r3, [r7, #12]
 8015e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e4e:	b2d2      	uxtb	r2, r2
 8015e50:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8015e52:	68fb      	ldr	r3, [r7, #12]
 8015e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e56:	1c5a      	adds	r2, r3, #1
 8015e58:	68fb      	ldr	r3, [r7, #12]
 8015e5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8015e5c:	68fb      	ldr	r3, [r7, #12]
 8015e5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015e60:	b29b      	uxth	r3, r3
 8015e62:	3b01      	subs	r3, #1
 8015e64:	b29a      	uxth	r2, r3
 8015e66:	68fb      	ldr	r3, [r7, #12]
 8015e68:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8015e6a:	2301      	movs	r3, #1
 8015e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8015e6e:	f7fc f88d 	bl	8011f8c <HAL_GetTick>
 8015e72:	4602      	mov	r2, r0
 8015e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e76:	1ad3      	subs	r3, r2, r3
 8015e78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015e7a:	429a      	cmp	r2, r3
 8015e7c:	d803      	bhi.n	8015e86 <HAL_SPI_TransmitReceive+0x2c6>
 8015e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e84:	d102      	bne.n	8015e8c <HAL_SPI_TransmitReceive+0x2cc>
 8015e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d103      	bne.n	8015e94 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8015e8c:	2303      	movs	r3, #3
 8015e8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8015e92:	e029      	b.n	8015ee8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8015e94:	68fb      	ldr	r3, [r7, #12]
 8015e96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8015e98:	b29b      	uxth	r3, r3
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	d1a2      	bne.n	8015de4 <HAL_SPI_TransmitReceive+0x224>
 8015e9e:	68fb      	ldr	r3, [r7, #12]
 8015ea0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015ea2:	b29b      	uxth	r3, r3
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	d19d      	bne.n	8015de4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8015ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015eaa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015eac:	68f8      	ldr	r0, [r7, #12]
 8015eae:	f000 f8f9 	bl	80160a4 <SPI_EndRxTxTransaction>
 8015eb2:	4603      	mov	r3, r0
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d006      	beq.n	8015ec6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8015eb8:	2301      	movs	r3, #1
 8015eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8015ebe:	68fb      	ldr	r3, [r7, #12]
 8015ec0:	2220      	movs	r2, #32
 8015ec2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8015ec4:	e010      	b.n	8015ee8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8015ec6:	68fb      	ldr	r3, [r7, #12]
 8015ec8:	689b      	ldr	r3, [r3, #8]
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d10b      	bne.n	8015ee6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8015ece:	2300      	movs	r3, #0
 8015ed0:	617b      	str	r3, [r7, #20]
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	681b      	ldr	r3, [r3, #0]
 8015ed6:	68db      	ldr	r3, [r3, #12]
 8015ed8:	617b      	str	r3, [r7, #20]
 8015eda:	68fb      	ldr	r3, [r7, #12]
 8015edc:	681b      	ldr	r3, [r3, #0]
 8015ede:	689b      	ldr	r3, [r3, #8]
 8015ee0:	617b      	str	r3, [r7, #20]
 8015ee2:	697b      	ldr	r3, [r7, #20]
 8015ee4:	e000      	b.n	8015ee8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8015ee6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8015ee8:	68fb      	ldr	r3, [r7, #12]
 8015eea:	2201      	movs	r2, #1
 8015eec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8015ef0:	68fb      	ldr	r3, [r7, #12]
 8015ef2:	2200      	movs	r2, #0
 8015ef4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8015ef8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8015efc:	4618      	mov	r0, r3
 8015efe:	3730      	adds	r7, #48	; 0x30
 8015f00:	46bd      	mov	sp, r7
 8015f02:	bd80      	pop	{r7, pc}

08015f04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8015f04:	b580      	push	{r7, lr}
 8015f06:	b084      	sub	sp, #16
 8015f08:	af00      	add	r7, sp, #0
 8015f0a:	60f8      	str	r0, [r7, #12]
 8015f0c:	60b9      	str	r1, [r7, #8]
 8015f0e:	603b      	str	r3, [r7, #0]
 8015f10:	4613      	mov	r3, r2
 8015f12:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8015f14:	e04c      	b.n	8015fb0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8015f16:	683b      	ldr	r3, [r7, #0]
 8015f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f1c:	d048      	beq.n	8015fb0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8015f1e:	f7fc f835 	bl	8011f8c <HAL_GetTick>
 8015f22:	4602      	mov	r2, r0
 8015f24:	69bb      	ldr	r3, [r7, #24]
 8015f26:	1ad3      	subs	r3, r2, r3
 8015f28:	683a      	ldr	r2, [r7, #0]
 8015f2a:	429a      	cmp	r2, r3
 8015f2c:	d902      	bls.n	8015f34 <SPI_WaitFlagStateUntilTimeout+0x30>
 8015f2e:	683b      	ldr	r3, [r7, #0]
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d13d      	bne.n	8015fb0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8015f34:	68fb      	ldr	r3, [r7, #12]
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	685a      	ldr	r2, [r3, #4]
 8015f3a:	68fb      	ldr	r3, [r7, #12]
 8015f3c:	681b      	ldr	r3, [r3, #0]
 8015f3e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8015f42:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015f44:	68fb      	ldr	r3, [r7, #12]
 8015f46:	685b      	ldr	r3, [r3, #4]
 8015f48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8015f4c:	d111      	bne.n	8015f72 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8015f4e:	68fb      	ldr	r3, [r7, #12]
 8015f50:	689b      	ldr	r3, [r3, #8]
 8015f52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015f56:	d004      	beq.n	8015f62 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8015f58:	68fb      	ldr	r3, [r7, #12]
 8015f5a:	689b      	ldr	r3, [r3, #8]
 8015f5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015f60:	d107      	bne.n	8015f72 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8015f62:	68fb      	ldr	r3, [r7, #12]
 8015f64:	681b      	ldr	r3, [r3, #0]
 8015f66:	681a      	ldr	r2, [r3, #0]
 8015f68:	68fb      	ldr	r3, [r7, #12]
 8015f6a:	681b      	ldr	r3, [r3, #0]
 8015f6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8015f70:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8015f72:	68fb      	ldr	r3, [r7, #12]
 8015f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015f76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015f7a:	d10f      	bne.n	8015f9c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8015f7c:	68fb      	ldr	r3, [r7, #12]
 8015f7e:	681b      	ldr	r3, [r3, #0]
 8015f80:	681a      	ldr	r2, [r3, #0]
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	681b      	ldr	r3, [r3, #0]
 8015f86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015f8a:	601a      	str	r2, [r3, #0]
 8015f8c:	68fb      	ldr	r3, [r7, #12]
 8015f8e:	681b      	ldr	r3, [r3, #0]
 8015f90:	681a      	ldr	r2, [r3, #0]
 8015f92:	68fb      	ldr	r3, [r7, #12]
 8015f94:	681b      	ldr	r3, [r3, #0]
 8015f96:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8015f9a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8015f9c:	68fb      	ldr	r3, [r7, #12]
 8015f9e:	2201      	movs	r2, #1
 8015fa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8015fa4:	68fb      	ldr	r3, [r7, #12]
 8015fa6:	2200      	movs	r2, #0
 8015fa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8015fac:	2303      	movs	r3, #3
 8015fae:	e00f      	b.n	8015fd0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8015fb0:	68fb      	ldr	r3, [r7, #12]
 8015fb2:	681b      	ldr	r3, [r3, #0]
 8015fb4:	689a      	ldr	r2, [r3, #8]
 8015fb6:	68bb      	ldr	r3, [r7, #8]
 8015fb8:	4013      	ands	r3, r2
 8015fba:	68ba      	ldr	r2, [r7, #8]
 8015fbc:	429a      	cmp	r2, r3
 8015fbe:	bf0c      	ite	eq
 8015fc0:	2301      	moveq	r3, #1
 8015fc2:	2300      	movne	r3, #0
 8015fc4:	b2db      	uxtb	r3, r3
 8015fc6:	461a      	mov	r2, r3
 8015fc8:	79fb      	ldrb	r3, [r7, #7]
 8015fca:	429a      	cmp	r2, r3
 8015fcc:	d1a3      	bne.n	8015f16 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8015fce:	2300      	movs	r3, #0
}
 8015fd0:	4618      	mov	r0, r3
 8015fd2:	3710      	adds	r7, #16
 8015fd4:	46bd      	mov	sp, r7
 8015fd6:	bd80      	pop	{r7, pc}

08015fd8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8015fd8:	b580      	push	{r7, lr}
 8015fda:	b086      	sub	sp, #24
 8015fdc:	af02      	add	r7, sp, #8
 8015fde:	60f8      	str	r0, [r7, #12]
 8015fe0:	60b9      	str	r1, [r7, #8]
 8015fe2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015fe4:	68fb      	ldr	r3, [r7, #12]
 8015fe6:	685b      	ldr	r3, [r3, #4]
 8015fe8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8015fec:	d111      	bne.n	8016012 <SPI_EndRxTransaction+0x3a>
 8015fee:	68fb      	ldr	r3, [r7, #12]
 8015ff0:	689b      	ldr	r3, [r3, #8]
 8015ff2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015ff6:	d004      	beq.n	8016002 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8015ff8:	68fb      	ldr	r3, [r7, #12]
 8015ffa:	689b      	ldr	r3, [r3, #8]
 8015ffc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016000:	d107      	bne.n	8016012 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8016002:	68fb      	ldr	r3, [r7, #12]
 8016004:	681b      	ldr	r3, [r3, #0]
 8016006:	681a      	ldr	r2, [r3, #0]
 8016008:	68fb      	ldr	r3, [r7, #12]
 801600a:	681b      	ldr	r3, [r3, #0]
 801600c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8016010:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8016012:	68fb      	ldr	r3, [r7, #12]
 8016014:	685b      	ldr	r3, [r3, #4]
 8016016:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801601a:	d12a      	bne.n	8016072 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 801601c:	68fb      	ldr	r3, [r7, #12]
 801601e:	689b      	ldr	r3, [r3, #8]
 8016020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016024:	d012      	beq.n	801604c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	9300      	str	r3, [sp, #0]
 801602a:	68bb      	ldr	r3, [r7, #8]
 801602c:	2200      	movs	r2, #0
 801602e:	2180      	movs	r1, #128	; 0x80
 8016030:	68f8      	ldr	r0, [r7, #12]
 8016032:	f7ff ff67 	bl	8015f04 <SPI_WaitFlagStateUntilTimeout>
 8016036:	4603      	mov	r3, r0
 8016038:	2b00      	cmp	r3, #0
 801603a:	d02d      	beq.n	8016098 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801603c:	68fb      	ldr	r3, [r7, #12]
 801603e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016040:	f043 0220 	orr.w	r2, r3, #32
 8016044:	68fb      	ldr	r3, [r7, #12]
 8016046:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8016048:	2303      	movs	r3, #3
 801604a:	e026      	b.n	801609a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	9300      	str	r3, [sp, #0]
 8016050:	68bb      	ldr	r3, [r7, #8]
 8016052:	2200      	movs	r2, #0
 8016054:	2101      	movs	r1, #1
 8016056:	68f8      	ldr	r0, [r7, #12]
 8016058:	f7ff ff54 	bl	8015f04 <SPI_WaitFlagStateUntilTimeout>
 801605c:	4603      	mov	r3, r0
 801605e:	2b00      	cmp	r3, #0
 8016060:	d01a      	beq.n	8016098 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8016062:	68fb      	ldr	r3, [r7, #12]
 8016064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016066:	f043 0220 	orr.w	r2, r3, #32
 801606a:	68fb      	ldr	r3, [r7, #12]
 801606c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801606e:	2303      	movs	r3, #3
 8016070:	e013      	b.n	801609a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	9300      	str	r3, [sp, #0]
 8016076:	68bb      	ldr	r3, [r7, #8]
 8016078:	2200      	movs	r2, #0
 801607a:	2101      	movs	r1, #1
 801607c:	68f8      	ldr	r0, [r7, #12]
 801607e:	f7ff ff41 	bl	8015f04 <SPI_WaitFlagStateUntilTimeout>
 8016082:	4603      	mov	r3, r0
 8016084:	2b00      	cmp	r3, #0
 8016086:	d007      	beq.n	8016098 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8016088:	68fb      	ldr	r3, [r7, #12]
 801608a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801608c:	f043 0220 	orr.w	r2, r3, #32
 8016090:	68fb      	ldr	r3, [r7, #12]
 8016092:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8016094:	2303      	movs	r3, #3
 8016096:	e000      	b.n	801609a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8016098:	2300      	movs	r3, #0
}
 801609a:	4618      	mov	r0, r3
 801609c:	3710      	adds	r7, #16
 801609e:	46bd      	mov	sp, r7
 80160a0:	bd80      	pop	{r7, pc}
	...

080160a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80160a4:	b580      	push	{r7, lr}
 80160a6:	b088      	sub	sp, #32
 80160a8:	af02      	add	r7, sp, #8
 80160aa:	60f8      	str	r0, [r7, #12]
 80160ac:	60b9      	str	r1, [r7, #8]
 80160ae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80160b0:	4b1b      	ldr	r3, [pc, #108]	; (8016120 <SPI_EndRxTxTransaction+0x7c>)
 80160b2:	681b      	ldr	r3, [r3, #0]
 80160b4:	4a1b      	ldr	r2, [pc, #108]	; (8016124 <SPI_EndRxTxTransaction+0x80>)
 80160b6:	fba2 2303 	umull	r2, r3, r2, r3
 80160ba:	0d5b      	lsrs	r3, r3, #21
 80160bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80160c0:	fb02 f303 	mul.w	r3, r2, r3
 80160c4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80160c6:	68fb      	ldr	r3, [r7, #12]
 80160c8:	685b      	ldr	r3, [r3, #4]
 80160ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80160ce:	d112      	bne.n	80160f6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	9300      	str	r3, [sp, #0]
 80160d4:	68bb      	ldr	r3, [r7, #8]
 80160d6:	2200      	movs	r2, #0
 80160d8:	2180      	movs	r1, #128	; 0x80
 80160da:	68f8      	ldr	r0, [r7, #12]
 80160dc:	f7ff ff12 	bl	8015f04 <SPI_WaitFlagStateUntilTimeout>
 80160e0:	4603      	mov	r3, r0
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d016      	beq.n	8016114 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80160e6:	68fb      	ldr	r3, [r7, #12]
 80160e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80160ea:	f043 0220 	orr.w	r2, r3, #32
 80160ee:	68fb      	ldr	r3, [r7, #12]
 80160f0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80160f2:	2303      	movs	r3, #3
 80160f4:	e00f      	b.n	8016116 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80160f6:	697b      	ldr	r3, [r7, #20]
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d00a      	beq.n	8016112 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80160fc:	697b      	ldr	r3, [r7, #20]
 80160fe:	3b01      	subs	r3, #1
 8016100:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8016102:	68fb      	ldr	r3, [r7, #12]
 8016104:	681b      	ldr	r3, [r3, #0]
 8016106:	689b      	ldr	r3, [r3, #8]
 8016108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801610c:	2b80      	cmp	r3, #128	; 0x80
 801610e:	d0f2      	beq.n	80160f6 <SPI_EndRxTxTransaction+0x52>
 8016110:	e000      	b.n	8016114 <SPI_EndRxTxTransaction+0x70>
        break;
 8016112:	bf00      	nop
  }

  return HAL_OK;
 8016114:	2300      	movs	r3, #0
}
 8016116:	4618      	mov	r0, r3
 8016118:	3718      	adds	r7, #24
 801611a:	46bd      	mov	sp, r7
 801611c:	bd80      	pop	{r7, pc}
 801611e:	bf00      	nop
 8016120:	20000088 	.word	0x20000088
 8016124:	165e9f81 	.word	0x165e9f81

08016128 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8016128:	b580      	push	{r7, lr}
 801612a:	b082      	sub	sp, #8
 801612c:	af00      	add	r7, sp, #0
 801612e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	2b00      	cmp	r3, #0
 8016134:	d101      	bne.n	801613a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8016136:	2301      	movs	r3, #1
 8016138:	e01d      	b.n	8016176 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016140:	b2db      	uxtb	r3, r3
 8016142:	2b00      	cmp	r3, #0
 8016144:	d106      	bne.n	8016154 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	2200      	movs	r2, #0
 801614a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801614e:	6878      	ldr	r0, [r7, #4]
 8016150:	f7f5 ff4c 	bl	800bfec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	2202      	movs	r2, #2
 8016158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	681a      	ldr	r2, [r3, #0]
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	3304      	adds	r3, #4
 8016164:	4619      	mov	r1, r3
 8016166:	4610      	mov	r0, r2
 8016168:	f000 fcb8 	bl	8016adc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	2201      	movs	r2, #1
 8016170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8016174:	2300      	movs	r3, #0
}
 8016176:	4618      	mov	r0, r3
 8016178:	3708      	adds	r7, #8
 801617a:	46bd      	mov	sp, r7
 801617c:	bd80      	pop	{r7, pc}

0801617e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801617e:	b480      	push	{r7}
 8016180:	b085      	sub	sp, #20
 8016182:	af00      	add	r7, sp, #0
 8016184:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	681b      	ldr	r3, [r3, #0]
 801618a:	68da      	ldr	r2, [r3, #12]
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	681b      	ldr	r3, [r3, #0]
 8016190:	f042 0201 	orr.w	r2, r2, #1
 8016194:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	681b      	ldr	r3, [r3, #0]
 801619a:	689b      	ldr	r3, [r3, #8]
 801619c:	f003 0307 	and.w	r3, r3, #7
 80161a0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80161a2:	68fb      	ldr	r3, [r7, #12]
 80161a4:	2b06      	cmp	r3, #6
 80161a6:	d007      	beq.n	80161b8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	681b      	ldr	r3, [r3, #0]
 80161ac:	681a      	ldr	r2, [r3, #0]
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	681b      	ldr	r3, [r3, #0]
 80161b2:	f042 0201 	orr.w	r2, r2, #1
 80161b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80161b8:	2300      	movs	r3, #0
}
 80161ba:	4618      	mov	r0, r3
 80161bc:	3714      	adds	r7, #20
 80161be:	46bd      	mov	sp, r7
 80161c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161c4:	4770      	bx	lr

080161c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80161c6:	b580      	push	{r7, lr}
 80161c8:	b082      	sub	sp, #8
 80161ca:	af00      	add	r7, sp, #0
 80161cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d101      	bne.n	80161d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80161d4:	2301      	movs	r3, #1
 80161d6:	e01d      	b.n	8016214 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80161de:	b2db      	uxtb	r3, r3
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d106      	bne.n	80161f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	2200      	movs	r2, #0
 80161e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80161ec:	6878      	ldr	r0, [r7, #4]
 80161ee:	f000 f815 	bl	801621c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	2202      	movs	r2, #2
 80161f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	681a      	ldr	r2, [r3, #0]
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	3304      	adds	r3, #4
 8016202:	4619      	mov	r1, r3
 8016204:	4610      	mov	r0, r2
 8016206:	f000 fc69 	bl	8016adc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	2201      	movs	r2, #1
 801620e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8016212:	2300      	movs	r3, #0
}
 8016214:	4618      	mov	r0, r3
 8016216:	3708      	adds	r7, #8
 8016218:	46bd      	mov	sp, r7
 801621a:	bd80      	pop	{r7, pc}

0801621c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801621c:	b480      	push	{r7}
 801621e:	b083      	sub	sp, #12
 8016220:	af00      	add	r7, sp, #0
 8016222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8016224:	bf00      	nop
 8016226:	370c      	adds	r7, #12
 8016228:	46bd      	mov	sp, r7
 801622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801622e:	4770      	bx	lr

08016230 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8016230:	b580      	push	{r7, lr}
 8016232:	b086      	sub	sp, #24
 8016234:	af00      	add	r7, sp, #0
 8016236:	60f8      	str	r0, [r7, #12]
 8016238:	60b9      	str	r1, [r7, #8]
 801623a:	607a      	str	r2, [r7, #4]
 801623c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 801623e:	68fb      	ldr	r3, [r7, #12]
 8016240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016244:	b2db      	uxtb	r3, r3
 8016246:	2b02      	cmp	r3, #2
 8016248:	d101      	bne.n	801624e <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 801624a:	2302      	movs	r3, #2
 801624c:	e0f3      	b.n	8016436 <HAL_TIM_PWM_Start_DMA+0x206>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 801624e:	68fb      	ldr	r3, [r7, #12]
 8016250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016254:	b2db      	uxtb	r3, r3
 8016256:	2b01      	cmp	r3, #1
 8016258:	d10b      	bne.n	8016272 <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	2b00      	cmp	r3, #0
 801625e:	d104      	bne.n	801626a <HAL_TIM_PWM_Start_DMA+0x3a>
 8016260:	887b      	ldrh	r3, [r7, #2]
 8016262:	2b00      	cmp	r3, #0
 8016264:	d001      	beq.n	801626a <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8016266:	2301      	movs	r3, #1
 8016268:	e0e5      	b.n	8016436 <HAL_TIM_PWM_Start_DMA+0x206>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 801626a:	68fb      	ldr	r3, [r7, #12]
 801626c:	2202      	movs	r2, #2
 801626e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 8016272:	68bb      	ldr	r3, [r7, #8]
 8016274:	2b0c      	cmp	r3, #12
 8016276:	f200 80ad 	bhi.w	80163d4 <HAL_TIM_PWM_Start_DMA+0x1a4>
 801627a:	a201      	add	r2, pc, #4	; (adr r2, 8016280 <HAL_TIM_PWM_Start_DMA+0x50>)
 801627c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016280:	080162b5 	.word	0x080162b5
 8016284:	080163d5 	.word	0x080163d5
 8016288:	080163d5 	.word	0x080163d5
 801628c:	080163d5 	.word	0x080163d5
 8016290:	080162fd 	.word	0x080162fd
 8016294:	080163d5 	.word	0x080163d5
 8016298:	080163d5 	.word	0x080163d5
 801629c:	080163d5 	.word	0x080163d5
 80162a0:	08016345 	.word	0x08016345
 80162a4:	080163d5 	.word	0x080163d5
 80162a8:	080163d5 	.word	0x080163d5
 80162ac:	080163d5 	.word	0x080163d5
 80162b0:	0801638d 	.word	0x0801638d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80162b4:	68fb      	ldr	r3, [r7, #12]
 80162b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162b8:	4a61      	ldr	r2, [pc, #388]	; (8016440 <HAL_TIM_PWM_Start_DMA+0x210>)
 80162ba:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80162bc:	68fb      	ldr	r3, [r7, #12]
 80162be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162c0:	4a60      	ldr	r2, [pc, #384]	; (8016444 <HAL_TIM_PWM_Start_DMA+0x214>)
 80162c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80162c4:	68fb      	ldr	r3, [r7, #12]
 80162c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162c8:	4a5f      	ldr	r2, [pc, #380]	; (8016448 <HAL_TIM_PWM_Start_DMA+0x218>)
 80162ca:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 80162cc:	68fb      	ldr	r3, [r7, #12]
 80162ce:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80162d0:	6879      	ldr	r1, [r7, #4]
 80162d2:	68fb      	ldr	r3, [r7, #12]
 80162d4:	681b      	ldr	r3, [r3, #0]
 80162d6:	3334      	adds	r3, #52	; 0x34
 80162d8:	461a      	mov	r2, r3
 80162da:	887b      	ldrh	r3, [r7, #2]
 80162dc:	f7fc f860 	bl	80123a0 <HAL_DMA_Start_IT>
 80162e0:	4603      	mov	r3, r0
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d001      	beq.n	80162ea <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 80162e6:	2301      	movs	r3, #1
 80162e8:	e0a5      	b.n	8016436 <HAL_TIM_PWM_Start_DMA+0x206>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80162ea:	68fb      	ldr	r3, [r7, #12]
 80162ec:	681b      	ldr	r3, [r3, #0]
 80162ee:	68da      	ldr	r2, [r3, #12]
 80162f0:	68fb      	ldr	r3, [r7, #12]
 80162f2:	681b      	ldr	r3, [r3, #0]
 80162f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80162f8:	60da      	str	r2, [r3, #12]
      break;
 80162fa:	e06c      	b.n	80163d6 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80162fc:	68fb      	ldr	r3, [r7, #12]
 80162fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016300:	4a4f      	ldr	r2, [pc, #316]	; (8016440 <HAL_TIM_PWM_Start_DMA+0x210>)
 8016302:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8016304:	68fb      	ldr	r3, [r7, #12]
 8016306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016308:	4a4e      	ldr	r2, [pc, #312]	; (8016444 <HAL_TIM_PWM_Start_DMA+0x214>)
 801630a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 801630c:	68fb      	ldr	r3, [r7, #12]
 801630e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016310:	4a4d      	ldr	r2, [pc, #308]	; (8016448 <HAL_TIM_PWM_Start_DMA+0x218>)
 8016312:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8016318:	6879      	ldr	r1, [r7, #4]
 801631a:	68fb      	ldr	r3, [r7, #12]
 801631c:	681b      	ldr	r3, [r3, #0]
 801631e:	3338      	adds	r3, #56	; 0x38
 8016320:	461a      	mov	r2, r3
 8016322:	887b      	ldrh	r3, [r7, #2]
 8016324:	f7fc f83c 	bl	80123a0 <HAL_DMA_Start_IT>
 8016328:	4603      	mov	r3, r0
 801632a:	2b00      	cmp	r3, #0
 801632c:	d001      	beq.n	8016332 <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 801632e:	2301      	movs	r3, #1
 8016330:	e081      	b.n	8016436 <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8016332:	68fb      	ldr	r3, [r7, #12]
 8016334:	681b      	ldr	r3, [r3, #0]
 8016336:	68da      	ldr	r2, [r3, #12]
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	681b      	ldr	r3, [r3, #0]
 801633c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8016340:	60da      	str	r2, [r3, #12]
      break;
 8016342:	e048      	b.n	80163d6 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8016344:	68fb      	ldr	r3, [r7, #12]
 8016346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016348:	4a3d      	ldr	r2, [pc, #244]	; (8016440 <HAL_TIM_PWM_Start_DMA+0x210>)
 801634a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 801634c:	68fb      	ldr	r3, [r7, #12]
 801634e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016350:	4a3c      	ldr	r2, [pc, #240]	; (8016444 <HAL_TIM_PWM_Start_DMA+0x214>)
 8016352:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8016354:	68fb      	ldr	r3, [r7, #12]
 8016356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016358:	4a3b      	ldr	r2, [pc, #236]	; (8016448 <HAL_TIM_PWM_Start_DMA+0x218>)
 801635a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 801635c:	68fb      	ldr	r3, [r7, #12]
 801635e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8016360:	6879      	ldr	r1, [r7, #4]
 8016362:	68fb      	ldr	r3, [r7, #12]
 8016364:	681b      	ldr	r3, [r3, #0]
 8016366:	333c      	adds	r3, #60	; 0x3c
 8016368:	461a      	mov	r2, r3
 801636a:	887b      	ldrh	r3, [r7, #2]
 801636c:	f7fc f818 	bl	80123a0 <HAL_DMA_Start_IT>
 8016370:	4603      	mov	r3, r0
 8016372:	2b00      	cmp	r3, #0
 8016374:	d001      	beq.n	801637a <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 8016376:	2301      	movs	r3, #1
 8016378:	e05d      	b.n	8016436 <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 801637a:	68fb      	ldr	r3, [r7, #12]
 801637c:	681b      	ldr	r3, [r3, #0]
 801637e:	68da      	ldr	r2, [r3, #12]
 8016380:	68fb      	ldr	r3, [r7, #12]
 8016382:	681b      	ldr	r3, [r3, #0]
 8016384:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8016388:	60da      	str	r2, [r3, #12]
      break;
 801638a:	e024      	b.n	80163d6 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 801638c:	68fb      	ldr	r3, [r7, #12]
 801638e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016390:	4a2b      	ldr	r2, [pc, #172]	; (8016440 <HAL_TIM_PWM_Start_DMA+0x210>)
 8016392:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8016394:	68fb      	ldr	r3, [r7, #12]
 8016396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016398:	4a2a      	ldr	r2, [pc, #168]	; (8016444 <HAL_TIM_PWM_Start_DMA+0x214>)
 801639a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 801639c:	68fb      	ldr	r3, [r7, #12]
 801639e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80163a0:	4a29      	ldr	r2, [pc, #164]	; (8016448 <HAL_TIM_PWM_Start_DMA+0x218>)
 80163a2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 80163a4:	68fb      	ldr	r3, [r7, #12]
 80163a6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80163a8:	6879      	ldr	r1, [r7, #4]
 80163aa:	68fb      	ldr	r3, [r7, #12]
 80163ac:	681b      	ldr	r3, [r3, #0]
 80163ae:	3340      	adds	r3, #64	; 0x40
 80163b0:	461a      	mov	r2, r3
 80163b2:	887b      	ldrh	r3, [r7, #2]
 80163b4:	f7fb fff4 	bl	80123a0 <HAL_DMA_Start_IT>
 80163b8:	4603      	mov	r3, r0
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d001      	beq.n	80163c2 <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 80163be:	2301      	movs	r3, #1
 80163c0:	e039      	b.n	8016436 <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80163c2:	68fb      	ldr	r3, [r7, #12]
 80163c4:	681b      	ldr	r3, [r3, #0]
 80163c6:	68da      	ldr	r2, [r3, #12]
 80163c8:	68fb      	ldr	r3, [r7, #12]
 80163ca:	681b      	ldr	r3, [r3, #0]
 80163cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80163d0:	60da      	str	r2, [r3, #12]
      break;
 80163d2:	e000      	b.n	80163d6 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 80163d4:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80163d6:	68fb      	ldr	r3, [r7, #12]
 80163d8:	681b      	ldr	r3, [r3, #0]
 80163da:	2201      	movs	r2, #1
 80163dc:	68b9      	ldr	r1, [r7, #8]
 80163de:	4618      	mov	r0, r3
 80163e0:	f000 fe66 	bl	80170b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80163e4:	68fb      	ldr	r3, [r7, #12]
 80163e6:	681b      	ldr	r3, [r3, #0]
 80163e8:	4a18      	ldr	r2, [pc, #96]	; (801644c <HAL_TIM_PWM_Start_DMA+0x21c>)
 80163ea:	4293      	cmp	r3, r2
 80163ec:	d004      	beq.n	80163f8 <HAL_TIM_PWM_Start_DMA+0x1c8>
 80163ee:	68fb      	ldr	r3, [r7, #12]
 80163f0:	681b      	ldr	r3, [r3, #0]
 80163f2:	4a17      	ldr	r2, [pc, #92]	; (8016450 <HAL_TIM_PWM_Start_DMA+0x220>)
 80163f4:	4293      	cmp	r3, r2
 80163f6:	d101      	bne.n	80163fc <HAL_TIM_PWM_Start_DMA+0x1cc>
 80163f8:	2301      	movs	r3, #1
 80163fa:	e000      	b.n	80163fe <HAL_TIM_PWM_Start_DMA+0x1ce>
 80163fc:	2300      	movs	r3, #0
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d007      	beq.n	8016412 <HAL_TIM_PWM_Start_DMA+0x1e2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8016402:	68fb      	ldr	r3, [r7, #12]
 8016404:	681b      	ldr	r3, [r3, #0]
 8016406:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016408:	68fb      	ldr	r3, [r7, #12]
 801640a:	681b      	ldr	r3, [r3, #0]
 801640c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8016410:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016412:	68fb      	ldr	r3, [r7, #12]
 8016414:	681b      	ldr	r3, [r3, #0]
 8016416:	689b      	ldr	r3, [r3, #8]
 8016418:	f003 0307 	and.w	r3, r3, #7
 801641c:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801641e:	697b      	ldr	r3, [r7, #20]
 8016420:	2b06      	cmp	r3, #6
 8016422:	d007      	beq.n	8016434 <HAL_TIM_PWM_Start_DMA+0x204>
  {
    __HAL_TIM_ENABLE(htim);
 8016424:	68fb      	ldr	r3, [r7, #12]
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	681a      	ldr	r2, [r3, #0]
 801642a:	68fb      	ldr	r3, [r7, #12]
 801642c:	681b      	ldr	r3, [r3, #0]
 801642e:	f042 0201 	orr.w	r2, r2, #1
 8016432:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8016434:	2300      	movs	r3, #0
}
 8016436:	4618      	mov	r0, r3
 8016438:	3718      	adds	r7, #24
 801643a:	46bd      	mov	sp, r7
 801643c:	bd80      	pop	{r7, pc}
 801643e:	bf00      	nop
 8016440:	080169fb 	.word	0x080169fb
 8016444:	08016a6b 	.word	0x08016a6b
 8016448:	080169d7 	.word	0x080169d7
 801644c:	40010000 	.word	0x40010000
 8016450:	40010400 	.word	0x40010400

08016454 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8016454:	b580      	push	{r7, lr}
 8016456:	b082      	sub	sp, #8
 8016458:	af00      	add	r7, sp, #0
 801645a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	681b      	ldr	r3, [r3, #0]
 8016460:	691b      	ldr	r3, [r3, #16]
 8016462:	f003 0302 	and.w	r3, r3, #2
 8016466:	2b02      	cmp	r3, #2
 8016468:	d122      	bne.n	80164b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	681b      	ldr	r3, [r3, #0]
 801646e:	68db      	ldr	r3, [r3, #12]
 8016470:	f003 0302 	and.w	r3, r3, #2
 8016474:	2b02      	cmp	r3, #2
 8016476:	d11b      	bne.n	80164b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	681b      	ldr	r3, [r3, #0]
 801647c:	f06f 0202 	mvn.w	r2, #2
 8016480:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	2201      	movs	r2, #1
 8016486:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	681b      	ldr	r3, [r3, #0]
 801648c:	699b      	ldr	r3, [r3, #24]
 801648e:	f003 0303 	and.w	r3, r3, #3
 8016492:	2b00      	cmp	r3, #0
 8016494:	d003      	beq.n	801649e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8016496:	6878      	ldr	r0, [r7, #4]
 8016498:	f000 fa6b 	bl	8016972 <HAL_TIM_IC_CaptureCallback>
 801649c:	e005      	b.n	80164aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801649e:	6878      	ldr	r0, [r7, #4]
 80164a0:	f000 fa5d 	bl	801695e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80164a4:	6878      	ldr	r0, [r7, #4]
 80164a6:	f000 fa6e 	bl	8016986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	2200      	movs	r2, #0
 80164ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	681b      	ldr	r3, [r3, #0]
 80164b4:	691b      	ldr	r3, [r3, #16]
 80164b6:	f003 0304 	and.w	r3, r3, #4
 80164ba:	2b04      	cmp	r3, #4
 80164bc:	d122      	bne.n	8016504 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	681b      	ldr	r3, [r3, #0]
 80164c2:	68db      	ldr	r3, [r3, #12]
 80164c4:	f003 0304 	and.w	r3, r3, #4
 80164c8:	2b04      	cmp	r3, #4
 80164ca:	d11b      	bne.n	8016504 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	681b      	ldr	r3, [r3, #0]
 80164d0:	f06f 0204 	mvn.w	r2, #4
 80164d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	2202      	movs	r2, #2
 80164da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	681b      	ldr	r3, [r3, #0]
 80164e0:	699b      	ldr	r3, [r3, #24]
 80164e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d003      	beq.n	80164f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80164ea:	6878      	ldr	r0, [r7, #4]
 80164ec:	f000 fa41 	bl	8016972 <HAL_TIM_IC_CaptureCallback>
 80164f0:	e005      	b.n	80164fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80164f2:	6878      	ldr	r0, [r7, #4]
 80164f4:	f000 fa33 	bl	801695e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80164f8:	6878      	ldr	r0, [r7, #4]
 80164fa:	f000 fa44 	bl	8016986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	2200      	movs	r2, #0
 8016502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	681b      	ldr	r3, [r3, #0]
 8016508:	691b      	ldr	r3, [r3, #16]
 801650a:	f003 0308 	and.w	r3, r3, #8
 801650e:	2b08      	cmp	r3, #8
 8016510:	d122      	bne.n	8016558 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	681b      	ldr	r3, [r3, #0]
 8016516:	68db      	ldr	r3, [r3, #12]
 8016518:	f003 0308 	and.w	r3, r3, #8
 801651c:	2b08      	cmp	r3, #8
 801651e:	d11b      	bne.n	8016558 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	681b      	ldr	r3, [r3, #0]
 8016524:	f06f 0208 	mvn.w	r2, #8
 8016528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	2204      	movs	r2, #4
 801652e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	681b      	ldr	r3, [r3, #0]
 8016534:	69db      	ldr	r3, [r3, #28]
 8016536:	f003 0303 	and.w	r3, r3, #3
 801653a:	2b00      	cmp	r3, #0
 801653c:	d003      	beq.n	8016546 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801653e:	6878      	ldr	r0, [r7, #4]
 8016540:	f000 fa17 	bl	8016972 <HAL_TIM_IC_CaptureCallback>
 8016544:	e005      	b.n	8016552 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016546:	6878      	ldr	r0, [r7, #4]
 8016548:	f000 fa09 	bl	801695e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801654c:	6878      	ldr	r0, [r7, #4]
 801654e:	f000 fa1a 	bl	8016986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	2200      	movs	r2, #0
 8016556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	681b      	ldr	r3, [r3, #0]
 801655c:	691b      	ldr	r3, [r3, #16]
 801655e:	f003 0310 	and.w	r3, r3, #16
 8016562:	2b10      	cmp	r3, #16
 8016564:	d122      	bne.n	80165ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	681b      	ldr	r3, [r3, #0]
 801656a:	68db      	ldr	r3, [r3, #12]
 801656c:	f003 0310 	and.w	r3, r3, #16
 8016570:	2b10      	cmp	r3, #16
 8016572:	d11b      	bne.n	80165ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	f06f 0210 	mvn.w	r2, #16
 801657c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	2208      	movs	r2, #8
 8016582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	681b      	ldr	r3, [r3, #0]
 8016588:	69db      	ldr	r3, [r3, #28]
 801658a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801658e:	2b00      	cmp	r3, #0
 8016590:	d003      	beq.n	801659a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016592:	6878      	ldr	r0, [r7, #4]
 8016594:	f000 f9ed 	bl	8016972 <HAL_TIM_IC_CaptureCallback>
 8016598:	e005      	b.n	80165a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801659a:	6878      	ldr	r0, [r7, #4]
 801659c:	f000 f9df 	bl	801695e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80165a0:	6878      	ldr	r0, [r7, #4]
 80165a2:	f000 f9f0 	bl	8016986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	2200      	movs	r2, #0
 80165aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	691b      	ldr	r3, [r3, #16]
 80165b2:	f003 0301 	and.w	r3, r3, #1
 80165b6:	2b01      	cmp	r3, #1
 80165b8:	d10e      	bne.n	80165d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	681b      	ldr	r3, [r3, #0]
 80165be:	68db      	ldr	r3, [r3, #12]
 80165c0:	f003 0301 	and.w	r3, r3, #1
 80165c4:	2b01      	cmp	r3, #1
 80165c6:	d107      	bne.n	80165d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	681b      	ldr	r3, [r3, #0]
 80165cc:	f06f 0201 	mvn.w	r2, #1
 80165d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80165d2:	6878      	ldr	r0, [r7, #4]
 80165d4:	f7f4 fffe 	bl	800b5d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	681b      	ldr	r3, [r3, #0]
 80165dc:	691b      	ldr	r3, [r3, #16]
 80165de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80165e2:	2b80      	cmp	r3, #128	; 0x80
 80165e4:	d10e      	bne.n	8016604 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	681b      	ldr	r3, [r3, #0]
 80165ea:	68db      	ldr	r3, [r3, #12]
 80165ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80165f0:	2b80      	cmp	r3, #128	; 0x80
 80165f2:	d107      	bne.n	8016604 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	681b      	ldr	r3, [r3, #0]
 80165f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80165fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80165fe:	6878      	ldr	r0, [r7, #4]
 8016600:	f000 fe02 	bl	8017208 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	681b      	ldr	r3, [r3, #0]
 8016608:	691b      	ldr	r3, [r3, #16]
 801660a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801660e:	2b40      	cmp	r3, #64	; 0x40
 8016610:	d10e      	bne.n	8016630 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	681b      	ldr	r3, [r3, #0]
 8016616:	68db      	ldr	r3, [r3, #12]
 8016618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801661c:	2b40      	cmp	r3, #64	; 0x40
 801661e:	d107      	bne.n	8016630 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	681b      	ldr	r3, [r3, #0]
 8016624:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8016628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801662a:	6878      	ldr	r0, [r7, #4]
 801662c:	f000 f9bf 	bl	80169ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	681b      	ldr	r3, [r3, #0]
 8016634:	691b      	ldr	r3, [r3, #16]
 8016636:	f003 0320 	and.w	r3, r3, #32
 801663a:	2b20      	cmp	r3, #32
 801663c:	d10e      	bne.n	801665c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	681b      	ldr	r3, [r3, #0]
 8016642:	68db      	ldr	r3, [r3, #12]
 8016644:	f003 0320 	and.w	r3, r3, #32
 8016648:	2b20      	cmp	r3, #32
 801664a:	d107      	bne.n	801665c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	681b      	ldr	r3, [r3, #0]
 8016650:	f06f 0220 	mvn.w	r2, #32
 8016654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8016656:	6878      	ldr	r0, [r7, #4]
 8016658:	f000 fdcc 	bl	80171f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801665c:	bf00      	nop
 801665e:	3708      	adds	r7, #8
 8016660:	46bd      	mov	sp, r7
 8016662:	bd80      	pop	{r7, pc}

08016664 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8016664:	b580      	push	{r7, lr}
 8016666:	b084      	sub	sp, #16
 8016668:	af00      	add	r7, sp, #0
 801666a:	60f8      	str	r0, [r7, #12]
 801666c:	60b9      	str	r1, [r7, #8]
 801666e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016670:	68fb      	ldr	r3, [r7, #12]
 8016672:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016676:	2b01      	cmp	r3, #1
 8016678:	d101      	bne.n	801667e <HAL_TIM_PWM_ConfigChannel+0x1a>
 801667a:	2302      	movs	r3, #2
 801667c:	e0b4      	b.n	80167e8 <HAL_TIM_PWM_ConfigChannel+0x184>
 801667e:	68fb      	ldr	r3, [r7, #12]
 8016680:	2201      	movs	r2, #1
 8016682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8016686:	68fb      	ldr	r3, [r7, #12]
 8016688:	2202      	movs	r2, #2
 801668a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	2b0c      	cmp	r3, #12
 8016692:	f200 809f 	bhi.w	80167d4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8016696:	a201      	add	r2, pc, #4	; (adr r2, 801669c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8016698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801669c:	080166d1 	.word	0x080166d1
 80166a0:	080167d5 	.word	0x080167d5
 80166a4:	080167d5 	.word	0x080167d5
 80166a8:	080167d5 	.word	0x080167d5
 80166ac:	08016711 	.word	0x08016711
 80166b0:	080167d5 	.word	0x080167d5
 80166b4:	080167d5 	.word	0x080167d5
 80166b8:	080167d5 	.word	0x080167d5
 80166bc:	08016753 	.word	0x08016753
 80166c0:	080167d5 	.word	0x080167d5
 80166c4:	080167d5 	.word	0x080167d5
 80166c8:	080167d5 	.word	0x080167d5
 80166cc:	08016793 	.word	0x08016793
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80166d0:	68fb      	ldr	r3, [r7, #12]
 80166d2:	681b      	ldr	r3, [r3, #0]
 80166d4:	68b9      	ldr	r1, [r7, #8]
 80166d6:	4618      	mov	r0, r3
 80166d8:	f000 faa0 	bl	8016c1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80166dc:	68fb      	ldr	r3, [r7, #12]
 80166de:	681b      	ldr	r3, [r3, #0]
 80166e0:	699a      	ldr	r2, [r3, #24]
 80166e2:	68fb      	ldr	r3, [r7, #12]
 80166e4:	681b      	ldr	r3, [r3, #0]
 80166e6:	f042 0208 	orr.w	r2, r2, #8
 80166ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80166ec:	68fb      	ldr	r3, [r7, #12]
 80166ee:	681b      	ldr	r3, [r3, #0]
 80166f0:	699a      	ldr	r2, [r3, #24]
 80166f2:	68fb      	ldr	r3, [r7, #12]
 80166f4:	681b      	ldr	r3, [r3, #0]
 80166f6:	f022 0204 	bic.w	r2, r2, #4
 80166fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80166fc:	68fb      	ldr	r3, [r7, #12]
 80166fe:	681b      	ldr	r3, [r3, #0]
 8016700:	6999      	ldr	r1, [r3, #24]
 8016702:	68bb      	ldr	r3, [r7, #8]
 8016704:	691a      	ldr	r2, [r3, #16]
 8016706:	68fb      	ldr	r3, [r7, #12]
 8016708:	681b      	ldr	r3, [r3, #0]
 801670a:	430a      	orrs	r2, r1
 801670c:	619a      	str	r2, [r3, #24]
      break;
 801670e:	e062      	b.n	80167d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8016710:	68fb      	ldr	r3, [r7, #12]
 8016712:	681b      	ldr	r3, [r3, #0]
 8016714:	68b9      	ldr	r1, [r7, #8]
 8016716:	4618      	mov	r0, r3
 8016718:	f000 faf0 	bl	8016cfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801671c:	68fb      	ldr	r3, [r7, #12]
 801671e:	681b      	ldr	r3, [r3, #0]
 8016720:	699a      	ldr	r2, [r3, #24]
 8016722:	68fb      	ldr	r3, [r7, #12]
 8016724:	681b      	ldr	r3, [r3, #0]
 8016726:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801672a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801672c:	68fb      	ldr	r3, [r7, #12]
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	699a      	ldr	r2, [r3, #24]
 8016732:	68fb      	ldr	r3, [r7, #12]
 8016734:	681b      	ldr	r3, [r3, #0]
 8016736:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801673a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801673c:	68fb      	ldr	r3, [r7, #12]
 801673e:	681b      	ldr	r3, [r3, #0]
 8016740:	6999      	ldr	r1, [r3, #24]
 8016742:	68bb      	ldr	r3, [r7, #8]
 8016744:	691b      	ldr	r3, [r3, #16]
 8016746:	021a      	lsls	r2, r3, #8
 8016748:	68fb      	ldr	r3, [r7, #12]
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	430a      	orrs	r2, r1
 801674e:	619a      	str	r2, [r3, #24]
      break;
 8016750:	e041      	b.n	80167d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8016752:	68fb      	ldr	r3, [r7, #12]
 8016754:	681b      	ldr	r3, [r3, #0]
 8016756:	68b9      	ldr	r1, [r7, #8]
 8016758:	4618      	mov	r0, r3
 801675a:	f000 fb45 	bl	8016de8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801675e:	68fb      	ldr	r3, [r7, #12]
 8016760:	681b      	ldr	r3, [r3, #0]
 8016762:	69da      	ldr	r2, [r3, #28]
 8016764:	68fb      	ldr	r3, [r7, #12]
 8016766:	681b      	ldr	r3, [r3, #0]
 8016768:	f042 0208 	orr.w	r2, r2, #8
 801676c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801676e:	68fb      	ldr	r3, [r7, #12]
 8016770:	681b      	ldr	r3, [r3, #0]
 8016772:	69da      	ldr	r2, [r3, #28]
 8016774:	68fb      	ldr	r3, [r7, #12]
 8016776:	681b      	ldr	r3, [r3, #0]
 8016778:	f022 0204 	bic.w	r2, r2, #4
 801677c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801677e:	68fb      	ldr	r3, [r7, #12]
 8016780:	681b      	ldr	r3, [r3, #0]
 8016782:	69d9      	ldr	r1, [r3, #28]
 8016784:	68bb      	ldr	r3, [r7, #8]
 8016786:	691a      	ldr	r2, [r3, #16]
 8016788:	68fb      	ldr	r3, [r7, #12]
 801678a:	681b      	ldr	r3, [r3, #0]
 801678c:	430a      	orrs	r2, r1
 801678e:	61da      	str	r2, [r3, #28]
      break;
 8016790:	e021      	b.n	80167d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8016792:	68fb      	ldr	r3, [r7, #12]
 8016794:	681b      	ldr	r3, [r3, #0]
 8016796:	68b9      	ldr	r1, [r7, #8]
 8016798:	4618      	mov	r0, r3
 801679a:	f000 fb99 	bl	8016ed0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801679e:	68fb      	ldr	r3, [r7, #12]
 80167a0:	681b      	ldr	r3, [r3, #0]
 80167a2:	69da      	ldr	r2, [r3, #28]
 80167a4:	68fb      	ldr	r3, [r7, #12]
 80167a6:	681b      	ldr	r3, [r3, #0]
 80167a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80167ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80167ae:	68fb      	ldr	r3, [r7, #12]
 80167b0:	681b      	ldr	r3, [r3, #0]
 80167b2:	69da      	ldr	r2, [r3, #28]
 80167b4:	68fb      	ldr	r3, [r7, #12]
 80167b6:	681b      	ldr	r3, [r3, #0]
 80167b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80167bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80167be:	68fb      	ldr	r3, [r7, #12]
 80167c0:	681b      	ldr	r3, [r3, #0]
 80167c2:	69d9      	ldr	r1, [r3, #28]
 80167c4:	68bb      	ldr	r3, [r7, #8]
 80167c6:	691b      	ldr	r3, [r3, #16]
 80167c8:	021a      	lsls	r2, r3, #8
 80167ca:	68fb      	ldr	r3, [r7, #12]
 80167cc:	681b      	ldr	r3, [r3, #0]
 80167ce:	430a      	orrs	r2, r1
 80167d0:	61da      	str	r2, [r3, #28]
      break;
 80167d2:	e000      	b.n	80167d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80167d4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80167d6:	68fb      	ldr	r3, [r7, #12]
 80167d8:	2201      	movs	r2, #1
 80167da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80167de:	68fb      	ldr	r3, [r7, #12]
 80167e0:	2200      	movs	r2, #0
 80167e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80167e6:	2300      	movs	r3, #0
}
 80167e8:	4618      	mov	r0, r3
 80167ea:	3710      	adds	r7, #16
 80167ec:	46bd      	mov	sp, r7
 80167ee:	bd80      	pop	{r7, pc}

080167f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80167f0:	b580      	push	{r7, lr}
 80167f2:	b084      	sub	sp, #16
 80167f4:	af00      	add	r7, sp, #0
 80167f6:	6078      	str	r0, [r7, #4]
 80167f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016800:	2b01      	cmp	r3, #1
 8016802:	d101      	bne.n	8016808 <HAL_TIM_ConfigClockSource+0x18>
 8016804:	2302      	movs	r3, #2
 8016806:	e0a6      	b.n	8016956 <HAL_TIM_ConfigClockSource+0x166>
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	2201      	movs	r2, #1
 801680c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	2202      	movs	r2, #2
 8016814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	681b      	ldr	r3, [r3, #0]
 801681c:	689b      	ldr	r3, [r3, #8]
 801681e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8016820:	68fb      	ldr	r3, [r7, #12]
 8016822:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8016826:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8016828:	68fb      	ldr	r3, [r7, #12]
 801682a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801682e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	681b      	ldr	r3, [r3, #0]
 8016834:	68fa      	ldr	r2, [r7, #12]
 8016836:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8016838:	683b      	ldr	r3, [r7, #0]
 801683a:	681b      	ldr	r3, [r3, #0]
 801683c:	2b40      	cmp	r3, #64	; 0x40
 801683e:	d067      	beq.n	8016910 <HAL_TIM_ConfigClockSource+0x120>
 8016840:	2b40      	cmp	r3, #64	; 0x40
 8016842:	d80b      	bhi.n	801685c <HAL_TIM_ConfigClockSource+0x6c>
 8016844:	2b10      	cmp	r3, #16
 8016846:	d073      	beq.n	8016930 <HAL_TIM_ConfigClockSource+0x140>
 8016848:	2b10      	cmp	r3, #16
 801684a:	d802      	bhi.n	8016852 <HAL_TIM_ConfigClockSource+0x62>
 801684c:	2b00      	cmp	r3, #0
 801684e:	d06f      	beq.n	8016930 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8016850:	e078      	b.n	8016944 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8016852:	2b20      	cmp	r3, #32
 8016854:	d06c      	beq.n	8016930 <HAL_TIM_ConfigClockSource+0x140>
 8016856:	2b30      	cmp	r3, #48	; 0x30
 8016858:	d06a      	beq.n	8016930 <HAL_TIM_ConfigClockSource+0x140>
      break;
 801685a:	e073      	b.n	8016944 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 801685c:	2b70      	cmp	r3, #112	; 0x70
 801685e:	d00d      	beq.n	801687c <HAL_TIM_ConfigClockSource+0x8c>
 8016860:	2b70      	cmp	r3, #112	; 0x70
 8016862:	d804      	bhi.n	801686e <HAL_TIM_ConfigClockSource+0x7e>
 8016864:	2b50      	cmp	r3, #80	; 0x50
 8016866:	d033      	beq.n	80168d0 <HAL_TIM_ConfigClockSource+0xe0>
 8016868:	2b60      	cmp	r3, #96	; 0x60
 801686a:	d041      	beq.n	80168f0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 801686c:	e06a      	b.n	8016944 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 801686e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016872:	d066      	beq.n	8016942 <HAL_TIM_ConfigClockSource+0x152>
 8016874:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8016878:	d017      	beq.n	80168aa <HAL_TIM_ConfigClockSource+0xba>
      break;
 801687a:	e063      	b.n	8016944 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	6818      	ldr	r0, [r3, #0]
 8016880:	683b      	ldr	r3, [r7, #0]
 8016882:	6899      	ldr	r1, [r3, #8]
 8016884:	683b      	ldr	r3, [r7, #0]
 8016886:	685a      	ldr	r2, [r3, #4]
 8016888:	683b      	ldr	r3, [r7, #0]
 801688a:	68db      	ldr	r3, [r3, #12]
 801688c:	f000 fbf0 	bl	8017070 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	681b      	ldr	r3, [r3, #0]
 8016894:	689b      	ldr	r3, [r3, #8]
 8016896:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8016898:	68fb      	ldr	r3, [r7, #12]
 801689a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801689e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	681b      	ldr	r3, [r3, #0]
 80168a4:	68fa      	ldr	r2, [r7, #12]
 80168a6:	609a      	str	r2, [r3, #8]
      break;
 80168a8:	e04c      	b.n	8016944 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	6818      	ldr	r0, [r3, #0]
 80168ae:	683b      	ldr	r3, [r7, #0]
 80168b0:	6899      	ldr	r1, [r3, #8]
 80168b2:	683b      	ldr	r3, [r7, #0]
 80168b4:	685a      	ldr	r2, [r3, #4]
 80168b6:	683b      	ldr	r3, [r7, #0]
 80168b8:	68db      	ldr	r3, [r3, #12]
 80168ba:	f000 fbd9 	bl	8017070 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	681b      	ldr	r3, [r3, #0]
 80168c2:	689a      	ldr	r2, [r3, #8]
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	681b      	ldr	r3, [r3, #0]
 80168c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80168cc:	609a      	str	r2, [r3, #8]
      break;
 80168ce:	e039      	b.n	8016944 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	6818      	ldr	r0, [r3, #0]
 80168d4:	683b      	ldr	r3, [r7, #0]
 80168d6:	6859      	ldr	r1, [r3, #4]
 80168d8:	683b      	ldr	r3, [r7, #0]
 80168da:	68db      	ldr	r3, [r3, #12]
 80168dc:	461a      	mov	r2, r3
 80168de:	f000 fb4d 	bl	8016f7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	681b      	ldr	r3, [r3, #0]
 80168e6:	2150      	movs	r1, #80	; 0x50
 80168e8:	4618      	mov	r0, r3
 80168ea:	f000 fba6 	bl	801703a <TIM_ITRx_SetConfig>
      break;
 80168ee:	e029      	b.n	8016944 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	6818      	ldr	r0, [r3, #0]
 80168f4:	683b      	ldr	r3, [r7, #0]
 80168f6:	6859      	ldr	r1, [r3, #4]
 80168f8:	683b      	ldr	r3, [r7, #0]
 80168fa:	68db      	ldr	r3, [r3, #12]
 80168fc:	461a      	mov	r2, r3
 80168fe:	f000 fb6c 	bl	8016fda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	681b      	ldr	r3, [r3, #0]
 8016906:	2160      	movs	r1, #96	; 0x60
 8016908:	4618      	mov	r0, r3
 801690a:	f000 fb96 	bl	801703a <TIM_ITRx_SetConfig>
      break;
 801690e:	e019      	b.n	8016944 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	6818      	ldr	r0, [r3, #0]
 8016914:	683b      	ldr	r3, [r7, #0]
 8016916:	6859      	ldr	r1, [r3, #4]
 8016918:	683b      	ldr	r3, [r7, #0]
 801691a:	68db      	ldr	r3, [r3, #12]
 801691c:	461a      	mov	r2, r3
 801691e:	f000 fb2d 	bl	8016f7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	681b      	ldr	r3, [r3, #0]
 8016926:	2140      	movs	r1, #64	; 0x40
 8016928:	4618      	mov	r0, r3
 801692a:	f000 fb86 	bl	801703a <TIM_ITRx_SetConfig>
      break;
 801692e:	e009      	b.n	8016944 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	681a      	ldr	r2, [r3, #0]
 8016934:	683b      	ldr	r3, [r7, #0]
 8016936:	681b      	ldr	r3, [r3, #0]
 8016938:	4619      	mov	r1, r3
 801693a:	4610      	mov	r0, r2
 801693c:	f000 fb7d 	bl	801703a <TIM_ITRx_SetConfig>
      break;
 8016940:	e000      	b.n	8016944 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8016942:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	2201      	movs	r2, #1
 8016948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	2200      	movs	r2, #0
 8016950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8016954:	2300      	movs	r3, #0
}
 8016956:	4618      	mov	r0, r3
 8016958:	3710      	adds	r7, #16
 801695a:	46bd      	mov	sp, r7
 801695c:	bd80      	pop	{r7, pc}

0801695e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801695e:	b480      	push	{r7}
 8016960:	b083      	sub	sp, #12
 8016962:	af00      	add	r7, sp, #0
 8016964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8016966:	bf00      	nop
 8016968:	370c      	adds	r7, #12
 801696a:	46bd      	mov	sp, r7
 801696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016970:	4770      	bx	lr

08016972 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8016972:	b480      	push	{r7}
 8016974:	b083      	sub	sp, #12
 8016976:	af00      	add	r7, sp, #0
 8016978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801697a:	bf00      	nop
 801697c:	370c      	adds	r7, #12
 801697e:	46bd      	mov	sp, r7
 8016980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016984:	4770      	bx	lr

08016986 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8016986:	b480      	push	{r7}
 8016988:	b083      	sub	sp, #12
 801698a:	af00      	add	r7, sp, #0
 801698c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801698e:	bf00      	nop
 8016990:	370c      	adds	r7, #12
 8016992:	46bd      	mov	sp, r7
 8016994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016998:	4770      	bx	lr

0801699a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 801699a:	b480      	push	{r7}
 801699c:	b083      	sub	sp, #12
 801699e:	af00      	add	r7, sp, #0
 80169a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80169a2:	bf00      	nop
 80169a4:	370c      	adds	r7, #12
 80169a6:	46bd      	mov	sp, r7
 80169a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169ac:	4770      	bx	lr

080169ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80169ae:	b480      	push	{r7}
 80169b0:	b083      	sub	sp, #12
 80169b2:	af00      	add	r7, sp, #0
 80169b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80169b6:	bf00      	nop
 80169b8:	370c      	adds	r7, #12
 80169ba:	46bd      	mov	sp, r7
 80169bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169c0:	4770      	bx	lr

080169c2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80169c2:	b480      	push	{r7}
 80169c4:	b083      	sub	sp, #12
 80169c6:	af00      	add	r7, sp, #0
 80169c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80169ca:	bf00      	nop
 80169cc:	370c      	adds	r7, #12
 80169ce:	46bd      	mov	sp, r7
 80169d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169d4:	4770      	bx	lr

080169d6 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80169d6:	b580      	push	{r7, lr}
 80169d8:	b084      	sub	sp, #16
 80169da:	af00      	add	r7, sp, #0
 80169dc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80169e2:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 80169e4:	68fb      	ldr	r3, [r7, #12]
 80169e6:	2201      	movs	r2, #1
 80169e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80169ec:	68f8      	ldr	r0, [r7, #12]
 80169ee:	f7ff ffe8 	bl	80169c2 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 80169f2:	bf00      	nop
 80169f4:	3710      	adds	r7, #16
 80169f6:	46bd      	mov	sp, r7
 80169f8:	bd80      	pop	{r7, pc}

080169fa <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80169fa:	b580      	push	{r7, lr}
 80169fc:	b084      	sub	sp, #16
 80169fe:	af00      	add	r7, sp, #0
 8016a00:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016a06:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8016a08:	68fb      	ldr	r3, [r7, #12]
 8016a0a:	2201      	movs	r2, #1
 8016a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8016a10:	68fb      	ldr	r3, [r7, #12]
 8016a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a14:	687a      	ldr	r2, [r7, #4]
 8016a16:	429a      	cmp	r2, r3
 8016a18:	d103      	bne.n	8016a22 <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8016a1a:	68fb      	ldr	r3, [r7, #12]
 8016a1c:	2201      	movs	r2, #1
 8016a1e:	771a      	strb	r2, [r3, #28]
 8016a20:	e019      	b.n	8016a56 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8016a22:	68fb      	ldr	r3, [r7, #12]
 8016a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016a26:	687a      	ldr	r2, [r7, #4]
 8016a28:	429a      	cmp	r2, r3
 8016a2a:	d103      	bne.n	8016a34 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8016a2c:	68fb      	ldr	r3, [r7, #12]
 8016a2e:	2202      	movs	r2, #2
 8016a30:	771a      	strb	r2, [r3, #28]
 8016a32:	e010      	b.n	8016a56 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8016a34:	68fb      	ldr	r3, [r7, #12]
 8016a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a38:	687a      	ldr	r2, [r7, #4]
 8016a3a:	429a      	cmp	r2, r3
 8016a3c:	d103      	bne.n	8016a46 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8016a3e:	68fb      	ldr	r3, [r7, #12]
 8016a40:	2204      	movs	r2, #4
 8016a42:	771a      	strb	r2, [r3, #28]
 8016a44:	e007      	b.n	8016a56 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8016a46:	68fb      	ldr	r3, [r7, #12]
 8016a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016a4a:	687a      	ldr	r2, [r7, #4]
 8016a4c:	429a      	cmp	r2, r3
 8016a4e:	d102      	bne.n	8016a56 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8016a50:	68fb      	ldr	r3, [r7, #12]
 8016a52:	2208      	movs	r2, #8
 8016a54:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016a56:	68f8      	ldr	r0, [r7, #12]
 8016a58:	f7ff ff95 	bl	8016986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016a5c:	68fb      	ldr	r3, [r7, #12]
 8016a5e:	2200      	movs	r2, #0
 8016a60:	771a      	strb	r2, [r3, #28]
}
 8016a62:	bf00      	nop
 8016a64:	3710      	adds	r7, #16
 8016a66:	46bd      	mov	sp, r7
 8016a68:	bd80      	pop	{r7, pc}

08016a6a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8016a6a:	b580      	push	{r7, lr}
 8016a6c:	b084      	sub	sp, #16
 8016a6e:	af00      	add	r7, sp, #0
 8016a70:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016a76:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8016a78:	68fb      	ldr	r3, [r7, #12]
 8016a7a:	2201      	movs	r2, #1
 8016a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8016a80:	68fb      	ldr	r3, [r7, #12]
 8016a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a84:	687a      	ldr	r2, [r7, #4]
 8016a86:	429a      	cmp	r2, r3
 8016a88:	d103      	bne.n	8016a92 <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8016a8a:	68fb      	ldr	r3, [r7, #12]
 8016a8c:	2201      	movs	r2, #1
 8016a8e:	771a      	strb	r2, [r3, #28]
 8016a90:	e019      	b.n	8016ac6 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8016a92:	68fb      	ldr	r3, [r7, #12]
 8016a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016a96:	687a      	ldr	r2, [r7, #4]
 8016a98:	429a      	cmp	r2, r3
 8016a9a:	d103      	bne.n	8016aa4 <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8016a9c:	68fb      	ldr	r3, [r7, #12]
 8016a9e:	2202      	movs	r2, #2
 8016aa0:	771a      	strb	r2, [r3, #28]
 8016aa2:	e010      	b.n	8016ac6 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8016aa4:	68fb      	ldr	r3, [r7, #12]
 8016aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016aa8:	687a      	ldr	r2, [r7, #4]
 8016aaa:	429a      	cmp	r2, r3
 8016aac:	d103      	bne.n	8016ab6 <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8016aae:	68fb      	ldr	r3, [r7, #12]
 8016ab0:	2204      	movs	r2, #4
 8016ab2:	771a      	strb	r2, [r3, #28]
 8016ab4:	e007      	b.n	8016ac6 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8016ab6:	68fb      	ldr	r3, [r7, #12]
 8016ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016aba:	687a      	ldr	r2, [r7, #4]
 8016abc:	429a      	cmp	r2, r3
 8016abe:	d102      	bne.n	8016ac6 <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8016ac0:	68fb      	ldr	r3, [r7, #12]
 8016ac2:	2208      	movs	r2, #8
 8016ac4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8016ac6:	68f8      	ldr	r0, [r7, #12]
 8016ac8:	f7ff ff67 	bl	801699a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016acc:	68fb      	ldr	r3, [r7, #12]
 8016ace:	2200      	movs	r2, #0
 8016ad0:	771a      	strb	r2, [r3, #28]
}
 8016ad2:	bf00      	nop
 8016ad4:	3710      	adds	r7, #16
 8016ad6:	46bd      	mov	sp, r7
 8016ad8:	bd80      	pop	{r7, pc}
	...

08016adc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8016adc:	b480      	push	{r7}
 8016ade:	b085      	sub	sp, #20
 8016ae0:	af00      	add	r7, sp, #0
 8016ae2:	6078      	str	r0, [r7, #4]
 8016ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	681b      	ldr	r3, [r3, #0]
 8016aea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	4a40      	ldr	r2, [pc, #256]	; (8016bf0 <TIM_Base_SetConfig+0x114>)
 8016af0:	4293      	cmp	r3, r2
 8016af2:	d013      	beq.n	8016b1c <TIM_Base_SetConfig+0x40>
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016afa:	d00f      	beq.n	8016b1c <TIM_Base_SetConfig+0x40>
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	4a3d      	ldr	r2, [pc, #244]	; (8016bf4 <TIM_Base_SetConfig+0x118>)
 8016b00:	4293      	cmp	r3, r2
 8016b02:	d00b      	beq.n	8016b1c <TIM_Base_SetConfig+0x40>
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	4a3c      	ldr	r2, [pc, #240]	; (8016bf8 <TIM_Base_SetConfig+0x11c>)
 8016b08:	4293      	cmp	r3, r2
 8016b0a:	d007      	beq.n	8016b1c <TIM_Base_SetConfig+0x40>
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	4a3b      	ldr	r2, [pc, #236]	; (8016bfc <TIM_Base_SetConfig+0x120>)
 8016b10:	4293      	cmp	r3, r2
 8016b12:	d003      	beq.n	8016b1c <TIM_Base_SetConfig+0x40>
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	4a3a      	ldr	r2, [pc, #232]	; (8016c00 <TIM_Base_SetConfig+0x124>)
 8016b18:	4293      	cmp	r3, r2
 8016b1a:	d108      	bne.n	8016b2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8016b1c:	68fb      	ldr	r3, [r7, #12]
 8016b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8016b22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8016b24:	683b      	ldr	r3, [r7, #0]
 8016b26:	685b      	ldr	r3, [r3, #4]
 8016b28:	68fa      	ldr	r2, [r7, #12]
 8016b2a:	4313      	orrs	r3, r2
 8016b2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	4a2f      	ldr	r2, [pc, #188]	; (8016bf0 <TIM_Base_SetConfig+0x114>)
 8016b32:	4293      	cmp	r3, r2
 8016b34:	d02b      	beq.n	8016b8e <TIM_Base_SetConfig+0xb2>
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016b3c:	d027      	beq.n	8016b8e <TIM_Base_SetConfig+0xb2>
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	4a2c      	ldr	r2, [pc, #176]	; (8016bf4 <TIM_Base_SetConfig+0x118>)
 8016b42:	4293      	cmp	r3, r2
 8016b44:	d023      	beq.n	8016b8e <TIM_Base_SetConfig+0xb2>
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	4a2b      	ldr	r2, [pc, #172]	; (8016bf8 <TIM_Base_SetConfig+0x11c>)
 8016b4a:	4293      	cmp	r3, r2
 8016b4c:	d01f      	beq.n	8016b8e <TIM_Base_SetConfig+0xb2>
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	4a2a      	ldr	r2, [pc, #168]	; (8016bfc <TIM_Base_SetConfig+0x120>)
 8016b52:	4293      	cmp	r3, r2
 8016b54:	d01b      	beq.n	8016b8e <TIM_Base_SetConfig+0xb2>
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	4a29      	ldr	r2, [pc, #164]	; (8016c00 <TIM_Base_SetConfig+0x124>)
 8016b5a:	4293      	cmp	r3, r2
 8016b5c:	d017      	beq.n	8016b8e <TIM_Base_SetConfig+0xb2>
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	4a28      	ldr	r2, [pc, #160]	; (8016c04 <TIM_Base_SetConfig+0x128>)
 8016b62:	4293      	cmp	r3, r2
 8016b64:	d013      	beq.n	8016b8e <TIM_Base_SetConfig+0xb2>
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	4a27      	ldr	r2, [pc, #156]	; (8016c08 <TIM_Base_SetConfig+0x12c>)
 8016b6a:	4293      	cmp	r3, r2
 8016b6c:	d00f      	beq.n	8016b8e <TIM_Base_SetConfig+0xb2>
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	4a26      	ldr	r2, [pc, #152]	; (8016c0c <TIM_Base_SetConfig+0x130>)
 8016b72:	4293      	cmp	r3, r2
 8016b74:	d00b      	beq.n	8016b8e <TIM_Base_SetConfig+0xb2>
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	4a25      	ldr	r2, [pc, #148]	; (8016c10 <TIM_Base_SetConfig+0x134>)
 8016b7a:	4293      	cmp	r3, r2
 8016b7c:	d007      	beq.n	8016b8e <TIM_Base_SetConfig+0xb2>
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	4a24      	ldr	r2, [pc, #144]	; (8016c14 <TIM_Base_SetConfig+0x138>)
 8016b82:	4293      	cmp	r3, r2
 8016b84:	d003      	beq.n	8016b8e <TIM_Base_SetConfig+0xb2>
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	4a23      	ldr	r2, [pc, #140]	; (8016c18 <TIM_Base_SetConfig+0x13c>)
 8016b8a:	4293      	cmp	r3, r2
 8016b8c:	d108      	bne.n	8016ba0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8016b8e:	68fb      	ldr	r3, [r7, #12]
 8016b90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8016b94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8016b96:	683b      	ldr	r3, [r7, #0]
 8016b98:	68db      	ldr	r3, [r3, #12]
 8016b9a:	68fa      	ldr	r2, [r7, #12]
 8016b9c:	4313      	orrs	r3, r2
 8016b9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8016ba0:	68fb      	ldr	r3, [r7, #12]
 8016ba2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8016ba6:	683b      	ldr	r3, [r7, #0]
 8016ba8:	695b      	ldr	r3, [r3, #20]
 8016baa:	4313      	orrs	r3, r2
 8016bac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	68fa      	ldr	r2, [r7, #12]
 8016bb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8016bb4:	683b      	ldr	r3, [r7, #0]
 8016bb6:	689a      	ldr	r2, [r3, #8]
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8016bbc:	683b      	ldr	r3, [r7, #0]
 8016bbe:	681a      	ldr	r2, [r3, #0]
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	4a0a      	ldr	r2, [pc, #40]	; (8016bf0 <TIM_Base_SetConfig+0x114>)
 8016bc8:	4293      	cmp	r3, r2
 8016bca:	d003      	beq.n	8016bd4 <TIM_Base_SetConfig+0xf8>
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	4a0c      	ldr	r2, [pc, #48]	; (8016c00 <TIM_Base_SetConfig+0x124>)
 8016bd0:	4293      	cmp	r3, r2
 8016bd2:	d103      	bne.n	8016bdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8016bd4:	683b      	ldr	r3, [r7, #0]
 8016bd6:	691a      	ldr	r2, [r3, #16]
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	2201      	movs	r2, #1
 8016be0:	615a      	str	r2, [r3, #20]
}
 8016be2:	bf00      	nop
 8016be4:	3714      	adds	r7, #20
 8016be6:	46bd      	mov	sp, r7
 8016be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bec:	4770      	bx	lr
 8016bee:	bf00      	nop
 8016bf0:	40010000 	.word	0x40010000
 8016bf4:	40000400 	.word	0x40000400
 8016bf8:	40000800 	.word	0x40000800
 8016bfc:	40000c00 	.word	0x40000c00
 8016c00:	40010400 	.word	0x40010400
 8016c04:	40014000 	.word	0x40014000
 8016c08:	40014400 	.word	0x40014400
 8016c0c:	40014800 	.word	0x40014800
 8016c10:	40001800 	.word	0x40001800
 8016c14:	40001c00 	.word	0x40001c00
 8016c18:	40002000 	.word	0x40002000

08016c1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8016c1c:	b480      	push	{r7}
 8016c1e:	b087      	sub	sp, #28
 8016c20:	af00      	add	r7, sp, #0
 8016c22:	6078      	str	r0, [r7, #4]
 8016c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	6a1b      	ldr	r3, [r3, #32]
 8016c2a:	f023 0201 	bic.w	r2, r3, #1
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	6a1b      	ldr	r3, [r3, #32]
 8016c36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	685b      	ldr	r3, [r3, #4]
 8016c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016c3e:	687b      	ldr	r3, [r7, #4]
 8016c40:	699b      	ldr	r3, [r3, #24]
 8016c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8016c44:	68fb      	ldr	r3, [r7, #12]
 8016c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8016c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8016c4c:	68fb      	ldr	r3, [r7, #12]
 8016c4e:	f023 0303 	bic.w	r3, r3, #3
 8016c52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016c54:	683b      	ldr	r3, [r7, #0]
 8016c56:	681b      	ldr	r3, [r3, #0]
 8016c58:	68fa      	ldr	r2, [r7, #12]
 8016c5a:	4313      	orrs	r3, r2
 8016c5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8016c5e:	697b      	ldr	r3, [r7, #20]
 8016c60:	f023 0302 	bic.w	r3, r3, #2
 8016c64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8016c66:	683b      	ldr	r3, [r7, #0]
 8016c68:	689b      	ldr	r3, [r3, #8]
 8016c6a:	697a      	ldr	r2, [r7, #20]
 8016c6c:	4313      	orrs	r3, r2
 8016c6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	4a20      	ldr	r2, [pc, #128]	; (8016cf4 <TIM_OC1_SetConfig+0xd8>)
 8016c74:	4293      	cmp	r3, r2
 8016c76:	d003      	beq.n	8016c80 <TIM_OC1_SetConfig+0x64>
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	4a1f      	ldr	r2, [pc, #124]	; (8016cf8 <TIM_OC1_SetConfig+0xdc>)
 8016c7c:	4293      	cmp	r3, r2
 8016c7e:	d10c      	bne.n	8016c9a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8016c80:	697b      	ldr	r3, [r7, #20]
 8016c82:	f023 0308 	bic.w	r3, r3, #8
 8016c86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8016c88:	683b      	ldr	r3, [r7, #0]
 8016c8a:	68db      	ldr	r3, [r3, #12]
 8016c8c:	697a      	ldr	r2, [r7, #20]
 8016c8e:	4313      	orrs	r3, r2
 8016c90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8016c92:	697b      	ldr	r3, [r7, #20]
 8016c94:	f023 0304 	bic.w	r3, r3, #4
 8016c98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	4a15      	ldr	r2, [pc, #84]	; (8016cf4 <TIM_OC1_SetConfig+0xd8>)
 8016c9e:	4293      	cmp	r3, r2
 8016ca0:	d003      	beq.n	8016caa <TIM_OC1_SetConfig+0x8e>
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	4a14      	ldr	r2, [pc, #80]	; (8016cf8 <TIM_OC1_SetConfig+0xdc>)
 8016ca6:	4293      	cmp	r3, r2
 8016ca8:	d111      	bne.n	8016cce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8016caa:	693b      	ldr	r3, [r7, #16]
 8016cac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016cb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8016cb2:	693b      	ldr	r3, [r7, #16]
 8016cb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8016cb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8016cba:	683b      	ldr	r3, [r7, #0]
 8016cbc:	695b      	ldr	r3, [r3, #20]
 8016cbe:	693a      	ldr	r2, [r7, #16]
 8016cc0:	4313      	orrs	r3, r2
 8016cc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8016cc4:	683b      	ldr	r3, [r7, #0]
 8016cc6:	699b      	ldr	r3, [r3, #24]
 8016cc8:	693a      	ldr	r2, [r7, #16]
 8016cca:	4313      	orrs	r3, r2
 8016ccc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016cce:	687b      	ldr	r3, [r7, #4]
 8016cd0:	693a      	ldr	r2, [r7, #16]
 8016cd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	68fa      	ldr	r2, [r7, #12]
 8016cd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8016cda:	683b      	ldr	r3, [r7, #0]
 8016cdc:	685a      	ldr	r2, [r3, #4]
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	697a      	ldr	r2, [r7, #20]
 8016ce6:	621a      	str	r2, [r3, #32]
}
 8016ce8:	bf00      	nop
 8016cea:	371c      	adds	r7, #28
 8016cec:	46bd      	mov	sp, r7
 8016cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cf2:	4770      	bx	lr
 8016cf4:	40010000 	.word	0x40010000
 8016cf8:	40010400 	.word	0x40010400

08016cfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8016cfc:	b480      	push	{r7}
 8016cfe:	b087      	sub	sp, #28
 8016d00:	af00      	add	r7, sp, #0
 8016d02:	6078      	str	r0, [r7, #4]
 8016d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	6a1b      	ldr	r3, [r3, #32]
 8016d0a:	f023 0210 	bic.w	r2, r3, #16
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	6a1b      	ldr	r3, [r3, #32]
 8016d16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016d18:	687b      	ldr	r3, [r7, #4]
 8016d1a:	685b      	ldr	r3, [r3, #4]
 8016d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	699b      	ldr	r3, [r3, #24]
 8016d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8016d24:	68fb      	ldr	r3, [r7, #12]
 8016d26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8016d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8016d2c:	68fb      	ldr	r3, [r7, #12]
 8016d2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8016d32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016d34:	683b      	ldr	r3, [r7, #0]
 8016d36:	681b      	ldr	r3, [r3, #0]
 8016d38:	021b      	lsls	r3, r3, #8
 8016d3a:	68fa      	ldr	r2, [r7, #12]
 8016d3c:	4313      	orrs	r3, r2
 8016d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8016d40:	697b      	ldr	r3, [r7, #20]
 8016d42:	f023 0320 	bic.w	r3, r3, #32
 8016d46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8016d48:	683b      	ldr	r3, [r7, #0]
 8016d4a:	689b      	ldr	r3, [r3, #8]
 8016d4c:	011b      	lsls	r3, r3, #4
 8016d4e:	697a      	ldr	r2, [r7, #20]
 8016d50:	4313      	orrs	r3, r2
 8016d52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	4a22      	ldr	r2, [pc, #136]	; (8016de0 <TIM_OC2_SetConfig+0xe4>)
 8016d58:	4293      	cmp	r3, r2
 8016d5a:	d003      	beq.n	8016d64 <TIM_OC2_SetConfig+0x68>
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	4a21      	ldr	r2, [pc, #132]	; (8016de4 <TIM_OC2_SetConfig+0xe8>)
 8016d60:	4293      	cmp	r3, r2
 8016d62:	d10d      	bne.n	8016d80 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8016d64:	697b      	ldr	r3, [r7, #20]
 8016d66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016d6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8016d6c:	683b      	ldr	r3, [r7, #0]
 8016d6e:	68db      	ldr	r3, [r3, #12]
 8016d70:	011b      	lsls	r3, r3, #4
 8016d72:	697a      	ldr	r2, [r7, #20]
 8016d74:	4313      	orrs	r3, r2
 8016d76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8016d78:	697b      	ldr	r3, [r7, #20]
 8016d7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016d7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	4a17      	ldr	r2, [pc, #92]	; (8016de0 <TIM_OC2_SetConfig+0xe4>)
 8016d84:	4293      	cmp	r3, r2
 8016d86:	d003      	beq.n	8016d90 <TIM_OC2_SetConfig+0x94>
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	4a16      	ldr	r2, [pc, #88]	; (8016de4 <TIM_OC2_SetConfig+0xe8>)
 8016d8c:	4293      	cmp	r3, r2
 8016d8e:	d113      	bne.n	8016db8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8016d90:	693b      	ldr	r3, [r7, #16]
 8016d92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8016d96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8016d98:	693b      	ldr	r3, [r7, #16]
 8016d9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8016d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8016da0:	683b      	ldr	r3, [r7, #0]
 8016da2:	695b      	ldr	r3, [r3, #20]
 8016da4:	009b      	lsls	r3, r3, #2
 8016da6:	693a      	ldr	r2, [r7, #16]
 8016da8:	4313      	orrs	r3, r2
 8016daa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8016dac:	683b      	ldr	r3, [r7, #0]
 8016dae:	699b      	ldr	r3, [r3, #24]
 8016db0:	009b      	lsls	r3, r3, #2
 8016db2:	693a      	ldr	r2, [r7, #16]
 8016db4:	4313      	orrs	r3, r2
 8016db6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	693a      	ldr	r2, [r7, #16]
 8016dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	68fa      	ldr	r2, [r7, #12]
 8016dc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8016dc4:	683b      	ldr	r3, [r7, #0]
 8016dc6:	685a      	ldr	r2, [r3, #4]
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	697a      	ldr	r2, [r7, #20]
 8016dd0:	621a      	str	r2, [r3, #32]
}
 8016dd2:	bf00      	nop
 8016dd4:	371c      	adds	r7, #28
 8016dd6:	46bd      	mov	sp, r7
 8016dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ddc:	4770      	bx	lr
 8016dde:	bf00      	nop
 8016de0:	40010000 	.word	0x40010000
 8016de4:	40010400 	.word	0x40010400

08016de8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8016de8:	b480      	push	{r7}
 8016dea:	b087      	sub	sp, #28
 8016dec:	af00      	add	r7, sp, #0
 8016dee:	6078      	str	r0, [r7, #4]
 8016df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	6a1b      	ldr	r3, [r3, #32]
 8016df6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	6a1b      	ldr	r3, [r3, #32]
 8016e02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	685b      	ldr	r3, [r3, #4]
 8016e08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	69db      	ldr	r3, [r3, #28]
 8016e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8016e10:	68fb      	ldr	r3, [r7, #12]
 8016e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8016e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8016e18:	68fb      	ldr	r3, [r7, #12]
 8016e1a:	f023 0303 	bic.w	r3, r3, #3
 8016e1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016e20:	683b      	ldr	r3, [r7, #0]
 8016e22:	681b      	ldr	r3, [r3, #0]
 8016e24:	68fa      	ldr	r2, [r7, #12]
 8016e26:	4313      	orrs	r3, r2
 8016e28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8016e2a:	697b      	ldr	r3, [r7, #20]
 8016e2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8016e30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8016e32:	683b      	ldr	r3, [r7, #0]
 8016e34:	689b      	ldr	r3, [r3, #8]
 8016e36:	021b      	lsls	r3, r3, #8
 8016e38:	697a      	ldr	r2, [r7, #20]
 8016e3a:	4313      	orrs	r3, r2
 8016e3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	4a21      	ldr	r2, [pc, #132]	; (8016ec8 <TIM_OC3_SetConfig+0xe0>)
 8016e42:	4293      	cmp	r3, r2
 8016e44:	d003      	beq.n	8016e4e <TIM_OC3_SetConfig+0x66>
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	4a20      	ldr	r2, [pc, #128]	; (8016ecc <TIM_OC3_SetConfig+0xe4>)
 8016e4a:	4293      	cmp	r3, r2
 8016e4c:	d10d      	bne.n	8016e6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8016e4e:	697b      	ldr	r3, [r7, #20]
 8016e50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8016e54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8016e56:	683b      	ldr	r3, [r7, #0]
 8016e58:	68db      	ldr	r3, [r3, #12]
 8016e5a:	021b      	lsls	r3, r3, #8
 8016e5c:	697a      	ldr	r2, [r7, #20]
 8016e5e:	4313      	orrs	r3, r2
 8016e60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8016e62:	697b      	ldr	r3, [r7, #20]
 8016e64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8016e68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	4a16      	ldr	r2, [pc, #88]	; (8016ec8 <TIM_OC3_SetConfig+0xe0>)
 8016e6e:	4293      	cmp	r3, r2
 8016e70:	d003      	beq.n	8016e7a <TIM_OC3_SetConfig+0x92>
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	4a15      	ldr	r2, [pc, #84]	; (8016ecc <TIM_OC3_SetConfig+0xe4>)
 8016e76:	4293      	cmp	r3, r2
 8016e78:	d113      	bne.n	8016ea2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8016e7a:	693b      	ldr	r3, [r7, #16]
 8016e7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016e80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8016e82:	693b      	ldr	r3, [r7, #16]
 8016e84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8016e88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8016e8a:	683b      	ldr	r3, [r7, #0]
 8016e8c:	695b      	ldr	r3, [r3, #20]
 8016e8e:	011b      	lsls	r3, r3, #4
 8016e90:	693a      	ldr	r2, [r7, #16]
 8016e92:	4313      	orrs	r3, r2
 8016e94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8016e96:	683b      	ldr	r3, [r7, #0]
 8016e98:	699b      	ldr	r3, [r3, #24]
 8016e9a:	011b      	lsls	r3, r3, #4
 8016e9c:	693a      	ldr	r2, [r7, #16]
 8016e9e:	4313      	orrs	r3, r2
 8016ea0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016ea2:	687b      	ldr	r3, [r7, #4]
 8016ea4:	693a      	ldr	r2, [r7, #16]
 8016ea6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	68fa      	ldr	r2, [r7, #12]
 8016eac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8016eae:	683b      	ldr	r3, [r7, #0]
 8016eb0:	685a      	ldr	r2, [r3, #4]
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	697a      	ldr	r2, [r7, #20]
 8016eba:	621a      	str	r2, [r3, #32]
}
 8016ebc:	bf00      	nop
 8016ebe:	371c      	adds	r7, #28
 8016ec0:	46bd      	mov	sp, r7
 8016ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ec6:	4770      	bx	lr
 8016ec8:	40010000 	.word	0x40010000
 8016ecc:	40010400 	.word	0x40010400

08016ed0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8016ed0:	b480      	push	{r7}
 8016ed2:	b087      	sub	sp, #28
 8016ed4:	af00      	add	r7, sp, #0
 8016ed6:	6078      	str	r0, [r7, #4]
 8016ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	6a1b      	ldr	r3, [r3, #32]
 8016ede:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016ee6:	687b      	ldr	r3, [r7, #4]
 8016ee8:	6a1b      	ldr	r3, [r3, #32]
 8016eea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	685b      	ldr	r3, [r3, #4]
 8016ef0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	69db      	ldr	r3, [r3, #28]
 8016ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8016ef8:	68fb      	ldr	r3, [r7, #12]
 8016efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8016efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8016f00:	68fb      	ldr	r3, [r7, #12]
 8016f02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8016f06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016f08:	683b      	ldr	r3, [r7, #0]
 8016f0a:	681b      	ldr	r3, [r3, #0]
 8016f0c:	021b      	lsls	r3, r3, #8
 8016f0e:	68fa      	ldr	r2, [r7, #12]
 8016f10:	4313      	orrs	r3, r2
 8016f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8016f14:	693b      	ldr	r3, [r7, #16]
 8016f16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8016f1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8016f1c:	683b      	ldr	r3, [r7, #0]
 8016f1e:	689b      	ldr	r3, [r3, #8]
 8016f20:	031b      	lsls	r3, r3, #12
 8016f22:	693a      	ldr	r2, [r7, #16]
 8016f24:	4313      	orrs	r3, r2
 8016f26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	4a12      	ldr	r2, [pc, #72]	; (8016f74 <TIM_OC4_SetConfig+0xa4>)
 8016f2c:	4293      	cmp	r3, r2
 8016f2e:	d003      	beq.n	8016f38 <TIM_OC4_SetConfig+0x68>
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	4a11      	ldr	r2, [pc, #68]	; (8016f78 <TIM_OC4_SetConfig+0xa8>)
 8016f34:	4293      	cmp	r3, r2
 8016f36:	d109      	bne.n	8016f4c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8016f38:	697b      	ldr	r3, [r7, #20]
 8016f3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8016f3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8016f40:	683b      	ldr	r3, [r7, #0]
 8016f42:	695b      	ldr	r3, [r3, #20]
 8016f44:	019b      	lsls	r3, r3, #6
 8016f46:	697a      	ldr	r2, [r7, #20]
 8016f48:	4313      	orrs	r3, r2
 8016f4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	697a      	ldr	r2, [r7, #20]
 8016f50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	68fa      	ldr	r2, [r7, #12]
 8016f56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8016f58:	683b      	ldr	r3, [r7, #0]
 8016f5a:	685a      	ldr	r2, [r3, #4]
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	693a      	ldr	r2, [r7, #16]
 8016f64:	621a      	str	r2, [r3, #32]
}
 8016f66:	bf00      	nop
 8016f68:	371c      	adds	r7, #28
 8016f6a:	46bd      	mov	sp, r7
 8016f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f70:	4770      	bx	lr
 8016f72:	bf00      	nop
 8016f74:	40010000 	.word	0x40010000
 8016f78:	40010400 	.word	0x40010400

08016f7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8016f7c:	b480      	push	{r7}
 8016f7e:	b087      	sub	sp, #28
 8016f80:	af00      	add	r7, sp, #0
 8016f82:	60f8      	str	r0, [r7, #12]
 8016f84:	60b9      	str	r1, [r7, #8]
 8016f86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8016f88:	68fb      	ldr	r3, [r7, #12]
 8016f8a:	6a1b      	ldr	r3, [r3, #32]
 8016f8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8016f8e:	68fb      	ldr	r3, [r7, #12]
 8016f90:	6a1b      	ldr	r3, [r3, #32]
 8016f92:	f023 0201 	bic.w	r2, r3, #1
 8016f96:	68fb      	ldr	r3, [r7, #12]
 8016f98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8016f9a:	68fb      	ldr	r3, [r7, #12]
 8016f9c:	699b      	ldr	r3, [r3, #24]
 8016f9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8016fa0:	693b      	ldr	r3, [r7, #16]
 8016fa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8016fa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	011b      	lsls	r3, r3, #4
 8016fac:	693a      	ldr	r2, [r7, #16]
 8016fae:	4313      	orrs	r3, r2
 8016fb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8016fb2:	697b      	ldr	r3, [r7, #20]
 8016fb4:	f023 030a 	bic.w	r3, r3, #10
 8016fb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8016fba:	697a      	ldr	r2, [r7, #20]
 8016fbc:	68bb      	ldr	r3, [r7, #8]
 8016fbe:	4313      	orrs	r3, r2
 8016fc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8016fc2:	68fb      	ldr	r3, [r7, #12]
 8016fc4:	693a      	ldr	r2, [r7, #16]
 8016fc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8016fc8:	68fb      	ldr	r3, [r7, #12]
 8016fca:	697a      	ldr	r2, [r7, #20]
 8016fcc:	621a      	str	r2, [r3, #32]
}
 8016fce:	bf00      	nop
 8016fd0:	371c      	adds	r7, #28
 8016fd2:	46bd      	mov	sp, r7
 8016fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fd8:	4770      	bx	lr

08016fda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8016fda:	b480      	push	{r7}
 8016fdc:	b087      	sub	sp, #28
 8016fde:	af00      	add	r7, sp, #0
 8016fe0:	60f8      	str	r0, [r7, #12]
 8016fe2:	60b9      	str	r1, [r7, #8]
 8016fe4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8016fe6:	68fb      	ldr	r3, [r7, #12]
 8016fe8:	6a1b      	ldr	r3, [r3, #32]
 8016fea:	f023 0210 	bic.w	r2, r3, #16
 8016fee:	68fb      	ldr	r3, [r7, #12]
 8016ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8016ff2:	68fb      	ldr	r3, [r7, #12]
 8016ff4:	699b      	ldr	r3, [r3, #24]
 8016ff6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8016ff8:	68fb      	ldr	r3, [r7, #12]
 8016ffa:	6a1b      	ldr	r3, [r3, #32]
 8016ffc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8016ffe:	697b      	ldr	r3, [r7, #20]
 8017000:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8017004:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	031b      	lsls	r3, r3, #12
 801700a:	697a      	ldr	r2, [r7, #20]
 801700c:	4313      	orrs	r3, r2
 801700e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8017010:	693b      	ldr	r3, [r7, #16]
 8017012:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8017016:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8017018:	68bb      	ldr	r3, [r7, #8]
 801701a:	011b      	lsls	r3, r3, #4
 801701c:	693a      	ldr	r2, [r7, #16]
 801701e:	4313      	orrs	r3, r2
 8017020:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8017022:	68fb      	ldr	r3, [r7, #12]
 8017024:	697a      	ldr	r2, [r7, #20]
 8017026:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017028:	68fb      	ldr	r3, [r7, #12]
 801702a:	693a      	ldr	r2, [r7, #16]
 801702c:	621a      	str	r2, [r3, #32]
}
 801702e:	bf00      	nop
 8017030:	371c      	adds	r7, #28
 8017032:	46bd      	mov	sp, r7
 8017034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017038:	4770      	bx	lr

0801703a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801703a:	b480      	push	{r7}
 801703c:	b085      	sub	sp, #20
 801703e:	af00      	add	r7, sp, #0
 8017040:	6078      	str	r0, [r7, #4]
 8017042:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	689b      	ldr	r3, [r3, #8]
 8017048:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801704a:	68fb      	ldr	r3, [r7, #12]
 801704c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017050:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8017052:	683a      	ldr	r2, [r7, #0]
 8017054:	68fb      	ldr	r3, [r7, #12]
 8017056:	4313      	orrs	r3, r2
 8017058:	f043 0307 	orr.w	r3, r3, #7
 801705c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801705e:	687b      	ldr	r3, [r7, #4]
 8017060:	68fa      	ldr	r2, [r7, #12]
 8017062:	609a      	str	r2, [r3, #8]
}
 8017064:	bf00      	nop
 8017066:	3714      	adds	r7, #20
 8017068:	46bd      	mov	sp, r7
 801706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801706e:	4770      	bx	lr

08017070 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8017070:	b480      	push	{r7}
 8017072:	b087      	sub	sp, #28
 8017074:	af00      	add	r7, sp, #0
 8017076:	60f8      	str	r0, [r7, #12]
 8017078:	60b9      	str	r1, [r7, #8]
 801707a:	607a      	str	r2, [r7, #4]
 801707c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801707e:	68fb      	ldr	r3, [r7, #12]
 8017080:	689b      	ldr	r3, [r3, #8]
 8017082:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8017084:	697b      	ldr	r3, [r7, #20]
 8017086:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801708a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801708c:	683b      	ldr	r3, [r7, #0]
 801708e:	021a      	lsls	r2, r3, #8
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	431a      	orrs	r2, r3
 8017094:	68bb      	ldr	r3, [r7, #8]
 8017096:	4313      	orrs	r3, r2
 8017098:	697a      	ldr	r2, [r7, #20]
 801709a:	4313      	orrs	r3, r2
 801709c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801709e:	68fb      	ldr	r3, [r7, #12]
 80170a0:	697a      	ldr	r2, [r7, #20]
 80170a2:	609a      	str	r2, [r3, #8]
}
 80170a4:	bf00      	nop
 80170a6:	371c      	adds	r7, #28
 80170a8:	46bd      	mov	sp, r7
 80170aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170ae:	4770      	bx	lr

080170b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80170b0:	b480      	push	{r7}
 80170b2:	b087      	sub	sp, #28
 80170b4:	af00      	add	r7, sp, #0
 80170b6:	60f8      	str	r0, [r7, #12]
 80170b8:	60b9      	str	r1, [r7, #8]
 80170ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80170bc:	68bb      	ldr	r3, [r7, #8]
 80170be:	f003 031f 	and.w	r3, r3, #31
 80170c2:	2201      	movs	r2, #1
 80170c4:	fa02 f303 	lsl.w	r3, r2, r3
 80170c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80170ca:	68fb      	ldr	r3, [r7, #12]
 80170cc:	6a1a      	ldr	r2, [r3, #32]
 80170ce:	697b      	ldr	r3, [r7, #20]
 80170d0:	43db      	mvns	r3, r3
 80170d2:	401a      	ands	r2, r3
 80170d4:	68fb      	ldr	r3, [r7, #12]
 80170d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80170d8:	68fb      	ldr	r3, [r7, #12]
 80170da:	6a1a      	ldr	r2, [r3, #32]
 80170dc:	68bb      	ldr	r3, [r7, #8]
 80170de:	f003 031f 	and.w	r3, r3, #31
 80170e2:	6879      	ldr	r1, [r7, #4]
 80170e4:	fa01 f303 	lsl.w	r3, r1, r3
 80170e8:	431a      	orrs	r2, r3
 80170ea:	68fb      	ldr	r3, [r7, #12]
 80170ec:	621a      	str	r2, [r3, #32]
}
 80170ee:	bf00      	nop
 80170f0:	371c      	adds	r7, #28
 80170f2:	46bd      	mov	sp, r7
 80170f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170f8:	4770      	bx	lr
	...

080170fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80170fc:	b480      	push	{r7}
 80170fe:	b085      	sub	sp, #20
 8017100:	af00      	add	r7, sp, #0
 8017102:	6078      	str	r0, [r7, #4]
 8017104:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801710c:	2b01      	cmp	r3, #1
 801710e:	d101      	bne.n	8017114 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8017110:	2302      	movs	r3, #2
 8017112:	e05a      	b.n	80171ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	2201      	movs	r2, #1
 8017118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	2202      	movs	r2, #2
 8017120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	681b      	ldr	r3, [r3, #0]
 8017128:	685b      	ldr	r3, [r3, #4]
 801712a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801712c:	687b      	ldr	r3, [r7, #4]
 801712e:	681b      	ldr	r3, [r3, #0]
 8017130:	689b      	ldr	r3, [r3, #8]
 8017132:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8017134:	68fb      	ldr	r3, [r7, #12]
 8017136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801713a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801713c:	683b      	ldr	r3, [r7, #0]
 801713e:	681b      	ldr	r3, [r3, #0]
 8017140:	68fa      	ldr	r2, [r7, #12]
 8017142:	4313      	orrs	r3, r2
 8017144:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	681b      	ldr	r3, [r3, #0]
 801714a:	68fa      	ldr	r2, [r7, #12]
 801714c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	681b      	ldr	r3, [r3, #0]
 8017152:	4a21      	ldr	r2, [pc, #132]	; (80171d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8017154:	4293      	cmp	r3, r2
 8017156:	d022      	beq.n	801719e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	681b      	ldr	r3, [r3, #0]
 801715c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017160:	d01d      	beq.n	801719e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	681b      	ldr	r3, [r3, #0]
 8017166:	4a1d      	ldr	r2, [pc, #116]	; (80171dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8017168:	4293      	cmp	r3, r2
 801716a:	d018      	beq.n	801719e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	681b      	ldr	r3, [r3, #0]
 8017170:	4a1b      	ldr	r2, [pc, #108]	; (80171e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8017172:	4293      	cmp	r3, r2
 8017174:	d013      	beq.n	801719e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	681b      	ldr	r3, [r3, #0]
 801717a:	4a1a      	ldr	r2, [pc, #104]	; (80171e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 801717c:	4293      	cmp	r3, r2
 801717e:	d00e      	beq.n	801719e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	681b      	ldr	r3, [r3, #0]
 8017184:	4a18      	ldr	r2, [pc, #96]	; (80171e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8017186:	4293      	cmp	r3, r2
 8017188:	d009      	beq.n	801719e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	681b      	ldr	r3, [r3, #0]
 801718e:	4a17      	ldr	r2, [pc, #92]	; (80171ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8017190:	4293      	cmp	r3, r2
 8017192:	d004      	beq.n	801719e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8017194:	687b      	ldr	r3, [r7, #4]
 8017196:	681b      	ldr	r3, [r3, #0]
 8017198:	4a15      	ldr	r2, [pc, #84]	; (80171f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 801719a:	4293      	cmp	r3, r2
 801719c:	d10c      	bne.n	80171b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801719e:	68bb      	ldr	r3, [r7, #8]
 80171a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80171a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80171a6:	683b      	ldr	r3, [r7, #0]
 80171a8:	685b      	ldr	r3, [r3, #4]
 80171aa:	68ba      	ldr	r2, [r7, #8]
 80171ac:	4313      	orrs	r3, r2
 80171ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	681b      	ldr	r3, [r3, #0]
 80171b4:	68ba      	ldr	r2, [r7, #8]
 80171b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80171b8:	687b      	ldr	r3, [r7, #4]
 80171ba:	2201      	movs	r2, #1
 80171bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80171c0:	687b      	ldr	r3, [r7, #4]
 80171c2:	2200      	movs	r2, #0
 80171c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80171c8:	2300      	movs	r3, #0
}
 80171ca:	4618      	mov	r0, r3
 80171cc:	3714      	adds	r7, #20
 80171ce:	46bd      	mov	sp, r7
 80171d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171d4:	4770      	bx	lr
 80171d6:	bf00      	nop
 80171d8:	40010000 	.word	0x40010000
 80171dc:	40000400 	.word	0x40000400
 80171e0:	40000800 	.word	0x40000800
 80171e4:	40000c00 	.word	0x40000c00
 80171e8:	40010400 	.word	0x40010400
 80171ec:	40014000 	.word	0x40014000
 80171f0:	40001800 	.word	0x40001800

080171f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80171f4:	b480      	push	{r7}
 80171f6:	b083      	sub	sp, #12
 80171f8:	af00      	add	r7, sp, #0
 80171fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80171fc:	bf00      	nop
 80171fe:	370c      	adds	r7, #12
 8017200:	46bd      	mov	sp, r7
 8017202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017206:	4770      	bx	lr

08017208 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8017208:	b480      	push	{r7}
 801720a:	b083      	sub	sp, #12
 801720c:	af00      	add	r7, sp, #0
 801720e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8017210:	bf00      	nop
 8017212:	370c      	adds	r7, #12
 8017214:	46bd      	mov	sp, r7
 8017216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801721a:	4770      	bx	lr

0801721c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 801721c:	b480      	push	{r7}
 801721e:	b085      	sub	sp, #20
 8017220:	af00      	add	r7, sp, #0
 8017222:	6078      	str	r0, [r7, #4]
 8017224:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8017226:	2300      	movs	r3, #0
 8017228:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 801722a:	2300      	movs	r3, #0
 801722c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 801722e:	683b      	ldr	r3, [r7, #0]
 8017230:	681b      	ldr	r3, [r3, #0]
 8017232:	2b01      	cmp	r3, #1
 8017234:	d029      	beq.n	801728a <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8017236:	687b      	ldr	r3, [r7, #4]
 8017238:	681b      	ldr	r3, [r3, #0]
 801723a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 801723c:	68fb      	ldr	r3, [r7, #12]
 801723e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8017242:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8017246:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8017248:	683b      	ldr	r3, [r7, #0]
 801724a:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 801724c:	683b      	ldr	r3, [r7, #0]
 801724e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8017250:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8017252:	683b      	ldr	r3, [r7, #0]
 8017254:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8017256:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8017258:	683b      	ldr	r3, [r7, #0]
 801725a:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 801725c:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 801725e:	683b      	ldr	r3, [r7, #0]
 8017260:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8017262:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8017264:	683b      	ldr	r3, [r7, #0]
 8017266:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8017268:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 801726a:	683b      	ldr	r3, [r7, #0]
 801726c:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 801726e:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8017270:	683b      	ldr	r3, [r7, #0]
 8017272:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8017274:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8017276:	683b      	ldr	r3, [r7, #0]
 8017278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 801727a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 801727c:	68fa      	ldr	r2, [r7, #12]
 801727e:	4313      	orrs	r3, r2
 8017280:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	68fa      	ldr	r2, [r7, #12]
 8017286:	601a      	str	r2, [r3, #0]
 8017288:	e034      	b.n	80172f4 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	681b      	ldr	r3, [r3, #0]
 801728e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8017290:	68fb      	ldr	r3, [r7, #12]
 8017292:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8017296:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8017298:	683b      	ldr	r3, [r7, #0]
 801729a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 801729c:	683b      	ldr	r3, [r7, #0]
 801729e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80172a0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 80172a2:	683b      	ldr	r3, [r7, #0]
 80172a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80172a6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80172a8:	68fa      	ldr	r2, [r7, #12]
 80172aa:	4313      	orrs	r3, r2
 80172ac:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	685b      	ldr	r3, [r3, #4]
 80172b2:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80172b4:	68bb      	ldr	r3, [r7, #8]
 80172b6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80172ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80172be:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80172c0:	683b      	ldr	r3, [r7, #0]
 80172c2:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 80172c4:	683b      	ldr	r3, [r7, #0]
 80172c6:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80172c8:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 80172ca:	683b      	ldr	r3, [r7, #0]
 80172cc:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 80172ce:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 80172d0:	683b      	ldr	r3, [r7, #0]
 80172d2:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 80172d4:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 80172d6:	683b      	ldr	r3, [r7, #0]
 80172d8:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 80172da:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80172dc:	683b      	ldr	r3, [r7, #0]
 80172de:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 80172e0:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80172e2:	68ba      	ldr	r2, [r7, #8]
 80172e4:	4313      	orrs	r3, r2
 80172e6:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	68fa      	ldr	r2, [r7, #12]
 80172ec:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	68ba      	ldr	r2, [r7, #8]
 80172f2:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 80172f4:	2300      	movs	r3, #0
}
 80172f6:	4618      	mov	r0, r3
 80172f8:	3714      	adds	r7, #20
 80172fa:	46bd      	mov	sp, r7
 80172fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017300:	4770      	bx	lr

08017302 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8017302:	b480      	push	{r7}
 8017304:	b087      	sub	sp, #28
 8017306:	af00      	add	r7, sp, #0
 8017308:	60f8      	str	r0, [r7, #12]
 801730a:	60b9      	str	r1, [r7, #8]
 801730c:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 801730e:	2300      	movs	r3, #0
 8017310:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8017312:	2300      	movs	r3, #0
 8017314:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	2b01      	cmp	r3, #1
 801731a:	d02e      	beq.n	801737a <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 801731c:	68fb      	ldr	r3, [r7, #12]
 801731e:	689b      	ldr	r3, [r3, #8]
 8017320:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8017322:	697b      	ldr	r3, [r7, #20]
 8017324:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8017328:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 801732a:	68bb      	ldr	r3, [r7, #8]
 801732c:	681b      	ldr	r3, [r3, #0]
 801732e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8017330:	68bb      	ldr	r3, [r7, #8]
 8017332:	685b      	ldr	r3, [r3, #4]
 8017334:	3b01      	subs	r3, #1
 8017336:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8017338:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 801733a:	68bb      	ldr	r3, [r7, #8]
 801733c:	689b      	ldr	r3, [r3, #8]
 801733e:	3b01      	subs	r3, #1
 8017340:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8017342:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8017344:	68bb      	ldr	r3, [r7, #8]
 8017346:	68db      	ldr	r3, [r3, #12]
 8017348:	3b01      	subs	r3, #1
 801734a:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 801734c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 801734e:	68bb      	ldr	r3, [r7, #8]
 8017350:	691b      	ldr	r3, [r3, #16]
 8017352:	3b01      	subs	r3, #1
 8017354:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8017356:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8017358:	68bb      	ldr	r3, [r7, #8]
 801735a:	695b      	ldr	r3, [r3, #20]
 801735c:	3b01      	subs	r3, #1
 801735e:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8017360:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8017362:	68bb      	ldr	r3, [r7, #8]
 8017364:	699b      	ldr	r3, [r3, #24]
 8017366:	3b01      	subs	r3, #1
 8017368:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 801736a:	4313      	orrs	r3, r2
 801736c:	697a      	ldr	r2, [r7, #20]
 801736e:	4313      	orrs	r3, r2
 8017370:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8017372:	68fb      	ldr	r3, [r7, #12]
 8017374:	697a      	ldr	r2, [r7, #20]
 8017376:	609a      	str	r2, [r3, #8]
 8017378:	e03b      	b.n	80173f2 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 801737a:	68fb      	ldr	r3, [r7, #12]
 801737c:	689b      	ldr	r3, [r3, #8]
 801737e:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8017380:	697b      	ldr	r3, [r7, #20]
 8017382:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8017386:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801738a:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 801738c:	68bb      	ldr	r3, [r7, #8]
 801738e:	68db      	ldr	r3, [r3, #12]
 8017390:	3b01      	subs	r3, #1
 8017392:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8017394:	68bb      	ldr	r3, [r7, #8]
 8017396:	695b      	ldr	r3, [r3, #20]
 8017398:	3b01      	subs	r3, #1
 801739a:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 801739c:	4313      	orrs	r3, r2
 801739e:	697a      	ldr	r2, [r7, #20]
 80173a0:	4313      	orrs	r3, r2
 80173a2:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80173a4:	68fb      	ldr	r3, [r7, #12]
 80173a6:	68db      	ldr	r3, [r3, #12]
 80173a8:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80173aa:	693b      	ldr	r3, [r7, #16]
 80173ac:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80173b0:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80173b2:	68bb      	ldr	r3, [r7, #8]
 80173b4:	681b      	ldr	r3, [r3, #0]
 80173b6:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80173b8:	68bb      	ldr	r3, [r7, #8]
 80173ba:	685b      	ldr	r3, [r3, #4]
 80173bc:	3b01      	subs	r3, #1
 80173be:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80173c0:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80173c2:	68bb      	ldr	r3, [r7, #8]
 80173c4:	689b      	ldr	r3, [r3, #8]
 80173c6:	3b01      	subs	r3, #1
 80173c8:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80173ca:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 80173cc:	68bb      	ldr	r3, [r7, #8]
 80173ce:	691b      	ldr	r3, [r3, #16]
 80173d0:	3b01      	subs	r3, #1
 80173d2:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80173d4:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 80173d6:	68bb      	ldr	r3, [r7, #8]
 80173d8:	699b      	ldr	r3, [r3, #24]
 80173da:	3b01      	subs	r3, #1
 80173dc:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80173de:	4313      	orrs	r3, r2
 80173e0:	693a      	ldr	r2, [r7, #16]
 80173e2:	4313      	orrs	r3, r2
 80173e4:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80173e6:	68fb      	ldr	r3, [r7, #12]
 80173e8:	697a      	ldr	r2, [r7, #20]
 80173ea:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80173ec:	68fb      	ldr	r3, [r7, #12]
 80173ee:	693a      	ldr	r2, [r7, #16]
 80173f0:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 80173f2:	2300      	movs	r3, #0
}
 80173f4:	4618      	mov	r0, r3
 80173f6:	371c      	adds	r7, #28
 80173f8:	46bd      	mov	sp, r7
 80173fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173fe:	4770      	bx	lr

08017400 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8017400:	b580      	push	{r7, lr}
 8017402:	b086      	sub	sp, #24
 8017404:	af00      	add	r7, sp, #0
 8017406:	60f8      	str	r0, [r7, #12]
 8017408:	60b9      	str	r1, [r7, #8]
 801740a:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 801740c:	2300      	movs	r3, #0
 801740e:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8017410:	2300      	movs	r3, #0
 8017412:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8017414:	68bb      	ldr	r3, [r7, #8]
 8017416:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8017418:	68bb      	ldr	r3, [r7, #8]
 801741a:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 801741c:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 801741e:	68bb      	ldr	r3, [r7, #8]
 8017420:	689b      	ldr	r3, [r3, #8]
 8017422:	3b01      	subs	r3, #1
 8017424:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8017426:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8017428:	68bb      	ldr	r3, [r7, #8]
 801742a:	68db      	ldr	r3, [r3, #12]
 801742c:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 801742e:	4313      	orrs	r3, r2
 8017430:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8017432:	693a      	ldr	r2, [r7, #16]
 8017434:	68fb      	ldr	r3, [r7, #12]
 8017436:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8017438:	f7fa fda8 	bl	8011f8c <HAL_GetTick>
 801743c:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 801743e:	e010      	b.n	8017462 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017446:	d00c      	beq.n	8017462 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	2b00      	cmp	r3, #0
 801744c:	d007      	beq.n	801745e <FMC_SDRAM_SendCommand+0x5e>
 801744e:	f7fa fd9d 	bl	8011f8c <HAL_GetTick>
 8017452:	4602      	mov	r2, r0
 8017454:	697b      	ldr	r3, [r7, #20]
 8017456:	1ad3      	subs	r3, r2, r3
 8017458:	687a      	ldr	r2, [r7, #4]
 801745a:	429a      	cmp	r2, r3
 801745c:	d201      	bcs.n	8017462 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 801745e:	2303      	movs	r3, #3
 8017460:	e006      	b.n	8017470 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8017462:	68fb      	ldr	r3, [r7, #12]
 8017464:	699b      	ldr	r3, [r3, #24]
 8017466:	f003 0320 	and.w	r3, r3, #32
 801746a:	2b20      	cmp	r3, #32
 801746c:	d0e8      	beq.n	8017440 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 801746e:	2300      	movs	r3, #0
}
 8017470:	4618      	mov	r0, r3
 8017472:	3718      	adds	r7, #24
 8017474:	46bd      	mov	sp, r7
 8017476:	bd80      	pop	{r7, pc}

08017478 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8017478:	b480      	push	{r7}
 801747a:	b083      	sub	sp, #12
 801747c:	af00      	add	r7, sp, #0
 801747e:	6078      	str	r0, [r7, #4]
 8017480:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	695a      	ldr	r2, [r3, #20]
 8017486:	683b      	ldr	r3, [r7, #0]
 8017488:	005b      	lsls	r3, r3, #1
 801748a:	431a      	orrs	r2, r3
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8017490:	2300      	movs	r3, #0
}
 8017492:	4618      	mov	r0, r3
 8017494:	370c      	adds	r7, #12
 8017496:	46bd      	mov	sp, r7
 8017498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801749c:	4770      	bx	lr

0801749e <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801749e:	b480      	push	{r7}
 80174a0:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80174a2:	bf00      	nop
 80174a4:	46bd      	mov	sp, r7
 80174a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174aa:	4770      	bx	lr

080174ac <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80174ac:	b480      	push	{r7}
 80174ae:	b085      	sub	sp, #20
 80174b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80174b2:	f3ef 8305 	mrs	r3, IPSR
 80174b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80174b8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	d10f      	bne.n	80174de <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80174be:	f3ef 8310 	mrs	r3, PRIMASK
 80174c2:	607b      	str	r3, [r7, #4]
  return(result);
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	2b00      	cmp	r3, #0
 80174c8:	d105      	bne.n	80174d6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80174ca:	f3ef 8311 	mrs	r3, BASEPRI
 80174ce:	603b      	str	r3, [r7, #0]
  return(result);
 80174d0:	683b      	ldr	r3, [r7, #0]
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d007      	beq.n	80174e6 <osKernelInitialize+0x3a>
 80174d6:	4b0e      	ldr	r3, [pc, #56]	; (8017510 <osKernelInitialize+0x64>)
 80174d8:	681b      	ldr	r3, [r3, #0]
 80174da:	2b02      	cmp	r3, #2
 80174dc:	d103      	bne.n	80174e6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80174de:	f06f 0305 	mvn.w	r3, #5
 80174e2:	60fb      	str	r3, [r7, #12]
 80174e4:	e00c      	b.n	8017500 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80174e6:	4b0a      	ldr	r3, [pc, #40]	; (8017510 <osKernelInitialize+0x64>)
 80174e8:	681b      	ldr	r3, [r3, #0]
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	d105      	bne.n	80174fa <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80174ee:	4b08      	ldr	r3, [pc, #32]	; (8017510 <osKernelInitialize+0x64>)
 80174f0:	2201      	movs	r2, #1
 80174f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80174f4:	2300      	movs	r3, #0
 80174f6:	60fb      	str	r3, [r7, #12]
 80174f8:	e002      	b.n	8017500 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80174fa:	f04f 33ff 	mov.w	r3, #4294967295
 80174fe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8017500:	68fb      	ldr	r3, [r7, #12]
}
 8017502:	4618      	mov	r0, r3
 8017504:	3714      	adds	r7, #20
 8017506:	46bd      	mov	sp, r7
 8017508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801750c:	4770      	bx	lr
 801750e:	bf00      	nop
 8017510:	20001ad8 	.word	0x20001ad8

08017514 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8017514:	b580      	push	{r7, lr}
 8017516:	b084      	sub	sp, #16
 8017518:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801751a:	f3ef 8305 	mrs	r3, IPSR
 801751e:	60bb      	str	r3, [r7, #8]
  return(result);
 8017520:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8017522:	2b00      	cmp	r3, #0
 8017524:	d10f      	bne.n	8017546 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017526:	f3ef 8310 	mrs	r3, PRIMASK
 801752a:	607b      	str	r3, [r7, #4]
  return(result);
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	2b00      	cmp	r3, #0
 8017530:	d105      	bne.n	801753e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8017532:	f3ef 8311 	mrs	r3, BASEPRI
 8017536:	603b      	str	r3, [r7, #0]
  return(result);
 8017538:	683b      	ldr	r3, [r7, #0]
 801753a:	2b00      	cmp	r3, #0
 801753c:	d007      	beq.n	801754e <osKernelStart+0x3a>
 801753e:	4b0f      	ldr	r3, [pc, #60]	; (801757c <osKernelStart+0x68>)
 8017540:	681b      	ldr	r3, [r3, #0]
 8017542:	2b02      	cmp	r3, #2
 8017544:	d103      	bne.n	801754e <osKernelStart+0x3a>
    stat = osErrorISR;
 8017546:	f06f 0305 	mvn.w	r3, #5
 801754a:	60fb      	str	r3, [r7, #12]
 801754c:	e010      	b.n	8017570 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 801754e:	4b0b      	ldr	r3, [pc, #44]	; (801757c <osKernelStart+0x68>)
 8017550:	681b      	ldr	r3, [r3, #0]
 8017552:	2b01      	cmp	r3, #1
 8017554:	d109      	bne.n	801756a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8017556:	f7ff ffa2 	bl	801749e <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801755a:	4b08      	ldr	r3, [pc, #32]	; (801757c <osKernelStart+0x68>)
 801755c:	2202      	movs	r2, #2
 801755e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8017560:	f002 fa0c 	bl	801997c <vTaskStartScheduler>
      stat = osOK;
 8017564:	2300      	movs	r3, #0
 8017566:	60fb      	str	r3, [r7, #12]
 8017568:	e002      	b.n	8017570 <osKernelStart+0x5c>
    } else {
      stat = osError;
 801756a:	f04f 33ff 	mov.w	r3, #4294967295
 801756e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8017570:	68fb      	ldr	r3, [r7, #12]
}
 8017572:	4618      	mov	r0, r3
 8017574:	3710      	adds	r7, #16
 8017576:	46bd      	mov	sp, r7
 8017578:	bd80      	pop	{r7, pc}
 801757a:	bf00      	nop
 801757c:	20001ad8 	.word	0x20001ad8

08017580 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8017580:	b580      	push	{r7, lr}
 8017582:	b090      	sub	sp, #64	; 0x40
 8017584:	af04      	add	r7, sp, #16
 8017586:	60f8      	str	r0, [r7, #12]
 8017588:	60b9      	str	r1, [r7, #8]
 801758a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801758c:	2300      	movs	r3, #0
 801758e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017590:	f3ef 8305 	mrs	r3, IPSR
 8017594:	61fb      	str	r3, [r7, #28]
  return(result);
 8017596:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8017598:	2b00      	cmp	r3, #0
 801759a:	f040 808f 	bne.w	80176bc <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801759e:	f3ef 8310 	mrs	r3, PRIMASK
 80175a2:	61bb      	str	r3, [r7, #24]
  return(result);
 80175a4:	69bb      	ldr	r3, [r7, #24]
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	d105      	bne.n	80175b6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80175aa:	f3ef 8311 	mrs	r3, BASEPRI
 80175ae:	617b      	str	r3, [r7, #20]
  return(result);
 80175b0:	697b      	ldr	r3, [r7, #20]
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	d003      	beq.n	80175be <osThreadNew+0x3e>
 80175b6:	4b44      	ldr	r3, [pc, #272]	; (80176c8 <osThreadNew+0x148>)
 80175b8:	681b      	ldr	r3, [r3, #0]
 80175ba:	2b02      	cmp	r3, #2
 80175bc:	d07e      	beq.n	80176bc <osThreadNew+0x13c>
 80175be:	68fb      	ldr	r3, [r7, #12]
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d07b      	beq.n	80176bc <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80175c4:	2380      	movs	r3, #128	; 0x80
 80175c6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80175c8:	2318      	movs	r3, #24
 80175ca:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80175cc:	2300      	movs	r3, #0
 80175ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80175d0:	f04f 33ff 	mov.w	r3, #4294967295
 80175d4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80175d6:	687b      	ldr	r3, [r7, #4]
 80175d8:	2b00      	cmp	r3, #0
 80175da:	d045      	beq.n	8017668 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	681b      	ldr	r3, [r3, #0]
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	d002      	beq.n	80175ea <osThreadNew+0x6a>
        name = attr->name;
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	681b      	ldr	r3, [r3, #0]
 80175e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	699b      	ldr	r3, [r3, #24]
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	d002      	beq.n	80175f8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	699b      	ldr	r3, [r3, #24]
 80175f6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80175f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	d008      	beq.n	8017610 <osThreadNew+0x90>
 80175fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017600:	2b38      	cmp	r3, #56	; 0x38
 8017602:	d805      	bhi.n	8017610 <osThreadNew+0x90>
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	685b      	ldr	r3, [r3, #4]
 8017608:	f003 0301 	and.w	r3, r3, #1
 801760c:	2b00      	cmp	r3, #0
 801760e:	d001      	beq.n	8017614 <osThreadNew+0x94>
        return (NULL);
 8017610:	2300      	movs	r3, #0
 8017612:	e054      	b.n	80176be <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	695b      	ldr	r3, [r3, #20]
 8017618:	2b00      	cmp	r3, #0
 801761a:	d003      	beq.n	8017624 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	695b      	ldr	r3, [r3, #20]
 8017620:	089b      	lsrs	r3, r3, #2
 8017622:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	689b      	ldr	r3, [r3, #8]
 8017628:	2b00      	cmp	r3, #0
 801762a:	d00e      	beq.n	801764a <osThreadNew+0xca>
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	68db      	ldr	r3, [r3, #12]
 8017630:	2b5f      	cmp	r3, #95	; 0x5f
 8017632:	d90a      	bls.n	801764a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8017638:	2b00      	cmp	r3, #0
 801763a:	d006      	beq.n	801764a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	695b      	ldr	r3, [r3, #20]
 8017640:	2b00      	cmp	r3, #0
 8017642:	d002      	beq.n	801764a <osThreadNew+0xca>
        mem = 1;
 8017644:	2301      	movs	r3, #1
 8017646:	623b      	str	r3, [r7, #32]
 8017648:	e010      	b.n	801766c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	689b      	ldr	r3, [r3, #8]
 801764e:	2b00      	cmp	r3, #0
 8017650:	d10c      	bne.n	801766c <osThreadNew+0xec>
 8017652:	687b      	ldr	r3, [r7, #4]
 8017654:	68db      	ldr	r3, [r3, #12]
 8017656:	2b00      	cmp	r3, #0
 8017658:	d108      	bne.n	801766c <osThreadNew+0xec>
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	691b      	ldr	r3, [r3, #16]
 801765e:	2b00      	cmp	r3, #0
 8017660:	d104      	bne.n	801766c <osThreadNew+0xec>
          mem = 0;
 8017662:	2300      	movs	r3, #0
 8017664:	623b      	str	r3, [r7, #32]
 8017666:	e001      	b.n	801766c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8017668:	2300      	movs	r3, #0
 801766a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 801766c:	6a3b      	ldr	r3, [r7, #32]
 801766e:	2b01      	cmp	r3, #1
 8017670:	d110      	bne.n	8017694 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8017676:	687a      	ldr	r2, [r7, #4]
 8017678:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801767a:	9202      	str	r2, [sp, #8]
 801767c:	9301      	str	r3, [sp, #4]
 801767e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017680:	9300      	str	r3, [sp, #0]
 8017682:	68bb      	ldr	r3, [r7, #8]
 8017684:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017686:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017688:	68f8      	ldr	r0, [r7, #12]
 801768a:	f001 ffd7 	bl	801963c <xTaskCreateStatic>
 801768e:	4603      	mov	r3, r0
 8017690:	613b      	str	r3, [r7, #16]
 8017692:	e013      	b.n	80176bc <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8017694:	6a3b      	ldr	r3, [r7, #32]
 8017696:	2b00      	cmp	r3, #0
 8017698:	d110      	bne.n	80176bc <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801769a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801769c:	b29a      	uxth	r2, r3
 801769e:	f107 0310 	add.w	r3, r7, #16
 80176a2:	9301      	str	r3, [sp, #4]
 80176a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176a6:	9300      	str	r3, [sp, #0]
 80176a8:	68bb      	ldr	r3, [r7, #8]
 80176aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80176ac:	68f8      	ldr	r0, [r7, #12]
 80176ae:	f002 f81f 	bl	80196f0 <xTaskCreate>
 80176b2:	4603      	mov	r3, r0
 80176b4:	2b01      	cmp	r3, #1
 80176b6:	d001      	beq.n	80176bc <osThreadNew+0x13c>
          hTask = NULL;
 80176b8:	2300      	movs	r3, #0
 80176ba:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80176bc:	693b      	ldr	r3, [r7, #16]
}
 80176be:	4618      	mov	r0, r3
 80176c0:	3730      	adds	r7, #48	; 0x30
 80176c2:	46bd      	mov	sp, r7
 80176c4:	bd80      	pop	{r7, pc}
 80176c6:	bf00      	nop
 80176c8:	20001ad8 	.word	0x20001ad8

080176cc <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80176cc:	b580      	push	{r7, lr}
 80176ce:	b08c      	sub	sp, #48	; 0x30
 80176d0:	af02      	add	r7, sp, #8
 80176d2:	60f8      	str	r0, [r7, #12]
 80176d4:	60b9      	str	r1, [r7, #8]
 80176d6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80176d8:	2300      	movs	r3, #0
 80176da:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80176dc:	f3ef 8305 	mrs	r3, IPSR
 80176e0:	61bb      	str	r3, [r7, #24]
  return(result);
 80176e2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80176e4:	2b00      	cmp	r3, #0
 80176e6:	f040 8087 	bne.w	80177f8 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80176ea:	f3ef 8310 	mrs	r3, PRIMASK
 80176ee:	617b      	str	r3, [r7, #20]
  return(result);
 80176f0:	697b      	ldr	r3, [r7, #20]
 80176f2:	2b00      	cmp	r3, #0
 80176f4:	d105      	bne.n	8017702 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80176f6:	f3ef 8311 	mrs	r3, BASEPRI
 80176fa:	613b      	str	r3, [r7, #16]
  return(result);
 80176fc:	693b      	ldr	r3, [r7, #16]
 80176fe:	2b00      	cmp	r3, #0
 8017700:	d003      	beq.n	801770a <osSemaphoreNew+0x3e>
 8017702:	4b40      	ldr	r3, [pc, #256]	; (8017804 <osSemaphoreNew+0x138>)
 8017704:	681b      	ldr	r3, [r3, #0]
 8017706:	2b02      	cmp	r3, #2
 8017708:	d076      	beq.n	80177f8 <osSemaphoreNew+0x12c>
 801770a:	68fb      	ldr	r3, [r7, #12]
 801770c:	2b00      	cmp	r3, #0
 801770e:	d073      	beq.n	80177f8 <osSemaphoreNew+0x12c>
 8017710:	68ba      	ldr	r2, [r7, #8]
 8017712:	68fb      	ldr	r3, [r7, #12]
 8017714:	429a      	cmp	r2, r3
 8017716:	d86f      	bhi.n	80177f8 <osSemaphoreNew+0x12c>
    mem = -1;
 8017718:	f04f 33ff 	mov.w	r3, #4294967295
 801771c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	2b00      	cmp	r3, #0
 8017722:	d015      	beq.n	8017750 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	689b      	ldr	r3, [r3, #8]
 8017728:	2b00      	cmp	r3, #0
 801772a:	d006      	beq.n	801773a <osSemaphoreNew+0x6e>
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	68db      	ldr	r3, [r3, #12]
 8017730:	2b4f      	cmp	r3, #79	; 0x4f
 8017732:	d902      	bls.n	801773a <osSemaphoreNew+0x6e>
        mem = 1;
 8017734:	2301      	movs	r3, #1
 8017736:	623b      	str	r3, [r7, #32]
 8017738:	e00c      	b.n	8017754 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	689b      	ldr	r3, [r3, #8]
 801773e:	2b00      	cmp	r3, #0
 8017740:	d108      	bne.n	8017754 <osSemaphoreNew+0x88>
 8017742:	687b      	ldr	r3, [r7, #4]
 8017744:	68db      	ldr	r3, [r3, #12]
 8017746:	2b00      	cmp	r3, #0
 8017748:	d104      	bne.n	8017754 <osSemaphoreNew+0x88>
          mem = 0;
 801774a:	2300      	movs	r3, #0
 801774c:	623b      	str	r3, [r7, #32]
 801774e:	e001      	b.n	8017754 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8017750:	2300      	movs	r3, #0
 8017752:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8017754:	6a3b      	ldr	r3, [r7, #32]
 8017756:	f1b3 3fff 	cmp.w	r3, #4294967295
 801775a:	d04d      	beq.n	80177f8 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 801775c:	68fb      	ldr	r3, [r7, #12]
 801775e:	2b01      	cmp	r3, #1
 8017760:	d129      	bne.n	80177b6 <osSemaphoreNew+0xea>
        if (mem == 1) {
 8017762:	6a3b      	ldr	r3, [r7, #32]
 8017764:	2b01      	cmp	r3, #1
 8017766:	d10b      	bne.n	8017780 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8017768:	687b      	ldr	r3, [r7, #4]
 801776a:	689a      	ldr	r2, [r3, #8]
 801776c:	2303      	movs	r3, #3
 801776e:	9300      	str	r3, [sp, #0]
 8017770:	4613      	mov	r3, r2
 8017772:	2200      	movs	r2, #0
 8017774:	2100      	movs	r1, #0
 8017776:	2001      	movs	r0, #1
 8017778:	f000 ffda 	bl	8018730 <xQueueGenericCreateStatic>
 801777c:	6278      	str	r0, [r7, #36]	; 0x24
 801777e:	e005      	b.n	801778c <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8017780:	2203      	movs	r2, #3
 8017782:	2100      	movs	r1, #0
 8017784:	2001      	movs	r0, #1
 8017786:	f001 f846 	bl	8018816 <xQueueGenericCreate>
 801778a:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 801778c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801778e:	2b00      	cmp	r3, #0
 8017790:	d022      	beq.n	80177d8 <osSemaphoreNew+0x10c>
 8017792:	68bb      	ldr	r3, [r7, #8]
 8017794:	2b00      	cmp	r3, #0
 8017796:	d01f      	beq.n	80177d8 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8017798:	2300      	movs	r3, #0
 801779a:	2200      	movs	r2, #0
 801779c:	2100      	movs	r1, #0
 801779e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80177a0:	f001 f902 	bl	80189a8 <xQueueGenericSend>
 80177a4:	4603      	mov	r3, r0
 80177a6:	2b01      	cmp	r3, #1
 80177a8:	d016      	beq.n	80177d8 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 80177aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80177ac:	f001 fd75 	bl	801929a <vQueueDelete>
            hSemaphore = NULL;
 80177b0:	2300      	movs	r3, #0
 80177b2:	627b      	str	r3, [r7, #36]	; 0x24
 80177b4:	e010      	b.n	80177d8 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 80177b6:	6a3b      	ldr	r3, [r7, #32]
 80177b8:	2b01      	cmp	r3, #1
 80177ba:	d108      	bne.n	80177ce <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	689b      	ldr	r3, [r3, #8]
 80177c0:	461a      	mov	r2, r3
 80177c2:	68b9      	ldr	r1, [r7, #8]
 80177c4:	68f8      	ldr	r0, [r7, #12]
 80177c6:	f001 f888 	bl	80188da <xQueueCreateCountingSemaphoreStatic>
 80177ca:	6278      	str	r0, [r7, #36]	; 0x24
 80177cc:	e004      	b.n	80177d8 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80177ce:	68b9      	ldr	r1, [r7, #8]
 80177d0:	68f8      	ldr	r0, [r7, #12]
 80177d2:	f001 f8b7 	bl	8018944 <xQueueCreateCountingSemaphore>
 80177d6:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80177d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177da:	2b00      	cmp	r3, #0
 80177dc:	d00c      	beq.n	80177f8 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	2b00      	cmp	r3, #0
 80177e2:	d003      	beq.n	80177ec <osSemaphoreNew+0x120>
          name = attr->name;
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	681b      	ldr	r3, [r3, #0]
 80177e8:	61fb      	str	r3, [r7, #28]
 80177ea:	e001      	b.n	80177f0 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 80177ec:	2300      	movs	r3, #0
 80177ee:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80177f0:	69f9      	ldr	r1, [r7, #28]
 80177f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80177f4:	f001 fe9c 	bl	8019530 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80177f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80177fa:	4618      	mov	r0, r3
 80177fc:	3728      	adds	r7, #40	; 0x28
 80177fe:	46bd      	mov	sp, r7
 8017800:	bd80      	pop	{r7, pc}
 8017802:	bf00      	nop
 8017804:	20001ad8 	.word	0x20001ad8

08017808 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8017808:	b580      	push	{r7, lr}
 801780a:	b088      	sub	sp, #32
 801780c:	af00      	add	r7, sp, #0
 801780e:	6078      	str	r0, [r7, #4]
 8017810:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8017816:	2300      	movs	r3, #0
 8017818:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 801781a:	69bb      	ldr	r3, [r7, #24]
 801781c:	2b00      	cmp	r3, #0
 801781e:	d103      	bne.n	8017828 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8017820:	f06f 0303 	mvn.w	r3, #3
 8017824:	61fb      	str	r3, [r7, #28]
 8017826:	e04b      	b.n	80178c0 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017828:	f3ef 8305 	mrs	r3, IPSR
 801782c:	617b      	str	r3, [r7, #20]
  return(result);
 801782e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8017830:	2b00      	cmp	r3, #0
 8017832:	d10f      	bne.n	8017854 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017834:	f3ef 8310 	mrs	r3, PRIMASK
 8017838:	613b      	str	r3, [r7, #16]
  return(result);
 801783a:	693b      	ldr	r3, [r7, #16]
 801783c:	2b00      	cmp	r3, #0
 801783e:	d105      	bne.n	801784c <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8017840:	f3ef 8311 	mrs	r3, BASEPRI
 8017844:	60fb      	str	r3, [r7, #12]
  return(result);
 8017846:	68fb      	ldr	r3, [r7, #12]
 8017848:	2b00      	cmp	r3, #0
 801784a:	d026      	beq.n	801789a <osSemaphoreAcquire+0x92>
 801784c:	4b1f      	ldr	r3, [pc, #124]	; (80178cc <osSemaphoreAcquire+0xc4>)
 801784e:	681b      	ldr	r3, [r3, #0]
 8017850:	2b02      	cmp	r3, #2
 8017852:	d122      	bne.n	801789a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8017854:	683b      	ldr	r3, [r7, #0]
 8017856:	2b00      	cmp	r3, #0
 8017858:	d003      	beq.n	8017862 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 801785a:	f06f 0303 	mvn.w	r3, #3
 801785e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8017860:	e02d      	b.n	80178be <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8017862:	2300      	movs	r3, #0
 8017864:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8017866:	f107 0308 	add.w	r3, r7, #8
 801786a:	461a      	mov	r2, r3
 801786c:	2100      	movs	r1, #0
 801786e:	69b8      	ldr	r0, [r7, #24]
 8017870:	f001 fc96 	bl	80191a0 <xQueueReceiveFromISR>
 8017874:	4603      	mov	r3, r0
 8017876:	2b01      	cmp	r3, #1
 8017878:	d003      	beq.n	8017882 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 801787a:	f06f 0302 	mvn.w	r3, #2
 801787e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8017880:	e01d      	b.n	80178be <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8017882:	68bb      	ldr	r3, [r7, #8]
 8017884:	2b00      	cmp	r3, #0
 8017886:	d01a      	beq.n	80178be <osSemaphoreAcquire+0xb6>
 8017888:	4b11      	ldr	r3, [pc, #68]	; (80178d0 <osSemaphoreAcquire+0xc8>)
 801788a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801788e:	601a      	str	r2, [r3, #0]
 8017890:	f3bf 8f4f 	dsb	sy
 8017894:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8017898:	e011      	b.n	80178be <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 801789a:	6839      	ldr	r1, [r7, #0]
 801789c:	69b8      	ldr	r0, [r7, #24]
 801789e:	f001 fb77 	bl	8018f90 <xQueueSemaphoreTake>
 80178a2:	4603      	mov	r3, r0
 80178a4:	2b01      	cmp	r3, #1
 80178a6:	d00b      	beq.n	80178c0 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80178a8:	683b      	ldr	r3, [r7, #0]
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	d003      	beq.n	80178b6 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80178ae:	f06f 0301 	mvn.w	r3, #1
 80178b2:	61fb      	str	r3, [r7, #28]
 80178b4:	e004      	b.n	80178c0 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80178b6:	f06f 0302 	mvn.w	r3, #2
 80178ba:	61fb      	str	r3, [r7, #28]
 80178bc:	e000      	b.n	80178c0 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80178be:	bf00      	nop
      }
    }
  }

  return (stat);
 80178c0:	69fb      	ldr	r3, [r7, #28]
}
 80178c2:	4618      	mov	r0, r3
 80178c4:	3720      	adds	r7, #32
 80178c6:	46bd      	mov	sp, r7
 80178c8:	bd80      	pop	{r7, pc}
 80178ca:	bf00      	nop
 80178cc:	20001ad8 	.word	0x20001ad8
 80178d0:	e000ed04 	.word	0xe000ed04

080178d4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80178d4:	b580      	push	{r7, lr}
 80178d6:	b088      	sub	sp, #32
 80178d8:	af00      	add	r7, sp, #0
 80178da:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80178e0:	2300      	movs	r3, #0
 80178e2:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80178e4:	69bb      	ldr	r3, [r7, #24]
 80178e6:	2b00      	cmp	r3, #0
 80178e8:	d103      	bne.n	80178f2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80178ea:	f06f 0303 	mvn.w	r3, #3
 80178ee:	61fb      	str	r3, [r7, #28]
 80178f0:	e03e      	b.n	8017970 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80178f2:	f3ef 8305 	mrs	r3, IPSR
 80178f6:	617b      	str	r3, [r7, #20]
  return(result);
 80178f8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80178fa:	2b00      	cmp	r3, #0
 80178fc:	d10f      	bne.n	801791e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80178fe:	f3ef 8310 	mrs	r3, PRIMASK
 8017902:	613b      	str	r3, [r7, #16]
  return(result);
 8017904:	693b      	ldr	r3, [r7, #16]
 8017906:	2b00      	cmp	r3, #0
 8017908:	d105      	bne.n	8017916 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801790a:	f3ef 8311 	mrs	r3, BASEPRI
 801790e:	60fb      	str	r3, [r7, #12]
  return(result);
 8017910:	68fb      	ldr	r3, [r7, #12]
 8017912:	2b00      	cmp	r3, #0
 8017914:	d01e      	beq.n	8017954 <osSemaphoreRelease+0x80>
 8017916:	4b19      	ldr	r3, [pc, #100]	; (801797c <osSemaphoreRelease+0xa8>)
 8017918:	681b      	ldr	r3, [r3, #0]
 801791a:	2b02      	cmp	r3, #2
 801791c:	d11a      	bne.n	8017954 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 801791e:	2300      	movs	r3, #0
 8017920:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8017922:	f107 0308 	add.w	r3, r7, #8
 8017926:	4619      	mov	r1, r3
 8017928:	69b8      	ldr	r0, [r7, #24]
 801792a:	f001 f9cb 	bl	8018cc4 <xQueueGiveFromISR>
 801792e:	4603      	mov	r3, r0
 8017930:	2b01      	cmp	r3, #1
 8017932:	d003      	beq.n	801793c <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8017934:	f06f 0302 	mvn.w	r3, #2
 8017938:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801793a:	e018      	b.n	801796e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 801793c:	68bb      	ldr	r3, [r7, #8]
 801793e:	2b00      	cmp	r3, #0
 8017940:	d015      	beq.n	801796e <osSemaphoreRelease+0x9a>
 8017942:	4b0f      	ldr	r3, [pc, #60]	; (8017980 <osSemaphoreRelease+0xac>)
 8017944:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017948:	601a      	str	r2, [r3, #0]
 801794a:	f3bf 8f4f 	dsb	sy
 801794e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8017952:	e00c      	b.n	801796e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8017954:	2300      	movs	r3, #0
 8017956:	2200      	movs	r2, #0
 8017958:	2100      	movs	r1, #0
 801795a:	69b8      	ldr	r0, [r7, #24]
 801795c:	f001 f824 	bl	80189a8 <xQueueGenericSend>
 8017960:	4603      	mov	r3, r0
 8017962:	2b01      	cmp	r3, #1
 8017964:	d004      	beq.n	8017970 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8017966:	f06f 0302 	mvn.w	r3, #2
 801796a:	61fb      	str	r3, [r7, #28]
 801796c:	e000      	b.n	8017970 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801796e:	bf00      	nop
    }
  }

  return (stat);
 8017970:	69fb      	ldr	r3, [r7, #28]
}
 8017972:	4618      	mov	r0, r3
 8017974:	3720      	adds	r7, #32
 8017976:	46bd      	mov	sp, r7
 8017978:	bd80      	pop	{r7, pc}
 801797a:	bf00      	nop
 801797c:	20001ad8 	.word	0x20001ad8
 8017980:	e000ed04 	.word	0xe000ed04

08017984 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8017984:	b580      	push	{r7, lr}
 8017986:	b08c      	sub	sp, #48	; 0x30
 8017988:	af02      	add	r7, sp, #8
 801798a:	60f8      	str	r0, [r7, #12]
 801798c:	60b9      	str	r1, [r7, #8]
 801798e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8017990:	2300      	movs	r3, #0
 8017992:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017994:	f3ef 8305 	mrs	r3, IPSR
 8017998:	61bb      	str	r3, [r7, #24]
  return(result);
 801799a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 801799c:	2b00      	cmp	r3, #0
 801799e:	d170      	bne.n	8017a82 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80179a0:	f3ef 8310 	mrs	r3, PRIMASK
 80179a4:	617b      	str	r3, [r7, #20]
  return(result);
 80179a6:	697b      	ldr	r3, [r7, #20]
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	d105      	bne.n	80179b8 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80179ac:	f3ef 8311 	mrs	r3, BASEPRI
 80179b0:	613b      	str	r3, [r7, #16]
  return(result);
 80179b2:	693b      	ldr	r3, [r7, #16]
 80179b4:	2b00      	cmp	r3, #0
 80179b6:	d003      	beq.n	80179c0 <osMessageQueueNew+0x3c>
 80179b8:	4b34      	ldr	r3, [pc, #208]	; (8017a8c <osMessageQueueNew+0x108>)
 80179ba:	681b      	ldr	r3, [r3, #0]
 80179bc:	2b02      	cmp	r3, #2
 80179be:	d060      	beq.n	8017a82 <osMessageQueueNew+0xfe>
 80179c0:	68fb      	ldr	r3, [r7, #12]
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	d05d      	beq.n	8017a82 <osMessageQueueNew+0xfe>
 80179c6:	68bb      	ldr	r3, [r7, #8]
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	d05a      	beq.n	8017a82 <osMessageQueueNew+0xfe>
    mem = -1;
 80179cc:	f04f 33ff 	mov.w	r3, #4294967295
 80179d0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	2b00      	cmp	r3, #0
 80179d6:	d029      	beq.n	8017a2c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	689b      	ldr	r3, [r3, #8]
 80179dc:	2b00      	cmp	r3, #0
 80179de:	d012      	beq.n	8017a06 <osMessageQueueNew+0x82>
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	68db      	ldr	r3, [r3, #12]
 80179e4:	2b4f      	cmp	r3, #79	; 0x4f
 80179e6:	d90e      	bls.n	8017a06 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80179e8:	687b      	ldr	r3, [r7, #4]
 80179ea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80179ec:	2b00      	cmp	r3, #0
 80179ee:	d00a      	beq.n	8017a06 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	695a      	ldr	r2, [r3, #20]
 80179f4:	68fb      	ldr	r3, [r7, #12]
 80179f6:	68b9      	ldr	r1, [r7, #8]
 80179f8:	fb01 f303 	mul.w	r3, r1, r3
 80179fc:	429a      	cmp	r2, r3
 80179fe:	d302      	bcc.n	8017a06 <osMessageQueueNew+0x82>
        mem = 1;
 8017a00:	2301      	movs	r3, #1
 8017a02:	623b      	str	r3, [r7, #32]
 8017a04:	e014      	b.n	8017a30 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8017a06:	687b      	ldr	r3, [r7, #4]
 8017a08:	689b      	ldr	r3, [r3, #8]
 8017a0a:	2b00      	cmp	r3, #0
 8017a0c:	d110      	bne.n	8017a30 <osMessageQueueNew+0xac>
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	68db      	ldr	r3, [r3, #12]
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	d10c      	bne.n	8017a30 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8017a16:	687b      	ldr	r3, [r7, #4]
 8017a18:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	d108      	bne.n	8017a30 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	695b      	ldr	r3, [r3, #20]
 8017a22:	2b00      	cmp	r3, #0
 8017a24:	d104      	bne.n	8017a30 <osMessageQueueNew+0xac>
          mem = 0;
 8017a26:	2300      	movs	r3, #0
 8017a28:	623b      	str	r3, [r7, #32]
 8017a2a:	e001      	b.n	8017a30 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8017a2c:	2300      	movs	r3, #0
 8017a2e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8017a30:	6a3b      	ldr	r3, [r7, #32]
 8017a32:	2b01      	cmp	r3, #1
 8017a34:	d10c      	bne.n	8017a50 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	691a      	ldr	r2, [r3, #16]
 8017a3a:	687b      	ldr	r3, [r7, #4]
 8017a3c:	6899      	ldr	r1, [r3, #8]
 8017a3e:	2300      	movs	r3, #0
 8017a40:	9300      	str	r3, [sp, #0]
 8017a42:	460b      	mov	r3, r1
 8017a44:	68b9      	ldr	r1, [r7, #8]
 8017a46:	68f8      	ldr	r0, [r7, #12]
 8017a48:	f000 fe72 	bl	8018730 <xQueueGenericCreateStatic>
 8017a4c:	6278      	str	r0, [r7, #36]	; 0x24
 8017a4e:	e008      	b.n	8017a62 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8017a50:	6a3b      	ldr	r3, [r7, #32]
 8017a52:	2b00      	cmp	r3, #0
 8017a54:	d105      	bne.n	8017a62 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8017a56:	2200      	movs	r2, #0
 8017a58:	68b9      	ldr	r1, [r7, #8]
 8017a5a:	68f8      	ldr	r0, [r7, #12]
 8017a5c:	f000 fedb 	bl	8018816 <xQueueGenericCreate>
 8017a60:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8017a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d00c      	beq.n	8017a82 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	d003      	beq.n	8017a76 <osMessageQueueNew+0xf2>
        name = attr->name;
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	681b      	ldr	r3, [r3, #0]
 8017a72:	61fb      	str	r3, [r7, #28]
 8017a74:	e001      	b.n	8017a7a <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8017a76:	2300      	movs	r3, #0
 8017a78:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8017a7a:	69f9      	ldr	r1, [r7, #28]
 8017a7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017a7e:	f001 fd57 	bl	8019530 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8017a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017a84:	4618      	mov	r0, r3
 8017a86:	3728      	adds	r7, #40	; 0x28
 8017a88:	46bd      	mov	sp, r7
 8017a8a:	bd80      	pop	{r7, pc}
 8017a8c:	20001ad8 	.word	0x20001ad8

08017a90 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8017a90:	b580      	push	{r7, lr}
 8017a92:	b08a      	sub	sp, #40	; 0x28
 8017a94:	af00      	add	r7, sp, #0
 8017a96:	60f8      	str	r0, [r7, #12]
 8017a98:	60b9      	str	r1, [r7, #8]
 8017a9a:	603b      	str	r3, [r7, #0]
 8017a9c:	4613      	mov	r3, r2
 8017a9e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8017aa0:	68fb      	ldr	r3, [r7, #12]
 8017aa2:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8017aa4:	2300      	movs	r3, #0
 8017aa6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017aa8:	f3ef 8305 	mrs	r3, IPSR
 8017aac:	61fb      	str	r3, [r7, #28]
  return(result);
 8017aae:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8017ab0:	2b00      	cmp	r3, #0
 8017ab2:	d10f      	bne.n	8017ad4 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017ab4:	f3ef 8310 	mrs	r3, PRIMASK
 8017ab8:	61bb      	str	r3, [r7, #24]
  return(result);
 8017aba:	69bb      	ldr	r3, [r7, #24]
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	d105      	bne.n	8017acc <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8017ac0:	f3ef 8311 	mrs	r3, BASEPRI
 8017ac4:	617b      	str	r3, [r7, #20]
  return(result);
 8017ac6:	697b      	ldr	r3, [r7, #20]
 8017ac8:	2b00      	cmp	r3, #0
 8017aca:	d02c      	beq.n	8017b26 <osMessageQueuePut+0x96>
 8017acc:	4b28      	ldr	r3, [pc, #160]	; (8017b70 <osMessageQueuePut+0xe0>)
 8017ace:	681b      	ldr	r3, [r3, #0]
 8017ad0:	2b02      	cmp	r3, #2
 8017ad2:	d128      	bne.n	8017b26 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8017ad4:	6a3b      	ldr	r3, [r7, #32]
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	d005      	beq.n	8017ae6 <osMessageQueuePut+0x56>
 8017ada:	68bb      	ldr	r3, [r7, #8]
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	d002      	beq.n	8017ae6 <osMessageQueuePut+0x56>
 8017ae0:	683b      	ldr	r3, [r7, #0]
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	d003      	beq.n	8017aee <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8017ae6:	f06f 0303 	mvn.w	r3, #3
 8017aea:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8017aec:	e039      	b.n	8017b62 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8017aee:	2300      	movs	r3, #0
 8017af0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8017af2:	f107 0210 	add.w	r2, r7, #16
 8017af6:	2300      	movs	r3, #0
 8017af8:	68b9      	ldr	r1, [r7, #8]
 8017afa:	6a38      	ldr	r0, [r7, #32]
 8017afc:	f001 f84e 	bl	8018b9c <xQueueGenericSendFromISR>
 8017b00:	4603      	mov	r3, r0
 8017b02:	2b01      	cmp	r3, #1
 8017b04:	d003      	beq.n	8017b0e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8017b06:	f06f 0302 	mvn.w	r3, #2
 8017b0a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8017b0c:	e029      	b.n	8017b62 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8017b0e:	693b      	ldr	r3, [r7, #16]
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	d026      	beq.n	8017b62 <osMessageQueuePut+0xd2>
 8017b14:	4b17      	ldr	r3, [pc, #92]	; (8017b74 <osMessageQueuePut+0xe4>)
 8017b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017b1a:	601a      	str	r2, [r3, #0]
 8017b1c:	f3bf 8f4f 	dsb	sy
 8017b20:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8017b24:	e01d      	b.n	8017b62 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8017b26:	6a3b      	ldr	r3, [r7, #32]
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	d002      	beq.n	8017b32 <osMessageQueuePut+0xa2>
 8017b2c:	68bb      	ldr	r3, [r7, #8]
 8017b2e:	2b00      	cmp	r3, #0
 8017b30:	d103      	bne.n	8017b3a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8017b32:	f06f 0303 	mvn.w	r3, #3
 8017b36:	627b      	str	r3, [r7, #36]	; 0x24
 8017b38:	e014      	b.n	8017b64 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8017b3a:	2300      	movs	r3, #0
 8017b3c:	683a      	ldr	r2, [r7, #0]
 8017b3e:	68b9      	ldr	r1, [r7, #8]
 8017b40:	6a38      	ldr	r0, [r7, #32]
 8017b42:	f000 ff31 	bl	80189a8 <xQueueGenericSend>
 8017b46:	4603      	mov	r3, r0
 8017b48:	2b01      	cmp	r3, #1
 8017b4a:	d00b      	beq.n	8017b64 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8017b4c:	683b      	ldr	r3, [r7, #0]
 8017b4e:	2b00      	cmp	r3, #0
 8017b50:	d003      	beq.n	8017b5a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8017b52:	f06f 0301 	mvn.w	r3, #1
 8017b56:	627b      	str	r3, [r7, #36]	; 0x24
 8017b58:	e004      	b.n	8017b64 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8017b5a:	f06f 0302 	mvn.w	r3, #2
 8017b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8017b60:	e000      	b.n	8017b64 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8017b62:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8017b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017b66:	4618      	mov	r0, r3
 8017b68:	3728      	adds	r7, #40	; 0x28
 8017b6a:	46bd      	mov	sp, r7
 8017b6c:	bd80      	pop	{r7, pc}
 8017b6e:	bf00      	nop
 8017b70:	20001ad8 	.word	0x20001ad8
 8017b74:	e000ed04 	.word	0xe000ed04

08017b78 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8017b78:	b580      	push	{r7, lr}
 8017b7a:	b08a      	sub	sp, #40	; 0x28
 8017b7c:	af00      	add	r7, sp, #0
 8017b7e:	60f8      	str	r0, [r7, #12]
 8017b80:	60b9      	str	r1, [r7, #8]
 8017b82:	607a      	str	r2, [r7, #4]
 8017b84:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8017b86:	68fb      	ldr	r3, [r7, #12]
 8017b88:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8017b8a:	2300      	movs	r3, #0
 8017b8c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017b8e:	f3ef 8305 	mrs	r3, IPSR
 8017b92:	61fb      	str	r3, [r7, #28]
  return(result);
 8017b94:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8017b96:	2b00      	cmp	r3, #0
 8017b98:	d10f      	bne.n	8017bba <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017b9a:	f3ef 8310 	mrs	r3, PRIMASK
 8017b9e:	61bb      	str	r3, [r7, #24]
  return(result);
 8017ba0:	69bb      	ldr	r3, [r7, #24]
 8017ba2:	2b00      	cmp	r3, #0
 8017ba4:	d105      	bne.n	8017bb2 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8017ba6:	f3ef 8311 	mrs	r3, BASEPRI
 8017baa:	617b      	str	r3, [r7, #20]
  return(result);
 8017bac:	697b      	ldr	r3, [r7, #20]
 8017bae:	2b00      	cmp	r3, #0
 8017bb0:	d02c      	beq.n	8017c0c <osMessageQueueGet+0x94>
 8017bb2:	4b28      	ldr	r3, [pc, #160]	; (8017c54 <osMessageQueueGet+0xdc>)
 8017bb4:	681b      	ldr	r3, [r3, #0]
 8017bb6:	2b02      	cmp	r3, #2
 8017bb8:	d128      	bne.n	8017c0c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8017bba:	6a3b      	ldr	r3, [r7, #32]
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	d005      	beq.n	8017bcc <osMessageQueueGet+0x54>
 8017bc0:	68bb      	ldr	r3, [r7, #8]
 8017bc2:	2b00      	cmp	r3, #0
 8017bc4:	d002      	beq.n	8017bcc <osMessageQueueGet+0x54>
 8017bc6:	683b      	ldr	r3, [r7, #0]
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	d003      	beq.n	8017bd4 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8017bcc:	f06f 0303 	mvn.w	r3, #3
 8017bd0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8017bd2:	e038      	b.n	8017c46 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8017bd4:	2300      	movs	r3, #0
 8017bd6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8017bd8:	f107 0310 	add.w	r3, r7, #16
 8017bdc:	461a      	mov	r2, r3
 8017bde:	68b9      	ldr	r1, [r7, #8]
 8017be0:	6a38      	ldr	r0, [r7, #32]
 8017be2:	f001 fadd 	bl	80191a0 <xQueueReceiveFromISR>
 8017be6:	4603      	mov	r3, r0
 8017be8:	2b01      	cmp	r3, #1
 8017bea:	d003      	beq.n	8017bf4 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8017bec:	f06f 0302 	mvn.w	r3, #2
 8017bf0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8017bf2:	e028      	b.n	8017c46 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8017bf4:	693b      	ldr	r3, [r7, #16]
 8017bf6:	2b00      	cmp	r3, #0
 8017bf8:	d025      	beq.n	8017c46 <osMessageQueueGet+0xce>
 8017bfa:	4b17      	ldr	r3, [pc, #92]	; (8017c58 <osMessageQueueGet+0xe0>)
 8017bfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017c00:	601a      	str	r2, [r3, #0]
 8017c02:	f3bf 8f4f 	dsb	sy
 8017c06:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8017c0a:	e01c      	b.n	8017c46 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8017c0c:	6a3b      	ldr	r3, [r7, #32]
 8017c0e:	2b00      	cmp	r3, #0
 8017c10:	d002      	beq.n	8017c18 <osMessageQueueGet+0xa0>
 8017c12:	68bb      	ldr	r3, [r7, #8]
 8017c14:	2b00      	cmp	r3, #0
 8017c16:	d103      	bne.n	8017c20 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8017c18:	f06f 0303 	mvn.w	r3, #3
 8017c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8017c1e:	e013      	b.n	8017c48 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8017c20:	683a      	ldr	r2, [r7, #0]
 8017c22:	68b9      	ldr	r1, [r7, #8]
 8017c24:	6a38      	ldr	r0, [r7, #32]
 8017c26:	f001 f8d7 	bl	8018dd8 <xQueueReceive>
 8017c2a:	4603      	mov	r3, r0
 8017c2c:	2b01      	cmp	r3, #1
 8017c2e:	d00b      	beq.n	8017c48 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8017c30:	683b      	ldr	r3, [r7, #0]
 8017c32:	2b00      	cmp	r3, #0
 8017c34:	d003      	beq.n	8017c3e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8017c36:	f06f 0301 	mvn.w	r3, #1
 8017c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8017c3c:	e004      	b.n	8017c48 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8017c3e:	f06f 0302 	mvn.w	r3, #2
 8017c42:	627b      	str	r3, [r7, #36]	; 0x24
 8017c44:	e000      	b.n	8017c48 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8017c46:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8017c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017c4a:	4618      	mov	r0, r3
 8017c4c:	3728      	adds	r7, #40	; 0x28
 8017c4e:	46bd      	mov	sp, r7
 8017c50:	bd80      	pop	{r7, pc}
 8017c52:	bf00      	nop
 8017c54:	20001ad8 	.word	0x20001ad8
 8017c58:	e000ed04 	.word	0xe000ed04

08017c5c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8017c5c:	b480      	push	{r7}
 8017c5e:	b085      	sub	sp, #20
 8017c60:	af00      	add	r7, sp, #0
 8017c62:	60f8      	str	r0, [r7, #12]
 8017c64:	60b9      	str	r1, [r7, #8]
 8017c66:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8017c68:	68fb      	ldr	r3, [r7, #12]
 8017c6a:	4a07      	ldr	r2, [pc, #28]	; (8017c88 <vApplicationGetIdleTaskMemory+0x2c>)
 8017c6c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8017c6e:	68bb      	ldr	r3, [r7, #8]
 8017c70:	4a06      	ldr	r2, [pc, #24]	; (8017c8c <vApplicationGetIdleTaskMemory+0x30>)
 8017c72:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	2280      	movs	r2, #128	; 0x80
 8017c78:	601a      	str	r2, [r3, #0]
}
 8017c7a:	bf00      	nop
 8017c7c:	3714      	adds	r7, #20
 8017c7e:	46bd      	mov	sp, r7
 8017c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c84:	4770      	bx	lr
 8017c86:	bf00      	nop
 8017c88:	20001adc 	.word	0x20001adc
 8017c8c:	20001b3c 	.word	0x20001b3c

08017c90 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8017c90:	b480      	push	{r7}
 8017c92:	b085      	sub	sp, #20
 8017c94:	af00      	add	r7, sp, #0
 8017c96:	60f8      	str	r0, [r7, #12]
 8017c98:	60b9      	str	r1, [r7, #8]
 8017c9a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8017c9c:	68fb      	ldr	r3, [r7, #12]
 8017c9e:	4a07      	ldr	r2, [pc, #28]	; (8017cbc <vApplicationGetTimerTaskMemory+0x2c>)
 8017ca0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8017ca2:	68bb      	ldr	r3, [r7, #8]
 8017ca4:	4a06      	ldr	r2, [pc, #24]	; (8017cc0 <vApplicationGetTimerTaskMemory+0x30>)
 8017ca6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8017ca8:	687b      	ldr	r3, [r7, #4]
 8017caa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017cae:	601a      	str	r2, [r3, #0]
}
 8017cb0:	bf00      	nop
 8017cb2:	3714      	adds	r7, #20
 8017cb4:	46bd      	mov	sp, r7
 8017cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cba:	4770      	bx	lr
 8017cbc:	20001d3c 	.word	0x20001d3c
 8017cc0:	20001d9c 	.word	0x20001d9c

08017cc4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8017cc4:	b580      	push	{r7, lr}
 8017cc6:	b08a      	sub	sp, #40	; 0x28
 8017cc8:	af00      	add	r7, sp, #0
 8017cca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8017ccc:	2300      	movs	r3, #0
 8017cce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8017cd0:	f001 feb8 	bl	8019a44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8017cd4:	4b57      	ldr	r3, [pc, #348]	; (8017e34 <pvPortMalloc+0x170>)
 8017cd6:	681b      	ldr	r3, [r3, #0]
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	d101      	bne.n	8017ce0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8017cdc:	f000 f90c 	bl	8017ef8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8017ce0:	4b55      	ldr	r3, [pc, #340]	; (8017e38 <pvPortMalloc+0x174>)
 8017ce2:	681a      	ldr	r2, [r3, #0]
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	4013      	ands	r3, r2
 8017ce8:	2b00      	cmp	r3, #0
 8017cea:	f040 808c 	bne.w	8017e06 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	2b00      	cmp	r3, #0
 8017cf2:	d01c      	beq.n	8017d2e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8017cf4:	2208      	movs	r2, #8
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	4413      	add	r3, r2
 8017cfa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8017cfc:	687b      	ldr	r3, [r7, #4]
 8017cfe:	f003 0307 	and.w	r3, r3, #7
 8017d02:	2b00      	cmp	r3, #0
 8017d04:	d013      	beq.n	8017d2e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8017d06:	687b      	ldr	r3, [r7, #4]
 8017d08:	f023 0307 	bic.w	r3, r3, #7
 8017d0c:	3308      	adds	r3, #8
 8017d0e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	f003 0307 	and.w	r3, r3, #7
 8017d16:	2b00      	cmp	r3, #0
 8017d18:	d009      	beq.n	8017d2e <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8017d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d1e:	f383 8811 	msr	BASEPRI, r3
 8017d22:	f3bf 8f6f 	isb	sy
 8017d26:	f3bf 8f4f 	dsb	sy
 8017d2a:	617b      	str	r3, [r7, #20]
 8017d2c:	e7fe      	b.n	8017d2c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8017d2e:	687b      	ldr	r3, [r7, #4]
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	d068      	beq.n	8017e06 <pvPortMalloc+0x142>
 8017d34:	4b41      	ldr	r3, [pc, #260]	; (8017e3c <pvPortMalloc+0x178>)
 8017d36:	681b      	ldr	r3, [r3, #0]
 8017d38:	687a      	ldr	r2, [r7, #4]
 8017d3a:	429a      	cmp	r2, r3
 8017d3c:	d863      	bhi.n	8017e06 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8017d3e:	4b40      	ldr	r3, [pc, #256]	; (8017e40 <pvPortMalloc+0x17c>)
 8017d40:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8017d42:	4b3f      	ldr	r3, [pc, #252]	; (8017e40 <pvPortMalloc+0x17c>)
 8017d44:	681b      	ldr	r3, [r3, #0]
 8017d46:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017d48:	e004      	b.n	8017d54 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8017d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d4c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8017d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d50:	681b      	ldr	r3, [r3, #0]
 8017d52:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d56:	685b      	ldr	r3, [r3, #4]
 8017d58:	687a      	ldr	r2, [r7, #4]
 8017d5a:	429a      	cmp	r2, r3
 8017d5c:	d903      	bls.n	8017d66 <pvPortMalloc+0xa2>
 8017d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d60:	681b      	ldr	r3, [r3, #0]
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	d1f1      	bne.n	8017d4a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8017d66:	4b33      	ldr	r3, [pc, #204]	; (8017e34 <pvPortMalloc+0x170>)
 8017d68:	681b      	ldr	r3, [r3, #0]
 8017d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017d6c:	429a      	cmp	r2, r3
 8017d6e:	d04a      	beq.n	8017e06 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8017d70:	6a3b      	ldr	r3, [r7, #32]
 8017d72:	681b      	ldr	r3, [r3, #0]
 8017d74:	2208      	movs	r2, #8
 8017d76:	4413      	add	r3, r2
 8017d78:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8017d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d7c:	681a      	ldr	r2, [r3, #0]
 8017d7e:	6a3b      	ldr	r3, [r7, #32]
 8017d80:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8017d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d84:	685a      	ldr	r2, [r3, #4]
 8017d86:	687b      	ldr	r3, [r7, #4]
 8017d88:	1ad2      	subs	r2, r2, r3
 8017d8a:	2308      	movs	r3, #8
 8017d8c:	005b      	lsls	r3, r3, #1
 8017d8e:	429a      	cmp	r2, r3
 8017d90:	d91e      	bls.n	8017dd0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8017d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	4413      	add	r3, r2
 8017d98:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017d9a:	69bb      	ldr	r3, [r7, #24]
 8017d9c:	f003 0307 	and.w	r3, r3, #7
 8017da0:	2b00      	cmp	r3, #0
 8017da2:	d009      	beq.n	8017db8 <pvPortMalloc+0xf4>
 8017da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017da8:	f383 8811 	msr	BASEPRI, r3
 8017dac:	f3bf 8f6f 	isb	sy
 8017db0:	f3bf 8f4f 	dsb	sy
 8017db4:	613b      	str	r3, [r7, #16]
 8017db6:	e7fe      	b.n	8017db6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8017db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dba:	685a      	ldr	r2, [r3, #4]
 8017dbc:	687b      	ldr	r3, [r7, #4]
 8017dbe:	1ad2      	subs	r2, r2, r3
 8017dc0:	69bb      	ldr	r3, [r7, #24]
 8017dc2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8017dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dc6:	687a      	ldr	r2, [r7, #4]
 8017dc8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8017dca:	69b8      	ldr	r0, [r7, #24]
 8017dcc:	f000 f8f6 	bl	8017fbc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8017dd0:	4b1a      	ldr	r3, [pc, #104]	; (8017e3c <pvPortMalloc+0x178>)
 8017dd2:	681a      	ldr	r2, [r3, #0]
 8017dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dd6:	685b      	ldr	r3, [r3, #4]
 8017dd8:	1ad3      	subs	r3, r2, r3
 8017dda:	4a18      	ldr	r2, [pc, #96]	; (8017e3c <pvPortMalloc+0x178>)
 8017ddc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8017dde:	4b17      	ldr	r3, [pc, #92]	; (8017e3c <pvPortMalloc+0x178>)
 8017de0:	681a      	ldr	r2, [r3, #0]
 8017de2:	4b18      	ldr	r3, [pc, #96]	; (8017e44 <pvPortMalloc+0x180>)
 8017de4:	681b      	ldr	r3, [r3, #0]
 8017de6:	429a      	cmp	r2, r3
 8017de8:	d203      	bcs.n	8017df2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8017dea:	4b14      	ldr	r3, [pc, #80]	; (8017e3c <pvPortMalloc+0x178>)
 8017dec:	681b      	ldr	r3, [r3, #0]
 8017dee:	4a15      	ldr	r2, [pc, #84]	; (8017e44 <pvPortMalloc+0x180>)
 8017df0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8017df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017df4:	685a      	ldr	r2, [r3, #4]
 8017df6:	4b10      	ldr	r3, [pc, #64]	; (8017e38 <pvPortMalloc+0x174>)
 8017df8:	681b      	ldr	r3, [r3, #0]
 8017dfa:	431a      	orrs	r2, r3
 8017dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dfe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8017e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e02:	2200      	movs	r2, #0
 8017e04:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8017e06:	f001 fe2b 	bl	8019a60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8017e0a:	69fb      	ldr	r3, [r7, #28]
 8017e0c:	f003 0307 	and.w	r3, r3, #7
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	d009      	beq.n	8017e28 <pvPortMalloc+0x164>
 8017e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e18:	f383 8811 	msr	BASEPRI, r3
 8017e1c:	f3bf 8f6f 	isb	sy
 8017e20:	f3bf 8f4f 	dsb	sy
 8017e24:	60fb      	str	r3, [r7, #12]
 8017e26:	e7fe      	b.n	8017e26 <pvPortMalloc+0x162>
	return pvReturn;
 8017e28:	69fb      	ldr	r3, [r7, #28]
}
 8017e2a:	4618      	mov	r0, r3
 8017e2c:	3728      	adds	r7, #40	; 0x28
 8017e2e:	46bd      	mov	sp, r7
 8017e30:	bd80      	pop	{r7, pc}
 8017e32:	bf00      	nop
 8017e34:	200121a4 	.word	0x200121a4
 8017e38:	200121b0 	.word	0x200121b0
 8017e3c:	200121a8 	.word	0x200121a8
 8017e40:	2001219c 	.word	0x2001219c
 8017e44:	200121ac 	.word	0x200121ac

08017e48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8017e48:	b580      	push	{r7, lr}
 8017e4a:	b086      	sub	sp, #24
 8017e4c:	af00      	add	r7, sp, #0
 8017e4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8017e54:	687b      	ldr	r3, [r7, #4]
 8017e56:	2b00      	cmp	r3, #0
 8017e58:	d046      	beq.n	8017ee8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8017e5a:	2308      	movs	r3, #8
 8017e5c:	425b      	negs	r3, r3
 8017e5e:	697a      	ldr	r2, [r7, #20]
 8017e60:	4413      	add	r3, r2
 8017e62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8017e64:	697b      	ldr	r3, [r7, #20]
 8017e66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8017e68:	693b      	ldr	r3, [r7, #16]
 8017e6a:	685a      	ldr	r2, [r3, #4]
 8017e6c:	4b20      	ldr	r3, [pc, #128]	; (8017ef0 <vPortFree+0xa8>)
 8017e6e:	681b      	ldr	r3, [r3, #0]
 8017e70:	4013      	ands	r3, r2
 8017e72:	2b00      	cmp	r3, #0
 8017e74:	d109      	bne.n	8017e8a <vPortFree+0x42>
 8017e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e7a:	f383 8811 	msr	BASEPRI, r3
 8017e7e:	f3bf 8f6f 	isb	sy
 8017e82:	f3bf 8f4f 	dsb	sy
 8017e86:	60fb      	str	r3, [r7, #12]
 8017e88:	e7fe      	b.n	8017e88 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8017e8a:	693b      	ldr	r3, [r7, #16]
 8017e8c:	681b      	ldr	r3, [r3, #0]
 8017e8e:	2b00      	cmp	r3, #0
 8017e90:	d009      	beq.n	8017ea6 <vPortFree+0x5e>
 8017e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e96:	f383 8811 	msr	BASEPRI, r3
 8017e9a:	f3bf 8f6f 	isb	sy
 8017e9e:	f3bf 8f4f 	dsb	sy
 8017ea2:	60bb      	str	r3, [r7, #8]
 8017ea4:	e7fe      	b.n	8017ea4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8017ea6:	693b      	ldr	r3, [r7, #16]
 8017ea8:	685a      	ldr	r2, [r3, #4]
 8017eaa:	4b11      	ldr	r3, [pc, #68]	; (8017ef0 <vPortFree+0xa8>)
 8017eac:	681b      	ldr	r3, [r3, #0]
 8017eae:	4013      	ands	r3, r2
 8017eb0:	2b00      	cmp	r3, #0
 8017eb2:	d019      	beq.n	8017ee8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8017eb4:	693b      	ldr	r3, [r7, #16]
 8017eb6:	681b      	ldr	r3, [r3, #0]
 8017eb8:	2b00      	cmp	r3, #0
 8017eba:	d115      	bne.n	8017ee8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8017ebc:	693b      	ldr	r3, [r7, #16]
 8017ebe:	685a      	ldr	r2, [r3, #4]
 8017ec0:	4b0b      	ldr	r3, [pc, #44]	; (8017ef0 <vPortFree+0xa8>)
 8017ec2:	681b      	ldr	r3, [r3, #0]
 8017ec4:	43db      	mvns	r3, r3
 8017ec6:	401a      	ands	r2, r3
 8017ec8:	693b      	ldr	r3, [r7, #16]
 8017eca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8017ecc:	f001 fdba 	bl	8019a44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8017ed0:	693b      	ldr	r3, [r7, #16]
 8017ed2:	685a      	ldr	r2, [r3, #4]
 8017ed4:	4b07      	ldr	r3, [pc, #28]	; (8017ef4 <vPortFree+0xac>)
 8017ed6:	681b      	ldr	r3, [r3, #0]
 8017ed8:	4413      	add	r3, r2
 8017eda:	4a06      	ldr	r2, [pc, #24]	; (8017ef4 <vPortFree+0xac>)
 8017edc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8017ede:	6938      	ldr	r0, [r7, #16]
 8017ee0:	f000 f86c 	bl	8017fbc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8017ee4:	f001 fdbc 	bl	8019a60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8017ee8:	bf00      	nop
 8017eea:	3718      	adds	r7, #24
 8017eec:	46bd      	mov	sp, r7
 8017eee:	bd80      	pop	{r7, pc}
 8017ef0:	200121b0 	.word	0x200121b0
 8017ef4:	200121a8 	.word	0x200121a8

08017ef8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8017ef8:	b480      	push	{r7}
 8017efa:	b085      	sub	sp, #20
 8017efc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8017efe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8017f02:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8017f04:	4b27      	ldr	r3, [pc, #156]	; (8017fa4 <prvHeapInit+0xac>)
 8017f06:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8017f08:	68fb      	ldr	r3, [r7, #12]
 8017f0a:	f003 0307 	and.w	r3, r3, #7
 8017f0e:	2b00      	cmp	r3, #0
 8017f10:	d00c      	beq.n	8017f2c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8017f12:	68fb      	ldr	r3, [r7, #12]
 8017f14:	3307      	adds	r3, #7
 8017f16:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017f18:	68fb      	ldr	r3, [r7, #12]
 8017f1a:	f023 0307 	bic.w	r3, r3, #7
 8017f1e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8017f20:	68ba      	ldr	r2, [r7, #8]
 8017f22:	68fb      	ldr	r3, [r7, #12]
 8017f24:	1ad3      	subs	r3, r2, r3
 8017f26:	4a1f      	ldr	r2, [pc, #124]	; (8017fa4 <prvHeapInit+0xac>)
 8017f28:	4413      	add	r3, r2
 8017f2a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8017f2c:	68fb      	ldr	r3, [r7, #12]
 8017f2e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8017f30:	4a1d      	ldr	r2, [pc, #116]	; (8017fa8 <prvHeapInit+0xb0>)
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8017f36:	4b1c      	ldr	r3, [pc, #112]	; (8017fa8 <prvHeapInit+0xb0>)
 8017f38:	2200      	movs	r2, #0
 8017f3a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8017f3c:	687b      	ldr	r3, [r7, #4]
 8017f3e:	68ba      	ldr	r2, [r7, #8]
 8017f40:	4413      	add	r3, r2
 8017f42:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8017f44:	2208      	movs	r2, #8
 8017f46:	68fb      	ldr	r3, [r7, #12]
 8017f48:	1a9b      	subs	r3, r3, r2
 8017f4a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017f4c:	68fb      	ldr	r3, [r7, #12]
 8017f4e:	f023 0307 	bic.w	r3, r3, #7
 8017f52:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8017f54:	68fb      	ldr	r3, [r7, #12]
 8017f56:	4a15      	ldr	r2, [pc, #84]	; (8017fac <prvHeapInit+0xb4>)
 8017f58:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8017f5a:	4b14      	ldr	r3, [pc, #80]	; (8017fac <prvHeapInit+0xb4>)
 8017f5c:	681b      	ldr	r3, [r3, #0]
 8017f5e:	2200      	movs	r2, #0
 8017f60:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8017f62:	4b12      	ldr	r3, [pc, #72]	; (8017fac <prvHeapInit+0xb4>)
 8017f64:	681b      	ldr	r3, [r3, #0]
 8017f66:	2200      	movs	r2, #0
 8017f68:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8017f6a:	687b      	ldr	r3, [r7, #4]
 8017f6c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8017f6e:	683b      	ldr	r3, [r7, #0]
 8017f70:	68fa      	ldr	r2, [r7, #12]
 8017f72:	1ad2      	subs	r2, r2, r3
 8017f74:	683b      	ldr	r3, [r7, #0]
 8017f76:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8017f78:	4b0c      	ldr	r3, [pc, #48]	; (8017fac <prvHeapInit+0xb4>)
 8017f7a:	681a      	ldr	r2, [r3, #0]
 8017f7c:	683b      	ldr	r3, [r7, #0]
 8017f7e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017f80:	683b      	ldr	r3, [r7, #0]
 8017f82:	685b      	ldr	r3, [r3, #4]
 8017f84:	4a0a      	ldr	r2, [pc, #40]	; (8017fb0 <prvHeapInit+0xb8>)
 8017f86:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017f88:	683b      	ldr	r3, [r7, #0]
 8017f8a:	685b      	ldr	r3, [r3, #4]
 8017f8c:	4a09      	ldr	r2, [pc, #36]	; (8017fb4 <prvHeapInit+0xbc>)
 8017f8e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8017f90:	4b09      	ldr	r3, [pc, #36]	; (8017fb8 <prvHeapInit+0xc0>)
 8017f92:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8017f96:	601a      	str	r2, [r3, #0]
}
 8017f98:	bf00      	nop
 8017f9a:	3714      	adds	r7, #20
 8017f9c:	46bd      	mov	sp, r7
 8017f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fa2:	4770      	bx	lr
 8017fa4:	2000219c 	.word	0x2000219c
 8017fa8:	2001219c 	.word	0x2001219c
 8017fac:	200121a4 	.word	0x200121a4
 8017fb0:	200121ac 	.word	0x200121ac
 8017fb4:	200121a8 	.word	0x200121a8
 8017fb8:	200121b0 	.word	0x200121b0

08017fbc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8017fbc:	b480      	push	{r7}
 8017fbe:	b085      	sub	sp, #20
 8017fc0:	af00      	add	r7, sp, #0
 8017fc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8017fc4:	4b28      	ldr	r3, [pc, #160]	; (8018068 <prvInsertBlockIntoFreeList+0xac>)
 8017fc6:	60fb      	str	r3, [r7, #12]
 8017fc8:	e002      	b.n	8017fd0 <prvInsertBlockIntoFreeList+0x14>
 8017fca:	68fb      	ldr	r3, [r7, #12]
 8017fcc:	681b      	ldr	r3, [r3, #0]
 8017fce:	60fb      	str	r3, [r7, #12]
 8017fd0:	68fb      	ldr	r3, [r7, #12]
 8017fd2:	681b      	ldr	r3, [r3, #0]
 8017fd4:	687a      	ldr	r2, [r7, #4]
 8017fd6:	429a      	cmp	r2, r3
 8017fd8:	d8f7      	bhi.n	8017fca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8017fda:	68fb      	ldr	r3, [r7, #12]
 8017fdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8017fde:	68fb      	ldr	r3, [r7, #12]
 8017fe0:	685b      	ldr	r3, [r3, #4]
 8017fe2:	68ba      	ldr	r2, [r7, #8]
 8017fe4:	4413      	add	r3, r2
 8017fe6:	687a      	ldr	r2, [r7, #4]
 8017fe8:	429a      	cmp	r2, r3
 8017fea:	d108      	bne.n	8017ffe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8017fec:	68fb      	ldr	r3, [r7, #12]
 8017fee:	685a      	ldr	r2, [r3, #4]
 8017ff0:	687b      	ldr	r3, [r7, #4]
 8017ff2:	685b      	ldr	r3, [r3, #4]
 8017ff4:	441a      	add	r2, r3
 8017ff6:	68fb      	ldr	r3, [r7, #12]
 8017ff8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8017ffa:	68fb      	ldr	r3, [r7, #12]
 8017ffc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8017ffe:	687b      	ldr	r3, [r7, #4]
 8018000:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8018002:	687b      	ldr	r3, [r7, #4]
 8018004:	685b      	ldr	r3, [r3, #4]
 8018006:	68ba      	ldr	r2, [r7, #8]
 8018008:	441a      	add	r2, r3
 801800a:	68fb      	ldr	r3, [r7, #12]
 801800c:	681b      	ldr	r3, [r3, #0]
 801800e:	429a      	cmp	r2, r3
 8018010:	d118      	bne.n	8018044 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8018012:	68fb      	ldr	r3, [r7, #12]
 8018014:	681a      	ldr	r2, [r3, #0]
 8018016:	4b15      	ldr	r3, [pc, #84]	; (801806c <prvInsertBlockIntoFreeList+0xb0>)
 8018018:	681b      	ldr	r3, [r3, #0]
 801801a:	429a      	cmp	r2, r3
 801801c:	d00d      	beq.n	801803a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801801e:	687b      	ldr	r3, [r7, #4]
 8018020:	685a      	ldr	r2, [r3, #4]
 8018022:	68fb      	ldr	r3, [r7, #12]
 8018024:	681b      	ldr	r3, [r3, #0]
 8018026:	685b      	ldr	r3, [r3, #4]
 8018028:	441a      	add	r2, r3
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801802e:	68fb      	ldr	r3, [r7, #12]
 8018030:	681b      	ldr	r3, [r3, #0]
 8018032:	681a      	ldr	r2, [r3, #0]
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	601a      	str	r2, [r3, #0]
 8018038:	e008      	b.n	801804c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801803a:	4b0c      	ldr	r3, [pc, #48]	; (801806c <prvInsertBlockIntoFreeList+0xb0>)
 801803c:	681a      	ldr	r2, [r3, #0]
 801803e:	687b      	ldr	r3, [r7, #4]
 8018040:	601a      	str	r2, [r3, #0]
 8018042:	e003      	b.n	801804c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8018044:	68fb      	ldr	r3, [r7, #12]
 8018046:	681a      	ldr	r2, [r3, #0]
 8018048:	687b      	ldr	r3, [r7, #4]
 801804a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801804c:	68fa      	ldr	r2, [r7, #12]
 801804e:	687b      	ldr	r3, [r7, #4]
 8018050:	429a      	cmp	r2, r3
 8018052:	d002      	beq.n	801805a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8018054:	68fb      	ldr	r3, [r7, #12]
 8018056:	687a      	ldr	r2, [r7, #4]
 8018058:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801805a:	bf00      	nop
 801805c:	3714      	adds	r7, #20
 801805e:	46bd      	mov	sp, r7
 8018060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018064:	4770      	bx	lr
 8018066:	bf00      	nop
 8018068:	2001219c 	.word	0x2001219c
 801806c:	200121a4 	.word	0x200121a4

08018070 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8018070:	b480      	push	{r7}
 8018072:	b083      	sub	sp, #12
 8018074:	af00      	add	r7, sp, #0
 8018076:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	f103 0208 	add.w	r2, r3, #8
 801807e:	687b      	ldr	r3, [r7, #4]
 8018080:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8018082:	687b      	ldr	r3, [r7, #4]
 8018084:	f04f 32ff 	mov.w	r2, #4294967295
 8018088:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801808a:	687b      	ldr	r3, [r7, #4]
 801808c:	f103 0208 	add.w	r2, r3, #8
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018094:	687b      	ldr	r3, [r7, #4]
 8018096:	f103 0208 	add.w	r2, r3, #8
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801809e:	687b      	ldr	r3, [r7, #4]
 80180a0:	2200      	movs	r2, #0
 80180a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80180a4:	bf00      	nop
 80180a6:	370c      	adds	r7, #12
 80180a8:	46bd      	mov	sp, r7
 80180aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180ae:	4770      	bx	lr

080180b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80180b0:	b480      	push	{r7}
 80180b2:	b083      	sub	sp, #12
 80180b4:	af00      	add	r7, sp, #0
 80180b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	2200      	movs	r2, #0
 80180bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80180be:	bf00      	nop
 80180c0:	370c      	adds	r7, #12
 80180c2:	46bd      	mov	sp, r7
 80180c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180c8:	4770      	bx	lr

080180ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80180ca:	b480      	push	{r7}
 80180cc:	b085      	sub	sp, #20
 80180ce:	af00      	add	r7, sp, #0
 80180d0:	6078      	str	r0, [r7, #4]
 80180d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80180d4:	687b      	ldr	r3, [r7, #4]
 80180d6:	685b      	ldr	r3, [r3, #4]
 80180d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80180da:	683b      	ldr	r3, [r7, #0]
 80180dc:	68fa      	ldr	r2, [r7, #12]
 80180de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80180e0:	68fb      	ldr	r3, [r7, #12]
 80180e2:	689a      	ldr	r2, [r3, #8]
 80180e4:	683b      	ldr	r3, [r7, #0]
 80180e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80180e8:	68fb      	ldr	r3, [r7, #12]
 80180ea:	689b      	ldr	r3, [r3, #8]
 80180ec:	683a      	ldr	r2, [r7, #0]
 80180ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80180f0:	68fb      	ldr	r3, [r7, #12]
 80180f2:	683a      	ldr	r2, [r7, #0]
 80180f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80180f6:	683b      	ldr	r3, [r7, #0]
 80180f8:	687a      	ldr	r2, [r7, #4]
 80180fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	681b      	ldr	r3, [r3, #0]
 8018100:	1c5a      	adds	r2, r3, #1
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	601a      	str	r2, [r3, #0]
}
 8018106:	bf00      	nop
 8018108:	3714      	adds	r7, #20
 801810a:	46bd      	mov	sp, r7
 801810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018110:	4770      	bx	lr

08018112 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8018112:	b480      	push	{r7}
 8018114:	b085      	sub	sp, #20
 8018116:	af00      	add	r7, sp, #0
 8018118:	6078      	str	r0, [r7, #4]
 801811a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801811c:	683b      	ldr	r3, [r7, #0]
 801811e:	681b      	ldr	r3, [r3, #0]
 8018120:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8018122:	68bb      	ldr	r3, [r7, #8]
 8018124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018128:	d103      	bne.n	8018132 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801812a:	687b      	ldr	r3, [r7, #4]
 801812c:	691b      	ldr	r3, [r3, #16]
 801812e:	60fb      	str	r3, [r7, #12]
 8018130:	e00c      	b.n	801814c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8018132:	687b      	ldr	r3, [r7, #4]
 8018134:	3308      	adds	r3, #8
 8018136:	60fb      	str	r3, [r7, #12]
 8018138:	e002      	b.n	8018140 <vListInsert+0x2e>
 801813a:	68fb      	ldr	r3, [r7, #12]
 801813c:	685b      	ldr	r3, [r3, #4]
 801813e:	60fb      	str	r3, [r7, #12]
 8018140:	68fb      	ldr	r3, [r7, #12]
 8018142:	685b      	ldr	r3, [r3, #4]
 8018144:	681b      	ldr	r3, [r3, #0]
 8018146:	68ba      	ldr	r2, [r7, #8]
 8018148:	429a      	cmp	r2, r3
 801814a:	d2f6      	bcs.n	801813a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801814c:	68fb      	ldr	r3, [r7, #12]
 801814e:	685a      	ldr	r2, [r3, #4]
 8018150:	683b      	ldr	r3, [r7, #0]
 8018152:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8018154:	683b      	ldr	r3, [r7, #0]
 8018156:	685b      	ldr	r3, [r3, #4]
 8018158:	683a      	ldr	r2, [r7, #0]
 801815a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801815c:	683b      	ldr	r3, [r7, #0]
 801815e:	68fa      	ldr	r2, [r7, #12]
 8018160:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8018162:	68fb      	ldr	r3, [r7, #12]
 8018164:	683a      	ldr	r2, [r7, #0]
 8018166:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8018168:	683b      	ldr	r3, [r7, #0]
 801816a:	687a      	ldr	r2, [r7, #4]
 801816c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801816e:	687b      	ldr	r3, [r7, #4]
 8018170:	681b      	ldr	r3, [r3, #0]
 8018172:	1c5a      	adds	r2, r3, #1
 8018174:	687b      	ldr	r3, [r7, #4]
 8018176:	601a      	str	r2, [r3, #0]
}
 8018178:	bf00      	nop
 801817a:	3714      	adds	r7, #20
 801817c:	46bd      	mov	sp, r7
 801817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018182:	4770      	bx	lr

08018184 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8018184:	b480      	push	{r7}
 8018186:	b085      	sub	sp, #20
 8018188:	af00      	add	r7, sp, #0
 801818a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	691b      	ldr	r3, [r3, #16]
 8018190:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	685b      	ldr	r3, [r3, #4]
 8018196:	687a      	ldr	r2, [r7, #4]
 8018198:	6892      	ldr	r2, [r2, #8]
 801819a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801819c:	687b      	ldr	r3, [r7, #4]
 801819e:	689b      	ldr	r3, [r3, #8]
 80181a0:	687a      	ldr	r2, [r7, #4]
 80181a2:	6852      	ldr	r2, [r2, #4]
 80181a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80181a6:	68fb      	ldr	r3, [r7, #12]
 80181a8:	685b      	ldr	r3, [r3, #4]
 80181aa:	687a      	ldr	r2, [r7, #4]
 80181ac:	429a      	cmp	r2, r3
 80181ae:	d103      	bne.n	80181b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80181b0:	687b      	ldr	r3, [r7, #4]
 80181b2:	689a      	ldr	r2, [r3, #8]
 80181b4:	68fb      	ldr	r3, [r7, #12]
 80181b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	2200      	movs	r2, #0
 80181bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80181be:	68fb      	ldr	r3, [r7, #12]
 80181c0:	681b      	ldr	r3, [r3, #0]
 80181c2:	1e5a      	subs	r2, r3, #1
 80181c4:	68fb      	ldr	r3, [r7, #12]
 80181c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80181c8:	68fb      	ldr	r3, [r7, #12]
 80181ca:	681b      	ldr	r3, [r3, #0]
}
 80181cc:	4618      	mov	r0, r3
 80181ce:	3714      	adds	r7, #20
 80181d0:	46bd      	mov	sp, r7
 80181d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181d6:	4770      	bx	lr

080181d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80181d8:	b480      	push	{r7}
 80181da:	b085      	sub	sp, #20
 80181dc:	af00      	add	r7, sp, #0
 80181de:	60f8      	str	r0, [r7, #12]
 80181e0:	60b9      	str	r1, [r7, #8]
 80181e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80181e4:	68fb      	ldr	r3, [r7, #12]
 80181e6:	3b04      	subs	r3, #4
 80181e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80181ea:	68fb      	ldr	r3, [r7, #12]
 80181ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80181f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80181f2:	68fb      	ldr	r3, [r7, #12]
 80181f4:	3b04      	subs	r3, #4
 80181f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80181f8:	68bb      	ldr	r3, [r7, #8]
 80181fa:	f023 0201 	bic.w	r2, r3, #1
 80181fe:	68fb      	ldr	r3, [r7, #12]
 8018200:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018202:	68fb      	ldr	r3, [r7, #12]
 8018204:	3b04      	subs	r3, #4
 8018206:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8018208:	4a0c      	ldr	r2, [pc, #48]	; (801823c <pxPortInitialiseStack+0x64>)
 801820a:	68fb      	ldr	r3, [r7, #12]
 801820c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801820e:	68fb      	ldr	r3, [r7, #12]
 8018210:	3b14      	subs	r3, #20
 8018212:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8018214:	687a      	ldr	r2, [r7, #4]
 8018216:	68fb      	ldr	r3, [r7, #12]
 8018218:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801821a:	68fb      	ldr	r3, [r7, #12]
 801821c:	3b04      	subs	r3, #4
 801821e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8018220:	68fb      	ldr	r3, [r7, #12]
 8018222:	f06f 0202 	mvn.w	r2, #2
 8018226:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8018228:	68fb      	ldr	r3, [r7, #12]
 801822a:	3b20      	subs	r3, #32
 801822c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801822e:	68fb      	ldr	r3, [r7, #12]
}
 8018230:	4618      	mov	r0, r3
 8018232:	3714      	adds	r7, #20
 8018234:	46bd      	mov	sp, r7
 8018236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801823a:	4770      	bx	lr
 801823c:	08018241 	.word	0x08018241

08018240 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8018240:	b480      	push	{r7}
 8018242:	b085      	sub	sp, #20
 8018244:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8018246:	2300      	movs	r3, #0
 8018248:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801824a:	4b11      	ldr	r3, [pc, #68]	; (8018290 <prvTaskExitError+0x50>)
 801824c:	681b      	ldr	r3, [r3, #0]
 801824e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018252:	d009      	beq.n	8018268 <prvTaskExitError+0x28>
 8018254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018258:	f383 8811 	msr	BASEPRI, r3
 801825c:	f3bf 8f6f 	isb	sy
 8018260:	f3bf 8f4f 	dsb	sy
 8018264:	60fb      	str	r3, [r7, #12]
 8018266:	e7fe      	b.n	8018266 <prvTaskExitError+0x26>
 8018268:	f04f 0350 	mov.w	r3, #80	; 0x50
 801826c:	f383 8811 	msr	BASEPRI, r3
 8018270:	f3bf 8f6f 	isb	sy
 8018274:	f3bf 8f4f 	dsb	sy
 8018278:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801827a:	bf00      	nop
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	2b00      	cmp	r3, #0
 8018280:	d0fc      	beq.n	801827c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8018282:	bf00      	nop
 8018284:	3714      	adds	r7, #20
 8018286:	46bd      	mov	sp, r7
 8018288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801828c:	4770      	bx	lr
 801828e:	bf00      	nop
 8018290:	20000094 	.word	0x20000094
	...

080182a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80182a0:	4b07      	ldr	r3, [pc, #28]	; (80182c0 <pxCurrentTCBConst2>)
 80182a2:	6819      	ldr	r1, [r3, #0]
 80182a4:	6808      	ldr	r0, [r1, #0]
 80182a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182aa:	f380 8809 	msr	PSP, r0
 80182ae:	f3bf 8f6f 	isb	sy
 80182b2:	f04f 0000 	mov.w	r0, #0
 80182b6:	f380 8811 	msr	BASEPRI, r0
 80182ba:	4770      	bx	lr
 80182bc:	f3af 8000 	nop.w

080182c0 <pxCurrentTCBConst2>:
 80182c0:	200121bc 	.word	0x200121bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80182c4:	bf00      	nop
 80182c6:	bf00      	nop

080182c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80182c8:	4808      	ldr	r0, [pc, #32]	; (80182ec <prvPortStartFirstTask+0x24>)
 80182ca:	6800      	ldr	r0, [r0, #0]
 80182cc:	6800      	ldr	r0, [r0, #0]
 80182ce:	f380 8808 	msr	MSP, r0
 80182d2:	f04f 0000 	mov.w	r0, #0
 80182d6:	f380 8814 	msr	CONTROL, r0
 80182da:	b662      	cpsie	i
 80182dc:	b661      	cpsie	f
 80182de:	f3bf 8f4f 	dsb	sy
 80182e2:	f3bf 8f6f 	isb	sy
 80182e6:	df00      	svc	0
 80182e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80182ea:	bf00      	nop
 80182ec:	e000ed08 	.word	0xe000ed08

080182f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80182f0:	b580      	push	{r7, lr}
 80182f2:	b086      	sub	sp, #24
 80182f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80182f6:	4b44      	ldr	r3, [pc, #272]	; (8018408 <xPortStartScheduler+0x118>)
 80182f8:	681b      	ldr	r3, [r3, #0]
 80182fa:	4a44      	ldr	r2, [pc, #272]	; (801840c <xPortStartScheduler+0x11c>)
 80182fc:	4293      	cmp	r3, r2
 80182fe:	d109      	bne.n	8018314 <xPortStartScheduler+0x24>
 8018300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018304:	f383 8811 	msr	BASEPRI, r3
 8018308:	f3bf 8f6f 	isb	sy
 801830c:	f3bf 8f4f 	dsb	sy
 8018310:	613b      	str	r3, [r7, #16]
 8018312:	e7fe      	b.n	8018312 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8018314:	4b3c      	ldr	r3, [pc, #240]	; (8018408 <xPortStartScheduler+0x118>)
 8018316:	681b      	ldr	r3, [r3, #0]
 8018318:	4a3d      	ldr	r2, [pc, #244]	; (8018410 <xPortStartScheduler+0x120>)
 801831a:	4293      	cmp	r3, r2
 801831c:	d109      	bne.n	8018332 <xPortStartScheduler+0x42>
 801831e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018322:	f383 8811 	msr	BASEPRI, r3
 8018326:	f3bf 8f6f 	isb	sy
 801832a:	f3bf 8f4f 	dsb	sy
 801832e:	60fb      	str	r3, [r7, #12]
 8018330:	e7fe      	b.n	8018330 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8018332:	4b38      	ldr	r3, [pc, #224]	; (8018414 <xPortStartScheduler+0x124>)
 8018334:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8018336:	697b      	ldr	r3, [r7, #20]
 8018338:	781b      	ldrb	r3, [r3, #0]
 801833a:	b2db      	uxtb	r3, r3
 801833c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801833e:	697b      	ldr	r3, [r7, #20]
 8018340:	22ff      	movs	r2, #255	; 0xff
 8018342:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018344:	697b      	ldr	r3, [r7, #20]
 8018346:	781b      	ldrb	r3, [r3, #0]
 8018348:	b2db      	uxtb	r3, r3
 801834a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801834c:	78fb      	ldrb	r3, [r7, #3]
 801834e:	b2db      	uxtb	r3, r3
 8018350:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8018354:	b2da      	uxtb	r2, r3
 8018356:	4b30      	ldr	r3, [pc, #192]	; (8018418 <xPortStartScheduler+0x128>)
 8018358:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801835a:	4b30      	ldr	r3, [pc, #192]	; (801841c <xPortStartScheduler+0x12c>)
 801835c:	2207      	movs	r2, #7
 801835e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018360:	e009      	b.n	8018376 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8018362:	4b2e      	ldr	r3, [pc, #184]	; (801841c <xPortStartScheduler+0x12c>)
 8018364:	681b      	ldr	r3, [r3, #0]
 8018366:	3b01      	subs	r3, #1
 8018368:	4a2c      	ldr	r2, [pc, #176]	; (801841c <xPortStartScheduler+0x12c>)
 801836a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801836c:	78fb      	ldrb	r3, [r7, #3]
 801836e:	b2db      	uxtb	r3, r3
 8018370:	005b      	lsls	r3, r3, #1
 8018372:	b2db      	uxtb	r3, r3
 8018374:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018376:	78fb      	ldrb	r3, [r7, #3]
 8018378:	b2db      	uxtb	r3, r3
 801837a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801837e:	2b80      	cmp	r3, #128	; 0x80
 8018380:	d0ef      	beq.n	8018362 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018382:	4b26      	ldr	r3, [pc, #152]	; (801841c <xPortStartScheduler+0x12c>)
 8018384:	681b      	ldr	r3, [r3, #0]
 8018386:	f1c3 0307 	rsb	r3, r3, #7
 801838a:	2b04      	cmp	r3, #4
 801838c:	d009      	beq.n	80183a2 <xPortStartScheduler+0xb2>
 801838e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018392:	f383 8811 	msr	BASEPRI, r3
 8018396:	f3bf 8f6f 	isb	sy
 801839a:	f3bf 8f4f 	dsb	sy
 801839e:	60bb      	str	r3, [r7, #8]
 80183a0:	e7fe      	b.n	80183a0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80183a2:	4b1e      	ldr	r3, [pc, #120]	; (801841c <xPortStartScheduler+0x12c>)
 80183a4:	681b      	ldr	r3, [r3, #0]
 80183a6:	021b      	lsls	r3, r3, #8
 80183a8:	4a1c      	ldr	r2, [pc, #112]	; (801841c <xPortStartScheduler+0x12c>)
 80183aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80183ac:	4b1b      	ldr	r3, [pc, #108]	; (801841c <xPortStartScheduler+0x12c>)
 80183ae:	681b      	ldr	r3, [r3, #0]
 80183b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80183b4:	4a19      	ldr	r2, [pc, #100]	; (801841c <xPortStartScheduler+0x12c>)
 80183b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	b2da      	uxtb	r2, r3
 80183bc:	697b      	ldr	r3, [r7, #20]
 80183be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80183c0:	4b17      	ldr	r3, [pc, #92]	; (8018420 <xPortStartScheduler+0x130>)
 80183c2:	681b      	ldr	r3, [r3, #0]
 80183c4:	4a16      	ldr	r2, [pc, #88]	; (8018420 <xPortStartScheduler+0x130>)
 80183c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80183ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80183cc:	4b14      	ldr	r3, [pc, #80]	; (8018420 <xPortStartScheduler+0x130>)
 80183ce:	681b      	ldr	r3, [r3, #0]
 80183d0:	4a13      	ldr	r2, [pc, #76]	; (8018420 <xPortStartScheduler+0x130>)
 80183d2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80183d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80183d8:	f000 f8d6 	bl	8018588 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80183dc:	4b11      	ldr	r3, [pc, #68]	; (8018424 <xPortStartScheduler+0x134>)
 80183de:	2200      	movs	r2, #0
 80183e0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80183e2:	f000 f8f5 	bl	80185d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80183e6:	4b10      	ldr	r3, [pc, #64]	; (8018428 <xPortStartScheduler+0x138>)
 80183e8:	681b      	ldr	r3, [r3, #0]
 80183ea:	4a0f      	ldr	r2, [pc, #60]	; (8018428 <xPortStartScheduler+0x138>)
 80183ec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80183f0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80183f2:	f7ff ff69 	bl	80182c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80183f6:	f001 fc97 	bl	8019d28 <vTaskSwitchContext>
	prvTaskExitError();
 80183fa:	f7ff ff21 	bl	8018240 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80183fe:	2300      	movs	r3, #0
}
 8018400:	4618      	mov	r0, r3
 8018402:	3718      	adds	r7, #24
 8018404:	46bd      	mov	sp, r7
 8018406:	bd80      	pop	{r7, pc}
 8018408:	e000ed00 	.word	0xe000ed00
 801840c:	410fc271 	.word	0x410fc271
 8018410:	410fc270 	.word	0x410fc270
 8018414:	e000e400 	.word	0xe000e400
 8018418:	200121b4 	.word	0x200121b4
 801841c:	200121b8 	.word	0x200121b8
 8018420:	e000ed20 	.word	0xe000ed20
 8018424:	20000094 	.word	0x20000094
 8018428:	e000ef34 	.word	0xe000ef34

0801842c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801842c:	b480      	push	{r7}
 801842e:	b083      	sub	sp, #12
 8018430:	af00      	add	r7, sp, #0
 8018432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018436:	f383 8811 	msr	BASEPRI, r3
 801843a:	f3bf 8f6f 	isb	sy
 801843e:	f3bf 8f4f 	dsb	sy
 8018442:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8018444:	4b0e      	ldr	r3, [pc, #56]	; (8018480 <vPortEnterCritical+0x54>)
 8018446:	681b      	ldr	r3, [r3, #0]
 8018448:	3301      	adds	r3, #1
 801844a:	4a0d      	ldr	r2, [pc, #52]	; (8018480 <vPortEnterCritical+0x54>)
 801844c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801844e:	4b0c      	ldr	r3, [pc, #48]	; (8018480 <vPortEnterCritical+0x54>)
 8018450:	681b      	ldr	r3, [r3, #0]
 8018452:	2b01      	cmp	r3, #1
 8018454:	d10e      	bne.n	8018474 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8018456:	4b0b      	ldr	r3, [pc, #44]	; (8018484 <vPortEnterCritical+0x58>)
 8018458:	681b      	ldr	r3, [r3, #0]
 801845a:	b2db      	uxtb	r3, r3
 801845c:	2b00      	cmp	r3, #0
 801845e:	d009      	beq.n	8018474 <vPortEnterCritical+0x48>
 8018460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018464:	f383 8811 	msr	BASEPRI, r3
 8018468:	f3bf 8f6f 	isb	sy
 801846c:	f3bf 8f4f 	dsb	sy
 8018470:	603b      	str	r3, [r7, #0]
 8018472:	e7fe      	b.n	8018472 <vPortEnterCritical+0x46>
	}
}
 8018474:	bf00      	nop
 8018476:	370c      	adds	r7, #12
 8018478:	46bd      	mov	sp, r7
 801847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801847e:	4770      	bx	lr
 8018480:	20000094 	.word	0x20000094
 8018484:	e000ed04 	.word	0xe000ed04

08018488 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8018488:	b480      	push	{r7}
 801848a:	b083      	sub	sp, #12
 801848c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801848e:	4b11      	ldr	r3, [pc, #68]	; (80184d4 <vPortExitCritical+0x4c>)
 8018490:	681b      	ldr	r3, [r3, #0]
 8018492:	2b00      	cmp	r3, #0
 8018494:	d109      	bne.n	80184aa <vPortExitCritical+0x22>
 8018496:	f04f 0350 	mov.w	r3, #80	; 0x50
 801849a:	f383 8811 	msr	BASEPRI, r3
 801849e:	f3bf 8f6f 	isb	sy
 80184a2:	f3bf 8f4f 	dsb	sy
 80184a6:	607b      	str	r3, [r7, #4]
 80184a8:	e7fe      	b.n	80184a8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80184aa:	4b0a      	ldr	r3, [pc, #40]	; (80184d4 <vPortExitCritical+0x4c>)
 80184ac:	681b      	ldr	r3, [r3, #0]
 80184ae:	3b01      	subs	r3, #1
 80184b0:	4a08      	ldr	r2, [pc, #32]	; (80184d4 <vPortExitCritical+0x4c>)
 80184b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80184b4:	4b07      	ldr	r3, [pc, #28]	; (80184d4 <vPortExitCritical+0x4c>)
 80184b6:	681b      	ldr	r3, [r3, #0]
 80184b8:	2b00      	cmp	r3, #0
 80184ba:	d104      	bne.n	80184c6 <vPortExitCritical+0x3e>
 80184bc:	2300      	movs	r3, #0
 80184be:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80184c0:	683b      	ldr	r3, [r7, #0]
 80184c2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80184c6:	bf00      	nop
 80184c8:	370c      	adds	r7, #12
 80184ca:	46bd      	mov	sp, r7
 80184cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184d0:	4770      	bx	lr
 80184d2:	bf00      	nop
 80184d4:	20000094 	.word	0x20000094
	...

080184e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80184e0:	f3ef 8009 	mrs	r0, PSP
 80184e4:	f3bf 8f6f 	isb	sy
 80184e8:	4b15      	ldr	r3, [pc, #84]	; (8018540 <pxCurrentTCBConst>)
 80184ea:	681a      	ldr	r2, [r3, #0]
 80184ec:	f01e 0f10 	tst.w	lr, #16
 80184f0:	bf08      	it	eq
 80184f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80184f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184fa:	6010      	str	r0, [r2, #0]
 80184fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8018500:	f04f 0050 	mov.w	r0, #80	; 0x50
 8018504:	f380 8811 	msr	BASEPRI, r0
 8018508:	f3bf 8f4f 	dsb	sy
 801850c:	f3bf 8f6f 	isb	sy
 8018510:	f001 fc0a 	bl	8019d28 <vTaskSwitchContext>
 8018514:	f04f 0000 	mov.w	r0, #0
 8018518:	f380 8811 	msr	BASEPRI, r0
 801851c:	bc09      	pop	{r0, r3}
 801851e:	6819      	ldr	r1, [r3, #0]
 8018520:	6808      	ldr	r0, [r1, #0]
 8018522:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018526:	f01e 0f10 	tst.w	lr, #16
 801852a:	bf08      	it	eq
 801852c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8018530:	f380 8809 	msr	PSP, r0
 8018534:	f3bf 8f6f 	isb	sy
 8018538:	4770      	bx	lr
 801853a:	bf00      	nop
 801853c:	f3af 8000 	nop.w

08018540 <pxCurrentTCBConst>:
 8018540:	200121bc 	.word	0x200121bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8018544:	bf00      	nop
 8018546:	bf00      	nop

08018548 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8018548:	b580      	push	{r7, lr}
 801854a:	b082      	sub	sp, #8
 801854c:	af00      	add	r7, sp, #0
	__asm volatile
 801854e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018552:	f383 8811 	msr	BASEPRI, r3
 8018556:	f3bf 8f6f 	isb	sy
 801855a:	f3bf 8f4f 	dsb	sy
 801855e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8018560:	f001 fb2a 	bl	8019bb8 <xTaskIncrementTick>
 8018564:	4603      	mov	r3, r0
 8018566:	2b00      	cmp	r3, #0
 8018568:	d003      	beq.n	8018572 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801856a:	4b06      	ldr	r3, [pc, #24]	; (8018584 <SysTick_Handler+0x3c>)
 801856c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018570:	601a      	str	r2, [r3, #0]
 8018572:	2300      	movs	r3, #0
 8018574:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018576:	683b      	ldr	r3, [r7, #0]
 8018578:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801857c:	bf00      	nop
 801857e:	3708      	adds	r7, #8
 8018580:	46bd      	mov	sp, r7
 8018582:	bd80      	pop	{r7, pc}
 8018584:	e000ed04 	.word	0xe000ed04

08018588 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8018588:	b480      	push	{r7}
 801858a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801858c:	4b0b      	ldr	r3, [pc, #44]	; (80185bc <vPortSetupTimerInterrupt+0x34>)
 801858e:	2200      	movs	r2, #0
 8018590:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8018592:	4b0b      	ldr	r3, [pc, #44]	; (80185c0 <vPortSetupTimerInterrupt+0x38>)
 8018594:	2200      	movs	r2, #0
 8018596:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8018598:	4b0a      	ldr	r3, [pc, #40]	; (80185c4 <vPortSetupTimerInterrupt+0x3c>)
 801859a:	681b      	ldr	r3, [r3, #0]
 801859c:	4a0a      	ldr	r2, [pc, #40]	; (80185c8 <vPortSetupTimerInterrupt+0x40>)
 801859e:	fba2 2303 	umull	r2, r3, r2, r3
 80185a2:	099b      	lsrs	r3, r3, #6
 80185a4:	4a09      	ldr	r2, [pc, #36]	; (80185cc <vPortSetupTimerInterrupt+0x44>)
 80185a6:	3b01      	subs	r3, #1
 80185a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80185aa:	4b04      	ldr	r3, [pc, #16]	; (80185bc <vPortSetupTimerInterrupt+0x34>)
 80185ac:	2207      	movs	r2, #7
 80185ae:	601a      	str	r2, [r3, #0]
}
 80185b0:	bf00      	nop
 80185b2:	46bd      	mov	sp, r7
 80185b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185b8:	4770      	bx	lr
 80185ba:	bf00      	nop
 80185bc:	e000e010 	.word	0xe000e010
 80185c0:	e000e018 	.word	0xe000e018
 80185c4:	20000088 	.word	0x20000088
 80185c8:	10624dd3 	.word	0x10624dd3
 80185cc:	e000e014 	.word	0xe000e014

080185d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80185d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80185e0 <vPortEnableVFP+0x10>
 80185d4:	6801      	ldr	r1, [r0, #0]
 80185d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80185da:	6001      	str	r1, [r0, #0]
 80185dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80185de:	bf00      	nop
 80185e0:	e000ed88 	.word	0xe000ed88

080185e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80185e4:	b480      	push	{r7}
 80185e6:	b085      	sub	sp, #20
 80185e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80185ea:	f3ef 8305 	mrs	r3, IPSR
 80185ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80185f0:	68fb      	ldr	r3, [r7, #12]
 80185f2:	2b0f      	cmp	r3, #15
 80185f4:	d913      	bls.n	801861e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80185f6:	4a16      	ldr	r2, [pc, #88]	; (8018650 <vPortValidateInterruptPriority+0x6c>)
 80185f8:	68fb      	ldr	r3, [r7, #12]
 80185fa:	4413      	add	r3, r2
 80185fc:	781b      	ldrb	r3, [r3, #0]
 80185fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8018600:	4b14      	ldr	r3, [pc, #80]	; (8018654 <vPortValidateInterruptPriority+0x70>)
 8018602:	781b      	ldrb	r3, [r3, #0]
 8018604:	7afa      	ldrb	r2, [r7, #11]
 8018606:	429a      	cmp	r2, r3
 8018608:	d209      	bcs.n	801861e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 801860a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801860e:	f383 8811 	msr	BASEPRI, r3
 8018612:	f3bf 8f6f 	isb	sy
 8018616:	f3bf 8f4f 	dsb	sy
 801861a:	607b      	str	r3, [r7, #4]
 801861c:	e7fe      	b.n	801861c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801861e:	4b0e      	ldr	r3, [pc, #56]	; (8018658 <vPortValidateInterruptPriority+0x74>)
 8018620:	681b      	ldr	r3, [r3, #0]
 8018622:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8018626:	4b0d      	ldr	r3, [pc, #52]	; (801865c <vPortValidateInterruptPriority+0x78>)
 8018628:	681b      	ldr	r3, [r3, #0]
 801862a:	429a      	cmp	r2, r3
 801862c:	d909      	bls.n	8018642 <vPortValidateInterruptPriority+0x5e>
 801862e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018632:	f383 8811 	msr	BASEPRI, r3
 8018636:	f3bf 8f6f 	isb	sy
 801863a:	f3bf 8f4f 	dsb	sy
 801863e:	603b      	str	r3, [r7, #0]
 8018640:	e7fe      	b.n	8018640 <vPortValidateInterruptPriority+0x5c>
	}
 8018642:	bf00      	nop
 8018644:	3714      	adds	r7, #20
 8018646:	46bd      	mov	sp, r7
 8018648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801864c:	4770      	bx	lr
 801864e:	bf00      	nop
 8018650:	e000e3f0 	.word	0xe000e3f0
 8018654:	200121b4 	.word	0x200121b4
 8018658:	e000ed0c 	.word	0xe000ed0c
 801865c:	200121b8 	.word	0x200121b8

08018660 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8018660:	b580      	push	{r7, lr}
 8018662:	b084      	sub	sp, #16
 8018664:	af00      	add	r7, sp, #0
 8018666:	6078      	str	r0, [r7, #4]
 8018668:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801866a:	687b      	ldr	r3, [r7, #4]
 801866c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801866e:	68fb      	ldr	r3, [r7, #12]
 8018670:	2b00      	cmp	r3, #0
 8018672:	d109      	bne.n	8018688 <xQueueGenericReset+0x28>
 8018674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018678:	f383 8811 	msr	BASEPRI, r3
 801867c:	f3bf 8f6f 	isb	sy
 8018680:	f3bf 8f4f 	dsb	sy
 8018684:	60bb      	str	r3, [r7, #8]
 8018686:	e7fe      	b.n	8018686 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8018688:	f7ff fed0 	bl	801842c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801868c:	68fb      	ldr	r3, [r7, #12]
 801868e:	681a      	ldr	r2, [r3, #0]
 8018690:	68fb      	ldr	r3, [r7, #12]
 8018692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018694:	68f9      	ldr	r1, [r7, #12]
 8018696:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8018698:	fb01 f303 	mul.w	r3, r1, r3
 801869c:	441a      	add	r2, r3
 801869e:	68fb      	ldr	r3, [r7, #12]
 80186a0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80186a2:	68fb      	ldr	r3, [r7, #12]
 80186a4:	2200      	movs	r2, #0
 80186a6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80186a8:	68fb      	ldr	r3, [r7, #12]
 80186aa:	681a      	ldr	r2, [r3, #0]
 80186ac:	68fb      	ldr	r3, [r7, #12]
 80186ae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80186b0:	68fb      	ldr	r3, [r7, #12]
 80186b2:	681a      	ldr	r2, [r3, #0]
 80186b4:	68fb      	ldr	r3, [r7, #12]
 80186b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80186b8:	3b01      	subs	r3, #1
 80186ba:	68f9      	ldr	r1, [r7, #12]
 80186bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80186be:	fb01 f303 	mul.w	r3, r1, r3
 80186c2:	441a      	add	r2, r3
 80186c4:	68fb      	ldr	r3, [r7, #12]
 80186c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80186c8:	68fb      	ldr	r3, [r7, #12]
 80186ca:	22ff      	movs	r2, #255	; 0xff
 80186cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80186d0:	68fb      	ldr	r3, [r7, #12]
 80186d2:	22ff      	movs	r2, #255	; 0xff
 80186d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80186d8:	683b      	ldr	r3, [r7, #0]
 80186da:	2b00      	cmp	r3, #0
 80186dc:	d114      	bne.n	8018708 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80186de:	68fb      	ldr	r3, [r7, #12]
 80186e0:	691b      	ldr	r3, [r3, #16]
 80186e2:	2b00      	cmp	r3, #0
 80186e4:	d01a      	beq.n	801871c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80186e6:	68fb      	ldr	r3, [r7, #12]
 80186e8:	3310      	adds	r3, #16
 80186ea:	4618      	mov	r0, r3
 80186ec:	f001 fbc6 	bl	8019e7c <xTaskRemoveFromEventList>
 80186f0:	4603      	mov	r3, r0
 80186f2:	2b00      	cmp	r3, #0
 80186f4:	d012      	beq.n	801871c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80186f6:	4b0d      	ldr	r3, [pc, #52]	; (801872c <xQueueGenericReset+0xcc>)
 80186f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80186fc:	601a      	str	r2, [r3, #0]
 80186fe:	f3bf 8f4f 	dsb	sy
 8018702:	f3bf 8f6f 	isb	sy
 8018706:	e009      	b.n	801871c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8018708:	68fb      	ldr	r3, [r7, #12]
 801870a:	3310      	adds	r3, #16
 801870c:	4618      	mov	r0, r3
 801870e:	f7ff fcaf 	bl	8018070 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8018712:	68fb      	ldr	r3, [r7, #12]
 8018714:	3324      	adds	r3, #36	; 0x24
 8018716:	4618      	mov	r0, r3
 8018718:	f7ff fcaa 	bl	8018070 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801871c:	f7ff feb4 	bl	8018488 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8018720:	2301      	movs	r3, #1
}
 8018722:	4618      	mov	r0, r3
 8018724:	3710      	adds	r7, #16
 8018726:	46bd      	mov	sp, r7
 8018728:	bd80      	pop	{r7, pc}
 801872a:	bf00      	nop
 801872c:	e000ed04 	.word	0xe000ed04

08018730 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8018730:	b580      	push	{r7, lr}
 8018732:	b08e      	sub	sp, #56	; 0x38
 8018734:	af02      	add	r7, sp, #8
 8018736:	60f8      	str	r0, [r7, #12]
 8018738:	60b9      	str	r1, [r7, #8]
 801873a:	607a      	str	r2, [r7, #4]
 801873c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801873e:	68fb      	ldr	r3, [r7, #12]
 8018740:	2b00      	cmp	r3, #0
 8018742:	d109      	bne.n	8018758 <xQueueGenericCreateStatic+0x28>
 8018744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018748:	f383 8811 	msr	BASEPRI, r3
 801874c:	f3bf 8f6f 	isb	sy
 8018750:	f3bf 8f4f 	dsb	sy
 8018754:	62bb      	str	r3, [r7, #40]	; 0x28
 8018756:	e7fe      	b.n	8018756 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8018758:	683b      	ldr	r3, [r7, #0]
 801875a:	2b00      	cmp	r3, #0
 801875c:	d109      	bne.n	8018772 <xQueueGenericCreateStatic+0x42>
 801875e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018762:	f383 8811 	msr	BASEPRI, r3
 8018766:	f3bf 8f6f 	isb	sy
 801876a:	f3bf 8f4f 	dsb	sy
 801876e:	627b      	str	r3, [r7, #36]	; 0x24
 8018770:	e7fe      	b.n	8018770 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8018772:	687b      	ldr	r3, [r7, #4]
 8018774:	2b00      	cmp	r3, #0
 8018776:	d002      	beq.n	801877e <xQueueGenericCreateStatic+0x4e>
 8018778:	68bb      	ldr	r3, [r7, #8]
 801877a:	2b00      	cmp	r3, #0
 801877c:	d001      	beq.n	8018782 <xQueueGenericCreateStatic+0x52>
 801877e:	2301      	movs	r3, #1
 8018780:	e000      	b.n	8018784 <xQueueGenericCreateStatic+0x54>
 8018782:	2300      	movs	r3, #0
 8018784:	2b00      	cmp	r3, #0
 8018786:	d109      	bne.n	801879c <xQueueGenericCreateStatic+0x6c>
 8018788:	f04f 0350 	mov.w	r3, #80	; 0x50
 801878c:	f383 8811 	msr	BASEPRI, r3
 8018790:	f3bf 8f6f 	isb	sy
 8018794:	f3bf 8f4f 	dsb	sy
 8018798:	623b      	str	r3, [r7, #32]
 801879a:	e7fe      	b.n	801879a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	2b00      	cmp	r3, #0
 80187a0:	d102      	bne.n	80187a8 <xQueueGenericCreateStatic+0x78>
 80187a2:	68bb      	ldr	r3, [r7, #8]
 80187a4:	2b00      	cmp	r3, #0
 80187a6:	d101      	bne.n	80187ac <xQueueGenericCreateStatic+0x7c>
 80187a8:	2301      	movs	r3, #1
 80187aa:	e000      	b.n	80187ae <xQueueGenericCreateStatic+0x7e>
 80187ac:	2300      	movs	r3, #0
 80187ae:	2b00      	cmp	r3, #0
 80187b0:	d109      	bne.n	80187c6 <xQueueGenericCreateStatic+0x96>
 80187b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187b6:	f383 8811 	msr	BASEPRI, r3
 80187ba:	f3bf 8f6f 	isb	sy
 80187be:	f3bf 8f4f 	dsb	sy
 80187c2:	61fb      	str	r3, [r7, #28]
 80187c4:	e7fe      	b.n	80187c4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80187c6:	2350      	movs	r3, #80	; 0x50
 80187c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80187ca:	697b      	ldr	r3, [r7, #20]
 80187cc:	2b50      	cmp	r3, #80	; 0x50
 80187ce:	d009      	beq.n	80187e4 <xQueueGenericCreateStatic+0xb4>
 80187d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187d4:	f383 8811 	msr	BASEPRI, r3
 80187d8:	f3bf 8f6f 	isb	sy
 80187dc:	f3bf 8f4f 	dsb	sy
 80187e0:	61bb      	str	r3, [r7, #24]
 80187e2:	e7fe      	b.n	80187e2 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80187e4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80187e6:	683b      	ldr	r3, [r7, #0]
 80187e8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80187ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187ec:	2b00      	cmp	r3, #0
 80187ee:	d00d      	beq.n	801880c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80187f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187f2:	2201      	movs	r2, #1
 80187f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80187f8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80187fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187fe:	9300      	str	r3, [sp, #0]
 8018800:	4613      	mov	r3, r2
 8018802:	687a      	ldr	r2, [r7, #4]
 8018804:	68b9      	ldr	r1, [r7, #8]
 8018806:	68f8      	ldr	r0, [r7, #12]
 8018808:	f000 f844 	bl	8018894 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801880c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801880e:	4618      	mov	r0, r3
 8018810:	3730      	adds	r7, #48	; 0x30
 8018812:	46bd      	mov	sp, r7
 8018814:	bd80      	pop	{r7, pc}

08018816 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8018816:	b580      	push	{r7, lr}
 8018818:	b08a      	sub	sp, #40	; 0x28
 801881a:	af02      	add	r7, sp, #8
 801881c:	60f8      	str	r0, [r7, #12]
 801881e:	60b9      	str	r1, [r7, #8]
 8018820:	4613      	mov	r3, r2
 8018822:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8018824:	68fb      	ldr	r3, [r7, #12]
 8018826:	2b00      	cmp	r3, #0
 8018828:	d109      	bne.n	801883e <xQueueGenericCreate+0x28>
 801882a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801882e:	f383 8811 	msr	BASEPRI, r3
 8018832:	f3bf 8f6f 	isb	sy
 8018836:	f3bf 8f4f 	dsb	sy
 801883a:	613b      	str	r3, [r7, #16]
 801883c:	e7fe      	b.n	801883c <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801883e:	68bb      	ldr	r3, [r7, #8]
 8018840:	2b00      	cmp	r3, #0
 8018842:	d102      	bne.n	801884a <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8018844:	2300      	movs	r3, #0
 8018846:	61fb      	str	r3, [r7, #28]
 8018848:	e004      	b.n	8018854 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801884a:	68fb      	ldr	r3, [r7, #12]
 801884c:	68ba      	ldr	r2, [r7, #8]
 801884e:	fb02 f303 	mul.w	r3, r2, r3
 8018852:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8018854:	69fb      	ldr	r3, [r7, #28]
 8018856:	3350      	adds	r3, #80	; 0x50
 8018858:	4618      	mov	r0, r3
 801885a:	f7ff fa33 	bl	8017cc4 <pvPortMalloc>
 801885e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8018860:	69bb      	ldr	r3, [r7, #24]
 8018862:	2b00      	cmp	r3, #0
 8018864:	d011      	beq.n	801888a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8018866:	69bb      	ldr	r3, [r7, #24]
 8018868:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801886a:	697b      	ldr	r3, [r7, #20]
 801886c:	3350      	adds	r3, #80	; 0x50
 801886e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8018870:	69bb      	ldr	r3, [r7, #24]
 8018872:	2200      	movs	r2, #0
 8018874:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8018878:	79fa      	ldrb	r2, [r7, #7]
 801887a:	69bb      	ldr	r3, [r7, #24]
 801887c:	9300      	str	r3, [sp, #0]
 801887e:	4613      	mov	r3, r2
 8018880:	697a      	ldr	r2, [r7, #20]
 8018882:	68b9      	ldr	r1, [r7, #8]
 8018884:	68f8      	ldr	r0, [r7, #12]
 8018886:	f000 f805 	bl	8018894 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801888a:	69bb      	ldr	r3, [r7, #24]
	}
 801888c:	4618      	mov	r0, r3
 801888e:	3720      	adds	r7, #32
 8018890:	46bd      	mov	sp, r7
 8018892:	bd80      	pop	{r7, pc}

08018894 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8018894:	b580      	push	{r7, lr}
 8018896:	b084      	sub	sp, #16
 8018898:	af00      	add	r7, sp, #0
 801889a:	60f8      	str	r0, [r7, #12]
 801889c:	60b9      	str	r1, [r7, #8]
 801889e:	607a      	str	r2, [r7, #4]
 80188a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80188a2:	68bb      	ldr	r3, [r7, #8]
 80188a4:	2b00      	cmp	r3, #0
 80188a6:	d103      	bne.n	80188b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80188a8:	69bb      	ldr	r3, [r7, #24]
 80188aa:	69ba      	ldr	r2, [r7, #24]
 80188ac:	601a      	str	r2, [r3, #0]
 80188ae:	e002      	b.n	80188b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80188b0:	69bb      	ldr	r3, [r7, #24]
 80188b2:	687a      	ldr	r2, [r7, #4]
 80188b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80188b6:	69bb      	ldr	r3, [r7, #24]
 80188b8:	68fa      	ldr	r2, [r7, #12]
 80188ba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80188bc:	69bb      	ldr	r3, [r7, #24]
 80188be:	68ba      	ldr	r2, [r7, #8]
 80188c0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80188c2:	2101      	movs	r1, #1
 80188c4:	69b8      	ldr	r0, [r7, #24]
 80188c6:	f7ff fecb 	bl	8018660 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80188ca:	69bb      	ldr	r3, [r7, #24]
 80188cc:	78fa      	ldrb	r2, [r7, #3]
 80188ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80188d2:	bf00      	nop
 80188d4:	3710      	adds	r7, #16
 80188d6:	46bd      	mov	sp, r7
 80188d8:	bd80      	pop	{r7, pc}

080188da <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80188da:	b580      	push	{r7, lr}
 80188dc:	b08a      	sub	sp, #40	; 0x28
 80188de:	af02      	add	r7, sp, #8
 80188e0:	60f8      	str	r0, [r7, #12]
 80188e2:	60b9      	str	r1, [r7, #8]
 80188e4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80188e6:	68fb      	ldr	r3, [r7, #12]
 80188e8:	2b00      	cmp	r3, #0
 80188ea:	d109      	bne.n	8018900 <xQueueCreateCountingSemaphoreStatic+0x26>
 80188ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188f0:	f383 8811 	msr	BASEPRI, r3
 80188f4:	f3bf 8f6f 	isb	sy
 80188f8:	f3bf 8f4f 	dsb	sy
 80188fc:	61bb      	str	r3, [r7, #24]
 80188fe:	e7fe      	b.n	80188fe <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8018900:	68ba      	ldr	r2, [r7, #8]
 8018902:	68fb      	ldr	r3, [r7, #12]
 8018904:	429a      	cmp	r2, r3
 8018906:	d909      	bls.n	801891c <xQueueCreateCountingSemaphoreStatic+0x42>
 8018908:	f04f 0350 	mov.w	r3, #80	; 0x50
 801890c:	f383 8811 	msr	BASEPRI, r3
 8018910:	f3bf 8f6f 	isb	sy
 8018914:	f3bf 8f4f 	dsb	sy
 8018918:	617b      	str	r3, [r7, #20]
 801891a:	e7fe      	b.n	801891a <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801891c:	2302      	movs	r3, #2
 801891e:	9300      	str	r3, [sp, #0]
 8018920:	687b      	ldr	r3, [r7, #4]
 8018922:	2200      	movs	r2, #0
 8018924:	2100      	movs	r1, #0
 8018926:	68f8      	ldr	r0, [r7, #12]
 8018928:	f7ff ff02 	bl	8018730 <xQueueGenericCreateStatic>
 801892c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801892e:	69fb      	ldr	r3, [r7, #28]
 8018930:	2b00      	cmp	r3, #0
 8018932:	d002      	beq.n	801893a <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8018934:	69fb      	ldr	r3, [r7, #28]
 8018936:	68ba      	ldr	r2, [r7, #8]
 8018938:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801893a:	69fb      	ldr	r3, [r7, #28]
	}
 801893c:	4618      	mov	r0, r3
 801893e:	3720      	adds	r7, #32
 8018940:	46bd      	mov	sp, r7
 8018942:	bd80      	pop	{r7, pc}

08018944 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8018944:	b580      	push	{r7, lr}
 8018946:	b086      	sub	sp, #24
 8018948:	af00      	add	r7, sp, #0
 801894a:	6078      	str	r0, [r7, #4]
 801894c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801894e:	687b      	ldr	r3, [r7, #4]
 8018950:	2b00      	cmp	r3, #0
 8018952:	d109      	bne.n	8018968 <xQueueCreateCountingSemaphore+0x24>
 8018954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018958:	f383 8811 	msr	BASEPRI, r3
 801895c:	f3bf 8f6f 	isb	sy
 8018960:	f3bf 8f4f 	dsb	sy
 8018964:	613b      	str	r3, [r7, #16]
 8018966:	e7fe      	b.n	8018966 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8018968:	683a      	ldr	r2, [r7, #0]
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	429a      	cmp	r2, r3
 801896e:	d909      	bls.n	8018984 <xQueueCreateCountingSemaphore+0x40>
 8018970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018974:	f383 8811 	msr	BASEPRI, r3
 8018978:	f3bf 8f6f 	isb	sy
 801897c:	f3bf 8f4f 	dsb	sy
 8018980:	60fb      	str	r3, [r7, #12]
 8018982:	e7fe      	b.n	8018982 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8018984:	2202      	movs	r2, #2
 8018986:	2100      	movs	r1, #0
 8018988:	6878      	ldr	r0, [r7, #4]
 801898a:	f7ff ff44 	bl	8018816 <xQueueGenericCreate>
 801898e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8018990:	697b      	ldr	r3, [r7, #20]
 8018992:	2b00      	cmp	r3, #0
 8018994:	d002      	beq.n	801899c <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8018996:	697b      	ldr	r3, [r7, #20]
 8018998:	683a      	ldr	r2, [r7, #0]
 801899a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801899c:	697b      	ldr	r3, [r7, #20]
	}
 801899e:	4618      	mov	r0, r3
 80189a0:	3718      	adds	r7, #24
 80189a2:	46bd      	mov	sp, r7
 80189a4:	bd80      	pop	{r7, pc}
	...

080189a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80189a8:	b580      	push	{r7, lr}
 80189aa:	b08e      	sub	sp, #56	; 0x38
 80189ac:	af00      	add	r7, sp, #0
 80189ae:	60f8      	str	r0, [r7, #12]
 80189b0:	60b9      	str	r1, [r7, #8]
 80189b2:	607a      	str	r2, [r7, #4]
 80189b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80189b6:	2300      	movs	r3, #0
 80189b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80189ba:	68fb      	ldr	r3, [r7, #12]
 80189bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80189be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189c0:	2b00      	cmp	r3, #0
 80189c2:	d109      	bne.n	80189d8 <xQueueGenericSend+0x30>
 80189c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189c8:	f383 8811 	msr	BASEPRI, r3
 80189cc:	f3bf 8f6f 	isb	sy
 80189d0:	f3bf 8f4f 	dsb	sy
 80189d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80189d6:	e7fe      	b.n	80189d6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80189d8:	68bb      	ldr	r3, [r7, #8]
 80189da:	2b00      	cmp	r3, #0
 80189dc:	d103      	bne.n	80189e6 <xQueueGenericSend+0x3e>
 80189de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80189e2:	2b00      	cmp	r3, #0
 80189e4:	d101      	bne.n	80189ea <xQueueGenericSend+0x42>
 80189e6:	2301      	movs	r3, #1
 80189e8:	e000      	b.n	80189ec <xQueueGenericSend+0x44>
 80189ea:	2300      	movs	r3, #0
 80189ec:	2b00      	cmp	r3, #0
 80189ee:	d109      	bne.n	8018a04 <xQueueGenericSend+0x5c>
 80189f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189f4:	f383 8811 	msr	BASEPRI, r3
 80189f8:	f3bf 8f6f 	isb	sy
 80189fc:	f3bf 8f4f 	dsb	sy
 8018a00:	627b      	str	r3, [r7, #36]	; 0x24
 8018a02:	e7fe      	b.n	8018a02 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8018a04:	683b      	ldr	r3, [r7, #0]
 8018a06:	2b02      	cmp	r3, #2
 8018a08:	d103      	bne.n	8018a12 <xQueueGenericSend+0x6a>
 8018a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018a0e:	2b01      	cmp	r3, #1
 8018a10:	d101      	bne.n	8018a16 <xQueueGenericSend+0x6e>
 8018a12:	2301      	movs	r3, #1
 8018a14:	e000      	b.n	8018a18 <xQueueGenericSend+0x70>
 8018a16:	2300      	movs	r3, #0
 8018a18:	2b00      	cmp	r3, #0
 8018a1a:	d109      	bne.n	8018a30 <xQueueGenericSend+0x88>
 8018a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a20:	f383 8811 	msr	BASEPRI, r3
 8018a24:	f3bf 8f6f 	isb	sy
 8018a28:	f3bf 8f4f 	dsb	sy
 8018a2c:	623b      	str	r3, [r7, #32]
 8018a2e:	e7fe      	b.n	8018a2e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018a30:	f001 fbda 	bl	801a1e8 <xTaskGetSchedulerState>
 8018a34:	4603      	mov	r3, r0
 8018a36:	2b00      	cmp	r3, #0
 8018a38:	d102      	bne.n	8018a40 <xQueueGenericSend+0x98>
 8018a3a:	687b      	ldr	r3, [r7, #4]
 8018a3c:	2b00      	cmp	r3, #0
 8018a3e:	d101      	bne.n	8018a44 <xQueueGenericSend+0x9c>
 8018a40:	2301      	movs	r3, #1
 8018a42:	e000      	b.n	8018a46 <xQueueGenericSend+0x9e>
 8018a44:	2300      	movs	r3, #0
 8018a46:	2b00      	cmp	r3, #0
 8018a48:	d109      	bne.n	8018a5e <xQueueGenericSend+0xb6>
 8018a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a4e:	f383 8811 	msr	BASEPRI, r3
 8018a52:	f3bf 8f6f 	isb	sy
 8018a56:	f3bf 8f4f 	dsb	sy
 8018a5a:	61fb      	str	r3, [r7, #28]
 8018a5c:	e7fe      	b.n	8018a5c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8018a5e:	f7ff fce5 	bl	801842c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8018a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018a6a:	429a      	cmp	r2, r3
 8018a6c:	d302      	bcc.n	8018a74 <xQueueGenericSend+0xcc>
 8018a6e:	683b      	ldr	r3, [r7, #0]
 8018a70:	2b02      	cmp	r3, #2
 8018a72:	d129      	bne.n	8018ac8 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8018a74:	683a      	ldr	r2, [r7, #0]
 8018a76:	68b9      	ldr	r1, [r7, #8]
 8018a78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018a7a:	f000 fc48 	bl	801930e <prvCopyDataToQueue>
 8018a7e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a84:	2b00      	cmp	r3, #0
 8018a86:	d010      	beq.n	8018aaa <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a8a:	3324      	adds	r3, #36	; 0x24
 8018a8c:	4618      	mov	r0, r3
 8018a8e:	f001 f9f5 	bl	8019e7c <xTaskRemoveFromEventList>
 8018a92:	4603      	mov	r3, r0
 8018a94:	2b00      	cmp	r3, #0
 8018a96:	d013      	beq.n	8018ac0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8018a98:	4b3f      	ldr	r3, [pc, #252]	; (8018b98 <xQueueGenericSend+0x1f0>)
 8018a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018a9e:	601a      	str	r2, [r3, #0]
 8018aa0:	f3bf 8f4f 	dsb	sy
 8018aa4:	f3bf 8f6f 	isb	sy
 8018aa8:	e00a      	b.n	8018ac0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8018aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018aac:	2b00      	cmp	r3, #0
 8018aae:	d007      	beq.n	8018ac0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8018ab0:	4b39      	ldr	r3, [pc, #228]	; (8018b98 <xQueueGenericSend+0x1f0>)
 8018ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018ab6:	601a      	str	r2, [r3, #0]
 8018ab8:	f3bf 8f4f 	dsb	sy
 8018abc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8018ac0:	f7ff fce2 	bl	8018488 <vPortExitCritical>
				return pdPASS;
 8018ac4:	2301      	movs	r3, #1
 8018ac6:	e063      	b.n	8018b90 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8018ac8:	687b      	ldr	r3, [r7, #4]
 8018aca:	2b00      	cmp	r3, #0
 8018acc:	d103      	bne.n	8018ad6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8018ace:	f7ff fcdb 	bl	8018488 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8018ad2:	2300      	movs	r3, #0
 8018ad4:	e05c      	b.n	8018b90 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8018ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018ad8:	2b00      	cmp	r3, #0
 8018ada:	d106      	bne.n	8018aea <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018adc:	f107 0314 	add.w	r3, r7, #20
 8018ae0:	4618      	mov	r0, r3
 8018ae2:	f001 fa2d 	bl	8019f40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018ae6:	2301      	movs	r3, #1
 8018ae8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8018aea:	f7ff fccd 	bl	8018488 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8018aee:	f000 ffa9 	bl	8019a44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018af2:	f7ff fc9b 	bl	801842c <vPortEnterCritical>
 8018af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018af8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018afc:	b25b      	sxtb	r3, r3
 8018afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018b02:	d103      	bne.n	8018b0c <xQueueGenericSend+0x164>
 8018b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b06:	2200      	movs	r2, #0
 8018b08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018b12:	b25b      	sxtb	r3, r3
 8018b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018b18:	d103      	bne.n	8018b22 <xQueueGenericSend+0x17a>
 8018b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b1c:	2200      	movs	r2, #0
 8018b1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018b22:	f7ff fcb1 	bl	8018488 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018b26:	1d3a      	adds	r2, r7, #4
 8018b28:	f107 0314 	add.w	r3, r7, #20
 8018b2c:	4611      	mov	r1, r2
 8018b2e:	4618      	mov	r0, r3
 8018b30:	f001 fa1c 	bl	8019f6c <xTaskCheckForTimeOut>
 8018b34:	4603      	mov	r3, r0
 8018b36:	2b00      	cmp	r3, #0
 8018b38:	d124      	bne.n	8018b84 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8018b3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018b3c:	f000 fcdf 	bl	80194fe <prvIsQueueFull>
 8018b40:	4603      	mov	r3, r0
 8018b42:	2b00      	cmp	r3, #0
 8018b44:	d018      	beq.n	8018b78 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8018b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b48:	3310      	adds	r3, #16
 8018b4a:	687a      	ldr	r2, [r7, #4]
 8018b4c:	4611      	mov	r1, r2
 8018b4e:	4618      	mov	r0, r3
 8018b50:	f001 f946 	bl	8019de0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8018b54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018b56:	f000 fc6a 	bl	801942e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8018b5a:	f000 ff81 	bl	8019a60 <xTaskResumeAll>
 8018b5e:	4603      	mov	r3, r0
 8018b60:	2b00      	cmp	r3, #0
 8018b62:	f47f af7c 	bne.w	8018a5e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8018b66:	4b0c      	ldr	r3, [pc, #48]	; (8018b98 <xQueueGenericSend+0x1f0>)
 8018b68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018b6c:	601a      	str	r2, [r3, #0]
 8018b6e:	f3bf 8f4f 	dsb	sy
 8018b72:	f3bf 8f6f 	isb	sy
 8018b76:	e772      	b.n	8018a5e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8018b78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018b7a:	f000 fc58 	bl	801942e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018b7e:	f000 ff6f 	bl	8019a60 <xTaskResumeAll>
 8018b82:	e76c      	b.n	8018a5e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8018b84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018b86:	f000 fc52 	bl	801942e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018b8a:	f000 ff69 	bl	8019a60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8018b8e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8018b90:	4618      	mov	r0, r3
 8018b92:	3738      	adds	r7, #56	; 0x38
 8018b94:	46bd      	mov	sp, r7
 8018b96:	bd80      	pop	{r7, pc}
 8018b98:	e000ed04 	.word	0xe000ed04

08018b9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8018b9c:	b580      	push	{r7, lr}
 8018b9e:	b08e      	sub	sp, #56	; 0x38
 8018ba0:	af00      	add	r7, sp, #0
 8018ba2:	60f8      	str	r0, [r7, #12]
 8018ba4:	60b9      	str	r1, [r7, #8]
 8018ba6:	607a      	str	r2, [r7, #4]
 8018ba8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8018baa:	68fb      	ldr	r3, [r7, #12]
 8018bac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8018bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bb0:	2b00      	cmp	r3, #0
 8018bb2:	d109      	bne.n	8018bc8 <xQueueGenericSendFromISR+0x2c>
 8018bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018bb8:	f383 8811 	msr	BASEPRI, r3
 8018bbc:	f3bf 8f6f 	isb	sy
 8018bc0:	f3bf 8f4f 	dsb	sy
 8018bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8018bc6:	e7fe      	b.n	8018bc6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018bc8:	68bb      	ldr	r3, [r7, #8]
 8018bca:	2b00      	cmp	r3, #0
 8018bcc:	d103      	bne.n	8018bd6 <xQueueGenericSendFromISR+0x3a>
 8018bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018bd2:	2b00      	cmp	r3, #0
 8018bd4:	d101      	bne.n	8018bda <xQueueGenericSendFromISR+0x3e>
 8018bd6:	2301      	movs	r3, #1
 8018bd8:	e000      	b.n	8018bdc <xQueueGenericSendFromISR+0x40>
 8018bda:	2300      	movs	r3, #0
 8018bdc:	2b00      	cmp	r3, #0
 8018bde:	d109      	bne.n	8018bf4 <xQueueGenericSendFromISR+0x58>
 8018be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018be4:	f383 8811 	msr	BASEPRI, r3
 8018be8:	f3bf 8f6f 	isb	sy
 8018bec:	f3bf 8f4f 	dsb	sy
 8018bf0:	623b      	str	r3, [r7, #32]
 8018bf2:	e7fe      	b.n	8018bf2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8018bf4:	683b      	ldr	r3, [r7, #0]
 8018bf6:	2b02      	cmp	r3, #2
 8018bf8:	d103      	bne.n	8018c02 <xQueueGenericSendFromISR+0x66>
 8018bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018bfe:	2b01      	cmp	r3, #1
 8018c00:	d101      	bne.n	8018c06 <xQueueGenericSendFromISR+0x6a>
 8018c02:	2301      	movs	r3, #1
 8018c04:	e000      	b.n	8018c08 <xQueueGenericSendFromISR+0x6c>
 8018c06:	2300      	movs	r3, #0
 8018c08:	2b00      	cmp	r3, #0
 8018c0a:	d109      	bne.n	8018c20 <xQueueGenericSendFromISR+0x84>
 8018c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c10:	f383 8811 	msr	BASEPRI, r3
 8018c14:	f3bf 8f6f 	isb	sy
 8018c18:	f3bf 8f4f 	dsb	sy
 8018c1c:	61fb      	str	r3, [r7, #28]
 8018c1e:	e7fe      	b.n	8018c1e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8018c20:	f7ff fce0 	bl	80185e4 <vPortValidateInterruptPriority>
	__asm volatile
 8018c24:	f3ef 8211 	mrs	r2, BASEPRI
 8018c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c2c:	f383 8811 	msr	BASEPRI, r3
 8018c30:	f3bf 8f6f 	isb	sy
 8018c34:	f3bf 8f4f 	dsb	sy
 8018c38:	61ba      	str	r2, [r7, #24]
 8018c3a:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8018c3c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8018c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8018c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018c48:	429a      	cmp	r2, r3
 8018c4a:	d302      	bcc.n	8018c52 <xQueueGenericSendFromISR+0xb6>
 8018c4c:	683b      	ldr	r3, [r7, #0]
 8018c4e:	2b02      	cmp	r3, #2
 8018c50:	d12c      	bne.n	8018cac <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8018c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018c58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8018c5c:	683a      	ldr	r2, [r7, #0]
 8018c5e:	68b9      	ldr	r1, [r7, #8]
 8018c60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018c62:	f000 fb54 	bl	801930e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8018c66:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8018c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018c6e:	d112      	bne.n	8018c96 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c74:	2b00      	cmp	r3, #0
 8018c76:	d016      	beq.n	8018ca6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c7a:	3324      	adds	r3, #36	; 0x24
 8018c7c:	4618      	mov	r0, r3
 8018c7e:	f001 f8fd 	bl	8019e7c <xTaskRemoveFromEventList>
 8018c82:	4603      	mov	r3, r0
 8018c84:	2b00      	cmp	r3, #0
 8018c86:	d00e      	beq.n	8018ca6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8018c88:	687b      	ldr	r3, [r7, #4]
 8018c8a:	2b00      	cmp	r3, #0
 8018c8c:	d00b      	beq.n	8018ca6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8018c8e:	687b      	ldr	r3, [r7, #4]
 8018c90:	2201      	movs	r2, #1
 8018c92:	601a      	str	r2, [r3, #0]
 8018c94:	e007      	b.n	8018ca6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8018c96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8018c9a:	3301      	adds	r3, #1
 8018c9c:	b2db      	uxtb	r3, r3
 8018c9e:	b25a      	sxtb	r2, r3
 8018ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ca2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8018ca6:	2301      	movs	r3, #1
 8018ca8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8018caa:	e001      	b.n	8018cb0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8018cac:	2300      	movs	r3, #0
 8018cae:	637b      	str	r3, [r7, #52]	; 0x34
 8018cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018cb2:	613b      	str	r3, [r7, #16]
	__asm volatile
 8018cb4:	693b      	ldr	r3, [r7, #16]
 8018cb6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8018cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8018cbc:	4618      	mov	r0, r3
 8018cbe:	3738      	adds	r7, #56	; 0x38
 8018cc0:	46bd      	mov	sp, r7
 8018cc2:	bd80      	pop	{r7, pc}

08018cc4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8018cc4:	b580      	push	{r7, lr}
 8018cc6:	b08e      	sub	sp, #56	; 0x38
 8018cc8:	af00      	add	r7, sp, #0
 8018cca:	6078      	str	r0, [r7, #4]
 8018ccc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8018cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018cd4:	2b00      	cmp	r3, #0
 8018cd6:	d109      	bne.n	8018cec <xQueueGiveFromISR+0x28>
	__asm volatile
 8018cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018cdc:	f383 8811 	msr	BASEPRI, r3
 8018ce0:	f3bf 8f6f 	isb	sy
 8018ce4:	f3bf 8f4f 	dsb	sy
 8018ce8:	623b      	str	r3, [r7, #32]
 8018cea:	e7fe      	b.n	8018cea <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8018cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018cf0:	2b00      	cmp	r3, #0
 8018cf2:	d009      	beq.n	8018d08 <xQueueGiveFromISR+0x44>
 8018cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018cf8:	f383 8811 	msr	BASEPRI, r3
 8018cfc:	f3bf 8f6f 	isb	sy
 8018d00:	f3bf 8f4f 	dsb	sy
 8018d04:	61fb      	str	r3, [r7, #28]
 8018d06:	e7fe      	b.n	8018d06 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8018d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d0a:	681b      	ldr	r3, [r3, #0]
 8018d0c:	2b00      	cmp	r3, #0
 8018d0e:	d103      	bne.n	8018d18 <xQueueGiveFromISR+0x54>
 8018d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d12:	689b      	ldr	r3, [r3, #8]
 8018d14:	2b00      	cmp	r3, #0
 8018d16:	d101      	bne.n	8018d1c <xQueueGiveFromISR+0x58>
 8018d18:	2301      	movs	r3, #1
 8018d1a:	e000      	b.n	8018d1e <xQueueGiveFromISR+0x5a>
 8018d1c:	2300      	movs	r3, #0
 8018d1e:	2b00      	cmp	r3, #0
 8018d20:	d109      	bne.n	8018d36 <xQueueGiveFromISR+0x72>
 8018d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d26:	f383 8811 	msr	BASEPRI, r3
 8018d2a:	f3bf 8f6f 	isb	sy
 8018d2e:	f3bf 8f4f 	dsb	sy
 8018d32:	61bb      	str	r3, [r7, #24]
 8018d34:	e7fe      	b.n	8018d34 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8018d36:	f7ff fc55 	bl	80185e4 <vPortValidateInterruptPriority>
	__asm volatile
 8018d3a:	f3ef 8211 	mrs	r2, BASEPRI
 8018d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d42:	f383 8811 	msr	BASEPRI, r3
 8018d46:	f3bf 8f6f 	isb	sy
 8018d4a:	f3bf 8f4f 	dsb	sy
 8018d4e:	617a      	str	r2, [r7, #20]
 8018d50:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8018d52:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8018d54:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018d5a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8018d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018d60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018d62:	429a      	cmp	r2, r3
 8018d64:	d22b      	bcs.n	8018dbe <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8018d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018d6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8018d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d72:	1c5a      	adds	r2, r3, #1
 8018d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d76:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8018d78:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8018d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018d80:	d112      	bne.n	8018da8 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d86:	2b00      	cmp	r3, #0
 8018d88:	d016      	beq.n	8018db8 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d8c:	3324      	adds	r3, #36	; 0x24
 8018d8e:	4618      	mov	r0, r3
 8018d90:	f001 f874 	bl	8019e7c <xTaskRemoveFromEventList>
 8018d94:	4603      	mov	r3, r0
 8018d96:	2b00      	cmp	r3, #0
 8018d98:	d00e      	beq.n	8018db8 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8018d9a:	683b      	ldr	r3, [r7, #0]
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	d00b      	beq.n	8018db8 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8018da0:	683b      	ldr	r3, [r7, #0]
 8018da2:	2201      	movs	r2, #1
 8018da4:	601a      	str	r2, [r3, #0]
 8018da6:	e007      	b.n	8018db8 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8018da8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018dac:	3301      	adds	r3, #1
 8018dae:	b2db      	uxtb	r3, r3
 8018db0:	b25a      	sxtb	r2, r3
 8018db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8018db8:	2301      	movs	r3, #1
 8018dba:	637b      	str	r3, [r7, #52]	; 0x34
 8018dbc:	e001      	b.n	8018dc2 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8018dbe:	2300      	movs	r3, #0
 8018dc0:	637b      	str	r3, [r7, #52]	; 0x34
 8018dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018dc4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8018dc6:	68fb      	ldr	r3, [r7, #12]
 8018dc8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8018dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8018dce:	4618      	mov	r0, r3
 8018dd0:	3738      	adds	r7, #56	; 0x38
 8018dd2:	46bd      	mov	sp, r7
 8018dd4:	bd80      	pop	{r7, pc}
	...

08018dd8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8018dd8:	b580      	push	{r7, lr}
 8018dda:	b08c      	sub	sp, #48	; 0x30
 8018ddc:	af00      	add	r7, sp, #0
 8018dde:	60f8      	str	r0, [r7, #12]
 8018de0:	60b9      	str	r1, [r7, #8]
 8018de2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8018de4:	2300      	movs	r3, #0
 8018de6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8018de8:	68fb      	ldr	r3, [r7, #12]
 8018dea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8018dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018dee:	2b00      	cmp	r3, #0
 8018df0:	d109      	bne.n	8018e06 <xQueueReceive+0x2e>
	__asm volatile
 8018df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018df6:	f383 8811 	msr	BASEPRI, r3
 8018dfa:	f3bf 8f6f 	isb	sy
 8018dfe:	f3bf 8f4f 	dsb	sy
 8018e02:	623b      	str	r3, [r7, #32]
 8018e04:	e7fe      	b.n	8018e04 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018e06:	68bb      	ldr	r3, [r7, #8]
 8018e08:	2b00      	cmp	r3, #0
 8018e0a:	d103      	bne.n	8018e14 <xQueueReceive+0x3c>
 8018e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	d101      	bne.n	8018e18 <xQueueReceive+0x40>
 8018e14:	2301      	movs	r3, #1
 8018e16:	e000      	b.n	8018e1a <xQueueReceive+0x42>
 8018e18:	2300      	movs	r3, #0
 8018e1a:	2b00      	cmp	r3, #0
 8018e1c:	d109      	bne.n	8018e32 <xQueueReceive+0x5a>
 8018e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e22:	f383 8811 	msr	BASEPRI, r3
 8018e26:	f3bf 8f6f 	isb	sy
 8018e2a:	f3bf 8f4f 	dsb	sy
 8018e2e:	61fb      	str	r3, [r7, #28]
 8018e30:	e7fe      	b.n	8018e30 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018e32:	f001 f9d9 	bl	801a1e8 <xTaskGetSchedulerState>
 8018e36:	4603      	mov	r3, r0
 8018e38:	2b00      	cmp	r3, #0
 8018e3a:	d102      	bne.n	8018e42 <xQueueReceive+0x6a>
 8018e3c:	687b      	ldr	r3, [r7, #4]
 8018e3e:	2b00      	cmp	r3, #0
 8018e40:	d101      	bne.n	8018e46 <xQueueReceive+0x6e>
 8018e42:	2301      	movs	r3, #1
 8018e44:	e000      	b.n	8018e48 <xQueueReceive+0x70>
 8018e46:	2300      	movs	r3, #0
 8018e48:	2b00      	cmp	r3, #0
 8018e4a:	d109      	bne.n	8018e60 <xQueueReceive+0x88>
 8018e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e50:	f383 8811 	msr	BASEPRI, r3
 8018e54:	f3bf 8f6f 	isb	sy
 8018e58:	f3bf 8f4f 	dsb	sy
 8018e5c:	61bb      	str	r3, [r7, #24]
 8018e5e:	e7fe      	b.n	8018e5e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8018e60:	f7ff fae4 	bl	801842c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018e68:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e6c:	2b00      	cmp	r3, #0
 8018e6e:	d01f      	beq.n	8018eb0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8018e70:	68b9      	ldr	r1, [r7, #8]
 8018e72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018e74:	f000 fab5 	bl	80193e2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8018e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e7a:	1e5a      	subs	r2, r3, #1
 8018e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e7e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e82:	691b      	ldr	r3, [r3, #16]
 8018e84:	2b00      	cmp	r3, #0
 8018e86:	d00f      	beq.n	8018ea8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e8a:	3310      	adds	r3, #16
 8018e8c:	4618      	mov	r0, r3
 8018e8e:	f000 fff5 	bl	8019e7c <xTaskRemoveFromEventList>
 8018e92:	4603      	mov	r3, r0
 8018e94:	2b00      	cmp	r3, #0
 8018e96:	d007      	beq.n	8018ea8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8018e98:	4b3c      	ldr	r3, [pc, #240]	; (8018f8c <xQueueReceive+0x1b4>)
 8018e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018e9e:	601a      	str	r2, [r3, #0]
 8018ea0:	f3bf 8f4f 	dsb	sy
 8018ea4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8018ea8:	f7ff faee 	bl	8018488 <vPortExitCritical>
				return pdPASS;
 8018eac:	2301      	movs	r3, #1
 8018eae:	e069      	b.n	8018f84 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	2b00      	cmp	r3, #0
 8018eb4:	d103      	bne.n	8018ebe <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8018eb6:	f7ff fae7 	bl	8018488 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8018eba:	2300      	movs	r3, #0
 8018ebc:	e062      	b.n	8018f84 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8018ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ec0:	2b00      	cmp	r3, #0
 8018ec2:	d106      	bne.n	8018ed2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018ec4:	f107 0310 	add.w	r3, r7, #16
 8018ec8:	4618      	mov	r0, r3
 8018eca:	f001 f839 	bl	8019f40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018ece:	2301      	movs	r3, #1
 8018ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8018ed2:	f7ff fad9 	bl	8018488 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8018ed6:	f000 fdb5 	bl	8019a44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018eda:	f7ff faa7 	bl	801842c <vPortEnterCritical>
 8018ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ee0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018ee4:	b25b      	sxtb	r3, r3
 8018ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018eea:	d103      	bne.n	8018ef4 <xQueueReceive+0x11c>
 8018eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018eee:	2200      	movs	r2, #0
 8018ef0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ef6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018efa:	b25b      	sxtb	r3, r3
 8018efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018f00:	d103      	bne.n	8018f0a <xQueueReceive+0x132>
 8018f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f04:	2200      	movs	r2, #0
 8018f06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018f0a:	f7ff fabd 	bl	8018488 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018f0e:	1d3a      	adds	r2, r7, #4
 8018f10:	f107 0310 	add.w	r3, r7, #16
 8018f14:	4611      	mov	r1, r2
 8018f16:	4618      	mov	r0, r3
 8018f18:	f001 f828 	bl	8019f6c <xTaskCheckForTimeOut>
 8018f1c:	4603      	mov	r3, r0
 8018f1e:	2b00      	cmp	r3, #0
 8018f20:	d123      	bne.n	8018f6a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018f22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018f24:	f000 fad5 	bl	80194d2 <prvIsQueueEmpty>
 8018f28:	4603      	mov	r3, r0
 8018f2a:	2b00      	cmp	r3, #0
 8018f2c:	d017      	beq.n	8018f5e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8018f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f30:	3324      	adds	r3, #36	; 0x24
 8018f32:	687a      	ldr	r2, [r7, #4]
 8018f34:	4611      	mov	r1, r2
 8018f36:	4618      	mov	r0, r3
 8018f38:	f000 ff52 	bl	8019de0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8018f3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018f3e:	f000 fa76 	bl	801942e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8018f42:	f000 fd8d 	bl	8019a60 <xTaskResumeAll>
 8018f46:	4603      	mov	r3, r0
 8018f48:	2b00      	cmp	r3, #0
 8018f4a:	d189      	bne.n	8018e60 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8018f4c:	4b0f      	ldr	r3, [pc, #60]	; (8018f8c <xQueueReceive+0x1b4>)
 8018f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018f52:	601a      	str	r2, [r3, #0]
 8018f54:	f3bf 8f4f 	dsb	sy
 8018f58:	f3bf 8f6f 	isb	sy
 8018f5c:	e780      	b.n	8018e60 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8018f5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018f60:	f000 fa65 	bl	801942e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018f64:	f000 fd7c 	bl	8019a60 <xTaskResumeAll>
 8018f68:	e77a      	b.n	8018e60 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8018f6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018f6c:	f000 fa5f 	bl	801942e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018f70:	f000 fd76 	bl	8019a60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018f74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018f76:	f000 faac 	bl	80194d2 <prvIsQueueEmpty>
 8018f7a:	4603      	mov	r3, r0
 8018f7c:	2b00      	cmp	r3, #0
 8018f7e:	f43f af6f 	beq.w	8018e60 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8018f82:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8018f84:	4618      	mov	r0, r3
 8018f86:	3730      	adds	r7, #48	; 0x30
 8018f88:	46bd      	mov	sp, r7
 8018f8a:	bd80      	pop	{r7, pc}
 8018f8c:	e000ed04 	.word	0xe000ed04

08018f90 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8018f90:	b580      	push	{r7, lr}
 8018f92:	b08e      	sub	sp, #56	; 0x38
 8018f94:	af00      	add	r7, sp, #0
 8018f96:	6078      	str	r0, [r7, #4]
 8018f98:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8018f9a:	2300      	movs	r3, #0
 8018f9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8018f9e:	687b      	ldr	r3, [r7, #4]
 8018fa0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8018fa2:	2300      	movs	r3, #0
 8018fa4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8018fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fa8:	2b00      	cmp	r3, #0
 8018faa:	d109      	bne.n	8018fc0 <xQueueSemaphoreTake+0x30>
 8018fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018fb0:	f383 8811 	msr	BASEPRI, r3
 8018fb4:	f3bf 8f6f 	isb	sy
 8018fb8:	f3bf 8f4f 	dsb	sy
 8018fbc:	623b      	str	r3, [r7, #32]
 8018fbe:	e7fe      	b.n	8018fbe <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8018fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018fc4:	2b00      	cmp	r3, #0
 8018fc6:	d009      	beq.n	8018fdc <xQueueSemaphoreTake+0x4c>
 8018fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018fcc:	f383 8811 	msr	BASEPRI, r3
 8018fd0:	f3bf 8f6f 	isb	sy
 8018fd4:	f3bf 8f4f 	dsb	sy
 8018fd8:	61fb      	str	r3, [r7, #28]
 8018fda:	e7fe      	b.n	8018fda <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018fdc:	f001 f904 	bl	801a1e8 <xTaskGetSchedulerState>
 8018fe0:	4603      	mov	r3, r0
 8018fe2:	2b00      	cmp	r3, #0
 8018fe4:	d102      	bne.n	8018fec <xQueueSemaphoreTake+0x5c>
 8018fe6:	683b      	ldr	r3, [r7, #0]
 8018fe8:	2b00      	cmp	r3, #0
 8018fea:	d101      	bne.n	8018ff0 <xQueueSemaphoreTake+0x60>
 8018fec:	2301      	movs	r3, #1
 8018fee:	e000      	b.n	8018ff2 <xQueueSemaphoreTake+0x62>
 8018ff0:	2300      	movs	r3, #0
 8018ff2:	2b00      	cmp	r3, #0
 8018ff4:	d109      	bne.n	801900a <xQueueSemaphoreTake+0x7a>
 8018ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ffa:	f383 8811 	msr	BASEPRI, r3
 8018ffe:	f3bf 8f6f 	isb	sy
 8019002:	f3bf 8f4f 	dsb	sy
 8019006:	61bb      	str	r3, [r7, #24]
 8019008:	e7fe      	b.n	8019008 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801900a:	f7ff fa0f 	bl	801842c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801900e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019012:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8019014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019016:	2b00      	cmp	r3, #0
 8019018:	d024      	beq.n	8019064 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801901a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801901c:	1e5a      	subs	r2, r3, #1
 801901e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019020:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8019022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019024:	681b      	ldr	r3, [r3, #0]
 8019026:	2b00      	cmp	r3, #0
 8019028:	d104      	bne.n	8019034 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801902a:	f001 fa4f 	bl	801a4cc <pvTaskIncrementMutexHeldCount>
 801902e:	4602      	mov	r2, r0
 8019030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019032:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019036:	691b      	ldr	r3, [r3, #16]
 8019038:	2b00      	cmp	r3, #0
 801903a:	d00f      	beq.n	801905c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801903c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801903e:	3310      	adds	r3, #16
 8019040:	4618      	mov	r0, r3
 8019042:	f000 ff1b 	bl	8019e7c <xTaskRemoveFromEventList>
 8019046:	4603      	mov	r3, r0
 8019048:	2b00      	cmp	r3, #0
 801904a:	d007      	beq.n	801905c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801904c:	4b53      	ldr	r3, [pc, #332]	; (801919c <xQueueSemaphoreTake+0x20c>)
 801904e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019052:	601a      	str	r2, [r3, #0]
 8019054:	f3bf 8f4f 	dsb	sy
 8019058:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801905c:	f7ff fa14 	bl	8018488 <vPortExitCritical>
				return pdPASS;
 8019060:	2301      	movs	r3, #1
 8019062:	e096      	b.n	8019192 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8019064:	683b      	ldr	r3, [r7, #0]
 8019066:	2b00      	cmp	r3, #0
 8019068:	d110      	bne.n	801908c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801906a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801906c:	2b00      	cmp	r3, #0
 801906e:	d009      	beq.n	8019084 <xQueueSemaphoreTake+0xf4>
 8019070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019074:	f383 8811 	msr	BASEPRI, r3
 8019078:	f3bf 8f6f 	isb	sy
 801907c:	f3bf 8f4f 	dsb	sy
 8019080:	617b      	str	r3, [r7, #20]
 8019082:	e7fe      	b.n	8019082 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8019084:	f7ff fa00 	bl	8018488 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8019088:	2300      	movs	r3, #0
 801908a:	e082      	b.n	8019192 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 801908c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801908e:	2b00      	cmp	r3, #0
 8019090:	d106      	bne.n	80190a0 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8019092:	f107 030c 	add.w	r3, r7, #12
 8019096:	4618      	mov	r0, r3
 8019098:	f000 ff52 	bl	8019f40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801909c:	2301      	movs	r3, #1
 801909e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80190a0:	f7ff f9f2 	bl	8018488 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80190a4:	f000 fcce 	bl	8019a44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80190a8:	f7ff f9c0 	bl	801842c <vPortEnterCritical>
 80190ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80190b2:	b25b      	sxtb	r3, r3
 80190b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80190b8:	d103      	bne.n	80190c2 <xQueueSemaphoreTake+0x132>
 80190ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190bc:	2200      	movs	r2, #0
 80190be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80190c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80190c8:	b25b      	sxtb	r3, r3
 80190ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80190ce:	d103      	bne.n	80190d8 <xQueueSemaphoreTake+0x148>
 80190d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190d2:	2200      	movs	r2, #0
 80190d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80190d8:	f7ff f9d6 	bl	8018488 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80190dc:	463a      	mov	r2, r7
 80190de:	f107 030c 	add.w	r3, r7, #12
 80190e2:	4611      	mov	r1, r2
 80190e4:	4618      	mov	r0, r3
 80190e6:	f000 ff41 	bl	8019f6c <xTaskCheckForTimeOut>
 80190ea:	4603      	mov	r3, r0
 80190ec:	2b00      	cmp	r3, #0
 80190ee:	d132      	bne.n	8019156 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80190f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80190f2:	f000 f9ee 	bl	80194d2 <prvIsQueueEmpty>
 80190f6:	4603      	mov	r3, r0
 80190f8:	2b00      	cmp	r3, #0
 80190fa:	d026      	beq.n	801914a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80190fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190fe:	681b      	ldr	r3, [r3, #0]
 8019100:	2b00      	cmp	r3, #0
 8019102:	d109      	bne.n	8019118 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8019104:	f7ff f992 	bl	801842c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8019108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801910a:	689b      	ldr	r3, [r3, #8]
 801910c:	4618      	mov	r0, r3
 801910e:	f001 f889 	bl	801a224 <xTaskPriorityInherit>
 8019112:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8019114:	f7ff f9b8 	bl	8018488 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8019118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801911a:	3324      	adds	r3, #36	; 0x24
 801911c:	683a      	ldr	r2, [r7, #0]
 801911e:	4611      	mov	r1, r2
 8019120:	4618      	mov	r0, r3
 8019122:	f000 fe5d 	bl	8019de0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8019126:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019128:	f000 f981 	bl	801942e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801912c:	f000 fc98 	bl	8019a60 <xTaskResumeAll>
 8019130:	4603      	mov	r3, r0
 8019132:	2b00      	cmp	r3, #0
 8019134:	f47f af69 	bne.w	801900a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8019138:	4b18      	ldr	r3, [pc, #96]	; (801919c <xQueueSemaphoreTake+0x20c>)
 801913a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801913e:	601a      	str	r2, [r3, #0]
 8019140:	f3bf 8f4f 	dsb	sy
 8019144:	f3bf 8f6f 	isb	sy
 8019148:	e75f      	b.n	801900a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801914a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801914c:	f000 f96f 	bl	801942e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8019150:	f000 fc86 	bl	8019a60 <xTaskResumeAll>
 8019154:	e759      	b.n	801900a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8019156:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019158:	f000 f969 	bl	801942e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801915c:	f000 fc80 	bl	8019a60 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019160:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019162:	f000 f9b6 	bl	80194d2 <prvIsQueueEmpty>
 8019166:	4603      	mov	r3, r0
 8019168:	2b00      	cmp	r3, #0
 801916a:	f43f af4e 	beq.w	801900a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801916e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019170:	2b00      	cmp	r3, #0
 8019172:	d00d      	beq.n	8019190 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8019174:	f7ff f95a 	bl	801842c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8019178:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801917a:	f000 f8b0 	bl	80192de <prvGetDisinheritPriorityAfterTimeout>
 801917e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8019180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019182:	689b      	ldr	r3, [r3, #8]
 8019184:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019186:	4618      	mov	r0, r3
 8019188:	f001 f920 	bl	801a3cc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801918c:	f7ff f97c 	bl	8018488 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8019190:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8019192:	4618      	mov	r0, r3
 8019194:	3738      	adds	r7, #56	; 0x38
 8019196:	46bd      	mov	sp, r7
 8019198:	bd80      	pop	{r7, pc}
 801919a:	bf00      	nop
 801919c:	e000ed04 	.word	0xe000ed04

080191a0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80191a0:	b580      	push	{r7, lr}
 80191a2:	b08e      	sub	sp, #56	; 0x38
 80191a4:	af00      	add	r7, sp, #0
 80191a6:	60f8      	str	r0, [r7, #12]
 80191a8:	60b9      	str	r1, [r7, #8]
 80191aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80191ac:	68fb      	ldr	r3, [r7, #12]
 80191ae:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80191b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191b2:	2b00      	cmp	r3, #0
 80191b4:	d109      	bne.n	80191ca <xQueueReceiveFromISR+0x2a>
 80191b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80191ba:	f383 8811 	msr	BASEPRI, r3
 80191be:	f3bf 8f6f 	isb	sy
 80191c2:	f3bf 8f4f 	dsb	sy
 80191c6:	623b      	str	r3, [r7, #32]
 80191c8:	e7fe      	b.n	80191c8 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80191ca:	68bb      	ldr	r3, [r7, #8]
 80191cc:	2b00      	cmp	r3, #0
 80191ce:	d103      	bne.n	80191d8 <xQueueReceiveFromISR+0x38>
 80191d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80191d4:	2b00      	cmp	r3, #0
 80191d6:	d101      	bne.n	80191dc <xQueueReceiveFromISR+0x3c>
 80191d8:	2301      	movs	r3, #1
 80191da:	e000      	b.n	80191de <xQueueReceiveFromISR+0x3e>
 80191dc:	2300      	movs	r3, #0
 80191de:	2b00      	cmp	r3, #0
 80191e0:	d109      	bne.n	80191f6 <xQueueReceiveFromISR+0x56>
 80191e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80191e6:	f383 8811 	msr	BASEPRI, r3
 80191ea:	f3bf 8f6f 	isb	sy
 80191ee:	f3bf 8f4f 	dsb	sy
 80191f2:	61fb      	str	r3, [r7, #28]
 80191f4:	e7fe      	b.n	80191f4 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80191f6:	f7ff f9f5 	bl	80185e4 <vPortValidateInterruptPriority>
	__asm volatile
 80191fa:	f3ef 8211 	mrs	r2, BASEPRI
 80191fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019202:	f383 8811 	msr	BASEPRI, r3
 8019206:	f3bf 8f6f 	isb	sy
 801920a:	f3bf 8f4f 	dsb	sy
 801920e:	61ba      	str	r2, [r7, #24]
 8019210:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8019212:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8019214:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801921a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801921c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801921e:	2b00      	cmp	r3, #0
 8019220:	d02f      	beq.n	8019282 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8019222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019224:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019228:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801922c:	68b9      	ldr	r1, [r7, #8]
 801922e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019230:	f000 f8d7 	bl	80193e2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8019234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019236:	1e5a      	subs	r2, r3, #1
 8019238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801923a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801923c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019244:	d112      	bne.n	801926c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019248:	691b      	ldr	r3, [r3, #16]
 801924a:	2b00      	cmp	r3, #0
 801924c:	d016      	beq.n	801927c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801924e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019250:	3310      	adds	r3, #16
 8019252:	4618      	mov	r0, r3
 8019254:	f000 fe12 	bl	8019e7c <xTaskRemoveFromEventList>
 8019258:	4603      	mov	r3, r0
 801925a:	2b00      	cmp	r3, #0
 801925c:	d00e      	beq.n	801927c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801925e:	687b      	ldr	r3, [r7, #4]
 8019260:	2b00      	cmp	r3, #0
 8019262:	d00b      	beq.n	801927c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8019264:	687b      	ldr	r3, [r7, #4]
 8019266:	2201      	movs	r2, #1
 8019268:	601a      	str	r2, [r3, #0]
 801926a:	e007      	b.n	801927c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801926c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019270:	3301      	adds	r3, #1
 8019272:	b2db      	uxtb	r3, r3
 8019274:	b25a      	sxtb	r2, r3
 8019276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019278:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801927c:	2301      	movs	r3, #1
 801927e:	637b      	str	r3, [r7, #52]	; 0x34
 8019280:	e001      	b.n	8019286 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8019282:	2300      	movs	r3, #0
 8019284:	637b      	str	r3, [r7, #52]	; 0x34
 8019286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019288:	613b      	str	r3, [r7, #16]
	__asm volatile
 801928a:	693b      	ldr	r3, [r7, #16]
 801928c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8019290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8019292:	4618      	mov	r0, r3
 8019294:	3738      	adds	r7, #56	; 0x38
 8019296:	46bd      	mov	sp, r7
 8019298:	bd80      	pop	{r7, pc}

0801929a <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801929a:	b580      	push	{r7, lr}
 801929c:	b084      	sub	sp, #16
 801929e:	af00      	add	r7, sp, #0
 80192a0:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80192a2:	687b      	ldr	r3, [r7, #4]
 80192a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80192a6:	68fb      	ldr	r3, [r7, #12]
 80192a8:	2b00      	cmp	r3, #0
 80192aa:	d109      	bne.n	80192c0 <vQueueDelete+0x26>
	__asm volatile
 80192ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80192b0:	f383 8811 	msr	BASEPRI, r3
 80192b4:	f3bf 8f6f 	isb	sy
 80192b8:	f3bf 8f4f 	dsb	sy
 80192bc:	60bb      	str	r3, [r7, #8]
 80192be:	e7fe      	b.n	80192be <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80192c0:	68f8      	ldr	r0, [r7, #12]
 80192c2:	f000 f95d 	bl	8019580 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80192c6:	68fb      	ldr	r3, [r7, #12]
 80192c8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80192cc:	2b00      	cmp	r3, #0
 80192ce:	d102      	bne.n	80192d6 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 80192d0:	68f8      	ldr	r0, [r7, #12]
 80192d2:	f7fe fdb9 	bl	8017e48 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80192d6:	bf00      	nop
 80192d8:	3710      	adds	r7, #16
 80192da:	46bd      	mov	sp, r7
 80192dc:	bd80      	pop	{r7, pc}

080192de <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80192de:	b480      	push	{r7}
 80192e0:	b085      	sub	sp, #20
 80192e2:	af00      	add	r7, sp, #0
 80192e4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80192e6:	687b      	ldr	r3, [r7, #4]
 80192e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80192ea:	2b00      	cmp	r3, #0
 80192ec:	d006      	beq.n	80192fc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80192ee:	687b      	ldr	r3, [r7, #4]
 80192f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80192f2:	681b      	ldr	r3, [r3, #0]
 80192f4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80192f8:	60fb      	str	r3, [r7, #12]
 80192fa:	e001      	b.n	8019300 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80192fc:	2300      	movs	r3, #0
 80192fe:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8019300:	68fb      	ldr	r3, [r7, #12]
	}
 8019302:	4618      	mov	r0, r3
 8019304:	3714      	adds	r7, #20
 8019306:	46bd      	mov	sp, r7
 8019308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801930c:	4770      	bx	lr

0801930e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801930e:	b580      	push	{r7, lr}
 8019310:	b086      	sub	sp, #24
 8019312:	af00      	add	r7, sp, #0
 8019314:	60f8      	str	r0, [r7, #12]
 8019316:	60b9      	str	r1, [r7, #8]
 8019318:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801931a:	2300      	movs	r3, #0
 801931c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801931e:	68fb      	ldr	r3, [r7, #12]
 8019320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019322:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8019324:	68fb      	ldr	r3, [r7, #12]
 8019326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019328:	2b00      	cmp	r3, #0
 801932a:	d10d      	bne.n	8019348 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801932c:	68fb      	ldr	r3, [r7, #12]
 801932e:	681b      	ldr	r3, [r3, #0]
 8019330:	2b00      	cmp	r3, #0
 8019332:	d14d      	bne.n	80193d0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8019334:	68fb      	ldr	r3, [r7, #12]
 8019336:	689b      	ldr	r3, [r3, #8]
 8019338:	4618      	mov	r0, r3
 801933a:	f000 ffdb 	bl	801a2f4 <xTaskPriorityDisinherit>
 801933e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8019340:	68fb      	ldr	r3, [r7, #12]
 8019342:	2200      	movs	r2, #0
 8019344:	609a      	str	r2, [r3, #8]
 8019346:	e043      	b.n	80193d0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8019348:	687b      	ldr	r3, [r7, #4]
 801934a:	2b00      	cmp	r3, #0
 801934c:	d119      	bne.n	8019382 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801934e:	68fb      	ldr	r3, [r7, #12]
 8019350:	6858      	ldr	r0, [r3, #4]
 8019352:	68fb      	ldr	r3, [r7, #12]
 8019354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019356:	461a      	mov	r2, r3
 8019358:	68b9      	ldr	r1, [r7, #8]
 801935a:	f015 f922 	bl	802e5a2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801935e:	68fb      	ldr	r3, [r7, #12]
 8019360:	685a      	ldr	r2, [r3, #4]
 8019362:	68fb      	ldr	r3, [r7, #12]
 8019364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019366:	441a      	add	r2, r3
 8019368:	68fb      	ldr	r3, [r7, #12]
 801936a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801936c:	68fb      	ldr	r3, [r7, #12]
 801936e:	685a      	ldr	r2, [r3, #4]
 8019370:	68fb      	ldr	r3, [r7, #12]
 8019372:	689b      	ldr	r3, [r3, #8]
 8019374:	429a      	cmp	r2, r3
 8019376:	d32b      	bcc.n	80193d0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8019378:	68fb      	ldr	r3, [r7, #12]
 801937a:	681a      	ldr	r2, [r3, #0]
 801937c:	68fb      	ldr	r3, [r7, #12]
 801937e:	605a      	str	r2, [r3, #4]
 8019380:	e026      	b.n	80193d0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8019382:	68fb      	ldr	r3, [r7, #12]
 8019384:	68d8      	ldr	r0, [r3, #12]
 8019386:	68fb      	ldr	r3, [r7, #12]
 8019388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801938a:	461a      	mov	r2, r3
 801938c:	68b9      	ldr	r1, [r7, #8]
 801938e:	f015 f908 	bl	802e5a2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8019392:	68fb      	ldr	r3, [r7, #12]
 8019394:	68da      	ldr	r2, [r3, #12]
 8019396:	68fb      	ldr	r3, [r7, #12]
 8019398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801939a:	425b      	negs	r3, r3
 801939c:	441a      	add	r2, r3
 801939e:	68fb      	ldr	r3, [r7, #12]
 80193a0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80193a2:	68fb      	ldr	r3, [r7, #12]
 80193a4:	68da      	ldr	r2, [r3, #12]
 80193a6:	68fb      	ldr	r3, [r7, #12]
 80193a8:	681b      	ldr	r3, [r3, #0]
 80193aa:	429a      	cmp	r2, r3
 80193ac:	d207      	bcs.n	80193be <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80193ae:	68fb      	ldr	r3, [r7, #12]
 80193b0:	689a      	ldr	r2, [r3, #8]
 80193b2:	68fb      	ldr	r3, [r7, #12]
 80193b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80193b6:	425b      	negs	r3, r3
 80193b8:	441a      	add	r2, r3
 80193ba:	68fb      	ldr	r3, [r7, #12]
 80193bc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80193be:	687b      	ldr	r3, [r7, #4]
 80193c0:	2b02      	cmp	r3, #2
 80193c2:	d105      	bne.n	80193d0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80193c4:	693b      	ldr	r3, [r7, #16]
 80193c6:	2b00      	cmp	r3, #0
 80193c8:	d002      	beq.n	80193d0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80193ca:	693b      	ldr	r3, [r7, #16]
 80193cc:	3b01      	subs	r3, #1
 80193ce:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80193d0:	693b      	ldr	r3, [r7, #16]
 80193d2:	1c5a      	adds	r2, r3, #1
 80193d4:	68fb      	ldr	r3, [r7, #12]
 80193d6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80193d8:	697b      	ldr	r3, [r7, #20]
}
 80193da:	4618      	mov	r0, r3
 80193dc:	3718      	adds	r7, #24
 80193de:	46bd      	mov	sp, r7
 80193e0:	bd80      	pop	{r7, pc}

080193e2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80193e2:	b580      	push	{r7, lr}
 80193e4:	b082      	sub	sp, #8
 80193e6:	af00      	add	r7, sp, #0
 80193e8:	6078      	str	r0, [r7, #4]
 80193ea:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80193ec:	687b      	ldr	r3, [r7, #4]
 80193ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80193f0:	2b00      	cmp	r3, #0
 80193f2:	d018      	beq.n	8019426 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80193f4:	687b      	ldr	r3, [r7, #4]
 80193f6:	68da      	ldr	r2, [r3, #12]
 80193f8:	687b      	ldr	r3, [r7, #4]
 80193fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80193fc:	441a      	add	r2, r3
 80193fe:	687b      	ldr	r3, [r7, #4]
 8019400:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8019402:	687b      	ldr	r3, [r7, #4]
 8019404:	68da      	ldr	r2, [r3, #12]
 8019406:	687b      	ldr	r3, [r7, #4]
 8019408:	689b      	ldr	r3, [r3, #8]
 801940a:	429a      	cmp	r2, r3
 801940c:	d303      	bcc.n	8019416 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801940e:	687b      	ldr	r3, [r7, #4]
 8019410:	681a      	ldr	r2, [r3, #0]
 8019412:	687b      	ldr	r3, [r7, #4]
 8019414:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8019416:	687b      	ldr	r3, [r7, #4]
 8019418:	68d9      	ldr	r1, [r3, #12]
 801941a:	687b      	ldr	r3, [r7, #4]
 801941c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801941e:	461a      	mov	r2, r3
 8019420:	6838      	ldr	r0, [r7, #0]
 8019422:	f015 f8be 	bl	802e5a2 <memcpy>
	}
}
 8019426:	bf00      	nop
 8019428:	3708      	adds	r7, #8
 801942a:	46bd      	mov	sp, r7
 801942c:	bd80      	pop	{r7, pc}

0801942e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801942e:	b580      	push	{r7, lr}
 8019430:	b084      	sub	sp, #16
 8019432:	af00      	add	r7, sp, #0
 8019434:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8019436:	f7fe fff9 	bl	801842c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801943a:	687b      	ldr	r3, [r7, #4]
 801943c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019440:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8019442:	e011      	b.n	8019468 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019444:	687b      	ldr	r3, [r7, #4]
 8019446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019448:	2b00      	cmp	r3, #0
 801944a:	d012      	beq.n	8019472 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801944c:	687b      	ldr	r3, [r7, #4]
 801944e:	3324      	adds	r3, #36	; 0x24
 8019450:	4618      	mov	r0, r3
 8019452:	f000 fd13 	bl	8019e7c <xTaskRemoveFromEventList>
 8019456:	4603      	mov	r3, r0
 8019458:	2b00      	cmp	r3, #0
 801945a:	d001      	beq.n	8019460 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801945c:	f000 fde6 	bl	801a02c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8019460:	7bfb      	ldrb	r3, [r7, #15]
 8019462:	3b01      	subs	r3, #1
 8019464:	b2db      	uxtb	r3, r3
 8019466:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8019468:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801946c:	2b00      	cmp	r3, #0
 801946e:	dce9      	bgt.n	8019444 <prvUnlockQueue+0x16>
 8019470:	e000      	b.n	8019474 <prvUnlockQueue+0x46>
					break;
 8019472:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8019474:	687b      	ldr	r3, [r7, #4]
 8019476:	22ff      	movs	r2, #255	; 0xff
 8019478:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801947c:	f7ff f804 	bl	8018488 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8019480:	f7fe ffd4 	bl	801842c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801948a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801948c:	e011      	b.n	80194b2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801948e:	687b      	ldr	r3, [r7, #4]
 8019490:	691b      	ldr	r3, [r3, #16]
 8019492:	2b00      	cmp	r3, #0
 8019494:	d012      	beq.n	80194bc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019496:	687b      	ldr	r3, [r7, #4]
 8019498:	3310      	adds	r3, #16
 801949a:	4618      	mov	r0, r3
 801949c:	f000 fcee 	bl	8019e7c <xTaskRemoveFromEventList>
 80194a0:	4603      	mov	r3, r0
 80194a2:	2b00      	cmp	r3, #0
 80194a4:	d001      	beq.n	80194aa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80194a6:	f000 fdc1 	bl	801a02c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80194aa:	7bbb      	ldrb	r3, [r7, #14]
 80194ac:	3b01      	subs	r3, #1
 80194ae:	b2db      	uxtb	r3, r3
 80194b0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80194b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80194b6:	2b00      	cmp	r3, #0
 80194b8:	dce9      	bgt.n	801948e <prvUnlockQueue+0x60>
 80194ba:	e000      	b.n	80194be <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80194bc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80194be:	687b      	ldr	r3, [r7, #4]
 80194c0:	22ff      	movs	r2, #255	; 0xff
 80194c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80194c6:	f7fe ffdf 	bl	8018488 <vPortExitCritical>
}
 80194ca:	bf00      	nop
 80194cc:	3710      	adds	r7, #16
 80194ce:	46bd      	mov	sp, r7
 80194d0:	bd80      	pop	{r7, pc}

080194d2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80194d2:	b580      	push	{r7, lr}
 80194d4:	b084      	sub	sp, #16
 80194d6:	af00      	add	r7, sp, #0
 80194d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80194da:	f7fe ffa7 	bl	801842c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80194de:	687b      	ldr	r3, [r7, #4]
 80194e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80194e2:	2b00      	cmp	r3, #0
 80194e4:	d102      	bne.n	80194ec <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80194e6:	2301      	movs	r3, #1
 80194e8:	60fb      	str	r3, [r7, #12]
 80194ea:	e001      	b.n	80194f0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80194ec:	2300      	movs	r3, #0
 80194ee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80194f0:	f7fe ffca 	bl	8018488 <vPortExitCritical>

	return xReturn;
 80194f4:	68fb      	ldr	r3, [r7, #12]
}
 80194f6:	4618      	mov	r0, r3
 80194f8:	3710      	adds	r7, #16
 80194fa:	46bd      	mov	sp, r7
 80194fc:	bd80      	pop	{r7, pc}

080194fe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80194fe:	b580      	push	{r7, lr}
 8019500:	b084      	sub	sp, #16
 8019502:	af00      	add	r7, sp, #0
 8019504:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8019506:	f7fe ff91 	bl	801842c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801950a:	687b      	ldr	r3, [r7, #4]
 801950c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801950e:	687b      	ldr	r3, [r7, #4]
 8019510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019512:	429a      	cmp	r2, r3
 8019514:	d102      	bne.n	801951c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8019516:	2301      	movs	r3, #1
 8019518:	60fb      	str	r3, [r7, #12]
 801951a:	e001      	b.n	8019520 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801951c:	2300      	movs	r3, #0
 801951e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8019520:	f7fe ffb2 	bl	8018488 <vPortExitCritical>

	return xReturn;
 8019524:	68fb      	ldr	r3, [r7, #12]
}
 8019526:	4618      	mov	r0, r3
 8019528:	3710      	adds	r7, #16
 801952a:	46bd      	mov	sp, r7
 801952c:	bd80      	pop	{r7, pc}
	...

08019530 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8019530:	b480      	push	{r7}
 8019532:	b085      	sub	sp, #20
 8019534:	af00      	add	r7, sp, #0
 8019536:	6078      	str	r0, [r7, #4]
 8019538:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801953a:	2300      	movs	r3, #0
 801953c:	60fb      	str	r3, [r7, #12]
 801953e:	e014      	b.n	801956a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8019540:	4a0e      	ldr	r2, [pc, #56]	; (801957c <vQueueAddToRegistry+0x4c>)
 8019542:	68fb      	ldr	r3, [r7, #12]
 8019544:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8019548:	2b00      	cmp	r3, #0
 801954a:	d10b      	bne.n	8019564 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801954c:	490b      	ldr	r1, [pc, #44]	; (801957c <vQueueAddToRegistry+0x4c>)
 801954e:	68fb      	ldr	r3, [r7, #12]
 8019550:	683a      	ldr	r2, [r7, #0]
 8019552:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8019556:	4a09      	ldr	r2, [pc, #36]	; (801957c <vQueueAddToRegistry+0x4c>)
 8019558:	68fb      	ldr	r3, [r7, #12]
 801955a:	00db      	lsls	r3, r3, #3
 801955c:	4413      	add	r3, r2
 801955e:	687a      	ldr	r2, [r7, #4]
 8019560:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8019562:	e005      	b.n	8019570 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8019564:	68fb      	ldr	r3, [r7, #12]
 8019566:	3301      	adds	r3, #1
 8019568:	60fb      	str	r3, [r7, #12]
 801956a:	68fb      	ldr	r3, [r7, #12]
 801956c:	2b07      	cmp	r3, #7
 801956e:	d9e7      	bls.n	8019540 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8019570:	bf00      	nop
 8019572:	3714      	adds	r7, #20
 8019574:	46bd      	mov	sp, r7
 8019576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801957a:	4770      	bx	lr
 801957c:	20012fc8 	.word	0x20012fc8

08019580 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8019580:	b480      	push	{r7}
 8019582:	b085      	sub	sp, #20
 8019584:	af00      	add	r7, sp, #0
 8019586:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8019588:	2300      	movs	r3, #0
 801958a:	60fb      	str	r3, [r7, #12]
 801958c:	e016      	b.n	80195bc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801958e:	4a10      	ldr	r2, [pc, #64]	; (80195d0 <vQueueUnregisterQueue+0x50>)
 8019590:	68fb      	ldr	r3, [r7, #12]
 8019592:	00db      	lsls	r3, r3, #3
 8019594:	4413      	add	r3, r2
 8019596:	685b      	ldr	r3, [r3, #4]
 8019598:	687a      	ldr	r2, [r7, #4]
 801959a:	429a      	cmp	r2, r3
 801959c:	d10b      	bne.n	80195b6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801959e:	4a0c      	ldr	r2, [pc, #48]	; (80195d0 <vQueueUnregisterQueue+0x50>)
 80195a0:	68fb      	ldr	r3, [r7, #12]
 80195a2:	2100      	movs	r1, #0
 80195a4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80195a8:	4a09      	ldr	r2, [pc, #36]	; (80195d0 <vQueueUnregisterQueue+0x50>)
 80195aa:	68fb      	ldr	r3, [r7, #12]
 80195ac:	00db      	lsls	r3, r3, #3
 80195ae:	4413      	add	r3, r2
 80195b0:	2200      	movs	r2, #0
 80195b2:	605a      	str	r2, [r3, #4]
				break;
 80195b4:	e005      	b.n	80195c2 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80195b6:	68fb      	ldr	r3, [r7, #12]
 80195b8:	3301      	adds	r3, #1
 80195ba:	60fb      	str	r3, [r7, #12]
 80195bc:	68fb      	ldr	r3, [r7, #12]
 80195be:	2b07      	cmp	r3, #7
 80195c0:	d9e5      	bls.n	801958e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80195c2:	bf00      	nop
 80195c4:	3714      	adds	r7, #20
 80195c6:	46bd      	mov	sp, r7
 80195c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195cc:	4770      	bx	lr
 80195ce:	bf00      	nop
 80195d0:	20012fc8 	.word	0x20012fc8

080195d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80195d4:	b580      	push	{r7, lr}
 80195d6:	b086      	sub	sp, #24
 80195d8:	af00      	add	r7, sp, #0
 80195da:	60f8      	str	r0, [r7, #12]
 80195dc:	60b9      	str	r1, [r7, #8]
 80195de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80195e0:	68fb      	ldr	r3, [r7, #12]
 80195e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80195e4:	f7fe ff22 	bl	801842c <vPortEnterCritical>
 80195e8:	697b      	ldr	r3, [r7, #20]
 80195ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80195ee:	b25b      	sxtb	r3, r3
 80195f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80195f4:	d103      	bne.n	80195fe <vQueueWaitForMessageRestricted+0x2a>
 80195f6:	697b      	ldr	r3, [r7, #20]
 80195f8:	2200      	movs	r2, #0
 80195fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80195fe:	697b      	ldr	r3, [r7, #20]
 8019600:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019604:	b25b      	sxtb	r3, r3
 8019606:	f1b3 3fff 	cmp.w	r3, #4294967295
 801960a:	d103      	bne.n	8019614 <vQueueWaitForMessageRestricted+0x40>
 801960c:	697b      	ldr	r3, [r7, #20]
 801960e:	2200      	movs	r2, #0
 8019610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019614:	f7fe ff38 	bl	8018488 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8019618:	697b      	ldr	r3, [r7, #20]
 801961a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801961c:	2b00      	cmp	r3, #0
 801961e:	d106      	bne.n	801962e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8019620:	697b      	ldr	r3, [r7, #20]
 8019622:	3324      	adds	r3, #36	; 0x24
 8019624:	687a      	ldr	r2, [r7, #4]
 8019626:	68b9      	ldr	r1, [r7, #8]
 8019628:	4618      	mov	r0, r3
 801962a:	f000 fbfd 	bl	8019e28 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801962e:	6978      	ldr	r0, [r7, #20]
 8019630:	f7ff fefd 	bl	801942e <prvUnlockQueue>
	}
 8019634:	bf00      	nop
 8019636:	3718      	adds	r7, #24
 8019638:	46bd      	mov	sp, r7
 801963a:	bd80      	pop	{r7, pc}

0801963c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801963c:	b580      	push	{r7, lr}
 801963e:	b08e      	sub	sp, #56	; 0x38
 8019640:	af04      	add	r7, sp, #16
 8019642:	60f8      	str	r0, [r7, #12]
 8019644:	60b9      	str	r1, [r7, #8]
 8019646:	607a      	str	r2, [r7, #4]
 8019648:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801964a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801964c:	2b00      	cmp	r3, #0
 801964e:	d109      	bne.n	8019664 <xTaskCreateStatic+0x28>
 8019650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019654:	f383 8811 	msr	BASEPRI, r3
 8019658:	f3bf 8f6f 	isb	sy
 801965c:	f3bf 8f4f 	dsb	sy
 8019660:	623b      	str	r3, [r7, #32]
 8019662:	e7fe      	b.n	8019662 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8019664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019666:	2b00      	cmp	r3, #0
 8019668:	d109      	bne.n	801967e <xTaskCreateStatic+0x42>
 801966a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801966e:	f383 8811 	msr	BASEPRI, r3
 8019672:	f3bf 8f6f 	isb	sy
 8019676:	f3bf 8f4f 	dsb	sy
 801967a:	61fb      	str	r3, [r7, #28]
 801967c:	e7fe      	b.n	801967c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801967e:	2360      	movs	r3, #96	; 0x60
 8019680:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8019682:	693b      	ldr	r3, [r7, #16]
 8019684:	2b60      	cmp	r3, #96	; 0x60
 8019686:	d009      	beq.n	801969c <xTaskCreateStatic+0x60>
 8019688:	f04f 0350 	mov.w	r3, #80	; 0x50
 801968c:	f383 8811 	msr	BASEPRI, r3
 8019690:	f3bf 8f6f 	isb	sy
 8019694:	f3bf 8f4f 	dsb	sy
 8019698:	61bb      	str	r3, [r7, #24]
 801969a:	e7fe      	b.n	801969a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801969c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801969e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196a0:	2b00      	cmp	r3, #0
 80196a2:	d01e      	beq.n	80196e2 <xTaskCreateStatic+0xa6>
 80196a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80196a6:	2b00      	cmp	r3, #0
 80196a8:	d01b      	beq.n	80196e2 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80196aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196ac:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80196ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80196b2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80196b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196b6:	2202      	movs	r2, #2
 80196b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80196bc:	2300      	movs	r3, #0
 80196be:	9303      	str	r3, [sp, #12]
 80196c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196c2:	9302      	str	r3, [sp, #8]
 80196c4:	f107 0314 	add.w	r3, r7, #20
 80196c8:	9301      	str	r3, [sp, #4]
 80196ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196cc:	9300      	str	r3, [sp, #0]
 80196ce:	683b      	ldr	r3, [r7, #0]
 80196d0:	687a      	ldr	r2, [r7, #4]
 80196d2:	68b9      	ldr	r1, [r7, #8]
 80196d4:	68f8      	ldr	r0, [r7, #12]
 80196d6:	f000 f850 	bl	801977a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80196da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80196dc:	f000 f8de 	bl	801989c <prvAddNewTaskToReadyList>
 80196e0:	e001      	b.n	80196e6 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80196e2:	2300      	movs	r3, #0
 80196e4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80196e6:	697b      	ldr	r3, [r7, #20]
	}
 80196e8:	4618      	mov	r0, r3
 80196ea:	3728      	adds	r7, #40	; 0x28
 80196ec:	46bd      	mov	sp, r7
 80196ee:	bd80      	pop	{r7, pc}

080196f0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80196f0:	b580      	push	{r7, lr}
 80196f2:	b08c      	sub	sp, #48	; 0x30
 80196f4:	af04      	add	r7, sp, #16
 80196f6:	60f8      	str	r0, [r7, #12]
 80196f8:	60b9      	str	r1, [r7, #8]
 80196fa:	603b      	str	r3, [r7, #0]
 80196fc:	4613      	mov	r3, r2
 80196fe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8019700:	88fb      	ldrh	r3, [r7, #6]
 8019702:	009b      	lsls	r3, r3, #2
 8019704:	4618      	mov	r0, r3
 8019706:	f7fe fadd 	bl	8017cc4 <pvPortMalloc>
 801970a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801970c:	697b      	ldr	r3, [r7, #20]
 801970e:	2b00      	cmp	r3, #0
 8019710:	d00e      	beq.n	8019730 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8019712:	2060      	movs	r0, #96	; 0x60
 8019714:	f7fe fad6 	bl	8017cc4 <pvPortMalloc>
 8019718:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801971a:	69fb      	ldr	r3, [r7, #28]
 801971c:	2b00      	cmp	r3, #0
 801971e:	d003      	beq.n	8019728 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8019720:	69fb      	ldr	r3, [r7, #28]
 8019722:	697a      	ldr	r2, [r7, #20]
 8019724:	631a      	str	r2, [r3, #48]	; 0x30
 8019726:	e005      	b.n	8019734 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8019728:	6978      	ldr	r0, [r7, #20]
 801972a:	f7fe fb8d 	bl	8017e48 <vPortFree>
 801972e:	e001      	b.n	8019734 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8019730:	2300      	movs	r3, #0
 8019732:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8019734:	69fb      	ldr	r3, [r7, #28]
 8019736:	2b00      	cmp	r3, #0
 8019738:	d017      	beq.n	801976a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801973a:	69fb      	ldr	r3, [r7, #28]
 801973c:	2200      	movs	r2, #0
 801973e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8019742:	88fa      	ldrh	r2, [r7, #6]
 8019744:	2300      	movs	r3, #0
 8019746:	9303      	str	r3, [sp, #12]
 8019748:	69fb      	ldr	r3, [r7, #28]
 801974a:	9302      	str	r3, [sp, #8]
 801974c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801974e:	9301      	str	r3, [sp, #4]
 8019750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019752:	9300      	str	r3, [sp, #0]
 8019754:	683b      	ldr	r3, [r7, #0]
 8019756:	68b9      	ldr	r1, [r7, #8]
 8019758:	68f8      	ldr	r0, [r7, #12]
 801975a:	f000 f80e 	bl	801977a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801975e:	69f8      	ldr	r0, [r7, #28]
 8019760:	f000 f89c 	bl	801989c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8019764:	2301      	movs	r3, #1
 8019766:	61bb      	str	r3, [r7, #24]
 8019768:	e002      	b.n	8019770 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801976a:	f04f 33ff 	mov.w	r3, #4294967295
 801976e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8019770:	69bb      	ldr	r3, [r7, #24]
	}
 8019772:	4618      	mov	r0, r3
 8019774:	3720      	adds	r7, #32
 8019776:	46bd      	mov	sp, r7
 8019778:	bd80      	pop	{r7, pc}

0801977a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801977a:	b580      	push	{r7, lr}
 801977c:	b088      	sub	sp, #32
 801977e:	af00      	add	r7, sp, #0
 8019780:	60f8      	str	r0, [r7, #12]
 8019782:	60b9      	str	r1, [r7, #8]
 8019784:	607a      	str	r2, [r7, #4]
 8019786:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8019788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801978a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801978c:	687b      	ldr	r3, [r7, #4]
 801978e:	009b      	lsls	r3, r3, #2
 8019790:	461a      	mov	r2, r3
 8019792:	21a5      	movs	r1, #165	; 0xa5
 8019794:	f014 ff10 	bl	802e5b8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8019798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801979a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801979c:	687b      	ldr	r3, [r7, #4]
 801979e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80197a2:	3b01      	subs	r3, #1
 80197a4:	009b      	lsls	r3, r3, #2
 80197a6:	4413      	add	r3, r2
 80197a8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80197aa:	69bb      	ldr	r3, [r7, #24]
 80197ac:	f023 0307 	bic.w	r3, r3, #7
 80197b0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80197b2:	69bb      	ldr	r3, [r7, #24]
 80197b4:	f003 0307 	and.w	r3, r3, #7
 80197b8:	2b00      	cmp	r3, #0
 80197ba:	d009      	beq.n	80197d0 <prvInitialiseNewTask+0x56>
 80197bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80197c0:	f383 8811 	msr	BASEPRI, r3
 80197c4:	f3bf 8f6f 	isb	sy
 80197c8:	f3bf 8f4f 	dsb	sy
 80197cc:	617b      	str	r3, [r7, #20]
 80197ce:	e7fe      	b.n	80197ce <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80197d0:	68bb      	ldr	r3, [r7, #8]
 80197d2:	2b00      	cmp	r3, #0
 80197d4:	d01f      	beq.n	8019816 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80197d6:	2300      	movs	r3, #0
 80197d8:	61fb      	str	r3, [r7, #28]
 80197da:	e012      	b.n	8019802 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80197dc:	68ba      	ldr	r2, [r7, #8]
 80197de:	69fb      	ldr	r3, [r7, #28]
 80197e0:	4413      	add	r3, r2
 80197e2:	7819      	ldrb	r1, [r3, #0]
 80197e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80197e6:	69fb      	ldr	r3, [r7, #28]
 80197e8:	4413      	add	r3, r2
 80197ea:	3334      	adds	r3, #52	; 0x34
 80197ec:	460a      	mov	r2, r1
 80197ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80197f0:	68ba      	ldr	r2, [r7, #8]
 80197f2:	69fb      	ldr	r3, [r7, #28]
 80197f4:	4413      	add	r3, r2
 80197f6:	781b      	ldrb	r3, [r3, #0]
 80197f8:	2b00      	cmp	r3, #0
 80197fa:	d006      	beq.n	801980a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80197fc:	69fb      	ldr	r3, [r7, #28]
 80197fe:	3301      	adds	r3, #1
 8019800:	61fb      	str	r3, [r7, #28]
 8019802:	69fb      	ldr	r3, [r7, #28]
 8019804:	2b0f      	cmp	r3, #15
 8019806:	d9e9      	bls.n	80197dc <prvInitialiseNewTask+0x62>
 8019808:	e000      	b.n	801980c <prvInitialiseNewTask+0x92>
			{
				break;
 801980a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801980c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801980e:	2200      	movs	r2, #0
 8019810:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8019814:	e003      	b.n	801981e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8019816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019818:	2200      	movs	r2, #0
 801981a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801981e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019820:	2b37      	cmp	r3, #55	; 0x37
 8019822:	d901      	bls.n	8019828 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8019824:	2337      	movs	r3, #55	; 0x37
 8019826:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8019828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801982a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801982c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801982e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019830:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019832:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8019834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019836:	2200      	movs	r2, #0
 8019838:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801983a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801983c:	3304      	adds	r3, #4
 801983e:	4618      	mov	r0, r3
 8019840:	f7fe fc36 	bl	80180b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8019844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019846:	3318      	adds	r3, #24
 8019848:	4618      	mov	r0, r3
 801984a:	f7fe fc31 	bl	80180b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801984e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019852:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019856:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801985a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801985c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801985e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019860:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019862:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8019864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019866:	2200      	movs	r2, #0
 8019868:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801986a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801986c:	2200      	movs	r2, #0
 801986e:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8019870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019872:	2200      	movs	r2, #0
 8019874:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8019878:	683a      	ldr	r2, [r7, #0]
 801987a:	68f9      	ldr	r1, [r7, #12]
 801987c:	69b8      	ldr	r0, [r7, #24]
 801987e:	f7fe fcab 	bl	80181d8 <pxPortInitialiseStack>
 8019882:	4602      	mov	r2, r0
 8019884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019886:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8019888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801988a:	2b00      	cmp	r3, #0
 801988c:	d002      	beq.n	8019894 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801988e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019892:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019894:	bf00      	nop
 8019896:	3720      	adds	r7, #32
 8019898:	46bd      	mov	sp, r7
 801989a:	bd80      	pop	{r7, pc}

0801989c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801989c:	b580      	push	{r7, lr}
 801989e:	b082      	sub	sp, #8
 80198a0:	af00      	add	r7, sp, #0
 80198a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80198a4:	f7fe fdc2 	bl	801842c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80198a8:	4b2d      	ldr	r3, [pc, #180]	; (8019960 <prvAddNewTaskToReadyList+0xc4>)
 80198aa:	681b      	ldr	r3, [r3, #0]
 80198ac:	3301      	adds	r3, #1
 80198ae:	4a2c      	ldr	r2, [pc, #176]	; (8019960 <prvAddNewTaskToReadyList+0xc4>)
 80198b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80198b2:	4b2c      	ldr	r3, [pc, #176]	; (8019964 <prvAddNewTaskToReadyList+0xc8>)
 80198b4:	681b      	ldr	r3, [r3, #0]
 80198b6:	2b00      	cmp	r3, #0
 80198b8:	d109      	bne.n	80198ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80198ba:	4a2a      	ldr	r2, [pc, #168]	; (8019964 <prvAddNewTaskToReadyList+0xc8>)
 80198bc:	687b      	ldr	r3, [r7, #4]
 80198be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80198c0:	4b27      	ldr	r3, [pc, #156]	; (8019960 <prvAddNewTaskToReadyList+0xc4>)
 80198c2:	681b      	ldr	r3, [r3, #0]
 80198c4:	2b01      	cmp	r3, #1
 80198c6:	d110      	bne.n	80198ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80198c8:	f000 fbd4 	bl	801a074 <prvInitialiseTaskLists>
 80198cc:	e00d      	b.n	80198ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80198ce:	4b26      	ldr	r3, [pc, #152]	; (8019968 <prvAddNewTaskToReadyList+0xcc>)
 80198d0:	681b      	ldr	r3, [r3, #0]
 80198d2:	2b00      	cmp	r3, #0
 80198d4:	d109      	bne.n	80198ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80198d6:	4b23      	ldr	r3, [pc, #140]	; (8019964 <prvAddNewTaskToReadyList+0xc8>)
 80198d8:	681b      	ldr	r3, [r3, #0]
 80198da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80198dc:	687b      	ldr	r3, [r7, #4]
 80198de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80198e0:	429a      	cmp	r2, r3
 80198e2:	d802      	bhi.n	80198ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80198e4:	4a1f      	ldr	r2, [pc, #124]	; (8019964 <prvAddNewTaskToReadyList+0xc8>)
 80198e6:	687b      	ldr	r3, [r7, #4]
 80198e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80198ea:	4b20      	ldr	r3, [pc, #128]	; (801996c <prvAddNewTaskToReadyList+0xd0>)
 80198ec:	681b      	ldr	r3, [r3, #0]
 80198ee:	3301      	adds	r3, #1
 80198f0:	4a1e      	ldr	r2, [pc, #120]	; (801996c <prvAddNewTaskToReadyList+0xd0>)
 80198f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80198f4:	4b1d      	ldr	r3, [pc, #116]	; (801996c <prvAddNewTaskToReadyList+0xd0>)
 80198f6:	681a      	ldr	r2, [r3, #0]
 80198f8:	687b      	ldr	r3, [r7, #4]
 80198fa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80198fc:	687b      	ldr	r3, [r7, #4]
 80198fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019900:	4b1b      	ldr	r3, [pc, #108]	; (8019970 <prvAddNewTaskToReadyList+0xd4>)
 8019902:	681b      	ldr	r3, [r3, #0]
 8019904:	429a      	cmp	r2, r3
 8019906:	d903      	bls.n	8019910 <prvAddNewTaskToReadyList+0x74>
 8019908:	687b      	ldr	r3, [r7, #4]
 801990a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801990c:	4a18      	ldr	r2, [pc, #96]	; (8019970 <prvAddNewTaskToReadyList+0xd4>)
 801990e:	6013      	str	r3, [r2, #0]
 8019910:	687b      	ldr	r3, [r7, #4]
 8019912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019914:	4613      	mov	r3, r2
 8019916:	009b      	lsls	r3, r3, #2
 8019918:	4413      	add	r3, r2
 801991a:	009b      	lsls	r3, r3, #2
 801991c:	4a15      	ldr	r2, [pc, #84]	; (8019974 <prvAddNewTaskToReadyList+0xd8>)
 801991e:	441a      	add	r2, r3
 8019920:	687b      	ldr	r3, [r7, #4]
 8019922:	3304      	adds	r3, #4
 8019924:	4619      	mov	r1, r3
 8019926:	4610      	mov	r0, r2
 8019928:	f7fe fbcf 	bl	80180ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801992c:	f7fe fdac 	bl	8018488 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8019930:	4b0d      	ldr	r3, [pc, #52]	; (8019968 <prvAddNewTaskToReadyList+0xcc>)
 8019932:	681b      	ldr	r3, [r3, #0]
 8019934:	2b00      	cmp	r3, #0
 8019936:	d00e      	beq.n	8019956 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8019938:	4b0a      	ldr	r3, [pc, #40]	; (8019964 <prvAddNewTaskToReadyList+0xc8>)
 801993a:	681b      	ldr	r3, [r3, #0]
 801993c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801993e:	687b      	ldr	r3, [r7, #4]
 8019940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019942:	429a      	cmp	r2, r3
 8019944:	d207      	bcs.n	8019956 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8019946:	4b0c      	ldr	r3, [pc, #48]	; (8019978 <prvAddNewTaskToReadyList+0xdc>)
 8019948:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801994c:	601a      	str	r2, [r3, #0]
 801994e:	f3bf 8f4f 	dsb	sy
 8019952:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019956:	bf00      	nop
 8019958:	3708      	adds	r7, #8
 801995a:	46bd      	mov	sp, r7
 801995c:	bd80      	pop	{r7, pc}
 801995e:	bf00      	nop
 8019960:	20012690 	.word	0x20012690
 8019964:	200121bc 	.word	0x200121bc
 8019968:	2001269c 	.word	0x2001269c
 801996c:	200126ac 	.word	0x200126ac
 8019970:	20012698 	.word	0x20012698
 8019974:	200121c0 	.word	0x200121c0
 8019978:	e000ed04 	.word	0xe000ed04

0801997c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801997c:	b580      	push	{r7, lr}
 801997e:	b08a      	sub	sp, #40	; 0x28
 8019980:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8019982:	2300      	movs	r3, #0
 8019984:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8019986:	2300      	movs	r3, #0
 8019988:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801998a:	463a      	mov	r2, r7
 801998c:	1d39      	adds	r1, r7, #4
 801998e:	f107 0308 	add.w	r3, r7, #8
 8019992:	4618      	mov	r0, r3
 8019994:	f7fe f962 	bl	8017c5c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8019998:	6839      	ldr	r1, [r7, #0]
 801999a:	687b      	ldr	r3, [r7, #4]
 801999c:	68ba      	ldr	r2, [r7, #8]
 801999e:	9202      	str	r2, [sp, #8]
 80199a0:	9301      	str	r3, [sp, #4]
 80199a2:	2300      	movs	r3, #0
 80199a4:	9300      	str	r3, [sp, #0]
 80199a6:	2300      	movs	r3, #0
 80199a8:	460a      	mov	r2, r1
 80199aa:	4920      	ldr	r1, [pc, #128]	; (8019a2c <vTaskStartScheduler+0xb0>)
 80199ac:	4820      	ldr	r0, [pc, #128]	; (8019a30 <vTaskStartScheduler+0xb4>)
 80199ae:	f7ff fe45 	bl	801963c <xTaskCreateStatic>
 80199b2:	4602      	mov	r2, r0
 80199b4:	4b1f      	ldr	r3, [pc, #124]	; (8019a34 <vTaskStartScheduler+0xb8>)
 80199b6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80199b8:	4b1e      	ldr	r3, [pc, #120]	; (8019a34 <vTaskStartScheduler+0xb8>)
 80199ba:	681b      	ldr	r3, [r3, #0]
 80199bc:	2b00      	cmp	r3, #0
 80199be:	d002      	beq.n	80199c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80199c0:	2301      	movs	r3, #1
 80199c2:	617b      	str	r3, [r7, #20]
 80199c4:	e001      	b.n	80199ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80199c6:	2300      	movs	r3, #0
 80199c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80199ca:	697b      	ldr	r3, [r7, #20]
 80199cc:	2b01      	cmp	r3, #1
 80199ce:	d102      	bne.n	80199d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80199d0:	f000 fde4 	bl	801a59c <xTimerCreateTimerTask>
 80199d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80199d6:	697b      	ldr	r3, [r7, #20]
 80199d8:	2b01      	cmp	r3, #1
 80199da:	d115      	bne.n	8019a08 <vTaskStartScheduler+0x8c>
 80199dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80199e0:	f383 8811 	msr	BASEPRI, r3
 80199e4:	f3bf 8f6f 	isb	sy
 80199e8:	f3bf 8f4f 	dsb	sy
 80199ec:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80199ee:	4b12      	ldr	r3, [pc, #72]	; (8019a38 <vTaskStartScheduler+0xbc>)
 80199f0:	f04f 32ff 	mov.w	r2, #4294967295
 80199f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80199f6:	4b11      	ldr	r3, [pc, #68]	; (8019a3c <vTaskStartScheduler+0xc0>)
 80199f8:	2201      	movs	r2, #1
 80199fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80199fc:	4b10      	ldr	r3, [pc, #64]	; (8019a40 <vTaskStartScheduler+0xc4>)
 80199fe:	2200      	movs	r2, #0
 8019a00:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8019a02:	f7fe fc75 	bl	80182f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8019a06:	e00d      	b.n	8019a24 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8019a08:	697b      	ldr	r3, [r7, #20]
 8019a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019a0e:	d109      	bne.n	8019a24 <vTaskStartScheduler+0xa8>
 8019a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a14:	f383 8811 	msr	BASEPRI, r3
 8019a18:	f3bf 8f6f 	isb	sy
 8019a1c:	f3bf 8f4f 	dsb	sy
 8019a20:	60fb      	str	r3, [r7, #12]
 8019a22:	e7fe      	b.n	8019a22 <vTaskStartScheduler+0xa6>
}
 8019a24:	bf00      	nop
 8019a26:	3718      	adds	r7, #24
 8019a28:	46bd      	mov	sp, r7
 8019a2a:	bd80      	pop	{r7, pc}
 8019a2c:	08030198 	.word	0x08030198
 8019a30:	0801a045 	.word	0x0801a045
 8019a34:	200126b4 	.word	0x200126b4
 8019a38:	200126b0 	.word	0x200126b0
 8019a3c:	2001269c 	.word	0x2001269c
 8019a40:	20012694 	.word	0x20012694

08019a44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8019a44:	b480      	push	{r7}
 8019a46:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8019a48:	4b04      	ldr	r3, [pc, #16]	; (8019a5c <vTaskSuspendAll+0x18>)
 8019a4a:	681b      	ldr	r3, [r3, #0]
 8019a4c:	3301      	adds	r3, #1
 8019a4e:	4a03      	ldr	r2, [pc, #12]	; (8019a5c <vTaskSuspendAll+0x18>)
 8019a50:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8019a52:	bf00      	nop
 8019a54:	46bd      	mov	sp, r7
 8019a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a5a:	4770      	bx	lr
 8019a5c:	200126b8 	.word	0x200126b8

08019a60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8019a60:	b580      	push	{r7, lr}
 8019a62:	b084      	sub	sp, #16
 8019a64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8019a66:	2300      	movs	r3, #0
 8019a68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8019a6a:	2300      	movs	r3, #0
 8019a6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8019a6e:	4b41      	ldr	r3, [pc, #260]	; (8019b74 <xTaskResumeAll+0x114>)
 8019a70:	681b      	ldr	r3, [r3, #0]
 8019a72:	2b00      	cmp	r3, #0
 8019a74:	d109      	bne.n	8019a8a <xTaskResumeAll+0x2a>
 8019a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a7a:	f383 8811 	msr	BASEPRI, r3
 8019a7e:	f3bf 8f6f 	isb	sy
 8019a82:	f3bf 8f4f 	dsb	sy
 8019a86:	603b      	str	r3, [r7, #0]
 8019a88:	e7fe      	b.n	8019a88 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8019a8a:	f7fe fccf 	bl	801842c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8019a8e:	4b39      	ldr	r3, [pc, #228]	; (8019b74 <xTaskResumeAll+0x114>)
 8019a90:	681b      	ldr	r3, [r3, #0]
 8019a92:	3b01      	subs	r3, #1
 8019a94:	4a37      	ldr	r2, [pc, #220]	; (8019b74 <xTaskResumeAll+0x114>)
 8019a96:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019a98:	4b36      	ldr	r3, [pc, #216]	; (8019b74 <xTaskResumeAll+0x114>)
 8019a9a:	681b      	ldr	r3, [r3, #0]
 8019a9c:	2b00      	cmp	r3, #0
 8019a9e:	d162      	bne.n	8019b66 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8019aa0:	4b35      	ldr	r3, [pc, #212]	; (8019b78 <xTaskResumeAll+0x118>)
 8019aa2:	681b      	ldr	r3, [r3, #0]
 8019aa4:	2b00      	cmp	r3, #0
 8019aa6:	d05e      	beq.n	8019b66 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8019aa8:	e02f      	b.n	8019b0a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019aaa:	4b34      	ldr	r3, [pc, #208]	; (8019b7c <xTaskResumeAll+0x11c>)
 8019aac:	68db      	ldr	r3, [r3, #12]
 8019aae:	68db      	ldr	r3, [r3, #12]
 8019ab0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8019ab2:	68fb      	ldr	r3, [r7, #12]
 8019ab4:	3318      	adds	r3, #24
 8019ab6:	4618      	mov	r0, r3
 8019ab8:	f7fe fb64 	bl	8018184 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019abc:	68fb      	ldr	r3, [r7, #12]
 8019abe:	3304      	adds	r3, #4
 8019ac0:	4618      	mov	r0, r3
 8019ac2:	f7fe fb5f 	bl	8018184 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8019ac6:	68fb      	ldr	r3, [r7, #12]
 8019ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019aca:	4b2d      	ldr	r3, [pc, #180]	; (8019b80 <xTaskResumeAll+0x120>)
 8019acc:	681b      	ldr	r3, [r3, #0]
 8019ace:	429a      	cmp	r2, r3
 8019ad0:	d903      	bls.n	8019ada <xTaskResumeAll+0x7a>
 8019ad2:	68fb      	ldr	r3, [r7, #12]
 8019ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019ad6:	4a2a      	ldr	r2, [pc, #168]	; (8019b80 <xTaskResumeAll+0x120>)
 8019ad8:	6013      	str	r3, [r2, #0]
 8019ada:	68fb      	ldr	r3, [r7, #12]
 8019adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019ade:	4613      	mov	r3, r2
 8019ae0:	009b      	lsls	r3, r3, #2
 8019ae2:	4413      	add	r3, r2
 8019ae4:	009b      	lsls	r3, r3, #2
 8019ae6:	4a27      	ldr	r2, [pc, #156]	; (8019b84 <xTaskResumeAll+0x124>)
 8019ae8:	441a      	add	r2, r3
 8019aea:	68fb      	ldr	r3, [r7, #12]
 8019aec:	3304      	adds	r3, #4
 8019aee:	4619      	mov	r1, r3
 8019af0:	4610      	mov	r0, r2
 8019af2:	f7fe faea 	bl	80180ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8019af6:	68fb      	ldr	r3, [r7, #12]
 8019af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019afa:	4b23      	ldr	r3, [pc, #140]	; (8019b88 <xTaskResumeAll+0x128>)
 8019afc:	681b      	ldr	r3, [r3, #0]
 8019afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019b00:	429a      	cmp	r2, r3
 8019b02:	d302      	bcc.n	8019b0a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8019b04:	4b21      	ldr	r3, [pc, #132]	; (8019b8c <xTaskResumeAll+0x12c>)
 8019b06:	2201      	movs	r2, #1
 8019b08:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8019b0a:	4b1c      	ldr	r3, [pc, #112]	; (8019b7c <xTaskResumeAll+0x11c>)
 8019b0c:	681b      	ldr	r3, [r3, #0]
 8019b0e:	2b00      	cmp	r3, #0
 8019b10:	d1cb      	bne.n	8019aaa <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8019b12:	68fb      	ldr	r3, [r7, #12]
 8019b14:	2b00      	cmp	r3, #0
 8019b16:	d001      	beq.n	8019b1c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8019b18:	f000 fb46 	bl	801a1a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8019b1c:	4b1c      	ldr	r3, [pc, #112]	; (8019b90 <xTaskResumeAll+0x130>)
 8019b1e:	681b      	ldr	r3, [r3, #0]
 8019b20:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8019b22:	687b      	ldr	r3, [r7, #4]
 8019b24:	2b00      	cmp	r3, #0
 8019b26:	d010      	beq.n	8019b4a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8019b28:	f000 f846 	bl	8019bb8 <xTaskIncrementTick>
 8019b2c:	4603      	mov	r3, r0
 8019b2e:	2b00      	cmp	r3, #0
 8019b30:	d002      	beq.n	8019b38 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8019b32:	4b16      	ldr	r3, [pc, #88]	; (8019b8c <xTaskResumeAll+0x12c>)
 8019b34:	2201      	movs	r2, #1
 8019b36:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8019b38:	687b      	ldr	r3, [r7, #4]
 8019b3a:	3b01      	subs	r3, #1
 8019b3c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8019b3e:	687b      	ldr	r3, [r7, #4]
 8019b40:	2b00      	cmp	r3, #0
 8019b42:	d1f1      	bne.n	8019b28 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8019b44:	4b12      	ldr	r3, [pc, #72]	; (8019b90 <xTaskResumeAll+0x130>)
 8019b46:	2200      	movs	r2, #0
 8019b48:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8019b4a:	4b10      	ldr	r3, [pc, #64]	; (8019b8c <xTaskResumeAll+0x12c>)
 8019b4c:	681b      	ldr	r3, [r3, #0]
 8019b4e:	2b00      	cmp	r3, #0
 8019b50:	d009      	beq.n	8019b66 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8019b52:	2301      	movs	r3, #1
 8019b54:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8019b56:	4b0f      	ldr	r3, [pc, #60]	; (8019b94 <xTaskResumeAll+0x134>)
 8019b58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019b5c:	601a      	str	r2, [r3, #0]
 8019b5e:	f3bf 8f4f 	dsb	sy
 8019b62:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8019b66:	f7fe fc8f 	bl	8018488 <vPortExitCritical>

	return xAlreadyYielded;
 8019b6a:	68bb      	ldr	r3, [r7, #8]
}
 8019b6c:	4618      	mov	r0, r3
 8019b6e:	3710      	adds	r7, #16
 8019b70:	46bd      	mov	sp, r7
 8019b72:	bd80      	pop	{r7, pc}
 8019b74:	200126b8 	.word	0x200126b8
 8019b78:	20012690 	.word	0x20012690
 8019b7c:	20012650 	.word	0x20012650
 8019b80:	20012698 	.word	0x20012698
 8019b84:	200121c0 	.word	0x200121c0
 8019b88:	200121bc 	.word	0x200121bc
 8019b8c:	200126a4 	.word	0x200126a4
 8019b90:	200126a0 	.word	0x200126a0
 8019b94:	e000ed04 	.word	0xe000ed04

08019b98 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8019b98:	b480      	push	{r7}
 8019b9a:	b083      	sub	sp, #12
 8019b9c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8019b9e:	4b05      	ldr	r3, [pc, #20]	; (8019bb4 <xTaskGetTickCount+0x1c>)
 8019ba0:	681b      	ldr	r3, [r3, #0]
 8019ba2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8019ba4:	687b      	ldr	r3, [r7, #4]
}
 8019ba6:	4618      	mov	r0, r3
 8019ba8:	370c      	adds	r7, #12
 8019baa:	46bd      	mov	sp, r7
 8019bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bb0:	4770      	bx	lr
 8019bb2:	bf00      	nop
 8019bb4:	20012694 	.word	0x20012694

08019bb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8019bb8:	b580      	push	{r7, lr}
 8019bba:	b086      	sub	sp, #24
 8019bbc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8019bbe:	2300      	movs	r3, #0
 8019bc0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019bc2:	4b4e      	ldr	r3, [pc, #312]	; (8019cfc <xTaskIncrementTick+0x144>)
 8019bc4:	681b      	ldr	r3, [r3, #0]
 8019bc6:	2b00      	cmp	r3, #0
 8019bc8:	f040 8088 	bne.w	8019cdc <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8019bcc:	4b4c      	ldr	r3, [pc, #304]	; (8019d00 <xTaskIncrementTick+0x148>)
 8019bce:	681b      	ldr	r3, [r3, #0]
 8019bd0:	3301      	adds	r3, #1
 8019bd2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8019bd4:	4a4a      	ldr	r2, [pc, #296]	; (8019d00 <xTaskIncrementTick+0x148>)
 8019bd6:	693b      	ldr	r3, [r7, #16]
 8019bd8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8019bda:	693b      	ldr	r3, [r7, #16]
 8019bdc:	2b00      	cmp	r3, #0
 8019bde:	d11f      	bne.n	8019c20 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8019be0:	4b48      	ldr	r3, [pc, #288]	; (8019d04 <xTaskIncrementTick+0x14c>)
 8019be2:	681b      	ldr	r3, [r3, #0]
 8019be4:	681b      	ldr	r3, [r3, #0]
 8019be6:	2b00      	cmp	r3, #0
 8019be8:	d009      	beq.n	8019bfe <xTaskIncrementTick+0x46>
 8019bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019bee:	f383 8811 	msr	BASEPRI, r3
 8019bf2:	f3bf 8f6f 	isb	sy
 8019bf6:	f3bf 8f4f 	dsb	sy
 8019bfa:	603b      	str	r3, [r7, #0]
 8019bfc:	e7fe      	b.n	8019bfc <xTaskIncrementTick+0x44>
 8019bfe:	4b41      	ldr	r3, [pc, #260]	; (8019d04 <xTaskIncrementTick+0x14c>)
 8019c00:	681b      	ldr	r3, [r3, #0]
 8019c02:	60fb      	str	r3, [r7, #12]
 8019c04:	4b40      	ldr	r3, [pc, #256]	; (8019d08 <xTaskIncrementTick+0x150>)
 8019c06:	681b      	ldr	r3, [r3, #0]
 8019c08:	4a3e      	ldr	r2, [pc, #248]	; (8019d04 <xTaskIncrementTick+0x14c>)
 8019c0a:	6013      	str	r3, [r2, #0]
 8019c0c:	4a3e      	ldr	r2, [pc, #248]	; (8019d08 <xTaskIncrementTick+0x150>)
 8019c0e:	68fb      	ldr	r3, [r7, #12]
 8019c10:	6013      	str	r3, [r2, #0]
 8019c12:	4b3e      	ldr	r3, [pc, #248]	; (8019d0c <xTaskIncrementTick+0x154>)
 8019c14:	681b      	ldr	r3, [r3, #0]
 8019c16:	3301      	adds	r3, #1
 8019c18:	4a3c      	ldr	r2, [pc, #240]	; (8019d0c <xTaskIncrementTick+0x154>)
 8019c1a:	6013      	str	r3, [r2, #0]
 8019c1c:	f000 fac4 	bl	801a1a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8019c20:	4b3b      	ldr	r3, [pc, #236]	; (8019d10 <xTaskIncrementTick+0x158>)
 8019c22:	681b      	ldr	r3, [r3, #0]
 8019c24:	693a      	ldr	r2, [r7, #16]
 8019c26:	429a      	cmp	r2, r3
 8019c28:	d349      	bcc.n	8019cbe <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019c2a:	4b36      	ldr	r3, [pc, #216]	; (8019d04 <xTaskIncrementTick+0x14c>)
 8019c2c:	681b      	ldr	r3, [r3, #0]
 8019c2e:	681b      	ldr	r3, [r3, #0]
 8019c30:	2b00      	cmp	r3, #0
 8019c32:	d104      	bne.n	8019c3e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019c34:	4b36      	ldr	r3, [pc, #216]	; (8019d10 <xTaskIncrementTick+0x158>)
 8019c36:	f04f 32ff 	mov.w	r2, #4294967295
 8019c3a:	601a      	str	r2, [r3, #0]
					break;
 8019c3c:	e03f      	b.n	8019cbe <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019c3e:	4b31      	ldr	r3, [pc, #196]	; (8019d04 <xTaskIncrementTick+0x14c>)
 8019c40:	681b      	ldr	r3, [r3, #0]
 8019c42:	68db      	ldr	r3, [r3, #12]
 8019c44:	68db      	ldr	r3, [r3, #12]
 8019c46:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8019c48:	68bb      	ldr	r3, [r7, #8]
 8019c4a:	685b      	ldr	r3, [r3, #4]
 8019c4c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8019c4e:	693a      	ldr	r2, [r7, #16]
 8019c50:	687b      	ldr	r3, [r7, #4]
 8019c52:	429a      	cmp	r2, r3
 8019c54:	d203      	bcs.n	8019c5e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8019c56:	4a2e      	ldr	r2, [pc, #184]	; (8019d10 <xTaskIncrementTick+0x158>)
 8019c58:	687b      	ldr	r3, [r7, #4]
 8019c5a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8019c5c:	e02f      	b.n	8019cbe <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019c5e:	68bb      	ldr	r3, [r7, #8]
 8019c60:	3304      	adds	r3, #4
 8019c62:	4618      	mov	r0, r3
 8019c64:	f7fe fa8e 	bl	8018184 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8019c68:	68bb      	ldr	r3, [r7, #8]
 8019c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019c6c:	2b00      	cmp	r3, #0
 8019c6e:	d004      	beq.n	8019c7a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8019c70:	68bb      	ldr	r3, [r7, #8]
 8019c72:	3318      	adds	r3, #24
 8019c74:	4618      	mov	r0, r3
 8019c76:	f7fe fa85 	bl	8018184 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8019c7a:	68bb      	ldr	r3, [r7, #8]
 8019c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019c7e:	4b25      	ldr	r3, [pc, #148]	; (8019d14 <xTaskIncrementTick+0x15c>)
 8019c80:	681b      	ldr	r3, [r3, #0]
 8019c82:	429a      	cmp	r2, r3
 8019c84:	d903      	bls.n	8019c8e <xTaskIncrementTick+0xd6>
 8019c86:	68bb      	ldr	r3, [r7, #8]
 8019c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019c8a:	4a22      	ldr	r2, [pc, #136]	; (8019d14 <xTaskIncrementTick+0x15c>)
 8019c8c:	6013      	str	r3, [r2, #0]
 8019c8e:	68bb      	ldr	r3, [r7, #8]
 8019c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019c92:	4613      	mov	r3, r2
 8019c94:	009b      	lsls	r3, r3, #2
 8019c96:	4413      	add	r3, r2
 8019c98:	009b      	lsls	r3, r3, #2
 8019c9a:	4a1f      	ldr	r2, [pc, #124]	; (8019d18 <xTaskIncrementTick+0x160>)
 8019c9c:	441a      	add	r2, r3
 8019c9e:	68bb      	ldr	r3, [r7, #8]
 8019ca0:	3304      	adds	r3, #4
 8019ca2:	4619      	mov	r1, r3
 8019ca4:	4610      	mov	r0, r2
 8019ca6:	f7fe fa10 	bl	80180ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8019caa:	68bb      	ldr	r3, [r7, #8]
 8019cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019cae:	4b1b      	ldr	r3, [pc, #108]	; (8019d1c <xTaskIncrementTick+0x164>)
 8019cb0:	681b      	ldr	r3, [r3, #0]
 8019cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019cb4:	429a      	cmp	r2, r3
 8019cb6:	d3b8      	bcc.n	8019c2a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8019cb8:	2301      	movs	r3, #1
 8019cba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019cbc:	e7b5      	b.n	8019c2a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8019cbe:	4b17      	ldr	r3, [pc, #92]	; (8019d1c <xTaskIncrementTick+0x164>)
 8019cc0:	681b      	ldr	r3, [r3, #0]
 8019cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019cc4:	4914      	ldr	r1, [pc, #80]	; (8019d18 <xTaskIncrementTick+0x160>)
 8019cc6:	4613      	mov	r3, r2
 8019cc8:	009b      	lsls	r3, r3, #2
 8019cca:	4413      	add	r3, r2
 8019ccc:	009b      	lsls	r3, r3, #2
 8019cce:	440b      	add	r3, r1
 8019cd0:	681b      	ldr	r3, [r3, #0]
 8019cd2:	2b01      	cmp	r3, #1
 8019cd4:	d907      	bls.n	8019ce6 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8019cd6:	2301      	movs	r3, #1
 8019cd8:	617b      	str	r3, [r7, #20]
 8019cda:	e004      	b.n	8019ce6 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8019cdc:	4b10      	ldr	r3, [pc, #64]	; (8019d20 <xTaskIncrementTick+0x168>)
 8019cde:	681b      	ldr	r3, [r3, #0]
 8019ce0:	3301      	adds	r3, #1
 8019ce2:	4a0f      	ldr	r2, [pc, #60]	; (8019d20 <xTaskIncrementTick+0x168>)
 8019ce4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8019ce6:	4b0f      	ldr	r3, [pc, #60]	; (8019d24 <xTaskIncrementTick+0x16c>)
 8019ce8:	681b      	ldr	r3, [r3, #0]
 8019cea:	2b00      	cmp	r3, #0
 8019cec:	d001      	beq.n	8019cf2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8019cee:	2301      	movs	r3, #1
 8019cf0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8019cf2:	697b      	ldr	r3, [r7, #20]
}
 8019cf4:	4618      	mov	r0, r3
 8019cf6:	3718      	adds	r7, #24
 8019cf8:	46bd      	mov	sp, r7
 8019cfa:	bd80      	pop	{r7, pc}
 8019cfc:	200126b8 	.word	0x200126b8
 8019d00:	20012694 	.word	0x20012694
 8019d04:	20012648 	.word	0x20012648
 8019d08:	2001264c 	.word	0x2001264c
 8019d0c:	200126a8 	.word	0x200126a8
 8019d10:	200126b0 	.word	0x200126b0
 8019d14:	20012698 	.word	0x20012698
 8019d18:	200121c0 	.word	0x200121c0
 8019d1c:	200121bc 	.word	0x200121bc
 8019d20:	200126a0 	.word	0x200126a0
 8019d24:	200126a4 	.word	0x200126a4

08019d28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8019d28:	b480      	push	{r7}
 8019d2a:	b085      	sub	sp, #20
 8019d2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8019d2e:	4b27      	ldr	r3, [pc, #156]	; (8019dcc <vTaskSwitchContext+0xa4>)
 8019d30:	681b      	ldr	r3, [r3, #0]
 8019d32:	2b00      	cmp	r3, #0
 8019d34:	d003      	beq.n	8019d3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8019d36:	4b26      	ldr	r3, [pc, #152]	; (8019dd0 <vTaskSwitchContext+0xa8>)
 8019d38:	2201      	movs	r2, #1
 8019d3a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8019d3c:	e040      	b.n	8019dc0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8019d3e:	4b24      	ldr	r3, [pc, #144]	; (8019dd0 <vTaskSwitchContext+0xa8>)
 8019d40:	2200      	movs	r2, #0
 8019d42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019d44:	4b23      	ldr	r3, [pc, #140]	; (8019dd4 <vTaskSwitchContext+0xac>)
 8019d46:	681b      	ldr	r3, [r3, #0]
 8019d48:	60fb      	str	r3, [r7, #12]
 8019d4a:	e00f      	b.n	8019d6c <vTaskSwitchContext+0x44>
 8019d4c:	68fb      	ldr	r3, [r7, #12]
 8019d4e:	2b00      	cmp	r3, #0
 8019d50:	d109      	bne.n	8019d66 <vTaskSwitchContext+0x3e>
 8019d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d56:	f383 8811 	msr	BASEPRI, r3
 8019d5a:	f3bf 8f6f 	isb	sy
 8019d5e:	f3bf 8f4f 	dsb	sy
 8019d62:	607b      	str	r3, [r7, #4]
 8019d64:	e7fe      	b.n	8019d64 <vTaskSwitchContext+0x3c>
 8019d66:	68fb      	ldr	r3, [r7, #12]
 8019d68:	3b01      	subs	r3, #1
 8019d6a:	60fb      	str	r3, [r7, #12]
 8019d6c:	491a      	ldr	r1, [pc, #104]	; (8019dd8 <vTaskSwitchContext+0xb0>)
 8019d6e:	68fa      	ldr	r2, [r7, #12]
 8019d70:	4613      	mov	r3, r2
 8019d72:	009b      	lsls	r3, r3, #2
 8019d74:	4413      	add	r3, r2
 8019d76:	009b      	lsls	r3, r3, #2
 8019d78:	440b      	add	r3, r1
 8019d7a:	681b      	ldr	r3, [r3, #0]
 8019d7c:	2b00      	cmp	r3, #0
 8019d7e:	d0e5      	beq.n	8019d4c <vTaskSwitchContext+0x24>
 8019d80:	68fa      	ldr	r2, [r7, #12]
 8019d82:	4613      	mov	r3, r2
 8019d84:	009b      	lsls	r3, r3, #2
 8019d86:	4413      	add	r3, r2
 8019d88:	009b      	lsls	r3, r3, #2
 8019d8a:	4a13      	ldr	r2, [pc, #76]	; (8019dd8 <vTaskSwitchContext+0xb0>)
 8019d8c:	4413      	add	r3, r2
 8019d8e:	60bb      	str	r3, [r7, #8]
 8019d90:	68bb      	ldr	r3, [r7, #8]
 8019d92:	685b      	ldr	r3, [r3, #4]
 8019d94:	685a      	ldr	r2, [r3, #4]
 8019d96:	68bb      	ldr	r3, [r7, #8]
 8019d98:	605a      	str	r2, [r3, #4]
 8019d9a:	68bb      	ldr	r3, [r7, #8]
 8019d9c:	685a      	ldr	r2, [r3, #4]
 8019d9e:	68bb      	ldr	r3, [r7, #8]
 8019da0:	3308      	adds	r3, #8
 8019da2:	429a      	cmp	r2, r3
 8019da4:	d104      	bne.n	8019db0 <vTaskSwitchContext+0x88>
 8019da6:	68bb      	ldr	r3, [r7, #8]
 8019da8:	685b      	ldr	r3, [r3, #4]
 8019daa:	685a      	ldr	r2, [r3, #4]
 8019dac:	68bb      	ldr	r3, [r7, #8]
 8019dae:	605a      	str	r2, [r3, #4]
 8019db0:	68bb      	ldr	r3, [r7, #8]
 8019db2:	685b      	ldr	r3, [r3, #4]
 8019db4:	68db      	ldr	r3, [r3, #12]
 8019db6:	4a09      	ldr	r2, [pc, #36]	; (8019ddc <vTaskSwitchContext+0xb4>)
 8019db8:	6013      	str	r3, [r2, #0]
 8019dba:	4a06      	ldr	r2, [pc, #24]	; (8019dd4 <vTaskSwitchContext+0xac>)
 8019dbc:	68fb      	ldr	r3, [r7, #12]
 8019dbe:	6013      	str	r3, [r2, #0]
}
 8019dc0:	bf00      	nop
 8019dc2:	3714      	adds	r7, #20
 8019dc4:	46bd      	mov	sp, r7
 8019dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dca:	4770      	bx	lr
 8019dcc:	200126b8 	.word	0x200126b8
 8019dd0:	200126a4 	.word	0x200126a4
 8019dd4:	20012698 	.word	0x20012698
 8019dd8:	200121c0 	.word	0x200121c0
 8019ddc:	200121bc 	.word	0x200121bc

08019de0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8019de0:	b580      	push	{r7, lr}
 8019de2:	b084      	sub	sp, #16
 8019de4:	af00      	add	r7, sp, #0
 8019de6:	6078      	str	r0, [r7, #4]
 8019de8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8019dea:	687b      	ldr	r3, [r7, #4]
 8019dec:	2b00      	cmp	r3, #0
 8019dee:	d109      	bne.n	8019e04 <vTaskPlaceOnEventList+0x24>
 8019df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019df4:	f383 8811 	msr	BASEPRI, r3
 8019df8:	f3bf 8f6f 	isb	sy
 8019dfc:	f3bf 8f4f 	dsb	sy
 8019e00:	60fb      	str	r3, [r7, #12]
 8019e02:	e7fe      	b.n	8019e02 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8019e04:	4b07      	ldr	r3, [pc, #28]	; (8019e24 <vTaskPlaceOnEventList+0x44>)
 8019e06:	681b      	ldr	r3, [r3, #0]
 8019e08:	3318      	adds	r3, #24
 8019e0a:	4619      	mov	r1, r3
 8019e0c:	6878      	ldr	r0, [r7, #4]
 8019e0e:	f7fe f980 	bl	8018112 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8019e12:	2101      	movs	r1, #1
 8019e14:	6838      	ldr	r0, [r7, #0]
 8019e16:	f000 fb6d 	bl	801a4f4 <prvAddCurrentTaskToDelayedList>
}
 8019e1a:	bf00      	nop
 8019e1c:	3710      	adds	r7, #16
 8019e1e:	46bd      	mov	sp, r7
 8019e20:	bd80      	pop	{r7, pc}
 8019e22:	bf00      	nop
 8019e24:	200121bc 	.word	0x200121bc

08019e28 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8019e28:	b580      	push	{r7, lr}
 8019e2a:	b086      	sub	sp, #24
 8019e2c:	af00      	add	r7, sp, #0
 8019e2e:	60f8      	str	r0, [r7, #12]
 8019e30:	60b9      	str	r1, [r7, #8]
 8019e32:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8019e34:	68fb      	ldr	r3, [r7, #12]
 8019e36:	2b00      	cmp	r3, #0
 8019e38:	d109      	bne.n	8019e4e <vTaskPlaceOnEventListRestricted+0x26>
 8019e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019e3e:	f383 8811 	msr	BASEPRI, r3
 8019e42:	f3bf 8f6f 	isb	sy
 8019e46:	f3bf 8f4f 	dsb	sy
 8019e4a:	617b      	str	r3, [r7, #20]
 8019e4c:	e7fe      	b.n	8019e4c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8019e4e:	4b0a      	ldr	r3, [pc, #40]	; (8019e78 <vTaskPlaceOnEventListRestricted+0x50>)
 8019e50:	681b      	ldr	r3, [r3, #0]
 8019e52:	3318      	adds	r3, #24
 8019e54:	4619      	mov	r1, r3
 8019e56:	68f8      	ldr	r0, [r7, #12]
 8019e58:	f7fe f937 	bl	80180ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	2b00      	cmp	r3, #0
 8019e60:	d002      	beq.n	8019e68 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8019e62:	f04f 33ff 	mov.w	r3, #4294967295
 8019e66:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8019e68:	6879      	ldr	r1, [r7, #4]
 8019e6a:	68b8      	ldr	r0, [r7, #8]
 8019e6c:	f000 fb42 	bl	801a4f4 <prvAddCurrentTaskToDelayedList>
	}
 8019e70:	bf00      	nop
 8019e72:	3718      	adds	r7, #24
 8019e74:	46bd      	mov	sp, r7
 8019e76:	bd80      	pop	{r7, pc}
 8019e78:	200121bc 	.word	0x200121bc

08019e7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8019e7c:	b580      	push	{r7, lr}
 8019e7e:	b086      	sub	sp, #24
 8019e80:	af00      	add	r7, sp, #0
 8019e82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019e84:	687b      	ldr	r3, [r7, #4]
 8019e86:	68db      	ldr	r3, [r3, #12]
 8019e88:	68db      	ldr	r3, [r3, #12]
 8019e8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8019e8c:	693b      	ldr	r3, [r7, #16]
 8019e8e:	2b00      	cmp	r3, #0
 8019e90:	d109      	bne.n	8019ea6 <xTaskRemoveFromEventList+0x2a>
 8019e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019e96:	f383 8811 	msr	BASEPRI, r3
 8019e9a:	f3bf 8f6f 	isb	sy
 8019e9e:	f3bf 8f4f 	dsb	sy
 8019ea2:	60fb      	str	r3, [r7, #12]
 8019ea4:	e7fe      	b.n	8019ea4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8019ea6:	693b      	ldr	r3, [r7, #16]
 8019ea8:	3318      	adds	r3, #24
 8019eaa:	4618      	mov	r0, r3
 8019eac:	f7fe f96a 	bl	8018184 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019eb0:	4b1d      	ldr	r3, [pc, #116]	; (8019f28 <xTaskRemoveFromEventList+0xac>)
 8019eb2:	681b      	ldr	r3, [r3, #0]
 8019eb4:	2b00      	cmp	r3, #0
 8019eb6:	d11d      	bne.n	8019ef4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8019eb8:	693b      	ldr	r3, [r7, #16]
 8019eba:	3304      	adds	r3, #4
 8019ebc:	4618      	mov	r0, r3
 8019ebe:	f7fe f961 	bl	8018184 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8019ec2:	693b      	ldr	r3, [r7, #16]
 8019ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019ec6:	4b19      	ldr	r3, [pc, #100]	; (8019f2c <xTaskRemoveFromEventList+0xb0>)
 8019ec8:	681b      	ldr	r3, [r3, #0]
 8019eca:	429a      	cmp	r2, r3
 8019ecc:	d903      	bls.n	8019ed6 <xTaskRemoveFromEventList+0x5a>
 8019ece:	693b      	ldr	r3, [r7, #16]
 8019ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019ed2:	4a16      	ldr	r2, [pc, #88]	; (8019f2c <xTaskRemoveFromEventList+0xb0>)
 8019ed4:	6013      	str	r3, [r2, #0]
 8019ed6:	693b      	ldr	r3, [r7, #16]
 8019ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019eda:	4613      	mov	r3, r2
 8019edc:	009b      	lsls	r3, r3, #2
 8019ede:	4413      	add	r3, r2
 8019ee0:	009b      	lsls	r3, r3, #2
 8019ee2:	4a13      	ldr	r2, [pc, #76]	; (8019f30 <xTaskRemoveFromEventList+0xb4>)
 8019ee4:	441a      	add	r2, r3
 8019ee6:	693b      	ldr	r3, [r7, #16]
 8019ee8:	3304      	adds	r3, #4
 8019eea:	4619      	mov	r1, r3
 8019eec:	4610      	mov	r0, r2
 8019eee:	f7fe f8ec 	bl	80180ca <vListInsertEnd>
 8019ef2:	e005      	b.n	8019f00 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8019ef4:	693b      	ldr	r3, [r7, #16]
 8019ef6:	3318      	adds	r3, #24
 8019ef8:	4619      	mov	r1, r3
 8019efa:	480e      	ldr	r0, [pc, #56]	; (8019f34 <xTaskRemoveFromEventList+0xb8>)
 8019efc:	f7fe f8e5 	bl	80180ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8019f00:	693b      	ldr	r3, [r7, #16]
 8019f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019f04:	4b0c      	ldr	r3, [pc, #48]	; (8019f38 <xTaskRemoveFromEventList+0xbc>)
 8019f06:	681b      	ldr	r3, [r3, #0]
 8019f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019f0a:	429a      	cmp	r2, r3
 8019f0c:	d905      	bls.n	8019f1a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8019f0e:	2301      	movs	r3, #1
 8019f10:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8019f12:	4b0a      	ldr	r3, [pc, #40]	; (8019f3c <xTaskRemoveFromEventList+0xc0>)
 8019f14:	2201      	movs	r2, #1
 8019f16:	601a      	str	r2, [r3, #0]
 8019f18:	e001      	b.n	8019f1e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8019f1a:	2300      	movs	r3, #0
 8019f1c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8019f1e:	697b      	ldr	r3, [r7, #20]
}
 8019f20:	4618      	mov	r0, r3
 8019f22:	3718      	adds	r7, #24
 8019f24:	46bd      	mov	sp, r7
 8019f26:	bd80      	pop	{r7, pc}
 8019f28:	200126b8 	.word	0x200126b8
 8019f2c:	20012698 	.word	0x20012698
 8019f30:	200121c0 	.word	0x200121c0
 8019f34:	20012650 	.word	0x20012650
 8019f38:	200121bc 	.word	0x200121bc
 8019f3c:	200126a4 	.word	0x200126a4

08019f40 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8019f40:	b480      	push	{r7}
 8019f42:	b083      	sub	sp, #12
 8019f44:	af00      	add	r7, sp, #0
 8019f46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8019f48:	4b06      	ldr	r3, [pc, #24]	; (8019f64 <vTaskInternalSetTimeOutState+0x24>)
 8019f4a:	681a      	ldr	r2, [r3, #0]
 8019f4c:	687b      	ldr	r3, [r7, #4]
 8019f4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8019f50:	4b05      	ldr	r3, [pc, #20]	; (8019f68 <vTaskInternalSetTimeOutState+0x28>)
 8019f52:	681a      	ldr	r2, [r3, #0]
 8019f54:	687b      	ldr	r3, [r7, #4]
 8019f56:	605a      	str	r2, [r3, #4]
}
 8019f58:	bf00      	nop
 8019f5a:	370c      	adds	r7, #12
 8019f5c:	46bd      	mov	sp, r7
 8019f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f62:	4770      	bx	lr
 8019f64:	200126a8 	.word	0x200126a8
 8019f68:	20012694 	.word	0x20012694

08019f6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8019f6c:	b580      	push	{r7, lr}
 8019f6e:	b088      	sub	sp, #32
 8019f70:	af00      	add	r7, sp, #0
 8019f72:	6078      	str	r0, [r7, #4]
 8019f74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8019f76:	687b      	ldr	r3, [r7, #4]
 8019f78:	2b00      	cmp	r3, #0
 8019f7a:	d109      	bne.n	8019f90 <xTaskCheckForTimeOut+0x24>
 8019f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f80:	f383 8811 	msr	BASEPRI, r3
 8019f84:	f3bf 8f6f 	isb	sy
 8019f88:	f3bf 8f4f 	dsb	sy
 8019f8c:	613b      	str	r3, [r7, #16]
 8019f8e:	e7fe      	b.n	8019f8e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8019f90:	683b      	ldr	r3, [r7, #0]
 8019f92:	2b00      	cmp	r3, #0
 8019f94:	d109      	bne.n	8019faa <xTaskCheckForTimeOut+0x3e>
 8019f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f9a:	f383 8811 	msr	BASEPRI, r3
 8019f9e:	f3bf 8f6f 	isb	sy
 8019fa2:	f3bf 8f4f 	dsb	sy
 8019fa6:	60fb      	str	r3, [r7, #12]
 8019fa8:	e7fe      	b.n	8019fa8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8019faa:	f7fe fa3f 	bl	801842c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8019fae:	4b1d      	ldr	r3, [pc, #116]	; (801a024 <xTaskCheckForTimeOut+0xb8>)
 8019fb0:	681b      	ldr	r3, [r3, #0]
 8019fb2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8019fb4:	687b      	ldr	r3, [r7, #4]
 8019fb6:	685b      	ldr	r3, [r3, #4]
 8019fb8:	69ba      	ldr	r2, [r7, #24]
 8019fba:	1ad3      	subs	r3, r2, r3
 8019fbc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8019fbe:	683b      	ldr	r3, [r7, #0]
 8019fc0:	681b      	ldr	r3, [r3, #0]
 8019fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019fc6:	d102      	bne.n	8019fce <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8019fc8:	2300      	movs	r3, #0
 8019fca:	61fb      	str	r3, [r7, #28]
 8019fcc:	e023      	b.n	801a016 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8019fce:	687b      	ldr	r3, [r7, #4]
 8019fd0:	681a      	ldr	r2, [r3, #0]
 8019fd2:	4b15      	ldr	r3, [pc, #84]	; (801a028 <xTaskCheckForTimeOut+0xbc>)
 8019fd4:	681b      	ldr	r3, [r3, #0]
 8019fd6:	429a      	cmp	r2, r3
 8019fd8:	d007      	beq.n	8019fea <xTaskCheckForTimeOut+0x7e>
 8019fda:	687b      	ldr	r3, [r7, #4]
 8019fdc:	685b      	ldr	r3, [r3, #4]
 8019fde:	69ba      	ldr	r2, [r7, #24]
 8019fe0:	429a      	cmp	r2, r3
 8019fe2:	d302      	bcc.n	8019fea <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8019fe4:	2301      	movs	r3, #1
 8019fe6:	61fb      	str	r3, [r7, #28]
 8019fe8:	e015      	b.n	801a016 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8019fea:	683b      	ldr	r3, [r7, #0]
 8019fec:	681b      	ldr	r3, [r3, #0]
 8019fee:	697a      	ldr	r2, [r7, #20]
 8019ff0:	429a      	cmp	r2, r3
 8019ff2:	d20b      	bcs.n	801a00c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8019ff4:	683b      	ldr	r3, [r7, #0]
 8019ff6:	681a      	ldr	r2, [r3, #0]
 8019ff8:	697b      	ldr	r3, [r7, #20]
 8019ffa:	1ad2      	subs	r2, r2, r3
 8019ffc:	683b      	ldr	r3, [r7, #0]
 8019ffe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801a000:	6878      	ldr	r0, [r7, #4]
 801a002:	f7ff ff9d 	bl	8019f40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801a006:	2300      	movs	r3, #0
 801a008:	61fb      	str	r3, [r7, #28]
 801a00a:	e004      	b.n	801a016 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 801a00c:	683b      	ldr	r3, [r7, #0]
 801a00e:	2200      	movs	r2, #0
 801a010:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801a012:	2301      	movs	r3, #1
 801a014:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801a016:	f7fe fa37 	bl	8018488 <vPortExitCritical>

	return xReturn;
 801a01a:	69fb      	ldr	r3, [r7, #28]
}
 801a01c:	4618      	mov	r0, r3
 801a01e:	3720      	adds	r7, #32
 801a020:	46bd      	mov	sp, r7
 801a022:	bd80      	pop	{r7, pc}
 801a024:	20012694 	.word	0x20012694
 801a028:	200126a8 	.word	0x200126a8

0801a02c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801a02c:	b480      	push	{r7}
 801a02e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801a030:	4b03      	ldr	r3, [pc, #12]	; (801a040 <vTaskMissedYield+0x14>)
 801a032:	2201      	movs	r2, #1
 801a034:	601a      	str	r2, [r3, #0]
}
 801a036:	bf00      	nop
 801a038:	46bd      	mov	sp, r7
 801a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a03e:	4770      	bx	lr
 801a040:	200126a4 	.word	0x200126a4

0801a044 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801a044:	b580      	push	{r7, lr}
 801a046:	b082      	sub	sp, #8
 801a048:	af00      	add	r7, sp, #0
 801a04a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801a04c:	f000 f852 	bl	801a0f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801a050:	4b06      	ldr	r3, [pc, #24]	; (801a06c <prvIdleTask+0x28>)
 801a052:	681b      	ldr	r3, [r3, #0]
 801a054:	2b01      	cmp	r3, #1
 801a056:	d9f9      	bls.n	801a04c <prvIdleTask+0x8>
			{
				taskYIELD();
 801a058:	4b05      	ldr	r3, [pc, #20]	; (801a070 <prvIdleTask+0x2c>)
 801a05a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a05e:	601a      	str	r2, [r3, #0]
 801a060:	f3bf 8f4f 	dsb	sy
 801a064:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801a068:	e7f0      	b.n	801a04c <prvIdleTask+0x8>
 801a06a:	bf00      	nop
 801a06c:	200121c0 	.word	0x200121c0
 801a070:	e000ed04 	.word	0xe000ed04

0801a074 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801a074:	b580      	push	{r7, lr}
 801a076:	b082      	sub	sp, #8
 801a078:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801a07a:	2300      	movs	r3, #0
 801a07c:	607b      	str	r3, [r7, #4]
 801a07e:	e00c      	b.n	801a09a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801a080:	687a      	ldr	r2, [r7, #4]
 801a082:	4613      	mov	r3, r2
 801a084:	009b      	lsls	r3, r3, #2
 801a086:	4413      	add	r3, r2
 801a088:	009b      	lsls	r3, r3, #2
 801a08a:	4a12      	ldr	r2, [pc, #72]	; (801a0d4 <prvInitialiseTaskLists+0x60>)
 801a08c:	4413      	add	r3, r2
 801a08e:	4618      	mov	r0, r3
 801a090:	f7fd ffee 	bl	8018070 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801a094:	687b      	ldr	r3, [r7, #4]
 801a096:	3301      	adds	r3, #1
 801a098:	607b      	str	r3, [r7, #4]
 801a09a:	687b      	ldr	r3, [r7, #4]
 801a09c:	2b37      	cmp	r3, #55	; 0x37
 801a09e:	d9ef      	bls.n	801a080 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801a0a0:	480d      	ldr	r0, [pc, #52]	; (801a0d8 <prvInitialiseTaskLists+0x64>)
 801a0a2:	f7fd ffe5 	bl	8018070 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801a0a6:	480d      	ldr	r0, [pc, #52]	; (801a0dc <prvInitialiseTaskLists+0x68>)
 801a0a8:	f7fd ffe2 	bl	8018070 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801a0ac:	480c      	ldr	r0, [pc, #48]	; (801a0e0 <prvInitialiseTaskLists+0x6c>)
 801a0ae:	f7fd ffdf 	bl	8018070 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801a0b2:	480c      	ldr	r0, [pc, #48]	; (801a0e4 <prvInitialiseTaskLists+0x70>)
 801a0b4:	f7fd ffdc 	bl	8018070 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801a0b8:	480b      	ldr	r0, [pc, #44]	; (801a0e8 <prvInitialiseTaskLists+0x74>)
 801a0ba:	f7fd ffd9 	bl	8018070 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801a0be:	4b0b      	ldr	r3, [pc, #44]	; (801a0ec <prvInitialiseTaskLists+0x78>)
 801a0c0:	4a05      	ldr	r2, [pc, #20]	; (801a0d8 <prvInitialiseTaskLists+0x64>)
 801a0c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801a0c4:	4b0a      	ldr	r3, [pc, #40]	; (801a0f0 <prvInitialiseTaskLists+0x7c>)
 801a0c6:	4a05      	ldr	r2, [pc, #20]	; (801a0dc <prvInitialiseTaskLists+0x68>)
 801a0c8:	601a      	str	r2, [r3, #0]
}
 801a0ca:	bf00      	nop
 801a0cc:	3708      	adds	r7, #8
 801a0ce:	46bd      	mov	sp, r7
 801a0d0:	bd80      	pop	{r7, pc}
 801a0d2:	bf00      	nop
 801a0d4:	200121c0 	.word	0x200121c0
 801a0d8:	20012620 	.word	0x20012620
 801a0dc:	20012634 	.word	0x20012634
 801a0e0:	20012650 	.word	0x20012650
 801a0e4:	20012664 	.word	0x20012664
 801a0e8:	2001267c 	.word	0x2001267c
 801a0ec:	20012648 	.word	0x20012648
 801a0f0:	2001264c 	.word	0x2001264c

0801a0f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801a0f4:	b580      	push	{r7, lr}
 801a0f6:	b082      	sub	sp, #8
 801a0f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801a0fa:	e019      	b.n	801a130 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801a0fc:	f7fe f996 	bl	801842c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a100:	4b0f      	ldr	r3, [pc, #60]	; (801a140 <prvCheckTasksWaitingTermination+0x4c>)
 801a102:	68db      	ldr	r3, [r3, #12]
 801a104:	68db      	ldr	r3, [r3, #12]
 801a106:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a108:	687b      	ldr	r3, [r7, #4]
 801a10a:	3304      	adds	r3, #4
 801a10c:	4618      	mov	r0, r3
 801a10e:	f7fe f839 	bl	8018184 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801a112:	4b0c      	ldr	r3, [pc, #48]	; (801a144 <prvCheckTasksWaitingTermination+0x50>)
 801a114:	681b      	ldr	r3, [r3, #0]
 801a116:	3b01      	subs	r3, #1
 801a118:	4a0a      	ldr	r2, [pc, #40]	; (801a144 <prvCheckTasksWaitingTermination+0x50>)
 801a11a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801a11c:	4b0a      	ldr	r3, [pc, #40]	; (801a148 <prvCheckTasksWaitingTermination+0x54>)
 801a11e:	681b      	ldr	r3, [r3, #0]
 801a120:	3b01      	subs	r3, #1
 801a122:	4a09      	ldr	r2, [pc, #36]	; (801a148 <prvCheckTasksWaitingTermination+0x54>)
 801a124:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801a126:	f7fe f9af 	bl	8018488 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801a12a:	6878      	ldr	r0, [r7, #4]
 801a12c:	f000 f80e 	bl	801a14c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801a130:	4b05      	ldr	r3, [pc, #20]	; (801a148 <prvCheckTasksWaitingTermination+0x54>)
 801a132:	681b      	ldr	r3, [r3, #0]
 801a134:	2b00      	cmp	r3, #0
 801a136:	d1e1      	bne.n	801a0fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801a138:	bf00      	nop
 801a13a:	3708      	adds	r7, #8
 801a13c:	46bd      	mov	sp, r7
 801a13e:	bd80      	pop	{r7, pc}
 801a140:	20012664 	.word	0x20012664
 801a144:	20012690 	.word	0x20012690
 801a148:	20012678 	.word	0x20012678

0801a14c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801a14c:	b580      	push	{r7, lr}
 801a14e:	b084      	sub	sp, #16
 801a150:	af00      	add	r7, sp, #0
 801a152:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801a154:	687b      	ldr	r3, [r7, #4]
 801a156:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801a15a:	2b00      	cmp	r3, #0
 801a15c:	d108      	bne.n	801a170 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801a15e:	687b      	ldr	r3, [r7, #4]
 801a160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a162:	4618      	mov	r0, r3
 801a164:	f7fd fe70 	bl	8017e48 <vPortFree>
				vPortFree( pxTCB );
 801a168:	6878      	ldr	r0, [r7, #4]
 801a16a:	f7fd fe6d 	bl	8017e48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801a16e:	e017      	b.n	801a1a0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801a170:	687b      	ldr	r3, [r7, #4]
 801a172:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801a176:	2b01      	cmp	r3, #1
 801a178:	d103      	bne.n	801a182 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801a17a:	6878      	ldr	r0, [r7, #4]
 801a17c:	f7fd fe64 	bl	8017e48 <vPortFree>
	}
 801a180:	e00e      	b.n	801a1a0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801a182:	687b      	ldr	r3, [r7, #4]
 801a184:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801a188:	2b02      	cmp	r3, #2
 801a18a:	d009      	beq.n	801a1a0 <prvDeleteTCB+0x54>
 801a18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a190:	f383 8811 	msr	BASEPRI, r3
 801a194:	f3bf 8f6f 	isb	sy
 801a198:	f3bf 8f4f 	dsb	sy
 801a19c:	60fb      	str	r3, [r7, #12]
 801a19e:	e7fe      	b.n	801a19e <prvDeleteTCB+0x52>
	}
 801a1a0:	bf00      	nop
 801a1a2:	3710      	adds	r7, #16
 801a1a4:	46bd      	mov	sp, r7
 801a1a6:	bd80      	pop	{r7, pc}

0801a1a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801a1a8:	b480      	push	{r7}
 801a1aa:	b083      	sub	sp, #12
 801a1ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a1ae:	4b0c      	ldr	r3, [pc, #48]	; (801a1e0 <prvResetNextTaskUnblockTime+0x38>)
 801a1b0:	681b      	ldr	r3, [r3, #0]
 801a1b2:	681b      	ldr	r3, [r3, #0]
 801a1b4:	2b00      	cmp	r3, #0
 801a1b6:	d104      	bne.n	801a1c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801a1b8:	4b0a      	ldr	r3, [pc, #40]	; (801a1e4 <prvResetNextTaskUnblockTime+0x3c>)
 801a1ba:	f04f 32ff 	mov.w	r2, #4294967295
 801a1be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801a1c0:	e008      	b.n	801a1d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a1c2:	4b07      	ldr	r3, [pc, #28]	; (801a1e0 <prvResetNextTaskUnblockTime+0x38>)
 801a1c4:	681b      	ldr	r3, [r3, #0]
 801a1c6:	68db      	ldr	r3, [r3, #12]
 801a1c8:	68db      	ldr	r3, [r3, #12]
 801a1ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801a1cc:	687b      	ldr	r3, [r7, #4]
 801a1ce:	685b      	ldr	r3, [r3, #4]
 801a1d0:	4a04      	ldr	r2, [pc, #16]	; (801a1e4 <prvResetNextTaskUnblockTime+0x3c>)
 801a1d2:	6013      	str	r3, [r2, #0]
}
 801a1d4:	bf00      	nop
 801a1d6:	370c      	adds	r7, #12
 801a1d8:	46bd      	mov	sp, r7
 801a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1de:	4770      	bx	lr
 801a1e0:	20012648 	.word	0x20012648
 801a1e4:	200126b0 	.word	0x200126b0

0801a1e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801a1e8:	b480      	push	{r7}
 801a1ea:	b083      	sub	sp, #12
 801a1ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801a1ee:	4b0b      	ldr	r3, [pc, #44]	; (801a21c <xTaskGetSchedulerState+0x34>)
 801a1f0:	681b      	ldr	r3, [r3, #0]
 801a1f2:	2b00      	cmp	r3, #0
 801a1f4:	d102      	bne.n	801a1fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801a1f6:	2301      	movs	r3, #1
 801a1f8:	607b      	str	r3, [r7, #4]
 801a1fa:	e008      	b.n	801a20e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a1fc:	4b08      	ldr	r3, [pc, #32]	; (801a220 <xTaskGetSchedulerState+0x38>)
 801a1fe:	681b      	ldr	r3, [r3, #0]
 801a200:	2b00      	cmp	r3, #0
 801a202:	d102      	bne.n	801a20a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801a204:	2302      	movs	r3, #2
 801a206:	607b      	str	r3, [r7, #4]
 801a208:	e001      	b.n	801a20e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801a20a:	2300      	movs	r3, #0
 801a20c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801a20e:	687b      	ldr	r3, [r7, #4]
	}
 801a210:	4618      	mov	r0, r3
 801a212:	370c      	adds	r7, #12
 801a214:	46bd      	mov	sp, r7
 801a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a21a:	4770      	bx	lr
 801a21c:	2001269c 	.word	0x2001269c
 801a220:	200126b8 	.word	0x200126b8

0801a224 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801a224:	b580      	push	{r7, lr}
 801a226:	b084      	sub	sp, #16
 801a228:	af00      	add	r7, sp, #0
 801a22a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801a22c:	687b      	ldr	r3, [r7, #4]
 801a22e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801a230:	2300      	movs	r3, #0
 801a232:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801a234:	687b      	ldr	r3, [r7, #4]
 801a236:	2b00      	cmp	r3, #0
 801a238:	d051      	beq.n	801a2de <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801a23a:	68bb      	ldr	r3, [r7, #8]
 801a23c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a23e:	4b2a      	ldr	r3, [pc, #168]	; (801a2e8 <xTaskPriorityInherit+0xc4>)
 801a240:	681b      	ldr	r3, [r3, #0]
 801a242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a244:	429a      	cmp	r2, r3
 801a246:	d241      	bcs.n	801a2cc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801a248:	68bb      	ldr	r3, [r7, #8]
 801a24a:	699b      	ldr	r3, [r3, #24]
 801a24c:	2b00      	cmp	r3, #0
 801a24e:	db06      	blt.n	801a25e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a250:	4b25      	ldr	r3, [pc, #148]	; (801a2e8 <xTaskPriorityInherit+0xc4>)
 801a252:	681b      	ldr	r3, [r3, #0]
 801a254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a256:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801a25a:	68bb      	ldr	r3, [r7, #8]
 801a25c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801a25e:	68bb      	ldr	r3, [r7, #8]
 801a260:	6959      	ldr	r1, [r3, #20]
 801a262:	68bb      	ldr	r3, [r7, #8]
 801a264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a266:	4613      	mov	r3, r2
 801a268:	009b      	lsls	r3, r3, #2
 801a26a:	4413      	add	r3, r2
 801a26c:	009b      	lsls	r3, r3, #2
 801a26e:	4a1f      	ldr	r2, [pc, #124]	; (801a2ec <xTaskPriorityInherit+0xc8>)
 801a270:	4413      	add	r3, r2
 801a272:	4299      	cmp	r1, r3
 801a274:	d122      	bne.n	801a2bc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a276:	68bb      	ldr	r3, [r7, #8]
 801a278:	3304      	adds	r3, #4
 801a27a:	4618      	mov	r0, r3
 801a27c:	f7fd ff82 	bl	8018184 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801a280:	4b19      	ldr	r3, [pc, #100]	; (801a2e8 <xTaskPriorityInherit+0xc4>)
 801a282:	681b      	ldr	r3, [r3, #0]
 801a284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a286:	68bb      	ldr	r3, [r7, #8]
 801a288:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801a28a:	68bb      	ldr	r3, [r7, #8]
 801a28c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a28e:	4b18      	ldr	r3, [pc, #96]	; (801a2f0 <xTaskPriorityInherit+0xcc>)
 801a290:	681b      	ldr	r3, [r3, #0]
 801a292:	429a      	cmp	r2, r3
 801a294:	d903      	bls.n	801a29e <xTaskPriorityInherit+0x7a>
 801a296:	68bb      	ldr	r3, [r7, #8]
 801a298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a29a:	4a15      	ldr	r2, [pc, #84]	; (801a2f0 <xTaskPriorityInherit+0xcc>)
 801a29c:	6013      	str	r3, [r2, #0]
 801a29e:	68bb      	ldr	r3, [r7, #8]
 801a2a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a2a2:	4613      	mov	r3, r2
 801a2a4:	009b      	lsls	r3, r3, #2
 801a2a6:	4413      	add	r3, r2
 801a2a8:	009b      	lsls	r3, r3, #2
 801a2aa:	4a10      	ldr	r2, [pc, #64]	; (801a2ec <xTaskPriorityInherit+0xc8>)
 801a2ac:	441a      	add	r2, r3
 801a2ae:	68bb      	ldr	r3, [r7, #8]
 801a2b0:	3304      	adds	r3, #4
 801a2b2:	4619      	mov	r1, r3
 801a2b4:	4610      	mov	r0, r2
 801a2b6:	f7fd ff08 	bl	80180ca <vListInsertEnd>
 801a2ba:	e004      	b.n	801a2c6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801a2bc:	4b0a      	ldr	r3, [pc, #40]	; (801a2e8 <xTaskPriorityInherit+0xc4>)
 801a2be:	681b      	ldr	r3, [r3, #0]
 801a2c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a2c2:	68bb      	ldr	r3, [r7, #8]
 801a2c4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801a2c6:	2301      	movs	r3, #1
 801a2c8:	60fb      	str	r3, [r7, #12]
 801a2ca:	e008      	b.n	801a2de <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801a2cc:	68bb      	ldr	r3, [r7, #8]
 801a2ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801a2d0:	4b05      	ldr	r3, [pc, #20]	; (801a2e8 <xTaskPriorityInherit+0xc4>)
 801a2d2:	681b      	ldr	r3, [r3, #0]
 801a2d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a2d6:	429a      	cmp	r2, r3
 801a2d8:	d201      	bcs.n	801a2de <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801a2da:	2301      	movs	r3, #1
 801a2dc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801a2de:	68fb      	ldr	r3, [r7, #12]
	}
 801a2e0:	4618      	mov	r0, r3
 801a2e2:	3710      	adds	r7, #16
 801a2e4:	46bd      	mov	sp, r7
 801a2e6:	bd80      	pop	{r7, pc}
 801a2e8:	200121bc 	.word	0x200121bc
 801a2ec:	200121c0 	.word	0x200121c0
 801a2f0:	20012698 	.word	0x20012698

0801a2f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801a2f4:	b580      	push	{r7, lr}
 801a2f6:	b086      	sub	sp, #24
 801a2f8:	af00      	add	r7, sp, #0
 801a2fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801a2fc:	687b      	ldr	r3, [r7, #4]
 801a2fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801a300:	2300      	movs	r3, #0
 801a302:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801a304:	687b      	ldr	r3, [r7, #4]
 801a306:	2b00      	cmp	r3, #0
 801a308:	d054      	beq.n	801a3b4 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801a30a:	4b2d      	ldr	r3, [pc, #180]	; (801a3c0 <xTaskPriorityDisinherit+0xcc>)
 801a30c:	681b      	ldr	r3, [r3, #0]
 801a30e:	693a      	ldr	r2, [r7, #16]
 801a310:	429a      	cmp	r2, r3
 801a312:	d009      	beq.n	801a328 <xTaskPriorityDisinherit+0x34>
 801a314:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a318:	f383 8811 	msr	BASEPRI, r3
 801a31c:	f3bf 8f6f 	isb	sy
 801a320:	f3bf 8f4f 	dsb	sy
 801a324:	60fb      	str	r3, [r7, #12]
 801a326:	e7fe      	b.n	801a326 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 801a328:	693b      	ldr	r3, [r7, #16]
 801a32a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a32c:	2b00      	cmp	r3, #0
 801a32e:	d109      	bne.n	801a344 <xTaskPriorityDisinherit+0x50>
 801a330:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a334:	f383 8811 	msr	BASEPRI, r3
 801a338:	f3bf 8f6f 	isb	sy
 801a33c:	f3bf 8f4f 	dsb	sy
 801a340:	60bb      	str	r3, [r7, #8]
 801a342:	e7fe      	b.n	801a342 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 801a344:	693b      	ldr	r3, [r7, #16]
 801a346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a348:	1e5a      	subs	r2, r3, #1
 801a34a:	693b      	ldr	r3, [r7, #16]
 801a34c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801a34e:	693b      	ldr	r3, [r7, #16]
 801a350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a352:	693b      	ldr	r3, [r7, #16]
 801a354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a356:	429a      	cmp	r2, r3
 801a358:	d02c      	beq.n	801a3b4 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801a35a:	693b      	ldr	r3, [r7, #16]
 801a35c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a35e:	2b00      	cmp	r3, #0
 801a360:	d128      	bne.n	801a3b4 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a362:	693b      	ldr	r3, [r7, #16]
 801a364:	3304      	adds	r3, #4
 801a366:	4618      	mov	r0, r3
 801a368:	f7fd ff0c 	bl	8018184 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801a36c:	693b      	ldr	r3, [r7, #16]
 801a36e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801a370:	693b      	ldr	r3, [r7, #16]
 801a372:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a374:	693b      	ldr	r3, [r7, #16]
 801a376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a378:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801a37c:	693b      	ldr	r3, [r7, #16]
 801a37e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801a380:	693b      	ldr	r3, [r7, #16]
 801a382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a384:	4b0f      	ldr	r3, [pc, #60]	; (801a3c4 <xTaskPriorityDisinherit+0xd0>)
 801a386:	681b      	ldr	r3, [r3, #0]
 801a388:	429a      	cmp	r2, r3
 801a38a:	d903      	bls.n	801a394 <xTaskPriorityDisinherit+0xa0>
 801a38c:	693b      	ldr	r3, [r7, #16]
 801a38e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a390:	4a0c      	ldr	r2, [pc, #48]	; (801a3c4 <xTaskPriorityDisinherit+0xd0>)
 801a392:	6013      	str	r3, [r2, #0]
 801a394:	693b      	ldr	r3, [r7, #16]
 801a396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a398:	4613      	mov	r3, r2
 801a39a:	009b      	lsls	r3, r3, #2
 801a39c:	4413      	add	r3, r2
 801a39e:	009b      	lsls	r3, r3, #2
 801a3a0:	4a09      	ldr	r2, [pc, #36]	; (801a3c8 <xTaskPriorityDisinherit+0xd4>)
 801a3a2:	441a      	add	r2, r3
 801a3a4:	693b      	ldr	r3, [r7, #16]
 801a3a6:	3304      	adds	r3, #4
 801a3a8:	4619      	mov	r1, r3
 801a3aa:	4610      	mov	r0, r2
 801a3ac:	f7fd fe8d 	bl	80180ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801a3b0:	2301      	movs	r3, #1
 801a3b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801a3b4:	697b      	ldr	r3, [r7, #20]
	}
 801a3b6:	4618      	mov	r0, r3
 801a3b8:	3718      	adds	r7, #24
 801a3ba:	46bd      	mov	sp, r7
 801a3bc:	bd80      	pop	{r7, pc}
 801a3be:	bf00      	nop
 801a3c0:	200121bc 	.word	0x200121bc
 801a3c4:	20012698 	.word	0x20012698
 801a3c8:	200121c0 	.word	0x200121c0

0801a3cc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801a3cc:	b580      	push	{r7, lr}
 801a3ce:	b088      	sub	sp, #32
 801a3d0:	af00      	add	r7, sp, #0
 801a3d2:	6078      	str	r0, [r7, #4]
 801a3d4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801a3d6:	687b      	ldr	r3, [r7, #4]
 801a3d8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801a3da:	2301      	movs	r3, #1
 801a3dc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801a3de:	687b      	ldr	r3, [r7, #4]
 801a3e0:	2b00      	cmp	r3, #0
 801a3e2:	d068      	beq.n	801a4b6 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801a3e4:	69bb      	ldr	r3, [r7, #24]
 801a3e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a3e8:	2b00      	cmp	r3, #0
 801a3ea:	d109      	bne.n	801a400 <vTaskPriorityDisinheritAfterTimeout+0x34>
 801a3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a3f0:	f383 8811 	msr	BASEPRI, r3
 801a3f4:	f3bf 8f6f 	isb	sy
 801a3f8:	f3bf 8f4f 	dsb	sy
 801a3fc:	60fb      	str	r3, [r7, #12]
 801a3fe:	e7fe      	b.n	801a3fe <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801a400:	69bb      	ldr	r3, [r7, #24]
 801a402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a404:	683a      	ldr	r2, [r7, #0]
 801a406:	429a      	cmp	r2, r3
 801a408:	d902      	bls.n	801a410 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801a40a:	683b      	ldr	r3, [r7, #0]
 801a40c:	61fb      	str	r3, [r7, #28]
 801a40e:	e002      	b.n	801a416 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801a410:	69bb      	ldr	r3, [r7, #24]
 801a412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a414:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801a416:	69bb      	ldr	r3, [r7, #24]
 801a418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a41a:	69fa      	ldr	r2, [r7, #28]
 801a41c:	429a      	cmp	r2, r3
 801a41e:	d04a      	beq.n	801a4b6 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801a420:	69bb      	ldr	r3, [r7, #24]
 801a422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a424:	697a      	ldr	r2, [r7, #20]
 801a426:	429a      	cmp	r2, r3
 801a428:	d145      	bne.n	801a4b6 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801a42a:	4b25      	ldr	r3, [pc, #148]	; (801a4c0 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 801a42c:	681b      	ldr	r3, [r3, #0]
 801a42e:	69ba      	ldr	r2, [r7, #24]
 801a430:	429a      	cmp	r2, r3
 801a432:	d109      	bne.n	801a448 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 801a434:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a438:	f383 8811 	msr	BASEPRI, r3
 801a43c:	f3bf 8f6f 	isb	sy
 801a440:	f3bf 8f4f 	dsb	sy
 801a444:	60bb      	str	r3, [r7, #8]
 801a446:	e7fe      	b.n	801a446 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801a448:	69bb      	ldr	r3, [r7, #24]
 801a44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a44c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801a44e:	69bb      	ldr	r3, [r7, #24]
 801a450:	69fa      	ldr	r2, [r7, #28]
 801a452:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801a454:	69bb      	ldr	r3, [r7, #24]
 801a456:	699b      	ldr	r3, [r3, #24]
 801a458:	2b00      	cmp	r3, #0
 801a45a:	db04      	blt.n	801a466 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a45c:	69fb      	ldr	r3, [r7, #28]
 801a45e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801a462:	69bb      	ldr	r3, [r7, #24]
 801a464:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801a466:	69bb      	ldr	r3, [r7, #24]
 801a468:	6959      	ldr	r1, [r3, #20]
 801a46a:	693a      	ldr	r2, [r7, #16]
 801a46c:	4613      	mov	r3, r2
 801a46e:	009b      	lsls	r3, r3, #2
 801a470:	4413      	add	r3, r2
 801a472:	009b      	lsls	r3, r3, #2
 801a474:	4a13      	ldr	r2, [pc, #76]	; (801a4c4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801a476:	4413      	add	r3, r2
 801a478:	4299      	cmp	r1, r3
 801a47a:	d11c      	bne.n	801a4b6 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a47c:	69bb      	ldr	r3, [r7, #24]
 801a47e:	3304      	adds	r3, #4
 801a480:	4618      	mov	r0, r3
 801a482:	f7fd fe7f 	bl	8018184 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801a486:	69bb      	ldr	r3, [r7, #24]
 801a488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a48a:	4b0f      	ldr	r3, [pc, #60]	; (801a4c8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801a48c:	681b      	ldr	r3, [r3, #0]
 801a48e:	429a      	cmp	r2, r3
 801a490:	d903      	bls.n	801a49a <vTaskPriorityDisinheritAfterTimeout+0xce>
 801a492:	69bb      	ldr	r3, [r7, #24]
 801a494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a496:	4a0c      	ldr	r2, [pc, #48]	; (801a4c8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801a498:	6013      	str	r3, [r2, #0]
 801a49a:	69bb      	ldr	r3, [r7, #24]
 801a49c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a49e:	4613      	mov	r3, r2
 801a4a0:	009b      	lsls	r3, r3, #2
 801a4a2:	4413      	add	r3, r2
 801a4a4:	009b      	lsls	r3, r3, #2
 801a4a6:	4a07      	ldr	r2, [pc, #28]	; (801a4c4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801a4a8:	441a      	add	r2, r3
 801a4aa:	69bb      	ldr	r3, [r7, #24]
 801a4ac:	3304      	adds	r3, #4
 801a4ae:	4619      	mov	r1, r3
 801a4b0:	4610      	mov	r0, r2
 801a4b2:	f7fd fe0a 	bl	80180ca <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801a4b6:	bf00      	nop
 801a4b8:	3720      	adds	r7, #32
 801a4ba:	46bd      	mov	sp, r7
 801a4bc:	bd80      	pop	{r7, pc}
 801a4be:	bf00      	nop
 801a4c0:	200121bc 	.word	0x200121bc
 801a4c4:	200121c0 	.word	0x200121c0
 801a4c8:	20012698 	.word	0x20012698

0801a4cc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801a4cc:	b480      	push	{r7}
 801a4ce:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801a4d0:	4b07      	ldr	r3, [pc, #28]	; (801a4f0 <pvTaskIncrementMutexHeldCount+0x24>)
 801a4d2:	681b      	ldr	r3, [r3, #0]
 801a4d4:	2b00      	cmp	r3, #0
 801a4d6:	d004      	beq.n	801a4e2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801a4d8:	4b05      	ldr	r3, [pc, #20]	; (801a4f0 <pvTaskIncrementMutexHeldCount+0x24>)
 801a4da:	681b      	ldr	r3, [r3, #0]
 801a4dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801a4de:	3201      	adds	r2, #1
 801a4e0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801a4e2:	4b03      	ldr	r3, [pc, #12]	; (801a4f0 <pvTaskIncrementMutexHeldCount+0x24>)
 801a4e4:	681b      	ldr	r3, [r3, #0]
	}
 801a4e6:	4618      	mov	r0, r3
 801a4e8:	46bd      	mov	sp, r7
 801a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4ee:	4770      	bx	lr
 801a4f0:	200121bc 	.word	0x200121bc

0801a4f4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801a4f4:	b580      	push	{r7, lr}
 801a4f6:	b084      	sub	sp, #16
 801a4f8:	af00      	add	r7, sp, #0
 801a4fa:	6078      	str	r0, [r7, #4]
 801a4fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801a4fe:	4b21      	ldr	r3, [pc, #132]	; (801a584 <prvAddCurrentTaskToDelayedList+0x90>)
 801a500:	681b      	ldr	r3, [r3, #0]
 801a502:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a504:	4b20      	ldr	r3, [pc, #128]	; (801a588 <prvAddCurrentTaskToDelayedList+0x94>)
 801a506:	681b      	ldr	r3, [r3, #0]
 801a508:	3304      	adds	r3, #4
 801a50a:	4618      	mov	r0, r3
 801a50c:	f7fd fe3a 	bl	8018184 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801a510:	687b      	ldr	r3, [r7, #4]
 801a512:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a516:	d10a      	bne.n	801a52e <prvAddCurrentTaskToDelayedList+0x3a>
 801a518:	683b      	ldr	r3, [r7, #0]
 801a51a:	2b00      	cmp	r3, #0
 801a51c:	d007      	beq.n	801a52e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801a51e:	4b1a      	ldr	r3, [pc, #104]	; (801a588 <prvAddCurrentTaskToDelayedList+0x94>)
 801a520:	681b      	ldr	r3, [r3, #0]
 801a522:	3304      	adds	r3, #4
 801a524:	4619      	mov	r1, r3
 801a526:	4819      	ldr	r0, [pc, #100]	; (801a58c <prvAddCurrentTaskToDelayedList+0x98>)
 801a528:	f7fd fdcf 	bl	80180ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801a52c:	e026      	b.n	801a57c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801a52e:	68fa      	ldr	r2, [r7, #12]
 801a530:	687b      	ldr	r3, [r7, #4]
 801a532:	4413      	add	r3, r2
 801a534:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801a536:	4b14      	ldr	r3, [pc, #80]	; (801a588 <prvAddCurrentTaskToDelayedList+0x94>)
 801a538:	681b      	ldr	r3, [r3, #0]
 801a53a:	68ba      	ldr	r2, [r7, #8]
 801a53c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801a53e:	68ba      	ldr	r2, [r7, #8]
 801a540:	68fb      	ldr	r3, [r7, #12]
 801a542:	429a      	cmp	r2, r3
 801a544:	d209      	bcs.n	801a55a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801a546:	4b12      	ldr	r3, [pc, #72]	; (801a590 <prvAddCurrentTaskToDelayedList+0x9c>)
 801a548:	681a      	ldr	r2, [r3, #0]
 801a54a:	4b0f      	ldr	r3, [pc, #60]	; (801a588 <prvAddCurrentTaskToDelayedList+0x94>)
 801a54c:	681b      	ldr	r3, [r3, #0]
 801a54e:	3304      	adds	r3, #4
 801a550:	4619      	mov	r1, r3
 801a552:	4610      	mov	r0, r2
 801a554:	f7fd fddd 	bl	8018112 <vListInsert>
}
 801a558:	e010      	b.n	801a57c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801a55a:	4b0e      	ldr	r3, [pc, #56]	; (801a594 <prvAddCurrentTaskToDelayedList+0xa0>)
 801a55c:	681a      	ldr	r2, [r3, #0]
 801a55e:	4b0a      	ldr	r3, [pc, #40]	; (801a588 <prvAddCurrentTaskToDelayedList+0x94>)
 801a560:	681b      	ldr	r3, [r3, #0]
 801a562:	3304      	adds	r3, #4
 801a564:	4619      	mov	r1, r3
 801a566:	4610      	mov	r0, r2
 801a568:	f7fd fdd3 	bl	8018112 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801a56c:	4b0a      	ldr	r3, [pc, #40]	; (801a598 <prvAddCurrentTaskToDelayedList+0xa4>)
 801a56e:	681b      	ldr	r3, [r3, #0]
 801a570:	68ba      	ldr	r2, [r7, #8]
 801a572:	429a      	cmp	r2, r3
 801a574:	d202      	bcs.n	801a57c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801a576:	4a08      	ldr	r2, [pc, #32]	; (801a598 <prvAddCurrentTaskToDelayedList+0xa4>)
 801a578:	68bb      	ldr	r3, [r7, #8]
 801a57a:	6013      	str	r3, [r2, #0]
}
 801a57c:	bf00      	nop
 801a57e:	3710      	adds	r7, #16
 801a580:	46bd      	mov	sp, r7
 801a582:	bd80      	pop	{r7, pc}
 801a584:	20012694 	.word	0x20012694
 801a588:	200121bc 	.word	0x200121bc
 801a58c:	2001267c 	.word	0x2001267c
 801a590:	2001264c 	.word	0x2001264c
 801a594:	20012648 	.word	0x20012648
 801a598:	200126b0 	.word	0x200126b0

0801a59c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801a59c:	b580      	push	{r7, lr}
 801a59e:	b08a      	sub	sp, #40	; 0x28
 801a5a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801a5a2:	2300      	movs	r3, #0
 801a5a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801a5a6:	f000 faff 	bl	801aba8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801a5aa:	4b1c      	ldr	r3, [pc, #112]	; (801a61c <xTimerCreateTimerTask+0x80>)
 801a5ac:	681b      	ldr	r3, [r3, #0]
 801a5ae:	2b00      	cmp	r3, #0
 801a5b0:	d021      	beq.n	801a5f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801a5b2:	2300      	movs	r3, #0
 801a5b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801a5b6:	2300      	movs	r3, #0
 801a5b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801a5ba:	1d3a      	adds	r2, r7, #4
 801a5bc:	f107 0108 	add.w	r1, r7, #8
 801a5c0:	f107 030c 	add.w	r3, r7, #12
 801a5c4:	4618      	mov	r0, r3
 801a5c6:	f7fd fb63 	bl	8017c90 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801a5ca:	6879      	ldr	r1, [r7, #4]
 801a5cc:	68bb      	ldr	r3, [r7, #8]
 801a5ce:	68fa      	ldr	r2, [r7, #12]
 801a5d0:	9202      	str	r2, [sp, #8]
 801a5d2:	9301      	str	r3, [sp, #4]
 801a5d4:	2302      	movs	r3, #2
 801a5d6:	9300      	str	r3, [sp, #0]
 801a5d8:	2300      	movs	r3, #0
 801a5da:	460a      	mov	r2, r1
 801a5dc:	4910      	ldr	r1, [pc, #64]	; (801a620 <xTimerCreateTimerTask+0x84>)
 801a5de:	4811      	ldr	r0, [pc, #68]	; (801a624 <xTimerCreateTimerTask+0x88>)
 801a5e0:	f7ff f82c 	bl	801963c <xTaskCreateStatic>
 801a5e4:	4602      	mov	r2, r0
 801a5e6:	4b10      	ldr	r3, [pc, #64]	; (801a628 <xTimerCreateTimerTask+0x8c>)
 801a5e8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801a5ea:	4b0f      	ldr	r3, [pc, #60]	; (801a628 <xTimerCreateTimerTask+0x8c>)
 801a5ec:	681b      	ldr	r3, [r3, #0]
 801a5ee:	2b00      	cmp	r3, #0
 801a5f0:	d001      	beq.n	801a5f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801a5f2:	2301      	movs	r3, #1
 801a5f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801a5f6:	697b      	ldr	r3, [r7, #20]
 801a5f8:	2b00      	cmp	r3, #0
 801a5fa:	d109      	bne.n	801a610 <xTimerCreateTimerTask+0x74>
 801a5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a600:	f383 8811 	msr	BASEPRI, r3
 801a604:	f3bf 8f6f 	isb	sy
 801a608:	f3bf 8f4f 	dsb	sy
 801a60c:	613b      	str	r3, [r7, #16]
 801a60e:	e7fe      	b.n	801a60e <xTimerCreateTimerTask+0x72>
	return xReturn;
 801a610:	697b      	ldr	r3, [r7, #20]
}
 801a612:	4618      	mov	r0, r3
 801a614:	3718      	adds	r7, #24
 801a616:	46bd      	mov	sp, r7
 801a618:	bd80      	pop	{r7, pc}
 801a61a:	bf00      	nop
 801a61c:	200126ec 	.word	0x200126ec
 801a620:	080301a0 	.word	0x080301a0
 801a624:	0801a75d 	.word	0x0801a75d
 801a628:	200126f0 	.word	0x200126f0

0801a62c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801a62c:	b580      	push	{r7, lr}
 801a62e:	b08a      	sub	sp, #40	; 0x28
 801a630:	af00      	add	r7, sp, #0
 801a632:	60f8      	str	r0, [r7, #12]
 801a634:	60b9      	str	r1, [r7, #8]
 801a636:	607a      	str	r2, [r7, #4]
 801a638:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801a63a:	2300      	movs	r3, #0
 801a63c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801a63e:	68fb      	ldr	r3, [r7, #12]
 801a640:	2b00      	cmp	r3, #0
 801a642:	d109      	bne.n	801a658 <xTimerGenericCommand+0x2c>
 801a644:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a648:	f383 8811 	msr	BASEPRI, r3
 801a64c:	f3bf 8f6f 	isb	sy
 801a650:	f3bf 8f4f 	dsb	sy
 801a654:	623b      	str	r3, [r7, #32]
 801a656:	e7fe      	b.n	801a656 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801a658:	4b19      	ldr	r3, [pc, #100]	; (801a6c0 <xTimerGenericCommand+0x94>)
 801a65a:	681b      	ldr	r3, [r3, #0]
 801a65c:	2b00      	cmp	r3, #0
 801a65e:	d02a      	beq.n	801a6b6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801a660:	68bb      	ldr	r3, [r7, #8]
 801a662:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801a664:	687b      	ldr	r3, [r7, #4]
 801a666:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801a668:	68fb      	ldr	r3, [r7, #12]
 801a66a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801a66c:	68bb      	ldr	r3, [r7, #8]
 801a66e:	2b05      	cmp	r3, #5
 801a670:	dc18      	bgt.n	801a6a4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801a672:	f7ff fdb9 	bl	801a1e8 <xTaskGetSchedulerState>
 801a676:	4603      	mov	r3, r0
 801a678:	2b02      	cmp	r3, #2
 801a67a:	d109      	bne.n	801a690 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801a67c:	4b10      	ldr	r3, [pc, #64]	; (801a6c0 <xTimerGenericCommand+0x94>)
 801a67e:	6818      	ldr	r0, [r3, #0]
 801a680:	f107 0110 	add.w	r1, r7, #16
 801a684:	2300      	movs	r3, #0
 801a686:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a688:	f7fe f98e 	bl	80189a8 <xQueueGenericSend>
 801a68c:	6278      	str	r0, [r7, #36]	; 0x24
 801a68e:	e012      	b.n	801a6b6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801a690:	4b0b      	ldr	r3, [pc, #44]	; (801a6c0 <xTimerGenericCommand+0x94>)
 801a692:	6818      	ldr	r0, [r3, #0]
 801a694:	f107 0110 	add.w	r1, r7, #16
 801a698:	2300      	movs	r3, #0
 801a69a:	2200      	movs	r2, #0
 801a69c:	f7fe f984 	bl	80189a8 <xQueueGenericSend>
 801a6a0:	6278      	str	r0, [r7, #36]	; 0x24
 801a6a2:	e008      	b.n	801a6b6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801a6a4:	4b06      	ldr	r3, [pc, #24]	; (801a6c0 <xTimerGenericCommand+0x94>)
 801a6a6:	6818      	ldr	r0, [r3, #0]
 801a6a8:	f107 0110 	add.w	r1, r7, #16
 801a6ac:	2300      	movs	r3, #0
 801a6ae:	683a      	ldr	r2, [r7, #0]
 801a6b0:	f7fe fa74 	bl	8018b9c <xQueueGenericSendFromISR>
 801a6b4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801a6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801a6b8:	4618      	mov	r0, r3
 801a6ba:	3728      	adds	r7, #40	; 0x28
 801a6bc:	46bd      	mov	sp, r7
 801a6be:	bd80      	pop	{r7, pc}
 801a6c0:	200126ec 	.word	0x200126ec

0801a6c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801a6c4:	b580      	push	{r7, lr}
 801a6c6:	b088      	sub	sp, #32
 801a6c8:	af02      	add	r7, sp, #8
 801a6ca:	6078      	str	r0, [r7, #4]
 801a6cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a6ce:	4b22      	ldr	r3, [pc, #136]	; (801a758 <prvProcessExpiredTimer+0x94>)
 801a6d0:	681b      	ldr	r3, [r3, #0]
 801a6d2:	68db      	ldr	r3, [r3, #12]
 801a6d4:	68db      	ldr	r3, [r3, #12]
 801a6d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801a6d8:	697b      	ldr	r3, [r7, #20]
 801a6da:	3304      	adds	r3, #4
 801a6dc:	4618      	mov	r0, r3
 801a6de:	f7fd fd51 	bl	8018184 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801a6e2:	697b      	ldr	r3, [r7, #20]
 801a6e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801a6e8:	f003 0304 	and.w	r3, r3, #4
 801a6ec:	2b00      	cmp	r3, #0
 801a6ee:	d021      	beq.n	801a734 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801a6f0:	697b      	ldr	r3, [r7, #20]
 801a6f2:	699a      	ldr	r2, [r3, #24]
 801a6f4:	687b      	ldr	r3, [r7, #4]
 801a6f6:	18d1      	adds	r1, r2, r3
 801a6f8:	687b      	ldr	r3, [r7, #4]
 801a6fa:	683a      	ldr	r2, [r7, #0]
 801a6fc:	6978      	ldr	r0, [r7, #20]
 801a6fe:	f000 f8d1 	bl	801a8a4 <prvInsertTimerInActiveList>
 801a702:	4603      	mov	r3, r0
 801a704:	2b00      	cmp	r3, #0
 801a706:	d01e      	beq.n	801a746 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801a708:	2300      	movs	r3, #0
 801a70a:	9300      	str	r3, [sp, #0]
 801a70c:	2300      	movs	r3, #0
 801a70e:	687a      	ldr	r2, [r7, #4]
 801a710:	2100      	movs	r1, #0
 801a712:	6978      	ldr	r0, [r7, #20]
 801a714:	f7ff ff8a 	bl	801a62c <xTimerGenericCommand>
 801a718:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801a71a:	693b      	ldr	r3, [r7, #16]
 801a71c:	2b00      	cmp	r3, #0
 801a71e:	d112      	bne.n	801a746 <prvProcessExpiredTimer+0x82>
 801a720:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a724:	f383 8811 	msr	BASEPRI, r3
 801a728:	f3bf 8f6f 	isb	sy
 801a72c:	f3bf 8f4f 	dsb	sy
 801a730:	60fb      	str	r3, [r7, #12]
 801a732:	e7fe      	b.n	801a732 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801a734:	697b      	ldr	r3, [r7, #20]
 801a736:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801a73a:	f023 0301 	bic.w	r3, r3, #1
 801a73e:	b2da      	uxtb	r2, r3
 801a740:	697b      	ldr	r3, [r7, #20]
 801a742:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801a746:	697b      	ldr	r3, [r7, #20]
 801a748:	6a1b      	ldr	r3, [r3, #32]
 801a74a:	6978      	ldr	r0, [r7, #20]
 801a74c:	4798      	blx	r3
}
 801a74e:	bf00      	nop
 801a750:	3718      	adds	r7, #24
 801a752:	46bd      	mov	sp, r7
 801a754:	bd80      	pop	{r7, pc}
 801a756:	bf00      	nop
 801a758:	200126e4 	.word	0x200126e4

0801a75c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801a75c:	b580      	push	{r7, lr}
 801a75e:	b084      	sub	sp, #16
 801a760:	af00      	add	r7, sp, #0
 801a762:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801a764:	f107 0308 	add.w	r3, r7, #8
 801a768:	4618      	mov	r0, r3
 801a76a:	f000 f857 	bl	801a81c <prvGetNextExpireTime>
 801a76e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801a770:	68bb      	ldr	r3, [r7, #8]
 801a772:	4619      	mov	r1, r3
 801a774:	68f8      	ldr	r0, [r7, #12]
 801a776:	f000 f803 	bl	801a780 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801a77a:	f000 f8d5 	bl	801a928 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801a77e:	e7f1      	b.n	801a764 <prvTimerTask+0x8>

0801a780 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801a780:	b580      	push	{r7, lr}
 801a782:	b084      	sub	sp, #16
 801a784:	af00      	add	r7, sp, #0
 801a786:	6078      	str	r0, [r7, #4]
 801a788:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801a78a:	f7ff f95b 	bl	8019a44 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801a78e:	f107 0308 	add.w	r3, r7, #8
 801a792:	4618      	mov	r0, r3
 801a794:	f000 f866 	bl	801a864 <prvSampleTimeNow>
 801a798:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801a79a:	68bb      	ldr	r3, [r7, #8]
 801a79c:	2b00      	cmp	r3, #0
 801a79e:	d130      	bne.n	801a802 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801a7a0:	683b      	ldr	r3, [r7, #0]
 801a7a2:	2b00      	cmp	r3, #0
 801a7a4:	d10a      	bne.n	801a7bc <prvProcessTimerOrBlockTask+0x3c>
 801a7a6:	687a      	ldr	r2, [r7, #4]
 801a7a8:	68fb      	ldr	r3, [r7, #12]
 801a7aa:	429a      	cmp	r2, r3
 801a7ac:	d806      	bhi.n	801a7bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801a7ae:	f7ff f957 	bl	8019a60 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801a7b2:	68f9      	ldr	r1, [r7, #12]
 801a7b4:	6878      	ldr	r0, [r7, #4]
 801a7b6:	f7ff ff85 	bl	801a6c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801a7ba:	e024      	b.n	801a806 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801a7bc:	683b      	ldr	r3, [r7, #0]
 801a7be:	2b00      	cmp	r3, #0
 801a7c0:	d008      	beq.n	801a7d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801a7c2:	4b13      	ldr	r3, [pc, #76]	; (801a810 <prvProcessTimerOrBlockTask+0x90>)
 801a7c4:	681b      	ldr	r3, [r3, #0]
 801a7c6:	681b      	ldr	r3, [r3, #0]
 801a7c8:	2b00      	cmp	r3, #0
 801a7ca:	d101      	bne.n	801a7d0 <prvProcessTimerOrBlockTask+0x50>
 801a7cc:	2301      	movs	r3, #1
 801a7ce:	e000      	b.n	801a7d2 <prvProcessTimerOrBlockTask+0x52>
 801a7d0:	2300      	movs	r3, #0
 801a7d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801a7d4:	4b0f      	ldr	r3, [pc, #60]	; (801a814 <prvProcessTimerOrBlockTask+0x94>)
 801a7d6:	6818      	ldr	r0, [r3, #0]
 801a7d8:	687a      	ldr	r2, [r7, #4]
 801a7da:	68fb      	ldr	r3, [r7, #12]
 801a7dc:	1ad3      	subs	r3, r2, r3
 801a7de:	683a      	ldr	r2, [r7, #0]
 801a7e0:	4619      	mov	r1, r3
 801a7e2:	f7fe fef7 	bl	80195d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801a7e6:	f7ff f93b 	bl	8019a60 <xTaskResumeAll>
 801a7ea:	4603      	mov	r3, r0
 801a7ec:	2b00      	cmp	r3, #0
 801a7ee:	d10a      	bne.n	801a806 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801a7f0:	4b09      	ldr	r3, [pc, #36]	; (801a818 <prvProcessTimerOrBlockTask+0x98>)
 801a7f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a7f6:	601a      	str	r2, [r3, #0]
 801a7f8:	f3bf 8f4f 	dsb	sy
 801a7fc:	f3bf 8f6f 	isb	sy
}
 801a800:	e001      	b.n	801a806 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801a802:	f7ff f92d 	bl	8019a60 <xTaskResumeAll>
}
 801a806:	bf00      	nop
 801a808:	3710      	adds	r7, #16
 801a80a:	46bd      	mov	sp, r7
 801a80c:	bd80      	pop	{r7, pc}
 801a80e:	bf00      	nop
 801a810:	200126e8 	.word	0x200126e8
 801a814:	200126ec 	.word	0x200126ec
 801a818:	e000ed04 	.word	0xe000ed04

0801a81c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801a81c:	b480      	push	{r7}
 801a81e:	b085      	sub	sp, #20
 801a820:	af00      	add	r7, sp, #0
 801a822:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801a824:	4b0e      	ldr	r3, [pc, #56]	; (801a860 <prvGetNextExpireTime+0x44>)
 801a826:	681b      	ldr	r3, [r3, #0]
 801a828:	681b      	ldr	r3, [r3, #0]
 801a82a:	2b00      	cmp	r3, #0
 801a82c:	d101      	bne.n	801a832 <prvGetNextExpireTime+0x16>
 801a82e:	2201      	movs	r2, #1
 801a830:	e000      	b.n	801a834 <prvGetNextExpireTime+0x18>
 801a832:	2200      	movs	r2, #0
 801a834:	687b      	ldr	r3, [r7, #4]
 801a836:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801a838:	687b      	ldr	r3, [r7, #4]
 801a83a:	681b      	ldr	r3, [r3, #0]
 801a83c:	2b00      	cmp	r3, #0
 801a83e:	d105      	bne.n	801a84c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801a840:	4b07      	ldr	r3, [pc, #28]	; (801a860 <prvGetNextExpireTime+0x44>)
 801a842:	681b      	ldr	r3, [r3, #0]
 801a844:	68db      	ldr	r3, [r3, #12]
 801a846:	681b      	ldr	r3, [r3, #0]
 801a848:	60fb      	str	r3, [r7, #12]
 801a84a:	e001      	b.n	801a850 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801a84c:	2300      	movs	r3, #0
 801a84e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801a850:	68fb      	ldr	r3, [r7, #12]
}
 801a852:	4618      	mov	r0, r3
 801a854:	3714      	adds	r7, #20
 801a856:	46bd      	mov	sp, r7
 801a858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a85c:	4770      	bx	lr
 801a85e:	bf00      	nop
 801a860:	200126e4 	.word	0x200126e4

0801a864 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801a864:	b580      	push	{r7, lr}
 801a866:	b084      	sub	sp, #16
 801a868:	af00      	add	r7, sp, #0
 801a86a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801a86c:	f7ff f994 	bl	8019b98 <xTaskGetTickCount>
 801a870:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801a872:	4b0b      	ldr	r3, [pc, #44]	; (801a8a0 <prvSampleTimeNow+0x3c>)
 801a874:	681b      	ldr	r3, [r3, #0]
 801a876:	68fa      	ldr	r2, [r7, #12]
 801a878:	429a      	cmp	r2, r3
 801a87a:	d205      	bcs.n	801a888 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801a87c:	f000 f930 	bl	801aae0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801a880:	687b      	ldr	r3, [r7, #4]
 801a882:	2201      	movs	r2, #1
 801a884:	601a      	str	r2, [r3, #0]
 801a886:	e002      	b.n	801a88e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801a888:	687b      	ldr	r3, [r7, #4]
 801a88a:	2200      	movs	r2, #0
 801a88c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801a88e:	4a04      	ldr	r2, [pc, #16]	; (801a8a0 <prvSampleTimeNow+0x3c>)
 801a890:	68fb      	ldr	r3, [r7, #12]
 801a892:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801a894:	68fb      	ldr	r3, [r7, #12]
}
 801a896:	4618      	mov	r0, r3
 801a898:	3710      	adds	r7, #16
 801a89a:	46bd      	mov	sp, r7
 801a89c:	bd80      	pop	{r7, pc}
 801a89e:	bf00      	nop
 801a8a0:	200126f4 	.word	0x200126f4

0801a8a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801a8a4:	b580      	push	{r7, lr}
 801a8a6:	b086      	sub	sp, #24
 801a8a8:	af00      	add	r7, sp, #0
 801a8aa:	60f8      	str	r0, [r7, #12]
 801a8ac:	60b9      	str	r1, [r7, #8]
 801a8ae:	607a      	str	r2, [r7, #4]
 801a8b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801a8b2:	2300      	movs	r3, #0
 801a8b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801a8b6:	68fb      	ldr	r3, [r7, #12]
 801a8b8:	68ba      	ldr	r2, [r7, #8]
 801a8ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801a8bc:	68fb      	ldr	r3, [r7, #12]
 801a8be:	68fa      	ldr	r2, [r7, #12]
 801a8c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801a8c2:	68ba      	ldr	r2, [r7, #8]
 801a8c4:	687b      	ldr	r3, [r7, #4]
 801a8c6:	429a      	cmp	r2, r3
 801a8c8:	d812      	bhi.n	801a8f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a8ca:	687a      	ldr	r2, [r7, #4]
 801a8cc:	683b      	ldr	r3, [r7, #0]
 801a8ce:	1ad2      	subs	r2, r2, r3
 801a8d0:	68fb      	ldr	r3, [r7, #12]
 801a8d2:	699b      	ldr	r3, [r3, #24]
 801a8d4:	429a      	cmp	r2, r3
 801a8d6:	d302      	bcc.n	801a8de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801a8d8:	2301      	movs	r3, #1
 801a8da:	617b      	str	r3, [r7, #20]
 801a8dc:	e01b      	b.n	801a916 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801a8de:	4b10      	ldr	r3, [pc, #64]	; (801a920 <prvInsertTimerInActiveList+0x7c>)
 801a8e0:	681a      	ldr	r2, [r3, #0]
 801a8e2:	68fb      	ldr	r3, [r7, #12]
 801a8e4:	3304      	adds	r3, #4
 801a8e6:	4619      	mov	r1, r3
 801a8e8:	4610      	mov	r0, r2
 801a8ea:	f7fd fc12 	bl	8018112 <vListInsert>
 801a8ee:	e012      	b.n	801a916 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801a8f0:	687a      	ldr	r2, [r7, #4]
 801a8f2:	683b      	ldr	r3, [r7, #0]
 801a8f4:	429a      	cmp	r2, r3
 801a8f6:	d206      	bcs.n	801a906 <prvInsertTimerInActiveList+0x62>
 801a8f8:	68ba      	ldr	r2, [r7, #8]
 801a8fa:	683b      	ldr	r3, [r7, #0]
 801a8fc:	429a      	cmp	r2, r3
 801a8fe:	d302      	bcc.n	801a906 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801a900:	2301      	movs	r3, #1
 801a902:	617b      	str	r3, [r7, #20]
 801a904:	e007      	b.n	801a916 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801a906:	4b07      	ldr	r3, [pc, #28]	; (801a924 <prvInsertTimerInActiveList+0x80>)
 801a908:	681a      	ldr	r2, [r3, #0]
 801a90a:	68fb      	ldr	r3, [r7, #12]
 801a90c:	3304      	adds	r3, #4
 801a90e:	4619      	mov	r1, r3
 801a910:	4610      	mov	r0, r2
 801a912:	f7fd fbfe 	bl	8018112 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801a916:	697b      	ldr	r3, [r7, #20]
}
 801a918:	4618      	mov	r0, r3
 801a91a:	3718      	adds	r7, #24
 801a91c:	46bd      	mov	sp, r7
 801a91e:	bd80      	pop	{r7, pc}
 801a920:	200126e8 	.word	0x200126e8
 801a924:	200126e4 	.word	0x200126e4

0801a928 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801a928:	b580      	push	{r7, lr}
 801a92a:	b08e      	sub	sp, #56	; 0x38
 801a92c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801a92e:	e0c6      	b.n	801aabe <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801a930:	687b      	ldr	r3, [r7, #4]
 801a932:	2b00      	cmp	r3, #0
 801a934:	da17      	bge.n	801a966 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801a936:	1d3b      	adds	r3, r7, #4
 801a938:	3304      	adds	r3, #4
 801a93a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801a93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a93e:	2b00      	cmp	r3, #0
 801a940:	d109      	bne.n	801a956 <prvProcessReceivedCommands+0x2e>
 801a942:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a946:	f383 8811 	msr	BASEPRI, r3
 801a94a:	f3bf 8f6f 	isb	sy
 801a94e:	f3bf 8f4f 	dsb	sy
 801a952:	61fb      	str	r3, [r7, #28]
 801a954:	e7fe      	b.n	801a954 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801a956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a958:	681b      	ldr	r3, [r3, #0]
 801a95a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a95c:	6850      	ldr	r0, [r2, #4]
 801a95e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a960:	6892      	ldr	r2, [r2, #8]
 801a962:	4611      	mov	r1, r2
 801a964:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801a966:	687b      	ldr	r3, [r7, #4]
 801a968:	2b00      	cmp	r3, #0
 801a96a:	f2c0 80a7 	blt.w	801aabc <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801a96e:	68fb      	ldr	r3, [r7, #12]
 801a970:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801a972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a974:	695b      	ldr	r3, [r3, #20]
 801a976:	2b00      	cmp	r3, #0
 801a978:	d004      	beq.n	801a984 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801a97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a97c:	3304      	adds	r3, #4
 801a97e:	4618      	mov	r0, r3
 801a980:	f7fd fc00 	bl	8018184 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801a984:	463b      	mov	r3, r7
 801a986:	4618      	mov	r0, r3
 801a988:	f7ff ff6c 	bl	801a864 <prvSampleTimeNow>
 801a98c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801a98e:	687b      	ldr	r3, [r7, #4]
 801a990:	2b09      	cmp	r3, #9
 801a992:	f200 8094 	bhi.w	801aabe <prvProcessReceivedCommands+0x196>
 801a996:	a201      	add	r2, pc, #4	; (adr r2, 801a99c <prvProcessReceivedCommands+0x74>)
 801a998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a99c:	0801a9c5 	.word	0x0801a9c5
 801a9a0:	0801a9c5 	.word	0x0801a9c5
 801a9a4:	0801a9c5 	.word	0x0801a9c5
 801a9a8:	0801aa37 	.word	0x0801aa37
 801a9ac:	0801aa4b 	.word	0x0801aa4b
 801a9b0:	0801aa93 	.word	0x0801aa93
 801a9b4:	0801a9c5 	.word	0x0801a9c5
 801a9b8:	0801a9c5 	.word	0x0801a9c5
 801a9bc:	0801aa37 	.word	0x0801aa37
 801a9c0:	0801aa4b 	.word	0x0801aa4b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801a9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801a9ca:	f043 0301 	orr.w	r3, r3, #1
 801a9ce:	b2da      	uxtb	r2, r3
 801a9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801a9d6:	68ba      	ldr	r2, [r7, #8]
 801a9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9da:	699b      	ldr	r3, [r3, #24]
 801a9dc:	18d1      	adds	r1, r2, r3
 801a9de:	68bb      	ldr	r3, [r7, #8]
 801a9e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a9e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a9e4:	f7ff ff5e 	bl	801a8a4 <prvInsertTimerInActiveList>
 801a9e8:	4603      	mov	r3, r0
 801a9ea:	2b00      	cmp	r3, #0
 801a9ec:	d067      	beq.n	801aabe <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801a9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9f0:	6a1b      	ldr	r3, [r3, #32]
 801a9f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a9f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801a9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801a9fc:	f003 0304 	and.w	r3, r3, #4
 801aa00:	2b00      	cmp	r3, #0
 801aa02:	d05c      	beq.n	801aabe <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801aa04:	68ba      	ldr	r2, [r7, #8]
 801aa06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa08:	699b      	ldr	r3, [r3, #24]
 801aa0a:	441a      	add	r2, r3
 801aa0c:	2300      	movs	r3, #0
 801aa0e:	9300      	str	r3, [sp, #0]
 801aa10:	2300      	movs	r3, #0
 801aa12:	2100      	movs	r1, #0
 801aa14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801aa16:	f7ff fe09 	bl	801a62c <xTimerGenericCommand>
 801aa1a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801aa1c:	6a3b      	ldr	r3, [r7, #32]
 801aa1e:	2b00      	cmp	r3, #0
 801aa20:	d14d      	bne.n	801aabe <prvProcessReceivedCommands+0x196>
 801aa22:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aa26:	f383 8811 	msr	BASEPRI, r3
 801aa2a:	f3bf 8f6f 	isb	sy
 801aa2e:	f3bf 8f4f 	dsb	sy
 801aa32:	61bb      	str	r3, [r7, #24]
 801aa34:	e7fe      	b.n	801aa34 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801aa36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801aa3c:	f023 0301 	bic.w	r3, r3, #1
 801aa40:	b2da      	uxtb	r2, r3
 801aa42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801aa48:	e039      	b.n	801aabe <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801aa4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801aa50:	f043 0301 	orr.w	r3, r3, #1
 801aa54:	b2da      	uxtb	r2, r3
 801aa56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa58:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801aa5c:	68ba      	ldr	r2, [r7, #8]
 801aa5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa60:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801aa62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa64:	699b      	ldr	r3, [r3, #24]
 801aa66:	2b00      	cmp	r3, #0
 801aa68:	d109      	bne.n	801aa7e <prvProcessReceivedCommands+0x156>
 801aa6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aa6e:	f383 8811 	msr	BASEPRI, r3
 801aa72:	f3bf 8f6f 	isb	sy
 801aa76:	f3bf 8f4f 	dsb	sy
 801aa7a:	617b      	str	r3, [r7, #20]
 801aa7c:	e7fe      	b.n	801aa7c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801aa7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa80:	699a      	ldr	r2, [r3, #24]
 801aa82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa84:	18d1      	adds	r1, r2, r3
 801aa86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801aa8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801aa8c:	f7ff ff0a 	bl	801a8a4 <prvInsertTimerInActiveList>
					break;
 801aa90:	e015      	b.n	801aabe <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801aa92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801aa98:	f003 0302 	and.w	r3, r3, #2
 801aa9c:	2b00      	cmp	r3, #0
 801aa9e:	d103      	bne.n	801aaa8 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 801aaa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801aaa2:	f7fd f9d1 	bl	8017e48 <vPortFree>
 801aaa6:	e00a      	b.n	801aabe <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801aaa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aaaa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801aaae:	f023 0301 	bic.w	r3, r3, #1
 801aab2:	b2da      	uxtb	r2, r3
 801aab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aab6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801aaba:	e000      	b.n	801aabe <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801aabc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801aabe:	4b07      	ldr	r3, [pc, #28]	; (801aadc <prvProcessReceivedCommands+0x1b4>)
 801aac0:	681b      	ldr	r3, [r3, #0]
 801aac2:	1d39      	adds	r1, r7, #4
 801aac4:	2200      	movs	r2, #0
 801aac6:	4618      	mov	r0, r3
 801aac8:	f7fe f986 	bl	8018dd8 <xQueueReceive>
 801aacc:	4603      	mov	r3, r0
 801aace:	2b00      	cmp	r3, #0
 801aad0:	f47f af2e 	bne.w	801a930 <prvProcessReceivedCommands+0x8>
	}
}
 801aad4:	bf00      	nop
 801aad6:	3730      	adds	r7, #48	; 0x30
 801aad8:	46bd      	mov	sp, r7
 801aada:	bd80      	pop	{r7, pc}
 801aadc:	200126ec 	.word	0x200126ec

0801aae0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801aae0:	b580      	push	{r7, lr}
 801aae2:	b088      	sub	sp, #32
 801aae4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801aae6:	e047      	b.n	801ab78 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801aae8:	4b2d      	ldr	r3, [pc, #180]	; (801aba0 <prvSwitchTimerLists+0xc0>)
 801aaea:	681b      	ldr	r3, [r3, #0]
 801aaec:	68db      	ldr	r3, [r3, #12]
 801aaee:	681b      	ldr	r3, [r3, #0]
 801aaf0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801aaf2:	4b2b      	ldr	r3, [pc, #172]	; (801aba0 <prvSwitchTimerLists+0xc0>)
 801aaf4:	681b      	ldr	r3, [r3, #0]
 801aaf6:	68db      	ldr	r3, [r3, #12]
 801aaf8:	68db      	ldr	r3, [r3, #12]
 801aafa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801aafc:	68fb      	ldr	r3, [r7, #12]
 801aafe:	3304      	adds	r3, #4
 801ab00:	4618      	mov	r0, r3
 801ab02:	f7fd fb3f 	bl	8018184 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801ab06:	68fb      	ldr	r3, [r7, #12]
 801ab08:	6a1b      	ldr	r3, [r3, #32]
 801ab0a:	68f8      	ldr	r0, [r7, #12]
 801ab0c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801ab0e:	68fb      	ldr	r3, [r7, #12]
 801ab10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ab14:	f003 0304 	and.w	r3, r3, #4
 801ab18:	2b00      	cmp	r3, #0
 801ab1a:	d02d      	beq.n	801ab78 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801ab1c:	68fb      	ldr	r3, [r7, #12]
 801ab1e:	699b      	ldr	r3, [r3, #24]
 801ab20:	693a      	ldr	r2, [r7, #16]
 801ab22:	4413      	add	r3, r2
 801ab24:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801ab26:	68ba      	ldr	r2, [r7, #8]
 801ab28:	693b      	ldr	r3, [r7, #16]
 801ab2a:	429a      	cmp	r2, r3
 801ab2c:	d90e      	bls.n	801ab4c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801ab2e:	68fb      	ldr	r3, [r7, #12]
 801ab30:	68ba      	ldr	r2, [r7, #8]
 801ab32:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801ab34:	68fb      	ldr	r3, [r7, #12]
 801ab36:	68fa      	ldr	r2, [r7, #12]
 801ab38:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801ab3a:	4b19      	ldr	r3, [pc, #100]	; (801aba0 <prvSwitchTimerLists+0xc0>)
 801ab3c:	681a      	ldr	r2, [r3, #0]
 801ab3e:	68fb      	ldr	r3, [r7, #12]
 801ab40:	3304      	adds	r3, #4
 801ab42:	4619      	mov	r1, r3
 801ab44:	4610      	mov	r0, r2
 801ab46:	f7fd fae4 	bl	8018112 <vListInsert>
 801ab4a:	e015      	b.n	801ab78 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801ab4c:	2300      	movs	r3, #0
 801ab4e:	9300      	str	r3, [sp, #0]
 801ab50:	2300      	movs	r3, #0
 801ab52:	693a      	ldr	r2, [r7, #16]
 801ab54:	2100      	movs	r1, #0
 801ab56:	68f8      	ldr	r0, [r7, #12]
 801ab58:	f7ff fd68 	bl	801a62c <xTimerGenericCommand>
 801ab5c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801ab5e:	687b      	ldr	r3, [r7, #4]
 801ab60:	2b00      	cmp	r3, #0
 801ab62:	d109      	bne.n	801ab78 <prvSwitchTimerLists+0x98>
 801ab64:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ab68:	f383 8811 	msr	BASEPRI, r3
 801ab6c:	f3bf 8f6f 	isb	sy
 801ab70:	f3bf 8f4f 	dsb	sy
 801ab74:	603b      	str	r3, [r7, #0]
 801ab76:	e7fe      	b.n	801ab76 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801ab78:	4b09      	ldr	r3, [pc, #36]	; (801aba0 <prvSwitchTimerLists+0xc0>)
 801ab7a:	681b      	ldr	r3, [r3, #0]
 801ab7c:	681b      	ldr	r3, [r3, #0]
 801ab7e:	2b00      	cmp	r3, #0
 801ab80:	d1b2      	bne.n	801aae8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801ab82:	4b07      	ldr	r3, [pc, #28]	; (801aba0 <prvSwitchTimerLists+0xc0>)
 801ab84:	681b      	ldr	r3, [r3, #0]
 801ab86:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801ab88:	4b06      	ldr	r3, [pc, #24]	; (801aba4 <prvSwitchTimerLists+0xc4>)
 801ab8a:	681b      	ldr	r3, [r3, #0]
 801ab8c:	4a04      	ldr	r2, [pc, #16]	; (801aba0 <prvSwitchTimerLists+0xc0>)
 801ab8e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801ab90:	4a04      	ldr	r2, [pc, #16]	; (801aba4 <prvSwitchTimerLists+0xc4>)
 801ab92:	697b      	ldr	r3, [r7, #20]
 801ab94:	6013      	str	r3, [r2, #0]
}
 801ab96:	bf00      	nop
 801ab98:	3718      	adds	r7, #24
 801ab9a:	46bd      	mov	sp, r7
 801ab9c:	bd80      	pop	{r7, pc}
 801ab9e:	bf00      	nop
 801aba0:	200126e4 	.word	0x200126e4
 801aba4:	200126e8 	.word	0x200126e8

0801aba8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801aba8:	b580      	push	{r7, lr}
 801abaa:	b082      	sub	sp, #8
 801abac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801abae:	f7fd fc3d 	bl	801842c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801abb2:	4b15      	ldr	r3, [pc, #84]	; (801ac08 <prvCheckForValidListAndQueue+0x60>)
 801abb4:	681b      	ldr	r3, [r3, #0]
 801abb6:	2b00      	cmp	r3, #0
 801abb8:	d120      	bne.n	801abfc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801abba:	4814      	ldr	r0, [pc, #80]	; (801ac0c <prvCheckForValidListAndQueue+0x64>)
 801abbc:	f7fd fa58 	bl	8018070 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801abc0:	4813      	ldr	r0, [pc, #76]	; (801ac10 <prvCheckForValidListAndQueue+0x68>)
 801abc2:	f7fd fa55 	bl	8018070 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801abc6:	4b13      	ldr	r3, [pc, #76]	; (801ac14 <prvCheckForValidListAndQueue+0x6c>)
 801abc8:	4a10      	ldr	r2, [pc, #64]	; (801ac0c <prvCheckForValidListAndQueue+0x64>)
 801abca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801abcc:	4b12      	ldr	r3, [pc, #72]	; (801ac18 <prvCheckForValidListAndQueue+0x70>)
 801abce:	4a10      	ldr	r2, [pc, #64]	; (801ac10 <prvCheckForValidListAndQueue+0x68>)
 801abd0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801abd2:	2300      	movs	r3, #0
 801abd4:	9300      	str	r3, [sp, #0]
 801abd6:	4b11      	ldr	r3, [pc, #68]	; (801ac1c <prvCheckForValidListAndQueue+0x74>)
 801abd8:	4a11      	ldr	r2, [pc, #68]	; (801ac20 <prvCheckForValidListAndQueue+0x78>)
 801abda:	2110      	movs	r1, #16
 801abdc:	200a      	movs	r0, #10
 801abde:	f7fd fda7 	bl	8018730 <xQueueGenericCreateStatic>
 801abe2:	4602      	mov	r2, r0
 801abe4:	4b08      	ldr	r3, [pc, #32]	; (801ac08 <prvCheckForValidListAndQueue+0x60>)
 801abe6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801abe8:	4b07      	ldr	r3, [pc, #28]	; (801ac08 <prvCheckForValidListAndQueue+0x60>)
 801abea:	681b      	ldr	r3, [r3, #0]
 801abec:	2b00      	cmp	r3, #0
 801abee:	d005      	beq.n	801abfc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801abf0:	4b05      	ldr	r3, [pc, #20]	; (801ac08 <prvCheckForValidListAndQueue+0x60>)
 801abf2:	681b      	ldr	r3, [r3, #0]
 801abf4:	490b      	ldr	r1, [pc, #44]	; (801ac24 <prvCheckForValidListAndQueue+0x7c>)
 801abf6:	4618      	mov	r0, r3
 801abf8:	f7fe fc9a 	bl	8019530 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801abfc:	f7fd fc44 	bl	8018488 <vPortExitCritical>
}
 801ac00:	bf00      	nop
 801ac02:	46bd      	mov	sp, r7
 801ac04:	bd80      	pop	{r7, pc}
 801ac06:	bf00      	nop
 801ac08:	200126ec 	.word	0x200126ec
 801ac0c:	200126bc 	.word	0x200126bc
 801ac10:	200126d0 	.word	0x200126d0
 801ac14:	200126e4 	.word	0x200126e4
 801ac18:	200126e8 	.word	0x200126e8
 801ac1c:	20012798 	.word	0x20012798
 801ac20:	200126f8 	.word	0x200126f8
 801ac24:	080301a8 	.word	0x080301a8

0801ac28 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 801ac28:	8880      	ldrh	r0, [r0, #4]
 801ac2a:	4770      	bx	lr

0801ac2c <_ZN8touchgfx17AbstractPartition5clearEv>:
 801ac2c:	2300      	movs	r3, #0
 801ac2e:	8083      	strh	r3, [r0, #4]
 801ac30:	4770      	bx	lr
	...

0801ac34 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 801ac34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac36:	6803      	ldr	r3, [r0, #0]
 801ac38:	4605      	mov	r5, r0
 801ac3a:	460e      	mov	r6, r1
 801ac3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ac3e:	2100      	movs	r1, #0
 801ac40:	4798      	blx	r3
 801ac42:	682b      	ldr	r3, [r5, #0]
 801ac44:	4604      	mov	r4, r0
 801ac46:	6a1b      	ldr	r3, [r3, #32]
 801ac48:	4628      	mov	r0, r5
 801ac4a:	4798      	blx	r3
 801ac4c:	88ab      	ldrh	r3, [r5, #4]
 801ac4e:	1b34      	subs	r4, r6, r4
 801ac50:	b2a4      	uxth	r4, r4
 801ac52:	fbb4 f4f0 	udiv	r4, r4, r0
 801ac56:	42a3      	cmp	r3, r4
 801ac58:	d805      	bhi.n	801ac66 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 801ac5a:	4b0e      	ldr	r3, [pc, #56]	; (801ac94 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 801ac5c:	4a0e      	ldr	r2, [pc, #56]	; (801ac98 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 801ac5e:	2120      	movs	r1, #32
 801ac60:	480e      	ldr	r0, [pc, #56]	; (801ac9c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 801ac62:	f013 fb39 	bl	802e2d8 <__assert_func>
 801ac66:	682b      	ldr	r3, [r5, #0]
 801ac68:	2100      	movs	r1, #0
 801ac6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ac6c:	4628      	mov	r0, r5
 801ac6e:	4798      	blx	r3
 801ac70:	682b      	ldr	r3, [r5, #0]
 801ac72:	4607      	mov	r7, r0
 801ac74:	6a1b      	ldr	r3, [r3, #32]
 801ac76:	4628      	mov	r0, r5
 801ac78:	4798      	blx	r3
 801ac7a:	1bf3      	subs	r3, r6, r7
 801ac7c:	b29b      	uxth	r3, r3
 801ac7e:	fbb3 f2f0 	udiv	r2, r3, r0
 801ac82:	fb02 3010 	mls	r0, r2, r0, r3
 801ac86:	b118      	cbz	r0, 801ac90 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 801ac88:	4b05      	ldr	r3, [pc, #20]	; (801aca0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 801ac8a:	4a03      	ldr	r2, [pc, #12]	; (801ac98 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 801ac8c:	2121      	movs	r1, #33	; 0x21
 801ac8e:	e7e7      	b.n	801ac60 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 801ac90:	4620      	mov	r0, r4
 801ac92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ac94:	08031d84 	.word	0x08031d84
 801ac98:	08031ef2 	.word	0x08031ef2
 801ac9c:	08031d99 	.word	0x08031d99
 801aca0:	08031dc7 	.word	0x08031dc7

0801aca4 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 801aca4:	b538      	push	{r3, r4, r5, lr}
 801aca6:	6803      	ldr	r3, [r0, #0]
 801aca8:	6a1b      	ldr	r3, [r3, #32]
 801acaa:	460d      	mov	r5, r1
 801acac:	4604      	mov	r4, r0
 801acae:	4798      	blx	r3
 801acb0:	4285      	cmp	r5, r0
 801acb2:	d905      	bls.n	801acc0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 801acb4:	4b0c      	ldr	r3, [pc, #48]	; (801ace8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 801acb6:	4a0d      	ldr	r2, [pc, #52]	; (801acec <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 801acb8:	2132      	movs	r1, #50	; 0x32
 801acba:	480d      	ldr	r0, [pc, #52]	; (801acf0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 801acbc:	f013 fb0c 	bl	802e2d8 <__assert_func>
 801acc0:	6823      	ldr	r3, [r4, #0]
 801acc2:	88a5      	ldrh	r5, [r4, #4]
 801acc4:	69db      	ldr	r3, [r3, #28]
 801acc6:	4620      	mov	r0, r4
 801acc8:	4798      	blx	r3
 801acca:	4285      	cmp	r5, r0
 801accc:	d303      	bcc.n	801acd6 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 801acce:	4b09      	ldr	r3, [pc, #36]	; (801acf4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 801acd0:	4a06      	ldr	r2, [pc, #24]	; (801acec <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 801acd2:	2133      	movs	r1, #51	; 0x33
 801acd4:	e7f1      	b.n	801acba <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 801acd6:	6823      	ldr	r3, [r4, #0]
 801acd8:	88a1      	ldrh	r1, [r4, #4]
 801acda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801acdc:	4620      	mov	r0, r4
 801acde:	4798      	blx	r3
 801ace0:	88a3      	ldrh	r3, [r4, #4]
 801ace2:	3301      	adds	r3, #1
 801ace4:	80a3      	strh	r3, [r4, #4]
 801ace6:	bd38      	pop	{r3, r4, r5, pc}
 801ace8:	08031e41 	.word	0x08031e41
 801acec:	08031f35 	.word	0x08031f35
 801acf0:	08031d99 	.word	0x08031d99
 801acf4:	08031e58 	.word	0x08031e58

0801acf8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 801acf8:	b570      	push	{r4, r5, r6, lr}
 801acfa:	6803      	ldr	r3, [r0, #0]
 801acfc:	6a1b      	ldr	r3, [r3, #32]
 801acfe:	4616      	mov	r6, r2
 801ad00:	4604      	mov	r4, r0
 801ad02:	460d      	mov	r5, r1
 801ad04:	4798      	blx	r3
 801ad06:	4286      	cmp	r6, r0
 801ad08:	d905      	bls.n	801ad16 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 801ad0a:	4b06      	ldr	r3, [pc, #24]	; (801ad24 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 801ad0c:	4a06      	ldr	r2, [pc, #24]	; (801ad28 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 801ad0e:	4807      	ldr	r0, [pc, #28]	; (801ad2c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 801ad10:	213c      	movs	r1, #60	; 0x3c
 801ad12:	f013 fae1 	bl	802e2d8 <__assert_func>
 801ad16:	6823      	ldr	r3, [r4, #0]
 801ad18:	4629      	mov	r1, r5
 801ad1a:	4620      	mov	r0, r4
 801ad1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ad1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ad22:	4718      	bx	r3
 801ad24:	08031e41 	.word	0x08031e41
 801ad28:	08031ea8 	.word	0x08031ea8
 801ad2c:	08031d99 	.word	0x08031d99

0801ad30 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 801ad30:	4770      	bx	lr
	...

0801ad34 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 801ad34:	4a02      	ldr	r2, [pc, #8]	; (801ad40 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801ad36:	6002      	str	r2, [r0, #0]
 801ad38:	2200      	movs	r2, #0
 801ad3a:	8082      	strh	r2, [r0, #4]
 801ad3c:	4770      	bx	lr
 801ad3e:	bf00      	nop
 801ad40:	08031e7c 	.word	0x08031e7c

0801ad44 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 801ad44:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801ad46:	2000      	movs	r0, #0
 801ad48:	b12b      	cbz	r3, 801ad56 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801ad4a:	b920      	cbnz	r0, 801ad56 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801ad4c:	1a5a      	subs	r2, r3, r1
 801ad4e:	4250      	negs	r0, r2
 801ad50:	4150      	adcs	r0, r2
 801ad52:	699b      	ldr	r3, [r3, #24]
 801ad54:	e7f8      	b.n	801ad48 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 801ad56:	4770      	bx	lr

0801ad58 <_ZN8touchgfx9Container9removeAllEv>:
 801ad58:	2200      	movs	r2, #0
 801ad5a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801ad5c:	b123      	cbz	r3, 801ad68 <_ZN8touchgfx9Container9removeAllEv+0x10>
 801ad5e:	6999      	ldr	r1, [r3, #24]
 801ad60:	6281      	str	r1, [r0, #40]	; 0x28
 801ad62:	e9c3 2205 	strd	r2, r2, [r3, #20]
 801ad66:	e7f8      	b.n	801ad5a <_ZN8touchgfx9Container9removeAllEv+0x2>
 801ad68:	4770      	bx	lr

0801ad6a <_ZN8touchgfx9Container6unlinkEv>:
 801ad6a:	2300      	movs	r3, #0
 801ad6c:	6283      	str	r3, [r0, #40]	; 0x28
 801ad6e:	4770      	bx	lr

0801ad70 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 801ad70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad74:	461f      	mov	r7, r3
 801ad76:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 801ad7a:	460d      	mov	r5, r1
 801ad7c:	4616      	mov	r6, r2
 801ad7e:	b103      	cbz	r3, 801ad82 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 801ad80:	6038      	str	r0, [r7, #0]
 801ad82:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801ad84:	b314      	cbz	r4, 801adcc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 801ad86:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801ad8a:	b1eb      	cbz	r3, 801adc8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801ad8c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801ad90:	428d      	cmp	r5, r1
 801ad92:	db19      	blt.n	801adc8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801ad94:	8923      	ldrh	r3, [r4, #8]
 801ad96:	b289      	uxth	r1, r1
 801ad98:	440b      	add	r3, r1
 801ad9a:	b21b      	sxth	r3, r3
 801ad9c:	429d      	cmp	r5, r3
 801ad9e:	da13      	bge.n	801adc8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801ada0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801ada4:	4296      	cmp	r6, r2
 801ada6:	db0f      	blt.n	801adc8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801ada8:	8963      	ldrh	r3, [r4, #10]
 801adaa:	b292      	uxth	r2, r2
 801adac:	4413      	add	r3, r2
 801adae:	b21b      	sxth	r3, r3
 801adb0:	429e      	cmp	r6, r3
 801adb2:	da09      	bge.n	801adc8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801adb4:	6823      	ldr	r3, [r4, #0]
 801adb6:	1ab2      	subs	r2, r6, r2
 801adb8:	1a69      	subs	r1, r5, r1
 801adba:	f8d3 801c 	ldr.w	r8, [r3, #28]
 801adbe:	b212      	sxth	r2, r2
 801adc0:	463b      	mov	r3, r7
 801adc2:	b209      	sxth	r1, r1
 801adc4:	4620      	mov	r0, r4
 801adc6:	47c0      	blx	r8
 801adc8:	69a4      	ldr	r4, [r4, #24]
 801adca:	e7db      	b.n	801ad84 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 801adcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801add0 <_ZNK8touchgfx9Container12getSolidRectEv>:
 801add0:	2200      	movs	r2, #0
 801add2:	8002      	strh	r2, [r0, #0]
 801add4:	8042      	strh	r2, [r0, #2]
 801add6:	8082      	strh	r2, [r0, #4]
 801add8:	80c2      	strh	r2, [r0, #6]
 801adda:	4770      	bx	lr

0801addc <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 801addc:	b570      	push	{r4, r5, r6, lr}
 801adde:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801ade0:	460d      	mov	r5, r1
 801ade2:	4616      	mov	r6, r2
 801ade4:	b13c      	cbz	r4, 801adf6 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 801ade6:	6823      	ldr	r3, [r4, #0]
 801ade8:	4620      	mov	r0, r4
 801adea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801adec:	4632      	mov	r2, r6
 801adee:	4629      	mov	r1, r5
 801adf0:	4798      	blx	r3
 801adf2:	69a4      	ldr	r4, [r4, #24]
 801adf4:	e7f6      	b.n	801ade4 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 801adf6:	bd70      	pop	{r4, r5, r6, pc}

0801adf8 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 801adf8:	b538      	push	{r3, r4, r5, lr}
 801adfa:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801adfc:	460d      	mov	r5, r1
 801adfe:	b134      	cbz	r4, 801ae0e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 801ae00:	682b      	ldr	r3, [r5, #0]
 801ae02:	4621      	mov	r1, r4
 801ae04:	689b      	ldr	r3, [r3, #8]
 801ae06:	4628      	mov	r0, r5
 801ae08:	4798      	blx	r3
 801ae0a:	69a4      	ldr	r4, [r4, #24]
 801ae0c:	e7f7      	b.n	801adfe <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 801ae0e:	bd38      	pop	{r3, r4, r5, pc}

0801ae10 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 801ae10:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801ae12:	b19b      	cbz	r3, 801ae3c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801ae14:	428b      	cmp	r3, r1
 801ae16:	d109      	bne.n	801ae2c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 801ae18:	699a      	ldr	r2, [r3, #24]
 801ae1a:	2100      	movs	r1, #0
 801ae1c:	6159      	str	r1, [r3, #20]
 801ae1e:	6282      	str	r2, [r0, #40]	; 0x28
 801ae20:	b902      	cbnz	r2, 801ae24 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 801ae22:	4770      	bx	lr
 801ae24:	6199      	str	r1, [r3, #24]
 801ae26:	4770      	bx	lr
 801ae28:	4613      	mov	r3, r2
 801ae2a:	b13a      	cbz	r2, 801ae3c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801ae2c:	699a      	ldr	r2, [r3, #24]
 801ae2e:	428a      	cmp	r2, r1
 801ae30:	d1fa      	bne.n	801ae28 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 801ae32:	698a      	ldr	r2, [r1, #24]
 801ae34:	619a      	str	r2, [r3, #24]
 801ae36:	2300      	movs	r3, #0
 801ae38:	e9c1 3305 	strd	r3, r3, [r1, #20]
 801ae3c:	4770      	bx	lr

0801ae3e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 801ae3e:	b410      	push	{r4}
 801ae40:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801ae42:	4604      	mov	r4, r0
 801ae44:	b92b      	cbnz	r3, 801ae52 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 801ae46:	6803      	ldr	r3, [r0, #0]
 801ae48:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ae4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ae4e:	4611      	mov	r1, r2
 801ae50:	4718      	bx	r3
 801ae52:	b941      	cbnz	r1, 801ae66 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 801ae54:	6193      	str	r3, [r2, #24]
 801ae56:	6282      	str	r2, [r0, #40]	; 0x28
 801ae58:	6154      	str	r4, [r2, #20]
 801ae5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ae5e:	4770      	bx	lr
 801ae60:	4603      	mov	r3, r0
 801ae62:	2800      	cmp	r0, #0
 801ae64:	d0f9      	beq.n	801ae5a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 801ae66:	4299      	cmp	r1, r3
 801ae68:	6998      	ldr	r0, [r3, #24]
 801ae6a:	d1f9      	bne.n	801ae60 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 801ae6c:	6190      	str	r0, [r2, #24]
 801ae6e:	618a      	str	r2, [r1, #24]
 801ae70:	e7f2      	b.n	801ae58 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

0801ae74 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 801ae74:	4288      	cmp	r0, r1
 801ae76:	b508      	push	{r3, lr}
 801ae78:	d105      	bne.n	801ae86 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 801ae7a:	4b11      	ldr	r3, [pc, #68]	; (801aec0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 801ae7c:	4a11      	ldr	r2, [pc, #68]	; (801aec4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801ae7e:	2123      	movs	r1, #35	; 0x23
 801ae80:	4811      	ldr	r0, [pc, #68]	; (801aec8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 801ae82:	f013 fa29 	bl	802e2d8 <__assert_func>
 801ae86:	694b      	ldr	r3, [r1, #20]
 801ae88:	b11b      	cbz	r3, 801ae92 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 801ae8a:	4b10      	ldr	r3, [pc, #64]	; (801aecc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 801ae8c:	4a0d      	ldr	r2, [pc, #52]	; (801aec4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801ae8e:	2124      	movs	r1, #36	; 0x24
 801ae90:	e7f6      	b.n	801ae80 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801ae92:	e9c1 0305 	strd	r0, r3, [r1, #20]
 801ae96:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801ae98:	b913      	cbnz	r3, 801aea0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 801ae9a:	6281      	str	r1, [r0, #40]	; 0x28
 801ae9c:	bd08      	pop	{r3, pc}
 801ae9e:	4613      	mov	r3, r2
 801aea0:	699a      	ldr	r2, [r3, #24]
 801aea2:	b12a      	cbz	r2, 801aeb0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 801aea4:	428b      	cmp	r3, r1
 801aea6:	d1fa      	bne.n	801ae9e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 801aea8:	4b09      	ldr	r3, [pc, #36]	; (801aed0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 801aeaa:	4a06      	ldr	r2, [pc, #24]	; (801aec4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801aeac:	2135      	movs	r1, #53	; 0x35
 801aeae:	e7e7      	b.n	801ae80 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801aeb0:	428b      	cmp	r3, r1
 801aeb2:	d103      	bne.n	801aebc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 801aeb4:	4b06      	ldr	r3, [pc, #24]	; (801aed0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 801aeb6:	4a03      	ldr	r2, [pc, #12]	; (801aec4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801aeb8:	2138      	movs	r1, #56	; 0x38
 801aeba:	e7e1      	b.n	801ae80 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801aebc:	6199      	str	r1, [r3, #24]
 801aebe:	e7ed      	b.n	801ae9c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 801aec0:	08031f73 	.word	0x08031f73
 801aec4:	080320c8 	.word	0x080320c8
 801aec8:	08031f9f 	.word	0x08031f9f
 801aecc:	08031fd2 	.word	0x08031fd2
 801aed0:	08032008 	.word	0x08032008

0801aed4 <_ZN8touchgfx4RectaNERKS0_>:
 801aed4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801aed8:	f9b1 7000 	ldrsh.w	r7, [r1]
 801aedc:	888c      	ldrh	r4, [r1, #4]
 801aede:	f9b0 9000 	ldrsh.w	r9, [r0]
 801aee2:	443c      	add	r4, r7
 801aee4:	b2a4      	uxth	r4, r4
 801aee6:	fa0f f884 	sxth.w	r8, r4
 801aeea:	45c1      	cmp	r9, r8
 801aeec:	da2f      	bge.n	801af4e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801aeee:	8882      	ldrh	r2, [r0, #4]
 801aef0:	444a      	add	r2, r9
 801aef2:	b292      	uxth	r2, r2
 801aef4:	fa0f fe82 	sxth.w	lr, r2
 801aef8:	4577      	cmp	r7, lr
 801aefa:	da28      	bge.n	801af4e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801aefc:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801af00:	88cb      	ldrh	r3, [r1, #6]
 801af02:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801af06:	442b      	add	r3, r5
 801af08:	b21b      	sxth	r3, r3
 801af0a:	429e      	cmp	r6, r3
 801af0c:	da1f      	bge.n	801af4e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801af0e:	88c3      	ldrh	r3, [r0, #6]
 801af10:	4433      	add	r3, r6
 801af12:	b29b      	uxth	r3, r3
 801af14:	fa0f fc83 	sxth.w	ip, r3
 801af18:	4565      	cmp	r5, ip
 801af1a:	da18      	bge.n	801af4e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801af1c:	454f      	cmp	r7, r9
 801af1e:	bfb8      	it	lt
 801af20:	464f      	movlt	r7, r9
 801af22:	42b5      	cmp	r5, r6
 801af24:	bfb8      	it	lt
 801af26:	4635      	movlt	r5, r6
 801af28:	45f0      	cmp	r8, lr
 801af2a:	bfd8      	it	le
 801af2c:	4622      	movle	r2, r4
 801af2e:	1bd2      	subs	r2, r2, r7
 801af30:	8082      	strh	r2, [r0, #4]
 801af32:	884a      	ldrh	r2, [r1, #2]
 801af34:	88c9      	ldrh	r1, [r1, #6]
 801af36:	8007      	strh	r7, [r0, #0]
 801af38:	440a      	add	r2, r1
 801af3a:	b292      	uxth	r2, r2
 801af3c:	b211      	sxth	r1, r2
 801af3e:	458c      	cmp	ip, r1
 801af40:	bfa8      	it	ge
 801af42:	4613      	movge	r3, r2
 801af44:	1b5b      	subs	r3, r3, r5
 801af46:	80c3      	strh	r3, [r0, #6]
 801af48:	8045      	strh	r5, [r0, #2]
 801af4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801af4e:	2300      	movs	r3, #0
 801af50:	8003      	strh	r3, [r0, #0]
 801af52:	8043      	strh	r3, [r0, #2]
 801af54:	8083      	strh	r3, [r0, #4]
 801af56:	80c3      	strh	r3, [r0, #6]
 801af58:	e7f7      	b.n	801af4a <_ZN8touchgfx4RectaNERKS0_+0x76>

0801af5a <_ZNK8touchgfx4Rect7isEmptyEv>:
 801af5a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801af5e:	2b00      	cmp	r3, #0
 801af60:	dd06      	ble.n	801af70 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 801af62:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801af66:	2800      	cmp	r0, #0
 801af68:	bfcc      	ite	gt
 801af6a:	2000      	movgt	r0, #0
 801af6c:	2001      	movle	r0, #1
 801af6e:	4770      	bx	lr
 801af70:	2001      	movs	r0, #1
 801af72:	4770      	bx	lr

0801af74 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 801af74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af78:	2300      	movs	r3, #0
 801af7a:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801af7c:	8003      	strh	r3, [r0, #0]
 801af7e:	4604      	mov	r4, r0
 801af80:	8043      	strh	r3, [r0, #2]
 801af82:	8083      	strh	r3, [r0, #4]
 801af84:	80c3      	strh	r3, [r0, #6]
 801af86:	2d00      	cmp	r5, #0
 801af88:	d040      	beq.n	801b00c <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801af8a:	1d28      	adds	r0, r5, #4
 801af8c:	f7ff ffe5 	bl	801af5a <_ZNK8touchgfx4Rect7isEmptyEv>
 801af90:	b988      	cbnz	r0, 801afb6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801af92:	4620      	mov	r0, r4
 801af94:	f7ff ffe1 	bl	801af5a <_ZNK8touchgfx4Rect7isEmptyEv>
 801af98:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801af9c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801afa0:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 801afa4:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 801afa8:	b138      	cbz	r0, 801afba <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 801afaa:	8022      	strh	r2, [r4, #0]
 801afac:	8063      	strh	r3, [r4, #2]
 801afae:	f8a4 e004 	strh.w	lr, [r4, #4]
 801afb2:	f8a4 c006 	strh.w	ip, [r4, #6]
 801afb6:	69ad      	ldr	r5, [r5, #24]
 801afb8:	e7e5      	b.n	801af86 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801afba:	f9b4 0000 	ldrsh.w	r0, [r4]
 801afbe:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801afc2:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801afc6:	4290      	cmp	r0, r2
 801afc8:	4607      	mov	r7, r0
 801afca:	bfa8      	it	ge
 801afcc:	4617      	movge	r7, r2
 801afce:	4472      	add	r2, lr
 801afd0:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 801afd4:	8027      	strh	r7, [r4, #0]
 801afd6:	4299      	cmp	r1, r3
 801afd8:	460e      	mov	r6, r1
 801afda:	4440      	add	r0, r8
 801afdc:	bfa8      	it	ge
 801afde:	461e      	movge	r6, r3
 801afe0:	4471      	add	r1, lr
 801afe2:	4463      	add	r3, ip
 801afe4:	b200      	sxth	r0, r0
 801afe6:	b212      	sxth	r2, r2
 801afe8:	b209      	sxth	r1, r1
 801afea:	b21b      	sxth	r3, r3
 801afec:	4290      	cmp	r0, r2
 801afee:	bfac      	ite	ge
 801aff0:	ebc7 0200 	rsbge	r2, r7, r0
 801aff4:	ebc7 0202 	rsblt	r2, r7, r2
 801aff8:	4299      	cmp	r1, r3
 801affa:	bfac      	ite	ge
 801affc:	ebc6 0301 	rsbge	r3, r6, r1
 801b000:	ebc6 0303 	rsblt	r3, r6, r3
 801b004:	8066      	strh	r6, [r4, #2]
 801b006:	80a2      	strh	r2, [r4, #4]
 801b008:	80e3      	strh	r3, [r4, #6]
 801b00a:	e7d4      	b.n	801afb6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801b00c:	4620      	mov	r0, r4
 801b00e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b012 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 801b012:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801b016:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801b01a:	b383      	cbz	r3, 801b07e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801b01c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801b01e:	b374      	cbz	r4, 801b07e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801b020:	f9b1 5000 	ldrsh.w	r5, [r1]
 801b024:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 801b028:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 801b02c:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 801b030:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801b034:	b303      	cbz	r3, 801b078 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801b036:	4668      	mov	r0, sp
 801b038:	1d21      	adds	r1, r4, #4
 801b03a:	f8ad 5000 	strh.w	r5, [sp]
 801b03e:	f8ad 6002 	strh.w	r6, [sp, #2]
 801b042:	f8ad 7004 	strh.w	r7, [sp, #4]
 801b046:	f8ad 8006 	strh.w	r8, [sp, #6]
 801b04a:	f7ff ff43 	bl	801aed4 <_ZN8touchgfx4RectaNERKS0_>
 801b04e:	4668      	mov	r0, sp
 801b050:	f7ff ff83 	bl	801af5a <_ZNK8touchgfx4Rect7isEmptyEv>
 801b054:	b980      	cbnz	r0, 801b078 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801b056:	f8bd 3000 	ldrh.w	r3, [sp]
 801b05a:	88a2      	ldrh	r2, [r4, #4]
 801b05c:	1a9b      	subs	r3, r3, r2
 801b05e:	f8ad 3000 	strh.w	r3, [sp]
 801b062:	88e2      	ldrh	r2, [r4, #6]
 801b064:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b068:	1a9b      	subs	r3, r3, r2
 801b06a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801b06e:	6823      	ldr	r3, [r4, #0]
 801b070:	4669      	mov	r1, sp
 801b072:	689b      	ldr	r3, [r3, #8]
 801b074:	4620      	mov	r0, r4
 801b076:	4798      	blx	r3
 801b078:	69a4      	ldr	r4, [r4, #24]
 801b07a:	2c00      	cmp	r4, #0
 801b07c:	d1d8      	bne.n	801b030 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801b07e:	b002      	add	sp, #8
 801b080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b084 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 801b084:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b086:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801b08a:	460d      	mov	r5, r1
 801b08c:	4616      	mov	r6, r2
 801b08e:	b323      	cbz	r3, 801b0da <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801b090:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801b092:	b314      	cbz	r4, 801b0da <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801b094:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801b098:	b1eb      	cbz	r3, 801b0d6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801b09a:	6828      	ldr	r0, [r5, #0]
 801b09c:	6869      	ldr	r1, [r5, #4]
 801b09e:	466b      	mov	r3, sp
 801b0a0:	c303      	stmia	r3!, {r0, r1}
 801b0a2:	4668      	mov	r0, sp
 801b0a4:	1d21      	adds	r1, r4, #4
 801b0a6:	f7ff ff15 	bl	801aed4 <_ZN8touchgfx4RectaNERKS0_>
 801b0aa:	4668      	mov	r0, sp
 801b0ac:	f7ff ff55 	bl	801af5a <_ZNK8touchgfx4Rect7isEmptyEv>
 801b0b0:	b988      	cbnz	r0, 801b0d6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801b0b2:	f8bd 3000 	ldrh.w	r3, [sp]
 801b0b6:	88a2      	ldrh	r2, [r4, #4]
 801b0b8:	1a9b      	subs	r3, r3, r2
 801b0ba:	f8ad 3000 	strh.w	r3, [sp]
 801b0be:	88e2      	ldrh	r2, [r4, #6]
 801b0c0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b0c4:	1a9b      	subs	r3, r3, r2
 801b0c6:	f8ad 3002 	strh.w	r3, [sp, #2]
 801b0ca:	6823      	ldr	r3, [r4, #0]
 801b0cc:	4632      	mov	r2, r6
 801b0ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b0d0:	4669      	mov	r1, sp
 801b0d2:	4620      	mov	r0, r4
 801b0d4:	4798      	blx	r3
 801b0d6:	69a4      	ldr	r4, [r4, #24]
 801b0d8:	e7db      	b.n	801b092 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801b0da:	b002      	add	sp, #8
 801b0dc:	bd70      	pop	{r4, r5, r6, pc}

0801b0de <_ZNK8touchgfx6Slider15getIndicatorMinEv>:
 801b0de:	f8b0 00ee 	ldrh.w	r0, [r0, #238]	; 0xee
 801b0e2:	4770      	bx	lr

0801b0e4 <_ZNK8touchgfx6Slider15getIndicatorMaxEv>:
 801b0e4:	f8b0 00ee 	ldrh.w	r0, [r0, #238]	; 0xee
 801b0e8:	4770      	bx	lr

0801b0ea <_ZNK8touchgfx6Slider11getMinValueEv>:
 801b0ea:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 801b0ec:	4770      	bx	lr

0801b0ee <_ZNK8touchgfx6Slider11getMaxValueEv>:
 801b0ee:	8f00      	ldrh	r0, [r0, #56]	; 0x38
 801b0f0:	4770      	bx	lr

0801b0f2 <_ZN8touchgfx6Slider8setValueEi>:
 801b0f2:	b570      	push	{r4, r5, r6, lr}
 801b0f4:	6803      	ldr	r3, [r0, #0]
 801b0f6:	e9d3 532a 	ldrd	r5, r3, [r3, #168]	; 0xa8
 801b0fa:	4604      	mov	r4, r0
 801b0fc:	4798      	blx	r3
 801b0fe:	462b      	mov	r3, r5
 801b100:	4601      	mov	r1, r0
 801b102:	4620      	mov	r0, r4
 801b104:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b108:	4718      	bx	r3

0801b10a <_ZNK8touchgfx6Slider15valueToPositionEi>:
 801b10a:	b538      	push	{r3, r4, r5, lr}
 801b10c:	e9d0 340d 	ldrd	r3, r4, [r0, #52]	; 0x34
 801b110:	428c      	cmp	r4, r1
 801b112:	bfa8      	it	ge
 801b114:	460c      	movge	r4, r1
 801b116:	429c      	cmp	r4, r3
 801b118:	bfac      	ite	ge
 801b11a:	ebc3 0404 	rsbge	r4, r3, r4
 801b11e:	ebc3 0403 	rsblt	r4, r3, r3
 801b122:	6803      	ldr	r3, [r0, #0]
 801b124:	4605      	mov	r5, r0
 801b126:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801b12a:	4798      	blx	r3
 801b12c:	682b      	ldr	r3, [r5, #0]
 801b12e:	fb00 4404 	mla	r4, r0, r4, r4
 801b132:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801b136:	4628      	mov	r0, r5
 801b138:	4798      	blx	r3
 801b13a:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 801b13e:	f9b5 30ec 	ldrsh.w	r3, [r5, #236]	; 0xec
 801b142:	fb94 f0f0 	sdiv	r0, r4, r0
 801b146:	2a01      	cmp	r2, #1
 801b148:	bf08      	it	eq
 801b14a:	f9b5 20ee 	ldrsheq.w	r2, [r5, #238]	; 0xee
 801b14e:	4418      	add	r0, r3
 801b150:	bf04      	itt	eq
 801b152:	1a10      	subeq	r0, r2, r0
 801b154:	18c0      	addeq	r0, r0, r3
 801b156:	b200      	sxth	r0, r0
 801b158:	bd38      	pop	{r3, r4, r5, pc}

0801b15a <_ZNK8touchgfx6Slider15positionToValueEs>:
 801b15a:	b570      	push	{r4, r5, r6, lr}
 801b15c:	f9b0 30ec 	ldrsh.w	r3, [r0, #236]	; 0xec
 801b160:	428b      	cmp	r3, r1
 801b162:	4605      	mov	r5, r0
 801b164:	460c      	mov	r4, r1
 801b166:	d109      	bne.n	801b17c <_ZNK8touchgfx6Slider15positionToValueEs+0x22>
 801b168:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801b16a:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 801b16e:	2b01      	cmp	r3, #1
 801b170:	bf01      	itttt	eq
 801b172:	6bab      	ldreq	r3, [r5, #56]	; 0x38
 801b174:	1a18      	subeq	r0, r3, r0
 801b176:	6b6b      	ldreq	r3, [r5, #52]	; 0x34
 801b178:	18c0      	addeq	r0, r0, r3
 801b17a:	bd70      	pop	{r4, r5, r6, pc}
 801b17c:	f9b0 30ee 	ldrsh.w	r3, [r0, #238]	; 0xee
 801b180:	428b      	cmp	r3, r1
 801b182:	d101      	bne.n	801b188 <_ZNK8touchgfx6Slider15positionToValueEs+0x2e>
 801b184:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801b186:	e7f0      	b.n	801b16a <_ZNK8touchgfx6Slider15positionToValueEs+0x10>
 801b188:	6803      	ldr	r3, [r0, #0]
 801b18a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801b18e:	4798      	blx	r3
 801b190:	682b      	ldr	r3, [r5, #0]
 801b192:	f9b5 10ec 	ldrsh.w	r1, [r5, #236]	; 0xec
 801b196:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801b19a:	4606      	mov	r6, r0
 801b19c:	4628      	mov	r0, r5
 801b19e:	1a64      	subs	r4, r4, r1
 801b1a0:	4798      	blx	r3
 801b1a2:	682b      	ldr	r3, [r5, #0]
 801b1a4:	2102      	movs	r1, #2
 801b1a6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801b1aa:	fb96 f6f1 	sdiv	r6, r6, r1
 801b1ae:	fb00 6404 	mla	r4, r0, r4, r6
 801b1b2:	4628      	mov	r0, r5
 801b1b4:	4798      	blx	r3
 801b1b6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801b1b8:	fb94 f0f0 	sdiv	r0, r4, r0
 801b1bc:	4418      	add	r0, r3
 801b1be:	e7d4      	b.n	801b16a <_ZNK8touchgfx6Slider15positionToValueEs+0x10>

0801b1c0 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv>:
 801b1c0:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 801b1c4:	2302      	movs	r3, #2
 801b1c6:	b92a      	cbnz	r2, 801b1d4 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0x14>
 801b1c8:	f9b0 009c 	ldrsh.w	r0, [r0, #156]	; 0x9c
 801b1cc:	fb90 f0f3 	sdiv	r0, r0, r3
 801b1d0:	b280      	uxth	r0, r0
 801b1d2:	4770      	bx	lr
 801b1d4:	f9b0 009e 	ldrsh.w	r0, [r0, #158]	; 0x9e
 801b1d8:	e7f8      	b.n	801b1cc <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0xc>

0801b1da <_ZN8touchgfx6Slider13setValueRangeEii>:
 801b1da:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801b1dc:	428b      	cmp	r3, r1
 801b1de:	b410      	push	{r4}
 801b1e0:	db09      	blt.n	801b1f6 <_ZN8touchgfx6Slider13setValueRangeEii+0x1c>
 801b1e2:	4293      	cmp	r3, r2
 801b1e4:	bfa8      	it	ge
 801b1e6:	4613      	movge	r3, r2
 801b1e8:	6804      	ldr	r4, [r0, #0]
 801b1ea:	f8d4 4094 	ldr.w	r4, [r4, #148]	; 0x94
 801b1ee:	46a4      	mov	ip, r4
 801b1f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b1f4:	4760      	bx	ip
 801b1f6:	460b      	mov	r3, r1
 801b1f8:	e7f6      	b.n	801b1e8 <_ZN8touchgfx6Slider13setValueRangeEii+0xe>

0801b1fa <_ZNK8touchgfx6Slider29getIndicatorPositionRangeSizeEv>:
 801b1fa:	f9b0 20ee 	ldrsh.w	r2, [r0, #238]	; 0xee
 801b1fe:	f9b0 00ec 	ldrsh.w	r0, [r0, #236]	; 0xec
 801b202:	1a10      	subs	r0, r2, r0
 801b204:	4770      	bx	lr

0801b206 <_ZNK8touchgfx6Slider17getValueRangeSizeEv>:
 801b206:	e9d0 020d 	ldrd	r0, r2, [r0, #52]	; 0x34
 801b20a:	1a10      	subs	r0, r2, r0
 801b20c:	4770      	bx	lr

0801b20e <_ZN8touchgfx6Slider23updateIndicatorPositionEs>:
 801b20e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b212:	f9b0 60ec 	ldrsh.w	r6, [r0, #236]	; 0xec
 801b216:	428e      	cmp	r6, r1
 801b218:	4604      	mov	r4, r0
 801b21a:	bfb8      	it	lt
 801b21c:	460e      	movlt	r6, r1
 801b21e:	f9b0 10ee 	ldrsh.w	r1, [r0, #238]	; 0xee
 801b222:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801b226:	428e      	cmp	r6, r1
 801b228:	bfa8      	it	ge
 801b22a:	460e      	movge	r6, r1
 801b22c:	3094      	adds	r0, #148	; 0x94
 801b22e:	f104 07c0 	add.w	r7, r4, #192	; 0xc0
 801b232:	fa1f f886 	uxth.w	r8, r6
 801b236:	2b00      	cmp	r3, #0
 801b238:	d132      	bne.n	801b2a0 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x92>
 801b23a:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	; 0x9a
 801b23e:	4631      	mov	r1, r6
 801b240:	f7f1 fc50 	bl	800cae4 <_ZN8touchgfx8Drawable6moveToEss>
 801b244:	4638      	mov	r0, r7
 801b246:	f004 fc56 	bl	801faf6 <_ZNK8touchgfx8Drawable10invalidateEv>
 801b24a:	6823      	ldr	r3, [r4, #0]
 801b24c:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
 801b250:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801b254:	4620      	mov	r0, r4
 801b256:	eba8 0802 	sub.w	r8, r8, r2
 801b25a:	4798      	blx	r3
 801b25c:	fa1f f888 	uxth.w	r8, r8
 801b260:	4480      	add	r8, r0
 801b262:	f8a4 80c8 	strh.w	r8, [r4, #200]	; 0xc8
 801b266:	4638      	mov	r0, r7
 801b268:	f004 fc45 	bl	801faf6 <_ZNK8touchgfx8Drawable10invalidateEv>
 801b26c:	6823      	ldr	r3, [r4, #0]
 801b26e:	4631      	mov	r1, r6
 801b270:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801b274:	4620      	mov	r0, r4
 801b276:	4798      	blx	r3
 801b278:	6320      	str	r0, [r4, #48]	; 0x30
 801b27a:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 801b27e:	2800      	cmp	r0, #0
 801b280:	d03c      	beq.n	801b2fc <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xee>
 801b282:	6803      	ldr	r3, [r0, #0]
 801b284:	68db      	ldr	r3, [r3, #12]
 801b286:	4798      	blx	r3
 801b288:	2800      	cmp	r0, #0
 801b28a:	d037      	beq.n	801b2fc <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xee>
 801b28c:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 801b290:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801b292:	6803      	ldr	r3, [r0, #0]
 801b294:	689b      	ldr	r3, [r3, #8]
 801b296:	4621      	mov	r1, r4
 801b298:	b003      	add	sp, #12
 801b29a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b29e:	4718      	bx	r3
 801b2a0:	4632      	mov	r2, r6
 801b2a2:	f9b4 1098 	ldrsh.w	r1, [r4, #152]	; 0x98
 801b2a6:	f7f1 fc1d 	bl	800cae4 <_ZN8touchgfx8Drawable6moveToEss>
 801b2aa:	4638      	mov	r0, r7
 801b2ac:	f004 fc23 	bl	801faf6 <_ZNK8touchgfx8Drawable10invalidateEv>
 801b2b0:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
 801b2b4:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
 801b2b8:	6823      	ldr	r3, [r4, #0]
 801b2ba:	4405      	add	r5, r0
 801b2bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801b2c0:	4620      	mov	r0, r4
 801b2c2:	4798      	blx	r3
 801b2c4:	b2ad      	uxth	r5, r5
 801b2c6:	6823      	ldr	r3, [r4, #0]
 801b2c8:	f9b4 90c4 	ldrsh.w	r9, [r4, #196]	; 0xc4
 801b2cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801b2d0:	eba5 0508 	sub.w	r5, r5, r8
 801b2d4:	1a2d      	subs	r5, r5, r0
 801b2d6:	4620      	mov	r0, r4
 801b2d8:	4798      	blx	r3
 801b2da:	b2ad      	uxth	r5, r5
 801b2dc:	b22a      	sxth	r2, r5
 801b2de:	4440      	add	r0, r8
 801b2e0:	9200      	str	r2, [sp, #0]
 801b2e2:	f9b4 30c8 	ldrsh.w	r3, [r4, #200]	; 0xc8
 801b2e6:	b202      	sxth	r2, r0
 801b2e8:	4649      	mov	r1, r9
 801b2ea:	4638      	mov	r0, r7
 801b2ec:	f7f1 fb0a 	bl	800c904 <_ZN8touchgfx8Drawable11setPositionEssss>
 801b2f0:	f8b4 0072 	ldrh.w	r0, [r4, #114]	; 0x72
 801b2f4:	1a2d      	subs	r5, r5, r0
 801b2f6:	f8a4 506e 	strh.w	r5, [r4, #110]	; 0x6e
 801b2fa:	e7b4      	b.n	801b266 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x58>
 801b2fc:	b003      	add	sp, #12
 801b2fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0801b304 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>:
 801b304:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b308:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 801b30c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
 801b310:	45b8      	cmp	r8, r7
 801b312:	4604      	mov	r4, r0
 801b314:	4689      	mov	r9, r1
 801b316:	4616      	mov	r6, r2
 801b318:	461d      	mov	r5, r3
 801b31a:	d305      	bcc.n	801b328 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0x24>
 801b31c:	4b28      	ldr	r3, [pc, #160]	; (801b3c0 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xbc>)
 801b31e:	4a29      	ldr	r2, [pc, #164]	; (801b3c4 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xc0>)
 801b320:	4829      	ldr	r0, [pc, #164]	; (801b3c8 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xc4>)
 801b322:	2143      	movs	r1, #67	; 0x43
 801b324:	f012 ffd8 	bl	802e2d8 <__assert_func>
 801b328:	f04f 0a00 	mov.w	sl, #0
 801b32c:	b213      	sxth	r3, r2
 801b32e:	fa0f fb81 	sxth.w	fp, r1
 801b332:	f880 a02c 	strb.w	sl, [r0, #44]	; 0x2c
 801b336:	461a      	mov	r2, r3
 801b338:	4659      	mov	r1, fp
 801b33a:	303c      	adds	r0, #60	; 0x3c
 801b33c:	9301      	str	r3, [sp, #4]
 801b33e:	f7f1 fb46 	bl	800c9ce <_ZN8touchgfx8Drawable5setXYEss>
 801b342:	9b01      	ldr	r3, [sp, #4]
 801b344:	4659      	mov	r1, fp
 801b346:	461a      	mov	r2, r3
 801b348:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 801b34c:	f7f1 fb3f 	bl	800c9ce <_ZN8touchgfx8Drawable5setXYEss>
 801b350:	4652      	mov	r2, sl
 801b352:	4651      	mov	r1, sl
 801b354:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801b358:	f7f1 fb39 	bl	800c9ce <_ZN8touchgfx8Drawable5setXYEss>
 801b35c:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
 801b360:	f8a4 509a 	strh.w	r5, [r4, #154]	; 0x9a
 801b364:	4449      	add	r1, r9
 801b366:	b28b      	uxth	r3, r1
 801b368:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 801b36c:	f8a4 80ec 	strh.w	r8, [r4, #236]	; 0xec
 801b370:	4439      	add	r1, r7
 801b372:	b289      	uxth	r1, r1
 801b374:	428b      	cmp	r3, r1
 801b376:	bf88      	it	hi
 801b378:	b219      	sxthhi	r1, r3
 801b37a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 801b37e:	f8a4 70ee 	strh.w	r7, [r4, #238]	; 0xee
 801b382:	441e      	add	r6, r3
 801b384:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
 801b388:	441d      	add	r5, r3
 801b38a:	6823      	ldr	r3, [r4, #0]
 801b38c:	b2ad      	uxth	r5, r5
 801b38e:	b2b6      	uxth	r6, r6
 801b390:	bf98      	it	ls
 801b392:	b209      	sxthls	r1, r1
 801b394:	4620      	mov	r0, r4
 801b396:	42ae      	cmp	r6, r5
 801b398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b39a:	bf8c      	ite	hi
 801b39c:	b235      	sxthhi	r5, r6
 801b39e:	b22d      	sxthls	r5, r5
 801b3a0:	4798      	blx	r3
 801b3a2:	6823      	ldr	r3, [r4, #0]
 801b3a4:	4629      	mov	r1, r5
 801b3a6:	4620      	mov	r0, r4
 801b3a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b3aa:	4798      	blx	r3
 801b3ac:	6823      	ldr	r3, [r4, #0]
 801b3ae:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801b3b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801b3b4:	4620      	mov	r0, r4
 801b3b6:	b003      	add	sp, #12
 801b3b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3bc:	4718      	bx	r3
 801b3be:	bf00      	nop
 801b3c0:	080322ac 	.word	0x080322ac
 801b3c4:	08032526 	.word	0x08032526
 801b3c8:	08032320 	.word	0x08032320

0801b3cc <_ZN8touchgfx6Slider19setupVerticalSliderEttttt>:
 801b3cc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3d0:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
 801b3d4:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
 801b3d8:	42b7      	cmp	r7, r6
 801b3da:	4604      	mov	r4, r0
 801b3dc:	4689      	mov	r9, r1
 801b3de:	4690      	mov	r8, r2
 801b3e0:	461d      	mov	r5, r3
 801b3e2:	d305      	bcc.n	801b3f0 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0x24>
 801b3e4:	4b25      	ldr	r3, [pc, #148]	; (801b47c <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xb0>)
 801b3e6:	4a26      	ldr	r2, [pc, #152]	; (801b480 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xb4>)
 801b3e8:	4826      	ldr	r0, [pc, #152]	; (801b484 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xb8>)
 801b3ea:	215f      	movs	r1, #95	; 0x5f
 801b3ec:	f012 ff74 	bl	802e2d8 <__assert_func>
 801b3f0:	2301      	movs	r3, #1
 801b3f2:	fa0f fa81 	sxth.w	sl, r1
 801b3f6:	fa0f fb82 	sxth.w	fp, r2
 801b3fa:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801b3fe:	465a      	mov	r2, fp
 801b400:	4651      	mov	r1, sl
 801b402:	303c      	adds	r0, #60	; 0x3c
 801b404:	f7f1 fae3 	bl	800c9ce <_ZN8touchgfx8Drawable5setXYEss>
 801b408:	465a      	mov	r2, fp
 801b40a:	4651      	mov	r1, sl
 801b40c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 801b410:	f7f1 fadd 	bl	800c9ce <_ZN8touchgfx8Drawable5setXYEss>
 801b414:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
 801b418:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
 801b41c:	4489      	add	r9, r1
 801b41e:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 801b422:	6823      	ldr	r3, [r4, #0]
 801b424:	f8a4 70ec 	strh.w	r7, [r4, #236]	; 0xec
 801b428:	4429      	add	r1, r5
 801b42a:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
 801b42e:	f8a4 60ee 	strh.w	r6, [r4, #238]	; 0xee
 801b432:	44a8      	add	r8, r5
 801b434:	f8b4 509e 	ldrh.w	r5, [r4, #158]	; 0x9e
 801b438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b43a:	b289      	uxth	r1, r1
 801b43c:	fa1f f989 	uxth.w	r9, r9
 801b440:	4435      	add	r5, r6
 801b442:	4589      	cmp	r9, r1
 801b444:	b2ad      	uxth	r5, r5
 801b446:	fa1f f888 	uxth.w	r8, r8
 801b44a:	bf8c      	ite	hi
 801b44c:	fa0f f189 	sxthhi.w	r1, r9
 801b450:	b209      	sxthls	r1, r1
 801b452:	4620      	mov	r0, r4
 801b454:	45a8      	cmp	r8, r5
 801b456:	bf8c      	ite	hi
 801b458:	fa0f f588 	sxthhi.w	r5, r8
 801b45c:	b22d      	sxthls	r5, r5
 801b45e:	4798      	blx	r3
 801b460:	6823      	ldr	r3, [r4, #0]
 801b462:	4629      	mov	r1, r5
 801b464:	4620      	mov	r0, r4
 801b466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b468:	4798      	blx	r3
 801b46a:	6823      	ldr	r3, [r4, #0]
 801b46c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801b46e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801b472:	4620      	mov	r0, r4
 801b474:	b001      	add	sp, #4
 801b476:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b47a:	4718      	bx	r3
 801b47c:	0803223a 	.word	0x0803223a
 801b480:	080324c1 	.word	0x080324c1
 801b484:	08032320 	.word	0x08032320

0801b488 <_ZN8touchgfx6Slider13setValueRangeEiii>:
 801b488:	4291      	cmp	r1, r2
 801b48a:	b510      	push	{r4, lr}
 801b48c:	db06      	blt.n	801b49c <_ZN8touchgfx6Slider13setValueRangeEiii+0x14>
 801b48e:	4b08      	ldr	r3, [pc, #32]	; (801b4b0 <_ZN8touchgfx6Slider13setValueRangeEiii+0x28>)
 801b490:	4a08      	ldr	r2, [pc, #32]	; (801b4b4 <_ZN8touchgfx6Slider13setValueRangeEiii+0x2c>)
 801b492:	4809      	ldr	r0, [pc, #36]	; (801b4b8 <_ZN8touchgfx6Slider13setValueRangeEiii+0x30>)
 801b494:	f240 1107 	movw	r1, #263	; 0x107
 801b498:	f012 ff1e 	bl	802e2d8 <__assert_func>
 801b49c:	e9c0 120d 	strd	r1, r2, [r0, #52]	; 0x34
 801b4a0:	6802      	ldr	r2, [r0, #0]
 801b4a2:	4619      	mov	r1, r3
 801b4a4:	f8d2 20a4 	ldr.w	r2, [r2, #164]	; 0xa4
 801b4a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b4ac:	4710      	bx	r2
 801b4ae:	bf00      	nop
 801b4b0:	080321e2 	.word	0x080321e2
 801b4b4:	08032485 	.word	0x08032485
 801b4b8:	08032320 	.word	0x08032320

0801b4bc <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE>:
 801b4bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b4c0:	790b      	ldrb	r3, [r1, #4]
 801b4c2:	4604      	mov	r4, r0
 801b4c4:	460d      	mov	r5, r1
 801b4c6:	b323      	cbz	r3, 801b512 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x56>
 801b4c8:	2b01      	cmp	r3, #1
 801b4ca:	d135      	bne.n	801b538 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 801b4cc:	6823      	ldr	r3, [r4, #0]
 801b4ce:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 801b4d2:	f8d3 70a8 	ldr.w	r7, [r3, #168]	; 0xa8
 801b4d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801b4da:	2a00      	cmp	r2, #0
 801b4dc:	d12a      	bne.n	801b534 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x78>
 801b4de:	88ee      	ldrh	r6, [r5, #6]
 801b4e0:	4620      	mov	r0, r4
 801b4e2:	4798      	blx	r3
 801b4e4:	1a31      	subs	r1, r6, r0
 801b4e6:	b209      	sxth	r1, r1
 801b4e8:	4620      	mov	r0, r4
 801b4ea:	47b8      	blx	r7
 801b4ec:	792b      	ldrb	r3, [r5, #4]
 801b4ee:	2b01      	cmp	r3, #1
 801b4f0:	d122      	bne.n	801b538 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 801b4f2:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 801b4f6:	b1f8      	cbz	r0, 801b538 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 801b4f8:	6803      	ldr	r3, [r0, #0]
 801b4fa:	68db      	ldr	r3, [r3, #12]
 801b4fc:	4798      	blx	r3
 801b4fe:	b1d8      	cbz	r0, 801b538 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 801b500:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 801b504:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801b506:	6803      	ldr	r3, [r0, #0]
 801b508:	4621      	mov	r1, r4
 801b50a:	689b      	ldr	r3, [r3, #8]
 801b50c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b510:	4718      	bx	r3
 801b512:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
 801b516:	2800      	cmp	r0, #0
 801b518:	d0d8      	beq.n	801b4cc <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 801b51a:	6803      	ldr	r3, [r0, #0]
 801b51c:	68db      	ldr	r3, [r3, #12]
 801b51e:	4798      	blx	r3
 801b520:	2800      	cmp	r0, #0
 801b522:	d0d3      	beq.n	801b4cc <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 801b524:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
 801b528:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801b52a:	6803      	ldr	r3, [r0, #0]
 801b52c:	4621      	mov	r1, r4
 801b52e:	689b      	ldr	r3, [r3, #8]
 801b530:	4798      	blx	r3
 801b532:	e7cb      	b.n	801b4cc <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 801b534:	892e      	ldrh	r6, [r5, #8]
 801b536:	e7d3      	b.n	801b4e0 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x24>
 801b538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b53c <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE>:
 801b53c:	b570      	push	{r4, r5, r6, lr}
 801b53e:	6803      	ldr	r3, [r0, #0]
 801b540:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 801b544:	f8d3 60a8 	ldr.w	r6, [r3, #168]	; 0xa8
 801b548:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801b54c:	4604      	mov	r4, r0
 801b54e:	b942      	cbnz	r2, 801b562 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x26>
 801b550:	894d      	ldrh	r5, [r1, #10]
 801b552:	4798      	blx	r3
 801b554:	1a29      	subs	r1, r5, r0
 801b556:	4633      	mov	r3, r6
 801b558:	4620      	mov	r0, r4
 801b55a:	b209      	sxth	r1, r1
 801b55c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b560:	4718      	bx	r3
 801b562:	898d      	ldrh	r5, [r1, #12]
 801b564:	e7f5      	b.n	801b552 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x16>
	...

0801b568 <_ZN8touchgfx6SliderC1Ev>:
 801b568:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b56c:	ae02      	add	r6, sp, #8
 801b56e:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801b572:	4604      	mov	r4, r0
 801b574:	f7f4 fd80 	bl	8010078 <_ZN8touchgfx9ContainerC1Ev>
 801b578:	f826 7d04 	strh.w	r7, [r6, #-4]!
 801b57c:	4b23      	ldr	r3, [pc, #140]	; (801b60c <_ZN8touchgfx6SliderC1Ev+0xa4>)
 801b57e:	6023      	str	r3, [r4, #0]
 801b580:	2500      	movs	r5, #0
 801b582:	f04f 0b01 	mov.w	fp, #1
 801b586:	f104 093c 	add.w	r9, r4, #60	; 0x3c
 801b58a:	4631      	mov	r1, r6
 801b58c:	f104 0a68 	add.w	sl, r4, #104	; 0x68
 801b590:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
 801b594:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
 801b598:	f8c4 b038 	str.w	fp, [r4, #56]	; 0x38
 801b59c:	4648      	mov	r0, r9
 801b59e:	f7f3 fd03 	bl	800efa8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801b5a2:	f104 0894 	add.w	r8, r4, #148	; 0x94
 801b5a6:	4631      	mov	r1, r6
 801b5a8:	4650      	mov	r0, sl
 801b5aa:	f8ad 7004 	strh.w	r7, [sp, #4]
 801b5ae:	f7f3 fcfb 	bl	800efa8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801b5b2:	4631      	mov	r1, r6
 801b5b4:	4640      	mov	r0, r8
 801b5b6:	f104 06c0 	add.w	r6, r4, #192	; 0xc0
 801b5ba:	f8ad 7004 	strh.w	r7, [sp, #4]
 801b5be:	f7f3 fcf3 	bl	800efa8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801b5c2:	4630      	mov	r0, r6
 801b5c4:	f7f4 fd58 	bl	8010078 <_ZN8touchgfx9ContainerC1Ev>
 801b5c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801b5cc:	e9c4 353b 	strd	r3, r5, [r4, #236]	; 0xec
 801b5d0:	4651      	mov	r1, sl
 801b5d2:	4630      	mov	r0, r6
 801b5d4:	e9c4 553d 	strd	r5, r5, [r4, #244]	; 0xf4
 801b5d8:	f884 b024 	strb.w	fp, [r4, #36]	; 0x24
 801b5dc:	f7ff fc4a 	bl	801ae74 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801b5e0:	4649      	mov	r1, r9
 801b5e2:	4620      	mov	r0, r4
 801b5e4:	f7ff fc46 	bl	801ae74 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801b5e8:	4631      	mov	r1, r6
 801b5ea:	4620      	mov	r0, r4
 801b5ec:	f7ff fc42 	bl	801ae74 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801b5f0:	4641      	mov	r1, r8
 801b5f2:	4620      	mov	r0, r4
 801b5f4:	f7ff fc3e 	bl	801ae74 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801b5f8:	4620      	mov	r0, r4
 801b5fa:	2264      	movs	r2, #100	; 0x64
 801b5fc:	4629      	mov	r1, r5
 801b5fe:	f7ff fdec 	bl	801b1da <_ZN8touchgfx6Slider13setValueRangeEii>
 801b602:	4620      	mov	r0, r4
 801b604:	b003      	add	sp, #12
 801b606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b60a:	bf00      	nop
 801b60c:	08032358 	.word	0x08032358

0801b610 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>:
 801b610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b614:	4604      	mov	r4, r0
 801b616:	4608      	mov	r0, r1
 801b618:	4615      	mov	r5, r2
 801b61a:	460e      	mov	r6, r1
 801b61c:	461f      	mov	r7, r3
 801b61e:	f006 f913 	bl	8021848 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b622:	4680      	mov	r8, r0
 801b624:	4628      	mov	r0, r5
 801b626:	f006 f90f 	bl	8021848 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b62a:	4580      	cmp	r8, r0
 801b62c:	d005      	beq.n	801b63a <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x2a>
 801b62e:	4b14      	ldr	r3, [pc, #80]	; (801b680 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x70>)
 801b630:	4a14      	ldr	r2, [pc, #80]	; (801b684 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x74>)
 801b632:	4815      	ldr	r0, [pc, #84]	; (801b688 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x78>)
 801b634:	2133      	movs	r1, #51	; 0x33
 801b636:	f012 fe4f 	bl	802e2d8 <__assert_func>
 801b63a:	4630      	mov	r0, r6
 801b63c:	f006 f93e 	bl	80218bc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b640:	4680      	mov	r8, r0
 801b642:	4628      	mov	r0, r5
 801b644:	f006 f93a 	bl	80218bc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b648:	4580      	cmp	r8, r0
 801b64a:	d1f0      	bne.n	801b62e <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x1e>
 801b64c:	4631      	mov	r1, r6
 801b64e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 801b652:	f002 fd35 	bl	801e0c0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801b656:	4629      	mov	r1, r5
 801b658:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801b65c:	f002 fd30 	bl	801e0c0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801b660:	4639      	mov	r1, r7
 801b662:	f104 0094 	add.w	r0, r4, #148	; 0x94
 801b666:	f002 fd2b 	bl	801e0c0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801b66a:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
 801b66e:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
 801b672:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
 801b676:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
 801b67a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b67e:	bf00      	nop
 801b680:	08032103 	.word	0x08032103
 801b684:	08032418 	.word	0x08032418
 801b688:	08032320 	.word	0x08032320

0801b68c <_ZNK8touchgfx10ListLayout12getDirectionEv>:
 801b68c:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 801b690:	4770      	bx	lr

0801b692 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE>:
 801b692:	b538      	push	{r3, r4, r5, lr}
 801b694:	7882      	ldrb	r2, [r0, #2]
 801b696:	6843      	ldr	r3, [r0, #4]
 801b698:	4604      	mov	r4, r0
 801b69a:	460d      	mov	r5, r1
 801b69c:	b98a      	cbnz	r2, 801b6c2 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x30>
 801b69e:	4299      	cmp	r1, r3
 801b6a0:	d101      	bne.n	801b6a6 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
 801b6a2:	2301      	movs	r3, #1
 801b6a4:	7083      	strb	r3, [r0, #2]
 801b6a6:	6863      	ldr	r3, [r4, #4]
 801b6a8:	42ab      	cmp	r3, r5
 801b6aa:	d009      	beq.n	801b6c0 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x2e>
 801b6ac:	7a23      	ldrb	r3, [r4, #8]
 801b6ae:	2b01      	cmp	r3, #1
 801b6b0:	d11b      	bne.n	801b6ea <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x58>
 801b6b2:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 801b6b6:	f9b4 2000 	ldrsh.w	r2, [r4]
 801b6ba:	429a      	cmp	r2, r3
 801b6bc:	bfb8      	it	lt
 801b6be:	8023      	strhlt	r3, [r4, #0]
 801b6c0:	bd38      	pop	{r3, r4, r5, pc}
 801b6c2:	7a02      	ldrb	r2, [r0, #8]
 801b6c4:	2a01      	cmp	r2, #1
 801b6c6:	d108      	bne.n	801b6da <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x48>
 801b6c8:	895b      	ldrh	r3, [r3, #10]
 801b6ca:	88c9      	ldrh	r1, [r1, #6]
 801b6cc:	1ac9      	subs	r1, r1, r3
 801b6ce:	682b      	ldr	r3, [r5, #0]
 801b6d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b6d2:	b209      	sxth	r1, r1
 801b6d4:	4628      	mov	r0, r5
 801b6d6:	4798      	blx	r3
 801b6d8:	e7e5      	b.n	801b6a6 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
 801b6da:	2a02      	cmp	r2, #2
 801b6dc:	d1e3      	bne.n	801b6a6 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
 801b6de:	891b      	ldrh	r3, [r3, #8]
 801b6e0:	8889      	ldrh	r1, [r1, #4]
 801b6e2:	1ac9      	subs	r1, r1, r3
 801b6e4:	682b      	ldr	r3, [r5, #0]
 801b6e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b6e8:	e7f3      	b.n	801b6d2 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x40>
 801b6ea:	2b02      	cmp	r3, #2
 801b6ec:	d1e8      	bne.n	801b6c0 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x2e>
 801b6ee:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 801b6f2:	e7e0      	b.n	801b6b6 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x24>

0801b6f4 <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvED1Ev>:
 801b6f4:	4770      	bx	lr

0801b6f6 <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvED1Ev>:
 801b6f6:	4770      	bx	lr

0801b6f8 <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7executeES3_>:
 801b6f8:	b430      	push	{r4, r5}
 801b6fa:	68c5      	ldr	r5, [r0, #12]
 801b6fc:	6844      	ldr	r4, [r0, #4]
 801b6fe:	106a      	asrs	r2, r5, #1
 801b700:	4603      	mov	r3, r0
 801b702:	07ed      	lsls	r5, r5, #31
 801b704:	eb04 0002 	add.w	r0, r4, r2
 801b708:	689b      	ldr	r3, [r3, #8]
 801b70a:	bf48      	it	mi
 801b70c:	58a2      	ldrmi	r2, [r4, r2]
 801b70e:	bc30      	pop	{r4, r5}
 801b710:	bf48      	it	mi
 801b712:	58d3      	ldrmi	r3, [r2, r3]
 801b714:	4718      	bx	r3

0801b716 <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv>:
 801b716:	6843      	ldr	r3, [r0, #4]
 801b718:	b12b      	cbz	r3, 801b726 <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv+0x10>
 801b71a:	6883      	ldr	r3, [r0, #8]
 801b71c:	b92b      	cbnz	r3, 801b72a <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv+0x14>
 801b71e:	68c0      	ldr	r0, [r0, #12]
 801b720:	f000 0001 	and.w	r0, r0, #1
 801b724:	4770      	bx	lr
 801b726:	4618      	mov	r0, r3
 801b728:	4770      	bx	lr
 801b72a:	2001      	movs	r0, #1
 801b72c:	4770      	bx	lr

0801b72e <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7executeES3_>:
 801b72e:	b430      	push	{r4, r5}
 801b730:	68c5      	ldr	r5, [r0, #12]
 801b732:	6844      	ldr	r4, [r0, #4]
 801b734:	106a      	asrs	r2, r5, #1
 801b736:	4603      	mov	r3, r0
 801b738:	07ed      	lsls	r5, r5, #31
 801b73a:	eb04 0002 	add.w	r0, r4, r2
 801b73e:	689b      	ldr	r3, [r3, #8]
 801b740:	bf48      	it	mi
 801b742:	58a2      	ldrmi	r2, [r4, r2]
 801b744:	bc30      	pop	{r4, r5}
 801b746:	bf48      	it	mi
 801b748:	58d3      	ldrmi	r3, [r2, r3]
 801b74a:	4718      	bx	r3

0801b74c <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv>:
 801b74c:	6843      	ldr	r3, [r0, #4]
 801b74e:	b12b      	cbz	r3, 801b75c <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv+0x10>
 801b750:	6883      	ldr	r3, [r0, #8]
 801b752:	b92b      	cbnz	r3, 801b760 <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv+0x14>
 801b754:	68c0      	ldr	r0, [r0, #12]
 801b756:	f000 0001 	and.w	r0, r0, #1
 801b75a:	4770      	bx	lr
 801b75c:	4618      	mov	r0, r3
 801b75e:	4770      	bx	lr
 801b760:	2001      	movs	r0, #1
 801b762:	4770      	bx	lr

0801b764 <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvED0Ev>:
 801b764:	b510      	push	{r4, lr}
 801b766:	2110      	movs	r1, #16
 801b768:	4604      	mov	r4, r0
 801b76a:	f011 fce7 	bl	802d13c <_ZdlPvj>
 801b76e:	4620      	mov	r0, r4
 801b770:	bd10      	pop	{r4, pc}

0801b772 <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvED0Ev>:
 801b772:	b510      	push	{r4, lr}
 801b774:	2110      	movs	r1, #16
 801b776:	4604      	mov	r4, r0
 801b778:	f011 fce0 	bl	802d13c <_ZdlPvj>
 801b77c:	4620      	mov	r0, r4
 801b77e:	bd10      	pop	{r4, pc}

0801b780 <_ZN8touchgfx10ListLayout9removeAllEv>:
 801b780:	b570      	push	{r4, r5, r6, lr}
 801b782:	2500      	movs	r5, #0
 801b784:	6803      	ldr	r3, [r0, #0]
 801b786:	85c5      	strh	r5, [r0, #46]	; 0x2e
 801b788:	4604      	mov	r4, r0
 801b78a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b78c:	4629      	mov	r1, r5
 801b78e:	4798      	blx	r3
 801b790:	6823      	ldr	r3, [r4, #0]
 801b792:	4629      	mov	r1, r5
 801b794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b796:	4620      	mov	r0, r4
 801b798:	4798      	blx	r3
 801b79a:	4620      	mov	r0, r4
 801b79c:	f7ff fadc 	bl	801ad58 <_ZN8touchgfx9Container9removeAllEv>
 801b7a0:	6960      	ldr	r0, [r4, #20]
 801b7a2:	b120      	cbz	r0, 801b7ae <_ZN8touchgfx10ListLayout9removeAllEv+0x2e>
 801b7a4:	6803      	ldr	r3, [r0, #0]
 801b7a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b7aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b7ac:	4718      	bx	r3
 801b7ae:	bd70      	pop	{r4, r5, r6, pc}

0801b7b0 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE>:
 801b7b0:	4603      	mov	r3, r0
 801b7b2:	4608      	mov	r0, r1
 801b7b4:	789a      	ldrb	r2, [r3, #2]
 801b7b6:	b992      	cbnz	r2, 801b7de <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x2e>
 801b7b8:	685a      	ldr	r2, [r3, #4]
 801b7ba:	428a      	cmp	r2, r1
 801b7bc:	d102      	bne.n	801b7c4 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x14>
 801b7be:	2201      	movs	r2, #1
 801b7c0:	709a      	strb	r2, [r3, #2]
 801b7c2:	4770      	bx	lr
 801b7c4:	7a1a      	ldrb	r2, [r3, #8]
 801b7c6:	2a01      	cmp	r2, #1
 801b7c8:	d104      	bne.n	801b7d4 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x24>
 801b7ca:	88ca      	ldrh	r2, [r1, #6]
 801b7cc:	8949      	ldrh	r1, [r1, #10]
 801b7ce:	440a      	add	r2, r1
 801b7d0:	801a      	strh	r2, [r3, #0]
 801b7d2:	4770      	bx	lr
 801b7d4:	2a02      	cmp	r2, #2
 801b7d6:	d116      	bne.n	801b806 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x56>
 801b7d8:	888a      	ldrh	r2, [r1, #4]
 801b7da:	8909      	ldrh	r1, [r1, #8]
 801b7dc:	e7f7      	b.n	801b7ce <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x1e>
 801b7de:	7a1a      	ldrb	r2, [r3, #8]
 801b7e0:	2a01      	cmp	r2, #1
 801b7e2:	d107      	bne.n	801b7f4 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x44>
 801b7e4:	685b      	ldr	r3, [r3, #4]
 801b7e6:	8959      	ldrh	r1, [r3, #10]
 801b7e8:	88c3      	ldrh	r3, [r0, #6]
 801b7ea:	4419      	add	r1, r3
 801b7ec:	6803      	ldr	r3, [r0, #0]
 801b7ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b7f0:	b209      	sxth	r1, r1
 801b7f2:	4718      	bx	r3
 801b7f4:	2a02      	cmp	r2, #2
 801b7f6:	d106      	bne.n	801b806 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x56>
 801b7f8:	685b      	ldr	r3, [r3, #4]
 801b7fa:	8919      	ldrh	r1, [r3, #8]
 801b7fc:	8883      	ldrh	r3, [r0, #4]
 801b7fe:	4419      	add	r1, r3
 801b800:	6803      	ldr	r3, [r0, #0]
 801b802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b804:	e7f4      	b.n	801b7f0 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x40>
 801b806:	4770      	bx	lr

0801b808 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE>:
 801b808:	b530      	push	{r4, r5, lr}
 801b80a:	1e4b      	subs	r3, r1, #1
 801b80c:	2b01      	cmp	r3, #1
 801b80e:	b085      	sub	sp, #20
 801b810:	4604      	mov	r4, r0
 801b812:	d905      	bls.n	801b820 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x18>
 801b814:	4b14      	ldr	r3, [pc, #80]	; (801b868 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x60>)
 801b816:	4a15      	ldr	r2, [pc, #84]	; (801b86c <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x64>)
 801b818:	4815      	ldr	r0, [pc, #84]	; (801b870 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x68>)
 801b81a:	21af      	movs	r1, #175	; 0xaf
 801b81c:	f012 fd5c 	bl	802e2d8 <__assert_func>
 801b820:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801b824:	428b      	cmp	r3, r1
 801b826:	d01c      	beq.n	801b862 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x5a>
 801b828:	2500      	movs	r5, #0
 801b82a:	6803      	ldr	r3, [r0, #0]
 801b82c:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
 801b830:	85c5      	strh	r5, [r0, #46]	; 0x2e
 801b832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b834:	4629      	mov	r1, r5
 801b836:	4798      	blx	r3
 801b838:	6823      	ldr	r3, [r4, #0]
 801b83a:	4629      	mov	r1, r5
 801b83c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b83e:	4620      	mov	r0, r4
 801b840:	4798      	blx	r3
 801b842:	4b0c      	ldr	r3, [pc, #48]	; (801b874 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x6c>)
 801b844:	e9cd 3400 	strd	r3, r4, [sp]
 801b848:	4b0b      	ldr	r3, [pc, #44]	; (801b878 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x70>)
 801b84a:	e9cd 3502 	strd	r3, r5, [sp, #8]
 801b84e:	6823      	ldr	r3, [r4, #0]
 801b850:	4620      	mov	r0, r4
 801b852:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b854:	4669      	mov	r1, sp
 801b856:	4798      	blx	r3
 801b858:	6960      	ldr	r0, [r4, #20]
 801b85a:	b110      	cbz	r0, 801b862 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x5a>
 801b85c:	6803      	ldr	r3, [r0, #0]
 801b85e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b860:	4798      	blx	r3
 801b862:	b005      	add	sp, #20
 801b864:	bd30      	pop	{r4, r5, pc}
 801b866:	bf00      	nop
 801b868:	080325c0 	.word	0x080325c0
 801b86c:	080326c8 	.word	0x080326c8
 801b870:	080325fe 	.word	0x080325fe
 801b874:	08032598 	.word	0x08032598
 801b878:	0801b8e5 	.word	0x0801b8e5

0801b87c <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>:
 801b87c:	b538      	push	{r3, r4, r5, lr}
 801b87e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801b882:	2b01      	cmp	r3, #1
 801b884:	460d      	mov	r5, r1
 801b886:	4604      	mov	r4, r0
 801b888:	4611      	mov	r1, r2
 801b88a:	d002      	beq.n	801b892 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x16>
 801b88c:	2b02      	cmp	r3, #2
 801b88e:	d016      	beq.n	801b8be <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x42>
 801b890:	bd38      	pop	{r3, r4, r5, pc}
 801b892:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 801b896:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801b89a:	429a      	cmp	r2, r3
 801b89c:	bfb8      	it	lt
 801b89e:	8103      	strhlt	r3, [r0, #8]
 801b8a0:	896a      	ldrh	r2, [r5, #10]
 801b8a2:	8943      	ldrh	r3, [r0, #10]
 801b8a4:	4413      	add	r3, r2
 801b8a6:	8143      	strh	r3, [r0, #10]
 801b8a8:	682b      	ldr	r3, [r5, #0]
 801b8aa:	460a      	mov	r2, r1
 801b8ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b8ae:	2100      	movs	r1, #0
 801b8b0:	4628      	mov	r0, r5
 801b8b2:	4798      	blx	r3
 801b8b4:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801b8b6:	896a      	ldrh	r2, [r5, #10]
 801b8b8:	4413      	add	r3, r2
 801b8ba:	85e3      	strh	r3, [r4, #46]	; 0x2e
 801b8bc:	e7e8      	b.n	801b890 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x14>
 801b8be:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 801b8c2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801b8c6:	429a      	cmp	r2, r3
 801b8c8:	bfb8      	it	lt
 801b8ca:	8143      	strhlt	r3, [r0, #10]
 801b8cc:	892a      	ldrh	r2, [r5, #8]
 801b8ce:	8903      	ldrh	r3, [r0, #8]
 801b8d0:	4413      	add	r3, r2
 801b8d2:	8103      	strh	r3, [r0, #8]
 801b8d4:	682b      	ldr	r3, [r5, #0]
 801b8d6:	2200      	movs	r2, #0
 801b8d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b8da:	4628      	mov	r0, r5
 801b8dc:	4798      	blx	r3
 801b8de:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801b8e0:	892a      	ldrh	r2, [r5, #8]
 801b8e2:	e7e9      	b.n	801b8b8 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x3c>

0801b8e4 <_ZN8touchgfx10ListLayout18internalAddElementERNS_8DrawableE>:
 801b8e4:	f9b0 202e 	ldrsh.w	r2, [r0, #46]	; 0x2e
 801b8e8:	f7ff bfc8 	b.w	801b87c <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>

0801b8ec <_ZN8touchgfx10ListLayout3addERNS_8DrawableE>:
 801b8ec:	b570      	push	{r4, r5, r6, lr}
 801b8ee:	4604      	mov	r4, r0
 801b8f0:	460d      	mov	r5, r1
 801b8f2:	f7ff fff7 	bl	801b8e4 <_ZN8touchgfx10ListLayout18internalAddElementERNS_8DrawableE>
 801b8f6:	4620      	mov	r0, r4
 801b8f8:	4629      	mov	r1, r5
 801b8fa:	f7ff fabb 	bl	801ae74 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801b8fe:	6960      	ldr	r0, [r4, #20]
 801b900:	b120      	cbz	r0, 801b90c <_ZN8touchgfx10ListLayout3addERNS_8DrawableE+0x20>
 801b902:	6803      	ldr	r3, [r0, #0]
 801b904:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b90a:	4718      	bx	r3
 801b90c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801b910 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_>:
 801b910:	b530      	push	{r4, r5, lr}
 801b912:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801b914:	b089      	sub	sp, #36	; 0x24
 801b916:	4604      	mov	r4, r0
 801b918:	4615      	mov	r5, r2
 801b91a:	b92b      	cbnz	r3, 801b928 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x18>
 801b91c:	6803      	ldr	r3, [r0, #0]
 801b91e:	4611      	mov	r1, r2
 801b920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b922:	4798      	blx	r3
 801b924:	b009      	add	sp, #36	; 0x24
 801b926:	bd30      	pop	{r4, r5, pc}
 801b928:	f7ff fa89 	bl	801ae3e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>
 801b92c:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 801b930:	f88d 200c 	strb.w	r2, [sp, #12]
 801b934:	4a0f      	ldr	r2, [pc, #60]	; (801b974 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x64>)
 801b936:	9204      	str	r2, [sp, #16]
 801b938:	aa01      	add	r2, sp, #4
 801b93a:	9205      	str	r2, [sp, #20]
 801b93c:	4a0e      	ldr	r2, [pc, #56]	; (801b978 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x68>)
 801b93e:	9502      	str	r5, [sp, #8]
 801b940:	2300      	movs	r3, #0
 801b942:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b946:	f8ad 3004 	strh.w	r3, [sp, #4]
 801b94a:	f88d 3006 	strb.w	r3, [sp, #6]
 801b94e:	6823      	ldr	r3, [r4, #0]
 801b950:	a904      	add	r1, sp, #16
 801b952:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b954:	4620      	mov	r0, r4
 801b956:	4798      	blx	r3
 801b958:	4620      	mov	r0, r4
 801b95a:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801b95e:	4629      	mov	r1, r5
 801b960:	f7ff ff8c 	bl	801b87c <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>
 801b964:	6960      	ldr	r0, [r4, #20]
 801b966:	2800      	cmp	r0, #0
 801b968:	d0dc      	beq.n	801b924 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x14>
 801b96a:	6803      	ldr	r3, [r0, #0]
 801b96c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b96e:	4798      	blx	r3
 801b970:	e7d8      	b.n	801b924 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x14>
 801b972:	bf00      	nop
 801b974:	080325b0 	.word	0x080325b0
 801b978:	0801b7b1 	.word	0x0801b7b1

0801b97c <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs>:
 801b97c:	b538      	push	{r3, r4, r5, lr}
 801b97e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801b982:	2b01      	cmp	r3, #1
 801b984:	4604      	mov	r4, r0
 801b986:	460d      	mov	r5, r1
 801b988:	d002      	beq.n	801b990 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x14>
 801b98a:	2b02      	cmp	r3, #2
 801b98c:	d018      	beq.n	801b9c0 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x44>
 801b98e:	bd38      	pop	{r3, r4, r5, pc}
 801b990:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801b994:	4293      	cmp	r3, r2
 801b996:	bfc8      	it	gt
 801b998:	8102      	strhgt	r2, [r0, #8]
 801b99a:	894a      	ldrh	r2, [r1, #10]
 801b99c:	8943      	ldrh	r3, [r0, #10]
 801b99e:	1a9b      	subs	r3, r3, r2
 801b9a0:	8143      	strh	r3, [r0, #10]
 801b9a2:	680b      	ldr	r3, [r1, #0]
 801b9a4:	4628      	mov	r0, r5
 801b9a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b9a8:	2100      	movs	r1, #0
 801b9aa:	4798      	blx	r3
 801b9ac:	682b      	ldr	r3, [r5, #0]
 801b9ae:	2100      	movs	r1, #0
 801b9b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b9b2:	4628      	mov	r0, r5
 801b9b4:	4798      	blx	r3
 801b9b6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801b9b8:	896a      	ldrh	r2, [r5, #10]
 801b9ba:	1a9b      	subs	r3, r3, r2
 801b9bc:	85e3      	strh	r3, [r4, #46]	; 0x2e
 801b9be:	e7e6      	b.n	801b98e <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x12>
 801b9c0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801b9c4:	4293      	cmp	r3, r2
 801b9c6:	bfc8      	it	gt
 801b9c8:	8142      	strhgt	r2, [r0, #10]
 801b9ca:	890a      	ldrh	r2, [r1, #8]
 801b9cc:	8903      	ldrh	r3, [r0, #8]
 801b9ce:	1a9b      	subs	r3, r3, r2
 801b9d0:	8103      	strh	r3, [r0, #8]
 801b9d2:	680b      	ldr	r3, [r1, #0]
 801b9d4:	4628      	mov	r0, r5
 801b9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b9d8:	2100      	movs	r1, #0
 801b9da:	4798      	blx	r3
 801b9dc:	682b      	ldr	r3, [r5, #0]
 801b9de:	2100      	movs	r1, #0
 801b9e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b9e2:	4628      	mov	r0, r5
 801b9e4:	4798      	blx	r3
 801b9e6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801b9e8:	892a      	ldrh	r2, [r5, #8]
 801b9ea:	e7e6      	b.n	801b9ba <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x3e>

0801b9ec <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE>:
 801b9ec:	b530      	push	{r4, r5, lr}
 801b9ee:	b089      	sub	sp, #36	; 0x24
 801b9f0:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 801b9f4:	f88d 200c 	strb.w	r2, [sp, #12]
 801b9f8:	4a13      	ldr	r2, [pc, #76]	; (801ba48 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x5c>)
 801b9fa:	9204      	str	r2, [sp, #16]
 801b9fc:	aa01      	add	r2, sp, #4
 801b9fe:	9205      	str	r2, [sp, #20]
 801ba00:	4a12      	ldr	r2, [pc, #72]	; (801ba4c <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x60>)
 801ba02:	9102      	str	r1, [sp, #8]
 801ba04:	2300      	movs	r3, #0
 801ba06:	f8ad 3004 	strh.w	r3, [sp, #4]
 801ba0a:	f88d 3006 	strb.w	r3, [sp, #6]
 801ba0e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801ba12:	6803      	ldr	r3, [r0, #0]
 801ba14:	460d      	mov	r5, r1
 801ba16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801ba18:	a904      	add	r1, sp, #16
 801ba1a:	4604      	mov	r4, r0
 801ba1c:	4798      	blx	r3
 801ba1e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801ba22:	b14b      	cbz	r3, 801ba38 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x4c>
 801ba24:	4629      	mov	r1, r5
 801ba26:	4620      	mov	r0, r4
 801ba28:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801ba2c:	f7ff ffa6 	bl	801b97c <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs>
 801ba30:	4629      	mov	r1, r5
 801ba32:	4620      	mov	r0, r4
 801ba34:	f7ff f9ec 	bl	801ae10 <_ZN8touchgfx9Container6removeERNS_8DrawableE>
 801ba38:	6960      	ldr	r0, [r4, #20]
 801ba3a:	b110      	cbz	r0, 801ba42 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x56>
 801ba3c:	6803      	ldr	r3, [r0, #0]
 801ba3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ba40:	4798      	blx	r3
 801ba42:	b009      	add	sp, #36	; 0x24
 801ba44:	bd30      	pop	{r4, r5, pc}
 801ba46:	bf00      	nop
 801ba48:	080325b0 	.word	0x080325b0
 801ba4c:	0801b693 	.word	0x0801b693

0801ba50 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801ba50:	2000      	movs	r0, #0
 801ba52:	4770      	bx	lr

0801ba54 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801ba54:	2001      	movs	r0, #1
 801ba56:	4770      	bx	lr

0801ba58 <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_>:
 801ba58:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ba5a:	6803      	ldr	r3, [r0, #0]
 801ba5c:	4604      	mov	r4, r0
 801ba5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801ba60:	460e      	mov	r6, r1
 801ba62:	4601      	mov	r1, r0
 801ba64:	4668      	mov	r0, sp
 801ba66:	4615      	mov	r5, r2
 801ba68:	4798      	blx	r3
 801ba6a:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 801ba6e:	b13b      	cbz	r3, 801ba80 <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_+0x28>
 801ba70:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801ba74:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801ba78:	4293      	cmp	r3, r2
 801ba7a:	bfac      	ite	ge
 801ba7c:	2300      	movge	r3, #0
 801ba7e:	2301      	movlt	r3, #1
 801ba80:	7033      	strb	r3, [r6, #0]
 801ba82:	f894 30ad 	ldrb.w	r3, [r4, #173]	; 0xad
 801ba86:	b13b      	cbz	r3, 801ba98 <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_+0x40>
 801ba88:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801ba8c:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801ba90:	4293      	cmp	r3, r2
 801ba92:	bfac      	ite	ge
 801ba94:	2300      	movge	r3, #0
 801ba96:	2301      	movlt	r3, #1
 801ba98:	702b      	strb	r3, [r5, #0]
 801ba9a:	b002      	add	sp, #8
 801ba9c:	bd70      	pop	{r4, r5, r6, pc}

0801ba9e <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss>:
 801ba9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801baa2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801baa4:	460e      	mov	r6, r1
 801baa6:	4617      	mov	r7, r2
 801baa8:	f100 0838 	add.w	r8, r0, #56	; 0x38
 801baac:	f100 0568 	add.w	r5, r0, #104	; 0x68
 801bab0:	b15c      	cbz	r4, 801baca <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x2c>
 801bab2:	4544      	cmp	r4, r8
 801bab4:	d007      	beq.n	801bac6 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x28>
 801bab6:	42ac      	cmp	r4, r5
 801bab8:	d005      	beq.n	801bac6 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x28>
 801baba:	6823      	ldr	r3, [r4, #0]
 801babc:	463a      	mov	r2, r7
 801babe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801bac0:	4631      	mov	r1, r6
 801bac2:	4620      	mov	r0, r4
 801bac4:	4798      	blx	r3
 801bac6:	69a4      	ldr	r4, [r4, #24]
 801bac8:	e7f2      	b.n	801bab0 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x12>
 801baca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801bace <_ZN8touchgfx9DragEventD1Ev>:
 801bace:	4770      	bx	lr

0801bad0 <_ZN8touchgfx10ClickEventD1Ev>:
 801bad0:	4770      	bx	lr

0801bad2 <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE>:
 801bad2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bad4:	4605      	mov	r5, r0
 801bad6:	4604      	mov	r4, r0
 801bad8:	f855 3b68 	ldr.w	r3, [r5], #104
 801badc:	f100 0638 	add.w	r6, r0, #56	; 0x38
 801bae0:	460f      	mov	r7, r1
 801bae2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801bae4:	4631      	mov	r1, r6
 801bae6:	4798      	blx	r3
 801bae8:	6823      	ldr	r3, [r4, #0]
 801baea:	4629      	mov	r1, r5
 801baec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801baee:	4620      	mov	r0, r4
 801baf0:	4798      	blx	r3
 801baf2:	4639      	mov	r1, r7
 801baf4:	4620      	mov	r0, r4
 801baf6:	f7ff f9bd 	bl	801ae74 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801bafa:	4631      	mov	r1, r6
 801bafc:	4620      	mov	r0, r4
 801bafe:	f7ff f9b9 	bl	801ae74 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801bb02:	4629      	mov	r1, r5
 801bb04:	4620      	mov	r0, r4
 801bb06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801bb0a:	f7ff b9b3 	b.w	801ae74 <_ZN8touchgfx9Container3addERNS_8DrawableE>

0801bb0e <_ZN8touchgfx10ClickEventD0Ev>:
 801bb0e:	b510      	push	{r4, lr}
 801bb10:	210c      	movs	r1, #12
 801bb12:	4604      	mov	r4, r0
 801bb14:	f011 fb12 	bl	802d13c <_ZdlPvj>
 801bb18:	4620      	mov	r0, r4
 801bb1a:	bd10      	pop	{r4, pc}

0801bb1c <_ZN8touchgfx9DragEventD0Ev>:
 801bb1c:	b510      	push	{r4, lr}
 801bb1e:	2110      	movs	r1, #16
 801bb20:	4604      	mov	r4, r0
 801bb22:	f011 fb0b 	bl	802d13c <_ZdlPvj>
 801bb26:	4620      	mov	r0, r4
 801bb28:	bd10      	pop	{r4, pc}
	...

0801bb2c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE>:
 801bb2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bb30:	b089      	sub	sp, #36	; 0x24
 801bb32:	aa08      	add	r2, sp, #32
 801bb34:	2300      	movs	r3, #0
 801bb36:	f88d 3006 	strb.w	r3, [sp, #6]
 801bb3a:	f802 3d19 	strb.w	r3, [r2, #-25]!
 801bb3e:	6803      	ldr	r3, [r0, #0]
 801bb40:	f9b1 9006 	ldrsh.w	r9, [r1, #6]
 801bb44:	f9b1 8008 	ldrsh.w	r8, [r1, #8]
 801bb48:	f9b1 700a 	ldrsh.w	r7, [r1, #10]
 801bb4c:	f9b1 600c 	ldrsh.w	r6, [r1, #12]
 801bb50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801bb54:	4604      	mov	r4, r0
 801bb56:	460d      	mov	r5, r1
 801bb58:	f10d 0106 	add.w	r1, sp, #6
 801bb5c:	4798      	blx	r3
 801bb5e:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 801bb62:	2900      	cmp	r1, #0
 801bb64:	d035      	beq.n	801bbd2 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xa6>
 801bb66:	42a1      	cmp	r1, r4
 801bb68:	d033      	beq.n	801bbd2 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xa6>
 801bb6a:	a802      	add	r0, sp, #8
 801bb6c:	f004 f86c 	bl	801fc48 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bb70:	f8b4 20ba 	ldrh.w	r2, [r4, #186]	; 0xba
 801bb74:	88a3      	ldrh	r3, [r4, #4]
 801bb76:	f8b4 00bc 	ldrh.w	r0, [r4, #188]	; 0xbc
 801bb7a:	88e9      	ldrh	r1, [r5, #6]
 801bb7c:	f89d c006 	ldrb.w	ip, [sp, #6]
 801bb80:	4413      	add	r3, r2
 801bb82:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801bb86:	1a9b      	subs	r3, r3, r2
 801bb88:	88e2      	ldrh	r2, [r4, #6]
 801bb8a:	4402      	add	r2, r0
 801bb8c:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 801bb90:	1a12      	subs	r2, r2, r0
 801bb92:	8928      	ldrh	r0, [r5, #8]
 801bb94:	b29b      	uxth	r3, r3
 801bb96:	b292      	uxth	r2, r2
 801bb98:	4419      	add	r1, r3
 801bb9a:	4410      	add	r0, r2
 801bb9c:	b209      	sxth	r1, r1
 801bb9e:	b200      	sxth	r0, r0
 801bba0:	f1bc 0f00 	cmp.w	ip, #0
 801bba4:	f040 808f 	bne.w	801bcc6 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x19a>
 801bba8:	f8b5 e00a 	ldrh.w	lr, [r5, #10]
 801bbac:	4473      	add	r3, lr
 801bbae:	b21b      	sxth	r3, r3
 801bbb0:	f89d e007 	ldrb.w	lr, [sp, #7]
 801bbb4:	f1be 0f00 	cmp.w	lr, #0
 801bbb8:	f040 80b3 	bne.w	801bd22 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f6>
 801bbbc:	f8b5 e00c 	ldrh.w	lr, [r5, #12]
 801bbc0:	4472      	add	r2, lr
 801bbc2:	b212      	sxth	r2, r2
 801bbc4:	f1bc 0f00 	cmp.w	ip, #0
 801bbc8:	f000 80ca 	beq.w	801bd60 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x234>
 801bbcc:	4290      	cmp	r0, r2
 801bbce:	f040 80b0 	bne.w	801bd32 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x206>
 801bbd2:	f894 30ab 	ldrb.w	r3, [r4, #171]	; 0xab
 801bbd6:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 801bbda:	2b00      	cmp	r3, #0
 801bbdc:	f040 809b 	bne.w	801bd16 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1ea>
 801bbe0:	896e      	ldrh	r6, [r5, #10]
 801bbe2:	f8b4 30ba 	ldrh.w	r3, [r4, #186]	; 0xba
 801bbe6:	f8b4 20bc 	ldrh.w	r2, [r4, #188]	; 0xbc
 801bbea:	89ad      	ldrh	r5, [r5, #12]
 801bbec:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
 801bbf0:	f8b4 80a8 	ldrh.w	r8, [r4, #168]	; 0xa8
 801bbf4:	4419      	add	r1, r3
 801bbf6:	4490      	add	r8, r2
 801bbf8:	4433      	add	r3, r6
 801bbfa:	442a      	add	r2, r5
 801bbfc:	f89d 5006 	ldrb.w	r5, [sp, #6]
 801bc00:	b29b      	uxth	r3, r3
 801bc02:	b292      	uxth	r2, r2
 801bc04:	b289      	uxth	r1, r1
 801bc06:	fa1f f888 	uxth.w	r8, r8
 801bc0a:	b21f      	sxth	r7, r3
 801bc0c:	b216      	sxth	r6, r2
 801bc0e:	b165      	cbz	r5, 801bc2a <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xfe>
 801bc10:	1a5b      	subs	r3, r3, r1
 801bc12:	b29b      	uxth	r3, r3
 801bc14:	b21d      	sxth	r5, r3
 801bc16:	2d00      	cmp	r5, #0
 801bc18:	bfbc      	itt	lt
 801bc1a:	425b      	neglt	r3, r3
 801bc1c:	b21d      	sxthlt	r5, r3
 801bc1e:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 801bc22:	42ab      	cmp	r3, r5
 801bc24:	bfac      	ite	ge
 801bc26:	2500      	movge	r5, #0
 801bc28:	2501      	movlt	r5, #1
 801bc2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801bc2e:	b15b      	cbz	r3, 801bc48 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x11c>
 801bc30:	eba2 0308 	sub.w	r3, r2, r8
 801bc34:	b29b      	uxth	r3, r3
 801bc36:	b21a      	sxth	r2, r3
 801bc38:	2a00      	cmp	r2, #0
 801bc3a:	bfbc      	itt	lt
 801bc3c:	425b      	neglt	r3, r3
 801bc3e:	b21a      	sxthlt	r2, r3
 801bc40:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 801bc44:	4293      	cmp	r3, r2
 801bc46:	db01      	blt.n	801bc4c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x120>
 801bc48:	2d00      	cmp	r5, #0
 801bc4a:	d03e      	beq.n	801bcca <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x19e>
 801bc4c:	2501      	movs	r5, #1
 801bc4e:	fa0f f981 	sxth.w	r9, r1
 801bc52:	fa0f f888 	sxth.w	r8, r8
 801bc56:	f884 50ab 	strb.w	r5, [r4, #171]	; 0xab
 801bc5a:	b1a0      	cbz	r0, 801bc86 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x15a>
 801bc5c:	f894 30be 	ldrb.w	r3, [r4, #190]	; 0xbe
 801bc60:	b98b      	cbnz	r3, 801bc86 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x15a>
 801bc62:	4a41      	ldr	r2, [pc, #260]	; (801bd68 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x23c>)
 801bc64:	9204      	str	r2, [sp, #16]
 801bc66:	2202      	movs	r2, #2
 801bc68:	f88d 2014 	strb.w	r2, [sp, #20]
 801bc6c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bc70:	f8ad 3018 	strh.w	r3, [sp, #24]
 801bc74:	f8ad 301a 	strh.w	r3, [sp, #26]
 801bc78:	6803      	ldr	r3, [r0, #0]
 801bc7a:	a904      	add	r1, sp, #16
 801bc7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bc7e:	4798      	blx	r3
 801bc80:	2301      	movs	r3, #1
 801bc82:	f884 30be 	strb.w	r3, [r4, #190]	; 0xbe
 801bc86:	f894 10ac 	ldrb.w	r1, [r4, #172]	; 0xac
 801bc8a:	b149      	cbz	r1, 801bca0 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x174>
 801bc8c:	eba7 0109 	sub.w	r1, r7, r9
 801bc90:	b209      	sxth	r1, r1
 801bc92:	b12d      	cbz	r5, 801bca0 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x174>
 801bc94:	2900      	cmp	r1, #0
 801bc96:	dc40      	bgt.n	801bd1a <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1ee>
 801bc98:	bf14      	ite	ne
 801bc9a:	f04f 31ff 	movne.w	r1, #4294967295
 801bc9e:	2100      	moveq	r1, #0
 801bca0:	f894 20ad 	ldrb.w	r2, [r4, #173]	; 0xad
 801bca4:	b14a      	cbz	r2, 801bcba <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x18e>
 801bca6:	eba6 0608 	sub.w	r6, r6, r8
 801bcaa:	b232      	sxth	r2, r6
 801bcac:	b12d      	cbz	r5, 801bcba <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x18e>
 801bcae:	2a00      	cmp	r2, #0
 801bcb0:	dc35      	bgt.n	801bd1e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f2>
 801bcb2:	bf14      	ite	ne
 801bcb4:	f04f 32ff 	movne.w	r2, #4294967295
 801bcb8:	2200      	moveq	r2, #0
 801bcba:	6823      	ldr	r3, [r4, #0]
 801bcbc:	4620      	mov	r0, r4
 801bcbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bcc2:	4798      	blx	r3
 801bcc4:	e024      	b.n	801bd10 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1e4>
 801bcc6:	460b      	mov	r3, r1
 801bcc8:	e772      	b.n	801bbb0 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x84>
 801bcca:	b308      	cbz	r0, 801bd10 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1e4>
 801bccc:	f894 30be 	ldrb.w	r3, [r4, #190]	; 0xbe
 801bcd0:	b9f3      	cbnz	r3, 801bd10 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1e4>
 801bcd2:	ab08      	add	r3, sp, #32
 801bcd4:	4620      	mov	r0, r4
 801bcd6:	f843 5d18 	str.w	r5, [r3, #-24]!
 801bcda:	4632      	mov	r2, r6
 801bcdc:	4639      	mov	r1, r7
 801bcde:	f7ff f847 	bl	801ad70 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801bce2:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 801bce6:	9b02      	ldr	r3, [sp, #8]
 801bce8:	4298      	cmp	r0, r3
 801bcea:	d011      	beq.n	801bd10 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1e4>
 801bcec:	4b1e      	ldr	r3, [pc, #120]	; (801bd68 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x23c>)
 801bcee:	9304      	str	r3, [sp, #16]
 801bcf0:	2302      	movs	r3, #2
 801bcf2:	f88d 3014 	strb.w	r3, [sp, #20]
 801bcf6:	f8ad 5016 	strh.w	r5, [sp, #22]
 801bcfa:	f8ad 5018 	strh.w	r5, [sp, #24]
 801bcfe:	f8ad 501a 	strh.w	r5, [sp, #26]
 801bd02:	6803      	ldr	r3, [r0, #0]
 801bd04:	a904      	add	r1, sp, #16
 801bd06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bd08:	4798      	blx	r3
 801bd0a:	2301      	movs	r3, #1
 801bd0c:	f884 30be 	strb.w	r3, [r4, #190]	; 0xbe
 801bd10:	b009      	add	sp, #36	; 0x24
 801bd12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bd16:	2500      	movs	r5, #0
 801bd18:	e79f      	b.n	801bc5a <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x12e>
 801bd1a:	2101      	movs	r1, #1
 801bd1c:	e7c0      	b.n	801bca0 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x174>
 801bd1e:	2201      	movs	r2, #1
 801bd20:	e7cb      	b.n	801bcba <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x18e>
 801bd22:	f1bc 0f00 	cmp.w	ip, #0
 801bd26:	f47f af54 	bne.w	801bbd2 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xa6>
 801bd2a:	428b      	cmp	r3, r1
 801bd2c:	f43f af51 	beq.w	801bbd2 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xa6>
 801bd30:	4602      	mov	r2, r0
 801bd32:	f8df c038 	ldr.w	ip, [pc, #56]	; 801bd6c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x240>
 801bd36:	f8cd c010 	str.w	ip, [sp, #16]
 801bd3a:	f8ad 0018 	strh.w	r0, [sp, #24]
 801bd3e:	f04f 0c00 	mov.w	ip, #0
 801bd42:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 801bd46:	f8ad 1016 	strh.w	r1, [sp, #22]
 801bd4a:	f88d c014 	strb.w	ip, [sp, #20]
 801bd4e:	f8ad 301a 	strh.w	r3, [sp, #26]
 801bd52:	f8ad 201c 	strh.w	r2, [sp, #28]
 801bd56:	6803      	ldr	r3, [r0, #0]
 801bd58:	a904      	add	r1, sp, #16
 801bd5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801bd5c:	4798      	blx	r3
 801bd5e:	e738      	b.n	801bbd2 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xa6>
 801bd60:	428b      	cmp	r3, r1
 801bd62:	f43f af33 	beq.w	801bbcc <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xa0>
 801bd66:	e7e4      	b.n	801bd32 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x206>
 801bd68:	08032718 	.word	0x08032718
 801bd6c:	0803272c 	.word	0x0803272c

0801bd70 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE>:
 801bd70:	b570      	push	{r4, r5, r6, lr}
 801bd72:	b086      	sub	sp, #24
 801bd74:	aa06      	add	r2, sp, #24
 801bd76:	2300      	movs	r3, #0
 801bd78:	f88d 3002 	strb.w	r3, [sp, #2]
 801bd7c:	f802 3d15 	strb.w	r3, [r2, #-21]!
 801bd80:	6803      	ldr	r3, [r0, #0]
 801bd82:	460c      	mov	r4, r1
 801bd84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801bd88:	f10d 0102 	add.w	r1, sp, #2
 801bd8c:	4605      	mov	r5, r0
 801bd8e:	4798      	blx	r3
 801bd90:	f89d 3002 	ldrb.w	r3, [sp, #2]
 801bd94:	b10b      	cbz	r3, 801bd9a <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x2a>
 801bd96:	7923      	ldrb	r3, [r4, #4]
 801bd98:	b133      	cbz	r3, 801bda8 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x38>
 801bd9a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801bd9e:	2b00      	cmp	r3, #0
 801bda0:	d068      	beq.n	801be74 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x104>
 801bda2:	7923      	ldrb	r3, [r4, #4]
 801bda4:	2b01      	cmp	r3, #1
 801bda6:	d165      	bne.n	801be74 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x104>
 801bda8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801bdac:	2a00      	cmp	r2, #0
 801bdae:	bfbc      	itt	lt
 801bdb0:	4253      	neglt	r3, r2
 801bdb2:	b21a      	sxthlt	r2, r3
 801bdb4:	f9b5 30a4 	ldrsh.w	r3, [r5, #164]	; 0xa4
 801bdb8:	4293      	cmp	r3, r2
 801bdba:	dc5b      	bgt.n	801be74 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x104>
 801bdbc:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 801bdbe:	f8b5 10c2 	ldrh.w	r1, [r5, #194]	; 0xc2
 801bdc2:	4293      	cmp	r3, r2
 801bdc4:	bfa8      	it	ge
 801bdc6:	4613      	movge	r3, r2
 801bdc8:	2b05      	cmp	r3, #5
 801bdca:	bfb8      	it	lt
 801bdcc:	2305      	movlt	r3, #5
 801bdce:	f8b5 20c0 	ldrh.w	r2, [r5, #192]	; 0xc0
 801bdd2:	b21b      	sxth	r3, r3
 801bdd4:	435a      	muls	r2, r3
 801bdd6:	fb92 f2f1 	sdiv	r2, r2, r1
 801bdda:	b290      	uxth	r0, r2
 801bddc:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
 801bde0:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801bde4:	3b04      	subs	r3, #4
 801bde6:	2900      	cmp	r1, #0
 801bde8:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 801bdec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801bdf0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801bdf4:	bfc8      	it	gt
 801bdf6:	2101      	movgt	r1, #1
 801bdf8:	fb13 f301 	smulbb	r3, r3, r1
 801bdfc:	b29b      	uxth	r3, r3
 801bdfe:	b219      	sxth	r1, r3
 801be00:	2900      	cmp	r1, #0
 801be02:	bfb8      	it	lt
 801be04:	425b      	neglt	r3, r3
 801be06:	f8a5 10b4 	strh.w	r1, [r5, #180]	; 0xb4
 801be0a:	bfb8      	it	lt
 801be0c:	b219      	sxthlt	r1, r3
 801be0e:	4281      	cmp	r1, r0
 801be10:	bfd8      	it	le
 801be12:	b288      	uxthle	r0, r1
 801be14:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
 801be18:	7922      	ldrb	r2, [r4, #4]
 801be1a:	682b      	ldr	r3, [r5, #0]
 801be1c:	2a01      	cmp	r2, #1
 801be1e:	4629      	mov	r1, r5
 801be20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801be22:	d129      	bne.n	801be78 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x108>
 801be24:	a801      	add	r0, sp, #4
 801be26:	4798      	blx	r3
 801be28:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801be2c:	f8a5 30b2 	strh.w	r3, [r5, #178]	; 0xb2
 801be30:	2601      	movs	r6, #1
 801be32:	f885 60b8 	strb.w	r6, [r5, #184]	; 0xb8
 801be36:	f003 f947 	bl	801f0c8 <_ZN8touchgfx11Application11getInstanceEv>
 801be3a:	4629      	mov	r1, r5
 801be3c:	f003 f94a 	bl	801f0d4 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 801be40:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
 801be44:	7923      	ldrb	r3, [r4, #4]
 801be46:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 801be4a:	b198      	cbz	r0, 801be74 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x104>
 801be4c:	f895 30be 	ldrb.w	r3, [r5, #190]	; 0xbe
 801be50:	b983      	cbnz	r3, 801be74 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x104>
 801be52:	4a0c      	ldr	r2, [pc, #48]	; (801be84 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x114>)
 801be54:	9203      	str	r2, [sp, #12]
 801be56:	2202      	movs	r2, #2
 801be58:	f88d 2010 	strb.w	r2, [sp, #16]
 801be5c:	f8ad 3012 	strh.w	r3, [sp, #18]
 801be60:	f8ad 3014 	strh.w	r3, [sp, #20]
 801be64:	f8ad 3016 	strh.w	r3, [sp, #22]
 801be68:	6803      	ldr	r3, [r0, #0]
 801be6a:	a903      	add	r1, sp, #12
 801be6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801be6e:	4798      	blx	r3
 801be70:	f885 60be 	strb.w	r6, [r5, #190]	; 0xbe
 801be74:	b006      	add	sp, #24
 801be76:	bd70      	pop	{r4, r5, r6, pc}
 801be78:	a803      	add	r0, sp, #12
 801be7a:	4798      	blx	r3
 801be7c:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801be80:	e7d4      	b.n	801be2c <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0xbc>
 801be82:	bf00      	nop
 801be84:	08032718 	.word	0x08032718

0801be88 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv>:
 801be88:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801be8a:	f890 30b8 	ldrb.w	r3, [r0, #184]	; 0xb8
 801be8e:	4604      	mov	r4, r0
 801be90:	2b00      	cmp	r3, #0
 801be92:	d046      	beq.n	801bf22 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x9a>
 801be94:	f8b0 00b6 	ldrh.w	r0, [r0, #182]	; 0xb6
 801be98:	f8b4 30b0 	ldrh.w	r3, [r4, #176]	; 0xb0
 801be9c:	3001      	adds	r0, #1
 801be9e:	b280      	uxth	r0, r0
 801bea0:	4298      	cmp	r0, r3
 801bea2:	f8a4 00b6 	strh.w	r0, [r4, #182]	; 0xb6
 801bea6:	d840      	bhi.n	801bf2a <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0xa2>
 801bea8:	f9b4 20b4 	ldrsh.w	r2, [r4, #180]	; 0xb4
 801beac:	f9b4 10b2 	ldrsh.w	r1, [r4, #178]	; 0xb2
 801beb0:	f004 fac8 	bl	8020444 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 801beb4:	b282      	uxth	r2, r0
 801beb6:	f012 0301 	ands.w	r3, r2, #1
 801beba:	4605      	mov	r5, r0
 801bebc:	d006      	beq.n	801becc <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x44>
 801bebe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801bec2:	2800      	cmp	r0, #0
 801bec4:	bfd8      	it	le
 801bec6:	460b      	movle	r3, r1
 801bec8:	18d5      	adds	r5, r2, r3
 801beca:	b22d      	sxth	r5, r5
 801becc:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 801bed0:	2b01      	cmp	r3, #1
 801bed2:	d028      	beq.n	801bf26 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x9e>
 801bed4:	6823      	ldr	r3, [r4, #0]
 801bed6:	4621      	mov	r1, r4
 801bed8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801beda:	4668      	mov	r0, sp
 801bedc:	4798      	blx	r3
 801bede:	f8bd 6000 	ldrh.w	r6, [sp]
 801bee2:	1bae      	subs	r6, r5, r6
 801bee4:	b236      	sxth	r6, r6
 801bee6:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
 801beea:	b142      	cbz	r2, 801befe <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x76>
 801beec:	6823      	ldr	r3, [r4, #0]
 801beee:	4621      	mov	r1, r4
 801bef0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801bef2:	4668      	mov	r0, sp
 801bef4:	4798      	blx	r3
 801bef6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801befa:	1aad      	subs	r5, r5, r2
 801befc:	b22a      	sxth	r2, r5
 801befe:	6823      	ldr	r3, [r4, #0]
 801bf00:	4631      	mov	r1, r6
 801bf02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bf06:	4620      	mov	r0, r4
 801bf08:	4798      	blx	r3
 801bf0a:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
 801bf0e:	f894 50b8 	ldrb.w	r5, [r4, #184]	; 0xb8
 801bf12:	b935      	cbnz	r5, 801bf22 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x9a>
 801bf14:	f003 f8d8 	bl	801f0c8 <_ZN8touchgfx11Application11getInstanceEv>
 801bf18:	4621      	mov	r1, r4
 801bf1a:	f003 f90d 	bl	801f138 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 801bf1e:	f8a4 50b6 	strh.w	r5, [r4, #182]	; 0xb6
 801bf22:	b002      	add	sp, #8
 801bf24:	bd70      	pop	{r4, r5, r6, pc}
 801bf26:	2600      	movs	r6, #0
 801bf28:	e7dd      	b.n	801bee6 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x5e>
 801bf2a:	2300      	movs	r3, #0
 801bf2c:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
 801bf30:	e7ed      	b.n	801bf0e <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x86>

0801bf32 <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE>:
 801bf32:	b470      	push	{r4, r5, r6}
 801bf34:	f890 6025 	ldrb.w	r6, [r0, #37]	; 0x25
 801bf38:	461d      	mov	r5, r3
 801bf3a:	b11e      	cbz	r6, 801bf44 <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE+0x12>
 801bf3c:	f890 6024 	ldrb.w	r6, [r0, #36]	; 0x24
 801bf40:	b116      	cbz	r6, 801bf48 <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE+0x16>
 801bf42:	6028      	str	r0, [r5, #0]
 801bf44:	bc70      	pop	{r4, r5, r6}
 801bf46:	4770      	bx	lr
 801bf48:	bc70      	pop	{r4, r5, r6}
 801bf4a:	f7fe bf11 	b.w	801ad70 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>

0801bf4e <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801bf4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bf50:	4604      	mov	r4, r0
 801bf52:	4608      	mov	r0, r1
 801bf54:	460d      	mov	r5, r1
 801bf56:	f7ff f800 	bl	801af5a <_ZNK8touchgfx4Rect7isEmptyEv>
 801bf5a:	b978      	cbnz	r0, 801bf7c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801bf5c:	4620      	mov	r0, r4
 801bf5e:	f7fe fffc 	bl	801af5a <_ZNK8touchgfx4Rect7isEmptyEv>
 801bf62:	f9b5 6000 	ldrsh.w	r6, [r5]
 801bf66:	b150      	cbz	r0, 801bf7e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801bf68:	8026      	strh	r6, [r4, #0]
 801bf6a:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801bf6e:	8063      	strh	r3, [r4, #2]
 801bf70:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801bf74:	80a3      	strh	r3, [r4, #4]
 801bf76:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801bf7a:	80e3      	strh	r3, [r4, #6]
 801bf7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bf7e:	f9b4 1000 	ldrsh.w	r1, [r4]
 801bf82:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801bf86:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801bf8a:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801bf8e:	88ed      	ldrh	r5, [r5, #6]
 801bf90:	42b1      	cmp	r1, r6
 801bf92:	460f      	mov	r7, r1
 801bf94:	bfa8      	it	ge
 801bf96:	4637      	movge	r7, r6
 801bf98:	4293      	cmp	r3, r2
 801bf9a:	4618      	mov	r0, r3
 801bf9c:	4466      	add	r6, ip
 801bf9e:	bfa8      	it	ge
 801bfa0:	4610      	movge	r0, r2
 801bfa2:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801bfa6:	8027      	strh	r7, [r4, #0]
 801bfa8:	442a      	add	r2, r5
 801bfaa:	88e5      	ldrh	r5, [r4, #6]
 801bfac:	8060      	strh	r0, [r4, #2]
 801bfae:	4461      	add	r1, ip
 801bfb0:	442b      	add	r3, r5
 801bfb2:	b236      	sxth	r6, r6
 801bfb4:	b209      	sxth	r1, r1
 801bfb6:	b212      	sxth	r2, r2
 801bfb8:	b21b      	sxth	r3, r3
 801bfba:	428e      	cmp	r6, r1
 801bfbc:	bfac      	ite	ge
 801bfbe:	ebc7 0106 	rsbge	r1, r7, r6
 801bfc2:	ebc7 0101 	rsblt	r1, r7, r1
 801bfc6:	429a      	cmp	r2, r3
 801bfc8:	bfac      	ite	ge
 801bfca:	ebc0 0202 	rsbge	r2, r0, r2
 801bfce:	ebc0 0203 	rsblt	r2, r0, r3
 801bfd2:	80a1      	strh	r1, [r4, #4]
 801bfd4:	80e2      	strh	r2, [r4, #6]
 801bfd6:	e7d1      	b.n	801bf7c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

0801bfd8 <_ZNK8touchgfx19ScrollableContainer16getContainedAreaEv>:
 801bfd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801bfda:	460d      	mov	r5, r1
 801bfdc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801bfde:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801bfe2:	f9b5 200a 	ldrsh.w	r2, [r5, #10]
 801bfe6:	f8ad 1004 	strh.w	r1, [sp, #4]
 801bfea:	2300      	movs	r3, #0
 801bfec:	4669      	mov	r1, sp
 801bfee:	4606      	mov	r6, r0
 801bff0:	8003      	strh	r3, [r0, #0]
 801bff2:	8043      	strh	r3, [r0, #2]
 801bff4:	8083      	strh	r3, [r0, #4]
 801bff6:	80c3      	strh	r3, [r0, #6]
 801bff8:	9300      	str	r3, [sp, #0]
 801bffa:	f8ad 2006 	strh.w	r2, [sp, #6]
 801bffe:	f7ff ffa6 	bl	801bf4e <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c002:	f105 0738 	add.w	r7, r5, #56	; 0x38
 801c006:	3568      	adds	r5, #104	; 0x68
 801c008:	b164      	cbz	r4, 801c024 <_ZNK8touchgfx19ScrollableContainer16getContainedAreaEv+0x4c>
 801c00a:	42bc      	cmp	r4, r7
 801c00c:	d008      	beq.n	801c020 <_ZNK8touchgfx19ScrollableContainer16getContainedAreaEv+0x48>
 801c00e:	42ac      	cmp	r4, r5
 801c010:	d006      	beq.n	801c020 <_ZNK8touchgfx19ScrollableContainer16getContainedAreaEv+0x48>
 801c012:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801c016:	b11b      	cbz	r3, 801c020 <_ZNK8touchgfx19ScrollableContainer16getContainedAreaEv+0x48>
 801c018:	1d21      	adds	r1, r4, #4
 801c01a:	4630      	mov	r0, r6
 801c01c:	f7ff ff97 	bl	801bf4e <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c020:	69a4      	ldr	r4, [r4, #24]
 801c022:	e7f1      	b.n	801c008 <_ZNK8touchgfx19ScrollableContainer16getContainedAreaEv+0x30>
 801c024:	4630      	mov	r0, r6
 801c026:	b003      	add	sp, #12
 801c028:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801c02c <_ZN8touchgfx19ScrollableContainerC1Ev>:
 801c02c:	b538      	push	{r3, r4, r5, lr}
 801c02e:	2300      	movs	r3, #0
 801c030:	8083      	strh	r3, [r0, #4]
 801c032:	80c3      	strh	r3, [r0, #6]
 801c034:	8103      	strh	r3, [r0, #8]
 801c036:	8143      	strh	r3, [r0, #10]
 801c038:	8183      	strh	r3, [r0, #12]
 801c03a:	81c3      	strh	r3, [r0, #14]
 801c03c:	8203      	strh	r3, [r0, #16]
 801c03e:	8243      	strh	r3, [r0, #18]
 801c040:	e9c0 3305 	strd	r3, r3, [r0, #20]
 801c044:	61c3      	str	r3, [r0, #28]
 801c046:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 801c04a:	6283      	str	r3, [r0, #40]	; 0x28
 801c04c:	f44f 7300 	mov.w	r3, #512	; 0x200
 801c050:	2201      	movs	r2, #1
 801c052:	8583      	strh	r3, [r0, #44]	; 0x2c
 801c054:	2378      	movs	r3, #120	; 0x78
 801c056:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 801c05a:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
 801c05e:	4a41      	ldr	r2, [pc, #260]	; (801c164 <_ZN8touchgfx19ScrollableContainerC1Ev+0x138>)
 801c060:	4b41      	ldr	r3, [pc, #260]	; (801c168 <_ZN8touchgfx19ScrollableContainerC1Ev+0x13c>)
 801c062:	6002      	str	r2, [r0, #0]
 801c064:	681b      	ldr	r3, [r3, #0]
 801c066:	4604      	mov	r4, r0
 801c068:	b92b      	cbnz	r3, 801c076 <_ZN8touchgfx19ScrollableContainerC1Ev+0x4a>
 801c06a:	4b40      	ldr	r3, [pc, #256]	; (801c16c <_ZN8touchgfx19ScrollableContainerC1Ev+0x140>)
 801c06c:	4a40      	ldr	r2, [pc, #256]	; (801c170 <_ZN8touchgfx19ScrollableContainerC1Ev+0x144>)
 801c06e:	4841      	ldr	r0, [pc, #260]	; (801c174 <_ZN8touchgfx19ScrollableContainerC1Ev+0x148>)
 801c070:	2135      	movs	r1, #53	; 0x35
 801c072:	f012 f931 	bl	802e2d8 <__assert_func>
 801c076:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801c07a:	b10a      	cbz	r2, 801c080 <_ZN8touchgfx19ScrollableContainerC1Ev+0x54>
 801c07c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801c07e:	b900      	cbnz	r0, 801c082 <_ZN8touchgfx19ScrollableContainerC1Ev+0x56>
 801c080:	6898      	ldr	r0, [r3, #8]
 801c082:	6803      	ldr	r3, [r0, #0]
 801c084:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 801c086:	23ff      	movs	r3, #255	; 0xff
 801c088:	461a      	mov	r2, r3
 801c08a:	4619      	mov	r1, r3
 801c08c:	47a8      	blx	r5
 801c08e:	2300      	movs	r3, #0
 801c090:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 801c094:	4938      	ldr	r1, [pc, #224]	; (801c178 <_ZN8touchgfx19ScrollableContainerC1Ev+0x14c>)
 801c096:	6320      	str	r0, [r4, #48]	; 0x30
 801c098:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
 801c09c:	87a3      	strh	r3, [r4, #60]	; 0x3c
 801c09e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 801c0a0:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801c0a4:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
 801c0a8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
 801c0ac:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 801c0b0:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 801c0b4:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
 801c0b8:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 801c0bc:	6563      	str	r3, [r4, #84]	; 0x54
 801c0be:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 801c0c2:	63a1      	str	r1, [r4, #56]	; 0x38
 801c0c4:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
 801c0c8:	6620      	str	r0, [r4, #96]	; 0x60
 801c0ca:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 801c0ce:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 801c0d2:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 801c0d6:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
 801c0da:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
 801c0de:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
 801c0e2:	f8a4 3076 	strh.w	r3, [r4, #118]	; 0x76
 801c0e6:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
 801c0ea:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
 801c0ee:	e9c4 331f 	strd	r3, r3, [r4, #124]	; 0x7c
 801c0f2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 801c0f6:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
 801c0fa:	66a1      	str	r1, [r4, #104]	; 0x68
 801c0fc:	f884 208e 	strb.w	r2, [r4, #142]	; 0x8e
 801c100:	2205      	movs	r2, #5
 801c102:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
 801c106:	e9c4 3326 	strd	r3, r3, [r4, #152]	; 0x98
 801c10a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 801c10e:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
 801c112:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
 801c116:	2201      	movs	r2, #1
 801c118:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
 801c11c:	f884 30ab 	strb.w	r3, [r4, #171]	; 0xab
 801c120:	f884 30af 	strb.w	r3, [r4, #175]	; 0xaf
 801c124:	e9c4 332c 	strd	r3, r3, [r4, #176]	; 0xb0
 801c128:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
 801c12c:	f8a4 30ba 	strh.w	r3, [r4, #186]	; 0xba
 801c130:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
 801c134:	f884 30be 	strb.w	r3, [r4, #190]	; 0xbe
 801c138:	4910      	ldr	r1, [pc, #64]	; (801c17c <_ZN8touchgfx19ScrollableContainerC1Ev+0x150>)
 801c13a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 801c13e:	f884 308d 	strb.w	r3, [r4, #141]	; 0x8d
 801c142:	2311      	movs	r3, #17
 801c144:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
 801c148:	f884 20ac 	strb.w	r2, [r4, #172]	; 0xac
 801c14c:	f884 20ad 	strb.w	r2, [r4, #173]	; 0xad
 801c150:	f884 20ae 	strb.w	r2, [r4, #174]	; 0xae
 801c154:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
 801c158:	86a3      	strh	r3, [r4, #52]	; 0x34
 801c15a:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 801c15e:	4620      	mov	r0, r4
 801c160:	bd38      	pop	{r3, r4, r5, pc}
 801c162:	bf00      	nop
 801c164:	080327a8 	.word	0x080327a8
 801c168:	200127f4 	.word	0x200127f4
 801c16c:	08032738 	.word	0x08032738
 801c170:	08032834 	.word	0x08032834
 801c174:	0803277b 	.word	0x0803277b
 801c178:	0803329c 	.word	0x0803329c
 801c17c:	00010007 	.word	0x00010007

0801c180 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv>:
 801c180:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c182:	f891 30ac 	ldrb.w	r3, [r1, #172]	; 0xac
 801c186:	2600      	movs	r6, #0
 801c188:	4605      	mov	r5, r0
 801c18a:	460c      	mov	r4, r1
 801c18c:	8006      	strh	r6, [r0, #0]
 801c18e:	8046      	strh	r6, [r0, #2]
 801c190:	8086      	strh	r6, [r0, #4]
 801c192:	80c6      	strh	r6, [r0, #6]
 801c194:	2b00      	cmp	r3, #0
 801c196:	d041      	beq.n	801c21c <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x9c>
 801c198:	680b      	ldr	r3, [r1, #0]
 801c19a:	4668      	mov	r0, sp
 801c19c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801c19e:	4798      	blx	r3
 801c1a0:	f894 30ad 	ldrb.w	r3, [r4, #173]	; 0xad
 801c1a4:	f9bd 7004 	ldrsh.w	r7, [sp, #4]
 801c1a8:	2b00      	cmp	r3, #0
 801c1aa:	d03a      	beq.n	801c222 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0xa2>
 801c1ac:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801c1b0:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801c1b4:	429a      	cmp	r2, r3
 801c1b6:	dd05      	ble.n	801c1c4 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x44>
 801c1b8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801c1bc:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 801c1c0:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801c1c4:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801c1c8:	42bb      	cmp	r3, r7
 801c1ca:	da27      	bge.n	801c21c <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x9c>
 801c1cc:	f9bd 1000 	ldrsh.w	r1, [sp]
 801c1d0:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801c1d4:	424a      	negs	r2, r1
 801c1d6:	4439      	add	r1, r7
 801c1d8:	b209      	sxth	r1, r1
 801c1da:	1ac9      	subs	r1, r1, r3
 801c1dc:	435a      	muls	r2, r3
 801c1de:	eba3 0c40 	sub.w	ip, r3, r0, lsl #1
 801c1e2:	fb92 f2f7 	sdiv	r2, r2, r7
 801c1e6:	434b      	muls	r3, r1
 801c1e8:	fb93 f3f7 	sdiv	r3, r3, r7
 801c1ec:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 801c1f0:	ebac 0606 	sub.w	r6, ip, r6
 801c1f4:	4413      	add	r3, r2
 801c1f6:	1af3      	subs	r3, r6, r3
 801c1f8:	0079      	lsls	r1, r7, #1
 801c1fa:	4299      	cmp	r1, r3
 801c1fc:	dd05      	ble.n	801c20a <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x8a>
 801c1fe:	1acb      	subs	r3, r1, r3
 801c200:	4353      	muls	r3, r2
 801c202:	fb93 f3f6 	sdiv	r3, r3, r6
 801c206:	1ad2      	subs	r2, r2, r3
 801c208:	460b      	mov	r3, r1
 801c20a:	8961      	ldrh	r1, [r4, #10]
 801c20c:	80ab      	strh	r3, [r5, #4]
 801c20e:	b280      	uxth	r0, r0
 801c210:	1bc9      	subs	r1, r1, r7
 801c212:	1a09      	subs	r1, r1, r0
 801c214:	4410      	add	r0, r2
 801c216:	8028      	strh	r0, [r5, #0]
 801c218:	8069      	strh	r1, [r5, #2]
 801c21a:	80ef      	strh	r7, [r5, #6]
 801c21c:	4628      	mov	r0, r5
 801c21e:	b003      	add	sp, #12
 801c220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c222:	461e      	mov	r6, r3
 801c224:	e7ce      	b.n	801c1c4 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x44>

0801c226 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv>:
 801c226:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c228:	f891 30ad 	ldrb.w	r3, [r1, #173]	; 0xad
 801c22c:	2600      	movs	r6, #0
 801c22e:	4605      	mov	r5, r0
 801c230:	460c      	mov	r4, r1
 801c232:	8006      	strh	r6, [r0, #0]
 801c234:	8046      	strh	r6, [r0, #2]
 801c236:	8086      	strh	r6, [r0, #4]
 801c238:	80c6      	strh	r6, [r0, #6]
 801c23a:	2b00      	cmp	r3, #0
 801c23c:	d041      	beq.n	801c2c2 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x9c>
 801c23e:	680b      	ldr	r3, [r1, #0]
 801c240:	4668      	mov	r0, sp
 801c242:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801c244:	4798      	blx	r3
 801c246:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 801c24a:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 801c24e:	2b00      	cmp	r3, #0
 801c250:	d03a      	beq.n	801c2c8 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0xa2>
 801c252:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801c256:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801c25a:	429a      	cmp	r2, r3
 801c25c:	dd05      	ble.n	801c26a <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x44>
 801c25e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801c262:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 801c266:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801c26a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801c26e:	42bb      	cmp	r3, r7
 801c270:	da27      	bge.n	801c2c2 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x9c>
 801c272:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 801c276:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801c27a:	424a      	negs	r2, r1
 801c27c:	4439      	add	r1, r7
 801c27e:	b209      	sxth	r1, r1
 801c280:	1ac9      	subs	r1, r1, r3
 801c282:	435a      	muls	r2, r3
 801c284:	eba3 0c40 	sub.w	ip, r3, r0, lsl #1
 801c288:	fb92 f2f7 	sdiv	r2, r2, r7
 801c28c:	434b      	muls	r3, r1
 801c28e:	fb93 f3f7 	sdiv	r3, r3, r7
 801c292:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 801c296:	ebac 0606 	sub.w	r6, ip, r6
 801c29a:	4413      	add	r3, r2
 801c29c:	1af3      	subs	r3, r6, r3
 801c29e:	0079      	lsls	r1, r7, #1
 801c2a0:	4299      	cmp	r1, r3
 801c2a2:	dd05      	ble.n	801c2b0 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x8a>
 801c2a4:	1acb      	subs	r3, r1, r3
 801c2a6:	4353      	muls	r3, r2
 801c2a8:	fb93 f3f6 	sdiv	r3, r3, r6
 801c2ac:	1ad2      	subs	r2, r2, r3
 801c2ae:	460b      	mov	r3, r1
 801c2b0:	8921      	ldrh	r1, [r4, #8]
 801c2b2:	80af      	strh	r7, [r5, #4]
 801c2b4:	b280      	uxth	r0, r0
 801c2b6:	1bc9      	subs	r1, r1, r7
 801c2b8:	1a09      	subs	r1, r1, r0
 801c2ba:	4410      	add	r0, r2
 801c2bc:	8029      	strh	r1, [r5, #0]
 801c2be:	8068      	strh	r0, [r5, #2]
 801c2c0:	80eb      	strh	r3, [r5, #6]
 801c2c2:	4628      	mov	r0, r5
 801c2c4:	b003      	add	sp, #12
 801c2c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c2c8:	461e      	mov	r6, r3
 801c2ca:	e7ce      	b.n	801c26a <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x44>

0801c2cc <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_>:
 801c2cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c2d0:	4617      	mov	r7, r2
 801c2d2:	2200      	movs	r2, #0
 801c2d4:	8002      	strh	r2, [r0, #0]
 801c2d6:	8042      	strh	r2, [r0, #2]
 801c2d8:	8082      	strh	r2, [r0, #4]
 801c2da:	80c2      	strh	r2, [r0, #6]
 801c2dc:	4604      	mov	r4, r0
 801c2de:	4638      	mov	r0, r7
 801c2e0:	460e      	mov	r6, r1
 801c2e2:	4698      	mov	r8, r3
 801c2e4:	f7fe fe39 	bl	801af5a <_ZNK8touchgfx4Rect7isEmptyEv>
 801c2e8:	4605      	mov	r5, r0
 801c2ea:	b998      	cbnz	r0, 801c314 <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_+0x48>
 801c2ec:	4640      	mov	r0, r8
 801c2ee:	f7fe fe34 	bl	801af5a <_ZNK8touchgfx4Rect7isEmptyEv>
 801c2f2:	f896 202c 	ldrb.w	r2, [r6, #44]	; 0x2c
 801c2f6:	f896 102d 	ldrb.w	r1, [r6, #45]	; 0x2d
 801c2fa:	b908      	cbnz	r0, 801c300 <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_+0x34>
 801c2fc:	eb01 0542 	add.w	r5, r1, r2, lsl #1
 801c300:	8933      	ldrh	r3, [r6, #8]
 801c302:	f9b7 7002 	ldrsh.w	r7, [r7, #2]
 801c306:	8022      	strh	r2, [r4, #0]
 801c308:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801c30c:	1b58      	subs	r0, r3, r5
 801c30e:	8067      	strh	r7, [r4, #2]
 801c310:	80a0      	strh	r0, [r4, #4]
 801c312:	80e1      	strh	r1, [r4, #6]
 801c314:	4620      	mov	r0, r4
 801c316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c31a <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_>:
 801c31a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c31e:	4604      	mov	r4, r0
 801c320:	2000      	movs	r0, #0
 801c322:	8020      	strh	r0, [r4, #0]
 801c324:	8060      	strh	r0, [r4, #2]
 801c326:	80a0      	strh	r0, [r4, #4]
 801c328:	80e0      	strh	r0, [r4, #6]
 801c32a:	4618      	mov	r0, r3
 801c32c:	460f      	mov	r7, r1
 801c32e:	4616      	mov	r6, r2
 801c330:	4698      	mov	r8, r3
 801c332:	f7fe fe12 	bl	801af5a <_ZNK8touchgfx4Rect7isEmptyEv>
 801c336:	4605      	mov	r5, r0
 801c338:	b998      	cbnz	r0, 801c362 <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_+0x48>
 801c33a:	4630      	mov	r0, r6
 801c33c:	f7fe fe0d 	bl	801af5a <_ZNK8touchgfx4Rect7isEmptyEv>
 801c340:	f897 602c 	ldrb.w	r6, [r7, #44]	; 0x2c
 801c344:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 801c348:	b908      	cbnz	r0, 801c34e <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_+0x34>
 801c34a:	eb01 0546 	add.w	r5, r1, r6, lsl #1
 801c34e:	897a      	ldrh	r2, [r7, #10]
 801c350:	f8b8 3000 	ldrh.w	r3, [r8]
 801c354:	8023      	strh	r3, [r4, #0]
 801c356:	eba2 0246 	sub.w	r2, r2, r6, lsl #1
 801c35a:	1b50      	subs	r0, r2, r5
 801c35c:	8066      	strh	r6, [r4, #2]
 801c35e:	80a1      	strh	r1, [r4, #4]
 801c360:	80e0      	strh	r0, [r4, #6]
 801c362:	4620      	mov	r0, r4
 801c364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c368 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>:
 801c368:	b570      	push	{r4, r5, r6, lr}
 801c36a:	b08a      	sub	sp, #40	; 0x28
 801c36c:	4604      	mov	r4, r0
 801c36e:	4601      	mov	r1, r0
 801c370:	a802      	add	r0, sp, #8
 801c372:	f7ff ff05 	bl	801c180 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv>
 801c376:	4621      	mov	r1, r4
 801c378:	a804      	add	r0, sp, #16
 801c37a:	f7ff ff54 	bl	801c226 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv>
 801c37e:	ab04      	add	r3, sp, #16
 801c380:	aa02      	add	r2, sp, #8
 801c382:	4621      	mov	r1, r4
 801c384:	a806      	add	r0, sp, #24
 801c386:	f7ff ffa1 	bl	801c2cc <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_>
 801c38a:	ab04      	add	r3, sp, #16
 801c38c:	aa02      	add	r2, sp, #8
 801c38e:	4621      	mov	r1, r4
 801c390:	a808      	add	r0, sp, #32
 801c392:	f7ff ffc2 	bl	801c31a <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_>
 801c396:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 801c39a:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 801c39e:	429a      	cmp	r2, r3
 801c3a0:	f104 0638 	add.w	r6, r4, #56	; 0x38
 801c3a4:	da02      	bge.n	801c3ac <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0x44>
 801c3a6:	4630      	mov	r0, r6
 801c3a8:	f003 fba5 	bl	801faf6 <_ZNK8touchgfx8Drawable10invalidateEv>
 801c3ac:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801c3b0:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	; 0x6c
 801c3b4:	429a      	cmp	r2, r3
 801c3b6:	f104 0568 	add.w	r5, r4, #104	; 0x68
 801c3ba:	da02      	bge.n	801c3c2 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0x5a>
 801c3bc:	4628      	mov	r0, r5
 801c3be:	f003 fb9a 	bl	801faf6 <_ZNK8touchgfx8Drawable10invalidateEv>
 801c3c2:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
 801c3c6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801c3ca:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801c3ce:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801c3d2:	9000      	str	r0, [sp, #0]
 801c3d4:	4630      	mov	r0, r6
 801c3d6:	f7f0 fa95 	bl	800c904 <_ZN8touchgfx8Drawable11setPositionEssss>
 801c3da:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801c3de:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801c3e2:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 801c3e6:	9000      	str	r0, [sp, #0]
 801c3e8:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 801c3ec:	4628      	mov	r0, r5
 801c3ee:	f7f0 fa89 	bl	800c904 <_ZN8touchgfx8Drawable11setPositionEssss>
 801c3f2:	8922      	ldrh	r2, [r4, #8]
 801c3f4:	f8ad 201c 	strh.w	r2, [sp, #28]
 801c3f8:	2300      	movs	r3, #0
 801c3fa:	8962      	ldrh	r2, [r4, #10]
 801c3fc:	f8ad 3018 	strh.w	r3, [sp, #24]
 801c400:	a806      	add	r0, sp, #24
 801c402:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801c406:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801c40a:	f7fe fda6 	bl	801af5a <_ZNK8touchgfx4Rect7isEmptyEv>
 801c40e:	b920      	cbnz	r0, 801c41a <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0xb2>
 801c410:	6823      	ldr	r3, [r4, #0]
 801c412:	a906      	add	r1, sp, #24
 801c414:	691b      	ldr	r3, [r3, #16]
 801c416:	4620      	mov	r0, r4
 801c418:	4798      	blx	r3
 801c41a:	a808      	add	r0, sp, #32
 801c41c:	f7fe fd9d 	bl	801af5a <_ZNK8touchgfx4Rect7isEmptyEv>
 801c420:	b920      	cbnz	r0, 801c42c <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0xc4>
 801c422:	6823      	ldr	r3, [r4, #0]
 801c424:	a908      	add	r1, sp, #32
 801c426:	691b      	ldr	r3, [r3, #16]
 801c428:	4620      	mov	r0, r4
 801c42a:	4798      	blx	r3
 801c42c:	b00a      	add	sp, #40	; 0x28
 801c42e:	bd70      	pop	{r4, r5, r6, pc}

0801c430 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE>:
 801c430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c434:	790b      	ldrb	r3, [r1, #4]
 801c436:	b0a3      	sub	sp, #140	; 0x8c
 801c438:	4604      	mov	r4, r0
 801c43a:	460d      	mov	r5, r1
 801c43c:	2b00      	cmp	r3, #0
 801c43e:	f040 8115 	bne.w	801c66c <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x23c>
 801c442:	2201      	movs	r2, #1
 801c444:	f880 20aa 	strb.w	r2, [r0, #170]	; 0xaa
 801c448:	f890 20b8 	ldrb.w	r2, [r0, #184]	; 0xb8
 801c44c:	b142      	cbz	r2, 801c460 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x30>
 801c44e:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 801c452:	f8a0 30b6 	strh.w	r3, [r0, #182]	; 0xb6
 801c456:	f002 fe37 	bl	801f0c8 <_ZN8touchgfx11Application11getInstanceEv>
 801c45a:	4621      	mov	r1, r4
 801c45c:	f002 fe6c 	bl	801f138 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 801c460:	4b9b      	ldr	r3, [pc, #620]	; (801c6d0 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x2a0>)
 801c462:	681b      	ldr	r3, [r3, #0]
 801c464:	f893 8049 	ldrb.w	r8, [r3, #73]	; 0x49
 801c468:	2300      	movs	r3, #0
 801c46a:	f1b8 0f03 	cmp.w	r8, #3
 801c46e:	f8a4 30ba 	strh.w	r3, [r4, #186]	; 0xba
 801c472:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
 801c476:	f340 80ef 	ble.w	801c658 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x228>
 801c47a:	f1b8 0f0c 	cmp.w	r8, #12
 801c47e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 801c482:	f04f 0303 	mov.w	r3, #3
 801c486:	bfd6      	itet	le
 801c488:	f108 32ff 	addle.w	r2, r8, #4294967295
 801c48c:	469a      	movgt	sl, r3
 801c48e:	fb92 faf3 	sdivle	sl, r2, r3
 801c492:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801c496:	9306      	str	r3, [sp, #24]
 801c498:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801c49c:	9307      	str	r3, [sp, #28]
 801c49e:	9b06      	ldr	r3, [sp, #24]
 801c4a0:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801c4a4:	9b07      	ldr	r3, [sp, #28]
 801c4a6:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801c4aa:	6823      	ldr	r3, [r4, #0]
 801c4ac:	2600      	movs	r6, #0
 801c4ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c4b0:	960a      	str	r6, [sp, #40]	; 0x28
 801c4b2:	a90a      	add	r1, sp, #40	; 0x28
 801c4b4:	4620      	mov	r0, r4
 801c4b6:	4798      	blx	r3
 801c4b8:	e9cd 6801 	strd	r6, r8, [sp, #4]
 801c4bc:	f04f 33ff 	mov.w	r3, #4294967295
 801c4c0:	9305      	str	r3, [sp, #20]
 801c4c2:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
 801c4c6:	2250      	movs	r2, #80	; 0x50
 801c4c8:	4982      	ldr	r1, [pc, #520]	; (801c6d4 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x2a4>)
 801c4ca:	9b02      	ldr	r3, [sp, #8]
 801c4cc:	fb93 f7fa 	sdiv	r7, r3, sl
 801c4d0:	4658      	mov	r0, fp
 801c4d2:	f012 f866 	bl	802e5a2 <memcpy>
 801c4d6:	b2bb      	uxth	r3, r7
 801c4d8:	46b1      	mov	r9, r6
 801c4da:	9303      	str	r3, [sp, #12]
 801c4dc:	2300      	movs	r3, #0
 801c4de:	9309      	str	r3, [sp, #36]	; 0x24
 801c4e0:	9a03      	ldr	r2, [sp, #12]
 801c4e2:	f85b 3039 	ldr.w	r3, [fp, r9, lsl #3]
 801c4e6:	88e9      	ldrh	r1, [r5, #6]
 801c4e8:	fb13 f302 	smulbb	r3, r3, r2
 801c4ec:	b29b      	uxth	r3, r3
 801c4ee:	4419      	add	r1, r3
 801c4f0:	b209      	sxth	r1, r1
 801c4f2:	2900      	cmp	r1, #0
 801c4f4:	9304      	str	r3, [sp, #16]
 801c4f6:	db49      	blt.n	801c58c <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x15c>
 801c4f8:	9b06      	ldr	r3, [sp, #24]
 801c4fa:	4299      	cmp	r1, r3
 801c4fc:	da46      	bge.n	801c58c <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x15c>
 801c4fe:	eb0b 03c9 	add.w	r3, fp, r9, lsl #3
 801c502:	685f      	ldr	r7, [r3, #4]
 801c504:	fb17 f702 	smulbb	r7, r7, r2
 801c508:	892a      	ldrh	r2, [r5, #8]
 801c50a:	b2bf      	uxth	r7, r7
 801c50c:	443a      	add	r2, r7
 801c50e:	b212      	sxth	r2, r2
 801c510:	2a00      	cmp	r2, #0
 801c512:	db3b      	blt.n	801c58c <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x15c>
 801c514:	9b07      	ldr	r3, [sp, #28]
 801c516:	429a      	cmp	r2, r3
 801c518:	da38      	bge.n	801c58c <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x15c>
 801c51a:	ab09      	add	r3, sp, #36	; 0x24
 801c51c:	4620      	mov	r0, r4
 801c51e:	f7fe fc27 	bl	801ad70 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801c522:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c524:	b391      	cbz	r1, 801c58c <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x15c>
 801c526:	9b01      	ldr	r3, [sp, #4]
 801c528:	4299      	cmp	r1, r3
 801c52a:	d02f      	beq.n	801c58c <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x15c>
 801c52c:	42a1      	cmp	r1, r4
 801c52e:	d02d      	beq.n	801c58c <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x15c>
 801c530:	a80c      	add	r0, sp, #48	; 0x30
 801c532:	f003 fb89 	bl	801fc48 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c536:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801c53a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801c53e:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801c542:	440b      	add	r3, r1
 801c544:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801c548:	2002      	movs	r0, #2
 801c54a:	fb92 f2f0 	sdiv	r2, r2, r0
 801c54e:	440a      	add	r2, r1
 801c550:	1a99      	subs	r1, r3, r2
 801c552:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 801c556:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801c55a:	441a      	add	r2, r3
 801c55c:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801c560:	fb93 f3f0 	sdiv	r3, r3, r0
 801c564:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801c568:	4403      	add	r3, r0
 801c56a:	1ad3      	subs	r3, r2, r3
 801c56c:	435b      	muls	r3, r3
 801c56e:	9a05      	ldr	r2, [sp, #20]
 801c570:	fb01 3301 	mla	r3, r1, r1, r3
 801c574:	4293      	cmp	r3, r2
 801c576:	d209      	bcs.n	801c58c <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x15c>
 801c578:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c57a:	9201      	str	r2, [sp, #4]
 801c57c:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
 801c580:	9a04      	ldr	r2, [sp, #16]
 801c582:	f8a4 20ba 	strh.w	r2, [r4, #186]	; 0xba
 801c586:	f8a4 70bc 	strh.w	r7, [r4, #188]	; 0xbc
 801c58a:	9305      	str	r3, [sp, #20]
 801c58c:	f109 0902 	add.w	r9, r9, #2
 801c590:	f1b9 0f09 	cmp.w	r9, #9
 801c594:	dda2      	ble.n	801c4dc <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xac>
 801c596:	9b02      	ldr	r3, [sp, #8]
 801c598:	3601      	adds	r6, #1
 801c59a:	4443      	add	r3, r8
 801c59c:	45b2      	cmp	sl, r6
 801c59e:	9302      	str	r3, [sp, #8]
 801c5a0:	d191      	bne.n	801c4c6 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x96>
 801c5a2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 801c5a6:	42a3      	cmp	r3, r4
 801c5a8:	bf04      	itt	eq
 801c5aa:	2300      	moveq	r3, #0
 801c5ac:	f8c4 3098 	streq.w	r3, [r4, #152]	; 0x98
 801c5b0:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 801c5b4:	2900      	cmp	r1, #0
 801c5b6:	d034      	beq.n	801c622 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x1f2>
 801c5b8:	2600      	movs	r6, #0
 801c5ba:	f884 60be 	strb.w	r6, [r4, #190]	; 0xbe
 801c5be:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801c5c2:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 801c5c6:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 801c5ca:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
 801c5ce:	a80c      	add	r0, sp, #48	; 0x30
 801c5d0:	f003 fb3a 	bl	801fc48 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c5d4:	f8b4 30ba 	ldrh.w	r3, [r4, #186]	; 0xba
 801c5d8:	88a2      	ldrh	r2, [r4, #4]
 801c5da:	f8b4 00bc 	ldrh.w	r0, [r4, #188]	; 0xbc
 801c5de:	7929      	ldrb	r1, [r5, #4]
 801c5e0:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801c5e4:	441a      	add	r2, r3
 801c5e6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801c5ea:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801c5ee:	1ad2      	subs	r2, r2, r3
 801c5f0:	88eb      	ldrh	r3, [r5, #6]
 801c5f2:	441a      	add	r2, r3
 801c5f4:	88e3      	ldrh	r3, [r4, #6]
 801c5f6:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801c5fa:	4403      	add	r3, r0
 801c5fc:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801c600:	1a1b      	subs	r3, r3, r0
 801c602:	8928      	ldrh	r0, [r5, #8]
 801c604:	4403      	add	r3, r0
 801c606:	4834      	ldr	r0, [pc, #208]	; (801c6d8 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x2a8>)
 801c608:	900e      	str	r0, [sp, #56]	; 0x38
 801c60a:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 801c60e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801c612:	6803      	ldr	r3, [r0, #0]
 801c614:	a90e      	add	r1, sp, #56	; 0x38
 801c616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c618:	4798      	blx	r3
 801c61a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 801c61e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 801c622:	f894 20aa 	ldrb.w	r2, [r4, #170]	; 0xaa
 801c626:	2300      	movs	r3, #0
 801c628:	f884 30ab 	strb.w	r3, [r4, #171]	; 0xab
 801c62c:	b112      	cbz	r2, 801c634 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x204>
 801c62e:	f894 30ae 	ldrb.w	r3, [r4, #174]	; 0xae
 801c632:	b90b      	cbnz	r3, 801c638 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x208>
 801c634:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
 801c638:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 801c63c:	b112      	cbz	r2, 801c644 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x214>
 801c63e:	f894 30ae 	ldrb.w	r3, [r4, #174]	; 0xae
 801c642:	b90b      	cbnz	r3, 801c648 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x218>
 801c644:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
 801c648:	f884 308d 	strb.w	r3, [r4, #141]	; 0x8d
 801c64c:	4620      	mov	r0, r4
 801c64e:	f7ff fe8b 	bl	801c368 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 801c652:	b023      	add	sp, #140	; 0x8c
 801c654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c658:	f104 0398 	add.w	r3, r4, #152	; 0x98
 801c65c:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801c660:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801c664:	4620      	mov	r0, r4
 801c666:	f7fe fb83 	bl	801ad70 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801c66a:	e79a      	b.n	801c5a2 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x172>
 801c66c:	2b02      	cmp	r3, #2
 801c66e:	d0f0      	beq.n	801c652 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x222>
 801c670:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
 801c674:	b331      	cbz	r1, 801c6c4 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x294>
 801c676:	a80c      	add	r0, sp, #48	; 0x30
 801c678:	f003 fae6 	bl	801fc48 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c67c:	f8b4 30ba 	ldrh.w	r3, [r4, #186]	; 0xba
 801c680:	88a2      	ldrh	r2, [r4, #4]
 801c682:	f8b4 00bc 	ldrh.w	r0, [r4, #188]	; 0xbc
 801c686:	7929      	ldrb	r1, [r5, #4]
 801c688:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801c68c:	441a      	add	r2, r3
 801c68e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801c692:	1ad2      	subs	r2, r2, r3
 801c694:	88eb      	ldrh	r3, [r5, #6]
 801c696:	441a      	add	r2, r3
 801c698:	88e3      	ldrh	r3, [r4, #6]
 801c69a:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801c69e:	4403      	add	r3, r0
 801c6a0:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801c6a4:	1a1b      	subs	r3, r3, r0
 801c6a6:	8928      	ldrh	r0, [r5, #8]
 801c6a8:	4403      	add	r3, r0
 801c6aa:	480b      	ldr	r0, [pc, #44]	; (801c6d8 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x2a8>)
 801c6ac:	900e      	str	r0, [sp, #56]	; 0x38
 801c6ae:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801c6b2:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 801c6b6:	2300      	movs	r3, #0
 801c6b8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801c6bc:	6803      	ldr	r3, [r0, #0]
 801c6be:	a90e      	add	r1, sp, #56	; 0x38
 801c6c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c6c2:	4798      	blx	r3
 801c6c4:	2300      	movs	r3, #0
 801c6c6:	e9c4 3326 	strd	r3, r3, [r4, #152]	; 0x98
 801c6ca:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
 801c6ce:	e7a8      	b.n	801c622 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x1f2>
 801c6d0:	200127f4 	.word	0x200127f4
 801c6d4:	080301b0 	.word	0x080301b0
 801c6d8:	08032718 	.word	0x08032718

0801c6dc <_ZN8touchgfx19ScrollableContainer8doScrollEss>:
 801c6dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c6de:	4605      	mov	r5, r0
 801c6e0:	4616      	mov	r6, r2
 801c6e2:	460c      	mov	r4, r1
 801c6e4:	b919      	cbnz	r1, 801c6ee <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x12>
 801c6e6:	b912      	cbnz	r2, 801c6ee <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x12>
 801c6e8:	2000      	movs	r0, #0
 801c6ea:	b003      	add	sp, #12
 801c6ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c6ee:	682b      	ldr	r3, [r5, #0]
 801c6f0:	4629      	mov	r1, r5
 801c6f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801c6f4:	4668      	mov	r0, sp
 801c6f6:	4798      	blx	r3
 801c6f8:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 801c6fc:	f9b5 0008 	ldrsh.w	r0, [r5, #8]
 801c700:	f9bd 3000 	ldrsh.w	r3, [sp]
 801c704:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 801c708:	4288      	cmp	r0, r1
 801c70a:	da36      	bge.n	801c77a <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x9e>
 801c70c:	2c00      	cmp	r4, #0
 801c70e:	dd2a      	ble.n	801c766 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x8a>
 801c710:	191a      	adds	r2, r3, r4
 801c712:	2a00      	cmp	r2, #0
 801c714:	dd01      	ble.n	801c71a <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x3e>
 801c716:	425b      	negs	r3, r3
 801c718:	b21c      	sxth	r4, r3
 801c71a:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 801c71e:	429f      	cmp	r7, r3
 801c720:	dd36      	ble.n	801c790 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xb4>
 801c722:	2e00      	cmp	r6, #0
 801c724:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 801c728:	dd29      	ble.n	801c77e <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xa2>
 801c72a:	1993      	adds	r3, r2, r6
 801c72c:	2b00      	cmp	r3, #0
 801c72e:	dd04      	ble.n	801c73a <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x5e>
 801c730:	4252      	negs	r2, r2
 801c732:	b216      	sxth	r6, r2
 801c734:	b90c      	cbnz	r4, 801c73a <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x5e>
 801c736:	2e00      	cmp	r6, #0
 801c738:	d0d6      	beq.n	801c6e8 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xc>
 801c73a:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
 801c73e:	4423      	add	r3, r4
 801c740:	f8a5 30a0 	strh.w	r3, [r5, #160]	; 0xa0
 801c744:	f8b5 30a2 	ldrh.w	r3, [r5, #162]	; 0xa2
 801c748:	4433      	add	r3, r6
 801c74a:	f8a5 30a2 	strh.w	r3, [r5, #162]	; 0xa2
 801c74e:	682b      	ldr	r3, [r5, #0]
 801c750:	4632      	mov	r2, r6
 801c752:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c756:	4621      	mov	r1, r4
 801c758:	4628      	mov	r0, r5
 801c75a:	4798      	blx	r3
 801c75c:	4628      	mov	r0, r5
 801c75e:	f7ff fe03 	bl	801c368 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 801c762:	2001      	movs	r0, #1
 801c764:	e7c1      	b.n	801c6ea <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xe>
 801c766:	d0d8      	beq.n	801c71a <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x3e>
 801c768:	440b      	add	r3, r1
 801c76a:	b29b      	uxth	r3, r3
 801c76c:	fa04 f283 	sxtah	r2, r4, r3
 801c770:	4282      	cmp	r2, r0
 801c772:	dad2      	bge.n	801c71a <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x3e>
 801c774:	1ac4      	subs	r4, r0, r3
 801c776:	b224      	sxth	r4, r4
 801c778:	e7cf      	b.n	801c71a <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x3e>
 801c77a:	2400      	movs	r4, #0
 801c77c:	e7cd      	b.n	801c71a <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x3e>
 801c77e:	d007      	beq.n	801c790 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xb4>
 801c780:	443a      	add	r2, r7
 801c782:	b292      	uxth	r2, r2
 801c784:	fa06 f182 	sxtah	r1, r6, r2
 801c788:	4299      	cmp	r1, r3
 801c78a:	dad6      	bge.n	801c73a <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x5e>
 801c78c:	1a9a      	subs	r2, r3, r2
 801c78e:	e7d0      	b.n	801c732 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x56>
 801c790:	2c00      	cmp	r4, #0
 801c792:	d0a9      	beq.n	801c6e8 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xc>
 801c794:	2600      	movs	r6, #0
 801c796:	e7d0      	b.n	801c73a <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x5e>

0801c798 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv>:
 801c798:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c79c:	6803      	ldr	r3, [r0, #0]
 801c79e:	4601      	mov	r1, r0
 801c7a0:	4604      	mov	r4, r0
 801c7a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801c7a4:	4668      	mov	r0, sp
 801c7a6:	4798      	blx	r3
 801c7a8:	f9bd 9002 	ldrsh.w	r9, [sp, #2]
 801c7ac:	f9bd 6000 	ldrsh.w	r6, [sp]
 801c7b0:	f9bd 8004 	ldrsh.w	r8, [sp, #4]
 801c7b4:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 801c7b8:	f1b9 0f00 	cmp.w	r9, #0
 801c7bc:	dd08      	ble.n	801c7d0 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x38>
 801c7be:	6823      	ldr	r3, [r4, #0]
 801c7c0:	f1c9 0200 	rsb	r2, r9, #0
 801c7c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c7c8:	b212      	sxth	r2, r2
 801c7ca:	2100      	movs	r1, #0
 801c7cc:	4620      	mov	r0, r4
 801c7ce:	4798      	blx	r3
 801c7d0:	2e00      	cmp	r6, #0
 801c7d2:	b2b7      	uxth	r7, r6
 801c7d4:	dd07      	ble.n	801c7e6 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x4e>
 801c7d6:	6823      	ldr	r3, [r4, #0]
 801c7d8:	4279      	negs	r1, r7
 801c7da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c7de:	2200      	movs	r2, #0
 801c7e0:	b209      	sxth	r1, r1
 801c7e2:	4620      	mov	r0, r4
 801c7e4:	4798      	blx	r3
 801c7e6:	eb05 0309 	add.w	r3, r5, r9
 801c7ea:	b29b      	uxth	r3, r3
 801c7ec:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 801c7f0:	b219      	sxth	r1, r3
 801c7f2:	428a      	cmp	r2, r1
 801c7f4:	dd12      	ble.n	801c81c <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x84>
 801c7f6:	1a9a      	subs	r2, r3, r2
 801c7f8:	b212      	sxth	r2, r2
 801c7fa:	454a      	cmp	r2, r9
 801c7fc:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
 801c800:	bfb8      	it	lt
 801c802:	464a      	movlt	r2, r9
 801c804:	b292      	uxth	r2, r2
 801c806:	1a9b      	subs	r3, r3, r2
 801c808:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 801c80c:	6823      	ldr	r3, [r4, #0]
 801c80e:	4252      	negs	r2, r2
 801c810:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c814:	b212      	sxth	r2, r2
 801c816:	2100      	movs	r1, #0
 801c818:	4620      	mov	r0, r4
 801c81a:	4798      	blx	r3
 801c81c:	4447      	add	r7, r8
 801c81e:	f9b4 8008 	ldrsh.w	r8, [r4, #8]
 801c822:	b23f      	sxth	r7, r7
 801c824:	45b8      	cmp	r8, r7
 801c826:	dd12      	ble.n	801c84e <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0xb6>
 801c828:	eba7 0708 	sub.w	r7, r7, r8
 801c82c:	42be      	cmp	r6, r7
 801c82e:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
 801c832:	bfb8      	it	lt
 801c834:	463e      	movlt	r6, r7
 801c836:	b2b6      	uxth	r6, r6
 801c838:	1b9b      	subs	r3, r3, r6
 801c83a:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 801c83e:	6823      	ldr	r3, [r4, #0]
 801c840:	4276      	negs	r6, r6
 801c842:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c846:	2200      	movs	r2, #0
 801c848:	b231      	sxth	r1, r6
 801c84a:	4620      	mov	r0, r4
 801c84c:	4798      	blx	r3
 801c84e:	4620      	mov	r0, r4
 801c850:	b003      	add	sp, #12
 801c852:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c856:	f7ff bd87 	b.w	801c368 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>

0801c85a <_ZN8touchgfx19ScrollableContainer18setScrollbarsColorENS_9colortypeE>:
 801c85a:	6301      	str	r1, [r0, #48]	; 0x30
 801c85c:	6601      	str	r1, [r0, #96]	; 0x60
 801c85e:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
 801c862:	4770      	bx	lr

0801c864 <_ZN8touchgfx19ScrollableContainer20setScrollbarsVisibleEb>:
 801c864:	f880 10ae 	strb.w	r1, [r0, #174]	; 0xae
 801c868:	4770      	bx	lr

0801c86a <_ZN8touchgfx19ScrollableContainer31setScrollbarsPermanentlyVisibleEv>:
 801c86a:	2201      	movs	r2, #1
 801c86c:	f880 20af 	strb.w	r2, [r0, #175]	; 0xaf
 801c870:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
 801c874:	f880 208d 	strb.w	r2, [r0, #141]	; 0x8d
 801c878:	f7ff bd76 	b.w	801c368 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>

0801c87c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801c87c:	b513      	push	{r0, r1, r4, lr}
 801c87e:	6803      	ldr	r3, [r0, #0]
 801c880:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
 801c884:	2300      	movs	r3, #0
 801c886:	e9cd 3300 	strd	r3, r3, [sp]
 801c88a:	466b      	mov	r3, sp
 801c88c:	47a0      	blx	r4
 801c88e:	b002      	add	sp, #8
 801c890:	bd10      	pop	{r4, pc}

0801c892 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 801c892:	2301      	movs	r3, #1
 801c894:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801c898:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801c89c:	4770      	bx	lr

0801c89e <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801c89e:	2301      	movs	r3, #1
 801c8a0:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801c8a4:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801c8a8:	4770      	bx	lr

0801c8aa <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 801c8aa:	6843      	ldr	r3, [r0, #4]
 801c8ac:	2201      	movs	r2, #1
 801c8ae:	725a      	strb	r2, [r3, #9]
 801c8b0:	6840      	ldr	r0, [r0, #4]
 801c8b2:	6803      	ldr	r3, [r0, #0]
 801c8b4:	691b      	ldr	r3, [r3, #16]
 801c8b6:	4718      	bx	r3

0801c8b8 <_ZN8touchgfx3HAL8flushDMAEv>:
 801c8b8:	6840      	ldr	r0, [r0, #4]
 801c8ba:	6803      	ldr	r3, [r0, #0]
 801c8bc:	689b      	ldr	r3, [r3, #8]
 801c8be:	4718      	bx	r3

0801c8c0 <_ZN8touchgfx3HAL10beginFrameEv>:
 801c8c0:	4b04      	ldr	r3, [pc, #16]	; (801c8d4 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801c8c2:	781b      	ldrb	r3, [r3, #0]
 801c8c4:	b123      	cbz	r3, 801c8d0 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801c8c6:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 801c8ca:	f080 0001 	eor.w	r0, r0, #1
 801c8ce:	4770      	bx	lr
 801c8d0:	2001      	movs	r0, #1
 801c8d2:	4770      	bx	lr
 801c8d4:	200127f2 	.word	0x200127f2

0801c8d8 <_ZN8touchgfx3HAL8endFrameEv>:
 801c8d8:	b510      	push	{r4, lr}
 801c8da:	4604      	mov	r4, r0
 801c8dc:	6840      	ldr	r0, [r0, #4]
 801c8de:	6803      	ldr	r3, [r0, #0]
 801c8e0:	689b      	ldr	r3, [r3, #8]
 801c8e2:	4798      	blx	r3
 801c8e4:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 801c8e8:	b113      	cbz	r3, 801c8f0 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801c8ea:	2301      	movs	r3, #1
 801c8ec:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801c8f0:	bd10      	pop	{r4, pc}

0801c8f2 <_ZN8touchgfx3HAL9taskEntryEv>:
 801c8f2:	b508      	push	{r3, lr}
 801c8f4:	6803      	ldr	r3, [r0, #0]
 801c8f6:	4604      	mov	r4, r0
 801c8f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801c8fa:	4798      	blx	r3
 801c8fc:	6823      	ldr	r3, [r4, #0]
 801c8fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c900:	4620      	mov	r0, r4
 801c902:	4798      	blx	r3
 801c904:	f7ec fc66 	bl	80091d4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 801c908:	6823      	ldr	r3, [r4, #0]
 801c90a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c90c:	e7f8      	b.n	801c900 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

0801c910 <_ZN8touchgfx3HAL4tickEv>:
 801c910:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801c912:	6803      	ldr	r3, [r0, #0]
 801c914:	4d5c      	ldr	r5, [pc, #368]	; (801ca88 <_ZN8touchgfx3HAL4tickEv+0x178>)
 801c916:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c91a:	4604      	mov	r4, r0
 801c91c:	4798      	blx	r3
 801c91e:	2800      	cmp	r0, #0
 801c920:	f000 8097 	beq.w	801ca52 <_ZN8touchgfx3HAL4tickEv+0x142>
 801c924:	2001      	movs	r0, #1
 801c926:	f7ec f8c5 	bl	8008ab4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801c92a:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 801c92e:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801c932:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 801c936:	2600      	movs	r6, #0
 801c938:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 801c93c:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 801c940:	b133      	cbz	r3, 801c950 <_ZN8touchgfx3HAL4tickEv+0x40>
 801c942:	6823      	ldr	r3, [r4, #0]
 801c944:	4620      	mov	r0, r4
 801c946:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801c94a:	4798      	blx	r3
 801c94c:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 801c950:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801c954:	6862      	ldr	r2, [r4, #4]
 801c956:	f083 0301 	eor.w	r3, r3, #1
 801c95a:	7253      	strb	r3, [r2, #9]
 801c95c:	2601      	movs	r6, #1
 801c95e:	702e      	strb	r6, [r5, #0]
 801c960:	f002 fbb2 	bl	801f0c8 <_ZN8touchgfx11Application11getInstanceEv>
 801c964:	6803      	ldr	r3, [r0, #0]
 801c966:	4631      	mov	r1, r6
 801c968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c96a:	4798      	blx	r3
 801c96c:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801c970:	b90b      	cbnz	r3, 801c976 <_ZN8touchgfx3HAL4tickEv+0x66>
 801c972:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 801c976:	f002 fba7 	bl	801f0c8 <_ZN8touchgfx11Application11getInstanceEv>
 801c97a:	6803      	ldr	r3, [r0, #0]
 801c97c:	695b      	ldr	r3, [r3, #20]
 801c97e:	4798      	blx	r3
 801c980:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c982:	6803      	ldr	r3, [r0, #0]
 801c984:	691b      	ldr	r3, [r3, #16]
 801c986:	4798      	blx	r3
 801c988:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801c98c:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801c990:	3b01      	subs	r3, #1
 801c992:	b2db      	uxtb	r3, r3
 801c994:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801c998:	b10a      	cbz	r2, 801c99e <_ZN8touchgfx3HAL4tickEv+0x8e>
 801c99a:	2b00      	cmp	r3, #0
 801c99c:	d1eb      	bne.n	801c976 <_ZN8touchgfx3HAL4tickEv+0x66>
 801c99e:	4a3b      	ldr	r2, [pc, #236]	; (801ca8c <_ZN8touchgfx3HAL4tickEv+0x17c>)
 801c9a0:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 801c9a4:	7813      	ldrb	r3, [r2, #0]
 801c9a6:	3301      	adds	r3, #1
 801c9a8:	b25b      	sxtb	r3, r3
 801c9aa:	4299      	cmp	r1, r3
 801c9ac:	7013      	strb	r3, [r2, #0]
 801c9ae:	dc10      	bgt.n	801c9d2 <_ZN8touchgfx3HAL4tickEv+0xc2>
 801c9b0:	68e0      	ldr	r0, [r4, #12]
 801c9b2:	2300      	movs	r3, #0
 801c9b4:	7013      	strb	r3, [r2, #0]
 801c9b6:	6803      	ldr	r3, [r0, #0]
 801c9b8:	aa03      	add	r2, sp, #12
 801c9ba:	68db      	ldr	r3, [r3, #12]
 801c9bc:	a902      	add	r1, sp, #8
 801c9be:	4798      	blx	r3
 801c9c0:	6823      	ldr	r3, [r4, #0]
 801c9c2:	2800      	cmp	r0, #0
 801c9c4:	d051      	beq.n	801ca6a <_ZN8touchgfx3HAL4tickEv+0x15a>
 801c9c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801c9ca:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801c9ce:	4620      	mov	r0, r4
 801c9d0:	4798      	blx	r3
 801c9d2:	6960      	ldr	r0, [r4, #20]
 801c9d4:	2300      	movs	r3, #0
 801c9d6:	f88d 3007 	strb.w	r3, [sp, #7]
 801c9da:	b158      	cbz	r0, 801c9f4 <_ZN8touchgfx3HAL4tickEv+0xe4>
 801c9dc:	6803      	ldr	r3, [r0, #0]
 801c9de:	f10d 0107 	add.w	r1, sp, #7
 801c9e2:	68db      	ldr	r3, [r3, #12]
 801c9e4:	4798      	blx	r3
 801c9e6:	b128      	cbz	r0, 801c9f4 <_ZN8touchgfx3HAL4tickEv+0xe4>
 801c9e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c9ea:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801c9ee:	6803      	ldr	r3, [r0, #0]
 801c9f0:	68db      	ldr	r3, [r3, #12]
 801c9f2:	4798      	blx	r3
 801c9f4:	f104 001c 	add.w	r0, r4, #28
 801c9f8:	f010 fadc 	bl	802cfb4 <_ZN8touchgfx8Gestures4tickEv>
 801c9fc:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 801ca00:	b30b      	cbz	r3, 801ca46 <_ZN8touchgfx3HAL4tickEv+0x136>
 801ca02:	6920      	ldr	r0, [r4, #16]
 801ca04:	6803      	ldr	r3, [r0, #0]
 801ca06:	691b      	ldr	r3, [r3, #16]
 801ca08:	4798      	blx	r3
 801ca0a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801ca0c:	4606      	mov	r6, r0
 801ca0e:	b903      	cbnz	r3, 801ca12 <_ZN8touchgfx3HAL4tickEv+0x102>
 801ca10:	6720      	str	r0, [r4, #112]	; 0x70
 801ca12:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801ca14:	4a1e      	ldr	r2, [pc, #120]	; (801ca90 <_ZN8touchgfx3HAL4tickEv+0x180>)
 801ca16:	1af3      	subs	r3, r6, r3
 801ca18:	4293      	cmp	r3, r2
 801ca1a:	d914      	bls.n	801ca46 <_ZN8touchgfx3HAL4tickEv+0x136>
 801ca1c:	6920      	ldr	r0, [r4, #16]
 801ca1e:	6803      	ldr	r3, [r0, #0]
 801ca20:	699b      	ldr	r3, [r3, #24]
 801ca22:	4798      	blx	r3
 801ca24:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801ca26:	2264      	movs	r2, #100	; 0x64
 801ca28:	1af3      	subs	r3, r6, r3
 801ca2a:	fbb3 f3f2 	udiv	r3, r3, r2
 801ca2e:	fbb0 f0f3 	udiv	r0, r0, r3
 801ca32:	2800      	cmp	r0, #0
 801ca34:	dc1e      	bgt.n	801ca74 <_ZN8touchgfx3HAL4tickEv+0x164>
 801ca36:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 801ca3a:	6920      	ldr	r0, [r4, #16]
 801ca3c:	6803      	ldr	r3, [r0, #0]
 801ca3e:	2100      	movs	r1, #0
 801ca40:	69db      	ldr	r3, [r3, #28]
 801ca42:	4798      	blx	r3
 801ca44:	6726      	str	r6, [r4, #112]	; 0x70
 801ca46:	f002 fb3f 	bl	801f0c8 <_ZN8touchgfx11Application11getInstanceEv>
 801ca4a:	6803      	ldr	r3, [r0, #0]
 801ca4c:	2100      	movs	r1, #0
 801ca4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ca50:	4798      	blx	r3
 801ca52:	6823      	ldr	r3, [r4, #0]
 801ca54:	4620      	mov	r0, r4
 801ca56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801ca5a:	4798      	blx	r3
 801ca5c:	2001      	movs	r0, #1
 801ca5e:	f7ec f834 	bl	8008aca <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801ca62:	2300      	movs	r3, #0
 801ca64:	702b      	strb	r3, [r5, #0]
 801ca66:	b004      	add	sp, #16
 801ca68:	bd70      	pop	{r4, r5, r6, pc}
 801ca6a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801ca6e:	4620      	mov	r0, r4
 801ca70:	4798      	blx	r3
 801ca72:	e7ae      	b.n	801c9d2 <_ZN8touchgfx3HAL4tickEv+0xc2>
 801ca74:	2863      	cmp	r0, #99	; 0x63
 801ca76:	bfcb      	itete	gt
 801ca78:	2300      	movgt	r3, #0
 801ca7a:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801ca7e:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801ca82:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 801ca86:	e7d8      	b.n	801ca3a <_ZN8touchgfx3HAL4tickEv+0x12a>
 801ca88:	200127f8 	.word	0x200127f8
 801ca8c:	200127f9 	.word	0x200127f9
 801ca90:	05f5e100 	.word	0x05f5e100

0801ca94 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801ca94:	f7ec bb36 	b.w	8009104 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801ca98 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 801ca98:	6581      	str	r1, [r0, #88]	; 0x58
 801ca9a:	301c      	adds	r0, #28
 801ca9c:	f010 ba88 	b.w	802cfb0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801caa0 <_ZN8touchgfx3HAL5touchEll>:
 801caa0:	b530      	push	{r4, r5, lr}
 801caa2:	b087      	sub	sp, #28
 801caa4:	4604      	mov	r4, r0
 801caa6:	a804      	add	r0, sp, #16
 801caa8:	e9cd 1204 	strd	r1, r2, [sp, #16]
 801caac:	f002 f90c 	bl	801ecc8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801cab0:	9b04      	ldr	r3, [sp, #16]
 801cab2:	f8ad 300c 	strh.w	r3, [sp, #12]
 801cab6:	a906      	add	r1, sp, #24
 801cab8:	9b05      	ldr	r3, [sp, #20]
 801caba:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 801cabe:	a803      	add	r0, sp, #12
 801cac0:	f002 f950 	bl	801ed64 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 801cac4:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 801cac8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801cacc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801cad0:	f104 001c 	add.w	r0, r4, #28
 801cad4:	b189      	cbz	r1, 801cafa <_ZN8touchgfx3HAL5touchEll+0x5a>
 801cad6:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 801cada:	9300      	str	r3, [sp, #0]
 801cadc:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801cae0:	4613      	mov	r3, r2
 801cae2:	462a      	mov	r2, r5
 801cae4:	f010 fa74 	bl	802cfd0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 801cae8:	b128      	cbz	r0, 801caf6 <_ZN8touchgfx3HAL5touchEll+0x56>
 801caea:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801caee:	65e3      	str	r3, [r4, #92]	; 0x5c
 801caf0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801caf4:	6623      	str	r3, [r4, #96]	; 0x60
 801caf6:	b007      	add	sp, #28
 801caf8:	bd30      	pop	{r4, r5, pc}
 801cafa:	f010 faad 	bl	802d058 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801cafe:	2301      	movs	r3, #1
 801cb00:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801cb04:	e7f1      	b.n	801caea <_ZN8touchgfx3HAL5touchEll+0x4a>

0801cb06 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801cb06:	b570      	push	{r4, r5, r6, lr}
 801cb08:	2b00      	cmp	r3, #0
 801cb0a:	d050      	beq.n	801cbae <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 801cb0c:	ea81 0002 	eor.w	r0, r1, r2
 801cb10:	07c6      	lsls	r6, r0, #31
 801cb12:	d508      	bpl.n	801cb26 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 801cb14:	3a01      	subs	r2, #1
 801cb16:	18cc      	adds	r4, r1, r3
 801cb18:	42a1      	cmp	r1, r4
 801cb1a:	d048      	beq.n	801cbae <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 801cb1c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801cb20:	f801 0b01 	strb.w	r0, [r1], #1
 801cb24:	e7f8      	b.n	801cb18 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801cb26:	07d5      	lsls	r5, r2, #31
 801cb28:	bf42      	ittt	mi
 801cb2a:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801cb2e:	f801 0b01 	strbmi.w	r0, [r1], #1
 801cb32:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801cb36:	2b01      	cmp	r3, #1
 801cb38:	d915      	bls.n	801cb66 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801cb3a:	ea82 0001 	eor.w	r0, r2, r1
 801cb3e:	0784      	lsls	r4, r0, #30
 801cb40:	d02d      	beq.n	801cb9e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 801cb42:	1e94      	subs	r4, r2, #2
 801cb44:	4608      	mov	r0, r1
 801cb46:	18ce      	adds	r6, r1, r3
 801cb48:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 801cb4c:	f820 5b02 	strh.w	r5, [r0], #2
 801cb50:	1a35      	subs	r5, r6, r0
 801cb52:	2d01      	cmp	r5, #1
 801cb54:	d8f8      	bhi.n	801cb48 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 801cb56:	1e98      	subs	r0, r3, #2
 801cb58:	f020 0001 	bic.w	r0, r0, #1
 801cb5c:	3002      	adds	r0, #2
 801cb5e:	4401      	add	r1, r0
 801cb60:	4402      	add	r2, r0
 801cb62:	f003 0301 	and.w	r3, r3, #1
 801cb66:	1f14      	subs	r4, r2, #4
 801cb68:	4608      	mov	r0, r1
 801cb6a:	18ce      	adds	r6, r1, r3
 801cb6c:	1a35      	subs	r5, r6, r0
 801cb6e:	2d03      	cmp	r5, #3
 801cb70:	d810      	bhi.n	801cb94 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 801cb72:	089c      	lsrs	r4, r3, #2
 801cb74:	00a0      	lsls	r0, r4, #2
 801cb76:	4401      	add	r1, r0
 801cb78:	3801      	subs	r0, #1
 801cb7a:	4402      	add	r2, r0
 801cb7c:	f06f 0003 	mvn.w	r0, #3
 801cb80:	fb00 3404 	mla	r4, r0, r4, r3
 801cb84:	440c      	add	r4, r1
 801cb86:	42a1      	cmp	r1, r4
 801cb88:	d011      	beq.n	801cbae <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 801cb8a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801cb8e:	f801 3b01 	strb.w	r3, [r1], #1
 801cb92:	e7f8      	b.n	801cb86 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 801cb94:	f854 5f04 	ldr.w	r5, [r4, #4]!
 801cb98:	f840 5b04 	str.w	r5, [r0], #4
 801cb9c:	e7e6      	b.n	801cb6c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 801cb9e:	0790      	lsls	r0, r2, #30
 801cba0:	d0e1      	beq.n	801cb66 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801cba2:	f832 0b02 	ldrh.w	r0, [r2], #2
 801cba6:	f821 0b02 	strh.w	r0, [r1], #2
 801cbaa:	3b02      	subs	r3, #2
 801cbac:	e7db      	b.n	801cb66 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801cbae:	2001      	movs	r0, #1
 801cbb0:	bd70      	pop	{r4, r5, r6, pc}

0801cbb2 <_ZN8touchgfx3HAL7noTouchEv>:
 801cbb2:	b510      	push	{r4, lr}
 801cbb4:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 801cbb8:	4604      	mov	r4, r0
 801cbba:	b153      	cbz	r3, 801cbd2 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 801cbbc:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 801cbc0:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 801cbc4:	2101      	movs	r1, #1
 801cbc6:	301c      	adds	r0, #28
 801cbc8:	f010 fa46 	bl	802d058 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801cbcc:	2300      	movs	r3, #0
 801cbce:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801cbd2:	bd10      	pop	{r4, pc}

0801cbd4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 801cbd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cbd8:	4605      	mov	r5, r0
 801cbda:	6980      	ldr	r0, [r0, #24]
 801cbdc:	b085      	sub	sp, #20
 801cbde:	460f      	mov	r7, r1
 801cbe0:	4690      	mov	r8, r2
 801cbe2:	4699      	mov	r9, r3
 801cbe4:	b930      	cbnz	r0, 801cbf4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 801cbe6:	4b1f      	ldr	r3, [pc, #124]	; (801cc64 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 801cbe8:	4a1f      	ldr	r2, [pc, #124]	; (801cc68 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 801cbea:	f240 112f 	movw	r1, #303	; 0x12f
 801cbee:	481f      	ldr	r0, [pc, #124]	; (801cc6c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 801cbf0:	f011 fb72 	bl	802e2d8 <__assert_func>
 801cbf4:	ac04      	add	r4, sp, #16
 801cbf6:	2600      	movs	r6, #0
 801cbf8:	f844 6d04 	str.w	r6, [r4, #-4]!
 801cbfc:	6806      	ldr	r6, [r0, #0]
 801cbfe:	9401      	str	r4, [sp, #4]
 801cc00:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 801cc04:	9400      	str	r4, [sp, #0]
 801cc06:	6834      	ldr	r4, [r6, #0]
 801cc08:	47a0      	blx	r4
 801cc0a:	4c19      	ldr	r4, [pc, #100]	; (801cc70 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 801cc0c:	4606      	mov	r6, r0
 801cc0e:	f8a4 9000 	strh.w	r9, [r4]
 801cc12:	f7eb ffa5 	bl	8008b60 <_ZN8touchgfx3HAL3lcdEv>
 801cc16:	6803      	ldr	r3, [r0, #0]
 801cc18:	6a1b      	ldr	r3, [r3, #32]
 801cc1a:	4798      	blx	r3
 801cc1c:	280c      	cmp	r0, #12
 801cc1e:	d80f      	bhi.n	801cc40 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 801cc20:	e8df f000 	tbb	[pc, r0]
 801cc24:	1b1b1207 	.word	0x1b1b1207
 801cc28:	1b1b1b1b 	.word	0x1b1b1b1b
 801cc2c:	1b1b1b1b 	.word	0x1b1b1b1b
 801cc30:	1b          	.byte	0x1b
 801cc31:	00          	.byte	0x00
 801cc32:	8823      	ldrh	r3, [r4, #0]
 801cc34:	fb08 7203 	mla	r2, r8, r3, r7
 801cc38:	9b03      	ldr	r3, [sp, #12]
 801cc3a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801cc3e:	63eb      	str	r3, [r5, #60]	; 0x3c
 801cc40:	4630      	mov	r0, r6
 801cc42:	b005      	add	sp, #20
 801cc44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cc48:	8822      	ldrh	r2, [r4, #0]
 801cc4a:	9b03      	ldr	r3, [sp, #12]
 801cc4c:	fb08 7202 	mla	r2, r8, r2, r7
 801cc50:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cc54:	1a9a      	subs	r2, r3, r2
 801cc56:	63ea      	str	r2, [r5, #60]	; 0x3c
 801cc58:	e7f2      	b.n	801cc40 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 801cc5a:	4b06      	ldr	r3, [pc, #24]	; (801cc74 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 801cc5c:	4a02      	ldr	r2, [pc, #8]	; (801cc68 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 801cc5e:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 801cc62:	e7c4      	b.n	801cbee <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 801cc64:	080328fe 	.word	0x080328fe
 801cc68:	08032c12 	.word	0x08032c12
 801cc6c:	08032943 	.word	0x08032943
 801cc70:	200127ee 	.word	0x200127ee
 801cc74:	08032969 	.word	0x08032969

0801cc78 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 801cc78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cc7c:	4698      	mov	r8, r3
 801cc7e:	6803      	ldr	r3, [r0, #0]
 801cc80:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 801cc82:	4b0f      	ldr	r3, [pc, #60]	; (801ccc0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 801cc84:	b087      	sub	sp, #28
 801cc86:	f8b3 9000 	ldrh.w	r9, [r3]
 801cc8a:	460e      	mov	r6, r1
 801cc8c:	4617      	mov	r7, r2
 801cc8e:	4604      	mov	r4, r0
 801cc90:	f7eb ff66 	bl	8008b60 <_ZN8touchgfx3HAL3lcdEv>
 801cc94:	6803      	ldr	r3, [r0, #0]
 801cc96:	6a1b      	ldr	r3, [r3, #32]
 801cc98:	4798      	blx	r3
 801cc9a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801cc9e:	9302      	str	r3, [sp, #8]
 801cca0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801cca4:	9301      	str	r3, [sp, #4]
 801cca6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801ccaa:	9300      	str	r3, [sp, #0]
 801ccac:	e9cd 9003 	strd	r9, r0, [sp, #12]
 801ccb0:	4643      	mov	r3, r8
 801ccb2:	463a      	mov	r2, r7
 801ccb4:	4631      	mov	r1, r6
 801ccb6:	4620      	mov	r0, r4
 801ccb8:	47a8      	blx	r5
 801ccba:	b007      	add	sp, #28
 801ccbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ccc0:	200127ee 	.word	0x200127ee

0801ccc4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 801ccc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ccc8:	4606      	mov	r6, r0
 801ccca:	b089      	sub	sp, #36	; 0x24
 801cccc:	4610      	mov	r0, r2
 801ccce:	460c      	mov	r4, r1
 801ccd0:	4691      	mov	r9, r2
 801ccd2:	4698      	mov	r8, r3
 801ccd4:	f004 fcf4 	bl	80216c0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801ccd8:	2800      	cmp	r0, #0
 801ccda:	f000 8093 	beq.w	801ce04 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x140>
 801ccde:	f8df a13c 	ldr.w	sl, [pc, #316]	; 801ce1c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 801cce2:	f8df b13c 	ldr.w	fp, [pc, #316]	; 801ce20 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 801cce6:	f8da 0000 	ldr.w	r0, [sl]
 801ccea:	4f4b      	ldr	r7, [pc, #300]	; (801ce18 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 801ccec:	6802      	ldr	r2, [r0, #0]
 801ccee:	6a12      	ldr	r2, [r2, #32]
 801ccf0:	4790      	blx	r2
 801ccf2:	f8da 0000 	ldr.w	r0, [sl]
 801ccf6:	6802      	ldr	r2, [r0, #0]
 801ccf8:	ad08      	add	r5, sp, #32
 801ccfa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801ccfc:	4790      	blx	r2
 801ccfe:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 801cd02:	f8bb 3000 	ldrh.w	r3, [fp]
 801cd06:	9300      	str	r3, [sp, #0]
 801cd08:	4628      	mov	r0, r5
 801cd0a:	883b      	ldrh	r3, [r7, #0]
 801cd0c:	9301      	str	r3, [sp, #4]
 801cd0e:	f004 fd9b 	bl	8021848 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801cd12:	f8ab 0000 	strh.w	r0, [fp]
 801cd16:	4628      	mov	r0, r5
 801cd18:	f004 fdd0 	bl	80218bc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801cd1c:	f8da b000 	ldr.w	fp, [sl]
 801cd20:	8038      	strh	r0, [r7, #0]
 801cd22:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 801cd26:	9302      	str	r3, [sp, #8]
 801cd28:	4648      	mov	r0, r9
 801cd2a:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 801cd2e:	f004 fcc7 	bl	80216c0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801cd32:	f8da 2000 	ldr.w	r2, [sl]
 801cd36:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 801cd3a:	63d0      	str	r0, [r2, #60]	; 0x3c
 801cd3c:	6822      	ldr	r2, [r4, #0]
 801cd3e:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 801cd42:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801cd44:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 801cd48:	2200      	movs	r2, #0
 801cd4a:	4611      	mov	r1, r2
 801cd4c:	4620      	mov	r0, r4
 801cd4e:	4798      	blx	r3
 801cd50:	2201      	movs	r2, #1
 801cd52:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 801cd56:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 801cd5a:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 801cd5e:	2a00      	cmp	r2, #0
 801cd60:	f104 0204 	add.w	r2, r4, #4
 801cd64:	dd51      	ble.n	801ce0a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x146>
 801cd66:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 801cd6a:	2900      	cmp	r1, #0
 801cd6c:	dd4d      	ble.n	801ce0a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x146>
 801cd6e:	6810      	ldr	r0, [r2, #0]
 801cd70:	6851      	ldr	r1, [r2, #4]
 801cd72:	f10d 0c18 	add.w	ip, sp, #24
 801cd76:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801cd7a:	4641      	mov	r1, r8
 801cd7c:	a806      	add	r0, sp, #24
 801cd7e:	f7fe f8a9 	bl	801aed4 <_ZN8touchgfx4RectaNERKS0_>
 801cd82:	4628      	mov	r0, r5
 801cd84:	f004 feec 	bl	8021b60 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801cd88:	4680      	mov	r8, r0
 801cd8a:	f7eb fee9 	bl	8008b60 <_ZN8touchgfx3HAL3lcdEv>
 801cd8e:	6802      	ldr	r2, [r0, #0]
 801cd90:	6a12      	ldr	r2, [r2, #32]
 801cd92:	4790      	blx	r2
 801cd94:	4580      	cmp	r8, r0
 801cd96:	d03d      	beq.n	801ce14 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x150>
 801cd98:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 801cd9a:	b150      	cbz	r0, 801cdb2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xee>
 801cd9c:	4628      	mov	r0, r5
 801cd9e:	f004 fedf 	bl	8021b60 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801cda2:	4605      	mov	r5, r0
 801cda4:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 801cda6:	6803      	ldr	r3, [r0, #0]
 801cda8:	6a1b      	ldr	r3, [r3, #32]
 801cdaa:	4798      	blx	r3
 801cdac:	1a2b      	subs	r3, r5, r0
 801cdae:	4258      	negs	r0, r3
 801cdb0:	4158      	adcs	r0, r3
 801cdb2:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 801cdb6:	6822      	ldr	r2, [r4, #0]
 801cdb8:	6963      	ldr	r3, [r4, #20]
 801cdba:	9303      	str	r3, [sp, #12]
 801cdbc:	2500      	movs	r5, #0
 801cdbe:	6165      	str	r5, [r4, #20]
 801cdc0:	4620      	mov	r0, r4
 801cdc2:	6892      	ldr	r2, [r2, #8]
 801cdc4:	a906      	add	r1, sp, #24
 801cdc6:	4790      	blx	r2
 801cdc8:	9b03      	ldr	r3, [sp, #12]
 801cdca:	6163      	str	r3, [r4, #20]
 801cdcc:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 801cdd0:	6823      	ldr	r3, [r4, #0]
 801cdd2:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 801cdd6:	4620      	mov	r0, r4
 801cdd8:	4c10      	ldr	r4, [pc, #64]	; (801ce1c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 801cdda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cddc:	4652      	mov	r2, sl
 801cdde:	4649      	mov	r1, r9
 801cde0:	4798      	blx	r3
 801cde2:	6820      	ldr	r0, [r4, #0]
 801cde4:	9b02      	ldr	r3, [sp, #8]
 801cde6:	9a00      	ldr	r2, [sp, #0]
 801cde8:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 801cdec:	4b0c      	ldr	r3, [pc, #48]	; (801ce20 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 801cdee:	801a      	strh	r2, [r3, #0]
 801cdf0:	4b09      	ldr	r3, [pc, #36]	; (801ce18 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 801cdf2:	9a01      	ldr	r2, [sp, #4]
 801cdf4:	801a      	strh	r2, [r3, #0]
 801cdf6:	6803      	ldr	r3, [r0, #0]
 801cdf8:	6a1b      	ldr	r3, [r3, #32]
 801cdfa:	4798      	blx	r3
 801cdfc:	6820      	ldr	r0, [r4, #0]
 801cdfe:	6803      	ldr	r3, [r0, #0]
 801ce00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ce02:	4798      	blx	r3
 801ce04:	b009      	add	sp, #36	; 0x24
 801ce06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce0a:	6810      	ldr	r0, [r2, #0]
 801ce0c:	6851      	ldr	r1, [r2, #4]
 801ce0e:	ab06      	add	r3, sp, #24
 801ce10:	c303      	stmia	r3!, {r0, r1}
 801ce12:	e7b6      	b.n	801cd82 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbe>
 801ce14:	2000      	movs	r0, #0
 801ce16:	e7cc      	b.n	801cdb2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xee>
 801ce18:	200127f0 	.word	0x200127f0
 801ce1c:	200127f4 	.word	0x200127f4
 801ce20:	200127ee 	.word	0x200127ee

0801ce24 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 801ce24:	b510      	push	{r4, lr}
 801ce26:	4b07      	ldr	r3, [pc, #28]	; (801ce44 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 801ce28:	781b      	ldrb	r3, [r3, #0]
 801ce2a:	4604      	mov	r4, r0
 801ce2c:	b13b      	cbz	r3, 801ce3e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801ce2e:	6803      	ldr	r3, [r0, #0]
 801ce30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ce32:	4798      	blx	r3
 801ce34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801ce36:	4283      	cmp	r3, r0
 801ce38:	d101      	bne.n	801ce3e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801ce3a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801ce3c:	bd10      	pop	{r4, pc}
 801ce3e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801ce40:	e7fc      	b.n	801ce3c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801ce42:	bf00      	nop
 801ce44:	200127f2 	.word	0x200127f2

0801ce48 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 801ce48:	b510      	push	{r4, lr}
 801ce4a:	4b0b      	ldr	r3, [pc, #44]	; (801ce78 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 801ce4c:	781b      	ldrb	r3, [r3, #0]
 801ce4e:	4604      	mov	r4, r0
 801ce50:	b95b      	cbnz	r3, 801ce6a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801ce52:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801ce56:	2b02      	cmp	r3, #2
 801ce58:	d007      	beq.n	801ce6a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801ce5a:	6840      	ldr	r0, [r0, #4]
 801ce5c:	f000 fbc8 	bl	801d5f0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801ce60:	b118      	cbz	r0, 801ce6a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801ce62:	6862      	ldr	r2, [r4, #4]
 801ce64:	7a53      	ldrb	r3, [r2, #9]
 801ce66:	2b00      	cmp	r3, #0
 801ce68:	d0fc      	beq.n	801ce64 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 801ce6a:	f7ec f92d 	bl	80090c8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801ce6e:	4620      	mov	r0, r4
 801ce70:	f7ff ffd8 	bl	801ce24 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801ce74:	bd10      	pop	{r4, pc}
 801ce76:	bf00      	nop
 801ce78:	200127f2 	.word	0x200127f2

0801ce7c <_ZN8touchgfx3HAL10initializeEv>:
 801ce7c:	b510      	push	{r4, lr}
 801ce7e:	4604      	mov	r4, r0
 801ce80:	f7ec f902 	bl	8009088 <_ZN8touchgfx10OSWrappers10initializeEv>
 801ce84:	6860      	ldr	r0, [r4, #4]
 801ce86:	6803      	ldr	r3, [r0, #0]
 801ce88:	68db      	ldr	r3, [r3, #12]
 801ce8a:	4798      	blx	r3
 801ce8c:	68e0      	ldr	r0, [r4, #12]
 801ce8e:	6803      	ldr	r3, [r0, #0]
 801ce90:	689b      	ldr	r3, [r3, #8]
 801ce92:	4798      	blx	r3
 801ce94:	6823      	ldr	r3, [r4, #0]
 801ce96:	4620      	mov	r0, r4
 801ce98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ce9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ce9e:	4718      	bx	r3

0801cea0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 801cea0:	b508      	push	{r3, lr}
 801cea2:	290c      	cmp	r1, #12
 801cea4:	d817      	bhi.n	801ced6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 801cea6:	e8df f001 	tbb	[pc, r1]
 801ceaa:	090b      	.short	0x090b
 801ceac:	0d0d0d07 	.word	0x0d0d0d07
 801ceb0:	1414140d 	.word	0x1414140d
 801ceb4:	1414      	.short	0x1414
 801ceb6:	0d          	.byte	0x0d
 801ceb7:	00          	.byte	0x00
 801ceb8:	2020      	movs	r0, #32
 801ceba:	bd08      	pop	{r3, pc}
 801cebc:	2018      	movs	r0, #24
 801cebe:	e7fc      	b.n	801ceba <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801cec0:	2010      	movs	r0, #16
 801cec2:	e7fa      	b.n	801ceba <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801cec4:	4b05      	ldr	r3, [pc, #20]	; (801cedc <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 801cec6:	4a06      	ldr	r2, [pc, #24]	; (801cee0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 801cec8:	4806      	ldr	r0, [pc, #24]	; (801cee4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 801ceca:	f240 212f 	movw	r1, #559	; 0x22f
 801cece:	f011 fa03 	bl	802e2d8 <__assert_func>
 801ced2:	2008      	movs	r0, #8
 801ced4:	e7f1      	b.n	801ceba <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801ced6:	2000      	movs	r0, #0
 801ced8:	e7ef      	b.n	801ceba <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801ceda:	bf00      	nop
 801cedc:	08032a3c 	.word	0x08032a3c
 801cee0:	08032dd4 	.word	0x08032dd4
 801cee4:	08032943 	.word	0x08032943

0801cee8 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 801cee8:	b570      	push	{r4, r5, r6, lr}
 801ceea:	460d      	mov	r5, r1
 801ceec:	f89d 1014 	ldrb.w	r1, [sp, #20]
 801cef0:	4616      	mov	r6, r2
 801cef2:	461c      	mov	r4, r3
 801cef4:	f7ff ffd4 	bl	801cea0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 801cef8:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 801cefc:	10c0      	asrs	r0, r0, #3
 801cefe:	fb06 5101 	mla	r1, r6, r1, r5
 801cf02:	fb00 4001 	mla	r0, r0, r1, r4
 801cf06:	bd70      	pop	{r4, r5, r6, pc}

0801cf08 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 801cf08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cf0c:	b08a      	sub	sp, #40	; 0x28
 801cf0e:	f04f 0c00 	mov.w	ip, #0
 801cf12:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 801cf16:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 801cf1a:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 801cf1e:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 801cf22:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801cf26:	f8cd c020 	str.w	ip, [sp, #32]
 801cf2a:	f1b8 0f02 	cmp.w	r8, #2
 801cf2e:	4604      	mov	r4, r0
 801cf30:	469a      	mov	sl, r3
 801cf32:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 801cf36:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801cf3a:	d030      	beq.n	801cf9e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 801cf3c:	2bff      	cmp	r3, #255	; 0xff
 801cf3e:	d12c      	bne.n	801cf9a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 801cf40:	4560      	cmp	r0, ip
 801cf42:	bf14      	ite	ne
 801cf44:	2004      	movne	r0, #4
 801cf46:	2001      	moveq	r0, #1
 801cf48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801cf4c:	9204      	str	r2, [sp, #16]
 801cf4e:	4620      	mov	r0, r4
 801cf50:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801cf54:	f8ad 201c 	strh.w	r2, [sp, #28]
 801cf58:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801cf5c:	f8ad 6018 	strh.w	r6, [sp, #24]
 801cf60:	f8ad 501a 	strh.w	r5, [sp, #26]
 801cf64:	f7ff ff5e 	bl	801ce24 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801cf68:	e9cd 9700 	strd	r9, r7, [sp]
 801cf6c:	4603      	mov	r3, r0
 801cf6e:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 801cf72:	4651      	mov	r1, sl
 801cf74:	4620      	mov	r0, r4
 801cf76:	f7ff ffb7 	bl	801cee8 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801cf7a:	f8ad 901e 	strh.w	r9, [sp, #30]
 801cf7e:	9005      	str	r0, [sp, #20]
 801cf80:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 801cf84:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 801cf88:	b106      	cbz	r6, 801cf8c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 801cf8a:	b98d      	cbnz	r5, 801cfb0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 801cf8c:	4b12      	ldr	r3, [pc, #72]	; (801cfd8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 801cf8e:	4a13      	ldr	r2, [pc, #76]	; (801cfdc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 801cf90:	f240 11af 	movw	r1, #431	; 0x1af
 801cf94:	4812      	ldr	r0, [pc, #72]	; (801cfe0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 801cf96:	f011 f99f 	bl	802e2d8 <__assert_func>
 801cf9a:	2004      	movs	r0, #4
 801cf9c:	e7d4      	b.n	801cf48 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 801cf9e:	2bff      	cmp	r3, #255	; 0xff
 801cfa0:	d104      	bne.n	801cfac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 801cfa2:	2800      	cmp	r0, #0
 801cfa4:	bf14      	ite	ne
 801cfa6:	2040      	movne	r0, #64	; 0x40
 801cfa8:	2020      	moveq	r0, #32
 801cfaa:	e7cd      	b.n	801cf48 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 801cfac:	2040      	movs	r0, #64	; 0x40
 801cfae:	e7cb      	b.n	801cf48 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 801cfb0:	6823      	ldr	r3, [r4, #0]
 801cfb2:	9d02      	ldr	r5, [sp, #8]
 801cfb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cfb6:	4620      	mov	r0, r4
 801cfb8:	4798      	blx	r3
 801cfba:	4228      	tst	r0, r5
 801cfbc:	d104      	bne.n	801cfc8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 801cfbe:	4b09      	ldr	r3, [pc, #36]	; (801cfe4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 801cfc0:	4a06      	ldr	r2, [pc, #24]	; (801cfdc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 801cfc2:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 801cfc6:	e7e5      	b.n	801cf94 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 801cfc8:	6860      	ldr	r0, [r4, #4]
 801cfca:	6803      	ldr	r3, [r0, #0]
 801cfcc:	a902      	add	r1, sp, #8
 801cfce:	685b      	ldr	r3, [r3, #4]
 801cfd0:	4798      	blx	r3
 801cfd2:	b00a      	add	sp, #40	; 0x28
 801cfd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cfd8:	080329bf 	.word	0x080329bf
 801cfdc:	08032c76 	.word	0x08032c76
 801cfe0:	08032943 	.word	0x08032943
 801cfe4:	080329f7 	.word	0x080329f7

0801cfe8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 801cfe8:	b510      	push	{r4, lr}
 801cfea:	b08a      	sub	sp, #40	; 0x28
 801cfec:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801cff0:	9408      	str	r4, [sp, #32]
 801cff2:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 801cff6:	9407      	str	r4, [sp, #28]
 801cff8:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 801cffc:	9406      	str	r4, [sp, #24]
 801cffe:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 801d002:	9405      	str	r4, [sp, #20]
 801d004:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 801d008:	9404      	str	r4, [sp, #16]
 801d00a:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 801d00e:	9403      	str	r4, [sp, #12]
 801d010:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 801d014:	9402      	str	r4, [sp, #8]
 801d016:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 801d01a:	e9cd 3400 	strd	r3, r4, [sp]
 801d01e:	4613      	mov	r3, r2
 801d020:	2200      	movs	r2, #0
 801d022:	f7ff ff71 	bl	801cf08 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801d026:	b00a      	add	sp, #40	; 0x28
 801d028:	bd10      	pop	{r4, pc}
	...

0801d02c <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 801d02c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d02e:	b08b      	sub	sp, #44	; 0x2c
 801d030:	4616      	mov	r6, r2
 801d032:	460d      	mov	r5, r1
 801d034:	461f      	mov	r7, r3
 801d036:	4604      	mov	r4, r0
 801d038:	f7eb fd92 	bl	8008b60 <_ZN8touchgfx3HAL3lcdEv>
 801d03c:	6803      	ldr	r3, [r0, #0]
 801d03e:	6a1b      	ldr	r3, [r3, #32]
 801d040:	4798      	blx	r3
 801d042:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801d046:	4b0d      	ldr	r3, [pc, #52]	; (801d07c <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 801d048:	881b      	ldrh	r3, [r3, #0]
 801d04a:	9306      	str	r3, [sp, #24]
 801d04c:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801d050:	9305      	str	r3, [sp, #20]
 801d052:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801d056:	9304      	str	r3, [sp, #16]
 801d058:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801d05c:	9303      	str	r3, [sp, #12]
 801d05e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801d062:	9302      	str	r3, [sp, #8]
 801d064:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801d068:	2200      	movs	r2, #0
 801d06a:	e9cd 7300 	strd	r7, r3, [sp]
 801d06e:	4629      	mov	r1, r5
 801d070:	4633      	mov	r3, r6
 801d072:	4620      	mov	r0, r4
 801d074:	f7ff ff48 	bl	801cf08 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801d078:	b00b      	add	sp, #44	; 0x2c
 801d07a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d07c:	200127ee 	.word	0x200127ee

0801d080 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 801d080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d084:	461f      	mov	r7, r3
 801d086:	4b14      	ldr	r3, [pc, #80]	; (801d0d8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 801d088:	b08a      	sub	sp, #40	; 0x28
 801d08a:	4616      	mov	r6, r2
 801d08c:	f8b3 8000 	ldrh.w	r8, [r3]
 801d090:	460d      	mov	r5, r1
 801d092:	4604      	mov	r4, r0
 801d094:	f7eb fd64 	bl	8008b60 <_ZN8touchgfx3HAL3lcdEv>
 801d098:	6803      	ldr	r3, [r0, #0]
 801d09a:	6a1b      	ldr	r3, [r3, #32]
 801d09c:	4798      	blx	r3
 801d09e:	2302      	movs	r3, #2
 801d0a0:	e9cd 8306 	strd	r8, r3, [sp, #24]
 801d0a4:	2301      	movs	r3, #1
 801d0a6:	9305      	str	r3, [sp, #20]
 801d0a8:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801d0ac:	9304      	str	r3, [sp, #16]
 801d0ae:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801d0b2:	9303      	str	r3, [sp, #12]
 801d0b4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801d0b8:	9302      	str	r3, [sp, #8]
 801d0ba:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801d0be:	9008      	str	r0, [sp, #32]
 801d0c0:	e9cd 7300 	strd	r7, r3, [sp]
 801d0c4:	2200      	movs	r2, #0
 801d0c6:	4633      	mov	r3, r6
 801d0c8:	4629      	mov	r1, r5
 801d0ca:	4620      	mov	r0, r4
 801d0cc:	f7ff ff1c 	bl	801cf08 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801d0d0:	b00a      	add	sp, #40	; 0x28
 801d0d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d0d6:	bf00      	nop
 801d0d8:	200127ee 	.word	0x200127ee

0801d0dc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 801d0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0e0:	b08b      	sub	sp, #44	; 0x2c
 801d0e2:	469b      	mov	fp, r3
 801d0e4:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801d0e8:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 801d0ec:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 801d0f0:	2fff      	cmp	r7, #255	; 0xff
 801d0f2:	bf14      	ite	ne
 801d0f4:	2308      	movne	r3, #8
 801d0f6:	2302      	moveq	r3, #2
 801d0f8:	2600      	movs	r6, #0
 801d0fa:	4604      	mov	r4, r0
 801d0fc:	4689      	mov	r9, r1
 801d0fe:	4692      	mov	sl, r2
 801d100:	e9cd 3602 	strd	r3, r6, [sp, #8]
 801d104:	9608      	str	r6, [sp, #32]
 801d106:	f7ff fe8d 	bl	801ce24 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801d10a:	e9cd 8500 	strd	r8, r5, [sp]
 801d10e:	4603      	mov	r3, r0
 801d110:	465a      	mov	r2, fp
 801d112:	4651      	mov	r1, sl
 801d114:	4620      	mov	r0, r4
 801d116:	f7ff fee7 	bl	801cee8 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801d11a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801d11e:	f8ad 3018 	strh.w	r3, [sp, #24]
 801d122:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801d126:	f8ad 301a 	strh.w	r3, [sp, #26]
 801d12a:	6823      	ldr	r3, [r4, #0]
 801d12c:	9005      	str	r0, [sp, #20]
 801d12e:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 801d132:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 801d136:	f8ad 601c 	strh.w	r6, [sp, #28]
 801d13a:	f8ad 801e 	strh.w	r8, [sp, #30]
 801d13e:	f8cd 9020 	str.w	r9, [sp, #32]
 801d142:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 801d146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d148:	9d02      	ldr	r5, [sp, #8]
 801d14a:	4620      	mov	r0, r4
 801d14c:	4798      	blx	r3
 801d14e:	4228      	tst	r0, r5
 801d150:	d106      	bne.n	801d160 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 801d152:	4b07      	ldr	r3, [pc, #28]	; (801d170 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 801d154:	4a07      	ldr	r2, [pc, #28]	; (801d174 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 801d156:	4808      	ldr	r0, [pc, #32]	; (801d178 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 801d158:	f240 11e7 	movw	r1, #487	; 0x1e7
 801d15c:	f011 f8bc 	bl	802e2d8 <__assert_func>
 801d160:	6860      	ldr	r0, [r4, #4]
 801d162:	6803      	ldr	r3, [r0, #0]
 801d164:	a902      	add	r1, sp, #8
 801d166:	685b      	ldr	r3, [r3, #4]
 801d168:	4798      	blx	r3
 801d16a:	b00b      	add	sp, #44	; 0x2c
 801d16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d170:	080329f7 	.word	0x080329f7
 801d174:	08032d3f 	.word	0x08032d3f
 801d178:	08032943 	.word	0x08032943

0801d17c <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 801d17c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801d180:	461f      	mov	r7, r3
 801d182:	4b0b      	ldr	r3, [pc, #44]	; (801d1b0 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801d184:	460d      	mov	r5, r1
 801d186:	f8b3 8000 	ldrh.w	r8, [r3]
 801d18a:	4616      	mov	r6, r2
 801d18c:	4604      	mov	r4, r0
 801d18e:	f7eb fce7 	bl	8008b60 <_ZN8touchgfx3HAL3lcdEv>
 801d192:	6803      	ldr	r3, [r0, #0]
 801d194:	6a1b      	ldr	r3, [r3, #32]
 801d196:	4798      	blx	r3
 801d198:	463b      	mov	r3, r7
 801d19a:	e9cd 8000 	strd	r8, r0, [sp]
 801d19e:	4632      	mov	r2, r6
 801d1a0:	4629      	mov	r1, r5
 801d1a2:	4620      	mov	r0, r4
 801d1a4:	f7ff fea0 	bl	801cee8 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801d1a8:	b002      	add	sp, #8
 801d1aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d1ae:	bf00      	nop
 801d1b0:	200127ee 	.word	0x200127ee

0801d1b4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 801d1b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d1b8:	b088      	sub	sp, #32
 801d1ba:	4698      	mov	r8, r3
 801d1bc:	2300      	movs	r3, #0
 801d1be:	9306      	str	r3, [sp, #24]
 801d1c0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801d1c4:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 801d1c8:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801d1cc:	f8ad 6010 	strh.w	r6, [sp, #16]
 801d1d0:	e9cd 3100 	strd	r3, r1, [sp]
 801d1d4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801d1d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 801d1dc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801d1e0:	f88d 301c 	strb.w	r3, [sp, #28]
 801d1e4:	4617      	mov	r7, r2
 801d1e6:	4604      	mov	r4, r0
 801d1e8:	f8ad 5012 	strh.w	r5, [sp, #18]
 801d1ec:	f7ff fe1a 	bl	801ce24 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801d1f0:	4642      	mov	r2, r8
 801d1f2:	4603      	mov	r3, r0
 801d1f4:	4639      	mov	r1, r7
 801d1f6:	4620      	mov	r0, r4
 801d1f8:	f7ff ffc0 	bl	801d17c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801d1fc:	4b16      	ldr	r3, [pc, #88]	; (801d258 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 801d1fe:	9003      	str	r0, [sp, #12]
 801d200:	881b      	ldrh	r3, [r3, #0]
 801d202:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d206:	f7eb fcab 	bl	8008b60 <_ZN8touchgfx3HAL3lcdEv>
 801d20a:	6803      	ldr	r3, [r0, #0]
 801d20c:	6a1b      	ldr	r3, [r3, #32]
 801d20e:	4798      	blx	r3
 801d210:	f88d 001e 	strb.w	r0, [sp, #30]
 801d214:	f88d 001d 	strb.w	r0, [sp, #29]
 801d218:	b106      	cbz	r6, 801d21c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 801d21a:	b935      	cbnz	r5, 801d22a <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 801d21c:	4b0f      	ldr	r3, [pc, #60]	; (801d25c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 801d21e:	4a10      	ldr	r2, [pc, #64]	; (801d260 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 801d220:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 801d224:	480f      	ldr	r0, [pc, #60]	; (801d264 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 801d226:	f011 f857 	bl	802e2d8 <__assert_func>
 801d22a:	6823      	ldr	r3, [r4, #0]
 801d22c:	9d00      	ldr	r5, [sp, #0]
 801d22e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d230:	4620      	mov	r0, r4
 801d232:	4798      	blx	r3
 801d234:	4228      	tst	r0, r5
 801d236:	d104      	bne.n	801d242 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 801d238:	4b0b      	ldr	r3, [pc, #44]	; (801d268 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 801d23a:	4a09      	ldr	r2, [pc, #36]	; (801d260 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 801d23c:	f240 11cd 	movw	r1, #461	; 0x1cd
 801d240:	e7f0      	b.n	801d224 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 801d242:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d244:	6860      	ldr	r0, [r4, #4]
 801d246:	9306      	str	r3, [sp, #24]
 801d248:	6803      	ldr	r3, [r0, #0]
 801d24a:	4669      	mov	r1, sp
 801d24c:	685b      	ldr	r3, [r3, #4]
 801d24e:	4798      	blx	r3
 801d250:	b008      	add	sp, #32
 801d252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d256:	bf00      	nop
 801d258:	200127ee 	.word	0x200127ee
 801d25c:	080329bf 	.word	0x080329bf
 801d260:	08032b28 	.word	0x08032b28
 801d264:	08032943 	.word	0x08032943
 801d268:	080329f7 	.word	0x080329f7

0801d26c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 801d26c:	b570      	push	{r4, r5, r6, lr}
 801d26e:	b08a      	sub	sp, #40	; 0x28
 801d270:	466b      	mov	r3, sp
 801d272:	e883 0006 	stmia.w	r3, {r1, r2}
 801d276:	4b20      	ldr	r3, [pc, #128]	; (801d2f8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 801d278:	781b      	ldrb	r3, [r3, #0]
 801d27a:	4604      	mov	r4, r0
 801d27c:	b933      	cbnz	r3, 801d28c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 801d27e:	4b1f      	ldr	r3, [pc, #124]	; (801d2fc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 801d280:	4a1f      	ldr	r2, [pc, #124]	; (801d300 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 801d282:	4820      	ldr	r0, [pc, #128]	; (801d304 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 801d284:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 801d288:	f011 f826 	bl	802e2d8 <__assert_func>
 801d28c:	2300      	movs	r3, #0
 801d28e:	9308      	str	r3, [sp, #32]
 801d290:	2301      	movs	r3, #1
 801d292:	9302      	str	r3, [sp, #8]
 801d294:	6803      	ldr	r3, [r0, #0]
 801d296:	f8bd 5000 	ldrh.w	r5, [sp]
 801d29a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d29c:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 801d2a0:	4798      	blx	r3
 801d2a2:	4632      	mov	r2, r6
 801d2a4:	4629      	mov	r1, r5
 801d2a6:	4603      	mov	r3, r0
 801d2a8:	4620      	mov	r0, r4
 801d2aa:	f7ff ff67 	bl	801d17c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801d2ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801d2b0:	9305      	str	r3, [sp, #20]
 801d2b2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801d2b6:	f8ad 3018 	strh.w	r3, [sp, #24]
 801d2ba:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801d2be:	f8ad 301a 	strh.w	r3, [sp, #26]
 801d2c2:	4b11      	ldr	r3, [pc, #68]	; (801d308 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 801d2c4:	9003      	str	r0, [sp, #12]
 801d2c6:	881b      	ldrh	r3, [r3, #0]
 801d2c8:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d2cc:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d2d0:	f7eb fc46 	bl	8008b60 <_ZN8touchgfx3HAL3lcdEv>
 801d2d4:	6803      	ldr	r3, [r0, #0]
 801d2d6:	6a1b      	ldr	r3, [r3, #32]
 801d2d8:	4798      	blx	r3
 801d2da:	23ff      	movs	r3, #255	; 0xff
 801d2dc:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 801d2e0:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 801d2e4:	6860      	ldr	r0, [r4, #4]
 801d2e6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801d2ea:	6803      	ldr	r3, [r0, #0]
 801d2ec:	a902      	add	r1, sp, #8
 801d2ee:	685b      	ldr	r3, [r3, #4]
 801d2f0:	4798      	blx	r3
 801d2f2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801d2f4:	b00a      	add	sp, #40	; 0x28
 801d2f6:	bd70      	pop	{r4, r5, r6, pc}
 801d2f8:	200127f3 	.word	0x200127f3
 801d2fc:	08032890 	.word	0x08032890
 801d300:	08032bcc 	.word	0x08032bcc
 801d304:	08032943 	.word	0x08032943
 801d308:	200127ee 	.word	0x200127ee

0801d30c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 801d30c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d30e:	b08b      	sub	sp, #44	; 0x2c
 801d310:	466d      	mov	r5, sp
 801d312:	e885 0006 	stmia.w	r5, {r1, r2}
 801d316:	461d      	mov	r5, r3
 801d318:	2300      	movs	r3, #0
 801d31a:	9308      	str	r3, [sp, #32]
 801d31c:	2301      	movs	r3, #1
 801d31e:	9302      	str	r3, [sp, #8]
 801d320:	6803      	ldr	r3, [r0, #0]
 801d322:	f8bd 6000 	ldrh.w	r6, [sp]
 801d326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d328:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801d32c:	4604      	mov	r4, r0
 801d32e:	4798      	blx	r3
 801d330:	463a      	mov	r2, r7
 801d332:	4631      	mov	r1, r6
 801d334:	4603      	mov	r3, r0
 801d336:	4620      	mov	r0, r4
 801d338:	f7ff ff20 	bl	801d17c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801d33c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801d340:	f8ad 3018 	strh.w	r3, [sp, #24]
 801d344:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801d348:	f8ad 301a 	strh.w	r3, [sp, #26]
 801d34c:	4b0e      	ldr	r3, [pc, #56]	; (801d388 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 801d34e:	9003      	str	r0, [sp, #12]
 801d350:	881b      	ldrh	r3, [r3, #0]
 801d352:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d356:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d358:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d35c:	9505      	str	r5, [sp, #20]
 801d35e:	f7eb fbff 	bl	8008b60 <_ZN8touchgfx3HAL3lcdEv>
 801d362:	6803      	ldr	r3, [r0, #0]
 801d364:	6a1b      	ldr	r3, [r3, #32]
 801d366:	4798      	blx	r3
 801d368:	23ff      	movs	r3, #255	; 0xff
 801d36a:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 801d36e:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 801d372:	6860      	ldr	r0, [r4, #4]
 801d374:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801d378:	6803      	ldr	r3, [r0, #0]
 801d37a:	a902      	add	r1, sp, #8
 801d37c:	685b      	ldr	r3, [r3, #4]
 801d37e:	4798      	blx	r3
 801d380:	4628      	mov	r0, r5
 801d382:	b00b      	add	sp, #44	; 0x2c
 801d384:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d386:	bf00      	nop
 801d388:	200127ee 	.word	0x200127ee

0801d38c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801d38c:	b570      	push	{r4, r5, r6, lr}
 801d38e:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801d392:	4604      	mov	r4, r0
 801d394:	b19b      	cbz	r3, 801d3be <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801d396:	2002      	movs	r0, #2
 801d398:	f7eb fba2 	bl	8008ae0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 801d39c:	2300      	movs	r3, #0
 801d39e:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801d3a2:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 801d3a6:	6823      	ldr	r3, [r4, #0]
 801d3a8:	4620      	mov	r0, r4
 801d3aa:	f8d3 50a0 	ldr.w	r5, [r3, #160]	; 0xa0
 801d3ae:	f7ff fd39 	bl	801ce24 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801d3b2:	462b      	mov	r3, r5
 801d3b4:	4601      	mov	r1, r0
 801d3b6:	4620      	mov	r0, r4
 801d3b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d3bc:	4718      	bx	r3
 801d3be:	bd70      	pop	{r4, r5, r6, pc}

0801d3c0 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 801d3c0:	4770      	bx	lr

0801d3c2 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801d3c2:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801d3c6:	1a13      	subs	r3, r2, r0
 801d3c8:	4258      	negs	r0, r3
 801d3ca:	4158      	adcs	r0, r3
 801d3cc:	4770      	bx	lr

0801d3ce <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801d3ce:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801d3d2:	1a9b      	subs	r3, r3, r2
 801d3d4:	2b00      	cmp	r3, #0
 801d3d6:	bfdc      	itt	le
 801d3d8:	6882      	ldrle	r2, [r0, #8]
 801d3da:	189b      	addle	r3, r3, r2
 801d3dc:	2b01      	cmp	r3, #1
 801d3de:	bfcc      	ite	gt
 801d3e0:	2000      	movgt	r0, #0
 801d3e2:	2001      	movle	r0, #1
 801d3e4:	4770      	bx	lr

0801d3e6 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801d3e6:	6902      	ldr	r2, [r0, #16]
 801d3e8:	6840      	ldr	r0, [r0, #4]
 801d3ea:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 801d3ee:	4770      	bx	lr

0801d3f0 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801d3f0:	6803      	ldr	r3, [r0, #0]
 801d3f2:	691b      	ldr	r3, [r3, #16]
 801d3f4:	4718      	bx	r3

0801d3f6 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801d3f6:	4770      	bx	lr

0801d3f8 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801d3f8:	4770      	bx	lr
	...

0801d3fc <_ZN8touchgfx13DMA_Interface7executeEv>:
 801d3fc:	b570      	push	{r4, r5, r6, lr}
 801d3fe:	2301      	movs	r3, #1
 801d400:	7203      	strb	r3, [r0, #8]
 801d402:	4604      	mov	r4, r0
 801d404:	6840      	ldr	r0, [r0, #4]
 801d406:	6803      	ldr	r3, [r0, #0]
 801d408:	699b      	ldr	r3, [r3, #24]
 801d40a:	4798      	blx	r3
 801d40c:	6803      	ldr	r3, [r0, #0]
 801d40e:	2b08      	cmp	r3, #8
 801d410:	4605      	mov	r5, r0
 801d412:	d01e      	beq.n	801d452 <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 801d414:	d80b      	bhi.n	801d42e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801d416:	2b02      	cmp	r3, #2
 801d418:	d027      	beq.n	801d46a <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 801d41a:	2b04      	cmp	r3, #4
 801d41c:	d011      	beq.n	801d442 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 801d41e:	2b01      	cmp	r3, #1
 801d420:	d028      	beq.n	801d474 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801d422:	4b17      	ldr	r3, [pc, #92]	; (801d480 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 801d424:	4a17      	ldr	r2, [pc, #92]	; (801d484 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 801d426:	4818      	ldr	r0, [pc, #96]	; (801d488 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 801d428:	218b      	movs	r1, #139	; 0x8b
 801d42a:	f010 ff55 	bl	802e2d8 <__assert_func>
 801d42e:	2b40      	cmp	r3, #64	; 0x40
 801d430:	d020      	beq.n	801d474 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801d432:	d801      	bhi.n	801d438 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 801d434:	2b20      	cmp	r3, #32
 801d436:	e7f3      	b.n	801d420 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 801d438:	2b80      	cmp	r3, #128	; 0x80
 801d43a:	d01b      	beq.n	801d474 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801d43c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d440:	e7ee      	b.n	801d420 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 801d442:	6823      	ldr	r3, [r4, #0]
 801d444:	7f01      	ldrb	r1, [r0, #28]
 801d446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d448:	4620      	mov	r0, r4
 801d44a:	4798      	blx	r3
 801d44c:	6823      	ldr	r3, [r4, #0]
 801d44e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d450:	e006      	b.n	801d460 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801d452:	6823      	ldr	r3, [r4, #0]
 801d454:	7f01      	ldrb	r1, [r0, #28]
 801d456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d458:	4620      	mov	r0, r4
 801d45a:	4798      	blx	r3
 801d45c:	6823      	ldr	r3, [r4, #0]
 801d45e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d460:	4629      	mov	r1, r5
 801d462:	4620      	mov	r0, r4
 801d464:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d468:	4718      	bx	r3
 801d46a:	6823      	ldr	r3, [r4, #0]
 801d46c:	4620      	mov	r0, r4
 801d46e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d470:	4798      	blx	r3
 801d472:	e7f3      	b.n	801d45c <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 801d474:	6823      	ldr	r3, [r4, #0]
 801d476:	4620      	mov	r0, r4
 801d478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d47a:	4798      	blx	r3
 801d47c:	e7e6      	b.n	801d44c <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 801d47e:	bf00      	nop
 801d480:	08032e1d 	.word	0x08032e1d
 801d484:	08032f2c 	.word	0x08032f2c
 801d488:	08032e42 	.word	0x08032e42

0801d48c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 801d48c:	b570      	push	{r4, r5, r6, lr}
 801d48e:	4604      	mov	r4, r0
 801d490:	460e      	mov	r6, r1
 801d492:	6860      	ldr	r0, [r4, #4]
 801d494:	6803      	ldr	r3, [r0, #0]
 801d496:	685b      	ldr	r3, [r3, #4]
 801d498:	4798      	blx	r3
 801d49a:	2800      	cmp	r0, #0
 801d49c:	d1f9      	bne.n	801d492 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801d49e:	4d0b      	ldr	r5, [pc, #44]	; (801d4cc <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 801d4a0:	6828      	ldr	r0, [r5, #0]
 801d4a2:	6803      	ldr	r3, [r0, #0]
 801d4a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801d4a6:	4798      	blx	r3
 801d4a8:	f7eb fe48 	bl	800913c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801d4ac:	6860      	ldr	r0, [r4, #4]
 801d4ae:	6803      	ldr	r3, [r0, #0]
 801d4b0:	4631      	mov	r1, r6
 801d4b2:	689b      	ldr	r3, [r3, #8]
 801d4b4:	4798      	blx	r3
 801d4b6:	6823      	ldr	r3, [r4, #0]
 801d4b8:	4620      	mov	r0, r4
 801d4ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d4bc:	4798      	blx	r3
 801d4be:	6828      	ldr	r0, [r5, #0]
 801d4c0:	6803      	ldr	r3, [r0, #0]
 801d4c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d4c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801d4c8:	4718      	bx	r3
 801d4ca:	bf00      	nop
 801d4cc:	200127f4 	.word	0x200127f4

0801d4d0 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 801d4d0:	b508      	push	{r3, lr}
 801d4d2:	f7eb fdf9 	bl	80090c8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801d4d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801d4da:	f7eb be13 	b.w	8009104 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801d4de <_ZN8touchgfx13DMA_Interface5startEv>:
 801d4de:	b510      	push	{r4, lr}
 801d4e0:	4604      	mov	r4, r0
 801d4e2:	6840      	ldr	r0, [r0, #4]
 801d4e4:	6803      	ldr	r3, [r0, #0]
 801d4e6:	681b      	ldr	r3, [r3, #0]
 801d4e8:	4798      	blx	r3
 801d4ea:	b948      	cbnz	r0, 801d500 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801d4ec:	7a63      	ldrb	r3, [r4, #9]
 801d4ee:	b13b      	cbz	r3, 801d500 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801d4f0:	7a23      	ldrb	r3, [r4, #8]
 801d4f2:	b92b      	cbnz	r3, 801d500 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801d4f4:	6823      	ldr	r3, [r4, #0]
 801d4f6:	4620      	mov	r0, r4
 801d4f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d4fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d4fe:	4718      	bx	r3
 801d500:	bd10      	pop	{r4, pc}
	...

0801d504 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801d504:	b510      	push	{r4, lr}
 801d506:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 801d50a:	1b12      	subs	r2, r2, r4
 801d50c:	2a00      	cmp	r2, #0
 801d50e:	bfdc      	itt	le
 801d510:	6883      	ldrle	r3, [r0, #8]
 801d512:	18d2      	addle	r2, r2, r3
 801d514:	2a01      	cmp	r2, #1
 801d516:	dd18      	ble.n	801d54a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 801d518:	6843      	ldr	r3, [r0, #4]
 801d51a:	f101 021c 	add.w	r2, r1, #28
 801d51e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 801d522:	f851 4b04 	ldr.w	r4, [r1], #4
 801d526:	f843 4b04 	str.w	r4, [r3], #4
 801d52a:	4291      	cmp	r1, r2
 801d52c:	d1f9      	bne.n	801d522 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 801d52e:	880a      	ldrh	r2, [r1, #0]
 801d530:	801a      	strh	r2, [r3, #0]
 801d532:	788a      	ldrb	r2, [r1, #2]
 801d534:	709a      	strb	r2, [r3, #2]
 801d536:	68c3      	ldr	r3, [r0, #12]
 801d538:	6882      	ldr	r2, [r0, #8]
 801d53a:	f3bf 8f5b 	dmb	ish
 801d53e:	3301      	adds	r3, #1
 801d540:	429a      	cmp	r2, r3
 801d542:	bfd8      	it	le
 801d544:	1a9b      	suble	r3, r3, r2
 801d546:	60c3      	str	r3, [r0, #12]
 801d548:	bd10      	pop	{r4, pc}
 801d54a:	4b03      	ldr	r3, [pc, #12]	; (801d558 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 801d54c:	4a03      	ldr	r2, [pc, #12]	; (801d55c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 801d54e:	4804      	ldr	r0, [pc, #16]	; (801d560 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 801d550:	2139      	movs	r1, #57	; 0x39
 801d552:	f010 fec1 	bl	802e2d8 <__assert_func>
 801d556:	bf00      	nop
 801d558:	08032e68 	.word	0x08032e68
 801d55c:	08032f5c 	.word	0x08032f5c
 801d560:	08032e42 	.word	0x08032e42

0801d564 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 801d564:	b510      	push	{r4, lr}
 801d566:	6803      	ldr	r3, [r0, #0]
 801d568:	681b      	ldr	r3, [r3, #0]
 801d56a:	4604      	mov	r4, r0
 801d56c:	4798      	blx	r3
 801d56e:	b128      	cbz	r0, 801d57c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 801d570:	4b07      	ldr	r3, [pc, #28]	; (801d590 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 801d572:	4a08      	ldr	r2, [pc, #32]	; (801d594 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 801d574:	4808      	ldr	r0, [pc, #32]	; (801d598 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 801d576:	213f      	movs	r1, #63	; 0x3f
 801d578:	f010 feae 	bl	802e2d8 <__assert_func>
 801d57c:	6923      	ldr	r3, [r4, #16]
 801d57e:	68a2      	ldr	r2, [r4, #8]
 801d580:	f3bf 8f5b 	dmb	ish
 801d584:	3301      	adds	r3, #1
 801d586:	429a      	cmp	r2, r3
 801d588:	bfd8      	it	le
 801d58a:	1a9b      	suble	r3, r3, r2
 801d58c:	6123      	str	r3, [r4, #16]
 801d58e:	bd10      	pop	{r4, pc}
 801d590:	08032e8b 	.word	0x08032e8b
 801d594:	08032faa 	.word	0x08032faa
 801d598:	08032e42 	.word	0x08032e42

0801d59c <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801d59c:	b570      	push	{r4, r5, r6, lr}
 801d59e:	4604      	mov	r4, r0
 801d5a0:	6840      	ldr	r0, [r0, #4]
 801d5a2:	6803      	ldr	r3, [r0, #0]
 801d5a4:	681b      	ldr	r3, [r3, #0]
 801d5a6:	4798      	blx	r3
 801d5a8:	4605      	mov	r5, r0
 801d5aa:	b930      	cbnz	r0, 801d5ba <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801d5ac:	7a23      	ldrb	r3, [r4, #8]
 801d5ae:	b123      	cbz	r3, 801d5ba <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801d5b0:	6860      	ldr	r0, [r4, #4]
 801d5b2:	6803      	ldr	r3, [r0, #0]
 801d5b4:	695b      	ldr	r3, [r3, #20]
 801d5b6:	4798      	blx	r3
 801d5b8:	7225      	strb	r5, [r4, #8]
 801d5ba:	6860      	ldr	r0, [r4, #4]
 801d5bc:	6803      	ldr	r3, [r0, #0]
 801d5be:	681b      	ldr	r3, [r3, #0]
 801d5c0:	4798      	blx	r3
 801d5c2:	b928      	cbnz	r0, 801d5d0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 801d5c4:	6823      	ldr	r3, [r4, #0]
 801d5c6:	4620      	mov	r0, r4
 801d5c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d5ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d5ce:	4718      	bx	r3
 801d5d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d5d4:	f7eb bdce 	b.w	8009174 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0801d5d8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 801d5d8:	b510      	push	{r4, lr}
 801d5da:	4c04      	ldr	r4, [pc, #16]	; (801d5ec <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 801d5dc:	6082      	str	r2, [r0, #8]
 801d5de:	2200      	movs	r2, #0
 801d5e0:	e9c0 4100 	strd	r4, r1, [r0]
 801d5e4:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801d5e8:	bd10      	pop	{r4, pc}
 801d5ea:	bf00      	nop
 801d5ec:	08032f10 	.word	0x08032f10

0801d5f0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801d5f0:	6840      	ldr	r0, [r0, #4]
 801d5f2:	6803      	ldr	r3, [r0, #0]
 801d5f4:	681b      	ldr	r3, [r3, #0]
 801d5f6:	4718      	bx	r3

0801d5f8 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 801d5f8:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 801d5fc:	4770      	bx	lr

0801d5fe <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 801d5fe:	b570      	push	{r4, r5, r6, lr}
 801d600:	790b      	ldrb	r3, [r1, #4]
 801d602:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 801d606:	2b00      	cmp	r3, #0
 801d608:	bf0c      	ite	eq
 801d60a:	2301      	moveq	r3, #1
 801d60c:	2300      	movne	r3, #0
 801d60e:	4604      	mov	r4, r0
 801d610:	460e      	mov	r6, r1
 801d612:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801d616:	d110      	bne.n	801d63a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801d618:	b185      	cbz	r5, 801d63c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3e>
 801d61a:	7933      	ldrb	r3, [r6, #4]
 801d61c:	2b01      	cmp	r3, #1
 801d61e:	d113      	bne.n	801d648 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801d620:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801d622:	b188      	cbz	r0, 801d648 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801d624:	6803      	ldr	r3, [r0, #0]
 801d626:	68db      	ldr	r3, [r3, #12]
 801d628:	4798      	blx	r3
 801d62a:	b168      	cbz	r0, 801d648 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801d62c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801d62e:	6803      	ldr	r3, [r0, #0]
 801d630:	4621      	mov	r1, r4
 801d632:	689b      	ldr	r3, [r3, #8]
 801d634:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d638:	4718      	bx	r3
 801d63a:	b12d      	cbz	r5, 801d648 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801d63c:	6823      	ldr	r3, [r4, #0]
 801d63e:	4620      	mov	r0, r4
 801d640:	695b      	ldr	r3, [r3, #20]
 801d642:	4798      	blx	r3
 801d644:	2d00      	cmp	r5, #0
 801d646:	d1e8      	bne.n	801d61a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 801d648:	bd70      	pop	{r4, r5, r6, pc}

0801d64a <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE>:
 801d64a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801d64e:	b133      	cbz	r3, 801d65e <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x14>
 801d650:	790b      	ldrb	r3, [r1, #4]
 801d652:	2b01      	cmp	r3, #1
 801d654:	bf01      	itttt	eq
 801d656:	8dc3      	ldrheq	r3, [r0, #46]	; 0x2e
 801d658:	8e02      	ldrheq	r2, [r0, #48]	; 0x30
 801d65a:	85c2      	strheq	r2, [r0, #46]	; 0x2e
 801d65c:	8603      	strheq	r3, [r0, #48]	; 0x30
 801d65e:	f7ff bfce 	b.w	801d5fe <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>

0801d662 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:
 801d662:	6803      	ldr	r3, [r0, #0]
 801d664:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 801d668:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801d66a:	4718      	bx	r3

0801d66c <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:
 801d66c:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801d670:	2bff      	cmp	r3, #255	; 0xff
 801d672:	b510      	push	{r4, lr}
 801d674:	d104      	bne.n	801d680 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x14>
 801d676:	8cca      	ldrh	r2, [r1, #38]	; 0x26
 801d678:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d67c:	429a      	cmp	r2, r3
 801d67e:	d105      	bne.n	801d68c <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
 801d680:	2300      	movs	r3, #0
 801d682:	8003      	strh	r3, [r0, #0]
 801d684:	8043      	strh	r3, [r0, #2]
 801d686:	8083      	strh	r3, [r0, #4]
 801d688:	80c3      	strh	r3, [r0, #6]
 801d68a:	bd10      	pop	{r4, pc}
 801d68c:	2300      	movs	r3, #0
 801d68e:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 801d692:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 801d696:	8003      	strh	r3, [r0, #0]
 801d698:	8043      	strh	r3, [r0, #2]
 801d69a:	8084      	strh	r4, [r0, #4]
 801d69c:	80c2      	strh	r2, [r0, #6]
 801d69e:	e7f4      	b.n	801d68a <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x1e>

0801d6a0 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:
 801d6a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d6a4:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 801d6a8:	b087      	sub	sp, #28
 801d6aa:	4604      	mov	r4, r0
 801d6ac:	4689      	mov	r9, r1
 801d6ae:	b363      	cbz	r3, 801d70a <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 801d6b0:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801d6b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d6b6:	429a      	cmp	r2, r3
 801d6b8:	d027      	beq.n	801d70a <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 801d6ba:	ad06      	add	r5, sp, #24
 801d6bc:	2700      	movs	r7, #0
 801d6be:	f825 2d0c 	strh.w	r2, [r5, #-12]!
 801d6c2:	4628      	mov	r0, r5
 801d6c4:	f004 f8c0 	bl	8021848 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d6c8:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801d6cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d6d0:	6823      	ldr	r3, [r4, #0]
 801d6d2:	f8ad 0014 	strh.w	r0, [sp, #20]
 801d6d6:	a904      	add	r1, sp, #16
 801d6d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d6da:	9704      	str	r7, [sp, #16]
 801d6dc:	4620      	mov	r0, r4
 801d6de:	4798      	blx	r3
 801d6e0:	f7eb fa3e 	bl	8008b60 <_ZN8touchgfx3HAL3lcdEv>
 801d6e4:	6803      	ldr	r3, [r0, #0]
 801d6e6:	4606      	mov	r6, r0
 801d6e8:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801d6ec:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801d6ee:	f8ad 300c 	strh.w	r3, [sp, #12]
 801d6f2:	4628      	mov	r0, r5
 801d6f4:	f004 f9b0 	bl	8021a58 <_ZNK8touchgfx6Bitmap7getDataEv>
 801d6f8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801d6fc:	9300      	str	r3, [sp, #0]
 801d6fe:	4601      	mov	r1, r0
 801d700:	9701      	str	r7, [sp, #4]
 801d702:	464b      	mov	r3, r9
 801d704:	aa04      	add	r2, sp, #16
 801d706:	4630      	mov	r0, r6
 801d708:	47c0      	blx	r8
 801d70a:	b007      	add	sp, #28
 801d70c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801d710 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:
 801d710:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801d712:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801d716:	f8ad 3006 	strh.w	r3, [sp, #6]
 801d71a:	6803      	ldr	r3, [r0, #0]
 801d71c:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801d720:	f8ad 2004 	strh.w	r2, [sp, #4]
 801d724:	460d      	mov	r5, r1
 801d726:	2100      	movs	r1, #0
 801d728:	4604      	mov	r4, r0
 801d72a:	6a1b      	ldr	r3, [r3, #32]
 801d72c:	9100      	str	r1, [sp, #0]
 801d72e:	4669      	mov	r1, sp
 801d730:	4798      	blx	r3
 801d732:	4621      	mov	r1, r4
 801d734:	a802      	add	r0, sp, #8
 801d736:	f002 fa87 	bl	801fc48 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d73a:	f7eb fa11 	bl	8008b60 <_ZN8touchgfx3HAL3lcdEv>
 801d73e:	6803      	ldr	r3, [r0, #0]
 801d740:	aa02      	add	r2, sp, #8
 801d742:	695e      	ldr	r6, [r3, #20]
 801d744:	4669      	mov	r1, sp
 801d746:	462b      	mov	r3, r5
 801d748:	47b0      	blx	r6
 801d74a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d74e:	2800      	cmp	r0, #0
 801d750:	bf08      	it	eq
 801d752:	461d      	moveq	r5, r3
 801d754:	84e5      	strh	r5, [r4, #38]	; 0x26
 801d756:	b004      	add	sp, #16
 801d758:	bd70      	pop	{r4, r5, r6, pc}
	...

0801d75c <_ZN8touchgfx14SnapshotWidgetC1Ev>:
 801d75c:	2200      	movs	r2, #0
 801d75e:	8082      	strh	r2, [r0, #4]
 801d760:	80c2      	strh	r2, [r0, #6]
 801d762:	8102      	strh	r2, [r0, #8]
 801d764:	8142      	strh	r2, [r0, #10]
 801d766:	8182      	strh	r2, [r0, #12]
 801d768:	81c2      	strh	r2, [r0, #14]
 801d76a:	8202      	strh	r2, [r0, #16]
 801d76c:	8242      	strh	r2, [r0, #18]
 801d76e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801d772:	61c2      	str	r2, [r0, #28]
 801d774:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 801d778:	2201      	movs	r2, #1
 801d77a:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 801d77e:	4a04      	ldr	r2, [pc, #16]	; (801d790 <_ZN8touchgfx14SnapshotWidgetC1Ev+0x34>)
 801d780:	6002      	str	r2, [r0, #0]
 801d782:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d786:	84c2      	strh	r2, [r0, #38]	; 0x26
 801d788:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801d78c:	4770      	bx	lr
 801d78e:	bf00      	nop
 801d790:	080330c0 	.word	0x080330c0

0801d794 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 801d794:	2200      	movs	r2, #0
 801d796:	8002      	strh	r2, [r0, #0]
 801d798:	8042      	strh	r2, [r0, #2]
 801d79a:	8082      	strh	r2, [r0, #4]
 801d79c:	80c2      	strh	r2, [r0, #6]
 801d79e:	4770      	bx	lr

0801d7a0 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 801d7a0:	b570      	push	{r4, r5, r6, lr}
 801d7a2:	6803      	ldr	r3, [r0, #0]
 801d7a4:	4604      	mov	r4, r0
 801d7a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d7a8:	4615      	mov	r5, r2
 801d7aa:	4798      	blx	r3
 801d7ac:	6823      	ldr	r3, [r4, #0]
 801d7ae:	4629      	mov	r1, r5
 801d7b0:	4620      	mov	r0, r4
 801d7b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801d7b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d7b8:	4718      	bx	r3
	...

0801d7bc <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 801d7bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d7be:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801d7c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d7c4:	4299      	cmp	r1, r3
 801d7c6:	d029      	beq.n	801d81c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 801d7c8:	4b15      	ldr	r3, [pc, #84]	; (801d820 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 801d7ca:	681b      	ldr	r3, [r3, #0]
 801d7cc:	b92b      	cbnz	r3, 801d7da <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 801d7ce:	4b15      	ldr	r3, [pc, #84]	; (801d824 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 801d7d0:	4a15      	ldr	r2, [pc, #84]	; (801d828 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 801d7d2:	21b1      	movs	r1, #177	; 0xb1
 801d7d4:	4815      	ldr	r0, [pc, #84]	; (801d82c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 801d7d6:	f010 fd7f 	bl	802e2d8 <__assert_func>
 801d7da:	4a15      	ldr	r2, [pc, #84]	; (801d830 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 801d7dc:	8812      	ldrh	r2, [r2, #0]
 801d7de:	428a      	cmp	r2, r1
 801d7e0:	d803      	bhi.n	801d7ea <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 801d7e2:	4b14      	ldr	r3, [pc, #80]	; (801d834 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 801d7e4:	4a10      	ldr	r2, [pc, #64]	; (801d828 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 801d7e6:	21b2      	movs	r1, #178	; 0xb2
 801d7e8:	e7f4      	b.n	801d7d4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 801d7ea:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 801d7ee:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 801d7f2:	4b11      	ldr	r3, [pc, #68]	; (801d838 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 801d7f4:	7854      	ldrb	r4, [r2, #1]
 801d7f6:	681b      	ldr	r3, [r3, #0]
 801d7f8:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 801d7fc:	682b      	ldr	r3, [r5, #0]
 801d7fe:	69de      	ldr	r6, [r3, #28]
 801d800:	4b0e      	ldr	r3, [pc, #56]	; (801d83c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 801d802:	6818      	ldr	r0, [r3, #0]
 801d804:	f7f1 f9d2 	bl	800ebac <_ZNK8touchgfx5Texts7getTextEt>
 801d808:	f3c4 0481 	ubfx	r4, r4, #2, #2
 801d80c:	2300      	movs	r3, #0
 801d80e:	4602      	mov	r2, r0
 801d810:	9300      	str	r3, [sp, #0]
 801d812:	4621      	mov	r1, r4
 801d814:	4628      	mov	r0, r5
 801d816:	47b0      	blx	r6
 801d818:	b002      	add	sp, #8
 801d81a:	bd70      	pop	{r4, r5, r6, pc}
 801d81c:	2000      	movs	r0, #0
 801d81e:	e7fb      	b.n	801d818 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 801d820:	20012864 	.word	0x20012864
 801d824:	08033128 	.word	0x08033128
 801d828:	08033264 	.word	0x08033264
 801d82c:	0803316a 	.word	0x0803316a
 801d830:	20012868 	.word	0x20012868
 801d834:	08033193 	.word	0x08033193
 801d838:	2001286c 	.word	0x2001286c
 801d83c:	20012870 	.word	0x20012870

0801d840 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 801d840:	b570      	push	{r4, r5, r6, lr}
 801d842:	6803      	ldr	r3, [r0, #0]
 801d844:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801d846:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 801d848:	4b11      	ldr	r3, [pc, #68]	; (801d890 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 801d84a:	681b      	ldr	r3, [r3, #0]
 801d84c:	4604      	mov	r4, r0
 801d84e:	b28d      	uxth	r5, r1
 801d850:	b92b      	cbnz	r3, 801d85e <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 801d852:	4b10      	ldr	r3, [pc, #64]	; (801d894 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 801d854:	4a10      	ldr	r2, [pc, #64]	; (801d898 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 801d856:	21b1      	movs	r1, #177	; 0xb1
 801d858:	4810      	ldr	r0, [pc, #64]	; (801d89c <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 801d85a:	f010 fd3d 	bl	802e2d8 <__assert_func>
 801d85e:	4910      	ldr	r1, [pc, #64]	; (801d8a0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 801d860:	8809      	ldrh	r1, [r1, #0]
 801d862:	4291      	cmp	r1, r2
 801d864:	d803      	bhi.n	801d86e <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 801d866:	4b0f      	ldr	r3, [pc, #60]	; (801d8a4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 801d868:	4a0b      	ldr	r2, [pc, #44]	; (801d898 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 801d86a:	21b2      	movs	r1, #178	; 0xb2
 801d86c:	e7f4      	b.n	801d858 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 801d86e:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 801d872:	4b0d      	ldr	r3, [pc, #52]	; (801d8a8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 801d874:	681b      	ldr	r3, [r3, #0]
 801d876:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801d87a:	6803      	ldr	r3, [r0, #0]
 801d87c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d87e:	4798      	blx	r3
 801d880:	1a29      	subs	r1, r5, r0
 801d882:	4633      	mov	r3, r6
 801d884:	4620      	mov	r0, r4
 801d886:	b209      	sxth	r1, r1
 801d888:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d88c:	4718      	bx	r3
 801d88e:	bf00      	nop
 801d890:	20012864 	.word	0x20012864
 801d894:	08033128 	.word	0x08033128
 801d898:	08033264 	.word	0x08033264
 801d89c:	0803316a 	.word	0x0803316a
 801d8a0:	20012868 	.word	0x20012868
 801d8a4:	08033193 	.word	0x08033193
 801d8a8:	2001286c 	.word	0x2001286c

0801d8ac <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 801d8ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d8b0:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801d8b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d8b6:	4293      	cmp	r3, r2
 801d8b8:	b08c      	sub	sp, #48	; 0x30
 801d8ba:	4604      	mov	r4, r0
 801d8bc:	4688      	mov	r8, r1
 801d8be:	d05f      	beq.n	801d980 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 801d8c0:	4e31      	ldr	r6, [pc, #196]	; (801d988 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 801d8c2:	6832      	ldr	r2, [r6, #0]
 801d8c4:	b92a      	cbnz	r2, 801d8d2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 801d8c6:	4b31      	ldr	r3, [pc, #196]	; (801d98c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 801d8c8:	4a31      	ldr	r2, [pc, #196]	; (801d990 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 801d8ca:	21b1      	movs	r1, #177	; 0xb1
 801d8cc:	4831      	ldr	r0, [pc, #196]	; (801d994 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 801d8ce:	f010 fd03 	bl	802e2d8 <__assert_func>
 801d8d2:	4d31      	ldr	r5, [pc, #196]	; (801d998 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 801d8d4:	8829      	ldrh	r1, [r5, #0]
 801d8d6:	4299      	cmp	r1, r3
 801d8d8:	d803      	bhi.n	801d8e2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 801d8da:	4b30      	ldr	r3, [pc, #192]	; (801d99c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 801d8dc:	4a2c      	ldr	r2, [pc, #176]	; (801d990 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 801d8de:	21b2      	movs	r1, #178	; 0xb2
 801d8e0:	e7f4      	b.n	801d8cc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 801d8e2:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801d8e6:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801d8ea:	4b2d      	ldr	r3, [pc, #180]	; (801d9a0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 801d8ec:	681b      	ldr	r3, [r3, #0]
 801d8ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801d8f2:	2a00      	cmp	r2, #0
 801d8f4:	d044      	beq.n	801d980 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 801d8f6:	784b      	ldrb	r3, [r1, #1]
 801d8f8:	9207      	str	r2, [sp, #28]
 801d8fa:	f3c3 0901 	ubfx	r9, r3, #0, #2
 801d8fe:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801d902:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 801d906:	4b27      	ldr	r3, [pc, #156]	; (801d9a4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 801d908:	f890 a036 	ldrb.w	sl, [r0, #54]	; 0x36
 801d90c:	681b      	ldr	r3, [r3, #0]
 801d90e:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 801d912:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801d916:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 801d91a:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 801d91e:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 801d922:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801d924:	9009      	str	r0, [sp, #36]	; 0x24
 801d926:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 801d92a:	f88d 9020 	strb.w	r9, [sp, #32]
 801d92e:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 801d932:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 801d936:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 801d93a:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 801d93e:	b10a      	cbz	r2, 801d944 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 801d940:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 801d942:	b907      	cbnz	r7, 801d946 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 801d944:	689f      	ldr	r7, [r3, #8]
 801d946:	f10d 0914 	add.w	r9, sp, #20
 801d94a:	4621      	mov	r1, r4
 801d94c:	4648      	mov	r0, r9
 801d94e:	f002 f97b 	bl	801fc48 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d952:	6833      	ldr	r3, [r6, #0]
 801d954:	2b00      	cmp	r3, #0
 801d956:	d0b6      	beq.n	801d8c6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 801d958:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801d95a:	882b      	ldrh	r3, [r5, #0]
 801d95c:	428b      	cmp	r3, r1
 801d95e:	d9bc      	bls.n	801d8da <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 801d960:	4b11      	ldr	r3, [pc, #68]	; (801d9a8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 801d962:	6818      	ldr	r0, [r3, #0]
 801d964:	f7f1 f922 	bl	800ebac <_ZNK8touchgfx5Texts7getTextEt>
 801d968:	2300      	movs	r3, #0
 801d96a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801d96e:	ab07      	add	r3, sp, #28
 801d970:	9001      	str	r0, [sp, #4]
 801d972:	9300      	str	r3, [sp, #0]
 801d974:	e899 0006 	ldmia.w	r9, {r1, r2}
 801d978:	4643      	mov	r3, r8
 801d97a:	4638      	mov	r0, r7
 801d97c:	f7f1 f8a7 	bl	800eace <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801d980:	b00c      	add	sp, #48	; 0x30
 801d982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d986:	bf00      	nop
 801d988:	20012864 	.word	0x20012864
 801d98c:	08033128 	.word	0x08033128
 801d990:	08033264 	.word	0x08033264
 801d994:	0803316a 	.word	0x0803316a
 801d998:	20012868 	.word	0x20012868
 801d99c:	08033193 	.word	0x08033193
 801d9a0:	2001286c 	.word	0x2001286c
 801d9a4:	200127f4 	.word	0x200127f4
 801d9a8:	20012870 	.word	0x20012870

0801d9ac <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 801d9ac:	b40e      	push	{r1, r2, r3}
 801d9ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d9b2:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801d9b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d9b8:	4293      	cmp	r3, r2
 801d9ba:	b09b      	sub	sp, #108	; 0x6c
 801d9bc:	4604      	mov	r4, r0
 801d9be:	d061      	beq.n	801da84 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd8>
 801d9c0:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801da98 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 801d9c4:	aa24      	add	r2, sp, #144	; 0x90
 801d9c6:	9203      	str	r2, [sp, #12]
 801d9c8:	f8da 2000 	ldr.w	r2, [sl]
 801d9cc:	b92a      	cbnz	r2, 801d9da <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 801d9ce:	4b2e      	ldr	r3, [pc, #184]	; (801da88 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>)
 801d9d0:	4a2e      	ldr	r2, [pc, #184]	; (801da8c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
 801d9d2:	21b1      	movs	r1, #177	; 0xb1
 801d9d4:	482e      	ldr	r0, [pc, #184]	; (801da90 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe4>)
 801d9d6:	f010 fc7f 	bl	802e2d8 <__assert_func>
 801d9da:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 801da9c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>
 801d9de:	f8b8 1000 	ldrh.w	r1, [r8]
 801d9e2:	4299      	cmp	r1, r3
 801d9e4:	d803      	bhi.n	801d9ee <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 801d9e6:	4b2b      	ldr	r3, [pc, #172]	; (801da94 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>)
 801d9e8:	4a28      	ldr	r2, [pc, #160]	; (801da8c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
 801d9ea:	21b2      	movs	r1, #178	; 0xb2
 801d9ec:	e7f2      	b.n	801d9d4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 801d9ee:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 801daa0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>
 801d9f2:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801d9f6:	f8d9 3000 	ldr.w	r3, [r9]
 801d9fa:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801d9fe:	683b      	ldr	r3, [r7, #0]
 801da00:	4638      	mov	r0, r7
 801da02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801da04:	4798      	blx	r3
 801da06:	4606      	mov	r6, r0
 801da08:	b205      	sxth	r5, r0
 801da0a:	a804      	add	r0, sp, #16
 801da0c:	f002 fd4f 	bl	80204ae <_ZN8touchgfx12TextProviderC1Ev>
 801da10:	683b      	ldr	r3, [r7, #0]
 801da12:	4638      	mov	r0, r7
 801da14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801da16:	4798      	blx	r3
 801da18:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801da1a:	9a03      	ldr	r2, [sp, #12]
 801da1c:	4603      	mov	r3, r0
 801da1e:	a804      	add	r0, sp, #16
 801da20:	f002 fd8a 	bl	8020538 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801da24:	f8da 3000 	ldr.w	r3, [sl]
 801da28:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 801da2c:	2b00      	cmp	r3, #0
 801da2e:	d0ce      	beq.n	801d9ce <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 801da30:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801da32:	f8b8 0000 	ldrh.w	r0, [r8]
 801da36:	4290      	cmp	r0, r2
 801da38:	d9d5      	bls.n	801d9e6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 801da3a:	eb03 0742 	add.w	r7, r3, r2, lsl #1
 801da3e:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 801da42:	787a      	ldrb	r2, [r7, #1]
 801da44:	f8d9 3000 	ldr.w	r3, [r9]
 801da48:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
 801da4c:	9700      	str	r7, [sp, #0]
 801da4e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801da52:	f3c2 0281 	ubfx	r2, r2, #2, #2
 801da56:	a804      	add	r0, sp, #16
 801da58:	f000 ff70 	bl	801e93c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 801da5c:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 801da60:	18a9      	adds	r1, r5, r2
 801da62:	2900      	cmp	r1, #0
 801da64:	b203      	sxth	r3, r0
 801da66:	dd0b      	ble.n	801da80 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd4>
 801da68:	3b01      	subs	r3, #1
 801da6a:	fb13 f302 	smulbb	r3, r3, r2
 801da6e:	fb16 3300 	smlabb	r3, r6, r0, r3
 801da72:	b21d      	sxth	r5, r3
 801da74:	4628      	mov	r0, r5
 801da76:	b01b      	add	sp, #108	; 0x6c
 801da78:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801da7c:	b003      	add	sp, #12
 801da7e:	4770      	bx	lr
 801da80:	2b00      	cmp	r3, #0
 801da82:	dcf7      	bgt.n	801da74 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 801da84:	2500      	movs	r5, #0
 801da86:	e7f5      	b.n	801da74 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 801da88:	08033128 	.word	0x08033128
 801da8c:	08033264 	.word	0x08033264
 801da90:	0803316a 	.word	0x0803316a
 801da94:	08033193 	.word	0x08033193
 801da98:	20012864 	.word	0x20012864
 801da9c:	20012868 	.word	0x20012868
 801daa0:	2001286c 	.word	0x2001286c

0801daa4 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 801daa4:	b570      	push	{r4, r5, r6, lr}
 801daa6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801daa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801daac:	4299      	cmp	r1, r3
 801daae:	4604      	mov	r4, r0
 801dab0:	d01e      	beq.n	801daf0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 801dab2:	6803      	ldr	r3, [r0, #0]
 801dab4:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 801dab6:	4b0f      	ldr	r3, [pc, #60]	; (801daf4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 801dab8:	681b      	ldr	r3, [r3, #0]
 801daba:	b92b      	cbnz	r3, 801dac8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 801dabc:	4b0e      	ldr	r3, [pc, #56]	; (801daf8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 801dabe:	4a0f      	ldr	r2, [pc, #60]	; (801dafc <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 801dac0:	21b1      	movs	r1, #177	; 0xb1
 801dac2:	480f      	ldr	r0, [pc, #60]	; (801db00 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 801dac4:	f010 fc08 	bl	802e2d8 <__assert_func>
 801dac8:	4b0e      	ldr	r3, [pc, #56]	; (801db04 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 801daca:	881b      	ldrh	r3, [r3, #0]
 801dacc:	428b      	cmp	r3, r1
 801dace:	d803      	bhi.n	801dad8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 801dad0:	4b0d      	ldr	r3, [pc, #52]	; (801db08 <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 801dad2:	4a0a      	ldr	r2, [pc, #40]	; (801dafc <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 801dad4:	21b2      	movs	r1, #178	; 0xb2
 801dad6:	e7f4      	b.n	801dac2 <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 801dad8:	4b0c      	ldr	r3, [pc, #48]	; (801db0c <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 801dada:	6818      	ldr	r0, [r3, #0]
 801dadc:	f7f1 f866 	bl	800ebac <_ZNK8touchgfx5Texts7getTextEt>
 801dae0:	2300      	movs	r3, #0
 801dae2:	4601      	mov	r1, r0
 801dae4:	46ac      	mov	ip, r5
 801dae6:	4620      	mov	r0, r4
 801dae8:	461a      	mov	r2, r3
 801daea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801daee:	4760      	bx	ip
 801daf0:	2000      	movs	r0, #0
 801daf2:	bd70      	pop	{r4, r5, r6, pc}
 801daf4:	20012864 	.word	0x20012864
 801daf8:	08033128 	.word	0x08033128
 801dafc:	08033264 	.word	0x08033264
 801db00:	0803316a 	.word	0x0803316a
 801db04:	20012868 	.word	0x20012868
 801db08:	08033193 	.word	0x08033193
 801db0c:	20012870 	.word	0x20012870

0801db10 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 801db10:	b570      	push	{r4, r5, r6, lr}
 801db12:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801db14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801db18:	429a      	cmp	r2, r3
 801db1a:	4604      	mov	r4, r0
 801db1c:	d021      	beq.n	801db62 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 801db1e:	6803      	ldr	r3, [r0, #0]
 801db20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801db22:	4798      	blx	r3
 801db24:	6823      	ldr	r3, [r4, #0]
 801db26:	4605      	mov	r5, r0
 801db28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801db2a:	4620      	mov	r0, r4
 801db2c:	4798      	blx	r3
 801db2e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801db32:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801db36:	6823      	ldr	r3, [r4, #0]
 801db38:	4606      	mov	r6, r0
 801db3a:	b22d      	sxth	r5, r5
 801db3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801db3e:	d109      	bne.n	801db54 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 801db40:	4629      	mov	r1, r5
 801db42:	4620      	mov	r0, r4
 801db44:	4798      	blx	r3
 801db46:	6823      	ldr	r3, [r4, #0]
 801db48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801db4a:	4631      	mov	r1, r6
 801db4c:	4620      	mov	r0, r4
 801db4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801db52:	4718      	bx	r3
 801db54:	4601      	mov	r1, r0
 801db56:	4620      	mov	r0, r4
 801db58:	4798      	blx	r3
 801db5a:	6823      	ldr	r3, [r4, #0]
 801db5c:	4629      	mov	r1, r5
 801db5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801db60:	e7f4      	b.n	801db4c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 801db62:	bd70      	pop	{r4, r5, r6, pc}

0801db64 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 801db64:	888a      	ldrh	r2, [r1, #4]
 801db66:	8582      	strh	r2, [r0, #44]	; 0x2c
 801db68:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801db6c:	b922      	cbnz	r2, 801db78 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
 801db6e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801db72:	b90b      	cbnz	r3, 801db78 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
 801db74:	f7ff bfcc 	b.w	801db10 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801db78:	4770      	bx	lr

0801db7a <_ZNK8touchgfx3Box12getSolidRectEv>:
 801db7a:	2300      	movs	r3, #0
 801db7c:	8003      	strh	r3, [r0, #0]
 801db7e:	8043      	strh	r3, [r0, #2]
 801db80:	8083      	strh	r3, [r0, #4]
 801db82:	80c3      	strh	r3, [r0, #6]
 801db84:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801db88:	b91b      	cbnz	r3, 801db92 <_ZNK8touchgfx3Box12getSolidRectEv+0x18>
 801db8a:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801db8e:	2bff      	cmp	r3, #255	; 0xff
 801db90:	d103      	bne.n	801db9a <_ZNK8touchgfx3Box12getSolidRectEv+0x20>
 801db92:	890b      	ldrh	r3, [r1, #8]
 801db94:	8083      	strh	r3, [r0, #4]
 801db96:	894b      	ldrh	r3, [r1, #10]
 801db98:	80c3      	strh	r3, [r0, #6]
 801db9a:	4770      	bx	lr

0801db9c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801db9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801db9e:	4604      	mov	r4, r0
 801dba0:	6808      	ldr	r0, [r1, #0]
 801dba2:	6849      	ldr	r1, [r1, #4]
 801dba4:	466b      	mov	r3, sp
 801dba6:	c303      	stmia	r3!, {r0, r1}
 801dba8:	6823      	ldr	r3, [r4, #0]
 801dbaa:	4669      	mov	r1, sp
 801dbac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dbae:	4620      	mov	r0, r4
 801dbb0:	4798      	blx	r3
 801dbb2:	4b08      	ldr	r3, [pc, #32]	; (801dbd4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801dbb4:	681b      	ldr	r3, [r3, #0]
 801dbb6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801dbba:	b10a      	cbz	r2, 801dbc0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801dbbc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801dbbe:	b900      	cbnz	r0, 801dbc2 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801dbc0:	6898      	ldr	r0, [r3, #8]
 801dbc2:	6803      	ldr	r3, [r0, #0]
 801dbc4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801dbc6:	699d      	ldr	r5, [r3, #24]
 801dbc8:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801dbcc:	4669      	mov	r1, sp
 801dbce:	47a8      	blx	r5
 801dbd0:	b003      	add	sp, #12
 801dbd2:	bd30      	pop	{r4, r5, pc}
 801dbd4:	200127f4 	.word	0x200127f4

0801dbd8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 801dbd8:	b538      	push	{r3, r4, r5, lr}
 801dbda:	880b      	ldrh	r3, [r1, #0]
 801dbdc:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801dbde:	4605      	mov	r5, r0
 801dbe0:	8813      	ldrh	r3, [r2, #0]
 801dbe2:	f825 3f30 	strh.w	r3, [r5, #48]!
 801dbe6:	4604      	mov	r4, r0
 801dbe8:	4628      	mov	r0, r5
 801dbea:	f003 fe2d 	bl	8021848 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801dbee:	8120      	strh	r0, [r4, #8]
 801dbf0:	4628      	mov	r0, r5
 801dbf2:	f003 fe63 	bl	80218bc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801dbf6:	8160      	strh	r0, [r4, #10]
 801dbf8:	bd38      	pop	{r3, r4, r5, pc}

0801dbfa <_ZNK8touchgfx6Button12getSolidRectEv>:
 801dbfa:	b510      	push	{r4, lr}
 801dbfc:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 801dc00:	2bff      	cmp	r3, #255	; 0xff
 801dc02:	4604      	mov	r4, r0
 801dc04:	d006      	beq.n	801dc14 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 801dc06:	2300      	movs	r3, #0
 801dc08:	8003      	strh	r3, [r0, #0]
 801dc0a:	8043      	strh	r3, [r0, #2]
 801dc0c:	8083      	strh	r3, [r0, #4]
 801dc0e:	80c3      	strh	r3, [r0, #6]
 801dc10:	4620      	mov	r0, r4
 801dc12:	bd10      	pop	{r4, pc}
 801dc14:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801dc18:	b11b      	cbz	r3, 801dc22 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 801dc1a:	3130      	adds	r1, #48	; 0x30
 801dc1c:	f003 fe88 	bl	8021930 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801dc20:	e7f6      	b.n	801dc10 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 801dc22:	312e      	adds	r1, #46	; 0x2e
 801dc24:	e7fa      	b.n	801dc1c <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

0801dc28 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 801dc28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dc2c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801dc30:	b08a      	sub	sp, #40	; 0x28
 801dc32:	4604      	mov	r4, r0
 801dc34:	4688      	mov	r8, r1
 801dc36:	2b00      	cmp	r3, #0
 801dc38:	d044      	beq.n	801dcc4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 801dc3a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801dc3c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801dc40:	a805      	add	r0, sp, #20
 801dc42:	f003 fe01 	bl	8021848 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801dc46:	4605      	mov	r5, r0
 801dc48:	b206      	sxth	r6, r0
 801dc4a:	a805      	add	r0, sp, #20
 801dc4c:	f003 fe36 	bl	80218bc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801dc50:	f9b8 2000 	ldrsh.w	r2, [r8]
 801dc54:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 801dc58:	4417      	add	r7, r2
 801dc5a:	b2bf      	uxth	r7, r7
 801dc5c:	2300      	movs	r3, #0
 801dc5e:	fa0f fe87 	sxth.w	lr, r7
 801dc62:	459e      	cmp	lr, r3
 801dc64:	fa0f fc80 	sxth.w	ip, r0
 801dc68:	9306      	str	r3, [sp, #24]
 801dc6a:	dd2d      	ble.n	801dcc8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 801dc6c:	4296      	cmp	r6, r2
 801dc6e:	dd2b      	ble.n	801dcc8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 801dc70:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 801dc74:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 801dc78:	4419      	add	r1, r3
 801dc7a:	b289      	uxth	r1, r1
 801dc7c:	fa0f f881 	sxth.w	r8, r1
 801dc80:	f1b8 0f00 	cmp.w	r8, #0
 801dc84:	dd20      	ble.n	801dcc8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 801dc86:	459c      	cmp	ip, r3
 801dc88:	dd1e      	ble.n	801dcc8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 801dc8a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 801dc8e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dc92:	4576      	cmp	r6, lr
 801dc94:	bfa8      	it	ge
 801dc96:	463d      	movge	r5, r7
 801dc98:	45c4      	cmp	ip, r8
 801dc9a:	bfa8      	it	ge
 801dc9c:	4608      	movge	r0, r1
 801dc9e:	1aad      	subs	r5, r5, r2
 801dca0:	1ac0      	subs	r0, r0, r3
 801dca2:	f8ad 501c 	strh.w	r5, [sp, #28]
 801dca6:	f8ad 001e 	strh.w	r0, [sp, #30]
 801dcaa:	f8ad 2018 	strh.w	r2, [sp, #24]
 801dcae:	f8ad 301a 	strh.w	r3, [sp, #26]
 801dcb2:	4b1f      	ldr	r3, [pc, #124]	; (801dd30 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 801dcb4:	681b      	ldr	r3, [r3, #0]
 801dcb6:	b953      	cbnz	r3, 801dcce <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 801dcb8:	4b1e      	ldr	r3, [pc, #120]	; (801dd34 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 801dcba:	4a1f      	ldr	r2, [pc, #124]	; (801dd38 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 801dcbc:	481f      	ldr	r0, [pc, #124]	; (801dd3c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 801dcbe:	2189      	movs	r1, #137	; 0x89
 801dcc0:	f010 fb0a 	bl	802e2d8 <__assert_func>
 801dcc4:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801dcc6:	e7b9      	b.n	801dc3c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 801dcc8:	2300      	movs	r3, #0
 801dcca:	9307      	str	r3, [sp, #28]
 801dccc:	e7f1      	b.n	801dcb2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 801dcce:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801dcd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801dcd6:	429a      	cmp	r2, r3
 801dcd8:	d026      	beq.n	801dd28 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 801dcda:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801dcde:	2b00      	cmp	r3, #0
 801dce0:	dd22      	ble.n	801dd28 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 801dce2:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801dce6:	2b00      	cmp	r3, #0
 801dce8:	dd1e      	ble.n	801dd28 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 801dcea:	2300      	movs	r3, #0
 801dcec:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801dcf0:	6823      	ldr	r3, [r4, #0]
 801dcf2:	a908      	add	r1, sp, #32
 801dcf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dcf6:	4620      	mov	r0, r4
 801dcf8:	4798      	blx	r3
 801dcfa:	4b11      	ldr	r3, [pc, #68]	; (801dd40 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 801dcfc:	681b      	ldr	r3, [r3, #0]
 801dcfe:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801dd02:	b10a      	cbz	r2, 801dd08 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 801dd04:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801dd06:	b900      	cbnz	r0, 801dd0a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 801dd08:	6898      	ldr	r0, [r3, #8]
 801dd0a:	6801      	ldr	r1, [r0, #0]
 801dd0c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801dd10:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801dd14:	2501      	movs	r5, #1
 801dd16:	9502      	str	r5, [sp, #8]
 801dd18:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 801dd1c:	9401      	str	r4, [sp, #4]
 801dd1e:	ac06      	add	r4, sp, #24
 801dd20:	9400      	str	r4, [sp, #0]
 801dd22:	688c      	ldr	r4, [r1, #8]
 801dd24:	a905      	add	r1, sp, #20
 801dd26:	47a0      	blx	r4
 801dd28:	b00a      	add	sp, #40	; 0x28
 801dd2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dd2e:	bf00      	nop
 801dd30:	2001289c 	.word	0x2001289c
 801dd34:	080332fc 	.word	0x080332fc
 801dd38:	080333d0 	.word	0x080333d0
 801dd3c:	08033338 	.word	0x08033338
 801dd40:	200127f4 	.word	0x200127f4

0801dd44 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 801dd44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801dd46:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801dd48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801dd4c:	4299      	cmp	r1, r3
 801dd4e:	4606      	mov	r6, r0
 801dd50:	d02a      	beq.n	801dda8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 801dd52:	4b16      	ldr	r3, [pc, #88]	; (801ddac <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 801dd54:	681b      	ldr	r3, [r3, #0]
 801dd56:	b92b      	cbnz	r3, 801dd64 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 801dd58:	4b15      	ldr	r3, [pc, #84]	; (801ddb0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 801dd5a:	4a16      	ldr	r2, [pc, #88]	; (801ddb4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 801dd5c:	21b1      	movs	r1, #177	; 0xb1
 801dd5e:	4816      	ldr	r0, [pc, #88]	; (801ddb8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 801dd60:	f010 faba 	bl	802e2d8 <__assert_func>
 801dd64:	4a15      	ldr	r2, [pc, #84]	; (801ddbc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 801dd66:	8812      	ldrh	r2, [r2, #0]
 801dd68:	428a      	cmp	r2, r1
 801dd6a:	d803      	bhi.n	801dd74 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 801dd6c:	4b14      	ldr	r3, [pc, #80]	; (801ddc0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 801dd6e:	4a11      	ldr	r2, [pc, #68]	; (801ddb4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 801dd70:	21b2      	movs	r1, #178	; 0xb2
 801dd72:	e7f4      	b.n	801dd5e <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 801dd74:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 801dd78:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 801dd7c:	4b11      	ldr	r3, [pc, #68]	; (801ddc4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 801dd7e:	7854      	ldrb	r4, [r2, #1]
 801dd80:	681b      	ldr	r3, [r3, #0]
 801dd82:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 801dd86:	682b      	ldr	r3, [r5, #0]
 801dd88:	69df      	ldr	r7, [r3, #28]
 801dd8a:	4b0f      	ldr	r3, [pc, #60]	; (801ddc8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 801dd8c:	6818      	ldr	r0, [r3, #0]
 801dd8e:	f7f0 ff0d 	bl	800ebac <_ZNK8touchgfx5Texts7getTextEt>
 801dd92:	f3c4 0481 	ubfx	r4, r4, #2, #2
 801dd96:	2300      	movs	r3, #0
 801dd98:	9300      	str	r3, [sp, #0]
 801dd9a:	4602      	mov	r2, r0
 801dd9c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 801dd9e:	4621      	mov	r1, r4
 801dda0:	4628      	mov	r0, r5
 801dda2:	47b8      	blx	r7
 801dda4:	b003      	add	sp, #12
 801dda6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dda8:	2000      	movs	r0, #0
 801ddaa:	e7fb      	b.n	801dda4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 801ddac:	20012864 	.word	0x20012864
 801ddb0:	08033128 	.word	0x08033128
 801ddb4:	08033480 	.word	0x08033480
 801ddb8:	0803316a 	.word	0x0803316a
 801ddbc:	20012868 	.word	0x20012868
 801ddc0:	08033193 	.word	0x08033193
 801ddc4:	2001286c 	.word	0x2001286c
 801ddc8:	20012870 	.word	0x20012870

0801ddcc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 801ddcc:	b570      	push	{r4, r5, r6, lr}
 801ddce:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801ddd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ddd4:	4299      	cmp	r1, r3
 801ddd6:	4604      	mov	r4, r0
 801ddd8:	d01e      	beq.n	801de18 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 801ddda:	6803      	ldr	r3, [r0, #0]
 801dddc:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 801ddde:	4b0f      	ldr	r3, [pc, #60]	; (801de1c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 801dde0:	681b      	ldr	r3, [r3, #0]
 801dde2:	b92b      	cbnz	r3, 801ddf0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 801dde4:	4b0e      	ldr	r3, [pc, #56]	; (801de20 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 801dde6:	4a0f      	ldr	r2, [pc, #60]	; (801de24 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 801dde8:	21b1      	movs	r1, #177	; 0xb1
 801ddea:	480f      	ldr	r0, [pc, #60]	; (801de28 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 801ddec:	f010 fa74 	bl	802e2d8 <__assert_func>
 801ddf0:	4b0e      	ldr	r3, [pc, #56]	; (801de2c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 801ddf2:	881b      	ldrh	r3, [r3, #0]
 801ddf4:	428b      	cmp	r3, r1
 801ddf6:	d803      	bhi.n	801de00 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 801ddf8:	4b0d      	ldr	r3, [pc, #52]	; (801de30 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 801ddfa:	4a0a      	ldr	r2, [pc, #40]	; (801de24 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 801ddfc:	21b2      	movs	r1, #178	; 0xb2
 801ddfe:	e7f4      	b.n	801ddea <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 801de00:	4b0c      	ldr	r3, [pc, #48]	; (801de34 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 801de02:	6818      	ldr	r0, [r3, #0]
 801de04:	f7f0 fed2 	bl	800ebac <_ZNK8touchgfx5Texts7getTextEt>
 801de08:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801de0a:	4601      	mov	r1, r0
 801de0c:	46ac      	mov	ip, r5
 801de0e:	4620      	mov	r0, r4
 801de10:	2300      	movs	r3, #0
 801de12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801de16:	4760      	bx	ip
 801de18:	2000      	movs	r0, #0
 801de1a:	bd70      	pop	{r4, r5, r6, pc}
 801de1c:	20012864 	.word	0x20012864
 801de20:	08033128 	.word	0x08033128
 801de24:	08033480 	.word	0x08033480
 801de28:	0803316a 	.word	0x0803316a
 801de2c:	20012868 	.word	0x20012868
 801de30:	08033193 	.word	0x08033193
 801de34:	20012870 	.word	0x20012870

0801de38 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 801de38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801de3c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801de3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801de42:	4293      	cmp	r3, r2
 801de44:	b08c      	sub	sp, #48	; 0x30
 801de46:	4604      	mov	r4, r0
 801de48:	460e      	mov	r6, r1
 801de4a:	d05d      	beq.n	801df08 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 801de4c:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 801df2c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 801de50:	f8d8 2000 	ldr.w	r2, [r8]
 801de54:	b92a      	cbnz	r2, 801de62 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 801de56:	4b2e      	ldr	r3, [pc, #184]	; (801df10 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 801de58:	4a2e      	ldr	r2, [pc, #184]	; (801df14 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 801de5a:	21b1      	movs	r1, #177	; 0xb1
 801de5c:	482e      	ldr	r0, [pc, #184]	; (801df18 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 801de5e:	f010 fa3b 	bl	802e2d8 <__assert_func>
 801de62:	4f2e      	ldr	r7, [pc, #184]	; (801df1c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 801de64:	8839      	ldrh	r1, [r7, #0]
 801de66:	4299      	cmp	r1, r3
 801de68:	d803      	bhi.n	801de72 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 801de6a:	4b2d      	ldr	r3, [pc, #180]	; (801df20 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 801de6c:	4a29      	ldr	r2, [pc, #164]	; (801df14 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 801de6e:	21b2      	movs	r1, #178	; 0xb2
 801de70:	e7f4      	b.n	801de5c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 801de72:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801de76:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801de7a:	4b2a      	ldr	r3, [pc, #168]	; (801df24 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 801de7c:	681b      	ldr	r3, [r3, #0]
 801de7e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801de82:	2a00      	cmp	r2, #0
 801de84:	d040      	beq.n	801df08 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 801de86:	784b      	ldrb	r3, [r1, #1]
 801de88:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 801de8c:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 801de90:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 801de94:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 801de98:	f890 a036 	ldrb.w	sl, [r0, #54]	; 0x36
 801de9c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801de9e:	9207      	str	r2, [sp, #28]
 801dea0:	f3c3 0901 	ubfx	r9, r3, #0, #2
 801dea4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801dea8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 801deac:	f88d 9020 	strb.w	r9, [sp, #32]
 801deb0:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 801deb4:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 801deb8:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801debc:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 801dec0:	9009      	str	r0, [sp, #36]	; 0x24
 801dec2:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 801dec6:	f7ea fe4b 	bl	8008b60 <_ZN8touchgfx3HAL3lcdEv>
 801deca:	ad05      	add	r5, sp, #20
 801decc:	4681      	mov	r9, r0
 801dece:	4621      	mov	r1, r4
 801ded0:	4628      	mov	r0, r5
 801ded2:	f001 feb9 	bl	801fc48 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ded6:	f8d8 3000 	ldr.w	r3, [r8]
 801deda:	2b00      	cmp	r3, #0
 801dedc:	d0bb      	beq.n	801de56 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 801dede:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801dee0:	883b      	ldrh	r3, [r7, #0]
 801dee2:	428b      	cmp	r3, r1
 801dee4:	d9c1      	bls.n	801de6a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 801dee6:	4b10      	ldr	r3, [pc, #64]	; (801df28 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 801dee8:	6818      	ldr	r0, [r3, #0]
 801deea:	f7f0 fe5f 	bl	800ebac <_ZNK8touchgfx5Texts7getTextEt>
 801deee:	2300      	movs	r3, #0
 801def0:	9303      	str	r3, [sp, #12]
 801def2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801def4:	e9cd 0301 	strd	r0, r3, [sp, #4]
 801def8:	ab07      	add	r3, sp, #28
 801defa:	9300      	str	r3, [sp, #0]
 801defc:	e895 0006 	ldmia.w	r5, {r1, r2}
 801df00:	4633      	mov	r3, r6
 801df02:	4648      	mov	r0, r9
 801df04:	f7f0 fde3 	bl	800eace <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801df08:	b00c      	add	sp, #48	; 0x30
 801df0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801df0e:	bf00      	nop
 801df10:	08033128 	.word	0x08033128
 801df14:	08033480 	.word	0x08033480
 801df18:	0803316a 	.word	0x0803316a
 801df1c:	20012868 	.word	0x20012868
 801df20:	08033193 	.word	0x08033193
 801df24:	2001286c 	.word	0x2001286c
 801df28:	20012870 	.word	0x20012870
 801df2c:	20012864 	.word	0x20012864

0801df30 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>:
 801df30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df34:	461c      	mov	r4, r3
 801df36:	4606      	mov	r6, r0
 801df38:	9f06      	ldr	r7, [sp, #24]
 801df3a:	f7ff fe4d 	bl	801dbd8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 801df3e:	8823      	ldrh	r3, [r4, #0]
 801df40:	86b3      	strh	r3, [r6, #52]	; 0x34
 801df42:	883b      	ldrh	r3, [r7, #0]
 801df44:	86f3      	strh	r3, [r6, #54]	; 0x36
 801df46:	4638      	mov	r0, r7
 801df48:	f9b6 5008 	ldrsh.w	r5, [r6, #8]
 801df4c:	f003 fc7c 	bl	8021848 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801df50:	f04f 0802 	mov.w	r8, #2
 801df54:	fb95 f5f8 	sdiv	r5, r5, r8
 801df58:	b2ad      	uxth	r5, r5
 801df5a:	eba5 0050 	sub.w	r0, r5, r0, lsr #1
 801df5e:	8730      	strh	r0, [r6, #56]	; 0x38
 801df60:	4638      	mov	r0, r7
 801df62:	f9b6 400a 	ldrsh.w	r4, [r6, #10]
 801df66:	fb94 f4f8 	sdiv	r4, r4, r8
 801df6a:	f003 fca7 	bl	80218bc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801df6e:	b2a4      	uxth	r4, r4
 801df70:	eba4 0050 	sub.w	r0, r4, r0, lsr #1
 801df74:	8770      	strh	r0, [r6, #58]	; 0x3a
 801df76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801df7c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE>:
 801df7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df80:	4604      	mov	r4, r0
 801df82:	b08c      	sub	sp, #48	; 0x30
 801df84:	460d      	mov	r5, r1
 801df86:	f7ff fe4f 	bl	801dc28 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 801df8a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801df8e:	b33b      	cbz	r3, 801dfe0 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x64>
 801df90:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801df92:	f8ad 3014 	strh.w	r3, [sp, #20]
 801df96:	a805      	add	r0, sp, #20
 801df98:	f9b4 8038 	ldrsh.w	r8, [r4, #56]	; 0x38
 801df9c:	f9b4 703a 	ldrsh.w	r7, [r4, #58]	; 0x3a
 801dfa0:	f003 fc52 	bl	8021848 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801dfa4:	4606      	mov	r6, r0
 801dfa6:	a805      	add	r0, sp, #20
 801dfa8:	f003 fc88 	bl	80218bc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801dfac:	6869      	ldr	r1, [r5, #4]
 801dfae:	f8ad 001e 	strh.w	r0, [sp, #30]
 801dfb2:	6828      	ldr	r0, [r5, #0]
 801dfb4:	f8ad 8018 	strh.w	r8, [sp, #24]
 801dfb8:	ab08      	add	r3, sp, #32
 801dfba:	ad08      	add	r5, sp, #32
 801dfbc:	c303      	stmia	r3!, {r0, r1}
 801dfbe:	a906      	add	r1, sp, #24
 801dfc0:	4628      	mov	r0, r5
 801dfc2:	f8ad 701a 	strh.w	r7, [sp, #26]
 801dfc6:	f8ad 601c 	strh.w	r6, [sp, #28]
 801dfca:	f7fc ff83 	bl	801aed4 <_ZN8touchgfx4RectaNERKS0_>
 801dfce:	4b25      	ldr	r3, [pc, #148]	; (801e064 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe8>)
 801dfd0:	681b      	ldr	r3, [r3, #0]
 801dfd2:	b93b      	cbnz	r3, 801dfe4 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x68>
 801dfd4:	4b24      	ldr	r3, [pc, #144]	; (801e068 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xec>)
 801dfd6:	4a25      	ldr	r2, [pc, #148]	; (801e06c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf0>)
 801dfd8:	4825      	ldr	r0, [pc, #148]	; (801e070 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf4>)
 801dfda:	2189      	movs	r1, #137	; 0x89
 801dfdc:	f010 f97c 	bl	802e2d8 <__assert_func>
 801dfe0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801dfe2:	e7d6      	b.n	801df92 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x16>
 801dfe4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801dfe8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801dfec:	429a      	cmp	r2, r3
 801dfee:	d035      	beq.n	801e05c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe0>
 801dff0:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801dff4:	2b00      	cmp	r3, #0
 801dff6:	dd31      	ble.n	801e05c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe0>
 801dff8:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801dffc:	2b00      	cmp	r3, #0
 801dffe:	dd2d      	ble.n	801e05c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe0>
 801e000:	2300      	movs	r3, #0
 801e002:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 801e006:	6823      	ldr	r3, [r4, #0]
 801e008:	a90a      	add	r1, sp, #40	; 0x28
 801e00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e00c:	4620      	mov	r0, r4
 801e00e:	4798      	blx	r3
 801e010:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801e014:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 801e016:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801e01a:	1a9b      	subs	r3, r3, r2
 801e01c:	f8ad 3020 	strh.w	r3, [sp, #32]
 801e020:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 801e022:	1ac9      	subs	r1, r1, r3
 801e024:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 801e028:	4912      	ldr	r1, [pc, #72]	; (801e074 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf8>)
 801e02a:	6809      	ldr	r1, [r1, #0]
 801e02c:	f891 0076 	ldrb.w	r0, [r1, #118]	; 0x76
 801e030:	b108      	cbz	r0, 801e036 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xba>
 801e032:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 801e034:	b900      	cbnz	r0, 801e038 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xbc>
 801e036:	6888      	ldr	r0, [r1, #8]
 801e038:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
 801e03c:	440b      	add	r3, r1
 801e03e:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801e042:	2601      	movs	r6, #1
 801e044:	440a      	add	r2, r1
 801e046:	6801      	ldr	r1, [r0, #0]
 801e048:	9602      	str	r6, [sp, #8]
 801e04a:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 801e04e:	e9cd 5400 	strd	r5, r4, [sp]
 801e052:	b21b      	sxth	r3, r3
 801e054:	688c      	ldr	r4, [r1, #8]
 801e056:	b212      	sxth	r2, r2
 801e058:	a905      	add	r1, sp, #20
 801e05a:	47a0      	blx	r4
 801e05c:	b00c      	add	sp, #48	; 0x30
 801e05e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e062:	bf00      	nop
 801e064:	2001289c 	.word	0x2001289c
 801e068:	080332fc 	.word	0x080332fc
 801e06c:	08033524 	.word	0x08033524
 801e070:	08033338 	.word	0x08033338
 801e074:	200127f4 	.word	0x200127f4

0801e078 <_ZN8touchgfx14ButtonWithIconC1Ev>:
 801e078:	b510      	push	{r4, lr}
 801e07a:	2101      	movs	r1, #1
 801e07c:	2200      	movs	r2, #0
 801e07e:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 801e082:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 801e086:	4c0d      	ldr	r4, [pc, #52]	; (801e0bc <_ZN8touchgfx14ButtonWithIconC1Ev+0x44>)
 801e088:	8082      	strh	r2, [r0, #4]
 801e08a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801e08e:	80c2      	strh	r2, [r0, #6]
 801e090:	8102      	strh	r2, [r0, #8]
 801e092:	8142      	strh	r2, [r0, #10]
 801e094:	8182      	strh	r2, [r0, #12]
 801e096:	81c2      	strh	r2, [r0, #14]
 801e098:	8202      	strh	r2, [r0, #16]
 801e09a:	8242      	strh	r2, [r0, #18]
 801e09c:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801e0a0:	61c2      	str	r2, [r0, #28]
 801e0a2:	6282      	str	r2, [r0, #40]	; 0x28
 801e0a4:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 801e0a8:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801e0aa:	8601      	strh	r1, [r0, #48]	; 0x30
 801e0ac:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 801e0b0:	6004      	str	r4, [r0, #0]
 801e0b2:	8681      	strh	r1, [r0, #52]	; 0x34
 801e0b4:	86c1      	strh	r1, [r0, #54]	; 0x36
 801e0b6:	8702      	strh	r2, [r0, #56]	; 0x38
 801e0b8:	8742      	strh	r2, [r0, #58]	; 0x3a
 801e0ba:	bd10      	pop	{r4, pc}
 801e0bc:	080334b8 	.word	0x080334b8

0801e0c0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801e0c0:	b570      	push	{r4, r5, r6, lr}
 801e0c2:	4605      	mov	r5, r0
 801e0c4:	880b      	ldrh	r3, [r1, #0]
 801e0c6:	84c3      	strh	r3, [r0, #38]	; 0x26
 801e0c8:	f855 3b26 	ldr.w	r3, [r5], #38
 801e0cc:	4604      	mov	r4, r0
 801e0ce:	4628      	mov	r0, r5
 801e0d0:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 801e0d2:	f003 fbb9 	bl	8021848 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801e0d6:	b201      	sxth	r1, r0
 801e0d8:	4620      	mov	r0, r4
 801e0da:	47b0      	blx	r6
 801e0dc:	6823      	ldr	r3, [r4, #0]
 801e0de:	4628      	mov	r0, r5
 801e0e0:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 801e0e2:	f003 fbeb 	bl	80218bc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801e0e6:	4633      	mov	r3, r6
 801e0e8:	b201      	sxth	r1, r0
 801e0ea:	4620      	mov	r0, r4
 801e0ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e0f0:	4718      	bx	r3

0801e0f2 <_ZNK8touchgfx5Image12getSolidRectEv>:
 801e0f2:	b510      	push	{r4, lr}
 801e0f4:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801e0f8:	2bff      	cmp	r3, #255	; 0xff
 801e0fa:	4604      	mov	r4, r0
 801e0fc:	d006      	beq.n	801e10c <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801e0fe:	2300      	movs	r3, #0
 801e100:	8003      	strh	r3, [r0, #0]
 801e102:	8043      	strh	r3, [r0, #2]
 801e104:	8083      	strh	r3, [r0, #4]
 801e106:	80c3      	strh	r3, [r0, #6]
 801e108:	4620      	mov	r0, r4
 801e10a:	bd10      	pop	{r4, pc}
 801e10c:	3126      	adds	r1, #38	; 0x26
 801e10e:	f003 fc0f 	bl	8021930 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801e112:	e7f9      	b.n	801e108 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0801e114 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 801e114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e118:	4604      	mov	r4, r0
 801e11a:	b088      	sub	sp, #32
 801e11c:	f854 3b26 	ldr.w	r3, [r4], #38
 801e120:	2500      	movs	r5, #0
 801e122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e124:	460f      	mov	r7, r1
 801e126:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801e12a:	a904      	add	r1, sp, #16
 801e12c:	4606      	mov	r6, r0
 801e12e:	4798      	blx	r3
 801e130:	4620      	mov	r0, r4
 801e132:	f003 fb89 	bl	8021848 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801e136:	4680      	mov	r8, r0
 801e138:	4620      	mov	r0, r4
 801e13a:	f003 fbbf 	bl	80218bc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801e13e:	9506      	str	r5, [sp, #24]
 801e140:	ad06      	add	r5, sp, #24
 801e142:	f8ad 001e 	strh.w	r0, [sp, #30]
 801e146:	4639      	mov	r1, r7
 801e148:	4628      	mov	r0, r5
 801e14a:	f8ad 801c 	strh.w	r8, [sp, #28]
 801e14e:	f7fc fec1 	bl	801aed4 <_ZN8touchgfx4RectaNERKS0_>
 801e152:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801e156:	2b00      	cmp	r3, #0
 801e158:	dd19      	ble.n	801e18e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801e15a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801e15e:	2b00      	cmp	r3, #0
 801e160:	dd15      	ble.n	801e18e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801e162:	4b0c      	ldr	r3, [pc, #48]	; (801e194 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 801e164:	681b      	ldr	r3, [r3, #0]
 801e166:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801e16a:	b10a      	cbz	r2, 801e170 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 801e16c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801e16e:	b900      	cbnz	r0, 801e172 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 801e170:	6898      	ldr	r0, [r3, #8]
 801e172:	6801      	ldr	r1, [r0, #0]
 801e174:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801e178:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801e17c:	2701      	movs	r7, #1
 801e17e:	9702      	str	r7, [sp, #8]
 801e180:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 801e184:	e9cd 5600 	strd	r5, r6, [sp]
 801e188:	688d      	ldr	r5, [r1, #8]
 801e18a:	4621      	mov	r1, r4
 801e18c:	47a8      	blx	r5
 801e18e:	b008      	add	sp, #32
 801e190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e194:	200127f4 	.word	0x200127f4

0801e198 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801e198:	2000      	movs	r0, #0
 801e19a:	4770      	bx	lr

0801e19c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801e19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1a0:	b091      	sub	sp, #68	; 0x44
 801e1a2:	4699      	mov	r9, r3
 801e1a4:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 801e1a8:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 801e1aa:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 801e1ae:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801e1b2:	4680      	mov	r8, r0
 801e1b4:	4617      	mov	r7, r2
 801e1b6:	a80e      	add	r0, sp, #56	; 0x38
 801e1b8:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 801e1bc:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 801e1c0:	2500      	movs	r5, #0
 801e1c2:	910d      	str	r1, [sp, #52]	; 0x34
 801e1c4:	950e      	str	r5, [sp, #56]	; 0x38
 801e1c6:	f000 fe3b 	bl	801ee40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e1ca:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801e1cc:	f8d9 6000 	ldr.w	r6, [r9]
 801e1d0:	6818      	ldr	r0, [r3, #0]
 801e1d2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801e1d4:	f9b4 b000 	ldrsh.w	fp, [r4]
 801e1d8:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e1dc:	eb02 0c06 	add.w	ip, r2, r6
 801e1e0:	1b80      	subs	r0, r0, r6
 801e1e2:	ebab 0e0c 	sub.w	lr, fp, ip
 801e1e6:	4570      	cmp	r0, lr
 801e1e8:	f340 80bd 	ble.w	801e366 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ca>
 801e1ec:	88a1      	ldrh	r1, [r4, #4]
 801e1ee:	4459      	add	r1, fp
 801e1f0:	b209      	sxth	r1, r1
 801e1f2:	458c      	cmp	ip, r1
 801e1f4:	f300 80b7 	bgt.w	801e366 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ca>
 801e1f8:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 801e1fc:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 801e200:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 801e204:	edd9 6a07 	vldr	s13, [r9, #28]
 801e208:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 801e20c:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 801e210:	4283      	cmp	r3, r0
 801e212:	bfa8      	it	ge
 801e214:	4603      	movge	r3, r0
 801e216:	ee07 3a90 	vmov	s15, r3
 801e21a:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801e21e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801e222:	ee25 4a04 	vmul.f32	s8, s10, s8
 801e226:	ee65 4a24 	vmul.f32	s9, s10, s9
 801e22a:	ee25 5a27 	vmul.f32	s10, s10, s15
 801e22e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801e232:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801e236:	45e3      	cmp	fp, ip
 801e238:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801e23c:	ee32 1a05 	vadd.f32	s2, s4, s10
 801e240:	ee36 0a84 	vadd.f32	s0, s13, s8
 801e244:	ee61 1a87 	vmul.f32	s3, s3, s14
 801e248:	ee22 2a07 	vmul.f32	s4, s4, s14
 801e24c:	f340 808e 	ble.w	801e36c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1d0>
 801e250:	fb9e f5f3 	sdiv	r5, lr, r3
 801e254:	ee07 5a10 	vmov	s14, r5
 801e258:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e25c:	2d00      	cmp	r5, #0
 801e25e:	fb03 e415 	mls	r4, r3, r5, lr
 801e262:	eea7 0a04 	vfma.f32	s0, s14, s8
 801e266:	eee7 0a24 	vfma.f32	s1, s14, s9
 801e26a:	eea7 1a05 	vfma.f32	s2, s14, s10
 801e26e:	dd13      	ble.n	801e298 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 801e270:	ee70 6a44 	vsub.f32	s13, s0, s8
 801e274:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801e278:	eef5 6a40 	vcmp.f32	s13, #0.0
 801e27c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e280:	bf18      	it	ne
 801e282:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801e286:	ee31 2a45 	vsub.f32	s4, s2, s10
 801e28a:	bf08      	it	eq
 801e28c:	eeb0 7a67 	vmoveq.f32	s14, s15
 801e290:	ee61 1a87 	vmul.f32	s3, s3, s14
 801e294:	ee22 2a07 	vmul.f32	s4, s4, s14
 801e298:	fb05 f703 	mul.w	r7, r5, r3
 801e29c:	1bc0      	subs	r0, r0, r7
 801e29e:	443e      	add	r6, r7
 801e2a0:	1997      	adds	r7, r2, r6
 801e2a2:	4407      	add	r7, r0
 801e2a4:	42b9      	cmp	r1, r7
 801e2a6:	bfbc      	itt	lt
 801e2a8:	1a88      	sublt	r0, r1, r2
 801e2aa:	1b80      	sublt	r0, r0, r6
 801e2ac:	2800      	cmp	r0, #0
 801e2ae:	dd5a      	ble.n	801e366 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ca>
 801e2b0:	fb90 f1f3 	sdiv	r1, r0, r3
 801e2b4:	fb03 0211 	mls	r2, r3, r1, r0
 801e2b8:	b90a      	cbnz	r2, 801e2be <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x122>
 801e2ba:	3901      	subs	r1, #1
 801e2bc:	461a      	mov	r2, r3
 801e2be:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801e2c2:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 801e2c6:	44a4      	add	ip, r4
 801e2c8:	fb03 c505 	mla	r5, r3, r5, ip
 801e2cc:	2900      	cmp	r1, #0
 801e2ce:	bfcc      	ite	gt
 801e2d0:	469e      	movgt	lr, r3
 801e2d2:	4696      	movle	lr, r2
 801e2d4:	eef0 6a42 	vmov.f32	s13, s4
 801e2d8:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801e2dc:	ee21 3a23 	vmul.f32	s6, s2, s7
 801e2e0:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801e2e4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e2e8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801e2ec:	eeb0 7a61 	vmov.f32	s14, s3
 801e2f0:	ee17 0a90 	vmov	r0, s15
 801e2f4:	ee73 7a42 	vsub.f32	s15, s6, s4
 801e2f8:	fb90 f6f3 	sdiv	r6, r0, r3
 801e2fc:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801e300:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e304:	ee17 0a90 	vmov	r0, s15
 801e308:	fb90 f7f3 	sdiv	r7, r0, r3
 801e30c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801e310:	900c      	str	r0, [sp, #48]	; 0x30
 801e312:	f8d0 8000 	ldr.w	r8, [r0]
 801e316:	981c      	ldr	r0, [sp, #112]	; 0x70
 801e318:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801e31c:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801e320:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801e324:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801e328:	f8cd a020 	str.w	sl, [sp, #32]
 801e32c:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 801e330:	980d      	ldr	r0, [sp, #52]	; 0x34
 801e332:	f8d9 9014 	ldr.w	r9, [r9, #20]
 801e336:	9603      	str	r6, [sp, #12]
 801e338:	e9cd 7004 	strd	r7, r0, [sp, #16]
 801e33c:	ee16 0a90 	vmov	r0, s13
 801e340:	fb07 0704 	mla	r7, r7, r4, r0
 801e344:	ee17 0a10 	vmov	r0, s14
 801e348:	fb06 0604 	mla	r6, r6, r4, r0
 801e34c:	e9cd 3600 	strd	r3, r6, [sp]
 801e350:	44ca      	add	sl, r9
 801e352:	f8cd a01c 	str.w	sl, [sp, #28]
 801e356:	9506      	str	r5, [sp, #24]
 801e358:	9702      	str	r7, [sp, #8]
 801e35a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801e35e:	980c      	ldr	r0, [sp, #48]	; 0x30
 801e360:	ebae 0304 	sub.w	r3, lr, r4
 801e364:	47a8      	blx	r5
 801e366:	b011      	add	sp, #68	; 0x44
 801e368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e36c:	462c      	mov	r4, r5
 801e36e:	e797      	b.n	801e2a0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x104>

0801e370 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801e370:	b570      	push	{r4, r5, r6, lr}
 801e372:	4604      	mov	r4, r0
 801e374:	2500      	movs	r5, #0
 801e376:	7223      	strb	r3, [r4, #8]
 801e378:	9804      	ldr	r0, [sp, #16]
 801e37a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801e37e:	8025      	strh	r5, [r4, #0]
 801e380:	6061      	str	r1, [r4, #4]
 801e382:	7263      	strb	r3, [r4, #9]
 801e384:	60e0      	str	r0, [r4, #12]
 801e386:	8222      	strh	r2, [r4, #16]
 801e388:	8265      	strh	r5, [r4, #18]
 801e38a:	82a5      	strh	r5, [r4, #20]
 801e38c:	82e5      	strh	r5, [r4, #22]
 801e38e:	8325      	strh	r5, [r4, #24]
 801e390:	8365      	strh	r5, [r4, #26]
 801e392:	83a5      	strh	r5, [r4, #28]
 801e394:	77a5      	strb	r5, [r4, #30]
 801e396:	6803      	ldr	r3, [r0, #0]
 801e398:	695b      	ldr	r3, [r3, #20]
 801e39a:	4798      	blx	r3
 801e39c:	4606      	mov	r6, r0
 801e39e:	b1f8      	cbz	r0, 801e3e0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801e3a0:	68e0      	ldr	r0, [r4, #12]
 801e3a2:	6803      	ldr	r3, [r0, #0]
 801e3a4:	4631      	mov	r1, r6
 801e3a6:	68db      	ldr	r3, [r3, #12]
 801e3a8:	4798      	blx	r3
 801e3aa:	7b43      	ldrb	r3, [r0, #13]
 801e3ac:	7a82      	ldrb	r2, [r0, #10]
 801e3ae:	005b      	lsls	r3, r3, #1
 801e3b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e3b4:	4313      	orrs	r3, r2
 801e3b6:	83a3      	strh	r3, [r4, #28]
 801e3b8:	7a63      	ldrb	r3, [r4, #9]
 801e3ba:	2b04      	cmp	r3, #4
 801e3bc:	4605      	mov	r5, r0
 801e3be:	d10f      	bne.n	801e3e0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801e3c0:	68e0      	ldr	r0, [r4, #12]
 801e3c2:	6803      	ldr	r3, [r0, #0]
 801e3c4:	462a      	mov	r2, r5
 801e3c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e3c8:	4631      	mov	r1, r6
 801e3ca:	4798      	blx	r3
 801e3cc:	7b6b      	ldrb	r3, [r5, #13]
 801e3ce:	005b      	lsls	r3, r3, #1
 801e3d0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801e3d4:	7aab      	ldrb	r3, [r5, #10]
 801e3d6:	4313      	orrs	r3, r2
 801e3d8:	4418      	add	r0, r3
 801e3da:	8ba3      	ldrh	r3, [r4, #28]
 801e3dc:	4418      	add	r0, r3
 801e3de:	83a0      	strh	r0, [r4, #28]
 801e3e0:	4620      	mov	r0, r4
 801e3e2:	bd70      	pop	{r4, r5, r6, pc}

0801e3e4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801e3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3e8:	2400      	movs	r4, #0
 801e3ea:	b085      	sub	sp, #20
 801e3ec:	4681      	mov	r9, r0
 801e3ee:	4688      	mov	r8, r1
 801e3f0:	4692      	mov	sl, r2
 801e3f2:	469b      	mov	fp, r3
 801e3f4:	4627      	mov	r7, r4
 801e3f6:	4625      	mov	r5, r4
 801e3f8:	4626      	mov	r6, r4
 801e3fa:	4554      	cmp	r4, sl
 801e3fc:	da2a      	bge.n	801e454 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801e3fe:	2300      	movs	r3, #0
 801e400:	9303      	str	r3, [sp, #12]
 801e402:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801e406:	429d      	cmp	r5, r3
 801e408:	d004      	beq.n	801e414 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801e40a:	f242 030b 	movw	r3, #8203	; 0x200b
 801e40e:	429d      	cmp	r5, r3
 801e410:	bf18      	it	ne
 801e412:	462f      	movne	r7, r5
 801e414:	ab03      	add	r3, sp, #12
 801e416:	4642      	mov	r2, r8
 801e418:	4659      	mov	r1, fp
 801e41a:	4648      	mov	r0, r9
 801e41c:	f002 fb86 	bl	8020b2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801e420:	4605      	mov	r5, r0
 801e422:	b1b8      	cbz	r0, 801e454 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801e424:	280a      	cmp	r0, #10
 801e426:	d015      	beq.n	801e454 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801e428:	9a03      	ldr	r2, [sp, #12]
 801e42a:	b18a      	cbz	r2, 801e450 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801e42c:	7b50      	ldrb	r0, [r2, #13]
 801e42e:	7a93      	ldrb	r3, [r2, #10]
 801e430:	8895      	ldrh	r5, [r2, #4]
 801e432:	0040      	lsls	r0, r0, #1
 801e434:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801e438:	4303      	orrs	r3, r0
 801e43a:	9301      	str	r3, [sp, #4]
 801e43c:	f8d8 3000 	ldr.w	r3, [r8]
 801e440:	4639      	mov	r1, r7
 801e442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e444:	4640      	mov	r0, r8
 801e446:	4798      	blx	r3
 801e448:	9b01      	ldr	r3, [sp, #4]
 801e44a:	4418      	add	r0, r3
 801e44c:	4406      	add	r6, r0
 801e44e:	b2b6      	uxth	r6, r6
 801e450:	3401      	adds	r4, #1
 801e452:	e7d2      	b.n	801e3fa <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801e454:	4630      	mov	r0, r6
 801e456:	b005      	add	sp, #20
 801e458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e45c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801e45c:	2a02      	cmp	r2, #2
 801e45e:	b530      	push	{r4, r5, lr}
 801e460:	d011      	beq.n	801e486 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801e462:	2a03      	cmp	r2, #3
 801e464:	d01c      	beq.n	801e4a0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801e466:	2a01      	cmp	r2, #1
 801e468:	d10c      	bne.n	801e484 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801e46a:	888b      	ldrh	r3, [r1, #4]
 801e46c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801e470:	8801      	ldrh	r1, [r0, #0]
 801e472:	8844      	ldrh	r4, [r0, #2]
 801e474:	8004      	strh	r4, [r0, #0]
 801e476:	1a9b      	subs	r3, r3, r2
 801e478:	1a5b      	subs	r3, r3, r1
 801e47a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801e47e:	8043      	strh	r3, [r0, #2]
 801e480:	8081      	strh	r1, [r0, #4]
 801e482:	80c2      	strh	r2, [r0, #6]
 801e484:	bd30      	pop	{r4, r5, pc}
 801e486:	88cb      	ldrh	r3, [r1, #6]
 801e488:	88c2      	ldrh	r2, [r0, #6]
 801e48a:	1a9b      	subs	r3, r3, r2
 801e48c:	8842      	ldrh	r2, [r0, #2]
 801e48e:	1a9b      	subs	r3, r3, r2
 801e490:	888a      	ldrh	r2, [r1, #4]
 801e492:	8881      	ldrh	r1, [r0, #4]
 801e494:	8043      	strh	r3, [r0, #2]
 801e496:	1a52      	subs	r2, r2, r1
 801e498:	8801      	ldrh	r1, [r0, #0]
 801e49a:	1a52      	subs	r2, r2, r1
 801e49c:	8002      	strh	r2, [r0, #0]
 801e49e:	e7f1      	b.n	801e484 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801e4a0:	88cb      	ldrh	r3, [r1, #6]
 801e4a2:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801e4a6:	8841      	ldrh	r1, [r0, #2]
 801e4a8:	f9b0 5000 	ldrsh.w	r5, [r0]
 801e4ac:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801e4b0:	8045      	strh	r5, [r0, #2]
 801e4b2:	1a9b      	subs	r3, r3, r2
 801e4b4:	1a5b      	subs	r3, r3, r1
 801e4b6:	8003      	strh	r3, [r0, #0]
 801e4b8:	8082      	strh	r2, [r0, #4]
 801e4ba:	80c4      	strh	r4, [r0, #6]
 801e4bc:	e7e2      	b.n	801e484 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801e4be <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801e4be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e4c2:	b09f      	sub	sp, #124	; 0x7c
 801e4c4:	9116      	str	r1, [sp, #88]	; 0x58
 801e4c6:	9317      	str	r3, [sp, #92]	; 0x5c
 801e4c8:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801e4ca:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801e4cc:	8809      	ldrh	r1, [r1, #0]
 801e4ce:	889b      	ldrh	r3, [r3, #4]
 801e4d0:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 801e4d4:	9212      	str	r2, [sp, #72]	; 0x48
 801e4d6:	440b      	add	r3, r1
 801e4d8:	b21b      	sxth	r3, r3
 801e4da:	9310      	str	r3, [sp, #64]	; 0x40
 801e4dc:	f8d8 3000 	ldr.w	r3, [r8]
 801e4e0:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 801e4e4:	7a59      	ldrb	r1, [r3, #9]
 801e4e6:	7a1b      	ldrb	r3, [r3, #8]
 801e4e8:	9315      	str	r3, [sp, #84]	; 0x54
 801e4ea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e4ec:	9011      	str	r0, [sp, #68]	; 0x44
 801e4ee:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 801e4f2:	9114      	str	r1, [sp, #80]	; 0x50
 801e4f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 801e4f8:	2a00      	cmp	r2, #0
 801e4fa:	d067      	beq.n	801e5cc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 801e4fc:	f898 3010 	ldrb.w	r3, [r8, #16]
 801e500:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801e502:	2b04      	cmp	r3, #4
 801e504:	bf14      	ite	ne
 801e506:	2301      	movne	r3, #1
 801e508:	2302      	moveq	r3, #2
 801e50a:	4413      	add	r3, r2
 801e50c:	f04f 0900 	mov.w	r9, #0
 801e510:	930f      	str	r3, [sp, #60]	; 0x3c
 801e512:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801e516:	464c      	mov	r4, r9
 801e518:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801e51c:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 801e520:	4293      	cmp	r3, r2
 801e522:	f280 808c 	bge.w	801e63e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801e526:	2300      	movs	r3, #0
 801e528:	931c      	str	r3, [sp, #112]	; 0x70
 801e52a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801e52e:	429c      	cmp	r4, r3
 801e530:	d006      	beq.n	801e540 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 801e532:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e534:	f242 020b 	movw	r2, #8203	; 0x200b
 801e538:	4294      	cmp	r4, r2
 801e53a:	bf18      	it	ne
 801e53c:	4623      	movne	r3, r4
 801e53e:	930d      	str	r3, [sp, #52]	; 0x34
 801e540:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e542:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801e544:	f8d8 2000 	ldr.w	r2, [r8]
 801e548:	428b      	cmp	r3, r1
 801e54a:	db41      	blt.n	801e5d0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801e54c:	6813      	ldr	r3, [r2, #0]
 801e54e:	4610      	mov	r0, r2
 801e550:	695b      	ldr	r3, [r3, #20]
 801e552:	4798      	blx	r3
 801e554:	4604      	mov	r4, r0
 801e556:	f8d8 0000 	ldr.w	r0, [r8]
 801e55a:	6803      	ldr	r3, [r0, #0]
 801e55c:	aa1d      	add	r2, sp, #116	; 0x74
 801e55e:	689e      	ldr	r6, [r3, #8]
 801e560:	4621      	mov	r1, r4
 801e562:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801e566:	47b0      	blx	r6
 801e568:	901c      	str	r0, [sp, #112]	; 0x70
 801e56a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801e56e:	429c      	cmp	r4, r3
 801e570:	f000 80e9 	beq.w	801e746 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801e574:	f242 030b 	movw	r3, #8203	; 0x200b
 801e578:	429c      	cmp	r4, r3
 801e57a:	f000 80e4 	beq.w	801e746 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801e57e:	2c00      	cmp	r4, #0
 801e580:	f000 80f6 	beq.w	801e770 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 801e584:	2c0a      	cmp	r4, #10
 801e586:	d060      	beq.n	801e64a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801e588:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801e58a:	b36a      	cbz	r2, 801e5e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 801e58c:	8894      	ldrh	r4, [r2, #4]
 801e58e:	f1bb 0f00 	cmp.w	fp, #0
 801e592:	d03b      	beq.n	801e60c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 801e594:	f892 900d 	ldrb.w	r9, [r2, #13]
 801e598:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801e59c:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801e5a0:	f892 900a 	ldrb.w	r9, [r2, #10]
 801e5a4:	f1bb 0f01 	cmp.w	fp, #1
 801e5a8:	ea49 0903 	orr.w	r9, r9, r3
 801e5ac:	d134      	bne.n	801e618 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 801e5ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e5b0:	eba5 0509 	sub.w	r5, r5, r9
 801e5b4:	2b00      	cmp	r3, #0
 801e5b6:	d14f      	bne.n	801e658 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801e5b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e5ba:	eb09 0305 	add.w	r3, r9, r5
 801e5be:	4413      	add	r3, r2
 801e5c0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e5c2:	f9b2 2000 	ldrsh.w	r2, [r2]
 801e5c6:	4293      	cmp	r3, r2
 801e5c8:	da51      	bge.n	801e66e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801e5ca:	e038      	b.n	801e63e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801e5cc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801e5ce:	e79d      	b.n	801e50c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 801e5d0:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801e5d4:	9301      	str	r3, [sp, #4]
 801e5d6:	ab1d      	add	r3, sp, #116	; 0x74
 801e5d8:	9300      	str	r3, [sp, #0]
 801e5da:	4659      	mov	r1, fp
 801e5dc:	ab1c      	add	r3, sp, #112	; 0x70
 801e5de:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801e5e0:	f002 fafc 	bl	8020bdc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801e5e4:	4604      	mov	r4, r0
 801e5e6:	e7c0      	b.n	801e56a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 801e5e8:	f8d8 0000 	ldr.w	r0, [r8]
 801e5ec:	6803      	ldr	r3, [r0, #0]
 801e5ee:	691b      	ldr	r3, [r3, #16]
 801e5f0:	4798      	blx	r3
 801e5f2:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801e5f6:	4298      	cmp	r0, r3
 801e5f8:	f000 80a5 	beq.w	801e746 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801e5fc:	f242 030b 	movw	r3, #8203	; 0x200b
 801e600:	4298      	cmp	r0, r3
 801e602:	f000 80a0 	beq.w	801e746 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801e606:	f1bb 0f00 	cmp.w	fp, #0
 801e60a:	d100      	bne.n	801e60e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801e60c:	444d      	add	r5, r9
 801e60e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801e610:	2a00      	cmp	r2, #0
 801e612:	d1bf      	bne.n	801e594 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 801e614:	4691      	mov	r9, r2
 801e616:	e096      	b.n	801e746 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801e618:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e61a:	2b00      	cmp	r3, #0
 801e61c:	f000 80aa 	beq.w	801e774 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b6>
 801e620:	f1bb 0f00 	cmp.w	fp, #0
 801e624:	d118      	bne.n	801e658 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801e626:	f8d8 0000 	ldr.w	r0, [r8]
 801e62a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801e62c:	6803      	ldr	r3, [r0, #0]
 801e62e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e630:	4798      	blx	r3
 801e632:	4405      	add	r5, r0
 801e634:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e636:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e638:	1aeb      	subs	r3, r5, r3
 801e63a:	4293      	cmp	r3, r2
 801e63c:	dd17      	ble.n	801e66e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801e63e:	2c00      	cmp	r4, #0
 801e640:	f000 8096 	beq.w	801e770 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 801e644:	2c0a      	cmp	r4, #10
 801e646:	f040 8084 	bne.w	801e752 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x294>
 801e64a:	240a      	movs	r4, #10
 801e64c:	fab4 f084 	clz	r0, r4
 801e650:	0940      	lsrs	r0, r0, #5
 801e652:	b01f      	add	sp, #124	; 0x7c
 801e654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e658:	f8d8 0000 	ldr.w	r0, [r8]
 801e65c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801e65e:	6803      	ldr	r3, [r0, #0]
 801e660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e662:	4798      	blx	r3
 801e664:	f1bb 0f01 	cmp.w	fp, #1
 801e668:	eba5 0500 	sub.w	r5, r5, r0
 801e66c:	d0a4      	beq.n	801e5b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801e66e:	981c      	ldr	r0, [sp, #112]	; 0x70
 801e670:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801e672:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801e676:	f9b3 6000 	ldrsh.w	r6, [r3]
 801e67a:	7b43      	ldrb	r3, [r0, #13]
 801e67c:	015b      	lsls	r3, r3, #5
 801e67e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801e682:	7983      	ldrb	r3, [r0, #6]
 801e684:	4429      	add	r1, r5
 801e686:	4313      	orrs	r3, r2
 801e688:	440b      	add	r3, r1
 801e68a:	42b3      	cmp	r3, r6
 801e68c:	db5b      	blt.n	801e746 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801e68e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e690:	4299      	cmp	r1, r3
 801e692:	da58      	bge.n	801e746 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801e694:	f8d8 0000 	ldr.w	r0, [r8]
 801e698:	6803      	ldr	r3, [r0, #0]
 801e69a:	42ae      	cmp	r6, r5
 801e69c:	bfc8      	it	gt
 801e69e:	1b76      	subgt	r6, r6, r5
 801e6a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e6a2:	bfcc      	ite	gt
 801e6a4:	b2b6      	uxthgt	r6, r6
 801e6a6:	2600      	movle	r6, #0
 801e6a8:	4798      	blx	r3
 801e6aa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801e6ac:	7b5a      	ldrb	r2, [r3, #13]
 801e6ae:	00d1      	lsls	r1, r2, #3
 801e6b0:	f401 7780 	and.w	r7, r1, #256	; 0x100
 801e6b4:	7a19      	ldrb	r1, [r3, #8]
 801e6b6:	4339      	orrs	r1, r7
 801e6b8:	0657      	lsls	r7, r2, #25
 801e6ba:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801e6bc:	bf44      	itt	mi
 801e6be:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 801e6c2:	b209      	sxthmi	r1, r1
 801e6c4:	19c7      	adds	r7, r0, r7
 801e6c6:	1a7f      	subs	r7, r7, r1
 801e6c8:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801e6ca:	b2bf      	uxth	r7, r7
 801e6cc:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801e6d0:	fa0f fa87 	sxth.w	sl, r7
 801e6d4:	4551      	cmp	r1, sl
 801e6d6:	dd3a      	ble.n	801e74e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801e6d8:	0112      	lsls	r2, r2, #4
 801e6da:	79d8      	ldrb	r0, [r3, #7]
 801e6dc:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801e6e0:	4302      	orrs	r2, r0
 801e6e2:	4492      	add	sl, r2
 801e6e4:	4551      	cmp	r1, sl
 801e6e6:	dc2e      	bgt.n	801e746 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801e6e8:	1bcf      	subs	r7, r1, r7
 801e6ea:	b2bf      	uxth	r7, r7
 801e6ec:	468a      	mov	sl, r1
 801e6ee:	9319      	str	r3, [sp, #100]	; 0x64
 801e6f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e6f2:	f8d8 0000 	ldr.w	r0, [r8]
 801e6f6:	681a      	ldr	r2, [r3, #0]
 801e6f8:	6801      	ldr	r1, [r0, #0]
 801e6fa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801e6fc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801e6fe:	9313      	str	r3, [sp, #76]	; 0x4c
 801e700:	9218      	str	r2, [sp, #96]	; 0x60
 801e702:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801e704:	4788      	blx	r1
 801e706:	f898 1006 	ldrb.w	r1, [r8, #6]
 801e70a:	910b      	str	r1, [sp, #44]	; 0x2c
 801e70c:	f898 100e 	ldrb.w	r1, [r8, #14]
 801e710:	910a      	str	r1, [sp, #40]	; 0x28
 801e712:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 801e716:	9109      	str	r1, [sp, #36]	; 0x24
 801e718:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801e71a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801e71e:	9305      	str	r3, [sp, #20]
 801e720:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801e722:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801e724:	9206      	str	r2, [sp, #24]
 801e726:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801e72a:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801e72e:	e9cd a601 	strd	sl, r6, [sp, #4]
 801e732:	442e      	add	r6, r5
 801e734:	b236      	sxth	r6, r6
 801e736:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e738:	9600      	str	r6, [sp, #0]
 801e73a:	681a      	ldr	r2, [r3, #0]
 801e73c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801e73e:	685b      	ldr	r3, [r3, #4]
 801e740:	9811      	ldr	r0, [sp, #68]	; 0x44
 801e742:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e744:	47b0      	blx	r6
 801e746:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e748:	3301      	adds	r3, #1
 801e74a:	930e      	str	r3, [sp, #56]	; 0x38
 801e74c:	e6e6      	b.n	801e51c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 801e74e:	2700      	movs	r7, #0
 801e750:	e7cd      	b.n	801e6ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x230>
 801e752:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801e754:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801e756:	3501      	adds	r5, #1
 801e758:	429d      	cmp	r5, r3
 801e75a:	f6bf af77 	bge.w	801e64c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801e75e:	4659      	mov	r1, fp
 801e760:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801e762:	f7f0 f905 	bl	800e970 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e766:	4604      	mov	r4, r0
 801e768:	b110      	cbz	r0, 801e770 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 801e76a:	280a      	cmp	r0, #10
 801e76c:	d1f2      	bne.n	801e754 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 801e76e:	e76c      	b.n	801e64a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801e770:	2400      	movs	r4, #0
 801e772:	e76b      	b.n	801e64c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801e774:	f1bb 0f00 	cmp.w	fp, #0
 801e778:	f43f af5c 	beq.w	801e634 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801e77c:	e777      	b.n	801e66e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

0801e77e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801e77e:	b530      	push	{r4, r5, lr}
 801e780:	8a44      	ldrh	r4, [r0, #18]
 801e782:	8ac5      	ldrh	r5, [r0, #22]
 801e784:	82c3      	strh	r3, [r0, #22]
 801e786:	442c      	add	r4, r5
 801e788:	1ae4      	subs	r4, r4, r3
 801e78a:	8244      	strh	r4, [r0, #18]
 801e78c:	8b03      	ldrh	r3, [r0, #24]
 801e78e:	8a84      	ldrh	r4, [r0, #20]
 801e790:	4422      	add	r2, r4
 801e792:	440c      	add	r4, r1
 801e794:	1a59      	subs	r1, r3, r1
 801e796:	8342      	strh	r2, [r0, #26]
 801e798:	8284      	strh	r4, [r0, #20]
 801e79a:	8301      	strh	r1, [r0, #24]
 801e79c:	bd30      	pop	{r4, r5, pc}

0801e79e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801e79e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7a2:	7a43      	ldrb	r3, [r0, #9]
 801e7a4:	1eda      	subs	r2, r3, #3
 801e7a6:	b087      	sub	sp, #28
 801e7a8:	4604      	mov	r4, r0
 801e7aa:	b2d2      	uxtb	r2, r2
 801e7ac:	460f      	mov	r7, r1
 801e7ae:	2900      	cmp	r1, #0
 801e7b0:	d036      	beq.n	801e820 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 801e7b2:	2a01      	cmp	r2, #1
 801e7b4:	d932      	bls.n	801e81c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 801e7b6:	1e58      	subs	r0, r3, #1
 801e7b8:	f1d0 0b00 	rsbs	fp, r0, #0
 801e7bc:	eb4b 0b00 	adc.w	fp, fp, r0
 801e7c0:	1e99      	subs	r1, r3, #2
 801e7c2:	424b      	negs	r3, r1
 801e7c4:	414b      	adcs	r3, r1
 801e7c6:	9303      	str	r3, [sp, #12]
 801e7c8:	2300      	movs	r3, #0
 801e7ca:	e9cd 3301 	strd	r3, r3, [sp, #4]
 801e7ce:	2500      	movs	r5, #0
 801e7d0:	8265      	strh	r5, [r4, #18]
 801e7d2:	82a5      	strh	r5, [r4, #20]
 801e7d4:	46a9      	mov	r9, r5
 801e7d6:	f242 0a0b 	movw	sl, #8203	; 0x200b
 801e7da:	2300      	movs	r3, #0
 801e7dc:	9305      	str	r3, [sp, #20]
 801e7de:	8823      	ldrh	r3, [r4, #0]
 801e7e0:	2b20      	cmp	r3, #32
 801e7e2:	d02b      	beq.n	801e83c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 801e7e4:	eba3 020a 	sub.w	r2, r3, sl
 801e7e8:	4256      	negs	r6, r2
 801e7ea:	4156      	adcs	r6, r2
 801e7ec:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801e7f0:	4293      	cmp	r3, r2
 801e7f2:	d004      	beq.n	801e7fe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801e7f4:	4553      	cmp	r3, sl
 801e7f6:	bf16      	itet	ne
 801e7f8:	4699      	movne	r9, r3
 801e7fa:	2601      	moveq	r6, #1
 801e7fc:	2600      	movne	r6, #0
 801e7fe:	ab05      	add	r3, sp, #20
 801e800:	68e2      	ldr	r2, [r4, #12]
 801e802:	7a21      	ldrb	r1, [r4, #8]
 801e804:	6860      	ldr	r0, [r4, #4]
 801e806:	f002 f991 	bl	8020b2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801e80a:	8020      	strh	r0, [r4, #0]
 801e80c:	b9c8      	cbnz	r0, 801e842 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 801e80e:	8b22      	ldrh	r2, [r4, #24]
 801e810:	2300      	movs	r3, #0
 801e812:	4611      	mov	r1, r2
 801e814:	4620      	mov	r0, r4
 801e816:	f7ff ffb2 	bl	801e77e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801e81a:	e066      	b.n	801e8ea <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801e81c:	468b      	mov	fp, r1
 801e81e:	e7cf      	b.n	801e7c0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 801e820:	3b01      	subs	r3, #1
 801e822:	2a01      	cmp	r2, #1
 801e824:	bf8c      	ite	hi
 801e826:	2200      	movhi	r2, #0
 801e828:	2201      	movls	r2, #1
 801e82a:	2b01      	cmp	r3, #1
 801e82c:	bf8c      	ite	hi
 801e82e:	2300      	movhi	r3, #0
 801e830:	2301      	movls	r3, #1
 801e832:	9202      	str	r2, [sp, #8]
 801e834:	9301      	str	r3, [sp, #4]
 801e836:	9103      	str	r1, [sp, #12]
 801e838:	468b      	mov	fp, r1
 801e83a:	e7c8      	b.n	801e7ce <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 801e83c:	4699      	mov	r9, r3
 801e83e:	2601      	movs	r6, #1
 801e840:	e7dd      	b.n	801e7fe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801e842:	8ae3      	ldrh	r3, [r4, #22]
 801e844:	280a      	cmp	r0, #10
 801e846:	f103 0301 	add.w	r3, r3, #1
 801e84a:	82e3      	strh	r3, [r4, #22]
 801e84c:	d0df      	beq.n	801e80e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 801e84e:	9a05      	ldr	r2, [sp, #20]
 801e850:	bb42      	cbnz	r2, 801e8a4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 801e852:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801e856:	4298      	cmp	r0, r3
 801e858:	d001      	beq.n	801e85e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801e85a:	4550      	cmp	r0, sl
 801e85c:	d1bd      	bne.n	801e7da <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801e85e:	8823      	ldrh	r3, [r4, #0]
 801e860:	8b21      	ldrh	r1, [r4, #24]
 801e862:	2b20      	cmp	r3, #32
 801e864:	d001      	beq.n	801e86a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 801e866:	4553      	cmp	r3, sl
 801e868:	d131      	bne.n	801e8ce <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 801e86a:	2e00      	cmp	r6, #0
 801e86c:	bf0a      	itet	eq
 801e86e:	460d      	moveq	r5, r1
 801e870:	4630      	movne	r0, r6
 801e872:	2001      	moveq	r0, #1
 801e874:	440a      	add	r2, r1
 801e876:	8aa3      	ldrh	r3, [r4, #20]
 801e878:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801e87c:	b292      	uxth	r2, r2
 801e87e:	8322      	strh	r2, [r4, #24]
 801e880:	4413      	add	r3, r2
 801e882:	2f00      	cmp	r7, #0
 801e884:	d03a      	beq.n	801e8fc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 801e886:	f1bb 0f00 	cmp.w	fp, #0
 801e88a:	d102      	bne.n	801e892 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 801e88c:	9903      	ldr	r1, [sp, #12]
 801e88e:	b301      	cbz	r1, 801e8d2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801e890:	b1f8      	cbz	r0, 801e8d2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801e892:	8ba1      	ldrh	r1, [r4, #28]
 801e894:	4419      	add	r1, r3
 801e896:	458c      	cmp	ip, r1
 801e898:	da2a      	bge.n	801e8f0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801e89a:	8a61      	ldrh	r1, [r4, #18]
 801e89c:	b341      	cbz	r1, 801e8f0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801e89e:	4563      	cmp	r3, ip
 801e8a0:	dd9b      	ble.n	801e7da <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801e8a2:	e01c      	b.n	801e8de <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801e8a4:	8893      	ldrh	r3, [r2, #4]
 801e8a6:	8023      	strh	r3, [r4, #0]
 801e8a8:	f892 800d 	ldrb.w	r8, [r2, #13]
 801e8ac:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801e8b0:	f408 7080 	and.w	r0, r8, #256	; 0x100
 801e8b4:	f892 800a 	ldrb.w	r8, [r2, #10]
 801e8b8:	ea48 0800 	orr.w	r8, r8, r0
 801e8bc:	68e0      	ldr	r0, [r4, #12]
 801e8be:	6803      	ldr	r3, [r0, #0]
 801e8c0:	4649      	mov	r1, r9
 801e8c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e8c4:	4798      	blx	r3
 801e8c6:	eb08 0200 	add.w	r2, r8, r0
 801e8ca:	b292      	uxth	r2, r2
 801e8cc:	e7c7      	b.n	801e85e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801e8ce:	2000      	movs	r0, #0
 801e8d0:	e7d0      	b.n	801e874 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 801e8d2:	4563      	cmp	r3, ip
 801e8d4:	dd81      	ble.n	801e7da <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801e8d6:	8a63      	ldrh	r3, [r4, #18]
 801e8d8:	2b00      	cmp	r3, #0
 801e8da:	f43f af7e 	beq.w	801e7da <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801e8de:	2301      	movs	r3, #1
 801e8e0:	77a3      	strb	r3, [r4, #30]
 801e8e2:	8ba2      	ldrh	r2, [r4, #28]
 801e8e4:	8b63      	ldrh	r3, [r4, #26]
 801e8e6:	4413      	add	r3, r2
 801e8e8:	8363      	strh	r3, [r4, #26]
 801e8ea:	b007      	add	sp, #28
 801e8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e8f0:	2300      	movs	r3, #0
 801e8f2:	4611      	mov	r1, r2
 801e8f4:	4620      	mov	r0, r4
 801e8f6:	f7ff ff42 	bl	801e77e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801e8fa:	e76e      	b.n	801e7da <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801e8fc:	4563      	cmp	r3, ip
 801e8fe:	dd14      	ble.n	801e92a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 801e900:	9b02      	ldr	r3, [sp, #8]
 801e902:	b113      	cbz	r3, 801e90a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 801e904:	2301      	movs	r3, #1
 801e906:	460a      	mov	r2, r1
 801e908:	e783      	b.n	801e812 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 801e90a:	9b01      	ldr	r3, [sp, #4]
 801e90c:	2b00      	cmp	r3, #0
 801e90e:	f43f af64 	beq.w	801e7da <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801e912:	2800      	cmp	r0, #0
 801e914:	f47f af61 	bne.w	801e7da <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801e918:	b116      	cbz	r6, 801e920 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 801e91a:	2301      	movs	r3, #1
 801e91c:	462a      	mov	r2, r5
 801e91e:	e779      	b.n	801e814 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 801e920:	8a63      	ldrh	r3, [r4, #18]
 801e922:	2b00      	cmp	r3, #0
 801e924:	f43f af59 	beq.w	801e7da <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801e928:	e7df      	b.n	801e8ea <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801e92a:	2800      	cmp	r0, #0
 801e92c:	f47f af55 	bne.w	801e7da <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801e930:	2e00      	cmp	r6, #0
 801e932:	f43f af52 	beq.w	801e7da <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801e936:	2301      	movs	r3, #1
 801e938:	462a      	mov	r2, r5
 801e93a:	e7db      	b.n	801e8f4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

0801e93c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801e93c:	b530      	push	{r4, r5, lr}
 801e93e:	4605      	mov	r5, r0
 801e940:	b08b      	sub	sp, #44	; 0x2c
 801e942:	b191      	cbz	r1, 801e96a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 801e944:	e9cd 3100 	strd	r3, r1, [sp]
 801e948:	4613      	mov	r3, r2
 801e94a:	4601      	mov	r1, r0
 801e94c:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801e950:	a802      	add	r0, sp, #8
 801e952:	f7ff fd0d 	bl	801e370 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801e956:	2401      	movs	r4, #1
 801e958:	2100      	movs	r1, #0
 801e95a:	a802      	add	r0, sp, #8
 801e95c:	f7ff ff1f 	bl	801e79e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801e960:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801e964:	b163      	cbz	r3, 801e980 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801e966:	3401      	adds	r4, #1
 801e968:	e7f6      	b.n	801e958 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 801e96a:	f002 f9d7 	bl	8020d1c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801e96e:	2401      	movs	r4, #1
 801e970:	280a      	cmp	r0, #10
 801e972:	4628      	mov	r0, r5
 801e974:	bf08      	it	eq
 801e976:	3401      	addeq	r4, #1
 801e978:	f002 f9d0 	bl	8020d1c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801e97c:	2800      	cmp	r0, #0
 801e97e:	d1f7      	bne.n	801e970 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801e980:	b2a0      	uxth	r0, r4
 801e982:	b00b      	add	sp, #44	; 0x2c
 801e984:	bd30      	pop	{r4, r5, pc}

0801e986 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801e986:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e98a:	b0db      	sub	sp, #364	; 0x16c
 801e98c:	4689      	mov	r9, r1
 801e98e:	f8dd a190 	ldr.w	sl, [sp, #400]	; 0x190
 801e992:	900a      	str	r0, [sp, #40]	; 0x28
 801e994:	461c      	mov	r4, r3
 801e996:	f1ba 0f00 	cmp.w	sl, #0
 801e99a:	f000 80a5 	beq.w	801eae8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801e99e:	681b      	ldr	r3, [r3, #0]
 801e9a0:	2b00      	cmp	r3, #0
 801e9a2:	f000 80a1 	beq.w	801eae8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801e9a6:	7ba3      	ldrb	r3, [r4, #14]
 801e9a8:	2b00      	cmp	r3, #0
 801e9aa:	f000 809d 	beq.w	801eae8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801e9ae:	6810      	ldr	r0, [r2, #0]
 801e9b0:	6851      	ldr	r1, [r2, #4]
 801e9b2:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 801e9b6:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 801e9ba:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 801e9be:	4643      	mov	r3, r8
 801e9c0:	c303      	stmia	r3!, {r0, r1}
 801e9c2:	2500      	movs	r5, #0
 801e9c4:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 801e9c8:	79a2      	ldrb	r2, [r4, #6]
 801e9ca:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801e9ce:	a90e      	add	r1, sp, #56	; 0x38
 801e9d0:	4640      	mov	r0, r8
 801e9d2:	950e      	str	r5, [sp, #56]	; 0x38
 801e9d4:	f7ff fd42 	bl	801e45c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801e9d8:	a90e      	add	r1, sp, #56	; 0x38
 801e9da:	4608      	mov	r0, r1
 801e9dc:	79a2      	ldrb	r2, [r4, #6]
 801e9de:	af18      	add	r7, sp, #96	; 0x60
 801e9e0:	f7ff fd3c 	bl	801e45c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801e9e4:	4638      	mov	r0, r7
 801e9e6:	f001 fd62 	bl	80204ae <_ZN8touchgfx12TextProviderC1Ev>
 801e9ea:	6820      	ldr	r0, [r4, #0]
 801e9ec:	6803      	ldr	r3, [r0, #0]
 801e9ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e9f0:	4798      	blx	r3
 801e9f2:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801e9f4:	4603      	mov	r3, r0
 801e9f6:	4651      	mov	r1, sl
 801e9f8:	4638      	mov	r0, r7
 801e9fa:	f001 fd9d 	bl	8020538 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801e9fe:	6820      	ldr	r0, [r4, #0]
 801ea00:	7923      	ldrb	r3, [r4, #4]
 801ea02:	9308      	str	r3, [sp, #32]
 801ea04:	6803      	ldr	r3, [r0, #0]
 801ea06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ea08:	4798      	blx	r3
 801ea0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ea0e:	181e      	adds	r6, r3, r0
 801ea10:	42ae      	cmp	r6, r5
 801ea12:	dd06      	ble.n	801ea22 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 801ea14:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 801ea18:	4282      	cmp	r2, r0
 801ea1a:	bfa4      	itt	ge
 801ea1c:	189d      	addge	r5, r3, r2
 801ea1e:	fb95 f5f6 	sdivge	r5, r5, r6
 801ea22:	a82e      	add	r0, sp, #184	; 0xb8
 801ea24:	f001 fd43 	bl	80204ae <_ZN8touchgfx12TextProviderC1Ev>
 801ea28:	7c23      	ldrb	r3, [r4, #16]
 801ea2a:	b14b      	cbz	r3, 801ea40 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xba>
 801ea2c:	6820      	ldr	r0, [r4, #0]
 801ea2e:	6803      	ldr	r3, [r0, #0]
 801ea30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ea32:	4798      	blx	r3
 801ea34:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801ea36:	4603      	mov	r3, r0
 801ea38:	4651      	mov	r1, sl
 801ea3a:	a82e      	add	r0, sp, #184	; 0xb8
 801ea3c:	f001 fd7c 	bl	8020538 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801ea40:	7c21      	ldrb	r1, [r4, #16]
 801ea42:	9101      	str	r1, [sp, #4]
 801ea44:	6821      	ldr	r1, [r4, #0]
 801ea46:	7963      	ldrb	r3, [r4, #5]
 801ea48:	9100      	str	r1, [sp, #0]
 801ea4a:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801ea4e:	a92e      	add	r1, sp, #184	; 0xb8
 801ea50:	a810      	add	r0, sp, #64	; 0x40
 801ea52:	f7ff fc8d 	bl	801e370 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801ea56:	7c23      	ldrb	r3, [r4, #16]
 801ea58:	b9bb      	cbnz	r3, 801ea8a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x104>
 801ea5a:	fa1f fa86 	uxth.w	sl, r6
 801ea5e:	2d00      	cmp	r5, #0
 801ea60:	dd45      	ble.n	801eaee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 801ea62:	4638      	mov	r0, r7
 801ea64:	f002 f95a 	bl	8020d1c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801ea68:	2800      	cmp	r0, #0
 801ea6a:	d03d      	beq.n	801eae8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801ea6c:	280a      	cmp	r0, #10
 801ea6e:	d1f6      	bne.n	801ea5e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 801ea70:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801ea74:	4453      	add	r3, sl
 801ea76:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801ea7a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801ea7e:	eba3 030a 	sub.w	r3, r3, sl
 801ea82:	3d01      	subs	r5, #1
 801ea84:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801ea88:	e7e9      	b.n	801ea5e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 801ea8a:	0073      	lsls	r3, r6, #1
 801ea8c:	9309      	str	r3, [sp, #36]	; 0x24
 801ea8e:	f64f 7bff 	movw	fp, #65535	; 0xffff
 801ea92:	fa1f fa86 	uxth.w	sl, r6
 801ea96:	2d00      	cmp	r5, #0
 801ea98:	dd29      	ble.n	801eaee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 801ea9a:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 801ea9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eaa0:	428b      	cmp	r3, r1
 801eaa2:	bfd4      	ite	le
 801eaa4:	2100      	movle	r1, #0
 801eaa6:	2101      	movgt	r1, #1
 801eaa8:	a810      	add	r0, sp, #64	; 0x40
 801eaaa:	f7ff fe78 	bl	801e79e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801eaae:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 801eab2:	3b01      	subs	r3, #1
 801eab4:	b29b      	uxth	r3, r3
 801eab6:	455b      	cmp	r3, fp
 801eab8:	930b      	str	r3, [sp, #44]	; 0x2c
 801eaba:	d005      	beq.n	801eac8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 801eabc:	7961      	ldrb	r1, [r4, #5]
 801eabe:	4638      	mov	r0, r7
 801eac0:	f7ef ff56 	bl	800e970 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801eac4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eac6:	e7f4      	b.n	801eab2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12c>
 801eac8:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801eacc:	4453      	add	r3, sl
 801eace:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801ead2:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801ead6:	eba3 030a 	sub.w	r3, r3, sl
 801eada:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801eade:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801eae2:	3d01      	subs	r5, #1
 801eae4:	2b00      	cmp	r3, #0
 801eae6:	d1d6      	bne.n	801ea96 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x110>
 801eae8:	b05b      	add	sp, #364	; 0x16c
 801eaea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eaee:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 801eaf2:	ad44      	add	r5, sp, #272	; 0x110
 801eaf4:	f04f 0b00 	mov.w	fp, #0
 801eaf8:	7c23      	ldrb	r3, [r4, #16]
 801eafa:	2b00      	cmp	r3, #0
 801eafc:	d067      	beq.n	801ebce <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 801eafe:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 801eb02:	458a      	cmp	sl, r1
 801eb04:	bfd4      	ite	le
 801eb06:	2100      	movle	r1, #0
 801eb08:	2101      	movgt	r1, #1
 801eb0a:	a810      	add	r0, sp, #64	; 0x40
 801eb0c:	f7ff fe47 	bl	801e79e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801eb10:	9b08      	ldr	r3, [sp, #32]
 801eb12:	2b00      	cmp	r3, #0
 801eb14:	d056      	beq.n	801ebc4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 801eb16:	7c23      	ldrb	r3, [r4, #16]
 801eb18:	9309      	str	r3, [sp, #36]	; 0x24
 801eb1a:	2258      	movs	r2, #88	; 0x58
 801eb1c:	4639      	mov	r1, r7
 801eb1e:	4628      	mov	r0, r5
 801eb20:	f00f fd3f 	bl	802e5a2 <memcpy>
 801eb24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eb26:	2b00      	cmp	r3, #0
 801eb28:	d059      	beq.n	801ebde <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 801eb2a:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 801eb2e:	7922      	ldrb	r2, [r4, #4]
 801eb30:	2a01      	cmp	r2, #1
 801eb32:	d13d      	bne.n	801ebb0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x22a>
 801eb34:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 801eb38:	1ac0      	subs	r0, r0, r3
 801eb3a:	2302      	movs	r3, #2
 801eb3c:	fb90 f0f3 	sdiv	r0, r0, r3
 801eb40:	b200      	sxth	r0, r0
 801eb42:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801eb46:	4418      	add	r0, r3
 801eb48:	7c23      	ldrb	r3, [r4, #16]
 801eb4a:	f8ad 0110 	strh.w	r0, [sp, #272]	; 0x110
 801eb4e:	2b00      	cmp	r3, #0
 801eb50:	d03a      	beq.n	801ebc8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 801eb52:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 801eb56:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 801eb5a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801eb5e:	9500      	str	r5, [sp, #0]
 801eb60:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801eb64:	e9cd b703 	strd	fp, r7, [sp, #12]
 801eb68:	e9cd 8401 	strd	r8, r4, [sp, #4]
 801eb6c:	464a      	mov	r2, r9
 801eb6e:	2100      	movs	r1, #0
 801eb70:	980a      	ldr	r0, [sp, #40]	; 0x28
 801eb72:	f7ff fca4 	bl	801e4be <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801eb76:	2800      	cmp	r0, #0
 801eb78:	d1b6      	bne.n	801eae8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801eb7a:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801eb7e:	b2b2      	uxth	r2, r6
 801eb80:	4611      	mov	r1, r2
 801eb82:	4413      	add	r3, r2
 801eb84:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 801eb88:	1a52      	subs	r2, r2, r1
 801eb8a:	7c21      	ldrb	r1, [r4, #16]
 801eb8c:	b21b      	sxth	r3, r3
 801eb8e:	b212      	sxth	r2, r2
 801eb90:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801eb94:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801eb98:	b109      	cbz	r1, 801eb9e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x218>
 801eb9a:	42b2      	cmp	r2, r6
 801eb9c:	dba4      	blt.n	801eae8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801eb9e:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 801eba2:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 801eba6:	440a      	add	r2, r1
 801eba8:	b212      	sxth	r2, r2
 801ebaa:	4293      	cmp	r3, r2
 801ebac:	dda4      	ble.n	801eaf8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x172>
 801ebae:	e79b      	b.n	801eae8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801ebb0:	2a02      	cmp	r2, #2
 801ebb2:	d105      	bne.n	801ebc0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23a>
 801ebb4:	7be2      	ldrb	r2, [r4, #15]
 801ebb6:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 801ebba:	1a80      	subs	r0, r0, r2
 801ebbc:	1ac0      	subs	r0, r0, r3
 801ebbe:	e7bf      	b.n	801eb40 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ba>
 801ebc0:	2000      	movs	r0, #0
 801ebc2:	e7be      	b.n	801eb42 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 801ebc4:	7be0      	ldrb	r0, [r4, #15]
 801ebc6:	e7bc      	b.n	801eb42 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 801ebc8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801ebcc:	e7c3      	b.n	801eb56 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d0>
 801ebce:	9b08      	ldr	r3, [sp, #32]
 801ebd0:	2b00      	cmp	r3, #0
 801ebd2:	d0f7      	beq.n	801ebc4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 801ebd4:	2258      	movs	r2, #88	; 0x58
 801ebd6:	4639      	mov	r1, r7
 801ebd8:	4628      	mov	r0, r5
 801ebda:	f00f fce2 	bl	802e5a2 <memcpy>
 801ebde:	2300      	movs	r3, #0
 801ebe0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801ebe4:	6821      	ldr	r1, [r4, #0]
 801ebe6:	4628      	mov	r0, r5
 801ebe8:	f7ff fbfc 	bl	801e3e4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801ebec:	b203      	sxth	r3, r0
 801ebee:	e79e      	b.n	801eb2e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a8>

0801ebf0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801ebf0:	b510      	push	{r4, lr}
 801ebf2:	2b02      	cmp	r3, #2
 801ebf4:	f9b0 4000 	ldrsh.w	r4, [r0]
 801ebf8:	d00b      	beq.n	801ec12 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801ebfa:	2b03      	cmp	r3, #3
 801ebfc:	d00e      	beq.n	801ec1c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801ebfe:	2b01      	cmp	r3, #1
 801ec00:	d001      	beq.n	801ec06 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801ec02:	1860      	adds	r0, r4, r1
 801ec04:	bd10      	pop	{r4, pc}
 801ec06:	8880      	ldrh	r0, [r0, #4]
 801ec08:	4420      	add	r0, r4
 801ec0a:	b200      	sxth	r0, r0
 801ec0c:	1a80      	subs	r0, r0, r2
 801ec0e:	3801      	subs	r0, #1
 801ec10:	e7f8      	b.n	801ec04 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801ec12:	8880      	ldrh	r0, [r0, #4]
 801ec14:	4420      	add	r0, r4
 801ec16:	b200      	sxth	r0, r0
 801ec18:	1a40      	subs	r0, r0, r1
 801ec1a:	e7f8      	b.n	801ec0e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801ec1c:	18a0      	adds	r0, r4, r2
 801ec1e:	e7f1      	b.n	801ec04 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0801ec20 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801ec20:	b510      	push	{r4, lr}
 801ec22:	2b02      	cmp	r3, #2
 801ec24:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801ec28:	d006      	beq.n	801ec38 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801ec2a:	2b03      	cmp	r3, #3
 801ec2c:	d00a      	beq.n	801ec44 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801ec2e:	2b01      	cmp	r3, #1
 801ec30:	bf14      	ite	ne
 801ec32:	18a0      	addne	r0, r4, r2
 801ec34:	1860      	addeq	r0, r4, r1
 801ec36:	bd10      	pop	{r4, pc}
 801ec38:	88c0      	ldrh	r0, [r0, #6]
 801ec3a:	4420      	add	r0, r4
 801ec3c:	b200      	sxth	r0, r0
 801ec3e:	1a80      	subs	r0, r0, r2
 801ec40:	3801      	subs	r0, #1
 801ec42:	e7f8      	b.n	801ec36 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801ec44:	88c0      	ldrh	r0, [r0, #6]
 801ec46:	4420      	add	r0, r4
 801ec48:	b200      	sxth	r0, r0
 801ec4a:	1a40      	subs	r0, r0, r1
 801ec4c:	e7f8      	b.n	801ec40 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0801ec50 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801ec50:	4b01      	ldr	r3, [pc, #4]	; (801ec58 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801ec52:	2200      	movs	r2, #0
 801ec54:	601a      	str	r2, [r3, #0]
 801ec56:	4770      	bx	lr
 801ec58:	200127fc 	.word	0x200127fc

0801ec5c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 801ec5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ec5e:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 801ec62:	1e05      	subs	r5, r0, #0
 801ec64:	bfba      	itte	lt
 801ec66:	f04f 37ff 	movlt.w	r7, #4294967295
 801ec6a:	426d      	neglt	r5, r5
 801ec6c:	2701      	movge	r7, #1
 801ec6e:	f1be 0f00 	cmp.w	lr, #0
 801ec72:	bfb8      	it	lt
 801ec74:	f1ce 0e00 	rsblt	lr, lr, #0
 801ec78:	f04f 0601 	mov.w	r6, #1
 801ec7c:	fa4e f001 	asr.w	r0, lr, r1
 801ec80:	fa06 f101 	lsl.w	r1, r6, r1
 801ec84:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801ec88:	f101 31ff 	add.w	r1, r1, #4294967295
 801ec8c:	ea01 010e 	and.w	r1, r1, lr
 801ec90:	bfb8      	it	lt
 801ec92:	427f      	neglt	r7, r7
 801ec94:	434d      	muls	r5, r1
 801ec96:	2c00      	cmp	r4, #0
 801ec98:	f8dc 1000 	ldr.w	r1, [ip]
 801ec9c:	bfb8      	it	lt
 801ec9e:	4264      	neglt	r4, r4
 801eca0:	fb03 1300 	mla	r3, r3, r0, r1
 801eca4:	fb95 f1f4 	sdiv	r1, r5, r4
 801eca8:	fb04 5511 	mls	r5, r4, r1, r5
 801ecac:	441d      	add	r5, r3
 801ecae:	fb95 f3f4 	sdiv	r3, r5, r4
 801ecb2:	fb04 5413 	mls	r4, r4, r3, r5
 801ecb6:	4419      	add	r1, r3
 801ecb8:	bfb8      	it	lt
 801ecba:	427f      	neglt	r7, r7
 801ecbc:	fb02 1000 	mla	r0, r2, r0, r1
 801ecc0:	f8cc 4000 	str.w	r4, [ip]
 801ecc4:	4378      	muls	r0, r7
 801ecc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ecc8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801ecc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eccc:	4c24      	ldr	r4, [pc, #144]	; (801ed60 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 801ecce:	6807      	ldr	r7, [r0, #0]
 801ecd0:	69a3      	ldr	r3, [r4, #24]
 801ecd2:	b086      	sub	sp, #24
 801ecd4:	4605      	mov	r5, r0
 801ecd6:	b92b      	cbnz	r3, 801ece4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 801ecd8:	6840      	ldr	r0, [r0, #4]
 801ecda:	e9c5 7000 	strd	r7, r0, [r5]
 801ecde:	b006      	add	sp, #24
 801ece0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ece4:	68a2      	ldr	r2, [r4, #8]
 801ece6:	6820      	ldr	r0, [r4, #0]
 801ece8:	ae06      	add	r6, sp, #24
 801ecea:	f04f 0802 	mov.w	r8, #2
 801ecee:	fb93 f1f8 	sdiv	r1, r3, r8
 801ecf2:	440a      	add	r2, r1
 801ecf4:	f846 2d04 	str.w	r2, [r6, #-4]!
 801ecf8:	69e1      	ldr	r1, [r4, #28]
 801ecfa:	9700      	str	r7, [sp, #0]
 801ecfc:	e9cd 3601 	strd	r3, r6, [sp, #4]
 801ed00:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801ed02:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801ed04:	f7ff ffaa 	bl	801ec5c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801ed08:	69a3      	ldr	r3, [r4, #24]
 801ed0a:	9301      	str	r3, [sp, #4]
 801ed0c:	686b      	ldr	r3, [r5, #4]
 801ed0e:	9300      	str	r3, [sp, #0]
 801ed10:	4607      	mov	r7, r0
 801ed12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ed14:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801ed16:	6a21      	ldr	r1, [r4, #32]
 801ed18:	9602      	str	r6, [sp, #8]
 801ed1a:	6860      	ldr	r0, [r4, #4]
 801ed1c:	f7ff ff9e 	bl	801ec5c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801ed20:	6963      	ldr	r3, [r4, #20]
 801ed22:	69a2      	ldr	r2, [r4, #24]
 801ed24:	fb92 f8f8 	sdiv	r8, r2, r8
 801ed28:	4443      	add	r3, r8
 801ed2a:	9305      	str	r3, [sp, #20]
 801ed2c:	682b      	ldr	r3, [r5, #0]
 801ed2e:	9300      	str	r3, [sp, #0]
 801ed30:	e9cd 2601 	strd	r2, r6, [sp, #4]
 801ed34:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801ed36:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801ed38:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801ed3a:	4407      	add	r7, r0
 801ed3c:	68e0      	ldr	r0, [r4, #12]
 801ed3e:	f7ff ff8d 	bl	801ec5c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801ed42:	69a3      	ldr	r3, [r4, #24]
 801ed44:	9301      	str	r3, [sp, #4]
 801ed46:	686b      	ldr	r3, [r5, #4]
 801ed48:	9300      	str	r3, [sp, #0]
 801ed4a:	4680      	mov	r8, r0
 801ed4c:	9602      	str	r6, [sp, #8]
 801ed4e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801ed50:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801ed52:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801ed54:	6920      	ldr	r0, [r4, #16]
 801ed56:	f7ff ff81 	bl	801ec5c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801ed5a:	4440      	add	r0, r8
 801ed5c:	e7bd      	b.n	801ecda <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 801ed5e:	bf00      	nop
 801ed60:	20012800 	.word	0x20012800

0801ed64 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801ed64:	b510      	push	{r4, lr}
 801ed66:	4b07      	ldr	r3, [pc, #28]	; (801ed84 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801ed68:	781b      	ldrb	r3, [r3, #0]
 801ed6a:	2b01      	cmp	r3, #1
 801ed6c:	d108      	bne.n	801ed80 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801ed6e:	4b06      	ldr	r3, [pc, #24]	; (801ed88 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801ed70:	880c      	ldrh	r4, [r1, #0]
 801ed72:	881b      	ldrh	r3, [r3, #0]
 801ed74:	f9b0 2000 	ldrsh.w	r2, [r0]
 801ed78:	3b01      	subs	r3, #1
 801ed7a:	1b1b      	subs	r3, r3, r4
 801ed7c:	8003      	strh	r3, [r0, #0]
 801ed7e:	800a      	strh	r2, [r1, #0]
 801ed80:	bd10      	pop	{r4, pc}
 801ed82:	bf00      	nop
 801ed84:	200127ec 	.word	0x200127ec
 801ed88:	200127f0 	.word	0x200127f0

0801ed8c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801ed8c:	b510      	push	{r4, lr}
 801ed8e:	4b0a      	ldr	r3, [pc, #40]	; (801edb8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801ed90:	781b      	ldrb	r3, [r3, #0]
 801ed92:	2b01      	cmp	r3, #1
 801ed94:	d10e      	bne.n	801edb4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801ed96:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801ed9a:	8843      	ldrh	r3, [r0, #2]
 801ed9c:	f9b0 4000 	ldrsh.w	r4, [r0]
 801eda0:	8044      	strh	r4, [r0, #2]
 801eda2:	18ca      	adds	r2, r1, r3
 801eda4:	4b05      	ldr	r3, [pc, #20]	; (801edbc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801eda6:	881b      	ldrh	r3, [r3, #0]
 801eda8:	1a9b      	subs	r3, r3, r2
 801edaa:	8003      	strh	r3, [r0, #0]
 801edac:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801edb0:	80c3      	strh	r3, [r0, #6]
 801edb2:	8081      	strh	r1, [r0, #4]
 801edb4:	bd10      	pop	{r4, pc}
 801edb6:	bf00      	nop
 801edb8:	200127ec 	.word	0x200127ec
 801edbc:	200127e8 	.word	0x200127e8

0801edc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801edc0:	b510      	push	{r4, lr}
 801edc2:	4b07      	ldr	r3, [pc, #28]	; (801ede0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801edc4:	781b      	ldrb	r3, [r3, #0]
 801edc6:	2b01      	cmp	r3, #1
 801edc8:	d108      	bne.n	801eddc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801edca:	f9b1 3000 	ldrsh.w	r3, [r1]
 801edce:	f9b0 4000 	ldrsh.w	r4, [r0]
 801edd2:	8003      	strh	r3, [r0, #0]
 801edd4:	8893      	ldrh	r3, [r2, #4]
 801edd6:	3b01      	subs	r3, #1
 801edd8:	1b1b      	subs	r3, r3, r4
 801edda:	800b      	strh	r3, [r1, #0]
 801eddc:	bd10      	pop	{r4, pc}
 801edde:	bf00      	nop
 801ede0:	200127ec 	.word	0x200127ec

0801ede4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801ede4:	b513      	push	{r0, r1, r4, lr}
 801ede6:	4b08      	ldr	r3, [pc, #32]	; (801ee08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801ede8:	f9b3 2000 	ldrsh.w	r2, [r3]
 801edec:	4b07      	ldr	r3, [pc, #28]	; (801ee0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 801edee:	f8ad 2004 	strh.w	r2, [sp, #4]
 801edf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801edf6:	f8ad 3006 	strh.w	r3, [sp, #6]
 801edfa:	2400      	movs	r4, #0
 801edfc:	466a      	mov	r2, sp
 801edfe:	9400      	str	r4, [sp, #0]
 801ee00:	f7ff ffde 	bl	801edc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801ee04:	b002      	add	sp, #8
 801ee06:	bd10      	pop	{r4, pc}
 801ee08:	200127e8 	.word	0x200127e8
 801ee0c:	200127ea 	.word	0x200127ea

0801ee10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801ee10:	b510      	push	{r4, lr}
 801ee12:	4b0a      	ldr	r3, [pc, #40]	; (801ee3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801ee14:	781b      	ldrb	r3, [r3, #0]
 801ee16:	2b01      	cmp	r3, #1
 801ee18:	460a      	mov	r2, r1
 801ee1a:	d10d      	bne.n	801ee38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801ee1c:	8881      	ldrh	r1, [r0, #4]
 801ee1e:	8803      	ldrh	r3, [r0, #0]
 801ee20:	440b      	add	r3, r1
 801ee22:	4601      	mov	r1, r0
 801ee24:	3b01      	subs	r3, #1
 801ee26:	f821 3b02 	strh.w	r3, [r1], #2
 801ee2a:	f7ff ffc9 	bl	801edc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801ee2e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801ee32:	88c2      	ldrh	r2, [r0, #6]
 801ee34:	8082      	strh	r2, [r0, #4]
 801ee36:	80c3      	strh	r3, [r0, #6]
 801ee38:	bd10      	pop	{r4, pc}
 801ee3a:	bf00      	nop
 801ee3c:	200127ec 	.word	0x200127ec

0801ee40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801ee40:	b507      	push	{r0, r1, r2, lr}
 801ee42:	4b09      	ldr	r3, [pc, #36]	; (801ee68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801ee44:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ee48:	4b08      	ldr	r3, [pc, #32]	; (801ee6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 801ee4a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801ee4e:	2100      	movs	r1, #0
 801ee50:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ee54:	9100      	str	r1, [sp, #0]
 801ee56:	4669      	mov	r1, sp
 801ee58:	f8ad 3006 	strh.w	r3, [sp, #6]
 801ee5c:	f7ff ffd8 	bl	801ee10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ee60:	b003      	add	sp, #12
 801ee62:	f85d fb04 	ldr.w	pc, [sp], #4
 801ee66:	bf00      	nop
 801ee68:	200127e8 	.word	0x200127e8
 801ee6c:	200127ea 	.word	0x200127ea

0801ee70 <_ZN8touchgfx11Application13requestRedrawEv>:
 801ee70:	4b06      	ldr	r3, [pc, #24]	; (801ee8c <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801ee72:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ee76:	4b06      	ldr	r3, [pc, #24]	; (801ee90 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801ee78:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801ee7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ee80:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801ee84:	2100      	movs	r1, #0
 801ee86:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 801ee8a:	4770      	bx	lr
 801ee8c:	200127e8 	.word	0x200127e8
 801ee90:	200127ea 	.word	0x200127ea

0801ee94 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801ee94:	4b03      	ldr	r3, [pc, #12]	; (801eea4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801ee96:	6818      	ldr	r0, [r3, #0]
 801ee98:	b110      	cbz	r0, 801eea0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801ee9a:	6803      	ldr	r3, [r0, #0]
 801ee9c:	699b      	ldr	r3, [r3, #24]
 801ee9e:	4718      	bx	r3
 801eea0:	4770      	bx	lr
 801eea2:	bf00      	nop
 801eea4:	20012850 	.word	0x20012850

0801eea8 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801eea8:	4770      	bx	lr
	...

0801eeac <_ZN8touchgfx11Application4drawEv>:
 801eeac:	b507      	push	{r0, r1, r2, lr}
 801eeae:	4b09      	ldr	r3, [pc, #36]	; (801eed4 <_ZN8touchgfx11Application4drawEv+0x28>)
 801eeb0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801eeb4:	4b08      	ldr	r3, [pc, #32]	; (801eed8 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801eeb6:	f8ad 2004 	strh.w	r2, [sp, #4]
 801eeba:	f9b3 3000 	ldrsh.w	r3, [r3]
 801eebe:	f8ad 3006 	strh.w	r3, [sp, #6]
 801eec2:	6803      	ldr	r3, [r0, #0]
 801eec4:	2100      	movs	r1, #0
 801eec6:	9100      	str	r1, [sp, #0]
 801eec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801eeca:	4669      	mov	r1, sp
 801eecc:	4798      	blx	r3
 801eece:	b003      	add	sp, #12
 801eed0:	f85d fb04 	ldr.w	pc, [sp], #4
 801eed4:	200127e8 	.word	0x200127e8
 801eed8:	200127ea 	.word	0x200127ea

0801eedc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801eedc:	4b03      	ldr	r3, [pc, #12]	; (801eeec <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801eede:	6818      	ldr	r0, [r3, #0]
 801eee0:	b110      	cbz	r0, 801eee8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801eee2:	6803      	ldr	r3, [r0, #0]
 801eee4:	69db      	ldr	r3, [r3, #28]
 801eee6:	4718      	bx	r3
 801eee8:	4770      	bx	lr
 801eeea:	bf00      	nop
 801eeec:	20012850 	.word	0x20012850

0801eef0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801eef0:	4b03      	ldr	r3, [pc, #12]	; (801ef00 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801eef2:	6818      	ldr	r0, [r3, #0]
 801eef4:	b110      	cbz	r0, 801eefc <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801eef6:	6803      	ldr	r3, [r0, #0]
 801eef8:	6a1b      	ldr	r3, [r3, #32]
 801eefa:	4718      	bx	r3
 801eefc:	4770      	bx	lr
 801eefe:	bf00      	nop
 801ef00:	20012850 	.word	0x20012850

0801ef04 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801ef04:	4b03      	ldr	r3, [pc, #12]	; (801ef14 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801ef06:	6818      	ldr	r0, [r3, #0]
 801ef08:	b110      	cbz	r0, 801ef10 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801ef0a:	6803      	ldr	r3, [r0, #0]
 801ef0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ef0e:	4718      	bx	r3
 801ef10:	4770      	bx	lr
 801ef12:	bf00      	nop
 801ef14:	20012850 	.word	0x20012850

0801ef18 <_ZN8touchgfx11Application15handleTickEventEv>:
 801ef18:	b570      	push	{r4, r5, r6, lr}
 801ef1a:	4d34      	ldr	r5, [pc, #208]	; (801efec <_ZN8touchgfx11Application15handleTickEventEv+0xd4>)
 801ef1c:	4604      	mov	r4, r0
 801ef1e:	6828      	ldr	r0, [r5, #0]
 801ef20:	b140      	cbz	r0, 801ef34 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801ef22:	7a03      	ldrb	r3, [r0, #8]
 801ef24:	b933      	cbnz	r3, 801ef34 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801ef26:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801ef2a:	6803      	ldr	r3, [r0, #0]
 801ef2c:	689b      	ldr	r3, [r3, #8]
 801ef2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ef32:	4718      	bx	r3
 801ef34:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 801ef38:	b97b      	cbnz	r3, 801ef5a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801ef3a:	b170      	cbz	r0, 801ef5a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801ef3c:	7a03      	ldrb	r3, [r0, #8]
 801ef3e:	b163      	cbz	r3, 801ef5a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801ef40:	4b2b      	ldr	r3, [pc, #172]	; (801eff0 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 801ef42:	6818      	ldr	r0, [r3, #0]
 801ef44:	b110      	cbz	r0, 801ef4c <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801ef46:	6803      	ldr	r3, [r0, #0]
 801ef48:	691b      	ldr	r3, [r3, #16]
 801ef4a:	4798      	blx	r3
 801ef4c:	6828      	ldr	r0, [r5, #0]
 801ef4e:	6803      	ldr	r3, [r0, #0]
 801ef50:	68db      	ldr	r3, [r3, #12]
 801ef52:	4798      	blx	r3
 801ef54:	2301      	movs	r3, #1
 801ef56:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801ef5a:	2500      	movs	r5, #0
 801ef5c:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801ef60:	42a8      	cmp	r0, r5
 801ef62:	dd0c      	ble.n	801ef7e <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801ef64:	1963      	adds	r3, r4, r5
 801ef66:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801ef6a:	b132      	cbz	r2, 801ef7a <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 801ef6c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801ef70:	4413      	add	r3, r2
 801ef72:	6858      	ldr	r0, [r3, #4]
 801ef74:	6803      	ldr	r3, [r0, #0]
 801ef76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ef78:	4798      	blx	r3
 801ef7a:	3501      	adds	r5, #1
 801ef7c:	e7ee      	b.n	801ef5c <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801ef7e:	2300      	movs	r3, #0
 801ef80:	461a      	mov	r2, r3
 801ef82:	4298      	cmp	r0, r3
 801ef84:	d114      	bne.n	801efb0 <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 801ef86:	1d25      	adds	r5, r4, #4
 801ef88:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 801ef8c:	1e48      	subs	r0, r1, #1
 801ef8e:	b280      	uxth	r0, r0
 801ef90:	4291      	cmp	r1, r2
 801ef92:	dd24      	ble.n	801efde <_ZN8touchgfx11Application15handleTickEventEv+0xc6>
 801ef94:	4288      	cmp	r0, r1
 801ef96:	d2fb      	bcs.n	801ef90 <_ZN8touchgfx11Application15handleTickEventEv+0x78>
 801ef98:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 801ef9c:	3304      	adds	r3, #4
 801ef9e:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 801efa2:	428b      	cmp	r3, r1
 801efa4:	d018      	beq.n	801efd8 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 801efa6:	f853 6f04 	ldr.w	r6, [r3, #4]!
 801efaa:	f843 6c04 	str.w	r6, [r3, #-4]
 801efae:	e7f8      	b.n	801efa2 <_ZN8touchgfx11Application15handleTickEventEv+0x8a>
 801efb0:	18e1      	adds	r1, r4, r3
 801efb2:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 801efb6:	b16d      	cbz	r5, 801efd4 <_ZN8touchgfx11Application15handleTickEventEv+0xbc>
 801efb8:	429a      	cmp	r2, r3
 801efba:	d00a      	beq.n	801efd2 <_ZN8touchgfx11Application15handleTickEventEv+0xba>
 801efbc:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801efc0:	4431      	add	r1, r6
 801efc2:	684e      	ldr	r6, [r1, #4]
 801efc4:	b291      	uxth	r1, r2
 801efc6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801efca:	604e      	str	r6, [r1, #4]
 801efcc:	18a1      	adds	r1, r4, r2
 801efce:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801efd2:	3201      	adds	r2, #1
 801efd4:	3301      	adds	r3, #1
 801efd6:	e7d4      	b.n	801ef82 <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801efd8:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 801efdc:	e7d4      	b.n	801ef88 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 801efde:	4b04      	ldr	r3, [pc, #16]	; (801eff0 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 801efe0:	6818      	ldr	r0, [r3, #0]
 801efe2:	b110      	cbz	r0, 801efea <_ZN8touchgfx11Application15handleTickEventEv+0xd2>
 801efe4:	6803      	ldr	r3, [r0, #0]
 801efe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801efe8:	e7a1      	b.n	801ef2e <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801efea:	bd70      	pop	{r4, r5, r6, pc}
 801efec:	20012854 	.word	0x20012854
 801eff0:	20012850 	.word	0x20012850

0801eff4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801eff4:	b570      	push	{r4, r5, r6, lr}
 801eff6:	4606      	mov	r6, r0
 801eff8:	460c      	mov	r4, r1
 801effa:	b929      	cbnz	r1, 801f008 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801effc:	4b0c      	ldr	r3, [pc, #48]	; (801f030 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801effe:	4a0d      	ldr	r2, [pc, #52]	; (801f034 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801f000:	480d      	ldr	r0, [pc, #52]	; (801f038 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801f002:	2166      	movs	r1, #102	; 0x66
 801f004:	f00f f968 	bl	802e2d8 <__assert_func>
 801f008:	4d0c      	ldr	r5, [pc, #48]	; (801f03c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801f00a:	2300      	movs	r3, #0
 801f00c:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801f010:	6828      	ldr	r0, [r5, #0]
 801f012:	b110      	cbz	r0, 801f01a <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801f014:	6803      	ldr	r3, [r0, #0]
 801f016:	695b      	ldr	r3, [r3, #20]
 801f018:	4798      	blx	r3
 801f01a:	602c      	str	r4, [r5, #0]
 801f01c:	6823      	ldr	r3, [r4, #0]
 801f01e:	4620      	mov	r0, r4
 801f020:	68db      	ldr	r3, [r3, #12]
 801f022:	4798      	blx	r3
 801f024:	6833      	ldr	r3, [r6, #0]
 801f026:	4630      	mov	r0, r6
 801f028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f02a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f02e:	4718      	bx	r3
 801f030:	08033610 	.word	0x08033610
 801f034:	08033708 	.word	0x08033708
 801f038:	0803361a 	.word	0x0803361a
 801f03c:	20012850 	.word	0x20012850

0801f040 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801f040:	b510      	push	{r4, lr}
 801f042:	f9b1 4000 	ldrsh.w	r4, [r1]
 801f046:	888a      	ldrh	r2, [r1, #4]
 801f048:	f9b0 3000 	ldrsh.w	r3, [r0]
 801f04c:	4422      	add	r2, r4
 801f04e:	b212      	sxth	r2, r2
 801f050:	4293      	cmp	r3, r2
 801f052:	da15      	bge.n	801f080 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801f054:	8882      	ldrh	r2, [r0, #4]
 801f056:	4413      	add	r3, r2
 801f058:	b21b      	sxth	r3, r3
 801f05a:	429c      	cmp	r4, r3
 801f05c:	da10      	bge.n	801f080 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801f05e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801f062:	88c9      	ldrh	r1, [r1, #6]
 801f064:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801f068:	4419      	add	r1, r3
 801f06a:	b209      	sxth	r1, r1
 801f06c:	428a      	cmp	r2, r1
 801f06e:	da07      	bge.n	801f080 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801f070:	88c0      	ldrh	r0, [r0, #6]
 801f072:	4410      	add	r0, r2
 801f074:	b200      	sxth	r0, r0
 801f076:	4283      	cmp	r3, r0
 801f078:	bfac      	ite	ge
 801f07a:	2000      	movge	r0, #0
 801f07c:	2001      	movlt	r0, #1
 801f07e:	bd10      	pop	{r4, pc}
 801f080:	2000      	movs	r0, #0
 801f082:	e7fc      	b.n	801f07e <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801f084 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801f084:	b570      	push	{r4, r5, r6, lr}
 801f086:	f9b1 4000 	ldrsh.w	r4, [r1]
 801f08a:	f9b0 5000 	ldrsh.w	r5, [r0]
 801f08e:	42ac      	cmp	r4, r5
 801f090:	db18      	blt.n	801f0c4 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801f092:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801f096:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801f09a:	429a      	cmp	r2, r3
 801f09c:	db12      	blt.n	801f0c4 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801f09e:	8886      	ldrh	r6, [r0, #4]
 801f0a0:	4435      	add	r5, r6
 801f0a2:	888e      	ldrh	r6, [r1, #4]
 801f0a4:	4434      	add	r4, r6
 801f0a6:	b22d      	sxth	r5, r5
 801f0a8:	b224      	sxth	r4, r4
 801f0aa:	42a5      	cmp	r5, r4
 801f0ac:	db0a      	blt.n	801f0c4 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801f0ae:	88c0      	ldrh	r0, [r0, #6]
 801f0b0:	4418      	add	r0, r3
 801f0b2:	88cb      	ldrh	r3, [r1, #6]
 801f0b4:	441a      	add	r2, r3
 801f0b6:	b200      	sxth	r0, r0
 801f0b8:	b212      	sxth	r2, r2
 801f0ba:	4290      	cmp	r0, r2
 801f0bc:	bfb4      	ite	lt
 801f0be:	2000      	movlt	r0, #0
 801f0c0:	2001      	movge	r0, #1
 801f0c2:	bd70      	pop	{r4, r5, r6, pc}
 801f0c4:	2000      	movs	r0, #0
 801f0c6:	e7fc      	b.n	801f0c2 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801f0c8 <_ZN8touchgfx11Application11getInstanceEv>:
 801f0c8:	4b01      	ldr	r3, [pc, #4]	; (801f0d0 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801f0ca:	6818      	ldr	r0, [r3, #0]
 801f0cc:	4770      	bx	lr
 801f0ce:	bf00      	nop
 801f0d0:	20012860 	.word	0x20012860

0801f0d4 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 801f0d4:	b570      	push	{r4, r5, r6, lr}
 801f0d6:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 801f0da:	1d04      	adds	r4, r0, #4
 801f0dc:	2200      	movs	r2, #0
 801f0de:	b295      	uxth	r5, r2
 801f0e0:	42ab      	cmp	r3, r5
 801f0e2:	d90f      	bls.n	801f104 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x30>
 801f0e4:	f854 6b04 	ldr.w	r6, [r4], #4
 801f0e8:	428e      	cmp	r6, r1
 801f0ea:	4615      	mov	r5, r2
 801f0ec:	f102 0201 	add.w	r2, r2, #1
 801f0f0:	d1f5      	bne.n	801f0de <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0xa>
 801f0f2:	4428      	add	r0, r5
 801f0f4:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 801f0f8:	2bff      	cmp	r3, #255	; 0xff
 801f0fa:	d002      	beq.n	801f102 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 801f0fc:	3301      	adds	r3, #1
 801f0fe:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
 801f102:	bd70      	pop	{r4, r5, r6, pc}
 801f104:	2b20      	cmp	r3, #32
 801f106:	d106      	bne.n	801f116 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x42>
 801f108:	4b08      	ldr	r3, [pc, #32]	; (801f12c <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x58>)
 801f10a:	4a09      	ldr	r2, [pc, #36]	; (801f130 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x5c>)
 801f10c:	4809      	ldr	r0, [pc, #36]	; (801f134 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x60>)
 801f10e:	f240 1137 	movw	r1, #311	; 0x137
 801f112:	f00f f8e1 	bl	802e2d8 <__assert_func>
 801f116:	18c2      	adds	r2, r0, r3
 801f118:	2401      	movs	r4, #1
 801f11a:	f882 4088 	strb.w	r4, [r2, #136]	; 0x88
 801f11e:	191a      	adds	r2, r3, r4
 801f120:	f8a0 2084 	strh.w	r2, [r0, #132]	; 0x84
 801f124:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801f128:	6041      	str	r1, [r0, #4]
 801f12a:	e7ea      	b.n	801f102 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 801f12c:	08033644 	.word	0x08033644
 801f130:	0803374c 	.word	0x0803374c
 801f134:	0803361a 	.word	0x0803361a

0801f138 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 801f138:	b570      	push	{r4, r5, r6, lr}
 801f13a:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 801f13e:	1d04      	adds	r4, r0, #4
 801f140:	2300      	movs	r3, #0
 801f142:	b29a      	uxth	r2, r3
 801f144:	4296      	cmp	r6, r2
 801f146:	d90a      	bls.n	801f15e <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 801f148:	f854 2b04 	ldr.w	r2, [r4], #4
 801f14c:	428a      	cmp	r2, r1
 801f14e:	d107      	bne.n	801f160 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801f150:	18c5      	adds	r5, r0, r3
 801f152:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 801f156:	b11a      	cbz	r2, 801f160 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801f158:	3a01      	subs	r2, #1
 801f15a:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 801f15e:	bd70      	pop	{r4, r5, r6, pc}
 801f160:	3301      	adds	r3, #1
 801f162:	e7ee      	b.n	801f142 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

0801f164 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801f164:	2300      	movs	r3, #0
 801f166:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801f16a:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801f16e:	30a8      	adds	r0, #168	; 0xa8
 801f170:	f802 3b01 	strb.w	r3, [r2], #1
 801f174:	4282      	cmp	r2, r0
 801f176:	d1fb      	bne.n	801f170 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801f178:	4770      	bx	lr

0801f17a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801f17a:	4603      	mov	r3, r0
 801f17c:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801f180:	2200      	movs	r2, #0
 801f182:	801a      	strh	r2, [r3, #0]
 801f184:	805a      	strh	r2, [r3, #2]
 801f186:	809a      	strh	r2, [r3, #4]
 801f188:	80da      	strh	r2, [r3, #6]
 801f18a:	3308      	adds	r3, #8
 801f18c:	428b      	cmp	r3, r1
 801f18e:	d1f8      	bne.n	801f182 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801f190:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801f194:	4770      	bx	lr
	...

0801f198 <_ZN8touchgfx11ApplicationC1Ev>:
 801f198:	b570      	push	{r4, r5, r6, lr}
 801f19a:	4b1a      	ldr	r3, [pc, #104]	; (801f204 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801f19c:	6003      	str	r3, [r0, #0]
 801f19e:	2500      	movs	r5, #0
 801f1a0:	4604      	mov	r4, r0
 801f1a2:	f8a0 5084 	strh.w	r5, [r0, #132]	; 0x84
 801f1a6:	30a8      	adds	r0, #168	; 0xa8
 801f1a8:	f7ff ffe7 	bl	801f17a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801f1ac:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801f1b0:	f7ff ffe3 	bl	801f17a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801f1b4:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 801f1b8:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 801f1bc:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801f1c0:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801f1c4:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801f1c8:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 801f1cc:	490e      	ldr	r1, [pc, #56]	; (801f208 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801f1ce:	480f      	ldr	r0, [pc, #60]	; (801f20c <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801f1d0:	4e0f      	ldr	r6, [pc, #60]	; (801f210 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801f1d2:	f00d fea1 	bl	802cf18 <CRC_Lock>
 801f1d6:	4b0f      	ldr	r3, [pc, #60]	; (801f214 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801f1d8:	b158      	cbz	r0, 801f1f2 <_ZN8touchgfx11ApplicationC1Ev+0x5a>
 801f1da:	801d      	strh	r5, [r3, #0]
 801f1dc:	4a0e      	ldr	r2, [pc, #56]	; (801f218 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801f1de:	2300      	movs	r3, #0
 801f1e0:	6013      	str	r3, [r2, #0]
 801f1e2:	4a0e      	ldr	r2, [pc, #56]	; (801f21c <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801f1e4:	6033      	str	r3, [r6, #0]
 801f1e6:	4620      	mov	r0, r4
 801f1e8:	6013      	str	r3, [r2, #0]
 801f1ea:	f7ff ffbb 	bl	801f164 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801f1ee:	4620      	mov	r0, r4
 801f1f0:	bd70      	pop	{r4, r5, r6, pc}
 801f1f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801f1f6:	2002      	movs	r0, #2
 801f1f8:	801a      	strh	r2, [r3, #0]
 801f1fa:	6030      	str	r0, [r6, #0]
 801f1fc:	f000 ffda 	bl	80201b4 <_ZN8touchgfx6Screen4drawEv>
 801f200:	e7ec      	b.n	801f1dc <_ZN8touchgfx11ApplicationC1Ev+0x44>
 801f202:	bf00      	nop
 801f204:	080336cc 	.word	0x080336cc
 801f208:	b5e8b5cd 	.word	0xb5e8b5cd
 801f20c:	f407a5c2 	.word	0xf407a5c2
 801f210:	20012850 	.word	0x20012850
 801f214:	20000098 	.word	0x20000098
 801f218:	20012860 	.word	0x20012860
 801f21c:	20012854 	.word	0x20012854

0801f220 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801f220:	2300      	movs	r3, #0
 801f222:	8003      	strh	r3, [r0, #0]
 801f224:	8043      	strh	r3, [r0, #2]
 801f226:	8083      	strh	r3, [r0, #4]
 801f228:	80c3      	strh	r3, [r0, #6]
 801f22a:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 801f22e:	4293      	cmp	r3, r2
 801f230:	b530      	push	{r4, r5, lr}
 801f232:	d912      	bls.n	801f25a <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801f234:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 801f238:	3b01      	subs	r3, #1
 801f23a:	6825      	ldr	r5, [r4, #0]
 801f23c:	6005      	str	r5, [r0, #0]
 801f23e:	b29b      	uxth	r3, r3
 801f240:	6865      	ldr	r5, [r4, #4]
 801f242:	6045      	str	r5, [r0, #4]
 801f244:	4293      	cmp	r3, r2
 801f246:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 801f24a:	d906      	bls.n	801f25a <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801f24c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801f250:	681d      	ldr	r5, [r3, #0]
 801f252:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 801f256:	685d      	ldr	r5, [r3, #4]
 801f258:	6065      	str	r5, [r4, #4]
 801f25a:	bd30      	pop	{r4, r5, pc}

0801f25c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801f25c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f25e:	466b      	mov	r3, sp
 801f260:	e883 0006 	stmia.w	r3, {r1, r2}
 801f264:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801f268:	2a07      	cmp	r2, #7
 801f26a:	4604      	mov	r4, r0
 801f26c:	d906      	bls.n	801f27c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801f26e:	4b09      	ldr	r3, [pc, #36]	; (801f294 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801f270:	4a09      	ldr	r2, [pc, #36]	; (801f298 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801f272:	480a      	ldr	r0, [pc, #40]	; (801f29c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801f274:	f240 118f 	movw	r1, #399	; 0x18f
 801f278:	f00f f82e 	bl	802e2d8 <__assert_func>
 801f27c:	1c51      	adds	r1, r2, #1
 801f27e:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801f282:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801f286:	cb03      	ldmia	r3!, {r0, r1}
 801f288:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801f28c:	6069      	str	r1, [r5, #4]
 801f28e:	b003      	add	sp, #12
 801f290:	bd30      	pop	{r4, r5, pc}
 801f292:	bf00      	nop
 801f294:	0803366c 	.word	0x0803366c
 801f298:	08033791 	.word	0x08033791
 801f29c:	0803369b 	.word	0x0803369b

0801f2a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801f2a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f2a4:	b089      	sub	sp, #36	; 0x24
 801f2a6:	466c      	mov	r4, sp
 801f2a8:	4606      	mov	r6, r0
 801f2aa:	4620      	mov	r0, r4
 801f2ac:	e884 0006 	stmia.w	r4, {r1, r2}
 801f2b0:	f7fb fe53 	bl	801af5a <_ZNK8touchgfx4Rect7isEmptyEv>
 801f2b4:	bbb0      	cbnz	r0, 801f324 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801f2b6:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 801f2ba:	b1fd      	cbz	r5, 801f2fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 801f2bc:	3d01      	subs	r5, #1
 801f2be:	af04      	add	r7, sp, #16
 801f2c0:	f04f 090a 	mov.w	r9, #10
 801f2c4:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 801f2c8:	ab02      	add	r3, sp, #8
 801f2ca:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801f2ce:	6851      	ldr	r1, [r2, #4]
 801f2d0:	c303      	stmia	r3!, {r0, r1}
 801f2d2:	4621      	mov	r1, r4
 801f2d4:	a802      	add	r0, sp, #8
 801f2d6:	fa1f f885 	uxth.w	r8, r5
 801f2da:	f7ff fed3 	bl	801f084 <_ZNK8touchgfx4Rect8includesERKS0_>
 801f2de:	bb08      	cbnz	r0, 801f324 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801f2e0:	a902      	add	r1, sp, #8
 801f2e2:	4620      	mov	r0, r4
 801f2e4:	f7ff fece 	bl	801f084 <_ZNK8touchgfx4Rect8includesERKS0_>
 801f2e8:	b1f8      	cbz	r0, 801f32a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 801f2ea:	4642      	mov	r2, r8
 801f2ec:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801f2f0:	a806      	add	r0, sp, #24
 801f2f2:	f7ff ff95 	bl	801f220 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801f2f6:	f115 35ff 	adds.w	r5, r5, #4294967295
 801f2fa:	d2e3      	bcs.n	801f2c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 801f2fc:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 801f300:	2b08      	cmp	r3, #8
 801f302:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 801f306:	d108      	bne.n	801f31a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801f308:	4629      	mov	r1, r5
 801f30a:	a806      	add	r0, sp, #24
 801f30c:	2207      	movs	r2, #7
 801f30e:	f7ff ff87 	bl	801f220 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801f312:	a906      	add	r1, sp, #24
 801f314:	4620      	mov	r0, r4
 801f316:	f7fc fe1a 	bl	801bf4e <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801f31a:	e894 0006 	ldmia.w	r4, {r1, r2}
 801f31e:	4628      	mov	r0, r5
 801f320:	f7ff ff9c 	bl	801f25c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801f324:	b009      	add	sp, #36	; 0x24
 801f326:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f32a:	4621      	mov	r1, r4
 801f32c:	a802      	add	r0, sp, #8
 801f32e:	f7ff fe87 	bl	801f040 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801f332:	b150      	cbz	r0, 801f34a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 801f334:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801f338:	a806      	add	r0, sp, #24
 801f33a:	4642      	mov	r2, r8
 801f33c:	f7ff ff70 	bl	801f220 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801f340:	a902      	add	r1, sp, #8
 801f342:	4620      	mov	r0, r4
 801f344:	f7fc fe03 	bl	801bf4e <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801f348:	e7d5      	b.n	801f2f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801f34a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801f34e:	e887 0003 	stmia.w	r7, {r0, r1}
 801f352:	a902      	add	r1, sp, #8
 801f354:	4638      	mov	r0, r7
 801f356:	f7fc fdfa 	bl	801bf4e <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801f35a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801f35e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801f362:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801f366:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801f36a:	fb13 f302 	smulbb	r3, r3, r2
 801f36e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801f372:	fb11 f102 	smulbb	r1, r1, r2
 801f376:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801f37a:	fb12 1100 	smlabb	r1, r2, r0, r1
 801f37e:	220b      	movs	r2, #11
 801f380:	fb09 f303 	mul.w	r3, r9, r3
 801f384:	434a      	muls	r2, r1
 801f386:	4293      	cmp	r3, r2
 801f388:	dab5      	bge.n	801f2f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801f38a:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801f38e:	a806      	add	r0, sp, #24
 801f390:	4642      	mov	r2, r8
 801f392:	f7ff ff45 	bl	801f220 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801f396:	e897 0003 	ldmia.w	r7, {r0, r1}
 801f39a:	e884 0003 	stmia.w	r4, {r0, r1}
 801f39e:	e7aa      	b.n	801f2f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

0801f3a0 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801f3a0:	b530      	push	{r4, r5, lr}
 801f3a2:	4b1d      	ldr	r3, [pc, #116]	; (801f418 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801f3a4:	b085      	sub	sp, #20
 801f3a6:	460c      	mov	r4, r1
 801f3a8:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f3ac:	4b1b      	ldr	r3, [pc, #108]	; (801f41c <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801f3ae:	f8ad 2004 	strh.w	r2, [sp, #4]
 801f3b2:	2100      	movs	r1, #0
 801f3b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f3b8:	9100      	str	r1, [sp, #0]
 801f3ba:	4605      	mov	r5, r0
 801f3bc:	6861      	ldr	r1, [r4, #4]
 801f3be:	6820      	ldr	r0, [r4, #0]
 801f3c0:	f8ad 3006 	strh.w	r3, [sp, #6]
 801f3c4:	ab02      	add	r3, sp, #8
 801f3c6:	c303      	stmia	r3!, {r0, r1}
 801f3c8:	4669      	mov	r1, sp
 801f3ca:	a802      	add	r0, sp, #8
 801f3cc:	f7fb fd82 	bl	801aed4 <_ZN8touchgfx4RectaNERKS0_>
 801f3d0:	ab02      	add	r3, sp, #8
 801f3d2:	cb03      	ldmia	r3!, {r0, r1}
 801f3d4:	4b12      	ldr	r3, [pc, #72]	; (801f420 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801f3d6:	6020      	str	r0, [r4, #0]
 801f3d8:	6818      	ldr	r0, [r3, #0]
 801f3da:	6061      	str	r1, [r4, #4]
 801f3dc:	b138      	cbz	r0, 801f3ee <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801f3de:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 801f3e2:	b133      	cbz	r3, 801f3f2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801f3e4:	6821      	ldr	r1, [r4, #0]
 801f3e6:	6862      	ldr	r2, [r4, #4]
 801f3e8:	4628      	mov	r0, r5
 801f3ea:	f7ff ff59 	bl	801f2a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801f3ee:	b005      	add	sp, #20
 801f3f0:	bd30      	pop	{r4, r5, pc}
 801f3f2:	6803      	ldr	r3, [r0, #0]
 801f3f4:	4621      	mov	r1, r4
 801f3f6:	689b      	ldr	r3, [r3, #8]
 801f3f8:	4798      	blx	r3
 801f3fa:	4b0a      	ldr	r3, [pc, #40]	; (801f424 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801f3fc:	6818      	ldr	r0, [r3, #0]
 801f3fe:	b118      	cbz	r0, 801f408 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801f400:	6803      	ldr	r3, [r0, #0]
 801f402:	4621      	mov	r1, r4
 801f404:	689b      	ldr	r3, [r3, #8]
 801f406:	4798      	blx	r3
 801f408:	4b07      	ldr	r3, [pc, #28]	; (801f428 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801f40a:	6818      	ldr	r0, [r3, #0]
 801f40c:	6803      	ldr	r3, [r0, #0]
 801f40e:	4621      	mov	r1, r4
 801f410:	695b      	ldr	r3, [r3, #20]
 801f412:	4798      	blx	r3
 801f414:	e7eb      	b.n	801f3ee <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801f416:	bf00      	nop
 801f418:	200127e8 	.word	0x200127e8
 801f41c:	200127ea 	.word	0x200127ea
 801f420:	20012850 	.word	0x20012850
 801f424:	2001284c 	.word	0x2001284c
 801f428:	200127f4 	.word	0x200127f4

0801f42c <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801f42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f430:	4604      	mov	r4, r0
 801f432:	b09b      	sub	sp, #108	; 0x6c
 801f434:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 801f438:	b129      	cbz	r1, 801f446 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801f43a:	2300      	movs	r3, #0
 801f43c:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801f440:	b01b      	add	sp, #108	; 0x6c
 801f442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f446:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 801f44a:	4630      	mov	r0, r6
 801f44c:	f7fb fd85 	bl	801af5a <_ZNK8touchgfx4Rect7isEmptyEv>
 801f450:	4605      	mov	r5, r0
 801f452:	b940      	cbnz	r0, 801f466 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 801f454:	e896 0006 	ldmia.w	r6, {r1, r2}
 801f458:	4620      	mov	r0, r4
 801f45a:	f7ff ff21 	bl	801f2a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801f45e:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801f462:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801f466:	4b92      	ldr	r3, [pc, #584]	; (801f6b0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x284>)
 801f468:	681b      	ldr	r3, [r3, #0]
 801f46a:	b33b      	cbz	r3, 801f4bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801f46c:	4d91      	ldr	r5, [pc, #580]	; (801f6b4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x288>)
 801f46e:	4628      	mov	r0, r5
 801f470:	f7fb fd73 	bl	801af5a <_ZNK8touchgfx4Rect7isEmptyEv>
 801f474:	4606      	mov	r6, r0
 801f476:	bb08      	cbnz	r0, 801f4bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801f478:	4628      	mov	r0, r5
 801f47a:	f7ff fc87 	bl	801ed8c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801f47e:	6829      	ldr	r1, [r5, #0]
 801f480:	686a      	ldr	r2, [r5, #4]
 801f482:	4620      	mov	r0, r4
 801f484:	f7ff ff0c 	bl	801f2a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801f488:	802e      	strh	r6, [r5, #0]
 801f48a:	806e      	strh	r6, [r5, #2]
 801f48c:	80ae      	strh	r6, [r5, #4]
 801f48e:	80ee      	strh	r6, [r5, #6]
 801f490:	4f89      	ldr	r7, [pc, #548]	; (801f6b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x28c>)
 801f492:	a809      	add	r0, sp, #36	; 0x24
 801f494:	f7ff fe71 	bl	801f17a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801f498:	883d      	ldrh	r5, [r7, #0]
 801f49a:	462e      	mov	r6, r5
 801f49c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801f4a0:	42b3      	cmp	r3, r6
 801f4a2:	d910      	bls.n	801f4c6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 801f4a4:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801f4a8:	a809      	add	r0, sp, #36	; 0x24
 801f4aa:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801f4ae:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801f4b2:	3601      	adds	r6, #1
 801f4b4:	f7ff fed2 	bl	801f25c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801f4b8:	b2b6      	uxth	r6, r6
 801f4ba:	e7ef      	b.n	801f49c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801f4bc:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801f4c0:	2b00      	cmp	r3, #0
 801f4c2:	d1e5      	bne.n	801f490 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 801f4c4:	e7bc      	b.n	801f440 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801f4c6:	462e      	mov	r6, r5
 801f4c8:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801f4cc:	42b3      	cmp	r3, r6
 801f4ce:	d90b      	bls.n	801f4e8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 801f4d0:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801f4d4:	4620      	mov	r0, r4
 801f4d6:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801f4da:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801f4de:	3601      	adds	r6, #1
 801f4e0:	f7ff fede 	bl	801f2a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801f4e4:	b2b6      	uxth	r6, r6
 801f4e6:	e7ef      	b.n	801f4c8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801f4e8:	4a74      	ldr	r2, [pc, #464]	; (801f6bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x290>)
 801f4ea:	6813      	ldr	r3, [r2, #0]
 801f4ec:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801f4f0:	2b01      	cmp	r3, #1
 801f4f2:	4690      	mov	r8, r2
 801f4f4:	f040 8094 	bne.w	801f620 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f4>
 801f4f8:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801f4fc:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801f500:	33aa      	adds	r3, #170	; 0xaa
 801f502:	f04f 0900 	mov.w	r9, #0
 801f506:	42a8      	cmp	r0, r5
 801f508:	f103 0308 	add.w	r3, r3, #8
 801f50c:	dd0a      	ble.n	801f524 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 801f50e:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801f512:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801f516:	440a      	add	r2, r1
 801f518:	b212      	sxth	r2, r2
 801f51a:	4591      	cmp	r9, r2
 801f51c:	bfb8      	it	lt
 801f51e:	4691      	movlt	r9, r2
 801f520:	3501      	adds	r5, #1
 801f522:	e7f0      	b.n	801f506 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 801f524:	4b66      	ldr	r3, [pc, #408]	; (801f6c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x294>)
 801f526:	4e67      	ldr	r6, [pc, #412]	; (801f6c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x298>)
 801f528:	881d      	ldrh	r5, [r3, #0]
 801f52a:	2300      	movs	r3, #0
 801f52c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801f530:	2d0f      	cmp	r5, #15
 801f532:	bf8c      	ite	hi
 801f534:	08ed      	lsrhi	r5, r5, #3
 801f536:	2501      	movls	r5, #1
 801f538:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801f53c:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801f540:	f8d8 0000 	ldr.w	r0, [r8]
 801f544:	440b      	add	r3, r1
 801f546:	b21b      	sxth	r3, r3
 801f548:	4599      	cmp	r9, r3
 801f54a:	6802      	ldr	r2, [r0, #0]
 801f54c:	dd4b      	ble.n	801f5e6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 801f54e:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 801f552:	4798      	blx	r3
 801f554:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801f558:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801f55c:	4413      	add	r3, r2
 801f55e:	b21b      	sxth	r3, r3
 801f560:	195a      	adds	r2, r3, r5
 801f562:	4290      	cmp	r0, r2
 801f564:	da07      	bge.n	801f576 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801f566:	4581      	cmp	r9, r0
 801f568:	dd05      	ble.n	801f576 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801f56a:	4298      	cmp	r0, r3
 801f56c:	da33      	bge.n	801f5d6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801f56e:	2b00      	cmp	r3, #0
 801f570:	dd31      	ble.n	801f5d6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801f572:	4648      	mov	r0, r9
 801f574:	e004      	b.n	801f580 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 801f576:	4298      	cmp	r0, r3
 801f578:	dbfb      	blt.n	801f572 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 801f57a:	4548      	cmp	r0, r9
 801f57c:	bfa8      	it	ge
 801f57e:	4648      	movge	r0, r9
 801f580:	f9b6 2000 	ldrsh.w	r2, [r6]
 801f584:	f8b7 a000 	ldrh.w	sl, [r7]
 801f588:	f8ad 3016 	strh.w	r3, [sp, #22]
 801f58c:	2100      	movs	r1, #0
 801f58e:	1ac0      	subs	r0, r0, r3
 801f590:	f8ad 1014 	strh.w	r1, [sp, #20]
 801f594:	f8ad 2018 	strh.w	r2, [sp, #24]
 801f598:	f8ad 001a 	strh.w	r0, [sp, #26]
 801f59c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801f5a0:	4553      	cmp	r3, sl
 801f5a2:	d9c9      	bls.n	801f538 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801f5a4:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801f5a8:	ab07      	add	r3, sp, #28
 801f5aa:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801f5ae:	6851      	ldr	r1, [r2, #4]
 801f5b0:	c303      	stmia	r3!, {r0, r1}
 801f5b2:	a807      	add	r0, sp, #28
 801f5b4:	a905      	add	r1, sp, #20
 801f5b6:	f7fb fc8d 	bl	801aed4 <_ZN8touchgfx4RectaNERKS0_>
 801f5ba:	a807      	add	r0, sp, #28
 801f5bc:	f7fb fccd 	bl	801af5a <_ZNK8touchgfx4Rect7isEmptyEv>
 801f5c0:	b920      	cbnz	r0, 801f5cc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 801f5c2:	6823      	ldr	r3, [r4, #0]
 801f5c4:	a907      	add	r1, sp, #28
 801f5c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f5c8:	4620      	mov	r0, r4
 801f5ca:	4798      	blx	r3
 801f5cc:	f10a 0a01 	add.w	sl, sl, #1
 801f5d0:	fa1f fa8a 	uxth.w	sl, sl
 801f5d4:	e7e2      	b.n	801f59c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 801f5d6:	f8d8 0000 	ldr.w	r0, [r8]
 801f5da:	6803      	ldr	r3, [r0, #0]
 801f5dc:	2101      	movs	r1, #1
 801f5de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801f5e2:	4798      	blx	r3
 801f5e4:	e7a8      	b.n	801f538 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801f5e6:	69d3      	ldr	r3, [r2, #28]
 801f5e8:	4798      	blx	r3
 801f5ea:	4b37      	ldr	r3, [pc, #220]	; (801f6c8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x29c>)
 801f5ec:	781b      	ldrb	r3, [r3, #0]
 801f5ee:	2b00      	cmp	r3, #0
 801f5f0:	f43f af26 	beq.w	801f440 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801f5f4:	2300      	movs	r3, #0
 801f5f6:	883d      	ldrh	r5, [r7, #0]
 801f5f8:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 801f5fc:	34ea      	adds	r4, #234	; 0xea
 801f5fe:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801f602:	42ab      	cmp	r3, r5
 801f604:	f67f af1c 	bls.w	801f440 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801f608:	ab1a      	add	r3, sp, #104	; 0x68
 801f60a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801f60e:	3b44      	subs	r3, #68	; 0x44
 801f610:	e893 0006 	ldmia.w	r3, {r1, r2}
 801f614:	4620      	mov	r0, r4
 801f616:	3501      	adds	r5, #1
 801f618:	f7ff fe20 	bl	801f25c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801f61c:	b2ad      	uxth	r5, r5
 801f61e:	e7ee      	b.n	801f5fe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 801f620:	2b02      	cmp	r3, #2
 801f622:	f040 813d 	bne.w	801f8a0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>
 801f626:	4b29      	ldr	r3, [pc, #164]	; (801f6cc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a0>)
 801f628:	781b      	ldrb	r3, [r3, #0]
 801f62a:	2b01      	cmp	r3, #1
 801f62c:	f000 809d 	beq.w	801f76a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x33e>
 801f630:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 801f634:	883a      	ldrh	r2, [r7, #0]
 801f636:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 801f63a:	3201      	adds	r2, #1
 801f63c:	b292      	uxth	r2, r2
 801f63e:	2900      	cmp	r1, #0
 801f640:	d0d3      	beq.n	801f5ea <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801f642:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 801f646:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 801f64a:	441d      	add	r5, r3
 801f64c:	b22d      	sxth	r5, r5
 801f64e:	4610      	mov	r0, r2
 801f650:	f04f 0a00 	mov.w	sl, #0
 801f654:	b283      	uxth	r3, r0
 801f656:	4299      	cmp	r1, r3
 801f658:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 801f65c:	f240 80c3 	bls.w	801f7e6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ba>
 801f660:	4426      	add	r6, r4
 801f662:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 801f666:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 801f66a:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 801f66e:	4573      	cmp	r3, lr
 801f670:	4684      	mov	ip, r0
 801f672:	f340 80a5 	ble.w	801f7c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x394>
 801f676:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 801f67a:	4475      	add	r5, lr
 801f67c:	b22d      	sxth	r5, r5
 801f67e:	429d      	cmp	r5, r3
 801f680:	bfa8      	it	ge
 801f682:	461d      	movge	r5, r3
 801f684:	3001      	adds	r0, #1
 801f686:	46e2      	mov	sl, ip
 801f688:	e7e4      	b.n	801f654 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x228>
 801f68a:	d10b      	bne.n	801f6a4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x278>
 801f68c:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 801f690:	f9b9 10ae 	ldrsh.w	r1, [r9, #174]	; 0xae
 801f694:	458c      	cmp	ip, r1
 801f696:	bfb4      	ite	lt
 801f698:	469c      	movlt	ip, r3
 801f69a:	46b4      	movge	ip, r6
 801f69c:	4572      	cmp	r2, lr
 801f69e:	bfb8      	it	lt
 801f6a0:	4672      	movlt	r2, lr
 801f6a2:	e08a      	b.n	801f7ba <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x38e>
 801f6a4:	428a      	cmp	r2, r1
 801f6a6:	bfb8      	it	lt
 801f6a8:	460a      	movlt	r2, r1
 801f6aa:	46b4      	mov	ip, r6
 801f6ac:	e085      	b.n	801f7ba <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x38e>
 801f6ae:	bf00      	nop
 801f6b0:	2001284c 	.word	0x2001284c
 801f6b4:	20012858 	.word	0x20012858
 801f6b8:	20000098 	.word	0x20000098
 801f6bc:	200127f4 	.word	0x200127f4
 801f6c0:	200127ea 	.word	0x200127ea
 801f6c4:	200127e8 	.word	0x200127e8
 801f6c8:	200127f2 	.word	0x200127f2
 801f6cc:	200127ec 	.word	0x200127ec
 801f6d0:	1961      	adds	r1, r4, r5
 801f6d2:	ab05      	add	r3, sp, #20
 801f6d4:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 801f6d8:	6849      	ldr	r1, [r1, #4]
 801f6da:	c303      	stmia	r3!, {r0, r1}
 801f6dc:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801f6e0:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801f6e4:	2b13      	cmp	r3, #19
 801f6e6:	bfd8      	it	le
 801f6e8:	f9bd 2014 	ldrshle.w	r2, [sp, #20]
 801f6ec:	f8ad 2014 	strh.w	r2, [sp, #20]
 801f6f0:	440b      	add	r3, r1
 801f6f2:	1a9b      	subs	r3, r3, r2
 801f6f4:	a805      	add	r0, sp, #20
 801f6f6:	f8ad 3018 	strh.w	r3, [sp, #24]
 801f6fa:	f7ff fba1 	bl	801ee40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f6fe:	a805      	add	r0, sp, #20
 801f700:	f7fb fc2b 	bl	801af5a <_ZNK8touchgfx4Rect7isEmptyEv>
 801f704:	bb88      	cbnz	r0, 801f76a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x33e>
 801f706:	f9bd c01a 	ldrsh.w	ip, [sp, #26]
 801f70a:	f8d8 0000 	ldr.w	r0, [r8]
 801f70e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801f712:	f8d0 e000 	ldr.w	lr, [r0]
 801f716:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801f71a:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801f71e:	f1bc 0f14 	cmp.w	ip, #20
 801f722:	bfa8      	it	ge
 801f724:	f04f 0c14 	movge.w	ip, #20
 801f728:	fa1f fc8c 	uxth.w	ip, ip
 801f72c:	f8cd c000 	str.w	ip, [sp]
 801f730:	f8de 9078 	ldr.w	r9, [lr, #120]	; 0x78
 801f734:	47c8      	blx	r9
 801f736:	4681      	mov	r9, r0
 801f738:	f8ad 001a 	strh.w	r0, [sp, #26]
 801f73c:	a805      	add	r0, sp, #20
 801f73e:	f7ff fb25 	bl	801ed8c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801f742:	6823      	ldr	r3, [r4, #0]
 801f744:	4425      	add	r5, r4
 801f746:	4620      	mov	r0, r4
 801f748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f74a:	a905      	add	r1, sp, #20
 801f74c:	4798      	blx	r3
 801f74e:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801f752:	eba0 0009 	sub.w	r0, r0, r9
 801f756:	b200      	sxth	r0, r0
 801f758:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 801f75c:	b928      	cbnz	r0, 801f76a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x33e>
 801f75e:	b2b2      	uxth	r2, r6
 801f760:	f104 01a8 	add.w	r1, r4, #168	; 0xa8
 801f764:	a807      	add	r0, sp, #28
 801f766:	f7ff fd5b 	bl	801f220 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801f76a:	f8b4 a0e8 	ldrh.w	sl, [r4, #232]	; 0xe8
 801f76e:	f1ba 0f00 	cmp.w	sl, #0
 801f772:	f43f af3a 	beq.w	801f5ea <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801f776:	883b      	ldrh	r3, [r7, #0]
 801f778:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801f77c:	3301      	adds	r3, #1
 801f77e:	b29b      	uxth	r3, r3
 801f780:	2600      	movs	r6, #0
 801f782:	b299      	uxth	r1, r3
 801f784:	458a      	cmp	sl, r1
 801f786:	ea4f 05c6 	mov.w	r5, r6, lsl #3
 801f78a:	d9a1      	bls.n	801f6d0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a4>
 801f78c:	4425      	add	r5, r4
 801f78e:	eb04 09c3 	add.w	r9, r4, r3, lsl #3
 801f792:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 801f796:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 801f79a:	f9b9 e0a8 	ldrsh.w	lr, [r9, #168]	; 0xa8
 801f79e:	4408      	add	r0, r1
 801f7a0:	f8b9 10ac 	ldrh.w	r1, [r9, #172]	; 0xac
 801f7a4:	4471      	add	r1, lr
 801f7a6:	b200      	sxth	r0, r0
 801f7a8:	b209      	sxth	r1, r1
 801f7aa:	4288      	cmp	r0, r1
 801f7ac:	469c      	mov	ip, r3
 801f7ae:	f6bf af6c 	bge.w	801f68a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25e>
 801f7b2:	4586      	cmp	lr, r0
 801f7b4:	4672      	mov	r2, lr
 801f7b6:	bfb8      	it	lt
 801f7b8:	4602      	movlt	r2, r0
 801f7ba:	3301      	adds	r3, #1
 801f7bc:	4666      	mov	r6, ip
 801f7be:	e7e0      	b.n	801f782 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x356>
 801f7c0:	d10c      	bne.n	801f7dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b0>
 801f7c2:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 801f7c6:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 801f7ca:	45b4      	cmp	ip, r6
 801f7cc:	bfb4      	ite	lt
 801f7ce:	4684      	movlt	ip, r0
 801f7d0:	46d4      	movge	ip, sl
 801f7d2:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 801f7d6:	4433      	add	r3, r6
 801f7d8:	b21b      	sxth	r3, r3
 801f7da:	e750      	b.n	801f67e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x252>
 801f7dc:	4575      	cmp	r5, lr
 801f7de:	bfa8      	it	ge
 801f7e0:	4675      	movge	r5, lr
 801f7e2:	46d4      	mov	ip, sl
 801f7e4:	e74e      	b.n	801f684 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x258>
 801f7e6:	eb0b 0006 	add.w	r0, fp, r6
 801f7ea:	4426      	add	r6, r4
 801f7ec:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801f7f0:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 801f7f4:	f1b9 0f13 	cmp.w	r9, #19
 801f7f8:	bfde      	ittt	le
 801f7fa:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 801f7fe:	444d      	addle	r5, r9
 801f800:	b22d      	sxthle	r5, r5
 801f802:	f7fb fbaa 	bl	801af5a <_ZNK8touchgfx4Rect7isEmptyEv>
 801f806:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801f80a:	2800      	cmp	r0, #0
 801f80c:	f47f af17 	bne.w	801f63e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x212>
 801f810:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 801f814:	f8ad 001a 	strh.w	r0, [sp, #26]
 801f818:	eba5 050c 	sub.w	r5, r5, ip
 801f81c:	fa1f f28c 	uxth.w	r2, ip
 801f820:	fa1f f989 	uxth.w	r9, r9
 801f824:	eb02 0009 	add.w	r0, r2, r9
 801f828:	2d14      	cmp	r5, #20
 801f82a:	bfa8      	it	ge
 801f82c:	2514      	movge	r5, #20
 801f82e:	b200      	sxth	r0, r0
 801f830:	fa1f fe85 	uxth.w	lr, r5
 801f834:	eba0 000c 	sub.w	r0, r0, ip
 801f838:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 801f83c:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 801f840:	f8ad 1014 	strh.w	r1, [sp, #20]
 801f844:	4586      	cmp	lr, r0
 801f846:	f8d8 0000 	ldr.w	r0, [r8]
 801f84a:	f8ad c016 	strh.w	ip, [sp, #22]
 801f84e:	f8ad 3018 	strh.w	r3, [sp, #24]
 801f852:	bfb8      	it	lt
 801f854:	46f1      	movlt	r9, lr
 801f856:	6805      	ldr	r5, [r0, #0]
 801f858:	f8cd 9000 	str.w	r9, [sp]
 801f85c:	b29b      	uxth	r3, r3
 801f85e:	b289      	uxth	r1, r1
 801f860:	6fad      	ldr	r5, [r5, #120]	; 0x78
 801f862:	47a8      	blx	r5
 801f864:	6823      	ldr	r3, [r4, #0]
 801f866:	f8ad 001a 	strh.w	r0, [sp, #26]
 801f86a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f86c:	a905      	add	r1, sp, #20
 801f86e:	4620      	mov	r0, r4
 801f870:	4798      	blx	r3
 801f872:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801f876:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 801f87a:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 801f87e:	1a5b      	subs	r3, r3, r1
 801f880:	440a      	add	r2, r1
 801f882:	b21b      	sxth	r3, r3
 801f884:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 801f888:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 801f88c:	2b00      	cmp	r3, #0
 801f88e:	f47f aed1 	bne.w	801f634 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x208>
 801f892:	fa1f f28a 	uxth.w	r2, sl
 801f896:	4659      	mov	r1, fp
 801f898:	a807      	add	r0, sp, #28
 801f89a:	f7ff fcc1 	bl	801f220 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801f89e:	e6c9      	b.n	801f634 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x208>
 801f8a0:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801f8a4:	42ab      	cmp	r3, r5
 801f8a6:	f67f aea0 	bls.w	801f5ea <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801f8aa:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801f8ae:	ab07      	add	r3, sp, #28
 801f8b0:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801f8b4:	6851      	ldr	r1, [r2, #4]
 801f8b6:	c303      	stmia	r3!, {r0, r1}
 801f8b8:	a807      	add	r0, sp, #28
 801f8ba:	f7fb fb4e 	bl	801af5a <_ZNK8touchgfx4Rect7isEmptyEv>
 801f8be:	b920      	cbnz	r0, 801f8ca <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49e>
 801f8c0:	6823      	ldr	r3, [r4, #0]
 801f8c2:	a907      	add	r1, sp, #28
 801f8c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f8c6:	4620      	mov	r0, r4
 801f8c8:	4798      	blx	r3
 801f8ca:	3501      	adds	r5, #1
 801f8cc:	b2ad      	uxth	r5, r5
 801f8ce:	e7e7      	b.n	801f8a0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>

0801f8d0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801f8d0:	4b03      	ldr	r3, [pc, #12]	; (801f8e0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801f8d2:	2200      	movs	r2, #0
 801f8d4:	801a      	strh	r2, [r3, #0]
 801f8d6:	805a      	strh	r2, [r3, #2]
 801f8d8:	809a      	strh	r2, [r3, #4]
 801f8da:	80da      	strh	r2, [r3, #6]
 801f8dc:	4770      	bx	lr
 801f8de:	bf00      	nop
 801f8e0:	20012858 	.word	0x20012858

0801f8e4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801f8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f8e8:	4607      	mov	r7, r0
 801f8ea:	b099      	sub	sp, #100	; 0x64
 801f8ec:	a802      	add	r0, sp, #8
 801f8ee:	4614      	mov	r4, r2
 801f8f0:	461d      	mov	r5, r3
 801f8f2:	468a      	mov	sl, r1
 801f8f4:	f000 fddb 	bl	80204ae <_ZN8touchgfx12TextProviderC1Ev>
 801f8f8:	683b      	ldr	r3, [r7, #0]
 801f8fa:	4638      	mov	r0, r7
 801f8fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f8fe:	4798      	blx	r3
 801f900:	462a      	mov	r2, r5
 801f902:	4603      	mov	r3, r0
 801f904:	4621      	mov	r1, r4
 801f906:	a802      	add	r0, sp, #8
 801f908:	f000 fe16 	bl	8020538 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801f90c:	2500      	movs	r5, #0
 801f90e:	462c      	mov	r4, r5
 801f910:	46a9      	mov	r9, r5
 801f912:	46a8      	mov	r8, r5
 801f914:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801f918:	2300      	movs	r3, #0
 801f91a:	9301      	str	r3, [sp, #4]
 801f91c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801f920:	429c      	cmp	r4, r3
 801f922:	d002      	beq.n	801f92a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x46>
 801f924:	455c      	cmp	r4, fp
 801f926:	bf18      	it	ne
 801f928:	4625      	movne	r5, r4
 801f92a:	ab01      	add	r3, sp, #4
 801f92c:	463a      	mov	r2, r7
 801f92e:	4651      	mov	r1, sl
 801f930:	a802      	add	r0, sp, #8
 801f932:	f001 f8fb 	bl	8020b2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801f936:	4604      	mov	r4, r0
 801f938:	b108      	cbz	r0, 801f93e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5a>
 801f93a:	280a      	cmp	r0, #10
 801f93c:	d10a      	bne.n	801f954 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>
 801f93e:	45c1      	cmp	r9, r8
 801f940:	bf38      	it	cc
 801f942:	46c1      	movcc	r9, r8
 801f944:	f04f 0800 	mov.w	r8, #0
 801f948:	2c00      	cmp	r4, #0
 801f94a:	d1e5      	bne.n	801f918 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 801f94c:	4648      	mov	r0, r9
 801f94e:	b019      	add	sp, #100	; 0x64
 801f950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f954:	9a01      	ldr	r2, [sp, #4]
 801f956:	2a00      	cmp	r2, #0
 801f958:	d0de      	beq.n	801f918 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 801f95a:	7b56      	ldrb	r6, [r2, #13]
 801f95c:	683b      	ldr	r3, [r7, #0]
 801f95e:	8894      	ldrh	r4, [r2, #4]
 801f960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801f962:	0076      	lsls	r6, r6, #1
 801f964:	f406 7080 	and.w	r0, r6, #256	; 0x100
 801f968:	7a96      	ldrb	r6, [r2, #10]
 801f96a:	4629      	mov	r1, r5
 801f96c:	4306      	orrs	r6, r0
 801f96e:	4638      	mov	r0, r7
 801f970:	4798      	blx	r3
 801f972:	4430      	add	r0, r6
 801f974:	4480      	add	r8, r0
 801f976:	fa1f f888 	uxth.w	r8, r8
 801f97a:	e7e5      	b.n	801f948 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x64>

0801f97c <_ZNK8touchgfx4Font12getCharWidthEt>:
 801f97c:	b508      	push	{r3, lr}
 801f97e:	6803      	ldr	r3, [r0, #0]
 801f980:	68db      	ldr	r3, [r3, #12]
 801f982:	4798      	blx	r3
 801f984:	b128      	cbz	r0, 801f992 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801f986:	7b43      	ldrb	r3, [r0, #13]
 801f988:	7a80      	ldrb	r0, [r0, #10]
 801f98a:	005b      	lsls	r3, r3, #1
 801f98c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f990:	4318      	orrs	r0, r3
 801f992:	bd08      	pop	{r3, pc}

0801f994 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801f994:	b40e      	push	{r1, r2, r3}
 801f996:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f998:	b098      	sub	sp, #96	; 0x60
 801f99a:	ab1d      	add	r3, sp, #116	; 0x74
 801f99c:	4605      	mov	r5, r0
 801f99e:	f853 4b04 	ldr.w	r4, [r3], #4
 801f9a2:	9300      	str	r3, [sp, #0]
 801f9a4:	a802      	add	r0, sp, #8
 801f9a6:	f000 fd82 	bl	80204ae <_ZN8touchgfx12TextProviderC1Ev>
 801f9aa:	682b      	ldr	r3, [r5, #0]
 801f9ac:	4628      	mov	r0, r5
 801f9ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f9b0:	4798      	blx	r3
 801f9b2:	ae18      	add	r6, sp, #96	; 0x60
 801f9b4:	4603      	mov	r3, r0
 801f9b6:	4621      	mov	r1, r4
 801f9b8:	9a00      	ldr	r2, [sp, #0]
 801f9ba:	2400      	movs	r4, #0
 801f9bc:	a802      	add	r0, sp, #8
 801f9be:	f000 fdbb 	bl	8020538 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801f9c2:	f846 4d5c 	str.w	r4, [r6, #-92]!
 801f9c6:	462a      	mov	r2, r5
 801f9c8:	4633      	mov	r3, r6
 801f9ca:	4621      	mov	r1, r4
 801f9cc:	a802      	add	r0, sp, #8
 801f9ce:	f001 f8ad 	bl	8020b2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801f9d2:	b1f0      	cbz	r0, 801fa12 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7e>
 801f9d4:	280a      	cmp	r0, #10
 801f9d6:	d018      	beq.n	801fa0a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x76>
 801f9d8:	9f01      	ldr	r7, [sp, #4]
 801f9da:	b1b7      	cbz	r7, 801fa0a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x76>
 801f9dc:	7b78      	ldrb	r0, [r7, #13]
 801f9de:	7a3b      	ldrb	r3, [r7, #8]
 801f9e0:	88aa      	ldrh	r2, [r5, #4]
 801f9e2:	00c1      	lsls	r1, r0, #3
 801f9e4:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801f9e8:	4319      	orrs	r1, r3
 801f9ea:	0643      	lsls	r3, r0, #25
 801f9ec:	bf44      	itt	mi
 801f9ee:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801f9f2:	b219      	sxthmi	r1, r3
 801f9f4:	0100      	lsls	r0, r0, #4
 801f9f6:	79fb      	ldrb	r3, [r7, #7]
 801f9f8:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801f9fc:	4303      	orrs	r3, r0
 801f9fe:	4413      	add	r3, r2
 801fa00:	1a5b      	subs	r3, r3, r1
 801fa02:	b29b      	uxth	r3, r3
 801fa04:	42a3      	cmp	r3, r4
 801fa06:	bfc8      	it	gt
 801fa08:	b21c      	sxthgt	r4, r3
 801fa0a:	4633      	mov	r3, r6
 801fa0c:	462a      	mov	r2, r5
 801fa0e:	2100      	movs	r1, #0
 801fa10:	e7dc      	b.n	801f9cc <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x38>
 801fa12:	b2a0      	uxth	r0, r4
 801fa14:	b018      	add	sp, #96	; 0x60
 801fa16:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801fa1a:	b003      	add	sp, #12
 801fa1c:	4770      	bx	lr

0801fa1e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801fa1e:	b40e      	push	{r1, r2, r3}
 801fa20:	b530      	push	{r4, r5, lr}
 801fa22:	b098      	sub	sp, #96	; 0x60
 801fa24:	ab1b      	add	r3, sp, #108	; 0x6c
 801fa26:	4604      	mov	r4, r0
 801fa28:	f853 5b04 	ldr.w	r5, [r3], #4
 801fa2c:	9301      	str	r3, [sp, #4]
 801fa2e:	a802      	add	r0, sp, #8
 801fa30:	f000 fd3d 	bl	80204ae <_ZN8touchgfx12TextProviderC1Ev>
 801fa34:	6823      	ldr	r3, [r4, #0]
 801fa36:	4620      	mov	r0, r4
 801fa38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801fa3a:	4798      	blx	r3
 801fa3c:	9a01      	ldr	r2, [sp, #4]
 801fa3e:	4603      	mov	r3, r0
 801fa40:	4629      	mov	r1, r5
 801fa42:	a802      	add	r0, sp, #8
 801fa44:	f000 fd78 	bl	8020538 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801fa48:	a802      	add	r0, sp, #8
 801fa4a:	f001 f967 	bl	8020d1c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801fa4e:	2401      	movs	r4, #1
 801fa50:	b2a3      	uxth	r3, r4
 801fa52:	b140      	cbz	r0, 801fa66 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x48>
 801fa54:	280a      	cmp	r0, #10
 801fa56:	bf08      	it	eq
 801fa58:	3301      	addeq	r3, #1
 801fa5a:	a802      	add	r0, sp, #8
 801fa5c:	bf08      	it	eq
 801fa5e:	b21c      	sxtheq	r4, r3
 801fa60:	f001 f95c 	bl	8020d1c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801fa64:	e7f4      	b.n	801fa50 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 801fa66:	4618      	mov	r0, r3
 801fa68:	b018      	add	sp, #96	; 0x60
 801fa6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801fa6e:	b003      	add	sp, #12
 801fa70:	4770      	bx	lr

0801fa72 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801fa72:	b40e      	push	{r1, r2, r3}
 801fa74:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fa76:	b098      	sub	sp, #96	; 0x60
 801fa78:	ab1d      	add	r3, sp, #116	; 0x74
 801fa7a:	4604      	mov	r4, r0
 801fa7c:	f853 5b04 	ldr.w	r5, [r3], #4
 801fa80:	9300      	str	r3, [sp, #0]
 801fa82:	a802      	add	r0, sp, #8
 801fa84:	f000 fd13 	bl	80204ae <_ZN8touchgfx12TextProviderC1Ev>
 801fa88:	6823      	ldr	r3, [r4, #0]
 801fa8a:	4620      	mov	r0, r4
 801fa8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801fa8e:	4798      	blx	r3
 801fa90:	4629      	mov	r1, r5
 801fa92:	4603      	mov	r3, r0
 801fa94:	9a00      	ldr	r2, [sp, #0]
 801fa96:	a802      	add	r0, sp, #8
 801fa98:	ad18      	add	r5, sp, #96	; 0x60
 801fa9a:	f000 fd4d 	bl	8020538 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801fa9e:	2100      	movs	r1, #0
 801faa0:	f845 1d5c 	str.w	r1, [r5, #-92]!
 801faa4:	4622      	mov	r2, r4
 801faa6:	462b      	mov	r3, r5
 801faa8:	a802      	add	r0, sp, #8
 801faaa:	f001 f83f 	bl	8020b2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801faae:	26ff      	movs	r6, #255	; 0xff
 801fab0:	b1d8      	cbz	r0, 801faea <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801fab2:	280a      	cmp	r0, #10
 801fab4:	d012      	beq.n	801fadc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 801fab6:	9801      	ldr	r0, [sp, #4]
 801fab8:	b180      	cbz	r0, 801fadc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 801faba:	7b47      	ldrb	r7, [r0, #13]
 801fabc:	7922      	ldrb	r2, [r4, #4]
 801fabe:	00fb      	lsls	r3, r7, #3
 801fac0:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801fac4:	7a03      	ldrb	r3, [r0, #8]
 801fac6:	430b      	orrs	r3, r1
 801fac8:	0679      	lsls	r1, r7, #25
 801faca:	bf44      	itt	mi
 801facc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801fad0:	b21b      	sxthmi	r3, r3
 801fad2:	1ad3      	subs	r3, r2, r3
 801fad4:	b2db      	uxtb	r3, r3
 801fad6:	429e      	cmp	r6, r3
 801fad8:	bf28      	it	cs
 801fada:	461e      	movcs	r6, r3
 801fadc:	462b      	mov	r3, r5
 801fade:	4622      	mov	r2, r4
 801fae0:	2100      	movs	r1, #0
 801fae2:	a802      	add	r0, sp, #8
 801fae4:	f001 f822 	bl	8020b2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801fae8:	e7e2      	b.n	801fab0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 801faea:	4630      	mov	r0, r6
 801faec:	b018      	add	sp, #96	; 0x60
 801faee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801faf2:	b003      	add	sp, #12
 801faf4:	4770      	bx	lr

0801faf6 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801faf6:	b513      	push	{r0, r1, r4, lr}
 801faf8:	1d01      	adds	r1, r0, #4
 801fafa:	4603      	mov	r3, r0
 801fafc:	c903      	ldmia	r1, {r0, r1}
 801fafe:	466a      	mov	r2, sp
 801fb00:	e882 0003 	stmia.w	r2, {r0, r1}
 801fb04:	2100      	movs	r1, #0
 801fb06:	9100      	str	r1, [sp, #0]
 801fb08:	6819      	ldr	r1, [r3, #0]
 801fb0a:	4618      	mov	r0, r3
 801fb0c:	690c      	ldr	r4, [r1, #16]
 801fb0e:	4611      	mov	r1, r2
 801fb10:	47a0      	blx	r4
 801fb12:	b002      	add	sp, #8
 801fb14:	bd10      	pop	{r4, pc}

0801fb16 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801fb16:	b538      	push	{r3, r4, r5, lr}
 801fb18:	680b      	ldr	r3, [r1, #0]
 801fb1a:	460c      	mov	r4, r1
 801fb1c:	68db      	ldr	r3, [r3, #12]
 801fb1e:	4605      	mov	r5, r0
 801fb20:	4798      	blx	r3
 801fb22:	6823      	ldr	r3, [r4, #0]
 801fb24:	4620      	mov	r0, r4
 801fb26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fb28:	4629      	mov	r1, r5
 801fb2a:	4798      	blx	r3
 801fb2c:	4628      	mov	r0, r5
 801fb2e:	bd38      	pop	{r3, r4, r5, pc}

0801fb30 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801fb30:	b410      	push	{r4}
 801fb32:	880a      	ldrh	r2, [r1, #0]
 801fb34:	8884      	ldrh	r4, [r0, #4]
 801fb36:	4422      	add	r2, r4
 801fb38:	800a      	strh	r2, [r1, #0]
 801fb3a:	88c4      	ldrh	r4, [r0, #6]
 801fb3c:	884a      	ldrh	r2, [r1, #2]
 801fb3e:	4422      	add	r2, r4
 801fb40:	804a      	strh	r2, [r1, #2]
 801fb42:	6940      	ldr	r0, [r0, #20]
 801fb44:	b120      	cbz	r0, 801fb50 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801fb46:	6803      	ldr	r3, [r0, #0]
 801fb48:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fb4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fb4e:	4718      	bx	r3
 801fb50:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fb54:	4770      	bx	lr

0801fb56 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801fb56:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fb58:	460b      	mov	r3, r1
 801fb5a:	b085      	sub	sp, #20
 801fb5c:	4604      	mov	r4, r0
 801fb5e:	b901      	cbnz	r1, 801fb62 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801fb60:	b1fa      	cbz	r2, 801fba2 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 801fb62:	1d27      	adds	r7, r4, #4
 801fb64:	e897 0003 	ldmia.w	r7, {r0, r1}
 801fb68:	466e      	mov	r6, sp
 801fb6a:	e886 0003 	stmia.w	r6, {r0, r1}
 801fb6e:	88e1      	ldrh	r1, [r4, #6]
 801fb70:	440a      	add	r2, r1
 801fb72:	88a1      	ldrh	r1, [r4, #4]
 801fb74:	4419      	add	r1, r3
 801fb76:	6823      	ldr	r3, [r4, #0]
 801fb78:	b209      	sxth	r1, r1
 801fb7a:	4620      	mov	r0, r4
 801fb7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801fb7e:	b212      	sxth	r2, r2
 801fb80:	4798      	blx	r3
 801fb82:	e897 0003 	ldmia.w	r7, {r0, r1}
 801fb86:	ad02      	add	r5, sp, #8
 801fb88:	e885 0003 	stmia.w	r5, {r0, r1}
 801fb8c:	6960      	ldr	r0, [r4, #20]
 801fb8e:	b150      	cbz	r0, 801fba6 <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 801fb90:	6803      	ldr	r3, [r0, #0]
 801fb92:	4631      	mov	r1, r6
 801fb94:	691b      	ldr	r3, [r3, #16]
 801fb96:	4798      	blx	r3
 801fb98:	6960      	ldr	r0, [r4, #20]
 801fb9a:	6803      	ldr	r3, [r0, #0]
 801fb9c:	691b      	ldr	r3, [r3, #16]
 801fb9e:	4629      	mov	r1, r5
 801fba0:	4798      	blx	r3
 801fba2:	b005      	add	sp, #20
 801fba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fba6:	f7ff fa8f 	bl	801f0c8 <_ZN8touchgfx11Application11getInstanceEv>
 801fbaa:	6803      	ldr	r3, [r0, #0]
 801fbac:	4631      	mov	r1, r6
 801fbae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801fbb0:	4798      	blx	r3
 801fbb2:	f7ff fa89 	bl	801f0c8 <_ZN8touchgfx11Application11getInstanceEv>
 801fbb6:	6803      	ldr	r3, [r0, #0]
 801fbb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801fbba:	e7f0      	b.n	801fb9e <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

0801fbbc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801fbbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801fbbe:	8882      	ldrh	r2, [r0, #4]
 801fbc0:	880b      	ldrh	r3, [r1, #0]
 801fbc2:	4413      	add	r3, r2
 801fbc4:	800b      	strh	r3, [r1, #0]
 801fbc6:	88c2      	ldrh	r2, [r0, #6]
 801fbc8:	884b      	ldrh	r3, [r1, #2]
 801fbca:	4413      	add	r3, r2
 801fbcc:	4602      	mov	r2, r0
 801fbce:	804b      	strh	r3, [r1, #2]
 801fbd0:	4605      	mov	r5, r0
 801fbd2:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801fbd6:	460c      	mov	r4, r1
 801fbd8:	6851      	ldr	r1, [r2, #4]
 801fbda:	466b      	mov	r3, sp
 801fbdc:	c303      	stmia	r3!, {r0, r1}
 801fbde:	4621      	mov	r1, r4
 801fbe0:	4668      	mov	r0, sp
 801fbe2:	f7fb f977 	bl	801aed4 <_ZN8touchgfx4RectaNERKS0_>
 801fbe6:	466b      	mov	r3, sp
 801fbe8:	cb03      	ldmia	r3!, {r0, r1}
 801fbea:	6020      	str	r0, [r4, #0]
 801fbec:	6061      	str	r1, [r4, #4]
 801fbee:	6968      	ldr	r0, [r5, #20]
 801fbf0:	b128      	cbz	r0, 801fbfe <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 801fbf2:	6803      	ldr	r3, [r0, #0]
 801fbf4:	691b      	ldr	r3, [r3, #16]
 801fbf6:	4621      	mov	r1, r4
 801fbf8:	4798      	blx	r3
 801fbfa:	b003      	add	sp, #12
 801fbfc:	bd30      	pop	{r4, r5, pc}
 801fbfe:	f7ff fa63 	bl	801f0c8 <_ZN8touchgfx11Application11getInstanceEv>
 801fc02:	6803      	ldr	r3, [r0, #0]
 801fc04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801fc06:	e7f6      	b.n	801fbf6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801fc08 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801fc08:	b570      	push	{r4, r5, r6, lr}
 801fc0a:	8882      	ldrh	r2, [r0, #4]
 801fc0c:	880b      	ldrh	r3, [r1, #0]
 801fc0e:	4413      	add	r3, r2
 801fc10:	800b      	strh	r3, [r1, #0]
 801fc12:	88c2      	ldrh	r2, [r0, #6]
 801fc14:	884b      	ldrh	r3, [r1, #2]
 801fc16:	460c      	mov	r4, r1
 801fc18:	4413      	add	r3, r2
 801fc1a:	804b      	strh	r3, [r1, #2]
 801fc1c:	4605      	mov	r5, r0
 801fc1e:	1d01      	adds	r1, r0, #4
 801fc20:	4620      	mov	r0, r4
 801fc22:	f7fb f957 	bl	801aed4 <_ZN8touchgfx4RectaNERKS0_>
 801fc26:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801fc2a:	2b00      	cmp	r3, #0
 801fc2c:	dd0b      	ble.n	801fc46 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801fc2e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801fc32:	2b00      	cmp	r3, #0
 801fc34:	dd07      	ble.n	801fc46 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801fc36:	6968      	ldr	r0, [r5, #20]
 801fc38:	b128      	cbz	r0, 801fc46 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801fc3a:	6803      	ldr	r3, [r0, #0]
 801fc3c:	4621      	mov	r1, r4
 801fc3e:	6a1b      	ldr	r3, [r3, #32]
 801fc40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801fc44:	4718      	bx	r3
 801fc46:	bd70      	pop	{r4, r5, r6, pc}

0801fc48 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801fc48:	b510      	push	{r4, lr}
 801fc4a:	4604      	mov	r4, r0
 801fc4c:	4608      	mov	r0, r1
 801fc4e:	2300      	movs	r3, #0
 801fc50:	8023      	strh	r3, [r4, #0]
 801fc52:	8063      	strh	r3, [r4, #2]
 801fc54:	6803      	ldr	r3, [r0, #0]
 801fc56:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801fc5a:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801fc5e:	80a1      	strh	r1, [r4, #4]
 801fc60:	80e2      	strh	r2, [r4, #6]
 801fc62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fc64:	4621      	mov	r1, r4
 801fc66:	4798      	blx	r3
 801fc68:	4620      	mov	r0, r4
 801fc6a:	bd10      	pop	{r4, pc}

0801fc6c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801fc6c:	b530      	push	{r4, r5, lr}
 801fc6e:	8083      	strh	r3, [r0, #4]
 801fc70:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801fc74:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801fc78:	7183      	strb	r3, [r0, #6]
 801fc7a:	79c3      	ldrb	r3, [r0, #7]
 801fc7c:	6101      	str	r1, [r0, #16]
 801fc7e:	f365 0306 	bfi	r3, r5, #0, #7
 801fc82:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801fc86:	8282      	strh	r2, [r0, #20]
 801fc88:	f365 13c7 	bfi	r3, r5, #7, #1
 801fc8c:	71c3      	strb	r3, [r0, #7]
 801fc8e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801fc92:	7203      	strb	r3, [r0, #8]
 801fc94:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801fc98:	7243      	strb	r3, [r0, #9]
 801fc9a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801fc9e:	8143      	strh	r3, [r0, #10]
 801fca0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801fca4:	8183      	strh	r3, [r0, #12]
 801fca6:	4b01      	ldr	r3, [pc, #4]	; (801fcac <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801fca8:	6003      	str	r3, [r0, #0]
 801fcaa:	bd30      	pop	{r4, r5, pc}
 801fcac:	08033868 	.word	0x08033868

0801fcb0 <_ZNK8touchgfx9ConstFont4findEt>:
 801fcb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fcb2:	6904      	ldr	r4, [r0, #16]
 801fcb4:	8a82      	ldrh	r2, [r0, #20]
 801fcb6:	88a3      	ldrh	r3, [r4, #4]
 801fcb8:	1acb      	subs	r3, r1, r3
 801fcba:	f102 32ff 	add.w	r2, r2, #4294967295
 801fcbe:	d431      	bmi.n	801fd24 <_ZNK8touchgfx9ConstFont4findEt+0x74>
 801fcc0:	4293      	cmp	r3, r2
 801fcc2:	dd0c      	ble.n	801fcde <_ZNK8touchgfx9ConstFont4findEt+0x2e>
 801fcc4:	230e      	movs	r3, #14
 801fcc6:	fb03 4302 	mla	r3, r3, r2, r4
 801fcca:	889b      	ldrh	r3, [r3, #4]
 801fccc:	1a5b      	subs	r3, r3, r1
 801fcce:	1ad3      	subs	r3, r2, r3
 801fcd0:	429a      	cmp	r2, r3
 801fcd2:	db27      	blt.n	801fd24 <_ZNK8touchgfx9ConstFont4findEt+0x74>
 801fcd4:	2b00      	cmp	r3, #0
 801fcd6:	bfbc      	itt	lt
 801fcd8:	2302      	movlt	r3, #2
 801fcda:	fb92 f3f3 	sdivlt	r3, r2, r3
 801fcde:	2500      	movs	r5, #0
 801fce0:	260e      	movs	r6, #14
 801fce2:	4295      	cmp	r5, r2
 801fce4:	dc1e      	bgt.n	801fd24 <_ZNK8touchgfx9ConstFont4findEt+0x74>
 801fce6:	fb06 4003 	mla	r0, r6, r3, r4
 801fcea:	8887      	ldrh	r7, [r0, #4]
 801fcec:	42b9      	cmp	r1, r7
 801fcee:	d01a      	beq.n	801fd26 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801fcf0:	d20d      	bcs.n	801fd0e <_ZNK8touchgfx9ConstFont4findEt+0x5e>
 801fcf2:	1e5a      	subs	r2, r3, #1
 801fcf4:	4295      	cmp	r5, r2
 801fcf6:	dc15      	bgt.n	801fd24 <_ZNK8touchgfx9ConstFont4findEt+0x74>
 801fcf8:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801fcfc:	1a5b      	subs	r3, r3, r1
 801fcfe:	1ad3      	subs	r3, r2, r3
 801fd00:	429a      	cmp	r2, r3
 801fd02:	db0f      	blt.n	801fd24 <_ZNK8touchgfx9ConstFont4findEt+0x74>
 801fd04:	429d      	cmp	r5, r3
 801fd06:	ddec      	ble.n	801fce2 <_ZNK8touchgfx9ConstFont4findEt+0x32>
 801fd08:	1953      	adds	r3, r2, r5
 801fd0a:	105b      	asrs	r3, r3, #1
 801fd0c:	e7e9      	b.n	801fce2 <_ZNK8touchgfx9ConstFont4findEt+0x32>
 801fd0e:	1c5d      	adds	r5, r3, #1
 801fd10:	42aa      	cmp	r2, r5
 801fd12:	db07      	blt.n	801fd24 <_ZNK8touchgfx9ConstFont4findEt+0x74>
 801fd14:	8a43      	ldrh	r3, [r0, #18]
 801fd16:	1acb      	subs	r3, r1, r3
 801fd18:	442b      	add	r3, r5
 801fd1a:	429d      	cmp	r5, r3
 801fd1c:	dc02      	bgt.n	801fd24 <_ZNK8touchgfx9ConstFont4findEt+0x74>
 801fd1e:	429a      	cmp	r2, r3
 801fd20:	dadf      	bge.n	801fce2 <_ZNK8touchgfx9ConstFont4findEt+0x32>
 801fd22:	e7f1      	b.n	801fd08 <_ZNK8touchgfx9ConstFont4findEt+0x58>
 801fd24:	2000      	movs	r0, #0
 801fd26:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801fd28 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801fd28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fd2a:	4604      	mov	r4, r0
 801fd2c:	4617      	mov	r7, r2
 801fd2e:	461e      	mov	r6, r3
 801fd30:	b911      	cbnz	r1, 801fd38 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801fd32:	2500      	movs	r5, #0
 801fd34:	4628      	mov	r0, r5
 801fd36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fd38:	290a      	cmp	r1, #10
 801fd3a:	d0fa      	beq.n	801fd32 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801fd3c:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801fd40:	4291      	cmp	r1, r2
 801fd42:	d0f6      	beq.n	801fd32 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801fd44:	f242 020b 	movw	r2, #8203	; 0x200b
 801fd48:	4291      	cmp	r1, r2
 801fd4a:	d0f2      	beq.n	801fd32 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801fd4c:	f7ff ffb0 	bl	801fcb0 <_ZNK8touchgfx9ConstFont4findEt>
 801fd50:	4605      	mov	r5, r0
 801fd52:	b950      	cbnz	r0, 801fd6a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801fd54:	6823      	ldr	r3, [r4, #0]
 801fd56:	4620      	mov	r0, r4
 801fd58:	691b      	ldr	r3, [r3, #16]
 801fd5a:	4798      	blx	r3
 801fd5c:	4601      	mov	r1, r0
 801fd5e:	4620      	mov	r0, r4
 801fd60:	f7ff ffa6 	bl	801fcb0 <_ZNK8touchgfx9ConstFont4findEt>
 801fd64:	4605      	mov	r5, r0
 801fd66:	2800      	cmp	r0, #0
 801fd68:	d0e3      	beq.n	801fd32 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801fd6a:	6823      	ldr	r3, [r4, #0]
 801fd6c:	4629      	mov	r1, r5
 801fd6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801fd70:	4620      	mov	r0, r4
 801fd72:	4798      	blx	r3
 801fd74:	6038      	str	r0, [r7, #0]
 801fd76:	6823      	ldr	r3, [r4, #0]
 801fd78:	4620      	mov	r0, r4
 801fd7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801fd7c:	4798      	blx	r3
 801fd7e:	7030      	strb	r0, [r6, #0]
 801fd80:	e7d8      	b.n	801fd34 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801fd82 <_ZN8touchgfx6memsetEPvhm>:
 801fd82:	4402      	add	r2, r0
 801fd84:	4290      	cmp	r0, r2
 801fd86:	d002      	beq.n	801fd8e <_ZN8touchgfx6memsetEPvhm+0xc>
 801fd88:	f800 1b01 	strb.w	r1, [r0], #1
 801fd8c:	e7fa      	b.n	801fd84 <_ZN8touchgfx6memsetEPvhm+0x2>
 801fd8e:	4770      	bx	lr

0801fd90 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801fd90:	2002      	movs	r0, #2
 801fd92:	4770      	bx	lr

0801fd94 <_ZN8touchgfx12GestureEventD1Ev>:
 801fd94:	4770      	bx	lr

0801fd96 <_ZN8touchgfx12GestureEventD0Ev>:
 801fd96:	b510      	push	{r4, lr}
 801fd98:	210c      	movs	r1, #12
 801fd9a:	4604      	mov	r4, r0
 801fd9c:	f00d f9ce 	bl	802d13c <_ZdlPvj>
 801fda0:	4620      	mov	r0, r4
 801fda2:	bd10      	pop	{r4, pc}

0801fda4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801fda4:	b530      	push	{r4, r5, lr}
 801fda6:	460d      	mov	r5, r1
 801fda8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801fdaa:	b087      	sub	sp, #28
 801fdac:	4604      	mov	r4, r0
 801fdae:	b301      	cbz	r1, 801fdf2 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801fdb0:	a801      	add	r0, sp, #4
 801fdb2:	f7ff ff49 	bl	801fc48 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801fdb6:	892a      	ldrh	r2, [r5, #8]
 801fdb8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801fdbc:	7928      	ldrb	r0, [r5, #4]
 801fdbe:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801fdc2:	f88d 0010 	strb.w	r0, [sp, #16]
 801fdc6:	1ad2      	subs	r2, r2, r3
 801fdc8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801fdca:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801fdcc:	f8ad 1012 	strh.w	r1, [sp, #18]
 801fdd0:	441a      	add	r2, r3
 801fdd2:	896b      	ldrh	r3, [r5, #10]
 801fdd4:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801fdd8:	f8ad 2014 	strh.w	r2, [sp, #20]
 801fddc:	1b5b      	subs	r3, r3, r5
 801fdde:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801fde0:	442b      	add	r3, r5
 801fde2:	4d05      	ldr	r5, [pc, #20]	; (801fdf8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801fde4:	9503      	str	r5, [sp, #12]
 801fde6:	f8ad 3016 	strh.w	r3, [sp, #22]
 801fdea:	6803      	ldr	r3, [r0, #0]
 801fdec:	a903      	add	r1, sp, #12
 801fdee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801fdf0:	4798      	blx	r3
 801fdf2:	b007      	add	sp, #28
 801fdf4:	bd30      	pop	{r4, r5, pc}
 801fdf6:	bf00      	nop
 801fdf8:	080338bc 	.word	0x080338bc

0801fdfc <_ZNK8touchgfx4Rect9intersectEss>:
 801fdfc:	b510      	push	{r4, lr}
 801fdfe:	f9b0 3000 	ldrsh.w	r3, [r0]
 801fe02:	428b      	cmp	r3, r1
 801fe04:	dc10      	bgt.n	801fe28 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801fe06:	8884      	ldrh	r4, [r0, #4]
 801fe08:	4423      	add	r3, r4
 801fe0a:	b21b      	sxth	r3, r3
 801fe0c:	4299      	cmp	r1, r3
 801fe0e:	da0b      	bge.n	801fe28 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801fe10:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801fe14:	4293      	cmp	r3, r2
 801fe16:	dc07      	bgt.n	801fe28 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801fe18:	88c0      	ldrh	r0, [r0, #6]
 801fe1a:	4418      	add	r0, r3
 801fe1c:	b200      	sxth	r0, r0
 801fe1e:	4282      	cmp	r2, r0
 801fe20:	bfac      	ite	ge
 801fe22:	2000      	movge	r0, #0
 801fe24:	2001      	movlt	r0, #1
 801fe26:	bd10      	pop	{r4, pc}
 801fe28:	2000      	movs	r0, #0
 801fe2a:	e7fc      	b.n	801fe26 <_ZNK8touchgfx4Rect9intersectEss+0x2a>

0801fe2c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801fe2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fe2e:	460c      	mov	r4, r1
 801fe30:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801fe32:	b089      	sub	sp, #36	; 0x24
 801fe34:	4605      	mov	r5, r0
 801fe36:	2900      	cmp	r1, #0
 801fe38:	d054      	beq.n	801fee4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801fe3a:	4668      	mov	r0, sp
 801fe3c:	f7ff ff04 	bl	801fc48 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801fe40:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801fe42:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801fe44:	8922      	ldrh	r2, [r4, #8]
 801fe46:	88e1      	ldrh	r1, [r4, #6]
 801fe48:	443a      	add	r2, r7
 801fe4a:	4431      	add	r1, r6
 801fe4c:	b212      	sxth	r2, r2
 801fe4e:	b209      	sxth	r1, r1
 801fe50:	4668      	mov	r0, sp
 801fe52:	f7ff ffd3 	bl	801fdfc <_ZNK8touchgfx4Rect9intersectEss>
 801fe56:	b1d0      	cbz	r0, 801fe8e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801fe58:	89a2      	ldrh	r2, [r4, #12]
 801fe5a:	8961      	ldrh	r1, [r4, #10]
 801fe5c:	443a      	add	r2, r7
 801fe5e:	4431      	add	r1, r6
 801fe60:	b212      	sxth	r2, r2
 801fe62:	b209      	sxth	r1, r1
 801fe64:	4668      	mov	r0, sp
 801fe66:	f7ff ffc9 	bl	801fdfc <_ZNK8touchgfx4Rect9intersectEss>
 801fe6a:	4603      	mov	r3, r0
 801fe6c:	b978      	cbnz	r0, 801fe8e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801fe6e:	4a1e      	ldr	r2, [pc, #120]	; (801fee8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801fe70:	9204      	str	r2, [sp, #16]
 801fe72:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801fe74:	f8ad 3016 	strh.w	r3, [sp, #22]
 801fe78:	2202      	movs	r2, #2
 801fe7a:	f88d 2014 	strb.w	r2, [sp, #20]
 801fe7e:	f8ad 3018 	strh.w	r3, [sp, #24]
 801fe82:	f8ad 301a 	strh.w	r3, [sp, #26]
 801fe86:	6803      	ldr	r3, [r0, #0]
 801fe88:	a904      	add	r1, sp, #16
 801fe8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801fe8c:	4798      	blx	r3
 801fe8e:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801fe90:	a802      	add	r0, sp, #8
 801fe92:	f7ff fed9 	bl	801fc48 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801fe96:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801fe9a:	88e0      	ldrh	r0, [r4, #6]
 801fe9c:	8961      	ldrh	r1, [r4, #10]
 801fe9e:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801fea2:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 801fea6:	8923      	ldrh	r3, [r4, #8]
 801fea8:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801feaa:	7927      	ldrb	r7, [r4, #4]
 801feac:	f88d 7014 	strb.w	r7, [sp, #20]
 801feb0:	1a80      	subs	r0, r0, r2
 801feb2:	1a89      	subs	r1, r1, r2
 801feb4:	89a2      	ldrh	r2, [r4, #12]
 801feb6:	4c0d      	ldr	r4, [pc, #52]	; (801feec <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801feb8:	9404      	str	r4, [sp, #16]
 801feba:	4460      	add	r0, ip
 801febc:	eba3 030e 	sub.w	r3, r3, lr
 801fec0:	eba2 020e 	sub.w	r2, r2, lr
 801fec4:	f8ad 0016 	strh.w	r0, [sp, #22]
 801fec8:	4433      	add	r3, r6
 801feca:	4461      	add	r1, ip
 801fecc:	4432      	add	r2, r6
 801fece:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801fed0:	f8ad 101a 	strh.w	r1, [sp, #26]
 801fed4:	f8ad 3018 	strh.w	r3, [sp, #24]
 801fed8:	f8ad 201c 	strh.w	r2, [sp, #28]
 801fedc:	6803      	ldr	r3, [r0, #0]
 801fede:	a904      	add	r1, sp, #16
 801fee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801fee2:	4798      	blx	r3
 801fee4:	b009      	add	sp, #36	; 0x24
 801fee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fee8:	08032718 	.word	0x08032718
 801feec:	0803272c 	.word	0x0803272c

0801fef0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801fef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fef4:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 801fef8:	790b      	ldrb	r3, [r1, #4]
 801fefa:	b0a1      	sub	sp, #132	; 0x84
 801fefc:	4604      	mov	r4, r0
 801fefe:	460d      	mov	r5, r1
 801ff00:	f1b9 0f00 	cmp.w	r9, #0
 801ff04:	d00f      	beq.n	801ff26 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 801ff06:	2b00      	cmp	r3, #0
 801ff08:	f040 80a0 	bne.w	802004c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x15c>
 801ff0c:	b021      	add	sp, #132	; 0x84
 801ff0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff12:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801ff16:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801ff1a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801ff1e:	1d20      	adds	r0, r4, #4
 801ff20:	f7fa ff26 	bl	801ad70 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801ff24:	e092      	b.n	802004c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x15c>
 801ff26:	2b00      	cmp	r3, #0
 801ff28:	d1f0      	bne.n	801ff0c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801ff2a:	4b5e      	ldr	r3, [pc, #376]	; (80200a4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b4>)
 801ff2c:	681b      	ldr	r3, [r3, #0]
 801ff2e:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 801ff32:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 801ff36:	f1ba 0f03 	cmp.w	sl, #3
 801ff3a:	ddea      	ble.n	801ff12 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 801ff3c:	f1ba 0f0c 	cmp.w	sl, #12
 801ff40:	f04f 0303 	mov.w	r3, #3
 801ff44:	bfdc      	itt	le
 801ff46:	f10a 32ff 	addle.w	r2, sl, #4294967295
 801ff4a:	fb92 f3f3 	sdivle	r3, r2, r3
 801ff4e:	9301      	str	r3, [sp, #4]
 801ff50:	4b55      	ldr	r3, [pc, #340]	; (80200a8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 801ff52:	4956      	ldr	r1, [pc, #344]	; (80200ac <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 801ff54:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ff58:	4b55      	ldr	r3, [pc, #340]	; (80200b0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 801ff5a:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801ff5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ff62:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801ff66:	ab0e      	add	r3, sp, #56	; 0x38
 801ff68:	2248      	movs	r2, #72	; 0x48
 801ff6a:	2600      	movs	r6, #0
 801ff6c:	4618      	mov	r0, r3
 801ff6e:	960a      	str	r6, [sp, #40]	; 0x28
 801ff70:	f00e fb17 	bl	802e5a2 <memcpy>
 801ff74:	f04f 32ff 	mov.w	r2, #4294967295
 801ff78:	e9cd 2006 	strd	r2, r0, [sp, #24]
 801ff7c:	f8cd a008 	str.w	sl, [sp, #8]
 801ff80:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801ff84:	fb93 f3f2 	sdiv	r3, r3, r2
 801ff88:	b29b      	uxth	r3, r3
 801ff8a:	46b3      	mov	fp, r6
 801ff8c:	9303      	str	r3, [sp, #12]
 801ff8e:	2300      	movs	r3, #0
 801ff90:	9309      	str	r3, [sp, #36]	; 0x24
 801ff92:	9b07      	ldr	r3, [sp, #28]
 801ff94:	9a03      	ldr	r2, [sp, #12]
 801ff96:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 801ff9a:	88ef      	ldrh	r7, [r5, #6]
 801ff9c:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801ffa0:	fb13 f302 	smulbb	r3, r3, r2
 801ffa4:	b29b      	uxth	r3, r3
 801ffa6:	9304      	str	r3, [sp, #16]
 801ffa8:	9b07      	ldr	r3, [sp, #28]
 801ffaa:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801ffae:	a80a      	add	r0, sp, #40	; 0x28
 801ffb0:	685b      	ldr	r3, [r3, #4]
 801ffb2:	fb13 f302 	smulbb	r3, r3, r2
 801ffb6:	b29b      	uxth	r3, r3
 801ffb8:	9305      	str	r3, [sp, #20]
 801ffba:	9b04      	ldr	r3, [sp, #16]
 801ffbc:	441f      	add	r7, r3
 801ffbe:	9b05      	ldr	r3, [sp, #20]
 801ffc0:	4498      	add	r8, r3
 801ffc2:	b23f      	sxth	r7, r7
 801ffc4:	fa0f f888 	sxth.w	r8, r8
 801ffc8:	4642      	mov	r2, r8
 801ffca:	4639      	mov	r1, r7
 801ffcc:	f7ff ff16 	bl	801fdfc <_ZNK8touchgfx4Rect9intersectEss>
 801ffd0:	b380      	cbz	r0, 8020034 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 801ffd2:	4639      	mov	r1, r7
 801ffd4:	ab09      	add	r3, sp, #36	; 0x24
 801ffd6:	4642      	mov	r2, r8
 801ffd8:	1d20      	adds	r0, r4, #4
 801ffda:	f7fa fec9 	bl	801ad70 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801ffde:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ffe0:	b341      	cbz	r1, 8020034 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 801ffe2:	4549      	cmp	r1, r9
 801ffe4:	d026      	beq.n	8020034 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 801ffe6:	a80c      	add	r0, sp, #48	; 0x30
 801ffe8:	f7ff fe2e 	bl	801fc48 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ffec:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801fff0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801fff4:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801fff8:	2002      	movs	r0, #2
 801fffa:	fb92 f2f0 	sdiv	r2, r2, r0
 801fffe:	440a      	add	r2, r1
 8020000:	1a99      	subs	r1, r3, r2
 8020002:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8020006:	fb93 f3f0 	sdiv	r3, r3, r0
 802000a:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 802000e:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8020012:	4403      	add	r3, r0
 8020014:	1ad3      	subs	r3, r2, r3
 8020016:	435b      	muls	r3, r3
 8020018:	9a06      	ldr	r2, [sp, #24]
 802001a:	fb01 3301 	mla	r3, r1, r1, r3
 802001e:	4293      	cmp	r3, r2
 8020020:	d208      	bcs.n	8020034 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 8020022:	9a04      	ldr	r2, [sp, #16]
 8020024:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8020028:	86a2      	strh	r2, [r4, #52]	; 0x34
 802002a:	9a05      	ldr	r2, [sp, #20]
 802002c:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 8020030:	86e2      	strh	r2, [r4, #54]	; 0x36
 8020032:	9306      	str	r3, [sp, #24]
 8020034:	f10b 0b02 	add.w	fp, fp, #2
 8020038:	f1bb 0f08 	cmp.w	fp, #8
 802003c:	dda7      	ble.n	801ff8e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 802003e:	9b02      	ldr	r3, [sp, #8]
 8020040:	4453      	add	r3, sl
 8020042:	9302      	str	r3, [sp, #8]
 8020044:	9b01      	ldr	r3, [sp, #4]
 8020046:	3601      	adds	r6, #1
 8020048:	42b3      	cmp	r3, r6
 802004a:	d199      	bne.n	801ff80 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x90>
 802004c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 802004e:	2900      	cmp	r1, #0
 8020050:	f43f af5c 	beq.w	801ff0c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8020054:	a80c      	add	r0, sp, #48	; 0x30
 8020056:	f7ff fdf7 	bl	801fc48 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 802005a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 802005e:	88ea      	ldrh	r2, [r5, #6]
 8020060:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 8020064:	7929      	ldrb	r1, [r5, #4]
 8020066:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 802006a:	1ad2      	subs	r2, r2, r3
 802006c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 802006e:	441a      	add	r2, r3
 8020070:	892b      	ldrh	r3, [r5, #8]
 8020072:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 8020076:	1a1b      	subs	r3, r3, r0
 8020078:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 802007a:	4403      	add	r3, r0
 802007c:	480d      	ldr	r0, [pc, #52]	; (80200b4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 802007e:	900e      	str	r0, [sp, #56]	; 0x38
 8020080:	2600      	movs	r6, #0
 8020082:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8020084:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8020088:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 802008c:	6803      	ldr	r3, [r0, #0]
 802008e:	a90e      	add	r1, sp, #56	; 0x38
 8020090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020092:	4798      	blx	r3
 8020094:	792b      	ldrb	r3, [r5, #4]
 8020096:	2b00      	cmp	r3, #0
 8020098:	f43f af38 	beq.w	801ff0c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 802009c:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 80200a0:	e734      	b.n	801ff0c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 80200a2:	bf00      	nop
 80200a4:	200127f4 	.word	0x200127f4
 80200a8:	200127e8 	.word	0x200127e8
 80200ac:	08030200 	.word	0x08030200
 80200b0:	200127ea 	.word	0x200127ea
 80200b4:	08032718 	.word	0x08032718

080200b8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 80200b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80200ba:	4604      	mov	r4, r0
 80200bc:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 80200c0:	3201      	adds	r2, #1
 80200c2:	d112      	bne.n	80200ea <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 80200c4:	6803      	ldr	r3, [r0, #0]
 80200c6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80200ca:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80200ce:	f8ad 1004 	strh.w	r1, [sp, #4]
 80200d2:	2500      	movs	r5, #0
 80200d4:	9500      	str	r5, [sp, #0]
 80200d6:	466d      	mov	r5, sp
 80200d8:	4629      	mov	r1, r5
 80200da:	f8ad 2006 	strh.w	r2, [sp, #6]
 80200de:	6a1b      	ldr	r3, [r3, #32]
 80200e0:	4798      	blx	r3
 80200e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80200e6:	e884 0003 	stmia.w	r4, {r0, r1}
 80200ea:	4620      	mov	r0, r4
 80200ec:	b003      	add	sp, #12
 80200ee:	bd30      	pop	{r4, r5, pc}

080200f0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 80200f0:	b513      	push	{r0, r1, r4, lr}
 80200f2:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 80200f6:	3301      	adds	r3, #1
 80200f8:	4604      	mov	r4, r0
 80200fa:	d109      	bne.n	8020110 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 80200fc:	4601      	mov	r1, r0
 80200fe:	4668      	mov	r0, sp
 8020100:	f7ff fda2 	bl	801fc48 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8020104:	f8bd 3000 	ldrh.w	r3, [sp]
 8020108:	8423      	strh	r3, [r4, #32]
 802010a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 802010e:	8463      	strh	r3, [r4, #34]	; 0x22
 8020110:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8020114:	b002      	add	sp, #8
 8020116:	bd10      	pop	{r4, pc}

08020118 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8020118:	b513      	push	{r0, r1, r4, lr}
 802011a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 802011e:	3301      	adds	r3, #1
 8020120:	4604      	mov	r4, r0
 8020122:	d109      	bne.n	8020138 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8020124:	4601      	mov	r1, r0
 8020126:	4668      	mov	r0, sp
 8020128:	f7ff fd8e 	bl	801fc48 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 802012c:	f8bd 3000 	ldrh.w	r3, [sp]
 8020130:	8423      	strh	r3, [r4, #32]
 8020132:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8020136:	8463      	strh	r3, [r4, #34]	; 0x22
 8020138:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 802013c:	b002      	add	sp, #8
 802013e:	bd10      	pop	{r4, pc}

08020140 <_ZN8touchgfx6ScreenC1Ev>:
 8020140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020142:	4605      	mov	r5, r0
 8020144:	4b17      	ldr	r3, [pc, #92]	; (80201a4 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8020146:	f845 3b04 	str.w	r3, [r5], #4
 802014a:	2301      	movs	r3, #1
 802014c:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 8020150:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8020154:	4b14      	ldr	r3, [pc, #80]	; (80201a8 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8020156:	4915      	ldr	r1, [pc, #84]	; (80201ac <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8020158:	f9b3 7000 	ldrsh.w	r7, [r3]
 802015c:	4b14      	ldr	r3, [pc, #80]	; (80201b0 <_ZN8touchgfx6ScreenC1Ev+0x70>)
 802015e:	6041      	str	r1, [r0, #4]
 8020160:	2200      	movs	r2, #0
 8020162:	8102      	strh	r2, [r0, #8]
 8020164:	8142      	strh	r2, [r0, #10]
 8020166:	8182      	strh	r2, [r0, #12]
 8020168:	81c2      	strh	r2, [r0, #14]
 802016a:	8202      	strh	r2, [r0, #16]
 802016c:	8242      	strh	r2, [r0, #18]
 802016e:	8282      	strh	r2, [r0, #20]
 8020170:	82c2      	strh	r2, [r0, #22]
 8020172:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8020176:	6202      	str	r2, [r0, #32]
 8020178:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 802017c:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 8020180:	6342      	str	r2, [r0, #52]	; 0x34
 8020182:	f9b3 6000 	ldrsh.w	r6, [r3]
 8020186:	4611      	mov	r1, r2
 8020188:	4604      	mov	r4, r0
 802018a:	4628      	mov	r0, r5
 802018c:	f7ec fc1f 	bl	800c9ce <_ZN8touchgfx8Drawable5setXYEss>
 8020190:	4639      	mov	r1, r7
 8020192:	4628      	mov	r0, r5
 8020194:	f7ec fc39 	bl	800ca0a <_ZN8touchgfx8Drawable8setWidthEs>
 8020198:	4628      	mov	r0, r5
 802019a:	4631      	mov	r1, r6
 802019c:	f7ec fc44 	bl	800ca28 <_ZN8touchgfx8Drawable9setHeightEs>
 80201a0:	4620      	mov	r0, r4
 80201a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80201a4:	080338d0 	.word	0x080338d0
 80201a8:	200127e8 	.word	0x200127e8
 80201ac:	08032044 	.word	0x08032044
 80201b0:	200127ea 	.word	0x200127ea

080201b4 <_ZN8touchgfx6Screen4drawEv>:
 80201b4:	b507      	push	{r0, r1, r2, lr}
 80201b6:	4b09      	ldr	r3, [pc, #36]	; (80201dc <_ZN8touchgfx6Screen4drawEv+0x28>)
 80201b8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80201bc:	4b08      	ldr	r3, [pc, #32]	; (80201e0 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 80201be:	f8ad 2004 	strh.w	r2, [sp, #4]
 80201c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80201c6:	f8ad 3006 	strh.w	r3, [sp, #6]
 80201ca:	6803      	ldr	r3, [r0, #0]
 80201cc:	2100      	movs	r1, #0
 80201ce:	9100      	str	r1, [sp, #0]
 80201d0:	689b      	ldr	r3, [r3, #8]
 80201d2:	4669      	mov	r1, sp
 80201d4:	4798      	blx	r3
 80201d6:	b003      	add	sp, #12
 80201d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80201dc:	200127e8 	.word	0x200127e8
 80201e0:	200127ea 	.word	0x200127ea

080201e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 80201e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201e8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80201ec:	2b00      	cmp	r3, #0
 80201ee:	b089      	sub	sp, #36	; 0x24
 80201f0:	4680      	mov	r8, r0
 80201f2:	460c      	mov	r4, r1
 80201f4:	4615      	mov	r5, r2
 80201f6:	dd0e      	ble.n	8020216 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80201f8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80201fc:	2b00      	cmp	r3, #0
 80201fe:	dd0a      	ble.n	8020216 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8020200:	4628      	mov	r0, r5
 8020202:	f7ff ff59 	bl	80200b8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8020206:	4621      	mov	r1, r4
 8020208:	f7fe ff1a 	bl	801f040 <_ZNK8touchgfx4Rect9intersectERKS0_>
 802020c:	69eb      	ldr	r3, [r5, #28]
 802020e:	b928      	cbnz	r0, 802021c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8020210:	461d      	mov	r5, r3
 8020212:	2b00      	cmp	r3, #0
 8020214:	d1f4      	bne.n	8020200 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8020216:	b009      	add	sp, #36	; 0x24
 8020218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802021c:	ae04      	add	r6, sp, #16
 802021e:	2b00      	cmp	r3, #0
 8020220:	d051      	beq.n	80202c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xe2>
 8020222:	682b      	ldr	r3, [r5, #0]
 8020224:	4629      	mov	r1, r5
 8020226:	68db      	ldr	r3, [r3, #12]
 8020228:	a802      	add	r0, sp, #8
 802022a:	4798      	blx	r3
 802022c:	4628      	mov	r0, r5
 802022e:	f7ff ff5f 	bl	80200f0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8020232:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8020236:	4407      	add	r7, r0
 8020238:	4628      	mov	r0, r5
 802023a:	f7ff ff6d 	bl	8020118 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 802023e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8020242:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8020246:	f8ad 2014 	strh.w	r2, [sp, #20]
 802024a:	4418      	add	r0, r3
 802024c:	4621      	mov	r1, r4
 802024e:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8020252:	f8ad 0012 	strh.w	r0, [sp, #18]
 8020256:	b23f      	sxth	r7, r7
 8020258:	4630      	mov	r0, r6
 802025a:	f8ad 3016 	strh.w	r3, [sp, #22]
 802025e:	f8ad 7010 	strh.w	r7, [sp, #16]
 8020262:	f7fa fe37 	bl	801aed4 <_ZN8touchgfx4RectaNERKS0_>
 8020266:	4628      	mov	r0, r5
 8020268:	f7ff ff26 	bl	80200b8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 802026c:	4602      	mov	r2, r0
 802026e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8020272:	ab06      	add	r3, sp, #24
 8020274:	e883 0003 	stmia.w	r3, {r0, r1}
 8020278:	4611      	mov	r1, r2
 802027a:	4618      	mov	r0, r3
 802027c:	f7fa fe2a 	bl	801aed4 <_ZN8touchgfx4RectaNERKS0_>
 8020280:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8020284:	f9b4 1000 	ldrsh.w	r1, [r4]
 8020288:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 802028c:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8020290:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8020294:	4299      	cmp	r1, r3
 8020296:	d10b      	bne.n	80202b0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xcc>
 8020298:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 802029c:	4552      	cmp	r2, sl
 802029e:	d107      	bne.n	80202b0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xcc>
 80202a0:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80202a4:	455a      	cmp	r2, fp
 80202a6:	d103      	bne.n	80202b0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xcc>
 80202a8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80202ac:	454a      	cmp	r2, r9
 80202ae:	d00a      	beq.n	80202c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xe2>
 80202b0:	f1bb 0f00 	cmp.w	fp, #0
 80202b4:	d002      	beq.n	80202bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>
 80202b6:	f1b9 0f00 	cmp.w	r9, #0
 80202ba:	d12e      	bne.n	802031a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x136>
 80202bc:	69ea      	ldr	r2, [r5, #28]
 80202be:	4621      	mov	r1, r4
 80202c0:	4640      	mov	r0, r8
 80202c2:	f7ff ff8f 	bl	80201e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80202c6:	4628      	mov	r0, r5
 80202c8:	f7ff fef6 	bl	80200b8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80202cc:	6861      	ldr	r1, [r4, #4]
 80202ce:	4602      	mov	r2, r0
 80202d0:	6820      	ldr	r0, [r4, #0]
 80202d2:	4633      	mov	r3, r6
 80202d4:	c303      	stmia	r3!, {r0, r1}
 80202d6:	4611      	mov	r1, r2
 80202d8:	4630      	mov	r0, r6
 80202da:	f7fa fdfb 	bl	801aed4 <_ZN8touchgfx4RectaNERKS0_>
 80202de:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80202e2:	2b00      	cmp	r3, #0
 80202e4:	dd97      	ble.n	8020216 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80202e6:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80202ea:	2b00      	cmp	r3, #0
 80202ec:	dd93      	ble.n	8020216 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80202ee:	4628      	mov	r0, r5
 80202f0:	f7ff fefe 	bl	80200f0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80202f4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80202f8:	1a18      	subs	r0, r3, r0
 80202fa:	f8ad 0010 	strh.w	r0, [sp, #16]
 80202fe:	4628      	mov	r0, r5
 8020300:	f7ff ff0a 	bl	8020118 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8020304:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8020308:	1a18      	subs	r0, r3, r0
 802030a:	f8ad 0012 	strh.w	r0, [sp, #18]
 802030e:	682b      	ldr	r3, [r5, #0]
 8020310:	4631      	mov	r1, r6
 8020312:	689b      	ldr	r3, [r3, #8]
 8020314:	4628      	mov	r0, r5
 8020316:	4798      	blx	r3
 8020318:	e77d      	b.n	8020216 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 802031a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 802031e:	fa1f f08a 	uxth.w	r0, sl
 8020322:	4552      	cmp	r2, sl
 8020324:	9000      	str	r0, [sp, #0]
 8020326:	da12      	bge.n	802034e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x16a>
 8020328:	9301      	str	r3, [sp, #4]
 802032a:	9b00      	ldr	r3, [sp, #0]
 802032c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8020330:	f8ad 2012 	strh.w	r2, [sp, #18]
 8020334:	1a9a      	subs	r2, r3, r2
 8020336:	f8ad 1010 	strh.w	r1, [sp, #16]
 802033a:	f8ad 0014 	strh.w	r0, [sp, #20]
 802033e:	f8ad 2016 	strh.w	r2, [sp, #22]
 8020342:	69ea      	ldr	r2, [r5, #28]
 8020344:	4631      	mov	r1, r6
 8020346:	4640      	mov	r0, r8
 8020348:	f7ff ff4c 	bl	80201e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 802034c:	9b01      	ldr	r3, [sp, #4]
 802034e:	f9b4 2000 	ldrsh.w	r2, [r4]
 8020352:	429a      	cmp	r2, r3
 8020354:	b29f      	uxth	r7, r3
 8020356:	da0d      	bge.n	8020374 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x190>
 8020358:	f8ad 2010 	strh.w	r2, [sp, #16]
 802035c:	1aba      	subs	r2, r7, r2
 802035e:	f8ad a012 	strh.w	sl, [sp, #18]
 8020362:	f8ad 2014 	strh.w	r2, [sp, #20]
 8020366:	f8ad 9016 	strh.w	r9, [sp, #22]
 802036a:	69ea      	ldr	r2, [r5, #28]
 802036c:	4631      	mov	r1, r6
 802036e:	4640      	mov	r0, r8
 8020370:	f7ff ff38 	bl	80201e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8020374:	8822      	ldrh	r2, [r4, #0]
 8020376:	88a3      	ldrh	r3, [r4, #4]
 8020378:	445f      	add	r7, fp
 802037a:	4413      	add	r3, r2
 802037c:	b29b      	uxth	r3, r3
 802037e:	b2bf      	uxth	r7, r7
 8020380:	b23a      	sxth	r2, r7
 8020382:	b219      	sxth	r1, r3
 8020384:	4291      	cmp	r1, r2
 8020386:	dd0d      	ble.n	80203a4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c0>
 8020388:	1bdb      	subs	r3, r3, r7
 802038a:	f8ad 2010 	strh.w	r2, [sp, #16]
 802038e:	f8ad a012 	strh.w	sl, [sp, #18]
 8020392:	f8ad 3014 	strh.w	r3, [sp, #20]
 8020396:	f8ad 9016 	strh.w	r9, [sp, #22]
 802039a:	69ea      	ldr	r2, [r5, #28]
 802039c:	4631      	mov	r1, r6
 802039e:	4640      	mov	r0, r8
 80203a0:	f7ff ff20 	bl	80201e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80203a4:	88e2      	ldrh	r2, [r4, #6]
 80203a6:	8863      	ldrh	r3, [r4, #2]
 80203a8:	4413      	add	r3, r2
 80203aa:	9a00      	ldr	r2, [sp, #0]
 80203ac:	444a      	add	r2, r9
 80203ae:	b29b      	uxth	r3, r3
 80203b0:	fa1f f982 	uxth.w	r9, r2
 80203b4:	fa0f f289 	sxth.w	r2, r9
 80203b8:	b219      	sxth	r1, r3
 80203ba:	428a      	cmp	r2, r1
 80203bc:	da83      	bge.n	80202c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xe2>
 80203be:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80203c2:	f9b4 0000 	ldrsh.w	r0, [r4]
 80203c6:	f8ad 1014 	strh.w	r1, [sp, #20]
 80203ca:	eba3 0309 	sub.w	r3, r3, r9
 80203ce:	f8ad 0010 	strh.w	r0, [sp, #16]
 80203d2:	f8ad 2012 	strh.w	r2, [sp, #18]
 80203d6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80203da:	69ea      	ldr	r2, [r5, #28]
 80203dc:	4631      	mov	r1, r6
 80203de:	e76f      	b.n	80202c0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xdc>

080203e0 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 80203e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80203e2:	aa02      	add	r2, sp, #8
 80203e4:	2300      	movs	r3, #0
 80203e6:	f842 3d04 	str.w	r3, [r2, #-4]!
 80203ea:	4604      	mov	r4, r0
 80203ec:	3004      	adds	r0, #4
 80203ee:	460d      	mov	r5, r1
 80203f0:	f7fa fe48 	bl	801b084 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 80203f4:	9a01      	ldr	r2, [sp, #4]
 80203f6:	b11a      	cbz	r2, 8020400 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 80203f8:	4629      	mov	r1, r5
 80203fa:	4620      	mov	r0, r4
 80203fc:	f7ff fef2 	bl	80201e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8020400:	b003      	add	sp, #12
 8020402:	bd30      	pop	{r4, r5, pc}

08020404 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8020404:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8020406:	4602      	mov	r2, r0
 8020408:	4604      	mov	r4, r0
 802040a:	f852 0f08 	ldr.w	r0, [r2, #8]!
 802040e:	460d      	mov	r5, r1
 8020410:	6851      	ldr	r1, [r2, #4]
 8020412:	466b      	mov	r3, sp
 8020414:	c303      	stmia	r3!, {r0, r1}
 8020416:	4629      	mov	r1, r5
 8020418:	4668      	mov	r0, sp
 802041a:	f7fa fd5b 	bl	801aed4 <_ZN8touchgfx4RectaNERKS0_>
 802041e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8020422:	4669      	mov	r1, sp
 8020424:	b123      	cbz	r3, 8020430 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 8020426:	4620      	mov	r0, r4
 8020428:	f7ff ffda 	bl	80203e0 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 802042c:	b003      	add	sp, #12
 802042e:	bd30      	pop	{r4, r5, pc}
 8020430:	1d20      	adds	r0, r4, #4
 8020432:	f7fa fdee 	bl	801b012 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8020436:	e7f9      	b.n	802042c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

08020438 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8020438:	680a      	ldr	r2, [r1, #0]
 802043a:	460b      	mov	r3, r1
 802043c:	6992      	ldr	r2, [r2, #24]
 802043e:	1d01      	adds	r1, r0, #4
 8020440:	4618      	mov	r0, r3
 8020442:	4710      	bx	r2

08020444 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 8020444:	b510      	push	{r4, lr}
 8020446:	4298      	cmp	r0, r3
 8020448:	eb01 0402 	add.w	r4, r1, r2
 802044c:	b224      	sxth	r4, r4
 802044e:	d22c      	bcs.n	80204aa <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x66>
 8020450:	b35b      	cbz	r3, 80204aa <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x66>
 8020452:	ee07 0a90 	vmov	s15, r0
 8020456:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 802045a:	ee07 3a90 	vmov	s15, r3
 802045e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8020462:	ee07 2a90 	vmov	s15, r2
 8020466:	ee86 7a26 	vdiv.f32	s14, s12, s13
 802046a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802046e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8020472:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8020476:	ee67 5a07 	vmul.f32	s11, s14, s14
 802047a:	ee07 1a90 	vmov	s15, r1
 802047e:	eee5 6a87 	vfma.f32	s13, s11, s14
 8020482:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020486:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 802048a:	eee6 7a26 	vfma.f32	s15, s12, s13
 802048e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020496:	bfcc      	ite	gt
 8020498:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 802049c:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 80204a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80204a4:	ee17 3a90 	vmov	r3, s15
 80204a8:	b21c      	sxth	r4, r3
 80204aa:	4620      	mov	r0, r4
 80204ac:	bd10      	pop	{r4, pc}

080204ae <_ZN8touchgfx12TextProviderC1Ev>:
 80204ae:	b510      	push	{r4, lr}
 80204b0:	2300      	movs	r3, #0
 80204b2:	2201      	movs	r2, #1
 80204b4:	4604      	mov	r4, r0
 80204b6:	e9c0 3300 	strd	r3, r3, [r0]
 80204ba:	60c3      	str	r3, [r0, #12]
 80204bc:	7403      	strb	r3, [r0, #16]
 80204be:	82c3      	strh	r3, [r0, #22]
 80204c0:	8303      	strh	r3, [r0, #24]
 80204c2:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80204c4:	8603      	strh	r3, [r0, #48]	; 0x30
 80204c6:	86c3      	strh	r3, [r0, #54]	; 0x36
 80204c8:	8703      	strh	r3, [r0, #56]	; 0x38
 80204ca:	63c3      	str	r3, [r0, #60]	; 0x3c
 80204cc:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 80204d0:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 80204d4:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 80204d8:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 80204dc:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 80204e0:	f7ee faea 	bl	800eab8 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 80204e4:	4620      	mov	r0, r4
 80204e6:	bd10      	pop	{r4, pc}

080204e8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 80204e8:	b530      	push	{r4, r5, lr}
 80204ea:	2500      	movs	r5, #0
 80204ec:	2401      	movs	r4, #1
 80204ee:	6843      	ldr	r3, [r0, #4]
 80204f0:	b913      	cbnz	r3, 80204f8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 80204f2:	6803      	ldr	r3, [r0, #0]
 80204f4:	b1f3      	cbz	r3, 8020534 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 80204f6:	6043      	str	r3, [r0, #4]
 80204f8:	7c03      	ldrb	r3, [r0, #16]
 80204fa:	b143      	cbz	r3, 802050e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 80204fc:	68c3      	ldr	r3, [r0, #12]
 80204fe:	b12b      	cbz	r3, 802050c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8020500:	881a      	ldrh	r2, [r3, #0]
 8020502:	b11a      	cbz	r2, 802050c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8020504:	1c9a      	adds	r2, r3, #2
 8020506:	60c2      	str	r2, [r0, #12]
 8020508:	8818      	ldrh	r0, [r3, #0]
 802050a:	bd30      	pop	{r4, r5, pc}
 802050c:	7405      	strb	r5, [r0, #16]
 802050e:	6843      	ldr	r3, [r0, #4]
 8020510:	8819      	ldrh	r1, [r3, #0]
 8020512:	b179      	cbz	r1, 8020534 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8020514:	1c9a      	adds	r2, r3, #2
 8020516:	2902      	cmp	r1, #2
 8020518:	6042      	str	r2, [r0, #4]
 802051a:	d1f5      	bne.n	8020508 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 802051c:	6883      	ldr	r3, [r0, #8]
 802051e:	1d1a      	adds	r2, r3, #4
 8020520:	6082      	str	r2, [r0, #8]
 8020522:	681b      	ldr	r3, [r3, #0]
 8020524:	60c3      	str	r3, [r0, #12]
 8020526:	2b00      	cmp	r3, #0
 8020528:	d0e1      	beq.n	80204ee <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 802052a:	881b      	ldrh	r3, [r3, #0]
 802052c:	2b00      	cmp	r3, #0
 802052e:	d0de      	beq.n	80204ee <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8020530:	7404      	strb	r4, [r0, #16]
 8020532:	e7dc      	b.n	80204ee <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8020534:	2000      	movs	r0, #0
 8020536:	e7e8      	b.n	802050a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08020538 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 8020538:	b410      	push	{r4}
 802053a:	63c3      	str	r3, [r0, #60]	; 0x3c
 802053c:	2300      	movs	r3, #0
 802053e:	6082      	str	r2, [r0, #8]
 8020540:	6001      	str	r1, [r0, #0]
 8020542:	6043      	str	r3, [r0, #4]
 8020544:	60c3      	str	r3, [r0, #12]
 8020546:	7403      	strb	r3, [r0, #16]
 8020548:	8603      	strh	r3, [r0, #48]	; 0x30
 802054a:	8303      	strh	r3, [r0, #24]
 802054c:	8703      	strh	r3, [r0, #56]	; 0x38
 802054e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020552:	f7ee bab1 	b.w	800eab8 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08020556 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8020556:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020558:	4605      	mov	r5, r0
 802055a:	4608      	mov	r0, r1
 802055c:	b1e9      	cbz	r1, 802059a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 802055e:	f105 0440 	add.w	r4, r5, #64	; 0x40
 8020562:	460b      	mov	r3, r1
 8020564:	f101 0708 	add.w	r7, r1, #8
 8020568:	4622      	mov	r2, r4
 802056a:	6818      	ldr	r0, [r3, #0]
 802056c:	6859      	ldr	r1, [r3, #4]
 802056e:	4626      	mov	r6, r4
 8020570:	c603      	stmia	r6!, {r0, r1}
 8020572:	3308      	adds	r3, #8
 8020574:	42bb      	cmp	r3, r7
 8020576:	4634      	mov	r4, r6
 8020578:	d1f7      	bne.n	802056a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 802057a:	6818      	ldr	r0, [r3, #0]
 802057c:	6030      	str	r0, [r6, #0]
 802057e:	889b      	ldrh	r3, [r3, #4]
 8020580:	80b3      	strh	r3, [r6, #4]
 8020582:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 8020586:	015b      	lsls	r3, r3, #5
 8020588:	f403 7180 	and.w	r1, r3, #256	; 0x100
 802058c:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 8020590:	430b      	orrs	r3, r1
 8020592:	425b      	negs	r3, r3
 8020594:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 8020598:	4610      	mov	r0, r2
 802059a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802059c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 802059c:	b538      	push	{r3, r4, r5, lr}
 802059e:	460c      	mov	r4, r1
 80205a0:	6811      	ldr	r1, [r2, #0]
 80205a2:	4610      	mov	r0, r2
 80205a4:	68cd      	ldr	r5, [r1, #12]
 80205a6:	4619      	mov	r1, r3
 80205a8:	47a8      	blx	r5
 80205aa:	2800      	cmp	r0, #0
 80205ac:	bf08      	it	eq
 80205ae:	4620      	moveq	r0, r4
 80205b0:	bd38      	pop	{r3, r4, r5, pc}
	...

080205b4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 80205b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80205b6:	4604      	mov	r4, r0
 80205b8:	4615      	mov	r5, r2
 80205ba:	4608      	mov	r0, r1
 80205bc:	b93a      	cbnz	r2, 80205ce <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 80205be:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 80205c2:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 80205c6:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 80205ca:	4628      	mov	r0, r5
 80205cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80205ce:	f892 c00d 	ldrb.w	ip, [r2, #13]
 80205d2:	8893      	ldrh	r3, [r2, #4]
 80205d4:	ea4f 160c 	mov.w	r6, ip, lsl #4
 80205d8:	f406 7280 	and.w	r2, r6, #256	; 0x100
 80205dc:	79ee      	ldrb	r6, [r5, #7]
 80205de:	4316      	orrs	r6, r2
 80205e0:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 80205e4:	189a      	adds	r2, r3, r2
 80205e6:	b291      	uxth	r1, r2
 80205e8:	291d      	cmp	r1, #29
 80205ea:	b2b7      	uxth	r7, r6
 80205ec:	f200 8083 	bhi.w	80206f6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 80205f0:	2201      	movs	r2, #1
 80205f2:	408a      	lsls	r2, r1
 80205f4:	4978      	ldr	r1, [pc, #480]	; (80207d8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 80205f6:	420a      	tst	r2, r1
 80205f8:	ea4f 06e6 	mov.w	r6, r6, asr #3
 80205fc:	d12d      	bne.n	802065a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 80205fe:	f412 7f60 	tst.w	r2, #896	; 0x380
 8020602:	d078      	beq.n	80206f6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 8020604:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8020608:	462b      	mov	r3, r5
 802060a:	f105 0e08 	add.w	lr, r5, #8
 802060e:	4615      	mov	r5, r2
 8020610:	6818      	ldr	r0, [r3, #0]
 8020612:	6859      	ldr	r1, [r3, #4]
 8020614:	4694      	mov	ip, r2
 8020616:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 802061a:	3308      	adds	r3, #8
 802061c:	4573      	cmp	r3, lr
 802061e:	4662      	mov	r2, ip
 8020620:	d1f6      	bne.n	8020610 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5c>
 8020622:	6818      	ldr	r0, [r3, #0]
 8020624:	f8cc 0000 	str.w	r0, [ip]
 8020628:	889b      	ldrh	r3, [r3, #4]
 802062a:	f8ac 3004 	strh.w	r3, [ip, #4]
 802062e:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8020632:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 8020636:	b2b3      	uxth	r3, r6
 8020638:	1aca      	subs	r2, r1, r3
 802063a:	b292      	uxth	r2, r2
 802063c:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
 8020640:	10d2      	asrs	r2, r2, #3
 8020642:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8020646:	f002 0260 	and.w	r2, r2, #96	; 0x60
 802064a:	4302      	orrs	r2, r0
 802064c:	1bcf      	subs	r7, r1, r7
 802064e:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
 8020652:	1afb      	subs	r3, r7, r3
 8020654:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 8020658:	e7b7      	b.n	80205ca <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 802065a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 802065c:	b92b      	cbnz	r3, 802066a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 802065e:	4b5f      	ldr	r3, [pc, #380]	; (80207dc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 8020660:	4a5f      	ldr	r2, [pc, #380]	; (80207e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 8020662:	4860      	ldr	r0, [pc, #384]	; (80207e4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 8020664:	21c0      	movs	r1, #192	; 0xc0
 8020666:	f00d fe37 	bl	802e2d8 <__assert_func>
 802066a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 802066c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8020670:	8b59      	ldrh	r1, [r3, #26]
 8020672:	f640 6333 	movw	r3, #3635	; 0xe33
 8020676:	4299      	cmp	r1, r3
 8020678:	d110      	bne.n	802069c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 802067a:	6803      	ldr	r3, [r0, #0]
 802067c:	68db      	ldr	r3, [r3, #12]
 802067e:	4798      	blx	r3
 8020680:	7b41      	ldrb	r1, [r0, #13]
 8020682:	00cb      	lsls	r3, r1, #3
 8020684:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8020688:	7a03      	ldrb	r3, [r0, #8]
 802068a:	0648      	lsls	r0, r1, #25
 802068c:	ea43 0302 	orr.w	r3, r3, r2
 8020690:	bf44      	itt	mi
 8020692:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8020696:	b21b      	sxthmi	r3, r3
 8020698:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 802069c:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 80206a0:	443b      	add	r3, r7
 80206a2:	4433      	add	r3, r6
 80206a4:	b29b      	uxth	r3, r3
 80206a6:	f104 0640 	add.w	r6, r4, #64	; 0x40
 80206aa:	462a      	mov	r2, r5
 80206ac:	f105 0c08 	add.w	ip, r5, #8
 80206b0:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 80206b4:	4635      	mov	r5, r6
 80206b6:	6810      	ldr	r0, [r2, #0]
 80206b8:	6851      	ldr	r1, [r2, #4]
 80206ba:	4637      	mov	r7, r6
 80206bc:	c703      	stmia	r7!, {r0, r1}
 80206be:	3208      	adds	r2, #8
 80206c0:	4562      	cmp	r2, ip
 80206c2:	463e      	mov	r6, r7
 80206c4:	d1f7      	bne.n	80206b6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 80206c6:	6810      	ldr	r0, [r2, #0]
 80206c8:	6038      	str	r0, [r7, #0]
 80206ca:	8892      	ldrh	r2, [r2, #4]
 80206cc:	80ba      	strh	r2, [r7, #4]
 80206ce:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 80206d2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 80206d6:	10db      	asrs	r3, r3, #3
 80206d8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80206dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80206e0:	4313      	orrs	r3, r2
 80206e2:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 80206e6:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 80206ea:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 80206ee:	1a9b      	subs	r3, r3, r2
 80206f0:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 80206f4:	e769      	b.n	80205ca <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80206f6:	f023 0204 	bic.w	r2, r3, #4
 80206fa:	f640 611b 	movw	r1, #3611	; 0xe1b
 80206fe:	428a      	cmp	r2, r1
 8020700:	d003      	beq.n	802070a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x156>
 8020702:	f640 621d 	movw	r2, #3613	; 0xe1d
 8020706:	4293      	cmp	r3, r2
 8020708:	d120      	bne.n	802074c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x198>
 802070a:	3b01      	subs	r3, #1
 802070c:	4602      	mov	r2, r0
 802070e:	b29b      	uxth	r3, r3
 8020710:	4629      	mov	r1, r5
 8020712:	4620      	mov	r0, r4
 8020714:	f7ff ff42 	bl	802059c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8020718:	7b41      	ldrb	r1, [r0, #13]
 802071a:	00cb      	lsls	r3, r1, #3
 802071c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8020720:	7a03      	ldrb	r3, [r0, #8]
 8020722:	0649      	lsls	r1, r1, #25
 8020724:	ea43 0302 	orr.w	r3, r3, r2
 8020728:	bf44      	itt	mi
 802072a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 802072e:	b21b      	sxthmi	r3, r3
 8020730:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8020734:	7b6b      	ldrb	r3, [r5, #13]
 8020736:	7aaa      	ldrb	r2, [r5, #10]
 8020738:	005b      	lsls	r3, r3, #1
 802073a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802073e:	4313      	orrs	r3, r2
 8020740:	115a      	asrs	r2, r3, #5
 8020742:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8020746:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 802074a:	e036      	b.n	80207ba <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 802074c:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8020750:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8020754:	7a2a      	ldrb	r2, [r5, #8]
 8020756:	f01c 0f40 	tst.w	ip, #64	; 0x40
 802075a:	ea42 0201 	orr.w	r2, r2, r1
 802075e:	bf1c      	itt	ne
 8020760:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8020764:	b212      	sxthne	r2, r2
 8020766:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 802076a:	f640 6109 	movw	r1, #3593	; 0xe09
 802076e:	f023 0210 	bic.w	r2, r3, #16
 8020772:	428a      	cmp	r2, r1
 8020774:	d003      	beq.n	802077e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ca>
 8020776:	f640 6213 	movw	r2, #3603	; 0xe13
 802077a:	4293      	cmp	r3, r2
 802077c:	d12a      	bne.n	80207d4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 802077e:	7b6e      	ldrb	r6, [r5, #13]
 8020780:	0076      	lsls	r6, r6, #1
 8020782:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8020786:	7aae      	ldrb	r6, [r5, #10]
 8020788:	4316      	orrs	r6, r2
 802078a:	f640 6213 	movw	r2, #3603	; 0xe13
 802078e:	4293      	cmp	r3, r2
 8020790:	bf18      	it	ne
 8020792:	f103 33ff 	addne.w	r3, r3, #4294967295
 8020796:	4602      	mov	r2, r0
 8020798:	bf14      	ite	ne
 802079a:	b29b      	uxthne	r3, r3
 802079c:	f640 630c 	movweq	r3, #3596	; 0xe0c
 80207a0:	4629      	mov	r1, r5
 80207a2:	4620      	mov	r0, r4
 80207a4:	f7ff fefa 	bl	802059c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80207a8:	7b43      	ldrb	r3, [r0, #13]
 80207aa:	7a82      	ldrb	r2, [r0, #10]
 80207ac:	005b      	lsls	r3, r3, #1
 80207ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80207b2:	4313      	orrs	r3, r2
 80207b4:	1af6      	subs	r6, r6, r3
 80207b6:	f8a4 6052 	strh.w	r6, [r4, #82]	; 0x52
 80207ba:	7b69      	ldrb	r1, [r5, #13]
 80207bc:	00cb      	lsls	r3, r1, #3
 80207be:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80207c2:	7a2b      	ldrb	r3, [r5, #8]
 80207c4:	4313      	orrs	r3, r2
 80207c6:	064a      	lsls	r2, r1, #25
 80207c8:	bf44      	itt	mi
 80207ca:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80207ce:	b21b      	sxthmi	r3, r3
 80207d0:	1bdb      	subs	r3, r3, r7
 80207d2:	e73f      	b.n	8020654 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 80207d4:	2300      	movs	r3, #0
 80207d6:	e7b6      	b.n	8020746 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x192>
 80207d8:	3fc00079 	.word	0x3fc00079
 80207dc:	080338fc 	.word	0x080338fc
 80207e0:	08033b6e 	.word	0x08033b6e
 80207e4:	08033905 	.word	0x08033905

080207e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 80207e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80207ec:	4604      	mov	r4, r0
 80207ee:	b942      	cbnz	r2, 8020802 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 80207f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80207f4:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 80207f8:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 80207fc:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8020800:	e046      	b.n	8020890 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 8020802:	7b51      	ldrb	r1, [r2, #13]
 8020804:	8893      	ldrh	r3, [r2, #4]
 8020806:	010f      	lsls	r7, r1, #4
 8020808:	f407 7080 	and.w	r0, r7, #256	; 0x100
 802080c:	79d7      	ldrb	r7, [r2, #7]
 802080e:	4307      	orrs	r7, r0
 8020810:	2f04      	cmp	r7, #4
 8020812:	b2bd      	uxth	r5, r7
 8020814:	bfcc      	ite	gt
 8020816:	08bf      	lsrgt	r7, r7, #2
 8020818:	2701      	movle	r7, #1
 802081a:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 802081e:	f200 80ab 	bhi.w	8020978 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 8020822:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8020826:	4283      	cmp	r3, r0
 8020828:	d216      	bcs.n	8020858 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 802082a:	f240 605b 	movw	r0, #1627	; 0x65b
 802082e:	4283      	cmp	r3, r0
 8020830:	d859      	bhi.n	80208e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 8020832:	f240 6057 	movw	r0, #1623	; 0x657
 8020836:	4283      	cmp	r3, r0
 8020838:	d20e      	bcs.n	8020858 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 802083a:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 802083e:	d24a      	bcs.n	80208d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 8020840:	f240 604e 	movw	r0, #1614	; 0x64e
 8020844:	4283      	cmp	r3, r0
 8020846:	d207      	bcs.n	8020858 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8020848:	f240 601a 	movw	r0, #1562	; 0x61a
 802084c:	4283      	cmp	r3, r0
 802084e:	d02a      	beq.n	80208a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8020850:	d821      	bhi.n	8020896 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 8020852:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8020856:	d35b      	bcc.n	8020910 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8020858:	f9b4 304e 	ldrsh.w	r3, [r4, #78]	; 0x4e
 802085c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8020860:	f040 80d0 	bne.w	8020a04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8020864:	f9b4 0050 	ldrsh.w	r0, [r4, #80]	; 0x50
 8020868:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 802086c:	f040 80ca 	bne.w	8020a04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8020870:	00cb      	lsls	r3, r1, #3
 8020872:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8020876:	7a13      	ldrb	r3, [r2, #8]
 8020878:	0649      	lsls	r1, r1, #25
 802087a:	ea43 0300 	orr.w	r3, r3, r0
 802087e:	bf44      	itt	mi
 8020880:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8020884:	b21b      	sxthmi	r3, r3
 8020886:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 802088a:	1b5d      	subs	r5, r3, r5
 802088c:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 8020890:	4610      	mov	r0, r2
 8020892:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020896:	f240 604b 	movw	r0, #1611	; 0x64b
 802089a:	4283      	cmp	r3, r0
 802089c:	d338      	bcc.n	8020910 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 802089e:	f240 604c 	movw	r0, #1612	; 0x64c
 80208a2:	4283      	cmp	r3, r0
 80208a4:	d9d8      	bls.n	8020858 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80208a6:	f9b4 004e 	ldrsh.w	r0, [r4, #78]	; 0x4e
 80208aa:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	; 0x50
 80208ae:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80208b2:	f040 80f1 	bne.w	8020a98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>
 80208b6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80208ba:	f040 80ed 	bne.w	8020a98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>
 80208be:	00cb      	lsls	r3, r1, #3
 80208c0:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80208c4:	7a13      	ldrb	r3, [r2, #8]
 80208c6:	064e      	lsls	r6, r1, #25
 80208c8:	ea43 0300 	orr.w	r3, r3, r0
 80208cc:	bf44      	itt	mi
 80208ce:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80208d2:	b21b      	sxthmi	r3, r3
 80208d4:	e7d9      	b.n	802088a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 80208d6:	f240 6054 	movw	r0, #1620	; 0x654
 80208da:	4283      	cmp	r3, r0
 80208dc:	d8e3      	bhi.n	80208a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80208de:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80208e2:	d9e0      	bls.n	80208a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80208e4:	e7b8      	b.n	8020858 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80208e6:	f240 6074 	movw	r0, #1652	; 0x674
 80208ea:	4283      	cmp	r3, r0
 80208ec:	d0b4      	beq.n	8020858 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80208ee:	d82d      	bhi.n	802094c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 80208f0:	f240 605e 	movw	r0, #1630	; 0x65e
 80208f4:	4283      	cmp	r3, r0
 80208f6:	d804      	bhi.n	8020902 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 80208f8:	f240 605d 	movw	r0, #1629	; 0x65d
 80208fc:	4283      	cmp	r3, r0
 80208fe:	d3d2      	bcc.n	80208a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8020900:	e7aa      	b.n	8020858 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8020902:	f240 605f 	movw	r0, #1631	; 0x65f
 8020906:	4283      	cmp	r3, r0
 8020908:	d0cd      	beq.n	80208a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 802090a:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 802090e:	d0a3      	beq.n	8020858 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8020910:	00cb      	lsls	r3, r1, #3
 8020912:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8020916:	7a13      	ldrb	r3, [r2, #8]
 8020918:	0649      	lsls	r1, r1, #25
 802091a:	ea43 0300 	orr.w	r3, r3, r0
 802091e:	bf44      	itt	mi
 8020920:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8020924:	b21b      	sxthmi	r3, r3
 8020926:	1b5d      	subs	r5, r3, r5
 8020928:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 802092c:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 8020930:	7b53      	ldrb	r3, [r2, #13]
 8020932:	015b      	lsls	r3, r3, #5
 8020934:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8020938:	7993      	ldrb	r3, [r2, #6]
 802093a:	430b      	orrs	r3, r1
 802093c:	005b      	lsls	r3, r3, #1
 802093e:	2105      	movs	r1, #5
 8020940:	fb93 f3f1 	sdiv	r3, r3, r1
 8020944:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8020948:	440b      	add	r3, r1
 802094a:	e757      	b.n	80207fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 802094c:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8020950:	4283      	cmp	r3, r0
 8020952:	d809      	bhi.n	8020968 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 8020954:	f240 60df 	movw	r0, #1759	; 0x6df
 8020958:	4283      	cmp	r3, r0
 802095a:	f4bf af7d 	bcs.w	8020858 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 802095e:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8020962:	2b05      	cmp	r3, #5
 8020964:	d8d4      	bhi.n	8020910 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8020966:	e777      	b.n	8020858 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8020968:	f240 60e3 	movw	r0, #1763	; 0x6e3
 802096c:	4283      	cmp	r3, r0
 802096e:	d09a      	beq.n	80208a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8020970:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8020974:	4283      	cmp	r3, r0
 8020976:	e7ca      	b.n	802090e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 8020978:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 802097c:	d22b      	bcs.n	80209d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 802097e:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8020982:	4283      	cmp	r3, r0
 8020984:	d28f      	bcs.n	80208a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8020986:	f640 00e5 	movw	r0, #2277	; 0x8e5
 802098a:	4283      	cmp	r3, r0
 802098c:	d816      	bhi.n	80209bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 802098e:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8020992:	4283      	cmp	r3, r0
 8020994:	f4bf af60 	bcs.w	8020858 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8020998:	f240 60ec 	movw	r0, #1772	; 0x6ec
 802099c:	4283      	cmp	r3, r0
 802099e:	d80a      	bhi.n	80209b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 80209a0:	f240 60eb 	movw	r0, #1771	; 0x6eb
 80209a4:	4283      	cmp	r3, r0
 80209a6:	f4bf af57 	bcs.w	8020858 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80209aa:	f240 60ea 	movw	r0, #1770	; 0x6ea
 80209ae:	4283      	cmp	r3, r0
 80209b0:	f43f af79 	beq.w	80208a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80209b4:	e7ac      	b.n	8020910 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80209b6:	f240 60ed 	movw	r0, #1773	; 0x6ed
 80209ba:	e7f8      	b.n	80209ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 80209bc:	f640 00e8 	movw	r0, #2280	; 0x8e8
 80209c0:	4283      	cmp	r3, r0
 80209c2:	d802      	bhi.n	80209ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 80209c4:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80209c8:	e798      	b.n	80208fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 80209ca:	f640 00e9 	movw	r0, #2281	; 0x8e9
 80209ce:	4283      	cmp	r3, r0
 80209d0:	f47f af42 	bne.w	8020858 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80209d4:	e767      	b.n	80208a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80209d6:	f640 00f6 	movw	r0, #2294	; 0x8f6
 80209da:	4283      	cmp	r3, r0
 80209dc:	f43f af63 	beq.w	80208a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80209e0:	d802      	bhi.n	80209e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 80209e2:	f640 00f2 	movw	r0, #2290	; 0x8f2
 80209e6:	e7f2      	b.n	80209ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 80209e8:	f640 00fa 	movw	r0, #2298	; 0x8fa
 80209ec:	4283      	cmp	r3, r0
 80209ee:	d805      	bhi.n	80209fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 80209f0:	f640 00f9 	movw	r0, #2297	; 0x8f9
 80209f4:	4283      	cmp	r3, r0
 80209f6:	f4ff af2f 	bcc.w	8020858 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80209fa:	e754      	b.n	80208a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80209fc:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8020a00:	4283      	cmp	r3, r0
 8020a02:	e7af      	b.n	8020964 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 8020a04:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 8020a08:	4617      	mov	r7, r2
 8020a0a:	f102 0808 	add.w	r8, r2, #8
 8020a0e:	4666      	mov	r6, ip
 8020a10:	6838      	ldr	r0, [r7, #0]
 8020a12:	6879      	ldr	r1, [r7, #4]
 8020a14:	46e6      	mov	lr, ip
 8020a16:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8020a1a:	3708      	adds	r7, #8
 8020a1c:	4547      	cmp	r7, r8
 8020a1e:	46f4      	mov	ip, lr
 8020a20:	d1f6      	bne.n	8020a10 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 8020a22:	6838      	ldr	r0, [r7, #0]
 8020a24:	f8ce 0000 	str.w	r0, [lr]
 8020a28:	88b9      	ldrh	r1, [r7, #4]
 8020a2a:	f8ae 1004 	strh.w	r1, [lr, #4]
 8020a2e:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 8020a32:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8020a36:	d009      	beq.n	8020a4c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x264>
 8020a38:	7b51      	ldrb	r1, [r2, #13]
 8020a3a:	7992      	ldrb	r2, [r2, #6]
 8020a3c:	0149      	lsls	r1, r1, #5
 8020a3e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8020a42:	4311      	orrs	r1, r2
 8020a44:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8020a48:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 8020a4c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8020a50:	d00d      	beq.n	8020a6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x286>
 8020a52:	442b      	add	r3, r5
 8020a54:	b29b      	uxth	r3, r3
 8020a56:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 8020a5a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8020a5e:	10db      	asrs	r3, r3, #3
 8020a60:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8020a64:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8020a68:	4313      	orrs	r3, r2
 8020a6a:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8020a6e:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8020a72:	00cb      	lsls	r3, r1, #3
 8020a74:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8020a78:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8020a7c:	064f      	lsls	r7, r1, #25
 8020a7e:	ea43 0302 	orr.w	r3, r3, r2
 8020a82:	bf44      	itt	mi
 8020a84:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8020a88:	b21b      	sxthmi	r3, r3
 8020a8a:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8020a8e:	1b5d      	subs	r5, r3, r5
 8020a90:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 8020a94:	4632      	mov	r2, r6
 8020a96:	e6fb      	b.n	8020890 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 8020a98:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8020a9c:	4694      	mov	ip, r2
 8020a9e:	f102 0908 	add.w	r9, r2, #8
 8020aa2:	4676      	mov	r6, lr
 8020aa4:	f8dc 0000 	ldr.w	r0, [ip]
 8020aa8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8020aac:	46f0      	mov	r8, lr
 8020aae:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8020ab2:	f10c 0c08 	add.w	ip, ip, #8
 8020ab6:	45cc      	cmp	ip, r9
 8020ab8:	46c6      	mov	lr, r8
 8020aba:	d1f3      	bne.n	8020aa4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2bc>
 8020abc:	f8dc 0000 	ldr.w	r0, [ip]
 8020ac0:	f8c8 0000 	str.w	r0, [r8]
 8020ac4:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 8020ac8:	f8a8 1004 	strh.w	r1, [r8, #4]
 8020acc:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 8020ad0:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8020ad4:	d009      	beq.n	8020aea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x302>
 8020ad6:	7b51      	ldrb	r1, [r2, #13]
 8020ad8:	7992      	ldrb	r2, [r2, #6]
 8020ada:	0149      	lsls	r1, r1, #5
 8020adc:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8020ae0:	4311      	orrs	r1, r2
 8020ae2:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8020ae6:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 8020aea:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8020aee:	d00d      	beq.n	8020b0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8020af0:	1bdb      	subs	r3, r3, r7
 8020af2:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 8020af6:	b29b      	uxth	r3, r3
 8020af8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8020afc:	10db      	asrs	r3, r3, #3
 8020afe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8020b02:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8020b06:	4313      	orrs	r3, r2
 8020b08:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8020b0c:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8020b10:	00cb      	lsls	r3, r1, #3
 8020b12:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8020b16:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8020b1a:	0648      	lsls	r0, r1, #25
 8020b1c:	ea43 0302 	orr.w	r3, r3, r2
 8020b20:	bf44      	itt	mi
 8020b22:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8020b26:	b21b      	sxthmi	r3, r3
 8020b28:	e7b1      	b.n	8020a8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a6>
	...

08020b2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8020b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020b30:	461e      	mov	r6, r3
 8020b32:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8020b34:	4604      	mov	r4, r0
 8020b36:	4617      	mov	r7, r2
 8020b38:	b92b      	cbnz	r3, 8020b46 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 8020b3a:	4b25      	ldr	r3, [pc, #148]	; (8020bd0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 8020b3c:	4a25      	ldr	r2, [pc, #148]	; (8020bd4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 8020b3e:	4826      	ldr	r0, [pc, #152]	; (8020bd8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 8020b40:	21c0      	movs	r1, #192	; 0xc0
 8020b42:	f00d fbc9 	bl	802e2d8 <__assert_func>
 8020b46:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8020b48:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8020b4c:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 8020b50:	f7ed ff0e 	bl	800e970 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8020b54:	4605      	mov	r5, r0
 8020b56:	b918      	cbnz	r0, 8020b60 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 8020b58:	6030      	str	r0, [r6, #0]
 8020b5a:	4628      	mov	r0, r5
 8020b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020b60:	683b      	ldr	r3, [r7, #0]
 8020b62:	4601      	mov	r1, r0
 8020b64:	68db      	ldr	r3, [r3, #12]
 8020b66:	4638      	mov	r0, r7
 8020b68:	4798      	blx	r3
 8020b6a:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8020b6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8020b72:	4602      	mov	r2, r0
 8020b74:	6030      	str	r0, [r6, #0]
 8020b76:	d213      	bcs.n	8020ba0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 8020b78:	4643      	mov	r3, r8
 8020b7a:	4639      	mov	r1, r7
 8020b7c:	4620      	mov	r0, r4
 8020b7e:	f7ff fe33 	bl	80207e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8020b82:	6030      	str	r0, [r6, #0]
 8020b84:	6833      	ldr	r3, [r6, #0]
 8020b86:	b143      	cbz	r3, 8020b9a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 8020b88:	7b5a      	ldrb	r2, [r3, #13]
 8020b8a:	7a9b      	ldrb	r3, [r3, #10]
 8020b8c:	0052      	lsls	r2, r2, #1
 8020b8e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8020b92:	4313      	orrs	r3, r2
 8020b94:	bf0c      	ite	eq
 8020b96:	2301      	moveq	r3, #1
 8020b98:	2300      	movne	r3, #0
 8020b9a:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8020b9e:	e7dc      	b.n	8020b5a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 8020ba0:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8020ba4:	b29b      	uxth	r3, r3
 8020ba6:	2b7f      	cmp	r3, #127	; 0x7f
 8020ba8:	d804      	bhi.n	8020bb4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 8020baa:	4639      	mov	r1, r7
 8020bac:	4620      	mov	r0, r4
 8020bae:	f7ff fd01 	bl	80205b4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8020bb2:	e7e6      	b.n	8020b82 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8020bb4:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8020bb8:	2b00      	cmp	r3, #0
 8020bba:	d0e3      	beq.n	8020b84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8020bbc:	f640 1302 	movw	r3, #2306	; 0x902
 8020bc0:	429d      	cmp	r5, r3
 8020bc2:	d1df      	bne.n	8020b84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8020bc4:	4601      	mov	r1, r0
 8020bc6:	4620      	mov	r0, r4
 8020bc8:	f7ff fcc5 	bl	8020556 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8020bcc:	e7d9      	b.n	8020b82 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8020bce:	bf00      	nop
 8020bd0:	080338fc 	.word	0x080338fc
 8020bd4:	08033b6e 	.word	0x08033b6e
 8020bd8:	08033905 	.word	0x08033905

08020bdc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8020bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020be0:	461e      	mov	r6, r3
 8020be2:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8020be4:	4604      	mov	r4, r0
 8020be6:	4617      	mov	r7, r2
 8020be8:	b92b      	cbnz	r3, 8020bf6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 8020bea:	4b26      	ldr	r3, [pc, #152]	; (8020c84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 8020bec:	4a26      	ldr	r2, [pc, #152]	; (8020c88 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 8020bee:	4827      	ldr	r0, [pc, #156]	; (8020c8c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 8020bf0:	21c0      	movs	r1, #192	; 0xc0
 8020bf2:	f00d fb71 	bl	802e2d8 <__assert_func>
 8020bf6:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8020bf8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8020bfc:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 8020c00:	f7ed feb6 	bl	800e970 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8020c04:	4605      	mov	r5, r0
 8020c06:	b918      	cbnz	r0, 8020c10 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 8020c08:	6030      	str	r0, [r6, #0]
 8020c0a:	4628      	mov	r0, r5
 8020c0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020c10:	683b      	ldr	r3, [r7, #0]
 8020c12:	4601      	mov	r1, r0
 8020c14:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8020c18:	4638      	mov	r0, r7
 8020c1a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8020c1e:	47c8      	blx	r9
 8020c20:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8020c24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8020c28:	4602      	mov	r2, r0
 8020c2a:	6030      	str	r0, [r6, #0]
 8020c2c:	d213      	bcs.n	8020c56 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 8020c2e:	4643      	mov	r3, r8
 8020c30:	4639      	mov	r1, r7
 8020c32:	4620      	mov	r0, r4
 8020c34:	f7ff fdd8 	bl	80207e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8020c38:	6030      	str	r0, [r6, #0]
 8020c3a:	6833      	ldr	r3, [r6, #0]
 8020c3c:	b143      	cbz	r3, 8020c50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 8020c3e:	7b5a      	ldrb	r2, [r3, #13]
 8020c40:	7a9b      	ldrb	r3, [r3, #10]
 8020c42:	0052      	lsls	r2, r2, #1
 8020c44:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8020c48:	4313      	orrs	r3, r2
 8020c4a:	bf0c      	ite	eq
 8020c4c:	2301      	moveq	r3, #1
 8020c4e:	2300      	movne	r3, #0
 8020c50:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8020c54:	e7d9      	b.n	8020c0a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 8020c56:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8020c5a:	b29b      	uxth	r3, r3
 8020c5c:	2b7f      	cmp	r3, #127	; 0x7f
 8020c5e:	d804      	bhi.n	8020c6a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 8020c60:	4639      	mov	r1, r7
 8020c62:	4620      	mov	r0, r4
 8020c64:	f7ff fca6 	bl	80205b4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8020c68:	e7e6      	b.n	8020c38 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 8020c6a:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8020c6e:	2b00      	cmp	r3, #0
 8020c70:	d0e3      	beq.n	8020c3a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 8020c72:	f640 1302 	movw	r3, #2306	; 0x902
 8020c76:	429d      	cmp	r5, r3
 8020c78:	d1df      	bne.n	8020c3a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 8020c7a:	4601      	mov	r1, r0
 8020c7c:	4620      	mov	r0, r4
 8020c7e:	f7ff fc6a 	bl	8020556 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8020c82:	e7d9      	b.n	8020c38 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 8020c84:	080338fc 	.word	0x080338fc
 8020c88:	08033b6e 	.word	0x08033b6e
 8020c8c:	08033905 	.word	0x08033905

08020c90 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8020c90:	b510      	push	{r4, lr}
 8020c92:	4604      	mov	r4, r0
 8020c94:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 8020c96:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8020c98:	b9d9      	cbnz	r1, 8020cd2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x42>
 8020c9a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8020c9c:	2b0a      	cmp	r3, #10
 8020c9e:	d036      	beq.n	8020d0e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 8020ca0:	4620      	mov	r0, r4
 8020ca2:	f7ff fc21 	bl	80204e8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8020ca6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8020ca8:	2b09      	cmp	r3, #9
 8020caa:	d906      	bls.n	8020cba <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2a>
 8020cac:	4b18      	ldr	r3, [pc, #96]	; (8020d10 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x80>)
 8020cae:	4a19      	ldr	r2, [pc, #100]	; (8020d14 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 8020cb0:	4819      	ldr	r0, [pc, #100]	; (8020d18 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 8020cb2:	f44f 7182 	mov.w	r1, #260	; 0x104
 8020cb6:	f00d fb0f 	bl	802e2d8 <__assert_func>
 8020cba:	1c5a      	adds	r2, r3, #1
 8020cbc:	8622      	strh	r2, [r4, #48]	; 0x30
 8020cbe:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8020cc0:	4413      	add	r3, r2
 8020cc2:	b29b      	uxth	r3, r3
 8020cc4:	2b09      	cmp	r3, #9
 8020cc6:	bf88      	it	hi
 8020cc8:	3b0a      	subhi	r3, #10
 8020cca:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8020cce:	8358      	strh	r0, [r3, #26]
 8020cd0:	e7e3      	b.n	8020c9a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xa>
 8020cd2:	2b0a      	cmp	r3, #10
 8020cd4:	d01b      	beq.n	8020d0e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 8020cd6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8020cd8:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8020cdc:	3901      	subs	r1, #1
 8020cde:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 8020ce0:	8721      	strh	r1, [r4, #56]	; 0x38
 8020ce2:	1c51      	adds	r1, r2, #1
 8020ce4:	b289      	uxth	r1, r1
 8020ce6:	2901      	cmp	r1, #1
 8020ce8:	bf8a      	itet	hi
 8020cea:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8020cee:	86e1      	strhls	r1, [r4, #54]	; 0x36
 8020cf0:	86e2      	strhhi	r2, [r4, #54]	; 0x36
 8020cf2:	2b09      	cmp	r3, #9
 8020cf4:	d8da      	bhi.n	8020cac <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1c>
 8020cf6:	1c5a      	adds	r2, r3, #1
 8020cf8:	8622      	strh	r2, [r4, #48]	; 0x30
 8020cfa:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8020cfc:	4413      	add	r3, r2
 8020cfe:	b29b      	uxth	r3, r3
 8020d00:	2b09      	cmp	r3, #9
 8020d02:	bf88      	it	hi
 8020d04:	3b0a      	subhi	r3, #10
 8020d06:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8020d0a:	8358      	strh	r0, [r3, #26]
 8020d0c:	e7c2      	b.n	8020c94 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8020d0e:	bd10      	pop	{r4, pc}
 8020d10:	08033931 	.word	0x08033931
 8020d14:	08033cc4 	.word	0x08033cc4
 8020d18:	08033905 	.word	0x08033905

08020d1c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8020d1c:	b538      	push	{r3, r4, r5, lr}
 8020d1e:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 8020d20:	4604      	mov	r4, r0
 8020d22:	b92a      	cbnz	r2, 8020d30 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 8020d24:	4b13      	ldr	r3, [pc, #76]	; (8020d74 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 8020d26:	4a14      	ldr	r2, [pc, #80]	; (8020d78 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 8020d28:	4814      	ldr	r0, [pc, #80]	; (8020d7c <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 8020d2a:	21d5      	movs	r1, #213	; 0xd5
 8020d2c:	f00d fad4 	bl	802e2d8 <__assert_func>
 8020d30:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8020d32:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8020d36:	3a01      	subs	r2, #1
 8020d38:	8b4d      	ldrh	r5, [r1, #26]
 8020d3a:	8602      	strh	r2, [r0, #48]	; 0x30
 8020d3c:	1c5a      	adds	r2, r3, #1
 8020d3e:	b292      	uxth	r2, r2
 8020d40:	2a09      	cmp	r2, #9
 8020d42:	bf86      	itte	hi
 8020d44:	3b09      	subhi	r3, #9
 8020d46:	85c3      	strhhi	r3, [r0, #46]	; 0x2e
 8020d48:	85c2      	strhls	r2, [r0, #46]	; 0x2e
 8020d4a:	f7ff ffa1 	bl	8020c90 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8020d4e:	8b23      	ldrh	r3, [r4, #24]
 8020d50:	2b01      	cmp	r3, #1
 8020d52:	bf9c      	itt	ls
 8020d54:	3301      	addls	r3, #1
 8020d56:	8323      	strhls	r3, [r4, #24]
 8020d58:	8ae3      	ldrh	r3, [r4, #22]
 8020d5a:	b90b      	cbnz	r3, 8020d60 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 8020d5c:	2302      	movs	r3, #2
 8020d5e:	82e3      	strh	r3, [r4, #22]
 8020d60:	8ae3      	ldrh	r3, [r4, #22]
 8020d62:	3b01      	subs	r3, #1
 8020d64:	b29b      	uxth	r3, r3
 8020d66:	82e3      	strh	r3, [r4, #22]
 8020d68:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020d6c:	4628      	mov	r0, r5
 8020d6e:	8265      	strh	r5, [r4, #18]
 8020d70:	bd38      	pop	{r3, r4, r5, pc}
 8020d72:	bf00      	nop
 8020d74:	080338fc 	.word	0x080338fc
 8020d78:	08033c19 	.word	0x08033c19
 8020d7c:	08033905 	.word	0x08033905

08020d80 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8020d80:	b538      	push	{r3, r4, r5, lr}
 8020d82:	428a      	cmp	r2, r1
 8020d84:	8e04      	ldrh	r4, [r0, #48]	; 0x30
 8020d86:	d90c      	bls.n	8020da2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 8020d88:	b92c      	cbnz	r4, 8020d96 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 8020d8a:	4b1c      	ldr	r3, [pc, #112]	; (8020dfc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 8020d8c:	4a1c      	ldr	r2, [pc, #112]	; (8020e00 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 8020d8e:	21e1      	movs	r1, #225	; 0xe1
 8020d90:	481c      	ldr	r0, [pc, #112]	; (8020e04 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 8020d92:	f00d faa1 	bl	802e2d8 <__assert_func>
 8020d96:	3c01      	subs	r4, #1
 8020d98:	8604      	strh	r4, [r0, #48]	; 0x30
 8020d9a:	4b1b      	ldr	r3, [pc, #108]	; (8020e08 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 8020d9c:	4a1b      	ldr	r2, [pc, #108]	; (8020e0c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 8020d9e:	21c5      	movs	r1, #197	; 0xc5
 8020da0:	e7f6      	b.n	8020d90 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8020da2:	428c      	cmp	r4, r1
 8020da4:	d203      	bcs.n	8020dae <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 8020da6:	4b1a      	ldr	r3, [pc, #104]	; (8020e10 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 8020da8:	4a1a      	ldr	r2, [pc, #104]	; (8020e14 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 8020daa:	21cb      	movs	r1, #203	; 0xcb
 8020dac:	e7f0      	b.n	8020d90 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8020dae:	1a64      	subs	r4, r4, r1
 8020db0:	8604      	strh	r4, [r0, #48]	; 0x30
 8020db2:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8020db4:	4421      	add	r1, r4
 8020db6:	b289      	uxth	r1, r1
 8020db8:	2909      	cmp	r1, #9
 8020dba:	bf88      	it	hi
 8020dbc:	390a      	subhi	r1, #10
 8020dbe:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8020dc0:	250a      	movs	r5, #10
 8020dc2:	b1ba      	cbz	r2, 8020df4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 8020dc4:	3a01      	subs	r2, #1
 8020dc6:	8e01      	ldrh	r1, [r0, #48]	; 0x30
 8020dc8:	b292      	uxth	r2, r2
 8020dca:	2909      	cmp	r1, #9
 8020dcc:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8020dd0:	d903      	bls.n	8020dda <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 8020dd2:	4b11      	ldr	r3, [pc, #68]	; (8020e18 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 8020dd4:	4a11      	ldr	r2, [pc, #68]	; (8020e1c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 8020dd6:	21e6      	movs	r1, #230	; 0xe6
 8020dd8:	e7da      	b.n	8020d90 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8020dda:	3101      	adds	r1, #1
 8020ddc:	8601      	strh	r1, [r0, #48]	; 0x30
 8020dde:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 8020de0:	b901      	cbnz	r1, 8020de4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 8020de2:	85c5      	strh	r5, [r0, #46]	; 0x2e
 8020de4:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 8020de6:	3901      	subs	r1, #1
 8020de8:	b289      	uxth	r1, r1
 8020dea:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8020dec:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8020df0:	834c      	strh	r4, [r1, #26]
 8020df2:	e7e6      	b.n	8020dc2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 8020df4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020df8:	f7ff bf4a 	b.w	8020c90 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8020dfc:	080338fc 	.word	0x080338fc
 8020e00:	080339f2 	.word	0x080339f2
 8020e04:	08033905 	.word	0x08033905
 8020e08:	0803393d 	.word	0x0803393d
 8020e0c:	08033a9c 	.word	0x08033a9c
 8020e10:	0803394b 	.word	0x0803394b
 8020e14:	08033d73 	.word	0x08033d73
 8020e18:	08033957 	.word	0x08033957
 8020e1c:	0803396a 	.word	0x0803396a

08020e20 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8020e20:	3a01      	subs	r2, #1
 8020e22:	b570      	push	{r4, r5, r6, lr}
 8020e24:	b292      	uxth	r2, r2
 8020e26:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8020e2a:	42b2      	cmp	r2, r6
 8020e2c:	d019      	beq.n	8020e62 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 8020e2e:	8b04      	ldrh	r4, [r0, #24]
 8020e30:	f831 5b02 	ldrh.w	r5, [r1], #2
 8020e34:	4294      	cmp	r4, r2
 8020e36:	d805      	bhi.n	8020e44 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 8020e38:	4b19      	ldr	r3, [pc, #100]	; (8020ea0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 8020e3a:	4a1a      	ldr	r2, [pc, #104]	; (8020ea4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 8020e3c:	481a      	ldr	r0, [pc, #104]	; (8020ea8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 8020e3e:	21c5      	movs	r1, #197	; 0xc5
 8020e40:	f00d fa4a 	bl	802e2d8 <__assert_func>
 8020e44:	8ac4      	ldrh	r4, [r0, #22]
 8020e46:	4414      	add	r4, r2
 8020e48:	b2a4      	uxth	r4, r4
 8020e4a:	2c01      	cmp	r4, #1
 8020e4c:	bf88      	it	hi
 8020e4e:	3c02      	subhi	r4, #2
 8020e50:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8020e54:	3a01      	subs	r2, #1
 8020e56:	8a64      	ldrh	r4, [r4, #18]
 8020e58:	42ac      	cmp	r4, r5
 8020e5a:	b292      	uxth	r2, r2
 8020e5c:	d0e5      	beq.n	8020e2a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 8020e5e:	2000      	movs	r0, #0
 8020e60:	bd70      	pop	{r4, r5, r6, pc}
 8020e62:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8020e66:	2400      	movs	r4, #0
 8020e68:	4413      	add	r3, r2
 8020e6a:	b2a2      	uxth	r2, r4
 8020e6c:	429a      	cmp	r2, r3
 8020e6e:	da14      	bge.n	8020e9a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 8020e70:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 8020e72:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8020e76:	4296      	cmp	r6, r2
 8020e78:	d802      	bhi.n	8020e80 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 8020e7a:	4b09      	ldr	r3, [pc, #36]	; (8020ea0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 8020e7c:	4a0b      	ldr	r2, [pc, #44]	; (8020eac <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 8020e7e:	e7dd      	b.n	8020e3c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 8020e80:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
 8020e82:	4432      	add	r2, r6
 8020e84:	b292      	uxth	r2, r2
 8020e86:	2a09      	cmp	r2, #9
 8020e88:	bf88      	it	hi
 8020e8a:	3a0a      	subhi	r2, #10
 8020e8c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8020e90:	3401      	adds	r4, #1
 8020e92:	8b52      	ldrh	r2, [r2, #26]
 8020e94:	42aa      	cmp	r2, r5
 8020e96:	d0e8      	beq.n	8020e6a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 8020e98:	e7e1      	b.n	8020e5e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 8020e9a:	2001      	movs	r0, #1
 8020e9c:	e7e0      	b.n	8020e60 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 8020e9e:	bf00      	nop
 8020ea0:	0803393d 	.word	0x0803393d
 8020ea4:	08033df7 	.word	0x08033df7
 8020ea8:	08033905 	.word	0x08033905
 8020eac:	08033a9c 	.word	0x08033a9c

08020eb0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8020eb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020eb4:	4605      	mov	r5, r0
 8020eb6:	4616      	mov	r6, r2
 8020eb8:	1c8c      	adds	r4, r1, #2
 8020eba:	8809      	ldrh	r1, [r1, #0]
 8020ebc:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8020ec0:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8020ec4:	42b3      	cmp	r3, r6
 8020ec6:	d124      	bne.n	8020f12 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8020ec8:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8020ecc:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8020ed0:	f001 070f 	and.w	r7, r1, #15
 8020ed4:	f8cd 8000 	str.w	r8, [sp]
 8020ed8:	464b      	mov	r3, r9
 8020eda:	4652      	mov	r2, sl
 8020edc:	4621      	mov	r1, r4
 8020ede:	4628      	mov	r0, r5
 8020ee0:	f7ff ff9e 	bl	8020e20 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8020ee4:	4683      	mov	fp, r0
 8020ee6:	b168      	cbz	r0, 8020f04 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8020ee8:	eb0a 0109 	add.w	r1, sl, r9
 8020eec:	4441      	add	r1, r8
 8020eee:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8020ef2:	463a      	mov	r2, r7
 8020ef4:	4649      	mov	r1, r9
 8020ef6:	4628      	mov	r0, r5
 8020ef8:	f7ff ff42 	bl	8020d80 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8020efc:	4658      	mov	r0, fp
 8020efe:	b003      	add	sp, #12
 8020f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f04:	eb07 010a 	add.w	r1, r7, sl
 8020f08:	4449      	add	r1, r9
 8020f0a:	4441      	add	r1, r8
 8020f0c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8020f10:	e7d2      	b.n	8020eb8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8020f12:	f04f 0b00 	mov.w	fp, #0
 8020f16:	e7f1      	b.n	8020efc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08020f18 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8020f18:	b570      	push	{r4, r5, r6, lr}
 8020f1a:	8810      	ldrh	r0, [r2, #0]
 8020f1c:	4298      	cmp	r0, r3
 8020f1e:	d817      	bhi.n	8020f50 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8020f20:	1e48      	subs	r0, r1, #1
 8020f22:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8020f26:	4298      	cmp	r0, r3
 8020f28:	d312      	bcc.n	8020f50 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8020f2a:	2400      	movs	r4, #0
 8020f2c:	428c      	cmp	r4, r1
 8020f2e:	d20f      	bcs.n	8020f50 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8020f30:	1860      	adds	r0, r4, r1
 8020f32:	1040      	asrs	r0, r0, #1
 8020f34:	0085      	lsls	r5, r0, #2
 8020f36:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8020f3a:	42b3      	cmp	r3, r6
 8020f3c:	d902      	bls.n	8020f44 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8020f3e:	3001      	adds	r0, #1
 8020f40:	b284      	uxth	r4, r0
 8020f42:	e7f3      	b.n	8020f2c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8020f44:	d201      	bcs.n	8020f4a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8020f46:	b281      	uxth	r1, r0
 8020f48:	e7f0      	b.n	8020f2c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8020f4a:	442a      	add	r2, r5
 8020f4c:	8850      	ldrh	r0, [r2, #2]
 8020f4e:	bd70      	pop	{r4, r5, r6, pc}
 8020f50:	2000      	movs	r0, #0
 8020f52:	e7fc      	b.n	8020f4e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08020f54 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8020f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020f58:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8020f5a:	886f      	ldrh	r7, [r5, #2]
 8020f5c:	4604      	mov	r4, r0
 8020f5e:	087f      	lsrs	r7, r7, #1
 8020f60:	260b      	movs	r6, #11
 8020f62:	3e01      	subs	r6, #1
 8020f64:	d01b      	beq.n	8020f9e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 8020f66:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8020f68:	b92b      	cbnz	r3, 8020f76 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 8020f6a:	4b0e      	ldr	r3, [pc, #56]	; (8020fa4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 8020f6c:	4a0e      	ldr	r2, [pc, #56]	; (8020fa8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 8020f6e:	480f      	ldr	r0, [pc, #60]	; (8020fac <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 8020f70:	21c0      	movs	r1, #192	; 0xc0
 8020f72:	f00d f9b1 	bl	802e2d8 <__assert_func>
 8020f76:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8020f78:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8020f7c:	462a      	mov	r2, r5
 8020f7e:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 8020f82:	4639      	mov	r1, r7
 8020f84:	4643      	mov	r3, r8
 8020f86:	4620      	mov	r0, r4
 8020f88:	f7ff ffc6 	bl	8020f18 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8020f8c:	b138      	cbz	r0, 8020f9e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 8020f8e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8020f92:	4642      	mov	r2, r8
 8020f94:	4620      	mov	r0, r4
 8020f96:	f7ff ff8b 	bl	8020eb0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8020f9a:	2800      	cmp	r0, #0
 8020f9c:	d1e1      	bne.n	8020f62 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8020f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020fa2:	bf00      	nop
 8020fa4:	080338fc 	.word	0x080338fc
 8020fa8:	08033b6e 	.word	0x08033b6e
 8020fac:	08033905 	.word	0x08033905

08020fb0 <_ZN8touchgfx7Unicode6strlenEPKt>:
 8020fb0:	4602      	mov	r2, r0
 8020fb2:	b148      	cbz	r0, 8020fc8 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8020fb4:	2300      	movs	r3, #0
 8020fb6:	b298      	uxth	r0, r3
 8020fb8:	3301      	adds	r3, #1
 8020fba:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8020fbe:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 8020fc2:	2900      	cmp	r1, #0
 8020fc4:	d1f7      	bne.n	8020fb6 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 8020fc6:	4770      	bx	lr
 8020fc8:	4770      	bx	lr

08020fca <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 8020fca:	b530      	push	{r4, r5, lr}
 8020fcc:	4604      	mov	r4, r0
 8020fce:	b159      	cbz	r1, 8020fe8 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 8020fd0:	b148      	cbz	r0, 8020fe6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8020fd2:	2300      	movs	r3, #0
 8020fd4:	b298      	uxth	r0, r3
 8020fd6:	4282      	cmp	r2, r0
 8020fd8:	d905      	bls.n	8020fe6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8020fda:	5ccd      	ldrb	r5, [r1, r3]
 8020fdc:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8020fe0:	3301      	adds	r3, #1
 8020fe2:	2d00      	cmp	r5, #0
 8020fe4:	d1f6      	bne.n	8020fd4 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 8020fe6:	bd30      	pop	{r4, r5, pc}
 8020fe8:	4608      	mov	r0, r1
 8020fea:	e7fc      	b.n	8020fe6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

08020fec <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 8020fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020fee:	b08b      	sub	sp, #44	; 0x2c
 8020ff0:	468c      	mov	ip, r1
 8020ff2:	2100      	movs	r1, #0
 8020ff4:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8020ff8:	ae01      	add	r6, sp, #4
 8020ffa:	211f      	movs	r1, #31
 8020ffc:	fbb0 f7f3 	udiv	r7, r0, r3
 8021000:	fb03 0517 	mls	r5, r3, r7, r0
 8021004:	b2ec      	uxtb	r4, r5
 8021006:	2d09      	cmp	r5, #9
 8021008:	bfd4      	ite	le
 802100a:	3430      	addle	r4, #48	; 0x30
 802100c:	3457      	addgt	r4, #87	; 0x57
 802100e:	b2e4      	uxtb	r4, r4
 8021010:	558c      	strb	r4, [r1, r6]
 8021012:	4638      	mov	r0, r7
 8021014:	1e4c      	subs	r4, r1, #1
 8021016:	b92f      	cbnz	r7, 8021024 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 8021018:	4431      	add	r1, r6
 802101a:	4660      	mov	r0, ip
 802101c:	f7ff ffd5 	bl	8020fca <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8021020:	b00b      	add	sp, #44	; 0x2c
 8021022:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021024:	4621      	mov	r1, r4
 8021026:	e7e9      	b.n	8020ffc <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

08021028 <_ZN8touchgfx7Unicode4itoaElPtti>:
 8021028:	b5f0      	push	{r4, r5, r6, r7, lr}
 802102a:	4607      	mov	r7, r0
 802102c:	b08b      	sub	sp, #44	; 0x2c
 802102e:	4608      	mov	r0, r1
 8021030:	b341      	cbz	r1, 8021084 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8021032:	1e99      	subs	r1, r3, #2
 8021034:	290e      	cmp	r1, #14
 8021036:	d825      	bhi.n	8021084 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8021038:	2100      	movs	r1, #0
 802103a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 802103e:	463c      	mov	r4, r7
 8021040:	261f      	movs	r6, #31
 8021042:	f10d 0c04 	add.w	ip, sp, #4
 8021046:	fb94 fef3 	sdiv	lr, r4, r3
 802104a:	fb03 441e 	mls	r4, r3, lr, r4
 802104e:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 8021052:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 8021056:	b2ec      	uxtb	r4, r5
 8021058:	2d09      	cmp	r5, #9
 802105a:	bfd4      	ite	le
 802105c:	3430      	addle	r4, #48	; 0x30
 802105e:	3457      	addgt	r4, #87	; 0x57
 8021060:	b2e4      	uxtb	r4, r4
 8021062:	f80c 4006 	strb.w	r4, [ip, r6]
 8021066:	4674      	mov	r4, lr
 8021068:	1e71      	subs	r1, r6, #1
 802106a:	b96c      	cbnz	r4, 8021088 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 802106c:	2f00      	cmp	r7, #0
 802106e:	da05      	bge.n	802107c <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 8021070:	ab0a      	add	r3, sp, #40	; 0x28
 8021072:	4419      	add	r1, r3
 8021074:	232d      	movs	r3, #45	; 0x2d
 8021076:	f801 3c24 	strb.w	r3, [r1, #-36]
 802107a:	1eb1      	subs	r1, r6, #2
 802107c:	3101      	adds	r1, #1
 802107e:	4461      	add	r1, ip
 8021080:	f7ff ffa3 	bl	8020fca <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8021084:	b00b      	add	sp, #44	; 0x2c
 8021086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021088:	460e      	mov	r6, r1
 802108a:	e7dc      	b.n	8021046 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0802108c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 802108c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021090:	4691      	mov	r9, r2
 8021092:	b085      	sub	sp, #20
 8021094:	6802      	ldr	r2, [r0, #0]
 8021096:	9201      	str	r2, [sp, #4]
 8021098:	4688      	mov	r8, r1
 802109a:	4683      	mov	fp, r0
 802109c:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 80210a0:	9103      	str	r1, [sp, #12]
 80210a2:	4610      	mov	r0, r2
 80210a4:	461c      	mov	r4, r3
 80210a6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80210aa:	9302      	str	r3, [sp, #8]
 80210ac:	f7ff ff80 	bl	8020fb0 <_ZN8touchgfx7Unicode6strlenEPKt>
 80210b0:	f1b8 0f00 	cmp.w	r8, #0
 80210b4:	bf0c      	ite	eq
 80210b6:	4684      	moveq	ip, r0
 80210b8:	f100 0c01 	addne.w	ip, r0, #1
 80210bc:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 80210c0:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 80210c4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80210c6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80210c8:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 80210cc:	9903      	ldr	r1, [sp, #12]
 80210ce:	fa1f fc8c 	uxth.w	ip, ip
 80210d2:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80210d6:	d041      	beq.n	802115c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 80210d8:	d834      	bhi.n	8021144 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 80210da:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 80210de:	d059      	beq.n	8021194 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 80210e0:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 80210e4:	d03a      	beq.n	802115c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 80210e6:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 80210ea:	d034      	beq.n	8021156 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 80210ec:	2400      	movs	r4, #0
 80210ee:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 80210f2:	3a01      	subs	r2, #1
 80210f4:	b169      	cbz	r1, 8021112 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 80210f6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80210f8:	458c      	cmp	ip, r1
 80210fa:	da09      	bge.n	8021110 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 80210fc:	eba1 010c 	sub.w	r1, r1, ip
 8021100:	b289      	uxth	r1, r1
 8021102:	b933      	cbnz	r3, 8021112 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8021104:	2e00      	cmp	r6, #0
 8021106:	d051      	beq.n	80211ac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8021108:	2800      	cmp	r0, #0
 802110a:	d04f      	beq.n	80211ac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 802110c:	440c      	add	r4, r1
 802110e:	b2a4      	uxth	r4, r4
 8021110:	2100      	movs	r1, #0
 8021112:	682b      	ldr	r3, [r5, #0]
 8021114:	4293      	cmp	r3, r2
 8021116:	da07      	bge.n	8021128 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8021118:	f1b8 0f00 	cmp.w	r8, #0
 802111c:	d004      	beq.n	8021128 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 802111e:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 8021122:	682b      	ldr	r3, [r5, #0]
 8021124:	3301      	adds	r3, #1
 8021126:	602b      	str	r3, [r5, #0]
 8021128:	2730      	movs	r7, #48	; 0x30
 802112a:	2c00      	cmp	r4, #0
 802112c:	d04e      	beq.n	80211cc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 802112e:	682e      	ldr	r6, [r5, #0]
 8021130:	3c01      	subs	r4, #1
 8021132:	42b2      	cmp	r2, r6
 8021134:	b2a4      	uxth	r4, r4
 8021136:	dd49      	ble.n	80211cc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8021138:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 802113c:	682b      	ldr	r3, [r5, #0]
 802113e:	3301      	adds	r3, #1
 8021140:	602b      	str	r3, [r5, #0]
 8021142:	e7f2      	b.n	802112a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 8021144:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 8021148:	d01d      	beq.n	8021186 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 802114a:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 802114e:	d002      	beq.n	8021156 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8021150:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 8021154:	e7c9      	b.n	80210ea <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 8021156:	4684      	mov	ip, r0
 8021158:	f04f 0800 	mov.w	r8, #0
 802115c:	2c00      	cmp	r4, #0
 802115e:	d0c6      	beq.n	80210ee <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8021160:	b947      	cbnz	r7, 8021174 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8021162:	2801      	cmp	r0, #1
 8021164:	d106      	bne.n	8021174 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8021166:	8814      	ldrh	r4, [r2, #0]
 8021168:	2c30      	cmp	r4, #48	; 0x30
 802116a:	bf02      	ittt	eq
 802116c:	3202      	addeq	r2, #2
 802116e:	f8cb 2000 	streq.w	r2, [fp]
 8021172:	4638      	moveq	r0, r7
 8021174:	45bc      	cmp	ip, r7
 8021176:	da14      	bge.n	80211a2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 8021178:	b2bf      	uxth	r7, r7
 802117a:	eba7 040c 	sub.w	r4, r7, ip
 802117e:	b2a4      	uxth	r4, r4
 8021180:	46bc      	mov	ip, r7
 8021182:	2600      	movs	r6, #0
 8021184:	e7b3      	b.n	80210ee <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8021186:	4684      	mov	ip, r0
 8021188:	b16c      	cbz	r4, 80211a6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 802118a:	42b8      	cmp	r0, r7
 802118c:	dd00      	ble.n	8021190 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 802118e:	b2b8      	uxth	r0, r7
 8021190:	2400      	movs	r4, #0
 8021192:	e003      	b.n	802119c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 8021194:	f04f 0c01 	mov.w	ip, #1
 8021198:	2400      	movs	r4, #0
 802119a:	4660      	mov	r0, ip
 802119c:	4626      	mov	r6, r4
 802119e:	46a0      	mov	r8, r4
 80211a0:	e7a5      	b.n	80210ee <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 80211a2:	2400      	movs	r4, #0
 80211a4:	e7ed      	b.n	8021182 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 80211a6:	4626      	mov	r6, r4
 80211a8:	46a0      	mov	r8, r4
 80211aa:	e7a0      	b.n	80210ee <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 80211ac:	2900      	cmp	r1, #0
 80211ae:	d0b0      	beq.n	8021112 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 80211b0:	2720      	movs	r7, #32
 80211b2:	682e      	ldr	r6, [r5, #0]
 80211b4:	2900      	cmp	r1, #0
 80211b6:	d0ac      	beq.n	8021112 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 80211b8:	3901      	subs	r1, #1
 80211ba:	4296      	cmp	r6, r2
 80211bc:	b289      	uxth	r1, r1
 80211be:	daa7      	bge.n	8021110 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 80211c0:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 80211c4:	682b      	ldr	r3, [r5, #0]
 80211c6:	3301      	adds	r3, #1
 80211c8:	602b      	str	r3, [r5, #0]
 80211ca:	e7f2      	b.n	80211b2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 80211cc:	b188      	cbz	r0, 80211f2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 80211ce:	682b      	ldr	r3, [r5, #0]
 80211d0:	3801      	subs	r0, #1
 80211d2:	429a      	cmp	r2, r3
 80211d4:	b280      	uxth	r0, r0
 80211d6:	dd0c      	ble.n	80211f2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 80211d8:	f8db 3000 	ldr.w	r3, [fp]
 80211dc:	1c9c      	adds	r4, r3, #2
 80211de:	f8cb 4000 	str.w	r4, [fp]
 80211e2:	881c      	ldrh	r4, [r3, #0]
 80211e4:	682b      	ldr	r3, [r5, #0]
 80211e6:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 80211ea:	682b      	ldr	r3, [r5, #0]
 80211ec:	3301      	adds	r3, #1
 80211ee:	602b      	str	r3, [r5, #0]
 80211f0:	e7ec      	b.n	80211cc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 80211f2:	2620      	movs	r6, #32
 80211f4:	b151      	cbz	r1, 802120c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 80211f6:	6828      	ldr	r0, [r5, #0]
 80211f8:	3901      	subs	r1, #1
 80211fa:	4282      	cmp	r2, r0
 80211fc:	b289      	uxth	r1, r1
 80211fe:	dd05      	ble.n	802120c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8021200:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 8021204:	682b      	ldr	r3, [r5, #0]
 8021206:	3301      	adds	r3, #1
 8021208:	602b      	str	r3, [r5, #0]
 802120a:	e7f3      	b.n	80211f4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 802120c:	b005      	add	sp, #20
 802120e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021212 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 8021212:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021216:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 802121a:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 802121e:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 8021222:	2400      	movs	r4, #0
 8021224:	8014      	strh	r4, [r2, #0]
 8021226:	701c      	strb	r4, [r3, #0]
 8021228:	f888 4000 	strb.w	r4, [r8]
 802122c:	f88c 4000 	strb.w	r4, [ip]
 8021230:	f88e 4000 	strb.w	r4, [lr]
 8021234:	703c      	strb	r4, [r7, #0]
 8021236:	6804      	ldr	r4, [r0, #0]
 8021238:	b1a4      	cbz	r4, 8021264 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 802123a:	8824      	ldrh	r4, [r4, #0]
 802123c:	f04f 0901 	mov.w	r9, #1
 8021240:	b314      	cbz	r4, 8021288 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8021242:	2c2b      	cmp	r4, #43	; 0x2b
 8021244:	d001      	beq.n	802124a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 8021246:	2c20      	cmp	r4, #32
 8021248:	d110      	bne.n	802126c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 802124a:	8014      	strh	r4, [r2, #0]
 802124c:	6804      	ldr	r4, [r0, #0]
 802124e:	b10c      	cbz	r4, 8021254 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 8021250:	3402      	adds	r4, #2
 8021252:	6004      	str	r4, [r0, #0]
 8021254:	680c      	ldr	r4, [r1, #0]
 8021256:	b10c      	cbz	r4, 802125c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 8021258:	3401      	adds	r4, #1
 802125a:	600c      	str	r4, [r1, #0]
 802125c:	6804      	ldr	r4, [r0, #0]
 802125e:	b17c      	cbz	r4, 8021280 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 8021260:	8824      	ldrh	r4, [r4, #0]
 8021262:	e7ed      	b.n	8021240 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8021264:	680c      	ldr	r4, [r1, #0]
 8021266:	b17c      	cbz	r4, 8021288 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8021268:	7824      	ldrb	r4, [r4, #0]
 802126a:	e7e7      	b.n	802123c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 802126c:	2c2d      	cmp	r4, #45	; 0x2d
 802126e:	d102      	bne.n	8021276 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 8021270:	f883 9000 	strb.w	r9, [r3]
 8021274:	e7ea      	b.n	802124c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8021276:	2c23      	cmp	r4, #35	; 0x23
 8021278:	d107      	bne.n	802128a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 802127a:	f888 9000 	strb.w	r9, [r8]
 802127e:	e7e5      	b.n	802124c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8021280:	680c      	ldr	r4, [r1, #0]
 8021282:	b10c      	cbz	r4, 8021288 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8021284:	7824      	ldrb	r4, [r4, #0]
 8021286:	e7db      	b.n	8021240 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8021288:	2400      	movs	r4, #0
 802128a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 802128e:	2b09      	cmp	r3, #9
 8021290:	d901      	bls.n	8021296 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 8021292:	2c2a      	cmp	r4, #42	; 0x2a
 8021294:	d122      	bne.n	80212dc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8021296:	2301      	movs	r3, #1
 8021298:	2c30      	cmp	r4, #48	; 0x30
 802129a:	f88e 3000 	strb.w	r3, [lr]
 802129e:	d10d      	bne.n	80212bc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 80212a0:	f88c 3000 	strb.w	r3, [ip]
 80212a4:	6803      	ldr	r3, [r0, #0]
 80212a6:	b10b      	cbz	r3, 80212ac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 80212a8:	3302      	adds	r3, #2
 80212aa:	6003      	str	r3, [r0, #0]
 80212ac:	680b      	ldr	r3, [r1, #0]
 80212ae:	b10b      	cbz	r3, 80212b4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 80212b0:	3301      	adds	r3, #1
 80212b2:	600b      	str	r3, [r1, #0]
 80212b4:	6803      	ldr	r3, [r0, #0]
 80212b6:	2b00      	cmp	r3, #0
 80212b8:	d02f      	beq.n	802131a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 80212ba:	881c      	ldrh	r4, [r3, #0]
 80212bc:	2c2a      	cmp	r4, #42	; 0x2a
 80212be:	d135      	bne.n	802132c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 80212c0:	f04f 33ff 	mov.w	r3, #4294967295
 80212c4:	6033      	str	r3, [r6, #0]
 80212c6:	6803      	ldr	r3, [r0, #0]
 80212c8:	b10b      	cbz	r3, 80212ce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 80212ca:	3302      	adds	r3, #2
 80212cc:	6003      	str	r3, [r0, #0]
 80212ce:	680b      	ldr	r3, [r1, #0]
 80212d0:	b10b      	cbz	r3, 80212d6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 80212d2:	3301      	adds	r3, #1
 80212d4:	600b      	str	r3, [r1, #0]
 80212d6:	6803      	ldr	r3, [r0, #0]
 80212d8:	b31b      	cbz	r3, 8021322 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 80212da:	881c      	ldrh	r4, [r3, #0]
 80212dc:	2c2e      	cmp	r4, #46	; 0x2e
 80212de:	d11a      	bne.n	8021316 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 80212e0:	2301      	movs	r3, #1
 80212e2:	703b      	strb	r3, [r7, #0]
 80212e4:	6803      	ldr	r3, [r0, #0]
 80212e6:	b10b      	cbz	r3, 80212ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 80212e8:	3302      	adds	r3, #2
 80212ea:	6003      	str	r3, [r0, #0]
 80212ec:	680b      	ldr	r3, [r1, #0]
 80212ee:	b10b      	cbz	r3, 80212f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 80212f0:	3301      	adds	r3, #1
 80212f2:	600b      	str	r3, [r1, #0]
 80212f4:	6803      	ldr	r3, [r0, #0]
 80212f6:	2b00      	cmp	r3, #0
 80212f8:	d036      	beq.n	8021368 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 80212fa:	881b      	ldrh	r3, [r3, #0]
 80212fc:	2b2a      	cmp	r3, #42	; 0x2a
 80212fe:	d137      	bne.n	8021370 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8021300:	f04f 33ff 	mov.w	r3, #4294967295
 8021304:	602b      	str	r3, [r5, #0]
 8021306:	6803      	ldr	r3, [r0, #0]
 8021308:	b10b      	cbz	r3, 802130e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 802130a:	3302      	adds	r3, #2
 802130c:	6003      	str	r3, [r0, #0]
 802130e:	680b      	ldr	r3, [r1, #0]
 8021310:	b10b      	cbz	r3, 8021316 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8021312:	3301      	adds	r3, #1
 8021314:	600b      	str	r3, [r1, #0]
 8021316:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802131a:	680c      	ldr	r4, [r1, #0]
 802131c:	b134      	cbz	r4, 802132c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 802131e:	7824      	ldrb	r4, [r4, #0]
 8021320:	e7cc      	b.n	80212bc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8021322:	680b      	ldr	r3, [r1, #0]
 8021324:	2b00      	cmp	r3, #0
 8021326:	d0f6      	beq.n	8021316 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8021328:	781c      	ldrb	r4, [r3, #0]
 802132a:	e7d7      	b.n	80212dc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 802132c:	2300      	movs	r3, #0
 802132e:	6033      	str	r3, [r6, #0]
 8021330:	220a      	movs	r2, #10
 8021332:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8021336:	fa1f f38c 	uxth.w	r3, ip
 802133a:	2b09      	cmp	r3, #9
 802133c:	d8ce      	bhi.n	80212dc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 802133e:	6833      	ldr	r3, [r6, #0]
 8021340:	fb02 c303 	mla	r3, r2, r3, ip
 8021344:	6033      	str	r3, [r6, #0]
 8021346:	6803      	ldr	r3, [r0, #0]
 8021348:	b10b      	cbz	r3, 802134e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 802134a:	3302      	adds	r3, #2
 802134c:	6003      	str	r3, [r0, #0]
 802134e:	680b      	ldr	r3, [r1, #0]
 8021350:	b10b      	cbz	r3, 8021356 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 8021352:	3301      	adds	r3, #1
 8021354:	600b      	str	r3, [r1, #0]
 8021356:	6803      	ldr	r3, [r0, #0]
 8021358:	b10b      	cbz	r3, 802135e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 802135a:	881c      	ldrh	r4, [r3, #0]
 802135c:	e7e9      	b.n	8021332 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 802135e:	680c      	ldr	r4, [r1, #0]
 8021360:	2c00      	cmp	r4, #0
 8021362:	d0e6      	beq.n	8021332 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8021364:	7824      	ldrb	r4, [r4, #0]
 8021366:	e7e4      	b.n	8021332 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8021368:	680b      	ldr	r3, [r1, #0]
 802136a:	b10b      	cbz	r3, 8021370 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 802136c:	781b      	ldrb	r3, [r3, #0]
 802136e:	e7c5      	b.n	80212fc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 8021370:	2200      	movs	r2, #0
 8021372:	602a      	str	r2, [r5, #0]
 8021374:	240a      	movs	r4, #10
 8021376:	3b30      	subs	r3, #48	; 0x30
 8021378:	b29e      	uxth	r6, r3
 802137a:	2e09      	cmp	r6, #9
 802137c:	682a      	ldr	r2, [r5, #0]
 802137e:	d813      	bhi.n	80213a8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 8021380:	fb04 3302 	mla	r3, r4, r2, r3
 8021384:	602b      	str	r3, [r5, #0]
 8021386:	6803      	ldr	r3, [r0, #0]
 8021388:	b10b      	cbz	r3, 802138e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 802138a:	3302      	adds	r3, #2
 802138c:	6003      	str	r3, [r0, #0]
 802138e:	680b      	ldr	r3, [r1, #0]
 8021390:	b10b      	cbz	r3, 8021396 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 8021392:	3301      	adds	r3, #1
 8021394:	600b      	str	r3, [r1, #0]
 8021396:	6803      	ldr	r3, [r0, #0]
 8021398:	b10b      	cbz	r3, 802139e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 802139a:	881b      	ldrh	r3, [r3, #0]
 802139c:	e7eb      	b.n	8021376 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 802139e:	680b      	ldr	r3, [r1, #0]
 80213a0:	2b00      	cmp	r3, #0
 80213a2:	d0e8      	beq.n	8021376 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 80213a4:	781b      	ldrb	r3, [r3, #0]
 80213a6:	e7e6      	b.n	8021376 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 80213a8:	2a06      	cmp	r2, #6
 80213aa:	bfa8      	it	ge
 80213ac:	2206      	movge	r2, #6
 80213ae:	602a      	str	r2, [r5, #0]
 80213b0:	e7b1      	b.n	8021316 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

080213b2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 80213b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80213b6:	b0a3      	sub	sp, #140	; 0x8c
 80213b8:	2600      	movs	r6, #0
 80213ba:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 80213be:	4607      	mov	r7, r0
 80213c0:	4688      	mov	r8, r1
 80213c2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80213c6:	4631      	mov	r1, r6
 80213c8:	2242      	movs	r2, #66	; 0x42
 80213ca:	4648      	mov	r0, r9
 80213cc:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80213ce:	960d      	str	r6, [sp, #52]	; 0x34
 80213d0:	f7fe fcd7 	bl	801fd82 <_ZN8touchgfx6memsetEPvhm>
 80213d4:	b15f      	cbz	r7, 80213ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 80213d6:	f108 3aff 	add.w	sl, r8, #4294967295
 80213da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80213dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80213de:	b152      	cbz	r2, 80213f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 80213e0:	8812      	ldrh	r2, [r2, #0]
 80213e2:	b10a      	cbz	r2, 80213e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 80213e4:	459a      	cmp	sl, r3
 80213e6:	dc2e      	bgt.n	8021446 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 80213e8:	2200      	movs	r2, #0
 80213ea:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 80213ee:	4638      	mov	r0, r7
 80213f0:	b023      	add	sp, #140	; 0x8c
 80213f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80213f6:	9a08      	ldr	r2, [sp, #32]
 80213f8:	2a00      	cmp	r2, #0
 80213fa:	d0f5      	beq.n	80213e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 80213fc:	7812      	ldrb	r2, [r2, #0]
 80213fe:	e7f0      	b.n	80213e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 8021400:	2d00      	cmp	r5, #0
 8021402:	d0ea      	beq.n	80213da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8021404:	782a      	ldrb	r2, [r5, #0]
 8021406:	b142      	cbz	r2, 802141a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 8021408:	2a25      	cmp	r2, #37	; 0x25
 802140a:	d001      	beq.n	8021410 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 802140c:	459a      	cmp	sl, r3
 802140e:	dc08      	bgt.n	8021422 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 8021410:	f1bb 0f00 	cmp.w	fp, #0
 8021414:	d121      	bne.n	802145a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 8021416:	2d00      	cmp	r5, #0
 8021418:	d0df      	beq.n	80213da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 802141a:	782a      	ldrb	r2, [r5, #0]
 802141c:	f04f 0b00 	mov.w	fp, #0
 8021420:	e01d      	b.n	802145e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 8021422:	f1bb 0f00 	cmp.w	fp, #0
 8021426:	d078      	beq.n	802151a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x168>
 8021428:	f8bb 2000 	ldrh.w	r2, [fp]
 802142c:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8021430:	f1bb 0f00 	cmp.w	fp, #0
 8021434:	d002      	beq.n	802143c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 8021436:	f10b 0202 	add.w	r2, fp, #2
 802143a:	9209      	str	r2, [sp, #36]	; 0x24
 802143c:	b10d      	cbz	r5, 8021442 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 802143e:	3501      	adds	r5, #1
 8021440:	9508      	str	r5, [sp, #32]
 8021442:	3301      	adds	r3, #1
 8021444:	930d      	str	r3, [sp, #52]	; 0x34
 8021446:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 802144a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802144c:	f1bb 0f00 	cmp.w	fp, #0
 8021450:	d0d6      	beq.n	8021400 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 8021452:	f8bb 2000 	ldrh.w	r2, [fp]
 8021456:	2a00      	cmp	r2, #0
 8021458:	d1d6      	bne.n	8021408 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 802145a:	f8bb 2000 	ldrh.w	r2, [fp]
 802145e:	2a00      	cmp	r2, #0
 8021460:	d0bb      	beq.n	80213da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8021462:	459a      	cmp	sl, r3
 8021464:	ddb9      	ble.n	80213da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8021466:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 802146a:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 802146e:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 8021472:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 8021476:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 802147a:	960e      	str	r6, [sp, #56]	; 0x38
 802147c:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 8021480:	960f      	str	r6, [sp, #60]	; 0x3c
 8021482:	f1bb 0f00 	cmp.w	fp, #0
 8021486:	d002      	beq.n	802148e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 8021488:	f10b 0302 	add.w	r3, fp, #2
 802148c:	9309      	str	r3, [sp, #36]	; 0x24
 802148e:	b10d      	cbz	r5, 8021494 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 8021490:	1c6b      	adds	r3, r5, #1
 8021492:	9308      	str	r3, [sp, #32]
 8021494:	ab0f      	add	r3, sp, #60	; 0x3c
 8021496:	9305      	str	r3, [sp, #20]
 8021498:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 802149c:	9304      	str	r3, [sp, #16]
 802149e:	ab0e      	add	r3, sp, #56	; 0x38
 80214a0:	9303      	str	r3, [sp, #12]
 80214a2:	ab0c      	add	r3, sp, #48	; 0x30
 80214a4:	9302      	str	r3, [sp, #8]
 80214a6:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 80214aa:	9301      	str	r3, [sp, #4]
 80214ac:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 80214b0:	9300      	str	r3, [sp, #0]
 80214b2:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 80214b6:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 80214ba:	a908      	add	r1, sp, #32
 80214bc:	a809      	add	r0, sp, #36	; 0x24
 80214be:	f7ff fea8 	bl	8021212 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 80214c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80214c4:	2b00      	cmp	r3, #0
 80214c6:	bfbe      	ittt	lt
 80214c8:	6823      	ldrlt	r3, [r4, #0]
 80214ca:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 80214ce:	930e      	strlt	r3, [sp, #56]	; 0x38
 80214d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80214d2:	bfb8      	it	lt
 80214d4:	3404      	addlt	r4, #4
 80214d6:	2b00      	cmp	r3, #0
 80214d8:	bfb8      	it	lt
 80214da:	6823      	ldrlt	r3, [r4, #0]
 80214dc:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 80214e0:	bfbe      	ittt	lt
 80214e2:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 80214e6:	930f      	strlt	r3, [sp, #60]	; 0x3c
 80214e8:	3404      	addlt	r4, #4
 80214ea:	b1d9      	cbz	r1, 8021524 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x172>
 80214ec:	880b      	ldrh	r3, [r1, #0]
 80214ee:	2b69      	cmp	r3, #105	; 0x69
 80214f0:	d01f      	beq.n	8021532 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 80214f2:	d82f      	bhi.n	8021554 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a2>
 80214f4:	2b58      	cmp	r3, #88	; 0x58
 80214f6:	d01c      	beq.n	8021532 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 80214f8:	d818      	bhi.n	802152c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17a>
 80214fa:	2b25      	cmp	r3, #37	; 0x25
 80214fc:	d034      	beq.n	8021568 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b6>
 80214fe:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 8021502:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021504:	f1bb 0f00 	cmp.w	fp, #0
 8021508:	f000 80b8 	beq.w	802167c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2ca>
 802150c:	f8bb 5000 	ldrh.w	r5, [fp]
 8021510:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 8021514:	3301      	adds	r3, #1
 8021516:	930d      	str	r3, [sp, #52]	; 0x34
 8021518:	e029      	b.n	802156e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 802151a:	b10d      	cbz	r5, 8021520 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16e>
 802151c:	782a      	ldrb	r2, [r5, #0]
 802151e:	e785      	b.n	802142c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8021520:	462a      	mov	r2, r5
 8021522:	e783      	b.n	802142c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8021524:	2a00      	cmp	r2, #0
 8021526:	d0ea      	beq.n	80214fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 8021528:	7813      	ldrb	r3, [r2, #0]
 802152a:	e7e0      	b.n	80214ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13c>
 802152c:	3b63      	subs	r3, #99	; 0x63
 802152e:	2b01      	cmp	r3, #1
 8021530:	d8e5      	bhi.n	80214fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 8021532:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8021536:	b329      	cbz	r1, 8021584 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d2>
 8021538:	880b      	ldrh	r3, [r1, #0]
 802153a:	2b69      	cmp	r3, #105	; 0x69
 802153c:	d063      	beq.n	8021606 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 802153e:	d825      	bhi.n	802158c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1da>
 8021540:	2b63      	cmp	r3, #99	; 0x63
 8021542:	d038      	beq.n	80215b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x204>
 8021544:	2b64      	cmp	r3, #100	; 0x64
 8021546:	d05e      	beq.n	8021606 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 8021548:	2b58      	cmp	r3, #88	; 0x58
 802154a:	d07b      	beq.n	8021644 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x292>
 802154c:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 8021550:	4625      	mov	r5, r4
 8021552:	e036      	b.n	80215c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8021554:	2b73      	cmp	r3, #115	; 0x73
 8021556:	d0ec      	beq.n	8021532 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8021558:	d802      	bhi.n	8021560 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ae>
 802155a:	2b6f      	cmp	r3, #111	; 0x6f
 802155c:	d1cf      	bne.n	80214fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 802155e:	e7e8      	b.n	8021532 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8021560:	2b75      	cmp	r3, #117	; 0x75
 8021562:	d0e6      	beq.n	8021532 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8021564:	2b78      	cmp	r3, #120	; 0x78
 8021566:	e7f9      	b.n	802155c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1aa>
 8021568:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802156a:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 802156e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021570:	b10b      	cbz	r3, 8021576 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c4>
 8021572:	3302      	adds	r3, #2
 8021574:	9309      	str	r3, [sp, #36]	; 0x24
 8021576:	9b08      	ldr	r3, [sp, #32]
 8021578:	2b00      	cmp	r3, #0
 802157a:	f43f af2e 	beq.w	80213da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 802157e:	3301      	adds	r3, #1
 8021580:	9308      	str	r3, [sp, #32]
 8021582:	e72a      	b.n	80213da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8021584:	2a00      	cmp	r2, #0
 8021586:	d0e1      	beq.n	802154c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 8021588:	7813      	ldrb	r3, [r2, #0]
 802158a:	e7d6      	b.n	802153a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x188>
 802158c:	2b73      	cmp	r3, #115	; 0x73
 802158e:	d036      	beq.n	80215fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24c>
 8021590:	d807      	bhi.n	80215a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1f0>
 8021592:	2b6f      	cmp	r3, #111	; 0x6f
 8021594:	d1da      	bne.n	802154c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 8021596:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021598:	1d25      	adds	r5, r4, #4
 802159a:	eba8 0202 	sub.w	r2, r8, r2
 802159e:	2308      	movs	r3, #8
 80215a0:	e04a      	b.n	8021638 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 80215a2:	2b75      	cmp	r3, #117	; 0x75
 80215a4:	d043      	beq.n	802162e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x27c>
 80215a6:	2b78      	cmp	r3, #120	; 0x78
 80215a8:	d1d0      	bne.n	802154c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 80215aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80215ac:	1d25      	adds	r5, r4, #4
 80215ae:	eba8 0202 	sub.w	r2, r8, r2
 80215b2:	2310      	movs	r3, #16
 80215b4:	e040      	b.n	8021638 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 80215b6:	7823      	ldrb	r3, [r4, #0]
 80215b8:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 80215bc:	1d25      	adds	r5, r4, #4
 80215be:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 80215c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80215c4:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 80215c8:	2b00      	cmp	r3, #0
 80215ca:	d052      	beq.n	8021672 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c0>
 80215cc:	881a      	ldrh	r2, [r3, #0]
 80215ce:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 80215d2:	a80d      	add	r0, sp, #52	; 0x34
 80215d4:	9005      	str	r0, [sp, #20]
 80215d6:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 80215da:	9004      	str	r0, [sp, #16]
 80215dc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80215de:	9003      	str	r0, [sp, #12]
 80215e0:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 80215e4:	9002      	str	r0, [sp, #8]
 80215e6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80215e8:	9001      	str	r0, [sp, #4]
 80215ea:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 80215ee:	9000      	str	r0, [sp, #0]
 80215f0:	e9cd 8706 	strd	r8, r7, [sp, #24]
 80215f4:	a810      	add	r0, sp, #64	; 0x40
 80215f6:	f7ff fd49 	bl	802108c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 80215fa:	462c      	mov	r4, r5
 80215fc:	e7b7      	b.n	802156e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 80215fe:	6823      	ldr	r3, [r4, #0]
 8021600:	1d25      	adds	r5, r4, #4
 8021602:	9310      	str	r3, [sp, #64]	; 0x40
 8021604:	e7dd      	b.n	80215c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8021606:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021608:	6820      	ldr	r0, [r4, #0]
 802160a:	eba8 0202 	sub.w	r2, r8, r2
 802160e:	230a      	movs	r3, #10
 8021610:	b292      	uxth	r2, r2
 8021612:	4649      	mov	r1, r9
 8021614:	f7ff fd08 	bl	8021028 <_ZN8touchgfx7Unicode4itoaElPtti>
 8021618:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 802161c:	2b2d      	cmp	r3, #45	; 0x2d
 802161e:	f104 0504 	add.w	r5, r4, #4
 8021622:	d1ce      	bne.n	80215c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8021624:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8021628:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802162a:	3302      	adds	r3, #2
 802162c:	e7e9      	b.n	8021602 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x250>
 802162e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021630:	1d25      	adds	r5, r4, #4
 8021632:	eba8 0202 	sub.w	r2, r8, r2
 8021636:	230a      	movs	r3, #10
 8021638:	b292      	uxth	r2, r2
 802163a:	4649      	mov	r1, r9
 802163c:	6820      	ldr	r0, [r4, #0]
 802163e:	f7ff fcd5 	bl	8020fec <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 8021642:	e7be      	b.n	80215c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8021644:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021646:	6820      	ldr	r0, [r4, #0]
 8021648:	eba8 0202 	sub.w	r2, r8, r2
 802164c:	b292      	uxth	r2, r2
 802164e:	2310      	movs	r3, #16
 8021650:	4649      	mov	r1, r9
 8021652:	f7ff fccb 	bl	8020fec <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 8021656:	1d25      	adds	r5, r4, #4
 8021658:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 802165c:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8021660:	2b00      	cmp	r3, #0
 8021662:	d0ae      	beq.n	80215c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8021664:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8021668:	2919      	cmp	r1, #25
 802166a:	d8f7      	bhi.n	802165c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 802166c:	3b20      	subs	r3, #32
 802166e:	8013      	strh	r3, [r2, #0]
 8021670:	e7f4      	b.n	802165c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 8021672:	9a08      	ldr	r2, [sp, #32]
 8021674:	2a00      	cmp	r2, #0
 8021676:	d0aa      	beq.n	80215ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 8021678:	7812      	ldrb	r2, [r2, #0]
 802167a:	e7a8      	b.n	80215ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 802167c:	2d00      	cmp	r5, #0
 802167e:	f43f af47 	beq.w	8021510 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>
 8021682:	782d      	ldrb	r5, [r5, #0]
 8021684:	e744      	b.n	8021510 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>

08021686 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 8021686:	b507      	push	{r0, r1, r2, lr}
 8021688:	9300      	str	r3, [sp, #0]
 802168a:	4613      	mov	r3, r2
 802168c:	2200      	movs	r2, #0
 802168e:	f7ff fe90 	bl	80213b2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 8021692:	b003      	add	sp, #12
 8021694:	f85d fb04 	ldr.w	pc, [sp], #4

08021698 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8021698:	b40c      	push	{r2, r3}
 802169a:	b507      	push	{r0, r1, r2, lr}
 802169c:	ab04      	add	r3, sp, #16
 802169e:	f853 2b04 	ldr.w	r2, [r3], #4
 80216a2:	9301      	str	r3, [sp, #4]
 80216a4:	f7ff ffef 	bl	8021686 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 80216a8:	b003      	add	sp, #12
 80216aa:	f85d eb04 	ldr.w	lr, [sp], #4
 80216ae:	b002      	add	sp, #8
 80216b0:	4770      	bx	lr
	...

080216b4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 80216b4:	4b01      	ldr	r3, [pc, #4]	; (80216bc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 80216b6:	6018      	str	r0, [r3, #0]
 80216b8:	4770      	bx	lr
 80216ba:	bf00      	nop
 80216bc:	20012874 	.word	0x20012874

080216c0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 80216c0:	4b07      	ldr	r3, [pc, #28]	; (80216e0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 80216c2:	881a      	ldrh	r2, [r3, #0]
 80216c4:	4282      	cmp	r2, r0
 80216c6:	d809      	bhi.n	80216dc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 80216c8:	4b06      	ldr	r3, [pc, #24]	; (80216e4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 80216ca:	881b      	ldrh	r3, [r3, #0]
 80216cc:	4413      	add	r3, r2
 80216ce:	4298      	cmp	r0, r3
 80216d0:	da04      	bge.n	80216dc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 80216d2:	4b05      	ldr	r3, [pc, #20]	; (80216e8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 80216d4:	681b      	ldr	r3, [r3, #0]
 80216d6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80216da:	4770      	bx	lr
 80216dc:	2000      	movs	r0, #0
 80216de:	4770      	bx	lr
 80216e0:	20012894 	.word	0x20012894
 80216e4:	20012898 	.word	0x20012898
 80216e8:	20012878 	.word	0x20012878

080216ec <_ZN8touchgfx6Bitmap10clearCacheEv>:
 80216ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80216f0:	4d28      	ldr	r5, [pc, #160]	; (8021794 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 80216f2:	682b      	ldr	r3, [r5, #0]
 80216f4:	2b00      	cmp	r3, #0
 80216f6:	d04a      	beq.n	802178e <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 80216f8:	4a27      	ldr	r2, [pc, #156]	; (8021798 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 80216fa:	4e28      	ldr	r6, [pc, #160]	; (802179c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 80216fc:	8810      	ldrh	r0, [r2, #0]
 80216fe:	f8b6 8000 	ldrh.w	r8, [r6]
 8021702:	4c27      	ldr	r4, [pc, #156]	; (80217a0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8021704:	4f27      	ldr	r7, [pc, #156]	; (80217a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8021706:	4440      	add	r0, r8
 8021708:	1c41      	adds	r1, r0, #1
 802170a:	f021 0101 	bic.w	r1, r1, #1
 802170e:	0409      	lsls	r1, r1, #16
 8021710:	0c09      	lsrs	r1, r1, #16
 8021712:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 8021716:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 802171a:	eb03 020e 	add.w	r2, r3, lr
 802171e:	eb0e 010c 	add.w	r1, lr, ip
 8021722:	6022      	str	r2, [r4, #0]
 8021724:	185a      	adds	r2, r3, r1
 8021726:	603a      	str	r2, [r7, #0]
 8021728:	220e      	movs	r2, #14
 802172a:	fb02 f208 	mul.w	r2, r2, r8
 802172e:	3203      	adds	r2, #3
 8021730:	f022 0203 	bic.w	r2, r2, #3
 8021734:	4411      	add	r1, r2
 8021736:	440b      	add	r3, r1
 8021738:	491b      	ldr	r1, [pc, #108]	; (80217a8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 802173a:	600b      	str	r3, [r1, #0]
 802173c:	491b      	ldr	r1, [pc, #108]	; (80217ac <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 802173e:	2300      	movs	r3, #0
 8021740:	800b      	strh	r3, [r1, #0]
 8021742:	491b      	ldr	r1, [pc, #108]	; (80217b0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 8021744:	6809      	ldr	r1, [r1, #0]
 8021746:	eba1 010e 	sub.w	r1, r1, lr
 802174a:	eba1 010c 	sub.w	r1, r1, ip
 802174e:	1a8a      	subs	r2, r1, r2
 8021750:	4918      	ldr	r1, [pc, #96]	; (80217b4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 8021752:	600a      	str	r2, [r1, #0]
 8021754:	4a18      	ldr	r2, [pc, #96]	; (80217b8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 8021756:	469c      	mov	ip, r3
 8021758:	8013      	strh	r3, [r2, #0]
 802175a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 802175e:	4283      	cmp	r3, r0
 8021760:	d10d      	bne.n	802177e <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 8021762:	8835      	ldrh	r5, [r6, #0]
 8021764:	6838      	ldr	r0, [r7, #0]
 8021766:	2300      	movs	r3, #0
 8021768:	240e      	movs	r4, #14
 802176a:	429d      	cmp	r5, r3
 802176c:	d90f      	bls.n	802178e <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 802176e:	fb04 0203 	mla	r2, r4, r3, r0
 8021772:	3301      	adds	r3, #1
 8021774:	7b11      	ldrb	r1, [r2, #12]
 8021776:	f36f 1145 	bfc	r1, #5, #1
 802177a:	7311      	strb	r1, [r2, #12]
 802177c:	e7f5      	b.n	802176a <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 802177e:	682a      	ldr	r2, [r5, #0]
 8021780:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8021784:	6822      	ldr	r2, [r4, #0]
 8021786:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 802178a:	3301      	adds	r3, #1
 802178c:	e7e7      	b.n	802175e <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 802178e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021792:	bf00      	nop
 8021794:	20012878 	.word	0x20012878
 8021798:	20012894 	.word	0x20012894
 802179c:	20012898 	.word	0x20012898
 80217a0:	2001288c 	.word	0x2001288c
 80217a4:	2001287c 	.word	0x2001287c
 80217a8:	20012884 	.word	0x20012884
 80217ac:	20012896 	.word	0x20012896
 80217b0:	20012880 	.word	0x20012880
 80217b4:	20012890 	.word	0x20012890
 80217b8:	20012888 	.word	0x20012888

080217bc <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 80217bc:	b510      	push	{r4, lr}
 80217be:	4b10      	ldr	r3, [pc, #64]	; (8021800 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 80217c0:	681b      	ldr	r3, [r3, #0]
 80217c2:	b9db      	cbnz	r3, 80217fc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 80217c4:	b1d1      	cbz	r1, 80217fc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 80217c6:	4b0f      	ldr	r3, [pc, #60]	; (8021804 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 80217c8:	801a      	strh	r2, [r3, #0]
 80217ca:	4b0f      	ldr	r3, [pc, #60]	; (8021808 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 80217cc:	881b      	ldrh	r3, [r3, #0]
 80217ce:	b292      	uxth	r2, r2
 80217d0:	240e      	movs	r4, #14
 80217d2:	4413      	add	r3, r2
 80217d4:	4362      	muls	r2, r4
 80217d6:	2406      	movs	r4, #6
 80217d8:	fb04 2203 	mla	r2, r4, r3, r2
 80217dc:	428a      	cmp	r2, r1
 80217de:	d305      	bcc.n	80217ec <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 80217e0:	4b0a      	ldr	r3, [pc, #40]	; (802180c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 80217e2:	4a0b      	ldr	r2, [pc, #44]	; (8021810 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 80217e4:	480b      	ldr	r0, [pc, #44]	; (8021814 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 80217e6:	2137      	movs	r1, #55	; 0x37
 80217e8:	f00c fd76 	bl	802e2d8 <__assert_func>
 80217ec:	4b0a      	ldr	r3, [pc, #40]	; (8021818 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 80217ee:	6019      	str	r1, [r3, #0]
 80217f0:	4b0a      	ldr	r3, [pc, #40]	; (802181c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 80217f2:	6018      	str	r0, [r3, #0]
 80217f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80217f8:	f7ff bf78 	b.w	80216ec <_ZN8touchgfx6Bitmap10clearCacheEv>
 80217fc:	bd10      	pop	{r4, pc}
 80217fe:	bf00      	nop
 8021800:	20012884 	.word	0x20012884
 8021804:	20012898 	.word	0x20012898
 8021808:	20012894 	.word	0x20012894
 802180c:	08033f25 	.word	0x08033f25
 8021810:	08033f7e 	.word	0x08033f7e
 8021814:	08033f00 	.word	0x08033f00
 8021818:	20012880 	.word	0x20012880
 802181c:	20012878 	.word	0x20012878

08021820 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8021820:	b470      	push	{r4, r5, r6}
 8021822:	4c07      	ldr	r4, [pc, #28]	; (8021840 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8021824:	6826      	ldr	r6, [r4, #0]
 8021826:	4605      	mov	r5, r0
 8021828:	4610      	mov	r0, r2
 802182a:	9a03      	ldr	r2, [sp, #12]
 802182c:	b936      	cbnz	r6, 802183c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 802182e:	6025      	str	r5, [r4, #0]
 8021830:	4c04      	ldr	r4, [pc, #16]	; (8021844 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8021832:	8021      	strh	r1, [r4, #0]
 8021834:	bc70      	pop	{r4, r5, r6}
 8021836:	4619      	mov	r1, r3
 8021838:	f7ff bfc0 	b.w	80217bc <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 802183c:	bc70      	pop	{r4, r5, r6}
 802183e:	4770      	bx	lr
 8021840:	2001289c 	.word	0x2001289c
 8021844:	20012894 	.word	0x20012894

08021848 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8021848:	b508      	push	{r3, lr}
 802184a:	4b14      	ldr	r3, [pc, #80]	; (802189c <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 802184c:	6819      	ldr	r1, [r3, #0]
 802184e:	b931      	cbnz	r1, 802185e <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 8021850:	4b13      	ldr	r3, [pc, #76]	; (80218a0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8021852:	4a14      	ldr	r2, [pc, #80]	; (80218a4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8021854:	4814      	ldr	r0, [pc, #80]	; (80218a8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8021856:	f44f 713e 	mov.w	r1, #760	; 0x2f8
 802185a:	f00c fd3d 	bl	802e2d8 <__assert_func>
 802185e:	4a13      	ldr	r2, [pc, #76]	; (80218ac <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8021860:	8803      	ldrh	r3, [r0, #0]
 8021862:	8812      	ldrh	r2, [r2, #0]
 8021864:	4293      	cmp	r3, r2
 8021866:	d204      	bcs.n	8021872 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 8021868:	2214      	movs	r2, #20
 802186a:	fb02 1303 	mla	r3, r2, r3, r1
 802186e:	8918      	ldrh	r0, [r3, #8]
 8021870:	bd08      	pop	{r3, pc}
 8021872:	490f      	ldr	r1, [pc, #60]	; (80218b0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 8021874:	8809      	ldrh	r1, [r1, #0]
 8021876:	4411      	add	r1, r2
 8021878:	428b      	cmp	r3, r1
 802187a:	da06      	bge.n	802188a <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 802187c:	1a9b      	subs	r3, r3, r2
 802187e:	4a0d      	ldr	r2, [pc, #52]	; (80218b4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 8021880:	6812      	ldr	r2, [r2, #0]
 8021882:	210e      	movs	r1, #14
 8021884:	fb01 2303 	mla	r3, r1, r3, r2
 8021888:	e7f1      	b.n	802186e <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 802188a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 802188e:	4293      	cmp	r3, r2
 8021890:	bf0a      	itet	eq
 8021892:	4b09      	ldreq	r3, [pc, #36]	; (80218b8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 8021894:	2000      	movne	r0, #0
 8021896:	8818      	ldrheq	r0, [r3, #0]
 8021898:	e7ea      	b.n	8021870 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 802189a:	bf00      	nop
 802189c:	2001289c 	.word	0x2001289c
 80218a0:	080332fc 	.word	0x080332fc
 80218a4:	0803402b 	.word	0x0803402b
 80218a8:	08033f00 	.word	0x08033f00
 80218ac:	20012894 	.word	0x20012894
 80218b0:	20012898 	.word	0x20012898
 80218b4:	2001287c 	.word	0x2001287c
 80218b8:	200127e8 	.word	0x200127e8

080218bc <_ZNK8touchgfx6Bitmap9getHeightEv>:
 80218bc:	b508      	push	{r3, lr}
 80218be:	4b14      	ldr	r3, [pc, #80]	; (8021910 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 80218c0:	6819      	ldr	r1, [r3, #0]
 80218c2:	b931      	cbnz	r1, 80218d2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 80218c4:	4b13      	ldr	r3, [pc, #76]	; (8021914 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 80218c6:	4a14      	ldr	r2, [pc, #80]	; (8021918 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 80218c8:	4814      	ldr	r0, [pc, #80]	; (802191c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 80218ca:	f44f 7143 	mov.w	r1, #780	; 0x30c
 80218ce:	f00c fd03 	bl	802e2d8 <__assert_func>
 80218d2:	4a13      	ldr	r2, [pc, #76]	; (8021920 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 80218d4:	8803      	ldrh	r3, [r0, #0]
 80218d6:	8812      	ldrh	r2, [r2, #0]
 80218d8:	4293      	cmp	r3, r2
 80218da:	d204      	bcs.n	80218e6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 80218dc:	2214      	movs	r2, #20
 80218de:	fb02 1303 	mla	r3, r2, r3, r1
 80218e2:	8958      	ldrh	r0, [r3, #10]
 80218e4:	bd08      	pop	{r3, pc}
 80218e6:	490f      	ldr	r1, [pc, #60]	; (8021924 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 80218e8:	8809      	ldrh	r1, [r1, #0]
 80218ea:	4411      	add	r1, r2
 80218ec:	428b      	cmp	r3, r1
 80218ee:	da06      	bge.n	80218fe <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 80218f0:	1a9b      	subs	r3, r3, r2
 80218f2:	4a0d      	ldr	r2, [pc, #52]	; (8021928 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 80218f4:	6812      	ldr	r2, [r2, #0]
 80218f6:	210e      	movs	r1, #14
 80218f8:	fb01 2303 	mla	r3, r1, r3, r2
 80218fc:	e7f1      	b.n	80218e2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 80218fe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8021902:	4293      	cmp	r3, r2
 8021904:	bf0a      	itet	eq
 8021906:	4b09      	ldreq	r3, [pc, #36]	; (802192c <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 8021908:	2000      	movne	r0, #0
 802190a:	8818      	ldrheq	r0, [r3, #0]
 802190c:	e7ea      	b.n	80218e4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 802190e:	bf00      	nop
 8021910:	2001289c 	.word	0x2001289c
 8021914:	080332fc 	.word	0x080332fc
 8021918:	08034057 	.word	0x08034057
 802191c:	08033f00 	.word	0x08033f00
 8021920:	20012894 	.word	0x20012894
 8021924:	20012898 	.word	0x20012898
 8021928:	2001287c 	.word	0x2001287c
 802192c:	200127ea 	.word	0x200127ea

08021930 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8021930:	b510      	push	{r4, lr}
 8021932:	4b23      	ldr	r3, [pc, #140]	; (80219c0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8021934:	681c      	ldr	r4, [r3, #0]
 8021936:	b934      	cbnz	r4, 8021946 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 8021938:	4b22      	ldr	r3, [pc, #136]	; (80219c4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 802193a:	4a23      	ldr	r2, [pc, #140]	; (80219c8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 802193c:	4823      	ldr	r0, [pc, #140]	; (80219cc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 802193e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8021942:	f00c fcc9 	bl	802e2d8 <__assert_func>
 8021946:	4a22      	ldr	r2, [pc, #136]	; (80219d0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8021948:	880b      	ldrh	r3, [r1, #0]
 802194a:	8812      	ldrh	r2, [r2, #0]
 802194c:	4293      	cmp	r3, r2
 802194e:	d211      	bcs.n	8021974 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 8021950:	2214      	movs	r2, #20
 8021952:	fb02 4303 	mla	r3, r2, r3, r4
 8021956:	8a1a      	ldrh	r2, [r3, #16]
 8021958:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 802195c:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8021960:	8a5b      	ldrh	r3, [r3, #18]
 8021962:	8004      	strh	r4, [r0, #0]
 8021964:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8021968:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802196c:	8041      	strh	r1, [r0, #2]
 802196e:	8082      	strh	r2, [r0, #4]
 8021970:	80c3      	strh	r3, [r0, #6]
 8021972:	e00e      	b.n	8021992 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8021974:	4917      	ldr	r1, [pc, #92]	; (80219d4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 8021976:	8809      	ldrh	r1, [r1, #0]
 8021978:	4411      	add	r1, r2
 802197a:	428b      	cmp	r3, r1
 802197c:	da0a      	bge.n	8021994 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 802197e:	1a9b      	subs	r3, r3, r2
 8021980:	4a15      	ldr	r2, [pc, #84]	; (80219d8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 8021982:	6812      	ldr	r2, [r2, #0]
 8021984:	210e      	movs	r1, #14
 8021986:	fb01 2303 	mla	r3, r1, r3, r2
 802198a:	681a      	ldr	r2, [r3, #0]
 802198c:	6002      	str	r2, [r0, #0]
 802198e:	685a      	ldr	r2, [r3, #4]
 8021990:	6042      	str	r2, [r0, #4]
 8021992:	bd10      	pop	{r4, pc}
 8021994:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8021998:	4293      	cmp	r3, r2
 802199a:	d10b      	bne.n	80219b4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 802199c:	4b0f      	ldr	r3, [pc, #60]	; (80219dc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 802199e:	f9b3 1000 	ldrsh.w	r1, [r3]
 80219a2:	4b0f      	ldr	r3, [pc, #60]	; (80219e0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 80219a4:	8081      	strh	r1, [r0, #4]
 80219a6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80219aa:	80c2      	strh	r2, [r0, #6]
 80219ac:	2300      	movs	r3, #0
 80219ae:	8003      	strh	r3, [r0, #0]
 80219b0:	8043      	strh	r3, [r0, #2]
 80219b2:	e7ee      	b.n	8021992 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 80219b4:	2300      	movs	r3, #0
 80219b6:	8003      	strh	r3, [r0, #0]
 80219b8:	8043      	strh	r3, [r0, #2]
 80219ba:	8083      	strh	r3, [r0, #4]
 80219bc:	e7d8      	b.n	8021970 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 80219be:	bf00      	nop
 80219c0:	2001289c 	.word	0x2001289c
 80219c4:	080332fc 	.word	0x080332fc
 80219c8:	08033fc4 	.word	0x08033fc4
 80219cc:	08033f00 	.word	0x08033f00
 80219d0:	20012894 	.word	0x20012894
 80219d4:	20012898 	.word	0x20012898
 80219d8:	2001287c 	.word	0x2001287c
 80219dc:	200127e8 	.word	0x200127e8
 80219e0:	200127ea 	.word	0x200127ea

080219e4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 80219e4:	4b18      	ldr	r3, [pc, #96]	; (8021a48 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 80219e6:	681b      	ldr	r3, [r3, #0]
 80219e8:	b34b      	cbz	r3, 8021a3e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 80219ea:	4a18      	ldr	r2, [pc, #96]	; (8021a4c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 80219ec:	8800      	ldrh	r0, [r0, #0]
 80219ee:	8812      	ldrh	r2, [r2, #0]
 80219f0:	4290      	cmp	r0, r2
 80219f2:	d211      	bcs.n	8021a18 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 80219f4:	2214      	movs	r2, #20
 80219f6:	fb02 3300 	mla	r3, r2, r0, r3
 80219fa:	8a1a      	ldrh	r2, [r3, #16]
 80219fc:	8919      	ldrh	r1, [r3, #8]
 80219fe:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8021a02:	428a      	cmp	r2, r1
 8021a04:	db1d      	blt.n	8021a42 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8021a06:	8a58      	ldrh	r0, [r3, #18]
 8021a08:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8021a0c:	895b      	ldrh	r3, [r3, #10]
 8021a0e:	4298      	cmp	r0, r3
 8021a10:	bfac      	ite	ge
 8021a12:	2000      	movge	r0, #0
 8021a14:	2001      	movlt	r0, #1
 8021a16:	4770      	bx	lr
 8021a18:	4b0d      	ldr	r3, [pc, #52]	; (8021a50 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8021a1a:	881b      	ldrh	r3, [r3, #0]
 8021a1c:	4413      	add	r3, r2
 8021a1e:	4298      	cmp	r0, r3
 8021a20:	da0d      	bge.n	8021a3e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8021a22:	4b0c      	ldr	r3, [pc, #48]	; (8021a54 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 8021a24:	681b      	ldr	r3, [r3, #0]
 8021a26:	1a80      	subs	r0, r0, r2
 8021a28:	220e      	movs	r2, #14
 8021a2a:	fb02 3300 	mla	r3, r2, r0, r3
 8021a2e:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8021a32:	891a      	ldrh	r2, [r3, #8]
 8021a34:	4291      	cmp	r1, r2
 8021a36:	db04      	blt.n	8021a42 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8021a38:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8021a3c:	e7e6      	b.n	8021a0c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 8021a3e:	2000      	movs	r0, #0
 8021a40:	4770      	bx	lr
 8021a42:	2001      	movs	r0, #1
 8021a44:	4770      	bx	lr
 8021a46:	bf00      	nop
 8021a48:	2001289c 	.word	0x2001289c
 8021a4c:	20012894 	.word	0x20012894
 8021a50:	20012898 	.word	0x20012898
 8021a54:	2001287c 	.word	0x2001287c

08021a58 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8021a58:	b508      	push	{r3, lr}
 8021a5a:	4b12      	ldr	r3, [pc, #72]	; (8021aa4 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8021a5c:	6819      	ldr	r1, [r3, #0]
 8021a5e:	b931      	cbnz	r1, 8021a6e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8021a60:	4b11      	ldr	r3, [pc, #68]	; (8021aa8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8021a62:	4a12      	ldr	r2, [pc, #72]	; (8021aac <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8021a64:	4812      	ldr	r0, [pc, #72]	; (8021ab0 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8021a66:	f44f 7151 	mov.w	r1, #836	; 0x344
 8021a6a:	f00c fc35 	bl	802e2d8 <__assert_func>
 8021a6e:	8803      	ldrh	r3, [r0, #0]
 8021a70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8021a74:	4293      	cmp	r3, r2
 8021a76:	d012      	beq.n	8021a9e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8021a78:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8021a7c:	4293      	cmp	r3, r2
 8021a7e:	d103      	bne.n	8021a88 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 8021a80:	4b0c      	ldr	r3, [pc, #48]	; (8021ab4 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8021a82:	681b      	ldr	r3, [r3, #0]
 8021a84:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8021a86:	bd08      	pop	{r3, pc}
 8021a88:	4a0b      	ldr	r2, [pc, #44]	; (8021ab8 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 8021a8a:	6812      	ldr	r2, [r2, #0]
 8021a8c:	b11a      	cbz	r2, 8021a96 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 8021a8e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8021a92:	2800      	cmp	r0, #0
 8021a94:	d1f7      	bne.n	8021a86 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8021a96:	2214      	movs	r2, #20
 8021a98:	4353      	muls	r3, r2
 8021a9a:	58c8      	ldr	r0, [r1, r3]
 8021a9c:	e7f3      	b.n	8021a86 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8021a9e:	2000      	movs	r0, #0
 8021aa0:	e7f1      	b.n	8021a86 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8021aa2:	bf00      	nop
 8021aa4:	2001289c 	.word	0x2001289c
 8021aa8:	080332fc 	.word	0x080332fc
 8021aac:	08033ffa 	.word	0x08033ffa
 8021ab0:	08033f00 	.word	0x08033f00
 8021ab4:	200127f4 	.word	0x200127f4
 8021ab8:	20012878 	.word	0x20012878

08021abc <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8021abc:	8802      	ldrh	r2, [r0, #0]
 8021abe:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8021ac2:	429a      	cmp	r2, r3
 8021ac4:	d840      	bhi.n	8021b48 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 8021ac6:	4b21      	ldr	r3, [pc, #132]	; (8021b4c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 8021ac8:	881b      	ldrh	r3, [r3, #0]
 8021aca:	429a      	cmp	r2, r3
 8021acc:	d220      	bcs.n	8021b10 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 8021ace:	4b20      	ldr	r3, [pc, #128]	; (8021b50 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8021ad0:	6819      	ldr	r1, [r3, #0]
 8021ad2:	2314      	movs	r3, #20
 8021ad4:	fb03 1302 	mla	r3, r3, r2, r1
 8021ad8:	6858      	ldr	r0, [r3, #4]
 8021ada:	2800      	cmp	r0, #0
 8021adc:	d035      	beq.n	8021b4a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8021ade:	491d      	ldr	r1, [pc, #116]	; (8021b54 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8021ae0:	6809      	ldr	r1, [r1, #0]
 8021ae2:	2900      	cmp	r1, #0
 8021ae4:	d031      	beq.n	8021b4a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8021ae6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8021aea:	b371      	cbz	r1, 8021b4a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8021aec:	895a      	ldrh	r2, [r3, #10]
 8021aee:	8918      	ldrh	r0, [r3, #8]
 8021af0:	4350      	muls	r0, r2
 8021af2:	7c5a      	ldrb	r2, [r3, #17]
 8021af4:	7cdb      	ldrb	r3, [r3, #19]
 8021af6:	0952      	lsrs	r2, r2, #5
 8021af8:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8021afc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8021b00:	2b0b      	cmp	r3, #11
 8021b02:	bf18      	it	ne
 8021b04:	0040      	lslne	r0, r0, #1
 8021b06:	3003      	adds	r0, #3
 8021b08:	f020 0003 	bic.w	r0, r0, #3
 8021b0c:	4408      	add	r0, r1
 8021b0e:	4770      	bx	lr
 8021b10:	4911      	ldr	r1, [pc, #68]	; (8021b58 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8021b12:	8809      	ldrh	r1, [r1, #0]
 8021b14:	4419      	add	r1, r3
 8021b16:	428a      	cmp	r2, r1
 8021b18:	da16      	bge.n	8021b48 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 8021b1a:	4910      	ldr	r1, [pc, #64]	; (8021b5c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8021b1c:	6809      	ldr	r1, [r1, #0]
 8021b1e:	1ad3      	subs	r3, r2, r3
 8021b20:	200e      	movs	r0, #14
 8021b22:	fb00 1303 	mla	r3, r0, r3, r1
 8021b26:	7b19      	ldrb	r1, [r3, #12]
 8021b28:	f001 011f 	and.w	r1, r1, #31
 8021b2c:	290b      	cmp	r1, #11
 8021b2e:	d10b      	bne.n	8021b48 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 8021b30:	8919      	ldrh	r1, [r3, #8]
 8021b32:	8958      	ldrh	r0, [r3, #10]
 8021b34:	4b07      	ldr	r3, [pc, #28]	; (8021b54 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8021b36:	4348      	muls	r0, r1
 8021b38:	6819      	ldr	r1, [r3, #0]
 8021b3a:	3003      	adds	r0, #3
 8021b3c:	f020 0303 	bic.w	r3, r0, #3
 8021b40:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8021b44:	4418      	add	r0, r3
 8021b46:	4770      	bx	lr
 8021b48:	2000      	movs	r0, #0
 8021b4a:	4770      	bx	lr
 8021b4c:	20012894 	.word	0x20012894
 8021b50:	2001289c 	.word	0x2001289c
 8021b54:	20012878 	.word	0x20012878
 8021b58:	20012898 	.word	0x20012898
 8021b5c:	2001287c 	.word	0x2001287c

08021b60 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8021b60:	4b19      	ldr	r3, [pc, #100]	; (8021bc8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8021b62:	6819      	ldr	r1, [r3, #0]
 8021b64:	8803      	ldrh	r3, [r0, #0]
 8021b66:	b1e9      	cbz	r1, 8021ba4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8021b68:	4a18      	ldr	r2, [pc, #96]	; (8021bcc <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8021b6a:	8812      	ldrh	r2, [r2, #0]
 8021b6c:	429a      	cmp	r2, r3
 8021b6e:	d90a      	bls.n	8021b86 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8021b70:	2214      	movs	r2, #20
 8021b72:	fb02 1303 	mla	r3, r2, r3, r1
 8021b76:	7c58      	ldrb	r0, [r3, #17]
 8021b78:	0942      	lsrs	r2, r0, #5
 8021b7a:	7cd8      	ldrb	r0, [r3, #19]
 8021b7c:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8021b80:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8021b84:	4770      	bx	lr
 8021b86:	4912      	ldr	r1, [pc, #72]	; (8021bd0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 8021b88:	8809      	ldrh	r1, [r1, #0]
 8021b8a:	4411      	add	r1, r2
 8021b8c:	428b      	cmp	r3, r1
 8021b8e:	da09      	bge.n	8021ba4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8021b90:	1a9b      	subs	r3, r3, r2
 8021b92:	4a10      	ldr	r2, [pc, #64]	; (8021bd4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 8021b94:	6812      	ldr	r2, [r2, #0]
 8021b96:	210e      	movs	r1, #14
 8021b98:	fb01 2303 	mla	r3, r1, r3, r2
 8021b9c:	7b18      	ldrb	r0, [r3, #12]
 8021b9e:	f000 001f 	and.w	r0, r0, #31
 8021ba2:	4770      	bx	lr
 8021ba4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8021ba8:	4293      	cmp	r3, r2
 8021baa:	d10a      	bne.n	8021bc2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 8021bac:	4b0a      	ldr	r3, [pc, #40]	; (8021bd8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 8021bae:	681b      	ldr	r3, [r3, #0]
 8021bb0:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8021bb4:	b10a      	cbz	r2, 8021bba <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8021bb6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8021bb8:	b900      	cbnz	r0, 8021bbc <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 8021bba:	6898      	ldr	r0, [r3, #8]
 8021bbc:	6803      	ldr	r3, [r0, #0]
 8021bbe:	6a1b      	ldr	r3, [r3, #32]
 8021bc0:	4718      	bx	r3
 8021bc2:	2000      	movs	r0, #0
 8021bc4:	4770      	bx	lr
 8021bc6:	bf00      	nop
 8021bc8:	2001289c 	.word	0x2001289c
 8021bcc:	20012894 	.word	0x20012894
 8021bd0:	20012898 	.word	0x20012898
 8021bd4:	2001287c 	.word	0x2001287c
 8021bd8:	200127f4 	.word	0x200127f4

08021bdc <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 8021bdc:	2010      	movs	r0, #16
 8021bde:	4770      	bx	lr

08021be0 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 8021be0:	2000      	movs	r0, #0
 8021be2:	4770      	bx	lr

08021be4 <_ZNK8touchgfx8LCD16bpp20getColorFrom24BitRGBEhhh>:
 8021be4:	00d2      	lsls	r2, r2, #3
 8021be6:	0209      	lsls	r1, r1, #8
 8021be8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021bec:	ea42 02d3 	orr.w	r2, r2, r3, lsr #3
 8021bf0:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 8021bf4:	4310      	orrs	r0, r2
 8021bf6:	4770      	bx	lr

08021bf8 <_ZNK8touchgfx8LCD16bpp11getRedColorENS_9colortypeE>:
 8021bf8:	0a09      	lsrs	r1, r1, #8
 8021bfa:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 8021bfe:	4770      	bx	lr

08021c00 <_ZNK8touchgfx8LCD16bpp13getGreenColorENS_9colortypeE>:
 8021c00:	08c9      	lsrs	r1, r1, #3
 8021c02:	f001 00fc 	and.w	r0, r1, #252	; 0xfc
 8021c06:	4770      	bx	lr

08021c08 <_ZNK8touchgfx8LCD16bpp12getBlueColorENS_9colortypeE>:
 8021c08:	00c9      	lsls	r1, r1, #3
 8021c0a:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 8021c0e:	4770      	bx	lr

08021c10 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8021c10:	2bff      	cmp	r3, #255	; 0xff
 8021c12:	d050      	beq.n	8021cb6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8021c14:	2a0b      	cmp	r2, #11
 8021c16:	d04a      	beq.n	8021cae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8021c18:	d80e      	bhi.n	8021c38 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8021c1a:	2a03      	cmp	r2, #3
 8021c1c:	d03f      	beq.n	8021c9e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 8021c1e:	d804      	bhi.n	8021c2a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8021c20:	2a01      	cmp	r2, #1
 8021c22:	d03e      	beq.n	8021ca2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8021c24:	d93f      	bls.n	8021ca6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8021c26:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8021c28:	4770      	bx	lr
 8021c2a:	2a09      	cmp	r2, #9
 8021c2c:	d03f      	beq.n	8021cae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8021c2e:	d83c      	bhi.n	8021caa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8021c30:	2a08      	cmp	r2, #8
 8021c32:	d03a      	beq.n	8021caa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8021c34:	2000      	movs	r0, #0
 8021c36:	4770      	bx	lr
 8021c38:	2a2f      	cmp	r2, #47	; 0x2f
 8021c3a:	d024      	beq.n	8021c86 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8021c3c:	d80d      	bhi.n	8021c5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8021c3e:	2a2d      	cmp	r2, #45	; 0x2d
 8021c40:	d014      	beq.n	8021c6c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 8021c42:	d826      	bhi.n	8021c92 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8021c44:	2a2c      	cmp	r2, #44	; 0x2c
 8021c46:	d1f5      	bne.n	8021c34 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8021c48:	684b      	ldr	r3, [r1, #4]
 8021c4a:	781b      	ldrb	r3, [r3, #0]
 8021c4c:	2b01      	cmp	r3, #1
 8021c4e:	d018      	beq.n	8021c82 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8021c50:	d323      	bcc.n	8021c9a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 8021c52:	2b02      	cmp	r3, #2
 8021c54:	d1ee      	bne.n	8021c34 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8021c56:	6880      	ldr	r0, [r0, #8]
 8021c58:	4770      	bx	lr
 8021c5a:	2a31      	cmp	r2, #49	; 0x31
 8021c5c:	d004      	beq.n	8021c68 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 8021c5e:	d328      	bcc.n	8021cb2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8021c60:	2a32      	cmp	r2, #50	; 0x32
 8021c62:	d026      	beq.n	8021cb2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8021c64:	2a33      	cmp	r2, #51	; 0x33
 8021c66:	d1e5      	bne.n	8021c34 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8021c68:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8021c6a:	4770      	bx	lr
 8021c6c:	684b      	ldr	r3, [r1, #4]
 8021c6e:	781b      	ldrb	r3, [r3, #0]
 8021c70:	2b01      	cmp	r3, #1
 8021c72:	d004      	beq.n	8021c7e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8021c74:	d30b      	bcc.n	8021c8e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8021c76:	2b02      	cmp	r3, #2
 8021c78:	d1dc      	bne.n	8021c34 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8021c7a:	6900      	ldr	r0, [r0, #16]
 8021c7c:	4770      	bx	lr
 8021c7e:	6a00      	ldr	r0, [r0, #32]
 8021c80:	4770      	bx	lr
 8021c82:	6980      	ldr	r0, [r0, #24]
 8021c84:	4770      	bx	lr
 8021c86:	684b      	ldr	r3, [r1, #4]
 8021c88:	781b      	ldrb	r3, [r3, #0]
 8021c8a:	2b00      	cmp	r3, #0
 8021c8c:	d1d2      	bne.n	8021c34 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8021c8e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8021c90:	4770      	bx	lr
 8021c92:	684b      	ldr	r3, [r1, #4]
 8021c94:	781b      	ldrb	r3, [r3, #0]
 8021c96:	2b00      	cmp	r3, #0
 8021c98:	d1cc      	bne.n	8021c34 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8021c9a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8021c9c:	4770      	bx	lr
 8021c9e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8021ca0:	4770      	bx	lr
 8021ca2:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8021ca4:	4770      	bx	lr
 8021ca6:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8021ca8:	4770      	bx	lr
 8021caa:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8021cac:	4770      	bx	lr
 8021cae:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8021cb0:	4770      	bx	lr
 8021cb2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8021cb4:	4770      	bx	lr
 8021cb6:	2a0b      	cmp	r2, #11
 8021cb8:	d049      	beq.n	8021d4e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8021cba:	d80e      	bhi.n	8021cda <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 8021cbc:	2a03      	cmp	r2, #3
 8021cbe:	d040      	beq.n	8021d42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8021cc0:	d804      	bhi.n	8021ccc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 8021cc2:	2a01      	cmp	r2, #1
 8021cc4:	d03f      	beq.n	8021d46 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8021cc6:	d940      	bls.n	8021d4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8021cc8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8021cca:	4770      	bx	lr
 8021ccc:	2a09      	cmp	r2, #9
 8021cce:	d03e      	beq.n	8021d4e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8021cd0:	d801      	bhi.n	8021cd6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 8021cd2:	2a08      	cmp	r2, #8
 8021cd4:	d1ae      	bne.n	8021c34 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8021cd6:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8021cd8:	4770      	bx	lr
 8021cda:	2a2f      	cmp	r2, #47	; 0x2f
 8021cdc:	d024      	beq.n	8021d28 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 8021cde:	d80d      	bhi.n	8021cfc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8021ce0:	2a2d      	cmp	r2, #45	; 0x2d
 8021ce2:	d014      	beq.n	8021d0e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 8021ce4:	d826      	bhi.n	8021d34 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 8021ce6:	2a2c      	cmp	r2, #44	; 0x2c
 8021ce8:	d1a4      	bne.n	8021c34 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8021cea:	684b      	ldr	r3, [r1, #4]
 8021cec:	781b      	ldrb	r3, [r3, #0]
 8021cee:	2b01      	cmp	r3, #1
 8021cf0:	d018      	beq.n	8021d24 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 8021cf2:	d324      	bcc.n	8021d3e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8021cf4:	2b02      	cmp	r3, #2
 8021cf6:	d19d      	bne.n	8021c34 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8021cf8:	68c0      	ldr	r0, [r0, #12]
 8021cfa:	4770      	bx	lr
 8021cfc:	2a31      	cmp	r2, #49	; 0x31
 8021cfe:	d004      	beq.n	8021d0a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 8021d00:	d327      	bcc.n	8021d52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8021d02:	2a32      	cmp	r2, #50	; 0x32
 8021d04:	d025      	beq.n	8021d52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8021d06:	2a33      	cmp	r2, #51	; 0x33
 8021d08:	d194      	bne.n	8021c34 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8021d0a:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8021d0c:	4770      	bx	lr
 8021d0e:	684b      	ldr	r3, [r1, #4]
 8021d10:	781b      	ldrb	r3, [r3, #0]
 8021d12:	2b01      	cmp	r3, #1
 8021d14:	d004      	beq.n	8021d20 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 8021d16:	d30b      	bcc.n	8021d30 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 8021d18:	2b02      	cmp	r3, #2
 8021d1a:	d18b      	bne.n	8021c34 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8021d1c:	6940      	ldr	r0, [r0, #20]
 8021d1e:	4770      	bx	lr
 8021d20:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8021d22:	4770      	bx	lr
 8021d24:	69c0      	ldr	r0, [r0, #28]
 8021d26:	4770      	bx	lr
 8021d28:	684b      	ldr	r3, [r1, #4]
 8021d2a:	781b      	ldrb	r3, [r3, #0]
 8021d2c:	2b00      	cmp	r3, #0
 8021d2e:	d181      	bne.n	8021c34 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8021d30:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8021d32:	4770      	bx	lr
 8021d34:	684b      	ldr	r3, [r1, #4]
 8021d36:	781b      	ldrb	r3, [r3, #0]
 8021d38:	2b00      	cmp	r3, #0
 8021d3a:	f47f af7b 	bne.w	8021c34 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8021d3e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8021d40:	4770      	bx	lr
 8021d42:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8021d44:	4770      	bx	lr
 8021d46:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8021d48:	4770      	bx	lr
 8021d4a:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8021d4c:	4770      	bx	lr
 8021d4e:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8021d50:	4770      	bx	lr
 8021d52:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8021d54:	4770      	bx	lr

08021d56 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021d56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d5a:	b087      	sub	sp, #28
 8021d5c:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8021d5e:	9205      	str	r2, [sp, #20]
 8021d60:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8021d64:	9202      	str	r2, [sp, #8]
 8021d66:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8021d6a:	9101      	str	r1, [sp, #4]
 8021d6c:	6871      	ldr	r1, [r6, #4]
 8021d6e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8021d70:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
 8021d74:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 8021d78:	fb01 2505 	mla	r5, r1, r5, r2
 8021d7c:	6832      	ldr	r2, [r6, #0]
 8021d7e:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8021d82:	6802      	ldr	r2, [r0, #0]
 8021d84:	9203      	str	r2, [sp, #12]
 8021d86:	6842      	ldr	r2, [r0, #4]
 8021d88:	fa1f fe84 	uxth.w	lr, r4
 8021d8c:	3204      	adds	r2, #4
 8021d8e:	43e4      	mvns	r4, r4
 8021d90:	9204      	str	r2, [sp, #16]
 8021d92:	b2e4      	uxtb	r4, r4
 8021d94:	9a01      	ldr	r2, [sp, #4]
 8021d96:	2a00      	cmp	r2, #0
 8021d98:	dc03      	bgt.n	8021da2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 8021d9a:	9a05      	ldr	r2, [sp, #20]
 8021d9c:	2a00      	cmp	r2, #0
 8021d9e:	f340 8119 	ble.w	8021fd4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 8021da2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021da4:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8021da8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021daa:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8021dae:	2b00      	cmp	r3, #0
 8021db0:	dd0f      	ble.n	8021dd2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 8021db2:	1408      	asrs	r0, r1, #16
 8021db4:	d406      	bmi.n	8021dc4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8021db6:	4540      	cmp	r0, r8
 8021db8:	da04      	bge.n	8021dc4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8021dba:	1410      	asrs	r0, r2, #16
 8021dbc:	d402      	bmi.n	8021dc4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8021dbe:	9e02      	ldr	r6, [sp, #8]
 8021dc0:	42b0      	cmp	r0, r6
 8021dc2:	db07      	blt.n	8021dd4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8021dc4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8021dc6:	4401      	add	r1, r0
 8021dc8:	9814      	ldr	r0, [sp, #80]	; 0x50
 8021dca:	3b01      	subs	r3, #1
 8021dcc:	4402      	add	r2, r0
 8021dce:	3502      	adds	r5, #2
 8021dd0:	e7ed      	b.n	8021dae <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 8021dd2:	d00f      	beq.n	8021df4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 8021dd4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8021dd6:	1e58      	subs	r0, r3, #1
 8021dd8:	fb06 1600 	mla	r6, r6, r0, r1
 8021ddc:	1436      	asrs	r6, r6, #16
 8021dde:	d547      	bpl.n	8021e70 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11a>
 8021de0:	469b      	mov	fp, r3
 8021de2:	46aa      	mov	sl, r5
 8021de4:	f1bb 0f00 	cmp.w	fp, #0
 8021de8:	f300 809e 	bgt.w	8021f28 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d2>
 8021dec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021df0:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8021df4:	9b01      	ldr	r3, [sp, #4]
 8021df6:	2b00      	cmp	r3, #0
 8021df8:	f340 80ec 	ble.w	8021fd4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 8021dfc:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021e00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021e04:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021e08:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021e0a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021e0e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021e12:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021e16:	eef0 6a62 	vmov.f32	s13, s5
 8021e1a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021e1e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021e22:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021e26:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8021e2a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021e2e:	eef0 6a43 	vmov.f32	s13, s6
 8021e32:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021e36:	ee12 2a90 	vmov	r2, s5
 8021e3a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021e3e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021e42:	ee13 2a10 	vmov	r2, s6
 8021e46:	9313      	str	r3, [sp, #76]	; 0x4c
 8021e48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021e4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8021e4e:	9314      	str	r3, [sp, #80]	; 0x50
 8021e50:	9b01      	ldr	r3, [sp, #4]
 8021e52:	9a05      	ldr	r2, [sp, #20]
 8021e54:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021e58:	3b01      	subs	r3, #1
 8021e5a:	9301      	str	r3, [sp, #4]
 8021e5c:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8021e60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021e62:	eeb0 3a67 	vmov.f32	s6, s15
 8021e66:	bf08      	it	eq
 8021e68:	4613      	moveq	r3, r2
 8021e6a:	eef0 2a47 	vmov.f32	s5, s14
 8021e6e:	e791      	b.n	8021d94 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 8021e70:	4546      	cmp	r6, r8
 8021e72:	dab5      	bge.n	8021de0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8021e74:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8021e76:	fb06 2000 	mla	r0, r6, r0, r2
 8021e7a:	1400      	asrs	r0, r0, #16
 8021e7c:	d4b0      	bmi.n	8021de0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8021e7e:	9e02      	ldr	r6, [sp, #8]
 8021e80:	42b0      	cmp	r0, r6
 8021e82:	daad      	bge.n	8021de0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8021e84:	469a      	mov	sl, r3
 8021e86:	46ab      	mov	fp, r5
 8021e88:	f1ba 0f00 	cmp.w	sl, #0
 8021e8c:	ddae      	ble.n	8021dec <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8021e8e:	9f03      	ldr	r7, [sp, #12]
 8021e90:	1410      	asrs	r0, r2, #16
 8021e92:	140e      	asrs	r6, r1, #16
 8021e94:	fb08 7000 	mla	r0, r8, r0, r7
 8021e98:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021e9c:	5d80      	ldrb	r0, [r0, r6]
 8021e9e:	9e04      	ldr	r6, [sp, #16]
 8021ea0:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
 8021ea4:	f8bb 6000 	ldrh.w	r6, [fp]
 8021ea8:	1237      	asrs	r7, r6, #8
 8021eaa:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8021eae:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8021eb2:	fb17 f704 	smulbb	r7, r7, r4
 8021eb6:	ea4f 09e6 	mov.w	r9, r6, asr #3
 8021eba:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021ebe:	00f6      	lsls	r6, r6, #3
 8021ec0:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8021ec4:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8021ec8:	10c7      	asrs	r7, r0, #3
 8021eca:	b2f6      	uxtb	r6, r6
 8021ecc:	00c0      	lsls	r0, r0, #3
 8021ece:	fb19 f904 	smulbb	r9, r9, r4
 8021ed2:	fb16 f604 	smulbb	r6, r6, r4
 8021ed6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8021eda:	b2c0      	uxtb	r0, r0
 8021edc:	fa1f fc8c 	uxth.w	ip, ip
 8021ee0:	fb07 970e 	mla	r7, r7, lr, r9
 8021ee4:	fb00 600e 	mla	r0, r0, lr, r6
 8021ee8:	b280      	uxth	r0, r0
 8021eea:	b2bf      	uxth	r7, r7
 8021eec:	f10c 0601 	add.w	r6, ip, #1
 8021ef0:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8021ef4:	f107 0901 	add.w	r9, r7, #1
 8021ef8:	1c46      	adds	r6, r0, #1
 8021efa:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 8021efe:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8021f02:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8021f04:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8021f08:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8021f0c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8021f10:	ea4c 0c06 	orr.w	ip, ip, r6
 8021f14:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021f18:	4401      	add	r1, r0
 8021f1a:	9814      	ldr	r0, [sp, #80]	; 0x50
 8021f1c:	ea4c 0c09 	orr.w	ip, ip, r9
 8021f20:	f82b cb02 	strh.w	ip, [fp], #2
 8021f24:	4402      	add	r2, r0
 8021f26:	e7af      	b.n	8021e88 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 8021f28:	140e      	asrs	r6, r1, #16
 8021f2a:	d44a      	bmi.n	8021fc2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 8021f2c:	4546      	cmp	r6, r8
 8021f2e:	da48      	bge.n	8021fc2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 8021f30:	1410      	asrs	r0, r2, #16
 8021f32:	d446      	bmi.n	8021fc2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 8021f34:	9f02      	ldr	r7, [sp, #8]
 8021f36:	42b8      	cmp	r0, r7
 8021f38:	da43      	bge.n	8021fc2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 8021f3a:	9f03      	ldr	r7, [sp, #12]
 8021f3c:	fb08 7000 	mla	r0, r8, r0, r7
 8021f40:	5d80      	ldrb	r0, [r0, r6]
 8021f42:	9e04      	ldr	r6, [sp, #16]
 8021f44:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
 8021f48:	f8ba 6000 	ldrh.w	r6, [sl]
 8021f4c:	1237      	asrs	r7, r6, #8
 8021f4e:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8021f52:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8021f56:	fb17 f704 	smulbb	r7, r7, r4
 8021f5a:	ea4f 09e6 	mov.w	r9, r6, asr #3
 8021f5e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021f62:	00f6      	lsls	r6, r6, #3
 8021f64:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8021f68:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8021f6c:	10c7      	asrs	r7, r0, #3
 8021f6e:	b2f6      	uxtb	r6, r6
 8021f70:	00c0      	lsls	r0, r0, #3
 8021f72:	fb19 f904 	smulbb	r9, r9, r4
 8021f76:	fb16 f604 	smulbb	r6, r6, r4
 8021f7a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8021f7e:	b2c0      	uxtb	r0, r0
 8021f80:	fa1f fc8c 	uxth.w	ip, ip
 8021f84:	fb07 970e 	mla	r7, r7, lr, r9
 8021f88:	fb00 600e 	mla	r0, r0, lr, r6
 8021f8c:	b2bf      	uxth	r7, r7
 8021f8e:	b280      	uxth	r0, r0
 8021f90:	f10c 0601 	add.w	r6, ip, #1
 8021f94:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8021f98:	f107 0901 	add.w	r9, r7, #1
 8021f9c:	1c46      	adds	r6, r0, #1
 8021f9e:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 8021fa2:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8021fa6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8021faa:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8021fae:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8021fb2:	ea4c 0c06 	orr.w	ip, ip, r6
 8021fb6:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021fba:	ea4c 0c09 	orr.w	ip, ip, r9
 8021fbe:	f8aa c000 	strh.w	ip, [sl]
 8021fc2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8021fc4:	4401      	add	r1, r0
 8021fc6:	9814      	ldr	r0, [sp, #80]	; 0x50
 8021fc8:	f10a 0a02 	add.w	sl, sl, #2
 8021fcc:	4402      	add	r2, r0
 8021fce:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021fd2:	e707      	b.n	8021de4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 8021fd4:	b007      	add	sp, #28
 8021fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021fda <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021fda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021fde:	b085      	sub	sp, #20
 8021fe0:	e9dd 7611 	ldrd	r7, r6, [sp, #68]	; 0x44
 8021fe4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8021fe6:	9203      	str	r2, [sp, #12]
 8021fe8:	6842      	ldr	r2, [r0, #4]
 8021fea:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8021fec:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8021fee:	6800      	ldr	r0, [r0, #0]
 8021ff0:	f9bd c058 	ldrsh.w	ip, [sp, #88]	; 0x58
 8021ff4:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 8021ff8:	4696      	mov	lr, r2
 8021ffa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021ffc:	fb0e 2505 	mla	r5, lr, r5, r2
 8022000:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8022004:	6860      	ldr	r0, [r4, #4]
 8022006:	6822      	ldr	r2, [r4, #0]
 8022008:	9201      	str	r2, [sp, #4]
 802200a:	1d02      	adds	r2, r0, #4
 802200c:	9202      	str	r2, [sp, #8]
 802200e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022012:	2900      	cmp	r1, #0
 8022014:	dc03      	bgt.n	802201e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 8022016:	9a03      	ldr	r2, [sp, #12]
 8022018:	2a00      	cmp	r2, #0
 802201a:	f340 809b 	ble.w	8022154 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x17a>
 802201e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022020:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8022024:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022026:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 802202a:	2b00      	cmp	r3, #0
 802202c:	dd0e      	ble.n	802204c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 802202e:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8022032:	d406      	bmi.n	8022042 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8022034:	45e6      	cmp	lr, ip
 8022036:	da04      	bge.n	8022042 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8022038:	ea5f 4e20 	movs.w	lr, r0, asr #16
 802203c:	d401      	bmi.n	8022042 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 802203e:	45c6      	cmp	lr, r8
 8022040:	db05      	blt.n	802204e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8022042:	443c      	add	r4, r7
 8022044:	4430      	add	r0, r6
 8022046:	3b01      	subs	r3, #1
 8022048:	3502      	adds	r5, #2
 802204a:	e7ee      	b.n	802202a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 802204c:	d010      	beq.n	8022070 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 802204e:	f103 3eff 	add.w	lr, r3, #4294967295
 8022052:	fb07 490e 	mla	r9, r7, lr, r4
 8022056:	ea5f 4929 	movs.w	r9, r9, asr #16
 802205a:	d53d      	bpl.n	80220d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 802205c:	469e      	mov	lr, r3
 802205e:	eb05 0b43 	add.w	fp, r5, r3, lsl #1
 8022062:	f1be 0f00 	cmp.w	lr, #0
 8022066:	dc58      	bgt.n	802211a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 8022068:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802206c:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8022070:	2900      	cmp	r1, #0
 8022072:	dd6f      	ble.n	8022154 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x17a>
 8022074:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022078:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802207c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022080:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022082:	3901      	subs	r1, #1
 8022084:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022088:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802208c:	eeb0 6a62 	vmov.f32	s12, s5
 8022090:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022094:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022098:	ee77 2a62 	vsub.f32	s5, s14, s5
 802209c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80220a0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80220a4:	eeb0 6a43 	vmov.f32	s12, s6
 80220a8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80220ac:	ee12 2a90 	vmov	r2, s5
 80220b0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80220b4:	fb92 f7f3 	sdiv	r7, r2, r3
 80220b8:	ee13 2a10 	vmov	r2, s6
 80220bc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80220c0:	fb92 f6f3 	sdiv	r6, r2, r3
 80220c4:	9a03      	ldr	r2, [sp, #12]
 80220c6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80220ca:	bf08      	it	eq
 80220cc:	4613      	moveq	r3, r2
 80220ce:	eeb0 3a67 	vmov.f32	s6, s15
 80220d2:	eef0 2a47 	vmov.f32	s5, s14
 80220d6:	e79c      	b.n	8022012 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 80220d8:	45e1      	cmp	r9, ip
 80220da:	dabf      	bge.n	802205c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x82>
 80220dc:	fb06 0e0e 	mla	lr, r6, lr, r0
 80220e0:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 80220e4:	d4ba      	bmi.n	802205c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x82>
 80220e6:	45c6      	cmp	lr, r8
 80220e8:	dab8      	bge.n	802205c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x82>
 80220ea:	469e      	mov	lr, r3
 80220ec:	46aa      	mov	sl, r5
 80220ee:	f1be 0f00 	cmp.w	lr, #0
 80220f2:	ddb9      	ble.n	8022068 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 80220f4:	9a01      	ldr	r2, [sp, #4]
 80220f6:	ea4f 4920 	mov.w	r9, r0, asr #16
 80220fa:	ea4f 4b24 	mov.w	fp, r4, asr #16
 80220fe:	fb0c 2909 	mla	r9, ip, r9, r2
 8022102:	9a02      	ldr	r2, [sp, #8]
 8022104:	f819 900b 	ldrb.w	r9, [r9, fp]
 8022108:	f832 9019 	ldrh.w	r9, [r2, r9, lsl #1]
 802210c:	f82a 9b02 	strh.w	r9, [sl], #2
 8022110:	443c      	add	r4, r7
 8022112:	4430      	add	r0, r6
 8022114:	f10e 3eff 	add.w	lr, lr, #4294967295
 8022118:	e7e9      	b.n	80220ee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 802211a:	ea5f 4a24 	movs.w	sl, r4, asr #16
 802211e:	d414      	bmi.n	802214a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x170>
 8022120:	45e2      	cmp	sl, ip
 8022122:	da12      	bge.n	802214a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x170>
 8022124:	ea5f 4920 	movs.w	r9, r0, asr #16
 8022128:	d40f      	bmi.n	802214a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x170>
 802212a:	45c1      	cmp	r9, r8
 802212c:	da0d      	bge.n	802214a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x170>
 802212e:	9a01      	ldr	r2, [sp, #4]
 8022130:	fb0c 2909 	mla	r9, ip, r9, r2
 8022134:	9a02      	ldr	r2, [sp, #8]
 8022136:	f819 900a 	ldrb.w	r9, [r9, sl]
 802213a:	f832 a019 	ldrh.w	sl, [r2, r9, lsl #1]
 802213e:	f06f 0201 	mvn.w	r2, #1
 8022142:	fb02 f90e 	mul.w	r9, r2, lr
 8022146:	f82b a009 	strh.w	sl, [fp, r9]
 802214a:	443c      	add	r4, r7
 802214c:	4430      	add	r0, r6
 802214e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8022152:	e786      	b.n	8022062 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8022154:	b005      	add	sp, #20
 8022156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802215a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802215a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802215e:	b087      	sub	sp, #28
 8022160:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8022162:	9205      	str	r2, [sp, #20]
 8022164:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8022168:	9202      	str	r2, [sp, #8]
 802216a:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 802216e:	9101      	str	r1, [sp, #4]
 8022170:	6871      	ldr	r1, [r6, #4]
 8022172:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8022174:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
 8022178:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 802217c:	fb01 2404 	mla	r4, r1, r4, r2
 8022180:	6832      	ldr	r2, [r6, #0]
 8022182:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8022186:	682a      	ldr	r2, [r5, #0]
 8022188:	9203      	str	r2, [sp, #12]
 802218a:	686a      	ldr	r2, [r5, #4]
 802218c:	fa1f fc80 	uxth.w	ip, r0
 8022190:	3204      	adds	r2, #4
 8022192:	43c0      	mvns	r0, r0
 8022194:	9200      	str	r2, [sp, #0]
 8022196:	b2c0      	uxtb	r0, r0
 8022198:	9a01      	ldr	r2, [sp, #4]
 802219a:	2a00      	cmp	r2, #0
 802219c:	dc03      	bgt.n	80221a6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 802219e:	9a05      	ldr	r2, [sp, #20]
 80221a0:	2a00      	cmp	r2, #0
 80221a2:	f340 811b 	ble.w	80223dc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80221a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80221a8:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80221ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80221ae:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80221b2:	2b00      	cmp	r3, #0
 80221b4:	dd0f      	ble.n	80221d6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 80221b6:	140d      	asrs	r5, r1, #16
 80221b8:	d406      	bmi.n	80221c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 80221ba:	4575      	cmp	r5, lr
 80221bc:	da04      	bge.n	80221c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 80221be:	1415      	asrs	r5, r2, #16
 80221c0:	d402      	bmi.n	80221c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 80221c2:	9e02      	ldr	r6, [sp, #8]
 80221c4:	42b5      	cmp	r5, r6
 80221c6:	db07      	blt.n	80221d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 80221c8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80221ca:	4429      	add	r1, r5
 80221cc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80221ce:	3b01      	subs	r3, #1
 80221d0:	442a      	add	r2, r5
 80221d2:	3402      	adds	r4, #2
 80221d4:	e7ed      	b.n	80221b2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 80221d6:	d00f      	beq.n	80221f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 80221d8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80221da:	1e5d      	subs	r5, r3, #1
 80221dc:	fb06 1605 	mla	r6, r6, r5, r1
 80221e0:	1436      	asrs	r6, r6, #16
 80221e2:	d547      	bpl.n	8022274 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11a>
 80221e4:	469a      	mov	sl, r3
 80221e6:	46a1      	mov	r9, r4
 80221e8:	f1ba 0f00 	cmp.w	sl, #0
 80221ec:	f300 809f 	bgt.w	802232e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 80221f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80221f4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80221f8:	9b01      	ldr	r3, [sp, #4]
 80221fa:	2b00      	cmp	r3, #0
 80221fc:	f340 80ee 	ble.w	80223dc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8022200:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022204:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022208:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802220c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802220e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022212:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022216:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802221a:	eef0 6a62 	vmov.f32	s13, s5
 802221e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022222:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022226:	ee77 2a62 	vsub.f32	s5, s14, s5
 802222a:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 802222e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022232:	eef0 6a43 	vmov.f32	s13, s6
 8022236:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802223a:	ee12 2a90 	vmov	r2, s5
 802223e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022242:	fb92 f3f3 	sdiv	r3, r2, r3
 8022246:	ee13 2a10 	vmov	r2, s6
 802224a:	9313      	str	r3, [sp, #76]	; 0x4c
 802224c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802224e:	fb92 f3f3 	sdiv	r3, r2, r3
 8022252:	9314      	str	r3, [sp, #80]	; 0x50
 8022254:	9b01      	ldr	r3, [sp, #4]
 8022256:	9a05      	ldr	r2, [sp, #20]
 8022258:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802225c:	3b01      	subs	r3, #1
 802225e:	9301      	str	r3, [sp, #4]
 8022260:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8022264:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022266:	eeb0 3a67 	vmov.f32	s6, s15
 802226a:	bf08      	it	eq
 802226c:	4613      	moveq	r3, r2
 802226e:	eef0 2a47 	vmov.f32	s5, s14
 8022272:	e791      	b.n	8022198 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 8022274:	4576      	cmp	r6, lr
 8022276:	dab5      	bge.n	80221e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8022278:	9e14      	ldr	r6, [sp, #80]	; 0x50
 802227a:	fb06 2505 	mla	r5, r6, r5, r2
 802227e:	142d      	asrs	r5, r5, #16
 8022280:	d4b0      	bmi.n	80221e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8022282:	9e02      	ldr	r6, [sp, #8]
 8022284:	42b5      	cmp	r5, r6
 8022286:	daad      	bge.n	80221e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8022288:	4699      	mov	r9, r3
 802228a:	46a2      	mov	sl, r4
 802228c:	f1b9 0f00 	cmp.w	r9, #0
 8022290:	ddae      	ble.n	80221f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8022292:	9f03      	ldr	r7, [sp, #12]
 8022294:	1415      	asrs	r5, r2, #16
 8022296:	140e      	asrs	r6, r1, #16
 8022298:	fb0e 7505 	mla	r5, lr, r5, r7
 802229c:	f109 39ff 	add.w	r9, r9, #4294967295
 80222a0:	f815 8006 	ldrb.w	r8, [r5, r6]
 80222a4:	9d00      	ldr	r5, [sp, #0]
 80222a6:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80222aa:	eb05 0b08 	add.w	fp, r5, r8
 80222ae:	f8ba 5000 	ldrh.w	r5, [sl]
 80222b2:	f89b 6002 	ldrb.w	r6, [fp, #2]
 80222b6:	f89b b001 	ldrb.w	fp, [fp, #1]
 80222ba:	122f      	asrs	r7, r5, #8
 80222bc:	fb16 f60c 	smulbb	r6, r6, ip
 80222c0:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80222c4:	fb07 6700 	mla	r7, r7, r0, r6
 80222c8:	10ee      	asrs	r6, r5, #3
 80222ca:	fb1b fb0c 	smulbb	fp, fp, ip
 80222ce:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80222d2:	fb06 b600 	mla	r6, r6, r0, fp
 80222d6:	b2b6      	uxth	r6, r6
 80222d8:	9604      	str	r6, [sp, #16]
 80222da:	9e00      	ldr	r6, [sp, #0]
 80222dc:	00ed      	lsls	r5, r5, #3
 80222de:	f816 8008 	ldrb.w	r8, [r6, r8]
 80222e2:	b2ed      	uxtb	r5, r5
 80222e4:	fb15 f500 	smulbb	r5, r5, r0
 80222e8:	b2bf      	uxth	r7, r7
 80222ea:	fb08 580c 	mla	r8, r8, ip, r5
 80222ee:	fa1f f888 	uxth.w	r8, r8
 80222f2:	1c7d      	adds	r5, r7, #1
 80222f4:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 80222f8:	f108 0501 	add.w	r5, r8, #1
 80222fc:	eb05 2518 	add.w	r5, r5, r8, lsr #8
 8022300:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8022304:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8022308:	432f      	orrs	r7, r5
 802230a:	9d04      	ldr	r5, [sp, #16]
 802230c:	f105 0b01 	add.w	fp, r5, #1
 8022310:	eb0b 2b15 	add.w	fp, fp, r5, lsr #8
 8022314:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8022316:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 802231a:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 802231e:	4429      	add	r1, r5
 8022320:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8022322:	ea47 070b 	orr.w	r7, r7, fp
 8022326:	f82a 7b02 	strh.w	r7, [sl], #2
 802232a:	442a      	add	r2, r5
 802232c:	e7ae      	b.n	802228c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 802232e:	140e      	asrs	r6, r1, #16
 8022330:	d44b      	bmi.n	80223ca <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 8022332:	4576      	cmp	r6, lr
 8022334:	da49      	bge.n	80223ca <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 8022336:	1415      	asrs	r5, r2, #16
 8022338:	d447      	bmi.n	80223ca <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 802233a:	9f02      	ldr	r7, [sp, #8]
 802233c:	42bd      	cmp	r5, r7
 802233e:	da44      	bge.n	80223ca <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 8022340:	9f03      	ldr	r7, [sp, #12]
 8022342:	fb0e 7505 	mla	r5, lr, r5, r7
 8022346:	f815 8006 	ldrb.w	r8, [r5, r6]
 802234a:	9d00      	ldr	r5, [sp, #0]
 802234c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8022350:	eb05 0b08 	add.w	fp, r5, r8
 8022354:	f8b9 5000 	ldrh.w	r5, [r9]
 8022358:	f89b 6002 	ldrb.w	r6, [fp, #2]
 802235c:	f89b b001 	ldrb.w	fp, [fp, #1]
 8022360:	122f      	asrs	r7, r5, #8
 8022362:	fb16 f60c 	smulbb	r6, r6, ip
 8022366:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802236a:	fb07 6700 	mla	r7, r7, r0, r6
 802236e:	10ee      	asrs	r6, r5, #3
 8022370:	fb1b fb0c 	smulbb	fp, fp, ip
 8022374:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8022378:	fb06 b600 	mla	r6, r6, r0, fp
 802237c:	b2b6      	uxth	r6, r6
 802237e:	9604      	str	r6, [sp, #16]
 8022380:	9e00      	ldr	r6, [sp, #0]
 8022382:	00ed      	lsls	r5, r5, #3
 8022384:	f816 8008 	ldrb.w	r8, [r6, r8]
 8022388:	b2ed      	uxtb	r5, r5
 802238a:	fb15 f500 	smulbb	r5, r5, r0
 802238e:	b2bf      	uxth	r7, r7
 8022390:	fb08 580c 	mla	r8, r8, ip, r5
 8022394:	fa1f f888 	uxth.w	r8, r8
 8022398:	1c7d      	adds	r5, r7, #1
 802239a:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 802239e:	f108 0501 	add.w	r5, r8, #1
 80223a2:	eb05 2518 	add.w	r5, r5, r8, lsr #8
 80223a6:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80223aa:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80223ae:	432f      	orrs	r7, r5
 80223b0:	9d04      	ldr	r5, [sp, #16]
 80223b2:	f105 0b01 	add.w	fp, r5, #1
 80223b6:	eb0b 2b15 	add.w	fp, fp, r5, lsr #8
 80223ba:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80223be:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80223c2:	ea47 070b 	orr.w	r7, r7, fp
 80223c6:	f8a9 7000 	strh.w	r7, [r9]
 80223ca:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80223cc:	4429      	add	r1, r5
 80223ce:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80223d0:	f109 0902 	add.w	r9, r9, #2
 80223d4:	442a      	add	r2, r5
 80223d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80223da:	e705      	b.n	80221e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 80223dc:	b007      	add	sp, #28
 80223de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080223e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80223e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80223e8:	b085      	sub	sp, #20
 80223ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80223ee:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80223f0:	9203      	str	r2, [sp, #12]
 80223f2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80223f6:	6870      	ldr	r0, [r6, #4]
 80223f8:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80223fa:	f9bd 7058 	ldrsh.w	r7, [sp, #88]	; 0x58
 80223fe:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 8022402:	9101      	str	r1, [sp, #4]
 8022404:	fb00 2404 	mla	r4, r0, r4, r2
 8022408:	6832      	ldr	r2, [r6, #0]
 802240a:	686e      	ldr	r6, [r5, #4]
 802240c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8022410:	682a      	ldr	r2, [r5, #0]
 8022412:	9202      	str	r2, [sp, #8]
 8022414:	3604      	adds	r6, #4
 8022416:	9a01      	ldr	r2, [sp, #4]
 8022418:	2a00      	cmp	r2, #0
 802241a:	dc03      	bgt.n	8022424 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 802241c:	9a03      	ldr	r2, [sp, #12]
 802241e:	2a00      	cmp	r2, #0
 8022420:	f340 80c7 	ble.w	80225b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ce>
 8022424:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022426:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 802242a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802242c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8022430:	2b00      	cmp	r3, #0
 8022432:	dd0e      	ble.n	8022452 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8022434:	1405      	asrs	r5, r0, #16
 8022436:	d405      	bmi.n	8022444 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8022438:	42bd      	cmp	r5, r7
 802243a:	da03      	bge.n	8022444 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 802243c:	1415      	asrs	r5, r2, #16
 802243e:	d401      	bmi.n	8022444 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8022440:	4545      	cmp	r5, r8
 8022442:	db07      	blt.n	8022454 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8022444:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8022446:	4428      	add	r0, r5
 8022448:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802244a:	3b01      	subs	r3, #1
 802244c:	442a      	add	r2, r5
 802244e:	3402      	adds	r4, #2
 8022450:	e7ee      	b.n	8022430 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 8022452:	d010      	beq.n	8022476 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8022454:	9911      	ldr	r1, [sp, #68]	; 0x44
 8022456:	1e5d      	subs	r5, r3, #1
 8022458:	fb01 0c05 	mla	ip, r1, r5, r0
 802245c:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 8022460:	d545      	bpl.n	80224ee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8022462:	469e      	mov	lr, r3
 8022464:	eb04 0b43 	add.w	fp, r4, r3, lsl #1
 8022468:	f1be 0f00 	cmp.w	lr, #0
 802246c:	dc72      	bgt.n	8022554 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x170>
 802246e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022472:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8022476:	9b01      	ldr	r3, [sp, #4]
 8022478:	2b00      	cmp	r3, #0
 802247a:	f340 809a 	ble.w	80225b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ce>
 802247e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022482:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022486:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802248a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802248c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022490:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022494:	eeb0 6a62 	vmov.f32	s12, s5
 8022498:	ee61 7a27 	vmul.f32	s15, s2, s15
 802249c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80224a0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80224a4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80224a8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80224ac:	eeb0 6a43 	vmov.f32	s12, s6
 80224b0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80224b4:	ee12 2a90 	vmov	r2, s5
 80224b8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80224bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80224c0:	ee13 2a10 	vmov	r2, s6
 80224c4:	9311      	str	r3, [sp, #68]	; 0x44
 80224c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80224c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80224cc:	9312      	str	r3, [sp, #72]	; 0x48
 80224ce:	9b01      	ldr	r3, [sp, #4]
 80224d0:	9a03      	ldr	r2, [sp, #12]
 80224d2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80224d6:	3b01      	subs	r3, #1
 80224d8:	9301      	str	r3, [sp, #4]
 80224da:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80224de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80224e0:	eeb0 3a67 	vmov.f32	s6, s15
 80224e4:	bf08      	it	eq
 80224e6:	4613      	moveq	r3, r2
 80224e8:	eef0 2a47 	vmov.f32	s5, s14
 80224ec:	e793      	b.n	8022416 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32>
 80224ee:	45bc      	cmp	ip, r7
 80224f0:	dab7      	bge.n	8022462 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 80224f2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80224f4:	fb01 2505 	mla	r5, r1, r5, r2
 80224f8:	142d      	asrs	r5, r5, #16
 80224fa:	d4b2      	bmi.n	8022462 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 80224fc:	4545      	cmp	r5, r8
 80224fe:	dab0      	bge.n	8022462 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8022500:	469e      	mov	lr, r3
 8022502:	46a2      	mov	sl, r4
 8022504:	f1be 0f00 	cmp.w	lr, #0
 8022508:	ddb1      	ble.n	802246e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 802250a:	9902      	ldr	r1, [sp, #8]
 802250c:	1415      	asrs	r5, r2, #16
 802250e:	fb07 1505 	mla	r5, r7, r5, r1
 8022512:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8022516:	4928      	ldr	r1, [pc, #160]	; (80225b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>)
 8022518:	f815 c00c 	ldrb.w	ip, [r5, ip]
 802251c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8022520:	eb06 0b0c 	add.w	fp, r6, ip
 8022524:	f10e 3eff 	add.w	lr, lr, #4294967295
 8022528:	f89b 5001 	ldrb.w	r5, [fp, #1]
 802252c:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8022530:	00ed      	lsls	r5, r5, #3
 8022532:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 8022536:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802253a:	9911      	ldr	r1, [sp, #68]	; 0x44
 802253c:	ea49 0505 	orr.w	r5, r9, r5
 8022540:	f816 900c 	ldrb.w	r9, [r6, ip]
 8022544:	4408      	add	r0, r1
 8022546:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022548:	ea45 05d9 	orr.w	r5, r5, r9, lsr #3
 802254c:	f82a 5b02 	strh.w	r5, [sl], #2
 8022550:	440a      	add	r2, r1
 8022552:	e7d7      	b.n	8022504 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x120>
 8022554:	ea5f 4c20 	movs.w	ip, r0, asr #16
 8022558:	d424      	bmi.n	80225a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 802255a:	45bc      	cmp	ip, r7
 802255c:	da22      	bge.n	80225a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 802255e:	1415      	asrs	r5, r2, #16
 8022560:	d420      	bmi.n	80225a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 8022562:	4545      	cmp	r5, r8
 8022564:	da1e      	bge.n	80225a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 8022566:	9902      	ldr	r1, [sp, #8]
 8022568:	fb07 1505 	mla	r5, r7, r5, r1
 802256c:	f06f 0101 	mvn.w	r1, #1
 8022570:	f815 c00c 	ldrb.w	ip, [r5, ip]
 8022574:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8022578:	eb06 050c 	add.w	r5, r6, ip
 802257c:	fb01 f90e 	mul.w	r9, r1, lr
 8022580:	f895 a002 	ldrb.w	sl, [r5, #2]
 8022584:	786d      	ldrb	r5, [r5, #1]
 8022586:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 802258a:	00ed      	lsls	r5, r5, #3
 802258c:	ea01 2a0a 	and.w	sl, r1, sl, lsl #8
 8022590:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022594:	ea4a 0505 	orr.w	r5, sl, r5
 8022598:	f816 a00c 	ldrb.w	sl, [r6, ip]
 802259c:	ea45 05da 	orr.w	r5, r5, sl, lsr #3
 80225a0:	f82b 5009 	strh.w	r5, [fp, r9]
 80225a4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80225a6:	4408      	add	r0, r1
 80225a8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80225aa:	f10e 3eff 	add.w	lr, lr, #4294967295
 80225ae:	440a      	add	r2, r1
 80225b0:	e75a      	b.n	8022468 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x84>
 80225b2:	b005      	add	sp, #20
 80225b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80225b8:	fffff800 	.word	0xfffff800

080225bc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80225bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80225c0:	b087      	sub	sp, #28
 80225c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80225c6:	9204      	str	r2, [sp, #16]
 80225c8:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 80225cc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80225ce:	9201      	str	r2, [sp, #4]
 80225d0:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 80225d4:	9205      	str	r2, [sp, #20]
 80225d6:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80225da:	9100      	str	r1, [sp, #0]
 80225dc:	6869      	ldr	r1, [r5, #4]
 80225de:	981a      	ldr	r0, [sp, #104]	; 0x68
 80225e0:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 80225e4:	fb01 2404 	mla	r4, r1, r4, r2
 80225e8:	682a      	ldr	r2, [r5, #0]
 80225ea:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80225ee:	6802      	ldr	r2, [r0, #0]
 80225f0:	9202      	str	r2, [sp, #8]
 80225f2:	6842      	ldr	r2, [r0, #4]
 80225f4:	3204      	adds	r2, #4
 80225f6:	9203      	str	r2, [sp, #12]
 80225f8:	9a00      	ldr	r2, [sp, #0]
 80225fa:	2a00      	cmp	r2, #0
 80225fc:	dc03      	bgt.n	8022606 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 80225fe:	9a04      	ldr	r2, [sp, #16]
 8022600:	2a00      	cmp	r2, #0
 8022602:	f340 812c 	ble.w	802285e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 8022606:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022608:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 802260c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802260e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8022612:	2b00      	cmp	r3, #0
 8022614:	dd0f      	ble.n	8022636 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8022616:	1402      	asrs	r2, r0, #16
 8022618:	d406      	bmi.n	8022628 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 802261a:	4572      	cmp	r2, lr
 802261c:	da04      	bge.n	8022628 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 802261e:	140a      	asrs	r2, r1, #16
 8022620:	d402      	bmi.n	8022628 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8022622:	9d01      	ldr	r5, [sp, #4]
 8022624:	42aa      	cmp	r2, r5
 8022626:	db07      	blt.n	8022638 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 8022628:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802262a:	4410      	add	r0, r2
 802262c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802262e:	3b01      	subs	r3, #1
 8022630:	4411      	add	r1, r2
 8022632:	3402      	adds	r4, #2
 8022634:	e7ed      	b.n	8022612 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 8022636:	d00f      	beq.n	8022658 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 8022638:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802263a:	1e5a      	subs	r2, r3, #1
 802263c:	fb05 0502 	mla	r5, r5, r2, r0
 8022640:	142d      	asrs	r5, r5, #16
 8022642:	d545      	bpl.n	80226d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 8022644:	4699      	mov	r9, r3
 8022646:	46a0      	mov	r8, r4
 8022648:	f1b9 0f00 	cmp.w	r9, #0
 802264c:	f300 80a7 	bgt.w	802279e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e2>
 8022650:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022654:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8022658:	9b00      	ldr	r3, [sp, #0]
 802265a:	2b00      	cmp	r3, #0
 802265c:	f340 80ff 	ble.w	802285e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 8022660:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022664:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022668:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802266c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802266e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022672:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022676:	eeb0 6a62 	vmov.f32	s12, s5
 802267a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802267e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022682:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022686:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 802268a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802268e:	eeb0 6a43 	vmov.f32	s12, s6
 8022692:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022696:	ee12 2a90 	vmov	r2, s5
 802269a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802269e:	fb92 f3f3 	sdiv	r3, r2, r3
 80226a2:	ee13 2a10 	vmov	r2, s6
 80226a6:	9313      	str	r3, [sp, #76]	; 0x4c
 80226a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80226aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80226ae:	9314      	str	r3, [sp, #80]	; 0x50
 80226b0:	9b00      	ldr	r3, [sp, #0]
 80226b2:	9a04      	ldr	r2, [sp, #16]
 80226b4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80226b8:	3b01      	subs	r3, #1
 80226ba:	9300      	str	r3, [sp, #0]
 80226bc:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80226c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80226c2:	eeb0 3a67 	vmov.f32	s6, s15
 80226c6:	bf08      	it	eq
 80226c8:	4613      	moveq	r3, r2
 80226ca:	eef0 2a47 	vmov.f32	s5, s14
 80226ce:	e793      	b.n	80225f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 80226d0:	4575      	cmp	r5, lr
 80226d2:	dab7      	bge.n	8022644 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 80226d4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80226d6:	fb05 1202 	mla	r2, r5, r2, r1
 80226da:	1412      	asrs	r2, r2, #16
 80226dc:	d4b2      	bmi.n	8022644 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 80226de:	9d01      	ldr	r5, [sp, #4]
 80226e0:	42aa      	cmp	r2, r5
 80226e2:	daaf      	bge.n	8022644 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 80226e4:	f04f 0800 	mov.w	r8, #0
 80226e8:	eba3 0208 	sub.w	r2, r3, r8
 80226ec:	2a00      	cmp	r2, #0
 80226ee:	ddaf      	ble.n	8022650 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 80226f0:	9e02      	ldr	r6, [sp, #8]
 80226f2:	140a      	asrs	r2, r1, #16
 80226f4:	1405      	asrs	r5, r0, #16
 80226f6:	fb0e 6202 	mla	r2, lr, r2, r6
 80226fa:	5d52      	ldrb	r2, [r2, r5]
 80226fc:	9d03      	ldr	r5, [sp, #12]
 80226fe:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8022702:	0e2e      	lsrs	r6, r5, #24
 8022704:	d044      	beq.n	8022790 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 8022706:	9a05      	ldr	r2, [sp, #20]
 8022708:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 802270c:	4356      	muls	r6, r2
 802270e:	1c72      	adds	r2, r6, #1
 8022710:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8022714:	1212      	asrs	r2, r2, #8
 8022716:	fa1f f982 	uxth.w	r9, r2
 802271a:	ea4f 272c 	mov.w	r7, ip, asr #8
 802271e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8022722:	43d2      	mvns	r2, r2
 8022724:	b2d2      	uxtb	r2, r2
 8022726:	fb16 f609 	smulbb	r6, r6, r9
 802272a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802272e:	fb07 6702 	mla	r7, r7, r2, r6
 8022732:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8022736:	ea4f 06ec 	mov.w	r6, ip, asr #3
 802273a:	b2ed      	uxtb	r5, r5
 802273c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8022740:	fa5f fc8c 	uxtb.w	ip, ip
 8022744:	fb15 f509 	smulbb	r5, r5, r9
 8022748:	fb0c 5502 	mla	r5, ip, r2, r5
 802274c:	b2bf      	uxth	r7, r7
 802274e:	fb1a fa09 	smulbb	sl, sl, r9
 8022752:	b2ad      	uxth	r5, r5
 8022754:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8022758:	fb06 a602 	mla	r6, r6, r2, sl
 802275c:	1c7a      	adds	r2, r7, #1
 802275e:	f105 0a01 	add.w	sl, r5, #1
 8022762:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8022766:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 802276a:	b2b6      	uxth	r6, r6
 802276c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8022770:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8022774:	ea47 070a 	orr.w	r7, r7, sl
 8022778:	f106 0a01 	add.w	sl, r6, #1
 802277c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8022780:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8022784:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8022788:	ea47 070a 	orr.w	r7, r7, sl
 802278c:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8022790:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022792:	4410      	add	r0, r2
 8022794:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022796:	f108 0801 	add.w	r8, r8, #1
 802279a:	4411      	add	r1, r2
 802279c:	e7a4      	b.n	80226e8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12c>
 802279e:	1405      	asrs	r5, r0, #16
 80227a0:	d454      	bmi.n	802284c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 80227a2:	4575      	cmp	r5, lr
 80227a4:	da52      	bge.n	802284c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 80227a6:	140a      	asrs	r2, r1, #16
 80227a8:	d450      	bmi.n	802284c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 80227aa:	9e01      	ldr	r6, [sp, #4]
 80227ac:	42b2      	cmp	r2, r6
 80227ae:	da4d      	bge.n	802284c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 80227b0:	9e02      	ldr	r6, [sp, #8]
 80227b2:	fb0e 6202 	mla	r2, lr, r2, r6
 80227b6:	5d52      	ldrb	r2, [r2, r5]
 80227b8:	9d03      	ldr	r5, [sp, #12]
 80227ba:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 80227be:	0e2e      	lsrs	r6, r5, #24
 80227c0:	d044      	beq.n	802284c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 80227c2:	9a05      	ldr	r2, [sp, #20]
 80227c4:	f8b8 c000 	ldrh.w	ip, [r8]
 80227c8:	4356      	muls	r6, r2
 80227ca:	1c72      	adds	r2, r6, #1
 80227cc:	eb02 2226 	add.w	r2, r2, r6, asr #8
 80227d0:	1212      	asrs	r2, r2, #8
 80227d2:	fa1f fa82 	uxth.w	sl, r2
 80227d6:	ea4f 272c 	mov.w	r7, ip, asr #8
 80227da:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80227de:	43d2      	mvns	r2, r2
 80227e0:	b2d2      	uxtb	r2, r2
 80227e2:	fb16 f60a 	smulbb	r6, r6, sl
 80227e6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80227ea:	fb07 6702 	mla	r7, r7, r2, r6
 80227ee:	f3c5 2b07 	ubfx	fp, r5, #8, #8
 80227f2:	ea4f 06ec 	mov.w	r6, ip, asr #3
 80227f6:	b2ed      	uxtb	r5, r5
 80227f8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80227fc:	fa5f fc8c 	uxtb.w	ip, ip
 8022800:	fb15 f50a 	smulbb	r5, r5, sl
 8022804:	fb0c 5502 	mla	r5, ip, r2, r5
 8022808:	b2bf      	uxth	r7, r7
 802280a:	fb1b fb0a 	smulbb	fp, fp, sl
 802280e:	b2ad      	uxth	r5, r5
 8022810:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8022814:	fb06 b602 	mla	r6, r6, r2, fp
 8022818:	1c7a      	adds	r2, r7, #1
 802281a:	f105 0b01 	add.w	fp, r5, #1
 802281e:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8022822:	eb0b 2b15 	add.w	fp, fp, r5, lsr #8
 8022826:	b2b6      	uxth	r6, r6
 8022828:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 802282c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8022830:	ea47 070b 	orr.w	r7, r7, fp
 8022834:	f106 0b01 	add.w	fp, r6, #1
 8022838:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 802283c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8022840:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8022844:	ea47 070b 	orr.w	r7, r7, fp
 8022848:	f8a8 7000 	strh.w	r7, [r8]
 802284c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802284e:	4410      	add	r0, r2
 8022850:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022852:	f108 0802 	add.w	r8, r8, #2
 8022856:	4411      	add	r1, r2
 8022858:	f109 39ff 	add.w	r9, r9, #4294967295
 802285c:	e6f4      	b.n	8022648 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 802285e:	b007      	add	sp, #28
 8022860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022864 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022868:	b087      	sub	sp, #28
 802286a:	468b      	mov	fp, r1
 802286c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802286e:	9205      	str	r2, [sp, #20]
 8022870:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8022874:	9201      	str	r2, [sp, #4]
 8022876:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 802287a:	6869      	ldr	r1, [r5, #4]
 802287c:	981a      	ldr	r0, [sp, #104]	; 0x68
 802287e:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 8022882:	fb01 2404 	mla	r4, r1, r4, r2
 8022886:	682a      	ldr	r2, [r5, #0]
 8022888:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 802288c:	6802      	ldr	r2, [r0, #0]
 802288e:	9203      	str	r2, [sp, #12]
 8022890:	6842      	ldr	r2, [r0, #4]
 8022892:	3204      	adds	r2, #4
 8022894:	9204      	str	r2, [sp, #16]
 8022896:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802289a:	f1bb 0f00 	cmp.w	fp, #0
 802289e:	dc03      	bgt.n	80228a8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 80228a0:	9a05      	ldr	r2, [sp, #20]
 80228a2:	2a00      	cmp	r2, #0
 80228a4:	f340 814a 	ble.w	8022b3c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d8>
 80228a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80228aa:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80228ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80228b0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80228b4:	2b00      	cmp	r3, #0
 80228b6:	dd0f      	ble.n	80228d8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 80228b8:	1408      	asrs	r0, r1, #16
 80228ba:	d406      	bmi.n	80228ca <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 80228bc:	4540      	cmp	r0, r8
 80228be:	da04      	bge.n	80228ca <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 80228c0:	1410      	asrs	r0, r2, #16
 80228c2:	d402      	bmi.n	80228ca <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 80228c4:	9d01      	ldr	r5, [sp, #4]
 80228c6:	42a8      	cmp	r0, r5
 80228c8:	db07      	blt.n	80228da <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 80228ca:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80228cc:	4401      	add	r1, r0
 80228ce:	9814      	ldr	r0, [sp, #80]	; 0x50
 80228d0:	3b01      	subs	r3, #1
 80228d2:	4402      	add	r2, r0
 80228d4:	3402      	adds	r4, #2
 80228d6:	e7ed      	b.n	80228b4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 80228d8:	d018      	beq.n	802290c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa8>
 80228da:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80228dc:	1e58      	subs	r0, r3, #1
 80228de:	fb05 1500 	mla	r5, r5, r0, r1
 80228e2:	142d      	asrs	r5, r5, #16
 80228e4:	d40a      	bmi.n	80228fc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 80228e6:	4545      	cmp	r5, r8
 80228e8:	da08      	bge.n	80228fc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 80228ea:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80228ec:	fb05 2000 	mla	r0, r5, r0, r2
 80228f0:	1400      	asrs	r0, r0, #16
 80228f2:	d403      	bmi.n	80228fc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 80228f4:	9d01      	ldr	r5, [sp, #4]
 80228f6:	42a8      	cmp	r0, r5
 80228f8:	f2c0 80b7 	blt.w	8022a6a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 80228fc:	2600      	movs	r6, #0
 80228fe:	1998      	adds	r0, r3, r6
 8022900:	2800      	cmp	r0, #0
 8022902:	dc3e      	bgt.n	8022982 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 8022904:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022908:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802290c:	f1bb 0f00 	cmp.w	fp, #0
 8022910:	f340 8114 	ble.w	8022b3c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d8>
 8022914:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022918:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802291c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022920:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022922:	f1bb 0b01 	subs.w	fp, fp, #1
 8022926:	ee31 1a05 	vadd.f32	s2, s2, s10
 802292a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802292e:	eeb0 6a62 	vmov.f32	s12, s5
 8022932:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022936:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802293a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802293e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8022942:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022946:	eeb0 6a43 	vmov.f32	s12, s6
 802294a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802294e:	ee12 2a90 	vmov	r2, s5
 8022952:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022956:	fb92 f3f3 	sdiv	r3, r2, r3
 802295a:	ee13 2a10 	vmov	r2, s6
 802295e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022962:	9313      	str	r3, [sp, #76]	; 0x4c
 8022964:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022966:	fb92 f3f3 	sdiv	r3, r2, r3
 802296a:	9a05      	ldr	r2, [sp, #20]
 802296c:	9314      	str	r3, [sp, #80]	; 0x50
 802296e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8022972:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022974:	eeb0 3a67 	vmov.f32	s6, s15
 8022978:	bf08      	it	eq
 802297a:	4613      	moveq	r3, r2
 802297c:	eef0 2a47 	vmov.f32	s5, s14
 8022980:	e78b      	b.n	802289a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 8022982:	140d      	asrs	r5, r1, #16
 8022984:	d459      	bmi.n	8022a3a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8022986:	4545      	cmp	r5, r8
 8022988:	da57      	bge.n	8022a3a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 802298a:	1410      	asrs	r0, r2, #16
 802298c:	d455      	bmi.n	8022a3a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 802298e:	9f01      	ldr	r7, [sp, #4]
 8022990:	42b8      	cmp	r0, r7
 8022992:	da52      	bge.n	8022a3a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8022994:	9f03      	ldr	r7, [sp, #12]
 8022996:	fb08 7000 	mla	r0, r8, r0, r7
 802299a:	5d40      	ldrb	r0, [r0, r5]
 802299c:	9d04      	ldr	r5, [sp, #16]
 802299e:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 80229a2:	0e07      	lsrs	r7, r0, #24
 80229a4:	2fff      	cmp	r7, #255	; 0xff
 80229a6:	d04e      	beq.n	8022a46 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e2>
 80229a8:	b2fd      	uxtb	r5, r7
 80229aa:	2f00      	cmp	r7, #0
 80229ac:	d045      	beq.n	8022a3a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 80229ae:	f06f 0701 	mvn.w	r7, #1
 80229b2:	4377      	muls	r7, r6
 80229b4:	fa1f f985 	uxth.w	r9, r5
 80229b8:	f834 e007 	ldrh.w	lr, [r4, r7]
 80229bc:	9702      	str	r7, [sp, #8]
 80229be:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80229c2:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80229c6:	43ed      	mvns	r5, r5
 80229c8:	b2ed      	uxtb	r5, r5
 80229ca:	fb17 f709 	smulbb	r7, r7, r9
 80229ce:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80229d2:	fb0c 7c05 	mla	ip, ip, r5, r7
 80229d6:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 80229da:	ea4f 07ee 	mov.w	r7, lr, asr #3
 80229de:	b2c0      	uxtb	r0, r0
 80229e0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80229e4:	fa5f fe8e 	uxtb.w	lr, lr
 80229e8:	fb10 f009 	smulbb	r0, r0, r9
 80229ec:	fb0e 0005 	mla	r0, lr, r5, r0
 80229f0:	b280      	uxth	r0, r0
 80229f2:	fa1f fc8c 	uxth.w	ip, ip
 80229f6:	fb1a fa09 	smulbb	sl, sl, r9
 80229fa:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80229fe:	fb07 a705 	mla	r7, r7, r5, sl
 8022a02:	f100 0a01 	add.w	sl, r0, #1
 8022a06:	f10c 0501 	add.w	r5, ip, #1
 8022a0a:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8022a0e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8022a12:	b2bf      	uxth	r7, r7
 8022a14:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8022a18:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8022a1c:	ea4c 0c0a 	orr.w	ip, ip, sl
 8022a20:	f107 0a01 	add.w	sl, r7, #1
 8022a24:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8022a28:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8022a2c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8022a30:	9802      	ldr	r0, [sp, #8]
 8022a32:	ea4c 0c0a 	orr.w	ip, ip, sl
 8022a36:	f824 c000 	strh.w	ip, [r4, r0]
 8022a3a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8022a3c:	4401      	add	r1, r0
 8022a3e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8022a40:	3e01      	subs	r6, #1
 8022a42:	4402      	add	r2, r0
 8022a44:	e75b      	b.n	80228fe <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 8022a46:	f06f 0501 	mvn.w	r5, #1
 8022a4a:	fb05 f706 	mul.w	r7, r5, r6
 8022a4e:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 8022a52:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8022a56:	0945      	lsrs	r5, r0, #5
 8022a58:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022a5c:	ea4c 0505 	orr.w	r5, ip, r5
 8022a60:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8022a64:	4305      	orrs	r5, r0
 8022a66:	53e5      	strh	r5, [r4, r7]
 8022a68:	e7e7      	b.n	8022a3a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8022a6a:	f04f 0e00 	mov.w	lr, #0
 8022a6e:	eba3 000e 	sub.w	r0, r3, lr
 8022a72:	2800      	cmp	r0, #0
 8022a74:	f77f af46 	ble.w	8022904 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 8022a78:	9e03      	ldr	r6, [sp, #12]
 8022a7a:	1410      	asrs	r0, r2, #16
 8022a7c:	140d      	asrs	r5, r1, #16
 8022a7e:	fb08 6000 	mla	r0, r8, r0, r6
 8022a82:	5d40      	ldrb	r0, [r0, r5]
 8022a84:	9d04      	ldr	r5, [sp, #16]
 8022a86:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8022a8a:	0e06      	lsrs	r6, r0, #24
 8022a8c:	2eff      	cmp	r6, #255	; 0xff
 8022a8e:	d048      	beq.n	8022b22 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 8022a90:	b2f5      	uxtb	r5, r6
 8022a92:	2e00      	cmp	r6, #0
 8022a94:	d03e      	beq.n	8022b14 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8022a96:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8022a9a:	fa1f f985 	uxth.w	r9, r5
 8022a9e:	ea4f 272c 	mov.w	r7, ip, asr #8
 8022aa2:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8022aa6:	43ed      	mvns	r5, r5
 8022aa8:	b2ed      	uxtb	r5, r5
 8022aaa:	fb16 f609 	smulbb	r6, r6, r9
 8022aae:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8022ab2:	fb07 6705 	mla	r7, r7, r5, r6
 8022ab6:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8022aba:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8022abe:	b2c0      	uxtb	r0, r0
 8022ac0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8022ac4:	fa5f fc8c 	uxtb.w	ip, ip
 8022ac8:	fb10 f009 	smulbb	r0, r0, r9
 8022acc:	fb0c 0005 	mla	r0, ip, r5, r0
 8022ad0:	b2bf      	uxth	r7, r7
 8022ad2:	fb1a fa09 	smulbb	sl, sl, r9
 8022ad6:	b280      	uxth	r0, r0
 8022ad8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8022adc:	fb06 a605 	mla	r6, r6, r5, sl
 8022ae0:	1c7d      	adds	r5, r7, #1
 8022ae2:	f100 0a01 	add.w	sl, r0, #1
 8022ae6:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 8022aea:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8022aee:	b2b6      	uxth	r6, r6
 8022af0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8022af4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8022af8:	ea47 070a 	orr.w	r7, r7, sl
 8022afc:	f106 0a01 	add.w	sl, r6, #1
 8022b00:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8022b04:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8022b08:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8022b0c:	ea47 070a 	orr.w	r7, r7, sl
 8022b10:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 8022b14:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8022b16:	4401      	add	r1, r0
 8022b18:	9814      	ldr	r0, [sp, #80]	; 0x50
 8022b1a:	f10e 0e01 	add.w	lr, lr, #1
 8022b1e:	4402      	add	r2, r0
 8022b20:	e7a5      	b.n	8022a6e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x20a>
 8022b22:	4d08      	ldr	r5, [pc, #32]	; (8022b44 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e0>)
 8022b24:	ea05 2610 	and.w	r6, r5, r0, lsr #8
 8022b28:	0945      	lsrs	r5, r0, #5
 8022b2a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022b2e:	4335      	orrs	r5, r6
 8022b30:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8022b34:	4305      	orrs	r5, r0
 8022b36:	f824 501e 	strh.w	r5, [r4, lr, lsl #1]
 8022b3a:	e7eb      	b.n	8022b14 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8022b3c:	b007      	add	sp, #28
 8022b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b42:	bf00      	nop
 8022b44:	fffff800 	.word	0xfffff800

08022b48 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b4c:	b087      	sub	sp, #28
 8022b4e:	468b      	mov	fp, r1
 8022b50:	9204      	str	r2, [sp, #16]
 8022b52:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8022b56:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8022b58:	9201      	str	r2, [sp, #4]
 8022b5a:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8022b5e:	9205      	str	r2, [sp, #20]
 8022b60:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8022b64:	6869      	ldr	r1, [r5, #4]
 8022b66:	981a      	ldr	r0, [sp, #104]	; 0x68
 8022b68:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 8022b6c:	fb01 2404 	mla	r4, r1, r4, r2
 8022b70:	682a      	ldr	r2, [r5, #0]
 8022b72:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8022b76:	6802      	ldr	r2, [r0, #0]
 8022b78:	9202      	str	r2, [sp, #8]
 8022b7a:	6842      	ldr	r2, [r0, #4]
 8022b7c:	9203      	str	r2, [sp, #12]
 8022b7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022b82:	f1bb 0f00 	cmp.w	fp, #0
 8022b86:	dc03      	bgt.n	8022b90 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 8022b88:	9a04      	ldr	r2, [sp, #16]
 8022b8a:	2a00      	cmp	r2, #0
 8022b8c:	f340 8136 	ble.w	8022dfc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b4>
 8022b90:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022b92:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8022b96:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022b98:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8022b9c:	2b00      	cmp	r3, #0
 8022b9e:	dd0f      	ble.n	8022bc0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8022ba0:	1408      	asrs	r0, r1, #16
 8022ba2:	d406      	bmi.n	8022bb2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8022ba4:	4540      	cmp	r0, r8
 8022ba6:	da04      	bge.n	8022bb2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8022ba8:	1410      	asrs	r0, r2, #16
 8022baa:	d402      	bmi.n	8022bb2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8022bac:	9d01      	ldr	r5, [sp, #4]
 8022bae:	42a8      	cmp	r0, r5
 8022bb0:	db07      	blt.n	8022bc2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8022bb2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8022bb4:	4401      	add	r1, r0
 8022bb6:	9814      	ldr	r0, [sp, #80]	; 0x50
 8022bb8:	3b01      	subs	r3, #1
 8022bba:	4402      	add	r2, r0
 8022bbc:	3402      	adds	r4, #2
 8022bbe:	e7ed      	b.n	8022b9c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x54>
 8022bc0:	d00f      	beq.n	8022be2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 8022bc2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8022bc4:	1e58      	subs	r0, r3, #1
 8022bc6:	fb05 1500 	mla	r5, r5, r0, r1
 8022bca:	142d      	asrs	r5, r5, #16
 8022bcc:	d544      	bpl.n	8022c58 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8022bce:	9300      	str	r3, [sp, #0]
 8022bd0:	46a2      	mov	sl, r4
 8022bd2:	9800      	ldr	r0, [sp, #0]
 8022bd4:	2800      	cmp	r0, #0
 8022bd6:	f300 80ab 	bgt.w	8022d30 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e8>
 8022bda:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022bde:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8022be2:	f1bb 0f00 	cmp.w	fp, #0
 8022be6:	f340 8109 	ble.w	8022dfc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b4>
 8022bea:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022bee:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022bf2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022bf6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022bf8:	f1bb 0b01 	subs.w	fp, fp, #1
 8022bfc:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022c00:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022c04:	eeb0 6a62 	vmov.f32	s12, s5
 8022c08:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022c0c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022c10:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022c14:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8022c18:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022c1c:	eeb0 6a43 	vmov.f32	s12, s6
 8022c20:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022c24:	ee12 2a90 	vmov	r2, s5
 8022c28:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022c2c:	fb92 f3f3 	sdiv	r3, r2, r3
 8022c30:	ee13 2a10 	vmov	r2, s6
 8022c34:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022c38:	9313      	str	r3, [sp, #76]	; 0x4c
 8022c3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022c3c:	fb92 f3f3 	sdiv	r3, r2, r3
 8022c40:	9a04      	ldr	r2, [sp, #16]
 8022c42:	9314      	str	r3, [sp, #80]	; 0x50
 8022c44:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8022c48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022c4a:	eeb0 3a67 	vmov.f32	s6, s15
 8022c4e:	bf08      	it	eq
 8022c50:	4613      	moveq	r3, r2
 8022c52:	eef0 2a47 	vmov.f32	s5, s14
 8022c56:	e794      	b.n	8022b82 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a>
 8022c58:	4545      	cmp	r5, r8
 8022c5a:	dab8      	bge.n	8022bce <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 8022c5c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8022c5e:	fb05 2000 	mla	r0, r5, r0, r2
 8022c62:	1400      	asrs	r0, r0, #16
 8022c64:	d4b3      	bmi.n	8022bce <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 8022c66:	9d01      	ldr	r5, [sp, #4]
 8022c68:	42a8      	cmp	r0, r5
 8022c6a:	dab0      	bge.n	8022bce <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 8022c6c:	f04f 0900 	mov.w	r9, #0
 8022c70:	eba3 0009 	sub.w	r0, r3, r9
 8022c74:	2800      	cmp	r0, #0
 8022c76:	ddb0      	ble.n	8022bda <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8022c78:	140d      	asrs	r5, r1, #16
 8022c7a:	1410      	asrs	r0, r2, #16
 8022c7c:	fb08 5000 	mla	r0, r8, r0, r5
 8022c80:	9d03      	ldr	r5, [sp, #12]
 8022c82:	5c2e      	ldrb	r6, [r5, r0]
 8022c84:	2e00      	cmp	r6, #0
 8022c86:	d04c      	beq.n	8022d22 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1da>
 8022c88:	9d02      	ldr	r5, [sp, #8]
 8022c8a:	f835 e010 	ldrh.w	lr, [r5, r0, lsl #1]
 8022c8e:	9805      	ldr	r0, [sp, #20]
 8022c90:	f834 5019 	ldrh.w	r5, [r4, r9, lsl #1]
 8022c94:	4346      	muls	r6, r0
 8022c96:	1c70      	adds	r0, r6, #1
 8022c98:	eb00 2016 	add.w	r0, r0, r6, lsr #8
 8022c9c:	1200      	asrs	r0, r0, #8
 8022c9e:	b287      	uxth	r7, r0
 8022ca0:	122e      	asrs	r6, r5, #8
 8022ca2:	43c0      	mvns	r0, r0
 8022ca4:	b2c0      	uxtb	r0, r0
 8022ca6:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8022caa:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8022cae:	fb16 f600 	smulbb	r6, r6, r0
 8022cb2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8022cb6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022cba:	00ed      	lsls	r5, r5, #3
 8022cbc:	fb0c 6c07 	mla	ip, ip, r7, r6
 8022cc0:	b2ed      	uxtb	r5, r5
 8022cc2:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8022cc6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8022cca:	fb15 f500 	smulbb	r5, r5, r0
 8022cce:	fa5f fe8e 	uxtb.w	lr, lr
 8022cd2:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8022cd6:	fb0e 5507 	mla	r5, lr, r7, r5
 8022cda:	fb1a fa00 	smulbb	sl, sl, r0
 8022cde:	fa1f fc8c 	uxth.w	ip, ip
 8022ce2:	b2ad      	uxth	r5, r5
 8022ce4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8022ce8:	fb06 a607 	mla	r6, r6, r7, sl
 8022cec:	f10c 0001 	add.w	r0, ip, #1
 8022cf0:	f105 0a01 	add.w	sl, r5, #1
 8022cf4:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 8022cf8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8022cfc:	b2b6      	uxth	r6, r6
 8022cfe:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8022d02:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8022d06:	ea4c 0c0a 	orr.w	ip, ip, sl
 8022d0a:	f106 0a01 	add.w	sl, r6, #1
 8022d0e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8022d12:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8022d16:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8022d1a:	ea4c 0c0a 	orr.w	ip, ip, sl
 8022d1e:	f824 c019 	strh.w	ip, [r4, r9, lsl #1]
 8022d22:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8022d24:	4401      	add	r1, r0
 8022d26:	9814      	ldr	r0, [sp, #80]	; 0x50
 8022d28:	f109 0901 	add.w	r9, r9, #1
 8022d2c:	4402      	add	r2, r0
 8022d2e:	e79f      	b.n	8022c70 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x128>
 8022d30:	1408      	asrs	r0, r1, #16
 8022d32:	d459      	bmi.n	8022de8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a0>
 8022d34:	4540      	cmp	r0, r8
 8022d36:	da57      	bge.n	8022de8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a0>
 8022d38:	1415      	asrs	r5, r2, #16
 8022d3a:	d455      	bmi.n	8022de8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a0>
 8022d3c:	9e01      	ldr	r6, [sp, #4]
 8022d3e:	42b5      	cmp	r5, r6
 8022d40:	da52      	bge.n	8022de8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a0>
 8022d42:	fb08 0005 	mla	r0, r8, r5, r0
 8022d46:	9d03      	ldr	r5, [sp, #12]
 8022d48:	5c2e      	ldrb	r6, [r5, r0]
 8022d4a:	2e00      	cmp	r6, #0
 8022d4c:	d04c      	beq.n	8022de8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a0>
 8022d4e:	9d02      	ldr	r5, [sp, #8]
 8022d50:	f835 e010 	ldrh.w	lr, [r5, r0, lsl #1]
 8022d54:	9805      	ldr	r0, [sp, #20]
 8022d56:	f8ba 5000 	ldrh.w	r5, [sl]
 8022d5a:	4346      	muls	r6, r0
 8022d5c:	1c70      	adds	r0, r6, #1
 8022d5e:	eb00 2016 	add.w	r0, r0, r6, lsr #8
 8022d62:	1200      	asrs	r0, r0, #8
 8022d64:	b287      	uxth	r7, r0
 8022d66:	122e      	asrs	r6, r5, #8
 8022d68:	43c0      	mvns	r0, r0
 8022d6a:	b2c0      	uxtb	r0, r0
 8022d6c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8022d70:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8022d74:	fb16 f600 	smulbb	r6, r6, r0
 8022d78:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8022d7c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022d80:	00ed      	lsls	r5, r5, #3
 8022d82:	fb0c 6c07 	mla	ip, ip, r7, r6
 8022d86:	b2ed      	uxtb	r5, r5
 8022d88:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8022d8c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8022d90:	fb15 f500 	smulbb	r5, r5, r0
 8022d94:	fa5f fe8e 	uxtb.w	lr, lr
 8022d98:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8022d9c:	fb0e 5507 	mla	r5, lr, r7, r5
 8022da0:	fb19 f900 	smulbb	r9, r9, r0
 8022da4:	fa1f fc8c 	uxth.w	ip, ip
 8022da8:	b2ad      	uxth	r5, r5
 8022daa:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8022dae:	fb06 9607 	mla	r6, r6, r7, r9
 8022db2:	f10c 0001 	add.w	r0, ip, #1
 8022db6:	f105 0901 	add.w	r9, r5, #1
 8022dba:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 8022dbe:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8022dc2:	b2b6      	uxth	r6, r6
 8022dc4:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 8022dc8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8022dcc:	ea4c 0c09 	orr.w	ip, ip, r9
 8022dd0:	f106 0901 	add.w	r9, r6, #1
 8022dd4:	eb09 2916 	add.w	r9, r9, r6, lsr #8
 8022dd8:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8022ddc:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8022de0:	ea4c 0c09 	orr.w	ip, ip, r9
 8022de4:	f8aa c000 	strh.w	ip, [sl]
 8022de8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8022dea:	4401      	add	r1, r0
 8022dec:	9814      	ldr	r0, [sp, #80]	; 0x50
 8022dee:	4402      	add	r2, r0
 8022df0:	9800      	ldr	r0, [sp, #0]
 8022df2:	3801      	subs	r0, #1
 8022df4:	f10a 0a02 	add.w	sl, sl, #2
 8022df8:	9000      	str	r0, [sp, #0]
 8022dfa:	e6ea      	b.n	8022bd2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8022dfc:	b007      	add	sp, #28
 8022dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022e02 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022e02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e06:	b087      	sub	sp, #28
 8022e08:	468b      	mov	fp, r1
 8022e0a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8022e0c:	9205      	str	r2, [sp, #20]
 8022e0e:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8022e12:	9202      	str	r2, [sp, #8]
 8022e14:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8022e18:	6869      	ldr	r1, [r5, #4]
 8022e1a:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8022e1c:	f9bd 9060 	ldrsh.w	r9, [sp, #96]	; 0x60
 8022e20:	fb01 2000 	mla	r0, r1, r0, r2
 8022e24:	682a      	ldr	r2, [r5, #0]
 8022e26:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8022e2a:	6822      	ldr	r2, [r4, #0]
 8022e2c:	9201      	str	r2, [sp, #4]
 8022e2e:	6862      	ldr	r2, [r4, #4]
 8022e30:	9204      	str	r2, [sp, #16]
 8022e32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022e36:	f1bb 0f00 	cmp.w	fp, #0
 8022e3a:	dc03      	bgt.n	8022e44 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 8022e3c:	9a05      	ldr	r2, [sp, #20]
 8022e3e:	2a00      	cmp	r2, #0
 8022e40:	f340 813d 	ble.w	80230be <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2bc>
 8022e44:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022e46:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8022e4a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022e4c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8022e50:	2b00      	cmp	r3, #0
 8022e52:	dd0f      	ble.n	8022e74 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8022e54:	140c      	asrs	r4, r1, #16
 8022e56:	d406      	bmi.n	8022e66 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8022e58:	454c      	cmp	r4, r9
 8022e5a:	da04      	bge.n	8022e66 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8022e5c:	1414      	asrs	r4, r2, #16
 8022e5e:	d402      	bmi.n	8022e66 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8022e60:	9d02      	ldr	r5, [sp, #8]
 8022e62:	42ac      	cmp	r4, r5
 8022e64:	db07      	blt.n	8022e76 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8022e66:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022e68:	4421      	add	r1, r4
 8022e6a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022e6c:	3b01      	subs	r3, #1
 8022e6e:	4422      	add	r2, r4
 8022e70:	3002      	adds	r0, #2
 8022e72:	e7ed      	b.n	8022e50 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 8022e74:	d018      	beq.n	8022ea8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa6>
 8022e76:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8022e78:	1e5c      	subs	r4, r3, #1
 8022e7a:	fb05 1504 	mla	r5, r5, r4, r1
 8022e7e:	142d      	asrs	r5, r5, #16
 8022e80:	d40a      	bmi.n	8022e98 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8022e82:	454d      	cmp	r5, r9
 8022e84:	da08      	bge.n	8022e98 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8022e86:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8022e88:	fb05 2404 	mla	r4, r5, r4, r2
 8022e8c:	1424      	asrs	r4, r4, #16
 8022e8e:	d403      	bmi.n	8022e98 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8022e90:	9d02      	ldr	r5, [sp, #8]
 8022e92:	42ac      	cmp	r4, r5
 8022e94:	f2c0 80ae 	blt.w	8022ff4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f2>
 8022e98:	2600      	movs	r6, #0
 8022e9a:	199c      	adds	r4, r3, r6
 8022e9c:	2c00      	cmp	r4, #0
 8022e9e:	dc3e      	bgt.n	8022f1e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11c>
 8022ea0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022ea4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022ea8:	f1bb 0f00 	cmp.w	fp, #0
 8022eac:	f340 8107 	ble.w	80230be <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2bc>
 8022eb0:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022eb4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022eb8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022ebc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022ebe:	f1bb 0b01 	subs.w	fp, fp, #1
 8022ec2:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022ec6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022eca:	eeb0 6a62 	vmov.f32	s12, s5
 8022ece:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022ed2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022ed6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022eda:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8022ede:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022ee2:	eeb0 6a43 	vmov.f32	s12, s6
 8022ee6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022eea:	ee12 2a90 	vmov	r2, s5
 8022eee:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022ef2:	fb92 f3f3 	sdiv	r3, r2, r3
 8022ef6:	ee13 2a10 	vmov	r2, s6
 8022efa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022efe:	9313      	str	r3, [sp, #76]	; 0x4c
 8022f00:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022f02:	fb92 f3f3 	sdiv	r3, r2, r3
 8022f06:	9a05      	ldr	r2, [sp, #20]
 8022f08:	9314      	str	r3, [sp, #80]	; 0x50
 8022f0a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8022f0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022f10:	eeb0 3a67 	vmov.f32	s6, s15
 8022f14:	bf08      	it	eq
 8022f16:	4613      	moveq	r3, r2
 8022f18:	eef0 2a47 	vmov.f32	s5, s14
 8022f1c:	e78b      	b.n	8022e36 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 8022f1e:	140c      	asrs	r4, r1, #16
 8022f20:	d45a      	bmi.n	8022fd8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8022f22:	454c      	cmp	r4, r9
 8022f24:	da58      	bge.n	8022fd8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8022f26:	1415      	asrs	r5, r2, #16
 8022f28:	d456      	bmi.n	8022fd8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8022f2a:	9f02      	ldr	r7, [sp, #8]
 8022f2c:	42bd      	cmp	r5, r7
 8022f2e:	da53      	bge.n	8022fd8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8022f30:	fb09 4505 	mla	r5, r9, r5, r4
 8022f34:	9c04      	ldr	r4, [sp, #16]
 8022f36:	5d64      	ldrb	r4, [r4, r5]
 8022f38:	2cff      	cmp	r4, #255	; 0xff
 8022f3a:	d053      	beq.n	8022fe4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e2>
 8022f3c:	2c00      	cmp	r4, #0
 8022f3e:	d04b      	beq.n	8022fd8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8022f40:	9f01      	ldr	r7, [sp, #4]
 8022f42:	f837 8015 	ldrh.w	r8, [r7, r5, lsl #1]
 8022f46:	f06f 0501 	mvn.w	r5, #1
 8022f4a:	4375      	muls	r5, r6
 8022f4c:	9503      	str	r5, [sp, #12]
 8022f4e:	5b45      	ldrh	r5, [r0, r5]
 8022f50:	fa1f fc84 	uxth.w	ip, r4
 8022f54:	122f      	asrs	r7, r5, #8
 8022f56:	43e4      	mvns	r4, r4
 8022f58:	b2e4      	uxtb	r4, r4
 8022f5a:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8022f5e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8022f62:	fb17 f704 	smulbb	r7, r7, r4
 8022f66:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8022f6a:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8022f6e:	00ed      	lsls	r5, r5, #3
 8022f70:	fb0e 7e0c 	mla	lr, lr, ip, r7
 8022f74:	b2ed      	uxtb	r5, r5
 8022f76:	ea4f 07e8 	mov.w	r7, r8, asr #3
 8022f7a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8022f7e:	fb15 f504 	smulbb	r5, r5, r4
 8022f82:	fa5f f888 	uxtb.w	r8, r8
 8022f86:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8022f8a:	fb08 550c 	mla	r5, r8, ip, r5
 8022f8e:	fb1a fa04 	smulbb	sl, sl, r4
 8022f92:	fa1f fe8e 	uxth.w	lr, lr
 8022f96:	b2ad      	uxth	r5, r5
 8022f98:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8022f9c:	fb07 a70c 	mla	r7, r7, ip, sl
 8022fa0:	f10e 0401 	add.w	r4, lr, #1
 8022fa4:	f105 0a01 	add.w	sl, r5, #1
 8022fa8:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 8022fac:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8022fb0:	b2bf      	uxth	r7, r7
 8022fb2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8022fb6:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8022fba:	ea4e 0e0a 	orr.w	lr, lr, sl
 8022fbe:	f107 0a01 	add.w	sl, r7, #1
 8022fc2:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8022fc6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8022fca:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8022fce:	9c03      	ldr	r4, [sp, #12]
 8022fd0:	ea4e 0e0a 	orr.w	lr, lr, sl
 8022fd4:	f820 e004 	strh.w	lr, [r0, r4]
 8022fd8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022fda:	4421      	add	r1, r4
 8022fdc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022fde:	3e01      	subs	r6, #1
 8022fe0:	4422      	add	r2, r4
 8022fe2:	e75a      	b.n	8022e9a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8022fe4:	9c01      	ldr	r4, [sp, #4]
 8022fe6:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 8022fea:	f06f 0401 	mvn.w	r4, #1
 8022fee:	4374      	muls	r4, r6
 8022ff0:	5305      	strh	r5, [r0, r4]
 8022ff2:	e7f1      	b.n	8022fd8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8022ff4:	f04f 0800 	mov.w	r8, #0
 8022ff8:	eba3 0408 	sub.w	r4, r3, r8
 8022ffc:	2c00      	cmp	r4, #0
 8022ffe:	f77f af4f 	ble.w	8022ea0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 8023002:	140c      	asrs	r4, r1, #16
 8023004:	1415      	asrs	r5, r2, #16
 8023006:	fb09 4505 	mla	r5, r9, r5, r4
 802300a:	9c04      	ldr	r4, [sp, #16]
 802300c:	5d64      	ldrb	r4, [r4, r5]
 802300e:	2cff      	cmp	r4, #255	; 0xff
 8023010:	d04f      	beq.n	80230b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8023012:	2c00      	cmp	r4, #0
 8023014:	d046      	beq.n	80230a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 8023016:	9e01      	ldr	r6, [sp, #4]
 8023018:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 802301c:	f830 5018 	ldrh.w	r5, [r0, r8, lsl #1]
 8023020:	b2a7      	uxth	r7, r4
 8023022:	122e      	asrs	r6, r5, #8
 8023024:	43e4      	mvns	r4, r4
 8023026:	b2e4      	uxtb	r4, r4
 8023028:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 802302c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8023030:	fb16 f604 	smulbb	r6, r6, r4
 8023034:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8023038:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802303c:	00ed      	lsls	r5, r5, #3
 802303e:	fb0c 6c07 	mla	ip, ip, r7, r6
 8023042:	b2ed      	uxtb	r5, r5
 8023044:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8023048:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802304c:	fb15 f504 	smulbb	r5, r5, r4
 8023050:	fa5f fe8e 	uxtb.w	lr, lr
 8023054:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8023058:	fb0e 5507 	mla	r5, lr, r7, r5
 802305c:	fb1a fa04 	smulbb	sl, sl, r4
 8023060:	fa1f fc8c 	uxth.w	ip, ip
 8023064:	b2ad      	uxth	r5, r5
 8023066:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802306a:	fb06 a607 	mla	r6, r6, r7, sl
 802306e:	f10c 0401 	add.w	r4, ip, #1
 8023072:	f105 0a01 	add.w	sl, r5, #1
 8023076:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 802307a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 802307e:	b2b6      	uxth	r6, r6
 8023080:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8023084:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8023088:	ea4c 0c0a 	orr.w	ip, ip, sl
 802308c:	f106 0a01 	add.w	sl, r6, #1
 8023090:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8023094:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8023098:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 802309c:	ea4c 0c0a 	orr.w	ip, ip, sl
 80230a0:	f820 c018 	strh.w	ip, [r0, r8, lsl #1]
 80230a4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80230a6:	4421      	add	r1, r4
 80230a8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80230aa:	f108 0801 	add.w	r8, r8, #1
 80230ae:	4422      	add	r2, r4
 80230b0:	e7a2      	b.n	8022ff8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 80230b2:	9c01      	ldr	r4, [sp, #4]
 80230b4:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 80230b8:	f820 4018 	strh.w	r4, [r0, r8, lsl #1]
 80230bc:	e7f2      	b.n	80230a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 80230be:	b007      	add	sp, #28
 80230c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080230c4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80230c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80230c8:	b085      	sub	sp, #20
 80230ca:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80230cc:	9203      	str	r2, [sp, #12]
 80230ce:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 80230d2:	9201      	str	r2, [sp, #4]
 80230d4:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80230d8:	9100      	str	r1, [sp, #0]
 80230da:	6841      	ldr	r1, [r0, #4]
 80230dc:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 80230e0:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 80230e4:	fb01 2404 	mla	r4, r1, r4, r2
 80230e8:	6802      	ldr	r2, [r0, #0]
 80230ea:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80230ee:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80230f0:	fa1f fe85 	uxth.w	lr, r5
 80230f4:	6812      	ldr	r2, [r2, #0]
 80230f6:	9202      	str	r2, [sp, #8]
 80230f8:	43ed      	mvns	r5, r5
 80230fa:	b2ed      	uxtb	r5, r5
 80230fc:	9a00      	ldr	r2, [sp, #0]
 80230fe:	2a00      	cmp	r2, #0
 8023100:	dc03      	bgt.n	802310a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 8023102:	9a03      	ldr	r2, [sp, #12]
 8023104:	2a00      	cmp	r2, #0
 8023106:	f340 8117 	ble.w	8023338 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 802310a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802310c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8023110:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023112:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8023116:	2b00      	cmp	r3, #0
 8023118:	dd0f      	ble.n	802313a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802311a:	1408      	asrs	r0, r1, #16
 802311c:	d406      	bmi.n	802312c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 802311e:	4540      	cmp	r0, r8
 8023120:	da04      	bge.n	802312c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8023122:	1410      	asrs	r0, r2, #16
 8023124:	d402      	bmi.n	802312c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8023126:	9e01      	ldr	r6, [sp, #4]
 8023128:	42b0      	cmp	r0, r6
 802312a:	db07      	blt.n	802313c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 802312c:	9811      	ldr	r0, [sp, #68]	; 0x44
 802312e:	4401      	add	r1, r0
 8023130:	9812      	ldr	r0, [sp, #72]	; 0x48
 8023132:	3b01      	subs	r3, #1
 8023134:	4402      	add	r2, r0
 8023136:	3402      	adds	r4, #2
 8023138:	e7ed      	b.n	8023116 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 802313a:	d069      	beq.n	8023210 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 802313c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 802313e:	1e58      	subs	r0, r3, #1
 8023140:	fb06 1600 	mla	r6, r6, r0, r1
 8023144:	1436      	asrs	r6, r6, #16
 8023146:	d459      	bmi.n	80231fc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x138>
 8023148:	4546      	cmp	r6, r8
 802314a:	da57      	bge.n	80231fc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x138>
 802314c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 802314e:	fb06 2000 	mla	r0, r6, r0, r2
 8023152:	1400      	asrs	r0, r0, #16
 8023154:	d452      	bmi.n	80231fc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x138>
 8023156:	9e01      	ldr	r6, [sp, #4]
 8023158:	42b0      	cmp	r0, r6
 802315a:	da4f      	bge.n	80231fc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x138>
 802315c:	469a      	mov	sl, r3
 802315e:	46a3      	mov	fp, r4
 8023160:	f1ba 0f00 	cmp.w	sl, #0
 8023164:	dd50      	ble.n	8023208 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 8023166:	140e      	asrs	r6, r1, #16
 8023168:	1410      	asrs	r0, r2, #16
 802316a:	fb08 6000 	mla	r0, r8, r0, r6
 802316e:	9e02      	ldr	r6, [sp, #8]
 8023170:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
 8023174:	f8bb 6000 	ldrh.w	r6, [fp]
 8023178:	1237      	asrs	r7, r6, #8
 802317a:	ea4f 2c20 	mov.w	ip, r0, asr #8
 802317e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8023182:	fb17 f705 	smulbb	r7, r7, r5
 8023186:	ea4f 09e6 	mov.w	r9, r6, asr #3
 802318a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802318e:	00f6      	lsls	r6, r6, #3
 8023190:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8023194:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8023198:	10c7      	asrs	r7, r0, #3
 802319a:	b2f6      	uxtb	r6, r6
 802319c:	00c0      	lsls	r0, r0, #3
 802319e:	fb19 f905 	smulbb	r9, r9, r5
 80231a2:	fb16 f605 	smulbb	r6, r6, r5
 80231a6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80231aa:	b2c0      	uxtb	r0, r0
 80231ac:	fa1f fc8c 	uxth.w	ip, ip
 80231b0:	fb07 970e 	mla	r7, r7, lr, r9
 80231b4:	fb00 600e 	mla	r0, r0, lr, r6
 80231b8:	b280      	uxth	r0, r0
 80231ba:	b2bf      	uxth	r7, r7
 80231bc:	f10c 0601 	add.w	r6, ip, #1
 80231c0:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 80231c4:	f107 0901 	add.w	r9, r7, #1
 80231c8:	1c46      	adds	r6, r0, #1
 80231ca:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 80231ce:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 80231d2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80231d4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80231d8:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80231dc:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80231e0:	ea4c 0c06 	orr.w	ip, ip, r6
 80231e4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80231e8:	4401      	add	r1, r0
 80231ea:	9812      	ldr	r0, [sp, #72]	; 0x48
 80231ec:	ea4c 0c09 	orr.w	ip, ip, r9
 80231f0:	f82b cb02 	strh.w	ip, [fp], #2
 80231f4:	4402      	add	r2, r0
 80231f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80231fa:	e7b1      	b.n	8023160 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 80231fc:	f04f 0900 	mov.w	r9, #0
 8023200:	eb03 0009 	add.w	r0, r3, r9
 8023204:	2800      	cmp	r0, #0
 8023206:	dc41      	bgt.n	802328c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 8023208:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802320c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8023210:	9b00      	ldr	r3, [sp, #0]
 8023212:	2b00      	cmp	r3, #0
 8023214:	f340 8090 	ble.w	8023338 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8023218:	ee30 0a04 	vadd.f32	s0, s0, s8
 802321c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023220:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023224:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023226:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802322a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802322e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023232:	eef0 6a62 	vmov.f32	s13, s5
 8023236:	ee61 7a27 	vmul.f32	s15, s2, s15
 802323a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802323e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023242:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8023246:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802324a:	eef0 6a43 	vmov.f32	s13, s6
 802324e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023252:	ee12 2a90 	vmov	r2, s5
 8023256:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802325a:	fb92 f3f3 	sdiv	r3, r2, r3
 802325e:	ee13 2a10 	vmov	r2, s6
 8023262:	9311      	str	r3, [sp, #68]	; 0x44
 8023264:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023266:	fb92 f3f3 	sdiv	r3, r2, r3
 802326a:	9312      	str	r3, [sp, #72]	; 0x48
 802326c:	9b00      	ldr	r3, [sp, #0]
 802326e:	9a03      	ldr	r2, [sp, #12]
 8023270:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023274:	3b01      	subs	r3, #1
 8023276:	9300      	str	r3, [sp, #0]
 8023278:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 802327c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802327e:	eeb0 3a67 	vmov.f32	s6, s15
 8023282:	bf08      	it	eq
 8023284:	4613      	moveq	r3, r2
 8023286:	eef0 2a47 	vmov.f32	s5, s14
 802328a:	e737      	b.n	80230fc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 802328c:	140e      	asrs	r6, r1, #16
 802328e:	d44c      	bmi.n	802332a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 8023290:	4546      	cmp	r6, r8
 8023292:	da4a      	bge.n	802332a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 8023294:	1410      	asrs	r0, r2, #16
 8023296:	d448      	bmi.n	802332a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 8023298:	9f01      	ldr	r7, [sp, #4]
 802329a:	42b8      	cmp	r0, r7
 802329c:	da45      	bge.n	802332a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 802329e:	fb08 6000 	mla	r0, r8, r0, r6
 80232a2:	9e02      	ldr	r6, [sp, #8]
 80232a4:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
 80232a8:	f06f 0601 	mvn.w	r6, #1
 80232ac:	fb06 fb09 	mul.w	fp, r6, r9
 80232b0:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80232b4:	f834 600b 	ldrh.w	r6, [r4, fp]
 80232b8:	1237      	asrs	r7, r6, #8
 80232ba:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80232be:	fb17 f705 	smulbb	r7, r7, r5
 80232c2:	ea4f 0ae6 	mov.w	sl, r6, asr #3
 80232c6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80232ca:	00f6      	lsls	r6, r6, #3
 80232cc:	fb0c 7c0e 	mla	ip, ip, lr, r7
 80232d0:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80232d4:	10c7      	asrs	r7, r0, #3
 80232d6:	b2f6      	uxtb	r6, r6
 80232d8:	00c0      	lsls	r0, r0, #3
 80232da:	fb1a fa05 	smulbb	sl, sl, r5
 80232de:	fb16 f605 	smulbb	r6, r6, r5
 80232e2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80232e6:	b2c0      	uxtb	r0, r0
 80232e8:	fa1f fc8c 	uxth.w	ip, ip
 80232ec:	fb07 a70e 	mla	r7, r7, lr, sl
 80232f0:	fb00 600e 	mla	r0, r0, lr, r6
 80232f4:	b2bf      	uxth	r7, r7
 80232f6:	b280      	uxth	r0, r0
 80232f8:	f10c 0601 	add.w	r6, ip, #1
 80232fc:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8023300:	f107 0a01 	add.w	sl, r7, #1
 8023304:	1c46      	adds	r6, r0, #1
 8023306:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 802330a:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 802330e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8023312:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8023316:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802331a:	ea4c 0c06 	orr.w	ip, ip, r6
 802331e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8023322:	ea4c 0c0a 	orr.w	ip, ip, sl
 8023326:	f824 c00b 	strh.w	ip, [r4, fp]
 802332a:	9811      	ldr	r0, [sp, #68]	; 0x44
 802332c:	4401      	add	r1, r0
 802332e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8023330:	f109 39ff 	add.w	r9, r9, #4294967295
 8023334:	4402      	add	r2, r0
 8023336:	e763      	b.n	8023200 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13c>
 8023338:	b005      	add	sp, #20
 802333a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802333e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802333e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023342:	9811      	ldr	r0, [sp, #68]	; 0x44
 8023344:	9201      	str	r2, [sp, #4]
 8023346:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 802334a:	6844      	ldr	r4, [r0, #4]
 802334c:	6800      	ldr	r0, [r0, #0]
 802334e:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 8023352:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 8023356:	fb04 2505 	mla	r5, r4, r5, r2
 802335a:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 802335e:	9816      	ldr	r0, [sp, #88]	; 0x58
 8023360:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 8023364:	6802      	ldr	r2, [r0, #0]
 8023366:	9200      	str	r2, [sp, #0]
 8023368:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802336c:	2900      	cmp	r1, #0
 802336e:	dc03      	bgt.n	8023378 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a>
 8023370:	9a01      	ldr	r2, [sp, #4]
 8023372:	2a00      	cmp	r2, #0
 8023374:	f340 8095 	ble.w	80234a2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 8023378:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802337a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 802337e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023380:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8023384:	2b00      	cmp	r3, #0
 8023386:	dd0e      	ble.n	80233a6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8023388:	ea5f 4824 	movs.w	r8, r4, asr #16
 802338c:	d406      	bmi.n	802339c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 802338e:	45e0      	cmp	r8, ip
 8023390:	da04      	bge.n	802339c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 8023392:	ea5f 4820 	movs.w	r8, r0, asr #16
 8023396:	d401      	bmi.n	802339c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 8023398:	45f0      	cmp	r8, lr
 802339a:	db05      	blt.n	80233a8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 802339c:	443c      	add	r4, r7
 802339e:	4430      	add	r0, r6
 80233a0:	3b01      	subs	r3, #1
 80233a2:	3502      	adds	r5, #2
 80233a4:	e7ee      	b.n	8023384 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 80233a6:	d010      	beq.n	80233ca <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 80233a8:	f103 38ff 	add.w	r8, r3, #4294967295
 80233ac:	fb07 4908 	mla	r9, r7, r8, r4
 80233b0:	ea5f 4929 	movs.w	r9, r9, asr #16
 80233b4:	d53d      	bpl.n	8023432 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80233b6:	4698      	mov	r8, r3
 80233b8:	eb05 0b43 	add.w	fp, r5, r3, lsl #1
 80233bc:	f1b8 0f00 	cmp.w	r8, #0
 80233c0:	dc55      	bgt.n	802346e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 80233c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80233c6:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 80233ca:	2900      	cmp	r1, #0
 80233cc:	dd69      	ble.n	80234a2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 80233ce:	ee30 0a04 	vadd.f32	s0, s0, s8
 80233d2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80233d6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80233da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80233dc:	3901      	subs	r1, #1
 80233de:	ee31 1a05 	vadd.f32	s2, s2, s10
 80233e2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80233e6:	eeb0 6a62 	vmov.f32	s12, s5
 80233ea:	ee61 7a27 	vmul.f32	s15, s2, s15
 80233ee:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80233f2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80233f6:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 80233fa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80233fe:	eeb0 6a43 	vmov.f32	s12, s6
 8023402:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023406:	ee12 2a90 	vmov	r2, s5
 802340a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802340e:	fb92 f7f3 	sdiv	r7, r2, r3
 8023412:	ee13 2a10 	vmov	r2, s6
 8023416:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802341a:	fb92 f6f3 	sdiv	r6, r2, r3
 802341e:	9a01      	ldr	r2, [sp, #4]
 8023420:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8023424:	bf08      	it	eq
 8023426:	4613      	moveq	r3, r2
 8023428:	eeb0 3a67 	vmov.f32	s6, s15
 802342c:	eef0 2a47 	vmov.f32	s5, s14
 8023430:	e79c      	b.n	802336c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e>
 8023432:	45e1      	cmp	r9, ip
 8023434:	dabf      	bge.n	80233b6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8023436:	fb06 0808 	mla	r8, r6, r8, r0
 802343a:	ea5f 4828 	movs.w	r8, r8, asr #16
 802343e:	d4ba      	bmi.n	80233b6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8023440:	45f0      	cmp	r8, lr
 8023442:	dab8      	bge.n	80233b6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8023444:	4698      	mov	r8, r3
 8023446:	46aa      	mov	sl, r5
 8023448:	f1b8 0f00 	cmp.w	r8, #0
 802344c:	ddb9      	ble.n	80233c2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x84>
 802344e:	ea4f 4920 	mov.w	r9, r0, asr #16
 8023452:	ea4f 4b24 	mov.w	fp, r4, asr #16
 8023456:	fb0c b909 	mla	r9, ip, r9, fp
 802345a:	9a00      	ldr	r2, [sp, #0]
 802345c:	f832 9019 	ldrh.w	r9, [r2, r9, lsl #1]
 8023460:	f82a 9b02 	strh.w	r9, [sl], #2
 8023464:	443c      	add	r4, r7
 8023466:	4430      	add	r0, r6
 8023468:	f108 38ff 	add.w	r8, r8, #4294967295
 802346c:	e7ec      	b.n	8023448 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 802346e:	ea5f 4a24 	movs.w	sl, r4, asr #16
 8023472:	d411      	bmi.n	8023498 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 8023474:	45e2      	cmp	sl, ip
 8023476:	da0f      	bge.n	8023498 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 8023478:	ea5f 4920 	movs.w	r9, r0, asr #16
 802347c:	d40c      	bmi.n	8023498 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 802347e:	45f1      	cmp	r9, lr
 8023480:	da0a      	bge.n	8023498 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 8023482:	fb0c a909 	mla	r9, ip, r9, sl
 8023486:	9a00      	ldr	r2, [sp, #0]
 8023488:	f832 a019 	ldrh.w	sl, [r2, r9, lsl #1]
 802348c:	f06f 0201 	mvn.w	r2, #1
 8023490:	fb02 f908 	mul.w	r9, r2, r8
 8023494:	f82b a009 	strh.w	sl, [fp, r9]
 8023498:	443c      	add	r4, r7
 802349a:	4430      	add	r0, r6
 802349c:	f108 38ff 	add.w	r8, r8, #4294967295
 80234a0:	e78c      	b.n	80233bc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 80234a2:	b003      	add	sp, #12
 80234a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080234a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80234a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80234ac:	b087      	sub	sp, #28
 80234ae:	468b      	mov	fp, r1
 80234b0:	9204      	str	r2, [sp, #16]
 80234b2:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 80234b6:	9815      	ldr	r0, [sp, #84]	; 0x54
 80234b8:	9201      	str	r2, [sp, #4]
 80234ba:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 80234be:	9205      	str	r2, [sp, #20]
 80234c0:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80234c4:	6841      	ldr	r1, [r0, #4]
 80234c6:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 80234ca:	fb01 2404 	mla	r4, r1, r4, r2
 80234ce:	6802      	ldr	r2, [r0, #0]
 80234d0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80234d4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80234d6:	6812      	ldr	r2, [r2, #0]
 80234d8:	9203      	str	r2, [sp, #12]
 80234da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80234de:	f1bb 0f00 	cmp.w	fp, #0
 80234e2:	dc03      	bgt.n	80234ec <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 80234e4:	9a04      	ldr	r2, [sp, #16]
 80234e6:	2a00      	cmp	r2, #0
 80234e8:	f340 812c 	ble.w	8023744 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29c>
 80234ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80234ee:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80234f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80234f4:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80234f8:	2b00      	cmp	r3, #0
 80234fa:	dd0f      	ble.n	802351c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 80234fc:	1402      	asrs	r2, r0, #16
 80234fe:	d406      	bmi.n	802350e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8023500:	4542      	cmp	r2, r8
 8023502:	da04      	bge.n	802350e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8023504:	140a      	asrs	r2, r1, #16
 8023506:	d402      	bmi.n	802350e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8023508:	9d01      	ldr	r5, [sp, #4]
 802350a:	42aa      	cmp	r2, r5
 802350c:	db07      	blt.n	802351e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802350e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8023510:	4410      	add	r0, r2
 8023512:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023514:	3b01      	subs	r3, #1
 8023516:	4411      	add	r1, r2
 8023518:	3402      	adds	r4, #2
 802351a:	e7ed      	b.n	80234f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 802351c:	d01a      	beq.n	8023554 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xac>
 802351e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023520:	1e5a      	subs	r2, r3, #1
 8023522:	fb05 0502 	mla	r5, r5, r2, r0
 8023526:	142d      	asrs	r5, r5, #16
 8023528:	d40a      	bmi.n	8023540 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 802352a:	4545      	cmp	r5, r8
 802352c:	da08      	bge.n	8023540 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 802352e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023530:	fb05 1202 	mla	r2, r5, r2, r1
 8023534:	1412      	asrs	r2, r2, #16
 8023536:	d403      	bmi.n	8023540 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8023538:	9d01      	ldr	r5, [sp, #4]
 802353a:	42aa      	cmp	r2, r5
 802353c:	f2c0 80a6 	blt.w	802368c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e4>
 8023540:	f04f 0c00 	mov.w	ip, #0
 8023544:	eb03 020c 	add.w	r2, r3, ip
 8023548:	2a00      	cmp	r2, #0
 802354a:	dc3e      	bgt.n	80235ca <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 802354c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023550:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8023554:	f1bb 0f00 	cmp.w	fp, #0
 8023558:	f340 80f4 	ble.w	8023744 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29c>
 802355c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023560:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023564:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8023568:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802356a:	f1bb 0b01 	subs.w	fp, fp, #1
 802356e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023572:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023576:	eeb0 6a62 	vmov.f32	s12, s5
 802357a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802357e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023582:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023586:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 802358a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802358e:	eeb0 6a43 	vmov.f32	s12, s6
 8023592:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023596:	ee12 2a90 	vmov	r2, s5
 802359a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802359e:	fb92 f3f3 	sdiv	r3, r2, r3
 80235a2:	ee13 2a10 	vmov	r2, s6
 80235a6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80235aa:	9313      	str	r3, [sp, #76]	; 0x4c
 80235ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80235ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80235b2:	9a04      	ldr	r2, [sp, #16]
 80235b4:	9314      	str	r3, [sp, #80]	; 0x50
 80235b6:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80235ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80235bc:	eeb0 3a67 	vmov.f32	s6, s15
 80235c0:	bf08      	it	eq
 80235c2:	4613      	moveq	r3, r2
 80235c4:	eef0 2a47 	vmov.f32	s5, s14
 80235c8:	e789      	b.n	80234de <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 80235ca:	1405      	asrs	r5, r0, #16
 80235cc:	d457      	bmi.n	802367e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 80235ce:	4545      	cmp	r5, r8
 80235d0:	da55      	bge.n	802367e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 80235d2:	140a      	asrs	r2, r1, #16
 80235d4:	d453      	bmi.n	802367e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 80235d6:	9e01      	ldr	r6, [sp, #4]
 80235d8:	42b2      	cmp	r2, r6
 80235da:	da50      	bge.n	802367e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 80235dc:	fb08 5202 	mla	r2, r8, r2, r5
 80235e0:	9d03      	ldr	r5, [sp, #12]
 80235e2:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 80235e6:	0e2e      	lsrs	r6, r5, #24
 80235e8:	d049      	beq.n	802367e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 80235ea:	f06f 0201 	mvn.w	r2, #1
 80235ee:	fb02 f20c 	mul.w	r2, r2, ip
 80235f2:	9202      	str	r2, [sp, #8]
 80235f4:	f834 e002 	ldrh.w	lr, [r4, r2]
 80235f8:	9a05      	ldr	r2, [sp, #20]
 80235fa:	4356      	muls	r6, r2
 80235fc:	1c72      	adds	r2, r6, #1
 80235fe:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8023602:	1212      	asrs	r2, r2, #8
 8023604:	fa1f f982 	uxth.w	r9, r2
 8023608:	ea4f 272e 	mov.w	r7, lr, asr #8
 802360c:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8023610:	43d2      	mvns	r2, r2
 8023612:	b2d2      	uxtb	r2, r2
 8023614:	fb16 f609 	smulbb	r6, r6, r9
 8023618:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802361c:	fb07 6702 	mla	r7, r7, r2, r6
 8023620:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8023624:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8023628:	b2ed      	uxtb	r5, r5
 802362a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802362e:	fa5f fe8e 	uxtb.w	lr, lr
 8023632:	fb15 f509 	smulbb	r5, r5, r9
 8023636:	fb0e 5502 	mla	r5, lr, r2, r5
 802363a:	b2bf      	uxth	r7, r7
 802363c:	fb1a fa09 	smulbb	sl, sl, r9
 8023640:	b2ad      	uxth	r5, r5
 8023642:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8023646:	fb06 a602 	mla	r6, r6, r2, sl
 802364a:	1c7a      	adds	r2, r7, #1
 802364c:	f105 0a01 	add.w	sl, r5, #1
 8023650:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8023654:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8023658:	b2b6      	uxth	r6, r6
 802365a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 802365e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8023662:	ea47 070a 	orr.w	r7, r7, sl
 8023666:	f106 0a01 	add.w	sl, r6, #1
 802366a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 802366e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8023672:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8023676:	9a02      	ldr	r2, [sp, #8]
 8023678:	ea47 070a 	orr.w	r7, r7, sl
 802367c:	52a7      	strh	r7, [r4, r2]
 802367e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8023680:	4410      	add	r0, r2
 8023682:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023684:	f10c 3cff 	add.w	ip, ip, #4294967295
 8023688:	4411      	add	r1, r2
 802368a:	e75b      	b.n	8023544 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 802368c:	f04f 0e00 	mov.w	lr, #0
 8023690:	eba3 020e 	sub.w	r2, r3, lr
 8023694:	2a00      	cmp	r2, #0
 8023696:	f77f af59 	ble.w	802354c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa4>
 802369a:	1405      	asrs	r5, r0, #16
 802369c:	140a      	asrs	r2, r1, #16
 802369e:	fb08 5202 	mla	r2, r8, r2, r5
 80236a2:	9d03      	ldr	r5, [sp, #12]
 80236a4:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 80236a8:	0e2e      	lsrs	r6, r5, #24
 80236aa:	d044      	beq.n	8023736 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80236ac:	9a05      	ldr	r2, [sp, #20]
 80236ae:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 80236b2:	4356      	muls	r6, r2
 80236b4:	1c72      	adds	r2, r6, #1
 80236b6:	eb02 2226 	add.w	r2, r2, r6, asr #8
 80236ba:	1212      	asrs	r2, r2, #8
 80236bc:	fa1f f982 	uxth.w	r9, r2
 80236c0:	ea4f 272c 	mov.w	r7, ip, asr #8
 80236c4:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80236c8:	43d2      	mvns	r2, r2
 80236ca:	b2d2      	uxtb	r2, r2
 80236cc:	fb16 f609 	smulbb	r6, r6, r9
 80236d0:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80236d4:	fb07 6702 	mla	r7, r7, r2, r6
 80236d8:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80236dc:	ea4f 06ec 	mov.w	r6, ip, asr #3
 80236e0:	b2ed      	uxtb	r5, r5
 80236e2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80236e6:	fa5f fc8c 	uxtb.w	ip, ip
 80236ea:	fb15 f509 	smulbb	r5, r5, r9
 80236ee:	fb0c 5502 	mla	r5, ip, r2, r5
 80236f2:	b2bf      	uxth	r7, r7
 80236f4:	fb1a fa09 	smulbb	sl, sl, r9
 80236f8:	b2ad      	uxth	r5, r5
 80236fa:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80236fe:	fb06 a602 	mla	r6, r6, r2, sl
 8023702:	1c7a      	adds	r2, r7, #1
 8023704:	f105 0a01 	add.w	sl, r5, #1
 8023708:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 802370c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8023710:	b2b6      	uxth	r6, r6
 8023712:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8023716:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 802371a:	ea47 070a 	orr.w	r7, r7, sl
 802371e:	f106 0a01 	add.w	sl, r6, #1
 8023722:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8023726:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802372a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 802372e:	ea47 070a 	orr.w	r7, r7, sl
 8023732:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 8023736:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8023738:	4410      	add	r0, r2
 802373a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802373c:	f10e 0e01 	add.w	lr, lr, #1
 8023740:	4411      	add	r1, r2
 8023742:	e7a5      	b.n	8023690 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e8>
 8023744:	b007      	add	sp, #28
 8023746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802374c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802374c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023750:	b087      	sub	sp, #28
 8023752:	468b      	mov	fp, r1
 8023754:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023756:	9205      	str	r2, [sp, #20]
 8023758:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 802375c:	9201      	str	r2, [sp, #4]
 802375e:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8023762:	6861      	ldr	r1, [r4, #4]
 8023764:	f9bd 9060 	ldrsh.w	r9, [sp, #96]	; 0x60
 8023768:	fb01 2000 	mla	r0, r1, r0, r2
 802376c:	6822      	ldr	r2, [r4, #0]
 802376e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8023772:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8023774:	6812      	ldr	r2, [r2, #0]
 8023776:	9203      	str	r2, [sp, #12]
 8023778:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802377c:	f1bb 0f00 	cmp.w	fp, #0
 8023780:	dc03      	bgt.n	802378a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 8023782:	9a05      	ldr	r2, [sp, #20]
 8023784:	2a00      	cmp	r2, #0
 8023786:	f340 814b 	ble.w	8023a20 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d4>
 802378a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802378c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8023790:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023792:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8023796:	2b00      	cmp	r3, #0
 8023798:	dd0f      	ble.n	80237ba <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 802379a:	140c      	asrs	r4, r1, #16
 802379c:	d406      	bmi.n	80237ac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 802379e:	454c      	cmp	r4, r9
 80237a0:	da04      	bge.n	80237ac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 80237a2:	1414      	asrs	r4, r2, #16
 80237a4:	d402      	bmi.n	80237ac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 80237a6:	9d01      	ldr	r5, [sp, #4]
 80237a8:	42ac      	cmp	r4, r5
 80237aa:	db07      	blt.n	80237bc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80237ac:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80237ae:	4421      	add	r1, r4
 80237b0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80237b2:	3b01      	subs	r3, #1
 80237b4:	4422      	add	r2, r4
 80237b6:	3002      	adds	r0, #2
 80237b8:	e7ed      	b.n	8023796 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 80237ba:	d018      	beq.n	80237ee <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 80237bc:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80237be:	1e5c      	subs	r4, r3, #1
 80237c0:	fb05 1504 	mla	r5, r5, r4, r1
 80237c4:	142d      	asrs	r5, r5, #16
 80237c6:	d40a      	bmi.n	80237de <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 80237c8:	454d      	cmp	r5, r9
 80237ca:	da08      	bge.n	80237de <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 80237cc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80237ce:	fb05 2404 	mla	r4, r5, r4, r2
 80237d2:	1424      	asrs	r4, r4, #16
 80237d4:	d403      	bmi.n	80237de <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 80237d6:	9d01      	ldr	r5, [sp, #4]
 80237d8:	42ac      	cmp	r4, r5
 80237da:	f2c0 80bb 	blt.w	8023954 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x208>
 80237de:	2700      	movs	r7, #0
 80237e0:	19dc      	adds	r4, r3, r7
 80237e2:	2c00      	cmp	r4, #0
 80237e4:	dc3e      	bgt.n	8023864 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 80237e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80237ea:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80237ee:	f1bb 0f00 	cmp.w	fp, #0
 80237f2:	f340 8115 	ble.w	8023a20 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d4>
 80237f6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80237fa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80237fe:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8023802:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023804:	f1bb 0b01 	subs.w	fp, fp, #1
 8023808:	ee31 1a05 	vadd.f32	s2, s2, s10
 802380c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023810:	eeb0 6a62 	vmov.f32	s12, s5
 8023814:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023818:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802381c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023820:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8023824:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023828:	eeb0 6a43 	vmov.f32	s12, s6
 802382c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023830:	ee12 2a90 	vmov	r2, s5
 8023834:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023838:	fb92 f3f3 	sdiv	r3, r2, r3
 802383c:	ee13 2a10 	vmov	r2, s6
 8023840:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023844:	9313      	str	r3, [sp, #76]	; 0x4c
 8023846:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023848:	fb92 f3f3 	sdiv	r3, r2, r3
 802384c:	9a05      	ldr	r2, [sp, #20]
 802384e:	9314      	str	r3, [sp, #80]	; 0x50
 8023850:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8023854:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023856:	eeb0 3a67 	vmov.f32	s6, s15
 802385a:	bf08      	it	eq
 802385c:	4613      	moveq	r3, r2
 802385e:	eef0 2a47 	vmov.f32	s5, s14
 8023862:	e78b      	b.n	802377c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 8023864:	140d      	asrs	r5, r1, #16
 8023866:	d45c      	bmi.n	8023922 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8023868:	454d      	cmp	r5, r9
 802386a:	da5a      	bge.n	8023922 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 802386c:	1414      	asrs	r4, r2, #16
 802386e:	d458      	bmi.n	8023922 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8023870:	9e01      	ldr	r6, [sp, #4]
 8023872:	42b4      	cmp	r4, r6
 8023874:	da55      	bge.n	8023922 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8023876:	fb09 5404 	mla	r4, r9, r4, r5
 802387a:	9d03      	ldr	r5, [sp, #12]
 802387c:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 8023880:	ea5f 6e14 	movs.w	lr, r4, lsr #24
 8023884:	d04d      	beq.n	8023922 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8023886:	0a26      	lsrs	r6, r4, #8
 8023888:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802388c:	fa5f f58e 	uxtb.w	r5, lr
 8023890:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8023894:	9604      	str	r6, [sp, #16]
 8023896:	d04a      	beq.n	802392e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e2>
 8023898:	f06f 0601 	mvn.w	r6, #1
 802389c:	437e      	muls	r6, r7
 802389e:	fa1f fa85 	uxth.w	sl, r5
 80238a2:	f830 8006 	ldrh.w	r8, [r0, r6]
 80238a6:	9602      	str	r6, [sp, #8]
 80238a8:	ea4f 2e28 	mov.w	lr, r8, asr #8
 80238ac:	43ed      	mvns	r5, r5
 80238ae:	fa5f fc8c 	uxtb.w	ip, ip
 80238b2:	b2ed      	uxtb	r5, r5
 80238b4:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80238b8:	fb1c fc0a 	smulbb	ip, ip, sl
 80238bc:	fb0e cc05 	mla	ip, lr, r5, ip
 80238c0:	b2e4      	uxtb	r4, r4
 80238c2:	ea4f 0ee8 	mov.w	lr, r8, asr #3
 80238c6:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80238ca:	f89d 6010 	ldrb.w	r6, [sp, #16]
 80238ce:	fa5f f888 	uxtb.w	r8, r8
 80238d2:	fb14 f40a 	smulbb	r4, r4, sl
 80238d6:	fb08 4405 	mla	r4, r8, r5, r4
 80238da:	b2a4      	uxth	r4, r4
 80238dc:	fa1f fc8c 	uxth.w	ip, ip
 80238e0:	fb16 f60a 	smulbb	r6, r6, sl
 80238e4:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80238e8:	fb0e 6e05 	mla	lr, lr, r5, r6
 80238ec:	1c66      	adds	r6, r4, #1
 80238ee:	f10c 0501 	add.w	r5, ip, #1
 80238f2:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 80238f6:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80238fa:	fa1f fe8e 	uxth.w	lr, lr
 80238fe:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8023902:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8023906:	ea4c 0c06 	orr.w	ip, ip, r6
 802390a:	f10e 0601 	add.w	r6, lr, #1
 802390e:	eb06 261e 	add.w	r6, r6, lr, lsr #8
 8023912:	0976      	lsrs	r6, r6, #5
 8023914:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8023918:	9c02      	ldr	r4, [sp, #8]
 802391a:	ea4c 0c06 	orr.w	ip, ip, r6
 802391e:	f820 c004 	strh.w	ip, [r0, r4]
 8023922:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023924:	4421      	add	r1, r4
 8023926:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023928:	3f01      	subs	r7, #1
 802392a:	4422      	add	r2, r4
 802392c:	e758      	b.n	80237e0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 802392e:	4e3e      	ldr	r6, [pc, #248]	; (8023a28 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2dc>)
 8023930:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8023934:	ea06 2c0c 	and.w	ip, r6, ip, lsl #8
 8023938:	ea4c 0c04 	orr.w	ip, ip, r4
 802393c:	9c04      	ldr	r4, [sp, #16]
 802393e:	f06f 0501 	mvn.w	r5, #1
 8023942:	00e6      	lsls	r6, r4, #3
 8023944:	437d      	muls	r5, r7
 8023946:	f406 64fc 	and.w	r4, r6, #2016	; 0x7e0
 802394a:	ea4c 0c04 	orr.w	ip, ip, r4
 802394e:	f820 c005 	strh.w	ip, [r0, r5]
 8023952:	e7e6      	b.n	8023922 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8023954:	f04f 0800 	mov.w	r8, #0
 8023958:	eba3 0408 	sub.w	r4, r3, r8
 802395c:	2c00      	cmp	r4, #0
 802395e:	f77f af42 	ble.w	80237e6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 8023962:	140d      	asrs	r5, r1, #16
 8023964:	1414      	asrs	r4, r2, #16
 8023966:	fb09 5404 	mla	r4, r9, r4, r5
 802396a:	9d03      	ldr	r5, [sp, #12]
 802396c:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 8023970:	ea5f 6c14 	movs.w	ip, r4, lsr #24
 8023974:	d042      	beq.n	80239fc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8023976:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802397a:	fa5f f58c 	uxtb.w	r5, ip
 802397e:	ea4f 4714 	mov.w	r7, r4, lsr #16
 8023982:	ea4f 2614 	mov.w	r6, r4, lsr #8
 8023986:	d040      	beq.n	8023a0a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 8023988:	f830 e018 	ldrh.w	lr, [r0, r8, lsl #1]
 802398c:	fa1f fa85 	uxth.w	sl, r5
 8023990:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8023994:	43ed      	mvns	r5, r5
 8023996:	b2ff      	uxtb	r7, r7
 8023998:	b2ed      	uxtb	r5, r5
 802399a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802399e:	fb17 f70a 	smulbb	r7, r7, sl
 80239a2:	fb0c 7705 	mla	r7, ip, r5, r7
 80239a6:	b2e4      	uxtb	r4, r4
 80239a8:	ea4f 0cee 	mov.w	ip, lr, asr #3
 80239ac:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80239b0:	fa5f fe8e 	uxtb.w	lr, lr
 80239b4:	fb14 f40a 	smulbb	r4, r4, sl
 80239b8:	fb0e 4405 	mla	r4, lr, r5, r4
 80239bc:	b2f6      	uxtb	r6, r6
 80239be:	b2bf      	uxth	r7, r7
 80239c0:	fb16 f60a 	smulbb	r6, r6, sl
 80239c4:	b2a4      	uxth	r4, r4
 80239c6:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80239ca:	fb0c 6c05 	mla	ip, ip, r5, r6
 80239ce:	1c7d      	adds	r5, r7, #1
 80239d0:	1c66      	adds	r6, r4, #1
 80239d2:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 80239d6:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 80239da:	fa1f fc8c 	uxth.w	ip, ip
 80239de:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80239e2:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80239e6:	4337      	orrs	r7, r6
 80239e8:	f10c 0601 	add.w	r6, ip, #1
 80239ec:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 80239f0:	0976      	lsrs	r6, r6, #5
 80239f2:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80239f6:	4337      	orrs	r7, r6
 80239f8:	f820 7018 	strh.w	r7, [r0, r8, lsl #1]
 80239fc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80239fe:	4421      	add	r1, r4
 8023a00:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023a02:	f108 0801 	add.w	r8, r8, #1
 8023a06:	4422      	add	r2, r4
 8023a08:	e7a6      	b.n	8023958 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x20c>
 8023a0a:	4d07      	ldr	r5, [pc, #28]	; (8023a28 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2dc>)
 8023a0c:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8023a10:	ea05 2707 	and.w	r7, r5, r7, lsl #8
 8023a14:	00f6      	lsls	r6, r6, #3
 8023a16:	4327      	orrs	r7, r4
 8023a18:	f406 64fc 	and.w	r4, r6, #2016	; 0x7e0
 8023a1c:	4327      	orrs	r7, r4
 8023a1e:	e7eb      	b.n	80239f8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 8023a20:	b007      	add	sp, #28
 8023a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023a26:	bf00      	nop
 8023a28:	fffff800 	.word	0xfffff800

08023a2c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8023a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a30:	b087      	sub	sp, #28
 8023a32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8023a36:	9204      	str	r2, [sp, #16]
 8023a38:	f9bd 2060 	ldrsh.w	r2, [sp, #96]	; 0x60
 8023a3c:	9200      	str	r2, [sp, #0]
 8023a3e:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8023a42:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023a44:	9201      	str	r2, [sp, #4]
 8023a46:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8023a4a:	9205      	str	r2, [sp, #20]
 8023a4c:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8023a50:	6860      	ldr	r0, [r4, #4]
 8023a52:	fb00 2505 	mla	r5, r0, r5, r2
 8023a56:	6822      	ldr	r2, [r4, #0]
 8023a58:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8023a5c:	9a00      	ldr	r2, [sp, #0]
 8023a5e:	3201      	adds	r2, #1
 8023a60:	f022 0201 	bic.w	r2, r2, #1
 8023a64:	9202      	str	r2, [sp, #8]
 8023a66:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8023a68:	6812      	ldr	r2, [r2, #0]
 8023a6a:	9203      	str	r2, [sp, #12]
 8023a6c:	2900      	cmp	r1, #0
 8023a6e:	dc03      	bgt.n	8023a78 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 8023a70:	9a04      	ldr	r2, [sp, #16]
 8023a72:	2a00      	cmp	r2, #0
 8023a74:	f340 814c 	ble.w	8023d10 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e4>
 8023a78:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023a7a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8023a7e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023a80:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8023a84:	2b00      	cmp	r3, #0
 8023a86:	dd10      	ble.n	8023aaa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8023a88:	1422      	asrs	r2, r4, #16
 8023a8a:	d407      	bmi.n	8023a9c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8023a8c:	9e00      	ldr	r6, [sp, #0]
 8023a8e:	4296      	cmp	r6, r2
 8023a90:	dd04      	ble.n	8023a9c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8023a92:	1402      	asrs	r2, r0, #16
 8023a94:	d402      	bmi.n	8023a9c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8023a96:	9e01      	ldr	r6, [sp, #4]
 8023a98:	42b2      	cmp	r2, r6
 8023a9a:	db07      	blt.n	8023aac <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x80>
 8023a9c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8023a9e:	4414      	add	r4, r2
 8023aa0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023aa2:	3b01      	subs	r3, #1
 8023aa4:	4410      	add	r0, r2
 8023aa6:	3502      	adds	r5, #2
 8023aa8:	e7ec      	b.n	8023a84 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 8023aaa:	d00f      	beq.n	8023acc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 8023aac:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8023aae:	1e5a      	subs	r2, r3, #1
 8023ab0:	fb06 4602 	mla	r6, r6, r2, r4
 8023ab4:	1436      	asrs	r6, r6, #16
 8023ab6:	d542      	bpl.n	8023b3e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x112>
 8023ab8:	469a      	mov	sl, r3
 8023aba:	46a9      	mov	r9, r5
 8023abc:	f1ba 0f00 	cmp.w	sl, #0
 8023ac0:	f300 80b5 	bgt.w	8023c2e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x202>
 8023ac4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023ac8:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8023acc:	2900      	cmp	r1, #0
 8023ace:	f340 811f 	ble.w	8023d10 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e4>
 8023ad2:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023ad6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023ada:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8023ade:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023ae0:	3901      	subs	r1, #1
 8023ae2:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023ae6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023aea:	eeb0 6a62 	vmov.f32	s12, s5
 8023aee:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023af2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023af6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023afa:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8023afe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023b02:	eeb0 6a43 	vmov.f32	s12, s6
 8023b06:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023b0a:	ee12 2a90 	vmov	r2, s5
 8023b0e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023b12:	fb92 f3f3 	sdiv	r3, r2, r3
 8023b16:	ee13 2a10 	vmov	r2, s6
 8023b1a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023b1e:	9313      	str	r3, [sp, #76]	; 0x4c
 8023b20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023b22:	fb92 f3f3 	sdiv	r3, r2, r3
 8023b26:	9a04      	ldr	r2, [sp, #16]
 8023b28:	9314      	str	r3, [sp, #80]	; 0x50
 8023b2a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8023b2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023b30:	eeb0 3a67 	vmov.f32	s6, s15
 8023b34:	bf08      	it	eq
 8023b36:	4613      	moveq	r3, r2
 8023b38:	eef0 2a47 	vmov.f32	s5, s14
 8023b3c:	e796      	b.n	8023a6c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 8023b3e:	9f00      	ldr	r7, [sp, #0]
 8023b40:	42b7      	cmp	r7, r6
 8023b42:	ddb9      	ble.n	8023ab8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 8023b44:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8023b46:	fb06 0202 	mla	r2, r6, r2, r0
 8023b4a:	1412      	asrs	r2, r2, #16
 8023b4c:	d4b4      	bmi.n	8023ab8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 8023b4e:	9e01      	ldr	r6, [sp, #4]
 8023b50:	42b2      	cmp	r2, r6
 8023b52:	dab1      	bge.n	8023ab8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 8023b54:	f04f 0800 	mov.w	r8, #0
 8023b58:	eba3 0208 	sub.w	r2, r3, r8
 8023b5c:	2a00      	cmp	r2, #0
 8023b5e:	ddb1      	ble.n	8023ac4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8023b60:	9f02      	ldr	r7, [sp, #8]
 8023b62:	1422      	asrs	r2, r4, #16
 8023b64:	1406      	asrs	r6, r0, #16
 8023b66:	fb07 2606 	mla	r6, r7, r6, r2
 8023b6a:	0872      	lsrs	r2, r6, #1
 8023b6c:	9f03      	ldr	r7, [sp, #12]
 8023b6e:	5cba      	ldrb	r2, [r7, r2]
 8023b70:	07f6      	lsls	r6, r6, #31
 8023b72:	bf54      	ite	pl
 8023b74:	f002 020f 	andpl.w	r2, r2, #15
 8023b78:	1112      	asrmi	r2, r2, #4
 8023b7a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023b7e:	b2d2      	uxtb	r2, r2
 8023b80:	2a00      	cmp	r2, #0
 8023b82:	d04d      	beq.n	8023c20 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f4>
 8023b84:	9f05      	ldr	r7, [sp, #20]
 8023b86:	4e64      	ldr	r6, [pc, #400]	; (8023d18 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ec>)
 8023b88:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 8023b8c:	6836      	ldr	r6, [r6, #0]
 8023b8e:	437a      	muls	r2, r7
 8023b90:	1c57      	adds	r7, r2, #1
 8023b92:	eb07 2222 	add.w	r2, r7, r2, asr #8
 8023b96:	1212      	asrs	r2, r2, #8
 8023b98:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8023b9c:	fa1f fa82 	uxth.w	sl, r2
 8023ba0:	ea4f 272e 	mov.w	r7, lr, asr #8
 8023ba4:	43d2      	mvns	r2, r2
 8023ba6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8023baa:	b2d2      	uxtb	r2, r2
 8023bac:	fb1c fc0a 	smulbb	ip, ip, sl
 8023bb0:	ea4f 09d6 	mov.w	r9, r6, lsr #3
 8023bb4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8023bb8:	fb07 c702 	mla	r7, r7, r2, ip
 8023bbc:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8023bc0:	ea4f 0cee 	mov.w	ip, lr, asr #3
 8023bc4:	fb19 f90a 	smulbb	r9, r9, sl
 8023bc8:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8023bcc:	00f6      	lsls	r6, r6, #3
 8023bce:	fb0c 9c02 	mla	ip, ip, r2, r9
 8023bd2:	b2f6      	uxtb	r6, r6
 8023bd4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8023bd8:	fa1f fc8c 	uxth.w	ip, ip
 8023bdc:	fa5f fe8e 	uxtb.w	lr, lr
 8023be0:	fb16 f60a 	smulbb	r6, r6, sl
 8023be4:	b2bf      	uxth	r7, r7
 8023be6:	fb0e 6602 	mla	r6, lr, r2, r6
 8023bea:	f10c 0901 	add.w	r9, ip, #1
 8023bee:	b2b6      	uxth	r6, r6
 8023bf0:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 8023bf4:	f107 0b01 	add.w	fp, r7, #1
 8023bf8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8023bfc:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8023c00:	f106 0e01 	add.w	lr, r6, #1
 8023c04:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8023c08:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8023c0c:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 8023c10:	ea4c 0c07 	orr.w	ip, ip, r7
 8023c14:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8023c18:	ea4c 0c0e 	orr.w	ip, ip, lr
 8023c1c:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 8023c20:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8023c22:	4414      	add	r4, r2
 8023c24:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023c26:	f108 0801 	add.w	r8, r8, #1
 8023c2a:	4410      	add	r0, r2
 8023c2c:	e794      	b.n	8023b58 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12c>
 8023c2e:	1422      	asrs	r2, r4, #16
 8023c30:	d465      	bmi.n	8023cfe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d2>
 8023c32:	9e00      	ldr	r6, [sp, #0]
 8023c34:	4296      	cmp	r6, r2
 8023c36:	dd62      	ble.n	8023cfe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d2>
 8023c38:	1406      	asrs	r6, r0, #16
 8023c3a:	d460      	bmi.n	8023cfe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d2>
 8023c3c:	9f01      	ldr	r7, [sp, #4]
 8023c3e:	42be      	cmp	r6, r7
 8023c40:	da5d      	bge.n	8023cfe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d2>
 8023c42:	9f02      	ldr	r7, [sp, #8]
 8023c44:	fb06 2607 	mla	r6, r6, r7, r2
 8023c48:	0872      	lsrs	r2, r6, #1
 8023c4a:	9f03      	ldr	r7, [sp, #12]
 8023c4c:	5cba      	ldrb	r2, [r7, r2]
 8023c4e:	07f7      	lsls	r7, r6, #31
 8023c50:	bf54      	ite	pl
 8023c52:	f002 020f 	andpl.w	r2, r2, #15
 8023c56:	1112      	asrmi	r2, r2, #4
 8023c58:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023c5c:	b2d2      	uxtb	r2, r2
 8023c5e:	2a00      	cmp	r2, #0
 8023c60:	d04d      	beq.n	8023cfe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d2>
 8023c62:	9f05      	ldr	r7, [sp, #20]
 8023c64:	4e2c      	ldr	r6, [pc, #176]	; (8023d18 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ec>)
 8023c66:	f8b9 e000 	ldrh.w	lr, [r9]
 8023c6a:	6836      	ldr	r6, [r6, #0]
 8023c6c:	437a      	muls	r2, r7
 8023c6e:	1c57      	adds	r7, r2, #1
 8023c70:	eb07 2222 	add.w	r2, r7, r2, asr #8
 8023c74:	1212      	asrs	r2, r2, #8
 8023c76:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8023c7a:	fa1f fb82 	uxth.w	fp, r2
 8023c7e:	ea4f 272e 	mov.w	r7, lr, asr #8
 8023c82:	43d2      	mvns	r2, r2
 8023c84:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8023c88:	b2d2      	uxtb	r2, r2
 8023c8a:	fb1c fc0b 	smulbb	ip, ip, fp
 8023c8e:	ea4f 08d6 	mov.w	r8, r6, lsr #3
 8023c92:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8023c96:	fb07 c702 	mla	r7, r7, r2, ip
 8023c9a:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8023c9e:	ea4f 0cee 	mov.w	ip, lr, asr #3
 8023ca2:	fb18 f80b 	smulbb	r8, r8, fp
 8023ca6:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8023caa:	00f6      	lsls	r6, r6, #3
 8023cac:	fb0c 8c02 	mla	ip, ip, r2, r8
 8023cb0:	b2f6      	uxtb	r6, r6
 8023cb2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8023cb6:	fa1f fc8c 	uxth.w	ip, ip
 8023cba:	fa5f fe8e 	uxtb.w	lr, lr
 8023cbe:	fb16 f60b 	smulbb	r6, r6, fp
 8023cc2:	b2bf      	uxth	r7, r7
 8023cc4:	fb0e 6602 	mla	r6, lr, r2, r6
 8023cc8:	f10c 0801 	add.w	r8, ip, #1
 8023ccc:	b2b6      	uxth	r6, r6
 8023cce:	eb08 2c1c 	add.w	ip, r8, ip, lsr #8
 8023cd2:	f107 0801 	add.w	r8, r7, #1
 8023cd6:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8023cda:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8023cde:	f106 0e01 	add.w	lr, r6, #1
 8023ce2:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8023ce6:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8023cea:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 8023cee:	ea4c 0c07 	orr.w	ip, ip, r7
 8023cf2:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8023cf6:	ea4c 0c0e 	orr.w	ip, ip, lr
 8023cfa:	f8a9 c000 	strh.w	ip, [r9]
 8023cfe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8023d00:	4414      	add	r4, r2
 8023d02:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023d04:	f109 0902 	add.w	r9, r9, #2
 8023d08:	4410      	add	r0, r2
 8023d0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8023d0e:	e6d5      	b.n	8023abc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 8023d10:	b007      	add	sp, #28
 8023d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023d16:	bf00      	nop
 8023d18:	200127fc 	.word	0x200127fc

08023d1c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8023d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d20:	b087      	sub	sp, #28
 8023d22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8023d26:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023d28:	9205      	str	r2, [sp, #20]
 8023d2a:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8023d2e:	9201      	str	r2, [sp, #4]
 8023d30:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8023d34:	6860      	ldr	r0, [r4, #4]
 8023d36:	f9bd b060 	ldrsh.w	fp, [sp, #96]	; 0x60
 8023d3a:	9100      	str	r1, [sp, #0]
 8023d3c:	fb00 2505 	mla	r5, r0, r5, r2
 8023d40:	6822      	ldr	r2, [r4, #0]
 8023d42:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8023d46:	f10b 0201 	add.w	r2, fp, #1
 8023d4a:	f022 0201 	bic.w	r2, r2, #1
 8023d4e:	9203      	str	r2, [sp, #12]
 8023d50:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8023d52:	6812      	ldr	r2, [r2, #0]
 8023d54:	9204      	str	r2, [sp, #16]
 8023d56:	9a00      	ldr	r2, [sp, #0]
 8023d58:	2a00      	cmp	r2, #0
 8023d5a:	dc03      	bgt.n	8023d64 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 8023d5c:	9a05      	ldr	r2, [sp, #20]
 8023d5e:	2a00      	cmp	r2, #0
 8023d60:	f340 8157 	ble.w	8024012 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 8023d64:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023d66:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8023d6a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023d6c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8023d70:	2b00      	cmp	r3, #0
 8023d72:	dd0f      	ble.n	8023d94 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8023d74:	1422      	asrs	r2, r4, #16
 8023d76:	d406      	bmi.n	8023d86 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8023d78:	4593      	cmp	fp, r2
 8023d7a:	dd04      	ble.n	8023d86 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8023d7c:	1402      	asrs	r2, r0, #16
 8023d7e:	d402      	bmi.n	8023d86 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8023d80:	9e01      	ldr	r6, [sp, #4]
 8023d82:	42b2      	cmp	r2, r6
 8023d84:	db07      	blt.n	8023d96 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8023d86:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8023d88:	4414      	add	r4, r2
 8023d8a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023d8c:	3b01      	subs	r3, #1
 8023d8e:	4410      	add	r0, r2
 8023d90:	3502      	adds	r5, #2
 8023d92:	e7ed      	b.n	8023d70 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x54>
 8023d94:	d018      	beq.n	8023dc8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xac>
 8023d96:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8023d98:	1e5a      	subs	r2, r3, #1
 8023d9a:	fb06 4602 	mla	r6, r6, r2, r4
 8023d9e:	1436      	asrs	r6, r6, #16
 8023da0:	d40a      	bmi.n	8023db8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 8023da2:	45b3      	cmp	fp, r6
 8023da4:	dd08      	ble.n	8023db8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 8023da6:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8023da8:	fb06 0202 	mla	r2, r6, r2, r0
 8023dac:	1412      	asrs	r2, r2, #16
 8023dae:	d403      	bmi.n	8023db8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 8023db0:	9e01      	ldr	r6, [sp, #4]
 8023db2:	42b2      	cmp	r2, r6
 8023db4:	f2c0 80bf 	blt.w	8023f36 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21a>
 8023db8:	2700      	movs	r7, #0
 8023dba:	19da      	adds	r2, r3, r7
 8023dbc:	2a00      	cmp	r2, #0
 8023dbe:	dc3f      	bgt.n	8023e40 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 8023dc0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023dc4:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8023dc8:	9b00      	ldr	r3, [sp, #0]
 8023dca:	2b00      	cmp	r3, #0
 8023dcc:	f340 8121 	ble.w	8024012 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 8023dd0:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023dd4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023dd8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8023ddc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023dde:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023de2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023de6:	eeb0 6a62 	vmov.f32	s12, s5
 8023dea:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023dee:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023df2:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023df6:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8023dfa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023dfe:	eeb0 6a43 	vmov.f32	s12, s6
 8023e02:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023e06:	ee12 2a90 	vmov	r2, s5
 8023e0a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023e0e:	fb92 f3f3 	sdiv	r3, r2, r3
 8023e12:	ee13 2a10 	vmov	r2, s6
 8023e16:	9313      	str	r3, [sp, #76]	; 0x4c
 8023e18:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023e1a:	fb92 f3f3 	sdiv	r3, r2, r3
 8023e1e:	9314      	str	r3, [sp, #80]	; 0x50
 8023e20:	9b00      	ldr	r3, [sp, #0]
 8023e22:	9a05      	ldr	r2, [sp, #20]
 8023e24:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023e28:	3b01      	subs	r3, #1
 8023e2a:	9300      	str	r3, [sp, #0]
 8023e2c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8023e30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023e32:	eeb0 3a67 	vmov.f32	s6, s15
 8023e36:	bf08      	it	eq
 8023e38:	4613      	moveq	r3, r2
 8023e3a:	eef0 2a47 	vmov.f32	s5, s14
 8023e3e:	e78a      	b.n	8023d56 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a>
 8023e40:	1422      	asrs	r2, r4, #16
 8023e42:	d466      	bmi.n	8023f12 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 8023e44:	4593      	cmp	fp, r2
 8023e46:	dd64      	ble.n	8023f12 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 8023e48:	1406      	asrs	r6, r0, #16
 8023e4a:	d462      	bmi.n	8023f12 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 8023e4c:	9901      	ldr	r1, [sp, #4]
 8023e4e:	428e      	cmp	r6, r1
 8023e50:	da5f      	bge.n	8023f12 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 8023e52:	9903      	ldr	r1, [sp, #12]
 8023e54:	fb06 2601 	mla	r6, r6, r1, r2
 8023e58:	0872      	lsrs	r2, r6, #1
 8023e5a:	9904      	ldr	r1, [sp, #16]
 8023e5c:	5c8a      	ldrb	r2, [r1, r2]
 8023e5e:	07f6      	lsls	r6, r6, #31
 8023e60:	bf54      	ite	pl
 8023e62:	f002 020f 	andpl.w	r2, r2, #15
 8023e66:	1112      	asrmi	r2, r2, #4
 8023e68:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023e6c:	b2d2      	uxtb	r2, r2
 8023e6e:	2a00      	cmp	r2, #0
 8023e70:	d04f      	beq.n	8023f12 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 8023e72:	4969      	ldr	r1, [pc, #420]	; (8024018 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fc>)
 8023e74:	f8d1 c000 	ldr.w	ip, [r1]
 8023e78:	2aff      	cmp	r2, #255	; 0xff
 8023e7a:	ea4f 291c 	mov.w	r9, ip, lsr #8
 8023e7e:	ea4f 06dc 	mov.w	r6, ip, lsr #3
 8023e82:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8023e86:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 8023e8a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8023e8e:	fa5f fc8c 	uxtb.w	ip, ip
 8023e92:	d044      	beq.n	8023f1e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x202>
 8023e94:	f06f 0101 	mvn.w	r1, #1
 8023e98:	4379      	muls	r1, r7
 8023e9a:	fa1f fa82 	uxth.w	sl, r2
 8023e9e:	f835 8001 	ldrh.w	r8, [r5, r1]
 8023ea2:	9102      	str	r1, [sp, #8]
 8023ea4:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8023ea8:	43d2      	mvns	r2, r2
 8023eaa:	b2d2      	uxtb	r2, r2
 8023eac:	fb19 f90a 	smulbb	r9, r9, sl
 8023eb0:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8023eb4:	fb0e 9e02 	mla	lr, lr, r2, r9
 8023eb8:	ea4f 09e8 	mov.w	r9, r8, asr #3
 8023ebc:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8023ec0:	fb16 f60a 	smulbb	r6, r6, sl
 8023ec4:	fb09 6602 	mla	r6, r9, r2, r6
 8023ec8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8023ecc:	b2b6      	uxth	r6, r6
 8023ece:	fa5f f888 	uxtb.w	r8, r8
 8023ed2:	fb1c fc0a 	smulbb	ip, ip, sl
 8023ed6:	fa1f fe8e 	uxth.w	lr, lr
 8023eda:	fb08 cc02 	mla	ip, r8, r2, ip
 8023ede:	f106 0901 	add.w	r9, r6, #1
 8023ee2:	fa1f fc8c 	uxth.w	ip, ip
 8023ee6:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 8023eea:	f10e 0901 	add.w	r9, lr, #1
 8023eee:	0976      	lsrs	r6, r6, #5
 8023ef0:	eb09 2e1e 	add.w	lr, r9, lr, lsr #8
 8023ef4:	f10c 0201 	add.w	r2, ip, #1
 8023ef8:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8023efc:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8023f00:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8023f04:	ea46 060e 	orr.w	r6, r6, lr
 8023f08:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8023f0c:	ea46 060c 	orr.w	r6, r6, ip
 8023f10:	526e      	strh	r6, [r5, r1]
 8023f12:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8023f14:	4414      	add	r4, r2
 8023f16:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023f18:	3f01      	subs	r7, #1
 8023f1a:	4410      	add	r0, r2
 8023f1c:	e74d      	b.n	8023dba <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 8023f1e:	f06f 0201 	mvn.w	r2, #1
 8023f22:	00f6      	lsls	r6, r6, #3
 8023f24:	fb02 f807 	mul.w	r8, r2, r7
 8023f28:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
 8023f2c:	ea46 06dc 	orr.w	r6, r6, ip, lsr #3
 8023f30:	f825 6008 	strh.w	r6, [r5, r8]
 8023f34:	e7ed      	b.n	8023f12 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 8023f36:	f04f 0800 	mov.w	r8, #0
 8023f3a:	eba3 0208 	sub.w	r2, r3, r8
 8023f3e:	2a00      	cmp	r2, #0
 8023f40:	f77f af3e 	ble.w	8023dc0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa4>
 8023f44:	9903      	ldr	r1, [sp, #12]
 8023f46:	1422      	asrs	r2, r4, #16
 8023f48:	1406      	asrs	r6, r0, #16
 8023f4a:	fb01 2606 	mla	r6, r1, r6, r2
 8023f4e:	0872      	lsrs	r2, r6, #1
 8023f50:	9904      	ldr	r1, [sp, #16]
 8023f52:	5c8a      	ldrb	r2, [r1, r2]
 8023f54:	07f1      	lsls	r1, r6, #31
 8023f56:	bf54      	ite	pl
 8023f58:	f002 020f 	andpl.w	r2, r2, #15
 8023f5c:	1112      	asrmi	r2, r2, #4
 8023f5e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023f62:	b2d2      	uxtb	r2, r2
 8023f64:	2a00      	cmp	r2, #0
 8023f66:	d047      	beq.n	8023ff8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2dc>
 8023f68:	492b      	ldr	r1, [pc, #172]	; (8024018 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fc>)
 8023f6a:	680f      	ldr	r7, [r1, #0]
 8023f6c:	2aff      	cmp	r2, #255	; 0xff
 8023f6e:	ea4f 2917 	mov.w	r9, r7, lsr #8
 8023f72:	ea4f 06d7 	mov.w	r6, r7, lsr #3
 8023f76:	ea4f 07c7 	mov.w	r7, r7, lsl #3
 8023f7a:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 8023f7e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8023f82:	b2ff      	uxtb	r7, r7
 8023f84:	d03f      	beq.n	8024006 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ea>
 8023f86:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 8023f8a:	fa1f fa82 	uxth.w	sl, r2
 8023f8e:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8023f92:	43d2      	mvns	r2, r2
 8023f94:	b2d2      	uxtb	r2, r2
 8023f96:	fb19 f90a 	smulbb	r9, r9, sl
 8023f9a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8023f9e:	fb0c 9c02 	mla	ip, ip, r2, r9
 8023fa2:	ea4f 09ee 	mov.w	r9, lr, asr #3
 8023fa6:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8023faa:	fb16 f60a 	smulbb	r6, r6, sl
 8023fae:	fb09 6602 	mla	r6, r9, r2, r6
 8023fb2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8023fb6:	b2b6      	uxth	r6, r6
 8023fb8:	fa5f fe8e 	uxtb.w	lr, lr
 8023fbc:	fb17 f70a 	smulbb	r7, r7, sl
 8023fc0:	fa1f fc8c 	uxth.w	ip, ip
 8023fc4:	fb0e 7702 	mla	r7, lr, r2, r7
 8023fc8:	f106 0901 	add.w	r9, r6, #1
 8023fcc:	b2bf      	uxth	r7, r7
 8023fce:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 8023fd2:	f10c 0901 	add.w	r9, ip, #1
 8023fd6:	0976      	lsrs	r6, r6, #5
 8023fd8:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 8023fdc:	1c7a      	adds	r2, r7, #1
 8023fde:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8023fe2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8023fe6:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8023fea:	ea46 060c 	orr.w	r6, r6, ip
 8023fee:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8023ff2:	433e      	orrs	r6, r7
 8023ff4:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 8023ff8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8023ffa:	4414      	add	r4, r2
 8023ffc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023ffe:	f108 0801 	add.w	r8, r8, #1
 8024002:	4410      	add	r0, r2
 8024004:	e799      	b.n	8023f3a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8024006:	00f6      	lsls	r6, r6, #3
 8024008:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
 802400c:	ea46 06d7 	orr.w	r6, r6, r7, lsr #3
 8024010:	e7f0      	b.n	8023ff4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d8>
 8024012:	b007      	add	sp, #28
 8024014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024018:	200127fc 	.word	0x200127fc

0802401c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 802401c:	4770      	bx	lr

0802401e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 802401e:	4770      	bx	lr

08024020 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8024020:	4770      	bx	lr

08024022 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8024022:	4770      	bx	lr

08024024 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8024024:	4770      	bx	lr

08024026 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8024026:	4770      	bx	lr

08024028 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8024028:	4770      	bx	lr

0802402a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 802402a:	4770      	bx	lr

0802402c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 802402c:	4770      	bx	lr

0802402e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 802402e:	4770      	bx	lr

08024030 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8024030:	4770      	bx	lr

08024032 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8024032:	4770      	bx	lr

08024034 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8024034:	4770      	bx	lr

08024036 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8024036:	4770      	bx	lr

08024038 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8024038:	4770      	bx	lr

0802403a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 802403a:	4770      	bx	lr

0802403c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 802403c:	4770      	bx	lr

0802403e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 802403e:	4770      	bx	lr

08024040 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8024040:	4770      	bx	lr

08024042 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8024042:	4770      	bx	lr

08024044 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8024044:	4770      	bx	lr

08024046 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8024046:	4770      	bx	lr

08024048 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8024048:	4770      	bx	lr

0802404a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 802404a:	4770      	bx	lr

0802404c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 802404c:	4770      	bx	lr

0802404e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 802404e:	4770      	bx	lr

08024050 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8024050:	4770      	bx	lr

08024052 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8024052:	4770      	bx	lr

08024054 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8024054:	b508      	push	{r3, lr}
 8024056:	4b06      	ldr	r3, [pc, #24]	; (8024070 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 8024058:	8818      	ldrh	r0, [r3, #0]
 802405a:	b928      	cbnz	r0, 8024068 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 802405c:	4b05      	ldr	r3, [pc, #20]	; (8024074 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 802405e:	4a06      	ldr	r2, [pc, #24]	; (8024078 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 8024060:	4806      	ldr	r0, [pc, #24]	; (802407c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 8024062:	2154      	movs	r1, #84	; 0x54
 8024064:	f00a f938 	bl	802e2d8 <__assert_func>
 8024068:	0040      	lsls	r0, r0, #1
 802406a:	b280      	uxth	r0, r0
 802406c:	bd08      	pop	{r3, pc}
 802406e:	bf00      	nop
 8024070:	200127ee 	.word	0x200127ee
 8024074:	08034422 	.word	0x08034422
 8024078:	080349a3 	.word	0x080349a3
 802407c:	08034464 	.word	0x08034464

08024080 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8024080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024084:	b08d      	sub	sp, #52	; 0x34
 8024086:	460f      	mov	r7, r1
 8024088:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 802408c:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 8024090:	4616      	mov	r6, r2
 8024092:	f1b9 0f00 	cmp.w	r9, #0
 8024096:	d046      	beq.n	8024126 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 8024098:	6810      	ldr	r0, [r2, #0]
 802409a:	6851      	ldr	r1, [r2, #4]
 802409c:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8024264 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e4>
 80240a0:	ad08      	add	r5, sp, #32
 80240a2:	c503      	stmia	r5!, {r0, r1}
 80240a4:	6818      	ldr	r0, [r3, #0]
 80240a6:	6859      	ldr	r1, [r3, #4]
 80240a8:	ad0a      	add	r5, sp, #40	; 0x28
 80240aa:	c503      	stmia	r5!, {r0, r1}
 80240ac:	a808      	add	r0, sp, #32
 80240ae:	f7fa fec7 	bl	801ee40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80240b2:	4631      	mov	r1, r6
 80240b4:	a80a      	add	r0, sp, #40	; 0x28
 80240b6:	f7fa feab 	bl	801ee10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80240ba:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 80240be:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 80240c2:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 80240c6:	f8d8 0000 	ldr.w	r0, [r8]
 80240ca:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 80240ce:	fb16 2103 	smlabb	r1, r6, r3, r2
 80240d2:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 80240d6:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 80240da:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	; 0x2e
 80240de:	440a      	add	r2, r1
 80240e0:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80240e4:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80240e8:	4413      	add	r3, r2
 80240ea:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80240ee:	6803      	ldr	r3, [r0, #0]
 80240f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80240f2:	4798      	blx	r3
 80240f4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80240f8:	d018      	beq.n	802412c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 80240fa:	f010 0f04 	tst.w	r0, #4
 80240fe:	d019      	beq.n	8024134 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 8024100:	f8d8 0000 	ldr.w	r0, [r8]
 8024104:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8024108:	6801      	ldr	r1, [r0, #0]
 802410a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 802410e:	e9cd 9403 	strd	r9, r4, [sp, #12]
 8024112:	b2bf      	uxth	r7, r7
 8024114:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8024118:	9402      	str	r4, [sp, #8]
 802411a:	b2ad      	uxth	r5, r5
 802411c:	9701      	str	r7, [sp, #4]
 802411e:	9500      	str	r5, [sp, #0]
 8024120:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 8024122:	4631      	mov	r1, r6
 8024124:	47a0      	blx	r4
 8024126:	b00d      	add	sp, #52	; 0x34
 8024128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802412c:	b914      	cbnz	r4, 8024134 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 802412e:	f010 0f01 	tst.w	r0, #1
 8024132:	e7e4      	b.n	80240fe <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 8024134:	f8d8 0000 	ldr.w	r0, [r8]
 8024138:	6803      	ldr	r3, [r0, #0]
 802413a:	6a1b      	ldr	r3, [r3, #32]
 802413c:	4798      	blx	r3
 802413e:	4a48      	ldr	r2, [pc, #288]	; (8024260 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e0>)
 8024140:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8024144:	8814      	ldrh	r4, [r2, #0]
 8024146:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 802414a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802414e:	fb01 3404 	mla	r4, r1, r4, r3
 8024152:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8024156:	4692      	mov	sl, r2
 8024158:	d118      	bne.n	802418c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x10c>
 802415a:	ea4f 0b45 	mov.w	fp, r5, lsl #1
 802415e:	f04f 0900 	mov.w	r9, #0
 8024162:	f8d8 0000 	ldr.w	r0, [r8]
 8024166:	45b9      	cmp	r9, r7
 8024168:	6803      	ldr	r3, [r0, #0]
 802416a:	da73      	bge.n	8024254 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>
 802416c:	6add      	ldr	r5, [r3, #44]	; 0x2c
 802416e:	4632      	mov	r2, r6
 8024170:	465b      	mov	r3, fp
 8024172:	4621      	mov	r1, r4
 8024174:	47a8      	blx	r5
 8024176:	f8ba 3000 	ldrh.w	r3, [sl]
 802417a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802417e:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8024182:	f109 0901 	add.w	r9, r9, #1
 8024186:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 802418a:	e7ea      	b.n	8024162 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe2>
 802418c:	f1c9 08ff 	rsb	r8, r9, #255	; 0xff
 8024190:	ea25 7ae5 	bic.w	sl, r5, r5, asr #31
 8024194:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8024198:	f04f 0b00 	mov.w	fp, #0
 802419c:	fa1f f389 	uxth.w	r3, r9
 80241a0:	fa1f f888 	uxth.w	r8, r8
 80241a4:	9207      	str	r2, [sp, #28]
 80241a6:	45bb      	cmp	fp, r7
 80241a8:	da54      	bge.n	8024254 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>
 80241aa:	f04f 0e00 	mov.w	lr, #0
 80241ae:	45ae      	cmp	lr, r5
 80241b0:	da41      	bge.n	8024236 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1b6>
 80241b2:	f834 101e 	ldrh.w	r1, [r4, lr, lsl #1]
 80241b6:	f836 201e 	ldrh.w	r2, [r6, lr, lsl #1]
 80241ba:	1208      	asrs	r0, r1, #8
 80241bc:	ea4f 2c22 	mov.w	ip, r2, asr #8
 80241c0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80241c4:	fb10 f008 	smulbb	r0, r0, r8
 80241c8:	ea4f 09e1 	mov.w	r9, r1, asr #3
 80241cc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80241d0:	00c9      	lsls	r1, r1, #3
 80241d2:	fb0c 0c03 	mla	ip, ip, r3, r0
 80241d6:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80241da:	10d0      	asrs	r0, r2, #3
 80241dc:	b2c9      	uxtb	r1, r1
 80241de:	00d2      	lsls	r2, r2, #3
 80241e0:	fa1f fc8c 	uxth.w	ip, ip
 80241e4:	fb19 f908 	smulbb	r9, r9, r8
 80241e8:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80241ec:	b2d2      	uxtb	r2, r2
 80241ee:	fb11 f108 	smulbb	r1, r1, r8
 80241f2:	fb00 9003 	mla	r0, r0, r3, r9
 80241f6:	fb02 1203 	mla	r2, r2, r3, r1
 80241fa:	f10c 0901 	add.w	r9, ip, #1
 80241fe:	b292      	uxth	r2, r2
 8024200:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 8024204:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 8024208:	f102 0c01 	add.w	ip, r2, #1
 802420c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8024210:	b280      	uxth	r0, r0
 8024212:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8024216:	ea49 0c02 	orr.w	ip, r9, r2
 802421a:	f100 0901 	add.w	r9, r0, #1
 802421e:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8024222:	0940      	lsrs	r0, r0, #5
 8024224:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024228:	ea4c 0c00 	orr.w	ip, ip, r0
 802422c:	f824 c01e 	strh.w	ip, [r4, lr, lsl #1]
 8024230:	f10e 0e01 	add.w	lr, lr, #1
 8024234:	e7bb      	b.n	80241ae <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x12e>
 8024236:	9a07      	ldr	r2, [sp, #28]
 8024238:	8812      	ldrh	r2, [r2, #0]
 802423a:	1b52      	subs	r2, r2, r5
 802423c:	eb0a 0242 	add.w	r2, sl, r2, lsl #1
 8024240:	4414      	add	r4, r2
 8024242:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 8024246:	1b52      	subs	r2, r2, r5
 8024248:	eb0a 0242 	add.w	r2, sl, r2, lsl #1
 802424c:	4416      	add	r6, r2
 802424e:	f10b 0b01 	add.w	fp, fp, #1
 8024252:	e7a8      	b.n	80241a6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x126>
 8024254:	4b03      	ldr	r3, [pc, #12]	; (8024264 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e4>)
 8024256:	6818      	ldr	r0, [r3, #0]
 8024258:	6803      	ldr	r3, [r0, #0]
 802425a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802425c:	4798      	blx	r3
 802425e:	e762      	b.n	8024126 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 8024260:	200127ee 	.word	0x200127ee
 8024264:	200127f4 	.word	0x200127f4

08024268 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8024268:	b510      	push	{r4, lr}
 802426a:	2104      	movs	r1, #4
 802426c:	4604      	mov	r4, r0
 802426e:	f008 ff65 	bl	802d13c <_ZdlPvj>
 8024272:	4620      	mov	r0, r4
 8024274:	bd10      	pop	{r4, pc}

08024276 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8024276:	b510      	push	{r4, lr}
 8024278:	2104      	movs	r1, #4
 802427a:	4604      	mov	r4, r0
 802427c:	f008 ff5e 	bl	802d13c <_ZdlPvj>
 8024280:	4620      	mov	r0, r4
 8024282:	bd10      	pop	{r4, pc}

08024284 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8024284:	b510      	push	{r4, lr}
 8024286:	2104      	movs	r1, #4
 8024288:	4604      	mov	r4, r0
 802428a:	f008 ff57 	bl	802d13c <_ZdlPvj>
 802428e:	4620      	mov	r0, r4
 8024290:	bd10      	pop	{r4, pc}

08024292 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8024292:	b510      	push	{r4, lr}
 8024294:	2104      	movs	r1, #4
 8024296:	4604      	mov	r4, r0
 8024298:	f008 ff50 	bl	802d13c <_ZdlPvj>
 802429c:	4620      	mov	r0, r4
 802429e:	bd10      	pop	{r4, pc}

080242a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80242a0:	b510      	push	{r4, lr}
 80242a2:	2104      	movs	r1, #4
 80242a4:	4604      	mov	r4, r0
 80242a6:	f008 ff49 	bl	802d13c <_ZdlPvj>
 80242aa:	4620      	mov	r0, r4
 80242ac:	bd10      	pop	{r4, pc}

080242ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80242ae:	b510      	push	{r4, lr}
 80242b0:	2104      	movs	r1, #4
 80242b2:	4604      	mov	r4, r0
 80242b4:	f008 ff42 	bl	802d13c <_ZdlPvj>
 80242b8:	4620      	mov	r0, r4
 80242ba:	bd10      	pop	{r4, pc}

080242bc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80242bc:	b510      	push	{r4, lr}
 80242be:	2104      	movs	r1, #4
 80242c0:	4604      	mov	r4, r0
 80242c2:	f008 ff3b 	bl	802d13c <_ZdlPvj>
 80242c6:	4620      	mov	r0, r4
 80242c8:	bd10      	pop	{r4, pc}

080242ca <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80242ca:	b510      	push	{r4, lr}
 80242cc:	2104      	movs	r1, #4
 80242ce:	4604      	mov	r4, r0
 80242d0:	f008 ff34 	bl	802d13c <_ZdlPvj>
 80242d4:	4620      	mov	r0, r4
 80242d6:	bd10      	pop	{r4, pc}

080242d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80242d8:	b510      	push	{r4, lr}
 80242da:	2104      	movs	r1, #4
 80242dc:	4604      	mov	r4, r0
 80242de:	f008 ff2d 	bl	802d13c <_ZdlPvj>
 80242e2:	4620      	mov	r0, r4
 80242e4:	bd10      	pop	{r4, pc}

080242e6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80242e6:	b510      	push	{r4, lr}
 80242e8:	2104      	movs	r1, #4
 80242ea:	4604      	mov	r4, r0
 80242ec:	f008 ff26 	bl	802d13c <_ZdlPvj>
 80242f0:	4620      	mov	r0, r4
 80242f2:	bd10      	pop	{r4, pc}

080242f4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80242f4:	b510      	push	{r4, lr}
 80242f6:	2104      	movs	r1, #4
 80242f8:	4604      	mov	r4, r0
 80242fa:	f008 ff1f 	bl	802d13c <_ZdlPvj>
 80242fe:	4620      	mov	r0, r4
 8024300:	bd10      	pop	{r4, pc}

08024302 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8024302:	b510      	push	{r4, lr}
 8024304:	2104      	movs	r1, #4
 8024306:	4604      	mov	r4, r0
 8024308:	f008 ff18 	bl	802d13c <_ZdlPvj>
 802430c:	4620      	mov	r0, r4
 802430e:	bd10      	pop	{r4, pc}

08024310 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8024310:	b510      	push	{r4, lr}
 8024312:	2104      	movs	r1, #4
 8024314:	4604      	mov	r4, r0
 8024316:	f008 ff11 	bl	802d13c <_ZdlPvj>
 802431a:	4620      	mov	r0, r4
 802431c:	bd10      	pop	{r4, pc}

0802431e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 802431e:	b510      	push	{r4, lr}
 8024320:	2104      	movs	r1, #4
 8024322:	4604      	mov	r4, r0
 8024324:	f008 ff0a 	bl	802d13c <_ZdlPvj>
 8024328:	4620      	mov	r0, r4
 802432a:	bd10      	pop	{r4, pc}

0802432c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 802432c:	b510      	push	{r4, lr}
 802432e:	2104      	movs	r1, #4
 8024330:	4604      	mov	r4, r0
 8024332:	f008 ff03 	bl	802d13c <_ZdlPvj>
 8024336:	4620      	mov	r0, r4
 8024338:	bd10      	pop	{r4, pc}

0802433a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 802433a:	b510      	push	{r4, lr}
 802433c:	2104      	movs	r1, #4
 802433e:	4604      	mov	r4, r0
 8024340:	f008 fefc 	bl	802d13c <_ZdlPvj>
 8024344:	4620      	mov	r0, r4
 8024346:	bd10      	pop	{r4, pc}

08024348 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8024348:	b510      	push	{r4, lr}
 802434a:	2104      	movs	r1, #4
 802434c:	4604      	mov	r4, r0
 802434e:	f008 fef5 	bl	802d13c <_ZdlPvj>
 8024352:	4620      	mov	r0, r4
 8024354:	bd10      	pop	{r4, pc}

08024356 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8024356:	b510      	push	{r4, lr}
 8024358:	2104      	movs	r1, #4
 802435a:	4604      	mov	r4, r0
 802435c:	f008 feee 	bl	802d13c <_ZdlPvj>
 8024360:	4620      	mov	r0, r4
 8024362:	bd10      	pop	{r4, pc}

08024364 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8024364:	b510      	push	{r4, lr}
 8024366:	2104      	movs	r1, #4
 8024368:	4604      	mov	r4, r0
 802436a:	f008 fee7 	bl	802d13c <_ZdlPvj>
 802436e:	4620      	mov	r0, r4
 8024370:	bd10      	pop	{r4, pc}

08024372 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 8024372:	b510      	push	{r4, lr}
 8024374:	2104      	movs	r1, #4
 8024376:	4604      	mov	r4, r0
 8024378:	f008 fee0 	bl	802d13c <_ZdlPvj>
 802437c:	4620      	mov	r0, r4
 802437e:	bd10      	pop	{r4, pc}

08024380 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8024380:	b510      	push	{r4, lr}
 8024382:	2104      	movs	r1, #4
 8024384:	4604      	mov	r4, r0
 8024386:	f008 fed9 	bl	802d13c <_ZdlPvj>
 802438a:	4620      	mov	r0, r4
 802438c:	bd10      	pop	{r4, pc}

0802438e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 802438e:	b510      	push	{r4, lr}
 8024390:	2104      	movs	r1, #4
 8024392:	4604      	mov	r4, r0
 8024394:	f008 fed2 	bl	802d13c <_ZdlPvj>
 8024398:	4620      	mov	r0, r4
 802439a:	bd10      	pop	{r4, pc}

0802439c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 802439c:	b510      	push	{r4, lr}
 802439e:	2104      	movs	r1, #4
 80243a0:	4604      	mov	r4, r0
 80243a2:	f008 fecb 	bl	802d13c <_ZdlPvj>
 80243a6:	4620      	mov	r0, r4
 80243a8:	bd10      	pop	{r4, pc}

080243aa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80243aa:	b510      	push	{r4, lr}
 80243ac:	2104      	movs	r1, #4
 80243ae:	4604      	mov	r4, r0
 80243b0:	f008 fec4 	bl	802d13c <_ZdlPvj>
 80243b4:	4620      	mov	r0, r4
 80243b6:	bd10      	pop	{r4, pc}

080243b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 80243b8:	b510      	push	{r4, lr}
 80243ba:	2104      	movs	r1, #4
 80243bc:	4604      	mov	r4, r0
 80243be:	f008 febd 	bl	802d13c <_ZdlPvj>
 80243c2:	4620      	mov	r0, r4
 80243c4:	bd10      	pop	{r4, pc}

080243c6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 80243c6:	b510      	push	{r4, lr}
 80243c8:	2104      	movs	r1, #4
 80243ca:	4604      	mov	r4, r0
 80243cc:	f008 feb6 	bl	802d13c <_ZdlPvj>
 80243d0:	4620      	mov	r0, r4
 80243d2:	bd10      	pop	{r4, pc}

080243d4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 80243d4:	b510      	push	{r4, lr}
 80243d6:	2104      	movs	r1, #4
 80243d8:	4604      	mov	r4, r0
 80243da:	f008 feaf 	bl	802d13c <_ZdlPvj>
 80243de:	4620      	mov	r0, r4
 80243e0:	bd10      	pop	{r4, pc}

080243e2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 80243e2:	b510      	push	{r4, lr}
 80243e4:	2104      	movs	r1, #4
 80243e6:	4604      	mov	r4, r0
 80243e8:	f008 fea8 	bl	802d13c <_ZdlPvj>
 80243ec:	4620      	mov	r0, r4
 80243ee:	bd10      	pop	{r4, pc}

080243f0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 80243f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80243f4:	460e      	mov	r6, r1
 80243f6:	b08b      	sub	sp, #44	; 0x2c
 80243f8:	4615      	mov	r5, r2
 80243fa:	461c      	mov	r4, r3
 80243fc:	b323      	cbz	r3, 8024448 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x58>
 80243fe:	4608      	mov	r0, r1
 8024400:	f7f6 fdab 	bl	801af5a <_ZNK8touchgfx4Rect7isEmptyEv>
 8024404:	bb00      	cbnz	r0, 8024448 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x58>
 8024406:	6830      	ldr	r0, [r6, #0]
 8024408:	6871      	ldr	r1, [r6, #4]
 802440a:	4e55      	ldr	r6, [pc, #340]	; (8024560 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x170>)
 802440c:	ab08      	add	r3, sp, #32
 802440e:	c303      	stmia	r3!, {r0, r1}
 8024410:	a808      	add	r0, sp, #32
 8024412:	f7fa fd15 	bl	801ee40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024416:	6830      	ldr	r0, [r6, #0]
 8024418:	6803      	ldr	r3, [r0, #0]
 802441a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802441c:	4798      	blx	r3
 802441e:	2cff      	cmp	r4, #255	; 0xff
 8024420:	d015      	beq.n	802444e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 8024422:	f010 0f08 	tst.w	r0, #8
 8024426:	d015      	beq.n	8024454 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x64>
 8024428:	6830      	ldr	r0, [r6, #0]
 802442a:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 802442e:	6801      	ldr	r1, [r0, #0]
 8024430:	9402      	str	r4, [sp, #8]
 8024432:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 8024436:	9401      	str	r4, [sp, #4]
 8024438:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 802443c:	9400      	str	r4, [sp, #0]
 802443e:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 8024440:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8024444:	4629      	mov	r1, r5
 8024446:	47a0      	blx	r4
 8024448:	b00b      	add	sp, #44	; 0x2c
 802444a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802444e:	f010 0f02 	tst.w	r0, #2
 8024452:	e7e8      	b.n	8024426 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 8024454:	6830      	ldr	r0, [r6, #0]
 8024456:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 802445a:	6803      	ldr	r3, [r0, #0]
 802445c:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 8024460:	6a1b      	ldr	r3, [r3, #32]
 8024462:	4798      	blx	r3
 8024464:	4a3f      	ldr	r2, [pc, #252]	; (8024564 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x174>)
 8024466:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 802446a:	8816      	ldrh	r6, [r2, #0]
 802446c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8024470:	2cff      	cmp	r4, #255	; 0xff
 8024472:	fb06 1303 	mla	r3, r6, r3, r1
 8024476:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802447a:	ea4f 0b48 	mov.w	fp, r8, lsl #1
 802447e:	4616      	mov	r6, r2
 8024480:	ea28 71e8 	bic.w	r1, r8, r8, asr #31
 8024484:	d10a      	bne.n	802449c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xac>
 8024486:	0049      	lsls	r1, r1, #1
 8024488:	2200      	movs	r2, #0
 802448a:	454a      	cmp	r2, r9
 802448c:	da61      	bge.n	8024552 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x162>
 802448e:	2300      	movs	r3, #0
 8024490:	4543      	cmp	r3, r8
 8024492:	da57      	bge.n	8024544 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x154>
 8024494:	f820 5013 	strh.w	r5, [r0, r3, lsl #1]
 8024498:	3301      	adds	r3, #1
 802449a:	e7f9      	b.n	8024490 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xa0>
 802449c:	0a2b      	lsrs	r3, r5, #8
 802449e:	f1c4 07ff 	rsb	r7, r4, #255	; 0xff
 80244a2:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80244a6:	b2a4      	uxth	r4, r4
 80244a8:	4363      	muls	r3, r4
 80244aa:	9305      	str	r3, [sp, #20]
 80244ac:	08ee      	lsrs	r6, r5, #3
 80244ae:	00eb      	lsls	r3, r5, #3
 80244b0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80244b4:	b2db      	uxtb	r3, r3
 80244b6:	0049      	lsls	r1, r1, #1
 80244b8:	4366      	muls	r6, r4
 80244ba:	4363      	muls	r3, r4
 80244bc:	9106      	str	r1, [sp, #24]
 80244be:	f04f 0c00 	mov.w	ip, #0
 80244c2:	b2bf      	uxth	r7, r7
 80244c4:	9207      	str	r2, [sp, #28]
 80244c6:	45cc      	cmp	ip, r9
 80244c8:	da43      	bge.n	8024552 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x162>
 80244ca:	4682      	mov	sl, r0
 80244cc:	f04f 0e00 	mov.w	lr, #0
 80244d0:	45c6      	cmp	lr, r8
 80244d2:	da2d      	bge.n	8024530 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x140>
 80244d4:	f8ba 2000 	ldrh.w	r2, [sl]
 80244d8:	9905      	ldr	r1, [sp, #20]
 80244da:	1214      	asrs	r4, r2, #8
 80244dc:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80244e0:	fb14 f407 	smulbb	r4, r4, r7
 80244e4:	440c      	add	r4, r1
 80244e6:	10d1      	asrs	r1, r2, #3
 80244e8:	00d2      	lsls	r2, r2, #3
 80244ea:	b2d2      	uxtb	r2, r2
 80244ec:	fb12 f207 	smulbb	r2, r2, r7
 80244f0:	b2a4      	uxth	r4, r4
 80244f2:	441a      	add	r2, r3
 80244f4:	b292      	uxth	r2, r2
 80244f6:	1c65      	adds	r5, r4, #1
 80244f8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80244fc:	eb05 2414 	add.w	r4, r5, r4, lsr #8
 8024500:	fb11 f107 	smulbb	r1, r1, r7
 8024504:	1c55      	adds	r5, r2, #1
 8024506:	4431      	add	r1, r6
 8024508:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 802450c:	b289      	uxth	r1, r1
 802450e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8024512:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8024516:	4314      	orrs	r4, r2
 8024518:	1c4a      	adds	r2, r1, #1
 802451a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802451e:	0949      	lsrs	r1, r1, #5
 8024520:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024524:	430c      	orrs	r4, r1
 8024526:	f82a 4b02 	strh.w	r4, [sl], #2
 802452a:	f10e 0e01 	add.w	lr, lr, #1
 802452e:	e7cf      	b.n	80244d0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xe0>
 8024530:	9a07      	ldr	r2, [sp, #28]
 8024532:	9906      	ldr	r1, [sp, #24]
 8024534:	8812      	ldrh	r2, [r2, #0]
 8024536:	ebcb 0242 	rsb	r2, fp, r2, lsl #1
 802453a:	440a      	add	r2, r1
 802453c:	4410      	add	r0, r2
 802453e:	f10c 0c01 	add.w	ip, ip, #1
 8024542:	e7c0      	b.n	80244c6 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xd6>
 8024544:	8833      	ldrh	r3, [r6, #0]
 8024546:	ebcb 0343 	rsb	r3, fp, r3, lsl #1
 802454a:	440b      	add	r3, r1
 802454c:	4418      	add	r0, r3
 802454e:	3201      	adds	r2, #1
 8024550:	e79b      	b.n	802448a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x9a>
 8024552:	4b03      	ldr	r3, [pc, #12]	; (8024560 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x170>)
 8024554:	6818      	ldr	r0, [r3, #0]
 8024556:	6803      	ldr	r3, [r0, #0]
 8024558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802455a:	4798      	blx	r3
 802455c:	e774      	b.n	8024448 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x58>
 802455e:	bf00      	nop
 8024560:	200127f4 	.word	0x200127f4
 8024564:	200127ee 	.word	0x200127ee

08024568 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8024568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802456c:	4d9b      	ldr	r5, [pc, #620]	; (80247dc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 802456e:	4690      	mov	r8, r2
 8024570:	682a      	ldr	r2, [r5, #0]
 8024572:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8024576:	2a02      	cmp	r2, #2
 8024578:	b08f      	sub	sp, #60	; 0x3c
 802457a:	4604      	mov	r4, r0
 802457c:	4689      	mov	r9, r1
 802457e:	d106      	bne.n	802458e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 8024580:	4b97      	ldr	r3, [pc, #604]	; (80247e0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 8024582:	4a98      	ldr	r2, [pc, #608]	; (80247e4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 8024584:	f240 21be 	movw	r1, #702	; 0x2be
 8024588:	4897      	ldr	r0, [pc, #604]	; (80247e8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 802458a:	f009 fea5 	bl	802e2d8 <__assert_func>
 802458e:	ae0e      	add	r6, sp, #56	; 0x38
 8024590:	f826 3d24 	strh.w	r3, [r6, #-36]!
 8024594:	4630      	mov	r0, r6
 8024596:	f7fd fae3 	bl	8021b60 <_ZNK8touchgfx6Bitmap9getFormatEv>
 802459a:	6823      	ldr	r3, [r4, #0]
 802459c:	4607      	mov	r7, r0
 802459e:	6a1b      	ldr	r3, [r3, #32]
 80245a0:	4620      	mov	r0, r4
 80245a2:	4798      	blx	r3
 80245a4:	4287      	cmp	r7, r0
 80245a6:	d004      	beq.n	80245b2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 80245a8:	4b90      	ldr	r3, [pc, #576]	; (80247ec <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 80245aa:	4a8e      	ldr	r2, [pc, #568]	; (80247e4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 80245ac:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 80245b0:	e7ea      	b.n	8024588 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 80245b2:	4630      	mov	r0, r6
 80245b4:	f7fd fa50 	bl	8021a58 <_ZNK8touchgfx6Bitmap7getDataEv>
 80245b8:	4607      	mov	r7, r0
 80245ba:	b920      	cbnz	r0, 80245c6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 80245bc:	4b8c      	ldr	r3, [pc, #560]	; (80247f0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 80245be:	4a89      	ldr	r2, [pc, #548]	; (80247e4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 80245c0:	f240 21c2 	movw	r1, #706	; 0x2c2
 80245c4:	e7e0      	b.n	8024588 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 80245c6:	f8d8 0000 	ldr.w	r0, [r8]
 80245ca:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80245ce:	f9b8 a000 	ldrsh.w	sl, [r8]
 80245d2:	ab06      	add	r3, sp, #24
 80245d4:	c303      	stmia	r3!, {r0, r1}
 80245d6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80245da:	f8d9 0000 	ldr.w	r0, [r9]
 80245de:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 80245e2:	ab08      	add	r3, sp, #32
 80245e4:	c303      	stmia	r3!, {r0, r1}
 80245e6:	4630      	mov	r0, r6
 80245e8:	f7fd f92e 	bl	8021848 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80245ec:	4680      	mov	r8, r0
 80245ee:	4630      	mov	r0, r6
 80245f0:	f7fd f964 	bl	80218bc <_ZNK8touchgfx6Bitmap9getHeightEv>
 80245f4:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 80245f8:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 80245fc:	f10d 0920 	add.w	r9, sp, #32
 8024600:	a806      	add	r0, sp, #24
 8024602:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8024606:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 802460a:	f7fa fc19 	bl	801ee40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802460e:	4648      	mov	r0, r9
 8024610:	f7fa fc16 	bl	801ee40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024614:	a80a      	add	r0, sp, #40	; 0x28
 8024616:	f7fa fc13 	bl	801ee40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802461a:	4e76      	ldr	r6, [pc, #472]	; (80247f4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 802461c:	4b76      	ldr	r3, [pc, #472]	; (80247f8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 802461e:	f9b6 2000 	ldrsh.w	r2, [r6]
 8024622:	f9b3 3000 	ldrsh.w	r3, [r3]
 8024626:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 802462a:	2100      	movs	r1, #0
 802462c:	910c      	str	r1, [sp, #48]	; 0x30
 802462e:	4648      	mov	r0, r9
 8024630:	a90c      	add	r1, sp, #48	; 0x30
 8024632:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8024636:	f7f6 fc4d 	bl	801aed4 <_ZN8touchgfx4RectaNERKS0_>
 802463a:	4648      	mov	r0, r9
 802463c:	f7f6 fc8d 	bl	801af5a <_ZNK8touchgfx4Rect7isEmptyEv>
 8024640:	2800      	cmp	r0, #0
 8024642:	f040 80bd 	bne.w	80247c0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x258>
 8024646:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 802464a:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 802464e:	4288      	cmp	r0, r1
 8024650:	db37      	blt.n	80246c2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x15a>
 8024652:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 8024656:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 802465a:	429a      	cmp	r2, r3
 802465c:	db31      	blt.n	80246c2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x15a>
 802465e:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
 8024662:	4460      	add	r0, ip
 8024664:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 8024668:	4461      	add	r1, ip
 802466a:	b200      	sxth	r0, r0
 802466c:	b209      	sxth	r1, r1
 802466e:	4288      	cmp	r0, r1
 8024670:	dc27      	bgt.n	80246c2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x15a>
 8024672:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8024676:	440a      	add	r2, r1
 8024678:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 802467c:	440b      	add	r3, r1
 802467e:	b212      	sxth	r2, r2
 8024680:	b21b      	sxth	r3, r3
 8024682:	429a      	cmp	r2, r3
 8024684:	dc1d      	bgt.n	80246c2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x15a>
 8024686:	6823      	ldr	r3, [r4, #0]
 8024688:	4620      	mov	r0, r4
 802468a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802468c:	4798      	blx	r3
 802468e:	4682      	mov	sl, r0
 8024690:	6828      	ldr	r0, [r5, #0]
 8024692:	6803      	ldr	r3, [r0, #0]
 8024694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024696:	4798      	blx	r3
 8024698:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 802469c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80246a0:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 80246a4:	1a9b      	subs	r3, r3, r2
 80246a6:	b29b      	uxth	r3, r3
 80246a8:	b21c      	sxth	r4, r3
 80246aa:	2c00      	cmp	r4, #0
 80246ac:	dc0e      	bgt.n	80246cc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 80246ae:	bf1f      	itttt	ne
 80246b0:	f8ad 2020 	strhne.w	r2, [sp, #32]
 80246b4:	f8bd 2024 	ldrhne.w	r2, [sp, #36]	; 0x24
 80246b8:	189b      	addne	r3, r3, r2
 80246ba:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 80246be:	463c      	mov	r4, r7
 80246c0:	e00a      	b.n	80246d8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x170>
 80246c2:	4b4e      	ldr	r3, [pc, #312]	; (80247fc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 80246c4:	4a47      	ldr	r2, [pc, #284]	; (80247e4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 80246c6:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 80246ca:	e75d      	b.n	8024588 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 80246cc:	ebab 0303 	sub.w	r3, fp, r3
 80246d0:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 80246d4:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 80246d8:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 80246dc:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80246e0:	1a5b      	subs	r3, r3, r1
 80246e2:	b29b      	uxth	r3, r3
 80246e4:	b21a      	sxth	r2, r3
 80246e6:	2a00      	cmp	r2, #0
 80246e8:	dd4a      	ble.n	8024780 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x218>
 80246ea:	fb02 f20b 	mul.w	r2, r2, fp
 80246ee:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 80246f2:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 80246f6:	1ad3      	subs	r3, r2, r3
 80246f8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80246fc:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8024700:	2b00      	cmp	r3, #0
 8024702:	dd5d      	ble.n	80247c0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x258>
 8024704:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	; 0x2e
 8024708:	f1bc 0f00 	cmp.w	ip, #0
 802470c:	dd58      	ble.n	80247c0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x258>
 802470e:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 8024712:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8024716:	fb0a f801 	mul.w	r8, sl, r1
 802471a:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 802471e:	4480      	add	r8, r0
 8024720:	8830      	ldrh	r0, [r6, #0]
 8024722:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 8024726:	42b3      	cmp	r3, r6
 8024728:	bfa8      	it	ge
 802472a:	4633      	movge	r3, r6
 802472c:	1a82      	subs	r2, r0, r2
 802472e:	4293      	cmp	r3, r2
 8024730:	bfa8      	it	ge
 8024732:	4613      	movge	r3, r2
 8024734:	4a30      	ldr	r2, [pc, #192]	; (80247f8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 8024736:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 802473a:	8812      	ldrh	r2, [r2, #0]
 802473c:	4566      	cmp	r6, ip
 802473e:	eba2 0101 	sub.w	r1, r2, r1
 8024742:	bfa8      	it	ge
 8024744:	4666      	movge	r6, ip
 8024746:	428e      	cmp	r6, r1
 8024748:	4632      	mov	r2, r6
 802474a:	bfa8      	it	ge
 802474c:	460a      	movge	r2, r1
 802474e:	4298      	cmp	r0, r3
 8024750:	9202      	str	r2, [sp, #8]
 8024752:	d01e      	beq.n	8024792 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x22a>
 8024754:	005b      	lsls	r3, r3, #1
 8024756:	9303      	str	r3, [sp, #12]
 8024758:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 802475c:	f04f 0900 	mov.w	r9, #0
 8024760:	9b02      	ldr	r3, [sp, #8]
 8024762:	454b      	cmp	r3, r9
 8024764:	dd2c      	ble.n	80247c0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x258>
 8024766:	6828      	ldr	r0, [r5, #0]
 8024768:	6803      	ldr	r3, [r0, #0]
 802476a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802476c:	4642      	mov	r2, r8
 802476e:	461e      	mov	r6, r3
 8024770:	4621      	mov	r1, r4
 8024772:	9b03      	ldr	r3, [sp, #12]
 8024774:	47b0      	blx	r6
 8024776:	44d0      	add	r8, sl
 8024778:	445c      	add	r4, fp
 802477a:	f109 0901 	add.w	r9, r9, #1
 802477e:	e7ef      	b.n	8024760 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1f8>
 8024780:	bf1f      	itttt	ne
 8024782:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 8024786:	f8ad 1022 	strhne.w	r1, [sp, #34]	; 0x22
 802478a:	189b      	addne	r3, r3, r2
 802478c:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 8024790:	e7b4      	b.n	80246fc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x194>
 8024792:	4558      	cmp	r0, fp
 8024794:	d1de      	bne.n	8024754 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ec>
 8024796:	6828      	ldr	r0, [r5, #0]
 8024798:	6803      	ldr	r3, [r0, #0]
 802479a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802479c:	4798      	blx	r3
 802479e:	07c3      	lsls	r3, r0, #31
 80247a0:	d512      	bpl.n	80247c8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x260>
 80247a2:	6828      	ldr	r0, [r5, #0]
 80247a4:	9b02      	ldr	r3, [sp, #8]
 80247a6:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 80247aa:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80247ae:	6803      	ldr	r3, [r0, #0]
 80247b0:	f8cd b000 	str.w	fp, [sp]
 80247b4:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 80247b6:	e899 0006 	ldmia.w	r9, {r1, r2}
 80247ba:	4623      	mov	r3, r4
 80247bc:	47a8      	blx	r5
 80247be:	4607      	mov	r7, r0
 80247c0:	4638      	mov	r0, r7
 80247c2:	b00f      	add	sp, #60	; 0x3c
 80247c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80247c8:	6828      	ldr	r0, [r5, #0]
 80247ca:	6803      	ldr	r3, [r0, #0]
 80247cc:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80247ce:	9b02      	ldr	r3, [sp, #8]
 80247d0:	4642      	mov	r2, r8
 80247d2:	fb03 f30a 	mul.w	r3, r3, sl
 80247d6:	4621      	mov	r1, r4
 80247d8:	47a8      	blx	r5
 80247da:	e7f1      	b.n	80247c0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x258>
 80247dc:	200127f4 	.word	0x200127f4
 80247e0:	08034216 	.word	0x08034216
 80247e4:	08034a53 	.word	0x08034a53
 80247e8:	080342c8 	.word	0x080342c8
 80247ec:	080342fa 	.word	0x080342fa
 80247f0:	0803434f 	.word	0x0803434f
 80247f4:	200127ee 	.word	0x200127ee
 80247f8:	200127f0 	.word	0x200127f0
 80247fc:	0803438d 	.word	0x0803438d

08024800 <_ZN8touchgfx8LCD16bppC1Ev>:
 8024800:	2200      	movs	r2, #0
 8024802:	4910      	ldr	r1, [pc, #64]	; (8024844 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 8024804:	6042      	str	r2, [r0, #4]
 8024806:	6001      	str	r1, [r0, #0]
 8024808:	e9c0 2202 	strd	r2, r2, [r0, #8]
 802480c:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8024810:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8024814:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8024818:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 802481c:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8024820:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8024824:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8024828:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 802482c:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8024830:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8024834:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8024838:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 802483c:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 8024840:	4770      	bx	lr
 8024842:	bf00      	nop
 8024844:	080346d0 	.word	0x080346d0

08024848 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8024848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802484c:	460c      	mov	r4, r1
 802484e:	b08d      	sub	sp, #52	; 0x34
 8024850:	4682      	mov	sl, r0
 8024852:	6808      	ldr	r0, [r1, #0]
 8024854:	6849      	ldr	r1, [r1, #4]
 8024856:	469b      	mov	fp, r3
 8024858:	ab08      	add	r3, sp, #32
 802485a:	c303      	stmia	r3!, {r0, r1}
 802485c:	6810      	ldr	r0, [r2, #0]
 802485e:	6851      	ldr	r1, [r2, #4]
 8024860:	ab0a      	add	r3, sp, #40	; 0x28
 8024862:	c303      	stmia	r3!, {r0, r1}
 8024864:	a808      	add	r0, sp, #32
 8024866:	f7fa faeb 	bl	801ee40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802486a:	4621      	mov	r1, r4
 802486c:	a80a      	add	r0, sp, #40	; 0x28
 802486e:	f7fa facf 	bl	801ee10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024872:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8024876:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 802487a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 802487e:	4c60      	ldr	r4, [pc, #384]	; (8024a00 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b8>)
 8024880:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 8024884:	6820      	ldr	r0, [r4, #0]
 8024886:	f9bd 902e 	ldrsh.w	r9, [sp, #46]	; 0x2e
 802488a:	fb11 2103 	smlabb	r1, r1, r3, r2
 802488e:	eb0a 0a81 	add.w	sl, sl, r1, lsl #2
 8024892:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8024896:	440a      	add	r2, r1
 8024898:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 802489c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80248a0:	4413      	add	r3, r2
 80248a2:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80248a6:	6803      	ldr	r3, [r0, #0]
 80248a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80248aa:	4798      	blx	r3
 80248ac:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80248b0:	d119      	bne.n	80248e6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 80248b2:	f010 0f20 	tst.w	r0, #32
 80248b6:	6820      	ldr	r0, [r4, #0]
 80248b8:	d018      	beq.n	80248ec <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 80248ba:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 80248be:	6801      	ldr	r1, [r0, #0]
 80248c0:	9402      	str	r4, [sp, #8]
 80248c2:	fa1f f489 	uxth.w	r4, r9
 80248c6:	9401      	str	r4, [sp, #4]
 80248c8:	fa1f f488 	uxth.w	r4, r8
 80248cc:	f8cd b00c 	str.w	fp, [sp, #12]
 80248d0:	9400      	str	r4, [sp, #0]
 80248d2:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 80248d4:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 80248d8:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80248dc:	4651      	mov	r1, sl
 80248de:	47a0      	blx	r4
 80248e0:	b00d      	add	sp, #52	; 0x34
 80248e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80248e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80248ea:	e7e4      	b.n	80248b6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 80248ec:	6803      	ldr	r3, [r0, #0]
 80248ee:	6a1b      	ldr	r3, [r3, #32]
 80248f0:	4798      	blx	r3
 80248f2:	4a44      	ldr	r2, [pc, #272]	; (8024a04 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1bc>)
 80248f4:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 80248f8:	8813      	ldrh	r3, [r2, #0]
 80248fa:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	; 0x2a
 80248fe:	9207      	str	r2, [sp, #28]
 8024900:	fb04 1303 	mla	r3, r4, r3, r1
 8024904:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8024908:	ea28 73e8 	bic.w	r3, r8, r8, asr #31
 802490c:	0099      	lsls	r1, r3, #2
 802490e:	005b      	lsls	r3, r3, #1
 8024910:	9106      	str	r1, [sp, #24]
 8024912:	9305      	str	r3, [sp, #20]
 8024914:	f04f 0c00 	mov.w	ip, #0
 8024918:	45cc      	cmp	ip, r9
 802491a:	da6b      	bge.n	80249f4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>
 802491c:	2300      	movs	r3, #0
 802491e:	4543      	cmp	r3, r8
 8024920:	da55      	bge.n	80249ce <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x186>
 8024922:	f85a 4023 	ldr.w	r4, [sl, r3, lsl #2]
 8024926:	0e25      	lsrs	r5, r4, #24
 8024928:	d013      	beq.n	8024952 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 802492a:	2dff      	cmp	r5, #255	; 0xff
 802492c:	ea4f 2714 	mov.w	r7, r4, lsr #8
 8024930:	d111      	bne.n	8024956 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10e>
 8024932:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8024936:	d10e      	bne.n	8024956 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10e>
 8024938:	0962      	lsrs	r2, r4, #5
 802493a:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 802493e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024942:	f027 0707 	bic.w	r7, r7, #7
 8024946:	4317      	orrs	r7, r2
 8024948:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 802494c:	433c      	orrs	r4, r7
 802494e:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
 8024952:	3301      	adds	r3, #1
 8024954:	e7e3      	b.n	802491e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd6>
 8024956:	fb0b f505 	mul.w	r5, fp, r5
 802495a:	1c6a      	adds	r2, r5, #1
 802495c:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
 8024960:	eb02 2225 	add.w	r2, r2, r5, asr #8
 8024964:	1212      	asrs	r2, r2, #8
 8024966:	fa1f fe82 	uxth.w	lr, r2
 802496a:	120e      	asrs	r6, r1, #8
 802496c:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8024970:	43d2      	mvns	r2, r2
 8024972:	b2d2      	uxtb	r2, r2
 8024974:	fb15 f50e 	smulbb	r5, r5, lr
 8024978:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 802497c:	fb06 5602 	mla	r6, r6, r2, r5
 8024980:	b2e4      	uxtb	r4, r4
 8024982:	10cd      	asrs	r5, r1, #3
 8024984:	00c9      	lsls	r1, r1, #3
 8024986:	b2c9      	uxtb	r1, r1
 8024988:	fb14 f40e 	smulbb	r4, r4, lr
 802498c:	fb01 4402 	mla	r4, r1, r2, r4
 8024990:	b2ff      	uxtb	r7, r7
 8024992:	b2b6      	uxth	r6, r6
 8024994:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8024998:	b2a4      	uxth	r4, r4
 802499a:	fb17 f70e 	smulbb	r7, r7, lr
 802499e:	fb05 7702 	mla	r7, r5, r2, r7
 80249a2:	1c72      	adds	r2, r6, #1
 80249a4:	1c65      	adds	r5, r4, #1
 80249a6:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 80249aa:	eb05 2514 	add.w	r5, r5, r4, lsr #8
 80249ae:	b2bf      	uxth	r7, r7
 80249b0:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80249b4:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 80249b8:	432e      	orrs	r6, r5
 80249ba:	1c7d      	adds	r5, r7, #1
 80249bc:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 80249c0:	097f      	lsrs	r7, r7, #5
 80249c2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80249c6:	433e      	orrs	r6, r7
 80249c8:	f820 6013 	strh.w	r6, [r0, r3, lsl #1]
 80249cc:	e7c1      	b.n	8024952 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 80249ce:	9b07      	ldr	r3, [sp, #28]
 80249d0:	9a05      	ldr	r2, [sp, #20]
 80249d2:	881b      	ldrh	r3, [r3, #0]
 80249d4:	eba3 0308 	sub.w	r3, r3, r8
 80249d8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80249dc:	4418      	add	r0, r3
 80249de:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 80249e2:	9a06      	ldr	r2, [sp, #24]
 80249e4:	eba3 0308 	sub.w	r3, r3, r8
 80249e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80249ec:	449a      	add	sl, r3
 80249ee:	f10c 0c01 	add.w	ip, ip, #1
 80249f2:	e791      	b.n	8024918 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 80249f4:	4b02      	ldr	r3, [pc, #8]	; (8024a00 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b8>)
 80249f6:	6818      	ldr	r0, [r3, #0]
 80249f8:	6803      	ldr	r3, [r0, #0]
 80249fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80249fc:	4798      	blx	r3
 80249fe:	e76f      	b.n	80248e0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8024a00:	200127f4 	.word	0x200127f4
 8024a04:	200127ee 	.word	0x200127ee

08024a08 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8024a08:	b570      	push	{r4, r5, r6, lr}
 8024a0a:	9d04      	ldr	r5, [sp, #16]
 8024a0c:	f89d 6018 	ldrb.w	r6, [sp, #24]
 8024a10:	460c      	mov	r4, r1
 8024a12:	4619      	mov	r1, r3
 8024a14:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8024a18:	2a0c      	cmp	r2, #12
 8024a1a:	d820      	bhi.n	8024a5e <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x56>
 8024a1c:	e8df f002 	tbb	[pc, r2]
 8024a20:	18121807 	.word	0x18121807
 8024a24:	18181818 	.word	0x18181818
 8024a28:	18181818 	.word	0x18181818
 8024a2c:	18          	.byte	0x18
 8024a2d:	00          	.byte	0x00
 8024a2e:	6802      	ldr	r2, [r0, #0]
 8024a30:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8024a34:	68d6      	ldr	r6, [r2, #12]
 8024a36:	462b      	mov	r3, r5
 8024a38:	460a      	mov	r2, r1
 8024a3a:	46b4      	mov	ip, r6
 8024a3c:	4621      	mov	r1, r4
 8024a3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8024a42:	4760      	bx	ip
 8024a44:	462a      	mov	r2, r5
 8024a46:	4620      	mov	r0, r4
 8024a48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8024a4c:	f7ff befc 	b.w	8024848 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8024a50:	4b03      	ldr	r3, [pc, #12]	; (8024a60 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x58>)
 8024a52:	4a04      	ldr	r2, [pc, #16]	; (8024a64 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5c>)
 8024a54:	4804      	ldr	r0, [pc, #16]	; (8024a68 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 8024a56:	f240 21b7 	movw	r1, #695	; 0x2b7
 8024a5a:	f009 fc3d 	bl	802e2d8 <__assert_func>
 8024a5e:	bd70      	pop	{r4, r5, r6, pc}
 8024a60:	080343ed 	.word	0x080343ed
 8024a64:	08034ad9 	.word	0x08034ad9
 8024a68:	080342c8 	.word	0x080342c8

08024a6c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8024a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024a70:	b093      	sub	sp, #76	; 0x4c
 8024a72:	880f      	ldrh	r7, [r1, #0]
 8024a74:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 8024a78:	4681      	mov	r9, r0
 8024a7a:	4688      	mov	r8, r1
 8024a7c:	4615      	mov	r5, r2
 8024a7e:	b12f      	cbz	r7, 8024a8c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 8024a80:	4b71      	ldr	r3, [pc, #452]	; (8024c48 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 8024a82:	4a72      	ldr	r2, [pc, #456]	; (8024c4c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 8024a84:	4872      	ldr	r0, [pc, #456]	; (8024c50 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 8024a86:	21e8      	movs	r1, #232	; 0xe8
 8024a88:	f009 fc26 	bl	802e2d8 <__assert_func>
 8024a8c:	6810      	ldr	r0, [r2, #0]
 8024a8e:	6851      	ldr	r1, [r2, #4]
 8024a90:	ac0e      	add	r4, sp, #56	; 0x38
 8024a92:	c403      	stmia	r4!, {r0, r1}
 8024a94:	6818      	ldr	r0, [r3, #0]
 8024a96:	6859      	ldr	r1, [r3, #4]
 8024a98:	ac10      	add	r4, sp, #64	; 0x40
 8024a9a:	c403      	stmia	r4!, {r0, r1}
 8024a9c:	a80e      	add	r0, sp, #56	; 0x38
 8024a9e:	f7fa f9cf 	bl	801ee40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024aa2:	4629      	mov	r1, r5
 8024aa4:	a810      	add	r0, sp, #64	; 0x40
 8024aa6:	f7fa f9b3 	bl	801ee10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024aaa:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8024aae:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8024ab2:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8024ab6:	4d67      	ldr	r5, [pc, #412]	; (8024c54 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 8024ab8:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8024abc:	6828      	ldr	r0, [r5, #0]
 8024abe:	4c66      	ldr	r4, [pc, #408]	; (8024c58 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>)
 8024ac0:	fb11 2103 	smlabb	r1, r1, r3, r2
 8024ac4:	4489      	add	r9, r1
 8024ac6:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8024aca:	440a      	add	r2, r1
 8024acc:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8024ad0:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8024ad4:	4413      	add	r3, r2
 8024ad6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8024ada:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 8024ade:	930a      	str	r3, [sp, #40]	; 0x28
 8024ae0:	6803      	ldr	r3, [r0, #0]
 8024ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8024ae6:	4798      	blx	r3
 8024ae8:	2801      	cmp	r0, #1
 8024aea:	d11d      	bne.n	8024b28 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbc>
 8024aec:	220b      	movs	r2, #11
 8024aee:	9708      	str	r7, [sp, #32]
 8024af0:	9207      	str	r2, [sp, #28]
 8024af2:	8822      	ldrh	r2, [r4, #0]
 8024af4:	f8cd a010 	str.w	sl, [sp, #16]
 8024af8:	e9cd 0205 	strd	r0, r2, [sp, #20]
 8024afc:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8024b00:	9203      	str	r2, [sp, #12]
 8024b02:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8024b06:	9202      	str	r2, [sp, #8]
 8024b08:	fa1f f28b 	uxth.w	r2, fp
 8024b0c:	9201      	str	r2, [sp, #4]
 8024b0e:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8024b12:	9200      	str	r2, [sp, #0]
 8024b14:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8024b18:	6828      	ldr	r0, [r5, #0]
 8024b1a:	4642      	mov	r2, r8
 8024b1c:	4649      	mov	r1, r9
 8024b1e:	f7f8 f9f3 	bl	801cf08 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8024b22:	b013      	add	sp, #76	; 0x4c
 8024b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024b28:	6828      	ldr	r0, [r5, #0]
 8024b2a:	6803      	ldr	r3, [r0, #0]
 8024b2c:	6a1b      	ldr	r3, [r3, #32]
 8024b2e:	4798      	blx	r3
 8024b30:	8823      	ldrh	r3, [r4, #0]
 8024b32:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8024b36:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8024b3a:	fb01 2303 	mla	r3, r1, r3, r2
 8024b3e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8024b42:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
 8024b46:	930b      	str	r3, [sp, #44]	; 0x2c
 8024b48:	005b      	lsls	r3, r3, #1
 8024b4a:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8024b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024b50:	429f      	cmp	r7, r3
 8024b52:	da72      	bge.n	8024c3a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ce>
 8024b54:	2100      	movs	r1, #0
 8024b56:	4559      	cmp	r1, fp
 8024b58:	da5e      	bge.n	8024c18 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8024b5a:	f819 3001 	ldrb.w	r3, [r9, r1]
 8024b5e:	2204      	movs	r2, #4
 8024b60:	fb12 2303 	smlabb	r3, r2, r3, r2
 8024b64:	f858 2003 	ldr.w	r2, [r8, r3]
 8024b68:	0e15      	lsrs	r5, r2, #24
 8024b6a:	d013      	beq.n	8024b94 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8024b6c:	2dff      	cmp	r5, #255	; 0xff
 8024b6e:	ea4f 2412 	mov.w	r4, r2, lsr #8
 8024b72:	d111      	bne.n	8024b98 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8024b74:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8024b78:	d10e      	bne.n	8024b98 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8024b7a:	0953      	lsrs	r3, r2, #5
 8024b7c:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 8024b80:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024b84:	f024 0407 	bic.w	r4, r4, #7
 8024b88:	431c      	orrs	r4, r3
 8024b8a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8024b8e:	4314      	orrs	r4, r2
 8024b90:	f820 4011 	strh.w	r4, [r0, r1, lsl #1]
 8024b94:	3101      	adds	r1, #1
 8024b96:	e7de      	b.n	8024b56 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xea>
 8024b98:	fb0a f505 	mul.w	r5, sl, r5
 8024b9c:	1c6b      	adds	r3, r5, #1
 8024b9e:	f830 c011 	ldrh.w	ip, [r0, r1, lsl #1]
 8024ba2:	eb03 2325 	add.w	r3, r3, r5, asr #8
 8024ba6:	121b      	asrs	r3, r3, #8
 8024ba8:	fa1f fe83 	uxth.w	lr, r3
 8024bac:	ea4f 262c 	mov.w	r6, ip, asr #8
 8024bb0:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8024bb4:	43db      	mvns	r3, r3
 8024bb6:	b2db      	uxtb	r3, r3
 8024bb8:	fb15 f50e 	smulbb	r5, r5, lr
 8024bbc:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8024bc0:	fb06 5603 	mla	r6, r6, r3, r5
 8024bc4:	b2d2      	uxtb	r2, r2
 8024bc6:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8024bca:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8024bce:	fa5f fc8c 	uxtb.w	ip, ip
 8024bd2:	fb12 f20e 	smulbb	r2, r2, lr
 8024bd6:	fb0c 2203 	mla	r2, ip, r3, r2
 8024bda:	b2e4      	uxtb	r4, r4
 8024bdc:	b2b6      	uxth	r6, r6
 8024bde:	fb14 f40e 	smulbb	r4, r4, lr
 8024be2:	b292      	uxth	r2, r2
 8024be4:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8024be8:	fb05 4503 	mla	r5, r5, r3, r4
 8024bec:	1c73      	adds	r3, r6, #1
 8024bee:	1c54      	adds	r4, r2, #1
 8024bf0:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8024bf4:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8024bf8:	b2ad      	uxth	r5, r5
 8024bfa:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8024bfe:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8024c02:	4326      	orrs	r6, r4
 8024c04:	1c6c      	adds	r4, r5, #1
 8024c06:	eb04 2415 	add.w	r4, r4, r5, lsr #8
 8024c0a:	0964      	lsrs	r4, r4, #5
 8024c0c:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8024c10:	4326      	orrs	r6, r4
 8024c12:	f820 6011 	strh.w	r6, [r0, r1, lsl #1]
 8024c16:	e7bd      	b.n	8024b94 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8024c18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024c1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024c1c:	881b      	ldrh	r3, [r3, #0]
 8024c1e:	eba3 030b 	sub.w	r3, r3, fp
 8024c22:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024c26:	4418      	add	r0, r3
 8024c28:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8024c2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024c2e:	eba3 030b 	sub.w	r3, r3, fp
 8024c32:	4413      	add	r3, r2
 8024c34:	4499      	add	r9, r3
 8024c36:	3701      	adds	r7, #1
 8024c38:	e789      	b.n	8024b4e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 8024c3a:	4b06      	ldr	r3, [pc, #24]	; (8024c54 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 8024c3c:	6818      	ldr	r0, [r3, #0]
 8024c3e:	6803      	ldr	r3, [r0, #0]
 8024c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024c42:	4798      	blx	r3
 8024c44:	e76d      	b.n	8024b22 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb6>
 8024c46:	bf00      	nop
 8024c48:	080341c6 	.word	0x080341c6
 8024c4c:	080348aa 	.word	0x080348aa
 8024c50:	080342c8 	.word	0x080342c8
 8024c54:	200127f4 	.word	0x200127f4
 8024c58:	200127ee 	.word	0x200127ee

08024c5c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 8024c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024c60:	4614      	mov	r4, r2
 8024c62:	880a      	ldrh	r2, [r1, #0]
 8024c64:	b093      	sub	sp, #76	; 0x4c
 8024c66:	2a02      	cmp	r2, #2
 8024c68:	4606      	mov	r6, r0
 8024c6a:	4689      	mov	r9, r1
 8024c6c:	f89d 7070 	ldrb.w	r7, [sp, #112]	; 0x70
 8024c70:	d006      	beq.n	8024c80 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 8024c72:	4b7a      	ldr	r3, [pc, #488]	; (8024e5c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x200>)
 8024c74:	4a7a      	ldr	r2, [pc, #488]	; (8024e60 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x204>)
 8024c76:	487b      	ldr	r0, [pc, #492]	; (8024e64 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x208>)
 8024c78:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8024c7c:	f009 fb2c 	bl	802e2d8 <__assert_func>
 8024c80:	2f00      	cmp	r7, #0
 8024c82:	d04b      	beq.n	8024d1c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 8024c84:	6820      	ldr	r0, [r4, #0]
 8024c86:	6861      	ldr	r1, [r4, #4]
 8024c88:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 8024e6c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x210>
 8024c8c:	ad0e      	add	r5, sp, #56	; 0x38
 8024c8e:	c503      	stmia	r5!, {r0, r1}
 8024c90:	6818      	ldr	r0, [r3, #0]
 8024c92:	6859      	ldr	r1, [r3, #4]
 8024c94:	ad10      	add	r5, sp, #64	; 0x40
 8024c96:	c503      	stmia	r5!, {r0, r1}
 8024c98:	a80e      	add	r0, sp, #56	; 0x38
 8024c9a:	f7fa f8d1 	bl	801ee40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024c9e:	4621      	mov	r1, r4
 8024ca0:	a810      	add	r0, sp, #64	; 0x40
 8024ca2:	f7fa f8b5 	bl	801ee10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024ca6:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8024caa:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8024cae:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8024cb2:	f8da 0000 	ldr.w	r0, [sl]
 8024cb6:	f9bd 5044 	ldrsh.w	r5, [sp, #68]	; 0x44
 8024cba:	f9bd 8046 	ldrsh.w	r8, [sp, #70]	; 0x46
 8024cbe:	fb11 2103 	smlabb	r1, r1, r3, r2
 8024cc2:	1874      	adds	r4, r6, r1
 8024cc4:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8024cc8:	4e67      	ldr	r6, [pc, #412]	; (8024e68 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x20c>)
 8024cca:	440a      	add	r2, r1
 8024ccc:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8024cd0:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8024cd4:	4413      	add	r3, r2
 8024cd6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8024cda:	6803      	ldr	r3, [r0, #0]
 8024cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8024ce0:	4798      	blx	r3
 8024ce2:	2801      	cmp	r0, #1
 8024ce4:	d11d      	bne.n	8024d22 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc6>
 8024ce6:	2200      	movs	r2, #0
 8024ce8:	210b      	movs	r1, #11
 8024cea:	e9cd 1207 	strd	r1, r2, [sp, #28]
 8024cee:	8831      	ldrh	r1, [r6, #0]
 8024cf0:	9704      	str	r7, [sp, #16]
 8024cf2:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8024cf6:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8024cfa:	9203      	str	r2, [sp, #12]
 8024cfc:	fa1f f288 	uxth.w	r2, r8
 8024d00:	9202      	str	r2, [sp, #8]
 8024d02:	b2ad      	uxth	r5, r5
 8024d04:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8024d08:	9200      	str	r2, [sp, #0]
 8024d0a:	9501      	str	r5, [sp, #4]
 8024d0c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8024d10:	f8da 0000 	ldr.w	r0, [sl]
 8024d14:	464a      	mov	r2, r9
 8024d16:	4621      	mov	r1, r4
 8024d18:	f7f8 f8f6 	bl	801cf08 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8024d1c:	b013      	add	sp, #76	; 0x4c
 8024d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024d22:	f8da 0000 	ldr.w	r0, [sl]
 8024d26:	6803      	ldr	r3, [r0, #0]
 8024d28:	6a1b      	ldr	r3, [r3, #32]
 8024d2a:	4798      	blx	r3
 8024d2c:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8024d30:	8833      	ldrh	r3, [r6, #0]
 8024d32:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8024d36:	fb01 2303 	mla	r3, r1, r3, r2
 8024d3a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8024d3e:	2fff      	cmp	r7, #255	; 0xff
 8024d40:	f109 0304 	add.w	r3, r9, #4
 8024d44:	930a      	str	r3, [sp, #40]	; 0x28
 8024d46:	ea25 72e5 	bic.w	r2, r5, r5, asr #31
 8024d4a:	d111      	bne.n	8024d70 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x114>
 8024d4c:	b212      	sxth	r2, r2
 8024d4e:	ea4f 0e42 	mov.w	lr, r2, lsl #1
 8024d52:	2100      	movs	r1, #0
 8024d54:	4541      	cmp	r1, r8
 8024d56:	da7a      	bge.n	8024e4e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f2>
 8024d58:	2300      	movs	r3, #0
 8024d5a:	42ab      	cmp	r3, r5
 8024d5c:	da6b      	bge.n	8024e36 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1da>
 8024d5e:	f814 c003 	ldrb.w	ip, [r4, r3]
 8024d62:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8024d64:	f837 c01c 	ldrh.w	ip, [r7, ip, lsl #1]
 8024d68:	f820 c013 	strh.w	ip, [r0, r3, lsl #1]
 8024d6c:	3301      	adds	r3, #1
 8024d6e:	e7f4      	b.n	8024d5a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xfe>
 8024d70:	b213      	sxth	r3, r2
 8024d72:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 8024d76:	930b      	str	r3, [sp, #44]	; 0x2c
 8024d78:	005b      	lsls	r3, r3, #1
 8024d7a:	930c      	str	r3, [sp, #48]	; 0x30
 8024d7c:	f04f 0900 	mov.w	r9, #0
 8024d80:	b2ba      	uxth	r2, r7
 8024d82:	fa1f fc8c 	uxth.w	ip, ip
 8024d86:	960d      	str	r6, [sp, #52]	; 0x34
 8024d88:	45c1      	cmp	r9, r8
 8024d8a:	da60      	bge.n	8024e4e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f2>
 8024d8c:	46a3      	mov	fp, r4
 8024d8e:	4682      	mov	sl, r0
 8024d90:	ebab 0304 	sub.w	r3, fp, r4
 8024d94:	429d      	cmp	r5, r3
 8024d96:	dd3e      	ble.n	8024e16 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ba>
 8024d98:	f81b 3b01 	ldrb.w	r3, [fp], #1
 8024d9c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8024d9e:	f8ba 1000 	ldrh.w	r1, [sl]
 8024da2:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024da6:	120e      	asrs	r6, r1, #8
 8024da8:	121f      	asrs	r7, r3, #8
 8024daa:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8024dae:	fb16 f60c 	smulbb	r6, r6, ip
 8024db2:	ea4f 0ee1 	mov.w	lr, r1, asr #3
 8024db6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8024dba:	00c9      	lsls	r1, r1, #3
 8024dbc:	fb07 6702 	mla	r7, r7, r2, r6
 8024dc0:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8024dc4:	10de      	asrs	r6, r3, #3
 8024dc6:	b2c9      	uxtb	r1, r1
 8024dc8:	00db      	lsls	r3, r3, #3
 8024dca:	fb1e fe0c 	smulbb	lr, lr, ip
 8024dce:	fb11 f10c 	smulbb	r1, r1, ip
 8024dd2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8024dd6:	b2db      	uxtb	r3, r3
 8024dd8:	b2bf      	uxth	r7, r7
 8024dda:	fb06 e602 	mla	r6, r6, r2, lr
 8024dde:	fb03 1302 	mla	r3, r3, r2, r1
 8024de2:	b2b6      	uxth	r6, r6
 8024de4:	b29b      	uxth	r3, r3
 8024de6:	1c79      	adds	r1, r7, #1
 8024de8:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8024dec:	f106 0e01 	add.w	lr, r6, #1
 8024df0:	1c59      	adds	r1, r3, #1
 8024df2:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8024df6:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 8024dfa:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8024dfe:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8024e02:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8024e06:	430f      	orrs	r7, r1
 8024e08:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8024e0c:	ea47 070e 	orr.w	r7, r7, lr
 8024e10:	f82a 7b02 	strh.w	r7, [sl], #2
 8024e14:	e7bc      	b.n	8024d90 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x134>
 8024e16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024e18:	990c      	ldr	r1, [sp, #48]	; 0x30
 8024e1a:	881b      	ldrh	r3, [r3, #0]
 8024e1c:	1b5b      	subs	r3, r3, r5
 8024e1e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8024e22:	4418      	add	r0, r3
 8024e24:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8024e28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8024e2a:	1b5b      	subs	r3, r3, r5
 8024e2c:	440b      	add	r3, r1
 8024e2e:	441c      	add	r4, r3
 8024e30:	f109 0901 	add.w	r9, r9, #1
 8024e34:	e7a8      	b.n	8024d88 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x12c>
 8024e36:	8833      	ldrh	r3, [r6, #0]
 8024e38:	1b5b      	subs	r3, r3, r5
 8024e3a:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8024e3e:	4418      	add	r0, r3
 8024e40:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8024e44:	1b5b      	subs	r3, r3, r5
 8024e46:	4413      	add	r3, r2
 8024e48:	441c      	add	r4, r3
 8024e4a:	3101      	adds	r1, #1
 8024e4c:	e782      	b.n	8024d54 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xf8>
 8024e4e:	4b07      	ldr	r3, [pc, #28]	; (8024e6c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x210>)
 8024e50:	6818      	ldr	r0, [r3, #0]
 8024e52:	6803      	ldr	r3, [r0, #0]
 8024e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024e56:	4798      	blx	r3
 8024e58:	e760      	b.n	8024d1c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 8024e5a:	bf00      	nop
 8024e5c:	08034084 	.word	0x08034084
 8024e60:	08034714 	.word	0x08034714
 8024e64:	080342c8 	.word	0x080342c8
 8024e68:	200127ee 	.word	0x200127ee
 8024e6c:	200127f4 	.word	0x200127f4

08024e70 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8024e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024e74:	4616      	mov	r6, r2
 8024e76:	880a      	ldrh	r2, [r1, #0]
 8024e78:	b093      	sub	sp, #76	; 0x4c
 8024e7a:	2a01      	cmp	r2, #1
 8024e7c:	4681      	mov	r9, r0
 8024e7e:	4688      	mov	r8, r1
 8024e80:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 8024e84:	d006      	beq.n	8024e94 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x24>
 8024e86:	4b6c      	ldr	r3, [pc, #432]	; (8025038 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8024e88:	4a6c      	ldr	r2, [pc, #432]	; (802503c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 8024e8a:	486d      	ldr	r0, [pc, #436]	; (8025040 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 8024e8c:	f240 119d 	movw	r1, #413	; 0x19d
 8024e90:	f009 fa22 	bl	802e2d8 <__assert_func>
 8024e94:	f1ba 0f00 	cmp.w	sl, #0
 8024e98:	d04a      	beq.n	8024f30 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 8024e9a:	6830      	ldr	r0, [r6, #0]
 8024e9c:	6871      	ldr	r1, [r6, #4]
 8024e9e:	4d69      	ldr	r5, [pc, #420]	; (8025044 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 8024ea0:	ac0e      	add	r4, sp, #56	; 0x38
 8024ea2:	c403      	stmia	r4!, {r0, r1}
 8024ea4:	6818      	ldr	r0, [r3, #0]
 8024ea6:	6859      	ldr	r1, [r3, #4]
 8024ea8:	ac10      	add	r4, sp, #64	; 0x40
 8024eaa:	c403      	stmia	r4!, {r0, r1}
 8024eac:	a80e      	add	r0, sp, #56	; 0x38
 8024eae:	f7f9 ffc7 	bl	801ee40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024eb2:	4631      	mov	r1, r6
 8024eb4:	a810      	add	r0, sp, #64	; 0x40
 8024eb6:	f7f9 ffab 	bl	801ee10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024eba:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8024ebe:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8024ec2:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8024ec6:	6828      	ldr	r0, [r5, #0]
 8024ec8:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 8024ecc:	4c5e      	ldr	r4, [pc, #376]	; (8025048 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 8024ece:	fb11 2103 	smlabb	r1, r1, r3, r2
 8024ed2:	4489      	add	r9, r1
 8024ed4:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8024ed8:	440a      	add	r2, r1
 8024eda:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8024ede:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8024ee2:	4413      	add	r3, r2
 8024ee4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8024ee8:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 8024eec:	930a      	str	r3, [sp, #40]	; 0x28
 8024eee:	6803      	ldr	r3, [r0, #0]
 8024ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8024ef4:	4798      	blx	r3
 8024ef6:	2801      	cmp	r0, #1
 8024ef8:	d11d      	bne.n	8024f36 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc6>
 8024efa:	220b      	movs	r2, #11
 8024efc:	2100      	movs	r1, #0
 8024efe:	e9cd 2107 	strd	r2, r1, [sp, #28]
 8024f02:	8822      	ldrh	r2, [r4, #0]
 8024f04:	f8cd a010 	str.w	sl, [sp, #16]
 8024f08:	e9cd 0205 	strd	r0, r2, [sp, #20]
 8024f0c:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8024f10:	9203      	str	r2, [sp, #12]
 8024f12:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8024f16:	9202      	str	r2, [sp, #8]
 8024f18:	b2b6      	uxth	r6, r6
 8024f1a:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8024f1e:	9200      	str	r2, [sp, #0]
 8024f20:	9601      	str	r6, [sp, #4]
 8024f22:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8024f26:	6828      	ldr	r0, [r5, #0]
 8024f28:	4642      	mov	r2, r8
 8024f2a:	4649      	mov	r1, r9
 8024f2c:	f7f7 ffec 	bl	801cf08 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8024f30:	b013      	add	sp, #76	; 0x4c
 8024f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024f36:	6828      	ldr	r0, [r5, #0]
 8024f38:	6803      	ldr	r3, [r0, #0]
 8024f3a:	6a1b      	ldr	r3, [r3, #32]
 8024f3c:	4798      	blx	r3
 8024f3e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8024f42:	8823      	ldrh	r3, [r4, #0]
 8024f44:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8024f48:	940d      	str	r4, [sp, #52]	; 0x34
 8024f4a:	fb01 2303 	mla	r3, r1, r3, r2
 8024f4e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8024f52:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 8024f56:	930b      	str	r3, [sp, #44]	; 0x2c
 8024f58:	ea6f 010a 	mvn.w	r1, sl
 8024f5c:	005b      	lsls	r3, r3, #1
 8024f5e:	930c      	str	r3, [sp, #48]	; 0x30
 8024f60:	f04f 0e00 	mov.w	lr, #0
 8024f64:	b2c9      	uxtb	r1, r1
 8024f66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024f68:	459e      	cmp	lr, r3
 8024f6a:	da5f      	bge.n	802502c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 8024f6c:	2700      	movs	r7, #0
 8024f6e:	fa1f fb8a 	uxth.w	fp, sl
 8024f72:	42b7      	cmp	r7, r6
 8024f74:	da4a      	bge.n	802500c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19c>
 8024f76:	f819 3007 	ldrb.w	r3, [r9, r7]
 8024f7a:	2203      	movs	r2, #3
 8024f7c:	2404      	movs	r4, #4
 8024f7e:	fb12 4303 	smlabb	r3, r2, r3, r4
 8024f82:	eb08 0403 	add.w	r4, r8, r3
 8024f86:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8024f8a:	78a2      	ldrb	r2, [r4, #2]
 8024f8c:	7865      	ldrb	r5, [r4, #1]
 8024f8e:	f818 c003 	ldrb.w	ip, [r8, r3]
 8024f92:	d10c      	bne.n	8024fae <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x13e>
 8024f94:	4b2d      	ldr	r3, [pc, #180]	; (802504c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 8024f96:	00ed      	lsls	r5, r5, #3
 8024f98:	ea03 2202 	and.w	r2, r3, r2, lsl #8
 8024f9c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8024fa0:	432a      	orrs	r2, r5
 8024fa2:	ea42 02dc 	orr.w	r2, r2, ip, lsr #3
 8024fa6:	f820 2017 	strh.w	r2, [r0, r7, lsl #1]
 8024faa:	3701      	adds	r7, #1
 8024fac:	e7e1      	b.n	8024f72 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x102>
 8024fae:	f830 3017 	ldrh.w	r3, [r0, r7, lsl #1]
 8024fb2:	121c      	asrs	r4, r3, #8
 8024fb4:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8024fb8:	fb12 f20b 	smulbb	r2, r2, fp
 8024fbc:	fb04 2201 	mla	r2, r4, r1, r2
 8024fc0:	10dc      	asrs	r4, r3, #3
 8024fc2:	00db      	lsls	r3, r3, #3
 8024fc4:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8024fc8:	b2db      	uxtb	r3, r3
 8024fca:	fb15 f50b 	smulbb	r5, r5, fp
 8024fce:	fb1c fc0b 	smulbb	ip, ip, fp
 8024fd2:	b292      	uxth	r2, r2
 8024fd4:	fb04 5501 	mla	r5, r4, r1, r5
 8024fd8:	fb03 cc01 	mla	ip, r3, r1, ip
 8024fdc:	b2ad      	uxth	r5, r5
 8024fde:	fa1f fc8c 	uxth.w	ip, ip
 8024fe2:	1c53      	adds	r3, r2, #1
 8024fe4:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8024fe8:	1c6c      	adds	r4, r5, #1
 8024fea:	f10c 0301 	add.w	r3, ip, #1
 8024fee:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8024ff2:	eb04 2515 	add.w	r5, r4, r5, lsr #8
 8024ff6:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8024ffa:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8024ffe:	096d      	lsrs	r5, r5, #5
 8025000:	ea42 020c 	orr.w	r2, r2, ip
 8025004:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025008:	432a      	orrs	r2, r5
 802500a:	e7cc      	b.n	8024fa6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x136>
 802500c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802500e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025010:	881b      	ldrh	r3, [r3, #0]
 8025012:	1b9b      	subs	r3, r3, r6
 8025014:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025018:	4418      	add	r0, r3
 802501a:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 802501e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8025020:	1b9b      	subs	r3, r3, r6
 8025022:	4413      	add	r3, r2
 8025024:	4499      	add	r9, r3
 8025026:	f10e 0e01 	add.w	lr, lr, #1
 802502a:	e79c      	b.n	8024f66 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf6>
 802502c:	4b05      	ldr	r3, [pc, #20]	; (8025044 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 802502e:	6818      	ldr	r0, [r3, #0]
 8025030:	6803      	ldr	r3, [r0, #0]
 8025032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025034:	4798      	blx	r3
 8025036:	e77b      	b.n	8024f30 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 8025038:	080340d2 	.word	0x080340d2
 802503c:	0803479d 	.word	0x0803479d
 8025040:	080342c8 	.word	0x080342c8
 8025044:	200127f4 	.word	0x200127f4
 8025048:	200127ee 	.word	0x200127ee
 802504c:	fffff800 	.word	0xfffff800

08025050 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8025050:	b430      	push	{r4, r5}
 8025052:	780d      	ldrb	r5, [r1, #0]
 8025054:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8025058:	2d01      	cmp	r5, #1
 802505a:	d00a      	beq.n	8025072 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 802505c:	d305      	bcc.n	802506a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 802505e:	2d02      	cmp	r5, #2
 8025060:	d10b      	bne.n	802507a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 8025062:	9402      	str	r4, [sp, #8]
 8025064:	bc30      	pop	{r4, r5}
 8025066:	f7ff bdf9 	b.w	8024c5c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 802506a:	9402      	str	r4, [sp, #8]
 802506c:	bc30      	pop	{r4, r5}
 802506e:	f7ff bcfd 	b.w	8024a6c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8025072:	9402      	str	r4, [sp, #8]
 8025074:	bc30      	pop	{r4, r5}
 8025076:	f7ff befb 	b.w	8024e70 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 802507a:	bc30      	pop	{r4, r5}
 802507c:	4770      	bx	lr
	...

08025080 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8025080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025084:	4605      	mov	r5, r0
 8025086:	b089      	sub	sp, #36	; 0x24
 8025088:	6810      	ldr	r0, [r2, #0]
 802508a:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
 802508e:	460c      	mov	r4, r1
 8025090:	6851      	ldr	r1, [r2, #4]
 8025092:	ae04      	add	r6, sp, #16
 8025094:	c603      	stmia	r6!, {r0, r1}
 8025096:	6818      	ldr	r0, [r3, #0]
 8025098:	6859      	ldr	r1, [r3, #4]
 802509a:	ae06      	add	r6, sp, #24
 802509c:	4617      	mov	r7, r2
 802509e:	c603      	stmia	r6!, {r0, r1}
 80250a0:	a804      	add	r0, sp, #16
 80250a2:	f7f9 fecd 	bl	801ee40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80250a6:	4639      	mov	r1, r7
 80250a8:	a806      	add	r0, sp, #24
 80250aa:	f7f9 feb1 	bl	801ee10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80250ae:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 80250b2:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80250b6:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80250ba:	f9bd 801c 	ldrsh.w	r8, [sp, #28]
 80250be:	fb11 2103 	smlabb	r1, r1, r3, r2
 80250c2:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 80250c6:	440c      	add	r4, r1
 80250c8:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80250cc:	440a      	add	r2, r1
 80250ce:	f8ad 2018 	strh.w	r2, [sp, #24]
 80250d2:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80250d6:	4413      	add	r3, r2
 80250d8:	f8ad 301a 	strh.w	r3, [sp, #26]
 80250dc:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80250e0:	9300      	str	r3, [sp, #0]
 80250e2:	4b80      	ldr	r3, [pc, #512]	; (80252e4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x264>)
 80250e4:	6818      	ldr	r0, [r3, #0]
 80250e6:	6803      	ldr	r3, [r0, #0]
 80250e8:	6a1b      	ldr	r3, [r3, #32]
 80250ea:	4798      	blx	r3
 80250ec:	4b7e      	ldr	r3, [pc, #504]	; (80252e8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x268>)
 80250ee:	f9bd 601a 	ldrsh.w	r6, [sp, #26]
 80250f2:	881a      	ldrh	r2, [r3, #0]
 80250f4:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 80250f8:	fb06 1202 	mla	r2, r6, r2, r1
 80250fc:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8025100:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025104:	ea28 72e8 	bic.w	r2, r8, r8, asr #31
 8025108:	b212      	sxth	r2, r2
 802510a:	d117      	bne.n	802513c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xbc>
 802510c:	9201      	str	r2, [sp, #4]
 802510e:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 8025112:	f04f 0a00 	mov.w	sl, #0
 8025116:	9302      	str	r3, [sp, #8]
 8025118:	9b00      	ldr	r3, [sp, #0]
 802511a:	459a      	cmp	sl, r3
 802511c:	f280 80d9 	bge.w	80252d2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x252>
 8025120:	2100      	movs	r1, #0
 8025122:	4541      	cmp	r1, r8
 8025124:	f280 80c1 	bge.w	80252aa <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x22a>
 8025128:	5c63      	ldrb	r3, [r4, r1]
 802512a:	b12b      	cbz	r3, 8025138 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xb8>
 802512c:	2bff      	cmp	r3, #255	; 0xff
 802512e:	f835 e011 	ldrh.w	lr, [r5, r1, lsl #1]
 8025132:	d176      	bne.n	8025222 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1a2>
 8025134:	f820 e011 	strh.w	lr, [r0, r1, lsl #1]
 8025138:	3101      	adds	r1, #1
 802513a:	e7f2      	b.n	8025122 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa2>
 802513c:	9202      	str	r2, [sp, #8]
 802513e:	0052      	lsls	r2, r2, #1
 8025140:	9201      	str	r2, [sp, #4]
 8025142:	f04f 0b00 	mov.w	fp, #0
 8025146:	9303      	str	r3, [sp, #12]
 8025148:	9b00      	ldr	r3, [sp, #0]
 802514a:	459b      	cmp	fp, r3
 802514c:	f280 80c1 	bge.w	80252d2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x252>
 8025150:	f04f 0c00 	mov.w	ip, #0
 8025154:	45c4      	cmp	ip, r8
 8025156:	da4f      	bge.n	80251f8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x178>
 8025158:	f814 300c 	ldrb.w	r3, [r4, ip]
 802515c:	2b00      	cmp	r3, #0
 802515e:	d048      	beq.n	80251f2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x172>
 8025160:	fb09 f303 	mul.w	r3, r9, r3
 8025164:	1c5a      	adds	r2, r3, #1
 8025166:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802516a:	121b      	asrs	r3, r3, #8
 802516c:	d041      	beq.n	80251f2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x172>
 802516e:	f830 201c 	ldrh.w	r2, [r0, ip, lsl #1]
 8025172:	f835 e01c 	ldrh.w	lr, [r5, ip, lsl #1]
 8025176:	b29e      	uxth	r6, r3
 8025178:	1211      	asrs	r1, r2, #8
 802517a:	43db      	mvns	r3, r3
 802517c:	b2db      	uxtb	r3, r3
 802517e:	ea4f 272e 	mov.w	r7, lr, asr #8
 8025182:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8025186:	fb11 f103 	smulbb	r1, r1, r3
 802518a:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 802518e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8025192:	00d2      	lsls	r2, r2, #3
 8025194:	fb07 1706 	mla	r7, r7, r6, r1
 8025198:	b2d2      	uxtb	r2, r2
 802519a:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802519e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80251a2:	fb12 f203 	smulbb	r2, r2, r3
 80251a6:	fa5f fe8e 	uxtb.w	lr, lr
 80251aa:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80251ae:	fb0e 2206 	mla	r2, lr, r6, r2
 80251b2:	fb1a fa03 	smulbb	sl, sl, r3
 80251b6:	b2bf      	uxth	r7, r7
 80251b8:	b292      	uxth	r2, r2
 80251ba:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80251be:	fb01 a106 	mla	r1, r1, r6, sl
 80251c2:	1c7b      	adds	r3, r7, #1
 80251c4:	f102 0a01 	add.w	sl, r2, #1
 80251c8:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80251cc:	eb0a 2a12 	add.w	sl, sl, r2, lsr #8
 80251d0:	b289      	uxth	r1, r1
 80251d2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80251d6:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80251da:	ea47 070a 	orr.w	r7, r7, sl
 80251de:	f101 0a01 	add.w	sl, r1, #1
 80251e2:	eb0a 2111 	add.w	r1, sl, r1, lsr #8
 80251e6:	0949      	lsrs	r1, r1, #5
 80251e8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80251ec:	430f      	orrs	r7, r1
 80251ee:	f820 701c 	strh.w	r7, [r0, ip, lsl #1]
 80251f2:	f10c 0c01 	add.w	ip, ip, #1
 80251f6:	e7ad      	b.n	8025154 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xd4>
 80251f8:	9b03      	ldr	r3, [sp, #12]
 80251fa:	9a01      	ldr	r2, [sp, #4]
 80251fc:	881b      	ldrh	r3, [r3, #0]
 80251fe:	eba3 0308 	sub.w	r3, r3, r8
 8025202:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025206:	4418      	add	r0, r3
 8025208:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 802520c:	eba3 0308 	sub.w	r3, r3, r8
 8025210:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8025214:	4415      	add	r5, r2
 8025216:	9a02      	ldr	r2, [sp, #8]
 8025218:	4413      	add	r3, r2
 802521a:	441c      	add	r4, r3
 802521c:	f10b 0b01 	add.w	fp, fp, #1
 8025220:	e792      	b.n	8025148 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xc8>
 8025222:	f830 2011 	ldrh.w	r2, [r0, r1, lsl #1]
 8025226:	b29f      	uxth	r7, r3
 8025228:	1216      	asrs	r6, r2, #8
 802522a:	43db      	mvns	r3, r3
 802522c:	b2db      	uxtb	r3, r3
 802522e:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8025232:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8025236:	fb16 f603 	smulbb	r6, r6, r3
 802523a:	ea4f 09e2 	mov.w	r9, r2, asr #3
 802523e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8025242:	00d2      	lsls	r2, r2, #3
 8025244:	fb0c 6c07 	mla	ip, ip, r7, r6
 8025248:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 802524c:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8025250:	b2d2      	uxtb	r2, r2
 8025252:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8025256:	fa1f fc8c 	uxth.w	ip, ip
 802525a:	fb19 f903 	smulbb	r9, r9, r3
 802525e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8025262:	fa5f fe8e 	uxtb.w	lr, lr
 8025266:	fb12 f203 	smulbb	r2, r2, r3
 802526a:	fb06 9607 	mla	r6, r6, r7, r9
 802526e:	fb0e 2207 	mla	r2, lr, r7, r2
 8025272:	f10c 0901 	add.w	r9, ip, #1
 8025276:	b292      	uxth	r2, r2
 8025278:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 802527c:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 8025280:	f102 0c01 	add.w	ip, r2, #1
 8025284:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8025288:	b2b6      	uxth	r6, r6
 802528a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802528e:	ea49 0c02 	orr.w	ip, r9, r2
 8025292:	f106 0901 	add.w	r9, r6, #1
 8025296:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 802529a:	0976      	lsrs	r6, r6, #5
 802529c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80252a0:	ea4c 0c06 	orr.w	ip, ip, r6
 80252a4:	f820 c011 	strh.w	ip, [r0, r1, lsl #1]
 80252a8:	e746      	b.n	8025138 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xb8>
 80252aa:	9b02      	ldr	r3, [sp, #8]
 80252ac:	881b      	ldrh	r3, [r3, #0]
 80252ae:	eba3 0308 	sub.w	r3, r3, r8
 80252b2:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 80252b6:	4418      	add	r0, r3
 80252b8:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80252bc:	eba3 0308 	sub.w	r3, r3, r8
 80252c0:	eb0b 0243 	add.w	r2, fp, r3, lsl #1
 80252c4:	4415      	add	r5, r2
 80252c6:	9a01      	ldr	r2, [sp, #4]
 80252c8:	4413      	add	r3, r2
 80252ca:	441c      	add	r4, r3
 80252cc:	f10a 0a01 	add.w	sl, sl, #1
 80252d0:	e722      	b.n	8025118 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x98>
 80252d2:	4b04      	ldr	r3, [pc, #16]	; (80252e4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x264>)
 80252d4:	6818      	ldr	r0, [r3, #0]
 80252d6:	6803      	ldr	r3, [r0, #0]
 80252d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80252da:	4798      	blx	r3
 80252dc:	b009      	add	sp, #36	; 0x24
 80252de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80252e2:	bf00      	nop
 80252e4:	200127f4 	.word	0x200127f4
 80252e8:	200127ee 	.word	0x200127ee

080252ec <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 80252ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80252f0:	b089      	sub	sp, #36	; 0x24
 80252f2:	4682      	mov	sl, r0
 80252f4:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 80252f8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80252fa:	460d      	mov	r5, r1
 80252fc:	4691      	mov	r9, r2
 80252fe:	4698      	mov	r8, r3
 8025300:	b3ae      	cbz	r6, 802536e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8025302:	4608      	mov	r0, r1
 8025304:	f7fc faa0 	bl	8021848 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8025308:	4607      	mov	r7, r0
 802530a:	4628      	mov	r0, r5
 802530c:	f7fc fad6 	bl	80218bc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8025310:	f8ad 000e 	strh.w	r0, [sp, #14]
 8025314:	4628      	mov	r0, r5
 8025316:	f8ad 9008 	strh.w	r9, [sp, #8]
 802531a:	f8ad 800a 	strh.w	r8, [sp, #10]
 802531e:	f8ad 700c 	strh.w	r7, [sp, #12]
 8025322:	f7fc fc1d 	bl	8021b60 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8025326:	b178      	cbz	r0, 8025348 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8025328:	4628      	mov	r0, r5
 802532a:	f7fc fc19 	bl	8021b60 <_ZNK8touchgfx6Bitmap9getFormatEv>
 802532e:	2802      	cmp	r0, #2
 8025330:	d00a      	beq.n	8025348 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8025332:	4628      	mov	r0, r5
 8025334:	f7fc fc14 	bl	8021b60 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8025338:	280b      	cmp	r0, #11
 802533a:	d005      	beq.n	8025348 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 802533c:	4b69      	ldr	r3, [pc, #420]	; (80254e4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1f8>)
 802533e:	4a6a      	ldr	r2, [pc, #424]	; (80254e8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fc>)
 8025340:	486a      	ldr	r0, [pc, #424]	; (80254ec <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x200>)
 8025342:	214b      	movs	r1, #75	; 0x4b
 8025344:	f008 ffc8 	bl	802e2d8 <__assert_func>
 8025348:	4628      	mov	r0, r5
 802534a:	f7fc fb85 	bl	8021a58 <_ZNK8touchgfx6Bitmap7getDataEv>
 802534e:	4607      	mov	r7, r0
 8025350:	4628      	mov	r0, r5
 8025352:	f7fc fbb3 	bl	8021abc <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8025356:	4681      	mov	r9, r0
 8025358:	4628      	mov	r0, r5
 802535a:	f7fc fc01 	bl	8021b60 <_ZNK8touchgfx6Bitmap9getFormatEv>
 802535e:	2802      	cmp	r0, #2
 8025360:	d108      	bne.n	8025374 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 8025362:	4633      	mov	r3, r6
 8025364:	4622      	mov	r2, r4
 8025366:	a902      	add	r1, sp, #8
 8025368:	4638      	mov	r0, r7
 802536a:	f7ff fa6d 	bl	8024848 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 802536e:	b009      	add	sp, #36	; 0x24
 8025370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025374:	4628      	mov	r0, r5
 8025376:	f7fc fbf3 	bl	8021b60 <_ZNK8touchgfx6Bitmap9getFormatEv>
 802537a:	280b      	cmp	r0, #11
 802537c:	d107      	bne.n	802538e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 802537e:	9600      	str	r6, [sp, #0]
 8025380:	4623      	mov	r3, r4
 8025382:	aa02      	add	r2, sp, #8
 8025384:	4649      	mov	r1, r9
 8025386:	4638      	mov	r0, r7
 8025388:	f7ff fe62 	bl	8025050 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 802538c:	e7ef      	b.n	802536e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 802538e:	4628      	mov	r0, r5
 8025390:	f7fc fb28 	bl	80219e4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8025394:	b950      	cbnz	r0, 80253ac <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 8025396:	e9cd 6000 	strd	r6, r0, [sp]
 802539a:	f8da 3000 	ldr.w	r3, [sl]
 802539e:	aa02      	add	r2, sp, #8
 80253a0:	68dd      	ldr	r5, [r3, #12]
 80253a2:	4639      	mov	r1, r7
 80253a4:	4623      	mov	r3, r4
 80253a6:	4650      	mov	r0, sl
 80253a8:	47a8      	blx	r5
 80253aa:	e7e0      	b.n	802536e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 80253ac:	f10d 0818 	add.w	r8, sp, #24
 80253b0:	4629      	mov	r1, r5
 80253b2:	4640      	mov	r0, r8
 80253b4:	f7fc fabc 	bl	8021930 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80253b8:	e898 0003 	ldmia.w	r8, {r0, r1}
 80253bc:	ad04      	add	r5, sp, #16
 80253be:	e885 0003 	stmia.w	r5, {r0, r1}
 80253c2:	4628      	mov	r0, r5
 80253c4:	4621      	mov	r1, r4
 80253c6:	f7f5 fd85 	bl	801aed4 <_ZN8touchgfx4RectaNERKS0_>
 80253ca:	4628      	mov	r0, r5
 80253cc:	f7f5 fdc5 	bl	801af5a <_ZNK8touchgfx4Rect7isEmptyEv>
 80253d0:	b138      	cbz	r0, 80253e2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf6>
 80253d2:	9600      	str	r6, [sp, #0]
 80253d4:	4623      	mov	r3, r4
 80253d6:	aa02      	add	r2, sp, #8
 80253d8:	4649      	mov	r1, r9
 80253da:	4638      	mov	r0, r7
 80253dc:	f7ff fe50 	bl	8025080 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80253e0:	e7c5      	b.n	802536e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 80253e2:	e9cd 6000 	strd	r6, r0, [sp]
 80253e6:	f8da 3000 	ldr.w	r3, [sl]
 80253ea:	aa02      	add	r2, sp, #8
 80253ec:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 80253f0:	4639      	mov	r1, r7
 80253f2:	462b      	mov	r3, r5
 80253f4:	4650      	mov	r0, sl
 80253f6:	47d8      	blx	fp
 80253f8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80253fc:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8025400:	4293      	cmp	r3, r2
 8025402:	dd13      	ble.n	802542c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x140>
 8025404:	f9b4 0000 	ldrsh.w	r0, [r4]
 8025408:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802540c:	f8ad 0018 	strh.w	r0, [sp, #24]
 8025410:	1a9b      	subs	r3, r3, r2
 8025412:	f8ad 201a 	strh.w	r2, [sp, #26]
 8025416:	f8ad 101c 	strh.w	r1, [sp, #28]
 802541a:	f8ad 301e 	strh.w	r3, [sp, #30]
 802541e:	9600      	str	r6, [sp, #0]
 8025420:	4643      	mov	r3, r8
 8025422:	aa02      	add	r2, sp, #8
 8025424:	4649      	mov	r1, r9
 8025426:	4638      	mov	r0, r7
 8025428:	f7ff fe2a 	bl	8025080 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 802542c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8025430:	f9b4 2000 	ldrsh.w	r2, [r4]
 8025434:	4293      	cmp	r3, r2
 8025436:	dd13      	ble.n	8025460 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
 8025438:	1a9b      	subs	r3, r3, r2
 802543a:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 802543e:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8025442:	f8ad 2018 	strh.w	r2, [sp, #24]
 8025446:	f8ad 001a 	strh.w	r0, [sp, #26]
 802544a:	f8ad 301c 	strh.w	r3, [sp, #28]
 802544e:	f8ad 101e 	strh.w	r1, [sp, #30]
 8025452:	9600      	str	r6, [sp, #0]
 8025454:	4643      	mov	r3, r8
 8025456:	aa02      	add	r2, sp, #8
 8025458:	4649      	mov	r1, r9
 802545a:	4638      	mov	r0, r7
 802545c:	f7ff fe10 	bl	8025080 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8025460:	88a2      	ldrh	r2, [r4, #4]
 8025462:	8823      	ldrh	r3, [r4, #0]
 8025464:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8025468:	4413      	add	r3, r2
 802546a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 802546e:	440a      	add	r2, r1
 8025470:	b29b      	uxth	r3, r3
 8025472:	b292      	uxth	r2, r2
 8025474:	b211      	sxth	r1, r2
 8025476:	b218      	sxth	r0, r3
 8025478:	4288      	cmp	r0, r1
 802547a:	dd13      	ble.n	80254a4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1b8>
 802547c:	1a9b      	subs	r3, r3, r2
 802547e:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8025482:	f9bd 5012 	ldrsh.w	r5, [sp, #18]
 8025486:	f8ad 1018 	strh.w	r1, [sp, #24]
 802548a:	f8ad 301c 	strh.w	r3, [sp, #28]
 802548e:	f8ad 001e 	strh.w	r0, [sp, #30]
 8025492:	9600      	str	r6, [sp, #0]
 8025494:	4643      	mov	r3, r8
 8025496:	aa02      	add	r2, sp, #8
 8025498:	4649      	mov	r1, r9
 802549a:	4638      	mov	r0, r7
 802549c:	f8ad 501a 	strh.w	r5, [sp, #26]
 80254a0:	f7ff fdee 	bl	8025080 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80254a4:	88e2      	ldrh	r2, [r4, #6]
 80254a6:	8863      	ldrh	r3, [r4, #2]
 80254a8:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80254ac:	4413      	add	r3, r2
 80254ae:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80254b2:	440a      	add	r2, r1
 80254b4:	b29b      	uxth	r3, r3
 80254b6:	b292      	uxth	r2, r2
 80254b8:	b211      	sxth	r1, r2
 80254ba:	b218      	sxth	r0, r3
 80254bc:	4288      	cmp	r0, r1
 80254be:	f77f af56 	ble.w	802536e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 80254c2:	f9b4 5000 	ldrsh.w	r5, [r4]
 80254c6:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80254ca:	f8ad 5018 	strh.w	r5, [sp, #24]
 80254ce:	1a9b      	subs	r3, r3, r2
 80254d0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80254d4:	f8ad 101a 	strh.w	r1, [sp, #26]
 80254d8:	f8ad 001c 	strh.w	r0, [sp, #28]
 80254dc:	9600      	str	r6, [sp, #0]
 80254de:	4643      	mov	r3, r8
 80254e0:	e779      	b.n	80253d6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xea>
 80254e2:	bf00      	nop
 80254e4:	08034120 	.word	0x08034120
 80254e8:	08034826 	.word	0x08034826
 80254ec:	080342c8 	.word	0x080342c8

080254f0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 80254f0:	b508      	push	{r3, lr}
 80254f2:	b180      	cbz	r0, 8025516 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 80254f4:	2902      	cmp	r1, #2
 80254f6:	d014      	beq.n	8025522 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 80254f8:	2903      	cmp	r1, #3
 80254fa:	d01d      	beq.n	8025538 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 80254fc:	2901      	cmp	r1, #1
 80254fe:	d101      	bne.n	8025504 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8025500:	2001      	movs	r0, #1
 8025502:	bd08      	pop	{r3, pc}
 8025504:	4b0e      	ldr	r3, [pc, #56]	; (8025540 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8025506:	8818      	ldrh	r0, [r3, #0]
 8025508:	b990      	cbnz	r0, 8025530 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 802550a:	4b0e      	ldr	r3, [pc, #56]	; (8025544 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 802550c:	4a0e      	ldr	r2, [pc, #56]	; (8025548 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 802550e:	480f      	ldr	r0, [pc, #60]	; (802554c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 8025510:	2154      	movs	r1, #84	; 0x54
 8025512:	f008 fee1 	bl	802e2d8 <__assert_func>
 8025516:	2902      	cmp	r1, #2
 8025518:	d00e      	beq.n	8025538 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 802551a:	2903      	cmp	r1, #3
 802551c:	d0f2      	beq.n	8025504 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 802551e:	2901      	cmp	r1, #1
 8025520:	d1ee      	bne.n	8025500 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 8025522:	4b07      	ldr	r3, [pc, #28]	; (8025540 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8025524:	8818      	ldrh	r0, [r3, #0]
 8025526:	2800      	cmp	r0, #0
 8025528:	d0ef      	beq.n	802550a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 802552a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 802552e:	e7e8      	b.n	8025502 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8025530:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8025534:	4240      	negs	r0, r0
 8025536:	e7e4      	b.n	8025502 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8025538:	f04f 30ff 	mov.w	r0, #4294967295
 802553c:	e7e1      	b.n	8025502 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 802553e:	bf00      	nop
 8025540:	200127ee 	.word	0x200127ee
 8025544:	08034422 	.word	0x08034422
 8025548:	080349a3 	.word	0x080349a3
 802554c:	08034464 	.word	0x08034464

08025550 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8025550:	b508      	push	{r3, lr}
 8025552:	b180      	cbz	r0, 8025576 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 8025554:	2902      	cmp	r1, #2
 8025556:	d014      	beq.n	8025582 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 8025558:	2903      	cmp	r1, #3
 802555a:	d018      	beq.n	802558e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 802555c:	2901      	cmp	r1, #1
 802555e:	d001      	beq.n	8025564 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8025560:	2001      	movs	r0, #1
 8025562:	e013      	b.n	802558c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8025564:	4b0e      	ldr	r3, [pc, #56]	; (80255a0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8025566:	8818      	ldrh	r0, [r3, #0]
 8025568:	b970      	cbnz	r0, 8025588 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 802556a:	4b0e      	ldr	r3, [pc, #56]	; (80255a4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 802556c:	4a0e      	ldr	r2, [pc, #56]	; (80255a8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 802556e:	480f      	ldr	r0, [pc, #60]	; (80255ac <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 8025570:	2154      	movs	r1, #84	; 0x54
 8025572:	f008 feb1 	bl	802e2d8 <__assert_func>
 8025576:	2902      	cmp	r1, #2
 8025578:	d009      	beq.n	802558e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 802557a:	2903      	cmp	r1, #3
 802557c:	d0f0      	beq.n	8025560 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 802557e:	2901      	cmp	r1, #1
 8025580:	d1f0      	bne.n	8025564 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8025582:	f04f 30ff 	mov.w	r0, #4294967295
 8025586:	e001      	b.n	802558c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8025588:	f3c0 000e 	ubfx	r0, r0, #0, #15
 802558c:	bd08      	pop	{r3, pc}
 802558e:	4b04      	ldr	r3, [pc, #16]	; (80255a0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8025590:	8818      	ldrh	r0, [r3, #0]
 8025592:	2800      	cmp	r0, #0
 8025594:	d0e9      	beq.n	802556a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 8025596:	f3c0 000e 	ubfx	r0, r0, #0, #15
 802559a:	4240      	negs	r0, r0
 802559c:	e7f6      	b.n	802558c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 802559e:	bf00      	nop
 80255a0:	200127ee 	.word	0x200127ee
 80255a4:	08034422 	.word	0x08034422
 80255a8:	080349a3 	.word	0x080349a3
 80255ac:	08034464 	.word	0x08034464

080255b0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 80255b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80255b4:	b097      	sub	sp, #92	; 0x5c
 80255b6:	910a      	str	r1, [sp, #40]	; 0x28
 80255b8:	a912      	add	r1, sp, #72	; 0x48
 80255ba:	e881 000c 	stmia.w	r1, {r2, r3}
 80255be:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 80255c2:	9307      	str	r3, [sp, #28]
 80255c4:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 80255c8:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 80255cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80255ce:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 80255d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80255d4:	7b4b      	ldrb	r3, [r1, #13]
 80255d6:	798d      	ldrb	r5, [r1, #6]
 80255d8:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 80255dc:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 80255e0:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 80255e4:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 80255e8:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 80255ec:	0158      	lsls	r0, r3, #5
 80255ee:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80255f2:	4328      	orrs	r0, r5
 80255f4:	9006      	str	r0, [sp, #24]
 80255f6:	f000 8156 	beq.w	80258a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f6>
 80255fa:	011b      	lsls	r3, r3, #4
 80255fc:	79c8      	ldrb	r0, [r1, #7]
 80255fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8025602:	4303      	orrs	r3, r0
 8025604:	9308      	str	r3, [sp, #32]
 8025606:	f000 814e 	beq.w	80258a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f6>
 802560a:	f991 3009 	ldrsb.w	r3, [r1, #9]
 802560e:	b29b      	uxth	r3, r3
 8025610:	2f00      	cmp	r7, #0
 8025612:	f000 80f2 	beq.w	80257fa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x24a>
 8025616:	1aff      	subs	r7, r7, r3
 8025618:	b2bf      	uxth	r7, r7
 802561a:	043b      	lsls	r3, r7, #16
 802561c:	d502      	bpl.n	8025624 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 802561e:	1bf6      	subs	r6, r6, r7
 8025620:	b236      	sxth	r6, r6
 8025622:	2700      	movs	r7, #0
 8025624:	f9b2 1000 	ldrsh.w	r1, [r2]
 8025628:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 802562c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 8025630:	428e      	cmp	r6, r1
 8025632:	b28b      	uxth	r3, r1
 8025634:	bfbf      	itttt	lt
 8025636:	18ff      	addlt	r7, r7, r3
 8025638:	1bbe      	sublt	r6, r7, r6
 802563a:	b2b7      	uxthlt	r7, r6
 802563c:	460e      	movlt	r6, r1
 802563e:	8891      	ldrh	r1, [r2, #4]
 8025640:	440b      	add	r3, r1
 8025642:	b21b      	sxth	r3, r3
 8025644:	930e      	str	r3, [sp, #56]	; 0x38
 8025646:	88d3      	ldrh	r3, [r2, #6]
 8025648:	9a07      	ldr	r2, [sp, #28]
 802564a:	449a      	add	sl, r3
 802564c:	fa0f f38a 	sxth.w	r3, sl
 8025650:	930d      	str	r3, [sp, #52]	; 0x34
 8025652:	4bbc      	ldr	r3, [pc, #752]	; (8025944 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 8025654:	f8bd a020 	ldrh.w	sl, [sp, #32]
 8025658:	f893 b000 	ldrb.w	fp, [r3]
 802565c:	f10b 3cff 	add.w	ip, fp, #4294967295
 8025660:	f1dc 0300 	rsbs	r3, ip, #0
 8025664:	eb43 030c 	adc.w	r3, r3, ip
 8025668:	930c      	str	r3, [sp, #48]	; 0x30
 802566a:	4631      	mov	r1, r6
 802566c:	464b      	mov	r3, r9
 802566e:	a812      	add	r0, sp, #72	; 0x48
 8025670:	f7f9 fabe 	bl	801ebf0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8025674:	4631      	mov	r1, r6
 8025676:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 802567a:	464b      	mov	r3, r9
 802567c:	9a07      	ldr	r2, [sp, #28]
 802567e:	a812      	add	r0, sp, #72	; 0x48
 8025680:	f7f9 face 	bl	801ec20 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8025684:	a916      	add	r1, sp, #88	; 0x58
 8025686:	f821 0d02 	strh.w	r0, [r1, #-2]!
 802568a:	a815      	add	r0, sp, #84	; 0x54
 802568c:	f7f9 fbaa 	bl	801ede4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8025690:	f1b9 0f00 	cmp.w	r9, #0
 8025694:	f040 80b4 	bne.w	8025800 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x250>
 8025698:	f1bb 0f01 	cmp.w	fp, #1
 802569c:	f040 80b8 	bne.w	8025810 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x260>
 80256a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80256a2:	2b00      	cmp	r3, #0
 80256a4:	f040 8104 	bne.w	80258b0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x300>
 80256a8:	4ba7      	ldr	r3, [pc, #668]	; (8025948 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>)
 80256aa:	6818      	ldr	r0, [r3, #0]
 80256ac:	6803      	ldr	r3, [r0, #0]
 80256ae:	6a1b      	ldr	r3, [r3, #32]
 80256b0:	4798      	blx	r3
 80256b2:	4aa6      	ldr	r2, [pc, #664]	; (802594c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 80256b4:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 80256b8:	8811      	ldrh	r1, [r2, #0]
 80256ba:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 80256be:	fb01 2303 	mla	r3, r1, r3, r2
 80256c2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80256c6:	9308      	str	r3, [sp, #32]
 80256c8:	2301      	movs	r3, #1
 80256ca:	fa03 f308 	lsl.w	r3, r3, r8
 80256ce:	3b01      	subs	r3, #1
 80256d0:	b2db      	uxtb	r3, r3
 80256d2:	f1b8 0f01 	cmp.w	r8, #1
 80256d6:	9310      	str	r3, [sp, #64]	; 0x40
 80256d8:	f000 80ec 	beq.w	80258b4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x304>
 80256dc:	f1b8 0f02 	cmp.w	r8, #2
 80256e0:	f000 80ea 	beq.w	80258b8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x308>
 80256e4:	f1b8 0f04 	cmp.w	r8, #4
 80256e8:	bf14      	ite	ne
 80256ea:	2301      	movne	r3, #1
 80256ec:	2311      	moveq	r3, #17
 80256ee:	9309      	str	r3, [sp, #36]	; 0x24
 80256f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80256f2:	b153      	cbz	r3, 802570a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x15a>
 80256f4:	9a06      	ldr	r2, [sp, #24]
 80256f6:	2508      	movs	r5, #8
 80256f8:	fb95 f3f8 	sdiv	r3, r5, r8
 80256fc:	1e5d      	subs	r5, r3, #1
 80256fe:	4415      	add	r5, r2
 8025700:	fb95 f5f3 	sdiv	r5, r5, r3
 8025704:	fb15 f503 	smulbb	r5, r5, r3
 8025708:	b2ad      	uxth	r5, r5
 802570a:	b907      	cbnz	r7, 802570e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x15e>
 802570c:	b16c      	cbz	r4, 802572a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x17a>
 802570e:	fb04 7305 	mla	r3, r4, r5, r7
 8025712:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8025714:	fb08 f303 	mul.w	r3, r8, r3
 8025718:	ebaa 0a04 	sub.w	sl, sl, r4
 802571c:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8025720:	9226      	str	r2, [sp, #152]	; 0x98
 8025722:	fa1f fa8a 	uxth.w	sl, sl
 8025726:	f003 0407 	and.w	r4, r3, #7
 802572a:	4649      	mov	r1, r9
 802572c:	980c      	ldr	r0, [sp, #48]	; 0x30
 802572e:	f7ff fedf 	bl	80254f0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8025732:	4649      	mov	r1, r9
 8025734:	4683      	mov	fp, r0
 8025736:	980c      	ldr	r0, [sp, #48]	; 0x30
 8025738:	f7ff ff0a 	bl	8025550 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 802573c:	9a07      	ldr	r2, [sp, #28]
 802573e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025740:	1a9b      	subs	r3, r3, r2
 8025742:	459a      	cmp	sl, r3
 8025744:	bfa8      	it	ge
 8025746:	469a      	movge	sl, r3
 8025748:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802574a:	1bf6      	subs	r6, r6, r7
 802574c:	1b9e      	subs	r6, r3, r6
 802574e:	9b06      	ldr	r3, [sp, #24]
 8025750:	429e      	cmp	r6, r3
 8025752:	bfd4      	ite	le
 8025754:	ebc7 0706 	rsble	r7, r7, r6
 8025758:	ebc7 0703 	rsbgt	r7, r7, r3
 802575c:	1bed      	subs	r5, r5, r7
 802575e:	fb08 f305 	mul.w	r3, r8, r5
 8025762:	9307      	str	r3, [sp, #28]
 8025764:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025766:	781a      	ldrb	r2, [r3, #0]
 8025768:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802576a:	0a1b      	lsrs	r3, r3, #8
 802576c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8025770:	930d      	str	r3, [sp, #52]	; 0x34
 8025772:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025774:	08db      	lsrs	r3, r3, #3
 8025776:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802577a:	930e      	str	r3, [sp, #56]	; 0x38
 802577c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802577e:	00db      	lsls	r3, r3, #3
 8025780:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8025784:	930f      	str	r3, [sp, #60]	; 0x3c
 8025786:	ea4f 034b 	mov.w	r3, fp, lsl #1
 802578a:	fb0b 0b17 	mls	fp, fp, r7, r0
 802578e:	ea27 70e7 	bic.w	r0, r7, r7, asr #31
 8025792:	4358      	muls	r0, r3
 8025794:	9306      	str	r3, [sp, #24]
 8025796:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025798:	4122      	asrs	r2, r4
 802579a:	b29b      	uxth	r3, r3
 802579c:	b2d2      	uxtb	r2, r2
 802579e:	9311      	str	r3, [sp, #68]	; 0x44
 80257a0:	eb00 0b4b 	add.w	fp, r0, fp, lsl #1
 80257a4:	f1ba 0f00 	cmp.w	sl, #0
 80257a8:	f340 80e5 	ble.w	8025976 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c6>
 80257ac:	f8dd c020 	ldr.w	ip, [sp, #32]
 80257b0:	46be      	mov	lr, r7
 80257b2:	f1be 0f00 	cmp.w	lr, #0
 80257b6:	f340 80cb 	ble.w	8025950 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 80257ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80257bc:	4013      	ands	r3, r2
 80257be:	d00a      	beq.n	80257d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x226>
 80257c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80257c2:	fb13 f301 	smulbb	r3, r3, r1
 80257c6:	2bfe      	cmp	r3, #254	; 0xfe
 80257c8:	dd78      	ble.n	80258bc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x30c>
 80257ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80257cc:	29ff      	cmp	r1, #255	; 0xff
 80257ce:	d175      	bne.n	80258bc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x30c>
 80257d0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80257d2:	f8ac 0000 	strh.w	r0, [ip]
 80257d6:	4444      	add	r4, r8
 80257d8:	b2a4      	uxth	r4, r4
 80257da:	2c07      	cmp	r4, #7
 80257dc:	bf81      	itttt	hi
 80257de:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 80257e0:	785a      	ldrbhi	r2, [r3, #1]
 80257e2:	3301      	addhi	r3, #1
 80257e4:	9326      	strhi	r3, [sp, #152]	; 0x98
 80257e6:	9b06      	ldr	r3, [sp, #24]
 80257e8:	bf9a      	itte	ls
 80257ea:	fa42 f208 	asrls.w	r2, r2, r8
 80257ee:	b2d2      	uxtbls	r2, r2
 80257f0:	2400      	movhi	r4, #0
 80257f2:	449c      	add	ip, r3
 80257f4:	f10e 3eff 	add.w	lr, lr, #4294967295
 80257f8:	e7db      	b.n	80257b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x202>
 80257fa:	441e      	add	r6, r3
 80257fc:	b236      	sxth	r6, r6
 80257fe:	e711      	b.n	8025624 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8025800:	f1b9 0f01 	cmp.w	r9, #1
 8025804:	f47f af4c 	bne.w	80256a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8025808:	f1bb 0f01 	cmp.w	fp, #1
 802580c:	f47f af48 	bne.w	80256a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8025810:	f8df b134 	ldr.w	fp, [pc, #308]	; 8025948 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 8025814:	f8db 0000 	ldr.w	r0, [fp]
 8025818:	6803      	ldr	r3, [r0, #0]
 802581a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802581c:	4798      	blx	r3
 802581e:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 8025822:	465a      	mov	r2, fp
 8025824:	d006      	beq.n	8025834 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x284>
 8025826:	f1b8 0f04 	cmp.w	r8, #4
 802582a:	d13f      	bne.n	80258ac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2fc>
 802582c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802582e:	3300      	adds	r3, #0
 8025830:	bf18      	it	ne
 8025832:	2301      	movne	r3, #1
 8025834:	05c0      	lsls	r0, r0, #23
 8025836:	f140 80a7 	bpl.w	8025988 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d8>
 802583a:	f1b8 0f08 	cmp.w	r8, #8
 802583e:	f040 80a3 	bne.w	8025988 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d8>
 8025842:	2b00      	cmp	r3, #0
 8025844:	bf0c      	ite	eq
 8025846:	f44f 7180 	moveq.w	r1, #256	; 0x100
 802584a:	2180      	movne	r1, #128	; 0x80
 802584c:	2f00      	cmp	r7, #0
 802584e:	f47f af27 	bne.w	80256a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8025852:	2c00      	cmp	r4, #0
 8025854:	f47f af24 	bne.w	80256a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8025858:	9b06      	ldr	r3, [sp, #24]
 802585a:	980e      	ldr	r0, [sp, #56]	; 0x38
 802585c:	18f3      	adds	r3, r6, r3
 802585e:	4283      	cmp	r3, r0
 8025860:	f73f af1e 	bgt.w	80256a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8025864:	e9dd 0307 	ldrd	r0, r3, [sp, #28]
 8025868:	4403      	add	r3, r0
 802586a:	980d      	ldr	r0, [sp, #52]	; 0x34
 802586c:	4283      	cmp	r3, r0
 802586e:	f73f af17 	bgt.w	80256a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8025872:	6810      	ldr	r0, [r2, #0]
 8025874:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8025878:	6804      	ldr	r4, [r0, #0]
 802587a:	9105      	str	r1, [sp, #20]
 802587c:	f1b8 0f08 	cmp.w	r8, #8
 8025880:	bf18      	it	ne
 8025882:	3501      	addne	r5, #1
 8025884:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8025886:	9104      	str	r1, [sp, #16]
 8025888:	bf18      	it	ne
 802588a:	f025 0501 	bicne.w	r5, r5, #1
 802588e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8025890:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8025894:	bf18      	it	ne
 8025896:	b2ad      	uxthne	r5, r5
 8025898:	e9cd 5102 	strd	r5, r1, [sp, #8]
 802589c:	e9cd 5a00 	strd	r5, sl, [sp]
 80258a0:	9926      	ldr	r1, [sp, #152]	; 0x98
 80258a2:	6c24      	ldr	r4, [r4, #64]	; 0x40
 80258a4:	47a0      	blx	r4
 80258a6:	b017      	add	sp, #92	; 0x5c
 80258a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80258ac:	2300      	movs	r3, #0
 80258ae:	e7c1      	b.n	8025834 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x284>
 80258b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80258b2:	e6fe      	b.n	80256b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 80258b4:	23ff      	movs	r3, #255	; 0xff
 80258b6:	e71a      	b.n	80256ee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 80258b8:	2355      	movs	r3, #85	; 0x55
 80258ba:	e718      	b.n	80256ee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 80258bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80258be:	f8bc 5000 	ldrh.w	r5, [ip]
 80258c2:	fb11 f303 	smulbb	r3, r1, r3
 80258c6:	b29b      	uxth	r3, r3
 80258c8:	1c59      	adds	r1, r3, #1
 80258ca:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80258ce:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80258d2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80258d4:	b29e      	uxth	r6, r3
 80258d6:	1228      	asrs	r0, r5, #8
 80258d8:	43db      	mvns	r3, r3
 80258da:	b2db      	uxtb	r3, r3
 80258dc:	fb11 f106 	smulbb	r1, r1, r6
 80258e0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80258e4:	fb00 1003 	mla	r0, r0, r3, r1
 80258e8:	b281      	uxth	r1, r0
 80258ea:	980e      	ldr	r0, [sp, #56]	; 0x38
 80258ec:	910c      	str	r1, [sp, #48]	; 0x30
 80258ee:	fb16 f900 	smulbb	r9, r6, r0
 80258f2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80258f4:	10e9      	asrs	r1, r5, #3
 80258f6:	00ed      	lsls	r5, r5, #3
 80258f8:	fb16 f600 	smulbb	r6, r6, r0
 80258fc:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8025900:	b2ed      	uxtb	r5, r5
 8025902:	fb01 9103 	mla	r1, r1, r3, r9
 8025906:	fb05 6603 	mla	r6, r5, r3, r6
 802590a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802590c:	980c      	ldr	r0, [sp, #48]	; 0x30
 802590e:	b2b6      	uxth	r6, r6
 8025910:	3301      	adds	r3, #1
 8025912:	f106 0901 	add.w	r9, r6, #1
 8025916:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802591a:	eb09 2916 	add.w	r9, r9, r6, lsr #8
 802591e:	b289      	uxth	r1, r1
 8025920:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 8025924:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8025928:	ea40 0009 	orr.w	r0, r0, r9
 802592c:	f101 0901 	add.w	r9, r1, #1
 8025930:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 8025934:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8025938:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802593c:	ea40 0009 	orr.w	r0, r0, r9
 8025940:	e747      	b.n	80257d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x222>
 8025942:	bf00      	nop
 8025944:	200127ec 	.word	0x200127ec
 8025948:	200127f4 	.word	0x200127f4
 802594c:	200127ee 	.word	0x200127ee
 8025950:	9b07      	ldr	r3, [sp, #28]
 8025952:	b153      	cbz	r3, 802596a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ba>
 8025954:	441c      	add	r4, r3
 8025956:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025958:	b2a4      	uxth	r4, r4
 802595a:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 802595e:	f004 0407 	and.w	r4, r4, #7
 8025962:	781a      	ldrb	r2, [r3, #0]
 8025964:	9326      	str	r3, [sp, #152]	; 0x98
 8025966:	4122      	asrs	r2, r4
 8025968:	b2d2      	uxtb	r2, r2
 802596a:	9b08      	ldr	r3, [sp, #32]
 802596c:	445b      	add	r3, fp
 802596e:	9308      	str	r3, [sp, #32]
 8025970:	f10a 3aff 	add.w	sl, sl, #4294967295
 8025974:	e716      	b.n	80257a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f4>
 8025976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025978:	2b00      	cmp	r3, #0
 802597a:	d194      	bne.n	80258a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f6>
 802597c:	4b05      	ldr	r3, [pc, #20]	; (8025994 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>)
 802597e:	6818      	ldr	r0, [r3, #0]
 8025980:	6803      	ldr	r3, [r0, #0]
 8025982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025984:	4798      	blx	r3
 8025986:	e78e      	b.n	80258a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f6>
 8025988:	2b00      	cmp	r3, #0
 802598a:	f43f ae89 	beq.w	80256a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 802598e:	2180      	movs	r1, #128	; 0x80
 8025990:	e75c      	b.n	802584c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x29c>
 8025992:	bf00      	nop
 8025994:	200127f4 	.word	0x200127f4

08025998 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8025998:	b538      	push	{r3, r4, r5, lr}
 802599a:	4c15      	ldr	r4, [pc, #84]	; (80259f0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 802599c:	7823      	ldrb	r3, [r4, #0]
 802599e:	f3bf 8f5b 	dmb	ish
 80259a2:	07da      	lsls	r2, r3, #31
 80259a4:	4605      	mov	r5, r0
 80259a6:	d40b      	bmi.n	80259c0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 80259a8:	4620      	mov	r0, r4
 80259aa:	f007 fbc9 	bl	802d140 <__cxa_guard_acquire>
 80259ae:	b138      	cbz	r0, 80259c0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 80259b0:	4620      	mov	r0, r4
 80259b2:	f007 fbe1 	bl	802d178 <__cxa_guard_release>
 80259b6:	4a0f      	ldr	r2, [pc, #60]	; (80259f4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 80259b8:	490f      	ldr	r1, [pc, #60]	; (80259f8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 80259ba:	4810      	ldr	r0, [pc, #64]	; (80259fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 80259bc:	f007 fbae 	bl	802d11c <__aeabi_atexit>
 80259c0:	4c0f      	ldr	r4, [pc, #60]	; (8025a00 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 80259c2:	7823      	ldrb	r3, [r4, #0]
 80259c4:	f3bf 8f5b 	dmb	ish
 80259c8:	07db      	lsls	r3, r3, #31
 80259ca:	d40b      	bmi.n	80259e4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 80259cc:	4620      	mov	r0, r4
 80259ce:	f007 fbb7 	bl	802d140 <__cxa_guard_acquire>
 80259d2:	b138      	cbz	r0, 80259e4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 80259d4:	4620      	mov	r0, r4
 80259d6:	f007 fbcf 	bl	802d178 <__cxa_guard_release>
 80259da:	4a06      	ldr	r2, [pc, #24]	; (80259f4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 80259dc:	4909      	ldr	r1, [pc, #36]	; (8025a04 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 80259de:	480a      	ldr	r0, [pc, #40]	; (8025a08 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 80259e0:	f007 fb9c 	bl	802d11c <__aeabi_atexit>
 80259e4:	4b05      	ldr	r3, [pc, #20]	; (80259fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 80259e6:	612b      	str	r3, [r5, #16]
 80259e8:	4b07      	ldr	r3, [pc, #28]	; (8025a08 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 80259ea:	616b      	str	r3, [r5, #20]
 80259ec:	bd38      	pop	{r3, r4, r5, pc}
 80259ee:	bf00      	nop
 80259f0:	200128e0 	.word	0x200128e0
 80259f4:	20000000 	.word	0x20000000
 80259f8:	0802404f 	.word	0x0802404f
 80259fc:	200000dc 	.word	0x200000dc
 8025a00:	200128e4 	.word	0x200128e4
 8025a04:	0802404d 	.word	0x0802404d
 8025a08:	200000e0 	.word	0x200000e0

08025a0c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8025a0c:	b538      	push	{r3, r4, r5, lr}
 8025a0e:	4c15      	ldr	r4, [pc, #84]	; (8025a64 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 8025a10:	7823      	ldrb	r3, [r4, #0]
 8025a12:	f3bf 8f5b 	dmb	ish
 8025a16:	07da      	lsls	r2, r3, #31
 8025a18:	4605      	mov	r5, r0
 8025a1a:	d40b      	bmi.n	8025a34 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8025a1c:	4620      	mov	r0, r4
 8025a1e:	f007 fb8f 	bl	802d140 <__cxa_guard_acquire>
 8025a22:	b138      	cbz	r0, 8025a34 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8025a24:	4620      	mov	r0, r4
 8025a26:	f007 fba7 	bl	802d178 <__cxa_guard_release>
 8025a2a:	4a0f      	ldr	r2, [pc, #60]	; (8025a68 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8025a2c:	490f      	ldr	r1, [pc, #60]	; (8025a6c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 8025a2e:	4810      	ldr	r0, [pc, #64]	; (8025a70 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8025a30:	f007 fb74 	bl	802d11c <__aeabi_atexit>
 8025a34:	4c0f      	ldr	r4, [pc, #60]	; (8025a74 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 8025a36:	7823      	ldrb	r3, [r4, #0]
 8025a38:	f3bf 8f5b 	dmb	ish
 8025a3c:	07db      	lsls	r3, r3, #31
 8025a3e:	d40b      	bmi.n	8025a58 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8025a40:	4620      	mov	r0, r4
 8025a42:	f007 fb7d 	bl	802d140 <__cxa_guard_acquire>
 8025a46:	b138      	cbz	r0, 8025a58 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8025a48:	4620      	mov	r0, r4
 8025a4a:	f007 fb95 	bl	802d178 <__cxa_guard_release>
 8025a4e:	4a06      	ldr	r2, [pc, #24]	; (8025a68 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8025a50:	4909      	ldr	r1, [pc, #36]	; (8025a78 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 8025a52:	480a      	ldr	r0, [pc, #40]	; (8025a7c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8025a54:	f007 fb62 	bl	802d11c <__aeabi_atexit>
 8025a58:	4b05      	ldr	r3, [pc, #20]	; (8025a70 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8025a5a:	60ab      	str	r3, [r5, #8]
 8025a5c:	4b07      	ldr	r3, [pc, #28]	; (8025a7c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8025a5e:	60eb      	str	r3, [r5, #12]
 8025a60:	bd38      	pop	{r3, r4, r5, pc}
 8025a62:	bf00      	nop
 8025a64:	200128b8 	.word	0x200128b8
 8025a68:	20000000 	.word	0x20000000
 8025a6c:	08024053 	.word	0x08024053
 8025a70:	200000b4 	.word	0x200000b4
 8025a74:	200128bc 	.word	0x200128bc
 8025a78:	08024051 	.word	0x08024051
 8025a7c:	200000b8 	.word	0x200000b8

08025a80 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 8025a80:	b510      	push	{r4, lr}
 8025a82:	4604      	mov	r4, r0
 8025a84:	f7ff ff88 	bl	8025998 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8025a88:	4620      	mov	r0, r4
 8025a8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025a8e:	f7ff bfbd 	b.w	8025a0c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

08025a94 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8025a94:	b538      	push	{r3, r4, r5, lr}
 8025a96:	4c15      	ldr	r4, [pc, #84]	; (8025aec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8025a98:	7823      	ldrb	r3, [r4, #0]
 8025a9a:	f3bf 8f5b 	dmb	ish
 8025a9e:	07da      	lsls	r2, r3, #31
 8025aa0:	4605      	mov	r5, r0
 8025aa2:	d40b      	bmi.n	8025abc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8025aa4:	4620      	mov	r0, r4
 8025aa6:	f007 fb4b 	bl	802d140 <__cxa_guard_acquire>
 8025aaa:	b138      	cbz	r0, 8025abc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8025aac:	4620      	mov	r0, r4
 8025aae:	f007 fb63 	bl	802d178 <__cxa_guard_release>
 8025ab2:	4a0f      	ldr	r2, [pc, #60]	; (8025af0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8025ab4:	490f      	ldr	r1, [pc, #60]	; (8025af4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8025ab6:	4810      	ldr	r0, [pc, #64]	; (8025af8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8025ab8:	f007 fb30 	bl	802d11c <__aeabi_atexit>
 8025abc:	4c0f      	ldr	r4, [pc, #60]	; (8025afc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8025abe:	7823      	ldrb	r3, [r4, #0]
 8025ac0:	f3bf 8f5b 	dmb	ish
 8025ac4:	07db      	lsls	r3, r3, #31
 8025ac6:	d40b      	bmi.n	8025ae0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8025ac8:	4620      	mov	r0, r4
 8025aca:	f007 fb39 	bl	802d140 <__cxa_guard_acquire>
 8025ace:	b138      	cbz	r0, 8025ae0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8025ad0:	4620      	mov	r0, r4
 8025ad2:	f007 fb51 	bl	802d178 <__cxa_guard_release>
 8025ad6:	4a06      	ldr	r2, [pc, #24]	; (8025af0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8025ad8:	4909      	ldr	r1, [pc, #36]	; (8025b00 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8025ada:	480a      	ldr	r0, [pc, #40]	; (8025b04 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8025adc:	f007 fb1e 	bl	802d11c <__aeabi_atexit>
 8025ae0:	4b05      	ldr	r3, [pc, #20]	; (8025af8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8025ae2:	622b      	str	r3, [r5, #32]
 8025ae4:	4b07      	ldr	r3, [pc, #28]	; (8025b04 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8025ae6:	626b      	str	r3, [r5, #36]	; 0x24
 8025ae8:	bd38      	pop	{r3, r4, r5, pc}
 8025aea:	bf00      	nop
 8025aec:	200128e8 	.word	0x200128e8
 8025af0:	20000000 	.word	0x20000000
 8025af4:	08024047 	.word	0x08024047
 8025af8:	200000e4 	.word	0x200000e4
 8025afc:	200128ec 	.word	0x200128ec
 8025b00:	08024045 	.word	0x08024045
 8025b04:	200000e8 	.word	0x200000e8

08025b08 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8025b08:	b538      	push	{r3, r4, r5, lr}
 8025b0a:	4c15      	ldr	r4, [pc, #84]	; (8025b60 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8025b0c:	7823      	ldrb	r3, [r4, #0]
 8025b0e:	f3bf 8f5b 	dmb	ish
 8025b12:	07da      	lsls	r2, r3, #31
 8025b14:	4605      	mov	r5, r0
 8025b16:	d40b      	bmi.n	8025b30 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8025b18:	4620      	mov	r0, r4
 8025b1a:	f007 fb11 	bl	802d140 <__cxa_guard_acquire>
 8025b1e:	b138      	cbz	r0, 8025b30 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8025b20:	4620      	mov	r0, r4
 8025b22:	f007 fb29 	bl	802d178 <__cxa_guard_release>
 8025b26:	4a0f      	ldr	r2, [pc, #60]	; (8025b64 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8025b28:	490f      	ldr	r1, [pc, #60]	; (8025b68 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8025b2a:	4810      	ldr	r0, [pc, #64]	; (8025b6c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8025b2c:	f007 faf6 	bl	802d11c <__aeabi_atexit>
 8025b30:	4c0f      	ldr	r4, [pc, #60]	; (8025b70 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8025b32:	7823      	ldrb	r3, [r4, #0]
 8025b34:	f3bf 8f5b 	dmb	ish
 8025b38:	07db      	lsls	r3, r3, #31
 8025b3a:	d40b      	bmi.n	8025b54 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8025b3c:	4620      	mov	r0, r4
 8025b3e:	f007 faff 	bl	802d140 <__cxa_guard_acquire>
 8025b42:	b138      	cbz	r0, 8025b54 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8025b44:	4620      	mov	r0, r4
 8025b46:	f007 fb17 	bl	802d178 <__cxa_guard_release>
 8025b4a:	4a06      	ldr	r2, [pc, #24]	; (8025b64 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8025b4c:	4909      	ldr	r1, [pc, #36]	; (8025b74 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8025b4e:	480a      	ldr	r0, [pc, #40]	; (8025b78 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8025b50:	f007 fae4 	bl	802d11c <__aeabi_atexit>
 8025b54:	4b05      	ldr	r3, [pc, #20]	; (8025b6c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8025b56:	61ab      	str	r3, [r5, #24]
 8025b58:	4b07      	ldr	r3, [pc, #28]	; (8025b78 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8025b5a:	61eb      	str	r3, [r5, #28]
 8025b5c:	bd38      	pop	{r3, r4, r5, pc}
 8025b5e:	bf00      	nop
 8025b60:	200128c0 	.word	0x200128c0
 8025b64:	20000000 	.word	0x20000000
 8025b68:	0802404b 	.word	0x0802404b
 8025b6c:	200000bc 	.word	0x200000bc
 8025b70:	200128c4 	.word	0x200128c4
 8025b74:	08024049 	.word	0x08024049
 8025b78:	200000c0 	.word	0x200000c0

08025b7c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 8025b7c:	b510      	push	{r4, lr}
 8025b7e:	4604      	mov	r4, r0
 8025b80:	f7ff ff88 	bl	8025a94 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8025b84:	4620      	mov	r0, r4
 8025b86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025b8a:	f7ff bfbd 	b.w	8025b08 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08025b90 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8025b90:	b538      	push	{r3, r4, r5, lr}
 8025b92:	4c15      	ldr	r4, [pc, #84]	; (8025be8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8025b94:	7823      	ldrb	r3, [r4, #0]
 8025b96:	f3bf 8f5b 	dmb	ish
 8025b9a:	07da      	lsls	r2, r3, #31
 8025b9c:	4605      	mov	r5, r0
 8025b9e:	d40b      	bmi.n	8025bb8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8025ba0:	4620      	mov	r0, r4
 8025ba2:	f007 facd 	bl	802d140 <__cxa_guard_acquire>
 8025ba6:	b138      	cbz	r0, 8025bb8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8025ba8:	4620      	mov	r0, r4
 8025baa:	f007 fae5 	bl	802d178 <__cxa_guard_release>
 8025bae:	4a0f      	ldr	r2, [pc, #60]	; (8025bec <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8025bb0:	490f      	ldr	r1, [pc, #60]	; (8025bf0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8025bb2:	4810      	ldr	r0, [pc, #64]	; (8025bf4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8025bb4:	f007 fab2 	bl	802d11c <__aeabi_atexit>
 8025bb8:	4c0f      	ldr	r4, [pc, #60]	; (8025bf8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8025bba:	7823      	ldrb	r3, [r4, #0]
 8025bbc:	f3bf 8f5b 	dmb	ish
 8025bc0:	07db      	lsls	r3, r3, #31
 8025bc2:	d40b      	bmi.n	8025bdc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8025bc4:	4620      	mov	r0, r4
 8025bc6:	f007 fabb 	bl	802d140 <__cxa_guard_acquire>
 8025bca:	b138      	cbz	r0, 8025bdc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8025bcc:	4620      	mov	r0, r4
 8025bce:	f007 fad3 	bl	802d178 <__cxa_guard_release>
 8025bd2:	4a06      	ldr	r2, [pc, #24]	; (8025bec <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8025bd4:	4909      	ldr	r1, [pc, #36]	; (8025bfc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8025bd6:	480a      	ldr	r0, [pc, #40]	; (8025c00 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8025bd8:	f007 faa0 	bl	802d11c <__aeabi_atexit>
 8025bdc:	4b05      	ldr	r3, [pc, #20]	; (8025bf4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8025bde:	632b      	str	r3, [r5, #48]	; 0x30
 8025be0:	4b07      	ldr	r3, [pc, #28]	; (8025c00 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8025be2:	636b      	str	r3, [r5, #52]	; 0x34
 8025be4:	bd38      	pop	{r3, r4, r5, pc}
 8025be6:	bf00      	nop
 8025be8:	200128f8 	.word	0x200128f8
 8025bec:	20000000 	.word	0x20000000
 8025bf0:	0802403f 	.word	0x0802403f
 8025bf4:	200000f4 	.word	0x200000f4
 8025bf8:	200128fc 	.word	0x200128fc
 8025bfc:	0802403d 	.word	0x0802403d
 8025c00:	200000f8 	.word	0x200000f8

08025c04 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8025c04:	b538      	push	{r3, r4, r5, lr}
 8025c06:	4c15      	ldr	r4, [pc, #84]	; (8025c5c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8025c08:	7823      	ldrb	r3, [r4, #0]
 8025c0a:	f3bf 8f5b 	dmb	ish
 8025c0e:	07da      	lsls	r2, r3, #31
 8025c10:	4605      	mov	r5, r0
 8025c12:	d40b      	bmi.n	8025c2c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8025c14:	4620      	mov	r0, r4
 8025c16:	f007 fa93 	bl	802d140 <__cxa_guard_acquire>
 8025c1a:	b138      	cbz	r0, 8025c2c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8025c1c:	4620      	mov	r0, r4
 8025c1e:	f007 faab 	bl	802d178 <__cxa_guard_release>
 8025c22:	4a0f      	ldr	r2, [pc, #60]	; (8025c60 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8025c24:	490f      	ldr	r1, [pc, #60]	; (8025c64 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8025c26:	4810      	ldr	r0, [pc, #64]	; (8025c68 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8025c28:	f007 fa78 	bl	802d11c <__aeabi_atexit>
 8025c2c:	4c0f      	ldr	r4, [pc, #60]	; (8025c6c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8025c2e:	7823      	ldrb	r3, [r4, #0]
 8025c30:	f3bf 8f5b 	dmb	ish
 8025c34:	07db      	lsls	r3, r3, #31
 8025c36:	d40b      	bmi.n	8025c50 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8025c38:	4620      	mov	r0, r4
 8025c3a:	f007 fa81 	bl	802d140 <__cxa_guard_acquire>
 8025c3e:	b138      	cbz	r0, 8025c50 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8025c40:	4620      	mov	r0, r4
 8025c42:	f007 fa99 	bl	802d178 <__cxa_guard_release>
 8025c46:	4a06      	ldr	r2, [pc, #24]	; (8025c60 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8025c48:	4909      	ldr	r1, [pc, #36]	; (8025c70 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8025c4a:	480a      	ldr	r0, [pc, #40]	; (8025c74 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8025c4c:	f007 fa66 	bl	802d11c <__aeabi_atexit>
 8025c50:	4b05      	ldr	r3, [pc, #20]	; (8025c68 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8025c52:	62ab      	str	r3, [r5, #40]	; 0x28
 8025c54:	4b07      	ldr	r3, [pc, #28]	; (8025c74 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8025c56:	62eb      	str	r3, [r5, #44]	; 0x2c
 8025c58:	bd38      	pop	{r3, r4, r5, pc}
 8025c5a:	bf00      	nop
 8025c5c:	200128c8 	.word	0x200128c8
 8025c60:	20000000 	.word	0x20000000
 8025c64:	08024043 	.word	0x08024043
 8025c68:	200000c4 	.word	0x200000c4
 8025c6c:	200128cc 	.word	0x200128cc
 8025c70:	08024041 	.word	0x08024041
 8025c74:	200000c8 	.word	0x200000c8

08025c78 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 8025c78:	b510      	push	{r4, lr}
 8025c7a:	4604      	mov	r4, r0
 8025c7c:	f7ff ff88 	bl	8025b90 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8025c80:	4620      	mov	r0, r4
 8025c82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025c86:	f7ff bfbd 	b.w	8025c04 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08025c8c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8025c8c:	b538      	push	{r3, r4, r5, lr}
 8025c8e:	4c15      	ldr	r4, [pc, #84]	; (8025ce4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8025c90:	7823      	ldrb	r3, [r4, #0]
 8025c92:	f3bf 8f5b 	dmb	ish
 8025c96:	07da      	lsls	r2, r3, #31
 8025c98:	4605      	mov	r5, r0
 8025c9a:	d40b      	bmi.n	8025cb4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8025c9c:	4620      	mov	r0, r4
 8025c9e:	f007 fa4f 	bl	802d140 <__cxa_guard_acquire>
 8025ca2:	b138      	cbz	r0, 8025cb4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8025ca4:	4620      	mov	r0, r4
 8025ca6:	f007 fa67 	bl	802d178 <__cxa_guard_release>
 8025caa:	4a0f      	ldr	r2, [pc, #60]	; (8025ce8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8025cac:	490f      	ldr	r1, [pc, #60]	; (8025cec <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 8025cae:	4810      	ldr	r0, [pc, #64]	; (8025cf0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8025cb0:	f007 fa34 	bl	802d11c <__aeabi_atexit>
 8025cb4:	4c0f      	ldr	r4, [pc, #60]	; (8025cf4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 8025cb6:	7823      	ldrb	r3, [r4, #0]
 8025cb8:	f3bf 8f5b 	dmb	ish
 8025cbc:	07db      	lsls	r3, r3, #31
 8025cbe:	d40b      	bmi.n	8025cd8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8025cc0:	4620      	mov	r0, r4
 8025cc2:	f007 fa3d 	bl	802d140 <__cxa_guard_acquire>
 8025cc6:	b138      	cbz	r0, 8025cd8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8025cc8:	4620      	mov	r0, r4
 8025cca:	f007 fa55 	bl	802d178 <__cxa_guard_release>
 8025cce:	4a06      	ldr	r2, [pc, #24]	; (8025ce8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8025cd0:	4909      	ldr	r1, [pc, #36]	; (8025cf8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 8025cd2:	480a      	ldr	r0, [pc, #40]	; (8025cfc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8025cd4:	f007 fa22 	bl	802d11c <__aeabi_atexit>
 8025cd8:	4b05      	ldr	r3, [pc, #20]	; (8025cf0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8025cda:	652b      	str	r3, [r5, #80]	; 0x50
 8025cdc:	4b07      	ldr	r3, [pc, #28]	; (8025cfc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8025cde:	656b      	str	r3, [r5, #84]	; 0x54
 8025ce0:	bd38      	pop	{r3, r4, r5, pc}
 8025ce2:	bf00      	nop
 8025ce4:	20012900 	.word	0x20012900
 8025ce8:	20000000 	.word	0x20000000
 8025cec:	0802402f 	.word	0x0802402f
 8025cf0:	200000fc 	.word	0x200000fc
 8025cf4:	20012904 	.word	0x20012904
 8025cf8:	0802402d 	.word	0x0802402d
 8025cfc:	20000100 	.word	0x20000100

08025d00 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 8025d00:	b538      	push	{r3, r4, r5, lr}
 8025d02:	4c15      	ldr	r4, [pc, #84]	; (8025d58 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8025d04:	7823      	ldrb	r3, [r4, #0]
 8025d06:	f3bf 8f5b 	dmb	ish
 8025d0a:	07da      	lsls	r2, r3, #31
 8025d0c:	4605      	mov	r5, r0
 8025d0e:	d40b      	bmi.n	8025d28 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8025d10:	4620      	mov	r0, r4
 8025d12:	f007 fa15 	bl	802d140 <__cxa_guard_acquire>
 8025d16:	b138      	cbz	r0, 8025d28 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8025d18:	4620      	mov	r0, r4
 8025d1a:	f007 fa2d 	bl	802d178 <__cxa_guard_release>
 8025d1e:	4a0f      	ldr	r2, [pc, #60]	; (8025d5c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8025d20:	490f      	ldr	r1, [pc, #60]	; (8025d60 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 8025d22:	4810      	ldr	r0, [pc, #64]	; (8025d64 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8025d24:	f007 f9fa 	bl	802d11c <__aeabi_atexit>
 8025d28:	4c0f      	ldr	r4, [pc, #60]	; (8025d68 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 8025d2a:	7823      	ldrb	r3, [r4, #0]
 8025d2c:	f3bf 8f5b 	dmb	ish
 8025d30:	07db      	lsls	r3, r3, #31
 8025d32:	d40b      	bmi.n	8025d4c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8025d34:	4620      	mov	r0, r4
 8025d36:	f007 fa03 	bl	802d140 <__cxa_guard_acquire>
 8025d3a:	b138      	cbz	r0, 8025d4c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8025d3c:	4620      	mov	r0, r4
 8025d3e:	f007 fa1b 	bl	802d178 <__cxa_guard_release>
 8025d42:	4a06      	ldr	r2, [pc, #24]	; (8025d5c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8025d44:	4909      	ldr	r1, [pc, #36]	; (8025d6c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 8025d46:	480a      	ldr	r0, [pc, #40]	; (8025d70 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8025d48:	f007 f9e8 	bl	802d11c <__aeabi_atexit>
 8025d4c:	4b05      	ldr	r3, [pc, #20]	; (8025d64 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8025d4e:	64ab      	str	r3, [r5, #72]	; 0x48
 8025d50:	4b07      	ldr	r3, [pc, #28]	; (8025d70 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8025d52:	64eb      	str	r3, [r5, #76]	; 0x4c
 8025d54:	bd38      	pop	{r3, r4, r5, pc}
 8025d56:	bf00      	nop
 8025d58:	20012908 	.word	0x20012908
 8025d5c:	20000000 	.word	0x20000000
 8025d60:	08024033 	.word	0x08024033
 8025d64:	20000104 	.word	0x20000104
 8025d68:	2001290c 	.word	0x2001290c
 8025d6c:	08024031 	.word	0x08024031
 8025d70:	20000108 	.word	0x20000108

08025d74 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8025d74:	b538      	push	{r3, r4, r5, lr}
 8025d76:	4c15      	ldr	r4, [pc, #84]	; (8025dcc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8025d78:	7823      	ldrb	r3, [r4, #0]
 8025d7a:	f3bf 8f5b 	dmb	ish
 8025d7e:	07da      	lsls	r2, r3, #31
 8025d80:	4605      	mov	r5, r0
 8025d82:	d40b      	bmi.n	8025d9c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8025d84:	4620      	mov	r0, r4
 8025d86:	f007 f9db 	bl	802d140 <__cxa_guard_acquire>
 8025d8a:	b138      	cbz	r0, 8025d9c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8025d8c:	4620      	mov	r0, r4
 8025d8e:	f007 f9f3 	bl	802d178 <__cxa_guard_release>
 8025d92:	4a0f      	ldr	r2, [pc, #60]	; (8025dd0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8025d94:	490f      	ldr	r1, [pc, #60]	; (8025dd4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 8025d96:	4810      	ldr	r0, [pc, #64]	; (8025dd8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8025d98:	f007 f9c0 	bl	802d11c <__aeabi_atexit>
 8025d9c:	4c0f      	ldr	r4, [pc, #60]	; (8025ddc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 8025d9e:	7823      	ldrb	r3, [r4, #0]
 8025da0:	f3bf 8f5b 	dmb	ish
 8025da4:	07db      	lsls	r3, r3, #31
 8025da6:	d40b      	bmi.n	8025dc0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8025da8:	4620      	mov	r0, r4
 8025daa:	f007 f9c9 	bl	802d140 <__cxa_guard_acquire>
 8025dae:	b138      	cbz	r0, 8025dc0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8025db0:	4620      	mov	r0, r4
 8025db2:	f007 f9e1 	bl	802d178 <__cxa_guard_release>
 8025db6:	4a06      	ldr	r2, [pc, #24]	; (8025dd0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8025db8:	4909      	ldr	r1, [pc, #36]	; (8025de0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8025dba:	480a      	ldr	r0, [pc, #40]	; (8025de4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8025dbc:	f007 f9ae 	bl	802d11c <__aeabi_atexit>
 8025dc0:	4b05      	ldr	r3, [pc, #20]	; (8025dd8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8025dc2:	642b      	str	r3, [r5, #64]	; 0x40
 8025dc4:	4b07      	ldr	r3, [pc, #28]	; (8025de4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8025dc6:	646b      	str	r3, [r5, #68]	; 0x44
 8025dc8:	bd38      	pop	{r3, r4, r5, pc}
 8025dca:	bf00      	nop
 8025dcc:	200128d0 	.word	0x200128d0
 8025dd0:	20000000 	.word	0x20000000
 8025dd4:	08024037 	.word	0x08024037
 8025dd8:	200000cc 	.word	0x200000cc
 8025ddc:	200128d4 	.word	0x200128d4
 8025de0:	08024035 	.word	0x08024035
 8025de4:	200000d0 	.word	0x200000d0

08025de8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 8025de8:	b538      	push	{r3, r4, r5, lr}
 8025dea:	4c15      	ldr	r4, [pc, #84]	; (8025e40 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 8025dec:	7823      	ldrb	r3, [r4, #0]
 8025dee:	f3bf 8f5b 	dmb	ish
 8025df2:	07da      	lsls	r2, r3, #31
 8025df4:	4605      	mov	r5, r0
 8025df6:	d40b      	bmi.n	8025e10 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8025df8:	4620      	mov	r0, r4
 8025dfa:	f007 f9a1 	bl	802d140 <__cxa_guard_acquire>
 8025dfe:	b138      	cbz	r0, 8025e10 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8025e00:	4620      	mov	r0, r4
 8025e02:	f007 f9b9 	bl	802d178 <__cxa_guard_release>
 8025e06:	4a0f      	ldr	r2, [pc, #60]	; (8025e44 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8025e08:	490f      	ldr	r1, [pc, #60]	; (8025e48 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 8025e0a:	4810      	ldr	r0, [pc, #64]	; (8025e4c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8025e0c:	f007 f986 	bl	802d11c <__aeabi_atexit>
 8025e10:	4c0f      	ldr	r4, [pc, #60]	; (8025e50 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 8025e12:	7823      	ldrb	r3, [r4, #0]
 8025e14:	f3bf 8f5b 	dmb	ish
 8025e18:	07db      	lsls	r3, r3, #31
 8025e1a:	d40b      	bmi.n	8025e34 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8025e1c:	4620      	mov	r0, r4
 8025e1e:	f007 f98f 	bl	802d140 <__cxa_guard_acquire>
 8025e22:	b138      	cbz	r0, 8025e34 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8025e24:	4620      	mov	r0, r4
 8025e26:	f007 f9a7 	bl	802d178 <__cxa_guard_release>
 8025e2a:	4a06      	ldr	r2, [pc, #24]	; (8025e44 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8025e2c:	4909      	ldr	r1, [pc, #36]	; (8025e54 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 8025e2e:	480a      	ldr	r0, [pc, #40]	; (8025e58 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8025e30:	f007 f974 	bl	802d11c <__aeabi_atexit>
 8025e34:	4b05      	ldr	r3, [pc, #20]	; (8025e4c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8025e36:	63ab      	str	r3, [r5, #56]	; 0x38
 8025e38:	4b07      	ldr	r3, [pc, #28]	; (8025e58 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8025e3a:	63eb      	str	r3, [r5, #60]	; 0x3c
 8025e3c:	bd38      	pop	{r3, r4, r5, pc}
 8025e3e:	bf00      	nop
 8025e40:	200128f0 	.word	0x200128f0
 8025e44:	20000000 	.word	0x20000000
 8025e48:	0802403b 	.word	0x0802403b
 8025e4c:	200000ec 	.word	0x200000ec
 8025e50:	200128f4 	.word	0x200128f4
 8025e54:	08024039 	.word	0x08024039
 8025e58:	200000f0 	.word	0x200000f0

08025e5c <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 8025e5c:	b510      	push	{r4, lr}
 8025e5e:	4604      	mov	r4, r0
 8025e60:	f7ff ff14 	bl	8025c8c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8025e64:	4620      	mov	r0, r4
 8025e66:	f7ff ff85 	bl	8025d74 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 8025e6a:	4620      	mov	r0, r4
 8025e6c:	f7ff ff48 	bl	8025d00 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 8025e70:	4620      	mov	r0, r4
 8025e72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025e76:	f7ff bfb7 	b.w	8025de8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

08025e7c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8025e7c:	b538      	push	{r3, r4, r5, lr}
 8025e7e:	4c15      	ldr	r4, [pc, #84]	; (8025ed4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8025e80:	7823      	ldrb	r3, [r4, #0]
 8025e82:	f3bf 8f5b 	dmb	ish
 8025e86:	07da      	lsls	r2, r3, #31
 8025e88:	4605      	mov	r5, r0
 8025e8a:	d40b      	bmi.n	8025ea4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8025e8c:	4620      	mov	r0, r4
 8025e8e:	f007 f957 	bl	802d140 <__cxa_guard_acquire>
 8025e92:	b138      	cbz	r0, 8025ea4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8025e94:	4620      	mov	r0, r4
 8025e96:	f007 f96f 	bl	802d178 <__cxa_guard_release>
 8025e9a:	4a0f      	ldr	r2, [pc, #60]	; (8025ed8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8025e9c:	490f      	ldr	r1, [pc, #60]	; (8025edc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8025e9e:	4810      	ldr	r0, [pc, #64]	; (8025ee0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8025ea0:	f007 f93c 	bl	802d11c <__aeabi_atexit>
 8025ea4:	4c0f      	ldr	r4, [pc, #60]	; (8025ee4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8025ea6:	7823      	ldrb	r3, [r4, #0]
 8025ea8:	f3bf 8f5b 	dmb	ish
 8025eac:	07db      	lsls	r3, r3, #31
 8025eae:	d40b      	bmi.n	8025ec8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8025eb0:	4620      	mov	r0, r4
 8025eb2:	f007 f945 	bl	802d140 <__cxa_guard_acquire>
 8025eb6:	b138      	cbz	r0, 8025ec8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8025eb8:	4620      	mov	r0, r4
 8025eba:	f007 f95d 	bl	802d178 <__cxa_guard_release>
 8025ebe:	4a06      	ldr	r2, [pc, #24]	; (8025ed8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8025ec0:	4909      	ldr	r1, [pc, #36]	; (8025ee8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8025ec2:	480a      	ldr	r0, [pc, #40]	; (8025eec <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8025ec4:	f007 f92a 	bl	802d11c <__aeabi_atexit>
 8025ec8:	4b05      	ldr	r3, [pc, #20]	; (8025ee0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8025eca:	662b      	str	r3, [r5, #96]	; 0x60
 8025ecc:	4b07      	ldr	r3, [pc, #28]	; (8025eec <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8025ece:	666b      	str	r3, [r5, #100]	; 0x64
 8025ed0:	bd38      	pop	{r3, r4, r5, pc}
 8025ed2:	bf00      	nop
 8025ed4:	200128d8 	.word	0x200128d8
 8025ed8:	20000000 	.word	0x20000000
 8025edc:	08024027 	.word	0x08024027
 8025ee0:	200000d4 	.word	0x200000d4
 8025ee4:	200128dc 	.word	0x200128dc
 8025ee8:	08024025 	.word	0x08024025
 8025eec:	200000d8 	.word	0x200000d8

08025ef0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8025ef0:	b538      	push	{r3, r4, r5, lr}
 8025ef2:	4c15      	ldr	r4, [pc, #84]	; (8025f48 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8025ef4:	7823      	ldrb	r3, [r4, #0]
 8025ef6:	f3bf 8f5b 	dmb	ish
 8025efa:	07da      	lsls	r2, r3, #31
 8025efc:	4605      	mov	r5, r0
 8025efe:	d40b      	bmi.n	8025f18 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8025f00:	4620      	mov	r0, r4
 8025f02:	f007 f91d 	bl	802d140 <__cxa_guard_acquire>
 8025f06:	b138      	cbz	r0, 8025f18 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8025f08:	4620      	mov	r0, r4
 8025f0a:	f007 f935 	bl	802d178 <__cxa_guard_release>
 8025f0e:	4a0f      	ldr	r2, [pc, #60]	; (8025f4c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8025f10:	490f      	ldr	r1, [pc, #60]	; (8025f50 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8025f12:	4810      	ldr	r0, [pc, #64]	; (8025f54 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8025f14:	f007 f902 	bl	802d11c <__aeabi_atexit>
 8025f18:	4c0f      	ldr	r4, [pc, #60]	; (8025f58 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8025f1a:	7823      	ldrb	r3, [r4, #0]
 8025f1c:	f3bf 8f5b 	dmb	ish
 8025f20:	07db      	lsls	r3, r3, #31
 8025f22:	d40b      	bmi.n	8025f3c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8025f24:	4620      	mov	r0, r4
 8025f26:	f007 f90b 	bl	802d140 <__cxa_guard_acquire>
 8025f2a:	b138      	cbz	r0, 8025f3c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8025f2c:	4620      	mov	r0, r4
 8025f2e:	f007 f923 	bl	802d178 <__cxa_guard_release>
 8025f32:	4a06      	ldr	r2, [pc, #24]	; (8025f4c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8025f34:	4909      	ldr	r1, [pc, #36]	; (8025f5c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8025f36:	480a      	ldr	r0, [pc, #40]	; (8025f60 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8025f38:	f007 f8f0 	bl	802d11c <__aeabi_atexit>
 8025f3c:	4b05      	ldr	r3, [pc, #20]	; (8025f54 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8025f3e:	65ab      	str	r3, [r5, #88]	; 0x58
 8025f40:	4b07      	ldr	r3, [pc, #28]	; (8025f60 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8025f42:	65eb      	str	r3, [r5, #92]	; 0x5c
 8025f44:	bd38      	pop	{r3, r4, r5, pc}
 8025f46:	bf00      	nop
 8025f48:	200128b0 	.word	0x200128b0
 8025f4c:	20000000 	.word	0x20000000
 8025f50:	0802402b 	.word	0x0802402b
 8025f54:	200000ac 	.word	0x200000ac
 8025f58:	200128b4 	.word	0x200128b4
 8025f5c:	08024029 	.word	0x08024029
 8025f60:	200000b0 	.word	0x200000b0

08025f64 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 8025f64:	b510      	push	{r4, lr}
 8025f66:	4604      	mov	r4, r0
 8025f68:	f7ff ff88 	bl	8025e7c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8025f6c:	4620      	mov	r0, r4
 8025f6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025f72:	f7ff bfbd 	b.w	8025ef0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08025f78 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8025f78:	b538      	push	{r3, r4, r5, lr}
 8025f7a:	4c15      	ldr	r4, [pc, #84]	; (8025fd0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8025f7c:	7823      	ldrb	r3, [r4, #0]
 8025f7e:	f3bf 8f5b 	dmb	ish
 8025f82:	07da      	lsls	r2, r3, #31
 8025f84:	4605      	mov	r5, r0
 8025f86:	d40b      	bmi.n	8025fa0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8025f88:	4620      	mov	r0, r4
 8025f8a:	f007 f8d9 	bl	802d140 <__cxa_guard_acquire>
 8025f8e:	b138      	cbz	r0, 8025fa0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8025f90:	4620      	mov	r0, r4
 8025f92:	f007 f8f1 	bl	802d178 <__cxa_guard_release>
 8025f96:	4a0f      	ldr	r2, [pc, #60]	; (8025fd4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8025f98:	490f      	ldr	r1, [pc, #60]	; (8025fd8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8025f9a:	4810      	ldr	r0, [pc, #64]	; (8025fdc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8025f9c:	f007 f8be 	bl	802d11c <__aeabi_atexit>
 8025fa0:	4c0f      	ldr	r4, [pc, #60]	; (8025fe0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8025fa2:	7823      	ldrb	r3, [r4, #0]
 8025fa4:	f3bf 8f5b 	dmb	ish
 8025fa8:	07db      	lsls	r3, r3, #31
 8025faa:	d40b      	bmi.n	8025fc4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8025fac:	4620      	mov	r0, r4
 8025fae:	f007 f8c7 	bl	802d140 <__cxa_guard_acquire>
 8025fb2:	b138      	cbz	r0, 8025fc4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8025fb4:	4620      	mov	r0, r4
 8025fb6:	f007 f8df 	bl	802d178 <__cxa_guard_release>
 8025fba:	4a06      	ldr	r2, [pc, #24]	; (8025fd4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8025fbc:	4909      	ldr	r1, [pc, #36]	; (8025fe4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8025fbe:	480a      	ldr	r0, [pc, #40]	; (8025fe8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8025fc0:	f007 f8ac 	bl	802d11c <__aeabi_atexit>
 8025fc4:	4b05      	ldr	r3, [pc, #20]	; (8025fdc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8025fc6:	672b      	str	r3, [r5, #112]	; 0x70
 8025fc8:	4b07      	ldr	r3, [pc, #28]	; (8025fe8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8025fca:	676b      	str	r3, [r5, #116]	; 0x74
 8025fcc:	bd38      	pop	{r3, r4, r5, pc}
 8025fce:	bf00      	nop
 8025fd0:	200128a8 	.word	0x200128a8
 8025fd4:	20000000 	.word	0x20000000
 8025fd8:	0802401f 	.word	0x0802401f
 8025fdc:	200000a4 	.word	0x200000a4
 8025fe0:	200128ac 	.word	0x200128ac
 8025fe4:	0802401d 	.word	0x0802401d
 8025fe8:	200000a8 	.word	0x200000a8

08025fec <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 8025fec:	b538      	push	{r3, r4, r5, lr}
 8025fee:	4c15      	ldr	r4, [pc, #84]	; (8026044 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8025ff0:	7823      	ldrb	r3, [r4, #0]
 8025ff2:	f3bf 8f5b 	dmb	ish
 8025ff6:	07da      	lsls	r2, r3, #31
 8025ff8:	4605      	mov	r5, r0
 8025ffa:	d40b      	bmi.n	8026014 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8025ffc:	4620      	mov	r0, r4
 8025ffe:	f007 f89f 	bl	802d140 <__cxa_guard_acquire>
 8026002:	b138      	cbz	r0, 8026014 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8026004:	4620      	mov	r0, r4
 8026006:	f007 f8b7 	bl	802d178 <__cxa_guard_release>
 802600a:	4a0f      	ldr	r2, [pc, #60]	; (8026048 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 802600c:	490f      	ldr	r1, [pc, #60]	; (802604c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 802600e:	4810      	ldr	r0, [pc, #64]	; (8026050 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8026010:	f007 f884 	bl	802d11c <__aeabi_atexit>
 8026014:	4c0f      	ldr	r4, [pc, #60]	; (8026054 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8026016:	7823      	ldrb	r3, [r4, #0]
 8026018:	f3bf 8f5b 	dmb	ish
 802601c:	07db      	lsls	r3, r3, #31
 802601e:	d40b      	bmi.n	8026038 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8026020:	4620      	mov	r0, r4
 8026022:	f007 f88d 	bl	802d140 <__cxa_guard_acquire>
 8026026:	b138      	cbz	r0, 8026038 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8026028:	4620      	mov	r0, r4
 802602a:	f007 f8a5 	bl	802d178 <__cxa_guard_release>
 802602e:	4a06      	ldr	r2, [pc, #24]	; (8026048 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8026030:	4909      	ldr	r1, [pc, #36]	; (8026058 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8026032:	480a      	ldr	r0, [pc, #40]	; (802605c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8026034:	f007 f872 	bl	802d11c <__aeabi_atexit>
 8026038:	4b05      	ldr	r3, [pc, #20]	; (8026050 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 802603a:	66ab      	str	r3, [r5, #104]	; 0x68
 802603c:	4b07      	ldr	r3, [pc, #28]	; (802605c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 802603e:	66eb      	str	r3, [r5, #108]	; 0x6c
 8026040:	bd38      	pop	{r3, r4, r5, pc}
 8026042:	bf00      	nop
 8026044:	200128a0 	.word	0x200128a0
 8026048:	20000000 	.word	0x20000000
 802604c:	08024023 	.word	0x08024023
 8026050:	2000009c 	.word	0x2000009c
 8026054:	200128a4 	.word	0x200128a4
 8026058:	08024021 	.word	0x08024021
 802605c:	200000a0 	.word	0x200000a0

08026060 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 8026060:	b510      	push	{r4, lr}
 8026062:	4604      	mov	r4, r0
 8026064:	f7ff ff88 	bl	8025f78 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8026068:	4620      	mov	r0, r4
 802606a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802606e:	f7ff bfbd 	b.w	8025fec <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

08026072 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 8026072:	b510      	push	{r4, lr}
 8026074:	4604      	mov	r4, r0
 8026076:	f7ff fff3 	bl	8026060 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 802607a:	4620      	mov	r0, r4
 802607c:	f7ff ff72 	bl	8025f64 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 8026080:	4620      	mov	r0, r4
 8026082:	f7ff fdf9 	bl	8025c78 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 8026086:	4620      	mov	r0, r4
 8026088:	f7ff fcfa 	bl	8025a80 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 802608c:	4620      	mov	r0, r4
 802608e:	f7ff fd75 	bl	8025b7c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 8026092:	4620      	mov	r0, r4
 8026094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026098:	f7ff bee0 	b.w	8025e5c <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

0802609c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 802609c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80260a0:	e9dd 4e0c 	ldrd	r4, lr, [sp, #48]	; 0x30
 80260a4:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80260a8:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 80260ac:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 80260b0:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
 80260b4:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 80260b8:	8808      	ldrh	r0, [r1, #0]
 80260ba:	fb0e 4708 	mla	r7, lr, r8, r4
 80260be:	f1be 0f00 	cmp.w	lr, #0
 80260c2:	eb02 0a07 	add.w	sl, r2, r7
 80260c6:	db37      	blt.n	8026138 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 80260c8:	45f3      	cmp	fp, lr
 80260ca:	dd35      	ble.n	8026138 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 80260cc:	2c00      	cmp	r4, #0
 80260ce:	db31      	blt.n	8026134 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 80260d0:	45a0      	cmp	r8, r4
 80260d2:	dd2f      	ble.n	8026134 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 80260d4:	5dd2      	ldrb	r2, [r2, r7]
 80260d6:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
 80260da:	1c62      	adds	r2, r4, #1
 80260dc:	d42f      	bmi.n	802613e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 80260de:	4590      	cmp	r8, r2
 80260e0:	dd2d      	ble.n	802613e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 80260e2:	b366      	cbz	r6, 802613e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 80260e4:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80260e8:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 80260ec:	f11e 0e01 	adds.w	lr, lr, #1
 80260f0:	d429      	bmi.n	8026146 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 80260f2:	45f3      	cmp	fp, lr
 80260f4:	dd27      	ble.n	8026146 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 80260f6:	f1bc 0f00 	cmp.w	ip, #0
 80260fa:	f000 80a0 	beq.w	802623e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a2>
 80260fe:	2c00      	cmp	r4, #0
 8026100:	db1f      	blt.n	8026142 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8026102:	45a0      	cmp	r8, r4
 8026104:	dd1d      	ble.n	8026142 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8026106:	f81a 2008 	ldrb.w	r2, [sl, r8]
 802610a:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 802610e:	3401      	adds	r4, #1
 8026110:	d41c      	bmi.n	802614c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 8026112:	45a0      	cmp	r8, r4
 8026114:	dd1a      	ble.n	802614c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 8026116:	b1de      	cbz	r6, 8026150 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb4>
 8026118:	44d0      	add	r8, sl
 802611a:	f898 2001 	ldrb.w	r2, [r8, #1]
 802611e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8026122:	2e0f      	cmp	r6, #15
 8026124:	d915      	bls.n	8026152 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb6>
 8026126:	4b49      	ldr	r3, [pc, #292]	; (802624c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b0>)
 8026128:	4a49      	ldr	r2, [pc, #292]	; (8026250 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b4>)
 802612a:	484a      	ldr	r0, [pc, #296]	; (8026254 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b8>)
 802612c:	f240 11ef 	movw	r1, #495	; 0x1ef
 8026130:	f008 f8d2 	bl	802e2d8 <__assert_func>
 8026134:	4681      	mov	r9, r0
 8026136:	e7d0      	b.n	80260da <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x3e>
 8026138:	4607      	mov	r7, r0
 802613a:	4681      	mov	r9, r0
 802613c:	e7d6      	b.n	80260ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 802613e:	4607      	mov	r7, r0
 8026140:	e7d4      	b.n	80260ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 8026142:	4686      	mov	lr, r0
 8026144:	e7e3      	b.n	802610e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x72>
 8026146:	4603      	mov	r3, r0
 8026148:	4686      	mov	lr, r0
 802614a:	e7ea      	b.n	8026122 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 802614c:	4603      	mov	r3, r0
 802614e:	e7e8      	b.n	8026122 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 8026150:	4603      	mov	r3, r0
 8026152:	f1bc 0f0f 	cmp.w	ip, #15
 8026156:	d8e6      	bhi.n	8026126 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 8026158:	ea4f 4409 	mov.w	r4, r9, lsl #16
 802615c:	fb16 f80c 	smulbb	r8, r6, ip
 8026160:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8026164:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8026168:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802616c:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8026170:	ea44 0909 	orr.w	r9, r4, r9
 8026174:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026178:	f1cc 0410 	rsb	r4, ip, #16
 802617c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8026180:	1ba4      	subs	r4, r4, r6
 8026182:	041a      	lsls	r2, r3, #16
 8026184:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 8026188:	ea4a 0707 	orr.w	r7, sl, r7
 802618c:	4377      	muls	r7, r6
 802618e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8026192:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8026196:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802619a:	fb04 7409 	mla	r4, r4, r9, r7
 802619e:	4313      	orrs	r3, r2
 80261a0:	ea4f 420e 	mov.w	r2, lr, lsl #16
 80261a4:	fb08 4303 	mla	r3, r8, r3, r4
 80261a8:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80261ac:	f42e 64fc 	bic.w	r4, lr, #2016	; 0x7e0
 80261b0:	4322      	orrs	r2, r4
 80261b2:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 80261b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80261ba:	0d53      	lsrs	r3, r2, #21
 80261bc:	0952      	lsrs	r2, r2, #5
 80261be:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80261c2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80261c6:	431a      	orrs	r2, r3
 80261c8:	b293      	uxth	r3, r2
 80261ca:	b2af      	uxth	r7, r5
 80261cc:	1202      	asrs	r2, r0, #8
 80261ce:	43ed      	mvns	r5, r5
 80261d0:	b2ed      	uxtb	r5, r5
 80261d2:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80261d6:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80261da:	fb12 f205 	smulbb	r2, r2, r5
 80261de:	10c6      	asrs	r6, r0, #3
 80261e0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80261e4:	fb0c 2c07 	mla	ip, ip, r7, r2
 80261e8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80261ec:	10da      	asrs	r2, r3, #3
 80261ee:	fb16 f605 	smulbb	r6, r6, r5
 80261f2:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80261f6:	fb02 6207 	mla	r2, r2, r7, r6
 80261fa:	b296      	uxth	r6, r2
 80261fc:	00c2      	lsls	r2, r0, #3
 80261fe:	00dc      	lsls	r4, r3, #3
 8026200:	b2d2      	uxtb	r2, r2
 8026202:	b2e4      	uxtb	r4, r4
 8026204:	fb12 f205 	smulbb	r2, r2, r5
 8026208:	fb04 2207 	mla	r2, r4, r7, r2
 802620c:	fa1f fc8c 	uxth.w	ip, ip
 8026210:	b292      	uxth	r2, r2
 8026212:	f10c 0301 	add.w	r3, ip, #1
 8026216:	1c50      	adds	r0, r2, #1
 8026218:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 802621c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8026220:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8026224:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8026228:	4313      	orrs	r3, r2
 802622a:	1c72      	adds	r2, r6, #1
 802622c:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 8026230:	0952      	lsrs	r2, r2, #5
 8026232:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026236:	4313      	orrs	r3, r2
 8026238:	800b      	strh	r3, [r1, #0]
 802623a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802623e:	2e0f      	cmp	r6, #15
 8026240:	f63f af71 	bhi.w	8026126 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 8026244:	4603      	mov	r3, r0
 8026246:	4686      	mov	lr, r0
 8026248:	e786      	b.n	8026158 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xbc>
 802624a:	bf00      	nop
 802624c:	080343dc 	.word	0x080343dc
 8026250:	080349de 	.word	0x080349de
 8026254:	08034464 	.word	0x08034464

08026258 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8026258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802625c:	ed2d 8b08 	vpush	{d8-d11}
 8026260:	b09b      	sub	sp, #108	; 0x6c
 8026262:	e9dd 982d 	ldrd	r9, r8, [sp, #180]	; 0xb4
 8026266:	9309      	str	r3, [sp, #36]	; 0x24
 8026268:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 802626c:	9e31      	ldr	r6, [sp, #196]	; 0xc4
 802626e:	930a      	str	r3, [sp, #40]	; 0x28
 8026270:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8026274:	930e      	str	r3, [sp, #56]	; 0x38
 8026276:	910d      	str	r1, [sp, #52]	; 0x34
 8026278:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 802627c:	9018      	str	r0, [sp, #96]	; 0x60
 802627e:	6870      	ldr	r0, [r6, #4]
 8026280:	9217      	str	r2, [sp, #92]	; 0x5c
 8026282:	fb00 1303 	mla	r3, r0, r3, r1
 8026286:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8026288:	6831      	ldr	r1, [r6, #0]
 802628a:	6856      	ldr	r6, [r2, #4]
 802628c:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 8026290:	eb01 0a43 	add.w	sl, r1, r3, lsl #1
 8026294:	6813      	ldr	r3, [r2, #0]
 8026296:	930c      	str	r3, [sp, #48]	; 0x30
 8026298:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802629a:	43db      	mvns	r3, r3
 802629c:	b2db      	uxtb	r3, r3
 802629e:	eeb0 aa40 	vmov.f32	s20, s0
 80262a2:	eef0 9a60 	vmov.f32	s19, s1
 80262a6:	eeb0 9a41 	vmov.f32	s18, s2
 80262aa:	eeb0 8a62 	vmov.f32	s16, s5
 80262ae:	eef0 8a43 	vmov.f32	s17, s6
 80262b2:	eef0 ba44 	vmov.f32	s23, s8
 80262b6:	eeb0 ba64 	vmov.f32	s22, s9
 80262ba:	eef0 aa45 	vmov.f32	s21, s10
 80262be:	3604      	adds	r6, #4
 80262c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80262c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80262c4:	2b00      	cmp	r3, #0
 80262c6:	dc03      	bgt.n	80262d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 80262c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80262ca:	2b00      	cmp	r3, #0
 80262cc:	f340 8215 	ble.w	80266fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 80262d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80262d2:	2b00      	cmp	r3, #0
 80262d4:	f340 8102 	ble.w	80264dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x284>
 80262d8:	ea5f 4229 	movs.w	r2, r9, asr #16
 80262dc:	ea4f 4328 	mov.w	r3, r8, asr #16
 80262e0:	d42c      	bmi.n	802633c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 80262e2:	1c51      	adds	r1, r2, #1
 80262e4:	428c      	cmp	r4, r1
 80262e6:	dd2c      	ble.n	8026342 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 80262e8:	2b00      	cmp	r3, #0
 80262ea:	db2a      	blt.n	8026342 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 80262ec:	980a      	ldr	r0, [sp, #40]	; 0x28
 80262ee:	1c59      	adds	r1, r3, #1
 80262f0:	4288      	cmp	r0, r1
 80262f2:	dd26      	ble.n	8026342 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 80262f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80262f6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80262f8:	3b01      	subs	r3, #1
 80262fa:	fb02 9203 	mla	r2, r2, r3, r9
 80262fe:	1412      	asrs	r2, r2, #16
 8026300:	d429      	bmi.n	8026356 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8026302:	3201      	adds	r2, #1
 8026304:	4294      	cmp	r4, r2
 8026306:	dd26      	ble.n	8026356 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8026308:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 802630a:	fb02 8303 	mla	r3, r2, r3, r8
 802630e:	141b      	asrs	r3, r3, #16
 8026310:	d421      	bmi.n	8026356 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8026312:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026314:	3301      	adds	r3, #1
 8026316:	429a      	cmp	r2, r3
 8026318:	dd1d      	ble.n	8026356 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 802631a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 802631e:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8026322:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 8026326:	9312      	str	r3, [sp, #72]	; 0x48
 8026328:	f1be 0f00 	cmp.w	lr, #0
 802632c:	f300 8138 	bgt.w	80265a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x348>
 8026330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026332:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8026336:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 802633a:	e0d1      	b.n	80264e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x288>
 802633c:	1c51      	adds	r1, r2, #1
 802633e:	f040 80c3 	bne.w	80264c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 8026342:	42a2      	cmp	r2, r4
 8026344:	f280 80c0 	bge.w	80264c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 8026348:	1c5f      	adds	r7, r3, #1
 802634a:	f2c0 80bd 	blt.w	80264c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 802634e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026350:	4293      	cmp	r3, r2
 8026352:	f280 80b9 	bge.w	80264c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 8026356:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 802635a:	4657      	mov	r7, sl
 802635c:	f1bb 0f00 	cmp.w	fp, #0
 8026360:	dde6      	ble.n	8026330 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8026362:	ea5f 4229 	movs.w	r2, r9, asr #16
 8026366:	ea4f 4328 	mov.w	r3, r8, asr #16
 802636a:	f3c9 3003 	ubfx	r0, r9, #12, #4
 802636e:	f3c8 3103 	ubfx	r1, r8, #12, #4
 8026372:	f100 80fc 	bmi.w	802656e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x316>
 8026376:	f102 0c01 	add.w	ip, r2, #1
 802637a:	4564      	cmp	r4, ip
 802637c:	f340 80f9 	ble.w	8026572 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x31a>
 8026380:	2b00      	cmp	r3, #0
 8026382:	f2c0 80f6 	blt.w	8026572 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x31a>
 8026386:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8026388:	f103 0c01 	add.w	ip, r3, #1
 802638c:	4565      	cmp	r5, ip
 802638e:	f340 80f0 	ble.w	8026572 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x31a>
 8026392:	fb03 2304 	mla	r3, r3, r4, r2
 8026396:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026398:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802639a:	441a      	add	r2, r3
 802639c:	5ceb      	ldrb	r3, [r5, r3]
 802639e:	f836 e013 	ldrh.w	lr, [r6, r3, lsl #1]
 80263a2:	2800      	cmp	r0, #0
 80263a4:	f000 80db 	beq.w	802655e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x306>
 80263a8:	7853      	ldrb	r3, [r2, #1]
 80263aa:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80263ae:	9313      	str	r3, [sp, #76]	; 0x4c
 80263b0:	b141      	cbz	r1, 80263c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x16c>
 80263b2:	1913      	adds	r3, r2, r4
 80263b4:	5d12      	ldrb	r2, [r2, r4]
 80263b6:	785b      	ldrb	r3, [r3, #1]
 80263b8:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 80263bc:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80263c0:	9210      	str	r2, [sp, #64]	; 0x40
 80263c2:	9314      	str	r3, [sp, #80]	; 0x50
 80263c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80263c6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80263c8:	fb10 f201 	smulbb	r2, r0, r1
 80263cc:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80263d0:	10d2      	asrs	r2, r2, #3
 80263d2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80263d6:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80263da:	ea4c 0c03 	orr.w	ip, ip, r3
 80263de:	ebc2 0340 	rsb	r3, r2, r0, lsl #1
 80263e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80263e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80263e6:	041b      	lsls	r3, r3, #16
 80263e8:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80263ec:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80263f0:	432b      	orrs	r3, r5
 80263f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80263f4:	4353      	muls	r3, r2
 80263f6:	fb05 330c 	mla	r3, r5, ip, r3
 80263fa:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 80263fe:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8026402:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8026406:	ea4c 0e0e 	orr.w	lr, ip, lr
 802640a:	f1c1 0c10 	rsb	ip, r1, #16
 802640e:	ebac 0c00 	sub.w	ip, ip, r0
 8026412:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8026416:	fb0c 3c0e 	mla	ip, ip, lr, r3
 802641a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802641c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802641e:	0418      	lsls	r0, r3, #16
 8026420:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8026424:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8026428:	4318      	orrs	r0, r3
 802642a:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 802642e:	fb02 c200 	mla	r2, r2, r0, ip
 8026432:	0d53      	lsrs	r3, r2, #21
 8026434:	0952      	lsrs	r2, r2, #5
 8026436:	f8b7 c000 	ldrh.w	ip, [r7]
 802643a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802643e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026442:	431a      	orrs	r2, r3
 8026444:	b292      	uxth	r2, r2
 8026446:	ea4f 212c 	mov.w	r1, ip, asr #8
 802644a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 802644e:	1210      	asrs	r0, r2, #8
 8026450:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8026454:	fb11 f105 	smulbb	r1, r1, r5
 8026458:	ea4f 0eec 	mov.w	lr, ip, asr #3
 802645c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026460:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8026464:	fb00 1003 	mla	r0, r0, r3, r1
 8026468:	fa5f fc8c 	uxtb.w	ip, ip
 802646c:	10d1      	asrs	r1, r2, #3
 802646e:	00d2      	lsls	r2, r2, #3
 8026470:	fb1c fc05 	smulbb	ip, ip, r5
 8026474:	b2d2      	uxtb	r2, r2
 8026476:	fb02 c203 	mla	r2, r2, r3, ip
 802647a:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 802647e:	b280      	uxth	r0, r0
 8026480:	b292      	uxth	r2, r2
 8026482:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8026486:	fb1e fe05 	smulbb	lr, lr, r5
 802648a:	fb01 e103 	mla	r1, r1, r3, lr
 802648e:	f102 0c01 	add.w	ip, r2, #1
 8026492:	1c43      	adds	r3, r0, #1
 8026494:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8026498:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802649c:	b289      	uxth	r1, r1
 802649e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80264a2:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80264a6:	4313      	orrs	r3, r2
 80264a8:	1c4a      	adds	r2, r1, #1
 80264aa:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80264ae:	0949      	lsrs	r1, r1, #5
 80264b0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80264b4:	430b      	orrs	r3, r1
 80264b6:	803b      	strh	r3, [r7, #0]
 80264b8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80264ba:	4499      	add	r9, r3
 80264bc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80264be:	3702      	adds	r7, #2
 80264c0:	4498      	add	r8, r3
 80264c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80264c6:	e749      	b.n	802635c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 80264c8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80264ca:	4499      	add	r9, r3
 80264cc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80264ce:	4498      	add	r8, r3
 80264d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80264d2:	3b01      	subs	r3, #1
 80264d4:	9309      	str	r3, [sp, #36]	; 0x24
 80264d6:	f10a 0a02 	add.w	sl, sl, #2
 80264da:	e6f9      	b.n	80262d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 80264dc:	f47f af0a 	bne.w	80262f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 80264e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80264e2:	2b00      	cmp	r3, #0
 80264e4:	f340 8109 	ble.w	80266fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 80264e8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80264ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80264f0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80264f4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80264f6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80264fa:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80264fe:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8026502:	eef0 6a48 	vmov.f32	s13, s16
 8026506:	ee69 7a27 	vmul.f32	s15, s18, s15
 802650a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802650e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8026512:	ee16 9a90 	vmov	r9, s13
 8026516:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802651a:	eef0 6a68 	vmov.f32	s13, s17
 802651e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8026522:	ee18 2a10 	vmov	r2, s16
 8026526:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802652a:	fb92 f3f3 	sdiv	r3, r2, r3
 802652e:	ee18 2a90 	vmov	r2, s17
 8026532:	932f      	str	r3, [sp, #188]	; 0xbc
 8026534:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026536:	fb92 f3f3 	sdiv	r3, r2, r3
 802653a:	9330      	str	r3, [sp, #192]	; 0xc0
 802653c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802653e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8026540:	3b01      	subs	r3, #1
 8026542:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026546:	930d      	str	r3, [sp, #52]	; 0x34
 8026548:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802654a:	bf08      	it	eq
 802654c:	4613      	moveq	r3, r2
 802654e:	ee16 8a90 	vmov	r8, s13
 8026552:	9309      	str	r3, [sp, #36]	; 0x24
 8026554:	eef0 8a67 	vmov.f32	s17, s15
 8026558:	eeb0 8a47 	vmov.f32	s16, s14
 802655c:	e6b1      	b.n	80262c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 802655e:	2900      	cmp	r1, #0
 8026560:	f43f af30 	beq.w	80263c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x16c>
 8026564:	5d13      	ldrb	r3, [r2, r4]
 8026566:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802656a:	9310      	str	r3, [sp, #64]	; 0x40
 802656c:	e72a      	b.n	80263c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x16c>
 802656e:	1c55      	adds	r5, r2, #1
 8026570:	d1a2      	bne.n	80264b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 8026572:	4294      	cmp	r4, r2
 8026574:	dda0      	ble.n	80264b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 8026576:	1c5d      	adds	r5, r3, #1
 8026578:	db9e      	blt.n	80264b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 802657a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802657c:	429d      	cmp	r5, r3
 802657e:	dd9b      	ble.n	80264b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 8026580:	e9cd 3003 	strd	r3, r0, [sp, #12]
 8026584:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8026586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026588:	9202      	str	r2, [sp, #8]
 802658a:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802658e:	e9cd 4300 	strd	r4, r3, [sp]
 8026592:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026594:	9818      	ldr	r0, [sp, #96]	; 0x60
 8026596:	4633      	mov	r3, r6
 8026598:	4639      	mov	r1, r7
 802659a:	f7ff fd7f 	bl	802609c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 802659e:	e78b      	b.n	80264b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 80265a0:	ea4f 4329 	mov.w	r3, r9, asr #16
 80265a4:	ea4f 4228 	mov.w	r2, r8, asr #16
 80265a8:	fb04 3202 	mla	r2, r4, r2, r3
 80265ac:	990c      	ldr	r1, [sp, #48]	; 0x30
 80265ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80265b0:	4413      	add	r3, r2
 80265b2:	5c8a      	ldrb	r2, [r1, r2]
 80265b4:	f3c9 3c03 	ubfx	ip, r9, #12, #4
 80265b8:	f3c8 3003 	ubfx	r0, r8, #12, #4
 80265bc:	f836 1012 	ldrh.w	r1, [r6, r2, lsl #1]
 80265c0:	f1bc 0f00 	cmp.w	ip, #0
 80265c4:	f000 8091 	beq.w	80266ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x492>
 80265c8:	785a      	ldrb	r2, [r3, #1]
 80265ca:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 80265ce:	9215      	str	r2, [sp, #84]	; 0x54
 80265d0:	b140      	cbz	r0, 80265e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38c>
 80265d2:	191a      	adds	r2, r3, r4
 80265d4:	5d1b      	ldrb	r3, [r3, r4]
 80265d6:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80265da:	9311      	str	r3, [sp, #68]	; 0x44
 80265dc:	7853      	ldrb	r3, [r2, #1]
 80265de:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80265e2:	9316      	str	r3, [sp, #88]	; 0x58
 80265e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80265e6:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80265e8:	fb1c f200 	smulbb	r2, ip, r0
 80265ec:	041f      	lsls	r7, r3, #16
 80265ee:	10d2      	asrs	r2, r2, #3
 80265f0:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80265f4:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 80265f8:	431f      	orrs	r7, r3
 80265fa:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 80265fe:	9319      	str	r3, [sp, #100]	; 0x64
 8026600:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8026602:	041b      	lsls	r3, r3, #16
 8026604:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 8026608:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802660c:	ea43 030b 	orr.w	r3, r3, fp
 8026610:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8026612:	4353      	muls	r3, r2
 8026614:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8026618:	fb05 3707 	mla	r7, r5, r7, r3
 802661c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8026620:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8026624:	ea43 0b01 	orr.w	fp, r3, r1
 8026628:	f1c0 0110 	rsb	r1, r0, #16
 802662c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802662e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8026630:	eba1 0c0c 	sub.w	ip, r1, ip
 8026634:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8026638:	fb0c 770b 	mla	r7, ip, fp, r7
 802663c:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8026640:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 8026644:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8026648:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 802664c:	ea4c 0c0b 	orr.w	ip, ip, fp
 8026650:	fb02 770c 	mla	r7, r2, ip, r7
 8026654:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8026656:	0d79      	lsrs	r1, r7, #21
 8026658:	8812      	ldrh	r2, [r2, #0]
 802665a:	097f      	lsrs	r7, r7, #5
 802665c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026660:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8026664:	430f      	orrs	r7, r1
 8026666:	1211      	asrs	r1, r2, #8
 8026668:	b2bb      	uxth	r3, r7
 802666a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802666e:	fb11 f105 	smulbb	r1, r1, r5
 8026672:	1218      	asrs	r0, r3, #8
 8026674:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8026676:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802667a:	fb00 1005 	mla	r0, r0, r5, r1
 802667e:	10d7      	asrs	r7, r2, #3
 8026680:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8026682:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8026686:	fb17 f705 	smulbb	r7, r7, r5
 802668a:	10d9      	asrs	r1, r3, #3
 802668c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802668e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8026692:	fb01 7105 	mla	r1, r1, r5, r7
 8026696:	00d2      	lsls	r2, r2, #3
 8026698:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802669a:	b2d2      	uxtb	r2, r2
 802669c:	fb12 f205 	smulbb	r2, r2, r5
 80266a0:	00db      	lsls	r3, r3, #3
 80266a2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80266a4:	b2db      	uxtb	r3, r3
 80266a6:	b280      	uxth	r0, r0
 80266a8:	fb03 2305 	mla	r3, r3, r5, r2
 80266ac:	b29b      	uxth	r3, r3
 80266ae:	b289      	uxth	r1, r1
 80266b0:	1c42      	adds	r2, r0, #1
 80266b2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80266b6:	1c4f      	adds	r7, r1, #1
 80266b8:	1c5a      	adds	r2, r3, #1
 80266ba:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80266be:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80266c2:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80266c6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80266ca:	0949      	lsrs	r1, r1, #5
 80266cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80266ce:	4310      	orrs	r0, r2
 80266d0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80266d4:	4308      	orrs	r0, r1
 80266d6:	f823 0b02 	strh.w	r0, [r3], #2
 80266da:	930f      	str	r3, [sp, #60]	; 0x3c
 80266dc:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80266de:	4499      	add	r9, r3
 80266e0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80266e2:	f10e 3eff 	add.w	lr, lr, #4294967295
 80266e6:	4498      	add	r8, r3
 80266e8:	e61e      	b.n	8026328 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 80266ea:	2800      	cmp	r0, #0
 80266ec:	f43f af7a 	beq.w	80265e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38c>
 80266f0:	5d1b      	ldrb	r3, [r3, r4]
 80266f2:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80266f6:	9311      	str	r3, [sp, #68]	; 0x44
 80266f8:	e774      	b.n	80265e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38c>
 80266fa:	b01b      	add	sp, #108	; 0x6c
 80266fc:	ecbd 8b08 	vpop	{d8-d11}
 8026700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026704 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8026704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026708:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 802670c:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8026710:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8026714:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 8026718:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 802671c:	8808      	ldrh	r0, [r1, #0]
 802671e:	fb06 570e 	mla	r7, r6, lr, r5
 8026722:	2e00      	cmp	r6, #0
 8026724:	eb02 0807 	add.w	r8, r2, r7
 8026728:	db38      	blt.n	802679c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 802672a:	45b1      	cmp	r9, r6
 802672c:	dd36      	ble.n	802679c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 802672e:	2d00      	cmp	r5, #0
 8026730:	db32      	blt.n	8026798 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 8026732:	45ae      	cmp	lr, r5
 8026734:	dd30      	ble.n	8026798 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 8026736:	5dd2      	ldrb	r2, [r2, r7]
 8026738:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 802673c:	1c6a      	adds	r2, r5, #1
 802673e:	d430      	bmi.n	80267a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8026740:	4596      	cmp	lr, r2
 8026742:	dd2e      	ble.n	80267a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8026744:	b36c      	cbz	r4, 80267a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8026746:	f898 2001 	ldrb.w	r2, [r8, #1]
 802674a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 802674e:	3601      	adds	r6, #1
 8026750:	d42b      	bmi.n	80267aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 8026752:	45b1      	cmp	r9, r6
 8026754:	dd29      	ble.n	80267aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 8026756:	f1bc 0f00 	cmp.w	ip, #0
 802675a:	d028      	beq.n	80267ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xaa>
 802675c:	2d00      	cmp	r5, #0
 802675e:	db22      	blt.n	80267a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 8026760:	45ae      	cmp	lr, r5
 8026762:	dd20      	ble.n	80267a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 8026764:	f818 600e 	ldrb.w	r6, [r8, lr]
 8026768:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 802676c:	3501      	adds	r5, #1
 802676e:	d407      	bmi.n	8026780 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8026770:	45ae      	cmp	lr, r5
 8026772:	dd05      	ble.n	8026780 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8026774:	b134      	cbz	r4, 8026784 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8026776:	44c6      	add	lr, r8
 8026778:	f89e 0001 	ldrb.w	r0, [lr, #1]
 802677c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8026780:	2c0f      	cmp	r4, #15
 8026782:	d802      	bhi.n	802678a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8026784:	f1bc 0f0f 	cmp.w	ip, #15
 8026788:	d914      	bls.n	80267b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xb0>
 802678a:	4b26      	ldr	r3, [pc, #152]	; (8026824 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x120>)
 802678c:	4a26      	ldr	r2, [pc, #152]	; (8026828 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x124>)
 802678e:	4827      	ldr	r0, [pc, #156]	; (802682c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x128>)
 8026790:	f240 11ef 	movw	r1, #495	; 0x1ef
 8026794:	f007 fda0 	bl	802e2d8 <__assert_func>
 8026798:	4607      	mov	r7, r0
 802679a:	e7cf      	b.n	802673c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x38>
 802679c:	4602      	mov	r2, r0
 802679e:	4607      	mov	r7, r0
 80267a0:	e7d5      	b.n	802674e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 80267a2:	4602      	mov	r2, r0
 80267a4:	e7d3      	b.n	802674e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 80267a6:	4606      	mov	r6, r0
 80267a8:	e7e0      	b.n	802676c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x68>
 80267aa:	4606      	mov	r6, r0
 80267ac:	e7e8      	b.n	8026780 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 80267ae:	2c0f      	cmp	r4, #15
 80267b0:	d8eb      	bhi.n	802678a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 80267b2:	4606      	mov	r6, r0
 80267b4:	043d      	lsls	r5, r7, #16
 80267b6:	fb14 f30c 	smulbb	r3, r4, ip
 80267ba:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 80267be:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 80267c2:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80267c6:	10db      	asrs	r3, r3, #3
 80267c8:	432f      	orrs	r7, r5
 80267ca:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80267ce:	f1cc 0510 	rsb	r5, ip, #16
 80267d2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80267d6:	1b2d      	subs	r5, r5, r4
 80267d8:	ea4e 0202 	orr.w	r2, lr, r2
 80267dc:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 80267e0:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80267e4:	4354      	muls	r4, r2
 80267e6:	fb05 4507 	mla	r5, r5, r7, r4
 80267ea:	0404      	lsls	r4, r0, #16
 80267ec:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80267f0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80267f4:	4320      	orrs	r0, r4
 80267f6:	fb03 5400 	mla	r4, r3, r0, r5
 80267fa:	0430      	lsls	r0, r6, #16
 80267fc:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8026800:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8026804:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8026808:	4330      	orrs	r0, r6
 802680a:	fb03 4000 	mla	r0, r3, r0, r4
 802680e:	0d43      	lsrs	r3, r0, #21
 8026810:	0940      	lsrs	r0, r0, #5
 8026812:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026816:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802681a:	4318      	orrs	r0, r3
 802681c:	8008      	strh	r0, [r1, #0]
 802681e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026822:	bf00      	nop
 8026824:	080343dc 	.word	0x080343dc
 8026828:	080349de 	.word	0x080349de
 802682c:	08034464 	.word	0x08034464

08026830 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8026830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026834:	ed2d 8b0a 	vpush	{d8-d12}
 8026838:	b095      	sub	sp, #84	; 0x54
 802683a:	e9dd 9629 	ldrd	r9, r6, [sp, #164]	; 0xa4
 802683e:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
 8026840:	9306      	str	r3, [sp, #24]
 8026842:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8026846:	9109      	str	r1, [sp, #36]	; 0x24
 8026848:	9307      	str	r3, [sp, #28]
 802684a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802684e:	9012      	str	r0, [sp, #72]	; 0x48
 8026850:	6878      	ldr	r0, [r7, #4]
 8026852:	9211      	str	r2, [sp, #68]	; 0x44
 8026854:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8026856:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 802685a:	fb00 1303 	mla	r3, r0, r3, r1
 802685e:	6839      	ldr	r1, [r7, #0]
 8026860:	6857      	ldr	r7, [r2, #4]
 8026862:	eb01 0a43 	add.w	sl, r1, r3, lsl #1
 8026866:	6813      	ldr	r3, [r2, #0]
 8026868:	9308      	str	r3, [sp, #32]
 802686a:	eeb0 aa40 	vmov.f32	s20, s0
 802686e:	eef0 9a60 	vmov.f32	s19, s1
 8026872:	eeb0 9a41 	vmov.f32	s18, s2
 8026876:	eeb0 8a62 	vmov.f32	s16, s5
 802687a:	eef0 8a43 	vmov.f32	s17, s6
 802687e:	eeb0 ca44 	vmov.f32	s24, s8
 8026882:	eef0 ba64 	vmov.f32	s23, s9
 8026886:	eeb0 ba45 	vmov.f32	s22, s10
 802688a:	3704      	adds	r7, #4
 802688c:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8026890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026892:	2b00      	cmp	r3, #0
 8026894:	dc03      	bgt.n	802689e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8026896:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8026898:	2b00      	cmp	r3, #0
 802689a:	f340 819a 	ble.w	8026bd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a2>
 802689e:	9b06      	ldr	r3, [sp, #24]
 80268a0:	2b00      	cmp	r3, #0
 80268a2:	f340 80c4 	ble.w	8026a2e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 80268a6:	ea5f 4229 	movs.w	r2, r9, asr #16
 80268aa:	ea4f 4326 	mov.w	r3, r6, asr #16
 80268ae:	d429      	bmi.n	8026904 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 80268b0:	1c51      	adds	r1, r2, #1
 80268b2:	428c      	cmp	r4, r1
 80268b4:	dd29      	ble.n	802690a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 80268b6:	2b00      	cmp	r3, #0
 80268b8:	db27      	blt.n	802690a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 80268ba:	9807      	ldr	r0, [sp, #28]
 80268bc:	1c59      	adds	r1, r3, #1
 80268be:	4288      	cmp	r0, r1
 80268c0:	dd23      	ble.n	802690a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 80268c2:	9b06      	ldr	r3, [sp, #24]
 80268c4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80268c6:	3b01      	subs	r3, #1
 80268c8:	fb02 9203 	mla	r2, r2, r3, r9
 80268cc:	1412      	asrs	r2, r2, #16
 80268ce:	d425      	bmi.n	802691c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 80268d0:	3201      	adds	r2, #1
 80268d2:	4294      	cmp	r4, r2
 80268d4:	dd22      	ble.n	802691c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 80268d6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80268d8:	fb02 6303 	mla	r3, r2, r3, r6
 80268dc:	141b      	asrs	r3, r3, #16
 80268de:	d41d      	bmi.n	802691c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 80268e0:	9a07      	ldr	r2, [sp, #28]
 80268e2:	3301      	adds	r3, #1
 80268e4:	429a      	cmp	r2, r3
 80268e6:	dd19      	ble.n	802691c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 80268e8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80268ec:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80268f0:	f1b8 0f00 	cmp.w	r8, #0
 80268f4:	f300 80f8 	bgt.w	8026ae8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 80268f8:	9b06      	ldr	r3, [sp, #24]
 80268fa:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80268fe:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 8026902:	e096      	b.n	8026a32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x202>
 8026904:	1c51      	adds	r1, r2, #1
 8026906:	f040 8088 	bne.w	8026a1a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 802690a:	42a2      	cmp	r2, r4
 802690c:	f280 8085 	bge.w	8026a1a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 8026910:	1c5a      	adds	r2, r3, #1
 8026912:	f2c0 8082 	blt.w	8026a1a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 8026916:	9a07      	ldr	r2, [sp, #28]
 8026918:	4293      	cmp	r3, r2
 802691a:	da7e      	bge.n	8026a1a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 802691c:	f8dd b018 	ldr.w	fp, [sp, #24]
 8026920:	46d0      	mov	r8, sl
 8026922:	f1bb 0f00 	cmp.w	fp, #0
 8026926:	dde7      	ble.n	80268f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8026928:	ea5f 4229 	movs.w	r2, r9, asr #16
 802692c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026930:	f3c9 3003 	ubfx	r0, r9, #12, #4
 8026934:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8026938:	f100 80c0 	bmi.w	8026abc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28c>
 802693c:	f102 0c01 	add.w	ip, r2, #1
 8026940:	4564      	cmp	r4, ip
 8026942:	f340 80bd 	ble.w	8026ac0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 8026946:	2b00      	cmp	r3, #0
 8026948:	f2c0 80ba 	blt.w	8026ac0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 802694c:	9d07      	ldr	r5, [sp, #28]
 802694e:	f103 0c01 	add.w	ip, r3, #1
 8026952:	4565      	cmp	r5, ip
 8026954:	f340 80b4 	ble.w	8026ac0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 8026958:	fb03 2304 	mla	r3, r3, r4, r2
 802695c:	9d08      	ldr	r5, [sp, #32]
 802695e:	9a08      	ldr	r2, [sp, #32]
 8026960:	441a      	add	r2, r3
 8026962:	5ceb      	ldrb	r3, [r5, r3]
 8026964:	f837 e013 	ldrh.w	lr, [r7, r3, lsl #1]
 8026968:	2800      	cmp	r0, #0
 802696a:	f000 809f 	beq.w	8026aac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27c>
 802696e:	7853      	ldrb	r3, [r2, #1]
 8026970:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8026974:	930d      	str	r3, [sp, #52]	; 0x34
 8026976:	b141      	cbz	r1, 802698a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 8026978:	1913      	adds	r3, r2, r4
 802697a:	5d12      	ldrb	r2, [r2, r4]
 802697c:	785b      	ldrb	r3, [r3, #1]
 802697e:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8026982:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8026986:	920a      	str	r2, [sp, #40]	; 0x28
 8026988:	930e      	str	r3, [sp, #56]	; 0x38
 802698a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802698c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802698e:	fb10 f201 	smulbb	r2, r0, r1
 8026992:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8026996:	10d2      	asrs	r2, r2, #3
 8026998:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802699c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80269a0:	ea4c 0c03 	orr.w	ip, ip, r3
 80269a4:	ebc2 0340 	rsb	r3, r2, r0, lsl #1
 80269a8:	930c      	str	r3, [sp, #48]	; 0x30
 80269aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80269ac:	041b      	lsls	r3, r3, #16
 80269ae:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80269b2:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80269b6:	432b      	orrs	r3, r5
 80269b8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80269ba:	4353      	muls	r3, r2
 80269bc:	fb05 330c 	mla	r3, r5, ip, r3
 80269c0:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 80269c4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80269c8:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80269cc:	ea4c 0e0e 	orr.w	lr, ip, lr
 80269d0:	f1c1 0c10 	rsb	ip, r1, #16
 80269d4:	ebac 0c00 	sub.w	ip, ip, r0
 80269d8:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80269dc:	fb0c 3c0e 	mla	ip, ip, lr, r3
 80269e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80269e2:	0418      	lsls	r0, r3, #16
 80269e4:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80269e8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80269ec:	4318      	orrs	r0, r3
 80269ee:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 80269f2:	fb02 c200 	mla	r2, r2, r0, ip
 80269f6:	0d53      	lsrs	r3, r2, #21
 80269f8:	0952      	lsrs	r2, r2, #5
 80269fa:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80269fe:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026a02:	431a      	orrs	r2, r3
 8026a04:	f8a8 2000 	strh.w	r2, [r8]
 8026a08:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8026a0a:	4499      	add	r9, r3
 8026a0c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026a0e:	f108 0802 	add.w	r8, r8, #2
 8026a12:	441e      	add	r6, r3
 8026a14:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026a18:	e783      	b.n	8026922 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8026a1a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8026a1c:	4499      	add	r9, r3
 8026a1e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026a20:	441e      	add	r6, r3
 8026a22:	9b06      	ldr	r3, [sp, #24]
 8026a24:	3b01      	subs	r3, #1
 8026a26:	9306      	str	r3, [sp, #24]
 8026a28:	f10a 0a02 	add.w	sl, sl, #2
 8026a2c:	e737      	b.n	802689e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8026a2e:	f47f af48 	bne.w	80268c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8026a32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026a34:	2b00      	cmp	r3, #0
 8026a36:	f340 80cc 	ble.w	8026bd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a2>
 8026a3a:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8026a3e:	ee79 9aab 	vadd.f32	s19, s19, s23
 8026a42:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8026a46:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026a48:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8026a4c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8026a50:	eef0 6a48 	vmov.f32	s13, s16
 8026a54:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026a58:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026a5c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8026a60:	ee16 9a90 	vmov	r9, s13
 8026a64:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8026a68:	eef0 6a68 	vmov.f32	s13, s17
 8026a6c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8026a70:	ee18 2a10 	vmov	r2, s16
 8026a74:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8026a78:	fb92 f3f3 	sdiv	r3, r2, r3
 8026a7c:	ee18 2a90 	vmov	r2, s17
 8026a80:	932b      	str	r3, [sp, #172]	; 0xac
 8026a82:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026a84:	fb92 f3f3 	sdiv	r3, r2, r3
 8026a88:	932c      	str	r3, [sp, #176]	; 0xb0
 8026a8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026a8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8026a8e:	3b01      	subs	r3, #1
 8026a90:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026a94:	9309      	str	r3, [sp, #36]	; 0x24
 8026a96:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026a98:	bf08      	it	eq
 8026a9a:	4613      	moveq	r3, r2
 8026a9c:	ee16 6a90 	vmov	r6, s13
 8026aa0:	9306      	str	r3, [sp, #24]
 8026aa2:	eef0 8a67 	vmov.f32	s17, s15
 8026aa6:	eeb0 8a47 	vmov.f32	s16, s14
 8026aaa:	e6f1      	b.n	8026890 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8026aac:	2900      	cmp	r1, #0
 8026aae:	f43f af6c 	beq.w	802698a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 8026ab2:	5d13      	ldrb	r3, [r2, r4]
 8026ab4:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8026ab8:	930a      	str	r3, [sp, #40]	; 0x28
 8026aba:	e766      	b.n	802698a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 8026abc:	1c55      	adds	r5, r2, #1
 8026abe:	d1a3      	bne.n	8026a08 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d8>
 8026ac0:	4294      	cmp	r4, r2
 8026ac2:	dda1      	ble.n	8026a08 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d8>
 8026ac4:	1c5d      	adds	r5, r3, #1
 8026ac6:	db9f      	blt.n	8026a08 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d8>
 8026ac8:	9d07      	ldr	r5, [sp, #28]
 8026aca:	429d      	cmp	r5, r3
 8026acc:	dd9c      	ble.n	8026a08 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d8>
 8026ace:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8026ad2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8026ad6:	e9cd 4500 	strd	r4, r5, [sp]
 8026ada:	463b      	mov	r3, r7
 8026adc:	9a08      	ldr	r2, [sp, #32]
 8026ade:	9812      	ldr	r0, [sp, #72]	; 0x48
 8026ae0:	4641      	mov	r1, r8
 8026ae2:	f7ff fe0f 	bl	8026704 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8026ae6:	e78f      	b.n	8026a08 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d8>
 8026ae8:	ea4f 4329 	mov.w	r3, r9, asr #16
 8026aec:	1432      	asrs	r2, r6, #16
 8026aee:	fb04 3202 	mla	r2, r4, r2, r3
 8026af2:	9908      	ldr	r1, [sp, #32]
 8026af4:	9b08      	ldr	r3, [sp, #32]
 8026af6:	4413      	add	r3, r2
 8026af8:	5c8a      	ldrb	r2, [r1, r2]
 8026afa:	f3c9 3e03 	ubfx	lr, r9, #12, #4
 8026afe:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8026b02:	f837 1012 	ldrh.w	r1, [r7, r2, lsl #1]
 8026b06:	f1be 0f00 	cmp.w	lr, #0
 8026b0a:	d05b      	beq.n	8026bc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x394>
 8026b0c:	785a      	ldrb	r2, [r3, #1]
 8026b0e:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8026b12:	920f      	str	r2, [sp, #60]	; 0x3c
 8026b14:	b140      	cbz	r0, 8026b28 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f8>
 8026b16:	191a      	adds	r2, r3, r4
 8026b18:	5d1b      	ldrb	r3, [r3, r4]
 8026b1a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8026b1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8026b20:	7853      	ldrb	r3, [r2, #1]
 8026b22:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8026b26:	9310      	str	r3, [sp, #64]	; 0x40
 8026b28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8026b2a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8026b2c:	fb1e f200 	smulbb	r2, lr, r0
 8026b30:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8026b34:	10d2      	asrs	r2, r2, #3
 8026b36:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8026b3a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8026b3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8026b42:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 8026b46:	9313      	str	r3, [sp, #76]	; 0x4c
 8026b48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8026b4a:	041b      	lsls	r3, r3, #16
 8026b4c:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 8026b50:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8026b54:	ea43 030b 	orr.w	r3, r3, fp
 8026b58:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8026b5a:	4353      	muls	r3, r2
 8026b5c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8026b60:	fb05 3c0c 	mla	ip, r5, ip, r3
 8026b64:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8026b68:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8026b6c:	ea43 0b01 	orr.w	fp, r3, r1
 8026b70:	f1c0 0110 	rsb	r1, r0, #16
 8026b74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026b76:	eba1 0e0e 	sub.w	lr, r1, lr
 8026b7a:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 8026b7e:	fb0e cc0b 	mla	ip, lr, fp, ip
 8026b82:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8026b86:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 8026b8a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026b8e:	ea4b 0e0e 	orr.w	lr, fp, lr
 8026b92:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8026b96:	fb02 cc0e 	mla	ip, r2, lr, ip
 8026b9a:	ea4f 535c 	mov.w	r3, ip, lsr #21
 8026b9e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8026ba2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026ba6:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8026baa:	ea43 0c0c 	orr.w	ip, r3, ip
 8026bae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026bb0:	f823 cb02 	strh.w	ip, [r3], #2
 8026bb4:	930c      	str	r3, [sp, #48]	; 0x30
 8026bb6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8026bb8:	4499      	add	r9, r3
 8026bba:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026bbc:	f108 38ff 	add.w	r8, r8, #4294967295
 8026bc0:	441e      	add	r6, r3
 8026bc2:	e695      	b.n	80268f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc0>
 8026bc4:	2800      	cmp	r0, #0
 8026bc6:	d0af      	beq.n	8026b28 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f8>
 8026bc8:	5d1b      	ldrb	r3, [r3, r4]
 8026bca:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8026bce:	930b      	str	r3, [sp, #44]	; 0x2c
 8026bd0:	e7aa      	b.n	8026b28 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f8>
 8026bd2:	b015      	add	sp, #84	; 0x54
 8026bd4:	ecbd 8b0a 	vpop	{d8-d12}
 8026bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026bdc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 8026bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026be0:	468b      	mov	fp, r1
 8026be2:	8809      	ldrh	r1, [r1, #0]
 8026be4:	b089      	sub	sp, #36	; 0x24
 8026be6:	10cd      	asrs	r5, r1, #3
 8026be8:	e9dd 6414 	ldrd	r6, r4, [sp, #80]	; 0x50
 8026bec:	ea4f 2921 	mov.w	r9, r1, asr #8
 8026bf0:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8026bf4:	00c9      	lsls	r1, r1, #3
 8026bf6:	9500      	str	r5, [sp, #0]
 8026bf8:	b2c9      	uxtb	r1, r1
 8026bfa:	f9bd e048 	ldrsh.w	lr, [sp, #72]	; 0x48
 8026bfe:	9101      	str	r1, [sp, #4]
 8026c00:	9900      	ldr	r1, [sp, #0]
 8026c02:	9202      	str	r2, [sp, #8]
 8026c04:	fb04 650e 	mla	r5, r4, lr, r6
 8026c08:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 8026c0c:	eb02 0805 	add.w	r8, r2, r5
 8026c10:	0209      	lsls	r1, r1, #8
 8026c12:	9a01      	ldr	r2, [sp, #4]
 8026c14:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 8026c18:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8026c1c:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8026c20:	f89d c060 	ldrb.w	ip, [sp, #96]	; 0x60
 8026c24:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8026c28:	4311      	orrs	r1, r2
 8026c2a:	2c00      	cmp	r4, #0
 8026c2c:	9107      	str	r1, [sp, #28]
 8026c2e:	db43      	blt.n	8026cb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xdc>
 8026c30:	45a2      	cmp	sl, r4
 8026c32:	dd41      	ble.n	8026cb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xdc>
 8026c34:	2e00      	cmp	r6, #0
 8026c36:	db3d      	blt.n	8026cb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd8>
 8026c38:	45b6      	cmp	lr, r6
 8026c3a:	dd3b      	ble.n	8026cb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd8>
 8026c3c:	9a02      	ldr	r2, [sp, #8]
 8026c3e:	5d55      	ldrb	r5, [r2, r5]
 8026c40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8026c44:	441d      	add	r5, r3
 8026c46:	1c72      	adds	r2, r6, #1
 8026c48:	d439      	bmi.n	8026cbe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 8026c4a:	4596      	cmp	lr, r2
 8026c4c:	dd37      	ble.n	8026cbe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 8026c4e:	2f00      	cmp	r7, #0
 8026c50:	d035      	beq.n	8026cbe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 8026c52:	f898 1001 	ldrb.w	r1, [r8, #1]
 8026c56:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026c5a:	4419      	add	r1, r3
 8026c5c:	3401      	adds	r4, #1
 8026c5e:	d432      	bmi.n	8026cc6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 8026c60:	45a2      	cmp	sl, r4
 8026c62:	dd30      	ble.n	8026cc6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 8026c64:	b378      	cbz	r0, 8026cc6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 8026c66:	2e00      	cmp	r6, #0
 8026c68:	db2b      	blt.n	8026cc2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe6>
 8026c6a:	45b6      	cmp	lr, r6
 8026c6c:	dd29      	ble.n	8026cc2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe6>
 8026c6e:	f818 400e 	ldrb.w	r4, [r8, lr]
 8026c72:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8026c76:	441c      	add	r4, r3
 8026c78:	3601      	adds	r6, #1
 8026c7a:	d427      	bmi.n	8026ccc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 8026c7c:	45b6      	cmp	lr, r6
 8026c7e:	dd25      	ble.n	8026ccc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 8026c80:	b327      	cbz	r7, 8026ccc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 8026c82:	44c6      	add	lr, r8
 8026c84:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8026c88:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8026c8c:	4413      	add	r3, r2
 8026c8e:	782a      	ldrb	r2, [r5, #0]
 8026c90:	9202      	str	r2, [sp, #8]
 8026c92:	780a      	ldrb	r2, [r1, #0]
 8026c94:	9203      	str	r2, [sp, #12]
 8026c96:	7822      	ldrb	r2, [r4, #0]
 8026c98:	9204      	str	r2, [sp, #16]
 8026c9a:	2f0f      	cmp	r7, #15
 8026c9c:	781a      	ldrb	r2, [r3, #0]
 8026c9e:	9205      	str	r2, [sp, #20]
 8026ca0:	d801      	bhi.n	8026ca6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xca>
 8026ca2:	280f      	cmp	r0, #15
 8026ca4:	d914      	bls.n	8026cd0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf4>
 8026ca6:	4b3f      	ldr	r3, [pc, #252]	; (8026da4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c8>)
 8026ca8:	4a3f      	ldr	r2, [pc, #252]	; (8026da8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1cc>)
 8026caa:	4840      	ldr	r0, [pc, #256]	; (8026dac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>)
 8026cac:	f240 210d 	movw	r1, #525	; 0x20d
 8026cb0:	f007 fb12 	bl	802e2d8 <__assert_func>
 8026cb4:	ad07      	add	r5, sp, #28
 8026cb6:	e7c6      	b.n	8026c46 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6a>
 8026cb8:	a907      	add	r1, sp, #28
 8026cba:	460d      	mov	r5, r1
 8026cbc:	e7ce      	b.n	8026c5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 8026cbe:	a907      	add	r1, sp, #28
 8026cc0:	e7cc      	b.n	8026c5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 8026cc2:	ac07      	add	r4, sp, #28
 8026cc4:	e7d8      	b.n	8026c78 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x9c>
 8026cc6:	ab07      	add	r3, sp, #28
 8026cc8:	461c      	mov	r4, r3
 8026cca:	e7e0      	b.n	8026c8e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb2>
 8026ccc:	ab07      	add	r3, sp, #28
 8026cce:	e7de      	b.n	8026c8e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb2>
 8026cd0:	b2ba      	uxth	r2, r7
 8026cd2:	b280      	uxth	r0, r0
 8026cd4:	fb02 fa00 	mul.w	sl, r2, r0
 8026cd8:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8026cdc:	0112      	lsls	r2, r2, #4
 8026cde:	b280      	uxth	r0, r0
 8026ce0:	f891 8002 	ldrb.w	r8, [r1, #2]
 8026ce4:	7849      	ldrb	r1, [r1, #1]
 8026ce6:	78ae      	ldrb	r6, [r5, #2]
 8026ce8:	786d      	ldrb	r5, [r5, #1]
 8026cea:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 8026cee:	eba2 020a 	sub.w	r2, r2, sl
 8026cf2:	b292      	uxth	r2, r2
 8026cf4:	ebae 0e00 	sub.w	lr, lr, r0
 8026cf8:	fa1f fe8e 	uxth.w	lr, lr
 8026cfc:	4351      	muls	r1, r2
 8026cfe:	fb02 f808 	mul.w	r8, r2, r8
 8026d02:	fb0e 8806 	mla	r8, lr, r6, r8
 8026d06:	fb0e 1505 	mla	r5, lr, r5, r1
 8026d0a:	78a6      	ldrb	r6, [r4, #2]
 8026d0c:	7861      	ldrb	r1, [r4, #1]
 8026d0e:	fa1f f78c 	uxth.w	r7, ip
 8026d12:	fb00 8806 	mla	r8, r0, r6, r8
 8026d16:	fb00 5501 	mla	r5, r0, r1, r5
 8026d1a:	789e      	ldrb	r6, [r3, #2]
 8026d1c:	7859      	ldrb	r1, [r3, #1]
 8026d1e:	9b00      	ldr	r3, [sp, #0]
 8026d20:	ea6f 0c0c 	mvn.w	ip, ip
 8026d24:	fa5f fc8c 	uxtb.w	ip, ip
 8026d28:	fb0a 5101 	mla	r1, sl, r1, r5
 8026d2c:	fb13 f50c 	smulbb	r5, r3, ip
 8026d30:	9b03      	ldr	r3, [sp, #12]
 8026d32:	435a      	muls	r2, r3
 8026d34:	9b02      	ldr	r3, [sp, #8]
 8026d36:	fb0e 2203 	mla	r2, lr, r3, r2
 8026d3a:	9b04      	ldr	r3, [sp, #16]
 8026d3c:	fb00 2003 	mla	r0, r0, r3, r2
 8026d40:	9b05      	ldr	r3, [sp, #20]
 8026d42:	fb0a 8606 	mla	r6, sl, r6, r8
 8026d46:	fb0a 0a03 	mla	sl, sl, r3, r0
 8026d4a:	9b01      	ldr	r3, [sp, #4]
 8026d4c:	fb19 f90c 	smulbb	r9, r9, ip
 8026d50:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8026d54:	fb13 fc0c 	smulbb	ip, r3, ip
 8026d58:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8026d5c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8026d60:	fb06 9607 	mla	r6, r6, r7, r9
 8026d64:	fb01 5107 	mla	r1, r1, r7, r5
 8026d68:	fb0a c707 	mla	r7, sl, r7, ip
 8026d6c:	b2b6      	uxth	r6, r6
 8026d6e:	b289      	uxth	r1, r1
 8026d70:	b2bf      	uxth	r7, r7
 8026d72:	f106 0901 	add.w	r9, r6, #1
 8026d76:	f107 0c01 	add.w	ip, r7, #1
 8026d7a:	1c4d      	adds	r5, r1, #1
 8026d7c:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 8026d80:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8026d84:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 8026d88:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8026d8c:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8026d90:	0949      	lsrs	r1, r1, #5
 8026d92:	433e      	orrs	r6, r7
 8026d94:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026d98:	430e      	orrs	r6, r1
 8026d9a:	f8ab 6000 	strh.w	r6, [fp]
 8026d9e:	b009      	add	sp, #36	; 0x24
 8026da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026da4:	080343dc 	.word	0x080343dc
 8026da8:	08034935 	.word	0x08034935
 8026dac:	08034464 	.word	0x08034464

08026db0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8026db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026db4:	ed2d 8b08 	vpush	{d8-d11}
 8026db8:	b097      	sub	sp, #92	; 0x5c
 8026dba:	eeb0 aa40 	vmov.f32	s20, s0
 8026dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8026dc0:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8026dc4:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8026dc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8026dc8:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8026dcc:	9310      	str	r3, [sp, #64]	; 0x40
 8026dce:	910f      	str	r1, [sp, #60]	; 0x3c
 8026dd0:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8026dd4:	9015      	str	r0, [sp, #84]	; 0x54
 8026dd6:	6860      	ldr	r0, [r4, #4]
 8026dd8:	9213      	str	r2, [sp, #76]	; 0x4c
 8026dda:	fb00 1303 	mla	r3, r0, r3, r1
 8026dde:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8026de0:	6821      	ldr	r1, [r4, #0]
 8026de2:	6854      	ldr	r4, [r2, #4]
 8026de4:	f9bd 50c0 	ldrsh.w	r5, [sp, #192]	; 0xc0
 8026de8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8026dec:	930a      	str	r3, [sp, #40]	; 0x28
 8026dee:	6813      	ldr	r3, [r2, #0]
 8026df0:	930e      	str	r3, [sp, #56]	; 0x38
 8026df2:	1d23      	adds	r3, r4, #4
 8026df4:	9308      	str	r3, [sp, #32]
 8026df6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8026df8:	43db      	mvns	r3, r3
 8026dfa:	b2db      	uxtb	r3, r3
 8026dfc:	eef0 9a60 	vmov.f32	s19, s1
 8026e00:	eeb0 9a41 	vmov.f32	s18, s2
 8026e04:	eeb0 8a62 	vmov.f32	s16, s5
 8026e08:	eef0 8a43 	vmov.f32	s17, s6
 8026e0c:	eef0 ba44 	vmov.f32	s23, s8
 8026e10:	eeb0 ba64 	vmov.f32	s22, s9
 8026e14:	eef0 aa45 	vmov.f32	s21, s10
 8026e18:	930c      	str	r3, [sp, #48]	; 0x30
 8026e1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8026e1c:	2b00      	cmp	r3, #0
 8026e1e:	dc03      	bgt.n	8026e28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8026e20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8026e22:	2b00      	cmp	r3, #0
 8026e24:	f340 825c 	ble.w	80272e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x530>
 8026e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026e2a:	2b00      	cmp	r3, #0
 8026e2c:	f340 8127 	ble.w	802707e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ce>
 8026e30:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8026e32:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026e34:	1412      	asrs	r2, r2, #16
 8026e36:	ea4f 4323 	mov.w	r3, r3, asr #16
 8026e3a:	d430      	bmi.n	8026e9e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 8026e3c:	1c51      	adds	r1, r2, #1
 8026e3e:	428d      	cmp	r5, r1
 8026e40:	dd30      	ble.n	8026ea4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8026e42:	2b00      	cmp	r3, #0
 8026e44:	db2e      	blt.n	8026ea4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8026e46:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8026e48:	1c59      	adds	r1, r3, #1
 8026e4a:	4288      	cmp	r0, r1
 8026e4c:	dd2a      	ble.n	8026ea4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8026e4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026e50:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8026e52:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8026e54:	3b01      	subs	r3, #1
 8026e56:	fb02 1203 	mla	r2, r2, r3, r1
 8026e5a:	1412      	asrs	r2, r2, #16
 8026e5c:	d42c      	bmi.n	8026eb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8026e5e:	3201      	adds	r2, #1
 8026e60:	4295      	cmp	r5, r2
 8026e62:	dd29      	ble.n	8026eb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8026e64:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8026e66:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8026e68:	fb02 1303 	mla	r3, r2, r3, r1
 8026e6c:	141b      	asrs	r3, r3, #16
 8026e6e:	d423      	bmi.n	8026eb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8026e70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8026e72:	3301      	adds	r3, #1
 8026e74:	429a      	cmp	r2, r3
 8026e76:	dd1f      	ble.n	8026eb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8026e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026e7a:	9311      	str	r3, [sp, #68]	; 0x44
 8026e7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026e7e:	930d      	str	r3, [sp, #52]	; 0x34
 8026e80:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8026e84:	9312      	str	r3, [sp, #72]	; 0x48
 8026e86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8026e88:	2b00      	cmp	r3, #0
 8026e8a:	f300 8161 	bgt.w	8027150 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8026e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026e90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026e92:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8026e96:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026e9a:	930a      	str	r3, [sp, #40]	; 0x28
 8026e9c:	e0f1      	b.n	8027082 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d2>
 8026e9e:	1c51      	adds	r1, r2, #1
 8026ea0:	f040 80de 	bne.w	8027060 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8026ea4:	42aa      	cmp	r2, r5
 8026ea6:	f280 80db 	bge.w	8027060 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8026eaa:	1c5f      	adds	r7, r3, #1
 8026eac:	f2c0 80d8 	blt.w	8027060 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8026eb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8026eb2:	4293      	cmp	r3, r2
 8026eb4:	f280 80d4 	bge.w	8027060 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8026eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026eba:	9311      	str	r3, [sp, #68]	; 0x44
 8026ebc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026ebe:	930d      	str	r3, [sp, #52]	; 0x34
 8026ec0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8026ec2:	2b00      	cmp	r3, #0
 8026ec4:	dde3      	ble.n	8026e8e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8026ec6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026ec8:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8026eca:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8026ecc:	141a      	asrs	r2, r3, #16
 8026ece:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026ed0:	1400      	asrs	r0, r0, #16
 8026ed2:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8026ed6:	f3c1 3103 	ubfx	r1, r1, #12, #4
 8026eda:	f100 8120 	bmi.w	802711e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36e>
 8026ede:	1c46      	adds	r6, r0, #1
 8026ee0:	42b5      	cmp	r5, r6
 8026ee2:	f340 811e 	ble.w	8027122 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x372>
 8026ee6:	2a00      	cmp	r2, #0
 8026ee8:	f2c0 811b 	blt.w	8027122 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x372>
 8026eec:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8026eee:	1c56      	adds	r6, r2, #1
 8026ef0:	42b7      	cmp	r7, r6
 8026ef2:	f340 8116 	ble.w	8027122 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x372>
 8026ef6:	fb02 0005 	mla	r0, r2, r5, r0
 8026efa:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8026efc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026efe:	9c08      	ldr	r4, [sp, #32]
 8026f00:	4402      	add	r2, r0
 8026f02:	5c30      	ldrb	r0, [r6, r0]
 8026f04:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026f08:	9014      	str	r0, [sp, #80]	; 0x50
 8026f0a:	1826      	adds	r6, r4, r0
 8026f0c:	2b00      	cmp	r3, #0
 8026f0e:	f000 80f7 	beq.w	8027100 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 8026f12:	f892 e001 	ldrb.w	lr, [r2, #1]
 8026f16:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8026f1a:	44a6      	add	lr, r4
 8026f1c:	2900      	cmp	r1, #0
 8026f1e:	f000 80f8 	beq.w	8027112 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x362>
 8026f22:	1950      	adds	r0, r2, r5
 8026f24:	5d52      	ldrb	r2, [r2, r5]
 8026f26:	7840      	ldrb	r0, [r0, #1]
 8026f28:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8026f2c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026f30:	4422      	add	r2, r4
 8026f32:	4420      	add	r0, r4
 8026f34:	b29b      	uxth	r3, r3
 8026f36:	b289      	uxth	r1, r1
 8026f38:	fb03 fa01 	mul.w	sl, r3, r1
 8026f3c:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 8026f40:	011b      	lsls	r3, r3, #4
 8026f42:	b289      	uxth	r1, r1
 8026f44:	f89e c002 	ldrb.w	ip, [lr, #2]
 8026f48:	f896 b002 	ldrb.w	fp, [r6, #2]
 8026f4c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8026f4e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026f50:	f8b7 8000 	ldrh.w	r8, [r7]
 8026f54:	f8bd 7040 	ldrh.w	r7, [sp, #64]	; 0x40
 8026f58:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 8026f5c:	eba3 030a 	sub.w	r3, r3, sl
 8026f60:	b29b      	uxth	r3, r3
 8026f62:	eba9 0901 	sub.w	r9, r9, r1
 8026f66:	fa1f f989 	uxth.w	r9, r9
 8026f6a:	fb03 fc0c 	mul.w	ip, r3, ip
 8026f6e:	fb09 cc0b 	mla	ip, r9, fp, ip
 8026f72:	f892 b002 	ldrb.w	fp, [r2, #2]
 8026f76:	fb01 cc0b 	mla	ip, r1, fp, ip
 8026f7a:	f890 b002 	ldrb.w	fp, [r0, #2]
 8026f7e:	fb0a cc0b 	mla	ip, sl, fp, ip
 8026f82:	ea4f 2b28 	mov.w	fp, r8, asr #8
 8026f86:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8026f8a:	fb1b fb04 	smulbb	fp, fp, r4
 8026f8e:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8026f92:	fb0c bc07 	mla	ip, ip, r7, fp
 8026f96:	f896 b001 	ldrb.w	fp, [r6, #1]
 8026f9a:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8026f9e:	f89e e000 	ldrb.w	lr, [lr]
 8026fa2:	435e      	muls	r6, r3
 8026fa4:	fb09 660b 	mla	r6, r9, fp, r6
 8026fa8:	f892 b001 	ldrb.w	fp, [r2, #1]
 8026fac:	fb01 660b 	mla	r6, r1, fp, r6
 8026fb0:	f890 b001 	ldrb.w	fp, [r0, #1]
 8026fb4:	fb0a 660b 	mla	r6, sl, fp, r6
 8026fb8:	ea4f 0be8 	mov.w	fp, r8, asr #3
 8026fbc:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8026fc0:	fb1b fb04 	smulbb	fp, fp, r4
 8026fc4:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8026fc8:	fb06 b607 	mla	r6, r6, r7, fp
 8026fcc:	b2b4      	uxth	r4, r6
 8026fce:	9412      	str	r4, [sp, #72]	; 0x48
 8026fd0:	9e08      	ldr	r6, [sp, #32]
 8026fd2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026fd4:	f816 b004 	ldrb.w	fp, [r6, r4]
 8026fd8:	fb03 f30e 	mul.w	r3, r3, lr
 8026fdc:	f892 e000 	ldrb.w	lr, [r2]
 8026fe0:	fb09 330b 	mla	r3, r9, fp, r3
 8026fe4:	fb01 330e 	mla	r3, r1, lr, r3
 8026fe8:	f890 e000 	ldrb.w	lr, [r0]
 8026fec:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8026ff0:	fb0a 3e0e 	mla	lr, sl, lr, r3
 8026ff4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026ff6:	fa5f f888 	uxtb.w	r8, r8
 8026ffa:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8026ffe:	fb18 f803 	smulbb	r8, r8, r3
 8027002:	fb0e 8807 	mla	r8, lr, r7, r8
 8027006:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8027008:	fa1f fc8c 	uxth.w	ip, ip
 802700c:	fa1f f888 	uxth.w	r8, r8
 8027010:	f103 0b01 	add.w	fp, r3, #1
 8027014:	f10c 0201 	add.w	r2, ip, #1
 8027018:	f108 0e01 	add.w	lr, r8, #1
 802701c:	eb0b 2613 	add.w	r6, fp, r3, lsr #8
 8027020:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8027024:	eb0e 2818 	add.w	r8, lr, r8, lsr #8
 8027028:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 802702c:	f3c8 28c4 	ubfx	r8, r8, #11, #5
 8027030:	0976      	lsrs	r6, r6, #5
 8027032:	ea4c 0c08 	orr.w	ip, ip, r8
 8027036:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 802703a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802703c:	ea4c 0606 	orr.w	r6, ip, r6
 8027040:	801e      	strh	r6, [r3, #0]
 8027042:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027044:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8027046:	3302      	adds	r3, #2
 8027048:	930d      	str	r3, [sp, #52]	; 0x34
 802704a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802704c:	4413      	add	r3, r2
 802704e:	9329      	str	r3, [sp, #164]	; 0xa4
 8027050:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8027052:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027054:	4413      	add	r3, r2
 8027056:	932a      	str	r3, [sp, #168]	; 0xa8
 8027058:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802705a:	3b01      	subs	r3, #1
 802705c:	9311      	str	r3, [sp, #68]	; 0x44
 802705e:	e72f      	b.n	8026ec0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8027060:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027062:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8027064:	4413      	add	r3, r2
 8027066:	9329      	str	r3, [sp, #164]	; 0xa4
 8027068:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802706a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802706c:	4413      	add	r3, r2
 802706e:	932a      	str	r3, [sp, #168]	; 0xa8
 8027070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027072:	3b01      	subs	r3, #1
 8027074:	9309      	str	r3, [sp, #36]	; 0x24
 8027076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027078:	3302      	adds	r3, #2
 802707a:	930a      	str	r3, [sp, #40]	; 0x28
 802707c:	e6d4      	b.n	8026e28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 802707e:	f47f aee6 	bne.w	8026e4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 8027082:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8027084:	2b00      	cmp	r3, #0
 8027086:	f340 812b 	ble.w	80272e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x530>
 802708a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802708e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027092:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8027096:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027098:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802709c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80270a0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80270a4:	eef0 6a48 	vmov.f32	s13, s16
 80270a8:	ee69 7a27 	vmul.f32	s15, s18, s15
 80270ac:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80270b0:	ee37 8a48 	vsub.f32	s16, s14, s16
 80270b4:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 80270b8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80270bc:	eef0 6a68 	vmov.f32	s13, s17
 80270c0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80270c4:	ee18 2a10 	vmov	r2, s16
 80270c8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80270cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80270d0:	ee18 2a90 	vmov	r2, s17
 80270d4:	932b      	str	r3, [sp, #172]	; 0xac
 80270d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80270d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80270dc:	932c      	str	r3, [sp, #176]	; 0xb0
 80270de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80270e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80270e2:	3b01      	subs	r3, #1
 80270e4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80270e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80270ea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80270ec:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 80270f0:	bf08      	it	eq
 80270f2:	4613      	moveq	r3, r2
 80270f4:	9309      	str	r3, [sp, #36]	; 0x24
 80270f6:	eef0 8a67 	vmov.f32	s17, s15
 80270fa:	eeb0 8a47 	vmov.f32	s16, s14
 80270fe:	e68c      	b.n	8026e1a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8027100:	b151      	cbz	r1, 8027118 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x368>
 8027102:	5d52      	ldrb	r2, [r2, r5]
 8027104:	9808      	ldr	r0, [sp, #32]
 8027106:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802710a:	4402      	add	r2, r0
 802710c:	4630      	mov	r0, r6
 802710e:	46b6      	mov	lr, r6
 8027110:	e710      	b.n	8026f34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 8027112:	4630      	mov	r0, r6
 8027114:	4632      	mov	r2, r6
 8027116:	e70d      	b.n	8026f34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 8027118:	4630      	mov	r0, r6
 802711a:	4632      	mov	r2, r6
 802711c:	e7f7      	b.n	802710e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x35e>
 802711e:	1c46      	adds	r6, r0, #1
 8027120:	d18f      	bne.n	8027042 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8027122:	4285      	cmp	r5, r0
 8027124:	dd8d      	ble.n	8027042 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8027126:	1c54      	adds	r4, r2, #1
 8027128:	db8b      	blt.n	8027042 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 802712a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802712c:	4294      	cmp	r4, r2
 802712e:	dd88      	ble.n	8027042 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8027130:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8027134:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8027136:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027138:	9002      	str	r0, [sp, #8]
 802713a:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802713e:	e9cd 5300 	strd	r5, r3, [sp]
 8027142:	e9dd 120d 	ldrd	r1, r2, [sp, #52]	; 0x34
 8027146:	9b08      	ldr	r3, [sp, #32]
 8027148:	9815      	ldr	r0, [sp, #84]	; 0x54
 802714a:	f7ff fd47 	bl	8026bdc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 802714e:	e778      	b.n	8027042 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8027150:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8027152:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8027154:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027156:	1410      	asrs	r0, r2, #16
 8027158:	f3c2 3103 	ubfx	r1, r2, #12, #4
 802715c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802715e:	1412      	asrs	r2, r2, #16
 8027160:	fb05 2000 	mla	r0, r5, r0, r2
 8027164:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8027166:	f814 a000 	ldrb.w	sl, [r4, r0]
 802716a:	4402      	add	r2, r0
 802716c:	9808      	ldr	r0, [sp, #32]
 802716e:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8027172:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8027176:	eb00 060a 	add.w	r6, r0, sl
 802717a:	2b00      	cmp	r3, #0
 802717c:	f000 80a1 	beq.w	80272c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x512>
 8027180:	f892 c001 	ldrb.w	ip, [r2, #1]
 8027184:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8027188:	4484      	add	ip, r0
 802718a:	2900      	cmp	r1, #0
 802718c:	f000 80a2 	beq.w	80272d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x524>
 8027190:	1950      	adds	r0, r2, r5
 8027192:	5d52      	ldrb	r2, [r2, r5]
 8027194:	7840      	ldrb	r0, [r0, #1]
 8027196:	9c08      	ldr	r4, [sp, #32]
 8027198:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802719c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80271a0:	4422      	add	r2, r4
 80271a2:	4420      	add	r0, r4
 80271a4:	b29b      	uxth	r3, r3
 80271a6:	b289      	uxth	r1, r1
 80271a8:	fb03 f901 	mul.w	r9, r3, r1
 80271ac:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80271b0:	011b      	lsls	r3, r3, #4
 80271b2:	b289      	uxth	r1, r1
 80271b4:	f89c 7002 	ldrb.w	r7, [ip, #2]
 80271b8:	f896 b002 	ldrb.w	fp, [r6, #2]
 80271bc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80271be:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 80271c2:	eba3 0309 	sub.w	r3, r3, r9
 80271c6:	b29b      	uxth	r3, r3
 80271c8:	eba8 0801 	sub.w	r8, r8, r1
 80271cc:	fa1f f888 	uxth.w	r8, r8
 80271d0:	435f      	muls	r7, r3
 80271d2:	fb08 770b 	mla	r7, r8, fp, r7
 80271d6:	f892 b002 	ldrb.w	fp, [r2, #2]
 80271da:	f8b4 e000 	ldrh.w	lr, [r4]
 80271de:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80271e0:	fb01 770b 	mla	r7, r1, fp, r7
 80271e4:	f890 b002 	ldrb.w	fp, [r0, #2]
 80271e8:	fb09 770b 	mla	r7, r9, fp, r7
 80271ec:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 80271f0:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 80271f4:	fb1b fb04 	smulbb	fp, fp, r4
 80271f8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80271fa:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80271fe:	fb07 b704 	mla	r7, r7, r4, fp
 8027202:	f896 b001 	ldrb.w	fp, [r6, #1]
 8027206:	f89c 6001 	ldrb.w	r6, [ip, #1]
 802720a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802720c:	f89c c000 	ldrb.w	ip, [ip]
 8027210:	435e      	muls	r6, r3
 8027212:	fb08 660b 	mla	r6, r8, fp, r6
 8027216:	f892 b001 	ldrb.w	fp, [r2, #1]
 802721a:	fb01 660b 	mla	r6, r1, fp, r6
 802721e:	f890 b001 	ldrb.w	fp, [r0, #1]
 8027222:	fb09 660b 	mla	r6, r9, fp, r6
 8027226:	ea4f 0bee 	mov.w	fp, lr, asr #3
 802722a:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 802722e:	fb1b fb04 	smulbb	fp, fp, r4
 8027232:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8027234:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8027238:	fb06 b604 	mla	r6, r6, r4, fp
 802723c:	9c08      	ldr	r4, [sp, #32]
 802723e:	f814 a00a 	ldrb.w	sl, [r4, sl]
 8027242:	fb03 f30c 	mul.w	r3, r3, ip
 8027246:	f892 c000 	ldrb.w	ip, [r2]
 802724a:	fb08 330a 	mla	r3, r8, sl, r3
 802724e:	fb01 330c 	mla	r3, r1, ip, r3
 8027252:	f890 c000 	ldrb.w	ip, [r0]
 8027256:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802725a:	fb09 3c0c 	mla	ip, r9, ip, r3
 802725e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027260:	fa5f fe8e 	uxtb.w	lr, lr
 8027264:	fb1e fe03 	smulbb	lr, lr, r3
 8027268:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802726a:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 802726e:	fb0c ec03 	mla	ip, ip, r3, lr
 8027272:	b2bf      	uxth	r7, r7
 8027274:	b2b6      	uxth	r6, r6
 8027276:	fa1f fc8c 	uxth.w	ip, ip
 802727a:	1c7b      	adds	r3, r7, #1
 802727c:	f10c 0201 	add.w	r2, ip, #1
 8027280:	f106 0b01 	add.w	fp, r6, #1
 8027284:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8027288:	eb02 221c 	add.w	r2, r2, ip, lsr #8
 802728c:	eb0b 2616 	add.w	r6, fp, r6, lsr #8
 8027290:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8027294:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8027298:	0976      	lsrs	r6, r6, #5
 802729a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802729c:	4317      	orrs	r7, r2
 802729e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80272a2:	4337      	orrs	r7, r6
 80272a4:	f823 7b02 	strh.w	r7, [r3], #2
 80272a8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80272aa:	930d      	str	r3, [sp, #52]	; 0x34
 80272ac:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80272ae:	4413      	add	r3, r2
 80272b0:	9329      	str	r3, [sp, #164]	; 0xa4
 80272b2:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80272b4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80272b6:	4413      	add	r3, r2
 80272b8:	932a      	str	r3, [sp, #168]	; 0xa8
 80272ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80272bc:	3b01      	subs	r3, #1
 80272be:	9311      	str	r3, [sp, #68]	; 0x44
 80272c0:	e5e1      	b.n	8026e86 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd6>
 80272c2:	b151      	cbz	r1, 80272da <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52a>
 80272c4:	5d52      	ldrb	r2, [r2, r5]
 80272c6:	9808      	ldr	r0, [sp, #32]
 80272c8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80272cc:	4402      	add	r2, r0
 80272ce:	4630      	mov	r0, r6
 80272d0:	46b4      	mov	ip, r6
 80272d2:	e767      	b.n	80271a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f4>
 80272d4:	4630      	mov	r0, r6
 80272d6:	4632      	mov	r2, r6
 80272d8:	e764      	b.n	80271a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f4>
 80272da:	4630      	mov	r0, r6
 80272dc:	4632      	mov	r2, r6
 80272de:	e7f7      	b.n	80272d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x520>
 80272e0:	b017      	add	sp, #92	; 0x5c
 80272e2:	ecbd 8b08 	vpop	{d8-d11}
 80272e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080272ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 80272ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80272f0:	880e      	ldrh	r6, [r1, #0]
 80272f2:	b085      	sub	sp, #20
 80272f4:	0230      	lsls	r0, r6, #8
 80272f6:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 80272fa:	f400 0b78 	and.w	fp, r0, #16252928	; 0xf80000
 80272fe:	0170      	lsls	r0, r6, #5
 8027300:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8027304:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8027308:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 802730c:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 8027310:	00f6      	lsls	r6, r6, #3
 8027312:	ea4b 0000 	orr.w	r0, fp, r0
 8027316:	b2f6      	uxtb	r6, r6
 8027318:	4691      	mov	r9, r2
 802731a:	fb05 7a0c 	mla	sl, r5, ip, r7
 802731e:	4306      	orrs	r6, r0
 8027320:	2d00      	cmp	r5, #0
 8027322:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8027326:	9603      	str	r6, [sp, #12]
 8027328:	eb09 0e0a 	add.w	lr, r9, sl
 802732c:	db42      	blt.n	80273b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc8>
 802732e:	45a8      	cmp	r8, r5
 8027330:	dd40      	ble.n	80273b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc8>
 8027332:	2f00      	cmp	r7, #0
 8027334:	db3c      	blt.n	80273b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc4>
 8027336:	45bc      	cmp	ip, r7
 8027338:	dd3a      	ble.n	80273b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc4>
 802733a:	f819 600a 	ldrb.w	r6, [r9, sl]
 802733e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8027342:	441e      	add	r6, r3
 8027344:	1c78      	adds	r0, r7, #1
 8027346:	d438      	bmi.n	80273ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 8027348:	4584      	cmp	ip, r0
 802734a:	dd36      	ble.n	80273ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 802734c:	b3aa      	cbz	r2, 80273ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 802734e:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8027352:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8027356:	4418      	add	r0, r3
 8027358:	3501      	adds	r5, #1
 802735a:	d432      	bmi.n	80273c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 802735c:	45a8      	cmp	r8, r5
 802735e:	dd30      	ble.n	80273c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 8027360:	b37c      	cbz	r4, 80273c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 8027362:	2f00      	cmp	r7, #0
 8027364:	db2b      	blt.n	80273be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd2>
 8027366:	45bc      	cmp	ip, r7
 8027368:	dd29      	ble.n	80273be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd2>
 802736a:	f81e 500c 	ldrb.w	r5, [lr, ip]
 802736e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8027372:	441d      	add	r5, r3
 8027374:	3701      	adds	r7, #1
 8027376:	d427      	bmi.n	80273c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 8027378:	45bc      	cmp	ip, r7
 802737a:	dd25      	ble.n	80273c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 802737c:	b322      	cbz	r2, 80273c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 802737e:	44f4      	add	ip, lr
 8027380:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8027384:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8027388:	443b      	add	r3, r7
 802738a:	781f      	ldrb	r7, [r3, #0]
 802738c:	f896 a000 	ldrb.w	sl, [r6]
 8027390:	f890 b000 	ldrb.w	fp, [r0]
 8027394:	f895 9000 	ldrb.w	r9, [r5]
 8027398:	9700      	str	r7, [sp, #0]
 802739a:	2a0f      	cmp	r2, #15
 802739c:	d801      	bhi.n	80273a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xb6>
 802739e:	2c0f      	cmp	r4, #15
 80273a0:	d914      	bls.n	80273cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xe0>
 80273a2:	4b2c      	ldr	r3, [pc, #176]	; (8027454 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x168>)
 80273a4:	4a2c      	ldr	r2, [pc, #176]	; (8027458 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16c>)
 80273a6:	482d      	ldr	r0, [pc, #180]	; (802745c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x170>)
 80273a8:	f240 210d 	movw	r1, #525	; 0x20d
 80273ac:	f006 ff94 	bl	802e2d8 <__assert_func>
 80273b0:	ae03      	add	r6, sp, #12
 80273b2:	e7c7      	b.n	8027344 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x58>
 80273b4:	a803      	add	r0, sp, #12
 80273b6:	4606      	mov	r6, r0
 80273b8:	e7ce      	b.n	8027358 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6c>
 80273ba:	a803      	add	r0, sp, #12
 80273bc:	e7cc      	b.n	8027358 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6c>
 80273be:	ad03      	add	r5, sp, #12
 80273c0:	e7d8      	b.n	8027374 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x88>
 80273c2:	ab03      	add	r3, sp, #12
 80273c4:	461d      	mov	r5, r3
 80273c6:	e7e0      	b.n	802738a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x9e>
 80273c8:	ab03      	add	r3, sp, #12
 80273ca:	e7de      	b.n	802738a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x9e>
 80273cc:	b292      	uxth	r2, r2
 80273ce:	b2a4      	uxth	r4, r4
 80273d0:	fb02 f804 	mul.w	r8, r2, r4
 80273d4:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 80273d8:	0112      	lsls	r2, r2, #4
 80273da:	b2a4      	uxth	r4, r4
 80273dc:	f890 e002 	ldrb.w	lr, [r0, #2]
 80273e0:	78b7      	ldrb	r7, [r6, #2]
 80273e2:	7840      	ldrb	r0, [r0, #1]
 80273e4:	7876      	ldrb	r6, [r6, #1]
 80273e6:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 80273ea:	eba2 0208 	sub.w	r2, r2, r8
 80273ee:	b292      	uxth	r2, r2
 80273f0:	ebac 0c04 	sub.w	ip, ip, r4
 80273f4:	fa1f fc8c 	uxth.w	ip, ip
 80273f8:	fb02 fe0e 	mul.w	lr, r2, lr
 80273fc:	fb0c ee07 	mla	lr, ip, r7, lr
 8027400:	78af      	ldrb	r7, [r5, #2]
 8027402:	fb04 ee07 	mla	lr, r4, r7, lr
 8027406:	789f      	ldrb	r7, [r3, #2]
 8027408:	785b      	ldrb	r3, [r3, #1]
 802740a:	fb08 e707 	mla	r7, r8, r7, lr
 802740e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8027412:	fb02 fe0b 	mul.w	lr, r2, fp
 8027416:	4342      	muls	r2, r0
 8027418:	7868      	ldrb	r0, [r5, #1]
 802741a:	9701      	str	r7, [sp, #4]
 802741c:	fb0c ee0a 	mla	lr, ip, sl, lr
 8027420:	9f00      	ldr	r7, [sp, #0]
 8027422:	fb0c 2206 	mla	r2, ip, r6, r2
 8027426:	fb04 ee09 	mla	lr, r4, r9, lr
 802742a:	fb04 2400 	mla	r4, r4, r0, r2
 802742e:	fb08 ee07 	mla	lr, r8, r7, lr
 8027432:	9f01      	ldr	r7, [sp, #4]
 8027434:	fb08 4803 	mla	r8, r8, r3, r4
 8027438:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 802743c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8027440:	ea47 070e 	orr.w	r7, r7, lr
 8027444:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8027448:	ea47 0708 	orr.w	r7, r7, r8
 802744c:	800f      	strh	r7, [r1, #0]
 802744e:	b005      	add	sp, #20
 8027450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027454:	080343dc 	.word	0x080343dc
 8027458:	08034935 	.word	0x08034935
 802745c:	08034464 	.word	0x08034464

08027460 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8027460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027464:	ed2d 8b0a 	vpush	{d8-d12}
 8027468:	b091      	sub	sp, #68	; 0x44
 802746a:	eeb0 aa40 	vmov.f32	s20, s0
 802746e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8027470:	9307      	str	r3, [sp, #28]
 8027472:	f9bd 30b4 	ldrsh.w	r3, [sp, #180]	; 0xb4
 8027476:	910c      	str	r1, [sp, #48]	; 0x30
 8027478:	9309      	str	r3, [sp, #36]	; 0x24
 802747a:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 802747e:	900f      	str	r0, [sp, #60]	; 0x3c
 8027480:	6860      	ldr	r0, [r4, #4]
 8027482:	920e      	str	r2, [sp, #56]	; 0x38
 8027484:	fb00 1303 	mla	r3, r0, r3, r1
 8027488:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 802748a:	6821      	ldr	r1, [r4, #0]
 802748c:	6854      	ldr	r4, [r2, #4]
 802748e:	f8dd b098 	ldr.w	fp, [sp, #152]	; 0x98
 8027492:	f9bd 50b0 	ldrsh.w	r5, [sp, #176]	; 0xb0
 8027496:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 802749a:	9308      	str	r3, [sp, #32]
 802749c:	6813      	ldr	r3, [r2, #0]
 802749e:	930a      	str	r3, [sp, #40]	; 0x28
 80274a0:	eef0 9a60 	vmov.f32	s19, s1
 80274a4:	eeb0 9a41 	vmov.f32	s18, s2
 80274a8:	eeb0 8a62 	vmov.f32	s16, s5
 80274ac:	eef0 8a43 	vmov.f32	s17, s6
 80274b0:	eeb0 ca44 	vmov.f32	s24, s8
 80274b4:	eef0 ba64 	vmov.f32	s23, s9
 80274b8:	eeb0 ba45 	vmov.f32	s22, s10
 80274bc:	3404      	adds	r4, #4
 80274be:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 80274c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80274c4:	2b00      	cmp	r3, #0
 80274c6:	dc03      	bgt.n	80274d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80274c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80274ca:	2b00      	cmp	r3, #0
 80274cc:	f340 81cb 	ble.w	8027866 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 80274d0:	9b07      	ldr	r3, [sp, #28]
 80274d2:	2b00      	cmp	r3, #0
 80274d4:	f340 80dd 	ble.w	8027692 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x232>
 80274d8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80274da:	1412      	asrs	r2, r2, #16
 80274dc:	ea4f 432b 	mov.w	r3, fp, asr #16
 80274e0:	d42c      	bmi.n	802753c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 80274e2:	1c51      	adds	r1, r2, #1
 80274e4:	428d      	cmp	r5, r1
 80274e6:	dd2c      	ble.n	8027542 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 80274e8:	2b00      	cmp	r3, #0
 80274ea:	db2a      	blt.n	8027542 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 80274ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80274ee:	1c59      	adds	r1, r3, #1
 80274f0:	4288      	cmp	r0, r1
 80274f2:	dd26      	ble.n	8027542 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 80274f4:	9b07      	ldr	r3, [sp, #28]
 80274f6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80274f8:	9925      	ldr	r1, [sp, #148]	; 0x94
 80274fa:	3b01      	subs	r3, #1
 80274fc:	fb02 1203 	mla	r2, r2, r3, r1
 8027500:	1412      	asrs	r2, r2, #16
 8027502:	d428      	bmi.n	8027556 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf6>
 8027504:	3201      	adds	r2, #1
 8027506:	4295      	cmp	r5, r2
 8027508:	dd25      	ble.n	8027556 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf6>
 802750a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 802750c:	fb02 b303 	mla	r3, r2, r3, fp
 8027510:	141b      	asrs	r3, r3, #16
 8027512:	d420      	bmi.n	8027556 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf6>
 8027514:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027516:	3301      	adds	r3, #1
 8027518:	429a      	cmp	r2, r3
 802751a:	dd1c      	ble.n	8027556 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf6>
 802751c:	9b07      	ldr	r3, [sp, #28]
 802751e:	930b      	str	r3, [sp, #44]	; 0x2c
 8027520:	9b08      	ldr	r3, [sp, #32]
 8027522:	930d      	str	r3, [sp, #52]	; 0x34
 8027524:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027526:	2b00      	cmp	r3, #0
 8027528:	f300 8116 	bgt.w	8027758 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f8>
 802752c:	9b07      	ldr	r3, [sp, #28]
 802752e:	9a08      	ldr	r2, [sp, #32]
 8027530:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8027534:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8027538:	9308      	str	r3, [sp, #32]
 802753a:	e0ac      	b.n	8027696 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x236>
 802753c:	1c51      	adds	r1, r2, #1
 802753e:	f040 809b 	bne.w	8027678 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x218>
 8027542:	42aa      	cmp	r2, r5
 8027544:	f280 8098 	bge.w	8027678 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x218>
 8027548:	1c5a      	adds	r2, r3, #1
 802754a:	f2c0 8095 	blt.w	8027678 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x218>
 802754e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027550:	4293      	cmp	r3, r2
 8027552:	f280 8091 	bge.w	8027678 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x218>
 8027556:	9b07      	ldr	r3, [sp, #28]
 8027558:	930d      	str	r3, [sp, #52]	; 0x34
 802755a:	9b08      	ldr	r3, [sp, #32]
 802755c:	930b      	str	r3, [sp, #44]	; 0x2c
 802755e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027560:	2b00      	cmp	r3, #0
 8027562:	dde3      	ble.n	802752c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 8027564:	9825      	ldr	r0, [sp, #148]	; 0x94
 8027566:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8027568:	1400      	asrs	r0, r0, #16
 802756a:	ea4f 422b 	mov.w	r2, fp, asr #16
 802756e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8027572:	f3cb 3103 	ubfx	r1, fp, #12, #4
 8027576:	f100 80d9 	bmi.w	802772c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 802757a:	1c46      	adds	r6, r0, #1
 802757c:	42b5      	cmp	r5, r6
 802757e:	f340 80d7 	ble.w	8027730 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 8027582:	2a00      	cmp	r2, #0
 8027584:	f2c0 80d4 	blt.w	8027730 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 8027588:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802758a:	1c56      	adds	r6, r2, #1
 802758c:	42b7      	cmp	r7, r6
 802758e:	f340 80cf 	ble.w	8027730 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 8027592:	fb02 0005 	mla	r0, r2, r5, r0
 8027596:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8027598:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802759a:	4402      	add	r2, r0
 802759c:	5c30      	ldrb	r0, [r6, r0]
 802759e:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 80275a2:	eb04 0c08 	add.w	ip, r4, r8
 80275a6:	2b00      	cmp	r3, #0
 80275a8:	f000 80b2 	beq.w	8027710 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 80275ac:	7856      	ldrb	r6, [r2, #1]
 80275ae:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80275b2:	4426      	add	r6, r4
 80275b4:	2900      	cmp	r1, #0
 80275b6:	f000 80b3 	beq.w	8027720 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c0>
 80275ba:	1950      	adds	r0, r2, r5
 80275bc:	5d52      	ldrb	r2, [r2, r5]
 80275be:	7840      	ldrb	r0, [r0, #1]
 80275c0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80275c4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80275c8:	4422      	add	r2, r4
 80275ca:	4420      	add	r0, r4
 80275cc:	b29b      	uxth	r3, r3
 80275ce:	b289      	uxth	r1, r1
 80275d0:	fb03 f901 	mul.w	r9, r3, r1
 80275d4:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80275d8:	011b      	lsls	r3, r3, #4
 80275da:	b289      	uxth	r1, r1
 80275dc:	78b7      	ldrb	r7, [r6, #2]
 80275de:	f89c a002 	ldrb.w	sl, [ip, #2]
 80275e2:	f89c c001 	ldrb.w	ip, [ip, #1]
 80275e6:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80275ea:	eba3 0309 	sub.w	r3, r3, r9
 80275ee:	b29b      	uxth	r3, r3
 80275f0:	ebae 0e01 	sub.w	lr, lr, r1
 80275f4:	fa1f fe8e 	uxth.w	lr, lr
 80275f8:	435f      	muls	r7, r3
 80275fa:	fb0e 770a 	mla	r7, lr, sl, r7
 80275fe:	f892 a002 	ldrb.w	sl, [r2, #2]
 8027602:	fb01 770a 	mla	r7, r1, sl, r7
 8027606:	f890 a002 	ldrb.w	sl, [r0, #2]
 802760a:	fb09 7a0a 	mla	sl, r9, sl, r7
 802760e:	f814 7008 	ldrb.w	r7, [r4, r8]
 8027612:	f896 8000 	ldrb.w	r8, [r6]
 8027616:	7876      	ldrb	r6, [r6, #1]
 8027618:	fb03 f808 	mul.w	r8, r3, r8
 802761c:	fb0e 8807 	mla	r8, lr, r7, r8
 8027620:	7817      	ldrb	r7, [r2, #0]
 8027622:	fb01 8807 	mla	r8, r1, r7, r8
 8027626:	7807      	ldrb	r7, [r0, #0]
 8027628:	fb09 8707 	mla	r7, r9, r7, r8
 802762c:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8027630:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8027634:	ea4a 0707 	orr.w	r7, sl, r7
 8027638:	4373      	muls	r3, r6
 802763a:	f892 a001 	ldrb.w	sl, [r2, #1]
 802763e:	fb0e 330c 	mla	r3, lr, ip, r3
 8027642:	fb01 310a 	mla	r1, r1, sl, r3
 8027646:	f890 a001 	ldrb.w	sl, [r0, #1]
 802764a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802764c:	fb09 1a0a 	mla	sl, r9, sl, r1
 8027650:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8027654:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8027658:	ea47 070a 	orr.w	r7, r7, sl
 802765c:	801f      	strh	r7, [r3, #0]
 802765e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027660:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8027662:	3302      	adds	r3, #2
 8027664:	930b      	str	r3, [sp, #44]	; 0x2c
 8027666:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8027668:	4413      	add	r3, r2
 802766a:	9325      	str	r3, [sp, #148]	; 0x94
 802766c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802766e:	449b      	add	fp, r3
 8027670:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027672:	3b01      	subs	r3, #1
 8027674:	930d      	str	r3, [sp, #52]	; 0x34
 8027676:	e772      	b.n	802755e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8027678:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802767a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 802767c:	4413      	add	r3, r2
 802767e:	9325      	str	r3, [sp, #148]	; 0x94
 8027680:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027682:	449b      	add	fp, r3
 8027684:	9b07      	ldr	r3, [sp, #28]
 8027686:	3b01      	subs	r3, #1
 8027688:	9307      	str	r3, [sp, #28]
 802768a:	9b08      	ldr	r3, [sp, #32]
 802768c:	3302      	adds	r3, #2
 802768e:	9308      	str	r3, [sp, #32]
 8027690:	e71e      	b.n	80274d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8027692:	f47f af2f 	bne.w	80274f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8027696:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027698:	2b00      	cmp	r3, #0
 802769a:	f340 80e4 	ble.w	8027866 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 802769e:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80276a2:	ee79 9aab 	vadd.f32	s19, s19, s23
 80276a6:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 80276aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80276ac:	ee39 9a0b 	vadd.f32	s18, s18, s22
 80276b0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80276b4:	eef0 6a48 	vmov.f32	s13, s16
 80276b8:	ee69 7a27 	vmul.f32	s15, s18, s15
 80276bc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80276c0:	ee37 8a48 	vsub.f32	s16, s14, s16
 80276c4:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 80276c8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80276cc:	eef0 6a68 	vmov.f32	s13, s17
 80276d0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80276d4:	ee18 2a10 	vmov	r2, s16
 80276d8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80276dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80276e0:	ee18 2a90 	vmov	r2, s17
 80276e4:	9327      	str	r3, [sp, #156]	; 0x9c
 80276e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80276e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80276ec:	9328      	str	r3, [sp, #160]	; 0xa0
 80276ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80276f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80276f2:	3b01      	subs	r3, #1
 80276f4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80276f8:	930c      	str	r3, [sp, #48]	; 0x30
 80276fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80276fc:	bf08      	it	eq
 80276fe:	4613      	moveq	r3, r2
 8027700:	ee16 ba90 	vmov	fp, s13
 8027704:	9307      	str	r3, [sp, #28]
 8027706:	eef0 8a67 	vmov.f32	s17, s15
 802770a:	eeb0 8a47 	vmov.f32	s16, s14
 802770e:	e6d8      	b.n	80274c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 8027710:	b149      	cbz	r1, 8027726 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 8027712:	5d52      	ldrb	r2, [r2, r5]
 8027714:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8027718:	4422      	add	r2, r4
 802771a:	4660      	mov	r0, ip
 802771c:	4666      	mov	r6, ip
 802771e:	e755      	b.n	80275cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x16c>
 8027720:	4660      	mov	r0, ip
 8027722:	4662      	mov	r2, ip
 8027724:	e752      	b.n	80275cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x16c>
 8027726:	4660      	mov	r0, ip
 8027728:	4662      	mov	r2, ip
 802772a:	e7f7      	b.n	802771c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2bc>
 802772c:	1c47      	adds	r7, r0, #1
 802772e:	d196      	bne.n	802765e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 8027730:	4285      	cmp	r5, r0
 8027732:	dd94      	ble.n	802765e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 8027734:	1c56      	adds	r6, r2, #1
 8027736:	db92      	blt.n	802765e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 8027738:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802773a:	4296      	cmp	r6, r2
 802773c:	dd8f      	ble.n	802765e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 802773e:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8027742:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8027746:	e9cd 5600 	strd	r5, r6, [sp]
 802774a:	4623      	mov	r3, r4
 802774c:	e9dd 210a 	ldrd	r2, r1, [sp, #40]	; 0x28
 8027750:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8027752:	f7ff fdcb 	bl	80272ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8027756:	e782      	b.n	802765e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 8027758:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802775a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 802775c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802775e:	1412      	asrs	r2, r2, #16
 8027760:	ea4f 402b 	mov.w	r0, fp, asr #16
 8027764:	fb05 2000 	mla	r0, r5, r0, r2
 8027768:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802776a:	f816 8000 	ldrb.w	r8, [r6, r0]
 802776e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8027772:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8027776:	f3cb 3103 	ubfx	r1, fp, #12, #4
 802777a:	4402      	add	r2, r0
 802777c:	eb04 0c08 	add.w	ip, r4, r8
 8027780:	2b00      	cmp	r3, #0
 8027782:	d062      	beq.n	802784a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ea>
 8027784:	7856      	ldrb	r6, [r2, #1]
 8027786:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802778a:	4426      	add	r6, r4
 802778c:	2900      	cmp	r1, #0
 802778e:	d064      	beq.n	802785a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fa>
 8027790:	1950      	adds	r0, r2, r5
 8027792:	5d52      	ldrb	r2, [r2, r5]
 8027794:	7840      	ldrb	r0, [r0, #1]
 8027796:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802779a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802779e:	4422      	add	r2, r4
 80277a0:	4420      	add	r0, r4
 80277a2:	b29b      	uxth	r3, r3
 80277a4:	b289      	uxth	r1, r1
 80277a6:	fb03 f901 	mul.w	r9, r3, r1
 80277aa:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80277ae:	011b      	lsls	r3, r3, #4
 80277b0:	b289      	uxth	r1, r1
 80277b2:	78b7      	ldrb	r7, [r6, #2]
 80277b4:	f89c a002 	ldrb.w	sl, [ip, #2]
 80277b8:	f89c c001 	ldrb.w	ip, [ip, #1]
 80277bc:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80277c0:	eba3 0309 	sub.w	r3, r3, r9
 80277c4:	b29b      	uxth	r3, r3
 80277c6:	ebae 0e01 	sub.w	lr, lr, r1
 80277ca:	fa1f fe8e 	uxth.w	lr, lr
 80277ce:	435f      	muls	r7, r3
 80277d0:	fb0e 770a 	mla	r7, lr, sl, r7
 80277d4:	f892 a002 	ldrb.w	sl, [r2, #2]
 80277d8:	fb01 770a 	mla	r7, r1, sl, r7
 80277dc:	f890 a002 	ldrb.w	sl, [r0, #2]
 80277e0:	fb09 7a0a 	mla	sl, r9, sl, r7
 80277e4:	f814 7008 	ldrb.w	r7, [r4, r8]
 80277e8:	f896 8000 	ldrb.w	r8, [r6]
 80277ec:	7876      	ldrb	r6, [r6, #1]
 80277ee:	fb03 f808 	mul.w	r8, r3, r8
 80277f2:	fb0e 8807 	mla	r8, lr, r7, r8
 80277f6:	7817      	ldrb	r7, [r2, #0]
 80277f8:	fb01 8807 	mla	r8, r1, r7, r8
 80277fc:	7807      	ldrb	r7, [r0, #0]
 80277fe:	fb09 8707 	mla	r7, r9, r7, r8
 8027802:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8027806:	4373      	muls	r3, r6
 8027808:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802780c:	7856      	ldrb	r6, [r2, #1]
 802780e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8027810:	ea4a 0707 	orr.w	r7, sl, r7
 8027814:	fb0e 330c 	mla	r3, lr, ip, r3
 8027818:	f890 a001 	ldrb.w	sl, [r0, #1]
 802781c:	fb01 3306 	mla	r3, r1, r6, r3
 8027820:	fb09 3a0a 	mla	sl, r9, sl, r3
 8027824:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8027828:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802782a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 802782e:	ea47 070a 	orr.w	r7, r7, sl
 8027832:	f823 7b02 	strh.w	r7, [r3], #2
 8027836:	930d      	str	r3, [sp, #52]	; 0x34
 8027838:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802783a:	4413      	add	r3, r2
 802783c:	9325      	str	r3, [sp, #148]	; 0x94
 802783e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027840:	449b      	add	fp, r3
 8027842:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027844:	3b01      	subs	r3, #1
 8027846:	930b      	str	r3, [sp, #44]	; 0x2c
 8027848:	e66c      	b.n	8027524 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 802784a:	b149      	cbz	r1, 8027860 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x400>
 802784c:	5d52      	ldrb	r2, [r2, r5]
 802784e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8027852:	4422      	add	r2, r4
 8027854:	4660      	mov	r0, ip
 8027856:	4666      	mov	r6, ip
 8027858:	e7a3      	b.n	80277a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 802785a:	4660      	mov	r0, ip
 802785c:	4662      	mov	r2, ip
 802785e:	e7a0      	b.n	80277a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8027860:	4660      	mov	r0, ip
 8027862:	4662      	mov	r2, ip
 8027864:	e7f7      	b.n	8027856 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 8027866:	b011      	add	sp, #68	; 0x44
 8027868:	ecbd 8b0a 	vpop	{d8-d12}
 802786c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027870 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8027870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027874:	8808      	ldrh	r0, [r1, #0]
 8027876:	b085      	sub	sp, #20
 8027878:	1206      	asrs	r6, r0, #8
 802787a:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 802787e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8027882:	9600      	str	r6, [sp, #0]
 8027884:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8027888:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 802788c:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8027890:	10c6      	asrs	r6, r0, #3
 8027892:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8027896:	9601      	str	r6, [sp, #4]
 8027898:	00c0      	lsls	r0, r0, #3
 802789a:	fb04 560c 	mla	r6, r4, ip, r5
 802789e:	b2c0      	uxtb	r0, r0
 80278a0:	4692      	mov	sl, r2
 80278a2:	eb02 0e06 	add.w	lr, r2, r6
 80278a6:	9a00      	ldr	r2, [sp, #0]
 80278a8:	9002      	str	r0, [sp, #8]
 80278aa:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80278ae:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80278b2:	9a01      	ldr	r2, [sp, #4]
 80278b4:	2c00      	cmp	r4, #0
 80278b6:	4698      	mov	r8, r3
 80278b8:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80278bc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80278c0:	db3e      	blt.n	8027940 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd0>
 80278c2:	45a1      	cmp	r9, r4
 80278c4:	dd3c      	ble.n	8027940 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd0>
 80278c6:	2d00      	cmp	r5, #0
 80278c8:	db38      	blt.n	802793c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xcc>
 80278ca:	45ac      	cmp	ip, r5
 80278cc:	dd36      	ble.n	802793c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xcc>
 80278ce:	f81a 2006 	ldrb.w	r2, [sl, r6]
 80278d2:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 80278d6:	1c6e      	adds	r6, r5, #1
 80278d8:	d435      	bmi.n	8027946 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd6>
 80278da:	45b4      	cmp	ip, r6
 80278dc:	dd33      	ble.n	8027946 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd6>
 80278de:	b393      	cbz	r3, 8027946 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd6>
 80278e0:	f89e 6001 	ldrb.w	r6, [lr, #1]
 80278e4:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 80278e8:	3401      	adds	r4, #1
 80278ea:	d430      	bmi.n	802794e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xde>
 80278ec:	45a1      	cmp	r9, r4
 80278ee:	dd2e      	ble.n	802794e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xde>
 80278f0:	b36f      	cbz	r7, 802794e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xde>
 80278f2:	2d00      	cmp	r5, #0
 80278f4:	db29      	blt.n	802794a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xda>
 80278f6:	45ac      	cmp	ip, r5
 80278f8:	dd27      	ble.n	802794a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xda>
 80278fa:	f81e 400c 	ldrb.w	r4, [lr, ip]
 80278fe:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8027902:	3501      	adds	r5, #1
 8027904:	d407      	bmi.n	8027916 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 8027906:	45ac      	cmp	ip, r5
 8027908:	dd05      	ble.n	8027916 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 802790a:	b123      	cbz	r3, 8027916 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 802790c:	44f4      	add	ip, lr
 802790e:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8027912:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8027916:	2b0f      	cmp	r3, #15
 8027918:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802791c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8027920:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8027924:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8027928:	d801      	bhi.n	802792e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 802792a:	2f0f      	cmp	r7, #15
 802792c:	d911      	bls.n	8027952 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe2>
 802792e:	4b7f      	ldr	r3, [pc, #508]	; (8027b2c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2bc>)
 8027930:	4a7f      	ldr	r2, [pc, #508]	; (8027b30 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c0>)
 8027932:	4880      	ldr	r0, [pc, #512]	; (8027b34 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c4>)
 8027934:	f240 210d 	movw	r1, #525	; 0x20d
 8027938:	f006 fcce 	bl	802e2d8 <__assert_func>
 802793c:	4602      	mov	r2, r0
 802793e:	e7ca      	b.n	80278d6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x66>
 8027940:	4606      	mov	r6, r0
 8027942:	4602      	mov	r2, r0
 8027944:	e7d0      	b.n	80278e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x78>
 8027946:	4606      	mov	r6, r0
 8027948:	e7ce      	b.n	80278e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x78>
 802794a:	4604      	mov	r4, r0
 802794c:	e7d9      	b.n	8027902 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x92>
 802794e:	4604      	mov	r4, r0
 8027950:	e7e1      	b.n	8027916 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 8027952:	b29b      	uxth	r3, r3
 8027954:	b2bf      	uxth	r7, r7
 8027956:	fb03 fe07 	mul.w	lr, r3, r7
 802795a:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 802795e:	011b      	lsls	r3, r3, #4
 8027960:	eba3 0c0e 	sub.w	ip, r3, lr
 8027964:	b2bf      	uxth	r7, r7
 8027966:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 802796a:	fa1f fc8c 	uxth.w	ip, ip
 802796e:	1bed      	subs	r5, r5, r7
 8027970:	b2ad      	uxth	r5, r5
 8027972:	fb0c f30a 	mul.w	r3, ip, sl
 8027976:	fb05 330b 	mla	r3, r5, fp, r3
 802797a:	fb07 3309 	mla	r3, r7, r9, r3
 802797e:	fb0e 3308 	mla	r3, lr, r8, r3
 8027982:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027986:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802798a:	9303      	str	r3, [sp, #12]
 802798c:	d018      	beq.n	80279c0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x150>
 802798e:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8027992:	fb0b f303 	mul.w	r3, fp, r3
 8027996:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802799a:	fb0b fb02 	mul.w	fp, fp, r2
 802799e:	0a1a      	lsrs	r2, r3, #8
 80279a0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80279a4:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 80279a8:	441a      	add	r2, r3
 80279aa:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 80279ae:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 80279b2:	0a12      	lsrs	r2, r2, #8
 80279b4:	0a1b      	lsrs	r3, r3, #8
 80279b6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80279ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80279be:	431a      	orrs	r2, r3
 80279c0:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80279c4:	d019      	beq.n	80279fa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x18a>
 80279c6:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 80279ca:	fb0a fb0b 	mul.w	fp, sl, fp
 80279ce:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80279d2:	fb0a fa06 	mul.w	sl, sl, r6
 80279d6:	ea4f 261b 	mov.w	r6, fp, lsr #8
 80279da:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80279de:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80279e2:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 80279e6:	445e      	add	r6, fp
 80279e8:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80279ec:	0a36      	lsrs	r6, r6, #8
 80279ee:	0a1b      	lsrs	r3, r3, #8
 80279f0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80279f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80279f8:	431e      	orrs	r6, r3
 80279fa:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80279fe:	d019      	beq.n	8027a34 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1c4>
 8027a00:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8027a04:	fb09 fa0a 	mul.w	sl, r9, sl
 8027a08:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8027a0c:	fb09 f904 	mul.w	r9, r9, r4
 8027a10:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8027a14:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8027a18:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8027a1c:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8027a20:	4454      	add	r4, sl
 8027a22:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8027a26:	0a24      	lsrs	r4, r4, #8
 8027a28:	0a1b      	lsrs	r3, r3, #8
 8027a2a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8027a2e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027a32:	431c      	orrs	r4, r3
 8027a34:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8027a38:	d019      	beq.n	8027a6e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1fe>
 8027a3a:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8027a3e:	fb08 f909 	mul.w	r9, r8, r9
 8027a42:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8027a46:	fb08 f800 	mul.w	r8, r8, r0
 8027a4a:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8027a4e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8027a52:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8027a56:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8027a5a:	4448      	add	r0, r9
 8027a5c:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8027a60:	0a00      	lsrs	r0, r0, #8
 8027a62:	0a1b      	lsrs	r3, r3, #8
 8027a64:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8027a68:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027a6c:	4318      	orrs	r0, r3
 8027a6e:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8027a72:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8027a76:	fb0c f808 	mul.w	r8, ip, r8
 8027a7a:	fb05 8803 	mla	r8, r5, r3, r8
 8027a7e:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8027a82:	fb07 8803 	mla	r8, r7, r3, r8
 8027a86:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8027a8a:	fb0e 8303 	mla	r3, lr, r3, r8
 8027a8e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8027a92:	fb0c f606 	mul.w	r6, ip, r6
 8027a96:	0a1b      	lsrs	r3, r3, #8
 8027a98:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027a9c:	fb05 6202 	mla	r2, r5, r2, r6
 8027aa0:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8027aa4:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 8027aa8:	fb07 2703 	mla	r7, r7, r3, r2
 8027aac:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8027ab0:	b295      	uxth	r5, r2
 8027ab2:	9a03      	ldr	r2, [sp, #12]
 8027ab4:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8027ab8:	436a      	muls	r2, r5
 8027aba:	fb0e 7303 	mla	r3, lr, r3, r7
 8027abe:	1c50      	adds	r0, r2, #1
 8027ac0:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8027ac4:	0a1b      	lsrs	r3, r3, #8
 8027ac6:	9a00      	ldr	r2, [sp, #0]
 8027ac8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027acc:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8027ad0:	ea48 0303 	orr.w	r3, r8, r3
 8027ad4:	b2c0      	uxtb	r0, r0
 8027ad6:	fb12 f200 	smulbb	r2, r2, r0
 8027ada:	0c1e      	lsrs	r6, r3, #16
 8027adc:	fb06 2605 	mla	r6, r6, r5, r2
 8027ae0:	9a01      	ldr	r2, [sp, #4]
 8027ae2:	f3c3 2407 	ubfx	r4, r3, #8, #8
 8027ae6:	fb12 f200 	smulbb	r2, r2, r0
 8027aea:	fb04 2205 	mla	r2, r4, r5, r2
 8027aee:	b294      	uxth	r4, r2
 8027af0:	9a02      	ldr	r2, [sp, #8]
 8027af2:	b2db      	uxtb	r3, r3
 8027af4:	fb12 f200 	smulbb	r2, r2, r0
 8027af8:	fb03 2205 	mla	r2, r3, r5, r2
 8027afc:	b2b6      	uxth	r6, r6
 8027afe:	b292      	uxth	r2, r2
 8027b00:	1c73      	adds	r3, r6, #1
 8027b02:	1c50      	adds	r0, r2, #1
 8027b04:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 8027b08:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8027b0c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8027b10:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8027b14:	4313      	orrs	r3, r2
 8027b16:	1c62      	adds	r2, r4, #1
 8027b18:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8027b1c:	0952      	lsrs	r2, r2, #5
 8027b1e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027b22:	4313      	orrs	r3, r2
 8027b24:	800b      	strh	r3, [r1, #0]
 8027b26:	b005      	add	sp, #20
 8027b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027b2c:	080343dc 	.word	0x080343dc
 8027b30:	08034935 	.word	0x08034935
 8027b34:	08034464 	.word	0x08034464

08027b38 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8027b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027b3c:	ed2d 8b08 	vpush	{d8-d11}
 8027b40:	b09b      	sub	sp, #108	; 0x6c
 8027b42:	eeb0 aa40 	vmov.f32	s20, s0
 8027b46:	9309      	str	r3, [sp, #36]	; 0x24
 8027b48:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 8027b4c:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 8027b4e:	9311      	str	r3, [sp, #68]	; 0x44
 8027b50:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8027b54:	9114      	str	r1, [sp, #80]	; 0x50
 8027b56:	9317      	str	r3, [sp, #92]	; 0x5c
 8027b58:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8027b5c:	9019      	str	r0, [sp, #100]	; 0x64
 8027b5e:	6868      	ldr	r0, [r5, #4]
 8027b60:	9218      	str	r2, [sp, #96]	; 0x60
 8027b62:	fb00 1303 	mla	r3, r0, r3, r1
 8027b66:	6829      	ldr	r1, [r5, #0]
 8027b68:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8027b6a:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 8027b6e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8027b72:	930c      	str	r3, [sp, #48]	; 0x30
 8027b74:	6813      	ldr	r3, [r2, #0]
 8027b76:	9313      	str	r3, [sp, #76]	; 0x4c
 8027b78:	6853      	ldr	r3, [r2, #4]
 8027b7a:	3304      	adds	r3, #4
 8027b7c:	eef0 9a60 	vmov.f32	s19, s1
 8027b80:	eeb0 9a41 	vmov.f32	s18, s2
 8027b84:	eeb0 8a62 	vmov.f32	s16, s5
 8027b88:	eef0 8a43 	vmov.f32	s17, s6
 8027b8c:	eef0 ba44 	vmov.f32	s23, s8
 8027b90:	eeb0 ba64 	vmov.f32	s22, s9
 8027b94:	eef0 aa45 	vmov.f32	s21, s10
 8027b98:	9308      	str	r3, [sp, #32]
 8027b9a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8027b9c:	2b00      	cmp	r3, #0
 8027b9e:	dc03      	bgt.n	8027ba8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8027ba0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8027ba2:	2b00      	cmp	r3, #0
 8027ba4:	f340 8363 	ble.w	802826e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x736>
 8027ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027baa:	2b00      	cmp	r3, #0
 8027bac:	f340 81ad 	ble.w	8027f0a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d2>
 8027bb0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8027bb2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8027bb4:	1412      	asrs	r2, r2, #16
 8027bb6:	ea4f 4323 	mov.w	r3, r3, asr #16
 8027bba:	d42f      	bmi.n	8027c1c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8027bbc:	1c51      	adds	r1, r2, #1
 8027bbe:	428c      	cmp	r4, r1
 8027bc0:	dd2f      	ble.n	8027c22 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8027bc2:	2b00      	cmp	r3, #0
 8027bc4:	db2d      	blt.n	8027c22 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8027bc6:	9811      	ldr	r0, [sp, #68]	; 0x44
 8027bc8:	1c59      	adds	r1, r3, #1
 8027bca:	4288      	cmp	r0, r1
 8027bcc:	dd29      	ble.n	8027c22 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8027bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027bd0:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8027bd2:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8027bd4:	3b01      	subs	r3, #1
 8027bd6:	fb02 1203 	mla	r2, r2, r3, r1
 8027bda:	1412      	asrs	r2, r2, #16
 8027bdc:	d42b      	bmi.n	8027c36 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8027bde:	3201      	adds	r2, #1
 8027be0:	4294      	cmp	r4, r2
 8027be2:	dd28      	ble.n	8027c36 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8027be4:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8027be6:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8027be8:	fb02 1303 	mla	r3, r2, r3, r1
 8027bec:	141b      	asrs	r3, r3, #16
 8027bee:	d422      	bmi.n	8027c36 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8027bf0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8027bf2:	3301      	adds	r3, #1
 8027bf4:	429a      	cmp	r2, r3
 8027bf6:	dd1e      	ble.n	8027c36 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8027bf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027bfa:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8027bfe:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 8027c02:	9312      	str	r3, [sp, #72]	; 0x48
 8027c04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8027c06:	2b00      	cmp	r3, #0
 8027c08:	f300 81ea 	bgt.w	8027fe0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a8>
 8027c0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027c0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027c10:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8027c14:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8027c18:	930c      	str	r3, [sp, #48]	; 0x30
 8027c1a:	e178      	b.n	8027f0e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d6>
 8027c1c:	1c51      	adds	r1, r2, #1
 8027c1e:	f040 8165 	bne.w	8027eec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8027c22:	42a2      	cmp	r2, r4
 8027c24:	f280 8162 	bge.w	8027eec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8027c28:	1c5f      	adds	r7, r3, #1
 8027c2a:	f2c0 815f 	blt.w	8027eec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8027c2e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8027c30:	4293      	cmp	r3, r2
 8027c32:	f280 815b 	bge.w	8027eec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8027c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027c38:	9316      	str	r3, [sp, #88]	; 0x58
 8027c3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027c3c:	9312      	str	r3, [sp, #72]	; 0x48
 8027c3e:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 8027c42:	9315      	str	r3, [sp, #84]	; 0x54
 8027c44:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8027c46:	2b00      	cmp	r3, #0
 8027c48:	dde0      	ble.n	8027c0c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 8027c4a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8027c4c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8027c4e:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8027c52:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8027c54:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8027c58:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8027c5a:	1412      	asrs	r2, r2, #16
 8027c5c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8027c60:	f100 81a5 	bmi.w	8027fae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x476>
 8027c64:	1c55      	adds	r5, r2, #1
 8027c66:	42ac      	cmp	r4, r5
 8027c68:	f340 81a3 	ble.w	8027fb2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47a>
 8027c6c:	2b00      	cmp	r3, #0
 8027c6e:	f2c0 81a0 	blt.w	8027fb2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47a>
 8027c72:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8027c74:	1c5d      	adds	r5, r3, #1
 8027c76:	42af      	cmp	r7, r5
 8027c78:	f340 819b 	ble.w	8027fb2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47a>
 8027c7c:	fb03 2304 	mla	r3, r3, r4, r2
 8027c80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8027c82:	18d5      	adds	r5, r2, r3
 8027c84:	5cd3      	ldrb	r3, [r2, r3]
 8027c86:	9a08      	ldr	r2, [sp, #32]
 8027c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8027c8c:	0e1f      	lsrs	r7, r3, #24
 8027c8e:	2800      	cmp	r0, #0
 8027c90:	f000 817c 	beq.w	8027f8c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x454>
 8027c94:	786a      	ldrb	r2, [r5, #1]
 8027c96:	9e08      	ldr	r6, [sp, #32]
 8027c98:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8027c9c:	920d      	str	r2, [sp, #52]	; 0x34
 8027c9e:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8027ca2:	2900      	cmp	r1, #0
 8027ca4:	f000 817d 	beq.w	8027fa2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46a>
 8027ca8:	192a      	adds	r2, r5, r4
 8027caa:	5d2d      	ldrb	r5, [r5, r4]
 8027cac:	7852      	ldrb	r2, [r2, #1]
 8027cae:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 8027cb2:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8027cb6:	950a      	str	r5, [sp, #40]	; 0x28
 8027cb8:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8027cbc:	920e      	str	r2, [sp, #56]	; 0x38
 8027cbe:	0e15      	lsrs	r5, r2, #24
 8027cc0:	b280      	uxth	r0, r0
 8027cc2:	b289      	uxth	r1, r1
 8027cc4:	fb00 fa01 	mul.w	sl, r0, r1
 8027cc8:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 8027ccc:	0100      	lsls	r0, r0, #4
 8027cce:	eba0 080a 	sub.w	r8, r0, sl
 8027cd2:	b289      	uxth	r1, r1
 8027cd4:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 8027cd8:	fa1f f888 	uxth.w	r8, r8
 8027cdc:	1a52      	subs	r2, r2, r1
 8027cde:	b292      	uxth	r2, r2
 8027ce0:	fb08 f00e 	mul.w	r0, r8, lr
 8027ce4:	fb02 0007 	mla	r0, r2, r7, r0
 8027ce8:	fb01 0009 	mla	r0, r1, r9, r0
 8027cec:	fb0a 0005 	mla	r0, sl, r5, r0
 8027cf0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8027cf4:	2800      	cmp	r0, #0
 8027cf6:	f000 80ea 	beq.w	8027ece <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 8027cfa:	2fff      	cmp	r7, #255	; 0xff
 8027cfc:	d01a      	beq.n	8027d34 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fc>
 8027cfe:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8027d02:	fb07 fc0c 	mul.w	ip, r7, ip
 8027d06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027d0a:	435f      	muls	r7, r3
 8027d0c:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8027d10:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027d14:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8027d18:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 8027d1c:	4463      	add	r3, ip
 8027d1e:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 8027d22:	0a1b      	lsrs	r3, r3, #8
 8027d24:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8027d28:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027d2c:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8027d30:	ea43 030b 	orr.w	r3, r3, fp
 8027d34:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8027d38:	d01e      	beq.n	8027d78 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 8027d3a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8027d3c:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8027d40:	fb0e fb0b 	mul.w	fp, lr, fp
 8027d44:	f406 477f 	and.w	r7, r6, #65280	; 0xff00
 8027d48:	fb0e fe07 	mul.w	lr, lr, r7
 8027d4c:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8027d50:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027d54:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027d58:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8027d5c:	44dc      	add	ip, fp
 8027d5e:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8027d62:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027d66:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027d6a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027d6e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8027d72:	ea4c 060e 	orr.w	r6, ip, lr
 8027d76:	960d      	str	r6, [sp, #52]	; 0x34
 8027d78:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8027d7c:	d01e      	beq.n	8027dbc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x284>
 8027d7e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8027d80:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 8027d84:	fb09 fe0e 	mul.w	lr, r9, lr
 8027d88:	f406 477f 	and.w	r7, r6, #65280	; 0xff00
 8027d8c:	fb09 f907 	mul.w	r9, r9, r7
 8027d90:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8027d94:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027d98:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8027d9c:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8027da0:	44f4      	add	ip, lr
 8027da2:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8027da6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027daa:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027dae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027db2:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8027db6:	ea4c 0609 	orr.w	r6, ip, r9
 8027dba:	960a      	str	r6, [sp, #40]	; 0x28
 8027dbc:	2dff      	cmp	r5, #255	; 0xff
 8027dbe:	d01c      	beq.n	8027dfa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 8027dc0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8027dc2:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 8027dc6:	fb05 fe0e 	mul.w	lr, r5, lr
 8027dca:	f406 477f 	and.w	r7, r6, #65280	; 0xff00
 8027dce:	437d      	muls	r5, r7
 8027dd0:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8027dd4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027dd8:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8027ddc:	f505 7780 	add.w	r7, r5, #256	; 0x100
 8027de0:	44f4      	add	ip, lr
 8027de2:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 8027de6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027dea:	0a2d      	lsrs	r5, r5, #8
 8027dec:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027df0:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8027df4:	ea4c 0505 	orr.w	r5, ip, r5
 8027df8:	950e      	str	r5, [sp, #56]	; 0x38
 8027dfa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027dfc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8027dfe:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8027e02:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8027e06:	fb08 f505 	mul.w	r5, r8, r5
 8027e0a:	fb02 5507 	mla	r5, r2, r7, r5
 8027e0e:	f006 17ff 	and.w	r7, r6, #16711935	; 0xff00ff
 8027e12:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8027e14:	fb01 5507 	mla	r5, r1, r7, r5
 8027e18:	f006 17ff 	and.w	r7, r6, #16711935	; 0xff00ff
 8027e1c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8027e1e:	fb0a 5507 	mla	r5, sl, r7, r5
 8027e22:	f406 477f 	and.w	r7, r6, #65280	; 0xff00
 8027e26:	fb08 f807 	mul.w	r8, r8, r7
 8027e2a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027e2e:	fb02 8303 	mla	r3, r2, r3, r8
 8027e32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027e34:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8027e36:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8027e3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8027e3c:	fb01 330c 	mla	r3, r1, ip, r3
 8027e40:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8027e44:	fb0a 3a01 	mla	sl, sl, r1, r3
 8027e48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8027e4a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8027e4c:	881f      	ldrh	r7, [r3, #0]
 8027e4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8027e50:	0a2d      	lsrs	r5, r5, #8
 8027e52:	4343      	muls	r3, r0
 8027e54:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027e58:	1c58      	adds	r0, r3, #1
 8027e5a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8027e5e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027e62:	ea45 050a 	orr.w	r5, r5, sl
 8027e66:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8027e6a:	0c29      	lsrs	r1, r5, #16
 8027e6c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8027e70:	123b      	asrs	r3, r7, #8
 8027e72:	b2c0      	uxtb	r0, r0
 8027e74:	fb11 f102 	smulbb	r1, r1, r2
 8027e78:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8027e7c:	fb03 1300 	mla	r3, r3, r0, r1
 8027e80:	b299      	uxth	r1, r3
 8027e82:	10fa      	asrs	r2, r7, #3
 8027e84:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8027e88:	fb13 f306 	smulbb	r3, r3, r6
 8027e8c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8027e90:	fb02 3200 	mla	r2, r2, r0, r3
 8027e94:	b2ed      	uxtb	r5, r5
 8027e96:	00fb      	lsls	r3, r7, #3
 8027e98:	b2db      	uxtb	r3, r3
 8027e9a:	fb15 f506 	smulbb	r5, r5, r6
 8027e9e:	fb03 5500 	mla	r5, r3, r0, r5
 8027ea2:	b292      	uxth	r2, r2
 8027ea4:	b2ad      	uxth	r5, r5
 8027ea6:	1c4b      	adds	r3, r1, #1
 8027ea8:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8027eac:	1c68      	adds	r0, r5, #1
 8027eae:	1c51      	adds	r1, r2, #1
 8027eb0:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 8027eb4:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8027eb8:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8027ebc:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8027ec0:	0952      	lsrs	r2, r2, #5
 8027ec2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027ec6:	432b      	orrs	r3, r5
 8027ec8:	4313      	orrs	r3, r2
 8027eca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8027ecc:	8013      	strh	r3, [r2, #0]
 8027ece:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8027ed0:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8027ed2:	3302      	adds	r3, #2
 8027ed4:	9312      	str	r3, [sp, #72]	; 0x48
 8027ed6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8027ed8:	4413      	add	r3, r2
 8027eda:	932d      	str	r3, [sp, #180]	; 0xb4
 8027edc:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8027ede:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8027ee0:	4413      	add	r3, r2
 8027ee2:	932e      	str	r3, [sp, #184]	; 0xb8
 8027ee4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8027ee6:	3b01      	subs	r3, #1
 8027ee8:	9316      	str	r3, [sp, #88]	; 0x58
 8027eea:	e6ab      	b.n	8027c44 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8027eec:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8027eee:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8027ef0:	4413      	add	r3, r2
 8027ef2:	932d      	str	r3, [sp, #180]	; 0xb4
 8027ef4:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8027ef6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8027ef8:	4413      	add	r3, r2
 8027efa:	932e      	str	r3, [sp, #184]	; 0xb8
 8027efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027efe:	3b01      	subs	r3, #1
 8027f00:	9309      	str	r3, [sp, #36]	; 0x24
 8027f02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027f04:	3302      	adds	r3, #2
 8027f06:	930c      	str	r3, [sp, #48]	; 0x30
 8027f08:	e64e      	b.n	8027ba8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8027f0a:	f47f ae60 	bne.w	8027bce <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8027f0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8027f10:	2b00      	cmp	r3, #0
 8027f12:	f340 81ac 	ble.w	802826e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x736>
 8027f16:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8027f1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027f1e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8027f22:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027f24:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8027f28:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8027f2c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8027f30:	eef0 6a48 	vmov.f32	s13, s16
 8027f34:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027f38:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027f3c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8027f40:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 8027f44:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8027f48:	eef0 6a68 	vmov.f32	s13, s17
 8027f4c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8027f50:	ee18 2a10 	vmov	r2, s16
 8027f54:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8027f58:	fb92 f3f3 	sdiv	r3, r2, r3
 8027f5c:	ee18 2a90 	vmov	r2, s17
 8027f60:	932f      	str	r3, [sp, #188]	; 0xbc
 8027f62:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027f64:	fb92 f3f3 	sdiv	r3, r2, r3
 8027f68:	9330      	str	r3, [sp, #192]	; 0xc0
 8027f6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8027f6c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8027f6e:	3b01      	subs	r3, #1
 8027f70:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027f74:	9314      	str	r3, [sp, #80]	; 0x50
 8027f76:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027f78:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 8027f7c:	bf08      	it	eq
 8027f7e:	4613      	moveq	r3, r2
 8027f80:	9309      	str	r3, [sp, #36]	; 0x24
 8027f82:	eef0 8a67 	vmov.f32	s17, s15
 8027f86:	eeb0 8a47 	vmov.f32	s16, s14
 8027f8a:	e606      	b.n	8027b9a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 8027f8c:	b161      	cbz	r1, 8027fa8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x470>
 8027f8e:	5d2a      	ldrb	r2, [r5, r4]
 8027f90:	9d08      	ldr	r5, [sp, #32]
 8027f92:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8027f96:	920a      	str	r2, [sp, #40]	; 0x28
 8027f98:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8027f9c:	25ff      	movs	r5, #255	; 0xff
 8027f9e:	46ae      	mov	lr, r5
 8027fa0:	e68e      	b.n	8027cc0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x188>
 8027fa2:	25ff      	movs	r5, #255	; 0xff
 8027fa4:	46a9      	mov	r9, r5
 8027fa6:	e68b      	b.n	8027cc0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x188>
 8027fa8:	25ff      	movs	r5, #255	; 0xff
 8027faa:	46a9      	mov	r9, r5
 8027fac:	e7f7      	b.n	8027f9e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8027fae:	1c56      	adds	r6, r2, #1
 8027fb0:	d18d      	bne.n	8027ece <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 8027fb2:	4294      	cmp	r4, r2
 8027fb4:	dd8b      	ble.n	8027ece <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 8027fb6:	1c5d      	adds	r5, r3, #1
 8027fb8:	db89      	blt.n	8027ece <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 8027fba:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027fbc:	429d      	cmp	r5, r3
 8027fbe:	dd86      	ble.n	8027ece <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 8027fc0:	e9cd 3003 	strd	r3, r0, [sp, #12]
 8027fc4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8027fc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8027fc8:	9202      	str	r2, [sp, #8]
 8027fca:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8027fce:	e9cd 4300 	strd	r4, r3, [sp]
 8027fd2:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
 8027fd6:	9b08      	ldr	r3, [sp, #32]
 8027fd8:	9819      	ldr	r0, [sp, #100]	; 0x64
 8027fda:	f7ff fc49 	bl	8027870 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8027fde:	e776      	b.n	8027ece <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 8027fe0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8027fe2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8027fe4:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8027fe8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8027fea:	1412      	asrs	r2, r2, #16
 8027fec:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8027ff0:	141b      	asrs	r3, r3, #16
 8027ff2:	fb04 2303 	mla	r3, r4, r3, r2
 8027ff6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8027ff8:	18d5      	adds	r5, r2, r3
 8027ffa:	5cd3      	ldrb	r3, [r2, r3]
 8027ffc:	9a08      	ldr	r2, [sp, #32]
 8027ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8028002:	0e1e      	lsrs	r6, r3, #24
 8028004:	2900      	cmp	r1, #0
 8028006:	f000 8121 	beq.w	802824c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x714>
 802800a:	786a      	ldrb	r2, [r5, #1]
 802800c:	9f08      	ldr	r7, [sp, #32]
 802800e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8028012:	920f      	str	r2, [sp, #60]	; 0x3c
 8028014:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8028018:	2800      	cmp	r0, #0
 802801a:	f000 8122 	beq.w	8028262 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72a>
 802801e:	192a      	adds	r2, r5, r4
 8028020:	5d2d      	ldrb	r5, [r5, r4]
 8028022:	7852      	ldrb	r2, [r2, #1]
 8028024:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8028028:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 802802c:	950b      	str	r5, [sp, #44]	; 0x2c
 802802e:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8028032:	9210      	str	r2, [sp, #64]	; 0x40
 8028034:	0e15      	lsrs	r5, r2, #24
 8028036:	b289      	uxth	r1, r1
 8028038:	b280      	uxth	r0, r0
 802803a:	fb01 f900 	mul.w	r9, r1, r0
 802803e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8028042:	0109      	lsls	r1, r1, #4
 8028044:	eba1 0e09 	sub.w	lr, r1, r9
 8028048:	b280      	uxth	r0, r0
 802804a:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 802804e:	fa1f fe8e 	uxth.w	lr, lr
 8028052:	1a12      	subs	r2, r2, r0
 8028054:	b292      	uxth	r2, r2
 8028056:	fb0e f10c 	mul.w	r1, lr, ip
 802805a:	fb02 1106 	mla	r1, r2, r6, r1
 802805e:	fb00 1108 	mla	r1, r0, r8, r1
 8028062:	fb09 1105 	mla	r1, r9, r5, r1
 8028066:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802806a:	2900      	cmp	r1, #0
 802806c:	f000 80e0 	beq.w	8028230 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f8>
 8028070:	2eff      	cmp	r6, #255	; 0xff
 8028072:	d016      	beq.n	80280a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56a>
 8028074:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8028078:	4377      	muls	r7, r6
 802807a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802807e:	435e      	muls	r6, r3
 8028080:	0a3b      	lsrs	r3, r7, #8
 8028082:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028086:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802808a:	443b      	add	r3, r7
 802808c:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8028090:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8028094:	0a1b      	lsrs	r3, r3, #8
 8028096:	0a3f      	lsrs	r7, r7, #8
 8028098:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802809c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80280a0:	433b      	orrs	r3, r7
 80280a2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80280a6:	d01d      	beq.n	80280e4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5ac>
 80280a8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80280aa:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80280ac:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80280b0:	fb0c f606 	mul.w	r6, ip, r6
 80280b4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80280b8:	fb0c fc07 	mul.w	ip, ip, r7
 80280bc:	0a37      	lsrs	r7, r6, #8
 80280be:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80280c2:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 80280c6:	4437      	add	r7, r6
 80280c8:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 80280cc:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 80280d0:	0a3f      	lsrs	r7, r7, #8
 80280d2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80280d6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80280da:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80280de:	ea47 060c 	orr.w	r6, r7, ip
 80280e2:	960f      	str	r6, [sp, #60]	; 0x3c
 80280e4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80280e8:	d01d      	beq.n	8028126 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5ee>
 80280ea:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80280ec:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80280f0:	fb08 fc0c 	mul.w	ip, r8, ip
 80280f4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80280f8:	fb08 f806 	mul.w	r8, r8, r6
 80280fc:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8028100:	f508 7680 	add.w	r6, r8, #256	; 0x100
 8028104:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8028108:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802810c:	eb06 2818 	add.w	r8, r6, r8, lsr #8
 8028110:	4467      	add	r7, ip
 8028112:	0a3f      	lsrs	r7, r7, #8
 8028114:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8028118:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802811c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8028120:	ea47 0608 	orr.w	r6, r7, r8
 8028124:	960b      	str	r6, [sp, #44]	; 0x2c
 8028126:	2dff      	cmp	r5, #255	; 0xff
 8028128:	d01a      	beq.n	8028160 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x628>
 802812a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 802812c:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8028130:	fb05 fc0c 	mul.w	ip, r5, ip
 8028134:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8028138:	4375      	muls	r5, r6
 802813a:	ea4f 271c 	mov.w	r7, ip, lsr #8
 802813e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8028142:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8028146:	f505 7680 	add.w	r6, r5, #256	; 0x100
 802814a:	4467      	add	r7, ip
 802814c:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8028150:	0a3f      	lsrs	r7, r7, #8
 8028152:	0a2d      	lsrs	r5, r5, #8
 8028154:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8028158:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802815c:	433d      	orrs	r5, r7
 802815e:	9510      	str	r5, [sp, #64]	; 0x40
 8028160:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8028162:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8028166:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 802816a:	fb0e f505 	mul.w	r5, lr, r5
 802816e:	fb02 5506 	mla	r5, r2, r6, r5
 8028172:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8028174:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8028178:	fb00 5506 	mla	r5, r0, r6, r5
 802817c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 802817e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8028182:	fb09 5506 	mla	r5, r9, r6, r5
 8028186:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8028188:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802818c:	fb0e fe06 	mul.w	lr, lr, r6
 8028190:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028194:	fb02 e303 	mla	r3, r2, r3, lr
 8028198:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802819a:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 802819e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80281a0:	fb00 3307 	mla	r3, r0, r7, r3
 80281a4:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80281a8:	fb09 3c0c 	mla	ip, r9, ip, r3
 80281ac:	fb01 f10b 	mul.w	r1, r1, fp
 80281b0:	0a2d      	lsrs	r5, r5, #8
 80281b2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80281b6:	f8ba 0000 	ldrh.w	r0, [sl]
 80281ba:	1c4b      	adds	r3, r1, #1
 80281bc:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80281c0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80281c4:	ea45 050c 	orr.w	r5, r5, ip
 80281c8:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80281cc:	1202      	asrs	r2, r0, #8
 80281ce:	0c2b      	lsrs	r3, r5, #16
 80281d0:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80281d4:	b2c9      	uxtb	r1, r1
 80281d6:	fb13 f30b 	smulbb	r3, r3, fp
 80281da:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80281de:	fb02 3201 	mla	r2, r2, r1, r3
 80281e2:	f3c5 2607 	ubfx	r6, r5, #8, #8
 80281e6:	10c3      	asrs	r3, r0, #3
 80281e8:	b2ed      	uxtb	r5, r5
 80281ea:	00c0      	lsls	r0, r0, #3
 80281ec:	b2c0      	uxtb	r0, r0
 80281ee:	fb15 f50b 	smulbb	r5, r5, fp
 80281f2:	fb00 5001 	mla	r0, r0, r1, r5
 80281f6:	b292      	uxth	r2, r2
 80281f8:	fb16 f60b 	smulbb	r6, r6, fp
 80281fc:	b280      	uxth	r0, r0
 80281fe:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8028202:	fb03 6301 	mla	r3, r3, r1, r6
 8028206:	1c51      	adds	r1, r2, #1
 8028208:	1c46      	adds	r6, r0, #1
 802820a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802820e:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 8028212:	b29b      	uxth	r3, r3
 8028214:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8028218:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 802821c:	4332      	orrs	r2, r6
 802821e:	1c5e      	adds	r6, r3, #1
 8028220:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8028224:	095b      	lsrs	r3, r3, #5
 8028226:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802822a:	431a      	orrs	r2, r3
 802822c:	f8aa 2000 	strh.w	r2, [sl]
 8028230:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8028232:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8028234:	4413      	add	r3, r2
 8028236:	932d      	str	r3, [sp, #180]	; 0xb4
 8028238:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 802823a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802823c:	4413      	add	r3, r2
 802823e:	932e      	str	r3, [sp, #184]	; 0xb8
 8028240:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8028242:	3b01      	subs	r3, #1
 8028244:	f10a 0a02 	add.w	sl, sl, #2
 8028248:	9312      	str	r3, [sp, #72]	; 0x48
 802824a:	e4db      	b.n	8027c04 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 802824c:	b160      	cbz	r0, 8028268 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x730>
 802824e:	5d2a      	ldrb	r2, [r5, r4]
 8028250:	9d08      	ldr	r5, [sp, #32]
 8028252:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8028256:	920b      	str	r2, [sp, #44]	; 0x2c
 8028258:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802825c:	25ff      	movs	r5, #255	; 0xff
 802825e:	46ac      	mov	ip, r5
 8028260:	e6e9      	b.n	8028036 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4fe>
 8028262:	25ff      	movs	r5, #255	; 0xff
 8028264:	46a8      	mov	r8, r5
 8028266:	e6e6      	b.n	8028036 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4fe>
 8028268:	25ff      	movs	r5, #255	; 0xff
 802826a:	46a8      	mov	r8, r5
 802826c:	e7f7      	b.n	802825e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x726>
 802826e:	b01b      	add	sp, #108	; 0x6c
 8028270:	ecbd 8b08 	vpop	{d8-d11}
 8028274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028278 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8028278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802827c:	8808      	ldrh	r0, [r1, #0]
 802827e:	b085      	sub	sp, #20
 8028280:	1206      	asrs	r6, r0, #8
 8028282:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 8028286:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 802828a:	9600      	str	r6, [sp, #0]
 802828c:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8028290:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8028294:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8028298:	10c6      	asrs	r6, r0, #3
 802829a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802829e:	9601      	str	r6, [sp, #4]
 80282a0:	00c0      	lsls	r0, r0, #3
 80282a2:	fb04 560c 	mla	r6, r4, ip, r5
 80282a6:	b2c0      	uxtb	r0, r0
 80282a8:	4692      	mov	sl, r2
 80282aa:	eb02 0e06 	add.w	lr, r2, r6
 80282ae:	9a00      	ldr	r2, [sp, #0]
 80282b0:	9002      	str	r0, [sp, #8]
 80282b2:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80282b6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80282ba:	9a01      	ldr	r2, [sp, #4]
 80282bc:	2c00      	cmp	r4, #0
 80282be:	4698      	mov	r8, r3
 80282c0:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80282c4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80282c8:	db3e      	blt.n	8028348 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd0>
 80282ca:	45a1      	cmp	r9, r4
 80282cc:	dd3c      	ble.n	8028348 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd0>
 80282ce:	2d00      	cmp	r5, #0
 80282d0:	db38      	blt.n	8028344 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xcc>
 80282d2:	45ac      	cmp	ip, r5
 80282d4:	dd36      	ble.n	8028344 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xcc>
 80282d6:	f81a 2006 	ldrb.w	r2, [sl, r6]
 80282da:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 80282de:	1c6e      	adds	r6, r5, #1
 80282e0:	d435      	bmi.n	802834e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 80282e2:	45b4      	cmp	ip, r6
 80282e4:	dd33      	ble.n	802834e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 80282e6:	b393      	cbz	r3, 802834e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 80282e8:	f89e 6001 	ldrb.w	r6, [lr, #1]
 80282ec:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 80282f0:	3401      	adds	r4, #1
 80282f2:	d430      	bmi.n	8028356 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xde>
 80282f4:	45a1      	cmp	r9, r4
 80282f6:	dd2e      	ble.n	8028356 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xde>
 80282f8:	b36f      	cbz	r7, 8028356 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xde>
 80282fa:	2d00      	cmp	r5, #0
 80282fc:	db29      	blt.n	8028352 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xda>
 80282fe:	45ac      	cmp	ip, r5
 8028300:	dd27      	ble.n	8028352 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xda>
 8028302:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8028306:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 802830a:	3501      	adds	r5, #1
 802830c:	d407      	bmi.n	802831e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa6>
 802830e:	45ac      	cmp	ip, r5
 8028310:	dd05      	ble.n	802831e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa6>
 8028312:	b123      	cbz	r3, 802831e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa6>
 8028314:	44f4      	add	ip, lr
 8028316:	f89c 0001 	ldrb.w	r0, [ip, #1]
 802831a:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 802831e:	2b0f      	cmp	r3, #15
 8028320:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8028324:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8028328:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802832c:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8028330:	d801      	bhi.n	8028336 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xbe>
 8028332:	2f0f      	cmp	r7, #15
 8028334:	d911      	bls.n	802835a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 8028336:	4b79      	ldr	r3, [pc, #484]	; (802851c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2a4>)
 8028338:	4a79      	ldr	r2, [pc, #484]	; (8028520 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2a8>)
 802833a:	487a      	ldr	r0, [pc, #488]	; (8028524 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2ac>)
 802833c:	f240 210d 	movw	r1, #525	; 0x20d
 8028340:	f005 ffca 	bl	802e2d8 <__assert_func>
 8028344:	4602      	mov	r2, r0
 8028346:	e7ca      	b.n	80282de <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x66>
 8028348:	4606      	mov	r6, r0
 802834a:	4602      	mov	r2, r0
 802834c:	e7d0      	b.n	80282f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x78>
 802834e:	4606      	mov	r6, r0
 8028350:	e7ce      	b.n	80282f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x78>
 8028352:	4604      	mov	r4, r0
 8028354:	e7d9      	b.n	802830a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x92>
 8028356:	4604      	mov	r4, r0
 8028358:	e7e1      	b.n	802831e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa6>
 802835a:	b29b      	uxth	r3, r3
 802835c:	b2bf      	uxth	r7, r7
 802835e:	fb03 fe07 	mul.w	lr, r3, r7
 8028362:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8028366:	011b      	lsls	r3, r3, #4
 8028368:	eba3 0c0e 	sub.w	ip, r3, lr
 802836c:	b2bf      	uxth	r7, r7
 802836e:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8028372:	fa1f fc8c 	uxth.w	ip, ip
 8028376:	1bed      	subs	r5, r5, r7
 8028378:	b2ad      	uxth	r5, r5
 802837a:	fb0c f30a 	mul.w	r3, ip, sl
 802837e:	fb05 330b 	mla	r3, r5, fp, r3
 8028382:	fb07 3309 	mla	r3, r7, r9, r3
 8028386:	fb0e 3308 	mla	r3, lr, r8, r3
 802838a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802838e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8028392:	9303      	str	r3, [sp, #12]
 8028394:	d018      	beq.n	80283c8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x150>
 8028396:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 802839a:	fb0b f303 	mul.w	r3, fp, r3
 802839e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80283a2:	fb0b fb02 	mul.w	fp, fp, r2
 80283a6:	0a1a      	lsrs	r2, r3, #8
 80283a8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80283ac:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 80283b0:	441a      	add	r2, r3
 80283b2:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 80283b6:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 80283ba:	0a12      	lsrs	r2, r2, #8
 80283bc:	0a1b      	lsrs	r3, r3, #8
 80283be:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80283c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80283c6:	431a      	orrs	r2, r3
 80283c8:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80283cc:	d019      	beq.n	8028402 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x18a>
 80283ce:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 80283d2:	fb0a fb0b 	mul.w	fp, sl, fp
 80283d6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80283da:	fb0a fa06 	mul.w	sl, sl, r6
 80283de:	ea4f 261b 	mov.w	r6, fp, lsr #8
 80283e2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80283e6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80283ea:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 80283ee:	445e      	add	r6, fp
 80283f0:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80283f4:	0a36      	lsrs	r6, r6, #8
 80283f6:	0a1b      	lsrs	r3, r3, #8
 80283f8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80283fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028400:	431e      	orrs	r6, r3
 8028402:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8028406:	d019      	beq.n	802843c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1c4>
 8028408:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 802840c:	fb09 fa0a 	mul.w	sl, r9, sl
 8028410:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8028414:	fb09 f904 	mul.w	r9, r9, r4
 8028418:	ea4f 241a 	mov.w	r4, sl, lsr #8
 802841c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8028420:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8028424:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8028428:	4454      	add	r4, sl
 802842a:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 802842e:	0a24      	lsrs	r4, r4, #8
 8028430:	0a1b      	lsrs	r3, r3, #8
 8028432:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8028436:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802843a:	431c      	orrs	r4, r3
 802843c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8028440:	d019      	beq.n	8028476 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1fe>
 8028442:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8028446:	fb08 f909 	mul.w	r9, r8, r9
 802844a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802844e:	fb08 f800 	mul.w	r8, r8, r0
 8028452:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8028456:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802845a:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 802845e:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8028462:	4448      	add	r0, r9
 8028464:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8028468:	0a00      	lsrs	r0, r0, #8
 802846a:	0a1b      	lsrs	r3, r3, #8
 802846c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8028470:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028474:	4318      	orrs	r0, r3
 8028476:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 802847a:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 802847e:	fb0c f808 	mul.w	r8, ip, r8
 8028482:	fb05 8803 	mla	r8, r5, r3, r8
 8028486:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 802848a:	fb07 8803 	mla	r8, r7, r3, r8
 802848e:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8028492:	fb0e 8303 	mla	r3, lr, r3, r8
 8028496:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802849a:	0a1b      	lsrs	r3, r3, #8
 802849c:	fb0c f606 	mul.w	r6, ip, r6
 80284a0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80284a4:	fb05 6202 	mla	r2, r5, r2, r6
 80284a8:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 80284ac:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 80284b0:	fb07 2703 	mla	r7, r7, r3, r2
 80284b4:	9a03      	ldr	r2, [sp, #12]
 80284b6:	9c02      	ldr	r4, [sp, #8]
 80284b8:	9d01      	ldr	r5, [sp, #4]
 80284ba:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 80284be:	fb0e 7303 	mla	r3, lr, r3, r7
 80284c2:	43d0      	mvns	r0, r2
 80284c4:	9a00      	ldr	r2, [sp, #0]
 80284c6:	b2c0      	uxtb	r0, r0
 80284c8:	0a1b      	lsrs	r3, r3, #8
 80284ca:	4342      	muls	r2, r0
 80284cc:	4344      	muls	r4, r0
 80284ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80284d2:	ea48 0303 	orr.w	r3, r8, r3
 80284d6:	4345      	muls	r5, r0
 80284d8:	4620      	mov	r0, r4
 80284da:	1c54      	adds	r4, r2, #1
 80284dc:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 80284e0:	0c1a      	lsrs	r2, r3, #16
 80284e2:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 80284e6:	4a10      	ldr	r2, [pc, #64]	; (8028528 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b0>)
 80284e8:	ea02 2204 	and.w	r2, r2, r4, lsl #8
 80284ec:	1c44      	adds	r4, r0, #1
 80284ee:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 80284f2:	b2d8      	uxtb	r0, r3
 80284f4:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 80284f8:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 80284fc:	1c68      	adds	r0, r5, #1
 80284fe:	eb00 2015 	add.w	r0, r0, r5, lsr #8
 8028502:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028506:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802850a:	00db      	lsls	r3, r3, #3
 802850c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028510:	4313      	orrs	r3, r2
 8028512:	800b      	strh	r3, [r1, #0]
 8028514:	b005      	add	sp, #20
 8028516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802851a:	bf00      	nop
 802851c:	080343dc 	.word	0x080343dc
 8028520:	08034935 	.word	0x08034935
 8028524:	08034464 	.word	0x08034464
 8028528:	fffff800 	.word	0xfffff800

0802852c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802852c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028530:	ed2d 8b08 	vpush	{d8-d11}
 8028534:	b097      	sub	sp, #92	; 0x5c
 8028536:	eeb0 aa40 	vmov.f32	s20, s0
 802853a:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 802853c:	9307      	str	r3, [sp, #28]
 802853e:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8028542:	9112      	str	r1, [sp, #72]	; 0x48
 8028544:	930f      	str	r3, [sp, #60]	; 0x3c
 8028546:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802854a:	9015      	str	r0, [sp, #84]	; 0x54
 802854c:	6868      	ldr	r0, [r5, #4]
 802854e:	9214      	str	r2, [sp, #80]	; 0x50
 8028550:	fb00 1303 	mla	r3, r0, r3, r1
 8028554:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8028556:	6829      	ldr	r1, [r5, #0]
 8028558:	6855      	ldr	r5, [r2, #4]
 802855a:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 802855e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8028562:	930a      	str	r3, [sp, #40]	; 0x28
 8028564:	6813      	ldr	r3, [r2, #0]
 8028566:	9311      	str	r3, [sp, #68]	; 0x44
 8028568:	eef0 9a60 	vmov.f32	s19, s1
 802856c:	eeb0 9a41 	vmov.f32	s18, s2
 8028570:	eeb0 8a62 	vmov.f32	s16, s5
 8028574:	eef0 8a43 	vmov.f32	s17, s6
 8028578:	eef0 ba44 	vmov.f32	s23, s8
 802857c:	eeb0 ba64 	vmov.f32	s22, s9
 8028580:	eef0 aa45 	vmov.f32	s21, s10
 8028584:	3504      	adds	r5, #4
 8028586:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8028588:	2b00      	cmp	r3, #0
 802858a:	dc03      	bgt.n	8028594 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 802858c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802858e:	2b00      	cmp	r3, #0
 8028590:	f340 834d 	ble.w	8028c2e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x702>
 8028594:	9b07      	ldr	r3, [sp, #28]
 8028596:	2b00      	cmp	r3, #0
 8028598:	f340 819c 	ble.w	80288d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a8>
 802859c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802859e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80285a0:	1412      	asrs	r2, r2, #16
 80285a2:	ea4f 4323 	mov.w	r3, r3, asr #16
 80285a6:	d42d      	bmi.n	8028604 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 80285a8:	1c51      	adds	r1, r2, #1
 80285aa:	428c      	cmp	r4, r1
 80285ac:	dd2d      	ble.n	802860a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 80285ae:	2b00      	cmp	r3, #0
 80285b0:	db2b      	blt.n	802860a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 80285b2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80285b4:	1c59      	adds	r1, r3, #1
 80285b6:	4288      	cmp	r0, r1
 80285b8:	dd27      	ble.n	802860a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 80285ba:	9b07      	ldr	r3, [sp, #28]
 80285bc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80285be:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80285c0:	3b01      	subs	r3, #1
 80285c2:	fb02 1203 	mla	r2, r2, r3, r1
 80285c6:	1412      	asrs	r2, r2, #16
 80285c8:	d429      	bmi.n	802861e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 80285ca:	3201      	adds	r2, #1
 80285cc:	4294      	cmp	r4, r2
 80285ce:	dd26      	ble.n	802861e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 80285d0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80285d2:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80285d4:	fb02 1303 	mla	r3, r2, r3, r1
 80285d8:	141b      	asrs	r3, r3, #16
 80285da:	d420      	bmi.n	802861e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 80285dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80285de:	3301      	adds	r3, #1
 80285e0:	429a      	cmp	r2, r3
 80285e2:	dd1c      	ble.n	802861e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 80285e4:	9b07      	ldr	r3, [sp, #28]
 80285e6:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80285ea:	9310      	str	r3, [sp, #64]	; 0x40
 80285ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80285ee:	2b00      	cmp	r3, #0
 80285f0:	f300 81da 	bgt.w	80289a8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47c>
 80285f4:	9b07      	ldr	r3, [sp, #28]
 80285f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80285f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80285fc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8028600:	930a      	str	r3, [sp, #40]	; 0x28
 8028602:	e169      	b.n	80288d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 8028604:	1c51      	adds	r1, r2, #1
 8028606:	f040 8156 	bne.w	80288b6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38a>
 802860a:	42a2      	cmp	r2, r4
 802860c:	f280 8153 	bge.w	80288b6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38a>
 8028610:	1c5a      	adds	r2, r3, #1
 8028612:	f2c0 8150 	blt.w	80288b6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38a>
 8028616:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8028618:	4293      	cmp	r3, r2
 802861a:	f280 814c 	bge.w	80288b6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38a>
 802861e:	9b07      	ldr	r3, [sp, #28]
 8028620:	9313      	str	r3, [sp, #76]	; 0x4c
 8028622:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028624:	9310      	str	r3, [sp, #64]	; 0x40
 8028626:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8028628:	2b00      	cmp	r3, #0
 802862a:	dde3      	ble.n	80285f4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 802862c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802862e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8028630:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8028634:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8028636:	f3c2 3003 	ubfx	r0, r2, #12, #4
 802863a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802863c:	1412      	asrs	r2, r2, #16
 802863e:	ea4f 4323 	mov.w	r3, r3, asr #16
 8028642:	f100 8198 	bmi.w	8028976 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44a>
 8028646:	1c56      	adds	r6, r2, #1
 8028648:	42b4      	cmp	r4, r6
 802864a:	f340 8196 	ble.w	802897a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44e>
 802864e:	2b00      	cmp	r3, #0
 8028650:	f2c0 8193 	blt.w	802897a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44e>
 8028654:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8028656:	1c5e      	adds	r6, r3, #1
 8028658:	42b7      	cmp	r7, r6
 802865a:	f340 818e 	ble.w	802897a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44e>
 802865e:	fb03 2304 	mla	r3, r3, r4, r2
 8028662:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8028664:	18d6      	adds	r6, r2, r3
 8028666:	5cd3      	ldrb	r3, [r2, r3]
 8028668:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802866c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8028670:	2900      	cmp	r1, #0
 8028672:	f000 8170 	beq.w	8028956 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 8028676:	7872      	ldrb	r2, [r6, #1]
 8028678:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802867c:	920b      	str	r2, [sp, #44]	; 0x2c
 802867e:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8028682:	2800      	cmp	r0, #0
 8028684:	f000 8171 	beq.w	802896a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43e>
 8028688:	1932      	adds	r2, r6, r4
 802868a:	5d36      	ldrb	r6, [r6, r4]
 802868c:	7852      	ldrb	r2, [r2, #1]
 802868e:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8028692:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8028696:	9608      	str	r6, [sp, #32]
 8028698:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802869c:	920c      	str	r2, [sp, #48]	; 0x30
 802869e:	0e16      	lsrs	r6, r2, #24
 80286a0:	b289      	uxth	r1, r1
 80286a2:	b280      	uxth	r0, r0
 80286a4:	fb01 fb00 	mul.w	fp, r1, r0
 80286a8:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 80286ac:	0109      	lsls	r1, r1, #4
 80286ae:	eba1 090b 	sub.w	r9, r1, fp
 80286b2:	b280      	uxth	r0, r0
 80286b4:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80286b8:	fa1f f989 	uxth.w	r9, r9
 80286bc:	1a12      	subs	r2, r2, r0
 80286be:	b292      	uxth	r2, r2
 80286c0:	fb09 f108 	mul.w	r1, r9, r8
 80286c4:	fb02 110c 	mla	r1, r2, ip, r1
 80286c8:	fb00 110a 	mla	r1, r0, sl, r1
 80286cc:	fb0b 1106 	mla	r1, fp, r6, r1
 80286d0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80286d4:	2900      	cmp	r1, #0
 80286d6:	f000 80df 	beq.w	8028898 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 80286da:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80286de:	d01b      	beq.n	8028718 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ec>
 80286e0:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80286e4:	fb0c fe0e 	mul.w	lr, ip, lr
 80286e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80286ec:	fb0c fc03 	mul.w	ip, ip, r3
 80286f0:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80286f4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80286f8:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80286fc:	4473      	add	r3, lr
 80286fe:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8028702:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8028706:	0a1b      	lsrs	r3, r3, #8
 8028708:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802870c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028710:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8028714:	ea43 030e 	orr.w	r3, r3, lr
 8028718:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802871c:	d01e      	beq.n	802875c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x230>
 802871e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8028720:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8028724:	fb08 fc0c 	mul.w	ip, r8, ip
 8028728:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 802872c:	fb08 f80e 	mul.w	r8, r8, lr
 8028730:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8028734:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028738:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802873c:	44e6      	add	lr, ip
 802873e:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8028742:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8028746:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802874a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802874e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028752:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8028756:	ea4e 0708 	orr.w	r7, lr, r8
 802875a:	970b      	str	r7, [sp, #44]	; 0x2c
 802875c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8028760:	d01e      	beq.n	80287a0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8028762:	9f08      	ldr	r7, [sp, #32]
 8028764:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8028768:	fb0a f808 	mul.w	r8, sl, r8
 802876c:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8028770:	fb0a fa0c 	mul.w	sl, sl, ip
 8028774:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8028778:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802877c:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8028780:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028784:	44c6      	add	lr, r8
 8028786:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802878a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802878e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028792:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028796:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802879a:	ea4e 070a 	orr.w	r7, lr, sl
 802879e:	9708      	str	r7, [sp, #32]
 80287a0:	2eff      	cmp	r6, #255	; 0xff
 80287a2:	d01d      	beq.n	80287e0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b4>
 80287a4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80287a6:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 80287aa:	fb06 f808 	mul.w	r8, r6, r8
 80287ae:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80287b2:	fb06 f60c 	mul.w	r6, r6, ip
 80287b6:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 80287ba:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80287be:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 80287c2:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 80287c6:	44c6      	add	lr, r8
 80287c8:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80287cc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80287d0:	0a36      	lsrs	r6, r6, #8
 80287d2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80287d6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80287da:	ea4e 0606 	orr.w	r6, lr, r6
 80287de:	960c      	str	r6, [sp, #48]	; 0x30
 80287e0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80287e2:	9f08      	ldr	r7, [sp, #32]
 80287e4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80287e8:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80287ec:	fb09 f606 	mul.w	r6, r9, r6
 80287f0:	fb02 660c 	mla	r6, r2, ip, r6
 80287f4:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80287f8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80287fa:	fb00 660c 	mla	r6, r0, ip, r6
 80287fe:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8028802:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8028804:	fb0b 660c 	mla	r6, fp, ip, r6
 8028808:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 802880c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028810:	fb09 f90c 	mul.w	r9, r9, ip
 8028814:	fb02 9303 	mla	r3, r2, r3, r9
 8028818:	9a08      	ldr	r2, [sp, #32]
 802881a:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 802881e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8028820:	fb00 330e 	mla	r3, r0, lr, r3
 8028824:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8028828:	fb0b 3b00 	mla	fp, fp, r0, r3
 802882c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802882e:	881b      	ldrh	r3, [r3, #0]
 8028830:	43c9      	mvns	r1, r1
 8028832:	1218      	asrs	r0, r3, #8
 8028834:	b2c9      	uxtb	r1, r1
 8028836:	10da      	asrs	r2, r3, #3
 8028838:	0a36      	lsrs	r6, r6, #8
 802883a:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802883e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8028842:	00db      	lsls	r3, r3, #3
 8028844:	4348      	muls	r0, r1
 8028846:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802884a:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 802884e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8028852:	b2db      	uxtb	r3, r3
 8028854:	434b      	muls	r3, r1
 8028856:	ea46 060b 	orr.w	r6, r6, fp
 802885a:	434a      	muls	r2, r1
 802885c:	1c41      	adds	r1, r0, #1
 802885e:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8028862:	0c30      	lsrs	r0, r6, #16
 8028864:	eb00 2011 	add.w	r0, r0, r1, lsr #8
 8028868:	494e      	ldr	r1, [pc, #312]	; (80289a4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x478>)
 802886a:	ea01 2000 	and.w	r0, r1, r0, lsl #8
 802886e:	1c59      	adds	r1, r3, #1
 8028870:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8028874:	b2f3      	uxtb	r3, r6
 8028876:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802887a:	1c51      	adds	r1, r2, #1
 802887c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8028880:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8028884:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8028888:	00f6      	lsls	r6, r6, #3
 802888a:	ea40 03d3 	orr.w	r3, r0, r3, lsr #3
 802888e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8028892:	431e      	orrs	r6, r3
 8028894:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8028896:	801e      	strh	r6, [r3, #0]
 8028898:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802889a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802889c:	3302      	adds	r3, #2
 802889e:	9310      	str	r3, [sp, #64]	; 0x40
 80288a0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80288a2:	4413      	add	r3, r2
 80288a4:	9329      	str	r3, [sp, #164]	; 0xa4
 80288a6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80288a8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80288aa:	4413      	add	r3, r2
 80288ac:	932a      	str	r3, [sp, #168]	; 0xa8
 80288ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80288b0:	3b01      	subs	r3, #1
 80288b2:	9313      	str	r3, [sp, #76]	; 0x4c
 80288b4:	e6b7      	b.n	8028626 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80288b6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80288b8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80288ba:	4413      	add	r3, r2
 80288bc:	9329      	str	r3, [sp, #164]	; 0xa4
 80288be:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80288c0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80288c2:	4413      	add	r3, r2
 80288c4:	932a      	str	r3, [sp, #168]	; 0xa8
 80288c6:	9b07      	ldr	r3, [sp, #28]
 80288c8:	3b01      	subs	r3, #1
 80288ca:	9307      	str	r3, [sp, #28]
 80288cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80288ce:	3302      	adds	r3, #2
 80288d0:	930a      	str	r3, [sp, #40]	; 0x28
 80288d2:	e65f      	b.n	8028594 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 80288d4:	f47f ae71 	bne.w	80285ba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 80288d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80288da:	2b00      	cmp	r3, #0
 80288dc:	f340 81a7 	ble.w	8028c2e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x702>
 80288e0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80288e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80288e8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80288ec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80288ee:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80288f2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80288f6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80288fa:	eef0 6a48 	vmov.f32	s13, s16
 80288fe:	ee69 7a27 	vmul.f32	s15, s18, s15
 8028902:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028906:	ee37 8a48 	vsub.f32	s16, s14, s16
 802890a:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 802890e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8028912:	eef0 6a68 	vmov.f32	s13, s17
 8028916:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802891a:	ee18 2a10 	vmov	r2, s16
 802891e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8028922:	fb92 f3f3 	sdiv	r3, r2, r3
 8028926:	ee18 2a90 	vmov	r2, s17
 802892a:	932b      	str	r3, [sp, #172]	; 0xac
 802892c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802892e:	fb92 f3f3 	sdiv	r3, r2, r3
 8028932:	932c      	str	r3, [sp, #176]	; 0xb0
 8028934:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8028936:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8028938:	3b01      	subs	r3, #1
 802893a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802893e:	9312      	str	r3, [sp, #72]	; 0x48
 8028940:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028942:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8028946:	bf08      	it	eq
 8028948:	4613      	moveq	r3, r2
 802894a:	9307      	str	r3, [sp, #28]
 802894c:	eef0 8a67 	vmov.f32	s17, s15
 8028950:	eeb0 8a47 	vmov.f32	s16, s14
 8028954:	e617      	b.n	8028586 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 8028956:	b158      	cbz	r0, 8028970 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x444>
 8028958:	5d32      	ldrb	r2, [r6, r4]
 802895a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802895e:	9208      	str	r2, [sp, #32]
 8028960:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 8028964:	26ff      	movs	r6, #255	; 0xff
 8028966:	46b0      	mov	r8, r6
 8028968:	e69a      	b.n	80286a0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 802896a:	26ff      	movs	r6, #255	; 0xff
 802896c:	46b2      	mov	sl, r6
 802896e:	e697      	b.n	80286a0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 8028970:	26ff      	movs	r6, #255	; 0xff
 8028972:	46b2      	mov	sl, r6
 8028974:	e7f7      	b.n	8028966 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43a>
 8028976:	1c57      	adds	r7, r2, #1
 8028978:	d18e      	bne.n	8028898 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 802897a:	4294      	cmp	r4, r2
 802897c:	dd8c      	ble.n	8028898 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 802897e:	1c5e      	adds	r6, r3, #1
 8028980:	db8a      	blt.n	8028898 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 8028982:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8028984:	429e      	cmp	r6, r3
 8028986:	dd87      	ble.n	8028898 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 8028988:	e9cd 1004 	strd	r1, r0, [sp, #16]
 802898c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8028990:	e9cd 4600 	strd	r4, r6, [sp]
 8028994:	462b      	mov	r3, r5
 8028996:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
 802899a:	9815      	ldr	r0, [sp, #84]	; 0x54
 802899c:	f7ff fc6c 	bl	8028278 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 80289a0:	e77a      	b.n	8028898 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 80289a2:	bf00      	nop
 80289a4:	fffff800 	.word	0xfffff800
 80289a8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80289aa:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80289ac:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80289b0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80289b2:	1409      	asrs	r1, r1, #16
 80289b4:	f3c3 3003 	ubfx	r0, r3, #12, #4
 80289b8:	141b      	asrs	r3, r3, #16
 80289ba:	fb04 1303 	mla	r3, r4, r3, r1
 80289be:	9911      	ldr	r1, [sp, #68]	; 0x44
 80289c0:	18ce      	adds	r6, r1, r3
 80289c2:	5ccb      	ldrb	r3, [r1, r3]
 80289c4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80289c8:	0e1f      	lsrs	r7, r3, #24
 80289ca:	2a00      	cmp	r2, #0
 80289cc:	f000 811f 	beq.w	8028c0e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e2>
 80289d0:	7871      	ldrb	r1, [r6, #1]
 80289d2:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80289d6:	910d      	str	r1, [sp, #52]	; 0x34
 80289d8:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 80289dc:	2800      	cmp	r0, #0
 80289de:	f000 8120 	beq.w	8028c22 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f6>
 80289e2:	1931      	adds	r1, r6, r4
 80289e4:	5d36      	ldrb	r6, [r6, r4]
 80289e6:	7849      	ldrb	r1, [r1, #1]
 80289e8:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 80289ec:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80289f0:	9609      	str	r6, [sp, #36]	; 0x24
 80289f2:	ea4f 6916 	mov.w	r9, r6, lsr #24
 80289f6:	910e      	str	r1, [sp, #56]	; 0x38
 80289f8:	0e0e      	lsrs	r6, r1, #24
 80289fa:	b292      	uxth	r2, r2
 80289fc:	b280      	uxth	r0, r0
 80289fe:	fb02 fa00 	mul.w	sl, r2, r0
 8028a02:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8028a06:	0112      	lsls	r2, r2, #4
 8028a08:	eba2 080a 	sub.w	r8, r2, sl
 8028a0c:	b280      	uxth	r0, r0
 8028a0e:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8028a12:	fa1f f888 	uxth.w	r8, r8
 8028a16:	1a09      	subs	r1, r1, r0
 8028a18:	b289      	uxth	r1, r1
 8028a1a:	fb08 f20e 	mul.w	r2, r8, lr
 8028a1e:	fb01 2207 	mla	r2, r1, r7, r2
 8028a22:	fb00 2209 	mla	r2, r0, r9, r2
 8028a26:	fb0a 2206 	mla	r2, sl, r6, r2
 8028a2a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8028a2e:	9213      	str	r2, [sp, #76]	; 0x4c
 8028a30:	2a00      	cmp	r2, #0
 8028a32:	f000 80de 	beq.w	8028bf2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c6>
 8028a36:	2fff      	cmp	r7, #255	; 0xff
 8028a38:	d01a      	beq.n	8028a70 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x544>
 8028a3a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8028a3e:	fb07 fc0c 	mul.w	ip, r7, ip
 8028a42:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028a46:	435f      	muls	r7, r3
 8028a48:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8028a4c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028a50:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8028a54:	4463      	add	r3, ip
 8028a56:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8028a5a:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8028a5e:	0a1b      	lsrs	r3, r3, #8
 8028a60:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028a64:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028a68:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8028a6c:	ea43 030c 	orr.w	r3, r3, ip
 8028a70:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8028a74:	d01f      	beq.n	8028ab6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58a>
 8028a76:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8028a78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8028a7a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8028a7e:	fb0e f707 	mul.w	r7, lr, r7
 8028a82:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8028a86:	fb0e fe0c 	mul.w	lr, lr, ip
 8028a8a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028a8e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028a92:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8028a96:	44bc      	add	ip, r7
 8028a98:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8028a9c:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8028aa0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028aa4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028aa8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028aac:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8028ab0:	ea4c 020e 	orr.w	r2, ip, lr
 8028ab4:	920d      	str	r2, [sp, #52]	; 0x34
 8028ab6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8028aba:	d01e      	beq.n	8028afa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5ce>
 8028abc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028abe:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8028ac2:	fb09 fe0e 	mul.w	lr, r9, lr
 8028ac6:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8028aca:	fb09 f907 	mul.w	r9, r9, r7
 8028ace:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8028ad2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028ad6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8028ada:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8028ade:	44f4      	add	ip, lr
 8028ae0:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8028ae4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028ae8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028aec:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028af0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8028af4:	ea4c 0209 	orr.w	r2, ip, r9
 8028af8:	9209      	str	r2, [sp, #36]	; 0x24
 8028afa:	2eff      	cmp	r6, #255	; 0xff
 8028afc:	d01c      	beq.n	8028b38 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60c>
 8028afe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8028b00:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8028b04:	fb06 fe0e 	mul.w	lr, r6, lr
 8028b08:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8028b0c:	437e      	muls	r6, r7
 8028b0e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8028b12:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028b16:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8028b1a:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8028b1e:	44f4      	add	ip, lr
 8028b20:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8028b24:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028b28:	0a36      	lsrs	r6, r6, #8
 8028b2a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028b2e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8028b32:	ea4c 0206 	orr.w	r2, ip, r6
 8028b36:	920e      	str	r2, [sp, #56]	; 0x38
 8028b38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8028b3a:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8028b3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028b40:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8028b44:	fb08 f606 	mul.w	r6, r8, r6
 8028b48:	fb01 6607 	mla	r6, r1, r7, r6
 8028b4c:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8028b50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8028b52:	fb00 6607 	mla	r6, r0, r7, r6
 8028b56:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8028b5a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8028b5c:	fb0a 6607 	mla	r6, sl, r7, r6
 8028b60:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8028b64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028b66:	fb08 f807 	mul.w	r8, r8, r7
 8028b6a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8028b6e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028b72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8028b74:	fb01 8303 	mla	r3, r1, r3, r8
 8028b78:	fb00 330c 	mla	r3, r0, ip, r3
 8028b7c:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8028b80:	fb0a 3e0e 	mla	lr, sl, lr, r3
 8028b84:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8028b86:	f8bb 3000 	ldrh.w	r3, [fp]
 8028b8a:	43d2      	mvns	r2, r2
 8028b8c:	1218      	asrs	r0, r3, #8
 8028b8e:	b2d2      	uxtb	r2, r2
 8028b90:	0a36      	lsrs	r6, r6, #8
 8028b92:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028b96:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8028b9a:	4350      	muls	r0, r2
 8028b9c:	10d9      	asrs	r1, r3, #3
 8028b9e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8028ba2:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8028ba6:	00db      	lsls	r3, r3, #3
 8028ba8:	ea46 060e 	orr.w	r6, r6, lr
 8028bac:	1c47      	adds	r7, r0, #1
 8028bae:	b2db      	uxtb	r3, r3
 8028bb0:	4353      	muls	r3, r2
 8028bb2:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 8028bb6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8028bba:	0c37      	lsrs	r7, r6, #16
 8028bbc:	4351      	muls	r1, r2
 8028bbe:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 8028bc2:	4a1d      	ldr	r2, [pc, #116]	; (8028c38 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70c>)
 8028bc4:	1c5f      	adds	r7, r3, #1
 8028bc6:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8028bca:	b2f7      	uxtb	r7, r6
 8028bcc:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8028bd0:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8028bd4:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
 8028bd8:	1c4b      	adds	r3, r1, #1
 8028bda:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8028bde:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8028be2:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 8028be6:	00f6      	lsls	r6, r6, #3
 8028be8:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8028bec:	4330      	orrs	r0, r6
 8028bee:	f8ab 0000 	strh.w	r0, [fp]
 8028bf2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8028bf4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8028bf6:	4413      	add	r3, r2
 8028bf8:	9329      	str	r3, [sp, #164]	; 0xa4
 8028bfa:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8028bfc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8028bfe:	4413      	add	r3, r2
 8028c00:	932a      	str	r3, [sp, #168]	; 0xa8
 8028c02:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8028c04:	3b01      	subs	r3, #1
 8028c06:	f10b 0b02 	add.w	fp, fp, #2
 8028c0a:	9310      	str	r3, [sp, #64]	; 0x40
 8028c0c:	e4ee      	b.n	80285ec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc0>
 8028c0e:	b158      	cbz	r0, 8028c28 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6fc>
 8028c10:	5d31      	ldrb	r1, [r6, r4]
 8028c12:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8028c16:	9109      	str	r1, [sp, #36]	; 0x24
 8028c18:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8028c1c:	26ff      	movs	r6, #255	; 0xff
 8028c1e:	46b6      	mov	lr, r6
 8028c20:	e6eb      	b.n	80289fa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ce>
 8028c22:	26ff      	movs	r6, #255	; 0xff
 8028c24:	46b1      	mov	r9, r6
 8028c26:	e6e8      	b.n	80289fa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ce>
 8028c28:	26ff      	movs	r6, #255	; 0xff
 8028c2a:	46b1      	mov	r9, r6
 8028c2c:	e7f7      	b.n	8028c1e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f2>
 8028c2e:	b017      	add	sp, #92	; 0x5c
 8028c30:	ecbd 8b08 	vpop	{d8-d11}
 8028c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028c38:	fffff800 	.word	0xfffff800

08028c3c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8028c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028c40:	b087      	sub	sp, #28
 8028c42:	e9dd e012 	ldrd	lr, r0, [sp, #72]	; 0x48
 8028c46:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
 8028c4a:	9105      	str	r1, [sp, #20]
 8028c4c:	fb00 e604 	mla	r6, r0, r4, lr
 8028c50:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 8028c54:	9102      	str	r1, [sp, #8]
 8028c56:	eb02 0146 	add.w	r1, r2, r6, lsl #1
 8028c5a:	9103      	str	r1, [sp, #12]
 8028c5c:	9905      	ldr	r1, [sp, #20]
 8028c5e:	f9bd 7044 	ldrsh.w	r7, [sp, #68]	; 0x44
 8028c62:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8028c66:	8809      	ldrh	r1, [r1, #0]
 8028c68:	2800      	cmp	r0, #0
 8028c6a:	eb03 0a06 	add.w	sl, r3, r6
 8028c6e:	f2c0 80ca 	blt.w	8028e06 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ca>
 8028c72:	4287      	cmp	r7, r0
 8028c74:	f340 80c7 	ble.w	8028e06 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ca>
 8028c78:	f1be 0f00 	cmp.w	lr, #0
 8028c7c:	f2c0 80bf 	blt.w	8028dfe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c2>
 8028c80:	4574      	cmp	r4, lr
 8028c82:	f340 80bc 	ble.w	8028dfe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c2>
 8028c86:	f813 c006 	ldrb.w	ip, [r3, r6]
 8028c8a:	f832 9016 	ldrh.w	r9, [r2, r6, lsl #1]
 8028c8e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8028c92:	d01c      	beq.n	8028cce <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x92>
 8028c94:	f429 66fc 	bic.w	r6, r9, #2016	; 0x7e0
 8028c98:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8028c9c:	4372      	muls	r2, r6
 8028c9e:	f64f 081f 	movw	r8, #63519	; 0xf81f
 8028ca2:	ea08 1352 	and.w	r3, r8, r2, lsr #5
 8028ca6:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8028caa:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8028cae:	fb0c f609 	mul.w	r6, ip, r9
 8028cb2:	eb03 0902 	add.w	r9, r3, r2
 8028cb6:	ea08 1959 	and.w	r9, r8, r9, lsr #5
 8028cba:	f106 0820 	add.w	r8, r6, #32
 8028cbe:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 8028cc2:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8028cc6:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8028cca:	ea49 0908 	orr.w	r9, r9, r8
 8028cce:	fa1f f989 	uxth.w	r9, r9
 8028cd2:	f11e 0301 	adds.w	r3, lr, #1
 8028cd6:	f100 809b 	bmi.w	8028e10 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d4>
 8028cda:	429c      	cmp	r4, r3
 8028cdc:	f340 8098 	ble.w	8028e10 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d4>
 8028ce0:	2d00      	cmp	r5, #0
 8028ce2:	f000 8095 	beq.w	8028e10 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d4>
 8028ce6:	f89a 6001 	ldrb.w	r6, [sl, #1]
 8028cea:	9b03      	ldr	r3, [sp, #12]
 8028cec:	2eff      	cmp	r6, #255	; 0xff
 8028cee:	885b      	ldrh	r3, [r3, #2]
 8028cf0:	d01b      	beq.n	8028d2a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xee>
 8028cf2:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 8028cf6:	ea4f 08e6 	mov.w	r8, r6, asr #3
 8028cfa:	fb08 f202 	mul.w	r2, r8, r2
 8028cfe:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028d02:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8028d06:	fb06 f803 	mul.w	r8, r6, r3
 8028d0a:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 8028d0e:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8028d12:	441a      	add	r2, r3
 8028d14:	f108 0320 	add.w	r3, r8, #32
 8028d18:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8028d1c:	0a1b      	lsrs	r3, r3, #8
 8028d1e:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 8028d22:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028d26:	ea4b 0303 	orr.w	r3, fp, r3
 8028d2a:	b29b      	uxth	r3, r3
 8028d2c:	9301      	str	r3, [sp, #4]
 8028d2e:	3001      	adds	r0, #1
 8028d30:	d474      	bmi.n	8028e1c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 8028d32:	4287      	cmp	r7, r0
 8028d34:	dd72      	ble.n	8028e1c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 8028d36:	9a02      	ldr	r2, [sp, #8]
 8028d38:	2a00      	cmp	r2, #0
 8028d3a:	f000 8121 	beq.w	8028f80 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x344>
 8028d3e:	f1be 0f00 	cmp.w	lr, #0
 8028d42:	db68      	blt.n	8028e16 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1da>
 8028d44:	4574      	cmp	r4, lr
 8028d46:	dd66      	ble.n	8028e16 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1da>
 8028d48:	f81a 7004 	ldrb.w	r7, [sl, r4]
 8028d4c:	9a03      	ldr	r2, [sp, #12]
 8028d4e:	2fff      	cmp	r7, #255	; 0xff
 8028d50:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
 8028d54:	d01c      	beq.n	8028d90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x154>
 8028d56:	f420 62fc 	bic.w	r2, r0, #2016	; 0x7e0
 8028d5a:	ea4f 08e7 	mov.w	r8, r7, asr #3
 8028d5e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028d62:	fb07 fb00 	mul.w	fp, r7, r0
 8028d66:	fb08 f802 	mul.w	r8, r8, r2
 8028d6a:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8028d6e:	ea00 1258 	and.w	r2, r0, r8, lsr #5
 8028d72:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8028d76:	4490      	add	r8, r2
 8028d78:	f10b 0220 	add.w	r2, fp, #32
 8028d7c:	eb02 2b1b 	add.w	fp, r2, fp, lsr #8
 8028d80:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8028d84:	ea00 1058 	and.w	r0, r0, r8, lsr #5
 8028d88:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8028d8c:	ea40 000b 	orr.w	r0, r0, fp
 8028d90:	b280      	uxth	r0, r0
 8028d92:	f11e 0e01 	adds.w	lr, lr, #1
 8028d96:	d446      	bmi.n	8028e26 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ea>
 8028d98:	4574      	cmp	r4, lr
 8028d9a:	dd44      	ble.n	8028e26 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ea>
 8028d9c:	2d00      	cmp	r5, #0
 8028d9e:	d045      	beq.n	8028e2c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1f0>
 8028da0:	1c62      	adds	r2, r4, #1
 8028da2:	9b03      	ldr	r3, [sp, #12]
 8028da4:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8028da8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8028dac:	2cff      	cmp	r4, #255	; 0xff
 8028dae:	d01c      	beq.n	8028dea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ae>
 8028db0:	f422 6efc 	bic.w	lr, r2, #2016	; 0x7e0
 8028db4:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8028db8:	fb08 fe0e 	mul.w	lr, r8, lr
 8028dbc:	f64f 0a1f 	movw	sl, #63519	; 0xf81f
 8028dc0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028dc4:	fb04 f802 	mul.w	r8, r4, r2
 8028dc8:	ea0a 125e 	and.w	r2, sl, lr, lsr #5
 8028dcc:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8028dd0:	4472      	add	r2, lr
 8028dd2:	ea0a 1252 	and.w	r2, sl, r2, lsr #5
 8028dd6:	f108 0a20 	add.w	sl, r8, #32
 8028dda:	eb0a 2a18 	add.w	sl, sl, r8, lsr #8
 8028dde:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028de2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8028de6:	ea42 020a 	orr.w	r2, r2, sl
 8028dea:	b292      	uxth	r2, r2
 8028dec:	2d0f      	cmp	r5, #15
 8028dee:	d91f      	bls.n	8028e30 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1f4>
 8028df0:	4b67      	ldr	r3, [pc, #412]	; (8028f90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x354>)
 8028df2:	4a68      	ldr	r2, [pc, #416]	; (8028f94 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x358>)
 8028df4:	4868      	ldr	r0, [pc, #416]	; (8028f98 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x35c>)
 8028df6:	f240 210d 	movw	r1, #525	; 0x20d
 8028dfa:	f005 fa6d 	bl	802e2d8 <__assert_func>
 8028dfe:	4689      	mov	r9, r1
 8028e00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8028e04:	e765      	b.n	8028cd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x96>
 8028e06:	26ff      	movs	r6, #255	; 0xff
 8028e08:	9101      	str	r1, [sp, #4]
 8028e0a:	4689      	mov	r9, r1
 8028e0c:	46b4      	mov	ip, r6
 8028e0e:	e78e      	b.n	8028d2e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xf2>
 8028e10:	9101      	str	r1, [sp, #4]
 8028e12:	26ff      	movs	r6, #255	; 0xff
 8028e14:	e78b      	b.n	8028d2e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xf2>
 8028e16:	4608      	mov	r0, r1
 8028e18:	27ff      	movs	r7, #255	; 0xff
 8028e1a:	e7ba      	b.n	8028d92 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x156>
 8028e1c:	24ff      	movs	r4, #255	; 0xff
 8028e1e:	460a      	mov	r2, r1
 8028e20:	4608      	mov	r0, r1
 8028e22:	4627      	mov	r7, r4
 8028e24:	e7e2      	b.n	8028dec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 8028e26:	460a      	mov	r2, r1
 8028e28:	24ff      	movs	r4, #255	; 0xff
 8028e2a:	e7df      	b.n	8028dec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 8028e2c:	460a      	mov	r2, r1
 8028e2e:	24ff      	movs	r4, #255	; 0xff
 8028e30:	9b02      	ldr	r3, [sp, #8]
 8028e32:	2b0f      	cmp	r3, #15
 8028e34:	d8dc      	bhi.n	8028df0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b4>
 8028e36:	f8bd e008 	ldrh.w	lr, [sp, #8]
 8028e3a:	fa1f f885 	uxth.w	r8, r5
 8028e3e:	fb08 fa0e 	mul.w	sl, r8, lr
 8028e42:	ea4f 1308 	mov.w	r3, r8, lsl #4
 8028e46:	ebca 1e0e 	rsb	lr, sl, lr, lsl #4
 8028e4a:	9303      	str	r3, [sp, #12]
 8028e4c:	fa1f f38e 	uxth.w	r3, lr
 8028e50:	9304      	str	r3, [sp, #16]
 8028e52:	ea4f 4809 	mov.w	r8, r9, lsl #16
 8028e56:	9b02      	ldr	r3, [sp, #8]
 8028e58:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8028e5c:	f008 68fc 	and.w	r8, r8, #132120576	; 0x7e00000
 8028e60:	fb15 fe03 	smulbb	lr, r5, r3
 8028e64:	ea48 0809 	orr.w	r8, r8, r9
 8028e68:	f1c3 0910 	rsb	r9, r3, #16
 8028e6c:	9b01      	ldr	r3, [sp, #4]
 8028e6e:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8028e72:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8028e76:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8028e7a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8028e7e:	eba9 0905 	sub.w	r9, r9, r5
 8028e82:	ea4b 0303 	orr.w	r3, fp, r3
 8028e86:	ebce 0545 	rsb	r5, lr, r5, lsl #1
 8028e8a:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8028e8e:	eb0e 0949 	add.w	r9, lr, r9, lsl #1
 8028e92:	436b      	muls	r3, r5
 8028e94:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8028e98:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8028e9c:	ea4b 0202 	orr.w	r2, fp, r2
 8028ea0:	fb09 3308 	mla	r3, r9, r8, r3
 8028ea4:	fb0e 3302 	mla	r3, lr, r2, r3
 8028ea8:	0402      	lsls	r2, r0, #16
 8028eaa:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8028eae:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8028eb2:	4310      	orrs	r0, r2
 8028eb4:	9a02      	ldr	r2, [sp, #8]
 8028eb6:	ebce 0e42 	rsb	lr, lr, r2, lsl #1
 8028eba:	fb0e 3e00 	mla	lr, lr, r0, r3
 8028ebe:	9803      	ldr	r0, [sp, #12]
 8028ec0:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 8028ec4:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8028ec8:	9804      	ldr	r0, [sp, #16]
 8028eca:	1a2d      	subs	r5, r5, r0
 8028ecc:	9803      	ldr	r0, [sp, #12]
 8028ece:	eba0 000a 	sub.w	r0, r0, sl
 8028ed2:	b280      	uxth	r0, r0
 8028ed4:	b2ad      	uxth	r5, r5
 8028ed6:	4346      	muls	r6, r0
 8028ed8:	9804      	ldr	r0, [sp, #16]
 8028eda:	fb0c 6605 	mla	r6, ip, r5, r6
 8028ede:	fb00 6707 	mla	r7, r0, r7, r6
 8028ee2:	fb0a 7404 	mla	r4, sl, r4, r7
 8028ee6:	b292      	uxth	r2, r2
 8028ee8:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8028eec:	4354      	muls	r4, r2
 8028eee:	ea4f 535e 	mov.w	r3, lr, lsr #21
 8028ef2:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8028ef6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028efa:	f104 0a01 	add.w	sl, r4, #1
 8028efe:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8028f02:	ea43 0e0e 	orr.w	lr, r3, lr
 8028f06:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8028f0a:	fa1f f38e 	uxth.w	r3, lr
 8028f0e:	1208      	asrs	r0, r1, #8
 8028f10:	ea6f 2414 	mvn.w	r4, r4, lsr #8
 8028f14:	b2e4      	uxtb	r4, r4
 8028f16:	121d      	asrs	r5, r3, #8
 8028f18:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8028f1c:	fb10 f004 	smulbb	r0, r0, r4
 8028f20:	10ce      	asrs	r6, r1, #3
 8028f22:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8028f26:	00c9      	lsls	r1, r1, #3
 8028f28:	fb05 0502 	mla	r5, r5, r2, r0
 8028f2c:	b2c9      	uxtb	r1, r1
 8028f2e:	10d8      	asrs	r0, r3, #3
 8028f30:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8028f34:	00db      	lsls	r3, r3, #3
 8028f36:	fb16 f604 	smulbb	r6, r6, r4
 8028f3a:	b2db      	uxtb	r3, r3
 8028f3c:	fb11 f404 	smulbb	r4, r1, r4
 8028f40:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8028f44:	fb00 6002 	mla	r0, r0, r2, r6
 8028f48:	fb03 4202 	mla	r2, r3, r2, r4
 8028f4c:	b2ad      	uxth	r5, r5
 8028f4e:	b292      	uxth	r2, r2
 8028f50:	1c6b      	adds	r3, r5, #1
 8028f52:	1c51      	adds	r1, r2, #1
 8028f54:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 8028f58:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8028f5c:	b280      	uxth	r0, r0
 8028f5e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8028f62:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8028f66:	4313      	orrs	r3, r2
 8028f68:	1c42      	adds	r2, r0, #1
 8028f6a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8028f6e:	0940      	lsrs	r0, r0, #5
 8028f70:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028f74:	9a05      	ldr	r2, [sp, #20]
 8028f76:	4303      	orrs	r3, r0
 8028f78:	8013      	strh	r3, [r2, #0]
 8028f7a:	b007      	add	sp, #28
 8028f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028f80:	2d0f      	cmp	r5, #15
 8028f82:	f63f af35 	bhi.w	8028df0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b4>
 8028f86:	24ff      	movs	r4, #255	; 0xff
 8028f88:	460a      	mov	r2, r1
 8028f8a:	4608      	mov	r0, r1
 8028f8c:	4627      	mov	r7, r4
 8028f8e:	e752      	b.n	8028e36 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1fa>
 8028f90:	080343dc 	.word	0x080343dc
 8028f94:	08034935 	.word	0x08034935
 8028f98:	08034464 	.word	0x08034464

08028f9c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8028f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028fa0:	ed2d 8b08 	vpush	{d8-d11}
 8028fa4:	b099      	sub	sp, #100	; 0x64
 8028fa6:	eeb0 aa40 	vmov.f32	s20, s0
 8028faa:	9308      	str	r3, [sp, #32]
 8028fac:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 8028fb0:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
 8028fb2:	930b      	str	r3, [sp, #44]	; 0x2c
 8028fb4:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 8028fb8:	9314      	str	r3, [sp, #80]	; 0x50
 8028fba:	9113      	str	r1, [sp, #76]	; 0x4c
 8028fbc:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8028fc0:	9017      	str	r0, [sp, #92]	; 0x5c
 8028fc2:	6870      	ldr	r0, [r6, #4]
 8028fc4:	9216      	str	r2, [sp, #88]	; 0x58
 8028fc6:	fb00 1303 	mla	r3, r0, r3, r1
 8028fca:	6831      	ldr	r1, [r6, #0]
 8028fcc:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8028fce:	f9bd 50c8 	ldrsh.w	r5, [sp, #200]	; 0xc8
 8028fd2:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8028fd6:	9309      	str	r3, [sp, #36]	; 0x24
 8028fd8:	6813      	ldr	r3, [r2, #0]
 8028fda:	930c      	str	r3, [sp, #48]	; 0x30
 8028fdc:	6853      	ldr	r3, [r2, #4]
 8028fde:	930d      	str	r3, [sp, #52]	; 0x34
 8028fe0:	006b      	lsls	r3, r5, #1
 8028fe2:	9312      	str	r3, [sp, #72]	; 0x48
 8028fe4:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8028fe8:	930a      	str	r3, [sp, #40]	; 0x28
 8028fea:	eef0 9a60 	vmov.f32	s19, s1
 8028fee:	eeb0 9a41 	vmov.f32	s18, s2
 8028ff2:	eeb0 8a62 	vmov.f32	s16, s5
 8028ff6:	eef0 8a43 	vmov.f32	s17, s6
 8028ffa:	eef0 ba44 	vmov.f32	s23, s8
 8028ffe:	eeb0 ba64 	vmov.f32	s22, s9
 8029002:	eef0 aa45 	vmov.f32	s21, s10
 8029006:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8029008:	2b00      	cmp	r3, #0
 802900a:	dc03      	bgt.n	8029014 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 802900c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802900e:	2b00      	cmp	r3, #0
 8029010:	f340 83bf 	ble.w	8029792 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7f6>
 8029014:	9b08      	ldr	r3, [sp, #32]
 8029016:	2b00      	cmp	r3, #0
 8029018:	f340 81cb 	ble.w	80293b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x416>
 802901c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802901e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029020:	1412      	asrs	r2, r2, #16
 8029022:	ea4f 4323 	mov.w	r3, r3, asr #16
 8029026:	d42f      	bmi.n	8029088 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 8029028:	1c51      	adds	r1, r2, #1
 802902a:	428d      	cmp	r5, r1
 802902c:	dd2f      	ble.n	802908e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 802902e:	2b00      	cmp	r3, #0
 8029030:	db2d      	blt.n	802908e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8029032:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8029034:	1c59      	adds	r1, r3, #1
 8029036:	4288      	cmp	r0, r1
 8029038:	dd29      	ble.n	802908e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 802903a:	9b08      	ldr	r3, [sp, #32]
 802903c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802903e:	992b      	ldr	r1, [sp, #172]	; 0xac
 8029040:	3b01      	subs	r3, #1
 8029042:	fb02 1203 	mla	r2, r2, r3, r1
 8029046:	1412      	asrs	r2, r2, #16
 8029048:	d42b      	bmi.n	80290a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x106>
 802904a:	3201      	adds	r2, #1
 802904c:	4295      	cmp	r5, r2
 802904e:	dd28      	ble.n	80290a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x106>
 8029050:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8029052:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8029054:	fb02 1303 	mla	r3, r2, r3, r1
 8029058:	141b      	asrs	r3, r3, #16
 802905a:	d422      	bmi.n	80290a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x106>
 802905c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802905e:	3301      	adds	r3, #1
 8029060:	429a      	cmp	r2, r3
 8029062:	dd1e      	ble.n	80290a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x106>
 8029064:	9b08      	ldr	r3, [sp, #32]
 8029066:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 802906a:	9315      	str	r3, [sp, #84]	; 0x54
 802906c:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8029070:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8029072:	2b00      	cmp	r3, #0
 8029074:	f300 8217 	bgt.w	80294a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50a>
 8029078:	9b08      	ldr	r3, [sp, #32]
 802907a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802907e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029080:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8029084:	9309      	str	r3, [sp, #36]	; 0x24
 8029086:	e196      	b.n	80293b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41a>
 8029088:	1c57      	adds	r7, r2, #1
 802908a:	f040 8183 	bne.w	8029394 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 802908e:	42aa      	cmp	r2, r5
 8029090:	f280 8180 	bge.w	8029394 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8029094:	1c5e      	adds	r6, r3, #1
 8029096:	f2c0 817d 	blt.w	8029394 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 802909a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802909c:	4293      	cmp	r3, r2
 802909e:	f280 8179 	bge.w	8029394 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 80290a2:	9b08      	ldr	r3, [sp, #32]
 80290a4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80290a6:	9315      	str	r3, [sp, #84]	; 0x54
 80290a8:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80290ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80290ae:	2b00      	cmp	r3, #0
 80290b0:	dde2      	ble.n	8029078 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 80290b2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80290b4:	1419      	asrs	r1, r3, #16
 80290b6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80290b8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80290bc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80290be:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 80290c2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80290c4:	141b      	asrs	r3, r3, #16
 80290c6:	f100 81d3 	bmi.w	8029470 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 80290ca:	1c58      	adds	r0, r3, #1
 80290cc:	4285      	cmp	r5, r0
 80290ce:	f340 81d1 	ble.w	8029474 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d8>
 80290d2:	2900      	cmp	r1, #0
 80290d4:	f2c0 81ce 	blt.w	8029474 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d8>
 80290d8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80290da:	1c48      	adds	r0, r1, #1
 80290dc:	4284      	cmp	r4, r0
 80290de:	f340 81c9 	ble.w	8029474 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d8>
 80290e2:	fb01 3105 	mla	r1, r1, r5, r3
 80290e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80290e8:	fa1f fe82 	uxth.w	lr, r2
 80290ec:	eb03 0a01 	add.w	sl, r3, r1
 80290f0:	ea4f 100e 	mov.w	r0, lr, lsl #4
 80290f4:	f813 9001 	ldrb.w	r9, [r3, r1]
 80290f8:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80290fc:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8029100:	b29b      	uxth	r3, r3
 8029102:	f1bc 0f00 	cmp.w	ip, #0
 8029106:	f000 8195 	beq.w	8029434 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x498>
 802910a:	f81a 4005 	ldrb.w	r4, [sl, r5]
 802910e:	940e      	str	r4, [sp, #56]	; 0x38
 8029110:	eb0a 0b05 	add.w	fp, sl, r5
 8029114:	fa1f fa8c 	uxth.w	sl, ip
 8029118:	fb0a fe0e 	mul.w	lr, sl, lr
 802911c:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8029120:	fa1f fa8a 	uxth.w	sl, sl
 8029124:	eba0 000e 	sub.w	r0, r0, lr
 8029128:	eba3 030a 	sub.w	r3, r3, sl
 802912c:	b280      	uxth	r0, r0
 802912e:	fb08 f000 	mul.w	r0, r8, r0
 8029132:	b29b      	uxth	r3, r3
 8029134:	fb09 0303 	mla	r3, r9, r3, r0
 8029138:	980e      	ldr	r0, [sp, #56]	; 0x38
 802913a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802913e:	940f      	str	r4, [sp, #60]	; 0x3c
 8029140:	fb0a 3300 	mla	r3, sl, r0, r3
 8029144:	fb0e 3304 	mla	r3, lr, r4, r3
 8029148:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802914c:	2b00      	cmp	r3, #0
 802914e:	f000 8114 	beq.w	802937a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 8029152:	980c      	ldr	r0, [sp, #48]	; 0x30
 8029154:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8029156:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802915a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 802915e:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 8029162:	f000 816c 	beq.w	802943e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8029166:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 802916a:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802916e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8029172:	fb09 f101 	mul.w	r1, r9, r1
 8029176:	fb0a fe0e 	mul.w	lr, sl, lr
 802917a:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 802917e:	f101 0b20 	add.w	fp, r1, #32
 8029182:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8029186:	44ce      	add	lr, r9
 8029188:	eb0b 2911 	add.w	r9, fp, r1, lsr #8
 802918c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8029190:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8029194:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8029198:	ea4e 0909 	orr.w	r9, lr, r9
 802919c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80291a0:	8841      	ldrh	r1, [r0, #2]
 80291a2:	d019      	beq.n	80291d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 80291a4:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80291a8:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 80291ac:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80291b0:	fb0a fe0e 	mul.w	lr, sl, lr
 80291b4:	fb08 f801 	mul.w	r8, r8, r1
 80291b8:	f108 0b20 	add.w	fp, r8, #32
 80291bc:	ea06 115e 	and.w	r1, r6, lr, lsr #5
 80291c0:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80291c4:	448e      	add	lr, r1
 80291c6:	eb0b 2118 	add.w	r1, fp, r8, lsr #8
 80291ca:	0a09      	lsrs	r1, r1, #8
 80291cc:	ea06 1a5e 	and.w	sl, r6, lr, lsr #5
 80291d0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80291d4:	ea4a 0101 	orr.w	r1, sl, r1
 80291d8:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 80291dc:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80291e0:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80291e4:	ea4e 0909 	orr.w	r9, lr, r9
 80291e8:	ea4f 4e01 	mov.w	lr, r1, lsl #16
 80291ec:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80291f0:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80291f4:	ea4e 0e01 	orr.w	lr, lr, r1
 80291f8:	f1bc 0f00 	cmp.w	ip, #0
 80291fc:	f000 8121 	beq.w	8029442 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a6>
 8029200:	9912      	ldr	r1, [sp, #72]	; 0x48
 8029202:	eb00 0801 	add.w	r8, r0, r1
 8029206:	5a41      	ldrh	r1, [r0, r1]
 8029208:	980e      	ldr	r0, [sp, #56]	; 0x38
 802920a:	28ff      	cmp	r0, #255	; 0xff
 802920c:	d019      	beq.n	8029242 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 802920e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8029210:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8029214:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8029218:	fb04 fb01 	mul.w	fp, r4, r1
 802921c:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8029220:	fb0a fa00 	mul.w	sl, sl, r0
 8029224:	f10b 0020 	add.w	r0, fp, #32
 8029228:	ea06 115a 	and.w	r1, r6, sl, lsr #5
 802922c:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8029230:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8029234:	4451      	add	r1, sl
 8029236:	0a00      	lsrs	r0, r0, #8
 8029238:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 802923c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8029240:	4301      	orrs	r1, r0
 8029242:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8029244:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 8029248:	2cff      	cmp	r4, #255	; 0xff
 802924a:	d01a      	beq.n	8029282 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e6>
 802924c:	f420 68fc 	bic.w	r8, r0, #2016	; 0x7e0
 8029250:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8029254:	fb04 fb00 	mul.w	fp, r4, r0
 8029258:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 802925c:	fb0a fa08 	mul.w	sl, sl, r8
 8029260:	f10b 0820 	add.w	r8, fp, #32
 8029264:	ea06 105a 	and.w	r0, r6, sl, lsr #5
 8029268:	eb08 281b 	add.w	r8, r8, fp, lsr #8
 802926c:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8029270:	4450      	add	r0, sl
 8029272:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8029276:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 802927a:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 802927e:	ea40 0008 	orr.w	r0, r0, r8
 8029282:	fb1c f802 	smulbb	r8, ip, r2
 8029286:	ea4f 08e8 	mov.w	r8, r8, asr #3
 802928a:	f1cc 0a10 	rsb	sl, ip, #16
 802928e:	ebaa 0a02 	sub.w	sl, sl, r2
 8029292:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8029296:	ebc8 0242 	rsb	r2, r8, r2, lsl #1
 802929a:	eb08 0a4a 	add.w	sl, r8, sl, lsl #1
 802929e:	fb0e f202 	mul.w	r2, lr, r2
 80292a2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80292a6:	ea4f 4e00 	mov.w	lr, r0, lsl #16
 80292aa:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80292ae:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 80292b2:	fb09 220a 	mla	r2, r9, sl, r2
 80292b6:	ea4b 0101 	orr.w	r1, fp, r1
 80292ba:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80292be:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80292c2:	fb0c 2201 	mla	r2, ip, r1, r2
 80292c6:	ea4e 0000 	orr.w	r0, lr, r0
 80292ca:	fb08 2800 	mla	r8, r8, r0, r2
 80292ce:	ea4f 5258 	mov.w	r2, r8, lsr #21
 80292d2:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80292d6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80292da:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 80292de:	ea42 0808 	orr.w	r8, r2, r8
 80292e2:	fa1f f288 	uxth.w	r2, r8
 80292e6:	2bff      	cmp	r3, #255	; 0xff
 80292e8:	d103      	bne.n	80292f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 80292ea:	9914      	ldr	r1, [sp, #80]	; 0x50
 80292ec:	29ff      	cmp	r1, #255	; 0xff
 80292ee:	f000 80bd 	beq.w	802946c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d0>
 80292f2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80292f4:	f8b7 c000 	ldrh.w	ip, [r7]
 80292f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80292fa:	434b      	muls	r3, r1
 80292fc:	f103 0e01 	add.w	lr, r3, #1
 8029300:	eb0e 2323 	add.w	r3, lr, r3, asr #8
 8029304:	ea6f 2e23 	mvn.w	lr, r3, asr #8
 8029308:	ea4f 202c 	mov.w	r0, ip, asr #8
 802930c:	fa5f fe8e 	uxtb.w	lr, lr
 8029310:	1213      	asrs	r3, r2, #8
 8029312:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8029316:	fb10 f00e 	smulbb	r0, r0, lr
 802931a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 802931e:	fb03 0301 	mla	r3, r3, r1, r0
 8029322:	b298      	uxth	r0, r3
 8029324:	ea4f 03ec 	mov.w	r3, ip, asr #3
 8029328:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802932c:	10d1      	asrs	r1, r2, #3
 802932e:	fa5f fc8c 	uxtb.w	ip, ip
 8029332:	00d2      	lsls	r2, r2, #3
 8029334:	fb1c fc0e 	smulbb	ip, ip, lr
 8029338:	b2d2      	uxtb	r2, r2
 802933a:	fb02 c204 	mla	r2, r2, r4, ip
 802933e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8029342:	fb13 f30e 	smulbb	r3, r3, lr
 8029346:	b292      	uxth	r2, r2
 8029348:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802934c:	fb01 3104 	mla	r1, r1, r4, r3
 8029350:	f102 0c01 	add.w	ip, r2, #1
 8029354:	1c43      	adds	r3, r0, #1
 8029356:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802935a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802935e:	b289      	uxth	r1, r1
 8029360:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8029364:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8029368:	4313      	orrs	r3, r2
 802936a:	1c4a      	adds	r2, r1, #1
 802936c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8029370:	0949      	lsrs	r1, r1, #5
 8029372:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8029376:	430b      	orrs	r3, r1
 8029378:	803b      	strh	r3, [r7, #0]
 802937a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802937c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802937e:	4413      	add	r3, r2
 8029380:	932b      	str	r3, [sp, #172]	; 0xac
 8029382:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8029384:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8029386:	441a      	add	r2, r3
 8029388:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802938a:	922c      	str	r2, [sp, #176]	; 0xb0
 802938c:	3b01      	subs	r3, #1
 802938e:	3702      	adds	r7, #2
 8029390:	9315      	str	r3, [sp, #84]	; 0x54
 8029392:	e68b      	b.n	80290ac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8029394:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8029396:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8029398:	4413      	add	r3, r2
 802939a:	932b      	str	r3, [sp, #172]	; 0xac
 802939c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802939e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80293a0:	441a      	add	r2, r3
 80293a2:	9b08      	ldr	r3, [sp, #32]
 80293a4:	922c      	str	r2, [sp, #176]	; 0xb0
 80293a6:	3b01      	subs	r3, #1
 80293a8:	9308      	str	r3, [sp, #32]
 80293aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80293ac:	3302      	adds	r3, #2
 80293ae:	9309      	str	r3, [sp, #36]	; 0x24
 80293b0:	e630      	b.n	8029014 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 80293b2:	f47f ae42 	bne.w	802903a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 80293b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80293b8:	2b00      	cmp	r3, #0
 80293ba:	f340 81ea 	ble.w	8029792 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7f6>
 80293be:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80293c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80293c6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80293ca:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80293cc:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80293d0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80293d4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80293d8:	eef0 6a48 	vmov.f32	s13, s16
 80293dc:	ee69 7a27 	vmul.f32	s15, s18, s15
 80293e0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80293e4:	ee37 8a48 	vsub.f32	s16, s14, s16
 80293e8:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 80293ec:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80293f0:	eef0 6a68 	vmov.f32	s13, s17
 80293f4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80293f8:	ee18 2a10 	vmov	r2, s16
 80293fc:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8029400:	fb92 f3f3 	sdiv	r3, r2, r3
 8029404:	ee18 2a90 	vmov	r2, s17
 8029408:	932d      	str	r3, [sp, #180]	; 0xb4
 802940a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802940c:	fb92 f3f3 	sdiv	r3, r2, r3
 8029410:	932e      	str	r3, [sp, #184]	; 0xb8
 8029412:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8029414:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8029416:	3b01      	subs	r3, #1
 8029418:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802941c:	9313      	str	r3, [sp, #76]	; 0x4c
 802941e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8029420:	edcd 6a2c 	vstr	s13, [sp, #176]	; 0xb0
 8029424:	bf08      	it	eq
 8029426:	4613      	moveq	r3, r2
 8029428:	9308      	str	r3, [sp, #32]
 802942a:	eef0 8a67 	vmov.f32	s17, s15
 802942e:	eeb0 8a47 	vmov.f32	s16, s14
 8029432:	e5e8      	b.n	8029006 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8029434:	fb08 f000 	mul.w	r0, r8, r0
 8029438:	fb09 0303 	mla	r3, r9, r3, r0
 802943c:	e684      	b.n	8029148 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ac>
 802943e:	4689      	mov	r9, r1
 8029440:	e6ac      	b.n	802919c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8029442:	f1c2 0010 	rsb	r0, r2, #16
 8029446:	fb0e f202 	mul.w	r2, lr, r2
 802944a:	fb09 2900 	mla	r9, r9, r0, r2
 802944e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8029452:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8029456:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802945a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802945e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8029462:	ea42 0909 	orr.w	r9, r2, r9
 8029466:	fa1f f289 	uxth.w	r2, r9
 802946a:	e73c      	b.n	80292e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34a>
 802946c:	803a      	strh	r2, [r7, #0]
 802946e:	e784      	b.n	802937a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 8029470:	1c5c      	adds	r4, r3, #1
 8029472:	d182      	bne.n	802937a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 8029474:	429d      	cmp	r5, r3
 8029476:	dd80      	ble.n	802937a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 8029478:	1c48      	adds	r0, r1, #1
 802947a:	f6ff af7e 	blt.w	802937a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 802947e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8029480:	4288      	cmp	r0, r1
 8029482:	f77f af7a 	ble.w	802937a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 8029486:	9814      	ldr	r0, [sp, #80]	; 0x50
 8029488:	9302      	str	r3, [sp, #8]
 802948a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802948c:	e9cd 1203 	strd	r1, r2, [sp, #12]
 8029490:	e9cd c005 	strd	ip, r0, [sp, #20]
 8029494:	e9cd 5300 	strd	r5, r3, [sp]
 8029498:	4639      	mov	r1, r7
 802949a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 802949e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80294a0:	f7ff fbcc 	bl	8028c3c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 80294a4:	e769      	b.n	802937a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 80294a6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80294a8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80294ac:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80294ae:	141f      	asrs	r7, r3, #16
 80294b0:	f3c3 3003 	ubfx	r0, r3, #12, #4
 80294b4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80294b6:	141b      	asrs	r3, r3, #16
 80294b8:	fb05 3707 	mla	r7, r5, r7, r3
 80294bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80294be:	fa1f fc82 	uxth.w	ip, r2
 80294c2:	eb03 0a07 	add.w	sl, r3, r7
 80294c6:	ea4f 110c 	mov.w	r1, ip, lsl #4
 80294ca:	f813 9007 	ldrb.w	r9, [r3, r7]
 80294ce:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80294d2:	f5c1 7380 	rsb	r3, r1, #256	; 0x100
 80294d6:	b29b      	uxth	r3, r3
 80294d8:	2800      	cmp	r0, #0
 80294da:	f000 813f 	beq.w	802975c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c0>
 80294de:	f81a 4005 	ldrb.w	r4, [sl, r5]
 80294e2:	9410      	str	r4, [sp, #64]	; 0x40
 80294e4:	eb0a 0b05 	add.w	fp, sl, r5
 80294e8:	fa1f fa80 	uxth.w	sl, r0
 80294ec:	fb0a fc0c 	mul.w	ip, sl, ip
 80294f0:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 80294f4:	fa1f fa8a 	uxth.w	sl, sl
 80294f8:	eba1 010c 	sub.w	r1, r1, ip
 80294fc:	eba3 030a 	sub.w	r3, r3, sl
 8029500:	b289      	uxth	r1, r1
 8029502:	fb08 f101 	mul.w	r1, r8, r1
 8029506:	b29b      	uxth	r3, r3
 8029508:	fb09 1303 	mla	r3, r9, r3, r1
 802950c:	9910      	ldr	r1, [sp, #64]	; 0x40
 802950e:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8029512:	9411      	str	r4, [sp, #68]	; 0x44
 8029514:	fb0a 3301 	mla	r3, sl, r1, r3
 8029518:	fb0c 3304 	mla	r3, ip, r4, r3
 802951c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029520:	2b00      	cmp	r3, #0
 8029522:	f000 810d 	beq.w	8029740 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a4>
 8029526:	990c      	ldr	r1, [sp, #48]	; 0x30
 8029528:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802952a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802952e:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 8029532:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8029536:	f000 8116 	beq.w	8029766 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7ca>
 802953a:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 802953e:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8029542:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8029546:	fb09 f707 	mul.w	r7, r9, r7
 802954a:	fb0a fc0c 	mul.w	ip, sl, ip
 802954e:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8029552:	f107 0b20 	add.w	fp, r7, #32
 8029556:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 802955a:	44cc      	add	ip, r9
 802955c:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8029560:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8029564:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8029568:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802956c:	ea4c 0909 	orr.w	r9, ip, r9
 8029570:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8029574:	884f      	ldrh	r7, [r1, #2]
 8029576:	d019      	beq.n	80295ac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x610>
 8029578:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 802957c:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8029580:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8029584:	fb08 f807 	mul.w	r8, r8, r7
 8029588:	fb0a fc0c 	mul.w	ip, sl, ip
 802958c:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8029590:	f108 0b20 	add.w	fp, r8, #32
 8029594:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8029598:	44bc      	add	ip, r7
 802959a:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 802959e:	0a3f      	lsrs	r7, r7, #8
 80295a0:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80295a4:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80295a8:	ea4c 0707 	orr.w	r7, ip, r7
 80295ac:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 80295b0:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80295b4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80295b8:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80295bc:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80295c0:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80295c4:	ea4c 0909 	orr.w	r9, ip, r9
 80295c8:	ea4a 0707 	orr.w	r7, sl, r7
 80295cc:	2800      	cmp	r0, #0
 80295ce:	f000 80cc 	beq.w	802976a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7ce>
 80295d2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80295d4:	eb01 0c04 	add.w	ip, r1, r4
 80295d8:	f831 8004 	ldrh.w	r8, [r1, r4]
 80295dc:	9910      	ldr	r1, [sp, #64]	; 0x40
 80295de:	29ff      	cmp	r1, #255	; 0xff
 80295e0:	d01a      	beq.n	8029618 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x67c>
 80295e2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80295e4:	f428 61fc 	bic.w	r1, r8, #2016	; 0x7e0
 80295e8:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80295ec:	fb04 fb08 	mul.w	fp, r4, r8
 80295f0:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 80295f4:	fb0a fa01 	mul.w	sl, sl, r1
 80295f8:	f10b 0120 	add.w	r1, fp, #32
 80295fc:	ea06 185a 	and.w	r8, r6, sl, lsr #5
 8029600:	eb01 211b 	add.w	r1, r1, fp, lsr #8
 8029604:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8029608:	44d0      	add	r8, sl
 802960a:	0a09      	lsrs	r1, r1, #8
 802960c:	ea06 1858 	and.w	r8, r6, r8, lsr #5
 8029610:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8029614:	ea48 0801 	orr.w	r8, r8, r1
 8029618:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802961a:	f8bc 1002 	ldrh.w	r1, [ip, #2]
 802961e:	2cff      	cmp	r4, #255	; 0xff
 8029620:	d01a      	beq.n	8029658 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 8029622:	f421 6cfc 	bic.w	ip, r1, #2016	; 0x7e0
 8029626:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802962a:	fb04 fb01 	mul.w	fp, r4, r1
 802962e:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8029632:	fb0a fa0c 	mul.w	sl, sl, ip
 8029636:	f10b 0c20 	add.w	ip, fp, #32
 802963a:	ea06 115a 	and.w	r1, r6, sl, lsr #5
 802963e:	eb0c 2c1b 	add.w	ip, ip, fp, lsr #8
 8029642:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8029646:	4451      	add	r1, sl
 8029648:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802964c:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8029650:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8029654:	ea41 010c 	orr.w	r1, r1, ip
 8029658:	fb10 fc02 	smulbb	ip, r0, r2
 802965c:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8029660:	f1c0 0a10 	rsb	sl, r0, #16
 8029664:	ebaa 0a02 	sub.w	sl, sl, r2
 8029668:	ea4f 4b08 	mov.w	fp, r8, lsl #16
 802966c:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8029670:	437a      	muls	r2, r7
 8029672:	eb0c 0a4a 	add.w	sl, ip, sl, lsl #1
 8029676:	040f      	lsls	r7, r1, #16
 8029678:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802967c:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8029680:	fb09 220a 	mla	r2, r9, sl, r2
 8029684:	ea4b 0808 	orr.w	r8, fp, r8
 8029688:	ebcc 0040 	rsb	r0, ip, r0, lsl #1
 802968c:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 8029690:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8029694:	fb00 2208 	mla	r2, r0, r8, r2
 8029698:	4339      	orrs	r1, r7
 802969a:	fb0c 2201 	mla	r2, ip, r1, r2
 802969e:	ea4f 5952 	mov.w	r9, r2, lsr #21
 80296a2:	0952      	lsrs	r2, r2, #5
 80296a4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80296a8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80296ac:	ea49 0202 	orr.w	r2, r9, r2
 80296b0:	2bff      	cmp	r3, #255	; 0xff
 80296b2:	b292      	uxth	r2, r2
 80296b4:	d102      	bne.n	80296bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x720>
 80296b6:	9914      	ldr	r1, [sp, #80]	; 0x50
 80296b8:	29ff      	cmp	r1, #255	; 0xff
 80296ba:	d067      	beq.n	802978c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7f0>
 80296bc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80296be:	f8be 0000 	ldrh.w	r0, [lr]
 80296c2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80296c4:	434b      	muls	r3, r1
 80296c6:	1c59      	adds	r1, r3, #1
 80296c8:	eb01 2323 	add.w	r3, r1, r3, asr #8
 80296cc:	ea6f 2323 	mvn.w	r3, r3, asr #8
 80296d0:	1201      	asrs	r1, r0, #8
 80296d2:	b2db      	uxtb	r3, r3
 80296d4:	1217      	asrs	r7, r2, #8
 80296d6:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80296da:	fb11 f103 	smulbb	r1, r1, r3
 80296de:	ea4f 0ce0 	mov.w	ip, r0, asr #3
 80296e2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80296e6:	00c0      	lsls	r0, r0, #3
 80296e8:	fb07 1704 	mla	r7, r7, r4, r1
 80296ec:	b2c0      	uxtb	r0, r0
 80296ee:	10d1      	asrs	r1, r2, #3
 80296f0:	00d2      	lsls	r2, r2, #3
 80296f2:	fb10 f003 	smulbb	r0, r0, r3
 80296f6:	b2d2      	uxtb	r2, r2
 80296f8:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80296fc:	fb02 0204 	mla	r2, r2, r4, r0
 8029700:	fb1c fc03 	smulbb	ip, ip, r3
 8029704:	b2bf      	uxth	r7, r7
 8029706:	b292      	uxth	r2, r2
 8029708:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802970c:	fb01 c104 	mla	r1, r1, r4, ip
 8029710:	1c7b      	adds	r3, r7, #1
 8029712:	f102 0c01 	add.w	ip, r2, #1
 8029716:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 802971a:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 802971e:	b289      	uxth	r1, r1
 8029720:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8029724:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8029728:	ea47 070c 	orr.w	r7, r7, ip
 802972c:	f101 0c01 	add.w	ip, r1, #1
 8029730:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8029734:	0949      	lsrs	r1, r1, #5
 8029736:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802973a:	430f      	orrs	r7, r1
 802973c:	f8ae 7000 	strh.w	r7, [lr]
 8029740:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8029742:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8029744:	4413      	add	r3, r2
 8029746:	932b      	str	r3, [sp, #172]	; 0xac
 8029748:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802974a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802974c:	441a      	add	r2, r3
 802974e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8029750:	922c      	str	r2, [sp, #176]	; 0xb0
 8029752:	3b01      	subs	r3, #1
 8029754:	f10e 0e02 	add.w	lr, lr, #2
 8029758:	9315      	str	r3, [sp, #84]	; 0x54
 802975a:	e489      	b.n	8029070 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 802975c:	fb08 f101 	mul.w	r1, r8, r1
 8029760:	fb09 1303 	mla	r3, r9, r3, r1
 8029764:	e6da      	b.n	802951c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x580>
 8029766:	46b9      	mov	r9, r7
 8029768:	e702      	b.n	8029570 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5d4>
 802976a:	f1c2 0110 	rsb	r1, r2, #16
 802976e:	437a      	muls	r2, r7
 8029770:	fb09 2901 	mla	r9, r9, r1, r2
 8029774:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8029778:	ea4f 5059 	mov.w	r0, r9, lsr #21
 802977c:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8029780:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8029784:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8029788:	4302      	orrs	r2, r0
 802978a:	e791      	b.n	80296b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x714>
 802978c:	f8ae 2000 	strh.w	r2, [lr]
 8029790:	e7d6      	b.n	8029740 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a4>
 8029792:	b019      	add	sp, #100	; 0x64
 8029794:	ecbd 8b08 	vpop	{d8-d11}
 8029798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802979c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 802979c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80297a0:	b087      	sub	sp, #28
 80297a2:	e9dd e012 	ldrd	lr, r0, [sp, #72]	; 0x48
 80297a6:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
 80297aa:	9105      	str	r1, [sp, #20]
 80297ac:	fb00 e604 	mla	r6, r0, r4, lr
 80297b0:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 80297b4:	9102      	str	r1, [sp, #8]
 80297b6:	eb03 0146 	add.w	r1, r3, r6, lsl #1
 80297ba:	9103      	str	r1, [sp, #12]
 80297bc:	9905      	ldr	r1, [sp, #20]
 80297be:	f9bd 7044 	ldrsh.w	r7, [sp, #68]	; 0x44
 80297c2:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 80297c6:	8809      	ldrh	r1, [r1, #0]
 80297c8:	2800      	cmp	r0, #0
 80297ca:	eb02 0a06 	add.w	sl, r2, r6
 80297ce:	f2c0 80ca 	blt.w	8029966 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ca>
 80297d2:	4287      	cmp	r7, r0
 80297d4:	f340 80c7 	ble.w	8029966 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ca>
 80297d8:	f1be 0f00 	cmp.w	lr, #0
 80297dc:	f2c0 80bf 	blt.w	802995e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c2>
 80297e0:	4574      	cmp	r4, lr
 80297e2:	f340 80bc 	ble.w	802995e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c2>
 80297e6:	f812 c006 	ldrb.w	ip, [r2, r6]
 80297ea:	f833 9016 	ldrh.w	r9, [r3, r6, lsl #1]
 80297ee:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80297f2:	d01c      	beq.n	802982e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x92>
 80297f4:	f429 66fc 	bic.w	r6, r9, #2016	; 0x7e0
 80297f8:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80297fc:	4372      	muls	r2, r6
 80297fe:	f64f 081f 	movw	r8, #63519	; 0xf81f
 8029802:	ea08 1352 	and.w	r3, r8, r2, lsr #5
 8029806:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802980a:	f602 0201 	addw	r2, r2, #2049	; 0x801
 802980e:	fb0c f609 	mul.w	r6, ip, r9
 8029812:	eb03 0902 	add.w	r9, r3, r2
 8029816:	ea08 1959 	and.w	r9, r8, r9, lsr #5
 802981a:	f106 0820 	add.w	r8, r6, #32
 802981e:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 8029822:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8029826:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 802982a:	ea49 0908 	orr.w	r9, r9, r8
 802982e:	fa1f f989 	uxth.w	r9, r9
 8029832:	f11e 0301 	adds.w	r3, lr, #1
 8029836:	f100 809b 	bmi.w	8029970 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d4>
 802983a:	429c      	cmp	r4, r3
 802983c:	f340 8098 	ble.w	8029970 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d4>
 8029840:	2d00      	cmp	r5, #0
 8029842:	f000 8095 	beq.w	8029970 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d4>
 8029846:	f89a 6001 	ldrb.w	r6, [sl, #1]
 802984a:	9b03      	ldr	r3, [sp, #12]
 802984c:	2eff      	cmp	r6, #255	; 0xff
 802984e:	885b      	ldrh	r3, [r3, #2]
 8029850:	d01b      	beq.n	802988a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xee>
 8029852:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 8029856:	ea4f 08e6 	mov.w	r8, r6, asr #3
 802985a:	fb08 f202 	mul.w	r2, r8, r2
 802985e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8029862:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8029866:	fb06 f803 	mul.w	r8, r6, r3
 802986a:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 802986e:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8029872:	441a      	add	r2, r3
 8029874:	f108 0320 	add.w	r3, r8, #32
 8029878:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 802987c:	0a1b      	lsrs	r3, r3, #8
 802987e:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 8029882:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8029886:	ea4b 0303 	orr.w	r3, fp, r3
 802988a:	b29b      	uxth	r3, r3
 802988c:	9301      	str	r3, [sp, #4]
 802988e:	3001      	adds	r0, #1
 8029890:	d474      	bmi.n	802997c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 8029892:	4287      	cmp	r7, r0
 8029894:	dd72      	ble.n	802997c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 8029896:	9a02      	ldr	r2, [sp, #8]
 8029898:	2a00      	cmp	r2, #0
 802989a:	f000 8111 	beq.w	8029ac0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x324>
 802989e:	f1be 0f00 	cmp.w	lr, #0
 80298a2:	db68      	blt.n	8029976 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1da>
 80298a4:	4574      	cmp	r4, lr
 80298a6:	dd66      	ble.n	8029976 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1da>
 80298a8:	f81a 7004 	ldrb.w	r7, [sl, r4]
 80298ac:	9a03      	ldr	r2, [sp, #12]
 80298ae:	2fff      	cmp	r7, #255	; 0xff
 80298b0:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
 80298b4:	d01c      	beq.n	80298f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x154>
 80298b6:	f420 62fc 	bic.w	r2, r0, #2016	; 0x7e0
 80298ba:	ea4f 08e7 	mov.w	r8, r7, asr #3
 80298be:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80298c2:	fb07 fb00 	mul.w	fp, r7, r0
 80298c6:	fb08 f802 	mul.w	r8, r8, r2
 80298ca:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80298ce:	ea00 1258 	and.w	r2, r0, r8, lsr #5
 80298d2:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80298d6:	4490      	add	r8, r2
 80298d8:	f10b 0220 	add.w	r2, fp, #32
 80298dc:	eb02 2b1b 	add.w	fp, r2, fp, lsr #8
 80298e0:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80298e4:	ea00 1058 	and.w	r0, r0, r8, lsr #5
 80298e8:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80298ec:	ea40 000b 	orr.w	r0, r0, fp
 80298f0:	b280      	uxth	r0, r0
 80298f2:	f11e 0e01 	adds.w	lr, lr, #1
 80298f6:	d446      	bmi.n	8029986 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ea>
 80298f8:	4574      	cmp	r4, lr
 80298fa:	dd44      	ble.n	8029986 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ea>
 80298fc:	2d00      	cmp	r5, #0
 80298fe:	d045      	beq.n	802998c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1f0>
 8029900:	1c62      	adds	r2, r4, #1
 8029902:	9b03      	ldr	r3, [sp, #12]
 8029904:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8029908:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 802990c:	2cff      	cmp	r4, #255	; 0xff
 802990e:	d01c      	beq.n	802994a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ae>
 8029910:	f422 6efc 	bic.w	lr, r2, #2016	; 0x7e0
 8029914:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8029918:	fb08 fe0e 	mul.w	lr, r8, lr
 802991c:	f64f 0a1f 	movw	sl, #63519	; 0xf81f
 8029920:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029924:	fb04 f802 	mul.w	r8, r4, r2
 8029928:	ea0a 125e 	and.w	r2, sl, lr, lsr #5
 802992c:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8029930:	4472      	add	r2, lr
 8029932:	ea0a 1252 	and.w	r2, sl, r2, lsr #5
 8029936:	f108 0a20 	add.w	sl, r8, #32
 802993a:	eb0a 2a18 	add.w	sl, sl, r8, lsr #8
 802993e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029942:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8029946:	ea42 020a 	orr.w	r2, r2, sl
 802994a:	b292      	uxth	r2, r2
 802994c:	2d0f      	cmp	r5, #15
 802994e:	d91f      	bls.n	8029990 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1f4>
 8029950:	4b5f      	ldr	r3, [pc, #380]	; (8029ad0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x334>)
 8029952:	4a60      	ldr	r2, [pc, #384]	; (8029ad4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x338>)
 8029954:	4860      	ldr	r0, [pc, #384]	; (8029ad8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x33c>)
 8029956:	f240 210d 	movw	r1, #525	; 0x20d
 802995a:	f004 fcbd 	bl	802e2d8 <__assert_func>
 802995e:	4689      	mov	r9, r1
 8029960:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8029964:	e765      	b.n	8029832 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x96>
 8029966:	26ff      	movs	r6, #255	; 0xff
 8029968:	9101      	str	r1, [sp, #4]
 802996a:	4689      	mov	r9, r1
 802996c:	46b4      	mov	ip, r6
 802996e:	e78e      	b.n	802988e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf2>
 8029970:	9101      	str	r1, [sp, #4]
 8029972:	26ff      	movs	r6, #255	; 0xff
 8029974:	e78b      	b.n	802988e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf2>
 8029976:	4608      	mov	r0, r1
 8029978:	27ff      	movs	r7, #255	; 0xff
 802997a:	e7ba      	b.n	80298f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x156>
 802997c:	24ff      	movs	r4, #255	; 0xff
 802997e:	460a      	mov	r2, r1
 8029980:	4608      	mov	r0, r1
 8029982:	4627      	mov	r7, r4
 8029984:	e7e2      	b.n	802994c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 8029986:	460a      	mov	r2, r1
 8029988:	24ff      	movs	r4, #255	; 0xff
 802998a:	e7df      	b.n	802994c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 802998c:	460a      	mov	r2, r1
 802998e:	24ff      	movs	r4, #255	; 0xff
 8029990:	9b02      	ldr	r3, [sp, #8]
 8029992:	2b0f      	cmp	r3, #15
 8029994:	d8dc      	bhi.n	8029950 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b4>
 8029996:	f8bd e008 	ldrh.w	lr, [sp, #8]
 802999a:	fa1f f885 	uxth.w	r8, r5
 802999e:	fb08 fa0e 	mul.w	sl, r8, lr
 80299a2:	ea4f 1308 	mov.w	r3, r8, lsl #4
 80299a6:	ebca 1e0e 	rsb	lr, sl, lr, lsl #4
 80299aa:	9303      	str	r3, [sp, #12]
 80299ac:	fa1f f38e 	uxth.w	r3, lr
 80299b0:	9304      	str	r3, [sp, #16]
 80299b2:	ea4f 4809 	mov.w	r8, r9, lsl #16
 80299b6:	9b02      	ldr	r3, [sp, #8]
 80299b8:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80299bc:	f008 68fc 	and.w	r8, r8, #132120576	; 0x7e00000
 80299c0:	fb15 fe03 	smulbb	lr, r5, r3
 80299c4:	ea48 0809 	orr.w	r8, r8, r9
 80299c8:	f1c3 0910 	rsb	r9, r3, #16
 80299cc:	9b01      	ldr	r3, [sp, #4]
 80299ce:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 80299d2:	ea4f 0eee 	mov.w	lr, lr, asr #3
 80299d6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80299da:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80299de:	eba9 0905 	sub.w	r9, r9, r5
 80299e2:	ea4b 0303 	orr.w	r3, fp, r3
 80299e6:	ebce 0545 	rsb	r5, lr, r5, lsl #1
 80299ea:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 80299ee:	eb0e 0949 	add.w	r9, lr, r9, lsl #1
 80299f2:	436b      	muls	r3, r5
 80299f4:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80299f8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80299fc:	ea4b 0202 	orr.w	r2, fp, r2
 8029a00:	fb09 3308 	mla	r3, r9, r8, r3
 8029a04:	fb0e 3302 	mla	r3, lr, r2, r3
 8029a08:	0402      	lsls	r2, r0, #16
 8029a0a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8029a0e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8029a12:	4310      	orrs	r0, r2
 8029a14:	9a02      	ldr	r2, [sp, #8]
 8029a16:	ebce 0e42 	rsb	lr, lr, r2, lsl #1
 8029a1a:	9a03      	ldr	r2, [sp, #12]
 8029a1c:	fb0e 3e00 	mla	lr, lr, r0, r3
 8029a20:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8029a24:	9a04      	ldr	r2, [sp, #16]
 8029a26:	1a80      	subs	r0, r0, r2
 8029a28:	9a03      	ldr	r2, [sp, #12]
 8029a2a:	eba2 020a 	sub.w	r2, r2, sl
 8029a2e:	b292      	uxth	r2, r2
 8029a30:	b280      	uxth	r0, r0
 8029a32:	4356      	muls	r6, r2
 8029a34:	9a04      	ldr	r2, [sp, #16]
 8029a36:	fb0c 6600 	mla	r6, ip, r0, r6
 8029a3a:	fb02 6707 	mla	r7, r2, r7, r6
 8029a3e:	fb0a 7404 	mla	r4, sl, r4, r7
 8029a42:	ea4f 535e 	mov.w	r3, lr, lsr #21
 8029a46:	1208      	asrs	r0, r1, #8
 8029a48:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8029a4c:	ea6f 2424 	mvn.w	r4, r4, asr #8
 8029a50:	b2e4      	uxtb	r4, r4
 8029a52:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8029a56:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8029a5a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8029a5e:	4360      	muls	r0, r4
 8029a60:	ea43 0e0e 	orr.w	lr, r3, lr
 8029a64:	fa1f f38e 	uxth.w	r3, lr
 8029a68:	1c42      	adds	r2, r0, #1
 8029a6a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8029a6e:	1218      	asrs	r0, r3, #8
 8029a70:	10cd      	asrs	r5, r1, #3
 8029a72:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8029a76:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8029a7a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8029a7e:	4a17      	ldr	r2, [pc, #92]	; (8029adc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x340>)
 8029a80:	4365      	muls	r5, r4
 8029a82:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8029a86:	1c6a      	adds	r2, r5, #1
 8029a88:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 8029a8c:	00c9      	lsls	r1, r1, #3
 8029a8e:	10da      	asrs	r2, r3, #3
 8029a90:	b2c9      	uxtb	r1, r1
 8029a92:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8029a96:	434c      	muls	r4, r1
 8029a98:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8029a9c:	1c61      	adds	r1, r4, #1
 8029a9e:	00d2      	lsls	r2, r2, #3
 8029aa0:	00db      	lsls	r3, r3, #3
 8029aa2:	eb01 2414 	add.w	r4, r1, r4, lsr #8
 8029aa6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029aaa:	b2db      	uxtb	r3, r3
 8029aac:	4302      	orrs	r2, r0
 8029aae:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8029ab2:	ea42 03d3 	orr.w	r3, r2, r3, lsr #3
 8029ab6:	9a05      	ldr	r2, [sp, #20]
 8029ab8:	8013      	strh	r3, [r2, #0]
 8029aba:	b007      	add	sp, #28
 8029abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029ac0:	2d0f      	cmp	r5, #15
 8029ac2:	f63f af45 	bhi.w	8029950 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b4>
 8029ac6:	24ff      	movs	r4, #255	; 0xff
 8029ac8:	460a      	mov	r2, r1
 8029aca:	4608      	mov	r0, r1
 8029acc:	4627      	mov	r7, r4
 8029ace:	e762      	b.n	8029996 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1fa>
 8029ad0:	080343dc 	.word	0x080343dc
 8029ad4:	08034935 	.word	0x08034935
 8029ad8:	08034464 	.word	0x08034464
 8029adc:	fffff800 	.word	0xfffff800

08029ae0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8029ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029ae4:	ed2d 8b08 	vpush	{d8-d11}
 8029ae8:	b095      	sub	sp, #84	; 0x54
 8029aea:	eeb0 aa40 	vmov.f32	s20, s0
 8029aee:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 8029af0:	9306      	str	r3, [sp, #24]
 8029af2:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 8029af6:	9110      	str	r1, [sp, #64]	; 0x40
 8029af8:	9308      	str	r3, [sp, #32]
 8029afa:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8029afe:	9013      	str	r0, [sp, #76]	; 0x4c
 8029b00:	6870      	ldr	r0, [r6, #4]
 8029b02:	9212      	str	r2, [sp, #72]	; 0x48
 8029b04:	fb00 1303 	mla	r3, r0, r3, r1
 8029b08:	6831      	ldr	r1, [r6, #0]
 8029b0a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8029b0c:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 8029b10:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8029b14:	9307      	str	r3, [sp, #28]
 8029b16:	6813      	ldr	r3, [r2, #0]
 8029b18:	9309      	str	r3, [sp, #36]	; 0x24
 8029b1a:	6853      	ldr	r3, [r2, #4]
 8029b1c:	930a      	str	r3, [sp, #40]	; 0x28
 8029b1e:	006b      	lsls	r3, r5, #1
 8029b20:	eef0 9a60 	vmov.f32	s19, s1
 8029b24:	eeb0 9a41 	vmov.f32	s18, s2
 8029b28:	eeb0 8a62 	vmov.f32	s16, s5
 8029b2c:	eef0 8a43 	vmov.f32	s17, s6
 8029b30:	eef0 ba44 	vmov.f32	s23, s8
 8029b34:	eeb0 ba64 	vmov.f32	s22, s9
 8029b38:	eef0 aa45 	vmov.f32	s21, s10
 8029b3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8029b3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8029b40:	2b00      	cmp	r3, #0
 8029b42:	dc03      	bgt.n	8029b4c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8029b44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8029b46:	2b00      	cmp	r3, #0
 8029b48:	f340 83a3 	ble.w	802a292 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7b2>
 8029b4c:	9b06      	ldr	r3, [sp, #24]
 8029b4e:	2b00      	cmp	r3, #0
 8029b50:	f340 81bc 	ble.w	8029ecc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ec>
 8029b54:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8029b56:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029b58:	1412      	asrs	r2, r2, #16
 8029b5a:	ea4f 4323 	mov.w	r3, r3, asr #16
 8029b5e:	d42f      	bmi.n	8029bc0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8029b60:	1c51      	adds	r1, r2, #1
 8029b62:	428d      	cmp	r5, r1
 8029b64:	dd2f      	ble.n	8029bc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8029b66:	2b00      	cmp	r3, #0
 8029b68:	db2d      	blt.n	8029bc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8029b6a:	9808      	ldr	r0, [sp, #32]
 8029b6c:	1c59      	adds	r1, r3, #1
 8029b6e:	4288      	cmp	r0, r1
 8029b70:	dd29      	ble.n	8029bc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8029b72:	9b06      	ldr	r3, [sp, #24]
 8029b74:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8029b76:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8029b78:	3b01      	subs	r3, #1
 8029b7a:	fb02 1203 	mla	r2, r2, r3, r1
 8029b7e:	1412      	asrs	r2, r2, #16
 8029b80:	d42b      	bmi.n	8029bda <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8029b82:	3201      	adds	r2, #1
 8029b84:	4295      	cmp	r5, r2
 8029b86:	dd28      	ble.n	8029bda <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8029b88:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8029b8a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8029b8c:	fb02 1303 	mla	r3, r2, r3, r1
 8029b90:	141b      	asrs	r3, r3, #16
 8029b92:	d422      	bmi.n	8029bda <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8029b94:	9a08      	ldr	r2, [sp, #32]
 8029b96:	3301      	adds	r3, #1
 8029b98:	429a      	cmp	r2, r3
 8029b9a:	dd1e      	ble.n	8029bda <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8029b9c:	9b06      	ldr	r3, [sp, #24]
 8029b9e:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8029ba2:	9311      	str	r3, [sp, #68]	; 0x44
 8029ba4:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8029ba8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8029baa:	2b00      	cmp	r3, #0
 8029bac:	f300 8208 	bgt.w	8029fc0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e0>
 8029bb0:	9b06      	ldr	r3, [sp, #24]
 8029bb2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8029bb6:	9b07      	ldr	r3, [sp, #28]
 8029bb8:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8029bbc:	9307      	str	r3, [sp, #28]
 8029bbe:	e187      	b.n	8029ed0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f0>
 8029bc0:	1c57      	adds	r7, r2, #1
 8029bc2:	f040 8174 	bne.w	8029eae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ce>
 8029bc6:	42aa      	cmp	r2, r5
 8029bc8:	f280 8171 	bge.w	8029eae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ce>
 8029bcc:	1c5e      	adds	r6, r3, #1
 8029bce:	f2c0 816e 	blt.w	8029eae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ce>
 8029bd2:	9a08      	ldr	r2, [sp, #32]
 8029bd4:	4293      	cmp	r3, r2
 8029bd6:	f280 816a 	bge.w	8029eae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ce>
 8029bda:	9b06      	ldr	r3, [sp, #24]
 8029bdc:	9f07      	ldr	r7, [sp, #28]
 8029bde:	9311      	str	r3, [sp, #68]	; 0x44
 8029be0:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8029be4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8029be6:	2b00      	cmp	r3, #0
 8029be8:	dde2      	ble.n	8029bb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 8029bea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029bec:	1419      	asrs	r1, r3, #16
 8029bee:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8029bf0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8029bf4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029bf6:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8029bfa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8029bfc:	141b      	asrs	r3, r3, #16
 8029bfe:	f100 81c4 	bmi.w	8029f8a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4aa>
 8029c02:	1c58      	adds	r0, r3, #1
 8029c04:	4285      	cmp	r5, r0
 8029c06:	f340 81c2 	ble.w	8029f8e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 8029c0a:	2900      	cmp	r1, #0
 8029c0c:	f2c0 81bf 	blt.w	8029f8e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 8029c10:	9c08      	ldr	r4, [sp, #32]
 8029c12:	1c48      	adds	r0, r1, #1
 8029c14:	4284      	cmp	r4, r0
 8029c16:	f340 81ba 	ble.w	8029f8e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 8029c1a:	fb01 3105 	mla	r1, r1, r5, r3
 8029c1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029c20:	fa1f fe82 	uxth.w	lr, r2
 8029c24:	eb03 0a01 	add.w	sl, r3, r1
 8029c28:	ea4f 100e 	mov.w	r0, lr, lsl #4
 8029c2c:	f813 9001 	ldrb.w	r9, [r3, r1]
 8029c30:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8029c34:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8029c38:	b29b      	uxth	r3, r3
 8029c3a:	f1bc 0f00 	cmp.w	ip, #0
 8029c3e:	f000 8186 	beq.w	8029f4e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46e>
 8029c42:	f81a 4005 	ldrb.w	r4, [sl, r5]
 8029c46:	940b      	str	r4, [sp, #44]	; 0x2c
 8029c48:	eb0a 0b05 	add.w	fp, sl, r5
 8029c4c:	fa1f fa8c 	uxth.w	sl, ip
 8029c50:	fb0a fe0e 	mul.w	lr, sl, lr
 8029c54:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8029c58:	fa1f fa8a 	uxth.w	sl, sl
 8029c5c:	eba0 000e 	sub.w	r0, r0, lr
 8029c60:	eba3 030a 	sub.w	r3, r3, sl
 8029c64:	b280      	uxth	r0, r0
 8029c66:	fb08 f000 	mul.w	r0, r8, r0
 8029c6a:	b29b      	uxth	r3, r3
 8029c6c:	fb09 0303 	mla	r3, r9, r3, r0
 8029c70:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8029c72:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8029c76:	940c      	str	r4, [sp, #48]	; 0x30
 8029c78:	fb0a 3300 	mla	r3, sl, r0, r3
 8029c7c:	fb0e 3304 	mla	r3, lr, r4, r3
 8029c80:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029c84:	2b00      	cmp	r3, #0
 8029c86:	f000 8105 	beq.w	8029e94 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8029c8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8029c8c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8029c8e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8029c92:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8029c96:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 8029c9a:	f000 815d 	beq.w	8029f58 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x478>
 8029c9e:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8029ca2:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8029ca6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8029caa:	fb09 f101 	mul.w	r1, r9, r1
 8029cae:	fb0a fe0e 	mul.w	lr, sl, lr
 8029cb2:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8029cb6:	f101 0b20 	add.w	fp, r1, #32
 8029cba:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8029cbe:	44ce      	add	lr, r9
 8029cc0:	eb0b 2911 	add.w	r9, fp, r1, lsr #8
 8029cc4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8029cc8:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8029ccc:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8029cd0:	ea4e 0909 	orr.w	r9, lr, r9
 8029cd4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8029cd8:	8841      	ldrh	r1, [r0, #2]
 8029cda:	d019      	beq.n	8029d10 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x230>
 8029cdc:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8029ce0:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8029ce4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8029ce8:	fb0a fe0e 	mul.w	lr, sl, lr
 8029cec:	fb08 f801 	mul.w	r8, r8, r1
 8029cf0:	f108 0b20 	add.w	fp, r8, #32
 8029cf4:	ea06 115e 	and.w	r1, r6, lr, lsr #5
 8029cf8:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8029cfc:	448e      	add	lr, r1
 8029cfe:	eb0b 2118 	add.w	r1, fp, r8, lsr #8
 8029d02:	0a09      	lsrs	r1, r1, #8
 8029d04:	ea06 1a5e 	and.w	sl, r6, lr, lsr #5
 8029d08:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8029d0c:	ea4a 0101 	orr.w	r1, sl, r1
 8029d10:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8029d14:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8029d18:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8029d1c:	ea4e 0909 	orr.w	r9, lr, r9
 8029d20:	ea4f 4e01 	mov.w	lr, r1, lsl #16
 8029d24:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8029d28:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8029d2c:	ea4e 0e01 	orr.w	lr, lr, r1
 8029d30:	f1bc 0f00 	cmp.w	ip, #0
 8029d34:	f000 8112 	beq.w	8029f5c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47c>
 8029d38:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8029d3a:	eb00 0801 	add.w	r8, r0, r1
 8029d3e:	5a41      	ldrh	r1, [r0, r1]
 8029d40:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8029d42:	28ff      	cmp	r0, #255	; 0xff
 8029d44:	d019      	beq.n	8029d7a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 8029d46:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8029d48:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8029d4c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8029d50:	fb04 fb01 	mul.w	fp, r4, r1
 8029d54:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8029d58:	fb0a fa00 	mul.w	sl, sl, r0
 8029d5c:	f10b 0020 	add.w	r0, fp, #32
 8029d60:	ea06 115a 	and.w	r1, r6, sl, lsr #5
 8029d64:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8029d68:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8029d6c:	4451      	add	r1, sl
 8029d6e:	0a00      	lsrs	r0, r0, #8
 8029d70:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8029d74:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8029d78:	4301      	orrs	r1, r0
 8029d7a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8029d7c:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 8029d80:	2cff      	cmp	r4, #255	; 0xff
 8029d82:	d01a      	beq.n	8029dba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 8029d84:	f420 68fc 	bic.w	r8, r0, #2016	; 0x7e0
 8029d88:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8029d8c:	fb04 fb00 	mul.w	fp, r4, r0
 8029d90:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8029d94:	fb0a fa08 	mul.w	sl, sl, r8
 8029d98:	f10b 0820 	add.w	r8, fp, #32
 8029d9c:	ea06 105a 	and.w	r0, r6, sl, lsr #5
 8029da0:	eb08 281b 	add.w	r8, r8, fp, lsr #8
 8029da4:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8029da8:	4450      	add	r0, sl
 8029daa:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8029dae:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8029db2:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8029db6:	ea40 0008 	orr.w	r0, r0, r8
 8029dba:	fb1c f802 	smulbb	r8, ip, r2
 8029dbe:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8029dc2:	f1cc 0a10 	rsb	sl, ip, #16
 8029dc6:	ebaa 0a02 	sub.w	sl, sl, r2
 8029dca:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8029dce:	ebc8 0242 	rsb	r2, r8, r2, lsl #1
 8029dd2:	eb08 0a4a 	add.w	sl, r8, sl, lsl #1
 8029dd6:	fb0e f202 	mul.w	r2, lr, r2
 8029dda:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8029dde:	ea4f 4e00 	mov.w	lr, r0, lsl #16
 8029de2:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8029de6:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 8029dea:	fb09 220a 	mla	r2, r9, sl, r2
 8029dee:	ea4b 0101 	orr.w	r1, fp, r1
 8029df2:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8029df6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8029dfa:	fb0c 2201 	mla	r2, ip, r1, r2
 8029dfe:	ea4e 0000 	orr.w	r0, lr, r0
 8029e02:	fb08 2800 	mla	r8, r8, r0, r2
 8029e06:	ea4f 5258 	mov.w	r2, r8, lsr #21
 8029e0a:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8029e0e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029e12:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8029e16:	ea42 0808 	orr.w	r8, r2, r8
 8029e1a:	fa1f f288 	uxth.w	r2, r8
 8029e1e:	2bff      	cmp	r3, #255	; 0xff
 8029e20:	f000 80b1 	beq.w	8029f86 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a6>
 8029e24:	f8b7 8000 	ldrh.w	r8, [r7]
 8029e28:	43db      	mvns	r3, r3
 8029e2a:	ea4f 2028 	mov.w	r0, r8, asr #8
 8029e2e:	fa5f fe83 	uxtb.w	lr, r3
 8029e32:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8029e36:	fb00 f00e 	mul.w	r0, r0, lr
 8029e3a:	1c41      	adds	r1, r0, #1
 8029e3c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8029e40:	1210      	asrs	r0, r2, #8
 8029e42:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8029e46:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8029e4a:	eb00 2011 	add.w	r0, r0, r1, lsr #8
 8029e4e:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8029e52:	495a      	ldr	r1, [pc, #360]	; (8029fbc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4dc>)
 8029e54:	fb0c fc0e 	mul.w	ip, ip, lr
 8029e58:	ea01 2000 	and.w	r0, r1, r0, lsl #8
 8029e5c:	f10c 0101 	add.w	r1, ip, #1
 8029e60:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8029e64:	10d1      	asrs	r1, r2, #3
 8029e66:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8029e6a:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8029e6e:	eb01 211c 	add.w	r1, r1, ip, lsr #8
 8029e72:	b2db      	uxtb	r3, r3
 8029e74:	00c9      	lsls	r1, r1, #3
 8029e76:	fb03 f30e 	mul.w	r3, r3, lr
 8029e7a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8029e7e:	4301      	orrs	r1, r0
 8029e80:	1c58      	adds	r0, r3, #1
 8029e82:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8029e86:	00d3      	lsls	r3, r2, #3
 8029e88:	b2db      	uxtb	r3, r3
 8029e8a:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8029e8e:	ea41 03d3 	orr.w	r3, r1, r3, lsr #3
 8029e92:	803b      	strh	r3, [r7, #0]
 8029e94:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8029e96:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8029e98:	4413      	add	r3, r2
 8029e9a:	9327      	str	r3, [sp, #156]	; 0x9c
 8029e9c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8029e9e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8029ea0:	441a      	add	r2, r3
 8029ea2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8029ea4:	9228      	str	r2, [sp, #160]	; 0xa0
 8029ea6:	3b01      	subs	r3, #1
 8029ea8:	3702      	adds	r7, #2
 8029eaa:	9311      	str	r3, [sp, #68]	; 0x44
 8029eac:	e69a      	b.n	8029be4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8029eae:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8029eb0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8029eb2:	4413      	add	r3, r2
 8029eb4:	9327      	str	r3, [sp, #156]	; 0x9c
 8029eb6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8029eb8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8029eba:	441a      	add	r2, r3
 8029ebc:	9b06      	ldr	r3, [sp, #24]
 8029ebe:	9228      	str	r2, [sp, #160]	; 0xa0
 8029ec0:	3b01      	subs	r3, #1
 8029ec2:	9306      	str	r3, [sp, #24]
 8029ec4:	9b07      	ldr	r3, [sp, #28]
 8029ec6:	3302      	adds	r3, #2
 8029ec8:	9307      	str	r3, [sp, #28]
 8029eca:	e63f      	b.n	8029b4c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8029ecc:	f47f ae51 	bne.w	8029b72 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8029ed0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8029ed2:	2b00      	cmp	r3, #0
 8029ed4:	f340 81dd 	ble.w	802a292 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7b2>
 8029ed8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8029edc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8029ee0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8029ee4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8029ee6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8029eea:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8029eee:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8029ef2:	eef0 6a48 	vmov.f32	s13, s16
 8029ef6:	ee69 7a27 	vmul.f32	s15, s18, s15
 8029efa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029efe:	ee37 8a48 	vsub.f32	s16, s14, s16
 8029f02:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 8029f06:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8029f0a:	eef0 6a68 	vmov.f32	s13, s17
 8029f0e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8029f12:	ee18 2a10 	vmov	r2, s16
 8029f16:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8029f1a:	fb92 f3f3 	sdiv	r3, r2, r3
 8029f1e:	ee18 2a90 	vmov	r2, s17
 8029f22:	9329      	str	r3, [sp, #164]	; 0xa4
 8029f24:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8029f26:	fb92 f3f3 	sdiv	r3, r2, r3
 8029f2a:	932a      	str	r3, [sp, #168]	; 0xa8
 8029f2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8029f2e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8029f30:	3b01      	subs	r3, #1
 8029f32:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029f36:	9310      	str	r3, [sp, #64]	; 0x40
 8029f38:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8029f3a:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 8029f3e:	bf08      	it	eq
 8029f40:	4613      	moveq	r3, r2
 8029f42:	9306      	str	r3, [sp, #24]
 8029f44:	eef0 8a67 	vmov.f32	s17, s15
 8029f48:	eeb0 8a47 	vmov.f32	s16, s14
 8029f4c:	e5f7      	b.n	8029b3e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 8029f4e:	fb08 f000 	mul.w	r0, r8, r0
 8029f52:	fb09 0303 	mla	r3, r9, r3, r0
 8029f56:	e693      	b.n	8029c80 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a0>
 8029f58:	4689      	mov	r9, r1
 8029f5a:	e6bb      	b.n	8029cd4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f4>
 8029f5c:	f1c2 0010 	rsb	r0, r2, #16
 8029f60:	fb0e f202 	mul.w	r2, lr, r2
 8029f64:	fb09 2900 	mla	r9, r9, r0, r2
 8029f68:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8029f6c:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8029f70:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8029f74:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029f78:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8029f7c:	ea42 0909 	orr.w	r9, r2, r9
 8029f80:	fa1f f289 	uxth.w	r2, r9
 8029f84:	e74b      	b.n	8029e1e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 8029f86:	803a      	strh	r2, [r7, #0]
 8029f88:	e784      	b.n	8029e94 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8029f8a:	1c5c      	adds	r4, r3, #1
 8029f8c:	d182      	bne.n	8029e94 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8029f8e:	429d      	cmp	r5, r3
 8029f90:	dd80      	ble.n	8029e94 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8029f92:	1c48      	adds	r0, r1, #1
 8029f94:	f6ff af7e 	blt.w	8029e94 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8029f98:	9808      	ldr	r0, [sp, #32]
 8029f9a:	4288      	cmp	r0, r1
 8029f9c:	f77f af7a 	ble.w	8029e94 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8029fa0:	e9cd 3102 	strd	r3, r1, [sp, #8]
 8029fa4:	e9cd 2c04 	strd	r2, ip, [sp, #16]
 8029fa8:	e9cd 5000 	strd	r5, r0, [sp]
 8029fac:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8029fb0:	4639      	mov	r1, r7
 8029fb2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8029fb4:	f7ff fbf2 	bl	802979c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8029fb8:	e76c      	b.n	8029e94 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8029fba:	bf00      	nop
 8029fbc:	fffff800 	.word	0xfffff800
 8029fc0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8029fc2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8029fc6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029fc8:	141f      	asrs	r7, r3, #16
 8029fca:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8029fce:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8029fd0:	141b      	asrs	r3, r3, #16
 8029fd2:	fb05 3707 	mla	r7, r5, r7, r3
 8029fd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029fd8:	fa1f fc82 	uxth.w	ip, r2
 8029fdc:	eb03 0a07 	add.w	sl, r3, r7
 8029fe0:	ea4f 110c 	mov.w	r1, ip, lsl #4
 8029fe4:	f813 9007 	ldrb.w	r9, [r3, r7]
 8029fe8:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8029fec:	f5c1 7380 	rsb	r3, r1, #256	; 0x100
 8029ff0:	b29b      	uxth	r3, r3
 8029ff2:	2800      	cmp	r0, #0
 8029ff4:	f000 8132 	beq.w	802a25c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x77c>
 8029ff8:	f81a 4005 	ldrb.w	r4, [sl, r5]
 8029ffc:	940d      	str	r4, [sp, #52]	; 0x34
 8029ffe:	eb0a 0b05 	add.w	fp, sl, r5
 802a002:	fa1f fa80 	uxth.w	sl, r0
 802a006:	fb0a fc0c 	mul.w	ip, sl, ip
 802a00a:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 802a00e:	fa1f fa8a 	uxth.w	sl, sl
 802a012:	eba1 010c 	sub.w	r1, r1, ip
 802a016:	eba3 030a 	sub.w	r3, r3, sl
 802a01a:	b289      	uxth	r1, r1
 802a01c:	fb08 f101 	mul.w	r1, r8, r1
 802a020:	b29b      	uxth	r3, r3
 802a022:	fb09 1303 	mla	r3, r9, r3, r1
 802a026:	990d      	ldr	r1, [sp, #52]	; 0x34
 802a028:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802a02c:	940e      	str	r4, [sp, #56]	; 0x38
 802a02e:	fb0a 3301 	mla	r3, sl, r1, r3
 802a032:	fb0c 3304 	mla	r3, ip, r4, r3
 802a036:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a03a:	2b00      	cmp	r3, #0
 802a03c:	f000 8100 	beq.w	802a240 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x760>
 802a040:	9909      	ldr	r1, [sp, #36]	; 0x24
 802a042:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802a044:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802a048:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 802a04c:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 802a050:	f000 8109 	beq.w	802a266 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x786>
 802a054:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 802a058:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802a05c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802a060:	fb09 f707 	mul.w	r7, r9, r7
 802a064:	fb0a fc0c 	mul.w	ip, sl, ip
 802a068:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 802a06c:	f107 0b20 	add.w	fp, r7, #32
 802a070:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 802a074:	44cc      	add	ip, r9
 802a076:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 802a07a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802a07e:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802a082:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802a086:	ea4c 0909 	orr.w	r9, ip, r9
 802a08a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802a08e:	884f      	ldrh	r7, [r1, #2]
 802a090:	d019      	beq.n	802a0c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e6>
 802a092:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 802a096:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802a09a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802a09e:	fb08 f807 	mul.w	r8, r8, r7
 802a0a2:	fb0a fc0c 	mul.w	ip, sl, ip
 802a0a6:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 802a0aa:	f108 0b20 	add.w	fp, r8, #32
 802a0ae:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 802a0b2:	44bc      	add	ip, r7
 802a0b4:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 802a0b8:	0a3f      	lsrs	r7, r7, #8
 802a0ba:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802a0be:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802a0c2:	ea4c 0707 	orr.w	r7, ip, r7
 802a0c6:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 802a0ca:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 802a0ce:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802a0d2:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802a0d6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802a0da:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 802a0de:	ea4c 0909 	orr.w	r9, ip, r9
 802a0e2:	ea4a 0707 	orr.w	r7, sl, r7
 802a0e6:	2800      	cmp	r0, #0
 802a0e8:	f000 80bf 	beq.w	802a26a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78a>
 802a0ec:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802a0ee:	eb01 0c04 	add.w	ip, r1, r4
 802a0f2:	f831 8004 	ldrh.w	r8, [r1, r4]
 802a0f6:	990d      	ldr	r1, [sp, #52]	; 0x34
 802a0f8:	29ff      	cmp	r1, #255	; 0xff
 802a0fa:	d01a      	beq.n	802a132 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x652>
 802a0fc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802a0fe:	f428 61fc 	bic.w	r1, r8, #2016	; 0x7e0
 802a102:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 802a106:	fb04 fb08 	mul.w	fp, r4, r8
 802a10a:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 802a10e:	fb0a fa01 	mul.w	sl, sl, r1
 802a112:	f10b 0120 	add.w	r1, fp, #32
 802a116:	ea06 185a 	and.w	r8, r6, sl, lsr #5
 802a11a:	eb01 211b 	add.w	r1, r1, fp, lsr #8
 802a11e:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 802a122:	44d0      	add	r8, sl
 802a124:	0a09      	lsrs	r1, r1, #8
 802a126:	ea06 1858 	and.w	r8, r6, r8, lsr #5
 802a12a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802a12e:	ea48 0801 	orr.w	r8, r8, r1
 802a132:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802a134:	f8bc 1002 	ldrh.w	r1, [ip, #2]
 802a138:	2cff      	cmp	r4, #255	; 0xff
 802a13a:	d01a      	beq.n	802a172 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x692>
 802a13c:	f421 6cfc 	bic.w	ip, r1, #2016	; 0x7e0
 802a140:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802a144:	fb04 fb01 	mul.w	fp, r4, r1
 802a148:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 802a14c:	fb0a fa0c 	mul.w	sl, sl, ip
 802a150:	f10b 0c20 	add.w	ip, fp, #32
 802a154:	ea06 115a 	and.w	r1, r6, sl, lsr #5
 802a158:	eb0c 2c1b 	add.w	ip, ip, fp, lsr #8
 802a15c:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 802a160:	4451      	add	r1, sl
 802a162:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a166:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 802a16a:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802a16e:	ea41 010c 	orr.w	r1, r1, ip
 802a172:	fb10 fc02 	smulbb	ip, r0, r2
 802a176:	ea4f 0cec 	mov.w	ip, ip, asr #3
 802a17a:	f1c0 0a10 	rsb	sl, r0, #16
 802a17e:	ebaa 0a02 	sub.w	sl, sl, r2
 802a182:	ea4f 4b08 	mov.w	fp, r8, lsl #16
 802a186:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 802a18a:	437a      	muls	r2, r7
 802a18c:	eb0c 0a4a 	add.w	sl, ip, sl, lsl #1
 802a190:	040f      	lsls	r7, r1, #16
 802a192:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802a196:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 802a19a:	fb09 220a 	mla	r2, r9, sl, r2
 802a19e:	ea4b 0808 	orr.w	r8, fp, r8
 802a1a2:	ebcc 0040 	rsb	r0, ip, r0, lsl #1
 802a1a6:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 802a1aa:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802a1ae:	fb00 2208 	mla	r2, r0, r8, r2
 802a1b2:	4339      	orrs	r1, r7
 802a1b4:	fb0c 2201 	mla	r2, ip, r1, r2
 802a1b8:	ea4f 5952 	mov.w	r9, r2, lsr #21
 802a1bc:	0952      	lsrs	r2, r2, #5
 802a1be:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802a1c2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802a1c6:	ea49 0202 	orr.w	r2, r9, r2
 802a1ca:	2bff      	cmp	r3, #255	; 0xff
 802a1cc:	b292      	uxth	r2, r2
 802a1ce:	d05d      	beq.n	802a28c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7ac>
 802a1d0:	f8be 8000 	ldrh.w	r8, [lr]
 802a1d4:	4c31      	ldr	r4, [pc, #196]	; (802a29c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7bc>)
 802a1d6:	43db      	mvns	r3, r3
 802a1d8:	ea4f 2028 	mov.w	r0, r8, asr #8
 802a1dc:	fa5f fc83 	uxtb.w	ip, r3
 802a1e0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802a1e4:	ea4f 07e8 	mov.w	r7, r8, asr #3
 802a1e8:	fb00 f00c 	mul.w	r0, r0, ip
 802a1ec:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802a1f0:	fb07 f10c 	mul.w	r1, r7, ip
 802a1f4:	1c47      	adds	r7, r0, #1
 802a1f6:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 802a1fa:	1217      	asrs	r7, r2, #8
 802a1fc:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802a200:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 802a204:	1c4f      	adds	r7, r1, #1
 802a206:	eb07 2711 	add.w	r7, r7, r1, lsr #8
 802a20a:	10d1      	asrs	r1, r2, #3
 802a20c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802a210:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 802a214:	eb01 2117 	add.w	r1, r1, r7, lsr #8
 802a218:	b2db      	uxtb	r3, r3
 802a21a:	00c9      	lsls	r1, r1, #3
 802a21c:	fb03 f30c 	mul.w	r3, r3, ip
 802a220:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802a224:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 802a228:	4308      	orrs	r0, r1
 802a22a:	00d2      	lsls	r2, r2, #3
 802a22c:	1c59      	adds	r1, r3, #1
 802a22e:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802a232:	b2d2      	uxtb	r2, r2
 802a234:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802a238:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
 802a23c:	f8ae 0000 	strh.w	r0, [lr]
 802a240:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802a242:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802a244:	4413      	add	r3, r2
 802a246:	9327      	str	r3, [sp, #156]	; 0x9c
 802a248:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 802a24a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802a24c:	441a      	add	r2, r3
 802a24e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802a250:	9228      	str	r2, [sp, #160]	; 0xa0
 802a252:	3b01      	subs	r3, #1
 802a254:	f10e 0e02 	add.w	lr, lr, #2
 802a258:	9311      	str	r3, [sp, #68]	; 0x44
 802a25a:	e4a5      	b.n	8029ba8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 802a25c:	fb08 f101 	mul.w	r1, r8, r1
 802a260:	fb09 1303 	mla	r3, r9, r3, r1
 802a264:	e6e7      	b.n	802a036 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 802a266:	46b9      	mov	r9, r7
 802a268:	e70f      	b.n	802a08a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5aa>
 802a26a:	f1c2 0110 	rsb	r1, r2, #16
 802a26e:	437a      	muls	r2, r7
 802a270:	fb09 2901 	mla	r9, r9, r1, r2
 802a274:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802a278:	ea4f 5059 	mov.w	r0, r9, lsr #21
 802a27c:	ea4f 1259 	mov.w	r2, r9, lsr #5
 802a280:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802a284:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802a288:	4302      	orrs	r2, r0
 802a28a:	e79e      	b.n	802a1ca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ea>
 802a28c:	f8ae 2000 	strh.w	r2, [lr]
 802a290:	e7d6      	b.n	802a240 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x760>
 802a292:	b015      	add	sp, #84	; 0x54
 802a294:	ecbd 8b08 	vpop	{d8-d11}
 802a298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a29c:	fffff800 	.word	0xfffff800

0802a2a0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 802a2a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a2a4:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	; 0x24
 802a2a8:	fb0c 4e03 	mla	lr, ip, r3, r4
 802a2ac:	f1bc 0f00 	cmp.w	ip, #0
 802a2b0:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 802a2b4:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 802a2b8:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 802a2bc:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 802a2c0:	8808      	ldrh	r0, [r1, #0]
 802a2c2:	eb02 084e 	add.w	r8, r2, lr, lsl #1
 802a2c6:	db2f      	blt.n	802a328 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 802a2c8:	45e2      	cmp	sl, ip
 802a2ca:	dd2d      	ble.n	802a328 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 802a2cc:	2c00      	cmp	r4, #0
 802a2ce:	db29      	blt.n	802a324 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 802a2d0:	42a3      	cmp	r3, r4
 802a2d2:	dd27      	ble.n	802a324 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 802a2d4:	f832 901e 	ldrh.w	r9, [r2, lr, lsl #1]
 802a2d8:	1c62      	adds	r2, r4, #1
 802a2da:	d428      	bmi.n	802a32e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 802a2dc:	4293      	cmp	r3, r2
 802a2de:	dd26      	ble.n	802a32e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 802a2e0:	b32f      	cbz	r7, 802a32e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 802a2e2:	f8b8 e002 	ldrh.w	lr, [r8, #2]
 802a2e6:	f11c 0c01 	adds.w	ip, ip, #1
 802a2ea:	d424      	bmi.n	802a336 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 802a2ec:	45e2      	cmp	sl, ip
 802a2ee:	dd22      	ble.n	802a336 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 802a2f0:	2e00      	cmp	r6, #0
 802a2f2:	f000 809c 	beq.w	802a42e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18e>
 802a2f6:	2c00      	cmp	r4, #0
 802a2f8:	db1b      	blt.n	802a332 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 802a2fa:	42a3      	cmp	r3, r4
 802a2fc:	dd19      	ble.n	802a332 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 802a2fe:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 802a302:	3401      	adds	r4, #1
 802a304:	d41a      	bmi.n	802a33c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 802a306:	42a3      	cmp	r3, r4
 802a308:	dd18      	ble.n	802a33c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 802a30a:	b1cf      	cbz	r7, 802a340 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa0>
 802a30c:	3301      	adds	r3, #1
 802a30e:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 802a312:	2f0f      	cmp	r7, #15
 802a314:	d915      	bls.n	802a342 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa2>
 802a316:	4b49      	ldr	r3, [pc, #292]	; (802a43c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x19c>)
 802a318:	4a49      	ldr	r2, [pc, #292]	; (802a440 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a0>)
 802a31a:	484a      	ldr	r0, [pc, #296]	; (802a444 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a4>)
 802a31c:	f240 11ef 	movw	r1, #495	; 0x1ef
 802a320:	f003 ffda 	bl	802e2d8 <__assert_func>
 802a324:	4681      	mov	r9, r0
 802a326:	e7d7      	b.n	802a2d8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x38>
 802a328:	4686      	mov	lr, r0
 802a32a:	4681      	mov	r9, r0
 802a32c:	e7db      	b.n	802a2e6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 802a32e:	4686      	mov	lr, r0
 802a330:	e7d9      	b.n	802a2e6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 802a332:	4684      	mov	ip, r0
 802a334:	e7e5      	b.n	802a302 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x62>
 802a336:	4603      	mov	r3, r0
 802a338:	4684      	mov	ip, r0
 802a33a:	e7ea      	b.n	802a312 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 802a33c:	4603      	mov	r3, r0
 802a33e:	e7e8      	b.n	802a312 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 802a340:	4603      	mov	r3, r0
 802a342:	2e0f      	cmp	r6, #15
 802a344:	d8e7      	bhi.n	802a316 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 802a346:	ea4f 4409 	mov.w	r4, r9, lsl #16
 802a34a:	fb17 f806 	smulbb	r8, r7, r6
 802a34e:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 802a352:	ea4f 4a0e 	mov.w	sl, lr, lsl #16
 802a356:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802a35a:	ea4f 08e8 	mov.w	r8, r8, asr #3
 802a35e:	ea44 0909 	orr.w	r9, r4, r9
 802a362:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802a366:	f1c6 0410 	rsb	r4, r6, #16
 802a36a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802a36e:	1be4      	subs	r4, r4, r7
 802a370:	041a      	lsls	r2, r3, #16
 802a372:	ebc8 0747 	rsb	r7, r8, r7, lsl #1
 802a376:	ea4a 0e0e 	orr.w	lr, sl, lr
 802a37a:	fb07 fe0e 	mul.w	lr, r7, lr
 802a37e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802a382:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 802a386:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802a38a:	fb04 e409 	mla	r4, r4, r9, lr
 802a38e:	4313      	orrs	r3, r2
 802a390:	ea4f 420c 	mov.w	r2, ip, lsl #16
 802a394:	fb08 4303 	mla	r3, r8, r3, r4
 802a398:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802a39c:	f42c 64fc 	bic.w	r4, ip, #2016	; 0x7e0
 802a3a0:	4322      	orrs	r2, r4
 802a3a2:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 802a3a6:	fb06 3202 	mla	r2, r6, r2, r3
 802a3aa:	0d53      	lsrs	r3, r2, #21
 802a3ac:	0952      	lsrs	r2, r2, #5
 802a3ae:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802a3b2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802a3b6:	431a      	orrs	r2, r3
 802a3b8:	b293      	uxth	r3, r2
 802a3ba:	b2af      	uxth	r7, r5
 802a3bc:	1202      	asrs	r2, r0, #8
 802a3be:	43ed      	mvns	r5, r5
 802a3c0:	b2ed      	uxtb	r5, r5
 802a3c2:	ea4f 2c23 	mov.w	ip, r3, asr #8
 802a3c6:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802a3ca:	fb12 f205 	smulbb	r2, r2, r5
 802a3ce:	10c6      	asrs	r6, r0, #3
 802a3d0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802a3d4:	fb0c 2c07 	mla	ip, ip, r7, r2
 802a3d8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802a3dc:	10da      	asrs	r2, r3, #3
 802a3de:	fb16 f605 	smulbb	r6, r6, r5
 802a3e2:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802a3e6:	fb02 6207 	mla	r2, r2, r7, r6
 802a3ea:	b296      	uxth	r6, r2
 802a3ec:	00c2      	lsls	r2, r0, #3
 802a3ee:	00dc      	lsls	r4, r3, #3
 802a3f0:	b2d2      	uxtb	r2, r2
 802a3f2:	b2e4      	uxtb	r4, r4
 802a3f4:	fb12 f205 	smulbb	r2, r2, r5
 802a3f8:	fb04 2207 	mla	r2, r4, r7, r2
 802a3fc:	fa1f fc8c 	uxth.w	ip, ip
 802a400:	b292      	uxth	r2, r2
 802a402:	f10c 0301 	add.w	r3, ip, #1
 802a406:	1c50      	adds	r0, r2, #1
 802a408:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 802a40c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 802a410:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802a414:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 802a418:	4313      	orrs	r3, r2
 802a41a:	1c72      	adds	r2, r6, #1
 802a41c:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 802a420:	0952      	lsrs	r2, r2, #5
 802a422:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802a426:	4313      	orrs	r3, r2
 802a428:	800b      	strh	r3, [r1, #0]
 802a42a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a42e:	2f0f      	cmp	r7, #15
 802a430:	f63f af71 	bhi.w	802a316 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 802a434:	4603      	mov	r3, r0
 802a436:	4684      	mov	ip, r0
 802a438:	e785      	b.n	802a346 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa6>
 802a43a:	bf00      	nop
 802a43c:	080343dc 	.word	0x080343dc
 802a440:	080349de 	.word	0x080349de
 802a444:	08034464 	.word	0x08034464

0802a448 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802a448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a44c:	ed2d 8b08 	vpush	{d8-d11}
 802a450:	b095      	sub	sp, #84	; 0x54
 802a452:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 802a456:	9306      	str	r3, [sp, #24]
 802a458:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 802a45c:	9212      	str	r2, [sp, #72]	; 0x48
 802a45e:	9307      	str	r3, [sp, #28]
 802a460:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802a462:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 802a466:	930c      	str	r3, [sp, #48]	; 0x30
 802a468:	910b      	str	r1, [sp, #44]	; 0x2c
 802a46a:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 802a46e:	9013      	str	r0, [sp, #76]	; 0x4c
 802a470:	6850      	ldr	r0, [r2, #4]
 802a472:	6812      	ldr	r2, [r2, #0]
 802a474:	f9bd 70b8 	ldrsh.w	r7, [sp, #184]	; 0xb8
 802a478:	fb00 1303 	mla	r3, r0, r3, r1
 802a47c:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802a480:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802a482:	681b      	ldr	r3, [r3, #0]
 802a484:	9309      	str	r3, [sp, #36]	; 0x24
 802a486:	007b      	lsls	r3, r7, #1
 802a488:	930a      	str	r3, [sp, #40]	; 0x28
 802a48a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802a48c:	43db      	mvns	r3, r3
 802a48e:	b2db      	uxtb	r3, r3
 802a490:	eeb0 aa40 	vmov.f32	s20, s0
 802a494:	eef0 9a60 	vmov.f32	s19, s1
 802a498:	eeb0 9a41 	vmov.f32	s18, s2
 802a49c:	eeb0 8a62 	vmov.f32	s16, s5
 802a4a0:	eef0 8a43 	vmov.f32	s17, s6
 802a4a4:	eef0 ba44 	vmov.f32	s23, s8
 802a4a8:	eeb0 ba64 	vmov.f32	s22, s9
 802a4ac:	eef0 aa45 	vmov.f32	s21, s10
 802a4b0:	9308      	str	r3, [sp, #32]
 802a4b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802a4b4:	2b00      	cmp	r3, #0
 802a4b6:	dc03      	bgt.n	802a4c0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 802a4b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802a4ba:	2b00      	cmp	r3, #0
 802a4bc:	f340 81f3 	ble.w	802a8a6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45e>
 802a4c0:	9b06      	ldr	r3, [sp, #24]
 802a4c2:	2b00      	cmp	r3, #0
 802a4c4:	f340 80fa 	ble.w	802a6bc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 802a4c8:	1422      	asrs	r2, r4, #16
 802a4ca:	ea4f 4326 	mov.w	r3, r6, asr #16
 802a4ce:	d42b      	bmi.n	802a528 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 802a4d0:	1c51      	adds	r1, r2, #1
 802a4d2:	428f      	cmp	r7, r1
 802a4d4:	dd2b      	ble.n	802a52e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 802a4d6:	2b00      	cmp	r3, #0
 802a4d8:	db29      	blt.n	802a52e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 802a4da:	9807      	ldr	r0, [sp, #28]
 802a4dc:	1c59      	adds	r1, r3, #1
 802a4de:	4288      	cmp	r0, r1
 802a4e0:	dd25      	ble.n	802a52e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 802a4e2:	9b06      	ldr	r3, [sp, #24]
 802a4e4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802a4e6:	3b01      	subs	r3, #1
 802a4e8:	fb02 4203 	mla	r2, r2, r3, r4
 802a4ec:	1412      	asrs	r2, r2, #16
 802a4ee:	d428      	bmi.n	802a542 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 802a4f0:	3201      	adds	r2, #1
 802a4f2:	4297      	cmp	r7, r2
 802a4f4:	dd25      	ble.n	802a542 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 802a4f6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802a4f8:	fb02 6303 	mla	r3, r2, r3, r6
 802a4fc:	141b      	asrs	r3, r3, #16
 802a4fe:	d420      	bmi.n	802a542 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 802a500:	9a07      	ldr	r2, [sp, #28]
 802a502:	3301      	adds	r3, #1
 802a504:	429a      	cmp	r2, r3
 802a506:	dd1c      	ble.n	802a542 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 802a508:	f8dd 8018 	ldr.w	r8, [sp, #24]
 802a50c:	f8bd a030 	ldrh.w	sl, [sp, #48]	; 0x30
 802a510:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 802a514:	f1b8 0f00 	cmp.w	r8, #0
 802a518:	f300 8129 	bgt.w	802a76e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x326>
 802a51c:	9b06      	ldr	r3, [sp, #24]
 802a51e:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802a522:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802a526:	e0cb      	b.n	802a6c0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 802a528:	1c51      	adds	r1, r2, #1
 802a52a:	f040 80bd 	bne.w	802a6a8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 802a52e:	42ba      	cmp	r2, r7
 802a530:	f280 80ba 	bge.w	802a6a8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 802a534:	1c5a      	adds	r2, r3, #1
 802a536:	f2c0 80b7 	blt.w	802a6a8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 802a53a:	9a07      	ldr	r2, [sp, #28]
 802a53c:	4293      	cmp	r3, r2
 802a53e:	f280 80b3 	bge.w	802a6a8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 802a542:	f8dd b018 	ldr.w	fp, [sp, #24]
 802a546:	46c8      	mov	r8, r9
 802a548:	f1bb 0f00 	cmp.w	fp, #0
 802a54c:	dde6      	ble.n	802a51c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 802a54e:	1421      	asrs	r1, r4, #16
 802a550:	ea4f 4226 	mov.w	r2, r6, asr #16
 802a554:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802a558:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802a55c:	f100 80ef 	bmi.w	802a73e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 802a560:	f101 0c01 	add.w	ip, r1, #1
 802a564:	4567      	cmp	r7, ip
 802a566:	f340 80ec 	ble.w	802a742 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 802a56a:	2a00      	cmp	r2, #0
 802a56c:	f2c0 80e9 	blt.w	802a742 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 802a570:	9d07      	ldr	r5, [sp, #28]
 802a572:	f102 0c01 	add.w	ip, r2, #1
 802a576:	4565      	cmp	r5, ip
 802a578:	f340 80e3 	ble.w	802a742 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 802a57c:	fb02 1207 	mla	r2, r2, r7, r1
 802a580:	9909      	ldr	r1, [sp, #36]	; 0x24
 802a582:	eb01 0e42 	add.w	lr, r1, r2, lsl #1
 802a586:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 802a58a:	f8be 1002 	ldrh.w	r1, [lr, #2]
 802a58e:	b138      	cbz	r0, 802a5a0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x158>
 802a590:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802a592:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802a594:	4472      	add	r2, lr
 802a596:	f83e 5005 	ldrh.w	r5, [lr, r5]
 802a59a:	8852      	ldrh	r2, [r2, #2]
 802a59c:	950e      	str	r5, [sp, #56]	; 0x38
 802a59e:	920f      	str	r2, [sp, #60]	; 0x3c
 802a5a0:	ea4f 4e0c 	mov.w	lr, ip, lsl #16
 802a5a4:	fb13 f200 	smulbb	r2, r3, r0
 802a5a8:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802a5ac:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802a5b0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802a5b4:	10d2      	asrs	r2, r2, #3
 802a5b6:	ea4e 0c0c 	orr.w	ip, lr, ip
 802a5ba:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802a5be:	f1c0 0e10 	rsb	lr, r0, #16
 802a5c2:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802a5c6:	ebae 0e03 	sub.w	lr, lr, r3
 802a5ca:	ea4a 0101 	orr.w	r1, sl, r1
 802a5ce:	ebc2 0343 	rsb	r3, r2, r3, lsl #1
 802a5d2:	4359      	muls	r1, r3
 802a5d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802a5d6:	9d08      	ldr	r5, [sp, #32]
 802a5d8:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 802a5dc:	fb0e 1e0c 	mla	lr, lr, ip, r1
 802a5e0:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802a5e4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802a5e8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802a5ec:	ea4c 0c03 	orr.w	ip, ip, r3
 802a5f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802a5f2:	990e      	ldr	r1, [sp, #56]	; 0x38
 802a5f4:	041b      	lsls	r3, r3, #16
 802a5f6:	fb02 ec0c 	mla	ip, r2, ip, lr
 802a5fa:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802a5fe:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 802a602:	ea43 030e 	orr.w	r3, r3, lr
 802a606:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 802a60a:	fb02 c203 	mla	r2, r2, r3, ip
 802a60e:	0d53      	lsrs	r3, r2, #21
 802a610:	0952      	lsrs	r2, r2, #5
 802a612:	f8b8 c000 	ldrh.w	ip, [r8]
 802a616:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802a61a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802a61e:	431a      	orrs	r2, r3
 802a620:	b292      	uxth	r2, r2
 802a622:	ea4f 212c 	mov.w	r1, ip, asr #8
 802a626:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 802a62a:	1210      	asrs	r0, r2, #8
 802a62c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802a630:	fb11 f105 	smulbb	r1, r1, r5
 802a634:	ea4f 0eec 	mov.w	lr, ip, asr #3
 802a638:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802a63c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802a640:	fb00 1003 	mla	r0, r0, r3, r1
 802a644:	fa5f fc8c 	uxtb.w	ip, ip
 802a648:	10d1      	asrs	r1, r2, #3
 802a64a:	00d2      	lsls	r2, r2, #3
 802a64c:	fb1c fc05 	smulbb	ip, ip, r5
 802a650:	b2d2      	uxtb	r2, r2
 802a652:	fb02 c203 	mla	r2, r2, r3, ip
 802a656:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 802a65a:	b280      	uxth	r0, r0
 802a65c:	b292      	uxth	r2, r2
 802a65e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802a662:	fb1e fe05 	smulbb	lr, lr, r5
 802a666:	fb01 e103 	mla	r1, r1, r3, lr
 802a66a:	f102 0c01 	add.w	ip, r2, #1
 802a66e:	1c43      	adds	r3, r0, #1
 802a670:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802a674:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802a678:	b289      	uxth	r1, r1
 802a67a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802a67e:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 802a682:	4313      	orrs	r3, r2
 802a684:	1c4a      	adds	r2, r1, #1
 802a686:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802a68a:	0949      	lsrs	r1, r1, #5
 802a68c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802a690:	430b      	orrs	r3, r1
 802a692:	f8a8 3000 	strh.w	r3, [r8]
 802a696:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802a698:	441c      	add	r4, r3
 802a69a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802a69c:	f108 0802 	add.w	r8, r8, #2
 802a6a0:	441e      	add	r6, r3
 802a6a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 802a6a6:	e74f      	b.n	802a548 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 802a6a8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802a6aa:	441c      	add	r4, r3
 802a6ac:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802a6ae:	441e      	add	r6, r3
 802a6b0:	9b06      	ldr	r3, [sp, #24]
 802a6b2:	3b01      	subs	r3, #1
 802a6b4:	9306      	str	r3, [sp, #24]
 802a6b6:	f109 0902 	add.w	r9, r9, #2
 802a6ba:	e701      	b.n	802a4c0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 802a6bc:	f47f af11 	bne.w	802a4e2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 802a6c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802a6c2:	2b00      	cmp	r3, #0
 802a6c4:	f340 80ef 	ble.w	802a8a6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45e>
 802a6c8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802a6cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802a6d0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802a6d4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802a6d6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802a6da:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802a6de:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802a6e2:	eef0 6a48 	vmov.f32	s13, s16
 802a6e6:	ee69 7a27 	vmul.f32	s15, s18, s15
 802a6ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a6ee:	ee37 8a48 	vsub.f32	s16, s14, s16
 802a6f2:	ee16 4a90 	vmov	r4, s13
 802a6f6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802a6fa:	eef0 6a68 	vmov.f32	s13, s17
 802a6fe:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802a702:	ee18 2a10 	vmov	r2, s16
 802a706:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802a70a:	fb92 f3f3 	sdiv	r3, r2, r3
 802a70e:	ee18 2a90 	vmov	r2, s17
 802a712:	9329      	str	r3, [sp, #164]	; 0xa4
 802a714:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802a716:	fb92 f3f3 	sdiv	r3, r2, r3
 802a71a:	932a      	str	r3, [sp, #168]	; 0xa8
 802a71c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802a71e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802a720:	3b01      	subs	r3, #1
 802a722:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a726:	930b      	str	r3, [sp, #44]	; 0x2c
 802a728:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802a72a:	bf08      	it	eq
 802a72c:	4613      	moveq	r3, r2
 802a72e:	ee16 6a90 	vmov	r6, s13
 802a732:	9306      	str	r3, [sp, #24]
 802a734:	eef0 8a67 	vmov.f32	s17, s15
 802a738:	eeb0 8a47 	vmov.f32	s16, s14
 802a73c:	e6b9      	b.n	802a4b2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 802a73e:	1c4d      	adds	r5, r1, #1
 802a740:	d1a9      	bne.n	802a696 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 802a742:	428f      	cmp	r7, r1
 802a744:	dda7      	ble.n	802a696 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 802a746:	1c55      	adds	r5, r2, #1
 802a748:	dba5      	blt.n	802a696 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 802a74a:	9d07      	ldr	r5, [sp, #28]
 802a74c:	4295      	cmp	r5, r2
 802a74e:	dda2      	ble.n	802a696 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 802a750:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802a752:	9101      	str	r1, [sp, #4]
 802a754:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802a758:	9b07      	ldr	r3, [sp, #28]
 802a75a:	9300      	str	r3, [sp, #0]
 802a75c:	e9cd 0504 	strd	r0, r5, [sp, #16]
 802a760:	463b      	mov	r3, r7
 802a762:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802a764:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802a766:	4641      	mov	r1, r8
 802a768:	f7ff fd9a 	bl	802a2a0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 802a76c:	e793      	b.n	802a696 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 802a76e:	1422      	asrs	r2, r4, #16
 802a770:	1431      	asrs	r1, r6, #16
 802a772:	fb07 2101 	mla	r1, r7, r1, r2
 802a776:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802a778:	9809      	ldr	r0, [sp, #36]	; 0x24
 802a77a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 802a77e:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 802a782:	f830 c011 	ldrh.w	ip, [r0, r1, lsl #1]
 802a786:	8851      	ldrh	r1, [r2, #2]
 802a788:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802a78c:	f1be 0f00 	cmp.w	lr, #0
 802a790:	d006      	beq.n	802a7a0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x358>
 802a792:	980a      	ldr	r0, [sp, #40]	; 0x28
 802a794:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802a796:	1810      	adds	r0, r2, r0
 802a798:	5b52      	ldrh	r2, [r2, r5]
 802a79a:	9210      	str	r2, [sp, #64]	; 0x40
 802a79c:	8842      	ldrh	r2, [r0, #2]
 802a79e:	9211      	str	r2, [sp, #68]	; 0x44
 802a7a0:	ea4f 400c 	mov.w	r0, ip, lsl #16
 802a7a4:	fb13 f20e 	smulbb	r2, r3, lr
 802a7a8:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802a7ac:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802a7b0:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802a7b4:	10d2      	asrs	r2, r2, #3
 802a7b6:	ea40 000c 	orr.w	r0, r0, ip
 802a7ba:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802a7be:	f1ce 0c10 	rsb	ip, lr, #16
 802a7c2:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802a7c6:	ebac 0c03 	sub.w	ip, ip, r3
 802a7ca:	ea4b 0101 	orr.w	r1, fp, r1
 802a7ce:	ebc2 0343 	rsb	r3, r2, r3, lsl #1
 802a7d2:	4359      	muls	r1, r3
 802a7d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802a7d6:	9d08      	ldr	r5, [sp, #32]
 802a7d8:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 802a7dc:	fb0c 1c00 	mla	ip, ip, r0, r1
 802a7e0:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 802a7e4:	f423 60fc 	bic.w	r0, r3, #2016	; 0x7e0
 802a7e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802a7ea:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802a7ee:	ea4b 0000 	orr.w	r0, fp, r0
 802a7f2:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 802a7f6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802a7fa:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802a7fe:	fb02 c000 	mla	r0, r2, r0, ip
 802a802:	ea4b 0b03 	orr.w	fp, fp, r3
 802a806:	ebc2 024e 	rsb	r2, r2, lr, lsl #1
 802a80a:	fb02 0b0b 	mla	fp, r2, fp, r0
 802a80e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802a810:	ea4f 515b 	mov.w	r1, fp, lsr #21
 802a814:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 802a818:	8812      	ldrh	r2, [r2, #0]
 802a81a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802a81e:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 802a822:	ea41 0b0b 	orr.w	fp, r1, fp
 802a826:	fa1f f38b 	uxth.w	r3, fp
 802a82a:	1211      	asrs	r1, r2, #8
 802a82c:	1218      	asrs	r0, r3, #8
 802a82e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802a832:	fb11 f105 	smulbb	r1, r1, r5
 802a836:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 802a83a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802a83e:	00d2      	lsls	r2, r2, #3
 802a840:	fb00 100a 	mla	r0, r0, sl, r1
 802a844:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 802a848:	10d9      	asrs	r1, r3, #3
 802a84a:	b2d2      	uxtb	r2, r2
 802a84c:	00db      	lsls	r3, r3, #3
 802a84e:	fb1c fc05 	smulbb	ip, ip, r5
 802a852:	fb12 f205 	smulbb	r2, r2, r5
 802a856:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802a85a:	b2db      	uxtb	r3, r3
 802a85c:	b280      	uxth	r0, r0
 802a85e:	fb01 c10a 	mla	r1, r1, sl, ip
 802a862:	fb03 230a 	mla	r3, r3, sl, r2
 802a866:	b29b      	uxth	r3, r3
 802a868:	b289      	uxth	r1, r1
 802a86a:	1c42      	adds	r2, r0, #1
 802a86c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802a870:	f101 0c01 	add.w	ip, r1, #1
 802a874:	1c5a      	adds	r2, r3, #1
 802a876:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802a87a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802a87e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802a882:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802a886:	0949      	lsrs	r1, r1, #5
 802a888:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802a88a:	4310      	orrs	r0, r2
 802a88c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802a890:	4308      	orrs	r0, r1
 802a892:	f823 0b02 	strh.w	r0, [r3], #2
 802a896:	930d      	str	r3, [sp, #52]	; 0x34
 802a898:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802a89a:	441c      	add	r4, r3
 802a89c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802a89e:	f108 38ff 	add.w	r8, r8, #4294967295
 802a8a2:	441e      	add	r6, r3
 802a8a4:	e636      	b.n	802a514 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 802a8a6:	b015      	add	sp, #84	; 0x54
 802a8a8:	ecbd 8b08 	vpop	{d8-d11}
 802a8ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802a8b0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 802a8b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a8b4:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 802a8b8:	fb06 5c03 	mla	ip, r6, r3, r5
 802a8bc:	2e00      	cmp	r6, #0
 802a8be:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 802a8c2:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 802a8c6:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 802a8ca:	8808      	ldrh	r0, [r1, #0]
 802a8cc:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 802a8d0:	db2e      	blt.n	802a930 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 802a8d2:	45b0      	cmp	r8, r6
 802a8d4:	dd2c      	ble.n	802a930 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 802a8d6:	2d00      	cmp	r5, #0
 802a8d8:	db28      	blt.n	802a92c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 802a8da:	42ab      	cmp	r3, r5
 802a8dc:	dd26      	ble.n	802a92c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 802a8de:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
 802a8e2:	1c6a      	adds	r2, r5, #1
 802a8e4:	d427      	bmi.n	802a936 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 802a8e6:	4293      	cmp	r3, r2
 802a8e8:	dd25      	ble.n	802a936 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 802a8ea:	b324      	cbz	r4, 802a936 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 802a8ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 802a8f0:	3601      	adds	r6, #1
 802a8f2:	d424      	bmi.n	802a93e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 802a8f4:	45b0      	cmp	r8, r6
 802a8f6:	dd22      	ble.n	802a93e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 802a8f8:	b31f      	cbz	r7, 802a942 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x92>
 802a8fa:	2d00      	cmp	r5, #0
 802a8fc:	db1d      	blt.n	802a93a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 802a8fe:	42ab      	cmp	r3, r5
 802a900:	dd1b      	ble.n	802a93a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 802a902:	f83e 6013 	ldrh.w	r6, [lr, r3, lsl #1]
 802a906:	3501      	adds	r5, #1
 802a908:	d405      	bmi.n	802a916 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 802a90a:	42ab      	cmp	r3, r5
 802a90c:	dd03      	ble.n	802a916 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 802a90e:	b124      	cbz	r4, 802a91a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6a>
 802a910:	3301      	adds	r3, #1
 802a912:	f83e 0013 	ldrh.w	r0, [lr, r3, lsl #1]
 802a916:	2c0f      	cmp	r4, #15
 802a918:	d801      	bhi.n	802a91e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802a91a:	2f0f      	cmp	r7, #15
 802a91c:	d914      	bls.n	802a948 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x98>
 802a91e:	4b27      	ldr	r3, [pc, #156]	; (802a9bc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x10c>)
 802a920:	4a27      	ldr	r2, [pc, #156]	; (802a9c0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x110>)
 802a922:	4828      	ldr	r0, [pc, #160]	; (802a9c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x114>)
 802a924:	f240 11ef 	movw	r1, #495	; 0x1ef
 802a928:	f003 fcd6 	bl	802e2d8 <__assert_func>
 802a92c:	4684      	mov	ip, r0
 802a92e:	e7d8      	b.n	802a8e2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x32>
 802a930:	4602      	mov	r2, r0
 802a932:	4684      	mov	ip, r0
 802a934:	e7dc      	b.n	802a8f0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 802a936:	4602      	mov	r2, r0
 802a938:	e7da      	b.n	802a8f0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 802a93a:	4606      	mov	r6, r0
 802a93c:	e7e3      	b.n	802a906 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x56>
 802a93e:	4606      	mov	r6, r0
 802a940:	e7e9      	b.n	802a916 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 802a942:	2c0f      	cmp	r4, #15
 802a944:	d8eb      	bhi.n	802a91e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802a946:	4606      	mov	r6, r0
 802a948:	ea4f 450c 	mov.w	r5, ip, lsl #16
 802a94c:	fb14 f307 	smulbb	r3, r4, r7
 802a950:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 802a954:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 802a958:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802a95c:	10db      	asrs	r3, r3, #3
 802a95e:	ea45 0c0c 	orr.w	ip, r5, ip
 802a962:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802a966:	f1c7 0510 	rsb	r5, r7, #16
 802a96a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802a96e:	1b2d      	subs	r5, r5, r4
 802a970:	ea4e 0202 	orr.w	r2, lr, r2
 802a974:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 802a978:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 802a97c:	4354      	muls	r4, r2
 802a97e:	fb05 450c 	mla	r5, r5, ip, r4
 802a982:	0404      	lsls	r4, r0, #16
 802a984:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 802a988:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802a98c:	4320      	orrs	r0, r4
 802a98e:	fb03 5400 	mla	r4, r3, r0, r5
 802a992:	0430      	lsls	r0, r6, #16
 802a994:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802a998:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 802a99c:	ebc3 0747 	rsb	r7, r3, r7, lsl #1
 802a9a0:	4330      	orrs	r0, r6
 802a9a2:	fb07 4000 	mla	r0, r7, r0, r4
 802a9a6:	0d43      	lsrs	r3, r0, #21
 802a9a8:	0940      	lsrs	r0, r0, #5
 802a9aa:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802a9ae:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802a9b2:	4318      	orrs	r0, r3
 802a9b4:	8008      	strh	r0, [r1, #0]
 802a9b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a9ba:	bf00      	nop
 802a9bc:	080343dc 	.word	0x080343dc
 802a9c0:	080349de 	.word	0x080349de
 802a9c4:	08034464 	.word	0x08034464

0802a9c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802a9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a9cc:	ed2d 8b0a 	vpush	{d8-d12}
 802a9d0:	b093      	sub	sp, #76	; 0x4c
 802a9d2:	461d      	mov	r5, r3
 802a9d4:	9210      	str	r2, [sp, #64]	; 0x40
 802a9d6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802a9d8:	f9bd 20bc 	ldrsh.w	r2, [sp, #188]	; 0xbc
 802a9dc:	9208      	str	r2, [sp, #32]
 802a9de:	e9dd 272c 	ldrd	r2, r7, [sp, #176]	; 0xb0
 802a9e2:	910b      	str	r1, [sp, #44]	; 0x2c
 802a9e4:	6859      	ldr	r1, [r3, #4]
 802a9e6:	681b      	ldr	r3, [r3, #0]
 802a9e8:	f9bd 80b8 	ldrsh.w	r8, [sp, #184]	; 0xb8
 802a9ec:	9011      	str	r0, [sp, #68]	; 0x44
 802a9ee:	fb01 2707 	mla	r7, r1, r7, r2
 802a9f2:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 802a9f6:	9307      	str	r3, [sp, #28]
 802a9f8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802a9fa:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 802a9fe:	681b      	ldr	r3, [r3, #0]
 802aa00:	9309      	str	r3, [sp, #36]	; 0x24
 802aa02:	ea4f 0348 	mov.w	r3, r8, lsl #1
 802aa06:	eeb0 aa40 	vmov.f32	s20, s0
 802aa0a:	eef0 9a60 	vmov.f32	s19, s1
 802aa0e:	eeb0 9a41 	vmov.f32	s18, s2
 802aa12:	eeb0 8a62 	vmov.f32	s16, s5
 802aa16:	eef0 8a43 	vmov.f32	s17, s6
 802aa1a:	eeb0 ca44 	vmov.f32	s24, s8
 802aa1e:	eef0 ba64 	vmov.f32	s23, s9
 802aa22:	eeb0 ba45 	vmov.f32	s22, s10
 802aa26:	930a      	str	r3, [sp, #40]	; 0x28
 802aa28:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 802aa2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802aa2e:	2b00      	cmp	r3, #0
 802aa30:	dc03      	bgt.n	802aa3a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 802aa32:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802aa34:	2b00      	cmp	r3, #0
 802aa36:	f340 816c 	ble.w	802ad12 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34a>
 802aa3a:	2d00      	cmp	r5, #0
 802aa3c:	f340 80b6 	ble.w	802abac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e4>
 802aa40:	1422      	asrs	r2, r4, #16
 802aa42:	ea4f 4326 	mov.w	r3, r6, asr #16
 802aa46:	d428      	bmi.n	802aa9a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 802aa48:	1c51      	adds	r1, r2, #1
 802aa4a:	4588      	cmp	r8, r1
 802aa4c:	dd27      	ble.n	802aa9e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd6>
 802aa4e:	2b00      	cmp	r3, #0
 802aa50:	db25      	blt.n	802aa9e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd6>
 802aa52:	9808      	ldr	r0, [sp, #32]
 802aa54:	1c59      	adds	r1, r3, #1
 802aa56:	4288      	cmp	r0, r1
 802aa58:	dd21      	ble.n	802aa9e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd6>
 802aa5a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802aa5c:	1e6b      	subs	r3, r5, #1
 802aa5e:	fb02 4203 	mla	r2, r2, r3, r4
 802aa62:	1412      	asrs	r2, r2, #16
 802aa64:	d422      	bmi.n	802aaac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 802aa66:	3201      	adds	r2, #1
 802aa68:	4590      	cmp	r8, r2
 802aa6a:	dd1f      	ble.n	802aaac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 802aa6c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802aa6e:	fb02 6303 	mla	r3, r2, r3, r6
 802aa72:	141b      	asrs	r3, r3, #16
 802aa74:	d41a      	bmi.n	802aaac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 802aa76:	9a08      	ldr	r2, [sp, #32]
 802aa78:	3301      	adds	r3, #1
 802aa7a:	429a      	cmp	r2, r3
 802aa7c:	dd16      	ble.n	802aaac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 802aa7e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802aa82:	46a9      	mov	r9, r5
 802aa84:	f1b9 0f00 	cmp.w	r9, #0
 802aa88:	f300 80e4 	bgt.w	802ac54 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28c>
 802aa8c:	9b07      	ldr	r3, [sp, #28]
 802aa8e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802aa92:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802aa96:	9307      	str	r3, [sp, #28]
 802aa98:	e08a      	b.n	802abb0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e8>
 802aa9a:	1c51      	adds	r1, r2, #1
 802aa9c:	d17d      	bne.n	802ab9a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d2>
 802aa9e:	4542      	cmp	r2, r8
 802aaa0:	da7b      	bge.n	802ab9a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d2>
 802aaa2:	1c5a      	adds	r2, r3, #1
 802aaa4:	db79      	blt.n	802ab9a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d2>
 802aaa6:	9a08      	ldr	r2, [sp, #32]
 802aaa8:	4293      	cmp	r3, r2
 802aaaa:	da76      	bge.n	802ab9a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d2>
 802aaac:	f8dd 901c 	ldr.w	r9, [sp, #28]
 802aab0:	46aa      	mov	sl, r5
 802aab2:	f1ba 0f00 	cmp.w	sl, #0
 802aab6:	dde9      	ble.n	802aa8c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 802aab8:	1421      	asrs	r1, r4, #16
 802aaba:	ea4f 4226 	mov.w	r2, r6, asr #16
 802aabe:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802aac2:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802aac6:	f100 80b0 	bmi.w	802ac2a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 802aaca:	f101 0c01 	add.w	ip, r1, #1
 802aace:	45e0      	cmp	r8, ip
 802aad0:	f340 80ad 	ble.w	802ac2e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 802aad4:	2a00      	cmp	r2, #0
 802aad6:	f2c0 80aa 	blt.w	802ac2e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 802aada:	9f08      	ldr	r7, [sp, #32]
 802aadc:	f102 0c01 	add.w	ip, r2, #1
 802aae0:	4567      	cmp	r7, ip
 802aae2:	f340 80a4 	ble.w	802ac2e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 802aae6:	fb02 1208 	mla	r2, r2, r8, r1
 802aaea:	9909      	ldr	r1, [sp, #36]	; 0x24
 802aaec:	eb01 0e42 	add.w	lr, r1, r2, lsl #1
 802aaf0:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 802aaf4:	f8be 1002 	ldrh.w	r1, [lr, #2]
 802aaf8:	b138      	cbz	r0, 802ab0a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 802aafa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802aafc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802aafe:	4472      	add	r2, lr
 802ab00:	f83e 7007 	ldrh.w	r7, [lr, r7]
 802ab04:	8852      	ldrh	r2, [r2, #2]
 802ab06:	970c      	str	r7, [sp, #48]	; 0x30
 802ab08:	920d      	str	r2, [sp, #52]	; 0x34
 802ab0a:	ea4f 4e0c 	mov.w	lr, ip, lsl #16
 802ab0e:	fb13 f200 	smulbb	r2, r3, r0
 802ab12:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802ab16:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802ab1a:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802ab1e:	10d2      	asrs	r2, r2, #3
 802ab20:	ea4e 0c0c 	orr.w	ip, lr, ip
 802ab24:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802ab28:	f1c0 0e10 	rsb	lr, r0, #16
 802ab2c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802ab30:	ebae 0e03 	sub.w	lr, lr, r3
 802ab34:	ea4b 0101 	orr.w	r1, fp, r1
 802ab38:	ebc2 0343 	rsb	r3, r2, r3, lsl #1
 802ab3c:	4359      	muls	r1, r3
 802ab3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802ab40:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 802ab44:	fb0e 1e0c 	mla	lr, lr, ip, r1
 802ab48:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802ab4c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802ab50:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802ab54:	ea4c 0c03 	orr.w	ip, ip, r3
 802ab58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802ab5a:	990c      	ldr	r1, [sp, #48]	; 0x30
 802ab5c:	041b      	lsls	r3, r3, #16
 802ab5e:	fb02 ec0c 	mla	ip, r2, ip, lr
 802ab62:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802ab66:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 802ab6a:	ea43 030e 	orr.w	r3, r3, lr
 802ab6e:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 802ab72:	fb02 c203 	mla	r2, r2, r3, ip
 802ab76:	0d53      	lsrs	r3, r2, #21
 802ab78:	0952      	lsrs	r2, r2, #5
 802ab7a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802ab7e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802ab82:	431a      	orrs	r2, r3
 802ab84:	f8a9 2000 	strh.w	r2, [r9]
 802ab88:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802ab8a:	441c      	add	r4, r3
 802ab8c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802ab8e:	f109 0902 	add.w	r9, r9, #2
 802ab92:	441e      	add	r6, r3
 802ab94:	f10a 3aff 	add.w	sl, sl, #4294967295
 802ab98:	e78b      	b.n	802aab2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 802ab9a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802ab9c:	441c      	add	r4, r3
 802ab9e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802aba0:	441e      	add	r6, r3
 802aba2:	9b07      	ldr	r3, [sp, #28]
 802aba4:	3302      	adds	r3, #2
 802aba6:	3d01      	subs	r5, #1
 802aba8:	9307      	str	r3, [sp, #28]
 802abaa:	e746      	b.n	802aa3a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 802abac:	f47f af55 	bne.w	802aa5a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 802abb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802abb2:	2b00      	cmp	r3, #0
 802abb4:	f340 80ad 	ble.w	802ad12 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34a>
 802abb8:	ee3a aa0c 	vadd.f32	s20, s20, s24
 802abbc:	ee79 9aab 	vadd.f32	s19, s19, s23
 802abc0:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 802abc4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802abc6:	ee39 9a0b 	vadd.f32	s18, s18, s22
 802abca:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802abce:	eef0 6a48 	vmov.f32	s13, s16
 802abd2:	ee69 7a27 	vmul.f32	s15, s18, s15
 802abd6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802abda:	ee37 8a48 	vsub.f32	s16, s14, s16
 802abde:	ee16 4a90 	vmov	r4, s13
 802abe2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802abe6:	eef0 6a68 	vmov.f32	s13, s17
 802abea:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802abee:	ee18 2a10 	vmov	r2, s16
 802abf2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802abf6:	fb92 f3f3 	sdiv	r3, r2, r3
 802abfa:	ee18 2a90 	vmov	r2, s17
 802abfe:	9329      	str	r3, [sp, #164]	; 0xa4
 802ac00:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802ac02:	fb92 f3f3 	sdiv	r3, r2, r3
 802ac06:	932a      	str	r3, [sp, #168]	; 0xa8
 802ac08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802ac0a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802ac0c:	3b01      	subs	r3, #1
 802ac0e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802ac12:	930b      	str	r3, [sp, #44]	; 0x2c
 802ac14:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802ac16:	ee16 6a90 	vmov	r6, s13
 802ac1a:	bf14      	ite	ne
 802ac1c:	461d      	movne	r5, r3
 802ac1e:	4615      	moveq	r5, r2
 802ac20:	eef0 8a67 	vmov.f32	s17, s15
 802ac24:	eeb0 8a47 	vmov.f32	s16, s14
 802ac28:	e700      	b.n	802aa2c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 802ac2a:	1c4f      	adds	r7, r1, #1
 802ac2c:	d1ac      	bne.n	802ab88 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 802ac2e:	4588      	cmp	r8, r1
 802ac30:	ddaa      	ble.n	802ab88 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 802ac32:	1c57      	adds	r7, r2, #1
 802ac34:	dba8      	blt.n	802ab88 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 802ac36:	9f08      	ldr	r7, [sp, #32]
 802ac38:	4297      	cmp	r7, r2
 802ac3a:	dda5      	ble.n	802ab88 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 802ac3c:	e9cd 3003 	strd	r3, r0, [sp, #12]
 802ac40:	e9cd 1201 	strd	r1, r2, [sp, #4]
 802ac44:	9700      	str	r7, [sp, #0]
 802ac46:	4643      	mov	r3, r8
 802ac48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802ac4a:	9811      	ldr	r0, [sp, #68]	; 0x44
 802ac4c:	4649      	mov	r1, r9
 802ac4e:	f7ff fe2f 	bl	802a8b0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 802ac52:	e799      	b.n	802ab88 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 802ac54:	1422      	asrs	r2, r4, #16
 802ac56:	1431      	asrs	r1, r6, #16
 802ac58:	fb08 2101 	mla	r1, r8, r1, r2
 802ac5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802ac5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 802ac60:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 802ac64:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 802ac68:	f830 c011 	ldrh.w	ip, [r0, r1, lsl #1]
 802ac6c:	8851      	ldrh	r1, [r2, #2]
 802ac6e:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802ac72:	f1be 0f00 	cmp.w	lr, #0
 802ac76:	d006      	beq.n	802ac86 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 802ac78:	980a      	ldr	r0, [sp, #40]	; 0x28
 802ac7a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802ac7c:	1810      	adds	r0, r2, r0
 802ac7e:	5bd2      	ldrh	r2, [r2, r7]
 802ac80:	920e      	str	r2, [sp, #56]	; 0x38
 802ac82:	8842      	ldrh	r2, [r0, #2]
 802ac84:	920f      	str	r2, [sp, #60]	; 0x3c
 802ac86:	ea4f 400c 	mov.w	r0, ip, lsl #16
 802ac8a:	fb13 f20e 	smulbb	r2, r3, lr
 802ac8e:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802ac92:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802ac96:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802ac9a:	10d2      	asrs	r2, r2, #3
 802ac9c:	ea40 000c 	orr.w	r0, r0, ip
 802aca0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802aca4:	f1ce 0c10 	rsb	ip, lr, #16
 802aca8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802acac:	ebac 0c03 	sub.w	ip, ip, r3
 802acb0:	ea4a 0101 	orr.w	r1, sl, r1
 802acb4:	ebc2 0343 	rsb	r3, r2, r3, lsl #1
 802acb8:	4359      	muls	r1, r3
 802acba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802acbc:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 802acc0:	fb0c 1c00 	mla	ip, ip, r0, r1
 802acc4:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 802acc8:	f423 60fc 	bic.w	r0, r3, #2016	; 0x7e0
 802accc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802acce:	990e      	ldr	r1, [sp, #56]	; 0x38
 802acd0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802acd4:	041b      	lsls	r3, r3, #16
 802acd6:	ea4a 0000 	orr.w	r0, sl, r0
 802acda:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802acde:	f421 6afc 	bic.w	sl, r1, #2016	; 0x7e0
 802ace2:	fb02 c000 	mla	r0, r2, r0, ip
 802ace6:	ea43 0a0a 	orr.w	sl, r3, sl
 802acea:	ebc2 024e 	rsb	r2, r2, lr, lsl #1
 802acee:	fb02 000a 	mla	r0, r2, sl, r0
 802acf2:	0d43      	lsrs	r3, r0, #21
 802acf4:	0940      	lsrs	r0, r0, #5
 802acf6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802acfa:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802acfe:	4318      	orrs	r0, r3
 802ad00:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802ad02:	f82b 0b02 	strh.w	r0, [fp], #2
 802ad06:	441c      	add	r4, r3
 802ad08:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802ad0a:	f109 39ff 	add.w	r9, r9, #4294967295
 802ad0e:	441e      	add	r6, r3
 802ad10:	e6b8      	b.n	802aa84 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xbc>
 802ad12:	b013      	add	sp, #76	; 0x4c
 802ad14:	ecbd 8b0a 	vpop	{d8-d12}
 802ad18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802ad1c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 802ad1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ad20:	8808      	ldrh	r0, [r1, #0]
 802ad22:	b085      	sub	sp, #20
 802ad24:	1206      	asrs	r6, r0, #8
 802ad26:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 802ad2a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 802ad2e:	9600      	str	r6, [sp, #0]
 802ad30:	10c6      	asrs	r6, r0, #3
 802ad32:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802ad36:	9601      	str	r6, [sp, #4]
 802ad38:	00c0      	lsls	r0, r0, #3
 802ad3a:	fb04 c603 	mla	r6, r4, r3, ip
 802ad3e:	b2c0      	uxtb	r0, r0
 802ad40:	4691      	mov	r9, r2
 802ad42:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 802ad46:	9a00      	ldr	r2, [sp, #0]
 802ad48:	9002      	str	r0, [sp, #8]
 802ad4a:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 802ad4e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 802ad52:	9a01      	ldr	r2, [sp, #4]
 802ad54:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 802ad58:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 802ad5c:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 802ad60:	2c00      	cmp	r4, #0
 802ad62:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 802ad66:	db3a      	blt.n	802adde <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc2>
 802ad68:	45a0      	cmp	r8, r4
 802ad6a:	dd38      	ble.n	802adde <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc2>
 802ad6c:	f1bc 0f00 	cmp.w	ip, #0
 802ad70:	db33      	blt.n	802adda <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xbe>
 802ad72:	4563      	cmp	r3, ip
 802ad74:	dd31      	ble.n	802adda <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xbe>
 802ad76:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 802ad7a:	f11c 0601 	adds.w	r6, ip, #1
 802ad7e:	d431      	bmi.n	802ade4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc8>
 802ad80:	42b3      	cmp	r3, r6
 802ad82:	dd2f      	ble.n	802ade4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc8>
 802ad84:	b375      	cbz	r5, 802ade4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc8>
 802ad86:	f8de 6004 	ldr.w	r6, [lr, #4]
 802ad8a:	3401      	adds	r4, #1
 802ad8c:	d42e      	bmi.n	802adec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd0>
 802ad8e:	45a0      	cmp	r8, r4
 802ad90:	dd2c      	ble.n	802adec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd0>
 802ad92:	b35f      	cbz	r7, 802adec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd0>
 802ad94:	f1bc 0f00 	cmp.w	ip, #0
 802ad98:	db26      	blt.n	802ade8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xcc>
 802ad9a:	4563      	cmp	r3, ip
 802ad9c:	dd24      	ble.n	802ade8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xcc>
 802ad9e:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 802ada2:	f11c 0c01 	adds.w	ip, ip, #1
 802ada6:	d405      	bmi.n	802adb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 802ada8:	4563      	cmp	r3, ip
 802adaa:	dd03      	ble.n	802adb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 802adac:	b115      	cbz	r5, 802adb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 802adae:	3301      	adds	r3, #1
 802adb0:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 802adb4:	2d0f      	cmp	r5, #15
 802adb6:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802adba:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802adbe:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802adc2:	ea4f 6810 	mov.w	r8, r0, lsr #24
 802adc6:	d801      	bhi.n	802adcc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb0>
 802adc8:	2f0f      	cmp	r7, #15
 802adca:	d911      	bls.n	802adf0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd4>
 802adcc:	4b82      	ldr	r3, [pc, #520]	; (802afd8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2bc>)
 802adce:	4a83      	ldr	r2, [pc, #524]	; (802afdc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2c0>)
 802add0:	4883      	ldr	r0, [pc, #524]	; (802afe0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2c4>)
 802add2:	f240 210d 	movw	r1, #525	; 0x20d
 802add6:	f003 fa7f 	bl	802e2d8 <__assert_func>
 802adda:	4602      	mov	r2, r0
 802addc:	e7cd      	b.n	802ad7a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 802adde:	4606      	mov	r6, r0
 802ade0:	4602      	mov	r2, r0
 802ade2:	e7d2      	b.n	802ad8a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x6e>
 802ade4:	4606      	mov	r6, r0
 802ade6:	e7d0      	b.n	802ad8a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x6e>
 802ade8:	4604      	mov	r4, r0
 802adea:	e7da      	b.n	802ada2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x86>
 802adec:	4604      	mov	r4, r0
 802adee:	e7e1      	b.n	802adb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 802adf0:	b2ab      	uxth	r3, r5
 802adf2:	b2bf      	uxth	r7, r7
 802adf4:	fb03 fe07 	mul.w	lr, r3, r7
 802adf8:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 802adfc:	011b      	lsls	r3, r3, #4
 802adfe:	eba3 0c0e 	sub.w	ip, r3, lr
 802ae02:	b2bf      	uxth	r7, r7
 802ae04:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 802ae08:	fa1f fc8c 	uxth.w	ip, ip
 802ae0c:	1bed      	subs	r5, r5, r7
 802ae0e:	b2ad      	uxth	r5, r5
 802ae10:	fb0c f30a 	mul.w	r3, ip, sl
 802ae14:	fb05 330b 	mla	r3, r5, fp, r3
 802ae18:	fb07 3309 	mla	r3, r7, r9, r3
 802ae1c:	fb0e 3308 	mla	r3, lr, r8, r3
 802ae20:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802ae24:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802ae28:	9303      	str	r3, [sp, #12]
 802ae2a:	d018      	beq.n	802ae5e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x142>
 802ae2c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 802ae30:	fb0b f303 	mul.w	r3, fp, r3
 802ae34:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802ae38:	fb0b fb02 	mul.w	fp, fp, r2
 802ae3c:	0a1a      	lsrs	r2, r3, #8
 802ae3e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802ae42:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 802ae46:	441a      	add	r2, r3
 802ae48:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 802ae4c:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 802ae50:	0a12      	lsrs	r2, r2, #8
 802ae52:	0a1b      	lsrs	r3, r3, #8
 802ae54:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802ae58:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802ae5c:	431a      	orrs	r2, r3
 802ae5e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802ae62:	d019      	beq.n	802ae98 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x17c>
 802ae64:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 802ae68:	fb0a fb0b 	mul.w	fp, sl, fp
 802ae6c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802ae70:	fb0a fa06 	mul.w	sl, sl, r6
 802ae74:	ea4f 261b 	mov.w	r6, fp, lsr #8
 802ae78:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802ae7c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802ae80:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 802ae84:	445e      	add	r6, fp
 802ae86:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 802ae8a:	0a36      	lsrs	r6, r6, #8
 802ae8c:	0a1b      	lsrs	r3, r3, #8
 802ae8e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802ae92:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802ae96:	431e      	orrs	r6, r3
 802ae98:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802ae9c:	d019      	beq.n	802aed2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1b6>
 802ae9e:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 802aea2:	fb09 fa0a 	mul.w	sl, r9, sl
 802aea6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802aeaa:	fb09 f904 	mul.w	r9, r9, r4
 802aeae:	ea4f 241a 	mov.w	r4, sl, lsr #8
 802aeb2:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802aeb6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802aeba:	f509 7380 	add.w	r3, r9, #256	; 0x100
 802aebe:	4454      	add	r4, sl
 802aec0:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 802aec4:	0a24      	lsrs	r4, r4, #8
 802aec6:	0a1b      	lsrs	r3, r3, #8
 802aec8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802aecc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802aed0:	431c      	orrs	r4, r3
 802aed2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802aed6:	d019      	beq.n	802af0c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1f0>
 802aed8:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 802aedc:	fb08 f909 	mul.w	r9, r8, r9
 802aee0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802aee4:	fb08 f800 	mul.w	r8, r8, r0
 802aee8:	ea4f 2019 	mov.w	r0, r9, lsr #8
 802aeec:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802aef0:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 802aef4:	f508 7380 	add.w	r3, r8, #256	; 0x100
 802aef8:	4448      	add	r0, r9
 802aefa:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 802aefe:	0a00      	lsrs	r0, r0, #8
 802af00:	0a1b      	lsrs	r3, r3, #8
 802af02:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802af06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802af0a:	4318      	orrs	r0, r3
 802af0c:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 802af10:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802af14:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 802af18:	fb0c f808 	mul.w	r8, ip, r8
 802af1c:	fb0c f606 	mul.w	r6, ip, r6
 802af20:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802af24:	fb05 6202 	mla	r2, r5, r2, r6
 802af28:	fb05 8803 	mla	r8, r5, r3, r8
 802af2c:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 802af30:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802af34:	fb07 8803 	mla	r8, r7, r3, r8
 802af38:	fb07 2704 	mla	r7, r7, r4, r2
 802af3c:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 802af40:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802af44:	fb0e 8303 	mla	r3, lr, r3, r8
 802af48:	fb0e 7e00 	mla	lr, lr, r0, r7
 802af4c:	0a1b      	lsrs	r3, r3, #8
 802af4e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802af52:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802af56:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 802af5a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802af5e:	ea43 0e0e 	orr.w	lr, r3, lr
 802af62:	9b03      	ldr	r3, [sp, #12]
 802af64:	b2a4      	uxth	r4, r4
 802af66:	4363      	muls	r3, r4
 802af68:	1c5a      	adds	r2, r3, #1
 802af6a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802af6e:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 802af72:	9b00      	ldr	r3, [sp, #0]
 802af74:	b2d2      	uxtb	r2, r2
 802af76:	ea4f 451e 	mov.w	r5, lr, lsr #16
 802af7a:	fb13 f302 	smulbb	r3, r3, r2
 802af7e:	fb05 3304 	mla	r3, r5, r4, r3
 802af82:	b29d      	uxth	r5, r3
 802af84:	9b01      	ldr	r3, [sp, #4]
 802af86:	f3ce 2007 	ubfx	r0, lr, #8, #8
 802af8a:	fb13 f302 	smulbb	r3, r3, r2
 802af8e:	fb00 3004 	mla	r0, r0, r4, r3
 802af92:	9b02      	ldr	r3, [sp, #8]
 802af94:	fa5f fe8e 	uxtb.w	lr, lr
 802af98:	fb13 f202 	smulbb	r2, r3, r2
 802af9c:	fb0e 2e04 	mla	lr, lr, r4, r2
 802afa0:	fa1f fe8e 	uxth.w	lr, lr
 802afa4:	b280      	uxth	r0, r0
 802afa6:	f10e 0201 	add.w	r2, lr, #1
 802afaa:	1c6b      	adds	r3, r5, #1
 802afac:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 802afb0:	1c42      	adds	r2, r0, #1
 802afb2:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 802afb6:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802afba:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 802afbe:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 802afc2:	0952      	lsrs	r2, r2, #5
 802afc4:	ea43 030e 	orr.w	r3, r3, lr
 802afc8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802afcc:	4313      	orrs	r3, r2
 802afce:	800b      	strh	r3, [r1, #0]
 802afd0:	b005      	add	sp, #20
 802afd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802afd6:	bf00      	nop
 802afd8:	080343dc 	.word	0x080343dc
 802afdc:	08034935 	.word	0x08034935
 802afe0:	08034464 	.word	0x08034464

0802afe4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802afe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802afe8:	ed2d 8b08 	vpush	{d8-d11}
 802afec:	b099      	sub	sp, #100	; 0x64
 802afee:	eeb0 aa40 	vmov.f32	s20, s0
 802aff2:	9306      	str	r3, [sp, #24]
 802aff4:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 802aff8:	9307      	str	r3, [sp, #28]
 802affa:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 802affe:	9216      	str	r2, [sp, #88]	; 0x58
 802b000:	9310      	str	r3, [sp, #64]	; 0x40
 802b002:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 802b004:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 802b008:	9113      	str	r1, [sp, #76]	; 0x4c
 802b00a:	9315      	str	r3, [sp, #84]	; 0x54
 802b00c:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 802b010:	9017      	str	r0, [sp, #92]	; 0x5c
 802b012:	6850      	ldr	r0, [r2, #4]
 802b014:	6812      	ldr	r2, [r2, #0]
 802b016:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 802b018:	fb00 1303 	mla	r3, r0, r3, r1
 802b01c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802b020:	930a      	str	r3, [sp, #40]	; 0x28
 802b022:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802b024:	681b      	ldr	r3, [r3, #0]
 802b026:	9312      	str	r3, [sp, #72]	; 0x48
 802b028:	9b07      	ldr	r3, [sp, #28]
 802b02a:	009b      	lsls	r3, r3, #2
 802b02c:	eef0 9a60 	vmov.f32	s19, s1
 802b030:	eeb0 9a41 	vmov.f32	s18, s2
 802b034:	eeb0 8a62 	vmov.f32	s16, s5
 802b038:	eef0 8a43 	vmov.f32	s17, s6
 802b03c:	eef0 ba44 	vmov.f32	s23, s8
 802b040:	eeb0 ba64 	vmov.f32	s22, s9
 802b044:	eef0 aa45 	vmov.f32	s21, s10
 802b048:	930e      	str	r3, [sp, #56]	; 0x38
 802b04a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802b04c:	2b00      	cmp	r3, #0
 802b04e:	dc03      	bgt.n	802b058 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 802b050:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802b052:	2b00      	cmp	r3, #0
 802b054:	f340 8352 	ble.w	802b6fc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x718>
 802b058:	9b06      	ldr	r3, [sp, #24]
 802b05a:	2b00      	cmp	r3, #0
 802b05c:	f340 81a8 	ble.w	802b3b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3cc>
 802b060:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802b062:	1412      	asrs	r2, r2, #16
 802b064:	ea4f 4324 	mov.w	r3, r4, asr #16
 802b068:	d430      	bmi.n	802b0cc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 802b06a:	9807      	ldr	r0, [sp, #28]
 802b06c:	1c51      	adds	r1, r2, #1
 802b06e:	4288      	cmp	r0, r1
 802b070:	dd2f      	ble.n	802b0d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 802b072:	2b00      	cmp	r3, #0
 802b074:	db2d      	blt.n	802b0d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 802b076:	9810      	ldr	r0, [sp, #64]	; 0x40
 802b078:	1c59      	adds	r1, r3, #1
 802b07a:	4288      	cmp	r0, r1
 802b07c:	dd29      	ble.n	802b0d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 802b07e:	9b06      	ldr	r3, [sp, #24]
 802b080:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802b082:	992b      	ldr	r1, [sp, #172]	; 0xac
 802b084:	3b01      	subs	r3, #1
 802b086:	fb02 1203 	mla	r2, r2, r3, r1
 802b08a:	1412      	asrs	r2, r2, #16
 802b08c:	d42c      	bmi.n	802b0e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 802b08e:	9907      	ldr	r1, [sp, #28]
 802b090:	3201      	adds	r2, #1
 802b092:	4291      	cmp	r1, r2
 802b094:	dd28      	ble.n	802b0e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 802b096:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 802b098:	fb02 4303 	mla	r3, r2, r3, r4
 802b09c:	141b      	asrs	r3, r3, #16
 802b09e:	d423      	bmi.n	802b0e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 802b0a0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802b0a2:	3301      	adds	r3, #1
 802b0a4:	429a      	cmp	r2, r3
 802b0a6:	dd1f      	ble.n	802b0e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 802b0a8:	9b06      	ldr	r3, [sp, #24]
 802b0aa:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 802b0ae:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 802b0b2:	9311      	str	r3, [sp, #68]	; 0x44
 802b0b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802b0b6:	2b00      	cmp	r3, #0
 802b0b8:	f300 81e3 	bgt.w	802b482 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x49e>
 802b0bc:	9b06      	ldr	r3, [sp, #24]
 802b0be:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802b0c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802b0c4:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802b0c8:	930a      	str	r3, [sp, #40]	; 0x28
 802b0ca:	e173      	b.n	802b3b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 802b0cc:	1c51      	adds	r1, r2, #1
 802b0ce:	f040 8162 	bne.w	802b396 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b2>
 802b0d2:	9907      	ldr	r1, [sp, #28]
 802b0d4:	428a      	cmp	r2, r1
 802b0d6:	f280 815e 	bge.w	802b396 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b2>
 802b0da:	1c5f      	adds	r7, r3, #1
 802b0dc:	f2c0 815b 	blt.w	802b396 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b2>
 802b0e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802b0e2:	4293      	cmp	r3, r2
 802b0e4:	f280 8157 	bge.w	802b396 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b2>
 802b0e8:	9b06      	ldr	r3, [sp, #24]
 802b0ea:	9314      	str	r3, [sp, #80]	; 0x50
 802b0ec:	f8bd 7054 	ldrh.w	r7, [sp, #84]	; 0x54
 802b0f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802b0f2:	9311      	str	r3, [sp, #68]	; 0x44
 802b0f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802b0f6:	2b00      	cmp	r3, #0
 802b0f8:	dde0      	ble.n	802b0bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 802b0fa:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802b0fc:	f3c2 3003 	ubfx	r0, r2, #12, #4
 802b100:	1412      	asrs	r2, r2, #16
 802b102:	ea4f 4324 	mov.w	r3, r4, asr #16
 802b106:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802b10a:	f100 81a1 	bmi.w	802b450 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46c>
 802b10e:	9e07      	ldr	r6, [sp, #28]
 802b110:	1c55      	adds	r5, r2, #1
 802b112:	42ae      	cmp	r6, r5
 802b114:	f340 819e 	ble.w	802b454 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x470>
 802b118:	2b00      	cmp	r3, #0
 802b11a:	f2c0 819b 	blt.w	802b454 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x470>
 802b11e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 802b120:	1c5d      	adds	r5, r3, #1
 802b122:	42ae      	cmp	r6, r5
 802b124:	f340 8196 	ble.w	802b454 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x470>
 802b128:	9d07      	ldr	r5, [sp, #28]
 802b12a:	fb03 2305 	mla	r3, r3, r5, r2
 802b12e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802b130:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 802b134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802b138:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802b13c:	2800      	cmp	r0, #0
 802b13e:	f000 8178 	beq.w	802b432 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44e>
 802b142:	686a      	ldr	r2, [r5, #4]
 802b144:	920b      	str	r2, [sp, #44]	; 0x2c
 802b146:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802b14a:	2900      	cmp	r1, #0
 802b14c:	f000 817a 	beq.w	802b444 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 802b150:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802b152:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 802b154:	18aa      	adds	r2, r5, r2
 802b156:	59ad      	ldr	r5, [r5, r6]
 802b158:	6852      	ldr	r2, [r2, #4]
 802b15a:	9508      	str	r5, [sp, #32]
 802b15c:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 802b160:	920c      	str	r2, [sp, #48]	; 0x30
 802b162:	0e15      	lsrs	r5, r2, #24
 802b164:	b280      	uxth	r0, r0
 802b166:	b289      	uxth	r1, r1
 802b168:	fb00 fb01 	mul.w	fp, r0, r1
 802b16c:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 802b170:	0100      	lsls	r0, r0, #4
 802b172:	eba0 090b 	sub.w	r9, r0, fp
 802b176:	b289      	uxth	r1, r1
 802b178:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 802b17c:	fa1f f989 	uxth.w	r9, r9
 802b180:	1a52      	subs	r2, r2, r1
 802b182:	b292      	uxth	r2, r2
 802b184:	fb09 f008 	mul.w	r0, r9, r8
 802b188:	fb02 000c 	mla	r0, r2, ip, r0
 802b18c:	fb01 000a 	mla	r0, r1, sl, r0
 802b190:	fb0b 0005 	mla	r0, fp, r5, r0
 802b194:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802b198:	2800      	cmp	r0, #0
 802b19a:	f000 80ef 	beq.w	802b37c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 802b19e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802b1a2:	d01b      	beq.n	802b1dc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f8>
 802b1a4:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 802b1a8:	fb0c fe0e 	mul.w	lr, ip, lr
 802b1ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802b1b0:	fb0c fc03 	mul.w	ip, ip, r3
 802b1b4:	ea4f 231e 	mov.w	r3, lr, lsr #8
 802b1b8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802b1bc:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802b1c0:	4473      	add	r3, lr
 802b1c2:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 802b1c6:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 802b1ca:	0a1b      	lsrs	r3, r3, #8
 802b1cc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802b1d0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802b1d4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802b1d8:	ea43 030e 	orr.w	r3, r3, lr
 802b1dc:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802b1e0:	d01e      	beq.n	802b220 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 802b1e2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 802b1e4:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 802b1e8:	fb08 fc0c 	mul.w	ip, r8, ip
 802b1ec:	f406 4e7f 	and.w	lr, r6, #65280	; 0xff00
 802b1f0:	fb08 f80e 	mul.w	r8, r8, lr
 802b1f4:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802b1f8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802b1fc:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802b200:	44e6      	add	lr, ip
 802b202:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 802b206:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 802b20a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802b20e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802b212:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802b216:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802b21a:	ea4e 0608 	orr.w	r6, lr, r8
 802b21e:	960b      	str	r6, [sp, #44]	; 0x2c
 802b220:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802b224:	d01e      	beq.n	802b264 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 802b226:	9e08      	ldr	r6, [sp, #32]
 802b228:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 802b22c:	fb0a f808 	mul.w	r8, sl, r8
 802b230:	f406 4c7f 	and.w	ip, r6, #65280	; 0xff00
 802b234:	fb0a fa0c 	mul.w	sl, sl, ip
 802b238:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 802b23c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802b240:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 802b244:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802b248:	44c6      	add	lr, r8
 802b24a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802b24e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802b252:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802b256:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802b25a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802b25e:	ea4e 060a 	orr.w	r6, lr, sl
 802b262:	9608      	str	r6, [sp, #32]
 802b264:	2dff      	cmp	r5, #255	; 0xff
 802b266:	d01d      	beq.n	802b2a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c0>
 802b268:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802b26a:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 802b26e:	fb05 f808 	mul.w	r8, r5, r8
 802b272:	f406 4c7f 	and.w	ip, r6, #65280	; 0xff00
 802b276:	fb05 f50c 	mul.w	r5, r5, ip
 802b27a:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 802b27e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802b282:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 802b286:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 802b28a:	44c6      	add	lr, r8
 802b28c:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802b290:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802b294:	0a2d      	lsrs	r5, r5, #8
 802b296:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802b29a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802b29e:	ea4e 0505 	orr.w	r5, lr, r5
 802b2a2:	950c      	str	r5, [sp, #48]	; 0x30
 802b2a4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802b2a6:	9e08      	ldr	r6, [sp, #32]
 802b2a8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802b2ac:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802b2b0:	fb09 f505 	mul.w	r5, r9, r5
 802b2b4:	fb02 550c 	mla	r5, r2, ip, r5
 802b2b8:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 802b2bc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802b2be:	fb01 550c 	mla	r5, r1, ip, r5
 802b2c2:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 802b2c6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 802b2c8:	fb0b 550c 	mla	r5, fp, ip, r5
 802b2cc:	f406 4c7f 	and.w	ip, r6, #65280	; 0xff00
 802b2d0:	fb09 f90c 	mul.w	r9, r9, ip
 802b2d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802b2d8:	fb02 9303 	mla	r3, r2, r3, r9
 802b2dc:	9a08      	ldr	r2, [sp, #32]
 802b2de:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 802b2e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802b2e4:	fb01 330e 	mla	r3, r1, lr, r3
 802b2e8:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 802b2ec:	fb0b 3b01 	mla	fp, fp, r1, r3
 802b2f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802b2f2:	0a2d      	lsrs	r5, r5, #8
 802b2f4:	f8b3 c000 	ldrh.w	ip, [r3]
 802b2f8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802b2fc:	fb00 f307 	mul.w	r3, r0, r7
 802b300:	1c58      	adds	r0, r3, #1
 802b302:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802b306:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 802b30a:	ea45 050b 	orr.w	r5, r5, fp
 802b30e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802b312:	0c29      	lsrs	r1, r5, #16
 802b314:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802b318:	ea4f 232c 	mov.w	r3, ip, asr #8
 802b31c:	b2c0      	uxtb	r0, r0
 802b31e:	fb11 f107 	smulbb	r1, r1, r7
 802b322:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 802b326:	fb03 1300 	mla	r3, r3, r0, r1
 802b32a:	b299      	uxth	r1, r3
 802b32c:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802b330:	f3c5 2307 	ubfx	r3, r5, #8, #8
 802b334:	fb13 f307 	smulbb	r3, r3, r7
 802b338:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802b33c:	fb02 3200 	mla	r2, r2, r0, r3
 802b340:	b2ed      	uxtb	r5, r5
 802b342:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 802b346:	b2db      	uxtb	r3, r3
 802b348:	fb15 f507 	smulbb	r5, r5, r7
 802b34c:	fb03 5500 	mla	r5, r3, r0, r5
 802b350:	b292      	uxth	r2, r2
 802b352:	b2ad      	uxth	r5, r5
 802b354:	1c4b      	adds	r3, r1, #1
 802b356:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802b35a:	1c68      	adds	r0, r5, #1
 802b35c:	1c51      	adds	r1, r2, #1
 802b35e:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 802b362:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802b366:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 802b36a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 802b36e:	0952      	lsrs	r2, r2, #5
 802b370:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802b374:	432b      	orrs	r3, r5
 802b376:	4313      	orrs	r3, r2
 802b378:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802b37a:	8013      	strh	r3, [r2, #0]
 802b37c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802b37e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802b380:	3302      	adds	r3, #2
 802b382:	9311      	str	r3, [sp, #68]	; 0x44
 802b384:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802b386:	4413      	add	r3, r2
 802b388:	932b      	str	r3, [sp, #172]	; 0xac
 802b38a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802b38c:	441c      	add	r4, r3
 802b38e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802b390:	3b01      	subs	r3, #1
 802b392:	9314      	str	r3, [sp, #80]	; 0x50
 802b394:	e6ae      	b.n	802b0f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 802b396:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802b398:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802b39a:	4413      	add	r3, r2
 802b39c:	932b      	str	r3, [sp, #172]	; 0xac
 802b39e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802b3a0:	441c      	add	r4, r3
 802b3a2:	9b06      	ldr	r3, [sp, #24]
 802b3a4:	3b01      	subs	r3, #1
 802b3a6:	9306      	str	r3, [sp, #24]
 802b3a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802b3aa:	3302      	adds	r3, #2
 802b3ac:	930a      	str	r3, [sp, #40]	; 0x28
 802b3ae:	e653      	b.n	802b058 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 802b3b0:	f47f ae65 	bne.w	802b07e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 802b3b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802b3b6:	2b00      	cmp	r3, #0
 802b3b8:	f340 81a0 	ble.w	802b6fc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x718>
 802b3bc:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802b3c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802b3c4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802b3c8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802b3ca:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802b3ce:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802b3d2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802b3d6:	eef0 6a48 	vmov.f32	s13, s16
 802b3da:	ee69 7a27 	vmul.f32	s15, s18, s15
 802b3de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802b3e2:	ee37 8a48 	vsub.f32	s16, s14, s16
 802b3e6:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 802b3ea:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802b3ee:	eef0 6a68 	vmov.f32	s13, s17
 802b3f2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802b3f6:	ee18 2a10 	vmov	r2, s16
 802b3fa:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802b3fe:	fb92 f3f3 	sdiv	r3, r2, r3
 802b402:	ee18 2a90 	vmov	r2, s17
 802b406:	932d      	str	r3, [sp, #180]	; 0xb4
 802b408:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802b40a:	fb92 f3f3 	sdiv	r3, r2, r3
 802b40e:	932e      	str	r3, [sp, #184]	; 0xb8
 802b410:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802b412:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802b414:	3b01      	subs	r3, #1
 802b416:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802b41a:	9313      	str	r3, [sp, #76]	; 0x4c
 802b41c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802b41e:	bf08      	it	eq
 802b420:	4613      	moveq	r3, r2
 802b422:	ee16 4a90 	vmov	r4, s13
 802b426:	9306      	str	r3, [sp, #24]
 802b428:	eef0 8a67 	vmov.f32	s17, s15
 802b42c:	eeb0 8a47 	vmov.f32	s16, s14
 802b430:	e60b      	b.n	802b04a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 802b432:	b151      	cbz	r1, 802b44a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 802b434:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802b436:	58aa      	ldr	r2, [r5, r2]
 802b438:	9208      	str	r2, [sp, #32]
 802b43a:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 802b43e:	25ff      	movs	r5, #255	; 0xff
 802b440:	46a8      	mov	r8, r5
 802b442:	e68f      	b.n	802b164 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x180>
 802b444:	25ff      	movs	r5, #255	; 0xff
 802b446:	46aa      	mov	sl, r5
 802b448:	e68c      	b.n	802b164 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x180>
 802b44a:	25ff      	movs	r5, #255	; 0xff
 802b44c:	46aa      	mov	sl, r5
 802b44e:	e7f7      	b.n	802b440 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 802b450:	1c56      	adds	r6, r2, #1
 802b452:	d193      	bne.n	802b37c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 802b454:	9d07      	ldr	r5, [sp, #28]
 802b456:	4295      	cmp	r5, r2
 802b458:	dd90      	ble.n	802b37c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 802b45a:	1c5d      	adds	r5, r3, #1
 802b45c:	db8e      	blt.n	802b37c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 802b45e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802b460:	429d      	cmp	r5, r3
 802b462:	dd8b      	ble.n	802b37c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 802b464:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802b466:	9201      	str	r2, [sp, #4]
 802b468:	e9cd 3002 	strd	r3, r0, [sp, #8]
 802b46c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802b46e:	9300      	str	r3, [sp, #0]
 802b470:	e9cd 1504 	strd	r1, r5, [sp, #16]
 802b474:	9b07      	ldr	r3, [sp, #28]
 802b476:	9817      	ldr	r0, [sp, #92]	; 0x5c
 802b478:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
 802b47c:	f7ff fc4e 	bl	802ad1c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 802b480:	e77c      	b.n	802b37c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 802b482:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802b484:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802b486:	9d07      	ldr	r5, [sp, #28]
 802b488:	1412      	asrs	r2, r2, #16
 802b48a:	f3c3 3103 	ubfx	r1, r3, #12, #4
 802b48e:	1423      	asrs	r3, r4, #16
 802b490:	fb05 2303 	mla	r3, r5, r3, r2
 802b494:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802b496:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 802b49a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802b49e:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802b4a2:	0e1e      	lsrs	r6, r3, #24
 802b4a4:	2900      	cmp	r1, #0
 802b4a6:	f000 811a 	beq.w	802b6de <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6fa>
 802b4aa:	686a      	ldr	r2, [r5, #4]
 802b4ac:	920d      	str	r2, [sp, #52]	; 0x34
 802b4ae:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 802b4b2:	2800      	cmp	r0, #0
 802b4b4:	f000 811c 	beq.w	802b6f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70c>
 802b4b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802b4ba:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 802b4bc:	18aa      	adds	r2, r5, r2
 802b4be:	59ed      	ldr	r5, [r5, r7]
 802b4c0:	6852      	ldr	r2, [r2, #4]
 802b4c2:	9509      	str	r5, [sp, #36]	; 0x24
 802b4c4:	ea4f 6815 	mov.w	r8, r5, lsr #24
 802b4c8:	920f      	str	r2, [sp, #60]	; 0x3c
 802b4ca:	0e15      	lsrs	r5, r2, #24
 802b4cc:	b289      	uxth	r1, r1
 802b4ce:	b280      	uxth	r0, r0
 802b4d0:	fb01 f900 	mul.w	r9, r1, r0
 802b4d4:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802b4d8:	0109      	lsls	r1, r1, #4
 802b4da:	eba1 0e09 	sub.w	lr, r1, r9
 802b4de:	b280      	uxth	r0, r0
 802b4e0:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 802b4e4:	fa1f fe8e 	uxth.w	lr, lr
 802b4e8:	1a12      	subs	r2, r2, r0
 802b4ea:	b292      	uxth	r2, r2
 802b4ec:	fb0e f10c 	mul.w	r1, lr, ip
 802b4f0:	fb02 1106 	mla	r1, r2, r6, r1
 802b4f4:	fb00 1108 	mla	r1, r0, r8, r1
 802b4f8:	fb09 1105 	mla	r1, r9, r5, r1
 802b4fc:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802b500:	2900      	cmp	r1, #0
 802b502:	f000 80e0 	beq.w	802b6c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e2>
 802b506:	2eff      	cmp	r6, #255	; 0xff
 802b508:	d016      	beq.n	802b538 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x554>
 802b50a:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 802b50e:	4377      	muls	r7, r6
 802b510:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802b514:	435e      	muls	r6, r3
 802b516:	0a3b      	lsrs	r3, r7, #8
 802b518:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802b51c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802b520:	443b      	add	r3, r7
 802b522:	f506 7780 	add.w	r7, r6, #256	; 0x100
 802b526:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 802b52a:	0a1b      	lsrs	r3, r3, #8
 802b52c:	0a3f      	lsrs	r7, r7, #8
 802b52e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802b532:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802b536:	433b      	orrs	r3, r7
 802b538:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802b53c:	d01d      	beq.n	802b57a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x596>
 802b53e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 802b540:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802b542:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802b546:	fb0c f606 	mul.w	r6, ip, r6
 802b54a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802b54e:	fb0c fc07 	mul.w	ip, ip, r7
 802b552:	0a37      	lsrs	r7, r6, #8
 802b554:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802b558:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 802b55c:	4437      	add	r7, r6
 802b55e:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 802b562:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 802b566:	0a3f      	lsrs	r7, r7, #8
 802b568:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802b56c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802b570:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802b574:	ea47 060c 	orr.w	r6, r7, ip
 802b578:	960d      	str	r6, [sp, #52]	; 0x34
 802b57a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802b57e:	d01d      	beq.n	802b5bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5d8>
 802b580:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802b582:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 802b586:	fb08 fc0c 	mul.w	ip, r8, ip
 802b58a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802b58e:	fb08 f806 	mul.w	r8, r8, r6
 802b592:	ea4f 271c 	mov.w	r7, ip, lsr #8
 802b596:	f508 7680 	add.w	r6, r8, #256	; 0x100
 802b59a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802b59e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802b5a2:	eb06 2818 	add.w	r8, r6, r8, lsr #8
 802b5a6:	4467      	add	r7, ip
 802b5a8:	0a3f      	lsrs	r7, r7, #8
 802b5aa:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802b5ae:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802b5b2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802b5b6:	ea47 0608 	orr.w	r6, r7, r8
 802b5ba:	9609      	str	r6, [sp, #36]	; 0x24
 802b5bc:	2dff      	cmp	r5, #255	; 0xff
 802b5be:	d01a      	beq.n	802b5f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x612>
 802b5c0:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 802b5c2:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 802b5c6:	fb05 fc0c 	mul.w	ip, r5, ip
 802b5ca:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802b5ce:	4375      	muls	r5, r6
 802b5d0:	ea4f 271c 	mov.w	r7, ip, lsr #8
 802b5d4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802b5d8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802b5dc:	f505 7680 	add.w	r6, r5, #256	; 0x100
 802b5e0:	4467      	add	r7, ip
 802b5e2:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 802b5e6:	0a3f      	lsrs	r7, r7, #8
 802b5e8:	0a2d      	lsrs	r5, r5, #8
 802b5ea:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802b5ee:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802b5f2:	433d      	orrs	r5, r7
 802b5f4:	950f      	str	r5, [sp, #60]	; 0x3c
 802b5f6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802b5f8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802b5fc:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 802b600:	fb0e f505 	mul.w	r5, lr, r5
 802b604:	fb02 5506 	mla	r5, r2, r6, r5
 802b608:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802b60a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802b60e:	fb00 5506 	mla	r5, r0, r6, r5
 802b612:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 802b614:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802b618:	fb09 5506 	mla	r5, r9, r6, r5
 802b61c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 802b61e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802b622:	fb0e fe06 	mul.w	lr, lr, r6
 802b626:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802b62a:	fb02 e303 	mla	r3, r2, r3, lr
 802b62e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802b630:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 802b634:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802b636:	fb00 3307 	mla	r3, r0, r7, r3
 802b63a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 802b63e:	fb09 3c0c 	mla	ip, r9, ip, r3
 802b642:	fb01 f10b 	mul.w	r1, r1, fp
 802b646:	0a2d      	lsrs	r5, r5, #8
 802b648:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802b64c:	f8ba 0000 	ldrh.w	r0, [sl]
 802b650:	1c4b      	adds	r3, r1, #1
 802b652:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802b656:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802b65a:	ea45 050c 	orr.w	r5, r5, ip
 802b65e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802b662:	1202      	asrs	r2, r0, #8
 802b664:	0c2b      	lsrs	r3, r5, #16
 802b666:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802b66a:	b2c9      	uxtb	r1, r1
 802b66c:	fb13 f30b 	smulbb	r3, r3, fp
 802b670:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802b674:	fb02 3201 	mla	r2, r2, r1, r3
 802b678:	f3c5 2607 	ubfx	r6, r5, #8, #8
 802b67c:	10c3      	asrs	r3, r0, #3
 802b67e:	b2ed      	uxtb	r5, r5
 802b680:	00c0      	lsls	r0, r0, #3
 802b682:	b2c0      	uxtb	r0, r0
 802b684:	fb15 f50b 	smulbb	r5, r5, fp
 802b688:	fb00 5001 	mla	r0, r0, r1, r5
 802b68c:	b292      	uxth	r2, r2
 802b68e:	fb16 f60b 	smulbb	r6, r6, fp
 802b692:	b280      	uxth	r0, r0
 802b694:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802b698:	fb03 6301 	mla	r3, r3, r1, r6
 802b69c:	1c51      	adds	r1, r2, #1
 802b69e:	1c46      	adds	r6, r0, #1
 802b6a0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802b6a4:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 802b6a8:	b29b      	uxth	r3, r3
 802b6aa:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 802b6ae:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 802b6b2:	4332      	orrs	r2, r6
 802b6b4:	1c5e      	adds	r6, r3, #1
 802b6b6:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 802b6ba:	095b      	lsrs	r3, r3, #5
 802b6bc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802b6c0:	431a      	orrs	r2, r3
 802b6c2:	f8aa 2000 	strh.w	r2, [sl]
 802b6c6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802b6c8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802b6ca:	4413      	add	r3, r2
 802b6cc:	932b      	str	r3, [sp, #172]	; 0xac
 802b6ce:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802b6d0:	441c      	add	r4, r3
 802b6d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802b6d4:	3b01      	subs	r3, #1
 802b6d6:	f10a 0a02 	add.w	sl, sl, #2
 802b6da:	9311      	str	r3, [sp, #68]	; 0x44
 802b6dc:	e4ea      	b.n	802b0b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 802b6de:	b150      	cbz	r0, 802b6f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x712>
 802b6e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802b6e2:	58aa      	ldr	r2, [r5, r2]
 802b6e4:	9209      	str	r2, [sp, #36]	; 0x24
 802b6e6:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802b6ea:	25ff      	movs	r5, #255	; 0xff
 802b6ec:	46ac      	mov	ip, r5
 802b6ee:	e6ed      	b.n	802b4cc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e8>
 802b6f0:	25ff      	movs	r5, #255	; 0xff
 802b6f2:	46a8      	mov	r8, r5
 802b6f4:	e6ea      	b.n	802b4cc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e8>
 802b6f6:	25ff      	movs	r5, #255	; 0xff
 802b6f8:	46a8      	mov	r8, r5
 802b6fa:	e7f7      	b.n	802b6ec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x708>
 802b6fc:	b019      	add	sp, #100	; 0x64
 802b6fe:	ecbd 8b08 	vpop	{d8-d11}
 802b702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802b708 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 802b708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b70c:	8808      	ldrh	r0, [r1, #0]
 802b70e:	b085      	sub	sp, #20
 802b710:	1206      	asrs	r6, r0, #8
 802b712:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 802b716:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 802b71a:	9600      	str	r6, [sp, #0]
 802b71c:	10c6      	asrs	r6, r0, #3
 802b71e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802b722:	9601      	str	r6, [sp, #4]
 802b724:	00c0      	lsls	r0, r0, #3
 802b726:	fb04 c603 	mla	r6, r4, r3, ip
 802b72a:	b2c0      	uxtb	r0, r0
 802b72c:	4691      	mov	r9, r2
 802b72e:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 802b732:	9a00      	ldr	r2, [sp, #0]
 802b734:	9002      	str	r0, [sp, #8]
 802b736:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 802b73a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 802b73e:	9a01      	ldr	r2, [sp, #4]
 802b740:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 802b744:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 802b748:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 802b74c:	2c00      	cmp	r4, #0
 802b74e:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 802b752:	db3a      	blt.n	802b7ca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc2>
 802b754:	45a0      	cmp	r8, r4
 802b756:	dd38      	ble.n	802b7ca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc2>
 802b758:	f1bc 0f00 	cmp.w	ip, #0
 802b75c:	db33      	blt.n	802b7c6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xbe>
 802b75e:	4563      	cmp	r3, ip
 802b760:	dd31      	ble.n	802b7c6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xbe>
 802b762:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 802b766:	f11c 0601 	adds.w	r6, ip, #1
 802b76a:	d431      	bmi.n	802b7d0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc8>
 802b76c:	42b3      	cmp	r3, r6
 802b76e:	dd2f      	ble.n	802b7d0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc8>
 802b770:	b375      	cbz	r5, 802b7d0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc8>
 802b772:	f8de 6004 	ldr.w	r6, [lr, #4]
 802b776:	3401      	adds	r4, #1
 802b778:	d42e      	bmi.n	802b7d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd0>
 802b77a:	45a0      	cmp	r8, r4
 802b77c:	dd2c      	ble.n	802b7d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd0>
 802b77e:	b35f      	cbz	r7, 802b7d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd0>
 802b780:	f1bc 0f00 	cmp.w	ip, #0
 802b784:	db26      	blt.n	802b7d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xcc>
 802b786:	4563      	cmp	r3, ip
 802b788:	dd24      	ble.n	802b7d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xcc>
 802b78a:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 802b78e:	f11c 0c01 	adds.w	ip, ip, #1
 802b792:	d405      	bmi.n	802b7a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x98>
 802b794:	4563      	cmp	r3, ip
 802b796:	dd03      	ble.n	802b7a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x98>
 802b798:	b115      	cbz	r5, 802b7a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x98>
 802b79a:	3301      	adds	r3, #1
 802b79c:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 802b7a0:	2d0f      	cmp	r5, #15
 802b7a2:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802b7a6:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802b7aa:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802b7ae:	ea4f 6810 	mov.w	r8, r0, lsr #24
 802b7b2:	d801      	bhi.n	802b7b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb0>
 802b7b4:	2f0f      	cmp	r7, #15
 802b7b6:	d911      	bls.n	802b7dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd4>
 802b7b8:	4b7b      	ldr	r3, [pc, #492]	; (802b9a8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a0>)
 802b7ba:	4a7c      	ldr	r2, [pc, #496]	; (802b9ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a4>)
 802b7bc:	487c      	ldr	r0, [pc, #496]	; (802b9b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a8>)
 802b7be:	f240 210d 	movw	r1, #525	; 0x20d
 802b7c2:	f002 fd89 	bl	802e2d8 <__assert_func>
 802b7c6:	4602      	mov	r2, r0
 802b7c8:	e7cd      	b.n	802b766 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 802b7ca:	4606      	mov	r6, r0
 802b7cc:	4602      	mov	r2, r0
 802b7ce:	e7d2      	b.n	802b776 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x6e>
 802b7d0:	4606      	mov	r6, r0
 802b7d2:	e7d0      	b.n	802b776 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x6e>
 802b7d4:	4604      	mov	r4, r0
 802b7d6:	e7da      	b.n	802b78e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x86>
 802b7d8:	4604      	mov	r4, r0
 802b7da:	e7e1      	b.n	802b7a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x98>
 802b7dc:	b2ab      	uxth	r3, r5
 802b7de:	b2bf      	uxth	r7, r7
 802b7e0:	fb03 fe07 	mul.w	lr, r3, r7
 802b7e4:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 802b7e8:	011b      	lsls	r3, r3, #4
 802b7ea:	eba3 0c0e 	sub.w	ip, r3, lr
 802b7ee:	b2bf      	uxth	r7, r7
 802b7f0:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 802b7f4:	fa1f fc8c 	uxth.w	ip, ip
 802b7f8:	1bed      	subs	r5, r5, r7
 802b7fa:	b2ad      	uxth	r5, r5
 802b7fc:	fb0c f30a 	mul.w	r3, ip, sl
 802b800:	fb05 330b 	mla	r3, r5, fp, r3
 802b804:	fb07 3309 	mla	r3, r7, r9, r3
 802b808:	fb0e 3308 	mla	r3, lr, r8, r3
 802b80c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802b810:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802b814:	9303      	str	r3, [sp, #12]
 802b816:	d018      	beq.n	802b84a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x142>
 802b818:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 802b81c:	fb0b f303 	mul.w	r3, fp, r3
 802b820:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802b824:	fb0b fb02 	mul.w	fp, fp, r2
 802b828:	0a1a      	lsrs	r2, r3, #8
 802b82a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802b82e:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 802b832:	441a      	add	r2, r3
 802b834:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 802b838:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 802b83c:	0a12      	lsrs	r2, r2, #8
 802b83e:	0a1b      	lsrs	r3, r3, #8
 802b840:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802b844:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802b848:	431a      	orrs	r2, r3
 802b84a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802b84e:	d019      	beq.n	802b884 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x17c>
 802b850:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 802b854:	fb0a fb0b 	mul.w	fp, sl, fp
 802b858:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802b85c:	fb0a fa06 	mul.w	sl, sl, r6
 802b860:	ea4f 261b 	mov.w	r6, fp, lsr #8
 802b864:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802b868:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802b86c:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 802b870:	445e      	add	r6, fp
 802b872:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 802b876:	0a36      	lsrs	r6, r6, #8
 802b878:	0a1b      	lsrs	r3, r3, #8
 802b87a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802b87e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802b882:	431e      	orrs	r6, r3
 802b884:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802b888:	d019      	beq.n	802b8be <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1b6>
 802b88a:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 802b88e:	fb09 fa0a 	mul.w	sl, r9, sl
 802b892:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802b896:	fb09 f904 	mul.w	r9, r9, r4
 802b89a:	ea4f 241a 	mov.w	r4, sl, lsr #8
 802b89e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802b8a2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802b8a6:	f509 7380 	add.w	r3, r9, #256	; 0x100
 802b8aa:	4454      	add	r4, sl
 802b8ac:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 802b8b0:	0a24      	lsrs	r4, r4, #8
 802b8b2:	0a1b      	lsrs	r3, r3, #8
 802b8b4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802b8b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802b8bc:	431c      	orrs	r4, r3
 802b8be:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802b8c2:	d019      	beq.n	802b8f8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1f0>
 802b8c4:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 802b8c8:	fb08 f909 	mul.w	r9, r8, r9
 802b8cc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802b8d0:	fb08 f800 	mul.w	r8, r8, r0
 802b8d4:	ea4f 2019 	mov.w	r0, r9, lsr #8
 802b8d8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802b8dc:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 802b8e0:	f508 7380 	add.w	r3, r8, #256	; 0x100
 802b8e4:	4448      	add	r0, r9
 802b8e6:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 802b8ea:	0a00      	lsrs	r0, r0, #8
 802b8ec:	0a1b      	lsrs	r3, r3, #8
 802b8ee:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802b8f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802b8f6:	4318      	orrs	r0, r3
 802b8f8:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 802b8fc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802b900:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 802b904:	fb0c f808 	mul.w	r8, ip, r8
 802b908:	fb0c f606 	mul.w	r6, ip, r6
 802b90c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802b910:	fb05 8803 	mla	r8, r5, r3, r8
 802b914:	fb05 6202 	mla	r2, r5, r2, r6
 802b918:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 802b91c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802b920:	fb07 8803 	mla	r8, r7, r3, r8
 802b924:	fb07 2704 	mla	r7, r7, r4, r2
 802b928:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 802b92c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802b930:	fb0e 8303 	mla	r3, lr, r3, r8
 802b934:	fb0e 7e00 	mla	lr, lr, r0, r7
 802b938:	0a1b      	lsrs	r3, r3, #8
 802b93a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802b93e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802b942:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802b946:	ea43 0e0e 	orr.w	lr, r3, lr
 802b94a:	9b03      	ldr	r3, [sp, #12]
 802b94c:	9800      	ldr	r0, [sp, #0]
 802b94e:	9c01      	ldr	r4, [sp, #4]
 802b950:	9a02      	ldr	r2, [sp, #8]
 802b952:	43db      	mvns	r3, r3
 802b954:	b2db      	uxtb	r3, r3
 802b956:	4358      	muls	r0, r3
 802b958:	435c      	muls	r4, r3
 802b95a:	435a      	muls	r2, r3
 802b95c:	1c43      	adds	r3, r0, #1
 802b95e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802b962:	ea4f 431e 	mov.w	r3, lr, lsr #16
 802b966:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802b96a:	4b12      	ldr	r3, [pc, #72]	; (802b9b4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2ac>)
 802b96c:	ea03 2300 	and.w	r3, r3, r0, lsl #8
 802b970:	1c50      	adds	r0, r2, #1
 802b972:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 802b976:	fa5f f28e 	uxtb.w	r2, lr
 802b97a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802b97e:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 802b982:	1c62      	adds	r2, r4, #1
 802b984:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802b988:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 802b98c:	eb0e 2e12 	add.w	lr, lr, r2, lsr #8
 802b990:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802b994:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 802b998:	ea43 0e0e 	orr.w	lr, r3, lr
 802b99c:	f8a1 e000 	strh.w	lr, [r1]
 802b9a0:	b005      	add	sp, #20
 802b9a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b9a6:	bf00      	nop
 802b9a8:	080343dc 	.word	0x080343dc
 802b9ac:	08034935 	.word	0x08034935
 802b9b0:	08034464 	.word	0x08034464
 802b9b4:	fffff800 	.word	0xfffff800

0802b9b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802b9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b9bc:	ed2d 8b08 	vpush	{d8-d11}
 802b9c0:	b097      	sub	sp, #92	; 0x5c
 802b9c2:	eeb0 aa40 	vmov.f32	s20, s0
 802b9c6:	9306      	str	r3, [sp, #24]
 802b9c8:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 802b9cc:	9307      	str	r3, [sp, #28]
 802b9ce:	9214      	str	r2, [sp, #80]	; 0x50
 802b9d0:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 802b9d4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802b9d6:	9112      	str	r1, [sp, #72]	; 0x48
 802b9d8:	9310      	str	r3, [sp, #64]	; 0x40
 802b9da:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802b9de:	9015      	str	r0, [sp, #84]	; 0x54
 802b9e0:	6850      	ldr	r0, [r2, #4]
 802b9e2:	6812      	ldr	r2, [r2, #0]
 802b9e4:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 802b9e6:	fb00 1303 	mla	r3, r0, r3, r1
 802b9ea:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802b9ee:	930a      	str	r3, [sp, #40]	; 0x28
 802b9f0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802b9f2:	681b      	ldr	r3, [r3, #0]
 802b9f4:	9311      	str	r3, [sp, #68]	; 0x44
 802b9f6:	9b07      	ldr	r3, [sp, #28]
 802b9f8:	009b      	lsls	r3, r3, #2
 802b9fa:	eef0 9a60 	vmov.f32	s19, s1
 802b9fe:	eeb0 9a41 	vmov.f32	s18, s2
 802ba02:	eeb0 8a62 	vmov.f32	s16, s5
 802ba06:	eef0 8a43 	vmov.f32	s17, s6
 802ba0a:	eef0 ba44 	vmov.f32	s23, s8
 802ba0e:	eeb0 ba64 	vmov.f32	s22, s9
 802ba12:	eef0 aa45 	vmov.f32	s21, s10
 802ba16:	930e      	str	r3, [sp, #56]	; 0x38
 802ba18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802ba1a:	2b00      	cmp	r3, #0
 802ba1c:	dc03      	bgt.n	802ba26 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 802ba1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802ba20:	2b00      	cmp	r3, #0
 802ba22:	f340 8361 	ble.w	802c0e8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x730>
 802ba26:	9b06      	ldr	r3, [sp, #24]
 802ba28:	2b00      	cmp	r3, #0
 802ba2a:	f340 819b 	ble.w	802bd64 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 802ba2e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802ba30:	1412      	asrs	r2, r2, #16
 802ba32:	ea4f 4325 	mov.w	r3, r5, asr #16
 802ba36:	d42e      	bmi.n	802ba96 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 802ba38:	9807      	ldr	r0, [sp, #28]
 802ba3a:	1c51      	adds	r1, r2, #1
 802ba3c:	4288      	cmp	r0, r1
 802ba3e:	dd2d      	ble.n	802ba9c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 802ba40:	2b00      	cmp	r3, #0
 802ba42:	db2b      	blt.n	802ba9c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 802ba44:	9810      	ldr	r0, [sp, #64]	; 0x40
 802ba46:	1c59      	adds	r1, r3, #1
 802ba48:	4288      	cmp	r0, r1
 802ba4a:	dd27      	ble.n	802ba9c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 802ba4c:	9b06      	ldr	r3, [sp, #24]
 802ba4e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802ba50:	9929      	ldr	r1, [sp, #164]	; 0xa4
 802ba52:	3b01      	subs	r3, #1
 802ba54:	fb02 1203 	mla	r2, r2, r3, r1
 802ba58:	1412      	asrs	r2, r2, #16
 802ba5a:	d42a      	bmi.n	802bab2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 802ba5c:	9907      	ldr	r1, [sp, #28]
 802ba5e:	3201      	adds	r2, #1
 802ba60:	4291      	cmp	r1, r2
 802ba62:	dd26      	ble.n	802bab2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 802ba64:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802ba66:	fb02 5303 	mla	r3, r2, r3, r5
 802ba6a:	141b      	asrs	r3, r3, #16
 802ba6c:	d421      	bmi.n	802bab2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 802ba6e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802ba70:	3301      	adds	r3, #1
 802ba72:	429a      	cmp	r2, r3
 802ba74:	dd1d      	ble.n	802bab2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 802ba76:	9b06      	ldr	r3, [sp, #24]
 802ba78:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 802ba7c:	9313      	str	r3, [sp, #76]	; 0x4c
 802ba7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802ba80:	2b00      	cmp	r3, #0
 802ba82:	f300 81e3 	bgt.w	802be4c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 802ba86:	9b06      	ldr	r3, [sp, #24]
 802ba88:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802ba8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802ba8e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802ba92:	930a      	str	r3, [sp, #40]	; 0x28
 802ba94:	e168      	b.n	802bd68 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 802ba96:	1c51      	adds	r1, r2, #1
 802ba98:	f040 8157 	bne.w	802bd4a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 802ba9c:	9907      	ldr	r1, [sp, #28]
 802ba9e:	428a      	cmp	r2, r1
 802baa0:	f280 8153 	bge.w	802bd4a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 802baa4:	1c5f      	adds	r7, r3, #1
 802baa6:	f2c0 8150 	blt.w	802bd4a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 802baaa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802baac:	4293      	cmp	r3, r2
 802baae:	f280 814c 	bge.w	802bd4a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 802bab2:	9b06      	ldr	r3, [sp, #24]
 802bab4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802bab6:	9313      	str	r3, [sp, #76]	; 0x4c
 802bab8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802baba:	2b00      	cmp	r3, #0
 802babc:	dde3      	ble.n	802ba86 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 802babe:	9929      	ldr	r1, [sp, #164]	; 0xa4
 802bac0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802bac2:	1409      	asrs	r1, r1, #16
 802bac4:	ea4f 4325 	mov.w	r3, r5, asr #16
 802bac8:	f3c2 3203 	ubfx	r2, r2, #12, #4
 802bacc:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802bad0:	f100 81a3 	bmi.w	802be1a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 802bad4:	9c07      	ldr	r4, [sp, #28]
 802bad6:	1c4e      	adds	r6, r1, #1
 802bad8:	42b4      	cmp	r4, r6
 802bada:	f340 81a0 	ble.w	802be1e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 802bade:	2b00      	cmp	r3, #0
 802bae0:	f2c0 819d 	blt.w	802be1e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 802bae4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802bae6:	1c5e      	adds	r6, r3, #1
 802bae8:	42b4      	cmp	r4, r6
 802baea:	f340 8198 	ble.w	802be1e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 802baee:	9c07      	ldr	r4, [sp, #28]
 802baf0:	fb03 1304 	mla	r3, r3, r4, r1
 802baf4:	9911      	ldr	r1, [sp, #68]	; 0x44
 802baf6:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 802bafa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802bafe:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802bb02:	2a00      	cmp	r2, #0
 802bb04:	f000 816f 	beq.w	802bde6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 802bb08:	6871      	ldr	r1, [r6, #4]
 802bb0a:	910b      	str	r1, [sp, #44]	; 0x2c
 802bb0c:	ea4f 6811 	mov.w	r8, r1, lsr #24
 802bb10:	2800      	cmp	r0, #0
 802bb12:	f000 8171 	beq.w	802bdf8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 802bb16:	990e      	ldr	r1, [sp, #56]	; 0x38
 802bb18:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802bb1a:	1871      	adds	r1, r6, r1
 802bb1c:	5934      	ldr	r4, [r6, r4]
 802bb1e:	6849      	ldr	r1, [r1, #4]
 802bb20:	9408      	str	r4, [sp, #32]
 802bb22:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 802bb26:	910c      	str	r1, [sp, #48]	; 0x30
 802bb28:	0e0e      	lsrs	r6, r1, #24
 802bb2a:	b292      	uxth	r2, r2
 802bb2c:	b280      	uxth	r0, r0
 802bb2e:	fb02 fb00 	mul.w	fp, r2, r0
 802bb32:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 802bb36:	0112      	lsls	r2, r2, #4
 802bb38:	eba2 090b 	sub.w	r9, r2, fp
 802bb3c:	b280      	uxth	r0, r0
 802bb3e:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802bb42:	fa1f f989 	uxth.w	r9, r9
 802bb46:	1a09      	subs	r1, r1, r0
 802bb48:	b289      	uxth	r1, r1
 802bb4a:	fb09 f208 	mul.w	r2, r9, r8
 802bb4e:	fb01 220c 	mla	r2, r1, ip, r2
 802bb52:	fb00 220a 	mla	r2, r0, sl, r2
 802bb56:	fb0b 2206 	mla	r2, fp, r6, r2
 802bb5a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802bb5e:	2a00      	cmp	r2, #0
 802bb60:	f000 80e8 	beq.w	802bd34 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802bb64:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802bb68:	d01b      	beq.n	802bba2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 802bb6a:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 802bb6e:	fb0c fe0e 	mul.w	lr, ip, lr
 802bb72:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802bb76:	fb0c fc03 	mul.w	ip, ip, r3
 802bb7a:	ea4f 231e 	mov.w	r3, lr, lsr #8
 802bb7e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802bb82:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802bb86:	4473      	add	r3, lr
 802bb88:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 802bb8c:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 802bb90:	0a1b      	lsrs	r3, r3, #8
 802bb92:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802bb96:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802bb9a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802bb9e:	ea43 030e 	orr.w	r3, r3, lr
 802bba2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802bba6:	d01e      	beq.n	802bbe6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22e>
 802bba8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802bbaa:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802bbae:	fb08 fc0c 	mul.w	ip, r8, ip
 802bbb2:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 802bbb6:	fb08 f80e 	mul.w	r8, r8, lr
 802bbba:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802bbbe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802bbc2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802bbc6:	44e6      	add	lr, ip
 802bbc8:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 802bbcc:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 802bbd0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802bbd4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802bbd8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802bbdc:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802bbe0:	ea4e 0408 	orr.w	r4, lr, r8
 802bbe4:	940b      	str	r4, [sp, #44]	; 0x2c
 802bbe6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802bbea:	d01e      	beq.n	802bc2a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 802bbec:	9c08      	ldr	r4, [sp, #32]
 802bbee:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 802bbf2:	fb0a f808 	mul.w	r8, sl, r8
 802bbf6:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802bbfa:	fb0a fa0c 	mul.w	sl, sl, ip
 802bbfe:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 802bc02:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802bc06:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 802bc0a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802bc0e:	44c6      	add	lr, r8
 802bc10:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802bc14:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802bc18:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802bc1c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802bc20:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802bc24:	ea4e 040a 	orr.w	r4, lr, sl
 802bc28:	9408      	str	r4, [sp, #32]
 802bc2a:	2eff      	cmp	r6, #255	; 0xff
 802bc2c:	d01d      	beq.n	802bc6a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 802bc2e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802bc30:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 802bc34:	fb06 f808 	mul.w	r8, r6, r8
 802bc38:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802bc3c:	fb06 f60c 	mul.w	r6, r6, ip
 802bc40:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 802bc44:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802bc48:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 802bc4c:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 802bc50:	44c6      	add	lr, r8
 802bc52:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 802bc56:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802bc5a:	0a36      	lsrs	r6, r6, #8
 802bc5c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802bc60:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802bc64:	ea4e 0406 	orr.w	r4, lr, r6
 802bc68:	940c      	str	r4, [sp, #48]	; 0x30
 802bc6a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802bc6c:	f004 16ff 	and.w	r6, r4, #16711935	; 0xff00ff
 802bc70:	9c08      	ldr	r4, [sp, #32]
 802bc72:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802bc76:	fb09 f606 	mul.w	r6, r9, r6
 802bc7a:	fb01 660c 	mla	r6, r1, ip, r6
 802bc7e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802bc82:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802bc84:	fb00 660c 	mla	r6, r0, ip, r6
 802bc88:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802bc8c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802bc8e:	fb0b 660c 	mla	r6, fp, ip, r6
 802bc92:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802bc96:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802bc9a:	fb09 f90c 	mul.w	r9, r9, ip
 802bc9e:	fb01 9303 	mla	r3, r1, r3, r9
 802bca2:	9908      	ldr	r1, [sp, #32]
 802bca4:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 802bca8:	990c      	ldr	r1, [sp, #48]	; 0x30
 802bcaa:	fb00 330e 	mla	r3, r0, lr, r3
 802bcae:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 802bcb2:	fb0b 3b00 	mla	fp, fp, r0, r3
 802bcb6:	0a36      	lsrs	r6, r6, #8
 802bcb8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802bcbc:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802bcc0:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 802bcc4:	ea46 060b 	orr.w	r6, r6, fp
 802bcc8:	2aff      	cmp	r2, #255	; 0xff
 802bcca:	ea4f 2316 	mov.w	r3, r6, lsr #8
 802bcce:	f000 8099 	beq.w	802be04 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 802bcd2:	8839      	ldrh	r1, [r7, #0]
 802bcd4:	43d2      	mvns	r2, r2
 802bcd6:	ea4f 2c21 	mov.w	ip, r1, asr #8
 802bcda:	fa5f fe82 	uxtb.w	lr, r2
 802bcde:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802bce2:	fb0c fc0e 	mul.w	ip, ip, lr
 802bce6:	10c8      	asrs	r0, r1, #3
 802bce8:	00ca      	lsls	r2, r1, #3
 802bcea:	f10c 0101 	add.w	r1, ip, #1
 802bcee:	eb01 211c 	add.w	r1, r1, ip, lsr #8
 802bcf2:	ea4f 4c16 	mov.w	ip, r6, lsr #16
 802bcf6:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802bcfa:	b2d2      	uxtb	r2, r2
 802bcfc:	4952      	ldr	r1, [pc, #328]	; (802be48 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x490>)
 802bcfe:	fb02 f20e 	mul.w	r2, r2, lr
 802bd02:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 802bd06:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802bd0a:	1c51      	adds	r1, r2, #1
 802bd0c:	fb00 f00e 	mul.w	r0, r0, lr
 802bd10:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802bd14:	b2f6      	uxtb	r6, r6
 802bd16:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 802bd1a:	1c42      	adds	r2, r0, #1
 802bd1c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802bd20:	b2db      	uxtb	r3, r3
 802bd22:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802bd26:	00db      	lsls	r3, r3, #3
 802bd28:	ea4c 06d6 	orr.w	r6, ip, r6, lsr #3
 802bd2c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802bd30:	431e      	orrs	r6, r3
 802bd32:	803e      	strh	r6, [r7, #0]
 802bd34:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802bd36:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802bd38:	441a      	add	r2, r3
 802bd3a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802bd3c:	9229      	str	r2, [sp, #164]	; 0xa4
 802bd3e:	441d      	add	r5, r3
 802bd40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802bd42:	3b01      	subs	r3, #1
 802bd44:	3702      	adds	r7, #2
 802bd46:	9313      	str	r3, [sp, #76]	; 0x4c
 802bd48:	e6b6      	b.n	802bab8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 802bd4a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802bd4c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802bd4e:	441a      	add	r2, r3
 802bd50:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802bd52:	9229      	str	r2, [sp, #164]	; 0xa4
 802bd54:	441d      	add	r5, r3
 802bd56:	9b06      	ldr	r3, [sp, #24]
 802bd58:	3b01      	subs	r3, #1
 802bd5a:	9306      	str	r3, [sp, #24]
 802bd5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802bd5e:	3302      	adds	r3, #2
 802bd60:	930a      	str	r3, [sp, #40]	; 0x28
 802bd62:	e660      	b.n	802ba26 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 802bd64:	f47f ae72 	bne.w	802ba4c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 802bd68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802bd6a:	2b00      	cmp	r3, #0
 802bd6c:	f340 81bc 	ble.w	802c0e8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x730>
 802bd70:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802bd74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802bd78:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802bd7c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802bd7e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802bd82:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802bd86:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802bd8a:	eef0 6a48 	vmov.f32	s13, s16
 802bd8e:	ee69 7a27 	vmul.f32	s15, s18, s15
 802bd92:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802bd96:	ee37 8a48 	vsub.f32	s16, s14, s16
 802bd9a:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 802bd9e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802bda2:	eef0 6a68 	vmov.f32	s13, s17
 802bda6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802bdaa:	ee18 2a10 	vmov	r2, s16
 802bdae:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802bdb2:	fb92 f3f3 	sdiv	r3, r2, r3
 802bdb6:	ee18 2a90 	vmov	r2, s17
 802bdba:	932b      	str	r3, [sp, #172]	; 0xac
 802bdbc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802bdbe:	fb92 f3f3 	sdiv	r3, r2, r3
 802bdc2:	932c      	str	r3, [sp, #176]	; 0xb0
 802bdc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802bdc6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802bdc8:	3b01      	subs	r3, #1
 802bdca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802bdce:	9312      	str	r3, [sp, #72]	; 0x48
 802bdd0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802bdd2:	bf08      	it	eq
 802bdd4:	4613      	moveq	r3, r2
 802bdd6:	ee16 5a90 	vmov	r5, s13
 802bdda:	9306      	str	r3, [sp, #24]
 802bddc:	eef0 8a67 	vmov.f32	s17, s15
 802bde0:	eeb0 8a47 	vmov.f32	s16, s14
 802bde4:	e618      	b.n	802ba18 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 802bde6:	b150      	cbz	r0, 802bdfe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 802bde8:	990e      	ldr	r1, [sp, #56]	; 0x38
 802bdea:	5871      	ldr	r1, [r6, r1]
 802bdec:	9108      	str	r1, [sp, #32]
 802bdee:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 802bdf2:	26ff      	movs	r6, #255	; 0xff
 802bdf4:	46b0      	mov	r8, r6
 802bdf6:	e698      	b.n	802bb2a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 802bdf8:	26ff      	movs	r6, #255	; 0xff
 802bdfa:	46b2      	mov	sl, r6
 802bdfc:	e695      	b.n	802bb2a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 802bdfe:	26ff      	movs	r6, #255	; 0xff
 802be00:	46b2      	mov	sl, r6
 802be02:	e7f7      	b.n	802bdf4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 802be04:	0972      	lsrs	r2, r6, #5
 802be06:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 802be0a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802be0e:	f023 0307 	bic.w	r3, r3, #7
 802be12:	4313      	orrs	r3, r2
 802be14:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 802be18:	e78a      	b.n	802bd30 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x378>
 802be1a:	1c4e      	adds	r6, r1, #1
 802be1c:	d18a      	bne.n	802bd34 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802be1e:	9c07      	ldr	r4, [sp, #28]
 802be20:	428c      	cmp	r4, r1
 802be22:	dd87      	ble.n	802bd34 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802be24:	1c5c      	adds	r4, r3, #1
 802be26:	db85      	blt.n	802bd34 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802be28:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802be2a:	429c      	cmp	r4, r3
 802be2c:	dd82      	ble.n	802bd34 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802be2e:	e9cd 2003 	strd	r2, r0, [sp, #12]
 802be32:	e9cd 1301 	strd	r1, r3, [sp, #4]
 802be36:	9400      	str	r4, [sp, #0]
 802be38:	9b07      	ldr	r3, [sp, #28]
 802be3a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802be3c:	9815      	ldr	r0, [sp, #84]	; 0x54
 802be3e:	4639      	mov	r1, r7
 802be40:	f7ff fc62 	bl	802b708 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 802be44:	e776      	b.n	802bd34 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802be46:	bf00      	nop
 802be48:	fffff800 	.word	0xfffff800
 802be4c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802be4e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 802be50:	9c07      	ldr	r4, [sp, #28]
 802be52:	1409      	asrs	r1, r1, #16
 802be54:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802be58:	142b      	asrs	r3, r5, #16
 802be5a:	fb04 1303 	mla	r3, r4, r3, r1
 802be5e:	9911      	ldr	r1, [sp, #68]	; 0x44
 802be60:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 802be64:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802be68:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802be6c:	0e1f      	lsrs	r7, r3, #24
 802be6e:	2a00      	cmp	r2, #0
 802be70:	f000 811d 	beq.w	802c0ae <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f6>
 802be74:	6871      	ldr	r1, [r6, #4]
 802be76:	910d      	str	r1, [sp, #52]	; 0x34
 802be78:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 802be7c:	2800      	cmp	r0, #0
 802be7e:	f000 811f 	beq.w	802c0c0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x708>
 802be82:	990e      	ldr	r1, [sp, #56]	; 0x38
 802be84:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802be86:	1871      	adds	r1, r6, r1
 802be88:	5934      	ldr	r4, [r6, r4]
 802be8a:	6849      	ldr	r1, [r1, #4]
 802be8c:	9409      	str	r4, [sp, #36]	; 0x24
 802be8e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802be92:	910f      	str	r1, [sp, #60]	; 0x3c
 802be94:	0e0e      	lsrs	r6, r1, #24
 802be96:	b292      	uxth	r2, r2
 802be98:	b280      	uxth	r0, r0
 802be9a:	fb02 fb00 	mul.w	fp, r2, r0
 802be9e:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 802bea2:	0112      	lsls	r2, r2, #4
 802bea4:	eba2 080b 	sub.w	r8, r2, fp
 802bea8:	b280      	uxth	r0, r0
 802beaa:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802beae:	fa1f f888 	uxth.w	r8, r8
 802beb2:	1a09      	subs	r1, r1, r0
 802beb4:	b289      	uxth	r1, r1
 802beb6:	fb08 f20e 	mul.w	r2, r8, lr
 802beba:	fb01 2207 	mla	r2, r1, r7, r2
 802bebe:	fb00 2209 	mla	r2, r0, r9, r2
 802bec2:	fb0b 2206 	mla	r2, fp, r6, r2
 802bec6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802beca:	2a00      	cmp	r2, #0
 802becc:	f000 80e3 	beq.w	802c096 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6de>
 802bed0:	2fff      	cmp	r7, #255	; 0xff
 802bed2:	d01a      	beq.n	802bf0a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x552>
 802bed4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802bed8:	fb07 fc0c 	mul.w	ip, r7, ip
 802bedc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802bee0:	435f      	muls	r7, r3
 802bee2:	ea4f 231c 	mov.w	r3, ip, lsr #8
 802bee6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802beea:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802beee:	4463      	add	r3, ip
 802bef0:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 802bef4:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 802bef8:	0a1b      	lsrs	r3, r3, #8
 802befa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802befe:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802bf02:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802bf06:	ea43 030c 	orr.w	r3, r3, ip
 802bf0a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802bf0e:	d01e      	beq.n	802bf4e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x596>
 802bf10:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802bf12:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802bf16:	fb0e f707 	mul.w	r7, lr, r7
 802bf1a:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802bf1e:	fb0e fe0c 	mul.w	lr, lr, ip
 802bf22:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802bf26:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802bf2a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802bf2e:	44bc      	add	ip, r7
 802bf30:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 802bf34:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 802bf38:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802bf3c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802bf40:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802bf44:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802bf48:	ea4c 040e 	orr.w	r4, ip, lr
 802bf4c:	940d      	str	r4, [sp, #52]	; 0x34
 802bf4e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802bf52:	d01e      	beq.n	802bf92 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 802bf54:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802bf56:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802bf5a:	fb09 fe0e 	mul.w	lr, r9, lr
 802bf5e:	f404 477f 	and.w	r7, r4, #65280	; 0xff00
 802bf62:	fb09 f907 	mul.w	r9, r9, r7
 802bf66:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802bf6a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802bf6e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802bf72:	f509 7780 	add.w	r7, r9, #256	; 0x100
 802bf76:	44f4      	add	ip, lr
 802bf78:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 802bf7c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802bf80:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802bf84:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802bf88:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802bf8c:	ea4c 0409 	orr.w	r4, ip, r9
 802bf90:	9409      	str	r4, [sp, #36]	; 0x24
 802bf92:	2eff      	cmp	r6, #255	; 0xff
 802bf94:	d01c      	beq.n	802bfd0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x618>
 802bf96:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802bf98:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802bf9c:	fb06 fe0e 	mul.w	lr, r6, lr
 802bfa0:	f404 477f 	and.w	r7, r4, #65280	; 0xff00
 802bfa4:	437e      	muls	r6, r7
 802bfa6:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802bfaa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802bfae:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802bfb2:	f506 7780 	add.w	r7, r6, #256	; 0x100
 802bfb6:	44f4      	add	ip, lr
 802bfb8:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 802bfbc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802bfc0:	0a36      	lsrs	r6, r6, #8
 802bfc2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802bfc6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802bfca:	ea4c 0406 	orr.w	r4, ip, r6
 802bfce:	940f      	str	r4, [sp, #60]	; 0x3c
 802bfd0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802bfd2:	f004 16ff 	and.w	r6, r4, #16711935	; 0xff00ff
 802bfd6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802bfd8:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 802bfdc:	fb08 f606 	mul.w	r6, r8, r6
 802bfe0:	fb01 6607 	mla	r6, r1, r7, r6
 802bfe4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802bfe8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802bfea:	fb00 6607 	mla	r6, r0, r7, r6
 802bfee:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802bff2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802bff4:	fb0b 6607 	mla	r6, fp, r7, r6
 802bff8:	f404 477f 	and.w	r7, r4, #65280	; 0xff00
 802bffc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802c000:	fb08 f807 	mul.w	r8, r8, r7
 802c004:	fb01 8303 	mla	r3, r1, r3, r8
 802c008:	9909      	ldr	r1, [sp, #36]	; 0x24
 802c00a:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 802c00e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802c010:	fb00 330c 	mla	r3, r0, ip, r3
 802c014:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 802c018:	fb0b 3e0e 	mla	lr, fp, lr, r3
 802c01c:	0a36      	lsrs	r6, r6, #8
 802c01e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802c022:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802c026:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802c02a:	ea46 060e 	orr.w	r6, r6, lr
 802c02e:	2aff      	cmp	r2, #255	; 0xff
 802c030:	ea4f 2316 	mov.w	r3, r6, lsr #8
 802c034:	d04a      	beq.n	802c0cc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x714>
 802c036:	f8ba 1000 	ldrh.w	r1, [sl]
 802c03a:	43d2      	mvns	r2, r2
 802c03c:	120f      	asrs	r7, r1, #8
 802c03e:	fa5f fc82 	uxtb.w	ip, r2
 802c042:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802c046:	fb07 f70c 	mul.w	r7, r7, ip
 802c04a:	10c8      	asrs	r0, r1, #3
 802c04c:	00ca      	lsls	r2, r1, #3
 802c04e:	1c79      	adds	r1, r7, #1
 802c050:	eb01 2117 	add.w	r1, r1, r7, lsr #8
 802c054:	0c37      	lsrs	r7, r6, #16
 802c056:	eb07 2711 	add.w	r7, r7, r1, lsr #8
 802c05a:	b2d2      	uxtb	r2, r2
 802c05c:	4925      	ldr	r1, [pc, #148]	; (802c0f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x73c>)
 802c05e:	fb02 f20c 	mul.w	r2, r2, ip
 802c062:	ea01 2707 	and.w	r7, r1, r7, lsl #8
 802c066:	1c51      	adds	r1, r2, #1
 802c068:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802c06c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802c070:	b2f6      	uxtb	r6, r6
 802c072:	fb00 f00c 	mul.w	r0, r0, ip
 802c076:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 802c07a:	ea47 07d6 	orr.w	r7, r7, r6, lsr #3
 802c07e:	1c46      	adds	r6, r0, #1
 802c080:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 802c084:	b2de      	uxtb	r6, r3
 802c086:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 802c08a:	00f6      	lsls	r6, r6, #3
 802c08c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 802c090:	4337      	orrs	r7, r6
 802c092:	f8aa 7000 	strh.w	r7, [sl]
 802c096:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802c098:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802c09a:	441a      	add	r2, r3
 802c09c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802c09e:	9229      	str	r2, [sp, #164]	; 0xa4
 802c0a0:	441d      	add	r5, r3
 802c0a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802c0a4:	3b01      	subs	r3, #1
 802c0a6:	f10a 0a02 	add.w	sl, sl, #2
 802c0aa:	9313      	str	r3, [sp, #76]	; 0x4c
 802c0ac:	e4e7      	b.n	802ba7e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 802c0ae:	b150      	cbz	r0, 802c0c6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70e>
 802c0b0:	990e      	ldr	r1, [sp, #56]	; 0x38
 802c0b2:	5871      	ldr	r1, [r6, r1]
 802c0b4:	9109      	str	r1, [sp, #36]	; 0x24
 802c0b6:	ea4f 6911 	mov.w	r9, r1, lsr #24
 802c0ba:	26ff      	movs	r6, #255	; 0xff
 802c0bc:	46b6      	mov	lr, r6
 802c0be:	e6ea      	b.n	802be96 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4de>
 802c0c0:	26ff      	movs	r6, #255	; 0xff
 802c0c2:	46b1      	mov	r9, r6
 802c0c4:	e6e7      	b.n	802be96 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4de>
 802c0c6:	26ff      	movs	r6, #255	; 0xff
 802c0c8:	46b1      	mov	r9, r6
 802c0ca:	e7f7      	b.n	802c0bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x704>
 802c0cc:	0972      	lsrs	r2, r6, #5
 802c0ce:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 802c0d2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802c0d6:	f023 0307 	bic.w	r3, r3, #7
 802c0da:	4313      	orrs	r3, r2
 802c0dc:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 802c0e0:	431e      	orrs	r6, r3
 802c0e2:	f8aa 6000 	strh.w	r6, [sl]
 802c0e6:	e7d6      	b.n	802c096 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6de>
 802c0e8:	b017      	add	sp, #92	; 0x5c
 802c0ea:	ecbd 8b08 	vpop	{d8-d11}
 802c0ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c0f2:	bf00      	nop
 802c0f4:	fffff800 	.word	0xfffff800

0802c0f8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 802c0f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802c0fc:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 802c100:	2c00      	cmp	r4, #0
 802c102:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802c106:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802c10a:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 802c10e:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 802c112:	fb04 ce03 	mla	lr, r4, r3, ip
 802c116:	db60      	blt.n	802c1da <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 802c118:	45a1      	cmp	r9, r4
 802c11a:	dd5e      	ble.n	802c1da <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 802c11c:	f1bc 0f00 	cmp.w	ip, #0
 802c120:	db59      	blt.n	802c1d6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 802c122:	45e0      	cmp	r8, ip
 802c124:	dd57      	ble.n	802c1d6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 802c126:	ea4f 005e 	mov.w	r0, lr, lsr #1
 802c12a:	f01e 0f01 	tst.w	lr, #1
 802c12e:	5c16      	ldrb	r6, [r2, r0]
 802c130:	bf0c      	ite	eq
 802c132:	f006 060f 	andeq.w	r6, r6, #15
 802c136:	1136      	asrne	r6, r6, #4
 802c138:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802c13c:	b2f6      	uxtb	r6, r6
 802c13e:	f11c 0001 	adds.w	r0, ip, #1
 802c142:	d44d      	bmi.n	802c1e0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 802c144:	4580      	cmp	r8, r0
 802c146:	dd4b      	ble.n	802c1e0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 802c148:	2d00      	cmp	r5, #0
 802c14a:	d04b      	beq.n	802c1e4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xec>
 802c14c:	f10e 0a01 	add.w	sl, lr, #1
 802c150:	ea4f 005a 	mov.w	r0, sl, lsr #1
 802c154:	f01a 0f01 	tst.w	sl, #1
 802c158:	5c10      	ldrb	r0, [r2, r0]
 802c15a:	bf0c      	ite	eq
 802c15c:	f000 000f 	andeq.w	r0, r0, #15
 802c160:	1100      	asrne	r0, r0, #4
 802c162:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802c166:	b2c0      	uxtb	r0, r0
 802c168:	3401      	adds	r4, #1
 802c16a:	d43f      	bmi.n	802c1ec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 802c16c:	45a1      	cmp	r9, r4
 802c16e:	dd3d      	ble.n	802c1ec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 802c170:	2f00      	cmp	r7, #0
 802c172:	f000 809e 	beq.w	802c2b2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ba>
 802c176:	f1bc 0f00 	cmp.w	ip, #0
 802c17a:	db35      	blt.n	802c1e8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 802c17c:	45e0      	cmp	r8, ip
 802c17e:	dd33      	ble.n	802c1e8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 802c180:	eb03 090e 	add.w	r9, r3, lr
 802c184:	ea4f 0459 	mov.w	r4, r9, lsr #1
 802c188:	f019 0f01 	tst.w	r9, #1
 802c18c:	5d14      	ldrb	r4, [r2, r4]
 802c18e:	bf0c      	ite	eq
 802c190:	f004 040f 	andeq.w	r4, r4, #15
 802c194:	1124      	asrne	r4, r4, #4
 802c196:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802c19a:	b2e4      	uxtb	r4, r4
 802c19c:	f11c 0c01 	adds.w	ip, ip, #1
 802c1a0:	d427      	bmi.n	802c1f2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 802c1a2:	45e0      	cmp	r8, ip
 802c1a4:	dd25      	ble.n	802c1f2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 802c1a6:	b335      	cbz	r5, 802c1f6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfe>
 802c1a8:	3301      	adds	r3, #1
 802c1aa:	449e      	add	lr, r3
 802c1ac:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802c1b0:	f01e 0f01 	tst.w	lr, #1
 802c1b4:	5cd2      	ldrb	r2, [r2, r3]
 802c1b6:	bf0c      	ite	eq
 802c1b8:	f002 020f 	andeq.w	r2, r2, #15
 802c1bc:	1112      	asrne	r2, r2, #4
 802c1be:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802c1c2:	b2d3      	uxtb	r3, r2
 802c1c4:	2d0f      	cmp	r5, #15
 802c1c6:	d917      	bls.n	802c1f8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x100>
 802c1c8:	4b3c      	ldr	r3, [pc, #240]	; (802c2bc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c4>)
 802c1ca:	4a3d      	ldr	r2, [pc, #244]	; (802c2c0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 802c1cc:	483d      	ldr	r0, [pc, #244]	; (802c2c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 802c1ce:	f240 210d 	movw	r1, #525	; 0x20d
 802c1d2:	f002 f881 	bl	802e2d8 <__assert_func>
 802c1d6:	2600      	movs	r6, #0
 802c1d8:	e7b1      	b.n	802c13e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x46>
 802c1da:	2000      	movs	r0, #0
 802c1dc:	4606      	mov	r6, r0
 802c1de:	e7c3      	b.n	802c168 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 802c1e0:	2000      	movs	r0, #0
 802c1e2:	e7c1      	b.n	802c168 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 802c1e4:	4628      	mov	r0, r5
 802c1e6:	e7bf      	b.n	802c168 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 802c1e8:	2400      	movs	r4, #0
 802c1ea:	e7d7      	b.n	802c19c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa4>
 802c1ec:	2300      	movs	r3, #0
 802c1ee:	461c      	mov	r4, r3
 802c1f0:	e7e8      	b.n	802c1c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 802c1f2:	2300      	movs	r3, #0
 802c1f4:	e7e6      	b.n	802c1c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 802c1f6:	462b      	mov	r3, r5
 802c1f8:	2f0f      	cmp	r7, #15
 802c1fa:	d8e5      	bhi.n	802c1c8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 802c1fc:	b2ad      	uxth	r5, r5
 802c1fe:	b2bf      	uxth	r7, r7
 802c200:	fb05 fc07 	mul.w	ip, r5, r7
 802c204:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 802c208:	012d      	lsls	r5, r5, #4
 802c20a:	b2bf      	uxth	r7, r7
 802c20c:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 802c210:	eba5 050c 	sub.w	r5, r5, ip
 802c214:	1bd2      	subs	r2, r2, r7
 802c216:	b2ad      	uxth	r5, r5
 802c218:	b292      	uxth	r2, r2
 802c21a:	4368      	muls	r0, r5
 802c21c:	fb06 0002 	mla	r0, r6, r2, r0
 802c220:	fb07 0404 	mla	r4, r7, r4, r0
 802c224:	fb0c 4303 	mla	r3, ip, r3, r4
 802c228:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802c22c:	2b00      	cmp	r3, #0
 802c22e:	d03e      	beq.n	802c2ae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1b6>
 802c230:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 802c234:	4a24      	ldr	r2, [pc, #144]	; (802c2c8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1d0>)
 802c236:	4343      	muls	r3, r0
 802c238:	1c58      	adds	r0, r3, #1
 802c23a:	6816      	ldr	r6, [r2, #0]
 802c23c:	880a      	ldrh	r2, [r1, #0]
 802c23e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802c242:	1200      	asrs	r0, r0, #8
 802c244:	b284      	uxth	r4, r0
 802c246:	1215      	asrs	r5, r2, #8
 802c248:	43c0      	mvns	r0, r0
 802c24a:	b2c3      	uxtb	r3, r0
 802c24c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802c250:	0a30      	lsrs	r0, r6, #8
 802c252:	fb15 f503 	smulbb	r5, r5, r3
 802c256:	10d7      	asrs	r7, r2, #3
 802c258:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802c25c:	fb00 5004 	mla	r0, r0, r4, r5
 802c260:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802c264:	08f5      	lsrs	r5, r6, #3
 802c266:	00d2      	lsls	r2, r2, #3
 802c268:	fb17 f703 	smulbb	r7, r7, r3
 802c26c:	b2d2      	uxtb	r2, r2
 802c26e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802c272:	00f6      	lsls	r6, r6, #3
 802c274:	fb05 7504 	mla	r5, r5, r4, r7
 802c278:	fb12 f303 	smulbb	r3, r2, r3
 802c27c:	b2f6      	uxtb	r6, r6
 802c27e:	fb06 3304 	mla	r3, r6, r4, r3
 802c282:	b2ad      	uxth	r5, r5
 802c284:	b29a      	uxth	r2, r3
 802c286:	b280      	uxth	r0, r0
 802c288:	1c6b      	adds	r3, r5, #1
 802c28a:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 802c28e:	1c44      	adds	r4, r0, #1
 802c290:	095b      	lsrs	r3, r3, #5
 802c292:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 802c296:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802c29a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802c29e:	4303      	orrs	r3, r0
 802c2a0:	1c50      	adds	r0, r2, #1
 802c2a2:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 802c2a6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802c2aa:	4313      	orrs	r3, r2
 802c2ac:	800b      	strh	r3, [r1, #0]
 802c2ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c2b2:	2d0f      	cmp	r5, #15
 802c2b4:	d888      	bhi.n	802c1c8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 802c2b6:	463b      	mov	r3, r7
 802c2b8:	463c      	mov	r4, r7
 802c2ba:	e79f      	b.n	802c1fc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x104>
 802c2bc:	080343dc 	.word	0x080343dc
 802c2c0:	08034935 	.word	0x08034935
 802c2c4:	08034464 	.word	0x08034464
 802c2c8:	200127fc 	.word	0x200127fc

0802c2cc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802c2cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c2d0:	ed2d 8b08 	vpush	{d8-d11}
 802c2d4:	b099      	sub	sp, #100	; 0x64
 802c2d6:	e9dd 462b 	ldrd	r4, r6, [sp, #172]	; 0xac
 802c2da:	9309      	str	r3, [sp, #36]	; 0x24
 802c2dc:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 802c2e0:	930a      	str	r3, [sp, #40]	; 0x28
 802c2e2:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 802c2e6:	9216      	str	r2, [sp, #88]	; 0x58
 802c2e8:	930b      	str	r3, [sp, #44]	; 0x2c
 802c2ea:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 802c2ec:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 802c2f0:	910f      	str	r1, [sp, #60]	; 0x3c
 802c2f2:	9310      	str	r3, [sp, #64]	; 0x40
 802c2f4:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 802c2f8:	9017      	str	r0, [sp, #92]	; 0x5c
 802c2fa:	6850      	ldr	r0, [r2, #4]
 802c2fc:	6812      	ldr	r2, [r2, #0]
 802c2fe:	fb00 1303 	mla	r3, r0, r3, r1
 802c302:	eb02 0a43 	add.w	sl, r2, r3, lsl #1
 802c306:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802c308:	3301      	adds	r3, #1
 802c30a:	f023 0301 	bic.w	r3, r3, #1
 802c30e:	930c      	str	r3, [sp, #48]	; 0x30
 802c310:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802c312:	681f      	ldr	r7, [r3, #0]
 802c314:	eeb0 aa40 	vmov.f32	s20, s0
 802c318:	eef0 9a60 	vmov.f32	s19, s1
 802c31c:	eeb0 9a41 	vmov.f32	s18, s2
 802c320:	eeb0 8a62 	vmov.f32	s16, s5
 802c324:	eef0 8a43 	vmov.f32	s17, s6
 802c328:	eef0 ba44 	vmov.f32	s23, s8
 802c32c:	eeb0 ba64 	vmov.f32	s22, s9
 802c330:	eef0 aa45 	vmov.f32	s21, s10
 802c334:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802c336:	2b00      	cmp	r3, #0
 802c338:	dc03      	bgt.n	802c342 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802c33a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802c33c:	2b00      	cmp	r3, #0
 802c33e:	f340 8267 	ble.w	802c810 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x544>
 802c342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c344:	2b00      	cmp	r3, #0
 802c346:	f340 811e 	ble.w	802c586 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 802c34a:	1422      	asrs	r2, r4, #16
 802c34c:	ea4f 4326 	mov.w	r3, r6, asr #16
 802c350:	d42d      	bmi.n	802c3ae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 802c352:	980a      	ldr	r0, [sp, #40]	; 0x28
 802c354:	1c51      	adds	r1, r2, #1
 802c356:	4288      	cmp	r0, r1
 802c358:	dd2c      	ble.n	802c3b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 802c35a:	2b00      	cmp	r3, #0
 802c35c:	db2a      	blt.n	802c3b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 802c35e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 802c360:	1c59      	adds	r1, r3, #1
 802c362:	4288      	cmp	r0, r1
 802c364:	dd26      	ble.n	802c3b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 802c366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c368:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802c36a:	3b01      	subs	r3, #1
 802c36c:	fb02 4203 	mla	r2, r2, r3, r4
 802c370:	1412      	asrs	r2, r2, #16
 802c372:	d42a      	bmi.n	802c3ca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 802c374:	990a      	ldr	r1, [sp, #40]	; 0x28
 802c376:	3201      	adds	r2, #1
 802c378:	4291      	cmp	r1, r2
 802c37a:	dd26      	ble.n	802c3ca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 802c37c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 802c37e:	fb02 6303 	mla	r3, r2, r3, r6
 802c382:	141b      	asrs	r3, r3, #16
 802c384:	d421      	bmi.n	802c3ca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 802c386:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802c388:	3301      	adds	r3, #1
 802c38a:	429a      	cmp	r2, r3
 802c38c:	dd1d      	ble.n	802c3ca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 802c38e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 802c392:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 802c396:	9311      	str	r3, [sp, #68]	; 0x44
 802c398:	46d1      	mov	r9, sl
 802c39a:	f1bb 0f00 	cmp.w	fp, #0
 802c39e:	f300 8162 	bgt.w	802c666 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x39a>
 802c3a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c3a4:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802c3a8:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 802c3ac:	e0ed      	b.n	802c58a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 802c3ae:	1c51      	adds	r1, r2, #1
 802c3b0:	f040 80df 	bne.w	802c572 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 802c3b4:	990a      	ldr	r1, [sp, #40]	; 0x28
 802c3b6:	4291      	cmp	r1, r2
 802c3b8:	f340 80db 	ble.w	802c572 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 802c3bc:	1c5a      	adds	r2, r3, #1
 802c3be:	f2c0 80d8 	blt.w	802c572 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 802c3c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802c3c4:	4293      	cmp	r3, r2
 802c3c6:	f280 80d4 	bge.w	802c572 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 802c3ca:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 802c3ce:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 802c3d2:	9311      	str	r3, [sp, #68]	; 0x44
 802c3d4:	46d0      	mov	r8, sl
 802c3d6:	f1b9 0f00 	cmp.w	r9, #0
 802c3da:	dde2      	ble.n	802c3a2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd6>
 802c3dc:	1420      	asrs	r0, r4, #16
 802c3de:	ea4f 4326 	mov.w	r3, r6, asr #16
 802c3e2:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802c3e6:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802c3ea:	f100 8121 	bmi.w	802c630 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x364>
 802c3ee:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802c3f0:	f100 0c01 	add.w	ip, r0, #1
 802c3f4:	4565      	cmp	r5, ip
 802c3f6:	f340 811d 	ble.w	802c634 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x368>
 802c3fa:	2b00      	cmp	r3, #0
 802c3fc:	f2c0 811a 	blt.w	802c634 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x368>
 802c400:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802c402:	f103 0c01 	add.w	ip, r3, #1
 802c406:	4565      	cmp	r5, ip
 802c408:	f340 8114 	ble.w	802c634 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x368>
 802c40c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802c40e:	fb03 0305 	mla	r3, r3, r5, r0
 802c412:	0858      	lsrs	r0, r3, #1
 802c414:	07dd      	lsls	r5, r3, #31
 802c416:	5c38      	ldrb	r0, [r7, r0]
 802c418:	bf54      	ite	pl
 802c41a:	f000 000f 	andpl.w	r0, r0, #15
 802c41e:	1100      	asrmi	r0, r0, #4
 802c420:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802c424:	b2c0      	uxtb	r0, r0
 802c426:	2a00      	cmp	r2, #0
 802c428:	f000 80ee 	beq.w	802c608 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 802c42c:	f103 0e01 	add.w	lr, r3, #1
 802c430:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802c434:	f01e 0f01 	tst.w	lr, #1
 802c438:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802c43c:	bf0c      	ite	eq
 802c43e:	f00c 0c0f 	andeq.w	ip, ip, #15
 802c442:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802c446:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802c44a:	fa5f f58c 	uxtb.w	r5, ip
 802c44e:	9512      	str	r5, [sp, #72]	; 0x48
 802c450:	b1f9      	cbz	r1, 802c492 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c6>
 802c452:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802c454:	442b      	add	r3, r5
 802c456:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802c45a:	07dd      	lsls	r5, r3, #31
 802c45c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802c460:	bf54      	ite	pl
 802c462:	f00c 0c0f 	andpl.w	ip, ip, #15
 802c466:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802c46a:	3301      	adds	r3, #1
 802c46c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802c470:	fa5f f58c 	uxtb.w	r5, ip
 802c474:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802c478:	950d      	str	r5, [sp, #52]	; 0x34
 802c47a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802c47e:	07dd      	lsls	r5, r3, #31
 802c480:	bf54      	ite	pl
 802c482:	f00c 030f 	andpl.w	r3, ip, #15
 802c486:	ea4f 132c 	movmi.w	r3, ip, asr #4
 802c48a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802c48e:	b2db      	uxtb	r3, r3
 802c490:	9313      	str	r3, [sp, #76]	; 0x4c
 802c492:	b292      	uxth	r2, r2
 802c494:	b289      	uxth	r1, r1
 802c496:	fb02 f301 	mul.w	r3, r2, r1
 802c49a:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802c49e:	0112      	lsls	r2, r2, #4
 802c4a0:	b289      	uxth	r1, r1
 802c4a2:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 802c4a6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802c4a8:	1ad2      	subs	r2, r2, r3
 802c4aa:	ebac 0c01 	sub.w	ip, ip, r1
 802c4ae:	b292      	uxth	r2, r2
 802c4b0:	436a      	muls	r2, r5
 802c4b2:	fa1f fc8c 	uxth.w	ip, ip
 802c4b6:	fb00 200c 	mla	r0, r0, ip, r2
 802c4ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802c4bc:	fb01 0102 	mla	r1, r1, r2, r0
 802c4c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802c4c2:	fb03 1302 	mla	r3, r3, r2, r1
 802c4c6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802c4ca:	2b00      	cmp	r3, #0
 802c4cc:	d048      	beq.n	802c560 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 802c4ce:	9910      	ldr	r1, [sp, #64]	; 0x40
 802c4d0:	4ace      	ldr	r2, [pc, #824]	; (802c80c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x540>)
 802c4d2:	434b      	muls	r3, r1
 802c4d4:	1c59      	adds	r1, r3, #1
 802c4d6:	f8d2 e000 	ldr.w	lr, [r2]
 802c4da:	f8b8 2000 	ldrh.w	r2, [r8]
 802c4de:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802c4e2:	121b      	asrs	r3, r3, #8
 802c4e4:	b299      	uxth	r1, r3
 802c4e6:	ea4f 2c22 	mov.w	ip, r2, asr #8
 802c4ea:	43db      	mvns	r3, r3
 802c4ec:	b2db      	uxtb	r3, r3
 802c4ee:	ea4f 201e 	mov.w	r0, lr, lsr #8
 802c4f2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802c4f6:	fb1c fc03 	smulbb	ip, ip, r3
 802c4fa:	ea4f 0be2 	mov.w	fp, r2, asr #3
 802c4fe:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802c502:	fb00 c001 	mla	r0, r0, r1, ip
 802c506:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 802c50a:	ea4f 0cde 	mov.w	ip, lr, lsr #3
 802c50e:	fb1b fb03 	smulbb	fp, fp, r3
 802c512:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 802c516:	00d2      	lsls	r2, r2, #3
 802c518:	fb0c bc01 	mla	ip, ip, r1, fp
 802c51c:	b2d2      	uxtb	r2, r2
 802c51e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802c522:	fb12 f303 	smulbb	r3, r2, r3
 802c526:	fa1f fc8c 	uxth.w	ip, ip
 802c52a:	fa5f fe8e 	uxtb.w	lr, lr
 802c52e:	b280      	uxth	r0, r0
 802c530:	fb0e 3101 	mla	r1, lr, r1, r3
 802c534:	f10c 0201 	add.w	r2, ip, #1
 802c538:	b289      	uxth	r1, r1
 802c53a:	1c43      	adds	r3, r0, #1
 802c53c:	eb02 221c 	add.w	r2, r2, ip, lsr #8
 802c540:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802c544:	0952      	lsrs	r2, r2, #5
 802c546:	1c4b      	adds	r3, r1, #1
 802c548:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802c54c:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802c550:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802c554:	4310      	orrs	r0, r2
 802c556:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802c55a:	4308      	orrs	r0, r1
 802c55c:	f8a8 0000 	strh.w	r0, [r8]
 802c560:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802c562:	441c      	add	r4, r3
 802c564:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802c566:	f108 0802 	add.w	r8, r8, #2
 802c56a:	441e      	add	r6, r3
 802c56c:	f109 39ff 	add.w	r9, r9, #4294967295
 802c570:	e731      	b.n	802c3d6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 802c572:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802c574:	441c      	add	r4, r3
 802c576:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802c578:	441e      	add	r6, r3
 802c57a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c57c:	3b01      	subs	r3, #1
 802c57e:	9309      	str	r3, [sp, #36]	; 0x24
 802c580:	f10a 0a02 	add.w	sl, sl, #2
 802c584:	e6dd      	b.n	802c342 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802c586:	f47f aeee 	bne.w	802c366 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 802c58a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802c58c:	2b00      	cmp	r3, #0
 802c58e:	f340 813f 	ble.w	802c810 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x544>
 802c592:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802c596:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802c59a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802c59e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802c5a0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802c5a4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802c5a8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802c5ac:	eef0 6a48 	vmov.f32	s13, s16
 802c5b0:	ee69 7a27 	vmul.f32	s15, s18, s15
 802c5b4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802c5b8:	ee37 8a48 	vsub.f32	s16, s14, s16
 802c5bc:	ee16 4a90 	vmov	r4, s13
 802c5c0:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802c5c4:	eef0 6a68 	vmov.f32	s13, s17
 802c5c8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802c5cc:	ee18 2a10 	vmov	r2, s16
 802c5d0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802c5d4:	fb92 f3f3 	sdiv	r3, r2, r3
 802c5d8:	ee18 2a90 	vmov	r2, s17
 802c5dc:	932d      	str	r3, [sp, #180]	; 0xb4
 802c5de:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802c5e0:	fb92 f3f3 	sdiv	r3, r2, r3
 802c5e4:	932e      	str	r3, [sp, #184]	; 0xb8
 802c5e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802c5e8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802c5ea:	3b01      	subs	r3, #1
 802c5ec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802c5f0:	930f      	str	r3, [sp, #60]	; 0x3c
 802c5f2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802c5f4:	bf08      	it	eq
 802c5f6:	4613      	moveq	r3, r2
 802c5f8:	ee16 6a90 	vmov	r6, s13
 802c5fc:	9309      	str	r3, [sp, #36]	; 0x24
 802c5fe:	eef0 8a67 	vmov.f32	s17, s15
 802c602:	eeb0 8a47 	vmov.f32	s16, s14
 802c606:	e695      	b.n	802c334 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 802c608:	2900      	cmp	r1, #0
 802c60a:	f43f af42 	beq.w	802c492 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c6>
 802c60e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802c610:	442b      	add	r3, r5
 802c612:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802c616:	07db      	lsls	r3, r3, #31
 802c618:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802c61c:	bf54      	ite	pl
 802c61e:	f00c 030f 	andpl.w	r3, ip, #15
 802c622:	ea4f 132c 	movmi.w	r3, ip, asr #4
 802c626:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802c62a:	b2db      	uxtb	r3, r3
 802c62c:	930d      	str	r3, [sp, #52]	; 0x34
 802c62e:	e730      	b.n	802c492 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c6>
 802c630:	1c45      	adds	r5, r0, #1
 802c632:	d195      	bne.n	802c560 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 802c634:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802c636:	4285      	cmp	r5, r0
 802c638:	dd92      	ble.n	802c560 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 802c63a:	1c5d      	adds	r5, r3, #1
 802c63c:	db90      	blt.n	802c560 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 802c63e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802c640:	429d      	cmp	r5, r3
 802c642:	dd8d      	ble.n	802c560 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 802c644:	e9cd 3203 	strd	r3, r2, [sp, #12]
 802c648:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802c64a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802c64c:	9301      	str	r3, [sp, #4]
 802c64e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802c650:	9002      	str	r0, [sp, #8]
 802c652:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802c656:	9300      	str	r3, [sp, #0]
 802c658:	463a      	mov	r2, r7
 802c65a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802c65c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 802c65e:	4641      	mov	r1, r8
 802c660:	f7ff fd4a 	bl	802c0f8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 802c664:	e77c      	b.n	802c560 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 802c666:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802c668:	1422      	asrs	r2, r4, #16
 802c66a:	1433      	asrs	r3, r6, #16
 802c66c:	fb05 2303 	mla	r3, r5, r3, r2
 802c670:	085a      	lsrs	r2, r3, #1
 802c672:	07dd      	lsls	r5, r3, #31
 802c674:	5cba      	ldrb	r2, [r7, r2]
 802c676:	bf54      	ite	pl
 802c678:	f002 020f 	andpl.w	r2, r2, #15
 802c67c:	1112      	asrmi	r2, r2, #4
 802c67e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802c682:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802c686:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802c68a:	b2d2      	uxtb	r2, r2
 802c68c:	2900      	cmp	r1, #0
 802c68e:	f000 80a8 	beq.w	802c7e2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x516>
 802c692:	f103 0e01 	add.w	lr, r3, #1
 802c696:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802c69a:	f01e 0f01 	tst.w	lr, #1
 802c69e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802c6a2:	bf0c      	ite	eq
 802c6a4:	f00c 0c0f 	andeq.w	ip, ip, #15
 802c6a8:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802c6ac:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802c6b0:	fa5f f58c 	uxtb.w	r5, ip
 802c6b4:	9514      	str	r5, [sp, #80]	; 0x50
 802c6b6:	b300      	cbz	r0, 802c6fa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 802c6b8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802c6ba:	442b      	add	r3, r5
 802c6bc:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802c6c0:	07dd      	lsls	r5, r3, #31
 802c6c2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802c6c6:	bf54      	ite	pl
 802c6c8:	f00c 0c0f 	andpl.w	ip, ip, #15
 802c6cc:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802c6d0:	3301      	adds	r3, #1
 802c6d2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802c6d6:	fa5f f58c 	uxtb.w	r5, ip
 802c6da:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802c6de:	950e      	str	r5, [sp, #56]	; 0x38
 802c6e0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802c6e4:	07dd      	lsls	r5, r3, #31
 802c6e6:	bf54      	ite	pl
 802c6e8:	f00c 0c0f 	andpl.w	ip, ip, #15
 802c6ec:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802c6f0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802c6f4:	fa5f f38c 	uxtb.w	r3, ip
 802c6f8:	9315      	str	r3, [sp, #84]	; 0x54
 802c6fa:	b289      	uxth	r1, r1
 802c6fc:	b280      	uxth	r0, r0
 802c6fe:	fb01 f300 	mul.w	r3, r1, r0
 802c702:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802c706:	0109      	lsls	r1, r1, #4
 802c708:	b280      	uxth	r0, r0
 802c70a:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 802c70e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802c710:	1ac9      	subs	r1, r1, r3
 802c712:	ebac 0c00 	sub.w	ip, ip, r0
 802c716:	b289      	uxth	r1, r1
 802c718:	4369      	muls	r1, r5
 802c71a:	fa1f fc8c 	uxth.w	ip, ip
 802c71e:	fb02 120c 	mla	r2, r2, ip, r1
 802c722:	990e      	ldr	r1, [sp, #56]	; 0x38
 802c724:	fb00 2001 	mla	r0, r0, r1, r2
 802c728:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802c72a:	fb03 0302 	mla	r3, r3, r2, r0
 802c72e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802c732:	2b00      	cmp	r3, #0
 802c734:	d04c      	beq.n	802c7d0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x504>
 802c736:	9910      	ldr	r1, [sp, #64]	; 0x40
 802c738:	4a34      	ldr	r2, [pc, #208]	; (802c80c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x540>)
 802c73a:	434b      	muls	r3, r1
 802c73c:	1c59      	adds	r1, r3, #1
 802c73e:	f8d2 e000 	ldr.w	lr, [r2]
 802c742:	f8b9 2000 	ldrh.w	r2, [r9]
 802c746:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802c74a:	121b      	asrs	r3, r3, #8
 802c74c:	b299      	uxth	r1, r3
 802c74e:	ea4f 2c22 	mov.w	ip, r2, asr #8
 802c752:	43db      	mvns	r3, r3
 802c754:	b2db      	uxtb	r3, r3
 802c756:	ea4f 201e 	mov.w	r0, lr, lsr #8
 802c75a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802c75e:	fb1c fc03 	smulbb	ip, ip, r3
 802c762:	ea4f 08e2 	mov.w	r8, r2, asr #3
 802c766:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802c76a:	fb00 c001 	mla	r0, r0, r1, ip
 802c76e:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 802c772:	ea4f 0cde 	mov.w	ip, lr, lsr #3
 802c776:	fb18 f803 	smulbb	r8, r8, r3
 802c77a:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 802c77e:	00d2      	lsls	r2, r2, #3
 802c780:	fb0c 8c01 	mla	ip, ip, r1, r8
 802c784:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802c788:	b2d2      	uxtb	r2, r2
 802c78a:	fa1f fc8c 	uxth.w	ip, ip
 802c78e:	fa5f fe8e 	uxtb.w	lr, lr
 802c792:	fb12 f203 	smulbb	r2, r2, r3
 802c796:	b280      	uxth	r0, r0
 802c798:	fb0e 2201 	mla	r2, lr, r1, r2
 802c79c:	f10c 0801 	add.w	r8, ip, #1
 802c7a0:	b292      	uxth	r2, r2
 802c7a2:	eb08 2c1c 	add.w	ip, r8, ip, lsr #8
 802c7a6:	f100 0801 	add.w	r8, r0, #1
 802c7aa:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802c7ae:	eb08 2010 	add.w	r0, r8, r0, lsr #8
 802c7b2:	1c51      	adds	r1, r2, #1
 802c7b4:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802c7b8:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802c7bc:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802c7c0:	ea4c 0c00 	orr.w	ip, ip, r0
 802c7c4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802c7c8:	ea4c 0c02 	orr.w	ip, ip, r2
 802c7cc:	f8a9 c000 	strh.w	ip, [r9]
 802c7d0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802c7d2:	441c      	add	r4, r3
 802c7d4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802c7d6:	f109 0902 	add.w	r9, r9, #2
 802c7da:	441e      	add	r6, r3
 802c7dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 802c7e0:	e5db      	b.n	802c39a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 802c7e2:	2800      	cmp	r0, #0
 802c7e4:	d089      	beq.n	802c6fa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 802c7e6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802c7e8:	442b      	add	r3, r5
 802c7ea:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802c7ee:	07db      	lsls	r3, r3, #31
 802c7f0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802c7f4:	bf54      	ite	pl
 802c7f6:	f00c 0c0f 	andpl.w	ip, ip, #15
 802c7fa:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802c7fe:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802c802:	fa5f f38c 	uxtb.w	r3, ip
 802c806:	930e      	str	r3, [sp, #56]	; 0x38
 802c808:	e777      	b.n	802c6fa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 802c80a:	bf00      	nop
 802c80c:	200127fc 	.word	0x200127fc
 802c810:	b019      	add	sp, #100	; 0x64
 802c812:	ecbd 8b08 	vpop	{d8-d11}
 802c816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c81a:	bf00      	nop

0802c81c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 802c81c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802c820:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 802c824:	2c00      	cmp	r4, #0
 802c826:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802c82a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802c82e:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 802c832:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 802c836:	fb04 ce03 	mla	lr, r4, r3, ip
 802c83a:	db60      	blt.n	802c8fe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 802c83c:	45a1      	cmp	r9, r4
 802c83e:	dd5e      	ble.n	802c8fe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 802c840:	f1bc 0f00 	cmp.w	ip, #0
 802c844:	db59      	blt.n	802c8fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 802c846:	45e0      	cmp	r8, ip
 802c848:	dd57      	ble.n	802c8fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 802c84a:	ea4f 005e 	mov.w	r0, lr, lsr #1
 802c84e:	f01e 0f01 	tst.w	lr, #1
 802c852:	5c16      	ldrb	r6, [r2, r0]
 802c854:	bf0c      	ite	eq
 802c856:	f006 060f 	andeq.w	r6, r6, #15
 802c85a:	1136      	asrne	r6, r6, #4
 802c85c:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802c860:	b2f6      	uxtb	r6, r6
 802c862:	f11c 0001 	adds.w	r0, ip, #1
 802c866:	d44d      	bmi.n	802c904 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 802c868:	4580      	cmp	r8, r0
 802c86a:	dd4b      	ble.n	802c904 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 802c86c:	2d00      	cmp	r5, #0
 802c86e:	d04b      	beq.n	802c908 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xec>
 802c870:	f10e 0a01 	add.w	sl, lr, #1
 802c874:	ea4f 005a 	mov.w	r0, sl, lsr #1
 802c878:	f01a 0f01 	tst.w	sl, #1
 802c87c:	5c10      	ldrb	r0, [r2, r0]
 802c87e:	bf0c      	ite	eq
 802c880:	f000 000f 	andeq.w	r0, r0, #15
 802c884:	1100      	asrne	r0, r0, #4
 802c886:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802c88a:	b2c0      	uxtb	r0, r0
 802c88c:	3401      	adds	r4, #1
 802c88e:	d43f      	bmi.n	802c910 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 802c890:	45a1      	cmp	r9, r4
 802c892:	dd3d      	ble.n	802c910 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 802c894:	2f00      	cmp	r7, #0
 802c896:	f000 8097 	beq.w	802c9c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1ac>
 802c89a:	f1bc 0f00 	cmp.w	ip, #0
 802c89e:	db35      	blt.n	802c90c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 802c8a0:	45e0      	cmp	r8, ip
 802c8a2:	dd33      	ble.n	802c90c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 802c8a4:	eb03 090e 	add.w	r9, r3, lr
 802c8a8:	ea4f 0459 	mov.w	r4, r9, lsr #1
 802c8ac:	f019 0f01 	tst.w	r9, #1
 802c8b0:	5d14      	ldrb	r4, [r2, r4]
 802c8b2:	bf0c      	ite	eq
 802c8b4:	f004 040f 	andeq.w	r4, r4, #15
 802c8b8:	1124      	asrne	r4, r4, #4
 802c8ba:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802c8be:	b2e4      	uxtb	r4, r4
 802c8c0:	f11c 0c01 	adds.w	ip, ip, #1
 802c8c4:	d427      	bmi.n	802c916 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 802c8c6:	45e0      	cmp	r8, ip
 802c8c8:	dd25      	ble.n	802c916 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 802c8ca:	b335      	cbz	r5, 802c91a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfe>
 802c8cc:	3301      	adds	r3, #1
 802c8ce:	449e      	add	lr, r3
 802c8d0:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802c8d4:	f01e 0f01 	tst.w	lr, #1
 802c8d8:	5cd2      	ldrb	r2, [r2, r3]
 802c8da:	bf0c      	ite	eq
 802c8dc:	f002 020f 	andeq.w	r2, r2, #15
 802c8e0:	1112      	asrne	r2, r2, #4
 802c8e2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802c8e6:	b2d3      	uxtb	r3, r2
 802c8e8:	2d0f      	cmp	r5, #15
 802c8ea:	d917      	bls.n	802c91c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x100>
 802c8ec:	4b39      	ldr	r3, [pc, #228]	; (802c9d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b8>)
 802c8ee:	4a3a      	ldr	r2, [pc, #232]	; (802c9d8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1bc>)
 802c8f0:	483a      	ldr	r0, [pc, #232]	; (802c9dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1c0>)
 802c8f2:	f240 210d 	movw	r1, #525	; 0x20d
 802c8f6:	f001 fcef 	bl	802e2d8 <__assert_func>
 802c8fa:	2600      	movs	r6, #0
 802c8fc:	e7b1      	b.n	802c862 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x46>
 802c8fe:	2000      	movs	r0, #0
 802c900:	4606      	mov	r6, r0
 802c902:	e7c3      	b.n	802c88c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 802c904:	2000      	movs	r0, #0
 802c906:	e7c1      	b.n	802c88c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 802c908:	4628      	mov	r0, r5
 802c90a:	e7bf      	b.n	802c88c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 802c90c:	2400      	movs	r4, #0
 802c90e:	e7d7      	b.n	802c8c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xa4>
 802c910:	2300      	movs	r3, #0
 802c912:	461c      	mov	r4, r3
 802c914:	e7e8      	b.n	802c8e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 802c916:	2300      	movs	r3, #0
 802c918:	e7e6      	b.n	802c8e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 802c91a:	462b      	mov	r3, r5
 802c91c:	2f0f      	cmp	r7, #15
 802c91e:	d8e5      	bhi.n	802c8ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 802c920:	b2ad      	uxth	r5, r5
 802c922:	b2bf      	uxth	r7, r7
 802c924:	fb05 fc07 	mul.w	ip, r5, r7
 802c928:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 802c92c:	012d      	lsls	r5, r5, #4
 802c92e:	b2bf      	uxth	r7, r7
 802c930:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 802c934:	eba5 050c 	sub.w	r5, r5, ip
 802c938:	1bd2      	subs	r2, r2, r7
 802c93a:	b2ad      	uxth	r5, r5
 802c93c:	b292      	uxth	r2, r2
 802c93e:	4368      	muls	r0, r5
 802c940:	fb06 0002 	mla	r0, r6, r2, r0
 802c944:	fb07 0404 	mla	r4, r7, r4, r0
 802c948:	fb0c 4303 	mla	r3, ip, r3, r4
 802c94c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802c950:	2b00      	cmp	r3, #0
 802c952:	d037      	beq.n	802c9c4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>
 802c954:	4a22      	ldr	r2, [pc, #136]	; (802c9e0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1c4>)
 802c956:	6816      	ldr	r6, [r2, #0]
 802c958:	880a      	ldrh	r2, [r1, #0]
 802c95a:	b298      	uxth	r0, r3
 802c95c:	1215      	asrs	r5, r2, #8
 802c95e:	43db      	mvns	r3, r3
 802c960:	b2db      	uxtb	r3, r3
 802c962:	0a34      	lsrs	r4, r6, #8
 802c964:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802c968:	fb15 f503 	smulbb	r5, r5, r3
 802c96c:	10d7      	asrs	r7, r2, #3
 802c96e:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802c972:	fb04 5400 	mla	r4, r4, r0, r5
 802c976:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802c97a:	08f5      	lsrs	r5, r6, #3
 802c97c:	fb17 f703 	smulbb	r7, r7, r3
 802c980:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802c984:	00d2      	lsls	r2, r2, #3
 802c986:	fb05 7500 	mla	r5, r5, r0, r7
 802c98a:	b2d2      	uxtb	r2, r2
 802c98c:	00f6      	lsls	r6, r6, #3
 802c98e:	fb12 f303 	smulbb	r3, r2, r3
 802c992:	b2ad      	uxth	r5, r5
 802c994:	b2f6      	uxtb	r6, r6
 802c996:	b2a4      	uxth	r4, r4
 802c998:	fb06 3000 	mla	r0, r6, r0, r3
 802c99c:	1c6b      	adds	r3, r5, #1
 802c99e:	b280      	uxth	r0, r0
 802c9a0:	1c62      	adds	r2, r4, #1
 802c9a2:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 802c9a6:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 802c9aa:	095b      	lsrs	r3, r3, #5
 802c9ac:	1c42      	adds	r2, r0, #1
 802c9ae:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802c9b2:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802c9b6:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802c9ba:	4323      	orrs	r3, r4
 802c9bc:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802c9c0:	4303      	orrs	r3, r0
 802c9c2:	800b      	strh	r3, [r1, #0]
 802c9c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c9c8:	2d0f      	cmp	r5, #15
 802c9ca:	d88f      	bhi.n	802c8ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 802c9cc:	463b      	mov	r3, r7
 802c9ce:	463c      	mov	r4, r7
 802c9d0:	e7a6      	b.n	802c920 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x104>
 802c9d2:	bf00      	nop
 802c9d4:	080343dc 	.word	0x080343dc
 802c9d8:	08034935 	.word	0x08034935
 802c9dc:	08034464 	.word	0x08034464
 802c9e0:	200127fc 	.word	0x200127fc

0802c9e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802c9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c9e8:	ed2d 8b08 	vpush	{d8-d11}
 802c9ec:	b095      	sub	sp, #84	; 0x54
 802c9ee:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 802c9f2:	9306      	str	r3, [sp, #24]
 802c9f4:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 802c9f8:	9307      	str	r3, [sp, #28]
 802c9fa:	920d      	str	r2, [sp, #52]	; 0x34
 802c9fc:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 802ca00:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802ca02:	910a      	str	r1, [sp, #40]	; 0x28
 802ca04:	9308      	str	r3, [sp, #32]
 802ca06:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 802ca0a:	9013      	str	r0, [sp, #76]	; 0x4c
 802ca0c:	6850      	ldr	r0, [r2, #4]
 802ca0e:	6812      	ldr	r2, [r2, #0]
 802ca10:	fb00 1303 	mla	r3, r0, r3, r1
 802ca14:	eb02 0b43 	add.w	fp, r2, r3, lsl #1
 802ca18:	9b07      	ldr	r3, [sp, #28]
 802ca1a:	3301      	adds	r3, #1
 802ca1c:	f023 0301 	bic.w	r3, r3, #1
 802ca20:	9309      	str	r3, [sp, #36]	; 0x24
 802ca22:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802ca24:	681f      	ldr	r7, [r3, #0]
 802ca26:	eeb0 aa40 	vmov.f32	s20, s0
 802ca2a:	eef0 9a60 	vmov.f32	s19, s1
 802ca2e:	eeb0 9a41 	vmov.f32	s18, s2
 802ca32:	eeb0 8a62 	vmov.f32	s16, s5
 802ca36:	eef0 8a43 	vmov.f32	s17, s6
 802ca3a:	eef0 ba44 	vmov.f32	s23, s8
 802ca3e:	eeb0 ba64 	vmov.f32	s22, s9
 802ca42:	eef0 aa45 	vmov.f32	s21, s10
 802ca46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802ca48:	2b00      	cmp	r3, #0
 802ca4a:	dc03      	bgt.n	802ca54 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 802ca4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802ca4e:	2b00      	cmp	r3, #0
 802ca50:	f340 825c 	ble.w	802cf0c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x528>
 802ca54:	9b06      	ldr	r3, [sp, #24]
 802ca56:	2b00      	cmp	r3, #0
 802ca58:	f340 8119 	ble.w	802cc8e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2aa>
 802ca5c:	1422      	asrs	r2, r4, #16
 802ca5e:	ea4f 4326 	mov.w	r3, r6, asr #16
 802ca62:	d42d      	bmi.n	802cac0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 802ca64:	9807      	ldr	r0, [sp, #28]
 802ca66:	1c51      	adds	r1, r2, #1
 802ca68:	4288      	cmp	r0, r1
 802ca6a:	dd2c      	ble.n	802cac6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 802ca6c:	2b00      	cmp	r3, #0
 802ca6e:	db2a      	blt.n	802cac6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 802ca70:	9808      	ldr	r0, [sp, #32]
 802ca72:	1c59      	adds	r1, r3, #1
 802ca74:	4288      	cmp	r0, r1
 802ca76:	dd26      	ble.n	802cac6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 802ca78:	9b06      	ldr	r3, [sp, #24]
 802ca7a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802ca7c:	3b01      	subs	r3, #1
 802ca7e:	fb02 4203 	mla	r2, r2, r3, r4
 802ca82:	1412      	asrs	r2, r2, #16
 802ca84:	d42a      	bmi.n	802cadc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 802ca86:	9907      	ldr	r1, [sp, #28]
 802ca88:	3201      	adds	r2, #1
 802ca8a:	4291      	cmp	r1, r2
 802ca8c:	dd26      	ble.n	802cadc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 802ca8e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802ca90:	fb02 6303 	mla	r3, r2, r3, r6
 802ca94:	141b      	asrs	r3, r3, #16
 802ca96:	d421      	bmi.n	802cadc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 802ca98:	9a08      	ldr	r2, [sp, #32]
 802ca9a:	3301      	adds	r3, #1
 802ca9c:	429a      	cmp	r2, r3
 802ca9e:	dd1d      	ble.n	802cadc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 802caa0:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 802caa4:	f8dd a018 	ldr.w	sl, [sp, #24]
 802caa8:	930e      	str	r3, [sp, #56]	; 0x38
 802caaa:	46d8      	mov	r8, fp
 802caac:	f1ba 0f00 	cmp.w	sl, #0
 802cab0:	f300 8161 	bgt.w	802cd76 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 802cab4:	9b06      	ldr	r3, [sp, #24]
 802cab6:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802caba:	eb0b 0b45 	add.w	fp, fp, r5, lsl #1
 802cabe:	e0e8      	b.n	802cc92 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ae>
 802cac0:	1c51      	adds	r1, r2, #1
 802cac2:	f040 80da 	bne.w	802cc7a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 802cac6:	9907      	ldr	r1, [sp, #28]
 802cac8:	4291      	cmp	r1, r2
 802caca:	f340 80d6 	ble.w	802cc7a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 802cace:	1c5a      	adds	r2, r3, #1
 802cad0:	f2c0 80d3 	blt.w	802cc7a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 802cad4:	9a08      	ldr	r2, [sp, #32]
 802cad6:	4293      	cmp	r3, r2
 802cad8:	f280 80cf 	bge.w	802cc7a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 802cadc:	f8dd 9018 	ldr.w	r9, [sp, #24]
 802cae0:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 802cae4:	46d8      	mov	r8, fp
 802cae6:	f1b9 0f00 	cmp.w	r9, #0
 802caea:	dde3      	ble.n	802cab4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 802caec:	1420      	asrs	r0, r4, #16
 802caee:	ea4f 4326 	mov.w	r3, r6, asr #16
 802caf2:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802caf6:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802cafa:	f100 8124 	bmi.w	802cd46 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x362>
 802cafe:	9d07      	ldr	r5, [sp, #28]
 802cb00:	f100 0c01 	add.w	ip, r0, #1
 802cb04:	4565      	cmp	r5, ip
 802cb06:	f340 8120 	ble.w	802cd4a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x366>
 802cb0a:	2b00      	cmp	r3, #0
 802cb0c:	f2c0 811d 	blt.w	802cd4a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x366>
 802cb10:	9d08      	ldr	r5, [sp, #32]
 802cb12:	f103 0c01 	add.w	ip, r3, #1
 802cb16:	4565      	cmp	r5, ip
 802cb18:	f340 8117 	ble.w	802cd4a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x366>
 802cb1c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802cb1e:	fb03 0305 	mla	r3, r3, r5, r0
 802cb22:	0858      	lsrs	r0, r3, #1
 802cb24:	07dd      	lsls	r5, r3, #31
 802cb26:	5c38      	ldrb	r0, [r7, r0]
 802cb28:	bf54      	ite	pl
 802cb2a:	f000 000f 	andpl.w	r0, r0, #15
 802cb2e:	1100      	asrmi	r0, r0, #4
 802cb30:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802cb34:	b2c0      	uxtb	r0, r0
 802cb36:	2a00      	cmp	r2, #0
 802cb38:	f000 80ea 	beq.w	802cd10 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32c>
 802cb3c:	f103 0e01 	add.w	lr, r3, #1
 802cb40:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802cb44:	f01e 0f01 	tst.w	lr, #1
 802cb48:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802cb4c:	bf0c      	ite	eq
 802cb4e:	f00c 0c0f 	andeq.w	ip, ip, #15
 802cb52:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802cb56:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802cb5a:	fa5f fc8c 	uxtb.w	ip, ip
 802cb5e:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 802cb62:	b1f9      	cbz	r1, 802cba4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 802cb64:	4453      	add	r3, sl
 802cb66:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802cb6a:	07dd      	lsls	r5, r3, #31
 802cb6c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802cb70:	bf54      	ite	pl
 802cb72:	f00c 0c0f 	andpl.w	ip, ip, #15
 802cb76:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802cb7a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802cb7e:	3301      	adds	r3, #1
 802cb80:	fa5f fc8c 	uxtb.w	ip, ip
 802cb84:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 802cb88:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802cb8c:	07dd      	lsls	r5, r3, #31
 802cb8e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802cb92:	bf54      	ite	pl
 802cb94:	f00c 030f 	andpl.w	r3, ip, #15
 802cb98:	ea4f 132c 	movmi.w	r3, ip, asr #4
 802cb9c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802cba0:	b2db      	uxtb	r3, r3
 802cba2:	9310      	str	r3, [sp, #64]	; 0x40
 802cba4:	b292      	uxth	r2, r2
 802cba6:	b289      	uxth	r1, r1
 802cba8:	fb02 f301 	mul.w	r3, r2, r1
 802cbac:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802cbb0:	0112      	lsls	r2, r2, #4
 802cbb2:	b289      	uxth	r1, r1
 802cbb4:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 802cbb8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802cbba:	1ad2      	subs	r2, r2, r3
 802cbbc:	ebac 0c01 	sub.w	ip, ip, r1
 802cbc0:	b292      	uxth	r2, r2
 802cbc2:	436a      	muls	r2, r5
 802cbc4:	fa1f fc8c 	uxth.w	ip, ip
 802cbc8:	fb00 200c 	mla	r0, r0, ip, r2
 802cbcc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802cbce:	fb01 0102 	mla	r1, r1, r2, r0
 802cbd2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802cbd4:	fb03 1302 	mla	r3, r3, r2, r1
 802cbd8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802cbdc:	2b00      	cmp	r3, #0
 802cbde:	d043      	beq.n	802cc68 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x284>
 802cbe0:	4ac9      	ldr	r2, [pc, #804]	; (802cf08 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x524>)
 802cbe2:	6811      	ldr	r1, [r2, #0]
 802cbe4:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 802cbe8:	08ca      	lsrs	r2, r1, #3
 802cbea:	00c9      	lsls	r1, r1, #3
 802cbec:	b2c9      	uxtb	r1, r1
 802cbee:	2bff      	cmp	r3, #255	; 0xff
 802cbf0:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 802cbf4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802cbf8:	460d      	mov	r5, r1
 802cbfa:	f000 809c 	beq.w	802cd36 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x352>
 802cbfe:	f8b8 c000 	ldrh.w	ip, [r8]
 802cc02:	b299      	uxth	r1, r3
 802cc04:	ea4f 202c 	mov.w	r0, ip, asr #8
 802cc08:	43db      	mvns	r3, r3
 802cc0a:	b2db      	uxtb	r3, r3
 802cc0c:	fb1e fe01 	smulbb	lr, lr, r1
 802cc10:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802cc14:	fb00 e003 	mla	r0, r0, r3, lr
 802cc18:	ea4f 0eec 	mov.w	lr, ip, asr #3
 802cc1c:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 802cc20:	fb12 f201 	smulbb	r2, r2, r1
 802cc24:	fb0e 2203 	mla	r2, lr, r3, r2
 802cc28:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802cc2c:	b292      	uxth	r2, r2
 802cc2e:	fb15 f101 	smulbb	r1, r5, r1
 802cc32:	fa5f fc8c 	uxtb.w	ip, ip
 802cc36:	b280      	uxth	r0, r0
 802cc38:	fb0c 1303 	mla	r3, ip, r3, r1
 802cc3c:	f102 0e01 	add.w	lr, r2, #1
 802cc40:	b29b      	uxth	r3, r3
 802cc42:	1c41      	adds	r1, r0, #1
 802cc44:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 802cc48:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802cc4c:	0952      	lsrs	r2, r2, #5
 802cc4e:	1c59      	adds	r1, r3, #1
 802cc50:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802cc54:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802cc58:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802cc5c:	4310      	orrs	r0, r2
 802cc5e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802cc62:	4318      	orrs	r0, r3
 802cc64:	f8a8 0000 	strh.w	r0, [r8]
 802cc68:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802cc6a:	441c      	add	r4, r3
 802cc6c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802cc6e:	f108 0802 	add.w	r8, r8, #2
 802cc72:	441e      	add	r6, r3
 802cc74:	f109 39ff 	add.w	r9, r9, #4294967295
 802cc78:	e735      	b.n	802cae6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 802cc7a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802cc7c:	441c      	add	r4, r3
 802cc7e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802cc80:	441e      	add	r6, r3
 802cc82:	9b06      	ldr	r3, [sp, #24]
 802cc84:	3b01      	subs	r3, #1
 802cc86:	9306      	str	r3, [sp, #24]
 802cc88:	f10b 0b02 	add.w	fp, fp, #2
 802cc8c:	e6e2      	b.n	802ca54 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 802cc8e:	f47f aef3 	bne.w	802ca78 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 802cc92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802cc94:	2b00      	cmp	r3, #0
 802cc96:	f340 8139 	ble.w	802cf0c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x528>
 802cc9a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802cc9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802cca2:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802cca6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802cca8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802ccac:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802ccb0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802ccb4:	eef0 6a48 	vmov.f32	s13, s16
 802ccb8:	ee69 7a27 	vmul.f32	s15, s18, s15
 802ccbc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802ccc0:	ee37 8a48 	vsub.f32	s16, s14, s16
 802ccc4:	ee16 4a90 	vmov	r4, s13
 802ccc8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802cccc:	eef0 6a68 	vmov.f32	s13, s17
 802ccd0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802ccd4:	ee18 2a10 	vmov	r2, s16
 802ccd8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802ccdc:	fb92 f3f3 	sdiv	r3, r2, r3
 802cce0:	ee18 2a90 	vmov	r2, s17
 802cce4:	9329      	str	r3, [sp, #164]	; 0xa4
 802cce6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802cce8:	fb92 f3f3 	sdiv	r3, r2, r3
 802ccec:	932a      	str	r3, [sp, #168]	; 0xa8
 802ccee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802ccf0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802ccf2:	3b01      	subs	r3, #1
 802ccf4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802ccf8:	930a      	str	r3, [sp, #40]	; 0x28
 802ccfa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802ccfc:	bf08      	it	eq
 802ccfe:	4613      	moveq	r3, r2
 802cd00:	ee16 6a90 	vmov	r6, s13
 802cd04:	9306      	str	r3, [sp, #24]
 802cd06:	eef0 8a67 	vmov.f32	s17, s15
 802cd0a:	eeb0 8a47 	vmov.f32	s16, s14
 802cd0e:	e69a      	b.n	802ca46 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 802cd10:	2900      	cmp	r1, #0
 802cd12:	f43f af47 	beq.w	802cba4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 802cd16:	4453      	add	r3, sl
 802cd18:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802cd1c:	07db      	lsls	r3, r3, #31
 802cd1e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802cd22:	bf54      	ite	pl
 802cd24:	f00c 030f 	andpl.w	r3, ip, #15
 802cd28:	ea4f 132c 	movmi.w	r3, ip, asr #4
 802cd2c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802cd30:	b2db      	uxtb	r3, r3
 802cd32:	930b      	str	r3, [sp, #44]	; 0x2c
 802cd34:	e736      	b.n	802cba4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 802cd36:	00d2      	lsls	r2, r2, #3
 802cd38:	ea42 2e0e 	orr.w	lr, r2, lr, lsl #8
 802cd3c:	ea4e 01d1 	orr.w	r1, lr, r1, lsr #3
 802cd40:	f8a8 1000 	strh.w	r1, [r8]
 802cd44:	e790      	b.n	802cc68 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x284>
 802cd46:	1c45      	adds	r5, r0, #1
 802cd48:	d18e      	bne.n	802cc68 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x284>
 802cd4a:	9d07      	ldr	r5, [sp, #28]
 802cd4c:	4285      	cmp	r5, r0
 802cd4e:	dd8b      	ble.n	802cc68 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x284>
 802cd50:	1c5d      	adds	r5, r3, #1
 802cd52:	db89      	blt.n	802cc68 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x284>
 802cd54:	9d08      	ldr	r5, [sp, #32]
 802cd56:	429d      	cmp	r5, r3
 802cd58:	dd86      	ble.n	802cc68 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x284>
 802cd5a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 802cd5e:	9b07      	ldr	r3, [sp, #28]
 802cd60:	9300      	str	r3, [sp, #0]
 802cd62:	e9cd 2104 	strd	r2, r1, [sp, #16]
 802cd66:	9501      	str	r5, [sp, #4]
 802cd68:	4653      	mov	r3, sl
 802cd6a:	463a      	mov	r2, r7
 802cd6c:	4641      	mov	r1, r8
 802cd6e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802cd70:	f7ff fd54 	bl	802c81c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 802cd74:	e778      	b.n	802cc68 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x284>
 802cd76:	9909      	ldr	r1, [sp, #36]	; 0x24
 802cd78:	1422      	asrs	r2, r4, #16
 802cd7a:	1433      	asrs	r3, r6, #16
 802cd7c:	fb01 2303 	mla	r3, r1, r3, r2
 802cd80:	085a      	lsrs	r2, r3, #1
 802cd82:	07d9      	lsls	r1, r3, #31
 802cd84:	5cba      	ldrb	r2, [r7, r2]
 802cd86:	bf54      	ite	pl
 802cd88:	f002 020f 	andpl.w	r2, r2, #15
 802cd8c:	1112      	asrmi	r2, r2, #4
 802cd8e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802cd92:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802cd96:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802cd9a:	b2d2      	uxtb	r2, r2
 802cd9c:	2800      	cmp	r0, #0
 802cd9e:	f000 8099 	beq.w	802ced4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>
 802cda2:	f103 0e01 	add.w	lr, r3, #1
 802cda6:	ea4f 015e 	mov.w	r1, lr, lsr #1
 802cdaa:	f01e 0f01 	tst.w	lr, #1
 802cdae:	5c79      	ldrb	r1, [r7, r1]
 802cdb0:	bf0c      	ite	eq
 802cdb2:	f001 010f 	andeq.w	r1, r1, #15
 802cdb6:	1109      	asrne	r1, r1, #4
 802cdb8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802cdbc:	b2c9      	uxtb	r1, r1
 802cdbe:	9111      	str	r1, [sp, #68]	; 0x44
 802cdc0:	f1bc 0f00 	cmp.w	ip, #0
 802cdc4:	d018      	beq.n	802cdf8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 802cdc6:	990e      	ldr	r1, [sp, #56]	; 0x38
 802cdc8:	440b      	add	r3, r1
 802cdca:	0859      	lsrs	r1, r3, #1
 802cdcc:	07dd      	lsls	r5, r3, #31
 802cdce:	5c79      	ldrb	r1, [r7, r1]
 802cdd0:	bf54      	ite	pl
 802cdd2:	f001 010f 	andpl.w	r1, r1, #15
 802cdd6:	1109      	asrmi	r1, r1, #4
 802cdd8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802cddc:	b2c9      	uxtb	r1, r1
 802cdde:	3301      	adds	r3, #1
 802cde0:	910c      	str	r1, [sp, #48]	; 0x30
 802cde2:	0859      	lsrs	r1, r3, #1
 802cde4:	07dd      	lsls	r5, r3, #31
 802cde6:	5c79      	ldrb	r1, [r7, r1]
 802cde8:	bf54      	ite	pl
 802cdea:	f001 010f 	andpl.w	r1, r1, #15
 802cdee:	1109      	asrmi	r1, r1, #4
 802cdf0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802cdf4:	b2c9      	uxtb	r1, r1
 802cdf6:	9112      	str	r1, [sp, #72]	; 0x48
 802cdf8:	b280      	uxth	r0, r0
 802cdfa:	fa1f fc8c 	uxth.w	ip, ip
 802cdfe:	fb00 f30c 	mul.w	r3, r0, ip
 802ce02:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 802ce06:	0100      	lsls	r0, r0, #4
 802ce08:	fa1f fc8c 	uxth.w	ip, ip
 802ce0c:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 802ce10:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802ce12:	1ac0      	subs	r0, r0, r3
 802ce14:	eba1 010c 	sub.w	r1, r1, ip
 802ce18:	b280      	uxth	r0, r0
 802ce1a:	b289      	uxth	r1, r1
 802ce1c:	4368      	muls	r0, r5
 802ce1e:	fb02 0201 	mla	r2, r2, r1, r0
 802ce22:	990c      	ldr	r1, [sp, #48]	; 0x30
 802ce24:	fb0c 2c01 	mla	ip, ip, r1, r2
 802ce28:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802ce2a:	fb03 c302 	mla	r3, r3, r2, ip
 802ce2e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802ce32:	2b00      	cmp	r3, #0
 802ce34:	d045      	beq.n	802cec2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4de>
 802ce36:	4a34      	ldr	r2, [pc, #208]	; (802cf08 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x524>)
 802ce38:	6811      	ldr	r1, [r2, #0]
 802ce3a:	2bff      	cmp	r3, #255	; 0xff
 802ce3c:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 802ce40:	ea4f 02d1 	mov.w	r2, r1, lsr #3
 802ce44:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 802ce48:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 802ce4c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802ce50:	b2c9      	uxtb	r1, r1
 802ce52:	d050      	beq.n	802cef6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x512>
 802ce54:	f8b8 c000 	ldrh.w	ip, [r8]
 802ce58:	fa1f f983 	uxth.w	r9, r3
 802ce5c:	ea4f 202c 	mov.w	r0, ip, asr #8
 802ce60:	43db      	mvns	r3, r3
 802ce62:	b2db      	uxtb	r3, r3
 802ce64:	fb1e fe09 	smulbb	lr, lr, r9
 802ce68:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802ce6c:	fb00 e003 	mla	r0, r0, r3, lr
 802ce70:	ea4f 0eec 	mov.w	lr, ip, asr #3
 802ce74:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 802ce78:	fb12 f209 	smulbb	r2, r2, r9
 802ce7c:	fb0e 2203 	mla	r2, lr, r3, r2
 802ce80:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802ce84:	b292      	uxth	r2, r2
 802ce86:	fa5f fc8c 	uxtb.w	ip, ip
 802ce8a:	fb11 f109 	smulbb	r1, r1, r9
 802ce8e:	b280      	uxth	r0, r0
 802ce90:	fb0c 1103 	mla	r1, ip, r3, r1
 802ce94:	f102 0e01 	add.w	lr, r2, #1
 802ce98:	b289      	uxth	r1, r1
 802ce9a:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 802ce9e:	f100 0e01 	add.w	lr, r0, #1
 802cea2:	0952      	lsrs	r2, r2, #5
 802cea4:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 802cea8:	1c4b      	adds	r3, r1, #1
 802ceaa:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802ceae:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802ceb2:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802ceb6:	4302      	orrs	r2, r0
 802ceb8:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802cebc:	430a      	orrs	r2, r1
 802cebe:	f8a8 2000 	strh.w	r2, [r8]
 802cec2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802cec4:	441c      	add	r4, r3
 802cec6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802cec8:	f108 0802 	add.w	r8, r8, #2
 802cecc:	441e      	add	r6, r3
 802cece:	f10a 3aff 	add.w	sl, sl, #4294967295
 802ced2:	e5eb      	b.n	802caac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 802ced4:	f1bc 0f00 	cmp.w	ip, #0
 802ced8:	d08e      	beq.n	802cdf8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 802ceda:	990e      	ldr	r1, [sp, #56]	; 0x38
 802cedc:	440b      	add	r3, r1
 802cede:	0859      	lsrs	r1, r3, #1
 802cee0:	07db      	lsls	r3, r3, #31
 802cee2:	5c79      	ldrb	r1, [r7, r1]
 802cee4:	bf54      	ite	pl
 802cee6:	f001 010f 	andpl.w	r1, r1, #15
 802ceea:	1109      	asrmi	r1, r1, #4
 802ceec:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802cef0:	b2c9      	uxtb	r1, r1
 802cef2:	910c      	str	r1, [sp, #48]	; 0x30
 802cef4:	e780      	b.n	802cdf8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 802cef6:	00d2      	lsls	r2, r2, #3
 802cef8:	ea42 2e0e 	orr.w	lr, r2, lr, lsl #8
 802cefc:	ea4e 01d1 	orr.w	r1, lr, r1, lsr #3
 802cf00:	f8a8 1000 	strh.w	r1, [r8]
 802cf04:	e7dd      	b.n	802cec2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4de>
 802cf06:	bf00      	nop
 802cf08:	200127fc 	.word	0x200127fc
 802cf0c:	b015      	add	sp, #84	; 0x54
 802cf0e:	ecbd 8b08 	vpop	{d8-d11}
 802cf12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802cf16:	bf00      	nop

0802cf18 <CRC_Lock>:
 802cf18:	b530      	push	{r4, r5, lr}
 802cf1a:	4a1d      	ldr	r2, [pc, #116]	; (802cf90 <CRC_Lock+0x78>)
 802cf1c:	6813      	ldr	r3, [r2, #0]
 802cf1e:	f023 0301 	bic.w	r3, r3, #1
 802cf22:	6013      	str	r3, [r2, #0]
 802cf24:	4b1b      	ldr	r3, [pc, #108]	; (802cf94 <CRC_Lock+0x7c>)
 802cf26:	681a      	ldr	r2, [r3, #0]
 802cf28:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 802cf2c:	4022      	ands	r2, r4
 802cf2e:	f24c 2540 	movw	r5, #49728	; 0xc240
 802cf32:	42aa      	cmp	r2, r5
 802cf34:	d005      	beq.n	802cf42 <CRC_Lock+0x2a>
 802cf36:	681b      	ldr	r3, [r3, #0]
 802cf38:	f24c 2270 	movw	r2, #49776	; 0xc270
 802cf3c:	4023      	ands	r3, r4
 802cf3e:	4293      	cmp	r3, r2
 802cf40:	d11d      	bne.n	802cf7e <CRC_Lock+0x66>
 802cf42:	4b15      	ldr	r3, [pc, #84]	; (802cf98 <CRC_Lock+0x80>)
 802cf44:	681b      	ldr	r3, [r3, #0]
 802cf46:	b9d3      	cbnz	r3, 802cf7e <CRC_Lock+0x66>
 802cf48:	4a14      	ldr	r2, [pc, #80]	; (802cf9c <CRC_Lock+0x84>)
 802cf4a:	6813      	ldr	r3, [r2, #0]
 802cf4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802cf50:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 802cf54:	d006      	beq.n	802cf64 <CRC_Lock+0x4c>
 802cf56:	6813      	ldr	r3, [r2, #0]
 802cf58:	f240 4283 	movw	r2, #1155	; 0x483
 802cf5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802cf60:	4293      	cmp	r3, r2
 802cf62:	d10c      	bne.n	802cf7e <CRC_Lock+0x66>
 802cf64:	4b0e      	ldr	r3, [pc, #56]	; (802cfa0 <CRC_Lock+0x88>)
 802cf66:	2201      	movs	r2, #1
 802cf68:	601a      	str	r2, [r3, #0]
 802cf6a:	681a      	ldr	r2, [r3, #0]
 802cf6c:	2a00      	cmp	r2, #0
 802cf6e:	d1fc      	bne.n	802cf6a <CRC_Lock+0x52>
 802cf70:	4b0c      	ldr	r3, [pc, #48]	; (802cfa4 <CRC_Lock+0x8c>)
 802cf72:	6018      	str	r0, [r3, #0]
 802cf74:	6818      	ldr	r0, [r3, #0]
 802cf76:	1a43      	subs	r3, r0, r1
 802cf78:	4258      	negs	r0, r3
 802cf7a:	4158      	adcs	r0, r3
 802cf7c:	bd30      	pop	{r4, r5, pc}
 802cf7e:	4b0a      	ldr	r3, [pc, #40]	; (802cfa8 <CRC_Lock+0x90>)
 802cf80:	2201      	movs	r2, #1
 802cf82:	601a      	str	r2, [r3, #0]
 802cf84:	681a      	ldr	r2, [r3, #0]
 802cf86:	2a00      	cmp	r2, #0
 802cf88:	d1fc      	bne.n	802cf84 <CRC_Lock+0x6c>
 802cf8a:	4b08      	ldr	r3, [pc, #32]	; (802cfac <CRC_Lock+0x94>)
 802cf8c:	e7f1      	b.n	802cf72 <CRC_Lock+0x5a>
 802cf8e:	bf00      	nop
 802cf90:	e0002000 	.word	0xe0002000
 802cf94:	e000ed00 	.word	0xe000ed00
 802cf98:	e0042000 	.word	0xe0042000
 802cf9c:	5c001000 	.word	0x5c001000
 802cfa0:	58024c08 	.word	0x58024c08
 802cfa4:	58024c00 	.word	0x58024c00
 802cfa8:	40023008 	.word	0x40023008
 802cfac:	40023000 	.word	0x40023000

0802cfb0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802cfb0:	6101      	str	r1, [r0, #16]
 802cfb2:	4770      	bx	lr

0802cfb4 <_ZN8touchgfx8Gestures4tickEv>:
 802cfb4:	7b83      	ldrb	r3, [r0, #14]
 802cfb6:	b14b      	cbz	r3, 802cfcc <_ZN8touchgfx8Gestures4tickEv+0x18>
 802cfb8:	8903      	ldrh	r3, [r0, #8]
 802cfba:	3301      	adds	r3, #1
 802cfbc:	b29b      	uxth	r3, r3
 802cfbe:	2b07      	cmp	r3, #7
 802cfc0:	8103      	strh	r3, [r0, #8]
 802cfc2:	bf81      	itttt	hi
 802cfc4:	2300      	movhi	r3, #0
 802cfc6:	8143      	strhhi	r3, [r0, #10]
 802cfc8:	8183      	strhhi	r3, [r0, #12]
 802cfca:	7383      	strbhi	r3, [r0, #14]
 802cfcc:	4770      	bx	lr
	...

0802cfd0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 802cfd0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802cfd4:	4604      	mov	r4, r0
 802cfd6:	8880      	ldrh	r0, [r0, #4]
 802cfd8:	f8ad 0006 	strh.w	r0, [sp, #6]
 802cfdc:	4698      	mov	r8, r3
 802cfde:	eba8 0000 	sub.w	r0, r8, r0
 802cfe2:	4b1c      	ldr	r3, [pc, #112]	; (802d054 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 802cfe4:	9300      	str	r3, [sp, #0]
 802cfe6:	b280      	uxth	r0, r0
 802cfe8:	2300      	movs	r3, #0
 802cfea:	f88d 3004 	strb.w	r3, [sp, #4]
 802cfee:	b203      	sxth	r3, r0
 802cff0:	2b00      	cmp	r3, #0
 802cff2:	bfb8      	it	lt
 802cff4:	4240      	neglt	r0, r0
 802cff6:	4617      	mov	r7, r2
 802cff8:	8aa2      	ldrh	r2, [r4, #20]
 802cffa:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 802cffe:	f8ad 800a 	strh.w	r8, [sp, #10]
 802d002:	bfb8      	it	lt
 802d004:	b203      	sxthlt	r3, r0
 802d006:	460e      	mov	r6, r1
 802d008:	4293      	cmp	r3, r2
 802d00a:	88e1      	ldrh	r1, [r4, #6]
 802d00c:	f8ad 1008 	strh.w	r1, [sp, #8]
 802d010:	f8ad 500c 	strh.w	r5, [sp, #12]
 802d014:	dc08      	bgt.n	802d028 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 802d016:	1a69      	subs	r1, r5, r1
 802d018:	b289      	uxth	r1, r1
 802d01a:	b20b      	sxth	r3, r1
 802d01c:	2b00      	cmp	r3, #0
 802d01e:	bfbc      	itt	lt
 802d020:	4249      	neglt	r1, r1
 802d022:	b20b      	sxthlt	r3, r1
 802d024:	429a      	cmp	r2, r3
 802d026:	da13      	bge.n	802d050 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 802d028:	6920      	ldr	r0, [r4, #16]
 802d02a:	6803      	ldr	r3, [r0, #0]
 802d02c:	4669      	mov	r1, sp
 802d02e:	685b      	ldr	r3, [r3, #4]
 802d030:	4798      	blx	r3
 802d032:	eba8 0606 	sub.w	r6, r8, r6
 802d036:	2300      	movs	r3, #0
 802d038:	1bef      	subs	r7, r5, r7
 802d03a:	2001      	movs	r0, #1
 802d03c:	8123      	strh	r3, [r4, #8]
 802d03e:	8166      	strh	r6, [r4, #10]
 802d040:	81a7      	strh	r7, [r4, #12]
 802d042:	f8a4 8004 	strh.w	r8, [r4, #4]
 802d046:	80e5      	strh	r5, [r4, #6]
 802d048:	73a0      	strb	r0, [r4, #14]
 802d04a:	b004      	add	sp, #16
 802d04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802d050:	2000      	movs	r0, #0
 802d052:	e7fa      	b.n	802d04a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 802d054:	0803272c 	.word	0x0803272c

0802d058 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802d058:	b5f0      	push	{r4, r5, r6, r7, lr}
 802d05a:	461e      	mov	r6, r3
 802d05c:	1e4b      	subs	r3, r1, #1
 802d05e:	2b01      	cmp	r3, #1
 802d060:	b085      	sub	sp, #20
 802d062:	4604      	mov	r4, r0
 802d064:	460d      	mov	r5, r1
 802d066:	4617      	mov	r7, r2
 802d068:	d84b      	bhi.n	802d102 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802d06a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802d06e:	1cd3      	adds	r3, r2, #3
 802d070:	b29b      	uxth	r3, r3
 802d072:	2b06      	cmp	r3, #6
 802d074:	d916      	bls.n	802d0a4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802d076:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 802d118 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802d07a:	f8cd c004 	str.w	ip, [sp, #4]
 802d07e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802d082:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802d086:	6900      	ldr	r0, [r0, #16]
 802d088:	f8ad 100c 	strh.w	r1, [sp, #12]
 802d08c:	f04f 0c00 	mov.w	ip, #0
 802d090:	f88d c008 	strb.w	ip, [sp, #8]
 802d094:	f8ad 200a 	strh.w	r2, [sp, #10]
 802d098:	f8ad 300e 	strh.w	r3, [sp, #14]
 802d09c:	6803      	ldr	r3, [r0, #0]
 802d09e:	a901      	add	r1, sp, #4
 802d0a0:	689b      	ldr	r3, [r3, #8]
 802d0a2:	4798      	blx	r3
 802d0a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802d0a8:	1cd3      	adds	r3, r2, #3
 802d0aa:	b29b      	uxth	r3, r3
 802d0ac:	2b06      	cmp	r3, #6
 802d0ae:	d916      	bls.n	802d0de <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802d0b0:	f8df c064 	ldr.w	ip, [pc, #100]	; 802d118 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802d0b4:	f8cd c004 	str.w	ip, [sp, #4]
 802d0b8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802d0bc:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802d0c0:	6920      	ldr	r0, [r4, #16]
 802d0c2:	f8ad 100c 	strh.w	r1, [sp, #12]
 802d0c6:	f04f 0c01 	mov.w	ip, #1
 802d0ca:	f88d c008 	strb.w	ip, [sp, #8]
 802d0ce:	f8ad 200a 	strh.w	r2, [sp, #10]
 802d0d2:	f8ad 300e 	strh.w	r3, [sp, #14]
 802d0d6:	6803      	ldr	r3, [r0, #0]
 802d0d8:	a901      	add	r1, sp, #4
 802d0da:	689b      	ldr	r3, [r3, #8]
 802d0dc:	4798      	blx	r3
 802d0de:	4b0d      	ldr	r3, [pc, #52]	; (802d114 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 802d0e0:	9301      	str	r3, [sp, #4]
 802d0e2:	6920      	ldr	r0, [r4, #16]
 802d0e4:	f88d 5008 	strb.w	r5, [sp, #8]
 802d0e8:	2300      	movs	r3, #0
 802d0ea:	f8ad 700a 	strh.w	r7, [sp, #10]
 802d0ee:	f8ad 600c 	strh.w	r6, [sp, #12]
 802d0f2:	f8ad 300e 	strh.w	r3, [sp, #14]
 802d0f6:	6803      	ldr	r3, [r0, #0]
 802d0f8:	a901      	add	r1, sp, #4
 802d0fa:	681b      	ldr	r3, [r3, #0]
 802d0fc:	4798      	blx	r3
 802d0fe:	b005      	add	sp, #20
 802d100:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802d102:	2900      	cmp	r1, #0
 802d104:	d1eb      	bne.n	802d0de <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802d106:	80a2      	strh	r2, [r4, #4]
 802d108:	80c6      	strh	r6, [r0, #6]
 802d10a:	60a1      	str	r1, [r4, #8]
 802d10c:	81a1      	strh	r1, [r4, #12]
 802d10e:	73a1      	strb	r1, [r4, #14]
 802d110:	e7e5      	b.n	802d0de <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802d112:	bf00      	nop
 802d114:	08032718 	.word	0x08032718
 802d118:	080338bc 	.word	0x080338bc

0802d11c <__aeabi_atexit>:
 802d11c:	460b      	mov	r3, r1
 802d11e:	4601      	mov	r1, r0
 802d120:	4618      	mov	r0, r3
 802d122:	f001 b8fd 	b.w	802e320 <__cxa_atexit>
 802d126:	bf00      	nop

0802d128 <__cxa_pure_virtual>:
 802d128:	b508      	push	{r3, lr}
 802d12a:	221b      	movs	r2, #27
 802d12c:	4902      	ldr	r1, [pc, #8]	; (802d138 <__cxa_pure_virtual+0x10>)
 802d12e:	2002      	movs	r0, #2
 802d130:	f001 feb2 	bl	802ee98 <write>
 802d134:	f000 f83a 	bl	802d1ac <_ZSt9terminatev>
 802d138:	08034b70 	.word	0x08034b70

0802d13c <_ZdlPvj>:
 802d13c:	f000 b820 	b.w	802d180 <_ZdlPv>

0802d140 <__cxa_guard_acquire>:
 802d140:	b508      	push	{r3, lr}
 802d142:	6803      	ldr	r3, [r0, #0]
 802d144:	07db      	lsls	r3, r3, #31
 802d146:	d405      	bmi.n	802d154 <__cxa_guard_acquire+0x14>
 802d148:	7843      	ldrb	r3, [r0, #1]
 802d14a:	b92b      	cbnz	r3, 802d158 <__cxa_guard_acquire+0x18>
 802d14c:	2301      	movs	r3, #1
 802d14e:	7043      	strb	r3, [r0, #1]
 802d150:	4618      	mov	r0, r3
 802d152:	bd08      	pop	{r3, pc}
 802d154:	2000      	movs	r0, #0
 802d156:	bd08      	pop	{r3, pc}
 802d158:	2004      	movs	r0, #4
 802d15a:	f000 f8c9 	bl	802d2f0 <__cxa_allocate_exception>
 802d15e:	4b03      	ldr	r3, [pc, #12]	; (802d16c <__cxa_guard_acquire+0x2c>)
 802d160:	6003      	str	r3, [r0, #0]
 802d162:	4a03      	ldr	r2, [pc, #12]	; (802d170 <__cxa_guard_acquire+0x30>)
 802d164:	4903      	ldr	r1, [pc, #12]	; (802d174 <__cxa_guard_acquire+0x34>)
 802d166:	f000 fe09 	bl	802dd7c <__cxa_throw>
 802d16a:	bf00      	nop
 802d16c:	08034bc4 	.word	0x08034bc4
 802d170:	0802d631 	.word	0x0802d631
 802d174:	08034b8c 	.word	0x08034b8c

0802d178 <__cxa_guard_release>:
 802d178:	2301      	movs	r3, #1
 802d17a:	6003      	str	r3, [r0, #0]
 802d17c:	4770      	bx	lr
 802d17e:	bf00      	nop

0802d180 <_ZdlPv>:
 802d180:	f001 b9f8 	b.w	802e574 <free>

0802d184 <_ZN10__cxxabiv111__terminateEPFvvE>:
 802d184:	b508      	push	{r3, lr}
 802d186:	4780      	blx	r0
 802d188:	f001 f89e 	bl	802e2c8 <abort>
 802d18c:	f000 fe4a 	bl	802de24 <__cxa_begin_catch>
 802d190:	f001 f89a 	bl	802e2c8 <abort>
 802d194:	460d      	mov	r5, r1
 802d196:	4604      	mov	r4, r0
 802d198:	f000 fe84 	bl	802dea4 <__cxa_end_catch>
 802d19c:	3501      	adds	r5, #1
 802d19e:	d001      	beq.n	802d1a4 <_ZN10__cxxabiv111__terminateEPFvvE+0x20>
 802d1a0:	f000 f97e 	bl	802d4a0 <__cxa_end_cleanup>
 802d1a4:	4620      	mov	r0, r4
 802d1a6:	f000 f90d 	bl	802d3c4 <__cxa_call_unexpected>
 802d1aa:	bf00      	nop

0802d1ac <_ZSt9terminatev>:
 802d1ac:	b508      	push	{r3, lr}
 802d1ae:	4b03      	ldr	r3, [pc, #12]	; (802d1bc <_ZSt9terminatev+0x10>)
 802d1b0:	6818      	ldr	r0, [r3, #0]
 802d1b2:	f3bf 8f5b 	dmb	ish
 802d1b6:	f7ff ffe5 	bl	802d184 <_ZN10__cxxabiv111__terminateEPFvvE>
 802d1ba:	bf00      	nop
 802d1bc:	20000110 	.word	0x20000110

0802d1c0 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 802d1c0:	b508      	push	{r3, lr}
 802d1c2:	4780      	blx	r0
 802d1c4:	f7ff fff2 	bl	802d1ac <_ZSt9terminatev>

0802d1c8 <_ZSt10unexpectedv>:
 802d1c8:	b508      	push	{r3, lr}
 802d1ca:	4b03      	ldr	r3, [pc, #12]	; (802d1d8 <_ZSt10unexpectedv+0x10>)
 802d1cc:	6818      	ldr	r0, [r3, #0]
 802d1ce:	f3bf 8f5b 	dmb	ish
 802d1d2:	f7ff fff5 	bl	802d1c0 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 802d1d6:	bf00      	nop
 802d1d8:	2000010c 	.word	0x2000010c

0802d1dc <_ZSt13get_terminatev>:
 802d1dc:	4b02      	ldr	r3, [pc, #8]	; (802d1e8 <_ZSt13get_terminatev+0xc>)
 802d1de:	6818      	ldr	r0, [r3, #0]
 802d1e0:	f3bf 8f5b 	dmb	ish
 802d1e4:	4770      	bx	lr
 802d1e6:	bf00      	nop
 802d1e8:	20000110 	.word	0x20000110

0802d1ec <_ZSt14get_unexpectedv>:
 802d1ec:	4b02      	ldr	r3, [pc, #8]	; (802d1f8 <_ZSt14get_unexpectedv+0xc>)
 802d1ee:	6818      	ldr	r0, [r3, #0]
 802d1f0:	f3bf 8f5b 	dmb	ish
 802d1f4:	4770      	bx	lr
 802d1f6:	bf00      	nop
 802d1f8:	2000010c 	.word	0x2000010c

0802d1fc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
 802d1fc:	b4f0      	push	{r4, r5, r6, r7}
 802d1fe:	4c22      	ldr	r4, [pc, #136]	; (802d288 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x8c>)
 802d200:	6863      	ldr	r3, [r4, #4]
 802d202:	f1a0 0608 	sub.w	r6, r0, #8
 802d206:	b31b      	cbz	r3, 802d250 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x54>
 802d208:	f850 7c08 	ldr.w	r7, [r0, #-8]
 802d20c:	19f5      	adds	r5, r6, r7
 802d20e:	42ab      	cmp	r3, r5
 802d210:	d81e      	bhi.n	802d250 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x54>
 802d212:	d022      	beq.n	802d25a <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x5e>
 802d214:	6859      	ldr	r1, [r3, #4]
 802d216:	2900      	cmp	r1, #0
 802d218:	d031      	beq.n	802d27e <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x82>
 802d21a:	428d      	cmp	r5, r1
 802d21c:	d303      	bcc.n	802d226 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x2a>
 802d21e:	e02e      	b.n	802d27e <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x82>
 802d220:	4295      	cmp	r5, r2
 802d222:	d205      	bcs.n	802d230 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x34>
 802d224:	4611      	mov	r1, r2
 802d226:	684a      	ldr	r2, [r1, #4]
 802d228:	1d1c      	adds	r4, r3, #4
 802d22a:	460b      	mov	r3, r1
 802d22c:	2a00      	cmp	r2, #0
 802d22e:	d1f7      	bne.n	802d220 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x24>
 802d230:	4295      	cmp	r5, r2
 802d232:	d01c      	beq.n	802d26e <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x72>
 802d234:	6823      	ldr	r3, [r4, #0]
 802d236:	681a      	ldr	r2, [r3, #0]
 802d238:	1899      	adds	r1, r3, r2
 802d23a:	428e      	cmp	r6, r1
 802d23c:	d01c      	beq.n	802d278 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x7c>
 802d23e:	685b      	ldr	r3, [r3, #4]
 802d240:	f840 3c04 	str.w	r3, [r0, #-4]
 802d244:	6823      	ldr	r3, [r4, #0]
 802d246:	f840 7c08 	str.w	r7, [r0, #-8]
 802d24a:	605e      	str	r6, [r3, #4]
 802d24c:	bcf0      	pop	{r4, r5, r6, r7}
 802d24e:	4770      	bx	lr
 802d250:	f840 3c04 	str.w	r3, [r0, #-4]
 802d254:	6066      	str	r6, [r4, #4]
 802d256:	bcf0      	pop	{r4, r5, r6, r7}
 802d258:	4770      	bx	lr
 802d25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d25e:	4417      	add	r7, r2
 802d260:	f840 7c08 	str.w	r7, [r0, #-8]
 802d264:	f840 3c04 	str.w	r3, [r0, #-4]
 802d268:	6066      	str	r6, [r4, #4]
 802d26a:	bcf0      	pop	{r4, r5, r6, r7}
 802d26c:	4770      	bx	lr
 802d26e:	e9d5 3200 	ldrd	r3, r2, [r5]
 802d272:	604a      	str	r2, [r1, #4]
 802d274:	441f      	add	r7, r3
 802d276:	e7dd      	b.n	802d234 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x38>
 802d278:	4417      	add	r7, r2
 802d27a:	601f      	str	r7, [r3, #0]
 802d27c:	e7eb      	b.n	802d256 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x5a>
 802d27e:	460a      	mov	r2, r1
 802d280:	3404      	adds	r4, #4
 802d282:	4619      	mov	r1, r3
 802d284:	e7d4      	b.n	802d230 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x34>
 802d286:	bf00      	nop
 802d288:	20012910 	.word	0x20012910

0802d28c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
 802d28c:	b430      	push	{r4, r5}
 802d28e:	4c17      	ldr	r4, [pc, #92]	; (802d2ec <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x60>)
 802d290:	f100 0208 	add.w	r2, r0, #8
 802d294:	6863      	ldr	r3, [r4, #4]
 802d296:	2a08      	cmp	r2, #8
 802d298:	bf38      	it	cc
 802d29a:	2208      	movcc	r2, #8
 802d29c:	b303      	cbz	r3, 802d2e0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x54>
 802d29e:	3207      	adds	r2, #7
 802d2a0:	6819      	ldr	r1, [r3, #0]
 802d2a2:	f022 0207 	bic.w	r2, r2, #7
 802d2a6:	428a      	cmp	r2, r1
 802d2a8:	d804      	bhi.n	802d2b4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x28>
 802d2aa:	e01b      	b.n	802d2e4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
 802d2ac:	6801      	ldr	r1, [r0, #0]
 802d2ae:	428a      	cmp	r2, r1
 802d2b0:	d905      	bls.n	802d2be <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x32>
 802d2b2:	4603      	mov	r3, r0
 802d2b4:	6858      	ldr	r0, [r3, #4]
 802d2b6:	2800      	cmp	r0, #0
 802d2b8:	d1f8      	bne.n	802d2ac <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x20>
 802d2ba:	bc30      	pop	{r4, r5}
 802d2bc:	4770      	bx	lr
 802d2be:	3304      	adds	r3, #4
 802d2c0:	1a8c      	subs	r4, r1, r2
 802d2c2:	2c07      	cmp	r4, #7
 802d2c4:	6845      	ldr	r5, [r0, #4]
 802d2c6:	d908      	bls.n	802d2da <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x4e>
 802d2c8:	1881      	adds	r1, r0, r2
 802d2ca:	604d      	str	r5, [r1, #4]
 802d2cc:	5084      	str	r4, [r0, r2]
 802d2ce:	6818      	ldr	r0, [r3, #0]
 802d2d0:	6002      	str	r2, [r0, #0]
 802d2d2:	6019      	str	r1, [r3, #0]
 802d2d4:	3008      	adds	r0, #8
 802d2d6:	bc30      	pop	{r4, r5}
 802d2d8:	4770      	bx	lr
 802d2da:	6001      	str	r1, [r0, #0]
 802d2dc:	601d      	str	r5, [r3, #0]
 802d2de:	e7f9      	b.n	802d2d4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
 802d2e0:	4618      	mov	r0, r3
 802d2e2:	e7ea      	b.n	802d2ba <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x2e>
 802d2e4:	4618      	mov	r0, r3
 802d2e6:	1d23      	adds	r3, r4, #4
 802d2e8:	e7ea      	b.n	802d2c0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x34>
 802d2ea:	bf00      	nop
 802d2ec:	20012910 	.word	0x20012910

0802d2f0 <__cxa_allocate_exception>:
 802d2f0:	b510      	push	{r4, lr}
 802d2f2:	f100 0480 	add.w	r4, r0, #128	; 0x80
 802d2f6:	4620      	mov	r0, r4
 802d2f8:	f001 f934 	bl	802e564 <malloc>
 802d2fc:	b138      	cbz	r0, 802d30e <__cxa_allocate_exception+0x1e>
 802d2fe:	4603      	mov	r3, r0
 802d300:	2280      	movs	r2, #128	; 0x80
 802d302:	2100      	movs	r1, #0
 802d304:	4618      	mov	r0, r3
 802d306:	f001 f957 	bl	802e5b8 <memset>
 802d30a:	3080      	adds	r0, #128	; 0x80
 802d30c:	bd10      	pop	{r4, pc}
 802d30e:	4620      	mov	r0, r4
 802d310:	f7ff ffbc 	bl	802d28c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
 802d314:	4603      	mov	r3, r0
 802d316:	2800      	cmp	r0, #0
 802d318:	d1f2      	bne.n	802d300 <__cxa_allocate_exception+0x10>
 802d31a:	f7ff ff47 	bl	802d1ac <_ZSt9terminatev>
 802d31e:	bf00      	nop

0802d320 <__cxa_free_exception>:
 802d320:	4a06      	ldr	r2, [pc, #24]	; (802d33c <__cxa_free_exception+0x1c>)
 802d322:	6893      	ldr	r3, [r2, #8]
 802d324:	3880      	subs	r0, #128	; 0x80
 802d326:	4298      	cmp	r0, r3
 802d328:	d903      	bls.n	802d332 <__cxa_free_exception+0x12>
 802d32a:	68d2      	ldr	r2, [r2, #12]
 802d32c:	4413      	add	r3, r2
 802d32e:	4298      	cmp	r0, r3
 802d330:	d301      	bcc.n	802d336 <__cxa_free_exception+0x16>
 802d332:	f001 b91f 	b.w	802e574 <free>
 802d336:	f7ff bf61 	b.w	802d1fc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
 802d33a:	bf00      	nop
 802d33c:	20012910 	.word	0x20012910

0802d340 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 802d340:	b538      	push	{r3, r4, r5, lr}
 802d342:	4c08      	ldr	r4, [pc, #32]	; (802d364 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 802d344:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
 802d348:	4628      	mov	r0, r5
 802d34a:	60e5      	str	r5, [r4, #12]
 802d34c:	f001 f90a 	bl	802e564 <malloc>
 802d350:	60a0      	str	r0, [r4, #8]
 802d352:	b120      	cbz	r0, 802d35e <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1e>
 802d354:	2300      	movs	r3, #0
 802d356:	6060      	str	r0, [r4, #4]
 802d358:	e9c0 5300 	strd	r5, r3, [r0]
 802d35c:	bd38      	pop	{r3, r4, r5, pc}
 802d35e:	60e0      	str	r0, [r4, #12]
 802d360:	6060      	str	r0, [r4, #4]
 802d362:	bd38      	pop	{r3, r4, r5, pc}
 802d364:	20012910 	.word	0x20012910

0802d368 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 802d368:	7803      	ldrb	r3, [r0, #0]
 802d36a:	2b47      	cmp	r3, #71	; 0x47
 802d36c:	d001      	beq.n	802d372 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0xa>
 802d36e:	2000      	movs	r0, #0
 802d370:	4770      	bx	lr
 802d372:	7843      	ldrb	r3, [r0, #1]
 802d374:	2b4e      	cmp	r3, #78	; 0x4e
 802d376:	d1fa      	bne.n	802d36e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 802d378:	7883      	ldrb	r3, [r0, #2]
 802d37a:	2b55      	cmp	r3, #85	; 0x55
 802d37c:	d1f7      	bne.n	802d36e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 802d37e:	78c3      	ldrb	r3, [r0, #3]
 802d380:	2b43      	cmp	r3, #67	; 0x43
 802d382:	d1f4      	bne.n	802d36e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 802d384:	7903      	ldrb	r3, [r0, #4]
 802d386:	2b43      	cmp	r3, #67	; 0x43
 802d388:	d1f1      	bne.n	802d36e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 802d38a:	7943      	ldrb	r3, [r0, #5]
 802d38c:	2b2b      	cmp	r3, #43	; 0x2b
 802d38e:	d1ee      	bne.n	802d36e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 802d390:	7983      	ldrb	r3, [r0, #6]
 802d392:	2b2b      	cmp	r3, #43	; 0x2b
 802d394:	d1eb      	bne.n	802d36e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 802d396:	79c0      	ldrb	r0, [r0, #7]
 802d398:	2801      	cmp	r0, #1
 802d39a:	bf8c      	ite	hi
 802d39c:	2000      	movhi	r0, #0
 802d39e:	2001      	movls	r0, #1
 802d3a0:	4770      	bx	lr
 802d3a2:	bf00      	nop

0802d3a4 <__cxa_call_terminate>:
 802d3a4:	b510      	push	{r4, lr}
 802d3a6:	b130      	cbz	r0, 802d3b6 <__cxa_call_terminate+0x12>
 802d3a8:	4604      	mov	r4, r0
 802d3aa:	f000 fd3b 	bl	802de24 <__cxa_begin_catch>
 802d3ae:	4620      	mov	r0, r4
 802d3b0:	f7ff ffda 	bl	802d368 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 802d3b4:	b908      	cbnz	r0, 802d3ba <__cxa_call_terminate+0x16>
 802d3b6:	f7ff fef9 	bl	802d1ac <_ZSt9terminatev>
 802d3ba:	f854 0c14 	ldr.w	r0, [r4, #-20]
 802d3be:	f7ff fee1 	bl	802d184 <_ZN10__cxxabiv111__terminateEPFvvE>
 802d3c2:	bf00      	nop

0802d3c4 <__cxa_call_unexpected>:
 802d3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d3c8:	b085      	sub	sp, #20
 802d3ca:	4602      	mov	r2, r0
 802d3cc:	f7ff ffcc 	bl	802d368 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 802d3d0:	b150      	cbz	r0, 802d3e8 <__cxa_call_unexpected+0x24>
 802d3d2:	e952 8506 	ldrd	r8, r5, [r2, #-24]
 802d3d6:	4610      	mov	r0, r2
 802d3d8:	6a96      	ldr	r6, [r2, #40]	; 0x28
 802d3da:	e9d2 740c 	ldrd	r7, r4, [r2, #48]	; 0x30
 802d3de:	f000 fd21 	bl	802de24 <__cxa_begin_catch>
 802d3e2:	4640      	mov	r0, r8
 802d3e4:	f7ff feec 	bl	802d1c0 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 802d3e8:	4610      	mov	r0, r2
 802d3ea:	f000 fd1b 	bl	802de24 <__cxa_begin_catch>
 802d3ee:	f7ff feeb 	bl	802d1c8 <_ZSt10unexpectedv>
 802d3f2:	f000 fd17 	bl	802de24 <__cxa_begin_catch>
 802d3f6:	f7ff fed9 	bl	802d1ac <_ZSt9terminatev>
 802d3fa:	f000 fd13 	bl	802de24 <__cxa_begin_catch>
 802d3fe:	f000 f92f 	bl	802d660 <__cxa_get_globals_fast>
 802d402:	6803      	ldr	r3, [r0, #0]
 802d404:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 802d408:	f10d 0a10 	add.w	sl, sp, #16
 802d40c:	2a01      	cmp	r2, #1
 802d40e:	bf0c      	ite	eq
 802d410:	681a      	ldreq	r2, [r3, #0]
 802d412:	f103 0278 	addne.w	r2, r3, #120	; 0x78
 802d416:	f04f 0800 	mov.w	r8, #0
 802d41a:	3320      	adds	r3, #32
 802d41c:	f84a 2d08 	str.w	r2, [sl, #-8]!
 802d420:	f027 0b03 	bic.w	fp, r7, #3
 802d424:	9301      	str	r3, [sp, #4]
 802d426:	46c1      	mov	r9, r8
 802d428:	45b1      	cmp	r9, r6
 802d42a:	da1b      	bge.n	802d464 <__cxa_call_unexpected+0xa0>
 802d42c:	6827      	ldr	r7, [r4, #0]
 802d42e:	b107      	cbz	r7, 802d432 <__cxa_call_unexpected+0x6e>
 802d430:	4427      	add	r7, r4
 802d432:	4653      	mov	r3, sl
 802d434:	2200      	movs	r2, #0
 802d436:	4639      	mov	r1, r7
 802d438:	9801      	ldr	r0, [sp, #4]
 802d43a:	f000 f837 	bl	802d4ac <__cxa_type_match>
 802d43e:	b9e8      	cbnz	r0, 802d47c <__cxa_call_unexpected+0xb8>
 802d440:	683b      	ldr	r3, [r7, #0]
 802d442:	4914      	ldr	r1, [pc, #80]	; (802d494 <__cxa_call_unexpected+0xd0>)
 802d444:	691b      	ldr	r3, [r3, #16]
 802d446:	9300      	str	r3, [sp, #0]
 802d448:	aa04      	add	r2, sp, #16
 802d44a:	2301      	movs	r3, #1
 802d44c:	f842 0d04 	str.w	r0, [r2, #-4]!
 802d450:	4638      	mov	r0, r7
 802d452:	9f00      	ldr	r7, [sp, #0]
 802d454:	47b8      	blx	r7
 802d456:	2800      	cmp	r0, #0
 802d458:	bf18      	it	ne
 802d45a:	4680      	movne	r8, r0
 802d45c:	f109 0901 	add.w	r9, r9, #1
 802d460:	445c      	add	r4, fp
 802d462:	e7e1      	b.n	802d428 <__cxa_call_unexpected+0x64>
 802d464:	f1b8 0f00 	cmp.w	r8, #0
 802d468:	d010      	beq.n	802d48c <__cxa_call_unexpected+0xc8>
 802d46a:	2004      	movs	r0, #4
 802d46c:	f7ff ff40 	bl	802d2f0 <__cxa_allocate_exception>
 802d470:	4b09      	ldr	r3, [pc, #36]	; (802d498 <__cxa_call_unexpected+0xd4>)
 802d472:	6003      	str	r3, [r0, #0]
 802d474:	4a09      	ldr	r2, [pc, #36]	; (802d49c <__cxa_call_unexpected+0xd8>)
 802d476:	4907      	ldr	r1, [pc, #28]	; (802d494 <__cxa_call_unexpected+0xd0>)
 802d478:	f000 fc80 	bl	802dd7c <__cxa_throw>
 802d47c:	f000 fc9a 	bl	802ddb4 <__cxa_rethrow>
 802d480:	f000 fd10 	bl	802dea4 <__cxa_end_catch>
 802d484:	f000 fd0e 	bl	802dea4 <__cxa_end_catch>
 802d488:	f000 f80a 	bl	802d4a0 <__cxa_end_cleanup>
 802d48c:	4628      	mov	r0, r5
 802d48e:	f7ff fe79 	bl	802d184 <_ZN10__cxxabiv111__terminateEPFvvE>
 802d492:	bf00      	nop
 802d494:	08034c64 	.word	0x08034c64
 802d498:	08034ce8 	.word	0x08034ce8
 802d49c:	0802e049 	.word	0x0802e049

0802d4a0 <__cxa_end_cleanup>:
 802d4a0:	b41e      	push	{r1, r2, r3, r4}
 802d4a2:	f000 f88d 	bl	802d5c0 <__gnu_end_cleanup>
 802d4a6:	bc1e      	pop	{r1, r2, r3, r4}
 802d4a8:	f7da ff6a 	bl	8008380 <_Unwind_Resume>

0802d4ac <__cxa_type_match>:
 802d4ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 802d4ae:	7802      	ldrb	r2, [r0, #0]
 802d4b0:	2a47      	cmp	r2, #71	; 0x47
 802d4b2:	b083      	sub	sp, #12
 802d4b4:	460d      	mov	r5, r1
 802d4b6:	461f      	mov	r7, r3
 802d4b8:	d01e      	beq.n	802d4f8 <__cxa_type_match+0x4c>
 802d4ba:	2300      	movs	r3, #0
 802d4bc:	4c25      	ldr	r4, [pc, #148]	; (802d554 <__cxa_type_match+0xa8>)
 802d4be:	9301      	str	r3, [sp, #4]
 802d4c0:	6823      	ldr	r3, [r4, #0]
 802d4c2:	4620      	mov	r0, r4
 802d4c4:	689b      	ldr	r3, [r3, #8]
 802d4c6:	4798      	blx	r3
 802d4c8:	b180      	cbz	r0, 802d4ec <__cxa_type_match+0x40>
 802d4ca:	9b01      	ldr	r3, [sp, #4]
 802d4cc:	681b      	ldr	r3, [r3, #0]
 802d4ce:	9301      	str	r3, [sp, #4]
 802d4d0:	2602      	movs	r6, #2
 802d4d2:	682b      	ldr	r3, [r5, #0]
 802d4d4:	4621      	mov	r1, r4
 802d4d6:	4628      	mov	r0, r5
 802d4d8:	691c      	ldr	r4, [r3, #16]
 802d4da:	aa01      	add	r2, sp, #4
 802d4dc:	2301      	movs	r3, #1
 802d4de:	47a0      	blx	r4
 802d4e0:	b130      	cbz	r0, 802d4f0 <__cxa_type_match+0x44>
 802d4e2:	9b01      	ldr	r3, [sp, #4]
 802d4e4:	603b      	str	r3, [r7, #0]
 802d4e6:	4630      	mov	r0, r6
 802d4e8:	b003      	add	sp, #12
 802d4ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802d4ec:	2601      	movs	r6, #1
 802d4ee:	e7f0      	b.n	802d4d2 <__cxa_type_match+0x26>
 802d4f0:	4606      	mov	r6, r0
 802d4f2:	4630      	mov	r0, r6
 802d4f4:	b003      	add	sp, #12
 802d4f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802d4f8:	7843      	ldrb	r3, [r0, #1]
 802d4fa:	2b4e      	cmp	r3, #78	; 0x4e
 802d4fc:	d1dd      	bne.n	802d4ba <__cxa_type_match+0xe>
 802d4fe:	7883      	ldrb	r3, [r0, #2]
 802d500:	2b55      	cmp	r3, #85	; 0x55
 802d502:	d1da      	bne.n	802d4ba <__cxa_type_match+0xe>
 802d504:	78c3      	ldrb	r3, [r0, #3]
 802d506:	2b43      	cmp	r3, #67	; 0x43
 802d508:	d1d7      	bne.n	802d4ba <__cxa_type_match+0xe>
 802d50a:	7903      	ldrb	r3, [r0, #4]
 802d50c:	2b46      	cmp	r3, #70	; 0x46
 802d50e:	d015      	beq.n	802d53c <__cxa_type_match+0x90>
 802d510:	7903      	ldrb	r3, [r0, #4]
 802d512:	2b43      	cmp	r3, #67	; 0x43
 802d514:	d1d1      	bne.n	802d4ba <__cxa_type_match+0xe>
 802d516:	7943      	ldrb	r3, [r0, #5]
 802d518:	2b2b      	cmp	r3, #43	; 0x2b
 802d51a:	d1ce      	bne.n	802d4ba <__cxa_type_match+0xe>
 802d51c:	7983      	ldrb	r3, [r0, #6]
 802d51e:	2b2b      	cmp	r3, #43	; 0x2b
 802d520:	d1cb      	bne.n	802d4ba <__cxa_type_match+0xe>
 802d522:	79c3      	ldrb	r3, [r0, #7]
 802d524:	2b01      	cmp	r3, #1
 802d526:	d8c8      	bhi.n	802d4ba <__cxa_type_match+0xe>
 802d528:	f850 4c20 	ldr.w	r4, [r0, #-32]
 802d52c:	d002      	beq.n	802d534 <__cxa_type_match+0x88>
 802d52e:	3058      	adds	r0, #88	; 0x58
 802d530:	9001      	str	r0, [sp, #4]
 802d532:	e7c5      	b.n	802d4c0 <__cxa_type_match+0x14>
 802d534:	4620      	mov	r0, r4
 802d536:	f854 4c78 	ldr.w	r4, [r4, #-120]
 802d53a:	e7f9      	b.n	802d530 <__cxa_type_match+0x84>
 802d53c:	7943      	ldrb	r3, [r0, #5]
 802d53e:	2b4f      	cmp	r3, #79	; 0x4f
 802d540:	d1e6      	bne.n	802d510 <__cxa_type_match+0x64>
 802d542:	7983      	ldrb	r3, [r0, #6]
 802d544:	2b52      	cmp	r3, #82	; 0x52
 802d546:	d1e3      	bne.n	802d510 <__cxa_type_match+0x64>
 802d548:	79c3      	ldrb	r3, [r0, #7]
 802d54a:	2b00      	cmp	r3, #0
 802d54c:	d1e0      	bne.n	802d510 <__cxa_type_match+0x64>
 802d54e:	9301      	str	r3, [sp, #4]
 802d550:	4c01      	ldr	r4, [pc, #4]	; (802d558 <__cxa_type_match+0xac>)
 802d552:	e7b5      	b.n	802d4c0 <__cxa_type_match+0x14>
 802d554:	08034c5c 	.word	0x08034c5c
 802d558:	08034c54 	.word	0x08034c54

0802d55c <__cxa_begin_cleanup>:
 802d55c:	b510      	push	{r4, lr}
 802d55e:	4604      	mov	r4, r0
 802d560:	f000 f882 	bl	802d668 <__cxa_get_globals>
 802d564:	7823      	ldrb	r3, [r4, #0]
 802d566:	2b47      	cmp	r3, #71	; 0x47
 802d568:	f1a4 0220 	sub.w	r2, r4, #32
 802d56c:	d004      	beq.n	802d578 <__cxa_begin_cleanup+0x1c>
 802d56e:	6883      	ldr	r3, [r0, #8]
 802d570:	bb23      	cbnz	r3, 802d5bc <__cxa_begin_cleanup+0x60>
 802d572:	6082      	str	r2, [r0, #8]
 802d574:	2001      	movs	r0, #1
 802d576:	bd10      	pop	{r4, pc}
 802d578:	7863      	ldrb	r3, [r4, #1]
 802d57a:	2b4e      	cmp	r3, #78	; 0x4e
 802d57c:	d1f7      	bne.n	802d56e <__cxa_begin_cleanup+0x12>
 802d57e:	78a3      	ldrb	r3, [r4, #2]
 802d580:	2b55      	cmp	r3, #85	; 0x55
 802d582:	d1f4      	bne.n	802d56e <__cxa_begin_cleanup+0x12>
 802d584:	78e3      	ldrb	r3, [r4, #3]
 802d586:	2b43      	cmp	r3, #67	; 0x43
 802d588:	d1f1      	bne.n	802d56e <__cxa_begin_cleanup+0x12>
 802d58a:	7923      	ldrb	r3, [r4, #4]
 802d58c:	2b43      	cmp	r3, #67	; 0x43
 802d58e:	d1ee      	bne.n	802d56e <__cxa_begin_cleanup+0x12>
 802d590:	7963      	ldrb	r3, [r4, #5]
 802d592:	2b2b      	cmp	r3, #43	; 0x2b
 802d594:	d1eb      	bne.n	802d56e <__cxa_begin_cleanup+0x12>
 802d596:	79a3      	ldrb	r3, [r4, #6]
 802d598:	2b2b      	cmp	r3, #43	; 0x2b
 802d59a:	d1e8      	bne.n	802d56e <__cxa_begin_cleanup+0x12>
 802d59c:	79e3      	ldrb	r3, [r4, #7]
 802d59e:	2b01      	cmp	r3, #1
 802d5a0:	d8e5      	bhi.n	802d56e <__cxa_begin_cleanup+0x12>
 802d5a2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 802d5a6:	3301      	adds	r3, #1
 802d5a8:	2b01      	cmp	r3, #1
 802d5aa:	f844 3c04 	str.w	r3, [r4, #-4]
 802d5ae:	d1e1      	bne.n	802d574 <__cxa_begin_cleanup+0x18>
 802d5b0:	6883      	ldr	r3, [r0, #8]
 802d5b2:	f844 3c08 	str.w	r3, [r4, #-8]
 802d5b6:	6082      	str	r2, [r0, #8]
 802d5b8:	2001      	movs	r0, #1
 802d5ba:	bd10      	pop	{r4, pc}
 802d5bc:	f7ff fdf6 	bl	802d1ac <_ZSt9terminatev>

0802d5c0 <__gnu_end_cleanup>:
 802d5c0:	b508      	push	{r3, lr}
 802d5c2:	f000 f851 	bl	802d668 <__cxa_get_globals>
 802d5c6:	6883      	ldr	r3, [r0, #8]
 802d5c8:	b383      	cbz	r3, 802d62c <__gnu_end_cleanup+0x6c>
 802d5ca:	f893 2020 	ldrb.w	r2, [r3, #32]
 802d5ce:	2a47      	cmp	r2, #71	; 0x47
 802d5d0:	d004      	beq.n	802d5dc <__gnu_end_cleanup+0x1c>
 802d5d2:	2200      	movs	r2, #0
 802d5d4:	6082      	str	r2, [r0, #8]
 802d5d6:	f103 0020 	add.w	r0, r3, #32
 802d5da:	bd08      	pop	{r3, pc}
 802d5dc:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 802d5e0:	2a4e      	cmp	r2, #78	; 0x4e
 802d5e2:	d1f6      	bne.n	802d5d2 <__gnu_end_cleanup+0x12>
 802d5e4:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 802d5e8:	2a55      	cmp	r2, #85	; 0x55
 802d5ea:	d1f2      	bne.n	802d5d2 <__gnu_end_cleanup+0x12>
 802d5ec:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 802d5f0:	2a43      	cmp	r2, #67	; 0x43
 802d5f2:	d1ee      	bne.n	802d5d2 <__gnu_end_cleanup+0x12>
 802d5f4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 802d5f8:	2a43      	cmp	r2, #67	; 0x43
 802d5fa:	d1ea      	bne.n	802d5d2 <__gnu_end_cleanup+0x12>
 802d5fc:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 802d600:	2a2b      	cmp	r2, #43	; 0x2b
 802d602:	d1e6      	bne.n	802d5d2 <__gnu_end_cleanup+0x12>
 802d604:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 802d608:	2a2b      	cmp	r2, #43	; 0x2b
 802d60a:	d1e2      	bne.n	802d5d2 <__gnu_end_cleanup+0x12>
 802d60c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 802d610:	2a01      	cmp	r2, #1
 802d612:	d8de      	bhi.n	802d5d2 <__gnu_end_cleanup+0x12>
 802d614:	69da      	ldr	r2, [r3, #28]
 802d616:	3a01      	subs	r2, #1
 802d618:	61da      	str	r2, [r3, #28]
 802d61a:	2a00      	cmp	r2, #0
 802d61c:	d1db      	bne.n	802d5d6 <__gnu_end_cleanup+0x16>
 802d61e:	699a      	ldr	r2, [r3, #24]
 802d620:	6082      	str	r2, [r0, #8]
 802d622:	2200      	movs	r2, #0
 802d624:	619a      	str	r2, [r3, #24]
 802d626:	f103 0020 	add.w	r0, r3, #32
 802d62a:	bd08      	pop	{r3, pc}
 802d62c:	f7ff fdbe 	bl	802d1ac <_ZSt9terminatev>

0802d630 <_ZN9__gnu_cxx20recursive_init_errorD1Ev>:
 802d630:	b510      	push	{r4, lr}
 802d632:	4b03      	ldr	r3, [pc, #12]	; (802d640 <_ZN9__gnu_cxx20recursive_init_errorD1Ev+0x10>)
 802d634:	6003      	str	r3, [r0, #0]
 802d636:	4604      	mov	r4, r0
 802d638:	f000 fd04 	bl	802e044 <_ZNSt9exceptionD1Ev>
 802d63c:	4620      	mov	r0, r4
 802d63e:	bd10      	pop	{r4, pc}
 802d640:	08034bc4 	.word	0x08034bc4

0802d644 <_ZN9__gnu_cxx20recursive_init_errorD0Ev>:
 802d644:	b510      	push	{r4, lr}
 802d646:	4b05      	ldr	r3, [pc, #20]	; (802d65c <_ZN9__gnu_cxx20recursive_init_errorD0Ev+0x18>)
 802d648:	6003      	str	r3, [r0, #0]
 802d64a:	4604      	mov	r4, r0
 802d64c:	f000 fcfa 	bl	802e044 <_ZNSt9exceptionD1Ev>
 802d650:	4620      	mov	r0, r4
 802d652:	2104      	movs	r1, #4
 802d654:	f7ff fd72 	bl	802d13c <_ZdlPvj>
 802d658:	4620      	mov	r0, r4
 802d65a:	bd10      	pop	{r4, pc}
 802d65c:	08034bc4 	.word	0x08034bc4

0802d660 <__cxa_get_globals_fast>:
 802d660:	4800      	ldr	r0, [pc, #0]	; (802d664 <__cxa_get_globals_fast+0x4>)
 802d662:	4770      	bx	lr
 802d664:	20012920 	.word	0x20012920

0802d668 <__cxa_get_globals>:
 802d668:	4800      	ldr	r0, [pc, #0]	; (802d66c <__cxa_get_globals+0x4>)
 802d66a:	4770      	bx	lr
 802d66c:	20012920 	.word	0x20012920

0802d670 <_ZL28read_encoded_value_with_basehjPKhPj>:
 802d670:	2850      	cmp	r0, #80	; 0x50
 802d672:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d674:	d01c      	beq.n	802d6b0 <_ZL28read_encoded_value_with_basehjPKhPj+0x40>
 802d676:	f000 040f 	and.w	r4, r0, #15
 802d67a:	2c0c      	cmp	r4, #12
 802d67c:	d856      	bhi.n	802d72c <_ZL28read_encoded_value_with_basehjPKhPj+0xbc>
 802d67e:	e8df f004 	tbb	[pc, r4]
 802d682:	4107      	.short	0x4107
 802d684:	551f0751 	.word	0x551f0751
 802d688:	27555555 	.word	0x27555555
 802d68c:	0723      	.short	0x0723
 802d68e:	1f          	.byte	0x1f
 802d68f:	00          	.byte	0x00
 802d690:	4614      	mov	r4, r2
 802d692:	f854 5b04 	ldr.w	r5, [r4], #4
 802d696:	b145      	cbz	r5, 802d6aa <_ZL28read_encoded_value_with_basehjPKhPj+0x3a>
 802d698:	f000 0670 	and.w	r6, r0, #112	; 0x70
 802d69c:	2e10      	cmp	r6, #16
 802d69e:	bf08      	it	eq
 802d6a0:	4611      	moveq	r1, r2
 802d6a2:	440d      	add	r5, r1
 802d6a4:	0602      	lsls	r2, r0, #24
 802d6a6:	bf48      	it	mi
 802d6a8:	682d      	ldrmi	r5, [r5, #0]
 802d6aa:	601d      	str	r5, [r3, #0]
 802d6ac:	4620      	mov	r0, r4
 802d6ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802d6b0:	3203      	adds	r2, #3
 802d6b2:	f022 0403 	bic.w	r4, r2, #3
 802d6b6:	f854 5b04 	ldr.w	r5, [r4], #4
 802d6ba:	601d      	str	r5, [r3, #0]
 802d6bc:	4620      	mov	r0, r4
 802d6be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802d6c0:	4614      	mov	r4, r2
 802d6c2:	f854 5b08 	ldr.w	r5, [r4], #8
 802d6c6:	e7e6      	b.n	802d696 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 802d6c8:	4614      	mov	r4, r2
 802d6ca:	f934 5b02 	ldrsh.w	r5, [r4], #2
 802d6ce:	e7e2      	b.n	802d696 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 802d6d0:	2500      	movs	r5, #0
 802d6d2:	462f      	mov	r7, r5
 802d6d4:	4614      	mov	r4, r2
 802d6d6:	f814 cb01 	ldrb.w	ip, [r4], #1
 802d6da:	f00c 067f 	and.w	r6, ip, #127	; 0x7f
 802d6de:	40be      	lsls	r6, r7
 802d6e0:	f01c 0f80 	tst.w	ip, #128	; 0x80
 802d6e4:	ea45 0506 	orr.w	r5, r5, r6
 802d6e8:	f107 0707 	add.w	r7, r7, #7
 802d6ec:	d1f3      	bne.n	802d6d6 <_ZL28read_encoded_value_with_basehjPKhPj+0x66>
 802d6ee:	2f1f      	cmp	r7, #31
 802d6f0:	d8d1      	bhi.n	802d696 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 802d6f2:	f01c 0f40 	tst.w	ip, #64	; 0x40
 802d6f6:	d0ce      	beq.n	802d696 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 802d6f8:	f04f 36ff 	mov.w	r6, #4294967295
 802d6fc:	fa06 f707 	lsl.w	r7, r6, r7
 802d700:	433d      	orrs	r5, r7
 802d702:	e7c9      	b.n	802d698 <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
 802d704:	2500      	movs	r5, #0
 802d706:	462f      	mov	r7, r5
 802d708:	4614      	mov	r4, r2
 802d70a:	f814 cb01 	ldrb.w	ip, [r4], #1
 802d70e:	f00c 067f 	and.w	r6, ip, #127	; 0x7f
 802d712:	40be      	lsls	r6, r7
 802d714:	f01c 0f80 	tst.w	ip, #128	; 0x80
 802d718:	ea45 0506 	orr.w	r5, r5, r6
 802d71c:	f107 0707 	add.w	r7, r7, #7
 802d720:	d1f3      	bne.n	802d70a <_ZL28read_encoded_value_with_basehjPKhPj+0x9a>
 802d722:	e7b8      	b.n	802d696 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 802d724:	4614      	mov	r4, r2
 802d726:	f834 5b02 	ldrh.w	r5, [r4], #2
 802d72a:	e7b4      	b.n	802d696 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 802d72c:	f000 fdcc 	bl	802e2c8 <abort>

0802d730 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>:
 802d730:	f000 0070 	and.w	r0, r0, #112	; 0x70
 802d734:	2820      	cmp	r0, #32
 802d736:	d011      	beq.n	802d75c <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x2c>
 802d738:	d90b      	bls.n	802d752 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x22>
 802d73a:	2840      	cmp	r0, #64	; 0x40
 802d73c:	d006      	beq.n	802d74c <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x1c>
 802d73e:	2850      	cmp	r0, #80	; 0x50
 802d740:	d00a      	beq.n	802d758 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x28>
 802d742:	2830      	cmp	r0, #48	; 0x30
 802d744:	d10d      	bne.n	802d762 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x32>
 802d746:	4608      	mov	r0, r1
 802d748:	f7db b814 	b.w	8008774 <_Unwind_GetDataRelBase>
 802d74c:	4608      	mov	r0, r1
 802d74e:	f7db b801 	b.w	8008754 <_Unwind_GetRegionStart>
 802d752:	b108      	cbz	r0, 802d758 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x28>
 802d754:	2810      	cmp	r0, #16
 802d756:	d104      	bne.n	802d762 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x32>
 802d758:	2000      	movs	r0, #0
 802d75a:	4770      	bx	lr
 802d75c:	4608      	mov	r0, r1
 802d75e:	f7db b80d 	b.w	800877c <_Unwind_GetTextRelBase>
 802d762:	b508      	push	{r3, lr}
 802d764:	f000 fdb0 	bl	802e2c8 <abort>

0802d768 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 802d768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d76a:	460c      	mov	r4, r1
 802d76c:	4615      	mov	r5, r2
 802d76e:	4607      	mov	r7, r0
 802d770:	b108      	cbz	r0, 802d776 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
 802d772:	f7da ffef 	bl	8008754 <_Unwind_GetRegionStart>
 802d776:	6028      	str	r0, [r5, #0]
 802d778:	7826      	ldrb	r6, [r4, #0]
 802d77a:	2eff      	cmp	r6, #255	; 0xff
 802d77c:	f104 0401 	add.w	r4, r4, #1
 802d780:	d129      	bne.n	802d7d6 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x6e>
 802d782:	6068      	str	r0, [r5, #4]
 802d784:	7823      	ldrb	r3, [r4, #0]
 802d786:	752b      	strb	r3, [r5, #20]
 802d788:	2bff      	cmp	r3, #255	; 0xff
 802d78a:	f104 0001 	add.w	r0, r4, #1
 802d78e:	d032      	beq.n	802d7f6 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x8e>
 802d790:	2310      	movs	r3, #16
 802d792:	2400      	movs	r4, #0
 802d794:	752b      	strb	r3, [r5, #20]
 802d796:	4622      	mov	r2, r4
 802d798:	f810 1b01 	ldrb.w	r1, [r0], #1
 802d79c:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 802d7a0:	4093      	lsls	r3, r2
 802d7a2:	0609      	lsls	r1, r1, #24
 802d7a4:	ea44 0403 	orr.w	r4, r4, r3
 802d7a8:	f102 0207 	add.w	r2, r2, #7
 802d7ac:	d4f4      	bmi.n	802d798 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x30>
 802d7ae:	4404      	add	r4, r0
 802d7b0:	60ec      	str	r4, [r5, #12]
 802d7b2:	7803      	ldrb	r3, [r0, #0]
 802d7b4:	756b      	strb	r3, [r5, #21]
 802d7b6:	2400      	movs	r4, #0
 802d7b8:	3001      	adds	r0, #1
 802d7ba:	4622      	mov	r2, r4
 802d7bc:	f810 1b01 	ldrb.w	r1, [r0], #1
 802d7c0:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 802d7c4:	4093      	lsls	r3, r2
 802d7c6:	431c      	orrs	r4, r3
 802d7c8:	060b      	lsls	r3, r1, #24
 802d7ca:	f102 0207 	add.w	r2, r2, #7
 802d7ce:	d4f5      	bmi.n	802d7bc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x54>
 802d7d0:	4404      	add	r4, r0
 802d7d2:	612c      	str	r4, [r5, #16]
 802d7d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802d7d6:	4639      	mov	r1, r7
 802d7d8:	4630      	mov	r0, r6
 802d7da:	f7ff ffa9 	bl	802d730 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 802d7de:	4622      	mov	r2, r4
 802d7e0:	4601      	mov	r1, r0
 802d7e2:	1d2b      	adds	r3, r5, #4
 802d7e4:	4630      	mov	r0, r6
 802d7e6:	f7ff ff43 	bl	802d670 <_ZL28read_encoded_value_with_basehjPKhPj>
 802d7ea:	4604      	mov	r4, r0
 802d7ec:	1c60      	adds	r0, r4, #1
 802d7ee:	7823      	ldrb	r3, [r4, #0]
 802d7f0:	752b      	strb	r3, [r5, #20]
 802d7f2:	2bff      	cmp	r3, #255	; 0xff
 802d7f4:	d1cc      	bne.n	802d790 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x28>
 802d7f6:	2300      	movs	r3, #0
 802d7f8:	60eb      	str	r3, [r5, #12]
 802d7fa:	e7da      	b.n	802d7b2 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x4a>

0802d7fc <__gxx_personality_v0>:
 802d7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d800:	f000 0403 	and.w	r4, r0, #3
 802d804:	b099      	sub	sp, #100	; 0x64
 802d806:	2300      	movs	r3, #0
 802d808:	2c01      	cmp	r4, #1
 802d80a:	4688      	mov	r8, r1
 802d80c:	4617      	mov	r7, r2
 802d80e:	930c      	str	r3, [sp, #48]	; 0x30
 802d810:	f000 8096 	beq.w	802d940 <__gxx_personality_v0+0x144>
 802d814:	d30d      	bcc.n	802d832 <__gxx_personality_v0+0x36>
 802d816:	2c02      	cmp	r4, #2
 802d818:	f040 825f 	bne.w	802dcda <__gxx_personality_v0+0x4de>
 802d81c:	4639      	mov	r1, r7
 802d81e:	4640      	mov	r0, r8
 802d820:	f7da ff84 	bl	800872c <__gnu_unwind_frame>
 802d824:	2800      	cmp	r0, #0
 802d826:	f000 809b 	beq.w	802d960 <__gxx_personality_v0+0x164>
 802d82a:	2009      	movs	r0, #9
 802d82c:	b019      	add	sp, #100	; 0x64
 802d82e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d832:	0702      	lsls	r2, r0, #28
 802d834:	d4f2      	bmi.n	802d81c <__gxx_personality_v0+0x20>
 802d836:	2301      	movs	r3, #1
 802d838:	9304      	str	r3, [sp, #16]
 802d83a:	aa18      	add	r2, sp, #96	; 0x60
 802d83c:	2300      	movs	r3, #0
 802d83e:	f842 8d2c 	str.w	r8, [r2, #-44]!
 802d842:	4619      	mov	r1, r3
 802d844:	9200      	str	r2, [sp, #0]
 802d846:	4638      	mov	r0, r7
 802d848:	220c      	movs	r2, #12
 802d84a:	f7da f9ff 	bl	8007c4c <_Unwind_VRS_Set>
 802d84e:	4638      	mov	r0, r7
 802d850:	f7da ff86 	bl	8008760 <_Unwind_GetLanguageSpecificData>
 802d854:	9005      	str	r0, [sp, #20]
 802d856:	2800      	cmp	r0, #0
 802d858:	d0e0      	beq.n	802d81c <__gxx_personality_v0+0x20>
 802d85a:	ab12      	add	r3, sp, #72	; 0x48
 802d85c:	461a      	mov	r2, r3
 802d85e:	9905      	ldr	r1, [sp, #20]
 802d860:	9306      	str	r3, [sp, #24]
 802d862:	4638      	mov	r0, r7
 802d864:	f7ff ff80 	bl	802d768 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 802d868:	4605      	mov	r5, r0
 802d86a:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 802d86e:	28ff      	cmp	r0, #255	; 0xff
 802d870:	f000 80e5 	beq.w	802da3e <__gxx_personality_v0+0x242>
 802d874:	4639      	mov	r1, r7
 802d876:	f7ff ff5b 	bl	802d730 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 802d87a:	4604      	mov	r4, r0
 802d87c:	2300      	movs	r3, #0
 802d87e:	f10d 0b44 	add.w	fp, sp, #68	; 0x44
 802d882:	4619      	mov	r1, r3
 802d884:	f8cd b000 	str.w	fp, [sp]
 802d888:	220f      	movs	r2, #15
 802d88a:	4638      	mov	r0, r7
 802d88c:	9414      	str	r4, [sp, #80]	; 0x50
 802d88e:	f7da f9bb 	bl	8007c08 <_Unwind_VRS_Get>
 802d892:	9e11      	ldr	r6, [sp, #68]	; 0x44
 802d894:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802d896:	f026 0601 	bic.w	r6, r6, #1
 802d89a:	429d      	cmp	r5, r3
 802d89c:	f106 36ff 	add.w	r6, r6, #4294967295
 802d8a0:	f080 80d4 	bcs.w	802da4c <__gxx_personality_v0+0x250>
 802d8a4:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 802d8a8:	f10d 0940 	add.w	r9, sp, #64	; 0x40
 802d8ac:	f89d 405d 	ldrb.w	r4, [sp, #93]	; 0x5d
 802d8b0:	2cff      	cmp	r4, #255	; 0xff
 802d8b2:	f04f 0100 	mov.w	r1, #0
 802d8b6:	d003      	beq.n	802d8c0 <__gxx_personality_v0+0xc4>
 802d8b8:	4620      	mov	r0, r4
 802d8ba:	f7ff ff39 	bl	802d730 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 802d8be:	4601      	mov	r1, r0
 802d8c0:	462a      	mov	r2, r5
 802d8c2:	4620      	mov	r0, r4
 802d8c4:	4653      	mov	r3, sl
 802d8c6:	f7ff fed3 	bl	802d670 <_ZL28read_encoded_value_with_basehjPKhPj>
 802d8ca:	f89d 405d 	ldrb.w	r4, [sp, #93]	; 0x5d
 802d8ce:	2cff      	cmp	r4, #255	; 0xff
 802d8d0:	4605      	mov	r5, r0
 802d8d2:	f04f 0100 	mov.w	r1, #0
 802d8d6:	d003      	beq.n	802d8e0 <__gxx_personality_v0+0xe4>
 802d8d8:	4620      	mov	r0, r4
 802d8da:	f7ff ff29 	bl	802d730 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 802d8de:	4601      	mov	r1, r0
 802d8e0:	462a      	mov	r2, r5
 802d8e2:	4620      	mov	r0, r4
 802d8e4:	464b      	mov	r3, r9
 802d8e6:	f7ff fec3 	bl	802d670 <_ZL28read_encoded_value_with_basehjPKhPj>
 802d8ea:	f89d 405d 	ldrb.w	r4, [sp, #93]	; 0x5d
 802d8ee:	2cff      	cmp	r4, #255	; 0xff
 802d8f0:	4605      	mov	r5, r0
 802d8f2:	f04f 0100 	mov.w	r1, #0
 802d8f6:	d003      	beq.n	802d900 <__gxx_personality_v0+0x104>
 802d8f8:	4620      	mov	r0, r4
 802d8fa:	f7ff ff19 	bl	802d730 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 802d8fe:	4601      	mov	r1, r0
 802d900:	462a      	mov	r2, r5
 802d902:	4620      	mov	r0, r4
 802d904:	465b      	mov	r3, fp
 802d906:	f7ff feb3 	bl	802d670 <_ZL28read_encoded_value_with_basehjPKhPj>
 802d90a:	2400      	movs	r4, #0
 802d90c:	4605      	mov	r5, r0
 802d90e:	4621      	mov	r1, r4
 802d910:	f815 2b01 	ldrb.w	r2, [r5], #1
 802d914:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 802d918:	408b      	lsls	r3, r1
 802d91a:	431c      	orrs	r4, r3
 802d91c:	0613      	lsls	r3, r2, #24
 802d91e:	f101 0107 	add.w	r1, r1, #7
 802d922:	d4f5      	bmi.n	802d910 <__gxx_personality_v0+0x114>
 802d924:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802d926:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802d928:	4413      	add	r3, r2
 802d92a:	42b3      	cmp	r3, r6
 802d92c:	d91f      	bls.n	802d96e <__gxx_personality_v0+0x172>
 802d92e:	9b04      	ldr	r3, [sp, #16]
 802d930:	07db      	lsls	r3, r3, #31
 802d932:	f100 8091 	bmi.w	802da58 <__gxx_personality_v0+0x25c>
 802d936:	9b04      	ldr	r3, [sp, #16]
 802d938:	071c      	lsls	r4, r3, #28
 802d93a:	d515      	bpl.n	802d968 <__gxx_personality_v0+0x16c>
 802d93c:	f7ff fc36 	bl	802d1ac <_ZSt9terminatev>
 802d940:	f010 0408 	ands.w	r4, r0, #8
 802d944:	d01c      	beq.n	802d980 <__gxx_personality_v0+0x184>
 802d946:	aa18      	add	r2, sp, #96	; 0x60
 802d948:	f044 0402 	orr.w	r4, r4, #2
 802d94c:	f842 1d2c 	str.w	r1, [r2, #-44]!
 802d950:	4638      	mov	r0, r7
 802d952:	9200      	str	r2, [sp, #0]
 802d954:	4619      	mov	r1, r3
 802d956:	220c      	movs	r2, #12
 802d958:	9404      	str	r4, [sp, #16]
 802d95a:	f7da f977 	bl	8007c4c <_Unwind_VRS_Set>
 802d95e:	e776      	b.n	802d84e <__gxx_personality_v0+0x52>
 802d960:	2008      	movs	r0, #8
 802d962:	b019      	add	sp, #100	; 0x64
 802d964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d968:	4640      	mov	r0, r8
 802d96a:	f7ff fd1b 	bl	802d3a4 <__cxa_call_terminate>
 802d96e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802d970:	4413      	add	r3, r2
 802d972:	42b3      	cmp	r3, r6
 802d974:	f200 8088 	bhi.w	802da88 <__gxx_personality_v0+0x28c>
 802d978:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802d97a:	42ab      	cmp	r3, r5
 802d97c:	d896      	bhi.n	802d8ac <__gxx_personality_v0+0xb0>
 802d97e:	e7d6      	b.n	802d92e <__gxx_personality_v0+0x132>
 802d980:	ab12      	add	r3, sp, #72	; 0x48
 802d982:	9300      	str	r3, [sp, #0]
 802d984:	9306      	str	r3, [sp, #24]
 802d986:	220d      	movs	r2, #13
 802d988:	4623      	mov	r3, r4
 802d98a:	4621      	mov	r1, r4
 802d98c:	4638      	mov	r0, r7
 802d98e:	f8d8 5020 	ldr.w	r5, [r8, #32]
 802d992:	f7da f939 	bl	8007c08 <_Unwind_VRS_Get>
 802d996:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802d998:	429d      	cmp	r5, r3
 802d99a:	d002      	beq.n	802d9a2 <__gxx_personality_v0+0x1a6>
 802d99c:	2302      	movs	r3, #2
 802d99e:	9304      	str	r3, [sp, #16]
 802d9a0:	e74b      	b.n	802d83a <__gxx_personality_v0+0x3e>
 802d9a2:	aa18      	add	r2, sp, #96	; 0x60
 802d9a4:	4623      	mov	r3, r4
 802d9a6:	f842 8d2c 	str.w	r8, [r2, #-44]!
 802d9aa:	4621      	mov	r1, r4
 802d9ac:	9200      	str	r2, [sp, #0]
 802d9ae:	4638      	mov	r0, r7
 802d9b0:	220c      	movs	r2, #12
 802d9b2:	f7da f94b 	bl	8007c4c <_Unwind_VRS_Set>
 802d9b6:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 802d9ba:	9303      	str	r3, [sp, #12]
 802d9bc:	2b00      	cmp	r3, #0
 802d9be:	d0d3      	beq.n	802d968 <__gxx_personality_v0+0x16c>
 802d9c0:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 802d9c4:	461a      	mov	r2, r3
 802d9c6:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 802d9ca:	9305      	str	r3, [sp, #20]
 802d9cc:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 802d9d0:	f10d 0940 	add.w	r9, sp, #64	; 0x40
 802d9d4:	4613      	mov	r3, r2
 802d9d6:	2b00      	cmp	r3, #0
 802d9d8:	461c      	mov	r4, r3
 802d9da:	f2c0 8127 	blt.w	802dc2c <__gxx_personality_v0+0x430>
 802d9de:	2503      	movs	r5, #3
 802d9e0:	a918      	add	r1, sp, #96	; 0x60
 802d9e2:	2300      	movs	r3, #0
 802d9e4:	f841 8d28 	str.w	r8, [r1, #-40]!
 802d9e8:	461a      	mov	r2, r3
 802d9ea:	9100      	str	r1, [sp, #0]
 802d9ec:	4638      	mov	r0, r7
 802d9ee:	4619      	mov	r1, r3
 802d9f0:	f7da f92c 	bl	8007c4c <_Unwind_VRS_Set>
 802d9f4:	2300      	movs	r3, #0
 802d9f6:	4619      	mov	r1, r3
 802d9f8:	2201      	movs	r2, #1
 802d9fa:	f8cd a000 	str.w	sl, [sp]
 802d9fe:	4638      	mov	r0, r7
 802da00:	940f      	str	r4, [sp, #60]	; 0x3c
 802da02:	f7da f923 	bl	8007c4c <_Unwind_VRS_Set>
 802da06:	2300      	movs	r3, #0
 802da08:	4619      	mov	r1, r3
 802da0a:	220f      	movs	r2, #15
 802da0c:	f8cd 9000 	str.w	r9, [sp]
 802da10:	4638      	mov	r0, r7
 802da12:	f7da f8f9 	bl	8007c08 <_Unwind_VRS_Get>
 802da16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802da18:	9a03      	ldr	r2, [sp, #12]
 802da1a:	f8cd 9000 	str.w	r9, [sp]
 802da1e:	f003 0401 	and.w	r4, r3, #1
 802da22:	2300      	movs	r3, #0
 802da24:	4314      	orrs	r4, r2
 802da26:	4638      	mov	r0, r7
 802da28:	4619      	mov	r1, r3
 802da2a:	220f      	movs	r2, #15
 802da2c:	9410      	str	r4, [sp, #64]	; 0x40
 802da2e:	f7da f90d 	bl	8007c4c <_Unwind_VRS_Set>
 802da32:	2d02      	cmp	r5, #2
 802da34:	d005      	beq.n	802da42 <__gxx_personality_v0+0x246>
 802da36:	2007      	movs	r0, #7
 802da38:	b019      	add	sp, #100	; 0x64
 802da3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802da3e:	2400      	movs	r4, #0
 802da40:	e71c      	b.n	802d87c <__gxx_personality_v0+0x80>
 802da42:	4640      	mov	r0, r8
 802da44:	f7ff fd8a 	bl	802d55c <__cxa_begin_cleanup>
 802da48:	2007      	movs	r0, #7
 802da4a:	e6ef      	b.n	802d82c <__gxx_personality_v0+0x30>
 802da4c:	9b04      	ldr	r3, [sp, #16]
 802da4e:	07d9      	lsls	r1, r3, #31
 802da50:	f57f af71 	bpl.w	802d936 <__gxx_personality_v0+0x13a>
 802da54:	f10d 0940 	add.w	r9, sp, #64	; 0x40
 802da58:	2400      	movs	r4, #0
 802da5a:	9403      	str	r4, [sp, #12]
 802da5c:	2300      	movs	r3, #0
 802da5e:	4619      	mov	r1, r3
 802da60:	220d      	movs	r2, #13
 802da62:	f8cd 9000 	str.w	r9, [sp]
 802da66:	4638      	mov	r0, r7
 802da68:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802da6a:	f7da f8cd 	bl	8007c08 <_Unwind_VRS_Get>
 802da6e:	9a05      	ldr	r2, [sp, #20]
 802da70:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802da72:	f8c8 202c 	str.w	r2, [r8, #44]	; 0x2c
 802da76:	9a03      	ldr	r2, [sp, #12]
 802da78:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
 802da7c:	e9c8 5409 	strd	r5, r4, [r8, #36]	; 0x24
 802da80:	f8c8 3020 	str.w	r3, [r8, #32]
 802da84:	2006      	movs	r0, #6
 802da86:	e6d1      	b.n	802d82c <__gxx_personality_v0+0x30>
 802da88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802da8a:	2b00      	cmp	r3, #0
 802da8c:	f43f aec6 	beq.w	802d81c <__gxx_personality_v0+0x20>
 802da90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802da92:	189a      	adds	r2, r3, r2
 802da94:	9203      	str	r2, [sp, #12]
 802da96:	2c00      	cmp	r4, #0
 802da98:	f000 80f0 	beq.w	802dc7c <__gxx_personality_v0+0x480>
 802da9c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802da9e:	3c01      	subs	r4, #1
 802daa0:	4423      	add	r3, r4
 802daa2:	2a00      	cmp	r2, #0
 802daa4:	f43f aeba 	beq.w	802d81c <__gxx_personality_v0+0x20>
 802daa8:	2b00      	cmp	r3, #0
 802daaa:	f000 80f8 	beq.w	802dc9e <__gxx_personality_v0+0x4a2>
 802daae:	9a04      	ldr	r2, [sp, #16]
 802dab0:	f012 0208 	ands.w	r2, r2, #8
 802dab4:	9209      	str	r2, [sp, #36]	; 0x24
 802dab6:	f000 8103 	beq.w	802dcc0 <__gxx_personality_v0+0x4c4>
 802daba:	2147      	movs	r1, #71	; 0x47
 802dabc:	224e      	movs	r2, #78	; 0x4e
 802dabe:	f888 1000 	strb.w	r1, [r8]
 802dac2:	f888 2001 	strb.w	r2, [r8, #1]
 802dac6:	2155      	movs	r1, #85	; 0x55
 802dac8:	2243      	movs	r2, #67	; 0x43
 802daca:	f888 1002 	strb.w	r1, [r8, #2]
 802dace:	f888 2003 	strb.w	r2, [r8, #3]
 802dad2:	2146      	movs	r1, #70	; 0x46
 802dad4:	224f      	movs	r2, #79	; 0x4f
 802dad6:	f888 1004 	strb.w	r1, [r8, #4]
 802dada:	f888 2005 	strb.w	r2, [r8, #5]
 802dade:	2152      	movs	r1, #82	; 0x52
 802dae0:	2200      	movs	r2, #0
 802dae2:	f888 1006 	strb.w	r1, [r8, #6]
 802dae6:	f888 2007 	strb.w	r2, [r8, #7]
 802daea:	e9cd 7a0a 	strd	r7, sl, [sp, #40]	; 0x28
 802daee:	2200      	movs	r2, #0
 802daf0:	9207      	str	r2, [sp, #28]
 802daf2:	f8cd 9020 	str.w	r9, [sp, #32]
 802daf6:	2400      	movs	r4, #0
 802daf8:	4621      	mov	r1, r4
 802dafa:	e000      	b.n	802dafe <__gxx_personality_v0+0x302>
 802dafc:	462b      	mov	r3, r5
 802dafe:	461d      	mov	r5, r3
 802db00:	f815 0b01 	ldrb.w	r0, [r5], #1
 802db04:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 802db08:	408a      	lsls	r2, r1
 802db0a:	0606      	lsls	r6, r0, #24
 802db0c:	ea44 0402 	orr.w	r4, r4, r2
 802db10:	f101 0107 	add.w	r1, r1, #7
 802db14:	d4f2      	bmi.n	802dafc <__gxx_personality_v0+0x300>
 802db16:	291f      	cmp	r1, #31
 802db18:	d805      	bhi.n	802db26 <__gxx_personality_v0+0x32a>
 802db1a:	0640      	lsls	r0, r0, #25
 802db1c:	d503      	bpl.n	802db26 <__gxx_personality_v0+0x32a>
 802db1e:	2201      	movs	r2, #1
 802db20:	408a      	lsls	r2, r1
 802db22:	4252      	negs	r2, r2
 802db24:	4314      	orrs	r4, r2
 802db26:	2600      	movs	r6, #0
 802db28:	4631      	mov	r1, r6
 802db2a:	46a1      	mov	r9, r4
 802db2c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 802db30:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 802db34:	408a      	lsls	r2, r1
 802db36:	4316      	orrs	r6, r2
 802db38:	0602      	lsls	r2, r0, #24
 802db3a:	f101 0107 	add.w	r1, r1, #7
 802db3e:	d4f5      	bmi.n	802db2c <__gxx_personality_v0+0x330>
 802db40:	291f      	cmp	r1, #31
 802db42:	d805      	bhi.n	802db50 <__gxx_personality_v0+0x354>
 802db44:	0647      	lsls	r7, r0, #25
 802db46:	d503      	bpl.n	802db50 <__gxx_personality_v0+0x354>
 802db48:	2301      	movs	r3, #1
 802db4a:	408b      	lsls	r3, r1
 802db4c:	425b      	negs	r3, r3
 802db4e:	431e      	orrs	r6, r3
 802db50:	2c00      	cmp	r4, #0
 802db52:	d04c      	beq.n	802dbee <__gxx_personality_v0+0x3f2>
 802db54:	dc4e      	bgt.n	802dbf4 <__gxx_personality_v0+0x3f8>
 802db56:	f104 0a01 	add.w	sl, r4, #1
 802db5a:	ebca 728a 	rsb	r2, sl, sl, lsl #30
 802db5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802db60:	eb03 0782 	add.w	r7, r3, r2, lsl #2
 802db64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802db68:	f1b8 0f00 	cmp.w	r8, #0
 802db6c:	d001      	beq.n	802db72 <__gxx_personality_v0+0x376>
 802db6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802db70:	b12b      	cbz	r3, 802db7e <__gxx_personality_v0+0x382>
 802db72:	b351      	cbz	r1, 802dbca <__gxx_personality_v0+0x3ce>
 802db74:	2e00      	cmp	r6, #0
 802db76:	f000 808b 	beq.w	802dc90 <__gxx_personality_v0+0x494>
 802db7a:	19ab      	adds	r3, r5, r6
 802db7c:	e7bb      	b.n	802daf6 <__gxx_personality_v0+0x2fa>
 802db7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802db80:	9311      	str	r3, [sp, #68]	; 0x44
 802db82:	b929      	cbnz	r1, 802db90 <__gxx_personality_v0+0x394>
 802db84:	e091      	b.n	802dcaa <__gxx_personality_v0+0x4ae>
 802db86:	f857 1f04 	ldr.w	r1, [r7, #4]!
 802db8a:	2900      	cmp	r1, #0
 802db8c:	f000 808d 	beq.w	802dcaa <__gxx_personality_v0+0x4ae>
 802db90:	4439      	add	r1, r7
 802db92:	465b      	mov	r3, fp
 802db94:	2200      	movs	r2, #0
 802db96:	4640      	mov	r0, r8
 802db98:	f7ff fc88 	bl	802d4ac <__cxa_type_match>
 802db9c:	2800      	cmp	r0, #0
 802db9e:	d0f2      	beq.n	802db86 <__gxx_personality_v0+0x38a>
 802dba0:	e7e8      	b.n	802db74 <__gxx_personality_v0+0x378>
 802dba2:	00e2      	lsls	r2, r4, #3
 802dba4:	4252      	negs	r2, r2
 802dba6:	e9dd 1314 	ldrd	r1, r3, [sp, #80]	; 0x50
 802dbaa:	441a      	add	r2, r3
 802dbac:	9b08      	ldr	r3, [sp, #32]
 802dbae:	f7ff fd5f 	bl	802d670 <_ZL28read_encoded_value_with_basehjPKhPj>
 802dbb2:	9910      	ldr	r1, [sp, #64]	; 0x40
 802dbb4:	b149      	cbz	r1, 802dbca <__gxx_personality_v0+0x3ce>
 802dbb6:	f1b8 0f00 	cmp.w	r8, #0
 802dbba:	d0db      	beq.n	802db74 <__gxx_personality_v0+0x378>
 802dbbc:	ab0c      	add	r3, sp, #48	; 0x30
 802dbbe:	2200      	movs	r2, #0
 802dbc0:	4640      	mov	r0, r8
 802dbc2:	f7ff fc73 	bl	802d4ac <__cxa_type_match>
 802dbc6:	2800      	cmp	r0, #0
 802dbc8:	d0d4      	beq.n	802db74 <__gxx_personality_v0+0x378>
 802dbca:	9b04      	ldr	r3, [sp, #16]
 802dbcc:	07d8      	lsls	r0, r3, #31
 802dbce:	464a      	mov	r2, r9
 802dbd0:	e9dd 7a0a 	ldrd	r7, sl, [sp, #40]	; 0x28
 802dbd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802dbd8:	f53f af40 	bmi.w	802da5c <__gxx_personality_v0+0x260>
 802dbdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802dbde:	2b00      	cmp	r3, #0
 802dbe0:	f43f aef8 	beq.w	802d9d4 <__gxx_personality_v0+0x1d8>
 802dbe4:	2c00      	cmp	r4, #0
 802dbe6:	f6bf aefa 	bge.w	802d9de <__gxx_personality_v0+0x1e2>
 802dbea:	f7ff faed 	bl	802d1c8 <_ZSt10unexpectedv>
 802dbee:	2301      	movs	r3, #1
 802dbf0:	9307      	str	r3, [sp, #28]
 802dbf2:	e7bf      	b.n	802db74 <__gxx_personality_v0+0x378>
 802dbf4:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 802dbf8:	28ff      	cmp	r0, #255	; 0xff
 802dbfa:	d03b      	beq.n	802dc74 <__gxx_personality_v0+0x478>
 802dbfc:	f000 0307 	and.w	r3, r0, #7
 802dc00:	2b04      	cmp	r3, #4
 802dc02:	d86a      	bhi.n	802dcda <__gxx_personality_v0+0x4de>
 802dc04:	a201      	add	r2, pc, #4	; (adr r2, 802dc0c <__gxx_personality_v0+0x410>)
 802dc06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802dc0a:	bf00      	nop
 802dc0c:	0802dc27 	.word	0x0802dc27
 802dc10:	0802dcdb 	.word	0x0802dcdb
 802dc14:	0802dc21 	.word	0x0802dc21
 802dc18:	0802dc27 	.word	0x0802dc27
 802dc1c:	0802dba3 	.word	0x0802dba3
 802dc20:	0062      	lsls	r2, r4, #1
 802dc22:	4252      	negs	r2, r2
 802dc24:	e7bf      	b.n	802dba6 <__gxx_personality_v0+0x3aa>
 802dc26:	00a2      	lsls	r2, r4, #2
 802dc28:	4252      	negs	r2, r2
 802dc2a:	e7bc      	b.n	802dba6 <__gxx_personality_v0+0x3aa>
 802dc2c:	3301      	adds	r3, #1
 802dc2e:	461d      	mov	r5, r3
 802dc30:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 802dc34:	4638      	mov	r0, r7
 802dc36:	f7ff fd97 	bl	802d768 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 802dc3a:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 802dc3e:	28ff      	cmp	r0, #255	; 0xff
 802dc40:	d01a      	beq.n	802dc78 <__gxx_personality_v0+0x47c>
 802dc42:	4639      	mov	r1, r7
 802dc44:	f7ff fd74 	bl	802d730 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 802dc48:	ebc5 7285 	rsb	r2, r5, r5, lsl #30
 802dc4c:	0092      	lsls	r2, r2, #2
 802dc4e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802dc50:	9014      	str	r0, [sp, #80]	; 0x50
 802dc52:	58ab      	ldr	r3, [r5, r2]
 802dc54:	4415      	add	r5, r2
 802dc56:	b133      	cbz	r3, 802dc66 <__gxx_personality_v0+0x46a>
 802dc58:	462a      	mov	r2, r5
 802dc5a:	2300      	movs	r3, #0
 802dc5c:	f852 1f04 	ldr.w	r1, [r2, #4]!
 802dc60:	3301      	adds	r3, #1
 802dc62:	2900      	cmp	r1, #0
 802dc64:	d1fa      	bne.n	802dc5c <__gxx_personality_v0+0x460>
 802dc66:	2204      	movs	r2, #4
 802dc68:	e9c8 250c 	strd	r2, r5, [r8, #48]	; 0x30
 802dc6c:	e9c8 300a 	strd	r3, r0, [r8, #40]	; 0x28
 802dc70:	2503      	movs	r5, #3
 802dc72:	e6b5      	b.n	802d9e0 <__gxx_personality_v0+0x1e4>
 802dc74:	2200      	movs	r2, #0
 802dc76:	e796      	b.n	802dba6 <__gxx_personality_v0+0x3aa>
 802dc78:	2000      	movs	r0, #0
 802dc7a:	e7e5      	b.n	802dc48 <__gxx_personality_v0+0x44c>
 802dc7c:	9b03      	ldr	r3, [sp, #12]
 802dc7e:	2b00      	cmp	r3, #0
 802dc80:	f43f adcc 	beq.w	802d81c <__gxx_personality_v0+0x20>
 802dc84:	9b04      	ldr	r3, [sp, #16]
 802dc86:	07da      	lsls	r2, r3, #31
 802dc88:	f53f adc8 	bmi.w	802d81c <__gxx_personality_v0+0x20>
 802dc8c:	2502      	movs	r5, #2
 802dc8e:	e6a7      	b.n	802d9e0 <__gxx_personality_v0+0x1e4>
 802dc90:	e9dd 3907 	ldrd	r3, r9, [sp, #28]
 802dc94:	e9dd 7a0a 	ldrd	r7, sl, [sp, #40]	; 0x28
 802dc98:	2b00      	cmp	r3, #0
 802dc9a:	f43f adbf 	beq.w	802d81c <__gxx_personality_v0+0x20>
 802dc9e:	9b04      	ldr	r3, [sp, #16]
 802dca0:	07dd      	lsls	r5, r3, #31
 802dca2:	f53f adbb 	bmi.w	802d81c <__gxx_personality_v0+0x20>
 802dca6:	2400      	movs	r4, #0
 802dca8:	e7f0      	b.n	802dc8c <__gxx_personality_v0+0x490>
 802dcaa:	9b04      	ldr	r3, [sp, #16]
 802dcac:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802dcae:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802dcb2:	07de      	lsls	r6, r3, #31
 802dcb4:	4655      	mov	r5, sl
 802dcb6:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 802dcba:	f53f aecf 	bmi.w	802da5c <__gxx_personality_v0+0x260>
 802dcbe:	e7b7      	b.n	802dc30 <__gxx_personality_v0+0x434>
 802dcc0:	f898 2007 	ldrb.w	r2, [r8, #7]
 802dcc4:	2a01      	cmp	r2, #1
 802dcc6:	bf0c      	ite	eq
 802dcc8:	f858 2c20 	ldreq.w	r2, [r8, #-32]
 802dccc:	f108 0258 	addne.w	r2, r8, #88	; 0x58
 802dcd0:	920c      	str	r2, [sp, #48]	; 0x30
 802dcd2:	e70a      	b.n	802daea <__gxx_personality_v0+0x2ee>
 802dcd4:	f000 f8a6 	bl	802de24 <__cxa_begin_catch>
 802dcd8:	e630      	b.n	802d93c <__gxx_personality_v0+0x140>
 802dcda:	f000 faf5 	bl	802e2c8 <abort>
 802dcde:	bf00      	nop

0802dce0 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
 802dce0:	2801      	cmp	r0, #1
 802dce2:	b510      	push	{r4, lr}
 802dce4:	d81a      	bhi.n	802dd1c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3c>
 802dce6:	f3bf 8f5b 	dmb	ish
 802dcea:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
 802dcee:	e853 2f00 	ldrex	r2, [r3]
 802dcf2:	3a01      	subs	r2, #1
 802dcf4:	e843 2000 	strex	r0, r2, [r3]
 802dcf8:	2800      	cmp	r0, #0
 802dcfa:	d1f8      	bne.n	802dcee <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
 802dcfc:	f3bf 8f5b 	dmb	ish
 802dd00:	b95a      	cbnz	r2, 802dd1a <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3a>
 802dd02:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 802dd06:	f101 0458 	add.w	r4, r1, #88	; 0x58
 802dd0a:	b10b      	cbz	r3, 802dd10 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x30>
 802dd0c:	4620      	mov	r0, r4
 802dd0e:	4798      	blx	r3
 802dd10:	4620      	mov	r0, r4
 802dd12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802dd16:	f7ff bb03 	b.w	802d320 <__cxa_free_exception>
 802dd1a:	bd10      	pop	{r4, pc}
 802dd1c:	f851 0c14 	ldr.w	r0, [r1, #-20]
 802dd20:	f7ff fa30 	bl	802d184 <_ZN10__cxxabiv111__terminateEPFvvE>

0802dd24 <__cxa_init_primary_exception>:
 802dd24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802dd26:	2500      	movs	r5, #0
 802dd28:	e940 121e 	strd	r1, r2, [r0, #-120]	; 0x78
 802dd2c:	f840 5c80 	str.w	r5, [r0, #-128]
 802dd30:	4604      	mov	r4, r0
 802dd32:	f7ff fa5b 	bl	802d1ec <_ZSt14get_unexpectedv>
 802dd36:	f844 0c70 	str.w	r0, [r4, #-112]
 802dd3a:	f7ff fa4f 	bl	802d1dc <_ZSt13get_terminatev>
 802dd3e:	2347      	movs	r3, #71	; 0x47
 802dd40:	2243      	movs	r2, #67	; 0x43
 802dd42:	274e      	movs	r7, #78	; 0x4e
 802dd44:	2655      	movs	r6, #85	; 0x55
 802dd46:	490c      	ldr	r1, [pc, #48]	; (802dd78 <__cxa_init_primary_exception+0x54>)
 802dd48:	f804 3c58 	strb.w	r3, [r4, #-88]
 802dd4c:	232b      	movs	r3, #43	; 0x2b
 802dd4e:	f804 5c51 	strb.w	r5, [r4, #-81]
 802dd52:	f804 7c57 	strb.w	r7, [r4, #-87]
 802dd56:	f804 6c56 	strb.w	r6, [r4, #-86]
 802dd5a:	f844 1c50 	str.w	r1, [r4, #-80]
 802dd5e:	f804 2c55 	strb.w	r2, [r4, #-85]
 802dd62:	f804 2c54 	strb.w	r2, [r4, #-84]
 802dd66:	f804 3c53 	strb.w	r3, [r4, #-83]
 802dd6a:	f804 3c52 	strb.w	r3, [r4, #-82]
 802dd6e:	f844 0c6c 	str.w	r0, [r4, #-108]
 802dd72:	f1a4 0080 	sub.w	r0, r4, #128	; 0x80
 802dd76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802dd78:	0802dce1 	.word	0x0802dce1

0802dd7c <__cxa_throw>:
 802dd7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802dd7e:	4605      	mov	r5, r0
 802dd80:	460e      	mov	r6, r1
 802dd82:	4617      	mov	r7, r2
 802dd84:	f7ff fc70 	bl	802d668 <__cxa_get_globals>
 802dd88:	6843      	ldr	r3, [r0, #4]
 802dd8a:	4604      	mov	r4, r0
 802dd8c:	3301      	adds	r3, #1
 802dd8e:	463a      	mov	r2, r7
 802dd90:	4631      	mov	r1, r6
 802dd92:	6063      	str	r3, [r4, #4]
 802dd94:	4628      	mov	r0, r5
 802dd96:	f7ff ffc5 	bl	802dd24 <__cxa_init_primary_exception>
 802dd9a:	4604      	mov	r4, r0
 802dd9c:	2301      	movs	r3, #1
 802dd9e:	f844 3b28 	str.w	r3, [r4], #40
 802dda2:	4620      	mov	r0, r4
 802dda4:	f7da fada 	bl	800835c <_Unwind_RaiseException>
 802dda8:	4620      	mov	r0, r4
 802ddaa:	f000 f83b 	bl	802de24 <__cxa_begin_catch>
 802ddae:	f7ff f9fd 	bl	802d1ac <_ZSt9terminatev>
 802ddb2:	bf00      	nop

0802ddb4 <__cxa_rethrow>:
 802ddb4:	b510      	push	{r4, lr}
 802ddb6:	f7ff fc57 	bl	802d668 <__cxa_get_globals>
 802ddba:	e9d0 4200 	ldrd	r4, r2, [r0]
 802ddbe:	3201      	adds	r2, #1
 802ddc0:	6042      	str	r2, [r0, #4]
 802ddc2:	b164      	cbz	r4, 802ddde <__cxa_rethrow+0x2a>
 802ddc4:	f894 2020 	ldrb.w	r2, [r4, #32]
 802ddc8:	2a47      	cmp	r2, #71	; 0x47
 802ddca:	d00a      	beq.n	802dde2 <__cxa_rethrow+0x2e>
 802ddcc:	2200      	movs	r2, #0
 802ddce:	6002      	str	r2, [r0, #0]
 802ddd0:	3420      	adds	r4, #32
 802ddd2:	4620      	mov	r0, r4
 802ddd4:	f7da fae6 	bl	80083a4 <_Unwind_Resume_or_Rethrow>
 802ddd8:	4620      	mov	r0, r4
 802ddda:	f000 f823 	bl	802de24 <__cxa_begin_catch>
 802ddde:	f7ff f9e5 	bl	802d1ac <_ZSt9terminatev>
 802dde2:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 802dde6:	2a4e      	cmp	r2, #78	; 0x4e
 802dde8:	d1f0      	bne.n	802ddcc <__cxa_rethrow+0x18>
 802ddea:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 802ddee:	2a55      	cmp	r2, #85	; 0x55
 802ddf0:	d1ec      	bne.n	802ddcc <__cxa_rethrow+0x18>
 802ddf2:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 802ddf6:	2a43      	cmp	r2, #67	; 0x43
 802ddf8:	d1e8      	bne.n	802ddcc <__cxa_rethrow+0x18>
 802ddfa:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 802ddfe:	2a43      	cmp	r2, #67	; 0x43
 802de00:	d1e4      	bne.n	802ddcc <__cxa_rethrow+0x18>
 802de02:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 802de06:	2a2b      	cmp	r2, #43	; 0x2b
 802de08:	d1e0      	bne.n	802ddcc <__cxa_rethrow+0x18>
 802de0a:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 802de0e:	2a2b      	cmp	r2, #43	; 0x2b
 802de10:	d1dc      	bne.n	802ddcc <__cxa_rethrow+0x18>
 802de12:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 802de16:	2a01      	cmp	r2, #1
 802de18:	d8d8      	bhi.n	802ddcc <__cxa_rethrow+0x18>
 802de1a:	6962      	ldr	r2, [r4, #20]
 802de1c:	4252      	negs	r2, r2
 802de1e:	6162      	str	r2, [r4, #20]
 802de20:	e7d6      	b.n	802ddd0 <__cxa_rethrow+0x1c>
 802de22:	bf00      	nop

0802de24 <__cxa_begin_catch>:
 802de24:	b538      	push	{r3, r4, r5, lr}
 802de26:	4604      	mov	r4, r0
 802de28:	f7ff fc1e 	bl	802d668 <__cxa_get_globals>
 802de2c:	7822      	ldrb	r2, [r4, #0]
 802de2e:	6803      	ldr	r3, [r0, #0]
 802de30:	2a47      	cmp	r2, #71	; 0x47
 802de32:	f1a4 0120 	sub.w	r1, r4, #32
 802de36:	d004      	beq.n	802de42 <__cxa_begin_catch+0x1e>
 802de38:	bb8b      	cbnz	r3, 802de9e <__cxa_begin_catch+0x7a>
 802de3a:	461c      	mov	r4, r3
 802de3c:	6001      	str	r1, [r0, #0]
 802de3e:	4620      	mov	r0, r4
 802de40:	bd38      	pop	{r3, r4, r5, pc}
 802de42:	7862      	ldrb	r2, [r4, #1]
 802de44:	2a4e      	cmp	r2, #78	; 0x4e
 802de46:	d1f7      	bne.n	802de38 <__cxa_begin_catch+0x14>
 802de48:	78a2      	ldrb	r2, [r4, #2]
 802de4a:	2a55      	cmp	r2, #85	; 0x55
 802de4c:	d1f4      	bne.n	802de38 <__cxa_begin_catch+0x14>
 802de4e:	78e2      	ldrb	r2, [r4, #3]
 802de50:	2a43      	cmp	r2, #67	; 0x43
 802de52:	d1f1      	bne.n	802de38 <__cxa_begin_catch+0x14>
 802de54:	7922      	ldrb	r2, [r4, #4]
 802de56:	2a43      	cmp	r2, #67	; 0x43
 802de58:	d1ee      	bne.n	802de38 <__cxa_begin_catch+0x14>
 802de5a:	7962      	ldrb	r2, [r4, #5]
 802de5c:	2a2b      	cmp	r2, #43	; 0x2b
 802de5e:	d1eb      	bne.n	802de38 <__cxa_begin_catch+0x14>
 802de60:	79a2      	ldrb	r2, [r4, #6]
 802de62:	2a2b      	cmp	r2, #43	; 0x2b
 802de64:	d1e8      	bne.n	802de38 <__cxa_begin_catch+0x14>
 802de66:	79e2      	ldrb	r2, [r4, #7]
 802de68:	2a01      	cmp	r2, #1
 802de6a:	d8e5      	bhi.n	802de38 <__cxa_begin_catch+0x14>
 802de6c:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 802de70:	2a00      	cmp	r2, #0
 802de72:	db11      	blt.n	802de98 <__cxa_begin_catch+0x74>
 802de74:	3201      	adds	r2, #1
 802de76:	6845      	ldr	r5, [r0, #4]
 802de78:	f844 2c0c 	str.w	r2, [r4, #-12]
 802de7c:	428b      	cmp	r3, r1
 802de7e:	f105 35ff 	add.w	r5, r5, #4294967295
 802de82:	6045      	str	r5, [r0, #4]
 802de84:	bf1c      	itt	ne
 802de86:	f844 3c10 	strne.w	r3, [r4, #-16]
 802de8a:	6001      	strne	r1, [r0, #0]
 802de8c:	4620      	mov	r0, r4
 802de8e:	6a64      	ldr	r4, [r4, #36]	; 0x24
 802de90:	f7d9 feb2 	bl	8007bf8 <_Unwind_Complete>
 802de94:	4620      	mov	r0, r4
 802de96:	bd38      	pop	{r3, r4, r5, pc}
 802de98:	f1c2 0201 	rsb	r2, r2, #1
 802de9c:	e7eb      	b.n	802de76 <__cxa_begin_catch+0x52>
 802de9e:	f7ff f985 	bl	802d1ac <_ZSt9terminatev>
 802dea2:	bf00      	nop

0802dea4 <__cxa_end_catch>:
 802dea4:	b508      	push	{r3, lr}
 802dea6:	f7ff fbdb 	bl	802d660 <__cxa_get_globals_fast>
 802deaa:	4602      	mov	r2, r0
 802deac:	6800      	ldr	r0, [r0, #0]
 802deae:	b370      	cbz	r0, 802df0e <__cxa_end_catch+0x6a>
 802deb0:	f890 3020 	ldrb.w	r3, [r0, #32]
 802deb4:	2b47      	cmp	r3, #71	; 0x47
 802deb6:	d006      	beq.n	802dec6 <__cxa_end_catch+0x22>
 802deb8:	2300      	movs	r3, #0
 802deba:	6013      	str	r3, [r2, #0]
 802debc:	3020      	adds	r0, #32
 802debe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 802dec2:	f7d9 be9b 	b.w	8007bfc <_Unwind_DeleteException>
 802dec6:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 802deca:	2b4e      	cmp	r3, #78	; 0x4e
 802decc:	d1f4      	bne.n	802deb8 <__cxa_end_catch+0x14>
 802dece:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 802ded2:	2b55      	cmp	r3, #85	; 0x55
 802ded4:	d1f0      	bne.n	802deb8 <__cxa_end_catch+0x14>
 802ded6:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 802deda:	2b43      	cmp	r3, #67	; 0x43
 802dedc:	d1ec      	bne.n	802deb8 <__cxa_end_catch+0x14>
 802dede:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 802dee2:	2b43      	cmp	r3, #67	; 0x43
 802dee4:	d1e8      	bne.n	802deb8 <__cxa_end_catch+0x14>
 802dee6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 802deea:	2b2b      	cmp	r3, #43	; 0x2b
 802deec:	d1e4      	bne.n	802deb8 <__cxa_end_catch+0x14>
 802deee:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 802def2:	2b2b      	cmp	r3, #43	; 0x2b
 802def4:	d1e0      	bne.n	802deb8 <__cxa_end_catch+0x14>
 802def6:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 802defa:	2b01      	cmp	r3, #1
 802defc:	d8dc      	bhi.n	802deb8 <__cxa_end_catch+0x14>
 802defe:	6943      	ldr	r3, [r0, #20]
 802df00:	2b00      	cmp	r3, #0
 802df02:	db05      	blt.n	802df10 <__cxa_end_catch+0x6c>
 802df04:	3b01      	subs	r3, #1
 802df06:	2b00      	cmp	r3, #0
 802df08:	d007      	beq.n	802df1a <__cxa_end_catch+0x76>
 802df0a:	db0d      	blt.n	802df28 <__cxa_end_catch+0x84>
 802df0c:	6143      	str	r3, [r0, #20]
 802df0e:	bd08      	pop	{r3, pc}
 802df10:	3301      	adds	r3, #1
 802df12:	d1fb      	bne.n	802df0c <__cxa_end_catch+0x68>
 802df14:	6901      	ldr	r1, [r0, #16]
 802df16:	6011      	str	r1, [r2, #0]
 802df18:	e7f8      	b.n	802df0c <__cxa_end_catch+0x68>
 802df1a:	6903      	ldr	r3, [r0, #16]
 802df1c:	6013      	str	r3, [r2, #0]
 802df1e:	3020      	adds	r0, #32
 802df20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 802df24:	f7d9 be6a 	b.w	8007bfc <_Unwind_DeleteException>
 802df28:	f7ff f940 	bl	802d1ac <_ZSt9terminatev>

0802df2c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 802df2c:	b510      	push	{r4, lr}
 802df2e:	4b03      	ldr	r3, [pc, #12]	; (802df3c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 802df30:	6003      	str	r3, [r0, #0]
 802df32:	4604      	mov	r4, r0
 802df34:	f000 f8d6 	bl	802e0e4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 802df38:	4620      	mov	r0, r4
 802df3a:	bd10      	pop	{r4, pc}
 802df3c:	08034c0c 	.word	0x08034c0c

0802df40 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 802df40:	b510      	push	{r4, lr}
 802df42:	4b05      	ldr	r3, [pc, #20]	; (802df58 <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
 802df44:	6003      	str	r3, [r0, #0]
 802df46:	4604      	mov	r4, r0
 802df48:	f000 f8cc 	bl	802e0e4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 802df4c:	4620      	mov	r0, r4
 802df4e:	210c      	movs	r1, #12
 802df50:	f7ff f8f4 	bl	802d13c <_ZdlPvj>
 802df54:	4620      	mov	r0, r4
 802df56:	bd10      	pop	{r4, pc}
 802df58:	08034c0c 	.word	0x08034c0c

0802df5c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 802df5c:	b570      	push	{r4, r5, r6, lr}
 802df5e:	b082      	sub	sp, #8
 802df60:	460e      	mov	r6, r1
 802df62:	9c06      	ldr	r4, [sp, #24]
 802df64:	4294      	cmp	r4, r2
 802df66:	4605      	mov	r5, r0
 802df68:	d009      	beq.n	802df7e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x22>
 802df6a:	68a8      	ldr	r0, [r5, #8]
 802df6c:	6805      	ldr	r5, [r0, #0]
 802df6e:	9406      	str	r4, [sp, #24]
 802df70:	6a2c      	ldr	r4, [r5, #32]
 802df72:	4631      	mov	r1, r6
 802df74:	46a4      	mov	ip, r4
 802df76:	b002      	add	sp, #8
 802df78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802df7c:	4760      	bx	ip
 802df7e:	4619      	mov	r1, r3
 802df80:	9201      	str	r2, [sp, #4]
 802df82:	9300      	str	r3, [sp, #0]
 802df84:	f000 f876 	bl	802e074 <_ZNKSt9type_infoeqERKS_>
 802df88:	e9dd 3200 	ldrd	r3, r2, [sp]
 802df8c:	2800      	cmp	r0, #0
 802df8e:	d0ec      	beq.n	802df6a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 802df90:	2006      	movs	r0, #6
 802df92:	b002      	add	sp, #8
 802df94:	bd70      	pop	{r4, r5, r6, pc}
 802df96:	bf00      	nop

0802df98 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 802df98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802df9c:	460e      	mov	r6, r1
 802df9e:	b081      	sub	sp, #4
 802dfa0:	4619      	mov	r1, r3
 802dfa2:	461f      	mov	r7, r3
 802dfa4:	4691      	mov	r9, r2
 802dfa6:	4683      	mov	fp, r0
 802dfa8:	e9dd 4a0a 	ldrd	r4, sl, [sp, #40]	; 0x28
 802dfac:	e9dd 850c 	ldrd	r8, r5, [sp, #48]	; 0x30
 802dfb0:	f000 f860 	bl	802e074 <_ZNKSt9type_infoeqERKS_>
 802dfb4:	b170      	cbz	r0, 802dfd4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
 802dfb6:	2e00      	cmp	r6, #0
 802dfb8:	602c      	str	r4, [r5, #0]
 802dfba:	f885 9004 	strb.w	r9, [r5, #4]
 802dfbe:	db1d      	blt.n	802dffc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x64>
 802dfc0:	4434      	add	r4, r6
 802dfc2:	45a0      	cmp	r8, r4
 802dfc4:	bf0c      	ite	eq
 802dfc6:	2406      	moveq	r4, #6
 802dfc8:	2401      	movne	r4, #1
 802dfca:	71ac      	strb	r4, [r5, #6]
 802dfcc:	2000      	movs	r0, #0
 802dfce:	b001      	add	sp, #4
 802dfd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802dfd4:	4544      	cmp	r4, r8
 802dfd6:	d016      	beq.n	802e006 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6e>
 802dfd8:	f8db 0008 	ldr.w	r0, [fp, #8]
 802dfdc:	f8d0 c000 	ldr.w	ip, [r0]
 802dfe0:	e9cd 850c 	strd	r8, r5, [sp, #48]	; 0x30
 802dfe4:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	; 0x28
 802dfe8:	f8dc 401c 	ldr.w	r4, [ip, #28]
 802dfec:	463b      	mov	r3, r7
 802dfee:	464a      	mov	r2, r9
 802dff0:	4631      	mov	r1, r6
 802dff2:	46a4      	mov	ip, r4
 802dff4:	b001      	add	sp, #4
 802dff6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802dffa:	4760      	bx	ip
 802dffc:	3602      	adds	r6, #2
 802dffe:	d1e5      	bne.n	802dfcc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 802e000:	2301      	movs	r3, #1
 802e002:	71ab      	strb	r3, [r5, #6]
 802e004:	e7e2      	b.n	802dfcc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 802e006:	4651      	mov	r1, sl
 802e008:	4658      	mov	r0, fp
 802e00a:	f000 f833 	bl	802e074 <_ZNKSt9type_infoeqERKS_>
 802e00e:	2800      	cmp	r0, #0
 802e010:	d0e2      	beq.n	802dfd8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
 802e012:	f885 9005 	strb.w	r9, [r5, #5]
 802e016:	e7d9      	b.n	802dfcc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>

0802e018 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 802e018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802e01c:	4607      	mov	r7, r0
 802e01e:	460c      	mov	r4, r1
 802e020:	4615      	mov	r5, r2
 802e022:	461e      	mov	r6, r3
 802e024:	f000 f898 	bl	802e158 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 802e028:	b108      	cbz	r0, 802e02e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x16>
 802e02a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802e02e:	68b8      	ldr	r0, [r7, #8]
 802e030:	6807      	ldr	r7, [r0, #0]
 802e032:	4621      	mov	r1, r4
 802e034:	69bc      	ldr	r4, [r7, #24]
 802e036:	4633      	mov	r3, r6
 802e038:	462a      	mov	r2, r5
 802e03a:	46a4      	mov	ip, r4
 802e03c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802e040:	4760      	bx	ip
 802e042:	bf00      	nop

0802e044 <_ZNSt9exceptionD1Ev>:
 802e044:	4770      	bx	lr
 802e046:	bf00      	nop

0802e048 <_ZNSt13bad_exceptionD1Ev>:
 802e048:	4770      	bx	lr
 802e04a:	bf00      	nop

0802e04c <_ZGTtNKSt9exception4whatEv>:
 802e04c:	4800      	ldr	r0, [pc, #0]	; (802e050 <_ZGTtNKSt9exception4whatEv+0x4>)
 802e04e:	4770      	bx	lr
 802e050:	08034c44 	.word	0x08034c44

0802e054 <_ZGTtNKSt13bad_exception4whatEv>:
 802e054:	4800      	ldr	r0, [pc, #0]	; (802e058 <_ZGTtNKSt13bad_exception4whatEv+0x4>)
 802e056:	4770      	bx	lr
 802e058:	08034c30 	.word	0x08034c30

0802e05c <_ZNSt13bad_exceptionD0Ev>:
 802e05c:	b510      	push	{r4, lr}
 802e05e:	2104      	movs	r1, #4
 802e060:	4604      	mov	r4, r0
 802e062:	f7ff f86b 	bl	802d13c <_ZdlPvj>
 802e066:	4620      	mov	r0, r4
 802e068:	bd10      	pop	{r4, pc}
 802e06a:	bf00      	nop

0802e06c <_ZNSt9type_infoD1Ev>:
 802e06c:	4770      	bx	lr
 802e06e:	bf00      	nop

0802e070 <_ZNKSt9type_info14__is_pointer_pEv>:
 802e070:	2000      	movs	r0, #0
 802e072:	4770      	bx	lr

0802e074 <_ZNKSt9type_infoeqERKS_>:
 802e074:	4281      	cmp	r1, r0
 802e076:	d00f      	beq.n	802e098 <_ZNKSt9type_infoeqERKS_+0x24>
 802e078:	b508      	push	{r3, lr}
 802e07a:	6840      	ldr	r0, [r0, #4]
 802e07c:	7803      	ldrb	r3, [r0, #0]
 802e07e:	2b2a      	cmp	r3, #42	; 0x2a
 802e080:	d00c      	beq.n	802e09c <_ZNKSt9type_infoeqERKS_+0x28>
 802e082:	6849      	ldr	r1, [r1, #4]
 802e084:	780b      	ldrb	r3, [r1, #0]
 802e086:	2b2a      	cmp	r3, #42	; 0x2a
 802e088:	bf08      	it	eq
 802e08a:	3101      	addeq	r1, #1
 802e08c:	f7d8 fe1e 	bl	8006ccc <strcmp>
 802e090:	fab0 f080 	clz	r0, r0
 802e094:	0940      	lsrs	r0, r0, #5
 802e096:	bd08      	pop	{r3, pc}
 802e098:	2001      	movs	r0, #1
 802e09a:	4770      	bx	lr
 802e09c:	2000      	movs	r0, #0
 802e09e:	bd08      	pop	{r3, pc}

0802e0a0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 802e0a0:	b570      	push	{r4, r5, r6, lr}
 802e0a2:	6803      	ldr	r3, [r0, #0]
 802e0a4:	b084      	sub	sp, #16
 802e0a6:	2400      	movs	r4, #0
 802e0a8:	699e      	ldr	r6, [r3, #24]
 802e0aa:	9400      	str	r4, [sp, #0]
 802e0ac:	2310      	movs	r3, #16
 802e0ae:	4615      	mov	r5, r2
 802e0b0:	e9cd 3402 	strd	r3, r4, [sp, #8]
 802e0b4:	6812      	ldr	r2, [r2, #0]
 802e0b6:	f88d 4004 	strb.w	r4, [sp, #4]
 802e0ba:	466b      	mov	r3, sp
 802e0bc:	47b0      	blx	r6
 802e0be:	f89d 3004 	ldrb.w	r3, [sp, #4]
 802e0c2:	f003 0306 	and.w	r3, r3, #6
 802e0c6:	2b06      	cmp	r3, #6
 802e0c8:	bf03      	ittte	eq
 802e0ca:	9b00      	ldreq	r3, [sp, #0]
 802e0cc:	602b      	streq	r3, [r5, #0]
 802e0ce:	2001      	moveq	r0, #1
 802e0d0:	4620      	movne	r0, r4
 802e0d2:	b004      	add	sp, #16
 802e0d4:	bd70      	pop	{r4, r5, r6, pc}
 802e0d6:	bf00      	nop

0802e0d8 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 802e0d8:	9800      	ldr	r0, [sp, #0]
 802e0da:	4290      	cmp	r0, r2
 802e0dc:	bf0c      	ite	eq
 802e0de:	2006      	moveq	r0, #6
 802e0e0:	2001      	movne	r0, #1
 802e0e2:	4770      	bx	lr

0802e0e4 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 802e0e4:	b510      	push	{r4, lr}
 802e0e6:	4b03      	ldr	r3, [pc, #12]	; (802e0f4 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 802e0e8:	6003      	str	r3, [r0, #0]
 802e0ea:	4604      	mov	r4, r0
 802e0ec:	f7ff ffbe 	bl	802e06c <_ZNSt9type_infoD1Ev>
 802e0f0:	4620      	mov	r0, r4
 802e0f2:	bd10      	pop	{r4, pc}
 802e0f4:	08034d44 	.word	0x08034d44

0802e0f8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 802e0f8:	b510      	push	{r4, lr}
 802e0fa:	4b05      	ldr	r3, [pc, #20]	; (802e110 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
 802e0fc:	6003      	str	r3, [r0, #0]
 802e0fe:	4604      	mov	r4, r0
 802e100:	f7ff ffb4 	bl	802e06c <_ZNSt9type_infoD1Ev>
 802e104:	4620      	mov	r0, r4
 802e106:	2108      	movs	r1, #8
 802e108:	f7ff f818 	bl	802d13c <_ZdlPvj>
 802e10c:	4620      	mov	r0, r4
 802e10e:	bd10      	pop	{r4, pc}
 802e110:	08034d44 	.word	0x08034d44

0802e114 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 802e114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802e118:	e9dd 1408 	ldrd	r1, r4, [sp, #32]
 802e11c:	9d06      	ldr	r5, [sp, #24]
 802e11e:	428d      	cmp	r5, r1
 802e120:	4690      	mov	r8, r2
 802e122:	461f      	mov	r7, r3
 802e124:	4606      	mov	r6, r0
 802e126:	d00c      	beq.n	802e142 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>
 802e128:	4639      	mov	r1, r7
 802e12a:	4630      	mov	r0, r6
 802e12c:	f7ff ffa2 	bl	802e074 <_ZNKSt9type_infoeqERKS_>
 802e130:	b120      	cbz	r0, 802e13c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x28>
 802e132:	2301      	movs	r3, #1
 802e134:	6025      	str	r5, [r4, #0]
 802e136:	f884 8004 	strb.w	r8, [r4, #4]
 802e13a:	71a3      	strb	r3, [r4, #6]
 802e13c:	2000      	movs	r0, #0
 802e13e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802e142:	9907      	ldr	r1, [sp, #28]
 802e144:	f7ff ff96 	bl	802e074 <_ZNKSt9type_infoeqERKS_>
 802e148:	2800      	cmp	r0, #0
 802e14a:	d0ed      	beq.n	802e128 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x14>
 802e14c:	f884 8005 	strb.w	r8, [r4, #5]
 802e150:	2000      	movs	r0, #0
 802e152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802e156:	bf00      	nop

0802e158 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 802e158:	b538      	push	{r3, r4, r5, lr}
 802e15a:	4615      	mov	r5, r2
 802e15c:	461c      	mov	r4, r3
 802e15e:	f7ff ff89 	bl	802e074 <_ZNKSt9type_infoeqERKS_>
 802e162:	b120      	cbz	r0, 802e16e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 802e164:	2208      	movs	r2, #8
 802e166:	2306      	movs	r3, #6
 802e168:	6025      	str	r5, [r4, #0]
 802e16a:	60e2      	str	r2, [r4, #12]
 802e16c:	7123      	strb	r3, [r4, #4]
 802e16e:	bd38      	pop	{r3, r4, r5, pc}

0802e170 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 802e170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802e174:	4617      	mov	r7, r2
 802e176:	461c      	mov	r4, r3
 802e178:	4606      	mov	r6, r0
 802e17a:	460d      	mov	r5, r1
 802e17c:	f7ff ff7a 	bl	802e074 <_ZNKSt9type_infoeqERKS_>
 802e180:	b908      	cbnz	r0, 802e186 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
 802e182:	2c03      	cmp	r4, #3
 802e184:	d901      	bls.n	802e18a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x1a>
 802e186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802e18a:	682b      	ldr	r3, [r5, #0]
 802e18c:	463a      	mov	r2, r7
 802e18e:	4631      	mov	r1, r6
 802e190:	4628      	mov	r0, r5
 802e192:	695b      	ldr	r3, [r3, #20]
 802e194:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802e198:	4718      	bx	r3
 802e19a:	bf00      	nop

0802e19c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
 802e19c:	b570      	push	{r4, r5, r6, lr}
 802e19e:	4b3c      	ldr	r3, [pc, #240]	; (802e290 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
 802e1a0:	781a      	ldrb	r2, [r3, #0]
 802e1a2:	b082      	sub	sp, #8
 802e1a4:	2a00      	cmp	r2, #0
 802e1a6:	d135      	bne.n	802e214 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x78>
 802e1a8:	2401      	movs	r4, #1
 802e1aa:	701c      	strb	r4, [r3, #0]
 802e1ac:	f000 f87e 	bl	802e2ac <__cxa_current_exception_type>
 802e1b0:	2800      	cmp	r0, #0
 802e1b2:	d03d      	beq.n	802e230 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x94>
 802e1b4:	6844      	ldr	r4, [r0, #4]
 802e1b6:	4d37      	ldr	r5, [pc, #220]	; (802e294 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 802e1b8:	7823      	ldrb	r3, [r4, #0]
 802e1ba:	2b2a      	cmp	r3, #42	; 0x2a
 802e1bc:	ab02      	add	r3, sp, #8
 802e1be:	f04f 32ff 	mov.w	r2, #4294967295
 802e1c2:	bf08      	it	eq
 802e1c4:	3401      	addeq	r4, #1
 802e1c6:	f843 2d04 	str.w	r2, [r3, #-4]!
 802e1ca:	2200      	movs	r2, #0
 802e1cc:	4611      	mov	r1, r2
 802e1ce:	4620      	mov	r0, r4
 802e1d0:	f7d8 fd06 	bl	8006be0 <__cxa_demangle>
 802e1d4:	682b      	ldr	r3, [r5, #0]
 802e1d6:	4606      	mov	r6, r0
 802e1d8:	68db      	ldr	r3, [r3, #12]
 802e1da:	482f      	ldr	r0, [pc, #188]	; (802e298 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
 802e1dc:	2230      	movs	r2, #48	; 0x30
 802e1de:	2101      	movs	r1, #1
 802e1e0:	f000 f98e 	bl	802e500 <fwrite>
 802e1e4:	9b01      	ldr	r3, [sp, #4]
 802e1e6:	b17b      	cbz	r3, 802e208 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6c>
 802e1e8:	682b      	ldr	r3, [r5, #0]
 802e1ea:	4620      	mov	r0, r4
 802e1ec:	68d9      	ldr	r1, [r3, #12]
 802e1ee:	f000 f931 	bl	802e454 <fputs>
 802e1f2:	682b      	ldr	r3, [r5, #0]
 802e1f4:	4829      	ldr	r0, [pc, #164]	; (802e29c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
 802e1f6:	68db      	ldr	r3, [r3, #12]
 802e1f8:	2202      	movs	r2, #2
 802e1fa:	2101      	movs	r1, #1
 802e1fc:	f000 f980 	bl	802e500 <fwrite>
 802e200:	9b01      	ldr	r3, [sp, #4]
 802e202:	b18b      	cbz	r3, 802e228 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
 802e204:	f7ff fdd6 	bl	802ddb4 <__cxa_rethrow>
 802e208:	682b      	ldr	r3, [r5, #0]
 802e20a:	4630      	mov	r0, r6
 802e20c:	68d9      	ldr	r1, [r3, #12]
 802e20e:	f000 f921 	bl	802e454 <fputs>
 802e212:	e7ee      	b.n	802e1f2 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x56>
 802e214:	4b1f      	ldr	r3, [pc, #124]	; (802e294 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 802e216:	4822      	ldr	r0, [pc, #136]	; (802e2a0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
 802e218:	681b      	ldr	r3, [r3, #0]
 802e21a:	221d      	movs	r2, #29
 802e21c:	68db      	ldr	r3, [r3, #12]
 802e21e:	2101      	movs	r1, #1
 802e220:	f000 f96e 	bl	802e500 <fwrite>
 802e224:	f000 f850 	bl	802e2c8 <abort>
 802e228:	4630      	mov	r0, r6
 802e22a:	f000 f9a3 	bl	802e574 <free>
 802e22e:	e7e9      	b.n	802e204 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x68>
 802e230:	4b18      	ldr	r3, [pc, #96]	; (802e294 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 802e232:	481c      	ldr	r0, [pc, #112]	; (802e2a4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
 802e234:	681b      	ldr	r3, [r3, #0]
 802e236:	4621      	mov	r1, r4
 802e238:	68db      	ldr	r3, [r3, #12]
 802e23a:	222d      	movs	r2, #45	; 0x2d
 802e23c:	f000 f960 	bl	802e500 <fwrite>
 802e240:	f000 f842 	bl	802e2c8 <abort>
 802e244:	2901      	cmp	r1, #1
 802e246:	460c      	mov	r4, r1
 802e248:	d119      	bne.n	802e27e <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xe2>
 802e24a:	f7ff fdeb 	bl	802de24 <__cxa_begin_catch>
 802e24e:	6803      	ldr	r3, [r0, #0]
 802e250:	689b      	ldr	r3, [r3, #8]
 802e252:	4798      	blx	r3
 802e254:	682b      	ldr	r3, [r5, #0]
 802e256:	4606      	mov	r6, r0
 802e258:	68db      	ldr	r3, [r3, #12]
 802e25a:	4813      	ldr	r0, [pc, #76]	; (802e2a8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
 802e25c:	4621      	mov	r1, r4
 802e25e:	220b      	movs	r2, #11
 802e260:	f000 f94e 	bl	802e500 <fwrite>
 802e264:	682b      	ldr	r3, [r5, #0]
 802e266:	4630      	mov	r0, r6
 802e268:	68d9      	ldr	r1, [r3, #12]
 802e26a:	f000 f8f3 	bl	802e454 <fputs>
 802e26e:	682b      	ldr	r3, [r5, #0]
 802e270:	200a      	movs	r0, #10
 802e272:	68d9      	ldr	r1, [r3, #12]
 802e274:	f000 f89e 	bl	802e3b4 <fputc>
 802e278:	f7ff fe14 	bl	802dea4 <__cxa_end_catch>
 802e27c:	e7e0      	b.n	802e240 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xa4>
 802e27e:	f7ff fdd1 	bl	802de24 <__cxa_begin_catch>
 802e282:	f7ff fe0f 	bl	802dea4 <__cxa_end_catch>
 802e286:	e7db      	b.n	802e240 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xa4>
 802e288:	f7ff fe0c 	bl	802dea4 <__cxa_end_catch>
 802e28c:	f7ff f908 	bl	802d4a0 <__cxa_end_cleanup>
 802e290:	2001292c 	.word	0x2001292c
 802e294:	20000114 	.word	0x20000114
 802e298:	08034d88 	.word	0x08034d88
 802e29c:	08034dbc 	.word	0x08034dbc
 802e2a0:	08034d68 	.word	0x08034d68
 802e2a4:	08034dc0 	.word	0x08034dc0
 802e2a8:	08034df0 	.word	0x08034df0

0802e2ac <__cxa_current_exception_type>:
 802e2ac:	b508      	push	{r3, lr}
 802e2ae:	f7ff f9db 	bl	802d668 <__cxa_get_globals>
 802e2b2:	6800      	ldr	r0, [r0, #0]
 802e2b4:	b130      	cbz	r0, 802e2c4 <__cxa_current_exception_type+0x18>
 802e2b6:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 802e2ba:	6800      	ldr	r0, [r0, #0]
 802e2bc:	2b01      	cmp	r3, #1
 802e2be:	bf08      	it	eq
 802e2c0:	f850 0c78 	ldreq.w	r0, [r0, #-120]
 802e2c4:	bd08      	pop	{r3, pc}
 802e2c6:	bf00      	nop

0802e2c8 <abort>:
 802e2c8:	b508      	push	{r3, lr}
 802e2ca:	2006      	movs	r0, #6
 802e2cc:	f000 fd62 	bl	802ed94 <raise>
 802e2d0:	2001      	movs	r0, #1
 802e2d2:	f7de f91b 	bl	800c50c <_exit>
	...

0802e2d8 <__assert_func>:
 802e2d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802e2da:	461c      	mov	r4, r3
 802e2dc:	4b09      	ldr	r3, [pc, #36]	; (802e304 <__assert_func+0x2c>)
 802e2de:	681b      	ldr	r3, [r3, #0]
 802e2e0:	4605      	mov	r5, r0
 802e2e2:	68d8      	ldr	r0, [r3, #12]
 802e2e4:	b152      	cbz	r2, 802e2fc <__assert_func+0x24>
 802e2e6:	4b08      	ldr	r3, [pc, #32]	; (802e308 <__assert_func+0x30>)
 802e2e8:	9100      	str	r1, [sp, #0]
 802e2ea:	e9cd 3201 	strd	r3, r2, [sp, #4]
 802e2ee:	4907      	ldr	r1, [pc, #28]	; (802e30c <__assert_func+0x34>)
 802e2f0:	462b      	mov	r3, r5
 802e2f2:	4622      	mov	r2, r4
 802e2f4:	f000 f828 	bl	802e348 <fiprintf>
 802e2f8:	f7ff ffe6 	bl	802e2c8 <abort>
 802e2fc:	4b04      	ldr	r3, [pc, #16]	; (802e310 <__assert_func+0x38>)
 802e2fe:	461a      	mov	r2, r3
 802e300:	e7f2      	b.n	802e2e8 <__assert_func+0x10>
 802e302:	bf00      	nop
 802e304:	20000114 	.word	0x20000114
 802e308:	08035660 	.word	0x08035660
 802e30c:	0803566d 	.word	0x0803566d
 802e310:	0803569b 	.word	0x0803569b

0802e314 <atexit>:
 802e314:	2300      	movs	r3, #0
 802e316:	4601      	mov	r1, r0
 802e318:	461a      	mov	r2, r3
 802e31a:	4618      	mov	r0, r3
 802e31c:	f000 be98 	b.w	802f050 <__register_exitproc>

0802e320 <__cxa_atexit>:
 802e320:	b510      	push	{r4, lr}
 802e322:	4c05      	ldr	r4, [pc, #20]	; (802e338 <__cxa_atexit+0x18>)
 802e324:	4613      	mov	r3, r2
 802e326:	b12c      	cbz	r4, 802e334 <__cxa_atexit+0x14>
 802e328:	460a      	mov	r2, r1
 802e32a:	4601      	mov	r1, r0
 802e32c:	2002      	movs	r0, #2
 802e32e:	f000 fe8f 	bl	802f050 <__register_exitproc>
 802e332:	bd10      	pop	{r4, pc}
 802e334:	4620      	mov	r0, r4
 802e336:	e7fc      	b.n	802e332 <__cxa_atexit+0x12>
 802e338:	0802f051 	.word	0x0802f051

0802e33c <__errno>:
 802e33c:	4b01      	ldr	r3, [pc, #4]	; (802e344 <__errno+0x8>)
 802e33e:	6818      	ldr	r0, [r3, #0]
 802e340:	4770      	bx	lr
 802e342:	bf00      	nop
 802e344:	20000114 	.word	0x20000114

0802e348 <fiprintf>:
 802e348:	b40e      	push	{r1, r2, r3}
 802e34a:	b503      	push	{r0, r1, lr}
 802e34c:	4601      	mov	r1, r0
 802e34e:	ab03      	add	r3, sp, #12
 802e350:	4805      	ldr	r0, [pc, #20]	; (802e368 <fiprintf+0x20>)
 802e352:	f853 2b04 	ldr.w	r2, [r3], #4
 802e356:	6800      	ldr	r0, [r0, #0]
 802e358:	9301      	str	r3, [sp, #4]
 802e35a:	f000 fa07 	bl	802e76c <_vfiprintf_r>
 802e35e:	b002      	add	sp, #8
 802e360:	f85d eb04 	ldr.w	lr, [sp], #4
 802e364:	b003      	add	sp, #12
 802e366:	4770      	bx	lr
 802e368:	20000114 	.word	0x20000114

0802e36c <_fputc_r>:
 802e36c:	b570      	push	{r4, r5, r6, lr}
 802e36e:	460e      	mov	r6, r1
 802e370:	4614      	mov	r4, r2
 802e372:	4605      	mov	r5, r0
 802e374:	b118      	cbz	r0, 802e37e <_fputc_r+0x12>
 802e376:	6983      	ldr	r3, [r0, #24]
 802e378:	b90b      	cbnz	r3, 802e37e <_fputc_r+0x12>
 802e37a:	f000 ffbd 	bl	802f2f8 <__sinit>
 802e37e:	4b0a      	ldr	r3, [pc, #40]	; (802e3a8 <_fputc_r+0x3c>)
 802e380:	429c      	cmp	r4, r3
 802e382:	d107      	bne.n	802e394 <_fputc_r+0x28>
 802e384:	686c      	ldr	r4, [r5, #4]
 802e386:	4622      	mov	r2, r4
 802e388:	4631      	mov	r1, r6
 802e38a:	4628      	mov	r0, r5
 802e38c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802e390:	f000 bc8a 	b.w	802eca8 <_putc_r>
 802e394:	4b05      	ldr	r3, [pc, #20]	; (802e3ac <_fputc_r+0x40>)
 802e396:	429c      	cmp	r4, r3
 802e398:	d101      	bne.n	802e39e <_fputc_r+0x32>
 802e39a:	68ac      	ldr	r4, [r5, #8]
 802e39c:	e7f3      	b.n	802e386 <_fputc_r+0x1a>
 802e39e:	4b04      	ldr	r3, [pc, #16]	; (802e3b0 <_fputc_r+0x44>)
 802e3a0:	429c      	cmp	r4, r3
 802e3a2:	bf08      	it	eq
 802e3a4:	68ec      	ldreq	r4, [r5, #12]
 802e3a6:	e7ee      	b.n	802e386 <_fputc_r+0x1a>
 802e3a8:	080356f8 	.word	0x080356f8
 802e3ac:	08035718 	.word	0x08035718
 802e3b0:	080356d8 	.word	0x080356d8

0802e3b4 <fputc>:
 802e3b4:	4b02      	ldr	r3, [pc, #8]	; (802e3c0 <fputc+0xc>)
 802e3b6:	460a      	mov	r2, r1
 802e3b8:	4601      	mov	r1, r0
 802e3ba:	6818      	ldr	r0, [r3, #0]
 802e3bc:	f7ff bfd6 	b.w	802e36c <_fputc_r>
 802e3c0:	20000114 	.word	0x20000114

0802e3c4 <_fputs_r>:
 802e3c4:	b570      	push	{r4, r5, r6, lr}
 802e3c6:	460e      	mov	r6, r1
 802e3c8:	4614      	mov	r4, r2
 802e3ca:	4605      	mov	r5, r0
 802e3cc:	b118      	cbz	r0, 802e3d6 <_fputs_r+0x12>
 802e3ce:	6983      	ldr	r3, [r0, #24]
 802e3d0:	b90b      	cbnz	r3, 802e3d6 <_fputs_r+0x12>
 802e3d2:	f000 ff91 	bl	802f2f8 <__sinit>
 802e3d6:	4b1c      	ldr	r3, [pc, #112]	; (802e448 <_fputs_r+0x84>)
 802e3d8:	429c      	cmp	r4, r3
 802e3da:	d10b      	bne.n	802e3f4 <_fputs_r+0x30>
 802e3dc:	686c      	ldr	r4, [r5, #4]
 802e3de:	89a3      	ldrh	r3, [r4, #12]
 802e3e0:	071b      	lsls	r3, r3, #28
 802e3e2:	d511      	bpl.n	802e408 <_fputs_r+0x44>
 802e3e4:	6923      	ldr	r3, [r4, #16]
 802e3e6:	b17b      	cbz	r3, 802e408 <_fputs_r+0x44>
 802e3e8:	3e01      	subs	r6, #1
 802e3ea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802e3ee:	b9a1      	cbnz	r1, 802e41a <_fputs_r+0x56>
 802e3f0:	4608      	mov	r0, r1
 802e3f2:	e011      	b.n	802e418 <_fputs_r+0x54>
 802e3f4:	4b15      	ldr	r3, [pc, #84]	; (802e44c <_fputs_r+0x88>)
 802e3f6:	429c      	cmp	r4, r3
 802e3f8:	d101      	bne.n	802e3fe <_fputs_r+0x3a>
 802e3fa:	68ac      	ldr	r4, [r5, #8]
 802e3fc:	e7ef      	b.n	802e3de <_fputs_r+0x1a>
 802e3fe:	4b14      	ldr	r3, [pc, #80]	; (802e450 <_fputs_r+0x8c>)
 802e400:	429c      	cmp	r4, r3
 802e402:	bf08      	it	eq
 802e404:	68ec      	ldreq	r4, [r5, #12]
 802e406:	e7ea      	b.n	802e3de <_fputs_r+0x1a>
 802e408:	4621      	mov	r1, r4
 802e40a:	4628      	mov	r0, r5
 802e40c:	f000 fdb2 	bl	802ef74 <__swsetup_r>
 802e410:	2800      	cmp	r0, #0
 802e412:	d0e9      	beq.n	802e3e8 <_fputs_r+0x24>
 802e414:	f04f 30ff 	mov.w	r0, #4294967295
 802e418:	bd70      	pop	{r4, r5, r6, pc}
 802e41a:	68a3      	ldr	r3, [r4, #8]
 802e41c:	3b01      	subs	r3, #1
 802e41e:	2b00      	cmp	r3, #0
 802e420:	60a3      	str	r3, [r4, #8]
 802e422:	da04      	bge.n	802e42e <_fputs_r+0x6a>
 802e424:	69a2      	ldr	r2, [r4, #24]
 802e426:	4293      	cmp	r3, r2
 802e428:	db06      	blt.n	802e438 <_fputs_r+0x74>
 802e42a:	290a      	cmp	r1, #10
 802e42c:	d004      	beq.n	802e438 <_fputs_r+0x74>
 802e42e:	6823      	ldr	r3, [r4, #0]
 802e430:	1c5a      	adds	r2, r3, #1
 802e432:	6022      	str	r2, [r4, #0]
 802e434:	7019      	strb	r1, [r3, #0]
 802e436:	e7d8      	b.n	802e3ea <_fputs_r+0x26>
 802e438:	4622      	mov	r2, r4
 802e43a:	4628      	mov	r0, r5
 802e43c:	f000 fd36 	bl	802eeac <__swbuf_r>
 802e440:	3001      	adds	r0, #1
 802e442:	d1d2      	bne.n	802e3ea <_fputs_r+0x26>
 802e444:	e7e6      	b.n	802e414 <_fputs_r+0x50>
 802e446:	bf00      	nop
 802e448:	080356f8 	.word	0x080356f8
 802e44c:	08035718 	.word	0x08035718
 802e450:	080356d8 	.word	0x080356d8

0802e454 <fputs>:
 802e454:	4b02      	ldr	r3, [pc, #8]	; (802e460 <fputs+0xc>)
 802e456:	460a      	mov	r2, r1
 802e458:	4601      	mov	r1, r0
 802e45a:	6818      	ldr	r0, [r3, #0]
 802e45c:	f7ff bfb2 	b.w	802e3c4 <_fputs_r>
 802e460:	20000114 	.word	0x20000114

0802e464 <_fwrite_r>:
 802e464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802e468:	9c08      	ldr	r4, [sp, #32]
 802e46a:	4689      	mov	r9, r1
 802e46c:	4617      	mov	r7, r2
 802e46e:	fb02 f803 	mul.w	r8, r2, r3
 802e472:	4606      	mov	r6, r0
 802e474:	b118      	cbz	r0, 802e47e <_fwrite_r+0x1a>
 802e476:	6983      	ldr	r3, [r0, #24]
 802e478:	b90b      	cbnz	r3, 802e47e <_fwrite_r+0x1a>
 802e47a:	f000 ff3d 	bl	802f2f8 <__sinit>
 802e47e:	4b1d      	ldr	r3, [pc, #116]	; (802e4f4 <_fwrite_r+0x90>)
 802e480:	429c      	cmp	r4, r3
 802e482:	d11a      	bne.n	802e4ba <_fwrite_r+0x56>
 802e484:	6874      	ldr	r4, [r6, #4]
 802e486:	89a3      	ldrh	r3, [r4, #12]
 802e488:	071b      	lsls	r3, r3, #28
 802e48a:	d520      	bpl.n	802e4ce <_fwrite_r+0x6a>
 802e48c:	6923      	ldr	r3, [r4, #16]
 802e48e:	b1f3      	cbz	r3, 802e4ce <_fwrite_r+0x6a>
 802e490:	2500      	movs	r5, #0
 802e492:	4545      	cmp	r5, r8
 802e494:	d029      	beq.n	802e4ea <_fwrite_r+0x86>
 802e496:	68a3      	ldr	r3, [r4, #8]
 802e498:	f819 1005 	ldrb.w	r1, [r9, r5]
 802e49c:	3b01      	subs	r3, #1
 802e49e:	2b00      	cmp	r3, #0
 802e4a0:	60a3      	str	r3, [r4, #8]
 802e4a2:	da04      	bge.n	802e4ae <_fwrite_r+0x4a>
 802e4a4:	69a2      	ldr	r2, [r4, #24]
 802e4a6:	4293      	cmp	r3, r2
 802e4a8:	db19      	blt.n	802e4de <_fwrite_r+0x7a>
 802e4aa:	290a      	cmp	r1, #10
 802e4ac:	d017      	beq.n	802e4de <_fwrite_r+0x7a>
 802e4ae:	6823      	ldr	r3, [r4, #0]
 802e4b0:	1c5a      	adds	r2, r3, #1
 802e4b2:	6022      	str	r2, [r4, #0]
 802e4b4:	7019      	strb	r1, [r3, #0]
 802e4b6:	3501      	adds	r5, #1
 802e4b8:	e7eb      	b.n	802e492 <_fwrite_r+0x2e>
 802e4ba:	4b0f      	ldr	r3, [pc, #60]	; (802e4f8 <_fwrite_r+0x94>)
 802e4bc:	429c      	cmp	r4, r3
 802e4be:	d101      	bne.n	802e4c4 <_fwrite_r+0x60>
 802e4c0:	68b4      	ldr	r4, [r6, #8]
 802e4c2:	e7e0      	b.n	802e486 <_fwrite_r+0x22>
 802e4c4:	4b0d      	ldr	r3, [pc, #52]	; (802e4fc <_fwrite_r+0x98>)
 802e4c6:	429c      	cmp	r4, r3
 802e4c8:	bf08      	it	eq
 802e4ca:	68f4      	ldreq	r4, [r6, #12]
 802e4cc:	e7db      	b.n	802e486 <_fwrite_r+0x22>
 802e4ce:	4621      	mov	r1, r4
 802e4d0:	4630      	mov	r0, r6
 802e4d2:	f000 fd4f 	bl	802ef74 <__swsetup_r>
 802e4d6:	2800      	cmp	r0, #0
 802e4d8:	d0da      	beq.n	802e490 <_fwrite_r+0x2c>
 802e4da:	2500      	movs	r5, #0
 802e4dc:	e005      	b.n	802e4ea <_fwrite_r+0x86>
 802e4de:	4622      	mov	r2, r4
 802e4e0:	4630      	mov	r0, r6
 802e4e2:	f000 fce3 	bl	802eeac <__swbuf_r>
 802e4e6:	3001      	adds	r0, #1
 802e4e8:	d1e5      	bne.n	802e4b6 <_fwrite_r+0x52>
 802e4ea:	fbb5 f0f7 	udiv	r0, r5, r7
 802e4ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802e4f2:	bf00      	nop
 802e4f4:	080356f8 	.word	0x080356f8
 802e4f8:	08035718 	.word	0x08035718
 802e4fc:	080356d8 	.word	0x080356d8

0802e500 <fwrite>:
 802e500:	b507      	push	{r0, r1, r2, lr}
 802e502:	9300      	str	r3, [sp, #0]
 802e504:	4613      	mov	r3, r2
 802e506:	460a      	mov	r2, r1
 802e508:	4601      	mov	r1, r0
 802e50a:	4803      	ldr	r0, [pc, #12]	; (802e518 <fwrite+0x18>)
 802e50c:	6800      	ldr	r0, [r0, #0]
 802e50e:	f7ff ffa9 	bl	802e464 <_fwrite_r>
 802e512:	b003      	add	sp, #12
 802e514:	f85d fb04 	ldr.w	pc, [sp], #4
 802e518:	20000114 	.word	0x20000114

0802e51c <__libc_init_array>:
 802e51c:	b570      	push	{r4, r5, r6, lr}
 802e51e:	4e0d      	ldr	r6, [pc, #52]	; (802e554 <__libc_init_array+0x38>)
 802e520:	4c0d      	ldr	r4, [pc, #52]	; (802e558 <__libc_init_array+0x3c>)
 802e522:	1ba4      	subs	r4, r4, r6
 802e524:	10a4      	asrs	r4, r4, #2
 802e526:	2500      	movs	r5, #0
 802e528:	42a5      	cmp	r5, r4
 802e52a:	d109      	bne.n	802e540 <__libc_init_array+0x24>
 802e52c:	4e0b      	ldr	r6, [pc, #44]	; (802e55c <__libc_init_array+0x40>)
 802e52e:	4c0c      	ldr	r4, [pc, #48]	; (802e560 <__libc_init_array+0x44>)
 802e530:	f001 fa06 	bl	802f940 <_init>
 802e534:	1ba4      	subs	r4, r4, r6
 802e536:	10a4      	asrs	r4, r4, #2
 802e538:	2500      	movs	r5, #0
 802e53a:	42a5      	cmp	r5, r4
 802e53c:	d105      	bne.n	802e54a <__libc_init_array+0x2e>
 802e53e:	bd70      	pop	{r4, r5, r6, pc}
 802e540:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802e544:	4798      	blx	r3
 802e546:	3501      	adds	r5, #1
 802e548:	e7ee      	b.n	802e528 <__libc_init_array+0xc>
 802e54a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802e54e:	4798      	blx	r3
 802e550:	3501      	adds	r5, #1
 802e552:	e7f2      	b.n	802e53a <__libc_init_array+0x1e>
 802e554:	0807b418 	.word	0x0807b418
 802e558:	0807b418 	.word	0x0807b418
 802e55c:	0807b418 	.word	0x0807b418
 802e560:	0807b430 	.word	0x0807b430

0802e564 <malloc>:
 802e564:	4b02      	ldr	r3, [pc, #8]	; (802e570 <malloc+0xc>)
 802e566:	4601      	mov	r1, r0
 802e568:	6818      	ldr	r0, [r3, #0]
 802e56a:	f000 b87b 	b.w	802e664 <_malloc_r>
 802e56e:	bf00      	nop
 802e570:	20000114 	.word	0x20000114

0802e574 <free>:
 802e574:	4b02      	ldr	r3, [pc, #8]	; (802e580 <free+0xc>)
 802e576:	4601      	mov	r1, r0
 802e578:	6818      	ldr	r0, [r3, #0]
 802e57a:	f000 b825 	b.w	802e5c8 <_free_r>
 802e57e:	bf00      	nop
 802e580:	20000114 	.word	0x20000114

0802e584 <memcmp>:
 802e584:	b530      	push	{r4, r5, lr}
 802e586:	2400      	movs	r4, #0
 802e588:	42a2      	cmp	r2, r4
 802e58a:	d101      	bne.n	802e590 <memcmp+0xc>
 802e58c:	2000      	movs	r0, #0
 802e58e:	e007      	b.n	802e5a0 <memcmp+0x1c>
 802e590:	5d03      	ldrb	r3, [r0, r4]
 802e592:	3401      	adds	r4, #1
 802e594:	190d      	adds	r5, r1, r4
 802e596:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 802e59a:	42ab      	cmp	r3, r5
 802e59c:	d0f4      	beq.n	802e588 <memcmp+0x4>
 802e59e:	1b58      	subs	r0, r3, r5
 802e5a0:	bd30      	pop	{r4, r5, pc}

0802e5a2 <memcpy>:
 802e5a2:	b510      	push	{r4, lr}
 802e5a4:	1e43      	subs	r3, r0, #1
 802e5a6:	440a      	add	r2, r1
 802e5a8:	4291      	cmp	r1, r2
 802e5aa:	d100      	bne.n	802e5ae <memcpy+0xc>
 802e5ac:	bd10      	pop	{r4, pc}
 802e5ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 802e5b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 802e5b6:	e7f7      	b.n	802e5a8 <memcpy+0x6>

0802e5b8 <memset>:
 802e5b8:	4402      	add	r2, r0
 802e5ba:	4603      	mov	r3, r0
 802e5bc:	4293      	cmp	r3, r2
 802e5be:	d100      	bne.n	802e5c2 <memset+0xa>
 802e5c0:	4770      	bx	lr
 802e5c2:	f803 1b01 	strb.w	r1, [r3], #1
 802e5c6:	e7f9      	b.n	802e5bc <memset+0x4>

0802e5c8 <_free_r>:
 802e5c8:	b538      	push	{r3, r4, r5, lr}
 802e5ca:	4605      	mov	r5, r0
 802e5cc:	2900      	cmp	r1, #0
 802e5ce:	d045      	beq.n	802e65c <_free_r+0x94>
 802e5d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802e5d4:	1f0c      	subs	r4, r1, #4
 802e5d6:	2b00      	cmp	r3, #0
 802e5d8:	bfb8      	it	lt
 802e5da:	18e4      	addlt	r4, r4, r3
 802e5dc:	f000 ff93 	bl	802f506 <__malloc_lock>
 802e5e0:	4a1f      	ldr	r2, [pc, #124]	; (802e660 <_free_r+0x98>)
 802e5e2:	6813      	ldr	r3, [r2, #0]
 802e5e4:	4610      	mov	r0, r2
 802e5e6:	b933      	cbnz	r3, 802e5f6 <_free_r+0x2e>
 802e5e8:	6063      	str	r3, [r4, #4]
 802e5ea:	6014      	str	r4, [r2, #0]
 802e5ec:	4628      	mov	r0, r5
 802e5ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802e5f2:	f000 bf89 	b.w	802f508 <__malloc_unlock>
 802e5f6:	42a3      	cmp	r3, r4
 802e5f8:	d90c      	bls.n	802e614 <_free_r+0x4c>
 802e5fa:	6821      	ldr	r1, [r4, #0]
 802e5fc:	1862      	adds	r2, r4, r1
 802e5fe:	4293      	cmp	r3, r2
 802e600:	bf04      	itt	eq
 802e602:	681a      	ldreq	r2, [r3, #0]
 802e604:	685b      	ldreq	r3, [r3, #4]
 802e606:	6063      	str	r3, [r4, #4]
 802e608:	bf04      	itt	eq
 802e60a:	1852      	addeq	r2, r2, r1
 802e60c:	6022      	streq	r2, [r4, #0]
 802e60e:	6004      	str	r4, [r0, #0]
 802e610:	e7ec      	b.n	802e5ec <_free_r+0x24>
 802e612:	4613      	mov	r3, r2
 802e614:	685a      	ldr	r2, [r3, #4]
 802e616:	b10a      	cbz	r2, 802e61c <_free_r+0x54>
 802e618:	42a2      	cmp	r2, r4
 802e61a:	d9fa      	bls.n	802e612 <_free_r+0x4a>
 802e61c:	6819      	ldr	r1, [r3, #0]
 802e61e:	1858      	adds	r0, r3, r1
 802e620:	42a0      	cmp	r0, r4
 802e622:	d10b      	bne.n	802e63c <_free_r+0x74>
 802e624:	6820      	ldr	r0, [r4, #0]
 802e626:	4401      	add	r1, r0
 802e628:	1858      	adds	r0, r3, r1
 802e62a:	4282      	cmp	r2, r0
 802e62c:	6019      	str	r1, [r3, #0]
 802e62e:	d1dd      	bne.n	802e5ec <_free_r+0x24>
 802e630:	6810      	ldr	r0, [r2, #0]
 802e632:	6852      	ldr	r2, [r2, #4]
 802e634:	605a      	str	r2, [r3, #4]
 802e636:	4401      	add	r1, r0
 802e638:	6019      	str	r1, [r3, #0]
 802e63a:	e7d7      	b.n	802e5ec <_free_r+0x24>
 802e63c:	d902      	bls.n	802e644 <_free_r+0x7c>
 802e63e:	230c      	movs	r3, #12
 802e640:	602b      	str	r3, [r5, #0]
 802e642:	e7d3      	b.n	802e5ec <_free_r+0x24>
 802e644:	6820      	ldr	r0, [r4, #0]
 802e646:	1821      	adds	r1, r4, r0
 802e648:	428a      	cmp	r2, r1
 802e64a:	bf04      	itt	eq
 802e64c:	6811      	ldreq	r1, [r2, #0]
 802e64e:	6852      	ldreq	r2, [r2, #4]
 802e650:	6062      	str	r2, [r4, #4]
 802e652:	bf04      	itt	eq
 802e654:	1809      	addeq	r1, r1, r0
 802e656:	6021      	streq	r1, [r4, #0]
 802e658:	605c      	str	r4, [r3, #4]
 802e65a:	e7c7      	b.n	802e5ec <_free_r+0x24>
 802e65c:	bd38      	pop	{r3, r4, r5, pc}
 802e65e:	bf00      	nop
 802e660:	20012930 	.word	0x20012930

0802e664 <_malloc_r>:
 802e664:	b570      	push	{r4, r5, r6, lr}
 802e666:	1ccd      	adds	r5, r1, #3
 802e668:	f025 0503 	bic.w	r5, r5, #3
 802e66c:	3508      	adds	r5, #8
 802e66e:	2d0c      	cmp	r5, #12
 802e670:	bf38      	it	cc
 802e672:	250c      	movcc	r5, #12
 802e674:	2d00      	cmp	r5, #0
 802e676:	4606      	mov	r6, r0
 802e678:	db01      	blt.n	802e67e <_malloc_r+0x1a>
 802e67a:	42a9      	cmp	r1, r5
 802e67c:	d903      	bls.n	802e686 <_malloc_r+0x22>
 802e67e:	230c      	movs	r3, #12
 802e680:	6033      	str	r3, [r6, #0]
 802e682:	2000      	movs	r0, #0
 802e684:	bd70      	pop	{r4, r5, r6, pc}
 802e686:	f000 ff3e 	bl	802f506 <__malloc_lock>
 802e68a:	4a21      	ldr	r2, [pc, #132]	; (802e710 <_malloc_r+0xac>)
 802e68c:	6814      	ldr	r4, [r2, #0]
 802e68e:	4621      	mov	r1, r4
 802e690:	b991      	cbnz	r1, 802e6b8 <_malloc_r+0x54>
 802e692:	4c20      	ldr	r4, [pc, #128]	; (802e714 <_malloc_r+0xb0>)
 802e694:	6823      	ldr	r3, [r4, #0]
 802e696:	b91b      	cbnz	r3, 802e6a0 <_malloc_r+0x3c>
 802e698:	4630      	mov	r0, r6
 802e69a:	f000 fb43 	bl	802ed24 <_sbrk_r>
 802e69e:	6020      	str	r0, [r4, #0]
 802e6a0:	4629      	mov	r1, r5
 802e6a2:	4630      	mov	r0, r6
 802e6a4:	f000 fb3e 	bl	802ed24 <_sbrk_r>
 802e6a8:	1c43      	adds	r3, r0, #1
 802e6aa:	d124      	bne.n	802e6f6 <_malloc_r+0x92>
 802e6ac:	230c      	movs	r3, #12
 802e6ae:	6033      	str	r3, [r6, #0]
 802e6b0:	4630      	mov	r0, r6
 802e6b2:	f000 ff29 	bl	802f508 <__malloc_unlock>
 802e6b6:	e7e4      	b.n	802e682 <_malloc_r+0x1e>
 802e6b8:	680b      	ldr	r3, [r1, #0]
 802e6ba:	1b5b      	subs	r3, r3, r5
 802e6bc:	d418      	bmi.n	802e6f0 <_malloc_r+0x8c>
 802e6be:	2b0b      	cmp	r3, #11
 802e6c0:	d90f      	bls.n	802e6e2 <_malloc_r+0x7e>
 802e6c2:	600b      	str	r3, [r1, #0]
 802e6c4:	50cd      	str	r5, [r1, r3]
 802e6c6:	18cc      	adds	r4, r1, r3
 802e6c8:	4630      	mov	r0, r6
 802e6ca:	f000 ff1d 	bl	802f508 <__malloc_unlock>
 802e6ce:	f104 000b 	add.w	r0, r4, #11
 802e6d2:	1d23      	adds	r3, r4, #4
 802e6d4:	f020 0007 	bic.w	r0, r0, #7
 802e6d8:	1ac3      	subs	r3, r0, r3
 802e6da:	d0d3      	beq.n	802e684 <_malloc_r+0x20>
 802e6dc:	425a      	negs	r2, r3
 802e6de:	50e2      	str	r2, [r4, r3]
 802e6e0:	e7d0      	b.n	802e684 <_malloc_r+0x20>
 802e6e2:	428c      	cmp	r4, r1
 802e6e4:	684b      	ldr	r3, [r1, #4]
 802e6e6:	bf16      	itet	ne
 802e6e8:	6063      	strne	r3, [r4, #4]
 802e6ea:	6013      	streq	r3, [r2, #0]
 802e6ec:	460c      	movne	r4, r1
 802e6ee:	e7eb      	b.n	802e6c8 <_malloc_r+0x64>
 802e6f0:	460c      	mov	r4, r1
 802e6f2:	6849      	ldr	r1, [r1, #4]
 802e6f4:	e7cc      	b.n	802e690 <_malloc_r+0x2c>
 802e6f6:	1cc4      	adds	r4, r0, #3
 802e6f8:	f024 0403 	bic.w	r4, r4, #3
 802e6fc:	42a0      	cmp	r0, r4
 802e6fe:	d005      	beq.n	802e70c <_malloc_r+0xa8>
 802e700:	1a21      	subs	r1, r4, r0
 802e702:	4630      	mov	r0, r6
 802e704:	f000 fb0e 	bl	802ed24 <_sbrk_r>
 802e708:	3001      	adds	r0, #1
 802e70a:	d0cf      	beq.n	802e6ac <_malloc_r+0x48>
 802e70c:	6025      	str	r5, [r4, #0]
 802e70e:	e7db      	b.n	802e6c8 <_malloc_r+0x64>
 802e710:	20012930 	.word	0x20012930
 802e714:	20012934 	.word	0x20012934

0802e718 <__sfputc_r>:
 802e718:	6893      	ldr	r3, [r2, #8]
 802e71a:	3b01      	subs	r3, #1
 802e71c:	2b00      	cmp	r3, #0
 802e71e:	b410      	push	{r4}
 802e720:	6093      	str	r3, [r2, #8]
 802e722:	da08      	bge.n	802e736 <__sfputc_r+0x1e>
 802e724:	6994      	ldr	r4, [r2, #24]
 802e726:	42a3      	cmp	r3, r4
 802e728:	db01      	blt.n	802e72e <__sfputc_r+0x16>
 802e72a:	290a      	cmp	r1, #10
 802e72c:	d103      	bne.n	802e736 <__sfputc_r+0x1e>
 802e72e:	f85d 4b04 	ldr.w	r4, [sp], #4
 802e732:	f000 bbbb 	b.w	802eeac <__swbuf_r>
 802e736:	6813      	ldr	r3, [r2, #0]
 802e738:	1c58      	adds	r0, r3, #1
 802e73a:	6010      	str	r0, [r2, #0]
 802e73c:	7019      	strb	r1, [r3, #0]
 802e73e:	4608      	mov	r0, r1
 802e740:	f85d 4b04 	ldr.w	r4, [sp], #4
 802e744:	4770      	bx	lr

0802e746 <__sfputs_r>:
 802e746:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e748:	4606      	mov	r6, r0
 802e74a:	460f      	mov	r7, r1
 802e74c:	4614      	mov	r4, r2
 802e74e:	18d5      	adds	r5, r2, r3
 802e750:	42ac      	cmp	r4, r5
 802e752:	d101      	bne.n	802e758 <__sfputs_r+0x12>
 802e754:	2000      	movs	r0, #0
 802e756:	e007      	b.n	802e768 <__sfputs_r+0x22>
 802e758:	463a      	mov	r2, r7
 802e75a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802e75e:	4630      	mov	r0, r6
 802e760:	f7ff ffda 	bl	802e718 <__sfputc_r>
 802e764:	1c43      	adds	r3, r0, #1
 802e766:	d1f3      	bne.n	802e750 <__sfputs_r+0xa>
 802e768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802e76c <_vfiprintf_r>:
 802e76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e770:	460c      	mov	r4, r1
 802e772:	b09d      	sub	sp, #116	; 0x74
 802e774:	4617      	mov	r7, r2
 802e776:	461d      	mov	r5, r3
 802e778:	4606      	mov	r6, r0
 802e77a:	b118      	cbz	r0, 802e784 <_vfiprintf_r+0x18>
 802e77c:	6983      	ldr	r3, [r0, #24]
 802e77e:	b90b      	cbnz	r3, 802e784 <_vfiprintf_r+0x18>
 802e780:	f000 fdba 	bl	802f2f8 <__sinit>
 802e784:	4b7c      	ldr	r3, [pc, #496]	; (802e978 <_vfiprintf_r+0x20c>)
 802e786:	429c      	cmp	r4, r3
 802e788:	d158      	bne.n	802e83c <_vfiprintf_r+0xd0>
 802e78a:	6874      	ldr	r4, [r6, #4]
 802e78c:	89a3      	ldrh	r3, [r4, #12]
 802e78e:	0718      	lsls	r0, r3, #28
 802e790:	d55e      	bpl.n	802e850 <_vfiprintf_r+0xe4>
 802e792:	6923      	ldr	r3, [r4, #16]
 802e794:	2b00      	cmp	r3, #0
 802e796:	d05b      	beq.n	802e850 <_vfiprintf_r+0xe4>
 802e798:	2300      	movs	r3, #0
 802e79a:	9309      	str	r3, [sp, #36]	; 0x24
 802e79c:	2320      	movs	r3, #32
 802e79e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802e7a2:	2330      	movs	r3, #48	; 0x30
 802e7a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802e7a8:	9503      	str	r5, [sp, #12]
 802e7aa:	f04f 0b01 	mov.w	fp, #1
 802e7ae:	46b8      	mov	r8, r7
 802e7b0:	4645      	mov	r5, r8
 802e7b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 802e7b6:	b10b      	cbz	r3, 802e7bc <_vfiprintf_r+0x50>
 802e7b8:	2b25      	cmp	r3, #37	; 0x25
 802e7ba:	d154      	bne.n	802e866 <_vfiprintf_r+0xfa>
 802e7bc:	ebb8 0a07 	subs.w	sl, r8, r7
 802e7c0:	d00b      	beq.n	802e7da <_vfiprintf_r+0x6e>
 802e7c2:	4653      	mov	r3, sl
 802e7c4:	463a      	mov	r2, r7
 802e7c6:	4621      	mov	r1, r4
 802e7c8:	4630      	mov	r0, r6
 802e7ca:	f7ff ffbc 	bl	802e746 <__sfputs_r>
 802e7ce:	3001      	adds	r0, #1
 802e7d0:	f000 80c2 	beq.w	802e958 <_vfiprintf_r+0x1ec>
 802e7d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802e7d6:	4453      	add	r3, sl
 802e7d8:	9309      	str	r3, [sp, #36]	; 0x24
 802e7da:	f898 3000 	ldrb.w	r3, [r8]
 802e7de:	2b00      	cmp	r3, #0
 802e7e0:	f000 80ba 	beq.w	802e958 <_vfiprintf_r+0x1ec>
 802e7e4:	2300      	movs	r3, #0
 802e7e6:	f04f 32ff 	mov.w	r2, #4294967295
 802e7ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802e7ee:	9304      	str	r3, [sp, #16]
 802e7f0:	9307      	str	r3, [sp, #28]
 802e7f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802e7f6:	931a      	str	r3, [sp, #104]	; 0x68
 802e7f8:	46a8      	mov	r8, r5
 802e7fa:	2205      	movs	r2, #5
 802e7fc:	f818 1b01 	ldrb.w	r1, [r8], #1
 802e800:	485e      	ldr	r0, [pc, #376]	; (802e97c <_vfiprintf_r+0x210>)
 802e802:	f7d8 fa75 	bl	8006cf0 <memchr>
 802e806:	9b04      	ldr	r3, [sp, #16]
 802e808:	bb78      	cbnz	r0, 802e86a <_vfiprintf_r+0xfe>
 802e80a:	06d9      	lsls	r1, r3, #27
 802e80c:	bf44      	itt	mi
 802e80e:	2220      	movmi	r2, #32
 802e810:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802e814:	071a      	lsls	r2, r3, #28
 802e816:	bf44      	itt	mi
 802e818:	222b      	movmi	r2, #43	; 0x2b
 802e81a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802e81e:	782a      	ldrb	r2, [r5, #0]
 802e820:	2a2a      	cmp	r2, #42	; 0x2a
 802e822:	d02a      	beq.n	802e87a <_vfiprintf_r+0x10e>
 802e824:	9a07      	ldr	r2, [sp, #28]
 802e826:	46a8      	mov	r8, r5
 802e828:	2000      	movs	r0, #0
 802e82a:	250a      	movs	r5, #10
 802e82c:	4641      	mov	r1, r8
 802e82e:	f811 3b01 	ldrb.w	r3, [r1], #1
 802e832:	3b30      	subs	r3, #48	; 0x30
 802e834:	2b09      	cmp	r3, #9
 802e836:	d969      	bls.n	802e90c <_vfiprintf_r+0x1a0>
 802e838:	b360      	cbz	r0, 802e894 <_vfiprintf_r+0x128>
 802e83a:	e024      	b.n	802e886 <_vfiprintf_r+0x11a>
 802e83c:	4b50      	ldr	r3, [pc, #320]	; (802e980 <_vfiprintf_r+0x214>)
 802e83e:	429c      	cmp	r4, r3
 802e840:	d101      	bne.n	802e846 <_vfiprintf_r+0xda>
 802e842:	68b4      	ldr	r4, [r6, #8]
 802e844:	e7a2      	b.n	802e78c <_vfiprintf_r+0x20>
 802e846:	4b4f      	ldr	r3, [pc, #316]	; (802e984 <_vfiprintf_r+0x218>)
 802e848:	429c      	cmp	r4, r3
 802e84a:	bf08      	it	eq
 802e84c:	68f4      	ldreq	r4, [r6, #12]
 802e84e:	e79d      	b.n	802e78c <_vfiprintf_r+0x20>
 802e850:	4621      	mov	r1, r4
 802e852:	4630      	mov	r0, r6
 802e854:	f000 fb8e 	bl	802ef74 <__swsetup_r>
 802e858:	2800      	cmp	r0, #0
 802e85a:	d09d      	beq.n	802e798 <_vfiprintf_r+0x2c>
 802e85c:	f04f 30ff 	mov.w	r0, #4294967295
 802e860:	b01d      	add	sp, #116	; 0x74
 802e862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e866:	46a8      	mov	r8, r5
 802e868:	e7a2      	b.n	802e7b0 <_vfiprintf_r+0x44>
 802e86a:	4a44      	ldr	r2, [pc, #272]	; (802e97c <_vfiprintf_r+0x210>)
 802e86c:	1a80      	subs	r0, r0, r2
 802e86e:	fa0b f000 	lsl.w	r0, fp, r0
 802e872:	4318      	orrs	r0, r3
 802e874:	9004      	str	r0, [sp, #16]
 802e876:	4645      	mov	r5, r8
 802e878:	e7be      	b.n	802e7f8 <_vfiprintf_r+0x8c>
 802e87a:	9a03      	ldr	r2, [sp, #12]
 802e87c:	1d11      	adds	r1, r2, #4
 802e87e:	6812      	ldr	r2, [r2, #0]
 802e880:	9103      	str	r1, [sp, #12]
 802e882:	2a00      	cmp	r2, #0
 802e884:	db01      	blt.n	802e88a <_vfiprintf_r+0x11e>
 802e886:	9207      	str	r2, [sp, #28]
 802e888:	e004      	b.n	802e894 <_vfiprintf_r+0x128>
 802e88a:	4252      	negs	r2, r2
 802e88c:	f043 0302 	orr.w	r3, r3, #2
 802e890:	9207      	str	r2, [sp, #28]
 802e892:	9304      	str	r3, [sp, #16]
 802e894:	f898 3000 	ldrb.w	r3, [r8]
 802e898:	2b2e      	cmp	r3, #46	; 0x2e
 802e89a:	d10e      	bne.n	802e8ba <_vfiprintf_r+0x14e>
 802e89c:	f898 3001 	ldrb.w	r3, [r8, #1]
 802e8a0:	2b2a      	cmp	r3, #42	; 0x2a
 802e8a2:	d138      	bne.n	802e916 <_vfiprintf_r+0x1aa>
 802e8a4:	9b03      	ldr	r3, [sp, #12]
 802e8a6:	1d1a      	adds	r2, r3, #4
 802e8a8:	681b      	ldr	r3, [r3, #0]
 802e8aa:	9203      	str	r2, [sp, #12]
 802e8ac:	2b00      	cmp	r3, #0
 802e8ae:	bfb8      	it	lt
 802e8b0:	f04f 33ff 	movlt.w	r3, #4294967295
 802e8b4:	f108 0802 	add.w	r8, r8, #2
 802e8b8:	9305      	str	r3, [sp, #20]
 802e8ba:	4d33      	ldr	r5, [pc, #204]	; (802e988 <_vfiprintf_r+0x21c>)
 802e8bc:	f898 1000 	ldrb.w	r1, [r8]
 802e8c0:	2203      	movs	r2, #3
 802e8c2:	4628      	mov	r0, r5
 802e8c4:	f7d8 fa14 	bl	8006cf0 <memchr>
 802e8c8:	b140      	cbz	r0, 802e8dc <_vfiprintf_r+0x170>
 802e8ca:	2340      	movs	r3, #64	; 0x40
 802e8cc:	1b40      	subs	r0, r0, r5
 802e8ce:	fa03 f000 	lsl.w	r0, r3, r0
 802e8d2:	9b04      	ldr	r3, [sp, #16]
 802e8d4:	4303      	orrs	r3, r0
 802e8d6:	f108 0801 	add.w	r8, r8, #1
 802e8da:	9304      	str	r3, [sp, #16]
 802e8dc:	f898 1000 	ldrb.w	r1, [r8]
 802e8e0:	482a      	ldr	r0, [pc, #168]	; (802e98c <_vfiprintf_r+0x220>)
 802e8e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802e8e6:	2206      	movs	r2, #6
 802e8e8:	f108 0701 	add.w	r7, r8, #1
 802e8ec:	f7d8 fa00 	bl	8006cf0 <memchr>
 802e8f0:	2800      	cmp	r0, #0
 802e8f2:	d037      	beq.n	802e964 <_vfiprintf_r+0x1f8>
 802e8f4:	4b26      	ldr	r3, [pc, #152]	; (802e990 <_vfiprintf_r+0x224>)
 802e8f6:	bb1b      	cbnz	r3, 802e940 <_vfiprintf_r+0x1d4>
 802e8f8:	9b03      	ldr	r3, [sp, #12]
 802e8fa:	3307      	adds	r3, #7
 802e8fc:	f023 0307 	bic.w	r3, r3, #7
 802e900:	3308      	adds	r3, #8
 802e902:	9303      	str	r3, [sp, #12]
 802e904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802e906:	444b      	add	r3, r9
 802e908:	9309      	str	r3, [sp, #36]	; 0x24
 802e90a:	e750      	b.n	802e7ae <_vfiprintf_r+0x42>
 802e90c:	fb05 3202 	mla	r2, r5, r2, r3
 802e910:	2001      	movs	r0, #1
 802e912:	4688      	mov	r8, r1
 802e914:	e78a      	b.n	802e82c <_vfiprintf_r+0xc0>
 802e916:	2300      	movs	r3, #0
 802e918:	f108 0801 	add.w	r8, r8, #1
 802e91c:	9305      	str	r3, [sp, #20]
 802e91e:	4619      	mov	r1, r3
 802e920:	250a      	movs	r5, #10
 802e922:	4640      	mov	r0, r8
 802e924:	f810 2b01 	ldrb.w	r2, [r0], #1
 802e928:	3a30      	subs	r2, #48	; 0x30
 802e92a:	2a09      	cmp	r2, #9
 802e92c:	d903      	bls.n	802e936 <_vfiprintf_r+0x1ca>
 802e92e:	2b00      	cmp	r3, #0
 802e930:	d0c3      	beq.n	802e8ba <_vfiprintf_r+0x14e>
 802e932:	9105      	str	r1, [sp, #20]
 802e934:	e7c1      	b.n	802e8ba <_vfiprintf_r+0x14e>
 802e936:	fb05 2101 	mla	r1, r5, r1, r2
 802e93a:	2301      	movs	r3, #1
 802e93c:	4680      	mov	r8, r0
 802e93e:	e7f0      	b.n	802e922 <_vfiprintf_r+0x1b6>
 802e940:	ab03      	add	r3, sp, #12
 802e942:	9300      	str	r3, [sp, #0]
 802e944:	4622      	mov	r2, r4
 802e946:	4b13      	ldr	r3, [pc, #76]	; (802e994 <_vfiprintf_r+0x228>)
 802e948:	a904      	add	r1, sp, #16
 802e94a:	4630      	mov	r0, r6
 802e94c:	f3af 8000 	nop.w
 802e950:	f1b0 3fff 	cmp.w	r0, #4294967295
 802e954:	4681      	mov	r9, r0
 802e956:	d1d5      	bne.n	802e904 <_vfiprintf_r+0x198>
 802e958:	89a3      	ldrh	r3, [r4, #12]
 802e95a:	065b      	lsls	r3, r3, #25
 802e95c:	f53f af7e 	bmi.w	802e85c <_vfiprintf_r+0xf0>
 802e960:	9809      	ldr	r0, [sp, #36]	; 0x24
 802e962:	e77d      	b.n	802e860 <_vfiprintf_r+0xf4>
 802e964:	ab03      	add	r3, sp, #12
 802e966:	9300      	str	r3, [sp, #0]
 802e968:	4622      	mov	r2, r4
 802e96a:	4b0a      	ldr	r3, [pc, #40]	; (802e994 <_vfiprintf_r+0x228>)
 802e96c:	a904      	add	r1, sp, #16
 802e96e:	4630      	mov	r0, r6
 802e970:	f000 f888 	bl	802ea84 <_printf_i>
 802e974:	e7ec      	b.n	802e950 <_vfiprintf_r+0x1e4>
 802e976:	bf00      	nop
 802e978:	080356f8 	.word	0x080356f8
 802e97c:	080356a0 	.word	0x080356a0
 802e980:	08035718 	.word	0x08035718
 802e984:	080356d8 	.word	0x080356d8
 802e988:	080356a6 	.word	0x080356a6
 802e98c:	080356aa 	.word	0x080356aa
 802e990:	00000000 	.word	0x00000000
 802e994:	0802e747 	.word	0x0802e747

0802e998 <_printf_common>:
 802e998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802e99c:	4691      	mov	r9, r2
 802e99e:	461f      	mov	r7, r3
 802e9a0:	688a      	ldr	r2, [r1, #8]
 802e9a2:	690b      	ldr	r3, [r1, #16]
 802e9a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802e9a8:	4293      	cmp	r3, r2
 802e9aa:	bfb8      	it	lt
 802e9ac:	4613      	movlt	r3, r2
 802e9ae:	f8c9 3000 	str.w	r3, [r9]
 802e9b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802e9b6:	4606      	mov	r6, r0
 802e9b8:	460c      	mov	r4, r1
 802e9ba:	b112      	cbz	r2, 802e9c2 <_printf_common+0x2a>
 802e9bc:	3301      	adds	r3, #1
 802e9be:	f8c9 3000 	str.w	r3, [r9]
 802e9c2:	6823      	ldr	r3, [r4, #0]
 802e9c4:	0699      	lsls	r1, r3, #26
 802e9c6:	bf42      	ittt	mi
 802e9c8:	f8d9 3000 	ldrmi.w	r3, [r9]
 802e9cc:	3302      	addmi	r3, #2
 802e9ce:	f8c9 3000 	strmi.w	r3, [r9]
 802e9d2:	6825      	ldr	r5, [r4, #0]
 802e9d4:	f015 0506 	ands.w	r5, r5, #6
 802e9d8:	d107      	bne.n	802e9ea <_printf_common+0x52>
 802e9da:	f104 0a19 	add.w	sl, r4, #25
 802e9de:	68e3      	ldr	r3, [r4, #12]
 802e9e0:	f8d9 2000 	ldr.w	r2, [r9]
 802e9e4:	1a9b      	subs	r3, r3, r2
 802e9e6:	42ab      	cmp	r3, r5
 802e9e8:	dc28      	bgt.n	802ea3c <_printf_common+0xa4>
 802e9ea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 802e9ee:	6822      	ldr	r2, [r4, #0]
 802e9f0:	3300      	adds	r3, #0
 802e9f2:	bf18      	it	ne
 802e9f4:	2301      	movne	r3, #1
 802e9f6:	0692      	lsls	r2, r2, #26
 802e9f8:	d42d      	bmi.n	802ea56 <_printf_common+0xbe>
 802e9fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802e9fe:	4639      	mov	r1, r7
 802ea00:	4630      	mov	r0, r6
 802ea02:	47c0      	blx	r8
 802ea04:	3001      	adds	r0, #1
 802ea06:	d020      	beq.n	802ea4a <_printf_common+0xb2>
 802ea08:	6823      	ldr	r3, [r4, #0]
 802ea0a:	68e5      	ldr	r5, [r4, #12]
 802ea0c:	f8d9 2000 	ldr.w	r2, [r9]
 802ea10:	f003 0306 	and.w	r3, r3, #6
 802ea14:	2b04      	cmp	r3, #4
 802ea16:	bf08      	it	eq
 802ea18:	1aad      	subeq	r5, r5, r2
 802ea1a:	68a3      	ldr	r3, [r4, #8]
 802ea1c:	6922      	ldr	r2, [r4, #16]
 802ea1e:	bf0c      	ite	eq
 802ea20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802ea24:	2500      	movne	r5, #0
 802ea26:	4293      	cmp	r3, r2
 802ea28:	bfc4      	itt	gt
 802ea2a:	1a9b      	subgt	r3, r3, r2
 802ea2c:	18ed      	addgt	r5, r5, r3
 802ea2e:	f04f 0900 	mov.w	r9, #0
 802ea32:	341a      	adds	r4, #26
 802ea34:	454d      	cmp	r5, r9
 802ea36:	d11a      	bne.n	802ea6e <_printf_common+0xd6>
 802ea38:	2000      	movs	r0, #0
 802ea3a:	e008      	b.n	802ea4e <_printf_common+0xb6>
 802ea3c:	2301      	movs	r3, #1
 802ea3e:	4652      	mov	r2, sl
 802ea40:	4639      	mov	r1, r7
 802ea42:	4630      	mov	r0, r6
 802ea44:	47c0      	blx	r8
 802ea46:	3001      	adds	r0, #1
 802ea48:	d103      	bne.n	802ea52 <_printf_common+0xba>
 802ea4a:	f04f 30ff 	mov.w	r0, #4294967295
 802ea4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ea52:	3501      	adds	r5, #1
 802ea54:	e7c3      	b.n	802e9de <_printf_common+0x46>
 802ea56:	18e1      	adds	r1, r4, r3
 802ea58:	1c5a      	adds	r2, r3, #1
 802ea5a:	2030      	movs	r0, #48	; 0x30
 802ea5c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802ea60:	4422      	add	r2, r4
 802ea62:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802ea66:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802ea6a:	3302      	adds	r3, #2
 802ea6c:	e7c5      	b.n	802e9fa <_printf_common+0x62>
 802ea6e:	2301      	movs	r3, #1
 802ea70:	4622      	mov	r2, r4
 802ea72:	4639      	mov	r1, r7
 802ea74:	4630      	mov	r0, r6
 802ea76:	47c0      	blx	r8
 802ea78:	3001      	adds	r0, #1
 802ea7a:	d0e6      	beq.n	802ea4a <_printf_common+0xb2>
 802ea7c:	f109 0901 	add.w	r9, r9, #1
 802ea80:	e7d8      	b.n	802ea34 <_printf_common+0x9c>
	...

0802ea84 <_printf_i>:
 802ea84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802ea88:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 802ea8c:	460c      	mov	r4, r1
 802ea8e:	7e09      	ldrb	r1, [r1, #24]
 802ea90:	b085      	sub	sp, #20
 802ea92:	296e      	cmp	r1, #110	; 0x6e
 802ea94:	4617      	mov	r7, r2
 802ea96:	4606      	mov	r6, r0
 802ea98:	4698      	mov	r8, r3
 802ea9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802ea9c:	f000 80b3 	beq.w	802ec06 <_printf_i+0x182>
 802eaa0:	d822      	bhi.n	802eae8 <_printf_i+0x64>
 802eaa2:	2963      	cmp	r1, #99	; 0x63
 802eaa4:	d036      	beq.n	802eb14 <_printf_i+0x90>
 802eaa6:	d80a      	bhi.n	802eabe <_printf_i+0x3a>
 802eaa8:	2900      	cmp	r1, #0
 802eaaa:	f000 80b9 	beq.w	802ec20 <_printf_i+0x19c>
 802eaae:	2958      	cmp	r1, #88	; 0x58
 802eab0:	f000 8083 	beq.w	802ebba <_printf_i+0x136>
 802eab4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802eab8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 802eabc:	e032      	b.n	802eb24 <_printf_i+0xa0>
 802eabe:	2964      	cmp	r1, #100	; 0x64
 802eac0:	d001      	beq.n	802eac6 <_printf_i+0x42>
 802eac2:	2969      	cmp	r1, #105	; 0x69
 802eac4:	d1f6      	bne.n	802eab4 <_printf_i+0x30>
 802eac6:	6820      	ldr	r0, [r4, #0]
 802eac8:	6813      	ldr	r3, [r2, #0]
 802eaca:	0605      	lsls	r5, r0, #24
 802eacc:	f103 0104 	add.w	r1, r3, #4
 802ead0:	d52a      	bpl.n	802eb28 <_printf_i+0xa4>
 802ead2:	681b      	ldr	r3, [r3, #0]
 802ead4:	6011      	str	r1, [r2, #0]
 802ead6:	2b00      	cmp	r3, #0
 802ead8:	da03      	bge.n	802eae2 <_printf_i+0x5e>
 802eada:	222d      	movs	r2, #45	; 0x2d
 802eadc:	425b      	negs	r3, r3
 802eade:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 802eae2:	486f      	ldr	r0, [pc, #444]	; (802eca0 <_printf_i+0x21c>)
 802eae4:	220a      	movs	r2, #10
 802eae6:	e039      	b.n	802eb5c <_printf_i+0xd8>
 802eae8:	2973      	cmp	r1, #115	; 0x73
 802eaea:	f000 809d 	beq.w	802ec28 <_printf_i+0x1a4>
 802eaee:	d808      	bhi.n	802eb02 <_printf_i+0x7e>
 802eaf0:	296f      	cmp	r1, #111	; 0x6f
 802eaf2:	d020      	beq.n	802eb36 <_printf_i+0xb2>
 802eaf4:	2970      	cmp	r1, #112	; 0x70
 802eaf6:	d1dd      	bne.n	802eab4 <_printf_i+0x30>
 802eaf8:	6823      	ldr	r3, [r4, #0]
 802eafa:	f043 0320 	orr.w	r3, r3, #32
 802eafe:	6023      	str	r3, [r4, #0]
 802eb00:	e003      	b.n	802eb0a <_printf_i+0x86>
 802eb02:	2975      	cmp	r1, #117	; 0x75
 802eb04:	d017      	beq.n	802eb36 <_printf_i+0xb2>
 802eb06:	2978      	cmp	r1, #120	; 0x78
 802eb08:	d1d4      	bne.n	802eab4 <_printf_i+0x30>
 802eb0a:	2378      	movs	r3, #120	; 0x78
 802eb0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802eb10:	4864      	ldr	r0, [pc, #400]	; (802eca4 <_printf_i+0x220>)
 802eb12:	e055      	b.n	802ebc0 <_printf_i+0x13c>
 802eb14:	6813      	ldr	r3, [r2, #0]
 802eb16:	1d19      	adds	r1, r3, #4
 802eb18:	681b      	ldr	r3, [r3, #0]
 802eb1a:	6011      	str	r1, [r2, #0]
 802eb1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802eb20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802eb24:	2301      	movs	r3, #1
 802eb26:	e08c      	b.n	802ec42 <_printf_i+0x1be>
 802eb28:	681b      	ldr	r3, [r3, #0]
 802eb2a:	6011      	str	r1, [r2, #0]
 802eb2c:	f010 0f40 	tst.w	r0, #64	; 0x40
 802eb30:	bf18      	it	ne
 802eb32:	b21b      	sxthne	r3, r3
 802eb34:	e7cf      	b.n	802ead6 <_printf_i+0x52>
 802eb36:	6813      	ldr	r3, [r2, #0]
 802eb38:	6825      	ldr	r5, [r4, #0]
 802eb3a:	1d18      	adds	r0, r3, #4
 802eb3c:	6010      	str	r0, [r2, #0]
 802eb3e:	0628      	lsls	r0, r5, #24
 802eb40:	d501      	bpl.n	802eb46 <_printf_i+0xc2>
 802eb42:	681b      	ldr	r3, [r3, #0]
 802eb44:	e002      	b.n	802eb4c <_printf_i+0xc8>
 802eb46:	0668      	lsls	r0, r5, #25
 802eb48:	d5fb      	bpl.n	802eb42 <_printf_i+0xbe>
 802eb4a:	881b      	ldrh	r3, [r3, #0]
 802eb4c:	4854      	ldr	r0, [pc, #336]	; (802eca0 <_printf_i+0x21c>)
 802eb4e:	296f      	cmp	r1, #111	; 0x6f
 802eb50:	bf14      	ite	ne
 802eb52:	220a      	movne	r2, #10
 802eb54:	2208      	moveq	r2, #8
 802eb56:	2100      	movs	r1, #0
 802eb58:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802eb5c:	6865      	ldr	r5, [r4, #4]
 802eb5e:	60a5      	str	r5, [r4, #8]
 802eb60:	2d00      	cmp	r5, #0
 802eb62:	f2c0 8095 	blt.w	802ec90 <_printf_i+0x20c>
 802eb66:	6821      	ldr	r1, [r4, #0]
 802eb68:	f021 0104 	bic.w	r1, r1, #4
 802eb6c:	6021      	str	r1, [r4, #0]
 802eb6e:	2b00      	cmp	r3, #0
 802eb70:	d13d      	bne.n	802ebee <_printf_i+0x16a>
 802eb72:	2d00      	cmp	r5, #0
 802eb74:	f040 808e 	bne.w	802ec94 <_printf_i+0x210>
 802eb78:	4665      	mov	r5, ip
 802eb7a:	2a08      	cmp	r2, #8
 802eb7c:	d10b      	bne.n	802eb96 <_printf_i+0x112>
 802eb7e:	6823      	ldr	r3, [r4, #0]
 802eb80:	07db      	lsls	r3, r3, #31
 802eb82:	d508      	bpl.n	802eb96 <_printf_i+0x112>
 802eb84:	6923      	ldr	r3, [r4, #16]
 802eb86:	6862      	ldr	r2, [r4, #4]
 802eb88:	429a      	cmp	r2, r3
 802eb8a:	bfde      	ittt	le
 802eb8c:	2330      	movle	r3, #48	; 0x30
 802eb8e:	f805 3c01 	strble.w	r3, [r5, #-1]
 802eb92:	f105 35ff 	addle.w	r5, r5, #4294967295
 802eb96:	ebac 0305 	sub.w	r3, ip, r5
 802eb9a:	6123      	str	r3, [r4, #16]
 802eb9c:	f8cd 8000 	str.w	r8, [sp]
 802eba0:	463b      	mov	r3, r7
 802eba2:	aa03      	add	r2, sp, #12
 802eba4:	4621      	mov	r1, r4
 802eba6:	4630      	mov	r0, r6
 802eba8:	f7ff fef6 	bl	802e998 <_printf_common>
 802ebac:	3001      	adds	r0, #1
 802ebae:	d14d      	bne.n	802ec4c <_printf_i+0x1c8>
 802ebb0:	f04f 30ff 	mov.w	r0, #4294967295
 802ebb4:	b005      	add	sp, #20
 802ebb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802ebba:	4839      	ldr	r0, [pc, #228]	; (802eca0 <_printf_i+0x21c>)
 802ebbc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 802ebc0:	6813      	ldr	r3, [r2, #0]
 802ebc2:	6821      	ldr	r1, [r4, #0]
 802ebc4:	1d1d      	adds	r5, r3, #4
 802ebc6:	681b      	ldr	r3, [r3, #0]
 802ebc8:	6015      	str	r5, [r2, #0]
 802ebca:	060a      	lsls	r2, r1, #24
 802ebcc:	d50b      	bpl.n	802ebe6 <_printf_i+0x162>
 802ebce:	07ca      	lsls	r2, r1, #31
 802ebd0:	bf44      	itt	mi
 802ebd2:	f041 0120 	orrmi.w	r1, r1, #32
 802ebd6:	6021      	strmi	r1, [r4, #0]
 802ebd8:	b91b      	cbnz	r3, 802ebe2 <_printf_i+0x15e>
 802ebda:	6822      	ldr	r2, [r4, #0]
 802ebdc:	f022 0220 	bic.w	r2, r2, #32
 802ebe0:	6022      	str	r2, [r4, #0]
 802ebe2:	2210      	movs	r2, #16
 802ebe4:	e7b7      	b.n	802eb56 <_printf_i+0xd2>
 802ebe6:	064d      	lsls	r5, r1, #25
 802ebe8:	bf48      	it	mi
 802ebea:	b29b      	uxthmi	r3, r3
 802ebec:	e7ef      	b.n	802ebce <_printf_i+0x14a>
 802ebee:	4665      	mov	r5, ip
 802ebf0:	fbb3 f1f2 	udiv	r1, r3, r2
 802ebf4:	fb02 3311 	mls	r3, r2, r1, r3
 802ebf8:	5cc3      	ldrb	r3, [r0, r3]
 802ebfa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 802ebfe:	460b      	mov	r3, r1
 802ec00:	2900      	cmp	r1, #0
 802ec02:	d1f5      	bne.n	802ebf0 <_printf_i+0x16c>
 802ec04:	e7b9      	b.n	802eb7a <_printf_i+0xf6>
 802ec06:	6813      	ldr	r3, [r2, #0]
 802ec08:	6825      	ldr	r5, [r4, #0]
 802ec0a:	6961      	ldr	r1, [r4, #20]
 802ec0c:	1d18      	adds	r0, r3, #4
 802ec0e:	6010      	str	r0, [r2, #0]
 802ec10:	0628      	lsls	r0, r5, #24
 802ec12:	681b      	ldr	r3, [r3, #0]
 802ec14:	d501      	bpl.n	802ec1a <_printf_i+0x196>
 802ec16:	6019      	str	r1, [r3, #0]
 802ec18:	e002      	b.n	802ec20 <_printf_i+0x19c>
 802ec1a:	066a      	lsls	r2, r5, #25
 802ec1c:	d5fb      	bpl.n	802ec16 <_printf_i+0x192>
 802ec1e:	8019      	strh	r1, [r3, #0]
 802ec20:	2300      	movs	r3, #0
 802ec22:	6123      	str	r3, [r4, #16]
 802ec24:	4665      	mov	r5, ip
 802ec26:	e7b9      	b.n	802eb9c <_printf_i+0x118>
 802ec28:	6813      	ldr	r3, [r2, #0]
 802ec2a:	1d19      	adds	r1, r3, #4
 802ec2c:	6011      	str	r1, [r2, #0]
 802ec2e:	681d      	ldr	r5, [r3, #0]
 802ec30:	6862      	ldr	r2, [r4, #4]
 802ec32:	2100      	movs	r1, #0
 802ec34:	4628      	mov	r0, r5
 802ec36:	f7d8 f85b 	bl	8006cf0 <memchr>
 802ec3a:	b108      	cbz	r0, 802ec40 <_printf_i+0x1bc>
 802ec3c:	1b40      	subs	r0, r0, r5
 802ec3e:	6060      	str	r0, [r4, #4]
 802ec40:	6863      	ldr	r3, [r4, #4]
 802ec42:	6123      	str	r3, [r4, #16]
 802ec44:	2300      	movs	r3, #0
 802ec46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802ec4a:	e7a7      	b.n	802eb9c <_printf_i+0x118>
 802ec4c:	6923      	ldr	r3, [r4, #16]
 802ec4e:	462a      	mov	r2, r5
 802ec50:	4639      	mov	r1, r7
 802ec52:	4630      	mov	r0, r6
 802ec54:	47c0      	blx	r8
 802ec56:	3001      	adds	r0, #1
 802ec58:	d0aa      	beq.n	802ebb0 <_printf_i+0x12c>
 802ec5a:	6823      	ldr	r3, [r4, #0]
 802ec5c:	079b      	lsls	r3, r3, #30
 802ec5e:	d413      	bmi.n	802ec88 <_printf_i+0x204>
 802ec60:	68e0      	ldr	r0, [r4, #12]
 802ec62:	9b03      	ldr	r3, [sp, #12]
 802ec64:	4298      	cmp	r0, r3
 802ec66:	bfb8      	it	lt
 802ec68:	4618      	movlt	r0, r3
 802ec6a:	e7a3      	b.n	802ebb4 <_printf_i+0x130>
 802ec6c:	2301      	movs	r3, #1
 802ec6e:	464a      	mov	r2, r9
 802ec70:	4639      	mov	r1, r7
 802ec72:	4630      	mov	r0, r6
 802ec74:	47c0      	blx	r8
 802ec76:	3001      	adds	r0, #1
 802ec78:	d09a      	beq.n	802ebb0 <_printf_i+0x12c>
 802ec7a:	3501      	adds	r5, #1
 802ec7c:	68e3      	ldr	r3, [r4, #12]
 802ec7e:	9a03      	ldr	r2, [sp, #12]
 802ec80:	1a9b      	subs	r3, r3, r2
 802ec82:	42ab      	cmp	r3, r5
 802ec84:	dcf2      	bgt.n	802ec6c <_printf_i+0x1e8>
 802ec86:	e7eb      	b.n	802ec60 <_printf_i+0x1dc>
 802ec88:	2500      	movs	r5, #0
 802ec8a:	f104 0919 	add.w	r9, r4, #25
 802ec8e:	e7f5      	b.n	802ec7c <_printf_i+0x1f8>
 802ec90:	2b00      	cmp	r3, #0
 802ec92:	d1ac      	bne.n	802ebee <_printf_i+0x16a>
 802ec94:	7803      	ldrb	r3, [r0, #0]
 802ec96:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802ec9a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802ec9e:	e76c      	b.n	802eb7a <_printf_i+0xf6>
 802eca0:	080356b1 	.word	0x080356b1
 802eca4:	080356c2 	.word	0x080356c2

0802eca8 <_putc_r>:
 802eca8:	b570      	push	{r4, r5, r6, lr}
 802ecaa:	460d      	mov	r5, r1
 802ecac:	4614      	mov	r4, r2
 802ecae:	4606      	mov	r6, r0
 802ecb0:	b118      	cbz	r0, 802ecba <_putc_r+0x12>
 802ecb2:	6983      	ldr	r3, [r0, #24]
 802ecb4:	b90b      	cbnz	r3, 802ecba <_putc_r+0x12>
 802ecb6:	f000 fb1f 	bl	802f2f8 <__sinit>
 802ecba:	4b13      	ldr	r3, [pc, #76]	; (802ed08 <_putc_r+0x60>)
 802ecbc:	429c      	cmp	r4, r3
 802ecbe:	d112      	bne.n	802ece6 <_putc_r+0x3e>
 802ecc0:	6874      	ldr	r4, [r6, #4]
 802ecc2:	68a3      	ldr	r3, [r4, #8]
 802ecc4:	3b01      	subs	r3, #1
 802ecc6:	2b00      	cmp	r3, #0
 802ecc8:	60a3      	str	r3, [r4, #8]
 802ecca:	da16      	bge.n	802ecfa <_putc_r+0x52>
 802eccc:	69a2      	ldr	r2, [r4, #24]
 802ecce:	4293      	cmp	r3, r2
 802ecd0:	db02      	blt.n	802ecd8 <_putc_r+0x30>
 802ecd2:	b2eb      	uxtb	r3, r5
 802ecd4:	2b0a      	cmp	r3, #10
 802ecd6:	d110      	bne.n	802ecfa <_putc_r+0x52>
 802ecd8:	4622      	mov	r2, r4
 802ecda:	4629      	mov	r1, r5
 802ecdc:	4630      	mov	r0, r6
 802ecde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802ece2:	f000 b8e3 	b.w	802eeac <__swbuf_r>
 802ece6:	4b09      	ldr	r3, [pc, #36]	; (802ed0c <_putc_r+0x64>)
 802ece8:	429c      	cmp	r4, r3
 802ecea:	d101      	bne.n	802ecf0 <_putc_r+0x48>
 802ecec:	68b4      	ldr	r4, [r6, #8]
 802ecee:	e7e8      	b.n	802ecc2 <_putc_r+0x1a>
 802ecf0:	4b07      	ldr	r3, [pc, #28]	; (802ed10 <_putc_r+0x68>)
 802ecf2:	429c      	cmp	r4, r3
 802ecf4:	bf08      	it	eq
 802ecf6:	68f4      	ldreq	r4, [r6, #12]
 802ecf8:	e7e3      	b.n	802ecc2 <_putc_r+0x1a>
 802ecfa:	6823      	ldr	r3, [r4, #0]
 802ecfc:	1c5a      	adds	r2, r3, #1
 802ecfe:	6022      	str	r2, [r4, #0]
 802ed00:	701d      	strb	r5, [r3, #0]
 802ed02:	b2e8      	uxtb	r0, r5
 802ed04:	bd70      	pop	{r4, r5, r6, pc}
 802ed06:	bf00      	nop
 802ed08:	080356f8 	.word	0x080356f8
 802ed0c:	08035718 	.word	0x08035718
 802ed10:	080356d8 	.word	0x080356d8

0802ed14 <realloc>:
 802ed14:	4b02      	ldr	r3, [pc, #8]	; (802ed20 <realloc+0xc>)
 802ed16:	460a      	mov	r2, r1
 802ed18:	4601      	mov	r1, r0
 802ed1a:	6818      	ldr	r0, [r3, #0]
 802ed1c:	f000 bbf5 	b.w	802f50a <_realloc_r>
 802ed20:	20000114 	.word	0x20000114

0802ed24 <_sbrk_r>:
 802ed24:	b538      	push	{r3, r4, r5, lr}
 802ed26:	4c06      	ldr	r4, [pc, #24]	; (802ed40 <_sbrk_r+0x1c>)
 802ed28:	2300      	movs	r3, #0
 802ed2a:	4605      	mov	r5, r0
 802ed2c:	4608      	mov	r0, r1
 802ed2e:	6023      	str	r3, [r4, #0]
 802ed30:	f7dd fc64 	bl	800c5fc <_sbrk>
 802ed34:	1c43      	adds	r3, r0, #1
 802ed36:	d102      	bne.n	802ed3e <_sbrk_r+0x1a>
 802ed38:	6823      	ldr	r3, [r4, #0]
 802ed3a:	b103      	cbz	r3, 802ed3e <_sbrk_r+0x1a>
 802ed3c:	602b      	str	r3, [r5, #0]
 802ed3e:	bd38      	pop	{r3, r4, r5, pc}
 802ed40:	20013008 	.word	0x20013008

0802ed44 <_raise_r>:
 802ed44:	291f      	cmp	r1, #31
 802ed46:	b538      	push	{r3, r4, r5, lr}
 802ed48:	4604      	mov	r4, r0
 802ed4a:	460d      	mov	r5, r1
 802ed4c:	d904      	bls.n	802ed58 <_raise_r+0x14>
 802ed4e:	2316      	movs	r3, #22
 802ed50:	6003      	str	r3, [r0, #0]
 802ed52:	f04f 30ff 	mov.w	r0, #4294967295
 802ed56:	bd38      	pop	{r3, r4, r5, pc}
 802ed58:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802ed5a:	b112      	cbz	r2, 802ed62 <_raise_r+0x1e>
 802ed5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802ed60:	b94b      	cbnz	r3, 802ed76 <_raise_r+0x32>
 802ed62:	4620      	mov	r0, r4
 802ed64:	f000 f830 	bl	802edc8 <_getpid_r>
 802ed68:	462a      	mov	r2, r5
 802ed6a:	4601      	mov	r1, r0
 802ed6c:	4620      	mov	r0, r4
 802ed6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802ed72:	f000 b817 	b.w	802eda4 <_kill_r>
 802ed76:	2b01      	cmp	r3, #1
 802ed78:	d00a      	beq.n	802ed90 <_raise_r+0x4c>
 802ed7a:	1c59      	adds	r1, r3, #1
 802ed7c:	d103      	bne.n	802ed86 <_raise_r+0x42>
 802ed7e:	2316      	movs	r3, #22
 802ed80:	6003      	str	r3, [r0, #0]
 802ed82:	2001      	movs	r0, #1
 802ed84:	e7e7      	b.n	802ed56 <_raise_r+0x12>
 802ed86:	2400      	movs	r4, #0
 802ed88:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802ed8c:	4628      	mov	r0, r5
 802ed8e:	4798      	blx	r3
 802ed90:	2000      	movs	r0, #0
 802ed92:	e7e0      	b.n	802ed56 <_raise_r+0x12>

0802ed94 <raise>:
 802ed94:	4b02      	ldr	r3, [pc, #8]	; (802eda0 <raise+0xc>)
 802ed96:	4601      	mov	r1, r0
 802ed98:	6818      	ldr	r0, [r3, #0]
 802ed9a:	f7ff bfd3 	b.w	802ed44 <_raise_r>
 802ed9e:	bf00      	nop
 802eda0:	20000114 	.word	0x20000114

0802eda4 <_kill_r>:
 802eda4:	b538      	push	{r3, r4, r5, lr}
 802eda6:	4c07      	ldr	r4, [pc, #28]	; (802edc4 <_kill_r+0x20>)
 802eda8:	2300      	movs	r3, #0
 802edaa:	4605      	mov	r5, r0
 802edac:	4608      	mov	r0, r1
 802edae:	4611      	mov	r1, r2
 802edb0:	6023      	str	r3, [r4, #0]
 802edb2:	f7dd fb9b 	bl	800c4ec <_kill>
 802edb6:	1c43      	adds	r3, r0, #1
 802edb8:	d102      	bne.n	802edc0 <_kill_r+0x1c>
 802edba:	6823      	ldr	r3, [r4, #0]
 802edbc:	b103      	cbz	r3, 802edc0 <_kill_r+0x1c>
 802edbe:	602b      	str	r3, [r5, #0]
 802edc0:	bd38      	pop	{r3, r4, r5, pc}
 802edc2:	bf00      	nop
 802edc4:	20013008 	.word	0x20013008

0802edc8 <_getpid_r>:
 802edc8:	f7dd bb88 	b.w	800c4dc <_getpid>

0802edcc <sniprintf>:
 802edcc:	b40c      	push	{r2, r3}
 802edce:	b530      	push	{r4, r5, lr}
 802edd0:	4b17      	ldr	r3, [pc, #92]	; (802ee30 <sniprintf+0x64>)
 802edd2:	1e0c      	subs	r4, r1, #0
 802edd4:	b09d      	sub	sp, #116	; 0x74
 802edd6:	681d      	ldr	r5, [r3, #0]
 802edd8:	da08      	bge.n	802edec <sniprintf+0x20>
 802edda:	238b      	movs	r3, #139	; 0x8b
 802eddc:	602b      	str	r3, [r5, #0]
 802edde:	f04f 30ff 	mov.w	r0, #4294967295
 802ede2:	b01d      	add	sp, #116	; 0x74
 802ede4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802ede8:	b002      	add	sp, #8
 802edea:	4770      	bx	lr
 802edec:	f44f 7302 	mov.w	r3, #520	; 0x208
 802edf0:	f8ad 3014 	strh.w	r3, [sp, #20]
 802edf4:	bf14      	ite	ne
 802edf6:	f104 33ff 	addne.w	r3, r4, #4294967295
 802edfa:	4623      	moveq	r3, r4
 802edfc:	9304      	str	r3, [sp, #16]
 802edfe:	9307      	str	r3, [sp, #28]
 802ee00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802ee04:	9002      	str	r0, [sp, #8]
 802ee06:	9006      	str	r0, [sp, #24]
 802ee08:	f8ad 3016 	strh.w	r3, [sp, #22]
 802ee0c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802ee0e:	ab21      	add	r3, sp, #132	; 0x84
 802ee10:	a902      	add	r1, sp, #8
 802ee12:	4628      	mov	r0, r5
 802ee14:	9301      	str	r3, [sp, #4]
 802ee16:	f000 fbf9 	bl	802f60c <_svfiprintf_r>
 802ee1a:	1c43      	adds	r3, r0, #1
 802ee1c:	bfbc      	itt	lt
 802ee1e:	238b      	movlt	r3, #139	; 0x8b
 802ee20:	602b      	strlt	r3, [r5, #0]
 802ee22:	2c00      	cmp	r4, #0
 802ee24:	d0dd      	beq.n	802ede2 <sniprintf+0x16>
 802ee26:	9b02      	ldr	r3, [sp, #8]
 802ee28:	2200      	movs	r2, #0
 802ee2a:	701a      	strb	r2, [r3, #0]
 802ee2c:	e7d9      	b.n	802ede2 <sniprintf+0x16>
 802ee2e:	bf00      	nop
 802ee30:	20000114 	.word	0x20000114

0802ee34 <siprintf>:
 802ee34:	b40e      	push	{r1, r2, r3}
 802ee36:	b500      	push	{lr}
 802ee38:	b09c      	sub	sp, #112	; 0x70
 802ee3a:	ab1d      	add	r3, sp, #116	; 0x74
 802ee3c:	9002      	str	r0, [sp, #8]
 802ee3e:	9006      	str	r0, [sp, #24]
 802ee40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802ee44:	4809      	ldr	r0, [pc, #36]	; (802ee6c <siprintf+0x38>)
 802ee46:	9107      	str	r1, [sp, #28]
 802ee48:	9104      	str	r1, [sp, #16]
 802ee4a:	4909      	ldr	r1, [pc, #36]	; (802ee70 <siprintf+0x3c>)
 802ee4c:	f853 2b04 	ldr.w	r2, [r3], #4
 802ee50:	9105      	str	r1, [sp, #20]
 802ee52:	6800      	ldr	r0, [r0, #0]
 802ee54:	9301      	str	r3, [sp, #4]
 802ee56:	a902      	add	r1, sp, #8
 802ee58:	f000 fbd8 	bl	802f60c <_svfiprintf_r>
 802ee5c:	9b02      	ldr	r3, [sp, #8]
 802ee5e:	2200      	movs	r2, #0
 802ee60:	701a      	strb	r2, [r3, #0]
 802ee62:	b01c      	add	sp, #112	; 0x70
 802ee64:	f85d eb04 	ldr.w	lr, [sp], #4
 802ee68:	b003      	add	sp, #12
 802ee6a:	4770      	bx	lr
 802ee6c:	20000114 	.word	0x20000114
 802ee70:	ffff0208 	.word	0xffff0208

0802ee74 <strncmp>:
 802ee74:	b510      	push	{r4, lr}
 802ee76:	b16a      	cbz	r2, 802ee94 <strncmp+0x20>
 802ee78:	3901      	subs	r1, #1
 802ee7a:	1884      	adds	r4, r0, r2
 802ee7c:	f810 3b01 	ldrb.w	r3, [r0], #1
 802ee80:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802ee84:	4293      	cmp	r3, r2
 802ee86:	d103      	bne.n	802ee90 <strncmp+0x1c>
 802ee88:	42a0      	cmp	r0, r4
 802ee8a:	d001      	beq.n	802ee90 <strncmp+0x1c>
 802ee8c:	2b00      	cmp	r3, #0
 802ee8e:	d1f5      	bne.n	802ee7c <strncmp+0x8>
 802ee90:	1a98      	subs	r0, r3, r2
 802ee92:	bd10      	pop	{r4, pc}
 802ee94:	4610      	mov	r0, r2
 802ee96:	e7fc      	b.n	802ee92 <strncmp+0x1e>

0802ee98 <write>:
 802ee98:	4613      	mov	r3, r2
 802ee9a:	460a      	mov	r2, r1
 802ee9c:	4601      	mov	r1, r0
 802ee9e:	4802      	ldr	r0, [pc, #8]	; (802eea8 <write+0x10>)
 802eea0:	6800      	ldr	r0, [r0, #0]
 802eea2:	f000 b855 	b.w	802ef50 <_write_r>
 802eea6:	bf00      	nop
 802eea8:	20000114 	.word	0x20000114

0802eeac <__swbuf_r>:
 802eeac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802eeae:	460e      	mov	r6, r1
 802eeb0:	4614      	mov	r4, r2
 802eeb2:	4605      	mov	r5, r0
 802eeb4:	b118      	cbz	r0, 802eebe <__swbuf_r+0x12>
 802eeb6:	6983      	ldr	r3, [r0, #24]
 802eeb8:	b90b      	cbnz	r3, 802eebe <__swbuf_r+0x12>
 802eeba:	f000 fa1d 	bl	802f2f8 <__sinit>
 802eebe:	4b21      	ldr	r3, [pc, #132]	; (802ef44 <__swbuf_r+0x98>)
 802eec0:	429c      	cmp	r4, r3
 802eec2:	d12a      	bne.n	802ef1a <__swbuf_r+0x6e>
 802eec4:	686c      	ldr	r4, [r5, #4]
 802eec6:	69a3      	ldr	r3, [r4, #24]
 802eec8:	60a3      	str	r3, [r4, #8]
 802eeca:	89a3      	ldrh	r3, [r4, #12]
 802eecc:	071a      	lsls	r2, r3, #28
 802eece:	d52e      	bpl.n	802ef2e <__swbuf_r+0x82>
 802eed0:	6923      	ldr	r3, [r4, #16]
 802eed2:	b363      	cbz	r3, 802ef2e <__swbuf_r+0x82>
 802eed4:	6923      	ldr	r3, [r4, #16]
 802eed6:	6820      	ldr	r0, [r4, #0]
 802eed8:	1ac0      	subs	r0, r0, r3
 802eeda:	6963      	ldr	r3, [r4, #20]
 802eedc:	b2f6      	uxtb	r6, r6
 802eede:	4283      	cmp	r3, r0
 802eee0:	4637      	mov	r7, r6
 802eee2:	dc04      	bgt.n	802eeee <__swbuf_r+0x42>
 802eee4:	4621      	mov	r1, r4
 802eee6:	4628      	mov	r0, r5
 802eee8:	f000 f99c 	bl	802f224 <_fflush_r>
 802eeec:	bb28      	cbnz	r0, 802ef3a <__swbuf_r+0x8e>
 802eeee:	68a3      	ldr	r3, [r4, #8]
 802eef0:	3b01      	subs	r3, #1
 802eef2:	60a3      	str	r3, [r4, #8]
 802eef4:	6823      	ldr	r3, [r4, #0]
 802eef6:	1c5a      	adds	r2, r3, #1
 802eef8:	6022      	str	r2, [r4, #0]
 802eefa:	701e      	strb	r6, [r3, #0]
 802eefc:	6963      	ldr	r3, [r4, #20]
 802eefe:	3001      	adds	r0, #1
 802ef00:	4283      	cmp	r3, r0
 802ef02:	d004      	beq.n	802ef0e <__swbuf_r+0x62>
 802ef04:	89a3      	ldrh	r3, [r4, #12]
 802ef06:	07db      	lsls	r3, r3, #31
 802ef08:	d519      	bpl.n	802ef3e <__swbuf_r+0x92>
 802ef0a:	2e0a      	cmp	r6, #10
 802ef0c:	d117      	bne.n	802ef3e <__swbuf_r+0x92>
 802ef0e:	4621      	mov	r1, r4
 802ef10:	4628      	mov	r0, r5
 802ef12:	f000 f987 	bl	802f224 <_fflush_r>
 802ef16:	b190      	cbz	r0, 802ef3e <__swbuf_r+0x92>
 802ef18:	e00f      	b.n	802ef3a <__swbuf_r+0x8e>
 802ef1a:	4b0b      	ldr	r3, [pc, #44]	; (802ef48 <__swbuf_r+0x9c>)
 802ef1c:	429c      	cmp	r4, r3
 802ef1e:	d101      	bne.n	802ef24 <__swbuf_r+0x78>
 802ef20:	68ac      	ldr	r4, [r5, #8]
 802ef22:	e7d0      	b.n	802eec6 <__swbuf_r+0x1a>
 802ef24:	4b09      	ldr	r3, [pc, #36]	; (802ef4c <__swbuf_r+0xa0>)
 802ef26:	429c      	cmp	r4, r3
 802ef28:	bf08      	it	eq
 802ef2a:	68ec      	ldreq	r4, [r5, #12]
 802ef2c:	e7cb      	b.n	802eec6 <__swbuf_r+0x1a>
 802ef2e:	4621      	mov	r1, r4
 802ef30:	4628      	mov	r0, r5
 802ef32:	f000 f81f 	bl	802ef74 <__swsetup_r>
 802ef36:	2800      	cmp	r0, #0
 802ef38:	d0cc      	beq.n	802eed4 <__swbuf_r+0x28>
 802ef3a:	f04f 37ff 	mov.w	r7, #4294967295
 802ef3e:	4638      	mov	r0, r7
 802ef40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802ef42:	bf00      	nop
 802ef44:	080356f8 	.word	0x080356f8
 802ef48:	08035718 	.word	0x08035718
 802ef4c:	080356d8 	.word	0x080356d8

0802ef50 <_write_r>:
 802ef50:	b538      	push	{r3, r4, r5, lr}
 802ef52:	4c07      	ldr	r4, [pc, #28]	; (802ef70 <_write_r+0x20>)
 802ef54:	4605      	mov	r5, r0
 802ef56:	4608      	mov	r0, r1
 802ef58:	4611      	mov	r1, r2
 802ef5a:	2200      	movs	r2, #0
 802ef5c:	6022      	str	r2, [r4, #0]
 802ef5e:	461a      	mov	r2, r3
 802ef60:	f7dd fafb 	bl	800c55a <_write>
 802ef64:	1c43      	adds	r3, r0, #1
 802ef66:	d102      	bne.n	802ef6e <_write_r+0x1e>
 802ef68:	6823      	ldr	r3, [r4, #0]
 802ef6a:	b103      	cbz	r3, 802ef6e <_write_r+0x1e>
 802ef6c:	602b      	str	r3, [r5, #0]
 802ef6e:	bd38      	pop	{r3, r4, r5, pc}
 802ef70:	20013008 	.word	0x20013008

0802ef74 <__swsetup_r>:
 802ef74:	4b32      	ldr	r3, [pc, #200]	; (802f040 <__swsetup_r+0xcc>)
 802ef76:	b570      	push	{r4, r5, r6, lr}
 802ef78:	681d      	ldr	r5, [r3, #0]
 802ef7a:	4606      	mov	r6, r0
 802ef7c:	460c      	mov	r4, r1
 802ef7e:	b125      	cbz	r5, 802ef8a <__swsetup_r+0x16>
 802ef80:	69ab      	ldr	r3, [r5, #24]
 802ef82:	b913      	cbnz	r3, 802ef8a <__swsetup_r+0x16>
 802ef84:	4628      	mov	r0, r5
 802ef86:	f000 f9b7 	bl	802f2f8 <__sinit>
 802ef8a:	4b2e      	ldr	r3, [pc, #184]	; (802f044 <__swsetup_r+0xd0>)
 802ef8c:	429c      	cmp	r4, r3
 802ef8e:	d10f      	bne.n	802efb0 <__swsetup_r+0x3c>
 802ef90:	686c      	ldr	r4, [r5, #4]
 802ef92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802ef96:	b29a      	uxth	r2, r3
 802ef98:	0715      	lsls	r5, r2, #28
 802ef9a:	d42c      	bmi.n	802eff6 <__swsetup_r+0x82>
 802ef9c:	06d0      	lsls	r0, r2, #27
 802ef9e:	d411      	bmi.n	802efc4 <__swsetup_r+0x50>
 802efa0:	2209      	movs	r2, #9
 802efa2:	6032      	str	r2, [r6, #0]
 802efa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802efa8:	81a3      	strh	r3, [r4, #12]
 802efaa:	f04f 30ff 	mov.w	r0, #4294967295
 802efae:	e03e      	b.n	802f02e <__swsetup_r+0xba>
 802efb0:	4b25      	ldr	r3, [pc, #148]	; (802f048 <__swsetup_r+0xd4>)
 802efb2:	429c      	cmp	r4, r3
 802efb4:	d101      	bne.n	802efba <__swsetup_r+0x46>
 802efb6:	68ac      	ldr	r4, [r5, #8]
 802efb8:	e7eb      	b.n	802ef92 <__swsetup_r+0x1e>
 802efba:	4b24      	ldr	r3, [pc, #144]	; (802f04c <__swsetup_r+0xd8>)
 802efbc:	429c      	cmp	r4, r3
 802efbe:	bf08      	it	eq
 802efc0:	68ec      	ldreq	r4, [r5, #12]
 802efc2:	e7e6      	b.n	802ef92 <__swsetup_r+0x1e>
 802efc4:	0751      	lsls	r1, r2, #29
 802efc6:	d512      	bpl.n	802efee <__swsetup_r+0x7a>
 802efc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802efca:	b141      	cbz	r1, 802efde <__swsetup_r+0x6a>
 802efcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802efd0:	4299      	cmp	r1, r3
 802efd2:	d002      	beq.n	802efda <__swsetup_r+0x66>
 802efd4:	4630      	mov	r0, r6
 802efd6:	f7ff faf7 	bl	802e5c8 <_free_r>
 802efda:	2300      	movs	r3, #0
 802efdc:	6363      	str	r3, [r4, #52]	; 0x34
 802efde:	89a3      	ldrh	r3, [r4, #12]
 802efe0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802efe4:	81a3      	strh	r3, [r4, #12]
 802efe6:	2300      	movs	r3, #0
 802efe8:	6063      	str	r3, [r4, #4]
 802efea:	6923      	ldr	r3, [r4, #16]
 802efec:	6023      	str	r3, [r4, #0]
 802efee:	89a3      	ldrh	r3, [r4, #12]
 802eff0:	f043 0308 	orr.w	r3, r3, #8
 802eff4:	81a3      	strh	r3, [r4, #12]
 802eff6:	6923      	ldr	r3, [r4, #16]
 802eff8:	b94b      	cbnz	r3, 802f00e <__swsetup_r+0x9a>
 802effa:	89a3      	ldrh	r3, [r4, #12]
 802effc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802f000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802f004:	d003      	beq.n	802f00e <__swsetup_r+0x9a>
 802f006:	4621      	mov	r1, r4
 802f008:	4630      	mov	r0, r6
 802f00a:	f000 fa23 	bl	802f454 <__smakebuf_r>
 802f00e:	89a2      	ldrh	r2, [r4, #12]
 802f010:	f012 0301 	ands.w	r3, r2, #1
 802f014:	d00c      	beq.n	802f030 <__swsetup_r+0xbc>
 802f016:	2300      	movs	r3, #0
 802f018:	60a3      	str	r3, [r4, #8]
 802f01a:	6963      	ldr	r3, [r4, #20]
 802f01c:	425b      	negs	r3, r3
 802f01e:	61a3      	str	r3, [r4, #24]
 802f020:	6923      	ldr	r3, [r4, #16]
 802f022:	b953      	cbnz	r3, 802f03a <__swsetup_r+0xc6>
 802f024:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802f028:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 802f02c:	d1ba      	bne.n	802efa4 <__swsetup_r+0x30>
 802f02e:	bd70      	pop	{r4, r5, r6, pc}
 802f030:	0792      	lsls	r2, r2, #30
 802f032:	bf58      	it	pl
 802f034:	6963      	ldrpl	r3, [r4, #20]
 802f036:	60a3      	str	r3, [r4, #8]
 802f038:	e7f2      	b.n	802f020 <__swsetup_r+0xac>
 802f03a:	2000      	movs	r0, #0
 802f03c:	e7f7      	b.n	802f02e <__swsetup_r+0xba>
 802f03e:	bf00      	nop
 802f040:	20000114 	.word	0x20000114
 802f044:	080356f8 	.word	0x080356f8
 802f048:	08035718 	.word	0x08035718
 802f04c:	080356d8 	.word	0x080356d8

0802f050 <__register_exitproc>:
 802f050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802f054:	4d2c      	ldr	r5, [pc, #176]	; (802f108 <__register_exitproc+0xb8>)
 802f056:	682c      	ldr	r4, [r5, #0]
 802f058:	4607      	mov	r7, r0
 802f05a:	460e      	mov	r6, r1
 802f05c:	4691      	mov	r9, r2
 802f05e:	4698      	mov	r8, r3
 802f060:	b934      	cbnz	r4, 802f070 <__register_exitproc+0x20>
 802f062:	4b2a      	ldr	r3, [pc, #168]	; (802f10c <__register_exitproc+0xbc>)
 802f064:	4c2a      	ldr	r4, [pc, #168]	; (802f110 <__register_exitproc+0xc0>)
 802f066:	602c      	str	r4, [r5, #0]
 802f068:	b113      	cbz	r3, 802f070 <__register_exitproc+0x20>
 802f06a:	681b      	ldr	r3, [r3, #0]
 802f06c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802f070:	6863      	ldr	r3, [r4, #4]
 802f072:	2b1f      	cmp	r3, #31
 802f074:	dd3d      	ble.n	802f0f2 <__register_exitproc+0xa2>
 802f076:	4b27      	ldr	r3, [pc, #156]	; (802f114 <__register_exitproc+0xc4>)
 802f078:	b91b      	cbnz	r3, 802f082 <__register_exitproc+0x32>
 802f07a:	f04f 30ff 	mov.w	r0, #4294967295
 802f07e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802f082:	208c      	movs	r0, #140	; 0x8c
 802f084:	f7ff fa6e 	bl	802e564 <malloc>
 802f088:	4604      	mov	r4, r0
 802f08a:	2800      	cmp	r0, #0
 802f08c:	d0f5      	beq.n	802f07a <__register_exitproc+0x2a>
 802f08e:	2300      	movs	r3, #0
 802f090:	682a      	ldr	r2, [r5, #0]
 802f092:	6002      	str	r2, [r0, #0]
 802f094:	6043      	str	r3, [r0, #4]
 802f096:	6028      	str	r0, [r5, #0]
 802f098:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 802f09c:	b30f      	cbz	r7, 802f0e2 <__register_exitproc+0x92>
 802f09e:	f44f 7084 	mov.w	r0, #264	; 0x108
 802f0a2:	f7ff fa5f 	bl	802e564 <malloc>
 802f0a6:	2800      	cmp	r0, #0
 802f0a8:	d0e7      	beq.n	802f07a <__register_exitproc+0x2a>
 802f0aa:	2300      	movs	r3, #0
 802f0ac:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802f0b0:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 802f0b4:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802f0b8:	6862      	ldr	r2, [r4, #4]
 802f0ba:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 802f0be:	2301      	movs	r3, #1
 802f0c0:	4093      	lsls	r3, r2
 802f0c2:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 802f0c6:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 802f0ca:	431a      	orrs	r2, r3
 802f0cc:	2f02      	cmp	r7, #2
 802f0ce:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 802f0d2:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 802f0d6:	bf02      	ittt	eq
 802f0d8:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 802f0dc:	4313      	orreq	r3, r2
 802f0de:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 802f0e2:	6863      	ldr	r3, [r4, #4]
 802f0e4:	1c5a      	adds	r2, r3, #1
 802f0e6:	3302      	adds	r3, #2
 802f0e8:	6062      	str	r2, [r4, #4]
 802f0ea:	2000      	movs	r0, #0
 802f0ec:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 802f0f0:	e7c5      	b.n	802f07e <__register_exitproc+0x2e>
 802f0f2:	2f00      	cmp	r7, #0
 802f0f4:	d0f5      	beq.n	802f0e2 <__register_exitproc+0x92>
 802f0f6:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802f0fa:	2800      	cmp	r0, #0
 802f0fc:	d1dc      	bne.n	802f0b8 <__register_exitproc+0x68>
 802f0fe:	4b05      	ldr	r3, [pc, #20]	; (802f114 <__register_exitproc+0xc4>)
 802f100:	2b00      	cmp	r3, #0
 802f102:	d0ba      	beq.n	802f07a <__register_exitproc+0x2a>
 802f104:	e7cb      	b.n	802f09e <__register_exitproc+0x4e>
 802f106:	bf00      	nop
 802f108:	20012acc 	.word	0x20012acc
 802f10c:	080356d4 	.word	0x080356d4
 802f110:	20012a40 	.word	0x20012a40
 802f114:	0802e565 	.word	0x0802e565

0802f118 <__sflush_r>:
 802f118:	898a      	ldrh	r2, [r1, #12]
 802f11a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802f11e:	4605      	mov	r5, r0
 802f120:	0710      	lsls	r0, r2, #28
 802f122:	460c      	mov	r4, r1
 802f124:	d458      	bmi.n	802f1d8 <__sflush_r+0xc0>
 802f126:	684b      	ldr	r3, [r1, #4]
 802f128:	2b00      	cmp	r3, #0
 802f12a:	dc05      	bgt.n	802f138 <__sflush_r+0x20>
 802f12c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802f12e:	2b00      	cmp	r3, #0
 802f130:	dc02      	bgt.n	802f138 <__sflush_r+0x20>
 802f132:	2000      	movs	r0, #0
 802f134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802f138:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802f13a:	2e00      	cmp	r6, #0
 802f13c:	d0f9      	beq.n	802f132 <__sflush_r+0x1a>
 802f13e:	2300      	movs	r3, #0
 802f140:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802f144:	682f      	ldr	r7, [r5, #0]
 802f146:	6a21      	ldr	r1, [r4, #32]
 802f148:	602b      	str	r3, [r5, #0]
 802f14a:	d032      	beq.n	802f1b2 <__sflush_r+0x9a>
 802f14c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802f14e:	89a3      	ldrh	r3, [r4, #12]
 802f150:	075a      	lsls	r2, r3, #29
 802f152:	d505      	bpl.n	802f160 <__sflush_r+0x48>
 802f154:	6863      	ldr	r3, [r4, #4]
 802f156:	1ac0      	subs	r0, r0, r3
 802f158:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802f15a:	b10b      	cbz	r3, 802f160 <__sflush_r+0x48>
 802f15c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802f15e:	1ac0      	subs	r0, r0, r3
 802f160:	2300      	movs	r3, #0
 802f162:	4602      	mov	r2, r0
 802f164:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802f166:	6a21      	ldr	r1, [r4, #32]
 802f168:	4628      	mov	r0, r5
 802f16a:	47b0      	blx	r6
 802f16c:	1c43      	adds	r3, r0, #1
 802f16e:	89a3      	ldrh	r3, [r4, #12]
 802f170:	d106      	bne.n	802f180 <__sflush_r+0x68>
 802f172:	6829      	ldr	r1, [r5, #0]
 802f174:	291d      	cmp	r1, #29
 802f176:	d848      	bhi.n	802f20a <__sflush_r+0xf2>
 802f178:	4a29      	ldr	r2, [pc, #164]	; (802f220 <__sflush_r+0x108>)
 802f17a:	40ca      	lsrs	r2, r1
 802f17c:	07d6      	lsls	r6, r2, #31
 802f17e:	d544      	bpl.n	802f20a <__sflush_r+0xf2>
 802f180:	2200      	movs	r2, #0
 802f182:	6062      	str	r2, [r4, #4]
 802f184:	04d9      	lsls	r1, r3, #19
 802f186:	6922      	ldr	r2, [r4, #16]
 802f188:	6022      	str	r2, [r4, #0]
 802f18a:	d504      	bpl.n	802f196 <__sflush_r+0x7e>
 802f18c:	1c42      	adds	r2, r0, #1
 802f18e:	d101      	bne.n	802f194 <__sflush_r+0x7c>
 802f190:	682b      	ldr	r3, [r5, #0]
 802f192:	b903      	cbnz	r3, 802f196 <__sflush_r+0x7e>
 802f194:	6560      	str	r0, [r4, #84]	; 0x54
 802f196:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802f198:	602f      	str	r7, [r5, #0]
 802f19a:	2900      	cmp	r1, #0
 802f19c:	d0c9      	beq.n	802f132 <__sflush_r+0x1a>
 802f19e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802f1a2:	4299      	cmp	r1, r3
 802f1a4:	d002      	beq.n	802f1ac <__sflush_r+0x94>
 802f1a6:	4628      	mov	r0, r5
 802f1a8:	f7ff fa0e 	bl	802e5c8 <_free_r>
 802f1ac:	2000      	movs	r0, #0
 802f1ae:	6360      	str	r0, [r4, #52]	; 0x34
 802f1b0:	e7c0      	b.n	802f134 <__sflush_r+0x1c>
 802f1b2:	2301      	movs	r3, #1
 802f1b4:	4628      	mov	r0, r5
 802f1b6:	47b0      	blx	r6
 802f1b8:	1c41      	adds	r1, r0, #1
 802f1ba:	d1c8      	bne.n	802f14e <__sflush_r+0x36>
 802f1bc:	682b      	ldr	r3, [r5, #0]
 802f1be:	2b00      	cmp	r3, #0
 802f1c0:	d0c5      	beq.n	802f14e <__sflush_r+0x36>
 802f1c2:	2b1d      	cmp	r3, #29
 802f1c4:	d001      	beq.n	802f1ca <__sflush_r+0xb2>
 802f1c6:	2b16      	cmp	r3, #22
 802f1c8:	d101      	bne.n	802f1ce <__sflush_r+0xb6>
 802f1ca:	602f      	str	r7, [r5, #0]
 802f1cc:	e7b1      	b.n	802f132 <__sflush_r+0x1a>
 802f1ce:	89a3      	ldrh	r3, [r4, #12]
 802f1d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802f1d4:	81a3      	strh	r3, [r4, #12]
 802f1d6:	e7ad      	b.n	802f134 <__sflush_r+0x1c>
 802f1d8:	690f      	ldr	r7, [r1, #16]
 802f1da:	2f00      	cmp	r7, #0
 802f1dc:	d0a9      	beq.n	802f132 <__sflush_r+0x1a>
 802f1de:	0793      	lsls	r3, r2, #30
 802f1e0:	680e      	ldr	r6, [r1, #0]
 802f1e2:	bf08      	it	eq
 802f1e4:	694b      	ldreq	r3, [r1, #20]
 802f1e6:	600f      	str	r7, [r1, #0]
 802f1e8:	bf18      	it	ne
 802f1ea:	2300      	movne	r3, #0
 802f1ec:	eba6 0807 	sub.w	r8, r6, r7
 802f1f0:	608b      	str	r3, [r1, #8]
 802f1f2:	f1b8 0f00 	cmp.w	r8, #0
 802f1f6:	dd9c      	ble.n	802f132 <__sflush_r+0x1a>
 802f1f8:	4643      	mov	r3, r8
 802f1fa:	463a      	mov	r2, r7
 802f1fc:	6a21      	ldr	r1, [r4, #32]
 802f1fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802f200:	4628      	mov	r0, r5
 802f202:	47b0      	blx	r6
 802f204:	2800      	cmp	r0, #0
 802f206:	dc06      	bgt.n	802f216 <__sflush_r+0xfe>
 802f208:	89a3      	ldrh	r3, [r4, #12]
 802f20a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802f20e:	81a3      	strh	r3, [r4, #12]
 802f210:	f04f 30ff 	mov.w	r0, #4294967295
 802f214:	e78e      	b.n	802f134 <__sflush_r+0x1c>
 802f216:	4407      	add	r7, r0
 802f218:	eba8 0800 	sub.w	r8, r8, r0
 802f21c:	e7e9      	b.n	802f1f2 <__sflush_r+0xda>
 802f21e:	bf00      	nop
 802f220:	20400001 	.word	0x20400001

0802f224 <_fflush_r>:
 802f224:	b538      	push	{r3, r4, r5, lr}
 802f226:	690b      	ldr	r3, [r1, #16]
 802f228:	4605      	mov	r5, r0
 802f22a:	460c      	mov	r4, r1
 802f22c:	b1db      	cbz	r3, 802f266 <_fflush_r+0x42>
 802f22e:	b118      	cbz	r0, 802f238 <_fflush_r+0x14>
 802f230:	6983      	ldr	r3, [r0, #24]
 802f232:	b90b      	cbnz	r3, 802f238 <_fflush_r+0x14>
 802f234:	f000 f860 	bl	802f2f8 <__sinit>
 802f238:	4b0c      	ldr	r3, [pc, #48]	; (802f26c <_fflush_r+0x48>)
 802f23a:	429c      	cmp	r4, r3
 802f23c:	d109      	bne.n	802f252 <_fflush_r+0x2e>
 802f23e:	686c      	ldr	r4, [r5, #4]
 802f240:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802f244:	b17b      	cbz	r3, 802f266 <_fflush_r+0x42>
 802f246:	4621      	mov	r1, r4
 802f248:	4628      	mov	r0, r5
 802f24a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802f24e:	f7ff bf63 	b.w	802f118 <__sflush_r>
 802f252:	4b07      	ldr	r3, [pc, #28]	; (802f270 <_fflush_r+0x4c>)
 802f254:	429c      	cmp	r4, r3
 802f256:	d101      	bne.n	802f25c <_fflush_r+0x38>
 802f258:	68ac      	ldr	r4, [r5, #8]
 802f25a:	e7f1      	b.n	802f240 <_fflush_r+0x1c>
 802f25c:	4b05      	ldr	r3, [pc, #20]	; (802f274 <_fflush_r+0x50>)
 802f25e:	429c      	cmp	r4, r3
 802f260:	bf08      	it	eq
 802f262:	68ec      	ldreq	r4, [r5, #12]
 802f264:	e7ec      	b.n	802f240 <_fflush_r+0x1c>
 802f266:	2000      	movs	r0, #0
 802f268:	bd38      	pop	{r3, r4, r5, pc}
 802f26a:	bf00      	nop
 802f26c:	080356f8 	.word	0x080356f8
 802f270:	08035718 	.word	0x08035718
 802f274:	080356d8 	.word	0x080356d8

0802f278 <std>:
 802f278:	2300      	movs	r3, #0
 802f27a:	b510      	push	{r4, lr}
 802f27c:	4604      	mov	r4, r0
 802f27e:	e9c0 3300 	strd	r3, r3, [r0]
 802f282:	6083      	str	r3, [r0, #8]
 802f284:	8181      	strh	r1, [r0, #12]
 802f286:	6643      	str	r3, [r0, #100]	; 0x64
 802f288:	81c2      	strh	r2, [r0, #14]
 802f28a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802f28e:	6183      	str	r3, [r0, #24]
 802f290:	4619      	mov	r1, r3
 802f292:	2208      	movs	r2, #8
 802f294:	305c      	adds	r0, #92	; 0x5c
 802f296:	f7ff f98f 	bl	802e5b8 <memset>
 802f29a:	4b05      	ldr	r3, [pc, #20]	; (802f2b0 <std+0x38>)
 802f29c:	6263      	str	r3, [r4, #36]	; 0x24
 802f29e:	4b05      	ldr	r3, [pc, #20]	; (802f2b4 <std+0x3c>)
 802f2a0:	62a3      	str	r3, [r4, #40]	; 0x28
 802f2a2:	4b05      	ldr	r3, [pc, #20]	; (802f2b8 <std+0x40>)
 802f2a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 802f2a6:	4b05      	ldr	r3, [pc, #20]	; (802f2bc <std+0x44>)
 802f2a8:	6224      	str	r4, [r4, #32]
 802f2aa:	6323      	str	r3, [r4, #48]	; 0x30
 802f2ac:	bd10      	pop	{r4, pc}
 802f2ae:	bf00      	nop
 802f2b0:	0802f7fd 	.word	0x0802f7fd
 802f2b4:	0802f81f 	.word	0x0802f81f
 802f2b8:	0802f857 	.word	0x0802f857
 802f2bc:	0802f87b 	.word	0x0802f87b

0802f2c0 <_cleanup_r>:
 802f2c0:	4901      	ldr	r1, [pc, #4]	; (802f2c8 <_cleanup_r+0x8>)
 802f2c2:	f000 b885 	b.w	802f3d0 <_fwalk_reent>
 802f2c6:	bf00      	nop
 802f2c8:	0802f225 	.word	0x0802f225

0802f2cc <__sfmoreglue>:
 802f2cc:	b570      	push	{r4, r5, r6, lr}
 802f2ce:	1e4a      	subs	r2, r1, #1
 802f2d0:	2568      	movs	r5, #104	; 0x68
 802f2d2:	4355      	muls	r5, r2
 802f2d4:	460e      	mov	r6, r1
 802f2d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802f2da:	f7ff f9c3 	bl	802e664 <_malloc_r>
 802f2de:	4604      	mov	r4, r0
 802f2e0:	b140      	cbz	r0, 802f2f4 <__sfmoreglue+0x28>
 802f2e2:	2100      	movs	r1, #0
 802f2e4:	e9c0 1600 	strd	r1, r6, [r0]
 802f2e8:	300c      	adds	r0, #12
 802f2ea:	60a0      	str	r0, [r4, #8]
 802f2ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802f2f0:	f7ff f962 	bl	802e5b8 <memset>
 802f2f4:	4620      	mov	r0, r4
 802f2f6:	bd70      	pop	{r4, r5, r6, pc}

0802f2f8 <__sinit>:
 802f2f8:	6983      	ldr	r3, [r0, #24]
 802f2fa:	b510      	push	{r4, lr}
 802f2fc:	4604      	mov	r4, r0
 802f2fe:	bb33      	cbnz	r3, 802f34e <__sinit+0x56>
 802f300:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 802f304:	6503      	str	r3, [r0, #80]	; 0x50
 802f306:	4b12      	ldr	r3, [pc, #72]	; (802f350 <__sinit+0x58>)
 802f308:	4a12      	ldr	r2, [pc, #72]	; (802f354 <__sinit+0x5c>)
 802f30a:	681b      	ldr	r3, [r3, #0]
 802f30c:	6282      	str	r2, [r0, #40]	; 0x28
 802f30e:	4298      	cmp	r0, r3
 802f310:	bf04      	itt	eq
 802f312:	2301      	moveq	r3, #1
 802f314:	6183      	streq	r3, [r0, #24]
 802f316:	f000 f81f 	bl	802f358 <__sfp>
 802f31a:	6060      	str	r0, [r4, #4]
 802f31c:	4620      	mov	r0, r4
 802f31e:	f000 f81b 	bl	802f358 <__sfp>
 802f322:	60a0      	str	r0, [r4, #8]
 802f324:	4620      	mov	r0, r4
 802f326:	f000 f817 	bl	802f358 <__sfp>
 802f32a:	2200      	movs	r2, #0
 802f32c:	60e0      	str	r0, [r4, #12]
 802f32e:	2104      	movs	r1, #4
 802f330:	6860      	ldr	r0, [r4, #4]
 802f332:	f7ff ffa1 	bl	802f278 <std>
 802f336:	2201      	movs	r2, #1
 802f338:	2109      	movs	r1, #9
 802f33a:	68a0      	ldr	r0, [r4, #8]
 802f33c:	f7ff ff9c 	bl	802f278 <std>
 802f340:	2202      	movs	r2, #2
 802f342:	2112      	movs	r1, #18
 802f344:	68e0      	ldr	r0, [r4, #12]
 802f346:	f7ff ff97 	bl	802f278 <std>
 802f34a:	2301      	movs	r3, #1
 802f34c:	61a3      	str	r3, [r4, #24]
 802f34e:	bd10      	pop	{r4, pc}
 802f350:	0803569c 	.word	0x0803569c
 802f354:	0802f2c1 	.word	0x0802f2c1

0802f358 <__sfp>:
 802f358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802f35a:	4b1b      	ldr	r3, [pc, #108]	; (802f3c8 <__sfp+0x70>)
 802f35c:	681e      	ldr	r6, [r3, #0]
 802f35e:	69b3      	ldr	r3, [r6, #24]
 802f360:	4607      	mov	r7, r0
 802f362:	b913      	cbnz	r3, 802f36a <__sfp+0x12>
 802f364:	4630      	mov	r0, r6
 802f366:	f7ff ffc7 	bl	802f2f8 <__sinit>
 802f36a:	3648      	adds	r6, #72	; 0x48
 802f36c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802f370:	3b01      	subs	r3, #1
 802f372:	d503      	bpl.n	802f37c <__sfp+0x24>
 802f374:	6833      	ldr	r3, [r6, #0]
 802f376:	b133      	cbz	r3, 802f386 <__sfp+0x2e>
 802f378:	6836      	ldr	r6, [r6, #0]
 802f37a:	e7f7      	b.n	802f36c <__sfp+0x14>
 802f37c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802f380:	b16d      	cbz	r5, 802f39e <__sfp+0x46>
 802f382:	3468      	adds	r4, #104	; 0x68
 802f384:	e7f4      	b.n	802f370 <__sfp+0x18>
 802f386:	2104      	movs	r1, #4
 802f388:	4638      	mov	r0, r7
 802f38a:	f7ff ff9f 	bl	802f2cc <__sfmoreglue>
 802f38e:	6030      	str	r0, [r6, #0]
 802f390:	2800      	cmp	r0, #0
 802f392:	d1f1      	bne.n	802f378 <__sfp+0x20>
 802f394:	230c      	movs	r3, #12
 802f396:	603b      	str	r3, [r7, #0]
 802f398:	4604      	mov	r4, r0
 802f39a:	4620      	mov	r0, r4
 802f39c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802f39e:	4b0b      	ldr	r3, [pc, #44]	; (802f3cc <__sfp+0x74>)
 802f3a0:	6665      	str	r5, [r4, #100]	; 0x64
 802f3a2:	e9c4 5500 	strd	r5, r5, [r4]
 802f3a6:	60a5      	str	r5, [r4, #8]
 802f3a8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 802f3ac:	e9c4 5505 	strd	r5, r5, [r4, #20]
 802f3b0:	2208      	movs	r2, #8
 802f3b2:	4629      	mov	r1, r5
 802f3b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802f3b8:	f7ff f8fe 	bl	802e5b8 <memset>
 802f3bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802f3c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802f3c4:	e7e9      	b.n	802f39a <__sfp+0x42>
 802f3c6:	bf00      	nop
 802f3c8:	0803569c 	.word	0x0803569c
 802f3cc:	ffff0001 	.word	0xffff0001

0802f3d0 <_fwalk_reent>:
 802f3d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802f3d4:	4680      	mov	r8, r0
 802f3d6:	4689      	mov	r9, r1
 802f3d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802f3dc:	2600      	movs	r6, #0
 802f3de:	b914      	cbnz	r4, 802f3e6 <_fwalk_reent+0x16>
 802f3e0:	4630      	mov	r0, r6
 802f3e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802f3e6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 802f3ea:	3f01      	subs	r7, #1
 802f3ec:	d501      	bpl.n	802f3f2 <_fwalk_reent+0x22>
 802f3ee:	6824      	ldr	r4, [r4, #0]
 802f3f0:	e7f5      	b.n	802f3de <_fwalk_reent+0xe>
 802f3f2:	89ab      	ldrh	r3, [r5, #12]
 802f3f4:	2b01      	cmp	r3, #1
 802f3f6:	d907      	bls.n	802f408 <_fwalk_reent+0x38>
 802f3f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802f3fc:	3301      	adds	r3, #1
 802f3fe:	d003      	beq.n	802f408 <_fwalk_reent+0x38>
 802f400:	4629      	mov	r1, r5
 802f402:	4640      	mov	r0, r8
 802f404:	47c8      	blx	r9
 802f406:	4306      	orrs	r6, r0
 802f408:	3568      	adds	r5, #104	; 0x68
 802f40a:	e7ee      	b.n	802f3ea <_fwalk_reent+0x1a>

0802f40c <__swhatbuf_r>:
 802f40c:	b570      	push	{r4, r5, r6, lr}
 802f40e:	460e      	mov	r6, r1
 802f410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802f414:	2900      	cmp	r1, #0
 802f416:	b096      	sub	sp, #88	; 0x58
 802f418:	4614      	mov	r4, r2
 802f41a:	461d      	mov	r5, r3
 802f41c:	da07      	bge.n	802f42e <__swhatbuf_r+0x22>
 802f41e:	2300      	movs	r3, #0
 802f420:	602b      	str	r3, [r5, #0]
 802f422:	89b3      	ldrh	r3, [r6, #12]
 802f424:	061a      	lsls	r2, r3, #24
 802f426:	d410      	bmi.n	802f44a <__swhatbuf_r+0x3e>
 802f428:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802f42c:	e00e      	b.n	802f44c <__swhatbuf_r+0x40>
 802f42e:	466a      	mov	r2, sp
 802f430:	f000 fa38 	bl	802f8a4 <_fstat_r>
 802f434:	2800      	cmp	r0, #0
 802f436:	dbf2      	blt.n	802f41e <__swhatbuf_r+0x12>
 802f438:	9a01      	ldr	r2, [sp, #4]
 802f43a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802f43e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802f442:	425a      	negs	r2, r3
 802f444:	415a      	adcs	r2, r3
 802f446:	602a      	str	r2, [r5, #0]
 802f448:	e7ee      	b.n	802f428 <__swhatbuf_r+0x1c>
 802f44a:	2340      	movs	r3, #64	; 0x40
 802f44c:	2000      	movs	r0, #0
 802f44e:	6023      	str	r3, [r4, #0]
 802f450:	b016      	add	sp, #88	; 0x58
 802f452:	bd70      	pop	{r4, r5, r6, pc}

0802f454 <__smakebuf_r>:
 802f454:	898b      	ldrh	r3, [r1, #12]
 802f456:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802f458:	079d      	lsls	r5, r3, #30
 802f45a:	4606      	mov	r6, r0
 802f45c:	460c      	mov	r4, r1
 802f45e:	d507      	bpl.n	802f470 <__smakebuf_r+0x1c>
 802f460:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802f464:	6023      	str	r3, [r4, #0]
 802f466:	6123      	str	r3, [r4, #16]
 802f468:	2301      	movs	r3, #1
 802f46a:	6163      	str	r3, [r4, #20]
 802f46c:	b002      	add	sp, #8
 802f46e:	bd70      	pop	{r4, r5, r6, pc}
 802f470:	ab01      	add	r3, sp, #4
 802f472:	466a      	mov	r2, sp
 802f474:	f7ff ffca 	bl	802f40c <__swhatbuf_r>
 802f478:	9900      	ldr	r1, [sp, #0]
 802f47a:	4605      	mov	r5, r0
 802f47c:	4630      	mov	r0, r6
 802f47e:	f7ff f8f1 	bl	802e664 <_malloc_r>
 802f482:	b948      	cbnz	r0, 802f498 <__smakebuf_r+0x44>
 802f484:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802f488:	059a      	lsls	r2, r3, #22
 802f48a:	d4ef      	bmi.n	802f46c <__smakebuf_r+0x18>
 802f48c:	f023 0303 	bic.w	r3, r3, #3
 802f490:	f043 0302 	orr.w	r3, r3, #2
 802f494:	81a3      	strh	r3, [r4, #12]
 802f496:	e7e3      	b.n	802f460 <__smakebuf_r+0xc>
 802f498:	4b0d      	ldr	r3, [pc, #52]	; (802f4d0 <__smakebuf_r+0x7c>)
 802f49a:	62b3      	str	r3, [r6, #40]	; 0x28
 802f49c:	89a3      	ldrh	r3, [r4, #12]
 802f49e:	6020      	str	r0, [r4, #0]
 802f4a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802f4a4:	81a3      	strh	r3, [r4, #12]
 802f4a6:	9b00      	ldr	r3, [sp, #0]
 802f4a8:	6163      	str	r3, [r4, #20]
 802f4aa:	9b01      	ldr	r3, [sp, #4]
 802f4ac:	6120      	str	r0, [r4, #16]
 802f4ae:	b15b      	cbz	r3, 802f4c8 <__smakebuf_r+0x74>
 802f4b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802f4b4:	4630      	mov	r0, r6
 802f4b6:	f000 fa07 	bl	802f8c8 <_isatty_r>
 802f4ba:	b128      	cbz	r0, 802f4c8 <__smakebuf_r+0x74>
 802f4bc:	89a3      	ldrh	r3, [r4, #12]
 802f4be:	f023 0303 	bic.w	r3, r3, #3
 802f4c2:	f043 0301 	orr.w	r3, r3, #1
 802f4c6:	81a3      	strh	r3, [r4, #12]
 802f4c8:	89a3      	ldrh	r3, [r4, #12]
 802f4ca:	431d      	orrs	r5, r3
 802f4cc:	81a5      	strh	r5, [r4, #12]
 802f4ce:	e7cd      	b.n	802f46c <__smakebuf_r+0x18>
 802f4d0:	0802f2c1 	.word	0x0802f2c1

0802f4d4 <memmove>:
 802f4d4:	4288      	cmp	r0, r1
 802f4d6:	b510      	push	{r4, lr}
 802f4d8:	eb01 0302 	add.w	r3, r1, r2
 802f4dc:	d807      	bhi.n	802f4ee <memmove+0x1a>
 802f4de:	1e42      	subs	r2, r0, #1
 802f4e0:	4299      	cmp	r1, r3
 802f4e2:	d00a      	beq.n	802f4fa <memmove+0x26>
 802f4e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 802f4e8:	f802 4f01 	strb.w	r4, [r2, #1]!
 802f4ec:	e7f8      	b.n	802f4e0 <memmove+0xc>
 802f4ee:	4283      	cmp	r3, r0
 802f4f0:	d9f5      	bls.n	802f4de <memmove+0xa>
 802f4f2:	1881      	adds	r1, r0, r2
 802f4f4:	1ad2      	subs	r2, r2, r3
 802f4f6:	42d3      	cmn	r3, r2
 802f4f8:	d100      	bne.n	802f4fc <memmove+0x28>
 802f4fa:	bd10      	pop	{r4, pc}
 802f4fc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802f500:	f801 4d01 	strb.w	r4, [r1, #-1]!
 802f504:	e7f7      	b.n	802f4f6 <memmove+0x22>

0802f506 <__malloc_lock>:
 802f506:	4770      	bx	lr

0802f508 <__malloc_unlock>:
 802f508:	4770      	bx	lr

0802f50a <_realloc_r>:
 802f50a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802f50c:	4607      	mov	r7, r0
 802f50e:	4614      	mov	r4, r2
 802f510:	460e      	mov	r6, r1
 802f512:	b921      	cbnz	r1, 802f51e <_realloc_r+0x14>
 802f514:	4611      	mov	r1, r2
 802f516:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802f51a:	f7ff b8a3 	b.w	802e664 <_malloc_r>
 802f51e:	b922      	cbnz	r2, 802f52a <_realloc_r+0x20>
 802f520:	f7ff f852 	bl	802e5c8 <_free_r>
 802f524:	4625      	mov	r5, r4
 802f526:	4628      	mov	r0, r5
 802f528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802f52a:	f000 f9ef 	bl	802f90c <_malloc_usable_size_r>
 802f52e:	42a0      	cmp	r0, r4
 802f530:	d20f      	bcs.n	802f552 <_realloc_r+0x48>
 802f532:	4621      	mov	r1, r4
 802f534:	4638      	mov	r0, r7
 802f536:	f7ff f895 	bl	802e664 <_malloc_r>
 802f53a:	4605      	mov	r5, r0
 802f53c:	2800      	cmp	r0, #0
 802f53e:	d0f2      	beq.n	802f526 <_realloc_r+0x1c>
 802f540:	4631      	mov	r1, r6
 802f542:	4622      	mov	r2, r4
 802f544:	f7ff f82d 	bl	802e5a2 <memcpy>
 802f548:	4631      	mov	r1, r6
 802f54a:	4638      	mov	r0, r7
 802f54c:	f7ff f83c 	bl	802e5c8 <_free_r>
 802f550:	e7e9      	b.n	802f526 <_realloc_r+0x1c>
 802f552:	4635      	mov	r5, r6
 802f554:	e7e7      	b.n	802f526 <_realloc_r+0x1c>

0802f556 <__ssputs_r>:
 802f556:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802f55a:	688e      	ldr	r6, [r1, #8]
 802f55c:	429e      	cmp	r6, r3
 802f55e:	4682      	mov	sl, r0
 802f560:	460c      	mov	r4, r1
 802f562:	4690      	mov	r8, r2
 802f564:	4699      	mov	r9, r3
 802f566:	d837      	bhi.n	802f5d8 <__ssputs_r+0x82>
 802f568:	898a      	ldrh	r2, [r1, #12]
 802f56a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802f56e:	d031      	beq.n	802f5d4 <__ssputs_r+0x7e>
 802f570:	6825      	ldr	r5, [r4, #0]
 802f572:	6909      	ldr	r1, [r1, #16]
 802f574:	1a6f      	subs	r7, r5, r1
 802f576:	6965      	ldr	r5, [r4, #20]
 802f578:	2302      	movs	r3, #2
 802f57a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802f57e:	fb95 f5f3 	sdiv	r5, r5, r3
 802f582:	f109 0301 	add.w	r3, r9, #1
 802f586:	443b      	add	r3, r7
 802f588:	429d      	cmp	r5, r3
 802f58a:	bf38      	it	cc
 802f58c:	461d      	movcc	r5, r3
 802f58e:	0553      	lsls	r3, r2, #21
 802f590:	d530      	bpl.n	802f5f4 <__ssputs_r+0x9e>
 802f592:	4629      	mov	r1, r5
 802f594:	f7ff f866 	bl	802e664 <_malloc_r>
 802f598:	4606      	mov	r6, r0
 802f59a:	b950      	cbnz	r0, 802f5b2 <__ssputs_r+0x5c>
 802f59c:	230c      	movs	r3, #12
 802f59e:	f8ca 3000 	str.w	r3, [sl]
 802f5a2:	89a3      	ldrh	r3, [r4, #12]
 802f5a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802f5a8:	81a3      	strh	r3, [r4, #12]
 802f5aa:	f04f 30ff 	mov.w	r0, #4294967295
 802f5ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802f5b2:	463a      	mov	r2, r7
 802f5b4:	6921      	ldr	r1, [r4, #16]
 802f5b6:	f7fe fff4 	bl	802e5a2 <memcpy>
 802f5ba:	89a3      	ldrh	r3, [r4, #12]
 802f5bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802f5c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802f5c4:	81a3      	strh	r3, [r4, #12]
 802f5c6:	6126      	str	r6, [r4, #16]
 802f5c8:	6165      	str	r5, [r4, #20]
 802f5ca:	443e      	add	r6, r7
 802f5cc:	1bed      	subs	r5, r5, r7
 802f5ce:	6026      	str	r6, [r4, #0]
 802f5d0:	60a5      	str	r5, [r4, #8]
 802f5d2:	464e      	mov	r6, r9
 802f5d4:	454e      	cmp	r6, r9
 802f5d6:	d900      	bls.n	802f5da <__ssputs_r+0x84>
 802f5d8:	464e      	mov	r6, r9
 802f5da:	4632      	mov	r2, r6
 802f5dc:	4641      	mov	r1, r8
 802f5de:	6820      	ldr	r0, [r4, #0]
 802f5e0:	f7ff ff78 	bl	802f4d4 <memmove>
 802f5e4:	68a3      	ldr	r3, [r4, #8]
 802f5e6:	1b9b      	subs	r3, r3, r6
 802f5e8:	60a3      	str	r3, [r4, #8]
 802f5ea:	6823      	ldr	r3, [r4, #0]
 802f5ec:	441e      	add	r6, r3
 802f5ee:	6026      	str	r6, [r4, #0]
 802f5f0:	2000      	movs	r0, #0
 802f5f2:	e7dc      	b.n	802f5ae <__ssputs_r+0x58>
 802f5f4:	462a      	mov	r2, r5
 802f5f6:	f7ff ff88 	bl	802f50a <_realloc_r>
 802f5fa:	4606      	mov	r6, r0
 802f5fc:	2800      	cmp	r0, #0
 802f5fe:	d1e2      	bne.n	802f5c6 <__ssputs_r+0x70>
 802f600:	6921      	ldr	r1, [r4, #16]
 802f602:	4650      	mov	r0, sl
 802f604:	f7fe ffe0 	bl	802e5c8 <_free_r>
 802f608:	e7c8      	b.n	802f59c <__ssputs_r+0x46>
	...

0802f60c <_svfiprintf_r>:
 802f60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f610:	461d      	mov	r5, r3
 802f612:	898b      	ldrh	r3, [r1, #12]
 802f614:	061f      	lsls	r7, r3, #24
 802f616:	b09d      	sub	sp, #116	; 0x74
 802f618:	4680      	mov	r8, r0
 802f61a:	460c      	mov	r4, r1
 802f61c:	4616      	mov	r6, r2
 802f61e:	d50f      	bpl.n	802f640 <_svfiprintf_r+0x34>
 802f620:	690b      	ldr	r3, [r1, #16]
 802f622:	b96b      	cbnz	r3, 802f640 <_svfiprintf_r+0x34>
 802f624:	2140      	movs	r1, #64	; 0x40
 802f626:	f7ff f81d 	bl	802e664 <_malloc_r>
 802f62a:	6020      	str	r0, [r4, #0]
 802f62c:	6120      	str	r0, [r4, #16]
 802f62e:	b928      	cbnz	r0, 802f63c <_svfiprintf_r+0x30>
 802f630:	230c      	movs	r3, #12
 802f632:	f8c8 3000 	str.w	r3, [r8]
 802f636:	f04f 30ff 	mov.w	r0, #4294967295
 802f63a:	e0c8      	b.n	802f7ce <_svfiprintf_r+0x1c2>
 802f63c:	2340      	movs	r3, #64	; 0x40
 802f63e:	6163      	str	r3, [r4, #20]
 802f640:	2300      	movs	r3, #0
 802f642:	9309      	str	r3, [sp, #36]	; 0x24
 802f644:	2320      	movs	r3, #32
 802f646:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802f64a:	2330      	movs	r3, #48	; 0x30
 802f64c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802f650:	9503      	str	r5, [sp, #12]
 802f652:	f04f 0b01 	mov.w	fp, #1
 802f656:	4637      	mov	r7, r6
 802f658:	463d      	mov	r5, r7
 802f65a:	f815 3b01 	ldrb.w	r3, [r5], #1
 802f65e:	b10b      	cbz	r3, 802f664 <_svfiprintf_r+0x58>
 802f660:	2b25      	cmp	r3, #37	; 0x25
 802f662:	d13e      	bne.n	802f6e2 <_svfiprintf_r+0xd6>
 802f664:	ebb7 0a06 	subs.w	sl, r7, r6
 802f668:	d00b      	beq.n	802f682 <_svfiprintf_r+0x76>
 802f66a:	4653      	mov	r3, sl
 802f66c:	4632      	mov	r2, r6
 802f66e:	4621      	mov	r1, r4
 802f670:	4640      	mov	r0, r8
 802f672:	f7ff ff70 	bl	802f556 <__ssputs_r>
 802f676:	3001      	adds	r0, #1
 802f678:	f000 80a4 	beq.w	802f7c4 <_svfiprintf_r+0x1b8>
 802f67c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802f67e:	4453      	add	r3, sl
 802f680:	9309      	str	r3, [sp, #36]	; 0x24
 802f682:	783b      	ldrb	r3, [r7, #0]
 802f684:	2b00      	cmp	r3, #0
 802f686:	f000 809d 	beq.w	802f7c4 <_svfiprintf_r+0x1b8>
 802f68a:	2300      	movs	r3, #0
 802f68c:	f04f 32ff 	mov.w	r2, #4294967295
 802f690:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802f694:	9304      	str	r3, [sp, #16]
 802f696:	9307      	str	r3, [sp, #28]
 802f698:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802f69c:	931a      	str	r3, [sp, #104]	; 0x68
 802f69e:	462f      	mov	r7, r5
 802f6a0:	2205      	movs	r2, #5
 802f6a2:	f817 1b01 	ldrb.w	r1, [r7], #1
 802f6a6:	4850      	ldr	r0, [pc, #320]	; (802f7e8 <_svfiprintf_r+0x1dc>)
 802f6a8:	f7d7 fb22 	bl	8006cf0 <memchr>
 802f6ac:	9b04      	ldr	r3, [sp, #16]
 802f6ae:	b9d0      	cbnz	r0, 802f6e6 <_svfiprintf_r+0xda>
 802f6b0:	06d9      	lsls	r1, r3, #27
 802f6b2:	bf44      	itt	mi
 802f6b4:	2220      	movmi	r2, #32
 802f6b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802f6ba:	071a      	lsls	r2, r3, #28
 802f6bc:	bf44      	itt	mi
 802f6be:	222b      	movmi	r2, #43	; 0x2b
 802f6c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802f6c4:	782a      	ldrb	r2, [r5, #0]
 802f6c6:	2a2a      	cmp	r2, #42	; 0x2a
 802f6c8:	d015      	beq.n	802f6f6 <_svfiprintf_r+0xea>
 802f6ca:	9a07      	ldr	r2, [sp, #28]
 802f6cc:	462f      	mov	r7, r5
 802f6ce:	2000      	movs	r0, #0
 802f6d0:	250a      	movs	r5, #10
 802f6d2:	4639      	mov	r1, r7
 802f6d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 802f6d8:	3b30      	subs	r3, #48	; 0x30
 802f6da:	2b09      	cmp	r3, #9
 802f6dc:	d94d      	bls.n	802f77a <_svfiprintf_r+0x16e>
 802f6de:	b1b8      	cbz	r0, 802f710 <_svfiprintf_r+0x104>
 802f6e0:	e00f      	b.n	802f702 <_svfiprintf_r+0xf6>
 802f6e2:	462f      	mov	r7, r5
 802f6e4:	e7b8      	b.n	802f658 <_svfiprintf_r+0x4c>
 802f6e6:	4a40      	ldr	r2, [pc, #256]	; (802f7e8 <_svfiprintf_r+0x1dc>)
 802f6e8:	1a80      	subs	r0, r0, r2
 802f6ea:	fa0b f000 	lsl.w	r0, fp, r0
 802f6ee:	4318      	orrs	r0, r3
 802f6f0:	9004      	str	r0, [sp, #16]
 802f6f2:	463d      	mov	r5, r7
 802f6f4:	e7d3      	b.n	802f69e <_svfiprintf_r+0x92>
 802f6f6:	9a03      	ldr	r2, [sp, #12]
 802f6f8:	1d11      	adds	r1, r2, #4
 802f6fa:	6812      	ldr	r2, [r2, #0]
 802f6fc:	9103      	str	r1, [sp, #12]
 802f6fe:	2a00      	cmp	r2, #0
 802f700:	db01      	blt.n	802f706 <_svfiprintf_r+0xfa>
 802f702:	9207      	str	r2, [sp, #28]
 802f704:	e004      	b.n	802f710 <_svfiprintf_r+0x104>
 802f706:	4252      	negs	r2, r2
 802f708:	f043 0302 	orr.w	r3, r3, #2
 802f70c:	9207      	str	r2, [sp, #28]
 802f70e:	9304      	str	r3, [sp, #16]
 802f710:	783b      	ldrb	r3, [r7, #0]
 802f712:	2b2e      	cmp	r3, #46	; 0x2e
 802f714:	d10c      	bne.n	802f730 <_svfiprintf_r+0x124>
 802f716:	787b      	ldrb	r3, [r7, #1]
 802f718:	2b2a      	cmp	r3, #42	; 0x2a
 802f71a:	d133      	bne.n	802f784 <_svfiprintf_r+0x178>
 802f71c:	9b03      	ldr	r3, [sp, #12]
 802f71e:	1d1a      	adds	r2, r3, #4
 802f720:	681b      	ldr	r3, [r3, #0]
 802f722:	9203      	str	r2, [sp, #12]
 802f724:	2b00      	cmp	r3, #0
 802f726:	bfb8      	it	lt
 802f728:	f04f 33ff 	movlt.w	r3, #4294967295
 802f72c:	3702      	adds	r7, #2
 802f72e:	9305      	str	r3, [sp, #20]
 802f730:	4d2e      	ldr	r5, [pc, #184]	; (802f7ec <_svfiprintf_r+0x1e0>)
 802f732:	7839      	ldrb	r1, [r7, #0]
 802f734:	2203      	movs	r2, #3
 802f736:	4628      	mov	r0, r5
 802f738:	f7d7 fada 	bl	8006cf0 <memchr>
 802f73c:	b138      	cbz	r0, 802f74e <_svfiprintf_r+0x142>
 802f73e:	2340      	movs	r3, #64	; 0x40
 802f740:	1b40      	subs	r0, r0, r5
 802f742:	fa03 f000 	lsl.w	r0, r3, r0
 802f746:	9b04      	ldr	r3, [sp, #16]
 802f748:	4303      	orrs	r3, r0
 802f74a:	3701      	adds	r7, #1
 802f74c:	9304      	str	r3, [sp, #16]
 802f74e:	7839      	ldrb	r1, [r7, #0]
 802f750:	4827      	ldr	r0, [pc, #156]	; (802f7f0 <_svfiprintf_r+0x1e4>)
 802f752:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802f756:	2206      	movs	r2, #6
 802f758:	1c7e      	adds	r6, r7, #1
 802f75a:	f7d7 fac9 	bl	8006cf0 <memchr>
 802f75e:	2800      	cmp	r0, #0
 802f760:	d038      	beq.n	802f7d4 <_svfiprintf_r+0x1c8>
 802f762:	4b24      	ldr	r3, [pc, #144]	; (802f7f4 <_svfiprintf_r+0x1e8>)
 802f764:	bb13      	cbnz	r3, 802f7ac <_svfiprintf_r+0x1a0>
 802f766:	9b03      	ldr	r3, [sp, #12]
 802f768:	3307      	adds	r3, #7
 802f76a:	f023 0307 	bic.w	r3, r3, #7
 802f76e:	3308      	adds	r3, #8
 802f770:	9303      	str	r3, [sp, #12]
 802f772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802f774:	444b      	add	r3, r9
 802f776:	9309      	str	r3, [sp, #36]	; 0x24
 802f778:	e76d      	b.n	802f656 <_svfiprintf_r+0x4a>
 802f77a:	fb05 3202 	mla	r2, r5, r2, r3
 802f77e:	2001      	movs	r0, #1
 802f780:	460f      	mov	r7, r1
 802f782:	e7a6      	b.n	802f6d2 <_svfiprintf_r+0xc6>
 802f784:	2300      	movs	r3, #0
 802f786:	3701      	adds	r7, #1
 802f788:	9305      	str	r3, [sp, #20]
 802f78a:	4619      	mov	r1, r3
 802f78c:	250a      	movs	r5, #10
 802f78e:	4638      	mov	r0, r7
 802f790:	f810 2b01 	ldrb.w	r2, [r0], #1
 802f794:	3a30      	subs	r2, #48	; 0x30
 802f796:	2a09      	cmp	r2, #9
 802f798:	d903      	bls.n	802f7a2 <_svfiprintf_r+0x196>
 802f79a:	2b00      	cmp	r3, #0
 802f79c:	d0c8      	beq.n	802f730 <_svfiprintf_r+0x124>
 802f79e:	9105      	str	r1, [sp, #20]
 802f7a0:	e7c6      	b.n	802f730 <_svfiprintf_r+0x124>
 802f7a2:	fb05 2101 	mla	r1, r5, r1, r2
 802f7a6:	2301      	movs	r3, #1
 802f7a8:	4607      	mov	r7, r0
 802f7aa:	e7f0      	b.n	802f78e <_svfiprintf_r+0x182>
 802f7ac:	ab03      	add	r3, sp, #12
 802f7ae:	9300      	str	r3, [sp, #0]
 802f7b0:	4622      	mov	r2, r4
 802f7b2:	4b11      	ldr	r3, [pc, #68]	; (802f7f8 <_svfiprintf_r+0x1ec>)
 802f7b4:	a904      	add	r1, sp, #16
 802f7b6:	4640      	mov	r0, r8
 802f7b8:	f3af 8000 	nop.w
 802f7bc:	f1b0 3fff 	cmp.w	r0, #4294967295
 802f7c0:	4681      	mov	r9, r0
 802f7c2:	d1d6      	bne.n	802f772 <_svfiprintf_r+0x166>
 802f7c4:	89a3      	ldrh	r3, [r4, #12]
 802f7c6:	065b      	lsls	r3, r3, #25
 802f7c8:	f53f af35 	bmi.w	802f636 <_svfiprintf_r+0x2a>
 802f7cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 802f7ce:	b01d      	add	sp, #116	; 0x74
 802f7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f7d4:	ab03      	add	r3, sp, #12
 802f7d6:	9300      	str	r3, [sp, #0]
 802f7d8:	4622      	mov	r2, r4
 802f7da:	4b07      	ldr	r3, [pc, #28]	; (802f7f8 <_svfiprintf_r+0x1ec>)
 802f7dc:	a904      	add	r1, sp, #16
 802f7de:	4640      	mov	r0, r8
 802f7e0:	f7ff f950 	bl	802ea84 <_printf_i>
 802f7e4:	e7ea      	b.n	802f7bc <_svfiprintf_r+0x1b0>
 802f7e6:	bf00      	nop
 802f7e8:	080356a0 	.word	0x080356a0
 802f7ec:	080356a6 	.word	0x080356a6
 802f7f0:	080356aa 	.word	0x080356aa
 802f7f4:	00000000 	.word	0x00000000
 802f7f8:	0802f557 	.word	0x0802f557

0802f7fc <__sread>:
 802f7fc:	b510      	push	{r4, lr}
 802f7fe:	460c      	mov	r4, r1
 802f800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802f804:	f000 f88a 	bl	802f91c <_read_r>
 802f808:	2800      	cmp	r0, #0
 802f80a:	bfab      	itete	ge
 802f80c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802f80e:	89a3      	ldrhlt	r3, [r4, #12]
 802f810:	181b      	addge	r3, r3, r0
 802f812:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802f816:	bfac      	ite	ge
 802f818:	6563      	strge	r3, [r4, #84]	; 0x54
 802f81a:	81a3      	strhlt	r3, [r4, #12]
 802f81c:	bd10      	pop	{r4, pc}

0802f81e <__swrite>:
 802f81e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802f822:	461f      	mov	r7, r3
 802f824:	898b      	ldrh	r3, [r1, #12]
 802f826:	05db      	lsls	r3, r3, #23
 802f828:	4605      	mov	r5, r0
 802f82a:	460c      	mov	r4, r1
 802f82c:	4616      	mov	r6, r2
 802f82e:	d505      	bpl.n	802f83c <__swrite+0x1e>
 802f830:	2302      	movs	r3, #2
 802f832:	2200      	movs	r2, #0
 802f834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802f838:	f000 f856 	bl	802f8e8 <_lseek_r>
 802f83c:	89a3      	ldrh	r3, [r4, #12]
 802f83e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802f842:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802f846:	81a3      	strh	r3, [r4, #12]
 802f848:	4632      	mov	r2, r6
 802f84a:	463b      	mov	r3, r7
 802f84c:	4628      	mov	r0, r5
 802f84e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802f852:	f7ff bb7d 	b.w	802ef50 <_write_r>

0802f856 <__sseek>:
 802f856:	b510      	push	{r4, lr}
 802f858:	460c      	mov	r4, r1
 802f85a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802f85e:	f000 f843 	bl	802f8e8 <_lseek_r>
 802f862:	1c43      	adds	r3, r0, #1
 802f864:	89a3      	ldrh	r3, [r4, #12]
 802f866:	bf15      	itete	ne
 802f868:	6560      	strne	r0, [r4, #84]	; 0x54
 802f86a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802f86e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802f872:	81a3      	strheq	r3, [r4, #12]
 802f874:	bf18      	it	ne
 802f876:	81a3      	strhne	r3, [r4, #12]
 802f878:	bd10      	pop	{r4, pc}

0802f87a <__sclose>:
 802f87a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802f87e:	f000 b801 	b.w	802f884 <_close_r>
	...

0802f884 <_close_r>:
 802f884:	b538      	push	{r3, r4, r5, lr}
 802f886:	4c06      	ldr	r4, [pc, #24]	; (802f8a0 <_close_r+0x1c>)
 802f888:	2300      	movs	r3, #0
 802f88a:	4605      	mov	r5, r0
 802f88c:	4608      	mov	r0, r1
 802f88e:	6023      	str	r3, [r4, #0]
 802f890:	f7dc fe7f 	bl	800c592 <_close>
 802f894:	1c43      	adds	r3, r0, #1
 802f896:	d102      	bne.n	802f89e <_close_r+0x1a>
 802f898:	6823      	ldr	r3, [r4, #0]
 802f89a:	b103      	cbz	r3, 802f89e <_close_r+0x1a>
 802f89c:	602b      	str	r3, [r5, #0]
 802f89e:	bd38      	pop	{r3, r4, r5, pc}
 802f8a0:	20013008 	.word	0x20013008

0802f8a4 <_fstat_r>:
 802f8a4:	b538      	push	{r3, r4, r5, lr}
 802f8a6:	4c07      	ldr	r4, [pc, #28]	; (802f8c4 <_fstat_r+0x20>)
 802f8a8:	2300      	movs	r3, #0
 802f8aa:	4605      	mov	r5, r0
 802f8ac:	4608      	mov	r0, r1
 802f8ae:	4611      	mov	r1, r2
 802f8b0:	6023      	str	r3, [r4, #0]
 802f8b2:	f7dc fe7a 	bl	800c5aa <_fstat>
 802f8b6:	1c43      	adds	r3, r0, #1
 802f8b8:	d102      	bne.n	802f8c0 <_fstat_r+0x1c>
 802f8ba:	6823      	ldr	r3, [r4, #0]
 802f8bc:	b103      	cbz	r3, 802f8c0 <_fstat_r+0x1c>
 802f8be:	602b      	str	r3, [r5, #0]
 802f8c0:	bd38      	pop	{r3, r4, r5, pc}
 802f8c2:	bf00      	nop
 802f8c4:	20013008 	.word	0x20013008

0802f8c8 <_isatty_r>:
 802f8c8:	b538      	push	{r3, r4, r5, lr}
 802f8ca:	4c06      	ldr	r4, [pc, #24]	; (802f8e4 <_isatty_r+0x1c>)
 802f8cc:	2300      	movs	r3, #0
 802f8ce:	4605      	mov	r5, r0
 802f8d0:	4608      	mov	r0, r1
 802f8d2:	6023      	str	r3, [r4, #0]
 802f8d4:	f7dc fe79 	bl	800c5ca <_isatty>
 802f8d8:	1c43      	adds	r3, r0, #1
 802f8da:	d102      	bne.n	802f8e2 <_isatty_r+0x1a>
 802f8dc:	6823      	ldr	r3, [r4, #0]
 802f8de:	b103      	cbz	r3, 802f8e2 <_isatty_r+0x1a>
 802f8e0:	602b      	str	r3, [r5, #0]
 802f8e2:	bd38      	pop	{r3, r4, r5, pc}
 802f8e4:	20013008 	.word	0x20013008

0802f8e8 <_lseek_r>:
 802f8e8:	b538      	push	{r3, r4, r5, lr}
 802f8ea:	4c07      	ldr	r4, [pc, #28]	; (802f908 <_lseek_r+0x20>)
 802f8ec:	4605      	mov	r5, r0
 802f8ee:	4608      	mov	r0, r1
 802f8f0:	4611      	mov	r1, r2
 802f8f2:	2200      	movs	r2, #0
 802f8f4:	6022      	str	r2, [r4, #0]
 802f8f6:	461a      	mov	r2, r3
 802f8f8:	f7dc fe72 	bl	800c5e0 <_lseek>
 802f8fc:	1c43      	adds	r3, r0, #1
 802f8fe:	d102      	bne.n	802f906 <_lseek_r+0x1e>
 802f900:	6823      	ldr	r3, [r4, #0]
 802f902:	b103      	cbz	r3, 802f906 <_lseek_r+0x1e>
 802f904:	602b      	str	r3, [r5, #0]
 802f906:	bd38      	pop	{r3, r4, r5, pc}
 802f908:	20013008 	.word	0x20013008

0802f90c <_malloc_usable_size_r>:
 802f90c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802f910:	1f18      	subs	r0, r3, #4
 802f912:	2b00      	cmp	r3, #0
 802f914:	bfbc      	itt	lt
 802f916:	580b      	ldrlt	r3, [r1, r0]
 802f918:	18c0      	addlt	r0, r0, r3
 802f91a:	4770      	bx	lr

0802f91c <_read_r>:
 802f91c:	b538      	push	{r3, r4, r5, lr}
 802f91e:	4c07      	ldr	r4, [pc, #28]	; (802f93c <_read_r+0x20>)
 802f920:	4605      	mov	r5, r0
 802f922:	4608      	mov	r0, r1
 802f924:	4611      	mov	r1, r2
 802f926:	2200      	movs	r2, #0
 802f928:	6022      	str	r2, [r4, #0]
 802f92a:	461a      	mov	r2, r3
 802f92c:	f7dc fdf8 	bl	800c520 <_read>
 802f930:	1c43      	adds	r3, r0, #1
 802f932:	d102      	bne.n	802f93a <_read_r+0x1e>
 802f934:	6823      	ldr	r3, [r4, #0]
 802f936:	b103      	cbz	r3, 802f93a <_read_r+0x1e>
 802f938:	602b      	str	r3, [r5, #0]
 802f93a:	bd38      	pop	{r3, r4, r5, pc}
 802f93c:	20013008 	.word	0x20013008

0802f940 <_init>:
 802f940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802f942:	bf00      	nop
 802f944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802f946:	bc08      	pop	{r3}
 802f948:	469e      	mov	lr, r3
 802f94a:	4770      	bx	lr

0802f94c <_fini>:
 802f94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802f94e:	bf00      	nop
 802f950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802f952:	bc08      	pop	{r3}
 802f954:	469e      	mov	lr, r3
 802f956:	4770      	bx	lr
