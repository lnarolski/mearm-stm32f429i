
STM32F429I-DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002f738  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005de4  0802f8e8  0802f8e8  0003f8e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00002dfa  080356cc  080356cc  000456cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000001dc  080384c8  080384c8  000484c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 000000d4  080386a4  080386a4  000486a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 ExtFlashSection 00042988  08038778  08038778  00048778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    0000010c  0807b100  0807b100  0008b100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .ARM          000001a0  0807b20c  0807b20c  0008b20c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  0807b3ac  0807b3ac  0009017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000018  0807b3ac  0807b3ac  0008b3ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  0807b3c4  0807b3c4  0008b3c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         0000017c  20000000  0807b3cc  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          00012f40  2000017c  0807b548  0009017c  2**2
                  ALLOC
 14 ._user_heap_stack 00001404  200130bc  0807b548  000930bc  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  0009017c  2**0
                  CONTENTS, READONLY
 16 TouchGFX_Framebuffer 0004b000  d0000000  d0000000  000a0000  2**2
                  ALLOC
 17 .debug_line   00038acf  00000000  00000000  000901ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_info   000a904b  00000000  00000000  000c8c7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 000120d3  00000000  00000000  00171cc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_aranges 000040e8  00000000  00000000  00183da0  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    001093ef  00000000  00000000  00187e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 00003b40  00000000  00000000  00291278  2**3
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  00030926  00000000  00000000  00294db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      000000fa  00000000  00000000  002c56de  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00013070  00000000  00000000  002c57d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000017c 	.word	0x2000017c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0802f8d0 	.word	0x0802f8d0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000180 	.word	0x20000180
 80001ec:	0802f8d0 	.word	0x0802f8d0

080001f0 <d_make_comp>:
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	1e4c      	subs	r4, r1, #1
 80001f4:	4605      	mov	r5, r0
 80001f6:	2c4e      	cmp	r4, #78	; 0x4e
 80001f8:	d83f      	bhi.n	800027a <d_make_comp+0x8a>
 80001fa:	e8df f004 	tbb	[pc, r4]
 80001fe:	3b3b      	.short	0x3b3b
 8000200:	3e3e3b3b 	.word	0x3e3e3b3b
 8000204:	28283e3e 	.word	0x28283e3e
 8000208:	2828283b 	.word	0x2828283b
 800020c:	28282828 	.word	0x28282828
 8000210:	28282828 	.word	0x28282828
 8000214:	29293e28 	.word	0x29293e28
 8000218:	29292929 	.word	0x29292929
 800021c:	283b2929 	.word	0x283b2929
 8000220:	28282828 	.word	0x28282828
 8000224:	3c29283e 	.word	0x3c29283e
 8000228:	293b3e3b 	.word	0x293b3e3b
 800022c:	3e3e3c29 	.word	0x3e3e3c29
 8000230:	3b282828 	.word	0x3b282828
 8000234:	3b3b3b3b 	.word	0x3b3b3b3b
 8000238:	283b3b28 	.word	0x283b3b28
 800023c:	283e3e3b 	.word	0x283e3e3b
 8000240:	3e3e2828 	.word	0x3e3e2828
 8000244:	2828283e 	.word	0x2828283e
 8000248:	293b293b 	.word	0x293b293b
 800024c:	29          	.byte	0x29
 800024d:	00          	.byte	0x00
 800024e:	b1a2      	cbz	r2, 800027a <d_make_comp+0x8a>
 8000250:	e9d5 4005 	ldrd	r4, r0, [r5, #20]
 8000254:	4284      	cmp	r4, r0
 8000256:	da10      	bge.n	800027a <d_make_comp+0x8a>
 8000258:	692f      	ldr	r7, [r5, #16]
 800025a:	0126      	lsls	r6, r4, #4
 800025c:	19b8      	adds	r0, r7, r6
 800025e:	3401      	adds	r4, #1
 8000260:	f04f 0c00 	mov.w	ip, #0
 8000264:	f8c0 c004 	str.w	ip, [r0, #4]
 8000268:	616c      	str	r4, [r5, #20]
 800026a:	55b9      	strb	r1, [r7, r6]
 800026c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8000270:	bcf0      	pop	{r4, r5, r6, r7}
 8000272:	4770      	bx	lr
 8000274:	b10a      	cbz	r2, 800027a <d_make_comp+0x8a>
 8000276:	2b00      	cmp	r3, #0
 8000278:	d1ea      	bne.n	8000250 <d_make_comp+0x60>
 800027a:	2000      	movs	r0, #0
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
 800027e:	4770      	bx	lr

08000280 <d_ref_qualifier>:
 8000280:	b410      	push	{r4}
 8000282:	68c3      	ldr	r3, [r0, #12]
 8000284:	781c      	ldrb	r4, [r3, #0]
 8000286:	2c52      	cmp	r4, #82	; 0x52
 8000288:	460a      	mov	r2, r1
 800028a:	d00f      	beq.n	80002ac <d_ref_qualifier+0x2c>
 800028c:	2c4f      	cmp	r4, #79	; 0x4f
 800028e:	d003      	beq.n	8000298 <d_ref_qualifier+0x18>
 8000290:	4608      	mov	r0, r1
 8000292:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000296:	4770      	bx	lr
 8000298:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800029a:	3103      	adds	r1, #3
 800029c:	6301      	str	r1, [r0, #48]	; 0x30
 800029e:	2120      	movs	r1, #32
 80002a0:	3301      	adds	r3, #1
 80002a2:	60c3      	str	r3, [r0, #12]
 80002a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80002a8:	2300      	movs	r3, #0
 80002aa:	e7a1      	b.n	80001f0 <d_make_comp>
 80002ac:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80002ae:	3102      	adds	r1, #2
 80002b0:	6301      	str	r1, [r0, #48]	; 0x30
 80002b2:	211f      	movs	r1, #31
 80002b4:	e7f4      	b.n	80002a0 <d_ref_qualifier+0x20>
 80002b6:	bf00      	nop

080002b8 <d_count_templates_scopes>:
 80002b8:	2a00      	cmp	r2, #0
 80002ba:	d04e      	beq.n	800035a <d_count_templates_scopes+0xa2>
 80002bc:	b570      	push	{r4, r5, r6, lr}
 80002be:	4605      	mov	r5, r0
 80002c0:	460e      	mov	r6, r1
 80002c2:	4614      	mov	r4, r2
 80002c4:	7823      	ldrb	r3, [r4, #0]
 80002c6:	3b01      	subs	r3, #1
 80002c8:	2b4e      	cmp	r3, #78	; 0x4e
 80002ca:	d82c      	bhi.n	8000326 <d_count_templates_scopes+0x6e>
 80002cc:	e8df f003 	tbb	[pc, r3]
 80002d0:	40373737 	.word	0x40373737
 80002d4:	28282b2b 	.word	0x28282b2b
 80002d8:	37373737 	.word	0x37373737
 80002dc:	37373737 	.word	0x37373737
 80002e0:	37373737 	.word	0x37373737
 80002e4:	2b373737 	.word	0x2b373737
 80002e8:	37373737 	.word	0x37373737
 80002ec:	37373737 	.word	0x37373737
 80002f0:	30303737 	.word	0x30303737
 80002f4:	372b3737 	.word	0x372b3737
 80002f8:	2c373737 	.word	0x2c373737
 80002fc:	37373737 	.word	0x37373737
 8000300:	3737282b 	.word	0x3737282b
 8000304:	37373737 	.word	0x37373737
 8000308:	37373737 	.word	0x37373737
 800030c:	2b373737 	.word	0x2b373737
 8000310:	2c2c372b 	.word	0x2c2c372b
 8000314:	372b2c2c 	.word	0x372b2c2c
 8000318:	37373737 	.word	0x37373737
 800031c:	3737      	.short	0x3737
 800031e:	37          	.byte	0x37
 800031f:	00          	.byte	0x00
 8000320:	68e4      	ldr	r4, [r4, #12]
 8000322:	2c00      	cmp	r4, #0
 8000324:	d1ce      	bne.n	80002c4 <d_count_templates_scopes+0xc>
 8000326:	bd70      	pop	{r4, r5, r6, pc}
 8000328:	68a4      	ldr	r4, [r4, #8]
 800032a:	2c00      	cmp	r4, #0
 800032c:	d1ca      	bne.n	80002c4 <d_count_templates_scopes+0xc>
 800032e:	e7fa      	b.n	8000326 <d_count_templates_scopes+0x6e>
 8000330:	68a2      	ldr	r2, [r4, #8]
 8000332:	7813      	ldrb	r3, [r2, #0]
 8000334:	2b05      	cmp	r3, #5
 8000336:	d103      	bne.n	8000340 <d_count_templates_scopes+0x88>
 8000338:	6833      	ldr	r3, [r6, #0]
 800033a:	3301      	adds	r3, #1
 800033c:	6033      	str	r3, [r6, #0]
 800033e:	68a2      	ldr	r2, [r4, #8]
 8000340:	4631      	mov	r1, r6
 8000342:	4628      	mov	r0, r5
 8000344:	f7ff ffb8 	bl	80002b8 <d_count_templates_scopes>
 8000348:	68e4      	ldr	r4, [r4, #12]
 800034a:	2c00      	cmp	r4, #0
 800034c:	d1ba      	bne.n	80002c4 <d_count_templates_scopes+0xc>
 800034e:	e7ea      	b.n	8000326 <d_count_templates_scopes+0x6e>
 8000350:	682b      	ldr	r3, [r5, #0]
 8000352:	3301      	adds	r3, #1
 8000354:	602b      	str	r3, [r5, #0]
 8000356:	68a2      	ldr	r2, [r4, #8]
 8000358:	e7f2      	b.n	8000340 <d_count_templates_scopes+0x88>
 800035a:	4770      	bx	lr

0800035c <d_append_buffer>:
 800035c:	b39a      	cbz	r2, 80003c6 <d_append_buffer+0x6a>
 800035e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000362:	188e      	adds	r6, r1, r2
 8000364:	4604      	mov	r4, r0
 8000366:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800036a:	3e01      	subs	r6, #1
 800036c:	1e4d      	subs	r5, r1, #1
 800036e:	2700      	movs	r7, #0
 8000370:	e016      	b.n	80003a0 <d_append_buffer+0x44>
 8000372:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8000376:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800037a:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 800037e:	4798      	blx	r3
 8000380:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8000384:	2200      	movs	r2, #0
 8000386:	3301      	adds	r3, #1
 8000388:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800038c:	42b5      	cmp	r5, r6
 800038e:	f04f 0301 	mov.w	r3, #1
 8000392:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8000396:	f804 8002 	strb.w	r8, [r4, r2]
 800039a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800039e:	d010      	beq.n	80003c2 <d_append_buffer+0x66>
 80003a0:	2bff      	cmp	r3, #255	; 0xff
 80003a2:	4619      	mov	r1, r3
 80003a4:	4620      	mov	r0, r4
 80003a6:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 80003aa:	d0e2      	beq.n	8000372 <d_append_buffer+0x16>
 80003ac:	461a      	mov	r2, r3
 80003ae:	42b5      	cmp	r5, r6
 80003b0:	f103 0301 	add.w	r3, r3, #1
 80003b4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80003b8:	f804 8002 	strb.w	r8, [r4, r2]
 80003bc:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80003c0:	d1ee      	bne.n	80003a0 <d_append_buffer+0x44>
 80003c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80003c6:	4770      	bx	lr

080003c8 <is_fnqual_component_type>:
 80003c8:	f1a0 031c 	sub.w	r3, r0, #28
 80003cc:	2b04      	cmp	r3, #4
 80003ce:	d907      	bls.n	80003e0 <is_fnqual_component_type+0x18>
 80003d0:	284c      	cmp	r0, #76	; 0x4c
 80003d2:	d005      	beq.n	80003e0 <is_fnqual_component_type+0x18>
 80003d4:	384e      	subs	r0, #78	; 0x4e
 80003d6:	2801      	cmp	r0, #1
 80003d8:	bf8c      	ite	hi
 80003da:	2000      	movhi	r0, #0
 80003dc:	2001      	movls	r0, #1
 80003de:	4770      	bx	lr
 80003e0:	2001      	movs	r0, #1
 80003e2:	4770      	bx	lr

080003e4 <d_number.isra.1>:
 80003e4:	b470      	push	{r4, r5, r6}
 80003e6:	6802      	ldr	r2, [r0, #0]
 80003e8:	7811      	ldrb	r1, [r2, #0]
 80003ea:	296e      	cmp	r1, #110	; 0x6e
 80003ec:	d018      	beq.n	8000420 <d_number.isra.1+0x3c>
 80003ee:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80003f2:	2b09      	cmp	r3, #9
 80003f4:	d81e      	bhi.n	8000434 <d_number.isra.1+0x50>
 80003f6:	2600      	movs	r6, #0
 80003f8:	2300      	movs	r3, #0
 80003fa:	3201      	adds	r2, #1
 80003fc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000400:	6002      	str	r2, [r0, #0]
 8000402:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 8000406:	7811      	ldrb	r1, [r2, #0]
 8000408:	f1a1 0530 	sub.w	r5, r1, #48	; 0x30
 800040c:	2d09      	cmp	r5, #9
 800040e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8000412:	d9f2      	bls.n	80003fa <d_number.isra.1+0x16>
 8000414:	b10e      	cbz	r6, 800041a <d_number.isra.1+0x36>
 8000416:	f1c4 0330 	rsb	r3, r4, #48	; 0x30
 800041a:	4618      	mov	r0, r3
 800041c:	bc70      	pop	{r4, r5, r6}
 800041e:	4770      	bx	lr
 8000420:	1c53      	adds	r3, r2, #1
 8000422:	6003      	str	r3, [r0, #0]
 8000424:	7851      	ldrb	r1, [r2, #1]
 8000426:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800042a:	2a09      	cmp	r2, #9
 800042c:	d802      	bhi.n	8000434 <d_number.isra.1+0x50>
 800042e:	461a      	mov	r2, r3
 8000430:	2601      	movs	r6, #1
 8000432:	e7e1      	b.n	80003f8 <d_number.isra.1+0x14>
 8000434:	2300      	movs	r3, #0
 8000436:	4618      	mov	r0, r3
 8000438:	bc70      	pop	{r4, r5, r6}
 800043a:	4770      	bx	lr

0800043c <d_number_component>:
 800043c:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8000440:	4293      	cmp	r3, r2
 8000442:	b570      	push	{r4, r5, r6, lr}
 8000444:	da0e      	bge.n	8000464 <d_number_component+0x28>
 8000446:	6901      	ldr	r1, [r0, #16]
 8000448:	011a      	lsls	r2, r3, #4
 800044a:	188c      	adds	r4, r1, r2
 800044c:	3301      	adds	r3, #1
 800044e:	2600      	movs	r6, #0
 8000450:	2541      	movs	r5, #65	; 0x41
 8000452:	6066      	str	r6, [r4, #4]
 8000454:	300c      	adds	r0, #12
 8000456:	6083      	str	r3, [r0, #8]
 8000458:	548d      	strb	r5, [r1, r2]
 800045a:	f7ff ffc3 	bl	80003e4 <d_number.isra.1>
 800045e:	60a0      	str	r0, [r4, #8]
 8000460:	4620      	mov	r0, r4
 8000462:	bd70      	pop	{r4, r5, r6, pc}
 8000464:	2400      	movs	r4, #0
 8000466:	4620      	mov	r0, r4
 8000468:	bd70      	pop	{r4, r5, r6, pc}
 800046a:	bf00      	nop

0800046c <d_compact_number>:
 800046c:	b510      	push	{r4, lr}
 800046e:	68c3      	ldr	r3, [r0, #12]
 8000470:	781a      	ldrb	r2, [r3, #0]
 8000472:	2a5f      	cmp	r2, #95	; 0x5f
 8000474:	4604      	mov	r4, r0
 8000476:	d00d      	beq.n	8000494 <d_compact_number+0x28>
 8000478:	2a6e      	cmp	r2, #110	; 0x6e
 800047a:	d00d      	beq.n	8000498 <d_compact_number+0x2c>
 800047c:	300c      	adds	r0, #12
 800047e:	f7ff ffb1 	bl	80003e4 <d_number.isra.1>
 8000482:	3001      	adds	r0, #1
 8000484:	d408      	bmi.n	8000498 <d_compact_number+0x2c>
 8000486:	68e3      	ldr	r3, [r4, #12]
 8000488:	781a      	ldrb	r2, [r3, #0]
 800048a:	2a5f      	cmp	r2, #95	; 0x5f
 800048c:	d104      	bne.n	8000498 <d_compact_number+0x2c>
 800048e:	3301      	adds	r3, #1
 8000490:	60e3      	str	r3, [r4, #12]
 8000492:	bd10      	pop	{r4, pc}
 8000494:	2000      	movs	r0, #0
 8000496:	e7fa      	b.n	800048e <d_compact_number+0x22>
 8000498:	f04f 30ff 	mov.w	r0, #4294967295
 800049c:	bd10      	pop	{r4, pc}
 800049e:	bf00      	nop

080004a0 <d_template_param>:
 80004a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004a2:	68c3      	ldr	r3, [r0, #12]
 80004a4:	781a      	ldrb	r2, [r3, #0]
 80004a6:	2a54      	cmp	r2, #84	; 0x54
 80004a8:	d119      	bne.n	80004de <d_template_param+0x3e>
 80004aa:	3301      	adds	r3, #1
 80004ac:	60c3      	str	r3, [r0, #12]
 80004ae:	4604      	mov	r4, r0
 80004b0:	f7ff ffdc 	bl	800046c <d_compact_number>
 80004b4:	1e05      	subs	r5, r0, #0
 80004b6:	db12      	blt.n	80004de <d_template_param+0x3e>
 80004b8:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 80004bc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80004be:	428b      	cmp	r3, r1
 80004c0:	f102 0201 	add.w	r2, r2, #1
 80004c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80004c6:	da0a      	bge.n	80004de <d_template_param+0x3e>
 80004c8:	6921      	ldr	r1, [r4, #16]
 80004ca:	011a      	lsls	r2, r3, #4
 80004cc:	1888      	adds	r0, r1, r2
 80004ce:	3301      	adds	r3, #1
 80004d0:	2700      	movs	r7, #0
 80004d2:	2605      	movs	r6, #5
 80004d4:	6047      	str	r7, [r0, #4]
 80004d6:	6163      	str	r3, [r4, #20]
 80004d8:	548e      	strb	r6, [r1, r2]
 80004da:	6085      	str	r5, [r0, #8]
 80004dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004de:	2000      	movs	r0, #0
 80004e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004e2:	bf00      	nop

080004e4 <d_source_name>:
 80004e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80004e8:	4604      	mov	r4, r0
 80004ea:	300c      	adds	r0, #12
 80004ec:	f7ff ff7a 	bl	80003e4 <d_number.isra.1>
 80004f0:	1e07      	subs	r7, r0, #0
 80004f2:	dd49      	ble.n	8000588 <d_source_name+0xa4>
 80004f4:	68e5      	ldr	r5, [r4, #12]
 80004f6:	6863      	ldr	r3, [r4, #4]
 80004f8:	1b5b      	subs	r3, r3, r5
 80004fa:	429f      	cmp	r7, r3
 80004fc:	dc42      	bgt.n	8000584 <d_source_name+0xa0>
 80004fe:	68a2      	ldr	r2, [r4, #8]
 8000500:	19eb      	adds	r3, r5, r7
 8000502:	0752      	lsls	r2, r2, #29
 8000504:	60e3      	str	r3, [r4, #12]
 8000506:	d504      	bpl.n	8000512 <d_source_name+0x2e>
 8000508:	5dea      	ldrb	r2, [r5, r7]
 800050a:	2a24      	cmp	r2, #36	; 0x24
 800050c:	bf04      	itt	eq
 800050e:	3301      	addeq	r3, #1
 8000510:	60e3      	streq	r3, [r4, #12]
 8000512:	2f09      	cmp	r7, #9
 8000514:	e9d4 6805 	ldrd	r6, r8, [r4, #20]
 8000518:	dc10      	bgt.n	800053c <d_source_name+0x58>
 800051a:	45b0      	cmp	r8, r6
 800051c:	dd32      	ble.n	8000584 <d_source_name+0xa0>
 800051e:	6921      	ldr	r1, [r4, #16]
 8000520:	0132      	lsls	r2, r6, #4
 8000522:	1888      	adds	r0, r1, r2
 8000524:	3601      	adds	r6, #1
 8000526:	2300      	movs	r3, #0
 8000528:	6043      	str	r3, [r0, #4]
 800052a:	6166      	str	r6, [r4, #20]
 800052c:	b355      	cbz	r5, 8000584 <d_source_name+0xa0>
 800052e:	6043      	str	r3, [r0, #4]
 8000530:	548b      	strb	r3, [r1, r2]
 8000532:	e9c0 5702 	strd	r5, r7, [r0, #8]
 8000536:	62e0      	str	r0, [r4, #44]	; 0x2c
 8000538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800053c:	2208      	movs	r2, #8
 800053e:	4914      	ldr	r1, [pc, #80]	; (8000590 <d_source_name+0xac>)
 8000540:	4628      	mov	r0, r5
 8000542:	f02d ffe7 	bl	802e514 <memcmp>
 8000546:	2800      	cmp	r0, #0
 8000548:	d1e7      	bne.n	800051a <d_source_name+0x36>
 800054a:	7a2b      	ldrb	r3, [r5, #8]
 800054c:	2b2e      	cmp	r3, #46	; 0x2e
 800054e:	d003      	beq.n	8000558 <d_source_name+0x74>
 8000550:	2b5f      	cmp	r3, #95	; 0x5f
 8000552:	d001      	beq.n	8000558 <d_source_name+0x74>
 8000554:	2b24      	cmp	r3, #36	; 0x24
 8000556:	d1e0      	bne.n	800051a <d_source_name+0x36>
 8000558:	7a6b      	ldrb	r3, [r5, #9]
 800055a:	2b4e      	cmp	r3, #78	; 0x4e
 800055c:	d1dd      	bne.n	800051a <d_source_name+0x36>
 800055e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000560:	3316      	adds	r3, #22
 8000562:	1bdf      	subs	r7, r3, r7
 8000564:	45b0      	cmp	r8, r6
 8000566:	6327      	str	r7, [r4, #48]	; 0x30
 8000568:	dd0c      	ble.n	8000584 <d_source_name+0xa0>
 800056a:	6922      	ldr	r2, [r4, #16]
 800056c:	4d09      	ldr	r5, [pc, #36]	; (8000594 <d_source_name+0xb0>)
 800056e:	0133      	lsls	r3, r6, #4
 8000570:	18d0      	adds	r0, r2, r3
 8000572:	2100      	movs	r1, #0
 8000574:	3601      	adds	r6, #1
 8000576:	6166      	str	r6, [r4, #20]
 8000578:	6041      	str	r1, [r0, #4]
 800057a:	54d1      	strb	r1, [r2, r3]
 800057c:	2315      	movs	r3, #21
 800057e:	e9c0 5302 	strd	r5, r3, [r0, #8]
 8000582:	e7d8      	b.n	8000536 <d_source_name+0x52>
 8000584:	2000      	movs	r0, #0
 8000586:	e7d6      	b.n	8000536 <d_source_name+0x52>
 8000588:	2000      	movs	r0, #0
 800058a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800058e:	bf00      	nop
 8000590:	08034d90 	.word	0x08034d90
 8000594:	08034d9c 	.word	0x08034d9c

08000598 <d_abi_tags>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	68c3      	ldr	r3, [r0, #12]
 800059c:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 800059e:	781a      	ldrb	r2, [r3, #0]
 80005a0:	2a42      	cmp	r2, #66	; 0x42
 80005a2:	4604      	mov	r4, r0
 80005a4:	460d      	mov	r5, r1
 80005a6:	d10f      	bne.n	80005c8 <d_abi_tags+0x30>
 80005a8:	3301      	adds	r3, #1
 80005aa:	60e3      	str	r3, [r4, #12]
 80005ac:	4620      	mov	r0, r4
 80005ae:	f7ff ff99 	bl	80004e4 <d_source_name>
 80005b2:	462a      	mov	r2, r5
 80005b4:	4603      	mov	r3, r0
 80005b6:	214b      	movs	r1, #75	; 0x4b
 80005b8:	4620      	mov	r0, r4
 80005ba:	f7ff fe19 	bl	80001f0 <d_make_comp>
 80005be:	68e3      	ldr	r3, [r4, #12]
 80005c0:	781a      	ldrb	r2, [r3, #0]
 80005c2:	2a42      	cmp	r2, #66	; 0x42
 80005c4:	4605      	mov	r5, r0
 80005c6:	d0ef      	beq.n	80005a8 <d_abi_tags+0x10>
 80005c8:	62e6      	str	r6, [r4, #44]	; 0x2c
 80005ca:	4628      	mov	r0, r5
 80005cc:	bd70      	pop	{r4, r5, r6, pc}
 80005ce:	bf00      	nop

080005d0 <d_substitution>:
 80005d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80005d4:	4605      	mov	r5, r0
 80005d6:	68c0      	ldr	r0, [r0, #12]
 80005d8:	7803      	ldrb	r3, [r0, #0]
 80005da:	2b53      	cmp	r3, #83	; 0x53
 80005dc:	d131      	bne.n	8000642 <d_substitution+0x72>
 80005de:	1c43      	adds	r3, r0, #1
 80005e0:	60eb      	str	r3, [r5, #12]
 80005e2:	7842      	ldrb	r2, [r0, #1]
 80005e4:	b3a2      	cbz	r2, 8000650 <d_substitution+0x80>
 80005e6:	1c83      	adds	r3, r0, #2
 80005e8:	60eb      	str	r3, [r5, #12]
 80005ea:	7842      	ldrb	r2, [r0, #1]
 80005ec:	2a5f      	cmp	r2, #95	; 0x5f
 80005ee:	f000 8089 	beq.w	8000704 <d_substitution+0x134>
 80005f2:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 80005f6:	b2e3      	uxtb	r3, r4
 80005f8:	2b09      	cmp	r3, #9
 80005fa:	d825      	bhi.n	8000648 <d_substitution+0x78>
 80005fc:	2100      	movs	r1, #0
 80005fe:	e00e      	b.n	800061e <d_substitution+0x4e>
 8000600:	3b30      	subs	r3, #48	; 0x30
 8000602:	4299      	cmp	r1, r3
 8000604:	d81d      	bhi.n	8000642 <d_substitution+0x72>
 8000606:	68e9      	ldr	r1, [r5, #12]
 8000608:	780a      	ldrb	r2, [r1, #0]
 800060a:	1c48      	adds	r0, r1, #1
 800060c:	b122      	cbz	r2, 8000618 <d_substitution+0x48>
 800060e:	60e8      	str	r0, [r5, #12]
 8000610:	780a      	ldrb	r2, [r1, #0]
 8000612:	2a5f      	cmp	r2, #95	; 0x5f
 8000614:	f000 8082 	beq.w	800071c <d_substitution+0x14c>
 8000618:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 800061c:	4619      	mov	r1, r3
 800061e:	b2e4      	uxtb	r4, r4
 8000620:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8000624:	2c09      	cmp	r4, #9
 8000626:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
 800062a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800062e:	d9e7      	bls.n	8000600 <d_substitution+0x30>
 8000630:	2819      	cmp	r0, #25
 8000632:	d806      	bhi.n	8000642 <d_substitution+0x72>
 8000634:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8000638:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800063c:	3b37      	subs	r3, #55	; 0x37
 800063e:	4299      	cmp	r1, r3
 8000640:	d9e1      	bls.n	8000606 <d_substitution+0x36>
 8000642:	2000      	movs	r0, #0
 8000644:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000648:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 800064c:	2b19      	cmp	r3, #25
 800064e:	d9d5      	bls.n	80005fc <d_substitution+0x2c>
 8000650:	68ab      	ldr	r3, [r5, #8]
 8000652:	f003 0308 	and.w	r3, r3, #8
 8000656:	2b00      	cmp	r3, #0
 8000658:	bf14      	ite	ne
 800065a:	2401      	movne	r4, #1
 800065c:	2400      	moveq	r4, #0
 800065e:	d101      	bne.n	8000664 <d_substitution+0x94>
 8000660:	2900      	cmp	r1, #0
 8000662:	d15d      	bne.n	8000720 <d_substitution+0x150>
 8000664:	4b35      	ldr	r3, [pc, #212]	; (800073c <d_substitution+0x16c>)
 8000666:	2174      	movs	r1, #116	; 0x74
 8000668:	4291      	cmp	r1, r2
 800066a:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
 800066e:	d005      	beq.n	800067c <d_substitution+0xac>
 8000670:	331c      	adds	r3, #28
 8000672:	4283      	cmp	r3, r0
 8000674:	d2e5      	bcs.n	8000642 <d_substitution+0x72>
 8000676:	7819      	ldrb	r1, [r3, #0]
 8000678:	4291      	cmp	r1, r2
 800067a:	d1f9      	bne.n	8000670 <d_substitution+0xa0>
 800067c:	6958      	ldr	r0, [r3, #20]
 800067e:	e9d5 2105 	ldrd	r2, r1, [r5, #20]
 8000682:	b1a8      	cbz	r0, 80006b0 <d_substitution+0xe0>
 8000684:	428a      	cmp	r2, r1
 8000686:	da57      	bge.n	8000738 <d_substitution+0x168>
 8000688:	f8d5 c010 	ldr.w	ip, [r5, #16]
 800068c:	f8d3 e018 	ldr.w	lr, [r3, #24]
 8000690:	0117      	lsls	r7, r2, #4
 8000692:	eb0c 0607 	add.w	r6, ip, r7
 8000696:	3201      	adds	r2, #1
 8000698:	f04f 0900 	mov.w	r9, #0
 800069c:	f04f 0818 	mov.w	r8, #24
 80006a0:	f8c6 9004 	str.w	r9, [r6, #4]
 80006a4:	616a      	str	r2, [r5, #20]
 80006a6:	f80c 8007 	strb.w	r8, [ip, r7]
 80006aa:	e9c6 0e02 	strd	r0, lr, [r6, #8]
 80006ae:	62ee      	str	r6, [r5, #44]	; 0x2c
 80006b0:	2c00      	cmp	r4, #0
 80006b2:	d13c      	bne.n	800072e <d_substitution+0x15e>
 80006b4:	e9d3 6401 	ldrd	r6, r4, [r3, #4]
 80006b8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80006ba:	4291      	cmp	r1, r2
 80006bc:	4423      	add	r3, r4
 80006be:	632b      	str	r3, [r5, #48]	; 0x30
 80006c0:	dd38      	ble.n	8000734 <d_substitution+0x164>
 80006c2:	6929      	ldr	r1, [r5, #16]
 80006c4:	0113      	lsls	r3, r2, #4
 80006c6:	18c8      	adds	r0, r1, r3
 80006c8:	3201      	adds	r2, #1
 80006ca:	f04f 0c00 	mov.w	ip, #0
 80006ce:	2718      	movs	r7, #24
 80006d0:	f8c0 c004 	str.w	ip, [r0, #4]
 80006d4:	616a      	str	r2, [r5, #20]
 80006d6:	54cf      	strb	r7, [r1, r3]
 80006d8:	e9c0 6402 	strd	r6, r4, [r0, #8]
 80006dc:	68eb      	ldr	r3, [r5, #12]
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b42      	cmp	r3, #66	; 0x42
 80006e2:	d1af      	bne.n	8000644 <d_substitution+0x74>
 80006e4:	4601      	mov	r1, r0
 80006e6:	4628      	mov	r0, r5
 80006e8:	f7ff ff56 	bl	8000598 <d_abi_tags>
 80006ec:	2800      	cmp	r0, #0
 80006ee:	d0a8      	beq.n	8000642 <d_substitution+0x72>
 80006f0:	e9d5 3208 	ldrd	r3, r2, [r5, #32]
 80006f4:	4293      	cmp	r3, r2
 80006f6:	daa5      	bge.n	8000644 <d_substitution+0x74>
 80006f8:	69e9      	ldr	r1, [r5, #28]
 80006fa:	1c5a      	adds	r2, r3, #1
 80006fc:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8000700:	622a      	str	r2, [r5, #32]
 8000702:	e79f      	b.n	8000644 <d_substitution+0x74>
 8000704:	2300      	movs	r3, #0
 8000706:	6a2a      	ldr	r2, [r5, #32]
 8000708:	429a      	cmp	r2, r3
 800070a:	d99a      	bls.n	8000642 <d_substitution+0x72>
 800070c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800070e:	69e9      	ldr	r1, [r5, #28]
 8000710:	3201      	adds	r2, #1
 8000712:	62aa      	str	r2, [r5, #40]	; 0x28
 8000714:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8000718:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800071c:	3301      	adds	r3, #1
 800071e:	e7f2      	b.n	8000706 <d_substitution+0x136>
 8000720:	68eb      	ldr	r3, [r5, #12]
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	3b43      	subs	r3, #67	; 0x43
 8000726:	2b01      	cmp	r3, #1
 8000728:	bf98      	it	ls
 800072a:	460c      	movls	r4, r1
 800072c:	e79a      	b.n	8000664 <d_substitution+0x94>
 800072e:	e9d3 6403 	ldrd	r6, r4, [r3, #12]
 8000732:	e7c1      	b.n	80006b8 <d_substitution+0xe8>
 8000734:	2000      	movs	r0, #0
 8000736:	e7d1      	b.n	80006dc <d_substitution+0x10c>
 8000738:	2600      	movs	r6, #0
 800073a:	e7b8      	b.n	80006ae <d_substitution+0xde>
 800073c:	080301d8 	.word	0x080301d8

08000740 <d_discriminator>:
 8000740:	68c3      	ldr	r3, [r0, #12]
 8000742:	781a      	ldrb	r2, [r3, #0]
 8000744:	2a5f      	cmp	r2, #95	; 0x5f
 8000746:	d001      	beq.n	800074c <d_discriminator+0xc>
 8000748:	2001      	movs	r0, #1
 800074a:	4770      	bx	lr
 800074c:	b510      	push	{r4, lr}
 800074e:	1c5a      	adds	r2, r3, #1
 8000750:	4604      	mov	r4, r0
 8000752:	f840 2f0c 	str.w	r2, [r0, #12]!
 8000756:	785a      	ldrb	r2, [r3, #1]
 8000758:	2a5f      	cmp	r2, #95	; 0x5f
 800075a:	d004      	beq.n	8000766 <d_discriminator+0x26>
 800075c:	f7ff fe42 	bl	80003e4 <d_number.isra.1>
 8000760:	43c0      	mvns	r0, r0
 8000762:	0fc0      	lsrs	r0, r0, #31
 8000764:	bd10      	pop	{r4, pc}
 8000766:	3302      	adds	r3, #2
 8000768:	60e3      	str	r3, [r4, #12]
 800076a:	f7ff fe3b 	bl	80003e4 <d_number.isra.1>
 800076e:	2800      	cmp	r0, #0
 8000770:	db05      	blt.n	800077e <d_discriminator+0x3e>
 8000772:	2809      	cmp	r0, #9
 8000774:	dd07      	ble.n	8000786 <d_discriminator+0x46>
 8000776:	68e3      	ldr	r3, [r4, #12]
 8000778:	781a      	ldrb	r2, [r3, #0]
 800077a:	2a5f      	cmp	r2, #95	; 0x5f
 800077c:	d001      	beq.n	8000782 <d_discriminator+0x42>
 800077e:	2000      	movs	r0, #0
 8000780:	bd10      	pop	{r4, pc}
 8000782:	3301      	adds	r3, #1
 8000784:	60e3      	str	r3, [r4, #12]
 8000786:	2001      	movs	r0, #1
 8000788:	bd10      	pop	{r4, pc}
 800078a:	bf00      	nop

0800078c <d_index_template_argument.part.9>:
 800078c:	b170      	cbz	r0, 80007ac <d_index_template_argument.part.9+0x20>
 800078e:	7803      	ldrb	r3, [r0, #0]
 8000790:	2b2f      	cmp	r3, #47	; 0x2f
 8000792:	d10f      	bne.n	80007b4 <d_index_template_argument.part.9+0x28>
 8000794:	2900      	cmp	r1, #0
 8000796:	dc04      	bgt.n	80007a2 <d_index_template_argument.part.9+0x16>
 8000798:	e009      	b.n	80007ae <d_index_template_argument.part.9+0x22>
 800079a:	7803      	ldrb	r3, [r0, #0]
 800079c:	2b2f      	cmp	r3, #47	; 0x2f
 800079e:	d109      	bne.n	80007b4 <d_index_template_argument.part.9+0x28>
 80007a0:	b131      	cbz	r1, 80007b0 <d_index_template_argument.part.9+0x24>
 80007a2:	68c0      	ldr	r0, [r0, #12]
 80007a4:	3901      	subs	r1, #1
 80007a6:	2800      	cmp	r0, #0
 80007a8:	d1f7      	bne.n	800079a <d_index_template_argument.part.9+0xe>
 80007aa:	4770      	bx	lr
 80007ac:	4770      	bx	lr
 80007ae:	d101      	bne.n	80007b4 <d_index_template_argument.part.9+0x28>
 80007b0:	6880      	ldr	r0, [r0, #8]
 80007b2:	4770      	bx	lr
 80007b4:	2000      	movs	r0, #0
 80007b6:	4770      	bx	lr

080007b8 <d_lookup_template_argument.isra.10>:
 80007b8:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 80007bc:	b133      	cbz	r3, 80007cc <d_lookup_template_argument.isra.10+0x14>
 80007be:	6809      	ldr	r1, [r1, #0]
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	2900      	cmp	r1, #0
 80007c4:	68db      	ldr	r3, [r3, #12]
 80007c6:	db04      	blt.n	80007d2 <d_lookup_template_argument.isra.10+0x1a>
 80007c8:	4618      	mov	r0, r3
 80007ca:	e7df      	b.n	800078c <d_index_template_argument.part.9>
 80007cc:	2201      	movs	r2, #1
 80007ce:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
 80007d2:	4618      	mov	r0, r3
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop

080007d8 <d_find_pack>:
 80007d8:	2900      	cmp	r1, #0
 80007da:	d042      	beq.n	8000862 <d_find_pack+0x8a>
 80007dc:	b538      	push	{r3, r4, r5, lr}
 80007de:	4605      	mov	r5, r0
 80007e0:	460c      	mov	r4, r1
 80007e2:	7823      	ldrb	r3, [r4, #0]
 80007e4:	2b4b      	cmp	r3, #75	; 0x4b
 80007e6:	d827      	bhi.n	8000838 <d_find_pack+0x60>
 80007e8:	e8df f003 	tbb	[pc, r3]
 80007ec:	2626262e 	.word	0x2626262e
 80007f0:	2b2e3026 	.word	0x2b2e3026
 80007f4:	2626262b 	.word	0x2626262b
 80007f8:	26262626 	.word	0x26262626
 80007fc:	26262626 	.word	0x26262626
 8000800:	26262626 	.word	0x26262626
 8000804:	2626262e 	.word	0x2626262e
 8000808:	26262626 	.word	0x26262626
 800080c:	26262626 	.word	0x26262626
 8000810:	2e262626 	.word	0x2e262626
 8000814:	26262626 	.word	0x26262626
 8000818:	2626262e 	.word	0x2626262e
 800081c:	262b2e26 	.word	0x262b2e26
 8000820:	26262626 	.word	0x26262626
 8000824:	26262626 	.word	0x26262626
 8000828:	26262626 	.word	0x26262626
 800082c:	26262e2e 	.word	0x26262e2e
 8000830:	2e2e2e26 	.word	0x2e2e2e26
 8000834:	2e2e2626 	.word	0x2e2e2626
 8000838:	68a1      	ldr	r1, [r4, #8]
 800083a:	4628      	mov	r0, r5
 800083c:	f7ff ffcc 	bl	80007d8 <d_find_pack>
 8000840:	b918      	cbnz	r0, 800084a <d_find_pack+0x72>
 8000842:	68e4      	ldr	r4, [r4, #12]
 8000844:	2c00      	cmp	r4, #0
 8000846:	d1cc      	bne.n	80007e2 <d_find_pack+0xa>
 8000848:	2000      	movs	r0, #0
 800084a:	bd38      	pop	{r3, r4, r5, pc}
 800084c:	f104 0108 	add.w	r1, r4, #8
 8000850:	4628      	mov	r0, r5
 8000852:	f7ff ffb1 	bl	80007b8 <d_lookup_template_argument.isra.10>
 8000856:	2800      	cmp	r0, #0
 8000858:	d0f6      	beq.n	8000848 <d_find_pack+0x70>
 800085a:	7803      	ldrb	r3, [r0, #0]
 800085c:	2b2f      	cmp	r3, #47	; 0x2f
 800085e:	d1f3      	bne.n	8000848 <d_find_pack+0x70>
 8000860:	bd38      	pop	{r3, r4, r5, pc}
 8000862:	2000      	movs	r0, #0
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop

08000868 <d_growable_string_callback_adapter>:
 8000868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800086c:	4614      	mov	r4, r2
 800086e:	e9d4 5702 	ldrd	r5, r7, [r4, #8]
 8000872:	6852      	ldr	r2, [r2, #4]
 8000874:	1c4b      	adds	r3, r1, #1
 8000876:	4413      	add	r3, r2
 8000878:	42ab      	cmp	r3, r5
 800087a:	b082      	sub	sp, #8
 800087c:	460e      	mov	r6, r1
 800087e:	4680      	mov	r8, r0
 8000880:	d814      	bhi.n	80008ac <d_growable_string_callback_adapter+0x44>
 8000882:	b117      	cbz	r7, 800088a <d_growable_string_callback_adapter+0x22>
 8000884:	b002      	add	sp, #8
 8000886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800088a:	e9d4 0300 	ldrd	r0, r3, [r4]
 800088e:	4632      	mov	r2, r6
 8000890:	4641      	mov	r1, r8
 8000892:	4418      	add	r0, r3
 8000894:	f02d fe4d 	bl	802e532 <memcpy>
 8000898:	e9d4 3200 	ldrd	r3, r2, [r4]
 800089c:	4433      	add	r3, r6
 800089e:	549f      	strb	r7, [r3, r2]
 80008a0:	6863      	ldr	r3, [r4, #4]
 80008a2:	441e      	add	r6, r3
 80008a4:	6066      	str	r6, [r4, #4]
 80008a6:	b002      	add	sp, #8
 80008a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80008ac:	2f00      	cmp	r7, #0
 80008ae:	d1e9      	bne.n	8000884 <d_growable_string_callback_adapter+0x1c>
 80008b0:	b91d      	cbnz	r5, 80008ba <d_growable_string_callback_adapter+0x52>
 80008b2:	2b02      	cmp	r3, #2
 80008b4:	f04f 0502 	mov.w	r5, #2
 80008b8:	d902      	bls.n	80008c0 <d_growable_string_callback_adapter+0x58>
 80008ba:	006d      	lsls	r5, r5, #1
 80008bc:	42ab      	cmp	r3, r5
 80008be:	d8fc      	bhi.n	80008ba <d_growable_string_callback_adapter+0x52>
 80008c0:	4629      	mov	r1, r5
 80008c2:	6820      	ldr	r0, [r4, #0]
 80008c4:	f02e f9ee 	bl	802eca4 <realloc>
 80008c8:	b128      	cbz	r0, 80008d6 <d_growable_string_callback_adapter+0x6e>
 80008ca:	68e7      	ldr	r7, [r4, #12]
 80008cc:	6020      	str	r0, [r4, #0]
 80008ce:	60a5      	str	r5, [r4, #8]
 80008d0:	2f00      	cmp	r7, #0
 80008d2:	d1d7      	bne.n	8000884 <d_growable_string_callback_adapter+0x1c>
 80008d4:	e7d9      	b.n	800088a <d_growable_string_callback_adapter+0x22>
 80008d6:	9001      	str	r0, [sp, #4]
 80008d8:	6820      	ldr	r0, [r4, #0]
 80008da:	f02d fe13 	bl	802e504 <free>
 80008de:	9b01      	ldr	r3, [sp, #4]
 80008e0:	2201      	movs	r2, #1
 80008e2:	e9c4 3300 	strd	r3, r3, [r4]
 80008e6:	e9c4 3202 	strd	r3, r2, [r4, #8]
 80008ea:	e7cb      	b.n	8000884 <d_growable_string_callback_adapter+0x1c>

080008ec <d_call_offset>:
 80008ec:	b538      	push	{r3, r4, r5, lr}
 80008ee:	4604      	mov	r4, r0
 80008f0:	b929      	cbnz	r1, 80008fe <d_call_offset+0x12>
 80008f2:	68c3      	ldr	r3, [r0, #12]
 80008f4:	781a      	ldrb	r2, [r3, #0]
 80008f6:	b132      	cbz	r2, 8000906 <d_call_offset+0x1a>
 80008f8:	1c5a      	adds	r2, r3, #1
 80008fa:	60c2      	str	r2, [r0, #12]
 80008fc:	7819      	ldrb	r1, [r3, #0]
 80008fe:	2968      	cmp	r1, #104	; 0x68
 8000900:	d012      	beq.n	8000928 <d_call_offset+0x3c>
 8000902:	2976      	cmp	r1, #118	; 0x76
 8000904:	d001      	beq.n	800090a <d_call_offset+0x1e>
 8000906:	2000      	movs	r0, #0
 8000908:	bd38      	pop	{r3, r4, r5, pc}
 800090a:	f104 050c 	add.w	r5, r4, #12
 800090e:	4628      	mov	r0, r5
 8000910:	f7ff fd68 	bl	80003e4 <d_number.isra.1>
 8000914:	68e3      	ldr	r3, [r4, #12]
 8000916:	781a      	ldrb	r2, [r3, #0]
 8000918:	2a5f      	cmp	r2, #95	; 0x5f
 800091a:	d1f4      	bne.n	8000906 <d_call_offset+0x1a>
 800091c:	3301      	adds	r3, #1
 800091e:	60e3      	str	r3, [r4, #12]
 8000920:	4628      	mov	r0, r5
 8000922:	f7ff fd5f 	bl	80003e4 <d_number.isra.1>
 8000926:	e003      	b.n	8000930 <d_call_offset+0x44>
 8000928:	f104 000c 	add.w	r0, r4, #12
 800092c:	f7ff fd5a 	bl	80003e4 <d_number.isra.1>
 8000930:	68e3      	ldr	r3, [r4, #12]
 8000932:	781a      	ldrb	r2, [r3, #0]
 8000934:	2a5f      	cmp	r2, #95	; 0x5f
 8000936:	d1e6      	bne.n	8000906 <d_call_offset+0x1a>
 8000938:	3301      	adds	r3, #1
 800093a:	60e3      	str	r3, [r4, #12]
 800093c:	2001      	movs	r0, #1
 800093e:	bd38      	pop	{r3, r4, r5, pc}

08000940 <d_append_num>:
 8000940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000944:	b088      	sub	sp, #32
 8000946:	460a      	mov	r2, r1
 8000948:	4604      	mov	r4, r0
 800094a:	491c      	ldr	r1, [pc, #112]	; (80009bc <d_append_num+0x7c>)
 800094c:	a801      	add	r0, sp, #4
 800094e:	f02e fa39 	bl	802edc4 <siprintf>
 8000952:	a801      	add	r0, sp, #4
 8000954:	f006 f9c4 	bl	8006ce0 <strlen>
 8000958:	b368      	cbz	r0, 80009b6 <d_append_num+0x76>
 800095a:	ad01      	add	r5, sp, #4
 800095c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8000960:	182e      	adds	r6, r5, r0
 8000962:	2700      	movs	r7, #0
 8000964:	e016      	b.n	8000994 <d_append_num+0x54>
 8000966:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800096a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800096e:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8000972:	4798      	blx	r3
 8000974:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8000978:	2200      	movs	r2, #0
 800097a:	3301      	adds	r3, #1
 800097c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8000980:	42ae      	cmp	r6, r5
 8000982:	f04f 0301 	mov.w	r3, #1
 8000986:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800098a:	f804 8002 	strb.w	r8, [r4, r2]
 800098e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8000992:	d010      	beq.n	80009b6 <d_append_num+0x76>
 8000994:	2bff      	cmp	r3, #255	; 0xff
 8000996:	4619      	mov	r1, r3
 8000998:	4620      	mov	r0, r4
 800099a:	f815 8b01 	ldrb.w	r8, [r5], #1
 800099e:	d0e2      	beq.n	8000966 <d_append_num+0x26>
 80009a0:	461a      	mov	r2, r3
 80009a2:	42ae      	cmp	r6, r5
 80009a4:	f103 0301 	add.w	r3, r3, #1
 80009a8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80009ac:	f804 8002 	strb.w	r8, [r4, r2]
 80009b0:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80009b4:	d1ee      	bne.n	8000994 <d_append_num+0x54>
 80009b6:	b008      	add	sp, #32
 80009b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80009bc:	08034db4 	.word	0x08034db4

080009c0 <d_exprlist>:
 80009c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009c4:	68c3      	ldr	r3, [r0, #12]
 80009c6:	781d      	ldrb	r5, [r3, #0]
 80009c8:	b083      	sub	sp, #12
 80009ca:	2200      	movs	r2, #0
 80009cc:	428d      	cmp	r5, r1
 80009ce:	4604      	mov	r4, r0
 80009d0:	9201      	str	r2, [sp, #4]
 80009d2:	f000 8199 	beq.w	8000d08 <d_exprlist+0x348>
 80009d6:	f8df 94c0 	ldr.w	r9, [pc, #1216]	; 8000e98 <d_exprlist+0x4d8>
 80009da:	4688      	mov	r8, r1
 80009dc:	af01      	add	r7, sp, #4
 80009de:	2501      	movs	r5, #1
 80009e0:	6b66      	ldr	r6, [r4, #52]	; 0x34
 80009e2:	6365      	str	r5, [r4, #52]	; 0x34
 80009e4:	781a      	ldrb	r2, [r3, #0]
 80009e6:	2a4c      	cmp	r2, #76	; 0x4c
 80009e8:	d05c      	beq.n	8000aa4 <d_exprlist+0xe4>
 80009ea:	2a54      	cmp	r2, #84	; 0x54
 80009ec:	d066      	beq.n	8000abc <d_exprlist+0xfc>
 80009ee:	2a73      	cmp	r2, #115	; 0x73
 80009f0:	d045      	beq.n	8000a7e <d_exprlist+0xbe>
 80009f2:	2a66      	cmp	r2, #102	; 0x66
 80009f4:	d11c      	bne.n	8000a30 <d_exprlist+0x70>
 80009f6:	785a      	ldrb	r2, [r3, #1]
 80009f8:	2a70      	cmp	r2, #112	; 0x70
 80009fa:	f000 8087 	beq.w	8000b0c <d_exprlist+0x14c>
 80009fe:	4620      	mov	r0, r4
 8000a00:	f001 fa70 	bl	8001ee4 <d_operator_name>
 8000a04:	4605      	mov	r5, r0
 8000a06:	2800      	cmp	r0, #0
 8000a08:	f000 818c 	beq.w	8000d24 <d_exprlist+0x364>
 8000a0c:	7803      	ldrb	r3, [r0, #0]
 8000a0e:	2b31      	cmp	r3, #49	; 0x31
 8000a10:	f000 8098 	beq.w	8000b44 <d_exprlist+0x184>
 8000a14:	2b32      	cmp	r3, #50	; 0x32
 8000a16:	d056      	beq.n	8000ac6 <d_exprlist+0x106>
 8000a18:	2b33      	cmp	r3, #51	; 0x33
 8000a1a:	d171      	bne.n	8000b00 <d_exprlist+0x140>
 8000a1c:	68e3      	ldr	r3, [r4, #12]
 8000a1e:	781a      	ldrb	r2, [r3, #0]
 8000a20:	2a5f      	cmp	r2, #95	; 0x5f
 8000a22:	f000 81da 	beq.w	8000dda <d_exprlist+0x41a>
 8000a26:	4620      	mov	r0, r4
 8000a28:	f000 fa38 	bl	8000e9c <d_expression_1>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	e0c1      	b.n	8000bb4 <d_exprlist+0x1f4>
 8000a30:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8000a34:	2909      	cmp	r1, #9
 8000a36:	f200 80e7 	bhi.w	8000c08 <d_exprlist+0x248>
 8000a3a:	4620      	mov	r0, r4
 8000a3c:	f001 fbfe 	bl	800223c <d_unqualified_name>
 8000a40:	4605      	mov	r5, r0
 8000a42:	2800      	cmp	r0, #0
 8000a44:	f000 816e 	beq.w	8000d24 <d_exprlist+0x364>
 8000a48:	68e3      	ldr	r3, [r4, #12]
 8000a4a:	781a      	ldrb	r2, [r3, #0]
 8000a4c:	2a49      	cmp	r2, #73	; 0x49
 8000a4e:	f000 80b8 	beq.w	8000bc2 <d_exprlist+0x202>
 8000a52:	6366      	str	r6, [r4, #52]	; 0x34
 8000a54:	462a      	mov	r2, r5
 8000a56:	2300      	movs	r3, #0
 8000a58:	212e      	movs	r1, #46	; 0x2e
 8000a5a:	4620      	mov	r0, r4
 8000a5c:	f7ff fbc8 	bl	80001f0 <d_make_comp>
 8000a60:	6038      	str	r0, [r7, #0]
 8000a62:	b330      	cbz	r0, 8000ab2 <d_exprlist+0xf2>
 8000a64:	68e3      	ldr	r3, [r4, #12]
 8000a66:	781a      	ldrb	r2, [r3, #0]
 8000a68:	4542      	cmp	r2, r8
 8000a6a:	f100 070c 	add.w	r7, r0, #12
 8000a6e:	d1b6      	bne.n	80009de <d_exprlist+0x1e>
 8000a70:	3301      	adds	r3, #1
 8000a72:	9d01      	ldr	r5, [sp, #4]
 8000a74:	60e3      	str	r3, [r4, #12]
 8000a76:	4628      	mov	r0, r5
 8000a78:	b003      	add	sp, #12
 8000a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a7e:	785a      	ldrb	r2, [r3, #1]
 8000a80:	2a72      	cmp	r2, #114	; 0x72
 8000a82:	f000 80ab 	beq.w	8000bdc <d_exprlist+0x21c>
 8000a86:	2a70      	cmp	r2, #112	; 0x70
 8000a88:	d1b9      	bne.n	80009fe <d_exprlist+0x3e>
 8000a8a:	3302      	adds	r3, #2
 8000a8c:	60e3      	str	r3, [r4, #12]
 8000a8e:	4620      	mov	r0, r4
 8000a90:	f000 fa04 	bl	8000e9c <d_expression_1>
 8000a94:	2300      	movs	r3, #0
 8000a96:	4602      	mov	r2, r0
 8000a98:	214a      	movs	r1, #74	; 0x4a
 8000a9a:	4620      	mov	r0, r4
 8000a9c:	f7ff fba8 	bl	80001f0 <d_make_comp>
 8000aa0:	4605      	mov	r5, r0
 8000aa2:	e003      	b.n	8000aac <d_exprlist+0xec>
 8000aa4:	4620      	mov	r0, r4
 8000aa6:	f002 f813 	bl	8002ad0 <d_expr_primary>
 8000aaa:	4605      	mov	r5, r0
 8000aac:	6366      	str	r6, [r4, #52]	; 0x34
 8000aae:	2d00      	cmp	r5, #0
 8000ab0:	d1d0      	bne.n	8000a54 <d_exprlist+0x94>
 8000ab2:	2500      	movs	r5, #0
 8000ab4:	4628      	mov	r0, r5
 8000ab6:	b003      	add	sp, #12
 8000ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000abc:	4620      	mov	r0, r4
 8000abe:	f7ff fcef 	bl	80004a0 <d_template_param>
 8000ac2:	4605      	mov	r5, r0
 8000ac4:	e7f2      	b.n	8000aac <d_exprlist+0xec>
 8000ac6:	6883      	ldr	r3, [r0, #8]
 8000ac8:	2b03      	cmp	r3, #3
 8000aca:	d819      	bhi.n	8000b00 <d_exprlist+0x140>
 8000acc:	a201      	add	r2, pc, #4	; (adr r2, 8000ad4 <d_exprlist+0x114>)
 8000ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad2:	bf00      	nop
 8000ad4:	08000c67 	.word	0x08000c67
 8000ad8:	08000a27 	.word	0x08000a27
 8000adc:	08000b01 	.word	0x08000b01
 8000ae0:	08000b01 	.word	0x08000b01
 8000ae4:	2a74      	cmp	r2, #116	; 0x74
 8000ae6:	d18a      	bne.n	80009fe <d_exprlist+0x3e>
 8000ae8:	785b      	ldrb	r3, [r3, #1]
 8000aea:	2b6c      	cmp	r3, #108	; 0x6c
 8000aec:	d187      	bne.n	80009fe <d_exprlist+0x3e>
 8000aee:	4620      	mov	r0, r4
 8000af0:	f000 fdfe 	bl	80016f0 <d_type>
 8000af4:	68e3      	ldr	r3, [r4, #12]
 8000af6:	785a      	ldrb	r2, [r3, #1]
 8000af8:	4605      	mov	r5, r0
 8000afa:	2a00      	cmp	r2, #0
 8000afc:	f040 8123 	bne.w	8000d46 <d_exprlist+0x386>
 8000b00:	2500      	movs	r5, #0
 8000b02:	4628      	mov	r0, r5
 8000b04:	6366      	str	r6, [r4, #52]	; 0x34
 8000b06:	b003      	add	sp, #12
 8000b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b0c:	1c9a      	adds	r2, r3, #2
 8000b0e:	60e2      	str	r2, [r4, #12]
 8000b10:	789a      	ldrb	r2, [r3, #2]
 8000b12:	2a54      	cmp	r2, #84	; 0x54
 8000b14:	f040 8082 	bne.w	8000c1c <d_exprlist+0x25c>
 8000b18:	3303      	adds	r3, #3
 8000b1a:	60e3      	str	r3, [r4, #12]
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8000b22:	4293      	cmp	r3, r2
 8000b24:	daec      	bge.n	8000b00 <d_exprlist+0x140>
 8000b26:	6921      	ldr	r1, [r4, #16]
 8000b28:	011a      	lsls	r2, r3, #4
 8000b2a:	188d      	adds	r5, r1, r2
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	f04f 0e00 	mov.w	lr, #0
 8000b32:	f04f 0c06 	mov.w	ip, #6
 8000b36:	f8c5 e004 	str.w	lr, [r5, #4]
 8000b3a:	6163      	str	r3, [r4, #20]
 8000b3c:	f801 c002 	strb.w	ip, [r1, r2]
 8000b40:	60a8      	str	r0, [r5, #8]
 8000b42:	e786      	b.n	8000a52 <d_exprlist+0x92>
 8000b44:	f8d0 b008 	ldr.w	fp, [r0, #8]
 8000b48:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b4a:	f8db 2008 	ldr.w	r2, [fp, #8]
 8000b4e:	f8db a000 	ldr.w	sl, [fp]
 8000b52:	3a02      	subs	r2, #2
 8000b54:	4413      	add	r3, r2
 8000b56:	6323      	str	r3, [r4, #48]	; 0x30
 8000b58:	4650      	mov	r0, sl
 8000b5a:	4649      	mov	r1, r9
 8000b5c:	f006 f8b6 	bl	8006ccc <strcmp>
 8000b60:	2800      	cmp	r0, #0
 8000b62:	f000 80e4 	beq.w	8000d2e <d_exprlist+0x36e>
 8000b66:	f8db b00c 	ldr.w	fp, [fp, #12]
 8000b6a:	f1bb 0f03 	cmp.w	fp, #3
 8000b6e:	d8c7      	bhi.n	8000b00 <d_exprlist+0x140>
 8000b70:	e8df f01b 	tbh	[pc, fp, lsl #1]
 8000b74:	00040079 	.word	0x00040079
 8000b78:	008100f7 	.word	0x008100f7
 8000b7c:	f89a 3000 	ldrb.w	r3, [sl]
 8000b80:	2b70      	cmp	r3, #112	; 0x70
 8000b82:	d065      	beq.n	8000c50 <d_exprlist+0x290>
 8000b84:	2b6d      	cmp	r3, #109	; 0x6d
 8000b86:	d063      	beq.n	8000c50 <d_exprlist+0x290>
 8000b88:	f04f 0b00 	mov.w	fp, #0
 8000b8c:	4650      	mov	r0, sl
 8000b8e:	49bd      	ldr	r1, [pc, #756]	; (8000e84 <d_exprlist+0x4c4>)
 8000b90:	f006 f89c 	bl	8006ccc <strcmp>
 8000b94:	2800      	cmp	r0, #0
 8000b96:	f040 80c0 	bne.w	8000d1a <d_exprlist+0x35a>
 8000b9a:	4620      	mov	r0, r4
 8000b9c:	f000 fb90 	bl	80012c0 <d_template_args_1>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	f1bb 0f00 	cmp.w	fp, #0
 8000ba6:	d005      	beq.n	8000bb4 <d_exprlist+0x1f4>
 8000ba8:	461a      	mov	r2, r3
 8000baa:	2138      	movs	r1, #56	; 0x38
 8000bac:	4620      	mov	r0, r4
 8000bae:	f7ff fb1f 	bl	80001f0 <d_make_comp>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	462a      	mov	r2, r5
 8000bb6:	2136      	movs	r1, #54	; 0x36
 8000bb8:	4620      	mov	r0, r4
 8000bba:	f7ff fb19 	bl	80001f0 <d_make_comp>
 8000bbe:	4605      	mov	r5, r0
 8000bc0:	e774      	b.n	8000aac <d_exprlist+0xec>
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	60e3      	str	r3, [r4, #12]
 8000bc6:	4620      	mov	r0, r4
 8000bc8:	f000 fb7a 	bl	80012c0 <d_template_args_1>
 8000bcc:	462a      	mov	r2, r5
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2104      	movs	r1, #4
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	f7ff fb0c 	bl	80001f0 <d_make_comp>
 8000bd8:	4605      	mov	r5, r0
 8000bda:	e767      	b.n	8000aac <d_exprlist+0xec>
 8000bdc:	3302      	adds	r3, #2
 8000bde:	60e3      	str	r3, [r4, #12]
 8000be0:	4620      	mov	r0, r4
 8000be2:	f000 fd85 	bl	80016f0 <d_type>
 8000be6:	4682      	mov	sl, r0
 8000be8:	4620      	mov	r0, r4
 8000bea:	f001 fb27 	bl	800223c <d_unqualified_name>
 8000bee:	68e3      	ldr	r3, [r4, #12]
 8000bf0:	781a      	ldrb	r2, [r3, #0]
 8000bf2:	2a49      	cmp	r2, #73	; 0x49
 8000bf4:	4683      	mov	fp, r0
 8000bf6:	d01e      	beq.n	8000c36 <d_exprlist+0x276>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	4629      	mov	r1, r5
 8000bfc:	4652      	mov	r2, sl
 8000bfe:	4620      	mov	r0, r4
 8000c00:	f7ff faf6 	bl	80001f0 <d_make_comp>
 8000c04:	4605      	mov	r5, r0
 8000c06:	e751      	b.n	8000aac <d_exprlist+0xec>
 8000c08:	2a6f      	cmp	r2, #111	; 0x6f
 8000c0a:	f040 8094 	bne.w	8000d36 <d_exprlist+0x376>
 8000c0e:	785a      	ldrb	r2, [r3, #1]
 8000c10:	2a6e      	cmp	r2, #110	; 0x6e
 8000c12:	f47f aef4 	bne.w	80009fe <d_exprlist+0x3e>
 8000c16:	3302      	adds	r3, #2
 8000c18:	60e3      	str	r3, [r4, #12]
 8000c1a:	e70e      	b.n	8000a3a <d_exprlist+0x7a>
 8000c1c:	4620      	mov	r0, r4
 8000c1e:	f7ff fc25 	bl	800046c <d_compact_number>
 8000c22:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8000c26:	4298      	cmp	r0, r3
 8000c28:	f43f af6a 	beq.w	8000b00 <d_exprlist+0x140>
 8000c2c:	1c43      	adds	r3, r0, #1
 8000c2e:	f43f af67 	beq.w	8000b00 <d_exprlist+0x140>
 8000c32:	3001      	adds	r0, #1
 8000c34:	e773      	b.n	8000b1e <d_exprlist+0x15e>
 8000c36:	3301      	adds	r3, #1
 8000c38:	60e3      	str	r3, [r4, #12]
 8000c3a:	4620      	mov	r0, r4
 8000c3c:	f000 fb40 	bl	80012c0 <d_template_args_1>
 8000c40:	465a      	mov	r2, fp
 8000c42:	4603      	mov	r3, r0
 8000c44:	2104      	movs	r1, #4
 8000c46:	4620      	mov	r0, r4
 8000c48:	f7ff fad2 	bl	80001f0 <d_make_comp>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	e7d4      	b.n	8000bfa <d_exprlist+0x23a>
 8000c50:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d197      	bne.n	8000b88 <d_exprlist+0x1c8>
 8000c58:	68e3      	ldr	r3, [r4, #12]
 8000c5a:	781a      	ldrb	r2, [r3, #0]
 8000c5c:	2a5f      	cmp	r2, #95	; 0x5f
 8000c5e:	d195      	bne.n	8000b8c <d_exprlist+0x1cc>
 8000c60:	3301      	adds	r3, #1
 8000c62:	60e3      	str	r3, [r4, #12]
 8000c64:	e790      	b.n	8000b88 <d_exprlist+0x1c8>
 8000c66:	462a      	mov	r2, r5
 8000c68:	2300      	movs	r3, #0
 8000c6a:	2135      	movs	r1, #53	; 0x35
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	f7ff fabf 	bl	80001f0 <d_make_comp>
 8000c72:	4605      	mov	r5, r0
 8000c74:	e71a      	b.n	8000aac <d_exprlist+0xec>
 8000c76:	f1ba 0f00 	cmp.w	sl, #0
 8000c7a:	f43f af41 	beq.w	8000b00 <d_exprlist+0x140>
 8000c7e:	4982      	ldr	r1, [pc, #520]	; (8000e88 <d_exprlist+0x4c8>)
 8000c80:	4650      	mov	r0, sl
 8000c82:	f006 f823 	bl	8006ccc <strcmp>
 8000c86:	2800      	cmp	r0, #0
 8000c88:	f000 80c7 	beq.w	8000e1a <d_exprlist+0x45a>
 8000c8c:	f89a 3000 	ldrb.w	r3, [sl]
 8000c90:	2b66      	cmp	r3, #102	; 0x66
 8000c92:	f000 80ed 	beq.w	8000e70 <d_exprlist+0x4b0>
 8000c96:	2b6e      	cmp	r3, #110	; 0x6e
 8000c98:	f47f af32 	bne.w	8000b00 <d_exprlist+0x140>
 8000c9c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8000ca0:	2b77      	cmp	r3, #119	; 0x77
 8000ca2:	d002      	beq.n	8000caa <d_exprlist+0x2ea>
 8000ca4:	2b61      	cmp	r3, #97	; 0x61
 8000ca6:	f47f af2b 	bne.w	8000b00 <d_exprlist+0x140>
 8000caa:	215f      	movs	r1, #95	; 0x5f
 8000cac:	4620      	mov	r0, r4
 8000cae:	f7ff fe87 	bl	80009c0 <d_exprlist>
 8000cb2:	4682      	mov	sl, r0
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f000 fd1b 	bl	80016f0 <d_type>
 8000cba:	68e3      	ldr	r3, [r4, #12]
 8000cbc:	781a      	ldrb	r2, [r3, #0]
 8000cbe:	2a45      	cmp	r2, #69	; 0x45
 8000cc0:	4683      	mov	fp, r0
 8000cc2:	f000 8086 	beq.w	8000dd2 <d_exprlist+0x412>
 8000cc6:	2a70      	cmp	r2, #112	; 0x70
 8000cc8:	f000 80c6 	beq.w	8000e58 <d_exprlist+0x498>
 8000ccc:	2a69      	cmp	r2, #105	; 0x69
 8000cce:	f47f af17 	bne.w	8000b00 <d_exprlist+0x140>
 8000cd2:	785b      	ldrb	r3, [r3, #1]
 8000cd4:	2b6c      	cmp	r3, #108	; 0x6c
 8000cd6:	f47f af13 	bne.w	8000b00 <d_exprlist+0x140>
 8000cda:	4620      	mov	r0, r4
 8000cdc:	f000 f8de 	bl	8000e9c <d_expression_1>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	465a      	mov	r2, fp
 8000ce4:	213b      	movs	r1, #59	; 0x3b
 8000ce6:	4620      	mov	r0, r4
 8000ce8:	f7ff fa82 	bl	80001f0 <d_make_comp>
 8000cec:	4652      	mov	r2, sl
 8000cee:	4603      	mov	r3, r0
 8000cf0:	213a      	movs	r1, #58	; 0x3a
 8000cf2:	4620      	mov	r0, r4
 8000cf4:	f7ff fa7c 	bl	80001f0 <d_make_comp>
 8000cf8:	462a      	mov	r2, r5
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2139      	movs	r1, #57	; 0x39
 8000cfe:	4620      	mov	r0, r4
 8000d00:	f7ff fa76 	bl	80001f0 <d_make_comp>
 8000d04:	4605      	mov	r5, r0
 8000d06:	e6d1      	b.n	8000aac <d_exprlist+0xec>
 8000d08:	3301      	adds	r3, #1
 8000d0a:	60c3      	str	r3, [r0, #12]
 8000d0c:	212e      	movs	r1, #46	; 0x2e
 8000d0e:	4613      	mov	r3, r2
 8000d10:	b003      	add	sp, #12
 8000d12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d16:	f7ff ba6b 	b.w	80001f0 <d_make_comp>
 8000d1a:	4620      	mov	r0, r4
 8000d1c:	f000 f8be 	bl	8000e9c <d_expression_1>
 8000d20:	4603      	mov	r3, r0
 8000d22:	e73e      	b.n	8000ba2 <d_exprlist+0x1e2>
 8000d24:	4628      	mov	r0, r5
 8000d26:	6366      	str	r6, [r4, #52]	; 0x34
 8000d28:	b003      	add	sp, #12
 8000d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d2e:	4620      	mov	r0, r4
 8000d30:	f000 fcde 	bl	80016f0 <d_type>
 8000d34:	e73d      	b.n	8000bb2 <d_exprlist+0x1f2>
 8000d36:	2a69      	cmp	r2, #105	; 0x69
 8000d38:	f47f aed4 	bne.w	8000ae4 <d_exprlist+0x124>
 8000d3c:	785a      	ldrb	r2, [r3, #1]
 8000d3e:	2a6c      	cmp	r2, #108	; 0x6c
 8000d40:	f47f ae5d 	bne.w	80009fe <d_exprlist+0x3e>
 8000d44:	2500      	movs	r5, #0
 8000d46:	3302      	adds	r3, #2
 8000d48:	60e3      	str	r3, [r4, #12]
 8000d4a:	2145      	movs	r1, #69	; 0x45
 8000d4c:	4620      	mov	r0, r4
 8000d4e:	f7ff fe37 	bl	80009c0 <d_exprlist>
 8000d52:	462a      	mov	r2, r5
 8000d54:	4603      	mov	r3, r0
 8000d56:	2130      	movs	r1, #48	; 0x30
 8000d58:	4620      	mov	r0, r4
 8000d5a:	f7ff fa49 	bl	80001f0 <d_make_comp>
 8000d5e:	4605      	mov	r5, r0
 8000d60:	e6a4      	b.n	8000aac <d_exprlist+0xec>
 8000d62:	f1ba 0f00 	cmp.w	sl, #0
 8000d66:	f43f aecb 	beq.w	8000b00 <d_exprlist+0x140>
 8000d6a:	68ab      	ldr	r3, [r5, #8]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	785a      	ldrb	r2, [r3, #1]
 8000d70:	2a63      	cmp	r2, #99	; 0x63
 8000d72:	d03a      	beq.n	8000dea <d_exprlist+0x42a>
 8000d74:	f89a 3000 	ldrb.w	r3, [sl]
 8000d78:	2b66      	cmp	r3, #102	; 0x66
 8000d7a:	d149      	bne.n	8000e10 <d_exprlist+0x450>
 8000d7c:	4620      	mov	r0, r4
 8000d7e:	f001 f8b1 	bl	8001ee4 <d_operator_name>
 8000d82:	4683      	mov	fp, r0
 8000d84:	4941      	ldr	r1, [pc, #260]	; (8000e8c <d_exprlist+0x4cc>)
 8000d86:	4650      	mov	r0, sl
 8000d88:	f005 ffa0 	bl	8006ccc <strcmp>
 8000d8c:	2800      	cmp	r0, #0
 8000d8e:	d039      	beq.n	8000e04 <d_exprlist+0x444>
 8000d90:	493f      	ldr	r1, [pc, #252]	; (8000e90 <d_exprlist+0x4d0>)
 8000d92:	4650      	mov	r0, sl
 8000d94:	f005 ff9a 	bl	8006ccc <strcmp>
 8000d98:	b128      	cbz	r0, 8000da6 <d_exprlist+0x3e6>
 8000d9a:	4650      	mov	r0, sl
 8000d9c:	493d      	ldr	r1, [pc, #244]	; (8000e94 <d_exprlist+0x4d4>)
 8000d9e:	f005 ff95 	bl	8006ccc <strcmp>
 8000da2:	2800      	cmp	r0, #0
 8000da4:	d168      	bne.n	8000e78 <d_exprlist+0x4b8>
 8000da6:	4620      	mov	r0, r4
 8000da8:	f001 fa48 	bl	800223c <d_unqualified_name>
 8000dac:	68e3      	ldr	r3, [r4, #12]
 8000dae:	781a      	ldrb	r2, [r3, #0]
 8000db0:	2a49      	cmp	r2, #73	; 0x49
 8000db2:	4682      	mov	sl, r0
 8000db4:	d043      	beq.n	8000e3e <d_exprlist+0x47e>
 8000db6:	4653      	mov	r3, sl
 8000db8:	465a      	mov	r2, fp
 8000dba:	2138      	movs	r1, #56	; 0x38
 8000dbc:	4620      	mov	r0, r4
 8000dbe:	f7ff fa17 	bl	80001f0 <d_make_comp>
 8000dc2:	462a      	mov	r2, r5
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2137      	movs	r1, #55	; 0x37
 8000dc8:	4620      	mov	r0, r4
 8000dca:	f7ff fa11 	bl	80001f0 <d_make_comp>
 8000dce:	4605      	mov	r5, r0
 8000dd0:	e66c      	b.n	8000aac <d_exprlist+0xec>
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	60e3      	str	r3, [r4, #12]
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e783      	b.n	8000ce2 <d_exprlist+0x322>
 8000dda:	3301      	adds	r3, #1
 8000ddc:	60e3      	str	r3, [r4, #12]
 8000dde:	2145      	movs	r1, #69	; 0x45
 8000de0:	4620      	mov	r0, r4
 8000de2:	f7ff fded 	bl	80009c0 <d_exprlist>
 8000de6:	4603      	mov	r3, r0
 8000de8:	e6e4      	b.n	8000bb4 <d_exprlist+0x1f4>
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 8000df0:	2a01      	cmp	r2, #1
 8000df2:	d902      	bls.n	8000dfa <d_exprlist+0x43a>
 8000df4:	3b72      	subs	r3, #114	; 0x72
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d8bc      	bhi.n	8000d74 <d_exprlist+0x3b4>
 8000dfa:	4620      	mov	r0, r4
 8000dfc:	f000 fc78 	bl	80016f0 <d_type>
 8000e00:	4683      	mov	fp, r0
 8000e02:	e7bf      	b.n	8000d84 <d_exprlist+0x3c4>
 8000e04:	2145      	movs	r1, #69	; 0x45
 8000e06:	4620      	mov	r0, r4
 8000e08:	f7ff fdda 	bl	80009c0 <d_exprlist>
 8000e0c:	4682      	mov	sl, r0
 8000e0e:	e7d2      	b.n	8000db6 <d_exprlist+0x3f6>
 8000e10:	4620      	mov	r0, r4
 8000e12:	f000 f843 	bl	8000e9c <d_expression_1>
 8000e16:	4683      	mov	fp, r0
 8000e18:	e7b4      	b.n	8000d84 <d_exprlist+0x3c4>
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	f000 f83e 	bl	8000e9c <d_expression_1>
 8000e20:	4682      	mov	sl, r0
 8000e22:	4620      	mov	r0, r4
 8000e24:	f000 f83a 	bl	8000e9c <d_expression_1>
 8000e28:	4683      	mov	fp, r0
 8000e2a:	4620      	mov	r0, r4
 8000e2c:	f000 f836 	bl	8000e9c <d_expression_1>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2800      	cmp	r0, #0
 8000e34:	f47f af55 	bne.w	8000ce2 <d_exprlist+0x322>
 8000e38:	6366      	str	r6, [r4, #52]	; 0x34
 8000e3a:	4605      	mov	r5, r0
 8000e3c:	e61b      	b.n	8000a76 <d_exprlist+0xb6>
 8000e3e:	3301      	adds	r3, #1
 8000e40:	60e3      	str	r3, [r4, #12]
 8000e42:	4620      	mov	r0, r4
 8000e44:	f000 fa3c 	bl	80012c0 <d_template_args_1>
 8000e48:	4652      	mov	r2, sl
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2104      	movs	r1, #4
 8000e4e:	4620      	mov	r0, r4
 8000e50:	f7ff f9ce 	bl	80001f0 <d_make_comp>
 8000e54:	4682      	mov	sl, r0
 8000e56:	e7ae      	b.n	8000db6 <d_exprlist+0x3f6>
 8000e58:	785a      	ldrb	r2, [r3, #1]
 8000e5a:	2a69      	cmp	r2, #105	; 0x69
 8000e5c:	f47f ae50 	bne.w	8000b00 <d_exprlist+0x140>
 8000e60:	3302      	adds	r3, #2
 8000e62:	60e3      	str	r3, [r4, #12]
 8000e64:	2145      	movs	r1, #69	; 0x45
 8000e66:	4620      	mov	r0, r4
 8000e68:	f7ff fdaa 	bl	80009c0 <d_exprlist>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	e738      	b.n	8000ce2 <d_exprlist+0x322>
 8000e70:	4620      	mov	r0, r4
 8000e72:	f001 f837 	bl	8001ee4 <d_operator_name>
 8000e76:	e7d3      	b.n	8000e20 <d_exprlist+0x460>
 8000e78:	4620      	mov	r0, r4
 8000e7a:	f000 f80f 	bl	8000e9c <d_expression_1>
 8000e7e:	4682      	mov	sl, r0
 8000e80:	e799      	b.n	8000db6 <d_exprlist+0x3f6>
 8000e82:	bf00      	nop
 8000e84:	08034db8 	.word	0x08034db8
 8000e88:	08034dc8 	.word	0x08034dc8
 8000e8c:	08034dbc 	.word	0x08034dbc
 8000e90:	08034dc0 	.word	0x08034dc0
 8000e94:	08034dc4 	.word	0x08034dc4
 8000e98:	080352d4 	.word	0x080352d4

08000e9c <d_expression_1>:
 8000e9c:	68c1      	ldr	r1, [r0, #12]
 8000e9e:	780b      	ldrb	r3, [r1, #0]
 8000ea0:	2b4c      	cmp	r3, #76	; 0x4c
 8000ea2:	d067      	beq.n	8000f74 <d_expression_1+0xd8>
 8000ea4:	2b54      	cmp	r3, #84	; 0x54
 8000ea6:	d067      	beq.n	8000f78 <d_expression_1+0xdc>
 8000ea8:	2b73      	cmp	r3, #115	; 0x73
 8000eaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000eae:	4604      	mov	r4, r0
 8000eb0:	d01c      	beq.n	8000eec <d_expression_1+0x50>
 8000eb2:	2b66      	cmp	r3, #102	; 0x66
 8000eb4:	d13d      	bne.n	8000f32 <d_expression_1+0x96>
 8000eb6:	784b      	ldrb	r3, [r1, #1]
 8000eb8:	2b70      	cmp	r3, #112	; 0x70
 8000eba:	d11d      	bne.n	8000ef8 <d_expression_1+0x5c>
 8000ebc:	1c8b      	adds	r3, r1, #2
 8000ebe:	60c3      	str	r3, [r0, #12]
 8000ec0:	788b      	ldrb	r3, [r1, #2]
 8000ec2:	2b54      	cmp	r3, #84	; 0x54
 8000ec4:	f040 809a 	bne.w	8000ffc <d_expression_1+0x160>
 8000ec8:	3103      	adds	r1, #3
 8000eca:	60c1      	str	r1, [r0, #12]
 8000ecc:	2000      	movs	r0, #0
 8000ece:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	da4a      	bge.n	8000f6c <d_expression_1+0xd0>
 8000ed6:	6921      	ldr	r1, [r4, #16]
 8000ed8:	011a      	lsls	r2, r3, #4
 8000eda:	188d      	adds	r5, r1, r2
 8000edc:	3301      	adds	r3, #1
 8000ede:	2700      	movs	r7, #0
 8000ee0:	2606      	movs	r6, #6
 8000ee2:	606f      	str	r7, [r5, #4]
 8000ee4:	6163      	str	r3, [r4, #20]
 8000ee6:	548e      	strb	r6, [r1, r2]
 8000ee8:	60a8      	str	r0, [r5, #8]
 8000eea:	e02f      	b.n	8000f4c <d_expression_1+0xb0>
 8000eec:	784b      	ldrb	r3, [r1, #1]
 8000eee:	2b72      	cmp	r3, #114	; 0x72
 8000ef0:	d06e      	beq.n	8000fd0 <d_expression_1+0x134>
 8000ef2:	2b70      	cmp	r3, #112	; 0x70
 8000ef4:	f000 8160 	beq.w	80011b8 <d_expression_1+0x31c>
 8000ef8:	4620      	mov	r0, r4
 8000efa:	f000 fff3 	bl	8001ee4 <d_operator_name>
 8000efe:	4605      	mov	r5, r0
 8000f00:	b3a0      	cbz	r0, 8000f6c <d_expression_1+0xd0>
 8000f02:	7803      	ldrb	r3, [r0, #0]
 8000f04:	2b31      	cmp	r3, #49	; 0x31
 8000f06:	d039      	beq.n	8000f7c <d_expression_1+0xe0>
 8000f08:	2b32      	cmp	r3, #50	; 0x32
 8000f0a:	f000 8127 	beq.w	800115c <d_expression_1+0x2c0>
 8000f0e:	2b33      	cmp	r3, #51	; 0x33
 8000f10:	d12c      	bne.n	8000f6c <d_expression_1+0xd0>
 8000f12:	68e3      	ldr	r3, [r4, #12]
 8000f14:	781a      	ldrb	r2, [r3, #0]
 8000f16:	2a5f      	cmp	r2, #95	; 0x5f
 8000f18:	f000 8176 	beq.w	8001208 <d_expression_1+0x36c>
 8000f1c:	4620      	mov	r0, r4
 8000f1e:	f7ff ffbd 	bl	8000e9c <d_expression_1>
 8000f22:	4603      	mov	r3, r0
 8000f24:	462a      	mov	r2, r5
 8000f26:	4620      	mov	r0, r4
 8000f28:	2136      	movs	r1, #54	; 0x36
 8000f2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f2e:	f7ff b95f 	b.w	80001f0 <d_make_comp>
 8000f32:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000f36:	2a09      	cmp	r2, #9
 8000f38:	d841      	bhi.n	8000fbe <d_expression_1+0x122>
 8000f3a:	4620      	mov	r0, r4
 8000f3c:	f001 f97e 	bl	800223c <d_unqualified_name>
 8000f40:	4605      	mov	r5, r0
 8000f42:	b198      	cbz	r0, 8000f6c <d_expression_1+0xd0>
 8000f44:	68e3      	ldr	r3, [r4, #12]
 8000f46:	781a      	ldrb	r2, [r3, #0]
 8000f48:	2a49      	cmp	r2, #73	; 0x49
 8000f4a:	d02b      	beq.n	8000fa4 <d_expression_1+0x108>
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f52:	2b74      	cmp	r3, #116	; 0x74
 8000f54:	d1d0      	bne.n	8000ef8 <d_expression_1+0x5c>
 8000f56:	784b      	ldrb	r3, [r1, #1]
 8000f58:	2b6c      	cmp	r3, #108	; 0x6c
 8000f5a:	d1cd      	bne.n	8000ef8 <d_expression_1+0x5c>
 8000f5c:	f000 fbc8 	bl	80016f0 <d_type>
 8000f60:	68e1      	ldr	r1, [r4, #12]
 8000f62:	784b      	ldrb	r3, [r1, #1]
 8000f64:	4605      	mov	r5, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f040 8190 	bne.w	800128c <d_expression_1+0x3f0>
 8000f6c:	2500      	movs	r5, #0
 8000f6e:	4628      	mov	r0, r5
 8000f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f74:	f001 bdac 	b.w	8002ad0 <d_expr_primary>
 8000f78:	f7ff ba92 	b.w	80004a0 <d_template_param>
 8000f7c:	6887      	ldr	r7, [r0, #8]
 8000f7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000f80:	68ba      	ldr	r2, [r7, #8]
 8000f82:	683e      	ldr	r6, [r7, #0]
 8000f84:	49c8      	ldr	r1, [pc, #800]	; (80012a8 <d_expression_1+0x40c>)
 8000f86:	3a02      	subs	r2, #2
 8000f88:	4413      	add	r3, r2
 8000f8a:	6323      	str	r3, [r4, #48]	; 0x30
 8000f8c:	4630      	mov	r0, r6
 8000f8e:	f005 fe9d 	bl	8006ccc <strcmp>
 8000f92:	2800      	cmp	r0, #0
 8000f94:	d05b      	beq.n	800104e <d_expression_1+0x1b2>
 8000f96:	68ff      	ldr	r7, [r7, #12]
 8000f98:	2f03      	cmp	r7, #3
 8000f9a:	d8e7      	bhi.n	8000f6c <d_expression_1+0xd0>
 8000f9c:	e8df f007 	tbb	[pc, r7]
 8000fa0:	64a7385c 	.word	0x64a7385c
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	60e3      	str	r3, [r4, #12]
 8000fa8:	4620      	mov	r0, r4
 8000faa:	f000 f989 	bl	80012c0 <d_template_args_1>
 8000fae:	462a      	mov	r2, r5
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2104      	movs	r1, #4
 8000fb4:	4620      	mov	r0, r4
 8000fb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000fba:	f7ff b919 	b.w	80001f0 <d_make_comp>
 8000fbe:	2b6f      	cmp	r3, #111	; 0x6f
 8000fc0:	f040 815c 	bne.w	800127c <d_expression_1+0x3e0>
 8000fc4:	784b      	ldrb	r3, [r1, #1]
 8000fc6:	2b6e      	cmp	r3, #110	; 0x6e
 8000fc8:	d196      	bne.n	8000ef8 <d_expression_1+0x5c>
 8000fca:	3102      	adds	r1, #2
 8000fcc:	60c1      	str	r1, [r0, #12]
 8000fce:	e7b4      	b.n	8000f3a <d_expression_1+0x9e>
 8000fd0:	3102      	adds	r1, #2
 8000fd2:	60c1      	str	r1, [r0, #12]
 8000fd4:	f000 fb8c 	bl	80016f0 <d_type>
 8000fd8:	4605      	mov	r5, r0
 8000fda:	4620      	mov	r0, r4
 8000fdc:	f001 f92e 	bl	800223c <d_unqualified_name>
 8000fe0:	68e3      	ldr	r3, [r4, #12]
 8000fe2:	7819      	ldrb	r1, [r3, #0]
 8000fe4:	2949      	cmp	r1, #73	; 0x49
 8000fe6:	4606      	mov	r6, r0
 8000fe8:	f000 80d9 	beq.w	800119e <d_expression_1+0x302>
 8000fec:	4603      	mov	r3, r0
 8000fee:	462a      	mov	r2, r5
 8000ff0:	4620      	mov	r0, r4
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000ff8:	f7ff b8fa 	b.w	80001f0 <d_make_comp>
 8000ffc:	f7ff fa36 	bl	800046c <d_compact_number>
 8001000:	43c3      	mvns	r3, r0
 8001002:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 8001006:	bf18      	it	ne
 8001008:	3001      	addne	r0, #1
 800100a:	f47f af60 	bne.w	8000ece <d_expression_1+0x32>
 800100e:	e7ad      	b.n	8000f6c <d_expression_1+0xd0>
 8001010:	2e00      	cmp	r6, #0
 8001012:	d083      	beq.n	8000f1c <d_expression_1+0x80>
 8001014:	7833      	ldrb	r3, [r6, #0]
 8001016:	2b70      	cmp	r3, #112	; 0x70
 8001018:	f000 80b0 	beq.w	800117c <d_expression_1+0x2e0>
 800101c:	2b6d      	cmp	r3, #109	; 0x6d
 800101e:	f000 80ad 	beq.w	800117c <d_expression_1+0x2e0>
 8001022:	2700      	movs	r7, #0
 8001024:	4630      	mov	r0, r6
 8001026:	49a1      	ldr	r1, [pc, #644]	; (80012ac <d_expression_1+0x410>)
 8001028:	f005 fe50 	bl	8006ccc <strcmp>
 800102c:	2800      	cmp	r0, #0
 800102e:	f040 80b1 	bne.w	8001194 <d_expression_1+0x2f8>
 8001032:	4620      	mov	r0, r4
 8001034:	f000 f944 	bl	80012c0 <d_template_args_1>
 8001038:	4603      	mov	r3, r0
 800103a:	2f00      	cmp	r7, #0
 800103c:	f43f af72 	beq.w	8000f24 <d_expression_1+0x88>
 8001040:	461a      	mov	r2, r3
 8001042:	2138      	movs	r1, #56	; 0x38
 8001044:	4620      	mov	r0, r4
 8001046:	f7ff f8d3 	bl	80001f0 <d_make_comp>
 800104a:	4603      	mov	r3, r0
 800104c:	e76a      	b.n	8000f24 <d_expression_1+0x88>
 800104e:	4620      	mov	r0, r4
 8001050:	f000 fb4e 	bl	80016f0 <d_type>
 8001054:	4603      	mov	r3, r0
 8001056:	e765      	b.n	8000f24 <d_expression_1+0x88>
 8001058:	462a      	mov	r2, r5
 800105a:	4620      	mov	r0, r4
 800105c:	2300      	movs	r3, #0
 800105e:	2135      	movs	r1, #53	; 0x35
 8001060:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001064:	f7ff b8c4 	b.w	80001f0 <d_make_comp>
 8001068:	4991      	ldr	r1, [pc, #580]	; (80012b0 <d_expression_1+0x414>)
 800106a:	4630      	mov	r0, r6
 800106c:	f005 fe2e 	bl	8006ccc <strcmp>
 8001070:	2800      	cmp	r0, #0
 8001072:	f000 80d1 	beq.w	8001218 <d_expression_1+0x37c>
 8001076:	7833      	ldrb	r3, [r6, #0]
 8001078:	2b66      	cmp	r3, #102	; 0x66
 800107a:	f000 80f6 	beq.w	800126a <d_expression_1+0x3ce>
 800107e:	2b6e      	cmp	r3, #110	; 0x6e
 8001080:	f47f af74 	bne.w	8000f6c <d_expression_1+0xd0>
 8001084:	7873      	ldrb	r3, [r6, #1]
 8001086:	2b77      	cmp	r3, #119	; 0x77
 8001088:	d002      	beq.n	8001090 <d_expression_1+0x1f4>
 800108a:	2b61      	cmp	r3, #97	; 0x61
 800108c:	f47f af6e 	bne.w	8000f6c <d_expression_1+0xd0>
 8001090:	215f      	movs	r1, #95	; 0x5f
 8001092:	4620      	mov	r0, r4
 8001094:	f7ff fc94 	bl	80009c0 <d_exprlist>
 8001098:	4606      	mov	r6, r0
 800109a:	4620      	mov	r0, r4
 800109c:	f000 fb28 	bl	80016f0 <d_type>
 80010a0:	68e3      	ldr	r3, [r4, #12]
 80010a2:	7819      	ldrb	r1, [r3, #0]
 80010a4:	2945      	cmp	r1, #69	; 0x45
 80010a6:	4607      	mov	r7, r0
 80010a8:	f000 80aa 	beq.w	8001200 <d_expression_1+0x364>
 80010ac:	2970      	cmp	r1, #112	; 0x70
 80010ae:	f000 80d0 	beq.w	8001252 <d_expression_1+0x3b6>
 80010b2:	2969      	cmp	r1, #105	; 0x69
 80010b4:	f47f af5a 	bne.w	8000f6c <d_expression_1+0xd0>
 80010b8:	785b      	ldrb	r3, [r3, #1]
 80010ba:	2b6c      	cmp	r3, #108	; 0x6c
 80010bc:	f47f af56 	bne.w	8000f6c <d_expression_1+0xd0>
 80010c0:	4620      	mov	r0, r4
 80010c2:	f7ff feeb 	bl	8000e9c <d_expression_1>
 80010c6:	4603      	mov	r3, r0
 80010c8:	463a      	mov	r2, r7
 80010ca:	213b      	movs	r1, #59	; 0x3b
 80010cc:	4620      	mov	r0, r4
 80010ce:	f7ff f88f 	bl	80001f0 <d_make_comp>
 80010d2:	4632      	mov	r2, r6
 80010d4:	4603      	mov	r3, r0
 80010d6:	213a      	movs	r1, #58	; 0x3a
 80010d8:	4620      	mov	r0, r4
 80010da:	f7ff f889 	bl	80001f0 <d_make_comp>
 80010de:	462a      	mov	r2, r5
 80010e0:	4603      	mov	r3, r0
 80010e2:	2139      	movs	r1, #57	; 0x39
 80010e4:	4620      	mov	r0, r4
 80010e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80010ea:	f7ff b881 	b.w	80001f0 <d_make_comp>
 80010ee:	2e00      	cmp	r6, #0
 80010f0:	f43f af3c 	beq.w	8000f6c <d_expression_1+0xd0>
 80010f4:	68ab      	ldr	r3, [r5, #8]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	785a      	ldrb	r2, [r3, #1]
 80010fa:	2a63      	cmp	r2, #99	; 0x63
 80010fc:	d068      	beq.n	80011d0 <d_expression_1+0x334>
 80010fe:	7833      	ldrb	r3, [r6, #0]
 8001100:	2b66      	cmp	r3, #102	; 0x66
 8001102:	d178      	bne.n	80011f6 <d_expression_1+0x35a>
 8001104:	4620      	mov	r0, r4
 8001106:	f000 feed 	bl	8001ee4 <d_operator_name>
 800110a:	4607      	mov	r7, r0
 800110c:	4969      	ldr	r1, [pc, #420]	; (80012b4 <d_expression_1+0x418>)
 800110e:	4630      	mov	r0, r6
 8001110:	f005 fddc 	bl	8006ccc <strcmp>
 8001114:	2800      	cmp	r0, #0
 8001116:	d068      	beq.n	80011ea <d_expression_1+0x34e>
 8001118:	4967      	ldr	r1, [pc, #412]	; (80012b8 <d_expression_1+0x41c>)
 800111a:	4630      	mov	r0, r6
 800111c:	f005 fdd6 	bl	8006ccc <strcmp>
 8001120:	b130      	cbz	r0, 8001130 <d_expression_1+0x294>
 8001122:	4630      	mov	r0, r6
 8001124:	4965      	ldr	r1, [pc, #404]	; (80012bc <d_expression_1+0x420>)
 8001126:	f005 fdd1 	bl	8006ccc <strcmp>
 800112a:	2800      	cmp	r0, #0
 800112c:	f040 80a1 	bne.w	8001272 <d_expression_1+0x3d6>
 8001130:	4620      	mov	r0, r4
 8001132:	f001 f883 	bl	800223c <d_unqualified_name>
 8001136:	68e3      	ldr	r3, [r4, #12]
 8001138:	781a      	ldrb	r2, [r3, #0]
 800113a:	2a49      	cmp	r2, #73	; 0x49
 800113c:	4606      	mov	r6, r0
 800113e:	d07b      	beq.n	8001238 <d_expression_1+0x39c>
 8001140:	4633      	mov	r3, r6
 8001142:	463a      	mov	r2, r7
 8001144:	2138      	movs	r1, #56	; 0x38
 8001146:	4620      	mov	r0, r4
 8001148:	f7ff f852 	bl	80001f0 <d_make_comp>
 800114c:	462a      	mov	r2, r5
 800114e:	4603      	mov	r3, r0
 8001150:	2137      	movs	r1, #55	; 0x37
 8001152:	4620      	mov	r0, r4
 8001154:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001158:	f7ff b84a 	b.w	80001f0 <d_make_comp>
 800115c:	6883      	ldr	r3, [r0, #8]
 800115e:	2b03      	cmp	r3, #3
 8001160:	f63f af04 	bhi.w	8000f6c <d_expression_1+0xd0>
 8001164:	a201      	add	r2, pc, #4	; (adr r2, 800116c <d_expression_1+0x2d0>)
 8001166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800116a:	bf00      	nop
 800116c:	08001059 	.word	0x08001059
 8001170:	08000f1d 	.word	0x08000f1d
 8001174:	08000f6d 	.word	0x08000f6d
 8001178:	08000f6d 	.word	0x08000f6d
 800117c:	7872      	ldrb	r2, [r6, #1]
 800117e:	429a      	cmp	r2, r3
 8001180:	f47f af4f 	bne.w	8001022 <d_expression_1+0x186>
 8001184:	68e3      	ldr	r3, [r4, #12]
 8001186:	781a      	ldrb	r2, [r3, #0]
 8001188:	2a5f      	cmp	r2, #95	; 0x5f
 800118a:	f47f af4b 	bne.w	8001024 <d_expression_1+0x188>
 800118e:	3301      	adds	r3, #1
 8001190:	60e3      	str	r3, [r4, #12]
 8001192:	e746      	b.n	8001022 <d_expression_1+0x186>
 8001194:	4620      	mov	r0, r4
 8001196:	f7ff fe81 	bl	8000e9c <d_expression_1>
 800119a:	4603      	mov	r3, r0
 800119c:	e74d      	b.n	800103a <d_expression_1+0x19e>
 800119e:	3301      	adds	r3, #1
 80011a0:	60e3      	str	r3, [r4, #12]
 80011a2:	4620      	mov	r0, r4
 80011a4:	f000 f88c 	bl	80012c0 <d_template_args_1>
 80011a8:	4632      	mov	r2, r6
 80011aa:	4603      	mov	r3, r0
 80011ac:	2104      	movs	r1, #4
 80011ae:	4620      	mov	r0, r4
 80011b0:	f7ff f81e 	bl	80001f0 <d_make_comp>
 80011b4:	4603      	mov	r3, r0
 80011b6:	e71a      	b.n	8000fee <d_expression_1+0x152>
 80011b8:	3102      	adds	r1, #2
 80011ba:	60e1      	str	r1, [r4, #12]
 80011bc:	f7ff fe6e 	bl	8000e9c <d_expression_1>
 80011c0:	2300      	movs	r3, #0
 80011c2:	4602      	mov	r2, r0
 80011c4:	214a      	movs	r1, #74	; 0x4a
 80011c6:	4620      	mov	r0, r4
 80011c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80011cc:	f7ff b810 	b.w	80001f0 <d_make_comp>
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 80011d6:	2a01      	cmp	r2, #1
 80011d8:	d902      	bls.n	80011e0 <d_expression_1+0x344>
 80011da:	3b72      	subs	r3, #114	; 0x72
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d88e      	bhi.n	80010fe <d_expression_1+0x262>
 80011e0:	4620      	mov	r0, r4
 80011e2:	f000 fa85 	bl	80016f0 <d_type>
 80011e6:	4607      	mov	r7, r0
 80011e8:	e790      	b.n	800110c <d_expression_1+0x270>
 80011ea:	2145      	movs	r1, #69	; 0x45
 80011ec:	4620      	mov	r0, r4
 80011ee:	f7ff fbe7 	bl	80009c0 <d_exprlist>
 80011f2:	4606      	mov	r6, r0
 80011f4:	e7a4      	b.n	8001140 <d_expression_1+0x2a4>
 80011f6:	4620      	mov	r0, r4
 80011f8:	f7ff fe50 	bl	8000e9c <d_expression_1>
 80011fc:	4607      	mov	r7, r0
 80011fe:	e785      	b.n	800110c <d_expression_1+0x270>
 8001200:	3301      	adds	r3, #1
 8001202:	60e3      	str	r3, [r4, #12]
 8001204:	2300      	movs	r3, #0
 8001206:	e75f      	b.n	80010c8 <d_expression_1+0x22c>
 8001208:	3301      	adds	r3, #1
 800120a:	60e3      	str	r3, [r4, #12]
 800120c:	2145      	movs	r1, #69	; 0x45
 800120e:	4620      	mov	r0, r4
 8001210:	f7ff fbd6 	bl	80009c0 <d_exprlist>
 8001214:	4603      	mov	r3, r0
 8001216:	e685      	b.n	8000f24 <d_expression_1+0x88>
 8001218:	4620      	mov	r0, r4
 800121a:	f7ff fe3f 	bl	8000e9c <d_expression_1>
 800121e:	4606      	mov	r6, r0
 8001220:	4620      	mov	r0, r4
 8001222:	f7ff fe3b 	bl	8000e9c <d_expression_1>
 8001226:	4607      	mov	r7, r0
 8001228:	4620      	mov	r0, r4
 800122a:	f7ff fe37 	bl	8000e9c <d_expression_1>
 800122e:	4603      	mov	r3, r0
 8001230:	2800      	cmp	r0, #0
 8001232:	f47f af49 	bne.w	80010c8 <d_expression_1+0x22c>
 8001236:	e699      	b.n	8000f6c <d_expression_1+0xd0>
 8001238:	3301      	adds	r3, #1
 800123a:	60e3      	str	r3, [r4, #12]
 800123c:	4620      	mov	r0, r4
 800123e:	f000 f83f 	bl	80012c0 <d_template_args_1>
 8001242:	4632      	mov	r2, r6
 8001244:	4603      	mov	r3, r0
 8001246:	2104      	movs	r1, #4
 8001248:	4620      	mov	r0, r4
 800124a:	f7fe ffd1 	bl	80001f0 <d_make_comp>
 800124e:	4606      	mov	r6, r0
 8001250:	e776      	b.n	8001140 <d_expression_1+0x2a4>
 8001252:	785a      	ldrb	r2, [r3, #1]
 8001254:	2a69      	cmp	r2, #105	; 0x69
 8001256:	f47f ae89 	bne.w	8000f6c <d_expression_1+0xd0>
 800125a:	3302      	adds	r3, #2
 800125c:	60e3      	str	r3, [r4, #12]
 800125e:	2145      	movs	r1, #69	; 0x45
 8001260:	4620      	mov	r0, r4
 8001262:	f7ff fbad 	bl	80009c0 <d_exprlist>
 8001266:	4603      	mov	r3, r0
 8001268:	e72e      	b.n	80010c8 <d_expression_1+0x22c>
 800126a:	4620      	mov	r0, r4
 800126c:	f000 fe3a 	bl	8001ee4 <d_operator_name>
 8001270:	e7d5      	b.n	800121e <d_expression_1+0x382>
 8001272:	4620      	mov	r0, r4
 8001274:	f7ff fe12 	bl	8000e9c <d_expression_1>
 8001278:	4606      	mov	r6, r0
 800127a:	e761      	b.n	8001140 <d_expression_1+0x2a4>
 800127c:	2b69      	cmp	r3, #105	; 0x69
 800127e:	f47f ae68 	bne.w	8000f52 <d_expression_1+0xb6>
 8001282:	784b      	ldrb	r3, [r1, #1]
 8001284:	2b6c      	cmp	r3, #108	; 0x6c
 8001286:	f47f ae37 	bne.w	8000ef8 <d_expression_1+0x5c>
 800128a:	2500      	movs	r5, #0
 800128c:	3102      	adds	r1, #2
 800128e:	60e1      	str	r1, [r4, #12]
 8001290:	4620      	mov	r0, r4
 8001292:	2145      	movs	r1, #69	; 0x45
 8001294:	f7ff fb94 	bl	80009c0 <d_exprlist>
 8001298:	462a      	mov	r2, r5
 800129a:	4603      	mov	r3, r0
 800129c:	2130      	movs	r1, #48	; 0x30
 800129e:	4620      	mov	r0, r4
 80012a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80012a4:	f7fe bfa4 	b.w	80001f0 <d_make_comp>
 80012a8:	080352d4 	.word	0x080352d4
 80012ac:	08034db8 	.word	0x08034db8
 80012b0:	08034dc8 	.word	0x08034dc8
 80012b4:	08034dbc 	.word	0x08034dbc
 80012b8:	08034dc0 	.word	0x08034dc0
 80012bc:	08034dc4 	.word	0x08034dc4

080012c0 <d_template_args_1>:
 80012c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012c4:	68c2      	ldr	r2, [r0, #12]
 80012c6:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80012c8:	7813      	ldrb	r3, [r2, #0]
 80012ca:	2b45      	cmp	r3, #69	; 0x45
 80012cc:	b082      	sub	sp, #8
 80012ce:	4604      	mov	r4, r0
 80012d0:	d04e      	beq.n	8001370 <d_template_args_1+0xb0>
 80012d2:	ad02      	add	r5, sp, #8
 80012d4:	2100      	movs	r1, #0
 80012d6:	f845 1d04 	str.w	r1, [r5, #-4]!
 80012da:	2601      	movs	r6, #1
 80012dc:	3b49      	subs	r3, #73	; 0x49
 80012de:	2b0f      	cmp	r3, #15
 80012e0:	d83d      	bhi.n	800135e <d_template_args_1+0x9e>
 80012e2:	e8df f003 	tbb	[pc, r3]
 80012e6:	3737      	.short	0x3737
 80012e8:	3c3c323c 	.word	0x3c3c323c
 80012ec:	3c3c3c3c 	.word	0x3c3c3c3c
 80012f0:	3c3c3c3c 	.word	0x3c3c3c3c
 80012f4:	083c      	.short	0x083c
 80012f6:	3201      	adds	r2, #1
 80012f8:	f8d4 8034 	ldr.w	r8, [r4, #52]	; 0x34
 80012fc:	60e2      	str	r2, [r4, #12]
 80012fe:	6366      	str	r6, [r4, #52]	; 0x34
 8001300:	4620      	mov	r0, r4
 8001302:	f7ff fdcb 	bl	8000e9c <d_expression_1>
 8001306:	68e3      	ldr	r3, [r4, #12]
 8001308:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
 800130c:	781a      	ldrb	r2, [r3, #0]
 800130e:	2a45      	cmp	r2, #69	; 0x45
 8001310:	4684      	mov	ip, r0
 8001312:	f103 0301 	add.w	r3, r3, #1
 8001316:	d127      	bne.n	8001368 <d_template_args_1+0xa8>
 8001318:	60e3      	str	r3, [r4, #12]
 800131a:	2300      	movs	r3, #0
 800131c:	212f      	movs	r1, #47	; 0x2f
 800131e:	4662      	mov	r2, ip
 8001320:	4620      	mov	r0, r4
 8001322:	f1bc 0f00 	cmp.w	ip, #0
 8001326:	d01f      	beq.n	8001368 <d_template_args_1+0xa8>
 8001328:	f7fe ff62 	bl	80001f0 <d_make_comp>
 800132c:	6028      	str	r0, [r5, #0]
 800132e:	f100 050c 	add.w	r5, r0, #12
 8001332:	b1c8      	cbz	r0, 8001368 <d_template_args_1+0xa8>
 8001334:	68e2      	ldr	r2, [r4, #12]
 8001336:	7813      	ldrb	r3, [r2, #0]
 8001338:	2b45      	cmp	r3, #69	; 0x45
 800133a:	d1cf      	bne.n	80012dc <d_template_args_1+0x1c>
 800133c:	9801      	ldr	r0, [sp, #4]
 800133e:	62e7      	str	r7, [r4, #44]	; 0x2c
 8001340:	3201      	adds	r2, #1
 8001342:	60e2      	str	r2, [r4, #12]
 8001344:	b002      	add	sp, #8
 8001346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800134a:	4620      	mov	r0, r4
 800134c:	f001 fbc0 	bl	8002ad0 <d_expr_primary>
 8001350:	4684      	mov	ip, r0
 8001352:	e7e2      	b.n	800131a <d_template_args_1+0x5a>
 8001354:	4620      	mov	r0, r4
 8001356:	f000 f815 	bl	8001384 <d_template_args>
 800135a:	4684      	mov	ip, r0
 800135c:	e7dd      	b.n	800131a <d_template_args_1+0x5a>
 800135e:	4620      	mov	r0, r4
 8001360:	f000 f9c6 	bl	80016f0 <d_type>
 8001364:	4684      	mov	ip, r0
 8001366:	e7d8      	b.n	800131a <d_template_args_1+0x5a>
 8001368:	2000      	movs	r0, #0
 800136a:	b002      	add	sp, #8
 800136c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001370:	3201      	adds	r2, #1
 8001372:	2300      	movs	r3, #0
 8001374:	60c2      	str	r2, [r0, #12]
 8001376:	212f      	movs	r1, #47	; 0x2f
 8001378:	461a      	mov	r2, r3
 800137a:	b002      	add	sp, #8
 800137c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001380:	f7fe bf36 	b.w	80001f0 <d_make_comp>

08001384 <d_template_args>:
 8001384:	68c3      	ldr	r3, [r0, #12]
 8001386:	781a      	ldrb	r2, [r3, #0]
 8001388:	3a49      	subs	r2, #73	; 0x49
 800138a:	2a01      	cmp	r2, #1
 800138c:	d802      	bhi.n	8001394 <d_template_args+0x10>
 800138e:	3301      	adds	r3, #1
 8001390:	60c3      	str	r3, [r0, #12]
 8001392:	e795      	b.n	80012c0 <d_template_args_1>
 8001394:	2000      	movs	r0, #0
 8001396:	4770      	bx	lr

08001398 <d_name>:
 8001398:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800139c:	68c2      	ldr	r2, [r0, #12]
 800139e:	7813      	ldrb	r3, [r2, #0]
 80013a0:	3b4e      	subs	r3, #78	; 0x4e
 80013a2:	b083      	sub	sp, #12
 80013a4:	4604      	mov	r4, r0
 80013a6:	2b0c      	cmp	r3, #12
 80013a8:	d846      	bhi.n	8001438 <d_name+0xa0>
 80013aa:	e8df f003 	tbb	[pc, r3]
 80013ae:	4567      	.short	0x4567
 80013b0:	0e454545 	.word	0x0e454545
 80013b4:	45450745 	.word	0x45450745
 80013b8:	4545      	.short	0x4545
 80013ba:	a4          	.byte	0xa4
 80013bb:	00          	.byte	0x00
 80013bc:	f000 ff3e 	bl	800223c <d_unqualified_name>
 80013c0:	4605      	mov	r5, r0
 80013c2:	4628      	mov	r0, r5
 80013c4:	b003      	add	sp, #12
 80013c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013ca:	7853      	ldrb	r3, [r2, #1]
 80013cc:	2b74      	cmp	r3, #116	; 0x74
 80013ce:	f040 80d7 	bne.w	8001580 <d_name+0x1e8>
 80013d2:	e9d0 3105 	ldrd	r3, r1, [r0, #20]
 80013d6:	3202      	adds	r2, #2
 80013d8:	428b      	cmp	r3, r1
 80013da:	60c2      	str	r2, [r0, #12]
 80013dc:	f280 8127 	bge.w	800162e <d_name+0x296>
 80013e0:	6901      	ldr	r1, [r0, #16]
 80013e2:	48c0      	ldr	r0, [pc, #768]	; (80016e4 <d_name+0x34c>)
 80013e4:	011a      	lsls	r2, r3, #4
 80013e6:	188d      	adds	r5, r1, r2
 80013e8:	3301      	adds	r3, #1
 80013ea:	6163      	str	r3, [r4, #20]
 80013ec:	2300      	movs	r3, #0
 80013ee:	606b      	str	r3, [r5, #4]
 80013f0:	548b      	strb	r3, [r1, r2]
 80013f2:	2303      	movs	r3, #3
 80013f4:	e9c5 0302 	strd	r0, r3, [r5, #8]
 80013f8:	4620      	mov	r0, r4
 80013fa:	f000 ff1f 	bl	800223c <d_unqualified_name>
 80013fe:	462a      	mov	r2, r5
 8001400:	4603      	mov	r3, r0
 8001402:	2101      	movs	r1, #1
 8001404:	4620      	mov	r0, r4
 8001406:	f7fe fef3 	bl	80001f0 <d_make_comp>
 800140a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800140c:	68e2      	ldr	r2, [r4, #12]
 800140e:	3303      	adds	r3, #3
 8001410:	6323      	str	r3, [r4, #48]	; 0x30
 8001412:	7813      	ldrb	r3, [r2, #0]
 8001414:	2b49      	cmp	r3, #73	; 0x49
 8001416:	4605      	mov	r5, r0
 8001418:	d1d3      	bne.n	80013c2 <d_name+0x2a>
 800141a:	2800      	cmp	r0, #0
 800141c:	f000 80ba 	beq.w	8001594 <d_name+0x1fc>
 8001420:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8001424:	4293      	cmp	r3, r2
 8001426:	f280 80b5 	bge.w	8001594 <d_name+0x1fc>
 800142a:	69e1      	ldr	r1, [r4, #28]
 800142c:	1c5a      	adds	r2, r3, #1
 800142e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8001432:	6222      	str	r2, [r4, #32]
 8001434:	4620      	mov	r0, r4
 8001436:	e014      	b.n	8001462 <d_name+0xca>
 8001438:	f000 ff00 	bl	800223c <d_unqualified_name>
 800143c:	68e3      	ldr	r3, [r4, #12]
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b49      	cmp	r3, #73	; 0x49
 8001442:	4605      	mov	r5, r0
 8001444:	d1bd      	bne.n	80013c2 <d_name+0x2a>
 8001446:	2800      	cmp	r0, #0
 8001448:	f000 80a4 	beq.w	8001594 <d_name+0x1fc>
 800144c:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8001450:	4293      	cmp	r3, r2
 8001452:	f280 809f 	bge.w	8001594 <d_name+0x1fc>
 8001456:	69e1      	ldr	r1, [r4, #28]
 8001458:	1c5a      	adds	r2, r3, #1
 800145a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800145e:	4620      	mov	r0, r4
 8001460:	6222      	str	r2, [r4, #32]
 8001462:	f7ff ff8f 	bl	8001384 <d_template_args>
 8001466:	462a      	mov	r2, r5
 8001468:	4603      	mov	r3, r0
 800146a:	2104      	movs	r1, #4
 800146c:	4620      	mov	r0, r4
 800146e:	f7fe febf 	bl	80001f0 <d_make_comp>
 8001472:	4605      	mov	r5, r0
 8001474:	4628      	mov	r0, r5
 8001476:	b003      	add	sp, #12
 8001478:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800147c:	3201      	adds	r2, #1
 800147e:	60c2      	str	r2, [r0, #12]
 8001480:	a901      	add	r1, sp, #4
 8001482:	2201      	movs	r2, #1
 8001484:	f000 fde6 	bl	8002054 <d_cv_qualifiers>
 8001488:	4680      	mov	r8, r0
 800148a:	2800      	cmp	r0, #0
 800148c:	f000 8082 	beq.w	8001594 <d_name+0x1fc>
 8001490:	2100      	movs	r1, #0
 8001492:	4620      	mov	r0, r4
 8001494:	f7fe fef4 	bl	8000280 <d_ref_qualifier>
 8001498:	68e2      	ldr	r2, [r4, #12]
 800149a:	4e93      	ldr	r6, [pc, #588]	; (80016e8 <d_name+0x350>)
 800149c:	7815      	ldrb	r5, [r2, #0]
 800149e:	4681      	mov	r9, r0
 80014a0:	2700      	movs	r7, #0
 80014a2:	2d00      	cmp	r5, #0
 80014a4:	f000 80b3 	beq.w	800160e <d_name+0x276>
 80014a8:	2d44      	cmp	r5, #68	; 0x44
 80014aa:	f000 8096 	beq.w	80015da <d_name+0x242>
 80014ae:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2b1c      	cmp	r3, #28
 80014b6:	d96f      	bls.n	8001598 <d_name+0x200>
 80014b8:	f1a5 0361 	sub.w	r3, r5, #97	; 0x61
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b19      	cmp	r3, #25
 80014c0:	d96e      	bls.n	80015a0 <d_name+0x208>
 80014c2:	2d55      	cmp	r5, #85	; 0x55
 80014c4:	f000 80a1 	beq.w	800160a <d_name+0x272>
 80014c8:	2d53      	cmp	r5, #83	; 0x53
 80014ca:	f000 80b2 	beq.w	8001632 <d_name+0x29a>
 80014ce:	2d49      	cmp	r5, #73	; 0x49
 80014d0:	f000 80a4 	beq.w	800161c <d_name+0x284>
 80014d4:	2d54      	cmp	r5, #84	; 0x54
 80014d6:	f000 80e6 	beq.w	80016a6 <d_name+0x30e>
 80014da:	2d45      	cmp	r5, #69	; 0x45
 80014dc:	f000 80e9 	beq.w	80016b2 <d_name+0x31a>
 80014e0:	2d4d      	cmp	r5, #77	; 0x4d
 80014e2:	f040 8094 	bne.w	800160e <d_name+0x276>
 80014e6:	2f00      	cmp	r7, #0
 80014e8:	f000 8091 	beq.w	800160e <d_name+0x276>
 80014ec:	1c53      	adds	r3, r2, #1
 80014ee:	60e3      	str	r3, [r4, #12]
 80014f0:	7855      	ldrb	r5, [r2, #1]
 80014f2:	461a      	mov	r2, r3
 80014f4:	e7d5      	b.n	80014a2 <d_name+0x10a>
 80014f6:	3201      	adds	r2, #1
 80014f8:	60c2      	str	r2, [r0, #12]
 80014fa:	2100      	movs	r1, #0
 80014fc:	f001 f83a 	bl	8002574 <d_encoding>
 8001500:	68e3      	ldr	r3, [r4, #12]
 8001502:	781a      	ldrb	r2, [r3, #0]
 8001504:	2a45      	cmp	r2, #69	; 0x45
 8001506:	4606      	mov	r6, r0
 8001508:	d144      	bne.n	8001594 <d_name+0x1fc>
 800150a:	1c5a      	adds	r2, r3, #1
 800150c:	60e2      	str	r2, [r4, #12]
 800150e:	785a      	ldrb	r2, [r3, #1]
 8001510:	2a73      	cmp	r2, #115	; 0x73
 8001512:	f000 80b0 	beq.w	8001676 <d_name+0x2de>
 8001516:	2a64      	cmp	r2, #100	; 0x64
 8001518:	f000 8095 	beq.w	8001646 <d_name+0x2ae>
 800151c:	4620      	mov	r0, r4
 800151e:	f7ff ff3b 	bl	8001398 <d_name>
 8001522:	4605      	mov	r5, r0
 8001524:	b308      	cbz	r0, 800156a <d_name+0x1d2>
 8001526:	7803      	ldrb	r3, [r0, #0]
 8001528:	2b45      	cmp	r3, #69	; 0x45
 800152a:	d01e      	beq.n	800156a <d_name+0x1d2>
 800152c:	2b47      	cmp	r3, #71	; 0x47
 800152e:	d01c      	beq.n	800156a <d_name+0x1d2>
 8001530:	f04f 37ff 	mov.w	r7, #4294967295
 8001534:	4620      	mov	r0, r4
 8001536:	f7ff f903 	bl	8000740 <d_discriminator>
 800153a:	b358      	cbz	r0, 8001594 <d_name+0x1fc>
 800153c:	1c7b      	adds	r3, r7, #1
 800153e:	d014      	beq.n	800156a <d_name+0x1d2>
 8001540:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8001544:	4293      	cmp	r3, r2
 8001546:	f280 8094 	bge.w	8001672 <d_name+0x2da>
 800154a:	6920      	ldr	r0, [r4, #16]
 800154c:	0119      	lsls	r1, r3, #4
 800154e:	1842      	adds	r2, r0, r1
 8001550:	3301      	adds	r3, #1
 8001552:	f04f 0e00 	mov.w	lr, #0
 8001556:	f04f 0c46 	mov.w	ip, #70	; 0x46
 800155a:	f8c2 e004 	str.w	lr, [r2, #4]
 800155e:	6163      	str	r3, [r4, #20]
 8001560:	f800 c001 	strb.w	ip, [r0, r1]
 8001564:	e9c2 5702 	strd	r5, r7, [r2, #8]
 8001568:	4615      	mov	r5, r2
 800156a:	462b      	mov	r3, r5
 800156c:	4632      	mov	r2, r6
 800156e:	4620      	mov	r0, r4
 8001570:	2102      	movs	r1, #2
 8001572:	f7fe fe3d 	bl	80001f0 <d_make_comp>
 8001576:	4605      	mov	r5, r0
 8001578:	4628      	mov	r0, r5
 800157a:	b003      	add	sp, #12
 800157c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001580:	2100      	movs	r1, #0
 8001582:	f7ff f825 	bl	80005d0 <d_substitution>
 8001586:	68e3      	ldr	r3, [r4, #12]
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b49      	cmp	r3, #73	; 0x49
 800158c:	4605      	mov	r5, r0
 800158e:	f47f af18 	bne.w	80013c2 <d_name+0x2a>
 8001592:	e74f      	b.n	8001434 <d_name+0x9c>
 8001594:	2500      	movs	r5, #0
 8001596:	e714      	b.n	80013c2 <d_name+0x2a>
 8001598:	fa26 f303 	lsr.w	r3, r6, r3
 800159c:	07d9      	lsls	r1, r3, #31
 800159e:	d58b      	bpl.n	80014b8 <d_name+0x120>
 80015a0:	4620      	mov	r0, r4
 80015a2:	f000 fe4b 	bl	800223c <d_unqualified_name>
 80015a6:	b35f      	cbz	r7, 8001600 <d_name+0x268>
 80015a8:	2101      	movs	r1, #1
 80015aa:	4603      	mov	r3, r0
 80015ac:	463a      	mov	r2, r7
 80015ae:	4620      	mov	r0, r4
 80015b0:	f7fe fe1e 	bl	80001f0 <d_make_comp>
 80015b4:	4607      	mov	r7, r0
 80015b6:	68e2      	ldr	r2, [r4, #12]
 80015b8:	2d53      	cmp	r5, #83	; 0x53
 80015ba:	7813      	ldrb	r3, [r2, #0]
 80015bc:	d01e      	beq.n	80015fc <d_name+0x264>
 80015be:	2b45      	cmp	r3, #69	; 0x45
 80015c0:	d01a      	beq.n	80015f8 <d_name+0x260>
 80015c2:	b327      	cbz	r7, 800160e <d_name+0x276>
 80015c4:	e9d4 3108 	ldrd	r3, r1, [r4, #32]
 80015c8:	428b      	cmp	r3, r1
 80015ca:	da20      	bge.n	800160e <d_name+0x276>
 80015cc:	69e1      	ldr	r1, [r4, #28]
 80015ce:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
 80015d2:	3301      	adds	r3, #1
 80015d4:	6223      	str	r3, [r4, #32]
 80015d6:	7815      	ldrb	r5, [r2, #0]
 80015d8:	e763      	b.n	80014a2 <d_name+0x10a>
 80015da:	7853      	ldrb	r3, [r2, #1]
 80015dc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80015e0:	2b54      	cmp	r3, #84	; 0x54
 80015e2:	4620      	mov	r0, r4
 80015e4:	d00e      	beq.n	8001604 <d_name+0x26c>
 80015e6:	f000 fe29 	bl	800223c <d_unqualified_name>
 80015ea:	2f00      	cmp	r7, #0
 80015ec:	d1dc      	bne.n	80015a8 <d_name+0x210>
 80015ee:	68e2      	ldr	r2, [r4, #12]
 80015f0:	7813      	ldrb	r3, [r2, #0]
 80015f2:	2b45      	cmp	r3, #69	; 0x45
 80015f4:	4607      	mov	r7, r0
 80015f6:	d1e4      	bne.n	80015c2 <d_name+0x22a>
 80015f8:	461d      	mov	r5, r3
 80015fa:	e758      	b.n	80014ae <d_name+0x116>
 80015fc:	461d      	mov	r5, r3
 80015fe:	e750      	b.n	80014a2 <d_name+0x10a>
 8001600:	4607      	mov	r7, r0
 8001602:	e7d8      	b.n	80015b6 <d_name+0x21e>
 8001604:	f000 f874 	bl	80016f0 <d_type>
 8001608:	e7ef      	b.n	80015ea <d_name+0x252>
 800160a:	4620      	mov	r0, r4
 800160c:	e7eb      	b.n	80015e6 <d_name+0x24e>
 800160e:	2500      	movs	r5, #0
 8001610:	4628      	mov	r0, r5
 8001612:	f8c8 5000 	str.w	r5, [r8]
 8001616:	b003      	add	sp, #12
 8001618:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800161c:	2f00      	cmp	r7, #0
 800161e:	d0f6      	beq.n	800160e <d_name+0x276>
 8001620:	3201      	adds	r2, #1
 8001622:	60e2      	str	r2, [r4, #12]
 8001624:	4620      	mov	r0, r4
 8001626:	f7ff fe4b 	bl	80012c0 <d_template_args_1>
 800162a:	2104      	movs	r1, #4
 800162c:	e7bd      	b.n	80015aa <d_name+0x212>
 800162e:	2500      	movs	r5, #0
 8001630:	e6e2      	b.n	80013f8 <d_name+0x60>
 8001632:	2101      	movs	r1, #1
 8001634:	4620      	mov	r0, r4
 8001636:	f7fe ffcb 	bl	80005d0 <d_substitution>
 800163a:	2f00      	cmp	r7, #0
 800163c:	d1b4      	bne.n	80015a8 <d_name+0x210>
 800163e:	68e2      	ldr	r2, [r4, #12]
 8001640:	4607      	mov	r7, r0
 8001642:	7815      	ldrb	r5, [r2, #0]
 8001644:	e72d      	b.n	80014a2 <d_name+0x10a>
 8001646:	3302      	adds	r3, #2
 8001648:	60e3      	str	r3, [r4, #12]
 800164a:	4620      	mov	r0, r4
 800164c:	f7fe ff0e 	bl	800046c <d_compact_number>
 8001650:	1e07      	subs	r7, r0, #0
 8001652:	db9f      	blt.n	8001594 <d_name+0x1fc>
 8001654:	4620      	mov	r0, r4
 8001656:	f7ff fe9f 	bl	8001398 <d_name>
 800165a:	4605      	mov	r5, r0
 800165c:	2800      	cmp	r0, #0
 800165e:	f43f af6f 	beq.w	8001540 <d_name+0x1a8>
 8001662:	7803      	ldrb	r3, [r0, #0]
 8001664:	2b45      	cmp	r3, #69	; 0x45
 8001666:	f43f af69 	beq.w	800153c <d_name+0x1a4>
 800166a:	2b47      	cmp	r3, #71	; 0x47
 800166c:	f43f af66 	beq.w	800153c <d_name+0x1a4>
 8001670:	e760      	b.n	8001534 <d_name+0x19c>
 8001672:	2500      	movs	r5, #0
 8001674:	e779      	b.n	800156a <d_name+0x1d2>
 8001676:	3302      	adds	r3, #2
 8001678:	60e3      	str	r3, [r4, #12]
 800167a:	4620      	mov	r0, r4
 800167c:	f7ff f860 	bl	8000740 <d_discriminator>
 8001680:	2800      	cmp	r0, #0
 8001682:	d087      	beq.n	8001594 <d_name+0x1fc>
 8001684:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 8001688:	429a      	cmp	r2, r3
 800168a:	da10      	bge.n	80016ae <d_name+0x316>
 800168c:	6920      	ldr	r0, [r4, #16]
 800168e:	4d17      	ldr	r5, [pc, #92]	; (80016ec <d_name+0x354>)
 8001690:	0111      	lsls	r1, r2, #4
 8001692:	1843      	adds	r3, r0, r1
 8001694:	3201      	adds	r2, #1
 8001696:	6162      	str	r2, [r4, #20]
 8001698:	2200      	movs	r2, #0
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	5442      	strb	r2, [r0, r1]
 800169e:	220e      	movs	r2, #14
 80016a0:	e9c3 5202 	strd	r5, r2, [r3, #8]
 80016a4:	e762      	b.n	800156c <d_name+0x1d4>
 80016a6:	4620      	mov	r0, r4
 80016a8:	f7fe fefa 	bl	80004a0 <d_template_param>
 80016ac:	e79d      	b.n	80015ea <d_name+0x252>
 80016ae:	2300      	movs	r3, #0
 80016b0:	e75c      	b.n	800156c <d_name+0x1d4>
 80016b2:	f8c8 7000 	str.w	r7, [r8]
 80016b6:	2f00      	cmp	r7, #0
 80016b8:	f43f af6c 	beq.w	8001594 <d_name+0x1fc>
 80016bc:	f1b9 0f00 	cmp.w	r9, #0
 80016c0:	d004      	beq.n	80016cc <d_name+0x334>
 80016c2:	9b01      	ldr	r3, [sp, #4]
 80016c4:	f8c9 3008 	str.w	r3, [r9, #8]
 80016c8:	f8cd 9004 	str.w	r9, [sp, #4]
 80016cc:	7813      	ldrb	r3, [r2, #0]
 80016ce:	2b45      	cmp	r3, #69	; 0x45
 80016d0:	f47f af60 	bne.w	8001594 <d_name+0x1fc>
 80016d4:	9d01      	ldr	r5, [sp, #4]
 80016d6:	3201      	adds	r2, #1
 80016d8:	4628      	mov	r0, r5
 80016da:	60e2      	str	r2, [r4, #12]
 80016dc:	b003      	add	sp, #12
 80016de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80016e2:	bf00      	nop
 80016e4:	08034ddc 	.word	0x08034ddc
 80016e8:	100803ff 	.word	0x100803ff
 80016ec:	08034dcc 	.word	0x08034dcc

080016f0 <d_type>:
 80016f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016f4:	68c2      	ldr	r2, [r0, #12]
 80016f6:	7813      	ldrb	r3, [r2, #0]
 80016f8:	2b72      	cmp	r3, #114	; 0x72
 80016fa:	b083      	sub	sp, #12
 80016fc:	4604      	mov	r4, r0
 80016fe:	d05f      	beq.n	80017c0 <d_type+0xd0>
 8001700:	2b56      	cmp	r3, #86	; 0x56
 8001702:	d05d      	beq.n	80017c0 <d_type+0xd0>
 8001704:	2b4b      	cmp	r3, #75	; 0x4b
 8001706:	d05b      	beq.n	80017c0 <d_type+0xd0>
 8001708:	2b44      	cmp	r3, #68	; 0x44
 800170a:	d051      	beq.n	80017b0 <d_type+0xc0>
 800170c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8001710:	294a      	cmp	r1, #74	; 0x4a
 8001712:	f200 809e 	bhi.w	8001852 <d_type+0x162>
 8001716:	e8df f011 	tbh	[pc, r1, lsl #1]
 800171a:	0111      	.short	0x0111
 800171c:	01110111 	.word	0x01110111
 8001720:	01110111 	.word	0x01110111
 8001724:	01110111 	.word	0x01110111
 8001728:	01110111 	.word	0x01110111
 800172c:	009c0111 	.word	0x009c0111
 8001730:	009c009c 	.word	0x009c009c
 8001734:	009c009c 	.word	0x009c009c
 8001738:	009c009c 	.word	0x009c009c
 800173c:	009c021e 	.word	0x009c021e
 8001740:	009c013b 	.word	0x009c013b
 8001744:	0135009c 	.word	0x0135009c
 8001748:	009c0149 	.word	0x009c0149
 800174c:	009c009c 	.word	0x009c009c
 8001750:	009c009c 	.word	0x009c009c
 8001754:	01110206 	.word	0x01110206
 8001758:	01650157 	.word	0x01650157
 800175c:	0173009c 	.word	0x0173009c
 8001760:	01a50181 	.word	0x01a50181
 8001764:	009c01cc 	.word	0x009c01cc
 8001768:	009c009c 	.word	0x009c009c
 800176c:	0111009c 	.word	0x0111009c
 8001770:	009c009c 	.word	0x009c009c
 8001774:	009c009c 	.word	0x009c009c
 8001778:	009c009c 	.word	0x009c009c
 800177c:	01e401e4 	.word	0x01e401e4
 8001780:	01e401e4 	.word	0x01e401e4
 8001784:	01e401e4 	.word	0x01e401e4
 8001788:	01e401e4 	.word	0x01e401e4
 800178c:	01e401e4 	.word	0x01e401e4
 8001790:	01e4009c 	.word	0x01e4009c
 8001794:	01e401e4 	.word	0x01e401e4
 8001798:	009c01e4 	.word	0x009c01e4
 800179c:	009c009c 	.word	0x009c009c
 80017a0:	01e401e4 	.word	0x01e401e4
 80017a4:	01e40127 	.word	0x01e40127
 80017a8:	01e401e4 	.word	0x01e401e4
 80017ac:	01e401e4 	.word	0x01e401e4
 80017b0:	7853      	ldrb	r3, [r2, #1]
 80017b2:	f003 01df 	and.w	r1, r3, #223	; 0xdf
 80017b6:	294f      	cmp	r1, #79	; 0x4f
 80017b8:	d002      	beq.n	80017c0 <d_type+0xd0>
 80017ba:	3b77      	subs	r3, #119	; 0x77
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d84d      	bhi.n	800185c <d_type+0x16c>
 80017c0:	2200      	movs	r2, #0
 80017c2:	a901      	add	r1, sp, #4
 80017c4:	4620      	mov	r0, r4
 80017c6:	f000 fc45 	bl	8002054 <d_cv_qualifiers>
 80017ca:	4605      	mov	r5, r0
 80017cc:	2800      	cmp	r0, #0
 80017ce:	d040      	beq.n	8001852 <d_type+0x162>
 80017d0:	68e3      	ldr	r3, [r4, #12]
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b46      	cmp	r3, #70	; 0x46
 80017d6:	4620      	mov	r0, r4
 80017d8:	d119      	bne.n	800180e <d_type+0x11e>
 80017da:	f000 fd0f 	bl	80021fc <d_function_type>
 80017de:	6028      	str	r0, [r5, #0]
 80017e0:	2800      	cmp	r0, #0
 80017e2:	d036      	beq.n	8001852 <d_type+0x162>
 80017e4:	7803      	ldrb	r3, [r0, #0]
 80017e6:	9a01      	ldr	r2, [sp, #4]
 80017e8:	3b1f      	subs	r3, #31
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d913      	bls.n	8001816 <d_type+0x126>
 80017ee:	2a00      	cmp	r2, #0
 80017f0:	d02f      	beq.n	8001852 <d_type+0x162>
 80017f2:	e9d4 3108 	ldrd	r3, r1, [r4, #32]
 80017f6:	428b      	cmp	r3, r1
 80017f8:	da2b      	bge.n	8001852 <d_type+0x162>
 80017fa:	69e0      	ldr	r0, [r4, #28]
 80017fc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8001800:	1c59      	adds	r1, r3, #1
 8001802:	9d01      	ldr	r5, [sp, #4]
 8001804:	6221      	str	r1, [r4, #32]
 8001806:	4628      	mov	r0, r5
 8001808:	b003      	add	sp, #12
 800180a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800180e:	f7ff ff6f 	bl	80016f0 <d_type>
 8001812:	6028      	str	r0, [r5, #0]
 8001814:	e7e4      	b.n	80017e0 <d_type+0xf0>
 8001816:	6883      	ldr	r3, [r0, #8]
 8001818:	6082      	str	r2, [r0, #8]
 800181a:	682a      	ldr	r2, [r5, #0]
 800181c:	9201      	str	r2, [sp, #4]
 800181e:	602b      	str	r3, [r5, #0]
 8001820:	9a01      	ldr	r2, [sp, #4]
 8001822:	e7e4      	b.n	80017ee <d_type+0xfe>
 8001824:	2301      	movs	r3, #1
 8001826:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8001828:	6343      	str	r3, [r0, #52]	; 0x34
 800182a:	f7ff fb37 	bl	8000e9c <d_expression_1>
 800182e:	6365      	str	r5, [r4, #52]	; 0x34
 8001830:	4602      	mov	r2, r0
 8001832:	2300      	movs	r3, #0
 8001834:	2142      	movs	r1, #66	; 0x42
 8001836:	4620      	mov	r0, r4
 8001838:	f7fe fcda 	bl	80001f0 <d_make_comp>
 800183c:	4605      	mov	r5, r0
 800183e:	9001      	str	r0, [sp, #4]
 8001840:	b138      	cbz	r0, 8001852 <d_type+0x162>
 8001842:	68e3      	ldr	r3, [r4, #12]
 8001844:	781a      	ldrb	r2, [r3, #0]
 8001846:	b122      	cbz	r2, 8001852 <d_type+0x162>
 8001848:	1c5a      	adds	r2, r3, #1
 800184a:	60e2      	str	r2, [r4, #12]
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b45      	cmp	r3, #69	; 0x45
 8001850:	d07b      	beq.n	800194a <d_type+0x25a>
 8001852:	2500      	movs	r5, #0
 8001854:	4628      	mov	r0, r5
 8001856:	b003      	add	sp, #12
 8001858:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800185c:	1c53      	adds	r3, r2, #1
 800185e:	60c3      	str	r3, [r0, #12]
 8001860:	7853      	ldrb	r3, [r2, #1]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0f5      	beq.n	8001852 <d_type+0x162>
 8001866:	1c93      	adds	r3, r2, #2
 8001868:	60c3      	str	r3, [r0, #12]
 800186a:	7853      	ldrb	r3, [r2, #1]
 800186c:	3b46      	subs	r3, #70	; 0x46
 800186e:	2b30      	cmp	r3, #48	; 0x30
 8001870:	d8ef      	bhi.n	8001852 <d_type+0x162>
 8001872:	a101      	add	r1, pc, #4	; (adr r1, 8001878 <d_type+0x188>)
 8001874:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001878:	08001d35 	.word	0x08001d35
 800187c:	08001853 	.word	0x08001853
 8001880:	08001853 	.word	0x08001853
 8001884:	08001853 	.word	0x08001853
 8001888:	08001853 	.word	0x08001853
 800188c:	08001853 	.word	0x08001853
 8001890:	08001853 	.word	0x08001853
 8001894:	08001853 	.word	0x08001853
 8001898:	08001853 	.word	0x08001853
 800189c:	08001853 	.word	0x08001853
 80018a0:	08001853 	.word	0x08001853
 80018a4:	08001853 	.word	0x08001853
 80018a8:	08001853 	.word	0x08001853
 80018ac:	08001853 	.word	0x08001853
 80018b0:	08001825 	.word	0x08001825
 80018b4:	08001853 	.word	0x08001853
 80018b8:	08001853 	.word	0x08001853
 80018bc:	08001853 	.word	0x08001853
 80018c0:	08001853 	.word	0x08001853
 80018c4:	08001853 	.word	0x08001853
 80018c8:	08001853 	.word	0x08001853
 80018cc:	08001853 	.word	0x08001853
 80018d0:	08001853 	.word	0x08001853
 80018d4:	08001853 	.word	0x08001853
 80018d8:	08001853 	.word	0x08001853
 80018dc:	08001853 	.word	0x08001853
 80018e0:	08001853 	.word	0x08001853
 80018e4:	08001d11 	.word	0x08001d11
 80018e8:	08001853 	.word	0x08001853
 80018ec:	08001ced 	.word	0x08001ced
 80018f0:	08001cc5 	.word	0x08001cc5
 80018f4:	08001c9d 	.word	0x08001c9d
 80018f8:	08001c75 	.word	0x08001c75
 80018fc:	08001853 	.word	0x08001853
 8001900:	08001c4d 	.word	0x08001c4d
 8001904:	08001de9 	.word	0x08001de9
 8001908:	08001853 	.word	0x08001853
 800190c:	08001853 	.word	0x08001853
 8001910:	08001853 	.word	0x08001853
 8001914:	08001853 	.word	0x08001853
 8001918:	08001d9d 	.word	0x08001d9d
 800191c:	08001853 	.word	0x08001853
 8001920:	08001c37 	.word	0x08001c37
 8001924:	08001853 	.word	0x08001853
 8001928:	08001853 	.word	0x08001853
 800192c:	08001c0f 	.word	0x08001c0f
 8001930:	08001825 	.word	0x08001825
 8001934:	08001853 	.word	0x08001853
 8001938:	08001bd5 	.word	0x08001bd5
 800193c:	4620      	mov	r0, r4
 800193e:	f7ff fd2b 	bl	8001398 <d_name>
 8001942:	4605      	mov	r5, r0
 8001944:	9001      	str	r0, [sp, #4]
 8001946:	2d00      	cmp	r5, #0
 8001948:	d083      	beq.n	8001852 <d_type+0x162>
 800194a:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 800194e:	4293      	cmp	r3, r2
 8001950:	f6bf af7f 	bge.w	8001852 <d_type+0x162>
 8001954:	69e1      	ldr	r1, [r4, #28]
 8001956:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
 800195a:	9d01      	ldr	r5, [sp, #4]
 800195c:	1c5a      	adds	r2, r3, #1
 800195e:	4628      	mov	r0, r5
 8001960:	6222      	str	r2, [r4, #32]
 8001962:	b003      	add	sp, #12
 8001964:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001968:	3201      	adds	r2, #1
 800196a:	60e2      	str	r2, [r4, #12]
 800196c:	4620      	mov	r0, r4
 800196e:	f7fe fdb9 	bl	80004e4 <d_source_name>
 8001972:	2300      	movs	r3, #0
 8001974:	4602      	mov	r2, r0
 8001976:	2128      	movs	r1, #40	; 0x28
 8001978:	4620      	mov	r0, r4
 800197a:	f7fe fc39 	bl	80001f0 <d_make_comp>
 800197e:	4605      	mov	r5, r0
 8001980:	9001      	str	r0, [sp, #4]
 8001982:	e7e0      	b.n	8001946 <d_type+0x256>
 8001984:	4620      	mov	r0, r4
 8001986:	f000 fc39 	bl	80021fc <d_function_type>
 800198a:	4605      	mov	r5, r0
 800198c:	9001      	str	r0, [sp, #4]
 800198e:	e7da      	b.n	8001946 <d_type+0x256>
 8001990:	3201      	adds	r2, #1
 8001992:	60e2      	str	r2, [r4, #12]
 8001994:	4620      	mov	r0, r4
 8001996:	f7ff feab 	bl	80016f0 <d_type>
 800199a:	2300      	movs	r3, #0
 800199c:	4602      	mov	r2, r0
 800199e:	2125      	movs	r1, #37	; 0x25
 80019a0:	4620      	mov	r0, r4
 80019a2:	f7fe fc25 	bl	80001f0 <d_make_comp>
 80019a6:	4605      	mov	r5, r0
 80019a8:	9001      	str	r0, [sp, #4]
 80019aa:	e7cc      	b.n	8001946 <d_type+0x256>
 80019ac:	3201      	adds	r2, #1
 80019ae:	60e2      	str	r2, [r4, #12]
 80019b0:	4620      	mov	r0, r4
 80019b2:	f7ff fe9d 	bl	80016f0 <d_type>
 80019b6:	2300      	movs	r3, #0
 80019b8:	4602      	mov	r2, r0
 80019ba:	2126      	movs	r1, #38	; 0x26
 80019bc:	4620      	mov	r0, r4
 80019be:	f7fe fc17 	bl	80001f0 <d_make_comp>
 80019c2:	4605      	mov	r5, r0
 80019c4:	9001      	str	r0, [sp, #4]
 80019c6:	e7be      	b.n	8001946 <d_type+0x256>
 80019c8:	3201      	adds	r2, #1
 80019ca:	60e2      	str	r2, [r4, #12]
 80019cc:	4620      	mov	r0, r4
 80019ce:	f7ff fe8f 	bl	80016f0 <d_type>
 80019d2:	2300      	movs	r3, #0
 80019d4:	4602      	mov	r2, r0
 80019d6:	2124      	movs	r1, #36	; 0x24
 80019d8:	4620      	mov	r0, r4
 80019da:	f7fe fc09 	bl	80001f0 <d_make_comp>
 80019de:	4605      	mov	r5, r0
 80019e0:	9001      	str	r0, [sp, #4]
 80019e2:	e7b0      	b.n	8001946 <d_type+0x256>
 80019e4:	3201      	adds	r2, #1
 80019e6:	60e2      	str	r2, [r4, #12]
 80019e8:	4620      	mov	r0, r4
 80019ea:	f7ff fe81 	bl	80016f0 <d_type>
 80019ee:	2300      	movs	r3, #0
 80019f0:	4602      	mov	r2, r0
 80019f2:	2122      	movs	r1, #34	; 0x22
 80019f4:	4620      	mov	r0, r4
 80019f6:	f7fe fbfb 	bl	80001f0 <d_make_comp>
 80019fa:	4605      	mov	r5, r0
 80019fc:	9001      	str	r0, [sp, #4]
 80019fe:	e7a2      	b.n	8001946 <d_type+0x256>
 8001a00:	3201      	adds	r2, #1
 8001a02:	60e2      	str	r2, [r4, #12]
 8001a04:	4620      	mov	r0, r4
 8001a06:	f7ff fe73 	bl	80016f0 <d_type>
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	2123      	movs	r1, #35	; 0x23
 8001a10:	4620      	mov	r0, r4
 8001a12:	f7fe fbed 	bl	80001f0 <d_make_comp>
 8001a16:	4605      	mov	r5, r0
 8001a18:	9001      	str	r0, [sp, #4]
 8001a1a:	e794      	b.n	8001946 <d_type+0x256>
 8001a1c:	7853      	ldrb	r3, [r2, #1]
 8001a1e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001a22:	2a09      	cmp	r2, #9
 8001a24:	d905      	bls.n	8001a32 <d_type+0x342>
 8001a26:	2b5f      	cmp	r3, #95	; 0x5f
 8001a28:	d003      	beq.n	8001a32 <d_type+0x342>
 8001a2a:	3b41      	subs	r3, #65	; 0x41
 8001a2c:	2b19      	cmp	r3, #25
 8001a2e:	f200 820f 	bhi.w	8001e50 <d_type+0x760>
 8001a32:	2100      	movs	r1, #0
 8001a34:	4620      	mov	r0, r4
 8001a36:	f7fe fdcb 	bl	80005d0 <d_substitution>
 8001a3a:	68e3      	ldr	r3, [r4, #12]
 8001a3c:	9001      	str	r0, [sp, #4]
 8001a3e:	781a      	ldrb	r2, [r3, #0]
 8001a40:	2a49      	cmp	r2, #73	; 0x49
 8001a42:	4605      	mov	r5, r0
 8001a44:	f47f aedf 	bne.w	8001806 <d_type+0x116>
 8001a48:	3301      	adds	r3, #1
 8001a4a:	60e3      	str	r3, [r4, #12]
 8001a4c:	4620      	mov	r0, r4
 8001a4e:	f7ff fc37 	bl	80012c0 <d_template_args_1>
 8001a52:	4603      	mov	r3, r0
 8001a54:	462a      	mov	r2, r5
 8001a56:	2104      	movs	r1, #4
 8001a58:	4620      	mov	r0, r4
 8001a5a:	f7fe fbc9 	bl	80001f0 <d_make_comp>
 8001a5e:	4605      	mov	r5, r0
 8001a60:	9001      	str	r0, [sp, #4]
 8001a62:	e770      	b.n	8001946 <d_type+0x256>
 8001a64:	4620      	mov	r0, r4
 8001a66:	f7fe fd1b 	bl	80004a0 <d_template_param>
 8001a6a:	68e6      	ldr	r6, [r4, #12]
 8001a6c:	9001      	str	r0, [sp, #4]
 8001a6e:	7833      	ldrb	r3, [r6, #0]
 8001a70:	2b49      	cmp	r3, #73	; 0x49
 8001a72:	4605      	mov	r5, r0
 8001a74:	f47f af67 	bne.w	8001946 <d_type+0x256>
 8001a78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f040 81f5 	bne.w	8001e6a <d_type+0x77a>
 8001a80:	2800      	cmp	r0, #0
 8001a82:	f43f aee6 	beq.w	8001852 <d_type+0x162>
 8001a86:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
 8001a8a:	428a      	cmp	r2, r1
 8001a8c:	f6bf aee1 	bge.w	8001852 <d_type+0x162>
 8001a90:	69e1      	ldr	r1, [r4, #28]
 8001a92:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 8001a96:	3201      	adds	r2, #1
 8001a98:	6222      	str	r2, [r4, #32]
 8001a9a:	7831      	ldrb	r1, [r6, #0]
 8001a9c:	9d01      	ldr	r5, [sp, #4]
 8001a9e:	3949      	subs	r1, #73	; 0x49
 8001aa0:	2901      	cmp	r1, #1
 8001aa2:	d8d7      	bhi.n	8001a54 <d_type+0x364>
 8001aa4:	3601      	adds	r6, #1
 8001aa6:	60e6      	str	r6, [r4, #12]
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	f7ff fc09 	bl	80012c0 <d_template_args_1>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	e7d0      	b.n	8001a54 <d_type+0x364>
 8001ab2:	3201      	adds	r2, #1
 8001ab4:	60e2      	str	r2, [r4, #12]
 8001ab6:	4620      	mov	r0, r4
 8001ab8:	f7fe fd14 	bl	80004e4 <d_source_name>
 8001abc:	68e3      	ldr	r3, [r4, #12]
 8001abe:	9001      	str	r0, [sp, #4]
 8001ac0:	781a      	ldrb	r2, [r3, #0]
 8001ac2:	2a49      	cmp	r2, #73	; 0x49
 8001ac4:	4605      	mov	r5, r0
 8001ac6:	f000 81a8 	beq.w	8001e1a <d_type+0x72a>
 8001aca:	4620      	mov	r0, r4
 8001acc:	f7ff fe10 	bl	80016f0 <d_type>
 8001ad0:	9b01      	ldr	r3, [sp, #4]
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	2121      	movs	r1, #33	; 0x21
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	f7fe fb8a 	bl	80001f0 <d_make_comp>
 8001adc:	4605      	mov	r5, r0
 8001ade:	9001      	str	r0, [sp, #4]
 8001ae0:	e731      	b.n	8001946 <d_type+0x256>
 8001ae2:	e9d4 1005 	ldrd	r1, r0, [r4, #20]
 8001ae6:	3b61      	subs	r3, #97	; 0x61
 8001ae8:	4db6      	ldr	r5, [pc, #728]	; (8001dc4 <d_type+0x6d4>)
 8001aea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001aee:	4281      	cmp	r1, r0
 8001af0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001af4:	f280 818b 	bge.w	8001e0e <d_type+0x71e>
 8001af8:	6858      	ldr	r0, [r3, #4]
 8001afa:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8001afc:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8001b00:	010f      	lsls	r7, r1, #4
 8001b02:	eb0c 0507 	add.w	r5, ip, r7
 8001b06:	4406      	add	r6, r0
 8001b08:	4630      	mov	r0, r6
 8001b0a:	3201      	adds	r2, #1
 8001b0c:	3101      	adds	r1, #1
 8001b0e:	f04f 0e00 	mov.w	lr, #0
 8001b12:	2627      	movs	r6, #39	; 0x27
 8001b14:	f8c5 e004 	str.w	lr, [r5, #4]
 8001b18:	6161      	str	r1, [r4, #20]
 8001b1a:	f80c 6007 	strb.w	r6, [ip, r7]
 8001b1e:	60ab      	str	r3, [r5, #8]
 8001b20:	60e2      	str	r2, [r4, #12]
 8001b22:	6320      	str	r0, [r4, #48]	; 0x30
 8001b24:	e66f      	b.n	8001806 <d_type+0x116>
 8001b26:	3201      	adds	r2, #1
 8001b28:	60e2      	str	r2, [r4, #12]
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	f7ff fde0 	bl	80016f0 <d_type>
 8001b30:	4605      	mov	r5, r0
 8001b32:	2800      	cmp	r0, #0
 8001b34:	f43f ae8d 	beq.w	8001852 <d_type+0x162>
 8001b38:	4620      	mov	r0, r4
 8001b3a:	f7ff fdd9 	bl	80016f0 <d_type>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2800      	cmp	r0, #0
 8001b42:	f43f ae86 	beq.w	8001852 <d_type+0x162>
 8001b46:	462a      	mov	r2, r5
 8001b48:	212b      	movs	r1, #43	; 0x2b
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	f7fe fb50 	bl	80001f0 <d_make_comp>
 8001b50:	4605      	mov	r5, r0
 8001b52:	9001      	str	r0, [sp, #4]
 8001b54:	e6f7      	b.n	8001946 <d_type+0x256>
 8001b56:	1c55      	adds	r5, r2, #1
 8001b58:	60e5      	str	r5, [r4, #12]
 8001b5a:	7853      	ldrb	r3, [r2, #1]
 8001b5c:	2b5f      	cmp	r3, #95	; 0x5f
 8001b5e:	f000 815a 	beq.w	8001e16 <d_type+0x726>
 8001b62:	3b30      	subs	r3, #48	; 0x30
 8001b64:	2b09      	cmp	r3, #9
 8001b66:	f200 8165 	bhi.w	8001e34 <d_type+0x744>
 8001b6a:	4628      	mov	r0, r5
 8001b6c:	e000      	b.n	8001b70 <d_type+0x480>
 8001b6e:	4608      	mov	r0, r1
 8001b70:	1c41      	adds	r1, r0, #1
 8001b72:	60e1      	str	r1, [r4, #12]
 8001b74:	7843      	ldrb	r3, [r0, #1]
 8001b76:	3b30      	subs	r3, #48	; 0x30
 8001b78:	2b09      	cmp	r3, #9
 8001b7a:	d9f8      	bls.n	8001b6e <d_type+0x47e>
 8001b7c:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8001b80:	4293      	cmp	r3, r2
 8001b82:	eba1 0705 	sub.w	r7, r1, r5
 8001b86:	f6bf ae64 	bge.w	8001852 <d_type+0x162>
 8001b8a:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8001b8e:	ea4f 1c03 	mov.w	ip, r3, lsl #4
 8001b92:	eb0e 060c 	add.w	r6, lr, ip
 8001b96:	3301      	adds	r3, #1
 8001b98:	2200      	movs	r2, #0
 8001b9a:	6072      	str	r2, [r6, #4]
 8001b9c:	6163      	str	r3, [r4, #20]
 8001b9e:	2f00      	cmp	r7, #0
 8001ba0:	f43f ae57 	beq.w	8001852 <d_type+0x162>
 8001ba4:	6072      	str	r2, [r6, #4]
 8001ba6:	f80e 200c 	strb.w	r2, [lr, ip]
 8001baa:	e9c6 5702 	strd	r5, r7, [r6, #8]
 8001bae:	7843      	ldrb	r3, [r0, #1]
 8001bb0:	460d      	mov	r5, r1
 8001bb2:	2b5f      	cmp	r3, #95	; 0x5f
 8001bb4:	f47f ae4d 	bne.w	8001852 <d_type+0x162>
 8001bb8:	3501      	adds	r5, #1
 8001bba:	60e5      	str	r5, [r4, #12]
 8001bbc:	4620      	mov	r0, r4
 8001bbe:	f7ff fd97 	bl	80016f0 <d_type>
 8001bc2:	4632      	mov	r2, r6
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	212a      	movs	r1, #42	; 0x2a
 8001bc8:	4620      	mov	r0, r4
 8001bca:	f7fe fb11 	bl	80001f0 <d_make_comp>
 8001bce:	4605      	mov	r5, r0
 8001bd0:	9001      	str	r0, [sp, #4]
 8001bd2:	e6b8      	b.n	8001946 <d_type+0x256>
 8001bd4:	7893      	ldrb	r3, [r2, #2]
 8001bd6:	2b5f      	cmp	r3, #95	; 0x5f
 8001bd8:	f000 8178 	beq.w	8001ecc <d_type+0x7dc>
 8001bdc:	f7fe fc2e 	bl	800043c <d_number_component>
 8001be0:	4605      	mov	r5, r0
 8001be2:	2d00      	cmp	r5, #0
 8001be4:	f43f ae35 	beq.w	8001852 <d_type+0x162>
 8001be8:	68e3      	ldr	r3, [r4, #12]
 8001bea:	781a      	ldrb	r2, [r3, #0]
 8001bec:	2a5f      	cmp	r2, #95	; 0x5f
 8001bee:	f47f ae30 	bne.w	8001852 <d_type+0x162>
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	60e3      	str	r3, [r4, #12]
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	f7ff fd7a 	bl	80016f0 <d_type>
 8001bfc:	462a      	mov	r2, r5
 8001bfe:	4603      	mov	r3, r0
 8001c00:	212d      	movs	r1, #45	; 0x2d
 8001c02:	4620      	mov	r0, r4
 8001c04:	f7fe faf4 	bl	80001f0 <d_make_comp>
 8001c08:	4605      	mov	r5, r0
 8001c0a:	9001      	str	r0, [sp, #4]
 8001c0c:	e69b      	b.n	8001946 <d_type+0x256>
 8001c0e:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001c12:	4293      	cmp	r3, r2
 8001c14:	f280 80fb 	bge.w	8001e0e <d_type+0x71e>
 8001c18:	6900      	ldr	r0, [r0, #16]
 8001c1a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c1c:	0119      	lsls	r1, r3, #4
 8001c1e:	1845      	adds	r5, r0, r1
 8001c20:	3301      	adds	r3, #1
 8001c22:	2600      	movs	r6, #0
 8001c24:	606e      	str	r6, [r5, #4]
 8001c26:	3208      	adds	r2, #8
 8001c28:	6163      	str	r3, [r4, #20]
 8001c2a:	2627      	movs	r6, #39	; 0x27
 8001c2c:	4b66      	ldr	r3, [pc, #408]	; (8001dc8 <d_type+0x6d8>)
 8001c2e:	5446      	strb	r6, [r0, r1]
 8001c30:	60ab      	str	r3, [r5, #8]
 8001c32:	6322      	str	r2, [r4, #48]	; 0x30
 8001c34:	e5e7      	b.n	8001806 <d_type+0x116>
 8001c36:	f7ff fd5b 	bl	80016f0 <d_type>
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	214a      	movs	r1, #74	; 0x4a
 8001c40:	4620      	mov	r0, r4
 8001c42:	f7fe fad5 	bl	80001f0 <d_make_comp>
 8001c46:	4605      	mov	r5, r0
 8001c48:	9001      	str	r0, [sp, #4]
 8001c4a:	e67c      	b.n	8001946 <d_type+0x256>
 8001c4c:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001c50:	4293      	cmp	r3, r2
 8001c52:	f280 80dc 	bge.w	8001e0e <d_type+0x71e>
 8001c56:	6900      	ldr	r0, [r0, #16]
 8001c58:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c5a:	0119      	lsls	r1, r3, #4
 8001c5c:	1845      	adds	r5, r0, r1
 8001c5e:	3301      	adds	r3, #1
 8001c60:	2600      	movs	r6, #0
 8001c62:	606e      	str	r6, [r5, #4]
 8001c64:	3204      	adds	r2, #4
 8001c66:	6163      	str	r3, [r4, #20]
 8001c68:	2627      	movs	r6, #39	; 0x27
 8001c6a:	4b58      	ldr	r3, [pc, #352]	; (8001dcc <d_type+0x6dc>)
 8001c6c:	5446      	strb	r6, [r0, r1]
 8001c6e:	60ab      	str	r3, [r5, #8]
 8001c70:	6322      	str	r2, [r4, #48]	; 0x30
 8001c72:	e5c8      	b.n	8001806 <d_type+0x116>
 8001c74:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	f280 80c8 	bge.w	8001e0e <d_type+0x71e>
 8001c7e:	6900      	ldr	r0, [r0, #16]
 8001c80:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c82:	0119      	lsls	r1, r3, #4
 8001c84:	1845      	adds	r5, r0, r1
 8001c86:	3301      	adds	r3, #1
 8001c88:	2600      	movs	r6, #0
 8001c8a:	606e      	str	r6, [r5, #4]
 8001c8c:	3209      	adds	r2, #9
 8001c8e:	6163      	str	r3, [r4, #20]
 8001c90:	2627      	movs	r6, #39	; 0x27
 8001c92:	4b4f      	ldr	r3, [pc, #316]	; (8001dd0 <d_type+0x6e0>)
 8001c94:	5446      	strb	r6, [r0, r1]
 8001c96:	60ab      	str	r3, [r5, #8]
 8001c98:	6322      	str	r2, [r4, #48]	; 0x30
 8001c9a:	e5b4      	b.n	8001806 <d_type+0x116>
 8001c9c:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	f280 80b4 	bge.w	8001e0e <d_type+0x71e>
 8001ca6:	6900      	ldr	r0, [r0, #16]
 8001ca8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001caa:	0119      	lsls	r1, r3, #4
 8001cac:	1845      	adds	r5, r0, r1
 8001cae:	3301      	adds	r3, #1
 8001cb0:	2600      	movs	r6, #0
 8001cb2:	606e      	str	r6, [r5, #4]
 8001cb4:	320a      	adds	r2, #10
 8001cb6:	6163      	str	r3, [r4, #20]
 8001cb8:	2627      	movs	r6, #39	; 0x27
 8001cba:	4b46      	ldr	r3, [pc, #280]	; (8001dd4 <d_type+0x6e4>)
 8001cbc:	5446      	strb	r6, [r0, r1]
 8001cbe:	60ab      	str	r3, [r5, #8]
 8001cc0:	6322      	str	r2, [r4, #48]	; 0x30
 8001cc2:	e5a0      	b.n	8001806 <d_type+0x116>
 8001cc4:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	f280 80a0 	bge.w	8001e0e <d_type+0x71e>
 8001cce:	6900      	ldr	r0, [r0, #16]
 8001cd0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001cd2:	0119      	lsls	r1, r3, #4
 8001cd4:	1845      	adds	r5, r0, r1
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	2600      	movs	r6, #0
 8001cda:	606e      	str	r6, [r5, #4]
 8001cdc:	3209      	adds	r2, #9
 8001cde:	6163      	str	r3, [r4, #20]
 8001ce0:	2627      	movs	r6, #39	; 0x27
 8001ce2:	4b3d      	ldr	r3, [pc, #244]	; (8001dd8 <d_type+0x6e8>)
 8001ce4:	5446      	strb	r6, [r0, r1]
 8001ce6:	60ab      	str	r3, [r5, #8]
 8001ce8:	6322      	str	r2, [r4, #48]	; 0x30
 8001cea:	e58c      	b.n	8001806 <d_type+0x116>
 8001cec:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	f6bf adae 	bge.w	8001852 <d_type+0x162>
 8001cf6:	6901      	ldr	r1, [r0, #16]
 8001cf8:	4e38      	ldr	r6, [pc, #224]	; (8001ddc <d_type+0x6ec>)
 8001cfa:	011a      	lsls	r2, r3, #4
 8001cfc:	188d      	adds	r5, r1, r2
 8001cfe:	3301      	adds	r3, #1
 8001d00:	6143      	str	r3, [r0, #20]
 8001d02:	2300      	movs	r3, #0
 8001d04:	200e      	movs	r0, #14
 8001d06:	606b      	str	r3, [r5, #4]
 8001d08:	548b      	strb	r3, [r1, r2]
 8001d0a:	e9c5 6002 	strd	r6, r0, [r5, #8]
 8001d0e:	e57a      	b.n	8001806 <d_type+0x116>
 8001d10:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001d14:	4293      	cmp	r3, r2
 8001d16:	f6bf ad9c 	bge.w	8001852 <d_type+0x162>
 8001d1a:	6901      	ldr	r1, [r0, #16]
 8001d1c:	4e30      	ldr	r6, [pc, #192]	; (8001de0 <d_type+0x6f0>)
 8001d1e:	011a      	lsls	r2, r3, #4
 8001d20:	188d      	adds	r5, r1, r2
 8001d22:	3301      	adds	r3, #1
 8001d24:	6143      	str	r3, [r0, #20]
 8001d26:	2300      	movs	r3, #0
 8001d28:	2004      	movs	r0, #4
 8001d2a:	606b      	str	r3, [r5, #4]
 8001d2c:	548b      	strb	r3, [r1, r2]
 8001d2e:	e9c5 6002 	strd	r6, r0, [r5, #8]
 8001d32:	e568      	b.n	8001806 <d_type+0x116>
 8001d34:	e9d0 3105 	ldrd	r3, r1, [r0, #20]
 8001d38:	428b      	cmp	r3, r1
 8001d3a:	f280 80af 	bge.w	8001e9c <d_type+0x7ac>
 8001d3e:	6905      	ldr	r5, [r0, #16]
 8001d40:	0118      	lsls	r0, r3, #4
 8001d42:	1829      	adds	r1, r5, r0
 8001d44:	3301      	adds	r3, #1
 8001d46:	2700      	movs	r7, #0
 8001d48:	262c      	movs	r6, #44	; 0x2c
 8001d4a:	604f      	str	r7, [r1, #4]
 8001d4c:	9101      	str	r1, [sp, #4]
 8001d4e:	6163      	str	r3, [r4, #20]
 8001d50:	542e      	strb	r6, [r5, r0]
 8001d52:	7893      	ldrb	r3, [r2, #2]
 8001d54:	3b30      	subs	r3, #48	; 0x30
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b09      	cmp	r3, #9
 8001d5a:	bf94      	ite	ls
 8001d5c:	2301      	movls	r3, #1
 8001d5e:	463b      	movhi	r3, r7
 8001d60:	818b      	strh	r3, [r1, #12]
 8001d62:	f240 80ae 	bls.w	8001ec2 <d_type+0x7d2>
 8001d66:	4620      	mov	r0, r4
 8001d68:	9d01      	ldr	r5, [sp, #4]
 8001d6a:	f7ff fcc1 	bl	80016f0 <d_type>
 8001d6e:	9b01      	ldr	r3, [sp, #4]
 8001d70:	60a8      	str	r0, [r5, #8]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f43f ad6c 	beq.w	8001852 <d_type+0x162>
 8001d7a:	f104 000c 	add.w	r0, r4, #12
 8001d7e:	f7fe fb31 	bl	80003e4 <d_number.isra.1>
 8001d82:	68e2      	ldr	r2, [r4, #12]
 8001d84:	7813      	ldrb	r3, [r2, #0]
 8001d86:	b113      	cbz	r3, 8001d8e <d_type+0x69e>
 8001d88:	1c53      	adds	r3, r2, #1
 8001d8a:	60e3      	str	r3, [r4, #12]
 8001d8c:	7813      	ldrb	r3, [r2, #0]
 8001d8e:	9d01      	ldr	r5, [sp, #4]
 8001d90:	f1a3 0273 	sub.w	r2, r3, #115	; 0x73
 8001d94:	4253      	negs	r3, r2
 8001d96:	4153      	adcs	r3, r2
 8001d98:	81eb      	strh	r3, [r5, #14]
 8001d9a:	e534      	b.n	8001806 <d_type+0x116>
 8001d9c:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001da0:	4293      	cmp	r3, r2
 8001da2:	da34      	bge.n	8001e0e <d_type+0x71e>
 8001da4:	6900      	ldr	r0, [r0, #16]
 8001da6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001da8:	0119      	lsls	r1, r3, #4
 8001daa:	1845      	adds	r5, r0, r1
 8001dac:	3301      	adds	r3, #1
 8001dae:	2600      	movs	r6, #0
 8001db0:	606e      	str	r6, [r5, #4]
 8001db2:	3211      	adds	r2, #17
 8001db4:	6163      	str	r3, [r4, #20]
 8001db6:	2627      	movs	r6, #39	; 0x27
 8001db8:	4b0a      	ldr	r3, [pc, #40]	; (8001de4 <d_type+0x6f4>)
 8001dba:	5446      	strb	r6, [r0, r1]
 8001dbc:	60ab      	str	r3, [r5, #8]
 8001dbe:	6322      	str	r2, [r4, #48]	; 0x30
 8001dc0:	e521      	b.n	8001806 <d_type+0x116>
 8001dc2:	bf00      	nop
 8001dc4:	0803029c 	.word	0x0803029c
 8001dc8:	080304f4 	.word	0x080304f4
 8001dcc:	080304e0 	.word	0x080304e0
 8001dd0:	080304a4 	.word	0x080304a4
 8001dd4:	080304cc 	.word	0x080304cc
 8001dd8:	080304b8 	.word	0x080304b8
 8001ddc:	08034de8 	.word	0x08034de8
 8001de0:	08034de0 	.word	0x08034de0
 8001de4:	0803051c 	.word	0x0803051c
 8001de8:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001dec:	4293      	cmp	r3, r2
 8001dee:	da0e      	bge.n	8001e0e <d_type+0x71e>
 8001df0:	6900      	ldr	r0, [r0, #16]
 8001df2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001df4:	0119      	lsls	r1, r3, #4
 8001df6:	1845      	adds	r5, r0, r1
 8001df8:	3301      	adds	r3, #1
 8001dfa:	2600      	movs	r6, #0
 8001dfc:	606e      	str	r6, [r5, #4]
 8001dfe:	3208      	adds	r2, #8
 8001e00:	6163      	str	r3, [r4, #20]
 8001e02:	2627      	movs	r6, #39	; 0x27
 8001e04:	4b36      	ldr	r3, [pc, #216]	; (8001ee0 <d_type+0x7f0>)
 8001e06:	5446      	strb	r6, [r0, r1]
 8001e08:	60ab      	str	r3, [r5, #8]
 8001e0a:	6322      	str	r2, [r4, #48]	; 0x30
 8001e0c:	e4fb      	b.n	8001806 <d_type+0x116>
 8001e0e:	2300      	movs	r3, #0
 8001e10:	9301      	str	r3, [sp, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	deff      	udf	#255	; 0xff
 8001e16:	2600      	movs	r6, #0
 8001e18:	e6ce      	b.n	8001bb8 <d_type+0x4c8>
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	60e3      	str	r3, [r4, #12]
 8001e1e:	4620      	mov	r0, r4
 8001e20:	f7ff fa4e 	bl	80012c0 <d_template_args_1>
 8001e24:	462a      	mov	r2, r5
 8001e26:	4603      	mov	r3, r0
 8001e28:	2104      	movs	r1, #4
 8001e2a:	4620      	mov	r0, r4
 8001e2c:	f7fe f9e0 	bl	80001f0 <d_make_comp>
 8001e30:	9001      	str	r0, [sp, #4]
 8001e32:	e64a      	b.n	8001aca <d_type+0x3da>
 8001e34:	2301      	movs	r3, #1
 8001e36:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8001e38:	6363      	str	r3, [r4, #52]	; 0x34
 8001e3a:	4620      	mov	r0, r4
 8001e3c:	f7ff f82e 	bl	8000e9c <d_expression_1>
 8001e40:	6365      	str	r5, [r4, #52]	; 0x34
 8001e42:	4606      	mov	r6, r0
 8001e44:	2800      	cmp	r0, #0
 8001e46:	f43f ad04 	beq.w	8001852 <d_type+0x162>
 8001e4a:	68e5      	ldr	r5, [r4, #12]
 8001e4c:	782b      	ldrb	r3, [r5, #0]
 8001e4e:	e6b0      	b.n	8001bb2 <d_type+0x4c2>
 8001e50:	4620      	mov	r0, r4
 8001e52:	f7ff faa1 	bl	8001398 <d_name>
 8001e56:	4605      	mov	r5, r0
 8001e58:	9001      	str	r0, [sp, #4]
 8001e5a:	2800      	cmp	r0, #0
 8001e5c:	f43f acf9 	beq.w	8001852 <d_type+0x162>
 8001e60:	7803      	ldrb	r3, [r0, #0]
 8001e62:	2b18      	cmp	r3, #24
 8001e64:	f47f ad71 	bne.w	800194a <d_type+0x25a>
 8001e68:	e4cd      	b.n	8001806 <d_type+0x116>
 8001e6a:	1c73      	adds	r3, r6, #1
 8001e6c:	60e3      	str	r3, [r4, #12]
 8001e6e:	4620      	mov	r0, r4
 8001e70:	f8d4 9014 	ldr.w	r9, [r4, #20]
 8001e74:	f8d4 8020 	ldr.w	r8, [r4, #32]
 8001e78:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8001e7a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8001e7c:	f7ff fa20 	bl	80012c0 <d_template_args_1>
 8001e80:	68e2      	ldr	r2, [r4, #12]
 8001e82:	7812      	ldrb	r2, [r2, #0]
 8001e84:	2a49      	cmp	r2, #73	; 0x49
 8001e86:	4603      	mov	r3, r0
 8001e88:	d00b      	beq.n	8001ea2 <d_type+0x7b2>
 8001e8a:	6325      	str	r5, [r4, #48]	; 0x30
 8001e8c:	60e6      	str	r6, [r4, #12]
 8001e8e:	f8c4 9014 	str.w	r9, [r4, #20]
 8001e92:	f8c4 8020 	str.w	r8, [r4, #32]
 8001e96:	62a7      	str	r7, [r4, #40]	; 0x28
 8001e98:	9d01      	ldr	r5, [sp, #4]
 8001e9a:	e554      	b.n	8001946 <d_type+0x256>
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	701b      	strb	r3, [r3, #0]
 8001ea0:	deff      	udf	#255	; 0xff
 8001ea2:	9901      	ldr	r1, [sp, #4]
 8001ea4:	2900      	cmp	r1, #0
 8001ea6:	f43f acd4 	beq.w	8001852 <d_type+0x162>
 8001eaa:	e9d4 2008 	ldrd	r2, r0, [r4, #32]
 8001eae:	4282      	cmp	r2, r0
 8001eb0:	f6bf accf 	bge.w	8001852 <d_type+0x162>
 8001eb4:	69e0      	ldr	r0, [r4, #28]
 8001eb6:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
 8001eba:	3201      	adds	r2, #1
 8001ebc:	6222      	str	r2, [r4, #32]
 8001ebe:	9a01      	ldr	r2, [sp, #4]
 8001ec0:	e5c9      	b.n	8001a56 <d_type+0x366>
 8001ec2:	f104 000c 	add.w	r0, r4, #12
 8001ec6:	f7fe fa8d 	bl	80003e4 <d_number.isra.1>
 8001eca:	e74c      	b.n	8001d66 <d_type+0x676>
 8001ecc:	3203      	adds	r2, #3
 8001ece:	2301      	movs	r3, #1
 8001ed0:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8001ed2:	60c2      	str	r2, [r0, #12]
 8001ed4:	6343      	str	r3, [r0, #52]	; 0x34
 8001ed6:	f7fe ffe1 	bl	8000e9c <d_expression_1>
 8001eda:	6366      	str	r6, [r4, #52]	; 0x34
 8001edc:	4605      	mov	r5, r0
 8001ede:	e680      	b.n	8001be2 <d_type+0x4f2>
 8001ee0:	08030508 	.word	0x08030508

08001ee4 <d_operator_name>:
 8001ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ee6:	68c3      	ldr	r3, [r0, #12]
 8001ee8:	781e      	ldrb	r6, [r3, #0]
 8001eea:	4686      	mov	lr, r0
 8001eec:	b336      	cbz	r6, 8001f3c <d_operator_name+0x58>
 8001eee:	1c5a      	adds	r2, r3, #1
 8001ef0:	60c2      	str	r2, [r0, #12]
 8001ef2:	785a      	ldrb	r2, [r3, #1]
 8001ef4:	781e      	ldrb	r6, [r3, #0]
 8001ef6:	2a00      	cmp	r2, #0
 8001ef8:	d04a      	beq.n	8001f90 <d_operator_name+0xac>
 8001efa:	1c9a      	adds	r2, r3, #2
 8001efc:	60c2      	str	r2, [r0, #12]
 8001efe:	2e76      	cmp	r6, #118	; 0x76
 8001f00:	4604      	mov	r4, r0
 8001f02:	f893 c001 	ldrb.w	ip, [r3, #1]
 8001f06:	d145      	bne.n	8001f94 <d_operator_name+0xb0>
 8001f08:	f1ac 0530 	sub.w	r5, ip, #48	; 0x30
 8001f0c:	b2eb      	uxtb	r3, r5
 8001f0e:	2b09      	cmp	r3, #9
 8001f10:	d815      	bhi.n	8001f3e <d_operator_name+0x5a>
 8001f12:	f7fe fae7 	bl	80004e4 <d_source_name>
 8001f16:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8001f1a:	428b      	cmp	r3, r1
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	da21      	bge.n	8001f64 <d_operator_name+0x80>
 8001f20:	6926      	ldr	r6, [r4, #16]
 8001f22:	0119      	lsls	r1, r3, #4
 8001f24:	1870      	adds	r0, r6, r1
 8001f26:	3301      	adds	r3, #1
 8001f28:	2700      	movs	r7, #0
 8001f2a:	6047      	str	r7, [r0, #4]
 8001f2c:	6163      	str	r3, [r4, #20]
 8001f2e:	b1ca      	cbz	r2, 8001f64 <d_operator_name+0x80>
 8001f30:	2332      	movs	r3, #50	; 0x32
 8001f32:	6047      	str	r7, [r0, #4]
 8001f34:	5473      	strb	r3, [r6, r1]
 8001f36:	e9c0 5202 	strd	r5, r2, [r0, #8]
 8001f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f3c:	46b4      	mov	ip, r6
 8001f3e:	4c23      	ldr	r4, [pc, #140]	; (8001fcc <d_operator_name+0xe8>)
 8001f40:	2043      	movs	r0, #67	; 0x43
 8001f42:	2200      	movs	r2, #0
 8001f44:	1a83      	subs	r3, r0, r2
 8001f46:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8001f4a:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8001f4e:	0119      	lsls	r1, r3, #4
 8001f50:	1867      	adds	r7, r4, r1
 8001f52:	5861      	ldr	r1, [r4, r1]
 8001f54:	780d      	ldrb	r5, [r1, #0]
 8001f56:	42b5      	cmp	r5, r6
 8001f58:	d006      	beq.n	8001f68 <d_operator_name+0x84>
 8001f5a:	bf94      	ite	ls
 8001f5c:	1c5a      	addls	r2, r3, #1
 8001f5e:	4618      	movhi	r0, r3
 8001f60:	4282      	cmp	r2, r0
 8001f62:	d1ef      	bne.n	8001f44 <d_operator_name+0x60>
 8001f64:	2000      	movs	r0, #0
 8001f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f68:	7849      	ldrb	r1, [r1, #1]
 8001f6a:	4561      	cmp	r1, ip
 8001f6c:	d1f5      	bne.n	8001f5a <d_operator_name+0x76>
 8001f6e:	e9de 3205 	ldrd	r3, r2, [lr, #20]
 8001f72:	4293      	cmp	r3, r2
 8001f74:	daf6      	bge.n	8001f64 <d_operator_name+0x80>
 8001f76:	f8de 1010 	ldr.w	r1, [lr, #16]
 8001f7a:	011a      	lsls	r2, r3, #4
 8001f7c:	1888      	adds	r0, r1, r2
 8001f7e:	3301      	adds	r3, #1
 8001f80:	2500      	movs	r5, #0
 8001f82:	2431      	movs	r4, #49	; 0x31
 8001f84:	6045      	str	r5, [r0, #4]
 8001f86:	f8ce 3014 	str.w	r3, [lr, #20]
 8001f8a:	548c      	strb	r4, [r1, r2]
 8001f8c:	6087      	str	r7, [r0, #8]
 8001f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f90:	4694      	mov	ip, r2
 8001f92:	e7d4      	b.n	8001f3e <d_operator_name+0x5a>
 8001f94:	2e63      	cmp	r6, #99	; 0x63
 8001f96:	d1d2      	bne.n	8001f3e <d_operator_name+0x5a>
 8001f98:	f1bc 0f76 	cmp.w	ip, #118	; 0x76
 8001f9c:	d1cf      	bne.n	8001f3e <d_operator_name+0x5a>
 8001f9e:	e9d0 350d 	ldrd	r3, r5, [r0, #52]	; 0x34
 8001fa2:	fab3 f383 	clz	r3, r3
 8001fa6:	095b      	lsrs	r3, r3, #5
 8001fa8:	6383      	str	r3, [r0, #56]	; 0x38
 8001faa:	f7ff fba1 	bl	80016f0 <d_type>
 8001fae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	b92b      	cbnz	r3, 8001fc0 <d_operator_name+0xdc>
 8001fb4:	2133      	movs	r1, #51	; 0x33
 8001fb6:	4620      	mov	r0, r4
 8001fb8:	f7fe f91a 	bl	80001f0 <d_make_comp>
 8001fbc:	63a5      	str	r5, [r4, #56]	; 0x38
 8001fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	2134      	movs	r1, #52	; 0x34
 8001fc4:	4620      	mov	r0, r4
 8001fc6:	f7fe f913 	bl	80001f0 <d_make_comp>
 8001fca:	e7f7      	b.n	8001fbc <d_operator_name+0xd8>
 8001fcc:	08030530 	.word	0x08030530

08001fd0 <d_parmlist>:
 8001fd0:	b530      	push	{r4, r5, lr}
 8001fd2:	68c2      	ldr	r2, [r0, #12]
 8001fd4:	b083      	sub	sp, #12
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	9301      	str	r3, [sp, #4]
 8001fda:	7813      	ldrb	r3, [r2, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d036      	beq.n	800204e <d_parmlist+0x7e>
 8001fe0:	2b45      	cmp	r3, #69	; 0x45
 8001fe2:	d034      	beq.n	800204e <d_parmlist+0x7e>
 8001fe4:	2b2e      	cmp	r3, #46	; 0x2e
 8001fe6:	d032      	beq.n	800204e <d_parmlist+0x7e>
 8001fe8:	4604      	mov	r4, r0
 8001fea:	ad01      	add	r5, sp, #4
 8001fec:	e015      	b.n	800201a <d_parmlist+0x4a>
 8001fee:	2b4f      	cmp	r3, #79	; 0x4f
 8001ff0:	d016      	beq.n	8002020 <d_parmlist+0x50>
 8001ff2:	f7ff fb7d 	bl	80016f0 <d_type>
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	212e      	movs	r1, #46	; 0x2e
 8001ffc:	b338      	cbz	r0, 800204e <d_parmlist+0x7e>
 8001ffe:	4620      	mov	r0, r4
 8002000:	f7fe f8f6 	bl	80001f0 <d_make_comp>
 8002004:	6028      	str	r0, [r5, #0]
 8002006:	b310      	cbz	r0, 800204e <d_parmlist+0x7e>
 8002008:	68e2      	ldr	r2, [r4, #12]
 800200a:	7813      	ldrb	r3, [r2, #0]
 800200c:	f100 050c 	add.w	r5, r0, #12
 8002010:	b14b      	cbz	r3, 8002026 <d_parmlist+0x56>
 8002012:	2b45      	cmp	r3, #69	; 0x45
 8002014:	d007      	beq.n	8002026 <d_parmlist+0x56>
 8002016:	2b2e      	cmp	r3, #46	; 0x2e
 8002018:	d005      	beq.n	8002026 <d_parmlist+0x56>
 800201a:	2b52      	cmp	r3, #82	; 0x52
 800201c:	4620      	mov	r0, r4
 800201e:	d1e6      	bne.n	8001fee <d_parmlist+0x1e>
 8002020:	7853      	ldrb	r3, [r2, #1]
 8002022:	2b45      	cmp	r3, #69	; 0x45
 8002024:	d1e5      	bne.n	8001ff2 <d_parmlist+0x22>
 8002026:	9801      	ldr	r0, [sp, #4]
 8002028:	b188      	cbz	r0, 800204e <d_parmlist+0x7e>
 800202a:	68c3      	ldr	r3, [r0, #12]
 800202c:	b10b      	cbz	r3, 8002032 <d_parmlist+0x62>
 800202e:	b003      	add	sp, #12
 8002030:	bd30      	pop	{r4, r5, pc}
 8002032:	6882      	ldr	r2, [r0, #8]
 8002034:	7811      	ldrb	r1, [r2, #0]
 8002036:	2927      	cmp	r1, #39	; 0x27
 8002038:	d1f9      	bne.n	800202e <d_parmlist+0x5e>
 800203a:	6892      	ldr	r2, [r2, #8]
 800203c:	7c11      	ldrb	r1, [r2, #16]
 800203e:	2909      	cmp	r1, #9
 8002040:	d1f5      	bne.n	800202e <d_parmlist+0x5e>
 8002042:	6851      	ldr	r1, [r2, #4]
 8002044:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002046:	1a52      	subs	r2, r2, r1
 8002048:	6322      	str	r2, [r4, #48]	; 0x30
 800204a:	6083      	str	r3, [r0, #8]
 800204c:	e7ef      	b.n	800202e <d_parmlist+0x5e>
 800204e:	2000      	movs	r0, #0
 8002050:	b003      	add	sp, #12
 8002052:	bd30      	pop	{r4, r5, pc}

08002054 <d_cv_qualifiers>:
 8002054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002058:	4689      	mov	r9, r1
 800205a:	b083      	sub	sp, #12
 800205c:	68c1      	ldr	r1, [r0, #12]
 800205e:	1e13      	subs	r3, r2, #0
 8002060:	9301      	str	r3, [sp, #4]
 8002062:	4604      	mov	r4, r0
 8002064:	780b      	ldrb	r3, [r1, #0]
 8002066:	bf15      	itete	ne
 8002068:	f04f 081e 	movne.w	r8, #30
 800206c:	f04f 081b 	moveq.w	r8, #27
 8002070:	271d      	movne	r7, #29
 8002072:	271a      	moveq	r7, #26
 8002074:	bf14      	ite	ne
 8002076:	261c      	movne	r6, #28
 8002078:	2619      	moveq	r6, #25
 800207a:	464d      	mov	r5, r9
 800207c:	f04f 0a01 	mov.w	sl, #1
 8002080:	e01c      	b.n	80020bc <d_cv_qualifiers+0x68>
 8002082:	2b56      	cmp	r3, #86	; 0x56
 8002084:	d03f      	beq.n	8002106 <d_cv_qualifiers+0xb2>
 8002086:	2b4b      	cmp	r3, #75	; 0x4b
 8002088:	d043      	beq.n	8002112 <d_cv_qualifiers+0xbe>
 800208a:	784b      	ldrb	r3, [r1, #1]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d035      	beq.n	80020fc <d_cv_qualifiers+0xa8>
 8002090:	1c8b      	adds	r3, r1, #2
 8002092:	60e3      	str	r3, [r4, #12]
 8002094:	784b      	ldrb	r3, [r1, #1]
 8002096:	2b78      	cmp	r3, #120	; 0x78
 8002098:	d041      	beq.n	800211e <d_cv_qualifiers+0xca>
 800209a:	2b6f      	cmp	r3, #111	; 0x6f
 800209c:	d145      	bne.n	800212a <d_cv_qualifiers+0xd6>
 800209e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80020a0:	3309      	adds	r3, #9
 80020a2:	6323      	str	r3, [r4, #48]	; 0x30
 80020a4:	214e      	movs	r1, #78	; 0x4e
 80020a6:	2300      	movs	r3, #0
 80020a8:	2200      	movs	r2, #0
 80020aa:	4620      	mov	r0, r4
 80020ac:	f7fe f8a0 	bl	80001f0 <d_make_comp>
 80020b0:	6028      	str	r0, [r5, #0]
 80020b2:	b318      	cbz	r0, 80020fc <d_cv_qualifiers+0xa8>
 80020b4:	68e1      	ldr	r1, [r4, #12]
 80020b6:	780b      	ldrb	r3, [r1, #0]
 80020b8:	f100 0508 	add.w	r5, r0, #8
 80020bc:	2b72      	cmp	r3, #114	; 0x72
 80020be:	d00d      	beq.n	80020dc <d_cv_qualifiers+0x88>
 80020c0:	2b56      	cmp	r3, #86	; 0x56
 80020c2:	d00b      	beq.n	80020dc <d_cv_qualifiers+0x88>
 80020c4:	2b4b      	cmp	r3, #75	; 0x4b
 80020c6:	d009      	beq.n	80020dc <d_cv_qualifiers+0x88>
 80020c8:	2b44      	cmp	r3, #68	; 0x44
 80020ca:	d146      	bne.n	800215a <d_cv_qualifiers+0x106>
 80020cc:	784a      	ldrb	r2, [r1, #1]
 80020ce:	f002 00df 	and.w	r0, r2, #223	; 0xdf
 80020d2:	284f      	cmp	r0, #79	; 0x4f
 80020d4:	d002      	beq.n	80020dc <d_cv_qualifiers+0x88>
 80020d6:	3a77      	subs	r2, #119	; 0x77
 80020d8:	2a01      	cmp	r2, #1
 80020da:	d83e      	bhi.n	800215a <d_cv_qualifiers+0x106>
 80020dc:	1c4a      	adds	r2, r1, #1
 80020de:	2b72      	cmp	r3, #114	; 0x72
 80020e0:	60e2      	str	r2, [r4, #12]
 80020e2:	d1ce      	bne.n	8002082 <d_cv_qualifiers+0x2e>
 80020e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80020e6:	3309      	adds	r3, #9
 80020e8:	6323      	str	r3, [r4, #48]	; 0x30
 80020ea:	4631      	mov	r1, r6
 80020ec:	2300      	movs	r3, #0
 80020ee:	2200      	movs	r2, #0
 80020f0:	4620      	mov	r0, r4
 80020f2:	f7fe f87d 	bl	80001f0 <d_make_comp>
 80020f6:	6028      	str	r0, [r5, #0]
 80020f8:	2800      	cmp	r0, #0
 80020fa:	d1db      	bne.n	80020b4 <d_cv_qualifiers+0x60>
 80020fc:	2500      	movs	r5, #0
 80020fe:	4628      	mov	r0, r5
 8002100:	b003      	add	sp, #12
 8002102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002106:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002108:	3309      	adds	r3, #9
 800210a:	6323      	str	r3, [r4, #48]	; 0x30
 800210c:	4639      	mov	r1, r7
 800210e:	2300      	movs	r3, #0
 8002110:	e7ca      	b.n	80020a8 <d_cv_qualifiers+0x54>
 8002112:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002114:	3306      	adds	r3, #6
 8002116:	6323      	str	r3, [r4, #48]	; 0x30
 8002118:	4641      	mov	r1, r8
 800211a:	2300      	movs	r3, #0
 800211c:	e7c4      	b.n	80020a8 <d_cv_qualifiers+0x54>
 800211e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002120:	3311      	adds	r3, #17
 8002122:	6323      	str	r3, [r4, #48]	; 0x30
 8002124:	214c      	movs	r1, #76	; 0x4c
 8002126:	2300      	movs	r3, #0
 8002128:	e7be      	b.n	80020a8 <d_cv_qualifiers+0x54>
 800212a:	2b4f      	cmp	r3, #79	; 0x4f
 800212c:	d132      	bne.n	8002194 <d_cv_qualifiers+0x140>
 800212e:	e9d4 3b0c 	ldrd	r3, fp, [r4, #48]	; 0x30
 8002132:	3309      	adds	r3, #9
 8002134:	6323      	str	r3, [r4, #48]	; 0x30
 8002136:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
 800213a:	4620      	mov	r0, r4
 800213c:	f7fe feae 	bl	8000e9c <d_expression_1>
 8002140:	f8c4 b034 	str.w	fp, [r4, #52]	; 0x34
 8002144:	4603      	mov	r3, r0
 8002146:	2800      	cmp	r0, #0
 8002148:	d0d8      	beq.n	80020fc <d_cv_qualifiers+0xa8>
 800214a:	68e2      	ldr	r2, [r4, #12]
 800214c:	7811      	ldrb	r1, [r2, #0]
 800214e:	2945      	cmp	r1, #69	; 0x45
 8002150:	d1d4      	bne.n	80020fc <d_cv_qualifiers+0xa8>
 8002152:	3201      	adds	r2, #1
 8002154:	60e2      	str	r2, [r4, #12]
 8002156:	214e      	movs	r1, #78	; 0x4e
 8002158:	e7a6      	b.n	80020a8 <d_cv_qualifiers+0x54>
 800215a:	9a01      	ldr	r2, [sp, #4]
 800215c:	2a00      	cmp	r2, #0
 800215e:	d1ce      	bne.n	80020fe <d_cv_qualifiers+0xaa>
 8002160:	2b46      	cmp	r3, #70	; 0x46
 8002162:	d1cc      	bne.n	80020fe <d_cv_qualifiers+0xaa>
 8002164:	454d      	cmp	r5, r9
 8002166:	d0ca      	beq.n	80020fe <d_cv_qualifiers+0xaa>
 8002168:	241d      	movs	r4, #29
 800216a:	201e      	movs	r0, #30
 800216c:	211c      	movs	r1, #28
 800216e:	e008      	b.n	8002182 <d_cv_qualifiers+0x12e>
 8002170:	2a1b      	cmp	r2, #27
 8002172:	d00d      	beq.n	8002190 <d_cv_qualifiers+0x13c>
 8002174:	2a19      	cmp	r2, #25
 8002176:	d100      	bne.n	800217a <d_cv_qualifiers+0x126>
 8002178:	7019      	strb	r1, [r3, #0]
 800217a:	f103 0908 	add.w	r9, r3, #8
 800217e:	454d      	cmp	r5, r9
 8002180:	d0bd      	beq.n	80020fe <d_cv_qualifiers+0xaa>
 8002182:	f8d9 3000 	ldr.w	r3, [r9]
 8002186:	781a      	ldrb	r2, [r3, #0]
 8002188:	2a1a      	cmp	r2, #26
 800218a:	d1f1      	bne.n	8002170 <d_cv_qualifiers+0x11c>
 800218c:	701c      	strb	r4, [r3, #0]
 800218e:	e7f4      	b.n	800217a <d_cv_qualifiers+0x126>
 8002190:	7018      	strb	r0, [r3, #0]
 8002192:	e7f2      	b.n	800217a <d_cv_qualifiers+0x126>
 8002194:	2b77      	cmp	r3, #119	; 0x77
 8002196:	d1b1      	bne.n	80020fc <d_cv_qualifiers+0xa8>
 8002198:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800219a:	3306      	adds	r3, #6
 800219c:	6323      	str	r3, [r4, #48]	; 0x30
 800219e:	4620      	mov	r0, r4
 80021a0:	f7ff ff16 	bl	8001fd0 <d_parmlist>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2800      	cmp	r0, #0
 80021a8:	d0a8      	beq.n	80020fc <d_cv_qualifiers+0xa8>
 80021aa:	68e2      	ldr	r2, [r4, #12]
 80021ac:	7811      	ldrb	r1, [r2, #0]
 80021ae:	2945      	cmp	r1, #69	; 0x45
 80021b0:	d1a4      	bne.n	80020fc <d_cv_qualifiers+0xa8>
 80021b2:	3201      	adds	r2, #1
 80021b4:	60e2      	str	r2, [r4, #12]
 80021b6:	214f      	movs	r1, #79	; 0x4f
 80021b8:	e776      	b.n	80020a8 <d_cv_qualifiers+0x54>
 80021ba:	bf00      	nop

080021bc <d_bare_function_type>:
 80021bc:	b570      	push	{r4, r5, r6, lr}
 80021be:	68c3      	ldr	r3, [r0, #12]
 80021c0:	781a      	ldrb	r2, [r3, #0]
 80021c2:	2a4a      	cmp	r2, #74	; 0x4a
 80021c4:	4604      	mov	r4, r0
 80021c6:	d013      	beq.n	80021f0 <d_bare_function_type+0x34>
 80021c8:	b181      	cbz	r1, 80021ec <d_bare_function_type+0x30>
 80021ca:	4620      	mov	r0, r4
 80021cc:	f7ff fa90 	bl	80016f0 <d_type>
 80021d0:	4605      	mov	r5, r0
 80021d2:	b180      	cbz	r0, 80021f6 <d_bare_function_type+0x3a>
 80021d4:	4620      	mov	r0, r4
 80021d6:	f7ff fefb 	bl	8001fd0 <d_parmlist>
 80021da:	b160      	cbz	r0, 80021f6 <d_bare_function_type+0x3a>
 80021dc:	4603      	mov	r3, r0
 80021de:	462a      	mov	r2, r5
 80021e0:	4620      	mov	r0, r4
 80021e2:	2129      	movs	r1, #41	; 0x29
 80021e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80021e8:	f7fe b802 	b.w	80001f0 <d_make_comp>
 80021ec:	460d      	mov	r5, r1
 80021ee:	e7f1      	b.n	80021d4 <d_bare_function_type+0x18>
 80021f0:	3301      	adds	r3, #1
 80021f2:	60c3      	str	r3, [r0, #12]
 80021f4:	e7e9      	b.n	80021ca <d_bare_function_type+0xe>
 80021f6:	2000      	movs	r0, #0
 80021f8:	bd70      	pop	{r4, r5, r6, pc}
 80021fa:	bf00      	nop

080021fc <d_function_type>:
 80021fc:	68c3      	ldr	r3, [r0, #12]
 80021fe:	781a      	ldrb	r2, [r3, #0]
 8002200:	2a46      	cmp	r2, #70	; 0x46
 8002202:	d118      	bne.n	8002236 <d_function_type+0x3a>
 8002204:	b510      	push	{r4, lr}
 8002206:	1c5a      	adds	r2, r3, #1
 8002208:	60c2      	str	r2, [r0, #12]
 800220a:	785a      	ldrb	r2, [r3, #1]
 800220c:	2a59      	cmp	r2, #89	; 0x59
 800220e:	bf04      	itt	eq
 8002210:	3302      	addeq	r3, #2
 8002212:	60c3      	streq	r3, [r0, #12]
 8002214:	2101      	movs	r1, #1
 8002216:	4604      	mov	r4, r0
 8002218:	f7ff ffd0 	bl	80021bc <d_bare_function_type>
 800221c:	4601      	mov	r1, r0
 800221e:	4620      	mov	r0, r4
 8002220:	f7fe f82e 	bl	8000280 <d_ref_qualifier>
 8002224:	68e3      	ldr	r3, [r4, #12]
 8002226:	781a      	ldrb	r2, [r3, #0]
 8002228:	2a45      	cmp	r2, #69	; 0x45
 800222a:	d102      	bne.n	8002232 <d_function_type+0x36>
 800222c:	3301      	adds	r3, #1
 800222e:	60e3      	str	r3, [r4, #12]
 8002230:	bd10      	pop	{r4, pc}
 8002232:	2000      	movs	r0, #0
 8002234:	bd10      	pop	{r4, pc}
 8002236:	2000      	movs	r0, #0
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop

0800223c <d_unqualified_name>:
 800223c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002240:	68c1      	ldr	r1, [r0, #12]
 8002242:	780b      	ldrb	r3, [r1, #0]
 8002244:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002248:	2a09      	cmp	r2, #9
 800224a:	4604      	mov	r4, r0
 800224c:	d93c      	bls.n	80022c8 <d_unqualified_name+0x8c>
 800224e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8002252:	2a19      	cmp	r2, #25
 8002254:	d922      	bls.n	800229c <d_unqualified_name+0x60>
 8002256:	f1a3 0243 	sub.w	r2, r3, #67	; 0x43
 800225a:	2a01      	cmp	r2, #1
 800225c:	d969      	bls.n	8002332 <d_unqualified_name+0xf6>
 800225e:	2b4c      	cmp	r3, #76	; 0x4c
 8002260:	d056      	beq.n	8002310 <d_unqualified_name+0xd4>
 8002262:	2b55      	cmp	r3, #85	; 0x55
 8002264:	d15f      	bne.n	8002326 <d_unqualified_name+0xea>
 8002266:	784b      	ldrb	r3, [r1, #1]
 8002268:	2b6c      	cmp	r3, #108	; 0x6c
 800226a:	f000 80e5 	beq.w	8002438 <d_unqualified_name+0x1fc>
 800226e:	2b74      	cmp	r3, #116	; 0x74
 8002270:	d159      	bne.n	8002326 <d_unqualified_name+0xea>
 8002272:	1c4b      	adds	r3, r1, #1
 8002274:	60c3      	str	r3, [r0, #12]
 8002276:	784b      	ldrb	r3, [r1, #1]
 8002278:	2b74      	cmp	r3, #116	; 0x74
 800227a:	d158      	bne.n	800232e <d_unqualified_name+0xf2>
 800227c:	3102      	adds	r1, #2
 800227e:	60c1      	str	r1, [r0, #12]
 8002280:	f7fe f8f4 	bl	800046c <d_compact_number>
 8002284:	2800      	cmp	r0, #0
 8002286:	f2c0 8155 	blt.w	8002534 <d_unqualified_name+0x2f8>
 800228a:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 800228e:	4293      	cmp	r3, r2
 8002290:	68e7      	ldr	r7, [r4, #12]
 8002292:	f2c0 80f3 	blt.w	800247c <d_unqualified_name+0x240>
 8002296:	783b      	ldrb	r3, [r7, #0]
 8002298:	2500      	movs	r5, #0
 800229a:	e010      	b.n	80022be <d_unqualified_name+0x82>
 800229c:	2b6f      	cmp	r3, #111	; 0x6f
 800229e:	d104      	bne.n	80022aa <d_unqualified_name+0x6e>
 80022a0:	784b      	ldrb	r3, [r1, #1]
 80022a2:	2b6e      	cmp	r3, #110	; 0x6e
 80022a4:	bf04      	itt	eq
 80022a6:	3102      	addeq	r1, #2
 80022a8:	60c1      	streq	r1, [r0, #12]
 80022aa:	4620      	mov	r0, r4
 80022ac:	f7ff fe1a 	bl	8001ee4 <d_operator_name>
 80022b0:	4605      	mov	r5, r0
 80022b2:	b110      	cbz	r0, 80022ba <d_unqualified_name+0x7e>
 80022b4:	7803      	ldrb	r3, [r0, #0]
 80022b6:	2b31      	cmp	r3, #49	; 0x31
 80022b8:	d013      	beq.n	80022e2 <d_unqualified_name+0xa6>
 80022ba:	68e3      	ldr	r3, [r4, #12]
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b42      	cmp	r3, #66	; 0x42
 80022c0:	d009      	beq.n	80022d6 <d_unqualified_name+0x9a>
 80022c2:	4628      	mov	r0, r5
 80022c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022c8:	f7fe f90c 	bl	80004e4 <d_source_name>
 80022cc:	68e3      	ldr	r3, [r4, #12]
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b42      	cmp	r3, #66	; 0x42
 80022d2:	4605      	mov	r5, r0
 80022d4:	d1f5      	bne.n	80022c2 <d_unqualified_name+0x86>
 80022d6:	4629      	mov	r1, r5
 80022d8:	4620      	mov	r0, r4
 80022da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80022de:	f7fe b95b 	b.w	8000598 <d_abi_tags>
 80022e2:	6882      	ldr	r2, [r0, #8]
 80022e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80022e6:	6896      	ldr	r6, [r2, #8]
 80022e8:	6810      	ldr	r0, [r2, #0]
 80022ea:	49a1      	ldr	r1, [pc, #644]	; (8002570 <d_unqualified_name+0x334>)
 80022ec:	3307      	adds	r3, #7
 80022ee:	4433      	add	r3, r6
 80022f0:	6323      	str	r3, [r4, #48]	; 0x30
 80022f2:	f004 fceb 	bl	8006ccc <strcmp>
 80022f6:	2800      	cmp	r0, #0
 80022f8:	d1df      	bne.n	80022ba <d_unqualified_name+0x7e>
 80022fa:	4620      	mov	r0, r4
 80022fc:	f7fe f8f2 	bl	80004e4 <d_source_name>
 8002300:	462a      	mov	r2, r5
 8002302:	4603      	mov	r3, r0
 8002304:	2136      	movs	r1, #54	; 0x36
 8002306:	4620      	mov	r0, r4
 8002308:	f7fd ff72 	bl	80001f0 <d_make_comp>
 800230c:	4605      	mov	r5, r0
 800230e:	e7d4      	b.n	80022ba <d_unqualified_name+0x7e>
 8002310:	3101      	adds	r1, #1
 8002312:	60c1      	str	r1, [r0, #12]
 8002314:	f7fe f8e6 	bl	80004e4 <d_source_name>
 8002318:	4605      	mov	r5, r0
 800231a:	b120      	cbz	r0, 8002326 <d_unqualified_name+0xea>
 800231c:	4620      	mov	r0, r4
 800231e:	f7fe fa0f 	bl	8000740 <d_discriminator>
 8002322:	2800      	cmp	r0, #0
 8002324:	d1c9      	bne.n	80022ba <d_unqualified_name+0x7e>
 8002326:	2500      	movs	r5, #0
 8002328:	4628      	mov	r0, r5
 800232a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800232e:	2500      	movs	r5, #0
 8002330:	e7c5      	b.n	80022be <d_unqualified_name+0x82>
 8002332:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002334:	b132      	cbz	r2, 8002344 <d_unqualified_name+0x108>
 8002336:	7810      	ldrb	r0, [r2, #0]
 8002338:	b9e0      	cbnz	r0, 8002374 <d_unqualified_name+0x138>
 800233a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800233c:	68d0      	ldr	r0, [r2, #12]
 800233e:	4403      	add	r3, r0
 8002340:	6323      	str	r3, [r4, #48]	; 0x30
 8002342:	780b      	ldrb	r3, [r1, #0]
 8002344:	2b43      	cmp	r3, #67	; 0x43
 8002346:	d018      	beq.n	800237a <d_unqualified_name+0x13e>
 8002348:	2b44      	cmp	r3, #68	; 0x44
 800234a:	d1f0      	bne.n	800232e <d_unqualified_name+0xf2>
 800234c:	784b      	ldrb	r3, [r1, #1]
 800234e:	3b30      	subs	r3, #48	; 0x30
 8002350:	2b05      	cmp	r3, #5
 8002352:	d8e8      	bhi.n	8002326 <d_unqualified_name+0xea>
 8002354:	a001      	add	r0, pc, #4	; (adr r0, 800235c <d_unqualified_name+0x120>)
 8002356:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800235a:	bf00      	nop
 800235c:	080023cd 	.word	0x080023cd
 8002360:	08002397 	.word	0x08002397
 8002364:	080023df 	.word	0x080023df
 8002368:	08002327 	.word	0x08002327
 800236c:	080023d9 	.word	0x080023d9
 8002370:	080023d3 	.word	0x080023d3
 8002374:	2818      	cmp	r0, #24
 8002376:	d1e5      	bne.n	8002344 <d_unqualified_name+0x108>
 8002378:	e7df      	b.n	800233a <d_unqualified_name+0xfe>
 800237a:	784b      	ldrb	r3, [r1, #1]
 800237c:	2b49      	cmp	r3, #73	; 0x49
 800237e:	f000 80b0 	beq.w	80024e2 <d_unqualified_name+0x2a6>
 8002382:	3b31      	subs	r3, #49	; 0x31
 8002384:	2b04      	cmp	r3, #4
 8002386:	d8ce      	bhi.n	8002326 <d_unqualified_name+0xea>
 8002388:	e8df f013 	tbh	[pc, r3, lsl #1]
 800238c:	005100ed 	.word	0x005100ed
 8002390:	0047004c 	.word	0x0047004c
 8002394:	002c      	.short	0x002c
 8002396:	f04f 0c02 	mov.w	ip, #2
 800239a:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 800239e:	1c8d      	adds	r5, r1, #2
 80023a0:	4283      	cmp	r3, r0
 80023a2:	60e5      	str	r5, [r4, #12]
 80023a4:	f280 80d0 	bge.w	8002548 <d_unqualified_name+0x30c>
 80023a8:	6926      	ldr	r6, [r4, #16]
 80023aa:	0118      	lsls	r0, r3, #4
 80023ac:	1835      	adds	r5, r6, r0
 80023ae:	3301      	adds	r3, #1
 80023b0:	2700      	movs	r7, #0
 80023b2:	606f      	str	r7, [r5, #4]
 80023b4:	6163      	str	r3, [r4, #20]
 80023b6:	2a00      	cmp	r2, #0
 80023b8:	f000 80cf 	beq.w	800255a <d_unqualified_name+0x31e>
 80023bc:	2308      	movs	r3, #8
 80023be:	606f      	str	r7, [r5, #4]
 80023c0:	5433      	strb	r3, [r6, r0]
 80023c2:	f885 c008 	strb.w	ip, [r5, #8]
 80023c6:	60ea      	str	r2, [r5, #12]
 80023c8:	788b      	ldrb	r3, [r1, #2]
 80023ca:	e778      	b.n	80022be <d_unqualified_name+0x82>
 80023cc:	f04f 0c01 	mov.w	ip, #1
 80023d0:	e7e3      	b.n	800239a <d_unqualified_name+0x15e>
 80023d2:	f04f 0c05 	mov.w	ip, #5
 80023d6:	e7e0      	b.n	800239a <d_unqualified_name+0x15e>
 80023d8:	f04f 0c04 	mov.w	ip, #4
 80023dc:	e7dd      	b.n	800239a <d_unqualified_name+0x15e>
 80023de:	f04f 0c03 	mov.w	ip, #3
 80023e2:	e7da      	b.n	800239a <d_unqualified_name+0x15e>
 80023e4:	3102      	adds	r1, #2
 80023e6:	60e1      	str	r1, [r4, #12]
 80023e8:	f04f 0805 	mov.w	r8, #5
 80023ec:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80023f0:	4283      	cmp	r3, r0
 80023f2:	f280 80ac 	bge.w	800254e <d_unqualified_name+0x312>
 80023f6:	6926      	ldr	r6, [r4, #16]
 80023f8:	0118      	lsls	r0, r3, #4
 80023fa:	1835      	adds	r5, r6, r0
 80023fc:	3301      	adds	r3, #1
 80023fe:	2700      	movs	r7, #0
 8002400:	606f      	str	r7, [r5, #4]
 8002402:	6163      	str	r3, [r4, #20]
 8002404:	2a00      	cmp	r2, #0
 8002406:	f000 80ab 	beq.w	8002560 <d_unqualified_name+0x324>
 800240a:	2307      	movs	r3, #7
 800240c:	606f      	str	r7, [r5, #4]
 800240e:	5433      	strb	r3, [r6, r0]
 8002410:	f885 8008 	strb.w	r8, [r5, #8]
 8002414:	60ea      	str	r2, [r5, #12]
 8002416:	780b      	ldrb	r3, [r1, #0]
 8002418:	e751      	b.n	80022be <d_unqualified_name+0x82>
 800241a:	3102      	adds	r1, #2
 800241c:	60e1      	str	r1, [r4, #12]
 800241e:	f04f 0804 	mov.w	r8, #4
 8002422:	e7e3      	b.n	80023ec <d_unqualified_name+0x1b0>
 8002424:	3102      	adds	r1, #2
 8002426:	60e1      	str	r1, [r4, #12]
 8002428:	f04f 0803 	mov.w	r8, #3
 800242c:	e7de      	b.n	80023ec <d_unqualified_name+0x1b0>
 800242e:	3102      	adds	r1, #2
 8002430:	60e1      	str	r1, [r4, #12]
 8002432:	f04f 0802 	mov.w	r8, #2
 8002436:	e7d9      	b.n	80023ec <d_unqualified_name+0x1b0>
 8002438:	1c4b      	adds	r3, r1, #1
 800243a:	60c3      	str	r3, [r0, #12]
 800243c:	784b      	ldrb	r3, [r1, #1]
 800243e:	2b6c      	cmp	r3, #108	; 0x6c
 8002440:	f47f af75 	bne.w	800232e <d_unqualified_name+0xf2>
 8002444:	3102      	adds	r1, #2
 8002446:	60c1      	str	r1, [r0, #12]
 8002448:	f7ff fdc2 	bl	8001fd0 <d_parmlist>
 800244c:	4606      	mov	r6, r0
 800244e:	2800      	cmp	r0, #0
 8002450:	d070      	beq.n	8002534 <d_unqualified_name+0x2f8>
 8002452:	68e2      	ldr	r2, [r4, #12]
 8002454:	7813      	ldrb	r3, [r2, #0]
 8002456:	2b45      	cmp	r3, #69	; 0x45
 8002458:	f47f af69 	bne.w	800232e <d_unqualified_name+0xf2>
 800245c:	3201      	adds	r2, #1
 800245e:	60e2      	str	r2, [r4, #12]
 8002460:	4620      	mov	r0, r4
 8002462:	f7fe f803 	bl	800046c <d_compact_number>
 8002466:	f1b0 0e00 	subs.w	lr, r0, #0
 800246a:	db63      	blt.n	8002534 <d_unqualified_name+0x2f8>
 800246c:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8002470:	4293      	cmp	r3, r2
 8002472:	68e0      	ldr	r0, [r4, #12]
 8002474:	db1b      	blt.n	80024ae <d_unqualified_name+0x272>
 8002476:	7803      	ldrb	r3, [r0, #0]
 8002478:	2500      	movs	r5, #0
 800247a:	e720      	b.n	80022be <d_unqualified_name+0x82>
 800247c:	6926      	ldr	r6, [r4, #16]
 800247e:	6a22      	ldr	r2, [r4, #32]
 8002480:	f8d4 e024 	ldr.w	lr, [r4, #36]	; 0x24
 8002484:	0119      	lsls	r1, r3, #4
 8002486:	1875      	adds	r5, r6, r1
 8002488:	3301      	adds	r3, #1
 800248a:	f04f 0c00 	mov.w	ip, #0
 800248e:	f8c5 c004 	str.w	ip, [r5, #4]
 8002492:	4572      	cmp	r2, lr
 8002494:	6163      	str	r3, [r4, #20]
 8002496:	f04f 0347 	mov.w	r3, #71	; 0x47
 800249a:	5473      	strb	r3, [r6, r1]
 800249c:	60a8      	str	r0, [r5, #8]
 800249e:	da4d      	bge.n	800253c <d_unqualified_name+0x300>
 80024a0:	69e3      	ldr	r3, [r4, #28]
 80024a2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80024a6:	3201      	adds	r2, #1
 80024a8:	6222      	str	r2, [r4, #32]
 80024aa:	783b      	ldrb	r3, [r7, #0]
 80024ac:	e707      	b.n	80022be <d_unqualified_name+0x82>
 80024ae:	6927      	ldr	r7, [r4, #16]
 80024b0:	6a22      	ldr	r2, [r4, #32]
 80024b2:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 80024b6:	0119      	lsls	r1, r3, #4
 80024b8:	187d      	adds	r5, r7, r1
 80024ba:	3301      	adds	r3, #1
 80024bc:	f04f 0c00 	mov.w	ip, #0
 80024c0:	f8c5 c004 	str.w	ip, [r5, #4]
 80024c4:	4542      	cmp	r2, r8
 80024c6:	6163      	str	r3, [r4, #20]
 80024c8:	f04f 0345 	mov.w	r3, #69	; 0x45
 80024cc:	547b      	strb	r3, [r7, r1]
 80024ce:	e9c5 6e02 	strd	r6, lr, [r5, #8]
 80024d2:	da36      	bge.n	8002542 <d_unqualified_name+0x306>
 80024d4:	69e3      	ldr	r3, [r4, #28]
 80024d6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80024da:	3201      	adds	r2, #1
 80024dc:	6222      	str	r2, [r4, #32]
 80024de:	7803      	ldrb	r3, [r0, #0]
 80024e0:	e6ed      	b.n	80022be <d_unqualified_name+0x82>
 80024e2:	1c4b      	adds	r3, r1, #1
 80024e4:	60e3      	str	r3, [r4, #12]
 80024e6:	788b      	ldrb	r3, [r1, #2]
 80024e8:	3b31      	subs	r3, #49	; 0x31
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d832      	bhi.n	8002554 <d_unqualified_name+0x318>
 80024ee:	e8df f003 	tbb	[pc, r3]
 80024f2:	1c03      	.short	0x1c03
 80024f4:	1217      	.short	0x1217
 80024f6:	0d          	.byte	0x0d
 80024f7:	00          	.byte	0x00
 80024f8:	3103      	adds	r1, #3
 80024fa:	60e1      	str	r1, [r4, #12]
 80024fc:	f04f 0801 	mov.w	r8, #1
 8002500:	4620      	mov	r0, r4
 8002502:	f7ff f8f5 	bl	80016f0 <d_type>
 8002506:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002508:	68e1      	ldr	r1, [r4, #12]
 800250a:	e76f      	b.n	80023ec <d_unqualified_name+0x1b0>
 800250c:	3103      	adds	r1, #3
 800250e:	60e1      	str	r1, [r4, #12]
 8002510:	f04f 0805 	mov.w	r8, #5
 8002514:	e7f4      	b.n	8002500 <d_unqualified_name+0x2c4>
 8002516:	3103      	adds	r1, #3
 8002518:	60e1      	str	r1, [r4, #12]
 800251a:	f04f 0804 	mov.w	r8, #4
 800251e:	e7ef      	b.n	8002500 <d_unqualified_name+0x2c4>
 8002520:	3103      	adds	r1, #3
 8002522:	60e1      	str	r1, [r4, #12]
 8002524:	f04f 0803 	mov.w	r8, #3
 8002528:	e7ea      	b.n	8002500 <d_unqualified_name+0x2c4>
 800252a:	3103      	adds	r1, #3
 800252c:	60e1      	str	r1, [r4, #12]
 800252e:	f04f 0802 	mov.w	r8, #2
 8002532:	e7e5      	b.n	8002500 <d_unqualified_name+0x2c4>
 8002534:	68e3      	ldr	r3, [r4, #12]
 8002536:	2500      	movs	r5, #0
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	e6c0      	b.n	80022be <d_unqualified_name+0x82>
 800253c:	783b      	ldrb	r3, [r7, #0]
 800253e:	4665      	mov	r5, ip
 8002540:	e6bd      	b.n	80022be <d_unqualified_name+0x82>
 8002542:	7803      	ldrb	r3, [r0, #0]
 8002544:	4665      	mov	r5, ip
 8002546:	e6ba      	b.n	80022be <d_unqualified_name+0x82>
 8002548:	788b      	ldrb	r3, [r1, #2]
 800254a:	2500      	movs	r5, #0
 800254c:	e6b7      	b.n	80022be <d_unqualified_name+0x82>
 800254e:	780b      	ldrb	r3, [r1, #0]
 8002550:	2500      	movs	r5, #0
 8002552:	e6b4      	b.n	80022be <d_unqualified_name+0x82>
 8002554:	784b      	ldrb	r3, [r1, #1]
 8002556:	2500      	movs	r5, #0
 8002558:	e6b1      	b.n	80022be <d_unqualified_name+0x82>
 800255a:	788b      	ldrb	r3, [r1, #2]
 800255c:	4615      	mov	r5, r2
 800255e:	e6ae      	b.n	80022be <d_unqualified_name+0x82>
 8002560:	780b      	ldrb	r3, [r1, #0]
 8002562:	4615      	mov	r5, r2
 8002564:	e6ab      	b.n	80022be <d_unqualified_name+0x82>
 8002566:	3102      	adds	r1, #2
 8002568:	60e1      	str	r1, [r4, #12]
 800256a:	f04f 0801 	mov.w	r8, #1
 800256e:	e73d      	b.n	80023ec <d_unqualified_name+0x1b0>
 8002570:	08034df8 	.word	0x08034df8

08002574 <d_encoding>:
 8002574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002578:	68c3      	ldr	r3, [r0, #12]
 800257a:	781a      	ldrb	r2, [r3, #0]
 800257c:	2a47      	cmp	r2, #71	; 0x47
 800257e:	4604      	mov	r4, r0
 8002580:	d019      	beq.n	80025b6 <d_encoding+0x42>
 8002582:	2a54      	cmp	r2, #84	; 0x54
 8002584:	d017      	beq.n	80025b6 <d_encoding+0x42>
 8002586:	460e      	mov	r6, r1
 8002588:	f7fe ff06 	bl	8001398 <d_name>
 800258c:	4605      	mov	r5, r0
 800258e:	2800      	cmp	r0, #0
 8002590:	d07d      	beq.n	800268e <d_encoding+0x11a>
 8002592:	2e00      	cmp	r6, #0
 8002594:	d057      	beq.n	8002646 <d_encoding+0xd2>
 8002596:	68a3      	ldr	r3, [r4, #8]
 8002598:	07db      	lsls	r3, r3, #31
 800259a:	d454      	bmi.n	8002646 <d_encoding+0xd2>
 800259c:	e000      	b.n	80025a0 <d_encoding+0x2c>
 800259e:	68ad      	ldr	r5, [r5, #8]
 80025a0:	782b      	ldrb	r3, [r5, #0]
 80025a2:	f1a3 021c 	sub.w	r2, r3, #28
 80025a6:	2a04      	cmp	r2, #4
 80025a8:	d9f9      	bls.n	800259e <d_encoding+0x2a>
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	f000 8186 	beq.w	80028bc <d_encoding+0x348>
 80025b0:	4628      	mov	r0, r5
 80025b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025b6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80025b8:	f101 0214 	add.w	r2, r1, #20
 80025bc:	6322      	str	r2, [r4, #48]	; 0x30
 80025be:	781a      	ldrb	r2, [r3, #0]
 80025c0:	2a54      	cmp	r2, #84	; 0x54
 80025c2:	d068      	beq.n	8002696 <d_encoding+0x122>
 80025c4:	2a47      	cmp	r2, #71	; 0x47
 80025c6:	d162      	bne.n	800268e <d_encoding+0x11a>
 80025c8:	1c5a      	adds	r2, r3, #1
 80025ca:	60e2      	str	r2, [r4, #12]
 80025cc:	785a      	ldrb	r2, [r3, #1]
 80025ce:	2a00      	cmp	r2, #0
 80025d0:	d05d      	beq.n	800268e <d_encoding+0x11a>
 80025d2:	1c9a      	adds	r2, r3, #2
 80025d4:	60e2      	str	r2, [r4, #12]
 80025d6:	785a      	ldrb	r2, [r3, #1]
 80025d8:	3a41      	subs	r2, #65	; 0x41
 80025da:	2a31      	cmp	r2, #49	; 0x31
 80025dc:	d857      	bhi.n	800268e <d_encoding+0x11a>
 80025de:	e8df f012 	tbh	[pc, r2, lsl #1]
 80025e2:	013e      	.short	0x013e
 80025e4:	00560056 	.word	0x00560056
 80025e8:	00560056 	.word	0x00560056
 80025ec:	00560056 	.word	0x00560056
 80025f0:	00560056 	.word	0x00560056
 80025f4:	00560056 	.word	0x00560056
 80025f8:	00560056 	.word	0x00560056
 80025fc:	00560056 	.word	0x00560056
 8002600:	00560056 	.word	0x00560056
 8002604:	0056014a 	.word	0x0056014a
 8002608:	00560159 	.word	0x00560159
 800260c:	005600e0 	.word	0x005600e0
 8002610:	00560056 	.word	0x00560056
 8002614:	00560056 	.word	0x00560056
 8002618:	00560056 	.word	0x00560056
 800261c:	00560056 	.word	0x00560056
 8002620:	00560056 	.word	0x00560056
 8002624:	00560056 	.word	0x00560056
 8002628:	00560056 	.word	0x00560056
 800262c:	00560056 	.word	0x00560056
 8002630:	00560056 	.word	0x00560056
 8002634:	00560056 	.word	0x00560056
 8002638:	00560056 	.word	0x00560056
 800263c:	00560056 	.word	0x00560056
 8002640:	00560056 	.word	0x00560056
 8002644:	00eb      	.short	0x00eb
 8002646:	68e3      	ldr	r3, [r4, #12]
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0b0      	beq.n	80025b0 <d_encoding+0x3c>
 800264e:	2b45      	cmp	r3, #69	; 0x45
 8002650:	d0ae      	beq.n	80025b0 <d_encoding+0x3c>
 8002652:	4629      	mov	r1, r5
 8002654:	780b      	ldrb	r3, [r1, #0]
 8002656:	2b20      	cmp	r3, #32
 8002658:	f200 8218 	bhi.w	8002a8c <d_encoding+0x518>
 800265c:	2b1c      	cmp	r3, #28
 800265e:	f080 821e 	bcs.w	8002a9e <d_encoding+0x52a>
 8002662:	2b04      	cmp	r3, #4
 8002664:	f040 8091 	bne.w	800278a <d_encoding+0x216>
 8002668:	688a      	ldr	r2, [r1, #8]
 800266a:	b16a      	cbz	r2, 8002688 <d_encoding+0x114>
 800266c:	7813      	ldrb	r3, [r2, #0]
 800266e:	2b08      	cmp	r3, #8
 8002670:	f103 31ff 	add.w	r1, r3, #4294967295
 8002674:	f200 8086 	bhi.w	8002784 <d_encoding+0x210>
 8002678:	2b07      	cmp	r3, #7
 800267a:	f080 8086 	bcs.w	800278a <d_encoding+0x216>
 800267e:	2901      	cmp	r1, #1
 8002680:	d802      	bhi.n	8002688 <d_encoding+0x114>
 8002682:	68d2      	ldr	r2, [r2, #12]
 8002684:	2a00      	cmp	r2, #0
 8002686:	d1f1      	bne.n	800266c <d_encoding+0xf8>
 8002688:	2101      	movs	r1, #1
 800268a:	e07f      	b.n	800278c <d_encoding+0x218>
 800268c:	60e7      	str	r7, [r4, #12]
 800268e:	2500      	movs	r5, #0
 8002690:	4628      	mov	r0, r5
 8002692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002696:	1c5a      	adds	r2, r3, #1
 8002698:	60e2      	str	r2, [r4, #12]
 800269a:	785a      	ldrb	r2, [r3, #1]
 800269c:	2a00      	cmp	r2, #0
 800269e:	d0f6      	beq.n	800268e <d_encoding+0x11a>
 80026a0:	1c9a      	adds	r2, r3, #2
 80026a2:	60e2      	str	r2, [r4, #12]
 80026a4:	785b      	ldrb	r3, [r3, #1]
 80026a6:	3b43      	subs	r3, #67	; 0x43
 80026a8:	2b33      	cmp	r3, #51	; 0x33
 80026aa:	d8f0      	bhi.n	800268e <d_encoding+0x11a>
 80026ac:	a201      	add	r2, pc, #4	; (adr r2, 80026b4 <d_encoding+0x140>)
 80026ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b2:	bf00      	nop
 80026b4:	08002a09 	.word	0x08002a09
 80026b8:	0800268f 	.word	0x0800268f
 80026bc:	0800268f 	.word	0x0800268f
 80026c0:	080029f3 	.word	0x080029f3
 80026c4:	0800268f 	.word	0x0800268f
 80026c8:	080029dd 	.word	0x080029dd
 80026cc:	080029c7 	.word	0x080029c7
 80026d0:	080029b1 	.word	0x080029b1
 80026d4:	0800268f 	.word	0x0800268f
 80026d8:	0800268f 	.word	0x0800268f
 80026dc:	0800268f 	.word	0x0800268f
 80026e0:	0800268f 	.word	0x0800268f
 80026e4:	0800268f 	.word	0x0800268f
 80026e8:	0800268f 	.word	0x0800268f
 80026ec:	0800268f 	.word	0x0800268f
 80026f0:	0800268f 	.word	0x0800268f
 80026f4:	0800299b 	.word	0x0800299b
 80026f8:	08002981 	.word	0x08002981
 80026fc:	0800268f 	.word	0x0800268f
 8002700:	08002967 	.word	0x08002967
 8002704:	08002951 	.word	0x08002951
 8002708:	0800268f 	.word	0x0800268f
 800270c:	0800268f 	.word	0x0800268f
 8002710:	0800268f 	.word	0x0800268f
 8002714:	0800268f 	.word	0x0800268f
 8002718:	0800268f 	.word	0x0800268f
 800271c:	0800268f 	.word	0x0800268f
 8002720:	0800268f 	.word	0x0800268f
 8002724:	0800268f 	.word	0x0800268f
 8002728:	0800268f 	.word	0x0800268f
 800272c:	0800268f 	.word	0x0800268f
 8002730:	0800268f 	.word	0x0800268f
 8002734:	0800291d 	.word	0x0800291d
 8002738:	0800268f 	.word	0x0800268f
 800273c:	0800268f 	.word	0x0800268f
 8002740:	0800268f 	.word	0x0800268f
 8002744:	0800268f 	.word	0x0800268f
 8002748:	080028f7 	.word	0x080028f7
 800274c:	0800268f 	.word	0x0800268f
 8002750:	0800268f 	.word	0x0800268f
 8002754:	0800268f 	.word	0x0800268f
 8002758:	0800268f 	.word	0x0800268f
 800275c:	0800268f 	.word	0x0800268f
 8002760:	0800268f 	.word	0x0800268f
 8002764:	0800268f 	.word	0x0800268f
 8002768:	0800268f 	.word	0x0800268f
 800276c:	0800268f 	.word	0x0800268f
 8002770:	0800268f 	.word	0x0800268f
 8002774:	0800268f 	.word	0x0800268f
 8002778:	0800268f 	.word	0x0800268f
 800277c:	0800268f 	.word	0x0800268f
 8002780:	080028d1 	.word	0x080028d1
 8002784:	2b34      	cmp	r3, #52	; 0x34
 8002786:	f47f af7f 	bne.w	8002688 <d_encoding+0x114>
 800278a:	2100      	movs	r1, #0
 800278c:	4620      	mov	r0, r4
 800278e:	f7ff fd15 	bl	80021bc <d_bare_function_type>
 8002792:	462a      	mov	r2, r5
 8002794:	4603      	mov	r3, r0
 8002796:	2103      	movs	r1, #3
 8002798:	4620      	mov	r0, r4
 800279a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800279e:	f7fd bd27 	b.w	80001f0 <d_make_comp>
 80027a2:	4620      	mov	r0, r4
 80027a4:	f7fe fdf8 	bl	8001398 <d_name>
 80027a8:	2300      	movs	r3, #0
 80027aa:	4602      	mov	r2, r0
 80027ac:	2113      	movs	r1, #19
 80027ae:	4620      	mov	r0, r4
 80027b0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027b4:	f7fd bd1c 	b.w	80001f0 <d_make_comp>
 80027b8:	f104 000c 	add.w	r0, r4, #12
 80027bc:	f7fd fe12 	bl	80003e4 <d_number.isra.1>
 80027c0:	2801      	cmp	r0, #1
 80027c2:	f77f af64 	ble.w	800268e <d_encoding+0x11a>
 80027c6:	68e3      	ldr	r3, [r4, #12]
 80027c8:	781a      	ldrb	r2, [r3, #0]
 80027ca:	2a00      	cmp	r2, #0
 80027cc:	f43f af5f 	beq.w	800268e <d_encoding+0x11a>
 80027d0:	1c5f      	adds	r7, r3, #1
 80027d2:	60e7      	str	r7, [r4, #12]
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b5f      	cmp	r3, #95	; 0x5f
 80027d8:	f47f af59 	bne.w	800268e <d_encoding+0x11a>
 80027dc:	2200      	movs	r2, #0
 80027de:	1e45      	subs	r5, r0, #1
 80027e0:	4690      	mov	r8, r2
 80027e2:	f04f 0940 	mov.w	r9, #64	; 0x40
 80027e6:	783b      	ldrb	r3, [r7, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f43f af50 	beq.w	800268e <d_encoding+0x11a>
 80027ee:	2b24      	cmp	r3, #36	; 0x24
 80027f0:	f040 812a 	bne.w	8002a48 <d_encoding+0x4d4>
 80027f4:	787b      	ldrb	r3, [r7, #1]
 80027f6:	2b53      	cmp	r3, #83	; 0x53
 80027f8:	f000 8156 	beq.w	8002aa8 <d_encoding+0x534>
 80027fc:	2b5f      	cmp	r3, #95	; 0x5f
 80027fe:	f000 8155 	beq.w	8002aac <d_encoding+0x538>
 8002802:	2b24      	cmp	r3, #36	; 0x24
 8002804:	f47f af43 	bne.w	800268e <d_encoding+0x11a>
 8002808:	4619      	mov	r1, r3
 800280a:	e9d4 0305 	ldrd	r0, r3, [r4, #20]
 800280e:	68e7      	ldr	r7, [r4, #12]
 8002810:	4298      	cmp	r0, r3
 8002812:	f107 0702 	add.w	r7, r7, #2
 8002816:	f6bf af39 	bge.w	800268c <d_encoding+0x118>
 800281a:	f8d4 c010 	ldr.w	ip, [r4, #16]
 800281e:	0106      	lsls	r6, r0, #4
 8002820:	eb0c 0306 	add.w	r3, ip, r6
 8002824:	3001      	adds	r0, #1
 8002826:	f8c3 8004 	str.w	r8, [r3, #4]
 800282a:	3d02      	subs	r5, #2
 800282c:	6160      	str	r0, [r4, #20]
 800282e:	f80c 9006 	strb.w	r9, [ip, r6]
 8002832:	6099      	str	r1, [r3, #8]
 8002834:	60e7      	str	r7, [r4, #12]
 8002836:	2a00      	cmp	r2, #0
 8002838:	f000 8126 	beq.w	8002a88 <d_encoding+0x514>
 800283c:	213f      	movs	r1, #63	; 0x3f
 800283e:	4620      	mov	r0, r4
 8002840:	f7fd fcd6 	bl	80001f0 <d_make_comp>
 8002844:	4602      	mov	r2, r0
 8002846:	2800      	cmp	r0, #0
 8002848:	f43f af21 	beq.w	800268e <d_encoding+0x11a>
 800284c:	2d00      	cmp	r5, #0
 800284e:	dcca      	bgt.n	80027e6 <d_encoding+0x272>
 8002850:	4620      	mov	r0, r4
 8002852:	2300      	movs	r3, #0
 8002854:	213e      	movs	r1, #62	; 0x3e
 8002856:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800285a:	f7fd bcc9 	b.w	80001f0 <d_make_comp>
 800285e:	2100      	movs	r1, #0
 8002860:	4620      	mov	r0, r4
 8002862:	f7ff fe87 	bl	8002574 <d_encoding>
 8002866:	2300      	movs	r3, #0
 8002868:	4602      	mov	r2, r0
 800286a:	2117      	movs	r1, #23
 800286c:	4620      	mov	r0, r4
 800286e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002872:	f7fd bcbd 	b.w	80001f0 <d_make_comp>
 8002876:	4620      	mov	r0, r4
 8002878:	f7fe fd8e 	bl	8001398 <d_name>
 800287c:	4605      	mov	r5, r0
 800287e:	4620      	mov	r0, r4
 8002880:	f7fd fddc 	bl	800043c <d_number_component>
 8002884:	462a      	mov	r2, r5
 8002886:	4603      	mov	r3, r0
 8002888:	2116      	movs	r1, #22
 800288a:	4620      	mov	r0, r4
 800288c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002890:	f7fd bcae 	b.w	80001f0 <d_make_comp>
 8002894:	789a      	ldrb	r2, [r3, #2]
 8002896:	2100      	movs	r1, #0
 8002898:	4620      	mov	r0, r4
 800289a:	b12a      	cbz	r2, 80028a8 <d_encoding+0x334>
 800289c:	1cda      	adds	r2, r3, #3
 800289e:	60e2      	str	r2, [r4, #12]
 80028a0:	789b      	ldrb	r3, [r3, #2]
 80028a2:	2b6e      	cmp	r3, #110	; 0x6e
 80028a4:	f000 8109 	beq.w	8002aba <d_encoding+0x546>
 80028a8:	f7ff fe64 	bl	8002574 <d_encoding>
 80028ac:	2300      	movs	r3, #0
 80028ae:	4602      	mov	r2, r0
 80028b0:	2148      	movs	r1, #72	; 0x48
 80028b2:	4620      	mov	r0, r4
 80028b4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028b8:	f7fd bc9a 	b.w	80001f0 <d_make_comp>
 80028bc:	68ea      	ldr	r2, [r5, #12]
 80028be:	e000      	b.n	80028c2 <d_encoding+0x34e>
 80028c0:	6892      	ldr	r2, [r2, #8]
 80028c2:	7810      	ldrb	r0, [r2, #0]
 80028c4:	f7fd fd80 	bl	80003c8 <is_fnqual_component_type>
 80028c8:	2800      	cmp	r0, #0
 80028ca:	d1f9      	bne.n	80028c0 <d_encoding+0x34c>
 80028cc:	60ea      	str	r2, [r5, #12]
 80028ce:	e66f      	b.n	80025b0 <d_encoding+0x3c>
 80028d0:	2176      	movs	r1, #118	; 0x76
 80028d2:	4620      	mov	r0, r4
 80028d4:	f7fe f80a 	bl	80008ec <d_call_offset>
 80028d8:	2800      	cmp	r0, #0
 80028da:	f43f aed8 	beq.w	800268e <d_encoding+0x11a>
 80028de:	2100      	movs	r1, #0
 80028e0:	4620      	mov	r0, r4
 80028e2:	f7ff fe47 	bl	8002574 <d_encoding>
 80028e6:	2300      	movs	r3, #0
 80028e8:	4602      	mov	r2, r0
 80028ea:	2110      	movs	r1, #16
 80028ec:	4620      	mov	r0, r4
 80028ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028f2:	f7fd bc7d 	b.w	80001f0 <d_make_comp>
 80028f6:	2168      	movs	r1, #104	; 0x68
 80028f8:	4620      	mov	r0, r4
 80028fa:	f7fd fff7 	bl	80008ec <d_call_offset>
 80028fe:	2800      	cmp	r0, #0
 8002900:	f43f aec5 	beq.w	800268e <d_encoding+0x11a>
 8002904:	2100      	movs	r1, #0
 8002906:	4620      	mov	r0, r4
 8002908:	f7ff fe34 	bl	8002574 <d_encoding>
 800290c:	2300      	movs	r3, #0
 800290e:	4602      	mov	r2, r0
 8002910:	210f      	movs	r1, #15
 8002912:	4620      	mov	r0, r4
 8002914:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002918:	f7fd bc6a 	b.w	80001f0 <d_make_comp>
 800291c:	2100      	movs	r1, #0
 800291e:	4620      	mov	r0, r4
 8002920:	f7fd ffe4 	bl	80008ec <d_call_offset>
 8002924:	2800      	cmp	r0, #0
 8002926:	f43f aeb2 	beq.w	800268e <d_encoding+0x11a>
 800292a:	2100      	movs	r1, #0
 800292c:	4620      	mov	r0, r4
 800292e:	f7fd ffdd 	bl	80008ec <d_call_offset>
 8002932:	2800      	cmp	r0, #0
 8002934:	f43f aeab 	beq.w	800268e <d_encoding+0x11a>
 8002938:	2100      	movs	r1, #0
 800293a:	4620      	mov	r0, r4
 800293c:	f7ff fe1a 	bl	8002574 <d_encoding>
 8002940:	2300      	movs	r3, #0
 8002942:	4602      	mov	r2, r0
 8002944:	2111      	movs	r1, #17
 8002946:	4620      	mov	r0, r4
 8002948:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800294c:	f7fd bc50 	b.w	80001f0 <d_make_comp>
 8002950:	4620      	mov	r0, r4
 8002952:	f7fe fd21 	bl	8001398 <d_name>
 8002956:	2300      	movs	r3, #0
 8002958:	4602      	mov	r2, r0
 800295a:	2115      	movs	r1, #21
 800295c:	4620      	mov	r0, r4
 800295e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002962:	f7fd bc45 	b.w	80001f0 <d_make_comp>
 8002966:	310f      	adds	r1, #15
 8002968:	6321      	str	r1, [r4, #48]	; 0x30
 800296a:	4620      	mov	r0, r4
 800296c:	f7fe fec0 	bl	80016f0 <d_type>
 8002970:	2300      	movs	r3, #0
 8002972:	4602      	mov	r2, r0
 8002974:	2109      	movs	r1, #9
 8002976:	4620      	mov	r0, r4
 8002978:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800297c:	f7fd bc38 	b.w	80001f0 <d_make_comp>
 8002980:	310a      	adds	r1, #10
 8002982:	6321      	str	r1, [r4, #48]	; 0x30
 8002984:	4620      	mov	r0, r4
 8002986:	f7fe feb3 	bl	80016f0 <d_type>
 800298a:	2300      	movs	r3, #0
 800298c:	4602      	mov	r2, r0
 800298e:	210a      	movs	r1, #10
 8002990:	4620      	mov	r0, r4
 8002992:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002996:	f7fd bc2b 	b.w	80001f0 <d_make_comp>
 800299a:	4620      	mov	r0, r4
 800299c:	f7fe fea8 	bl	80016f0 <d_type>
 80029a0:	2300      	movs	r3, #0
 80029a2:	4602      	mov	r2, r0
 80029a4:	210d      	movs	r1, #13
 80029a6:	4620      	mov	r0, r4
 80029a8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029ac:	f7fd bc20 	b.w	80001f0 <d_make_comp>
 80029b0:	4620      	mov	r0, r4
 80029b2:	f7fe fe9d 	bl	80016f0 <d_type>
 80029b6:	2300      	movs	r3, #0
 80029b8:	4602      	mov	r2, r0
 80029ba:	2112      	movs	r1, #18
 80029bc:	4620      	mov	r0, r4
 80029be:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029c2:	f7fd bc15 	b.w	80001f0 <d_make_comp>
 80029c6:	4620      	mov	r0, r4
 80029c8:	f7fe fe92 	bl	80016f0 <d_type>
 80029cc:	2300      	movs	r3, #0
 80029ce:	4602      	mov	r2, r0
 80029d0:	210c      	movs	r1, #12
 80029d2:	4620      	mov	r0, r4
 80029d4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029d8:	f7fd bc0a 	b.w	80001f0 <d_make_comp>
 80029dc:	4620      	mov	r0, r4
 80029de:	f7fe fcdb 	bl	8001398 <d_name>
 80029e2:	2300      	movs	r3, #0
 80029e4:	4602      	mov	r2, r0
 80029e6:	2114      	movs	r1, #20
 80029e8:	4620      	mov	r0, r4
 80029ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029ee:	f7fd bbff 	b.w	80001f0 <d_make_comp>
 80029f2:	4620      	mov	r0, r4
 80029f4:	f7fe fe7c 	bl	80016f0 <d_type>
 80029f8:	2300      	movs	r3, #0
 80029fa:	4602      	mov	r2, r0
 80029fc:	210e      	movs	r1, #14
 80029fe:	4620      	mov	r0, r4
 8002a00:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a04:	f7fd bbf4 	b.w	80001f0 <d_make_comp>
 8002a08:	4620      	mov	r0, r4
 8002a0a:	f7fe fe71 	bl	80016f0 <d_type>
 8002a0e:	4605      	mov	r5, r0
 8002a10:	f104 000c 	add.w	r0, r4, #12
 8002a14:	f7fd fce6 	bl	80003e4 <d_number.isra.1>
 8002a18:	2800      	cmp	r0, #0
 8002a1a:	f6ff ae38 	blt.w	800268e <d_encoding+0x11a>
 8002a1e:	68e3      	ldr	r3, [r4, #12]
 8002a20:	781a      	ldrb	r2, [r3, #0]
 8002a22:	2a5f      	cmp	r2, #95	; 0x5f
 8002a24:	f47f ae33 	bne.w	800268e <d_encoding+0x11a>
 8002a28:	3301      	adds	r3, #1
 8002a2a:	60e3      	str	r3, [r4, #12]
 8002a2c:	4620      	mov	r0, r4
 8002a2e:	f7fe fe5f 	bl	80016f0 <d_type>
 8002a32:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002a34:	1d59      	adds	r1, r3, #5
 8002a36:	6321      	str	r1, [r4, #48]	; 0x30
 8002a38:	4602      	mov	r2, r0
 8002a3a:	462b      	mov	r3, r5
 8002a3c:	4620      	mov	r0, r4
 8002a3e:	210b      	movs	r1, #11
 8002a40:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a44:	f7fd bbd4 	b.w	80001f0 <d_make_comp>
 8002a48:	463e      	mov	r6, r7
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	e004      	b.n	8002a58 <d_encoding+0x4e4>
 8002a4e:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 8002a52:	b123      	cbz	r3, 8002a5e <d_encoding+0x4ea>
 8002a54:	2b24      	cmp	r3, #36	; 0x24
 8002a56:	d002      	beq.n	8002a5e <d_encoding+0x4ea>
 8002a58:	3101      	adds	r1, #1
 8002a5a:	42a9      	cmp	r1, r5
 8002a5c:	dbf7      	blt.n	8002a4e <d_encoding+0x4da>
 8002a5e:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8002a62:	4283      	cmp	r3, r0
 8002a64:	da24      	bge.n	8002ab0 <d_encoding+0x53c>
 8002a66:	e9d4 c603 	ldrd	ip, r6, [r4, #12]
 8002a6a:	0118      	lsls	r0, r3, #4
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	6163      	str	r3, [r4, #20]
 8002a70:	1833      	adds	r3, r6, r0
 8002a72:	1a6d      	subs	r5, r5, r1
 8002a74:	f8c3 8004 	str.w	r8, [r3, #4]
 8002a78:	f806 8000 	strb.w	r8, [r6, r0]
 8002a7c:	609f      	str	r7, [r3, #8]
 8002a7e:	eb0c 0701 	add.w	r7, ip, r1
 8002a82:	60d9      	str	r1, [r3, #12]
 8002a84:	60e7      	str	r7, [r4, #12]
 8002a86:	e6d6      	b.n	8002836 <d_encoding+0x2c2>
 8002a88:	461a      	mov	r2, r3
 8002a8a:	e6df      	b.n	800284c <d_encoding+0x2d8>
 8002a8c:	2b4c      	cmp	r3, #76	; 0x4c
 8002a8e:	f1a3 024e 	sub.w	r2, r3, #78	; 0x4e
 8002a92:	d004      	beq.n	8002a9e <d_encoding+0x52a>
 8002a94:	f4ff ae79 	bcc.w	800278a <d_encoding+0x216>
 8002a98:	2a01      	cmp	r2, #1
 8002a9a:	f63f ae76 	bhi.w	800278a <d_encoding+0x216>
 8002a9e:	6889      	ldr	r1, [r1, #8]
 8002aa0:	2900      	cmp	r1, #0
 8002aa2:	f47f add7 	bne.w	8002654 <d_encoding+0xe0>
 8002aa6:	e671      	b.n	800278c <d_encoding+0x218>
 8002aa8:	212f      	movs	r1, #47	; 0x2f
 8002aaa:	e6ae      	b.n	800280a <d_encoding+0x296>
 8002aac:	212e      	movs	r1, #46	; 0x2e
 8002aae:	e6ac      	b.n	800280a <d_encoding+0x296>
 8002ab0:	68e3      	ldr	r3, [r4, #12]
 8002ab2:	440b      	add	r3, r1
 8002ab4:	60e3      	str	r3, [r4, #12]
 8002ab6:	2500      	movs	r5, #0
 8002ab8:	e57a      	b.n	80025b0 <d_encoding+0x3c>
 8002aba:	f7ff fd5b 	bl	8002574 <d_encoding>
 8002abe:	2300      	movs	r3, #0
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	2149      	movs	r1, #73	; 0x49
 8002ac4:	4620      	mov	r0, r4
 8002ac6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002aca:	f7fd bb91 	b.w	80001f0 <d_make_comp>
 8002ace:	bf00      	nop

08002ad0 <d_expr_primary>:
 8002ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ad2:	68c2      	ldr	r2, [r0, #12]
 8002ad4:	7813      	ldrb	r3, [r2, #0]
 8002ad6:	2b4c      	cmp	r3, #76	; 0x4c
 8002ad8:	d144      	bne.n	8002b64 <d_expr_primary+0x94>
 8002ada:	1c53      	adds	r3, r2, #1
 8002adc:	60c3      	str	r3, [r0, #12]
 8002ade:	7851      	ldrb	r1, [r2, #1]
 8002ae0:	295f      	cmp	r1, #95	; 0x5f
 8002ae2:	4604      	mov	r4, r0
 8002ae4:	d040      	beq.n	8002b68 <d_expr_primary+0x98>
 8002ae6:	295a      	cmp	r1, #90	; 0x5a
 8002ae8:	d10c      	bne.n	8002b04 <d_expr_primary+0x34>
 8002aea:	3301      	adds	r3, #1
 8002aec:	60e3      	str	r3, [r4, #12]
 8002aee:	2100      	movs	r1, #0
 8002af0:	4620      	mov	r0, r4
 8002af2:	f7ff fd3f 	bl	8002574 <d_encoding>
 8002af6:	68e3      	ldr	r3, [r4, #12]
 8002af8:	781a      	ldrb	r2, [r3, #0]
 8002afa:	2a45      	cmp	r2, #69	; 0x45
 8002afc:	d132      	bne.n	8002b64 <d_expr_primary+0x94>
 8002afe:	3301      	adds	r3, #1
 8002b00:	60e3      	str	r3, [r4, #12]
 8002b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b04:	f7fe fdf4 	bl	80016f0 <d_type>
 8002b08:	b360      	cbz	r0, 8002b64 <d_expr_primary+0x94>
 8002b0a:	7803      	ldrb	r3, [r0, #0]
 8002b0c:	2b27      	cmp	r3, #39	; 0x27
 8002b0e:	d032      	beq.n	8002b76 <d_expr_primary+0xa6>
 8002b10:	68e6      	ldr	r6, [r4, #12]
 8002b12:	7833      	ldrb	r3, [r6, #0]
 8002b14:	2b6e      	cmp	r3, #110	; 0x6e
 8002b16:	d037      	beq.n	8002b88 <d_expr_primary+0xb8>
 8002b18:	213c      	movs	r1, #60	; 0x3c
 8002b1a:	2b45      	cmp	r3, #69	; 0x45
 8002b1c:	d040      	beq.n	8002ba0 <d_expr_primary+0xd0>
 8002b1e:	b30b      	cbz	r3, 8002b64 <d_expr_primary+0x94>
 8002b20:	4633      	mov	r3, r6
 8002b22:	e000      	b.n	8002b26 <d_expr_primary+0x56>
 8002b24:	b1f5      	cbz	r5, 8002b64 <d_expr_primary+0x94>
 8002b26:	3301      	adds	r3, #1
 8002b28:	60e3      	str	r3, [r4, #12]
 8002b2a:	781d      	ldrb	r5, [r3, #0]
 8002b2c:	2d45      	cmp	r5, #69	; 0x45
 8002b2e:	d1f9      	bne.n	8002b24 <d_expr_primary+0x54>
 8002b30:	1b9d      	subs	r5, r3, r6
 8002b32:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	da0b      	bge.n	8002b52 <d_expr_primary+0x82>
 8002b3a:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8002b3e:	ea4f 1c02 	mov.w	ip, r2, lsl #4
 8002b42:	eb0e 030c 	add.w	r3, lr, ip
 8002b46:	3201      	adds	r2, #1
 8002b48:	2700      	movs	r7, #0
 8002b4a:	605f      	str	r7, [r3, #4]
 8002b4c:	6162      	str	r2, [r4, #20]
 8002b4e:	b106      	cbz	r6, 8002b52 <d_expr_primary+0x82>
 8002b50:	bb05      	cbnz	r5, 8002b94 <d_expr_primary+0xc4>
 8002b52:	2300      	movs	r3, #0
 8002b54:	4602      	mov	r2, r0
 8002b56:	4620      	mov	r0, r4
 8002b58:	f7fd fb4a 	bl	80001f0 <d_make_comp>
 8002b5c:	68e3      	ldr	r3, [r4, #12]
 8002b5e:	781a      	ldrb	r2, [r3, #0]
 8002b60:	2a45      	cmp	r2, #69	; 0x45
 8002b62:	d0cc      	beq.n	8002afe <d_expr_primary+0x2e>
 8002b64:	2000      	movs	r0, #0
 8002b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b68:	1c93      	adds	r3, r2, #2
 8002b6a:	60c3      	str	r3, [r0, #12]
 8002b6c:	7892      	ldrb	r2, [r2, #2]
 8002b6e:	2a5a      	cmp	r2, #90	; 0x5a
 8002b70:	d0bb      	beq.n	8002aea <d_expr_primary+0x1a>
 8002b72:	2000      	movs	r0, #0
 8002b74:	e7c1      	b.n	8002afa <d_expr_primary+0x2a>
 8002b76:	6883      	ldr	r3, [r0, #8]
 8002b78:	7c1a      	ldrb	r2, [r3, #16]
 8002b7a:	2a00      	cmp	r2, #0
 8002b7c:	d0c8      	beq.n	8002b10 <d_expr_primary+0x40>
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b82:	1a9b      	subs	r3, r3, r2
 8002b84:	6323      	str	r3, [r4, #48]	; 0x30
 8002b86:	e7c3      	b.n	8002b10 <d_expr_primary+0x40>
 8002b88:	1c72      	adds	r2, r6, #1
 8002b8a:	60e2      	str	r2, [r4, #12]
 8002b8c:	7873      	ldrb	r3, [r6, #1]
 8002b8e:	213d      	movs	r1, #61	; 0x3d
 8002b90:	4616      	mov	r6, r2
 8002b92:	e7c2      	b.n	8002b1a <d_expr_primary+0x4a>
 8002b94:	605f      	str	r7, [r3, #4]
 8002b96:	f80e 700c 	strb.w	r7, [lr, ip]
 8002b9a:	e9c3 6502 	strd	r6, r5, [r3, #8]
 8002b9e:	e7d9      	b.n	8002b54 <d_expr_primary+0x84>
 8002ba0:	2500      	movs	r5, #0
 8002ba2:	e7c6      	b.n	8002b32 <d_expr_primary+0x62>

08002ba4 <d_print_comp>:
 8002ba4:	b112      	cbz	r2, 8002bac <d_print_comp+0x8>
 8002ba6:	6853      	ldr	r3, [r2, #4]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	dd03      	ble.n	8002bb4 <d_print_comp+0x10>
 8002bac:	2301      	movs	r3, #1
 8002bae:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8002bb2:	4770      	bx	lr
 8002bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bb8:	4615      	mov	r5, r2
 8002bba:	1c5a      	adds	r2, r3, #1
 8002bbc:	606a      	str	r2, [r5, #4]
 8002bbe:	b099      	sub	sp, #100	; 0x64
 8002bc0:	f8d0 7118 	ldr.w	r7, [r0, #280]	; 0x118
 8002bc4:	9504      	str	r5, [sp, #16]
 8002bc6:	460e      	mov	r6, r1
 8002bc8:	ab04      	add	r3, sp, #16
 8002bca:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
 8002bce:	9105      	str	r1, [sp, #20]
 8002bd0:	4604      	mov	r4, r0
 8002bd2:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
 8002bd6:	2f00      	cmp	r7, #0
 8002bd8:	f040 80d7 	bne.w	8002d8a <d_print_comp+0x1e6>
 8002bdc:	7828      	ldrb	r0, [r5, #0]
 8002bde:	284f      	cmp	r0, #79	; 0x4f
 8002be0:	f201 82ef 	bhi.w	80041c2 <d_print_comp+0x161e>
 8002be4:	e8df f010 	tbh	[pc, r0, lsl #1]
 8002be8:	0ab80a87 	.word	0x0ab80a87
 8002bec:	0a4f0ab8 	.word	0x0a4f0ab8
 8002bf0:	079407c6 	.word	0x079407c6
 8002bf4:	075e0767 	.word	0x075e0767
 8002bf8:	070f0737 	.word	0x070f0737
 8002bfc:	06bf06e7 	.word	0x06bf06e7
 8002c00:	066f0697 	.word	0x066f0697
 8002c04:	061f0647 	.word	0x061f0647
 8002c08:	091f0947 	.word	0x091f0947
 8002c0c:	08cf08f7 	.word	0x08cf08f7
 8002c10:	087f08a7 	.word	0x087f08a7
 8002c14:	082f0857 	.word	0x082f0857
 8002c18:	09bf09d6 	.word	0x09bf09d6
 8002c1c:	09bf09bf 	.word	0x09bf09bf
 8002c20:	09990999 	.word	0x09990999
 8002c24:	09990999 	.word	0x09990999
 8002c28:	09990999 	.word	0x09990999
 8002c2c:	096f0999 	.word	0x096f0999
 8002c30:	0999096f 	.word	0x0999096f
 8002c34:	0a1d0999 	.word	0x0a1d0999
 8002c38:	06060a14 	.word	0x06060a14
 8002c3c:	05720592 	.word	0x05720592
 8002c40:	0572051b 	.word	0x0572051b
 8002c44:	04d304d3 	.word	0x04d304d3
 8002c48:	045c0488 	.word	0x045c0488
 8002c4c:	0aed0434 	.word	0x0aed0434
 8002c50:	0404040c 	.word	0x0404040c
 8002c54:	039c03b0 	.word	0x039c03b0
 8002c58:	038d0397 	.word	0x038d0397
 8002c5c:	03880388 	.word	0x03880388
 8002c60:	03330333 	.word	0x03330333
 8002c64:	02fe030b 	.word	0x02fe030b
 8002c68:	02aa02dc 	.word	0x02aa02dc
 8002c6c:	025a0282 	.word	0x025a0282
 8002c70:	01f80232 	.word	0x01f80232
 8002c74:	01d00aed 	.word	0x01d00aed
 8002c78:	015301a8 	.word	0x015301a8
 8002c7c:	017b0105 	.word	0x017b0105
 8002c80:	00d80999 	.word	0x00d80999
 8002c84:	09990999 	.word	0x09990999
 8002c88:	68aa      	ldr	r2, [r5, #8]
 8002c8a:	6893      	ldr	r3, [r2, #8]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	7859      	ldrb	r1, [r3, #1]
 8002c90:	2963      	cmp	r1, #99	; 0x63
 8002c92:	d109      	bne.n	8002ca8 <d_print_comp+0x104>
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	f1a3 0163 	sub.w	r1, r3, #99	; 0x63
 8002c9a:	2901      	cmp	r1, #1
 8002c9c:	f242 8319 	bls.w	80052d2 <d_print_comp+0x272e>
 8002ca0:	3b72      	subs	r3, #114	; 0x72
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	f242 8315 	bls.w	80052d2 <d_print_comp+0x272e>
 8002ca8:	f105 030c 	add.w	r3, r5, #12
 8002cac:	4631      	mov	r1, r6
 8002cae:	4620      	mov	r0, r4
 8002cb0:	f003 fcd2 	bl	8006658 <d_maybe_print_fold_expression.isra.20>
 8002cb4:	4680      	mov	r8, r0
 8002cb6:	2800      	cmp	r0, #0
 8002cb8:	f042 8400 	bne.w	80054bc <d_print_comp+0x2918>
 8002cbc:	68ab      	ldr	r3, [r5, #8]
 8002cbe:	781a      	ldrb	r2, [r3, #0]
 8002cc0:	2a31      	cmp	r2, #49	; 0x31
 8002cc2:	f002 8592 	beq.w	80057ea <d_print_comp+0x2c46>
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	49d7      	ldr	r1, [pc, #860]	; (8003028 <d_print_comp+0x484>)
 8002cca:	6818      	ldr	r0, [r3, #0]
 8002ccc:	f003 fffe 	bl	8006ccc <strcmp>
 8002cd0:	68eb      	ldr	r3, [r5, #12]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	b918      	cbnz	r0, 8002cde <d_print_comp+0x13a>
 8002cd6:	7813      	ldrb	r3, [r2, #0]
 8002cd8:	2b03      	cmp	r3, #3
 8002cda:	f002 85d4 	beq.w	8005886 <d_print_comp+0x2ce2>
 8002cde:	4631      	mov	r1, r6
 8002ce0:	4620      	mov	r0, r4
 8002ce2:	f003 fc67 	bl	80065b4 <d_print_subexpr>
 8002ce6:	68af      	ldr	r7, [r5, #8]
 8002ce8:	49d0      	ldr	r1, [pc, #832]	; (800302c <d_print_comp+0x488>)
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	f8d3 8000 	ldr.w	r8, [r3]
 8002cf0:	4640      	mov	r0, r8
 8002cf2:	f003 ffeb 	bl	8006ccc <strcmp>
 8002cf6:	4681      	mov	r9, r0
 8002cf8:	2800      	cmp	r0, #0
 8002cfa:	f042 83d0 	bne.w	800549e <d_print_comp+0x28fa>
 8002cfe:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8002d02:	2fff      	cmp	r7, #255	; 0xff
 8002d04:	d110      	bne.n	8002d28 <d_print_comp+0x184>
 8002d06:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 8002d0a:	4639      	mov	r1, r7
 8002d0c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002d10:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002d14:	4620      	mov	r0, r4
 8002d16:	4798      	blx	r3
 8002d18:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002d1c:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 8002d20:	3301      	adds	r3, #1
 8002d22:	464f      	mov	r7, r9
 8002d24:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002d28:	1c7a      	adds	r2, r7, #1
 8002d2a:	235b      	movs	r3, #91	; 0x5b
 8002d2c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002d30:	55e3      	strb	r3, [r4, r7]
 8002d32:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002d36:	68eb      	ldr	r3, [r5, #12]
 8002d38:	4631      	mov	r1, r6
 8002d3a:	68da      	ldr	r2, [r3, #12]
 8002d3c:	4620      	mov	r0, r4
 8002d3e:	f7ff ff31 	bl	8002ba4 <d_print_comp>
 8002d42:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8002d46:	2fff      	cmp	r7, #255	; 0xff
 8002d48:	d111      	bne.n	8002d6e <d_print_comp+0x1ca>
 8002d4a:	2600      	movs	r6, #0
 8002d4c:	4639      	mov	r1, r7
 8002d4e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002d52:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8002d56:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002d5a:	4620      	mov	r0, r4
 8002d5c:	4798      	blx	r3
 8002d5e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002d62:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8002d66:	3301      	adds	r3, #1
 8002d68:	4637      	mov	r7, r6
 8002d6a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002d6e:	235d      	movs	r3, #93	; 0x5d
 8002d70:	1c7a      	adds	r2, r7, #1
 8002d72:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002d76:	55e3      	strb	r3, [r4, r7]
 8002d78:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002d7c:	68ab      	ldr	r3, [r5, #8]
 8002d7e:	781a      	ldrb	r2, [r3, #0]
 8002d80:	2a31      	cmp	r2, #49	; 0x31
 8002d82:	f002 83ad 	beq.w	80054e0 <d_print_comp+0x293c>
 8002d86:	9905      	ldr	r1, [sp, #20]
 8002d88:	686a      	ldr	r2, [r5, #4]
 8002d8a:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
 8002d8e:	3a01      	subs	r2, #1
 8002d90:	606a      	str	r2, [r5, #4]
 8002d92:	b019      	add	sp, #100	; 0x64
 8002d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d98:	4fa5      	ldr	r7, [pc, #660]	; (8003030 <d_print_comp+0x48c>)
 8002d9a:	68aa      	ldr	r2, [r5, #8]
 8002d9c:	4631      	mov	r1, r6
 8002d9e:	4620      	mov	r0, r4
 8002da0:	f7ff ff00 	bl	8002ba4 <d_print_comp>
 8002da4:	f107 0808 	add.w	r8, r7, #8
 8002da8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002dac:	f04f 0900 	mov.w	r9, #0
 8002db0:	e016      	b.n	8002de0 <d_print_comp+0x23c>
 8002db2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002db6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002dba:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002dbe:	4798      	blx	r3
 8002dc0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002dca:	2200      	movs	r2, #0
 8002dcc:	2301      	movs	r3, #1
 8002dce:	45b8      	cmp	r8, r7
 8002dd0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002dd4:	f804 a002 	strb.w	sl, [r4, r2]
 8002dd8:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8002ddc:	f001 82f9 	beq.w	80043d2 <d_print_comp+0x182e>
 8002de0:	2bff      	cmp	r3, #255	; 0xff
 8002de2:	4619      	mov	r1, r3
 8002de4:	4620      	mov	r0, r4
 8002de6:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8002dea:	d0e2      	beq.n	8002db2 <d_print_comp+0x20e>
 8002dec:	461a      	mov	r2, r3
 8002dee:	3301      	adds	r3, #1
 8002df0:	e7ed      	b.n	8002dce <d_print_comp+0x22a>
 8002df2:	68a9      	ldr	r1, [r5, #8]
 8002df4:	4620      	mov	r0, r4
 8002df6:	f7fd fcef 	bl	80007d8 <d_find_pack>
 8002dfa:	2800      	cmp	r0, #0
 8002dfc:	f002 81e1 	beq.w	80051c2 <d_print_comp+0x261e>
 8002e00:	2300      	movs	r3, #0
 8002e02:	7802      	ldrb	r2, [r0, #0]
 8002e04:	2a2f      	cmp	r2, #47	; 0x2f
 8002e06:	f041 85df 	bne.w	80049c8 <d_print_comp+0x1e24>
 8002e0a:	6882      	ldr	r2, [r0, #8]
 8002e0c:	2a00      	cmp	r2, #0
 8002e0e:	f001 85db 	beq.w	80049c8 <d_print_comp+0x1e24>
 8002e12:	68c0      	ldr	r0, [r0, #12]
 8002e14:	3301      	adds	r3, #1
 8002e16:	2800      	cmp	r0, #0
 8002e18:	d1f3      	bne.n	8002e02 <d_print_comp+0x25e>
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	68ab      	ldr	r3, [r5, #8]
 8002e1e:	9301      	str	r3, [sp, #4]
 8002e20:	1e4a      	subs	r2, r1, #1
 8002e22:	9202      	str	r2, [sp, #8]
 8002e24:	f04f 0a00 	mov.w	sl, #0
 8002e28:	4689      	mov	r9, r1
 8002e2a:	9503      	str	r5, [sp, #12]
 8002e2c:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
 8002e30:	9a01      	ldr	r2, [sp, #4]
 8002e32:	4631      	mov	r1, r6
 8002e34:	4620      	mov	r0, r4
 8002e36:	f7ff feb5 	bl	8002ba4 <d_print_comp>
 8002e3a:	9b02      	ldr	r3, [sp, #8]
 8002e3c:	429f      	cmp	r7, r3
 8002e3e:	f281 81c6 	bge.w	80041ce <d_print_comp+0x162a>
 8002e42:	4d7c      	ldr	r5, [pc, #496]	; (8003034 <d_print_comp+0x490>)
 8002e44:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002e48:	f105 0802 	add.w	r8, r5, #2
 8002e4c:	e016      	b.n	8002e7c <d_print_comp+0x2d8>
 8002e4e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002e52:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002e56:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8002e5a:	4798      	blx	r3
 8002e5c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002e60:	3301      	adds	r3, #1
 8002e62:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002e66:	2200      	movs	r2, #0
 8002e68:	2301      	movs	r3, #1
 8002e6a:	45a8      	cmp	r8, r5
 8002e6c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002e70:	f804 b002 	strb.w	fp, [r4, r2]
 8002e74:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 8002e78:	f001 81a9 	beq.w	80041ce <d_print_comp+0x162a>
 8002e7c:	2bff      	cmp	r3, #255	; 0xff
 8002e7e:	4619      	mov	r1, r3
 8002e80:	4620      	mov	r0, r4
 8002e82:	f815 bb01 	ldrb.w	fp, [r5], #1
 8002e86:	d0e2      	beq.n	8002e4e <d_print_comp+0x2aa>
 8002e88:	461a      	mov	r2, r3
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	e7ed      	b.n	8002e6a <d_print_comp+0x2c6>
 8002e8e:	4f6a      	ldr	r7, [pc, #424]	; (8003038 <d_print_comp+0x494>)
 8002e90:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002e94:	f107 081a 	add.w	r8, r7, #26
 8002e98:	f04f 0900 	mov.w	r9, #0
 8002e9c:	e016      	b.n	8002ecc <d_print_comp+0x328>
 8002e9e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002ea2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002ea6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002eaa:	4798      	blx	r3
 8002eac:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	2301      	movs	r3, #1
 8002eba:	45b8      	cmp	r8, r7
 8002ebc:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002ec0:	f804 a002 	strb.w	sl, [r4, r2]
 8002ec4:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8002ec8:	f001 82f1 	beq.w	80044ae <d_print_comp+0x190a>
 8002ecc:	2bff      	cmp	r3, #255	; 0xff
 8002ece:	4619      	mov	r1, r3
 8002ed0:	4620      	mov	r0, r4
 8002ed2:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8002ed6:	d0e2      	beq.n	8002e9e <d_print_comp+0x2fa>
 8002ed8:	461a      	mov	r2, r3
 8002eda:	3301      	adds	r3, #1
 8002edc:	e7ed      	b.n	8002eba <d_print_comp+0x316>
 8002ede:	4f57      	ldr	r7, [pc, #348]	; (800303c <d_print_comp+0x498>)
 8002ee0:	68aa      	ldr	r2, [r5, #8]
 8002ee2:	4631      	mov	r1, r6
 8002ee4:	4620      	mov	r0, r4
 8002ee6:	f7ff fe5d 	bl	8002ba4 <d_print_comp>
 8002eea:	f107 0805 	add.w	r8, r7, #5
 8002eee:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002ef2:	f04f 0900 	mov.w	r9, #0
 8002ef6:	e016      	b.n	8002f26 <d_print_comp+0x382>
 8002ef8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002efc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002f00:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002f04:	4798      	blx	r3
 8002f06:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002f10:	2200      	movs	r2, #0
 8002f12:	2301      	movs	r3, #1
 8002f14:	45b8      	cmp	r8, r7
 8002f16:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002f1a:	f804 a002 	strb.w	sl, [r4, r2]
 8002f1e:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8002f22:	f001 827c 	beq.w	800441e <d_print_comp+0x187a>
 8002f26:	2bff      	cmp	r3, #255	; 0xff
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4620      	mov	r0, r4
 8002f2c:	f817 ab01 	ldrb.w	sl, [r7], #1
 8002f30:	d0e2      	beq.n	8002ef8 <d_print_comp+0x354>
 8002f32:	461a      	mov	r2, r3
 8002f34:	3301      	adds	r3, #1
 8002f36:	e7ed      	b.n	8002f14 <d_print_comp+0x370>
 8002f38:	4f41      	ldr	r7, [pc, #260]	; (8003040 <d_print_comp+0x49c>)
 8002f3a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002f3e:	f107 0816 	add.w	r8, r7, #22
 8002f42:	f04f 0900 	mov.w	r9, #0
 8002f46:	e016      	b.n	8002f76 <d_print_comp+0x3d2>
 8002f48:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002f4c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002f50:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002f54:	4798      	blx	r3
 8002f56:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002f60:	2200      	movs	r2, #0
 8002f62:	2301      	movs	r3, #1
 8002f64:	45b8      	cmp	r8, r7
 8002f66:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002f6a:	f804 a002 	strb.w	sl, [r4, r2]
 8002f6e:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8002f72:	f001 81f4 	beq.w	800435e <d_print_comp+0x17ba>
 8002f76:	2bff      	cmp	r3, #255	; 0xff
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4620      	mov	r0, r4
 8002f7c:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8002f80:	d0e2      	beq.n	8002f48 <d_print_comp+0x3a4>
 8002f82:	461a      	mov	r2, r3
 8002f84:	3301      	adds	r3, #1
 8002f86:	e7ed      	b.n	8002f64 <d_print_comp+0x3c0>
 8002f88:	4e2e      	ldr	r6, [pc, #184]	; (8003044 <d_print_comp+0x4a0>)
 8002f8a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002f8e:	f106 070e 	add.w	r7, r6, #14
 8002f92:	f04f 0800 	mov.w	r8, #0
 8002f96:	e016      	b.n	8002fc6 <d_print_comp+0x422>
 8002f98:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002f9c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002fa0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8002fa4:	4798      	blx	r3
 8002fa6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002faa:	3301      	adds	r3, #1
 8002fac:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	42b7      	cmp	r7, r6
 8002fb6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002fba:	f804 9002 	strb.w	r9, [r4, r2]
 8002fbe:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 8002fc2:	f001 81d5 	beq.w	8004370 <d_print_comp+0x17cc>
 8002fc6:	2bff      	cmp	r3, #255	; 0xff
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4620      	mov	r0, r4
 8002fcc:	f816 9f01 	ldrb.w	r9, [r6, #1]!
 8002fd0:	d0e2      	beq.n	8002f98 <d_print_comp+0x3f4>
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	e7ed      	b.n	8002fb4 <d_print_comp+0x410>
 8002fd8:	4f1b      	ldr	r7, [pc, #108]	; (8003048 <d_print_comp+0x4a4>)
 8002fda:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002fde:	f107 0808 	add.w	r8, r7, #8
 8002fe2:	f04f 0900 	mov.w	r9, #0
 8002fe6:	e016      	b.n	8003016 <d_print_comp+0x472>
 8002fe8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002fec:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002ff0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002ff4:	4798      	blx	r3
 8002ff6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003000:	2200      	movs	r2, #0
 8003002:	2301      	movs	r3, #1
 8003004:	45b8      	cmp	r8, r7
 8003006:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800300a:	f804 a002 	strb.w	sl, [r4, r2]
 800300e:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003012:	f001 8114 	beq.w	800423e <d_print_comp+0x169a>
 8003016:	2bff      	cmp	r3, #255	; 0xff
 8003018:	4619      	mov	r1, r3
 800301a:	4620      	mov	r0, r4
 800301c:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003020:	d0e2      	beq.n	8002fe8 <d_print_comp+0x444>
 8003022:	461a      	mov	r2, r3
 8003024:	3301      	adds	r3, #1
 8003026:	e7ed      	b.n	8003004 <d_print_comp+0x460>
 8003028:	08034dbc 	.word	0x08034dbc
 800302c:	08034fbc 	.word	0x08034fbc
 8003030:	08035077 	.word	0x08035077
 8003034:	08034f90 	.word	0x08034f90
 8003038:	08034f5b 	.word	0x08034f5b
 800303c:	08034dfc 	.word	0x08034dfc
 8003040:	08034f5f 	.word	0x08034f5f
 8003044:	08035067 	.word	0x08035067
 8003048:	08035057 	.word	0x08035057
 800304c:	4fb9      	ldr	r7, [pc, #740]	; (8003334 <d_print_comp+0x790>)
 800304e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003052:	f107 081c 	add.w	r8, r7, #28
 8003056:	f04f 0900 	mov.w	r9, #0
 800305a:	e016      	b.n	800308a <d_print_comp+0x4e6>
 800305c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003060:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003064:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003068:	4798      	blx	r3
 800306a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800306e:	3301      	adds	r3, #1
 8003070:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003074:	2200      	movs	r2, #0
 8003076:	2301      	movs	r3, #1
 8003078:	45b8      	cmp	r8, r7
 800307a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800307e:	f804 a002 	strb.w	sl, [r4, r2]
 8003082:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003086:	f001 810f 	beq.w	80042a8 <d_print_comp+0x1704>
 800308a:	2bff      	cmp	r3, #255	; 0xff
 800308c:	4619      	mov	r1, r3
 800308e:	4620      	mov	r0, r4
 8003090:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003094:	d0e2      	beq.n	800305c <d_print_comp+0x4b8>
 8003096:	461a      	mov	r2, r3
 8003098:	3301      	adds	r3, #1
 800309a:	e7ed      	b.n	8003078 <d_print_comp+0x4d4>
 800309c:	4fa6      	ldr	r7, [pc, #664]	; (8003338 <d_print_comp+0x794>)
 800309e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80030a2:	f107 081d 	add.w	r8, r7, #29
 80030a6:	f04f 0900 	mov.w	r9, #0
 80030aa:	e016      	b.n	80030da <d_print_comp+0x536>
 80030ac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80030b0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80030b4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80030b8:	4798      	blx	r3
 80030ba:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80030be:	3301      	adds	r3, #1
 80030c0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80030c4:	2200      	movs	r2, #0
 80030c6:	2301      	movs	r3, #1
 80030c8:	4547      	cmp	r7, r8
 80030ca:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80030ce:	f804 a002 	strb.w	sl, [r4, r2]
 80030d2:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80030d6:	f001 8083 	beq.w	80041e0 <d_print_comp+0x163c>
 80030da:	2bff      	cmp	r3, #255	; 0xff
 80030dc:	4619      	mov	r1, r3
 80030de:	4620      	mov	r0, r4
 80030e0:	f817 af01 	ldrb.w	sl, [r7, #1]!
 80030e4:	d0e2      	beq.n	80030ac <d_print_comp+0x508>
 80030e6:	461a      	mov	r2, r3
 80030e8:	3301      	adds	r3, #1
 80030ea:	e7ed      	b.n	80030c8 <d_print_comp+0x524>
 80030ec:	4f93      	ldr	r7, [pc, #588]	; (800333c <d_print_comp+0x798>)
 80030ee:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80030f2:	f107 080a 	add.w	r8, r7, #10
 80030f6:	f04f 0900 	mov.w	r9, #0
 80030fa:	e016      	b.n	800312a <d_print_comp+0x586>
 80030fc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003100:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003104:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003108:	4798      	blx	r3
 800310a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800310e:	3301      	adds	r3, #1
 8003110:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003114:	2200      	movs	r2, #0
 8003116:	2301      	movs	r3, #1
 8003118:	45b8      	cmp	r8, r7
 800311a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800311e:	f804 a002 	strb.w	sl, [r4, r2]
 8003122:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003126:	f001 8064 	beq.w	80041f2 <d_print_comp+0x164e>
 800312a:	2bff      	cmp	r3, #255	; 0xff
 800312c:	4619      	mov	r1, r3
 800312e:	4620      	mov	r0, r4
 8003130:	f817 ab01 	ldrb.w	sl, [r7], #1
 8003134:	d0e2      	beq.n	80030fc <d_print_comp+0x558>
 8003136:	461a      	mov	r2, r3
 8003138:	3301      	adds	r3, #1
 800313a:	e7ed      	b.n	8003118 <d_print_comp+0x574>
 800313c:	a808      	add	r0, sp, #32
 800313e:	68aa      	ldr	r2, [r5, #8]
 8003140:	497f      	ldr	r1, [pc, #508]	; (8003340 <d_print_comp+0x79c>)
 8003142:	f02b fe3f 	bl	802edc4 <siprintf>
 8003146:	a808      	add	r0, sp, #32
 8003148:	f003 fdca 	bl	8006ce0 <strlen>
 800314c:	2800      	cmp	r0, #0
 800314e:	f001 81b7 	beq.w	80044c0 <d_print_comp+0x191c>
 8003152:	ae08      	add	r6, sp, #32
 8003154:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003158:	1837      	adds	r7, r6, r0
 800315a:	f04f 0800 	mov.w	r8, #0
 800315e:	e016      	b.n	800318e <d_print_comp+0x5ea>
 8003160:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003164:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003168:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800316c:	4798      	blx	r3
 800316e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003172:	3301      	adds	r3, #1
 8003174:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003178:	2200      	movs	r2, #0
 800317a:	2301      	movs	r3, #1
 800317c:	42be      	cmp	r6, r7
 800317e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003182:	f804 9002 	strb.w	r9, [r4, r2]
 8003186:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 800318a:	f001 8199 	beq.w	80044c0 <d_print_comp+0x191c>
 800318e:	2bff      	cmp	r3, #255	; 0xff
 8003190:	4619      	mov	r1, r3
 8003192:	4620      	mov	r0, r4
 8003194:	f816 9b01 	ldrb.w	r9, [r6], #1
 8003198:	d0e2      	beq.n	8003160 <d_print_comp+0x5bc>
 800319a:	461a      	mov	r2, r3
 800319c:	3301      	adds	r3, #1
 800319e:	e7ed      	b.n	800317c <d_print_comp+0x5d8>
 80031a0:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80031a4:	f895 8008 	ldrb.w	r8, [r5, #8]
 80031a8:	2fff      	cmp	r7, #255	; 0xff
 80031aa:	d111      	bne.n	80031d0 <d_print_comp+0x62c>
 80031ac:	2600      	movs	r6, #0
 80031ae:	4639      	mov	r1, r7
 80031b0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80031b4:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80031b8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80031bc:	4620      	mov	r0, r4
 80031be:	4798      	blx	r3
 80031c0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80031c4:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80031c8:	3301      	adds	r3, #1
 80031ca:	4637      	mov	r7, r6
 80031cc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80031d0:	1c7b      	adds	r3, r7, #1
 80031d2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80031d6:	f804 8007 	strb.w	r8, [r4, r7]
 80031da:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80031de:	686a      	ldr	r2, [r5, #4]
 80031e0:	9905      	ldr	r1, [sp, #20]
 80031e2:	e5d2      	b.n	8002d8a <d_print_comp+0x1e6>
 80031e4:	68aa      	ldr	r2, [r5, #8]
 80031e6:	4631      	mov	r1, r6
 80031e8:	4620      	mov	r0, r4
 80031ea:	f7ff fcdb 	bl	8002ba4 <d_print_comp>
 80031ee:	4631      	mov	r1, r6
 80031f0:	68ea      	ldr	r2, [r5, #12]
 80031f2:	4620      	mov	r0, r4
 80031f4:	f7ff fcd6 	bl	8002ba4 <d_print_comp>
 80031f8:	9905      	ldr	r1, [sp, #20]
 80031fa:	686a      	ldr	r2, [r5, #4]
 80031fc:	e5c5      	b.n	8002d8a <d_print_comp+0x1e6>
 80031fe:	4f51      	ldr	r7, [pc, #324]	; (8003344 <d_print_comp+0x7a0>)
 8003200:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003204:	f107 080e 	add.w	r8, r7, #14
 8003208:	f04f 0900 	mov.w	r9, #0
 800320c:	e016      	b.n	800323c <d_print_comp+0x698>
 800320e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003212:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003216:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800321a:	4798      	blx	r3
 800321c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003220:	3301      	adds	r3, #1
 8003222:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003226:	2200      	movs	r2, #0
 8003228:	2301      	movs	r3, #1
 800322a:	45b8      	cmp	r8, r7
 800322c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003230:	f804 a002 	strb.w	sl, [r4, r2]
 8003234:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003238:	f001 8146 	beq.w	80044c8 <d_print_comp+0x1924>
 800323c:	2bff      	cmp	r3, #255	; 0xff
 800323e:	4619      	mov	r1, r3
 8003240:	4620      	mov	r0, r4
 8003242:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003246:	d0e2      	beq.n	800320e <d_print_comp+0x66a>
 8003248:	461a      	mov	r2, r3
 800324a:	3301      	adds	r3, #1
 800324c:	e7ed      	b.n	800322a <d_print_comp+0x686>
 800324e:	68ab      	ldr	r3, [r5, #8]
 8003250:	781a      	ldrb	r2, [r3, #0]
 8003252:	2a27      	cmp	r2, #39	; 0x27
 8003254:	f001 8572 	beq.w	8004d3c <d_print_comp+0x2198>
 8003258:	f04f 0800 	mov.w	r8, #0
 800325c:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003260:	2fff      	cmp	r7, #255	; 0xff
 8003262:	d112      	bne.n	800328a <d_print_comp+0x6e6>
 8003264:	f04f 0900 	mov.w	r9, #0
 8003268:	4639      	mov	r1, r7
 800326a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800326e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003272:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003276:	4620      	mov	r0, r4
 8003278:	4798      	blx	r3
 800327a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800327e:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 8003282:	3301      	adds	r3, #1
 8003284:	464f      	mov	r7, r9
 8003286:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800328a:	2328      	movs	r3, #40	; 0x28
 800328c:	1c7a      	adds	r2, r7, #1
 800328e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003292:	55e3      	strb	r3, [r4, r7]
 8003294:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003298:	68aa      	ldr	r2, [r5, #8]
 800329a:	4631      	mov	r1, r6
 800329c:	4620      	mov	r0, r4
 800329e:	f7ff fc81 	bl	8002ba4 <d_print_comp>
 80032a2:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80032a6:	2bff      	cmp	r3, #255	; 0xff
 80032a8:	f041 85b8 	bne.w	8004e1c <d_print_comp+0x2278>
 80032ac:	2200      	movs	r2, #0
 80032ae:	4619      	mov	r1, r3
 80032b0:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 80032b4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80032b8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80032bc:	4620      	mov	r0, r4
 80032be:	4798      	blx	r3
 80032c0:	2329      	movs	r3, #41	; 0x29
 80032c2:	7023      	strb	r3, [r4, #0]
 80032c4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80032c8:	782a      	ldrb	r2, [r5, #0]
 80032ca:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80032ce:	2101      	movs	r1, #1
 80032d0:	3301      	adds	r3, #1
 80032d2:	2a3d      	cmp	r2, #61	; 0x3d
 80032d4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80032d8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80032dc:	f001 85bb 	beq.w	8004e56 <d_print_comp+0x22b2>
 80032e0:	f1b8 0f08 	cmp.w	r8, #8
 80032e4:	f001 8556 	beq.w	8004d94 <d_print_comp+0x21f0>
 80032e8:	4631      	mov	r1, r6
 80032ea:	68ea      	ldr	r2, [r5, #12]
 80032ec:	4620      	mov	r0, r4
 80032ee:	f7ff fc59 	bl	8002ba4 <d_print_comp>
 80032f2:	9905      	ldr	r1, [sp, #20]
 80032f4:	686a      	ldr	r2, [r5, #4]
 80032f6:	e548      	b.n	8002d8a <d_print_comp+0x1e6>
 80032f8:	2301      	movs	r3, #1
 80032fa:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80032fe:	686a      	ldr	r2, [r5, #4]
 8003300:	e543      	b.n	8002d8a <d_print_comp+0x1e6>
 8003302:	68eb      	ldr	r3, [r5, #12]
 8003304:	781a      	ldrb	r2, [r3, #0]
 8003306:	2a3a      	cmp	r2, #58	; 0x3a
 8003308:	f001 8405 	beq.w	8004b16 <d_print_comp+0x1f72>
 800330c:	2301      	movs	r3, #1
 800330e:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8003312:	686a      	ldr	r2, [r5, #4]
 8003314:	e539      	b.n	8002d8a <d_print_comp+0x1e6>
 8003316:	2301      	movs	r3, #1
 8003318:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 800331c:	686a      	ldr	r2, [r5, #4]
 800331e:	e534      	b.n	8002d8a <d_print_comp+0x1e6>
 8003320:	68eb      	ldr	r3, [r5, #12]
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	2b38      	cmp	r3, #56	; 0x38
 8003326:	f43f acaf 	beq.w	8002c88 <d_print_comp+0xe4>
 800332a:	2301      	movs	r3, #1
 800332c:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8003330:	686a      	ldr	r2, [r5, #4]
 8003332:	e52a      	b.n	8002d8a <d_print_comp+0x1e6>
 8003334:	08035037 	.word	0x08035037
 8003338:	08035017 	.word	0x08035017
 800333c:	08034ff8 	.word	0x08034ff8
 8003340:	08034db4 	.word	0x08034db4
 8003344:	08034fe7 	.word	0x08034fe7
 8003348:	e9d5 9802 	ldrd	r9, r8, [r5, #8]
 800334c:	f899 3000 	ldrb.w	r3, [r9]
 8003350:	2b31      	cmp	r3, #49	; 0x31
 8003352:	f001 843a 	beq.w	8004bca <d_print_comp+0x2026>
 8003356:	2b33      	cmp	r3, #51	; 0x33
 8003358:	f042 8192 	bne.w	8005680 <d_print_comp+0x2adc>
 800335c:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003360:	2fff      	cmp	r7, #255	; 0xff
 8003362:	d112      	bne.n	800338a <d_print_comp+0x7e6>
 8003364:	f04f 0a00 	mov.w	sl, #0
 8003368:	4639      	mov	r1, r7
 800336a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800336e:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8003372:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003376:	4620      	mov	r0, r4
 8003378:	4798      	blx	r3
 800337a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800337e:	f8c4 a100 	str.w	sl, [r4, #256]	; 0x100
 8003382:	3301      	adds	r3, #1
 8003384:	4657      	mov	r7, sl
 8003386:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800338a:	1c7a      	adds	r2, r7, #1
 800338c:	2328      	movs	r3, #40	; 0x28
 800338e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003392:	55e3      	strb	r3, [r4, r7]
 8003394:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003398:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800339c:	4631      	mov	r1, r6
 800339e:	4620      	mov	r0, r4
 80033a0:	f7ff fc00 	bl	8002ba4 <d_print_comp>
 80033a4:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80033a8:	2fff      	cmp	r7, #255	; 0xff
 80033aa:	d112      	bne.n	80033d2 <d_print_comp+0x82e>
 80033ac:	f04f 0900 	mov.w	r9, #0
 80033b0:	4639      	mov	r1, r7
 80033b2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80033b6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80033ba:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80033be:	4620      	mov	r0, r4
 80033c0:	4798      	blx	r3
 80033c2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80033c6:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 80033ca:	3301      	adds	r3, #1
 80033cc:	464f      	mov	r7, r9
 80033ce:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80033d2:	2329      	movs	r3, #41	; 0x29
 80033d4:	1c7a      	adds	r2, r7, #1
 80033d6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80033da:	55e3      	strb	r3, [r4, r7]
 80033dc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80033e0:	4642      	mov	r2, r8
 80033e2:	4631      	mov	r1, r6
 80033e4:	4620      	mov	r0, r4
 80033e6:	f003 f8e5 	bl	80065b4 <d_print_subexpr>
 80033ea:	9905      	ldr	r1, [sp, #20]
 80033ec:	686a      	ldr	r2, [r5, #4]
 80033ee:	e4cc      	b.n	8002d8a <d_print_comp+0x1e6>
 80033f0:	4631      	mov	r1, r6
 80033f2:	68aa      	ldr	r2, [r5, #8]
 80033f4:	4620      	mov	r0, r4
 80033f6:	f003 f89d 	bl	8006534 <d_print_expr_op>
 80033fa:	9905      	ldr	r1, [sp, #20]
 80033fc:	686a      	ldr	r2, [r5, #4]
 80033fe:	e4c4      	b.n	8002d8a <d_print_comp+0x1e6>
 8003400:	4fd2      	ldr	r7, [pc, #840]	; (800374c <d_print_comp+0xba8>)
 8003402:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003406:	f107 0809 	add.w	r8, r7, #9
 800340a:	f04f 0900 	mov.w	r9, #0
 800340e:	e016      	b.n	800343e <d_print_comp+0x89a>
 8003410:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003414:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003418:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800341c:	4798      	blx	r3
 800341e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003422:	3301      	adds	r3, #1
 8003424:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003428:	2200      	movs	r2, #0
 800342a:	2301      	movs	r3, #1
 800342c:	45b8      	cmp	r8, r7
 800342e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003432:	f804 a002 	strb.w	sl, [r4, r2]
 8003436:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 800343a:	f001 8057 	beq.w	80044ec <d_print_comp+0x1948>
 800343e:	2bff      	cmp	r3, #255	; 0xff
 8003440:	4619      	mov	r1, r3
 8003442:	4620      	mov	r0, r4
 8003444:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003448:	d0e2      	beq.n	8003410 <d_print_comp+0x86c>
 800344a:	461a      	mov	r2, r3
 800344c:	3301      	adds	r3, #1
 800344e:	e7ed      	b.n	800342c <d_print_comp+0x888>
 8003450:	4fbe      	ldr	r7, [pc, #760]	; (800374c <d_print_comp+0xba8>)
 8003452:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003456:	f107 0809 	add.w	r8, r7, #9
 800345a:	f04f 0900 	mov.w	r9, #0
 800345e:	e016      	b.n	800348e <d_print_comp+0x8ea>
 8003460:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003464:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003468:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800346c:	4798      	blx	r3
 800346e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003472:	3301      	adds	r3, #1
 8003474:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003478:	2200      	movs	r2, #0
 800347a:	2301      	movs	r3, #1
 800347c:	45b8      	cmp	r8, r7
 800347e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003482:	f804 a002 	strb.w	sl, [r4, r2]
 8003486:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 800348a:	f001 8026 	beq.w	80044da <d_print_comp+0x1936>
 800348e:	2bff      	cmp	r3, #255	; 0xff
 8003490:	4619      	mov	r1, r3
 8003492:	4620      	mov	r0, r4
 8003494:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003498:	d0e2      	beq.n	8003460 <d_print_comp+0x8bc>
 800349a:	461a      	mov	r2, r3
 800349c:	3301      	adds	r3, #1
 800349e:	e7ed      	b.n	800347c <d_print_comp+0x8d8>
 80034a0:	f8d5 a008 	ldr.w	sl, [r5, #8]
 80034a4:	4eaa      	ldr	r6, [pc, #680]	; (8003750 <d_print_comp+0xbac>)
 80034a6:	f8da 7008 	ldr.w	r7, [sl, #8]
 80034aa:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80034ae:	f106 0808 	add.w	r8, r6, #8
 80034b2:	f04f 0900 	mov.w	r9, #0
 80034b6:	e016      	b.n	80034e6 <d_print_comp+0x942>
 80034b8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80034bc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80034c0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80034c4:	4798      	blx	r3
 80034c6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80034ca:	3301      	adds	r3, #1
 80034cc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80034d0:	2200      	movs	r2, #0
 80034d2:	2301      	movs	r3, #1
 80034d4:	4546      	cmp	r6, r8
 80034d6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80034da:	f804 b002 	strb.w	fp, [r4, r2]
 80034de:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 80034e2:	f001 8021 	beq.w	8004528 <d_print_comp+0x1984>
 80034e6:	2bff      	cmp	r3, #255	; 0xff
 80034e8:	4619      	mov	r1, r3
 80034ea:	4620      	mov	r0, r4
 80034ec:	f816 bf01 	ldrb.w	fp, [r6, #1]!
 80034f0:	d0e2      	beq.n	80034b8 <d_print_comp+0x914>
 80034f2:	461a      	mov	r2, r3
 80034f4:	3301      	adds	r3, #1
 80034f6:	e7ed      	b.n	80034d4 <d_print_comp+0x930>
 80034f8:	e9d5 2802 	ldrd	r2, r8, [r5, #8]
 80034fc:	b11a      	cbz	r2, 8003506 <d_print_comp+0x962>
 80034fe:	4631      	mov	r1, r6
 8003500:	4620      	mov	r0, r4
 8003502:	f7ff fb4f 	bl	8002ba4 <d_print_comp>
 8003506:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800350a:	2fff      	cmp	r7, #255	; 0xff
 800350c:	d112      	bne.n	8003534 <d_print_comp+0x990>
 800350e:	f04f 0900 	mov.w	r9, #0
 8003512:	4639      	mov	r1, r7
 8003514:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003518:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800351c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003520:	4620      	mov	r0, r4
 8003522:	4798      	blx	r3
 8003524:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003528:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 800352c:	3301      	adds	r3, #1
 800352e:	464f      	mov	r7, r9
 8003530:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003534:	1c78      	adds	r0, r7, #1
 8003536:	237b      	movs	r3, #123	; 0x7b
 8003538:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 800353c:	4642      	mov	r2, r8
 800353e:	55e3      	strb	r3, [r4, r7]
 8003540:	4631      	mov	r1, r6
 8003542:	4620      	mov	r0, r4
 8003544:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003548:	f7ff fb2c 	bl	8002ba4 <d_print_comp>
 800354c:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003550:	2fff      	cmp	r7, #255	; 0xff
 8003552:	d111      	bne.n	8003578 <d_print_comp+0x9d4>
 8003554:	2600      	movs	r6, #0
 8003556:	4639      	mov	r1, r7
 8003558:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800355c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8003560:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003564:	4620      	mov	r0, r4
 8003566:	4798      	blx	r3
 8003568:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800356c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8003570:	3301      	adds	r3, #1
 8003572:	4637      	mov	r7, r6
 8003574:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003578:	1c7a      	adds	r2, r7, #1
 800357a:	237d      	movs	r3, #125	; 0x7d
 800357c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003580:	55e3      	strb	r3, [r4, r7]
 8003582:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003586:	686a      	ldr	r2, [r5, #4]
 8003588:	9905      	ldr	r1, [sp, #20]
 800358a:	f7ff bbfe 	b.w	8002d8a <d_print_comp+0x1e6>
 800358e:	68aa      	ldr	r2, [r5, #8]
 8003590:	b11a      	cbz	r2, 800359a <d_print_comp+0x9f6>
 8003592:	4631      	mov	r1, r6
 8003594:	4620      	mov	r0, r4
 8003596:	f7ff fb05 	bl	8002ba4 <d_print_comp>
 800359a:	68eb      	ldr	r3, [r5, #12]
 800359c:	2b00      	cmp	r3, #0
 800359e:	f001 853d 	beq.w	800501c <d_print_comp+0x2478>
 80035a2:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80035a6:	2ffd      	cmp	r7, #253	; 0xfd
 80035a8:	d912      	bls.n	80035d0 <d_print_comp+0xa2c>
 80035aa:	f04f 0800 	mov.w	r8, #0
 80035ae:	f804 8007 	strb.w	r8, [r4, r7]
 80035b2:	4639      	mov	r1, r7
 80035b4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80035b8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80035bc:	4620      	mov	r0, r4
 80035be:	4798      	blx	r3
 80035c0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80035c4:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 80035c8:	3301      	adds	r3, #1
 80035ca:	4647      	mov	r7, r8
 80035cc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80035d0:	f8df 8188 	ldr.w	r8, [pc, #392]	; 800375c <d_print_comp+0xbb8>
 80035d4:	f04f 0a00 	mov.w	sl, #0
 80035d8:	f108 0b02 	add.w	fp, r8, #2
 80035dc:	e016      	b.n	800360c <d_print_comp+0xa68>
 80035de:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80035e2:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 80035e6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80035ea:	4798      	blx	r3
 80035ec:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80035f0:	3301      	adds	r3, #1
 80035f2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80035f6:	2701      	movs	r7, #1
 80035f8:	2300      	movs	r3, #0
 80035fa:	45c3      	cmp	fp, r8
 80035fc:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 8003600:	f804 9003 	strb.w	r9, [r4, r3]
 8003604:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 8003608:	f001 80cf 	beq.w	80047aa <d_print_comp+0x1c06>
 800360c:	2fff      	cmp	r7, #255	; 0xff
 800360e:	4639      	mov	r1, r7
 8003610:	4620      	mov	r0, r4
 8003612:	f818 9b01 	ldrb.w	r9, [r8], #1
 8003616:	d0e2      	beq.n	80035de <d_print_comp+0xa3a>
 8003618:	463b      	mov	r3, r7
 800361a:	3701      	adds	r7, #1
 800361c:	e7ed      	b.n	80035fa <d_print_comp+0xa56>
 800361e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003622:	2b00      	cmp	r3, #0
 8003624:	f041 84a0 	bne.w	8004f68 <d_print_comp+0x23c4>
 8003628:	68aa      	ldr	r2, [r5, #8]
 800362a:	4b4a      	ldr	r3, [pc, #296]	; (8003754 <d_print_comp+0xbb0>)
 800362c:	6891      	ldr	r1, [r2, #8]
 800362e:	4299      	cmp	r1, r3
 8003630:	d020      	beq.n	8003674 <d_print_comp+0xad0>
 8003632:	4631      	mov	r1, r6
 8003634:	4620      	mov	r0, r4
 8003636:	f7ff fab5 	bl	8002ba4 <d_print_comp>
 800363a:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800363e:	2fff      	cmp	r7, #255	; 0xff
 8003640:	d111      	bne.n	8003666 <d_print_comp+0xac2>
 8003642:	2600      	movs	r6, #0
 8003644:	4639      	mov	r1, r7
 8003646:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800364a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800364e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003652:	4620      	mov	r0, r4
 8003654:	4798      	blx	r3
 8003656:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800365a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800365e:	3301      	adds	r3, #1
 8003660:	4637      	mov	r7, r6
 8003662:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003666:	2320      	movs	r3, #32
 8003668:	1c7a      	adds	r2, r7, #1
 800366a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800366e:	55e3      	strb	r3, [r4, r7]
 8003670:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003674:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
 8003678:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800367c:	2a00      	cmp	r2, #0
 800367e:	f001 80a6 	beq.w	80047ce <d_print_comp+0x1c2a>
 8003682:	4e35      	ldr	r6, [pc, #212]	; (8003758 <d_print_comp+0xbb4>)
 8003684:	f04f 0800 	mov.w	r8, #0
 8003688:	f106 0906 	add.w	r9, r6, #6
 800368c:	e015      	b.n	80036ba <d_print_comp+0xb16>
 800368e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003692:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003696:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800369a:	4798      	blx	r3
 800369c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80036a0:	3301      	adds	r3, #1
 80036a2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80036a6:	2200      	movs	r2, #0
 80036a8:	2301      	movs	r3, #1
 80036aa:	45b1      	cmp	r9, r6
 80036ac:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80036b0:	54a7      	strb	r7, [r4, r2]
 80036b2:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80036b6:	f001 8183 	beq.w	80049c0 <d_print_comp+0x1e1c>
 80036ba:	2bff      	cmp	r3, #255	; 0xff
 80036bc:	4619      	mov	r1, r3
 80036be:	4620      	mov	r0, r4
 80036c0:	f816 7b01 	ldrb.w	r7, [r6], #1
 80036c4:	d0e3      	beq.n	800368e <d_print_comp+0xaea>
 80036c6:	461a      	mov	r2, r3
 80036c8:	3301      	adds	r3, #1
 80036ca:	e7ee      	b.n	80036aa <d_print_comp+0xb06>
 80036cc:	ab18      	add	r3, sp, #96	; 0x60
 80036ce:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
 80036d2:	f843 2d40 	str.w	r2, [r3, #-64]!
 80036d6:	2000      	movs	r0, #0
 80036d8:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 80036dc:	900a      	str	r0, [sp, #40]	; 0x28
 80036de:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80036e2:	68ea      	ldr	r2, [r5, #12]
 80036e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80036e6:	4631      	mov	r1, r6
 80036e8:	4620      	mov	r0, r4
 80036ea:	9509      	str	r5, [sp, #36]	; 0x24
 80036ec:	f7ff fa5a 	bl	8002ba4 <d_print_comp>
 80036f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80036f2:	b923      	cbnz	r3, 80036fe <d_print_comp+0xb5a>
 80036f4:	4631      	mov	r1, r6
 80036f6:	462a      	mov	r2, r5
 80036f8:	4620      	mov	r0, r4
 80036fa:	f002 f8e9 	bl	80058d0 <d_print_mod>
 80036fe:	9b08      	ldr	r3, [sp, #32]
 8003700:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003704:	9905      	ldr	r1, [sp, #20]
 8003706:	686a      	ldr	r2, [r5, #4]
 8003708:	f7ff bb3f 	b.w	8002d8a <d_print_comp+0x1e6>
 800370c:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 8003710:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 8003714:	f849 cd40 	str.w	ip, [r9, #-64]!
 8003718:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 800371c:	f8cd c004 	str.w	ip, [sp, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	4667      	mov	r7, ip
 8003724:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 8003728:	9509      	str	r5, [sp, #36]	; 0x24
 800372a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800372e:	2f00      	cmp	r7, #0
 8003730:	f001 852f 	beq.w	8005192 <d_print_comp+0x25ee>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	3b19      	subs	r3, #25
 800373a:	2b02      	cmp	r3, #2
 800373c:	f201 8529 	bhi.w	8005192 <d_print_comp+0x25ee>
 8003740:	4623      	mov	r3, r4
 8003742:	f04f 0801 	mov.w	r8, #1
 8003746:	464c      	mov	r4, r9
 8003748:	469c      	mov	ip, r3
 800374a:	e00e      	b.n	800376a <d_print_comp+0xbc6>
 800374c:	08034f9f 	.word	0x08034f9f
 8003750:	08034f93 	.word	0x08034f93
 8003754:	0803033c 	.word	0x0803033c
 8003758:	08034f80 	.word	0x08034f80
 800375c:	08034f90 	.word	0x08034f90
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	3b19      	subs	r3, #25
 8003766:	2b02      	cmp	r3, #2
 8003768:	d81d      	bhi.n	80037a6 <d_print_comp+0xc02>
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	ea4f 1e08 	mov.w	lr, r8, lsl #4
 8003770:	aa18      	add	r2, sp, #96	; 0x60
 8003772:	eb02 0b0e 	add.w	fp, r2, lr
 8003776:	b99b      	cbnz	r3, 80037a0 <d_print_comp+0xbfc>
 8003778:	f1b8 0f03 	cmp.w	r8, #3
 800377c:	f201 8517 	bhi.w	80051ae <d_print_comp+0x260a>
 8003780:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8003784:	f1ab 0a40 	sub.w	sl, fp, #64	; 0x40
 8003788:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
 800378c:	f84b 4c40 	str.w	r4, [fp, #-64]
 8003790:	2301      	movs	r3, #1
 8003792:	eb09 040e 	add.w	r4, r9, lr
 8003796:	f8cc 4114 	str.w	r4, [ip, #276]	; 0x114
 800379a:	f108 0801 	add.w	r8, r8, #1
 800379e:	60bb      	str	r3, [r7, #8]
 80037a0:	683f      	ldr	r7, [r7, #0]
 80037a2:	2f00      	cmp	r7, #0
 80037a4:	d1dc      	bne.n	8003760 <d_print_comp+0xbbc>
 80037a6:	68ea      	ldr	r2, [r5, #12]
 80037a8:	4631      	mov	r1, r6
 80037aa:	4660      	mov	r0, ip
 80037ac:	4664      	mov	r4, ip
 80037ae:	f7ff f9f9 	bl	8002ba4 <d_print_comp>
 80037b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037b4:	9a01      	ldr	r2, [sp, #4]
 80037b6:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 80037ba:	b9bb      	cbnz	r3, 80037ec <d_print_comp+0xc48>
 80037bc:	f1b8 0f01 	cmp.w	r8, #1
 80037c0:	d00c      	beq.n	80037dc <d_print_comp+0xc38>
 80037c2:	eb09 1808 	add.w	r8, r9, r8, lsl #4
 80037c6:	af0c      	add	r7, sp, #48	; 0x30
 80037c8:	f858 2c0c 	ldr.w	r2, [r8, #-12]
 80037cc:	4631      	mov	r1, r6
 80037ce:	f1a8 0810 	sub.w	r8, r8, #16
 80037d2:	4620      	mov	r0, r4
 80037d4:	f002 f87c 	bl	80058d0 <d_print_mod>
 80037d8:	4547      	cmp	r7, r8
 80037da:	d1f5      	bne.n	80037c8 <d_print_comp+0xc24>
 80037dc:	4631      	mov	r1, r6
 80037de:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80037e2:	f105 0208 	add.w	r2, r5, #8
 80037e6:	4620      	mov	r0, r4
 80037e8:	f002 fdca 	bl	8006380 <d_print_array_type.isra.14>
 80037ec:	9905      	ldr	r1, [sp, #20]
 80037ee:	686a      	ldr	r2, [r5, #4]
 80037f0:	f7ff bacb 	b.w	8002d8a <d_print_comp+0x1e6>
 80037f4:	06b2      	lsls	r2, r6, #26
 80037f6:	f026 0860 	bic.w	r8, r6, #96	; 0x60
 80037fa:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80037fe:	f101 825a 	bmi.w	8004cb6 <d_print_comp+0x2112>
 8003802:	68aa      	ldr	r2, [r5, #8]
 8003804:	b11a      	cbz	r2, 800380e <d_print_comp+0xc6a>
 8003806:	f016 0640 	ands.w	r6, r6, #64	; 0x40
 800380a:	f001 85c3 	beq.w	8005394 <d_print_comp+0x27f0>
 800380e:	4641      	mov	r1, r8
 8003810:	f105 020c 	add.w	r2, r5, #12
 8003814:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8003818:	4620      	mov	r0, r4
 800381a:	f002 fb87 	bl	8005f2c <d_print_function_type.isra.15>
 800381e:	9905      	ldr	r1, [sp, #20]
 8003820:	686a      	ldr	r2, [r5, #4]
 8003822:	f7ff bab2 	b.w	8002d8a <d_print_comp+0x1e6>
 8003826:	4fcb      	ldr	r7, [pc, #812]	; (8003b54 <d_print_comp+0xfb0>)
 8003828:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800382c:	f107 0815 	add.w	r8, r7, #21
 8003830:	f04f 0900 	mov.w	r9, #0
 8003834:	e016      	b.n	8003864 <d_print_comp+0xcc0>
 8003836:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800383a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800383e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003842:	4798      	blx	r3
 8003844:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003848:	3301      	adds	r3, #1
 800384a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800384e:	2200      	movs	r2, #0
 8003850:	2301      	movs	r3, #1
 8003852:	45b8      	cmp	r8, r7
 8003854:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003858:	f804 a002 	strb.w	sl, [r4, r2]
 800385c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003860:	f000 8789 	beq.w	8004776 <d_print_comp+0x1bd2>
 8003864:	2bff      	cmp	r3, #255	; 0xff
 8003866:	4619      	mov	r1, r3
 8003868:	4620      	mov	r0, r4
 800386a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 800386e:	d0e2      	beq.n	8003836 <d_print_comp+0xc92>
 8003870:	461a      	mov	r2, r3
 8003872:	3301      	adds	r3, #1
 8003874:	e7ed      	b.n	8003852 <d_print_comp+0xcae>
 8003876:	4fb8      	ldr	r7, [pc, #736]	; (8003b58 <d_print_comp+0xfb4>)
 8003878:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800387c:	f107 0810 	add.w	r8, r7, #16
 8003880:	f04f 0900 	mov.w	r9, #0
 8003884:	e016      	b.n	80038b4 <d_print_comp+0xd10>
 8003886:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800388a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800388e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003892:	4798      	blx	r3
 8003894:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003898:	3301      	adds	r3, #1
 800389a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800389e:	2200      	movs	r2, #0
 80038a0:	2301      	movs	r3, #1
 80038a2:	45b8      	cmp	r8, r7
 80038a4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80038a8:	f804 a002 	strb.w	sl, [r4, r2]
 80038ac:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80038b0:	f000 876a 	beq.w	8004788 <d_print_comp+0x1be4>
 80038b4:	2bff      	cmp	r3, #255	; 0xff
 80038b6:	4619      	mov	r1, r3
 80038b8:	4620      	mov	r0, r4
 80038ba:	f817 af01 	ldrb.w	sl, [r7, #1]!
 80038be:	d0e2      	beq.n	8003886 <d_print_comp+0xce2>
 80038c0:	461a      	mov	r2, r3
 80038c2:	3301      	adds	r3, #1
 80038c4:	e7ed      	b.n	80038a2 <d_print_comp+0xcfe>
 80038c6:	4fa5      	ldr	r7, [pc, #660]	; (8003b5c <d_print_comp+0xfb8>)
 80038c8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80038cc:	f107 0812 	add.w	r8, r7, #18
 80038d0:	f04f 0900 	mov.w	r9, #0
 80038d4:	e016      	b.n	8003904 <d_print_comp+0xd60>
 80038d6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80038da:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80038de:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80038e2:	4798      	blx	r3
 80038e4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80038e8:	3301      	adds	r3, #1
 80038ea:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80038ee:	2200      	movs	r2, #0
 80038f0:	2301      	movs	r3, #1
 80038f2:	45b8      	cmp	r8, r7
 80038f4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80038f8:	f804 a002 	strb.w	sl, [r4, r2]
 80038fc:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003900:	f000 8727 	beq.w	8004752 <d_print_comp+0x1bae>
 8003904:	2bff      	cmp	r3, #255	; 0xff
 8003906:	4619      	mov	r1, r3
 8003908:	4620      	mov	r0, r4
 800390a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 800390e:	d0e2      	beq.n	80038d6 <d_print_comp+0xd32>
 8003910:	461a      	mov	r2, r3
 8003912:	3301      	adds	r3, #1
 8003914:	e7ed      	b.n	80038f2 <d_print_comp+0xd4e>
 8003916:	4f92      	ldr	r7, [pc, #584]	; (8003b60 <d_print_comp+0xfbc>)
 8003918:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800391c:	f107 080d 	add.w	r8, r7, #13
 8003920:	f04f 0900 	mov.w	r9, #0
 8003924:	e016      	b.n	8003954 <d_print_comp+0xdb0>
 8003926:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800392a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800392e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003932:	4798      	blx	r3
 8003934:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003938:	3301      	adds	r3, #1
 800393a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800393e:	2200      	movs	r2, #0
 8003940:	2301      	movs	r3, #1
 8003942:	45b8      	cmp	r8, r7
 8003944:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003948:	f804 a002 	strb.w	sl, [r4, r2]
 800394c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003950:	f000 8708 	beq.w	8004764 <d_print_comp+0x1bc0>
 8003954:	2bff      	cmp	r3, #255	; 0xff
 8003956:	4619      	mov	r1, r3
 8003958:	4620      	mov	r0, r4
 800395a:	f817 ab01 	ldrb.w	sl, [r7], #1
 800395e:	d0e2      	beq.n	8003926 <d_print_comp+0xd82>
 8003960:	461a      	mov	r2, r3
 8003962:	3301      	adds	r3, #1
 8003964:	e7ed      	b.n	8003942 <d_print_comp+0xd9e>
 8003966:	4f7f      	ldr	r7, [pc, #508]	; (8003b64 <d_print_comp+0xfc0>)
 8003968:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800396c:	f107 0818 	add.w	r8, r7, #24
 8003970:	f04f 0900 	mov.w	r9, #0
 8003974:	e016      	b.n	80039a4 <d_print_comp+0xe00>
 8003976:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800397a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800397e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003982:	4798      	blx	r3
 8003984:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003988:	3301      	adds	r3, #1
 800398a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800398e:	2200      	movs	r2, #0
 8003990:	2301      	movs	r3, #1
 8003992:	45b8      	cmp	r8, r7
 8003994:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003998:	f804 a002 	strb.w	sl, [r4, r2]
 800399c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80039a0:	f000 8699 	beq.w	80046d6 <d_print_comp+0x1b32>
 80039a4:	2bff      	cmp	r3, #255	; 0xff
 80039a6:	4619      	mov	r1, r3
 80039a8:	4620      	mov	r0, r4
 80039aa:	f817 af01 	ldrb.w	sl, [r7, #1]!
 80039ae:	d0e2      	beq.n	8003976 <d_print_comp+0xdd2>
 80039b0:	461a      	mov	r2, r3
 80039b2:	3301      	adds	r3, #1
 80039b4:	e7ed      	b.n	8003992 <d_print_comp+0xdee>
 80039b6:	4f6c      	ldr	r7, [pc, #432]	; (8003b68 <d_print_comp+0xfc4>)
 80039b8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80039bc:	f107 0808 	add.w	r8, r7, #8
 80039c0:	f04f 0900 	mov.w	r9, #0
 80039c4:	e016      	b.n	80039f4 <d_print_comp+0xe50>
 80039c6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80039ca:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80039ce:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80039d2:	4798      	blx	r3
 80039d4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80039d8:	3301      	adds	r3, #1
 80039da:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80039de:	2200      	movs	r2, #0
 80039e0:	2301      	movs	r3, #1
 80039e2:	45b8      	cmp	r8, r7
 80039e4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80039e8:	f804 a002 	strb.w	sl, [r4, r2]
 80039ec:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80039f0:	f000 86a6 	beq.w	8004740 <d_print_comp+0x1b9c>
 80039f4:	2bff      	cmp	r3, #255	; 0xff
 80039f6:	4619      	mov	r1, r3
 80039f8:	4620      	mov	r0, r4
 80039fa:	f817 af01 	ldrb.w	sl, [r7, #1]!
 80039fe:	d0e2      	beq.n	80039c6 <d_print_comp+0xe22>
 8003a00:	461a      	mov	r2, r3
 8003a02:	3301      	adds	r3, #1
 8003a04:	e7ed      	b.n	80039e2 <d_print_comp+0xe3e>
 8003a06:	4f59      	ldr	r7, [pc, #356]	; (8003b6c <d_print_comp+0xfc8>)
 8003a08:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003a0c:	f107 080b 	add.w	r8, r7, #11
 8003a10:	f04f 0900 	mov.w	r9, #0
 8003a14:	e016      	b.n	8003a44 <d_print_comp+0xea0>
 8003a16:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003a1a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003a1e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003a22:	4798      	blx	r3
 8003a24:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003a28:	3301      	adds	r3, #1
 8003a2a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003a2e:	2200      	movs	r2, #0
 8003a30:	2301      	movs	r3, #1
 8003a32:	45b8      	cmp	r8, r7
 8003a34:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003a38:	f804 a002 	strb.w	sl, [r4, r2]
 8003a3c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003a40:	f000 85cc 	beq.w	80045dc <d_print_comp+0x1a38>
 8003a44:	2bff      	cmp	r3, #255	; 0xff
 8003a46:	4619      	mov	r1, r3
 8003a48:	4620      	mov	r0, r4
 8003a4a:	f817 ab01 	ldrb.w	sl, [r7], #1
 8003a4e:	d0e2      	beq.n	8003a16 <d_print_comp+0xe72>
 8003a50:	461a      	mov	r2, r3
 8003a52:	3301      	adds	r3, #1
 8003a54:	e7ed      	b.n	8003a32 <d_print_comp+0xe8e>
 8003a56:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003a5a:	2fff      	cmp	r7, #255	; 0xff
 8003a5c:	d112      	bne.n	8003a84 <d_print_comp+0xee0>
 8003a5e:	f04f 0800 	mov.w	r8, #0
 8003a62:	4639      	mov	r1, r7
 8003a64:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003a68:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003a6c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003a70:	4620      	mov	r0, r4
 8003a72:	4798      	blx	r3
 8003a74:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003a78:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	4647      	mov	r7, r8
 8003a80:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003a84:	237e      	movs	r3, #126	; 0x7e
 8003a86:	1c7a      	adds	r2, r7, #1
 8003a88:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003a8c:	55e3      	strb	r3, [r4, r7]
 8003a8e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003a92:	4631      	mov	r1, r6
 8003a94:	68ea      	ldr	r2, [r5, #12]
 8003a96:	4620      	mov	r0, r4
 8003a98:	f7ff f884 	bl	8002ba4 <d_print_comp>
 8003a9c:	9905      	ldr	r1, [sp, #20]
 8003a9e:	686a      	ldr	r2, [r5, #4]
 8003aa0:	f7ff b973 	b.w	8002d8a <d_print_comp+0x1e6>
 8003aa4:	4631      	mov	r1, r6
 8003aa6:	68ea      	ldr	r2, [r5, #12]
 8003aa8:	4620      	mov	r0, r4
 8003aaa:	f7ff f87b 	bl	8002ba4 <d_print_comp>
 8003aae:	9905      	ldr	r1, [sp, #20]
 8003ab0:	686a      	ldr	r2, [r5, #4]
 8003ab2:	f7ff b96a 	b.w	8002d8a <d_print_comp+0x1e6>
 8003ab6:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8003aba:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003abe:	f1b8 0f00 	cmp.w	r8, #0
 8003ac2:	f000 878b 	beq.w	80049dc <d_print_comp+0x1e38>
 8003ac6:	4e2a      	ldr	r6, [pc, #168]	; (8003b70 <d_print_comp+0xfcc>)
 8003ac8:	f04f 0900 	mov.w	r9, #0
 8003acc:	f106 0a06 	add.w	sl, r6, #6
 8003ad0:	e015      	b.n	8003afe <d_print_comp+0xf5a>
 8003ad2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003ad6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003ada:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003ade:	4798      	blx	r3
 8003ae0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003aea:	2200      	movs	r2, #0
 8003aec:	2301      	movs	r3, #1
 8003aee:	45b2      	cmp	sl, r6
 8003af0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003af4:	54a7      	strb	r7, [r4, r2]
 8003af6:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003afa:	f000 868f 	beq.w	800481c <d_print_comp+0x1c78>
 8003afe:	2bff      	cmp	r3, #255	; 0xff
 8003b00:	4619      	mov	r1, r3
 8003b02:	4620      	mov	r0, r4
 8003b04:	f816 7b01 	ldrb.w	r7, [r6], #1
 8003b08:	d0e3      	beq.n	8003ad2 <d_print_comp+0xf2e>
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	e7ee      	b.n	8003aee <d_print_comp+0xf4a>
 8003b10:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f040 86d1 	bne.w	80048bc <d_print_comp+0x1d18>
 8003b1a:	f105 0108 	add.w	r1, r5, #8
 8003b1e:	4620      	mov	r0, r4
 8003b20:	f7fc fe4a 	bl	80007b8 <d_lookup_template_argument.isra.10>
 8003b24:	4602      	mov	r2, r0
 8003b26:	2800      	cmp	r0, #0
 8003b28:	f001 8271 	beq.w	800500e <d_print_comp+0x246a>
 8003b2c:	7803      	ldrb	r3, [r0, #0]
 8003b2e:	2b2f      	cmp	r3, #47	; 0x2f
 8003b30:	f001 8262 	beq.w	8004ff8 <d_print_comp+0x2454>
 8003b34:	f8d4 7110 	ldr.w	r7, [r4, #272]	; 0x110
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8003b3e:	4631      	mov	r1, r6
 8003b40:	4620      	mov	r0, r4
 8003b42:	f7ff f82f 	bl	8002ba4 <d_print_comp>
 8003b46:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
 8003b4a:	9905      	ldr	r1, [sp, #20]
 8003b4c:	686a      	ldr	r2, [r5, #4]
 8003b4e:	f7ff b91c 	b.w	8002d8a <d_print_comp+0x1e6>
 8003b52:	bf00      	nop
 8003b54:	08034ea3 	.word	0x08034ea3
 8003b58:	08034e8f 	.word	0x08034e8f
 8003b5c:	08034e7b 	.word	0x08034e7b
 8003b60:	08034e6c 	.word	0x08034e6c
 8003b64:	08034e47 	.word	0x08034e47
 8003b68:	08034e3b 	.word	0x08034e3b
 8003b6c:	08034e30 	.word	0x08034e30
 8003b70:	08035010 	.word	0x08035010
 8003b74:	2300      	movs	r3, #0
 8003b76:	0771      	lsls	r1, r6, #29
 8003b78:	f8d4 9114 	ldr.w	r9, [r4, #276]	; 0x114
 8003b7c:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144
 8003b80:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003b84:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
 8003b88:	68af      	ldr	r7, [r5, #8]
 8003b8a:	d505      	bpl.n	8003b98 <d_print_comp+0xff4>
 8003b8c:	783b      	ldrb	r3, [r7, #0]
 8003b8e:	b91b      	cbnz	r3, 8003b98 <d_print_comp+0xff4>
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	2a06      	cmp	r2, #6
 8003b94:	f001 8433 	beq.w	80053fe <d_print_comp+0x285a>
 8003b98:	463a      	mov	r2, r7
 8003b9a:	4631      	mov	r1, r6
 8003b9c:	4620      	mov	r0, r4
 8003b9e:	f7ff f801 	bl	8002ba4 <d_print_comp>
 8003ba2:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8003ba6:	2b3c      	cmp	r3, #60	; 0x3c
 8003ba8:	f001 8206 	beq.w	8004fb8 <d_print_comp+0x2414>
 8003bac:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003bb0:	2fff      	cmp	r7, #255	; 0xff
 8003bb2:	d112      	bne.n	8003bda <d_print_comp+0x1036>
 8003bb4:	f04f 0a00 	mov.w	sl, #0
 8003bb8:	4639      	mov	r1, r7
 8003bba:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003bbe:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8003bc2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003bc6:	4620      	mov	r0, r4
 8003bc8:	4798      	blx	r3
 8003bca:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003bce:	f8c4 a100 	str.w	sl, [r4, #256]	; 0x100
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	4657      	mov	r7, sl
 8003bd6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003bda:	233c      	movs	r3, #60	; 0x3c
 8003bdc:	1c7a      	adds	r2, r7, #1
 8003bde:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003be2:	55e3      	strb	r3, [r4, r7]
 8003be4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003be8:	4631      	mov	r1, r6
 8003bea:	68ea      	ldr	r2, [r5, #12]
 8003bec:	4620      	mov	r0, r4
 8003bee:	f7fe ffd9 	bl	8002ba4 <d_print_comp>
 8003bf2:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8003bf6:	2b3e      	cmp	r3, #62	; 0x3e
 8003bf8:	f001 806f 	beq.w	8004cda <d_print_comp+0x2136>
 8003bfc:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003c00:	2fff      	cmp	r7, #255	; 0xff
 8003c02:	d111      	bne.n	8003c28 <d_print_comp+0x1084>
 8003c04:	2600      	movs	r6, #0
 8003c06:	4639      	mov	r1, r7
 8003c08:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003c0c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8003c10:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003c14:	4620      	mov	r0, r4
 8003c16:	4798      	blx	r3
 8003c18:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003c1c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8003c20:	3301      	adds	r3, #1
 8003c22:	4637      	mov	r7, r6
 8003c24:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003c28:	233e      	movs	r3, #62	; 0x3e
 8003c2a:	1c7a      	adds	r2, r7, #1
 8003c2c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003c30:	55e3      	strb	r3, [r4, r7]
 8003c32:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003c36:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 8003c3a:	f8c4 8144 	str.w	r8, [r4, #324]	; 0x144
 8003c3e:	9905      	ldr	r1, [sp, #20]
 8003c40:	686a      	ldr	r2, [r5, #4]
 8003c42:	f7ff b8a2 	b.w	8002d8a <d_print_comp+0x1e6>
 8003c46:	4fda      	ldr	r7, [pc, #872]	; (8003fb0 <d_print_comp+0x140c>)
 8003c48:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003c4c:	f107 0811 	add.w	r8, r7, #17
 8003c50:	f04f 0900 	mov.w	r9, #0
 8003c54:	e016      	b.n	8003c84 <d_print_comp+0x10e0>
 8003c56:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003c5a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003c5e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003c62:	4798      	blx	r3
 8003c64:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003c68:	3301      	adds	r3, #1
 8003c6a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003c6e:	2200      	movs	r2, #0
 8003c70:	2301      	movs	r3, #1
 8003c72:	45b8      	cmp	r8, r7
 8003c74:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003c78:	f804 a002 	strb.w	sl, [r4, r2]
 8003c7c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003c80:	f000 84eb 	beq.w	800465a <d_print_comp+0x1ab6>
 8003c84:	2bff      	cmp	r3, #255	; 0xff
 8003c86:	4619      	mov	r1, r3
 8003c88:	4620      	mov	r0, r4
 8003c8a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003c8e:	d0e2      	beq.n	8003c56 <d_print_comp+0x10b2>
 8003c90:	461a      	mov	r2, r3
 8003c92:	3301      	adds	r3, #1
 8003c94:	e7ed      	b.n	8003c72 <d_print_comp+0x10ce>
 8003c96:	4fc7      	ldr	r7, [pc, #796]	; (8003fb4 <d_print_comp+0x1410>)
 8003c98:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003c9c:	f107 0815 	add.w	r8, r7, #21
 8003ca0:	f04f 0900 	mov.w	r9, #0
 8003ca4:	e016      	b.n	8003cd4 <d_print_comp+0x1130>
 8003ca6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003caa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003cae:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003cb2:	4798      	blx	r3
 8003cb4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003cb8:	3301      	adds	r3, #1
 8003cba:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	45b8      	cmp	r8, r7
 8003cc4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003cc8:	f804 a002 	strb.w	sl, [r4, r2]
 8003ccc:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003cd0:	f000 84cc 	beq.w	800466c <d_print_comp+0x1ac8>
 8003cd4:	2bff      	cmp	r3, #255	; 0xff
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	4620      	mov	r0, r4
 8003cda:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003cde:	d0e2      	beq.n	8003ca6 <d_print_comp+0x1102>
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	e7ed      	b.n	8003cc2 <d_print_comp+0x111e>
 8003ce6:	4fb4      	ldr	r7, [pc, #720]	; (8003fb8 <d_print_comp+0x1414>)
 8003ce8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003cec:	f107 0819 	add.w	r8, r7, #25
 8003cf0:	f04f 0900 	mov.w	r9, #0
 8003cf4:	e016      	b.n	8003d24 <d_print_comp+0x1180>
 8003cf6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003cfa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003cfe:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003d02:	4798      	blx	r3
 8003d04:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003d08:	3301      	adds	r3, #1
 8003d0a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003d0e:	2200      	movs	r2, #0
 8003d10:	2301      	movs	r3, #1
 8003d12:	45b8      	cmp	r8, r7
 8003d14:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003d18:	f804 a002 	strb.w	sl, [r4, r2]
 8003d1c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003d20:	f000 8489 	beq.w	8004636 <d_print_comp+0x1a92>
 8003d24:	2bff      	cmp	r3, #255	; 0xff
 8003d26:	4619      	mov	r1, r3
 8003d28:	4620      	mov	r0, r4
 8003d2a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003d2e:	d0e2      	beq.n	8003cf6 <d_print_comp+0x1152>
 8003d30:	461a      	mov	r2, r3
 8003d32:	3301      	adds	r3, #1
 8003d34:	e7ed      	b.n	8003d12 <d_print_comp+0x116e>
 8003d36:	4fa1      	ldr	r7, [pc, #644]	; (8003fbc <d_print_comp+0x1418>)
 8003d38:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003d3c:	f107 0816 	add.w	r8, r7, #22
 8003d40:	f04f 0900 	mov.w	r9, #0
 8003d44:	e016      	b.n	8003d74 <d_print_comp+0x11d0>
 8003d46:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003d4a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003d4e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003d52:	4798      	blx	r3
 8003d54:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003d58:	3301      	adds	r3, #1
 8003d5a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003d5e:	2200      	movs	r2, #0
 8003d60:	2301      	movs	r3, #1
 8003d62:	45b8      	cmp	r8, r7
 8003d64:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003d68:	f804 a002 	strb.w	sl, [r4, r2]
 8003d6c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003d70:	f000 846a 	beq.w	8004648 <d_print_comp+0x1aa4>
 8003d74:	2bff      	cmp	r3, #255	; 0xff
 8003d76:	4619      	mov	r1, r3
 8003d78:	4620      	mov	r0, r4
 8003d7a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003d7e:	d0e2      	beq.n	8003d46 <d_print_comp+0x11a2>
 8003d80:	461a      	mov	r2, r3
 8003d82:	3301      	adds	r3, #1
 8003d84:	e7ed      	b.n	8003d62 <d_print_comp+0x11be>
 8003d86:	4f8e      	ldr	r7, [pc, #568]	; (8003fc0 <d_print_comp+0x141c>)
 8003d88:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003d8c:	f107 0813 	add.w	r8, r7, #19
 8003d90:	f04f 0900 	mov.w	r9, #0
 8003d94:	e016      	b.n	8003dc4 <d_print_comp+0x1220>
 8003d96:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003d9a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003d9e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003da2:	4798      	blx	r3
 8003da4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003da8:	3301      	adds	r3, #1
 8003daa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003dae:	2200      	movs	r2, #0
 8003db0:	2301      	movs	r3, #1
 8003db2:	45b8      	cmp	r8, r7
 8003db4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003db8:	f804 a002 	strb.w	sl, [r4, r2]
 8003dbc:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003dc0:	f000 8427 	beq.w	8004612 <d_print_comp+0x1a6e>
 8003dc4:	2bff      	cmp	r3, #255	; 0xff
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	4620      	mov	r0, r4
 8003dca:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003dce:	d0e2      	beq.n	8003d96 <d_print_comp+0x11f2>
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	e7ed      	b.n	8003db2 <d_print_comp+0x120e>
 8003dd6:	4f7b      	ldr	r7, [pc, #492]	; (8003fc4 <d_print_comp+0x1420>)
 8003dd8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003ddc:	f107 080f 	add.w	r8, r7, #15
 8003de0:	f04f 0900 	mov.w	r9, #0
 8003de4:	e016      	b.n	8003e14 <d_print_comp+0x1270>
 8003de6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003dea:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003dee:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003df2:	4798      	blx	r3
 8003df4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003df8:	3301      	adds	r3, #1
 8003dfa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003dfe:	2200      	movs	r2, #0
 8003e00:	2301      	movs	r3, #1
 8003e02:	45b8      	cmp	r8, r7
 8003e04:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003e08:	f804 a002 	strb.w	sl, [r4, r2]
 8003e0c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003e10:	f000 8408 	beq.w	8004624 <d_print_comp+0x1a80>
 8003e14:	2bff      	cmp	r3, #255	; 0xff
 8003e16:	4619      	mov	r1, r3
 8003e18:	4620      	mov	r0, r4
 8003e1a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003e1e:	d0e2      	beq.n	8003de6 <d_print_comp+0x1242>
 8003e20:	461a      	mov	r2, r3
 8003e22:	3301      	adds	r3, #1
 8003e24:	e7ed      	b.n	8003e02 <d_print_comp+0x125e>
 8003e26:	4f68      	ldr	r7, [pc, #416]	; (8003fc8 <d_print_comp+0x1424>)
 8003e28:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003e2c:	f107 081a 	add.w	r8, r7, #26
 8003e30:	f04f 0900 	mov.w	r9, #0
 8003e34:	e016      	b.n	8003e64 <d_print_comp+0x12c0>
 8003e36:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003e3a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003e3e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003e42:	4798      	blx	r3
 8003e44:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003e48:	3301      	adds	r3, #1
 8003e4a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003e4e:	2200      	movs	r2, #0
 8003e50:	2301      	movs	r3, #1
 8003e52:	45b8      	cmp	r8, r7
 8003e54:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003e58:	f804 a002 	strb.w	sl, [r4, r2]
 8003e5c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003e60:	f000 83c5 	beq.w	80045ee <d_print_comp+0x1a4a>
 8003e64:	2bff      	cmp	r3, #255	; 0xff
 8003e66:	4619      	mov	r1, r3
 8003e68:	4620      	mov	r0, r4
 8003e6a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003e6e:	d0e2      	beq.n	8003e36 <d_print_comp+0x1292>
 8003e70:	461a      	mov	r2, r3
 8003e72:	3301      	adds	r3, #1
 8003e74:	e7ed      	b.n	8003e52 <d_print_comp+0x12ae>
 8003e76:	4f55      	ldr	r7, [pc, #340]	; (8003fcc <d_print_comp+0x1428>)
 8003e78:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003e7c:	f107 0811 	add.w	r8, r7, #17
 8003e80:	f04f 0900 	mov.w	r9, #0
 8003e84:	e016      	b.n	8003eb4 <d_print_comp+0x1310>
 8003e86:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003e8a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003e8e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003e92:	4798      	blx	r3
 8003e94:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003e98:	3301      	adds	r3, #1
 8003e9a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	45b8      	cmp	r8, r7
 8003ea4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003ea8:	f804 a002 	strb.w	sl, [r4, r2]
 8003eac:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003eb0:	f000 83a6 	beq.w	8004600 <d_print_comp+0x1a5c>
 8003eb4:	2bff      	cmp	r3, #255	; 0xff
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	4620      	mov	r0, r4
 8003eba:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003ebe:	d0e2      	beq.n	8003e86 <d_print_comp+0x12e2>
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	e7ed      	b.n	8003ea2 <d_print_comp+0x12fe>
 8003ec6:	f8d4 711c 	ldr.w	r7, [r4, #284]	; 0x11c
 8003eca:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8003ece:	2f00      	cmp	r7, #0
 8003ed0:	f040 85ae 	bne.w	8004a30 <d_print_comp+0x1e8c>
 8003ed4:	f899 2000 	ldrb.w	r2, [r9]
 8003ed8:	2a05      	cmp	r2, #5
 8003eda:	f001 8180 	beq.w	80051de <d_print_comp+0x263a>
 8003ede:	f899 3000 	ldrb.w	r3, [r9]
 8003ee2:	2b23      	cmp	r3, #35	; 0x23
 8003ee4:	f000 85a0 	beq.w	8004a28 <d_print_comp+0x1e84>
 8003ee8:	782a      	ldrb	r2, [r5, #0]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	f000 859c 	beq.w	8004a28 <d_print_comp+0x1e84>
 8003ef0:	2b24      	cmp	r3, #36	; 0x24
 8003ef2:	f001 8162 	beq.w	80051ba <d_print_comp+0x2616>
 8003ef6:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 8003efa:	46a9      	mov	r9, r5
 8003efc:	ab18      	add	r3, sp, #96	; 0x60
 8003efe:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
 8003f02:	f843 cd40 	str.w	ip, [r3, #-64]!
 8003f06:	2100      	movs	r1, #0
 8003f08:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 8003f0c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8003f10:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003f14:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8003f18:	e010      	b.n	8003f3c <d_print_comp+0x1398>
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	ab18      	add	r3, sp, #96	; 0x60
 8003f1e:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
 8003f22:	f843 1d40 	str.w	r1, [r3, #-64]!
 8003f26:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
 8003f2a:	9509      	str	r5, [sp, #36]	; 0x24
 8003f2c:	2000      	movs	r0, #0
 8003f2e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003f32:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003f36:	46a9      	mov	r9, r5
 8003f38:	2a00      	cmp	r2, #0
 8003f3a:	d0eb      	beq.n	8003f14 <d_print_comp+0x1370>
 8003f3c:	4631      	mov	r1, r6
 8003f3e:	4620      	mov	r0, r4
 8003f40:	f7fe fe30 	bl	8002ba4 <d_print_comp>
 8003f44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f46:	b923      	cbnz	r3, 8003f52 <d_print_comp+0x13ae>
 8003f48:	464a      	mov	r2, r9
 8003f4a:	4631      	mov	r1, r6
 8003f4c:	4620      	mov	r0, r4
 8003f4e:	f001 fcbf 	bl	80058d0 <d_print_mod>
 8003f52:	9b08      	ldr	r3, [sp, #32]
 8003f54:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003f58:	b10f      	cbz	r7, 8003f5e <d_print_comp+0x13ba>
 8003f5a:	f8c4 8110 	str.w	r8, [r4, #272]	; 0x110
 8003f5e:	9905      	ldr	r1, [sp, #20]
 8003f60:	686a      	ldr	r2, [r5, #4]
 8003f62:	f7fe bf12 	b.w	8002d8a <d_print_comp+0x1e6>
 8003f66:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 8003f6a:	4663      	mov	r3, ip
 8003f6c:	f1bc 0f00 	cmp.w	ip, #0
 8003f70:	d0c3      	beq.n	8003efa <d_print_comp+0x1356>
 8003f72:	6899      	ldr	r1, [r3, #8]
 8003f74:	b951      	cbnz	r1, 8003f8c <d_print_comp+0x13e8>
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	7812      	ldrb	r2, [r2, #0]
 8003f7a:	f1a2 0e19 	sub.w	lr, r2, #25
 8003f7e:	f1be 0f02 	cmp.w	lr, #2
 8003f82:	f201 80fc 	bhi.w	800517e <d_print_comp+0x25da>
 8003f86:	4290      	cmp	r0, r2
 8003f88:	f001 80f0 	beq.w	800516c <d_print_comp+0x25c8>
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1ef      	bne.n	8003f72 <d_print_comp+0x13ce>
 8003f92:	e7b2      	b.n	8003efa <d_print_comp+0x1356>
 8003f94:	e9d5 6702 	ldrd	r6, r7, [r5, #8]
 8003f98:	2f00      	cmp	r7, #0
 8003f9a:	f43e aef6 	beq.w	8002d8a <d_print_comp+0x1e6>
 8003f9e:	4437      	add	r7, r6
 8003fa0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003fa4:	3f01      	subs	r7, #1
 8003fa6:	3e01      	subs	r6, #1
 8003fa8:	f04f 0800 	mov.w	r8, #0
 8003fac:	e027      	b.n	8003ffe <d_print_comp+0x145a>
 8003fae:	bf00      	nop
 8003fb0:	08034f47 	.word	0x08034f47
 8003fb4:	08034f2f 	.word	0x08034f2f
 8003fb8:	08034f13 	.word	0x08034f13
 8003fbc:	08034efb 	.word	0x08034efb
 8003fc0:	08034ee7 	.word	0x08034ee7
 8003fc4:	08034ed7 	.word	0x08034ed7
 8003fc8:	08034ebb 	.word	0x08034ebb
 8003fcc:	08034ea7 	.word	0x08034ea7
 8003fd0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003fd4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003fd8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003fdc:	4798      	blx	r3
 8003fde:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003fe8:	2200      	movs	r2, #0
 8003fea:	2301      	movs	r3, #1
 8003fec:	42b7      	cmp	r7, r6
 8003fee:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003ff2:	f804 9002 	strb.w	r9, [r4, r2]
 8003ff6:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 8003ffa:	f000 83ce 	beq.w	800479a <d_print_comp+0x1bf6>
 8003ffe:	2bff      	cmp	r3, #255	; 0xff
 8004000:	4619      	mov	r1, r3
 8004002:	4620      	mov	r0, r4
 8004004:	f816 9f01 	ldrb.w	r9, [r6, #1]!
 8004008:	d0e2      	beq.n	8003fd0 <d_print_comp+0x142c>
 800400a:	461a      	mov	r2, r3
 800400c:	3301      	adds	r3, #1
 800400e:	e7ed      	b.n	8003fec <d_print_comp+0x1448>
 8004010:	4631      	mov	r1, r6
 8004012:	68aa      	ldr	r2, [r5, #8]
 8004014:	4620      	mov	r0, r4
 8004016:	f7fe fdc5 	bl	8002ba4 <d_print_comp>
 800401a:	9905      	ldr	r1, [sp, #20]
 800401c:	686a      	ldr	r2, [r5, #4]
 800401e:	f7fe beb4 	b.w	8002d8a <d_print_comp+0x1e6>
 8004022:	f016 0604 	ands.w	r6, r6, #4
 8004026:	68a8      	ldr	r0, [r5, #8]
 8004028:	f040 8505 	bne.w	8004a36 <d_print_comp+0x1e92>
 800402c:	e9d0 7300 	ldrd	r7, r3, [r0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	f43e aeaa 	beq.w	8002d8a <d_print_comp+0x1e6>
 8004036:	eb07 0803 	add.w	r8, r7, r3
 800403a:	f108 38ff 	add.w	r8, r8, #4294967295
 800403e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004042:	3f01      	subs	r7, #1
 8004044:	46b1      	mov	r9, r6
 8004046:	e015      	b.n	8004074 <d_print_comp+0x14d0>
 8004048:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800404c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004050:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8004054:	4798      	blx	r3
 8004056:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800405a:	3301      	adds	r3, #1
 800405c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004060:	2200      	movs	r2, #0
 8004062:	2301      	movs	r3, #1
 8004064:	45b8      	cmp	r8, r7
 8004066:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800406a:	54a6      	strb	r6, [r4, r2]
 800406c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004070:	f000 8545 	beq.w	8004afe <d_print_comp+0x1f5a>
 8004074:	2bff      	cmp	r3, #255	; 0xff
 8004076:	4619      	mov	r1, r3
 8004078:	4620      	mov	r0, r4
 800407a:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 800407e:	d0e3      	beq.n	8004048 <d_print_comp+0x14a4>
 8004080:	461a      	mov	r2, r3
 8004082:	3301      	adds	r3, #1
 8004084:	e7ee      	b.n	8004064 <d_print_comp+0x14c0>
 8004086:	f8d5 8008 	ldr.w	r8, [r5, #8]
 800408a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800408e:	9302      	str	r3, [sp, #8]
 8004090:	2200      	movs	r2, #0
 8004092:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 8004096:	f1b8 0f00 	cmp.w	r8, #0
 800409a:	d025      	beq.n	80040e8 <d_print_comp+0x1544>
 800409c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80040a0:	9301      	str	r3, [sp, #4]
 80040a2:	f10d 0920 	add.w	r9, sp, #32
 80040a6:	4623      	mov	r3, r4
 80040a8:	4617      	mov	r7, r2
 80040aa:	4644      	mov	r4, r8
 80040ac:	4692      	mov	sl, r2
 80040ae:	4649      	mov	r1, r9
 80040b0:	46ab      	mov	fp, r5
 80040b2:	4698      	mov	r8, r3
 80040b4:	7825      	ldrb	r5, [r4, #0]
 80040b6:	9b01      	ldr	r3, [sp, #4]
 80040b8:	600a      	str	r2, [r1, #0]
 80040ba:	4628      	mov	r0, r5
 80040bc:	e9c1 4a01 	strd	r4, sl, [r1, #4]
 80040c0:	60cb      	str	r3, [r1, #12]
 80040c2:	3701      	adds	r7, #1
 80040c4:	460a      	mov	r2, r1
 80040c6:	f7fc f97f 	bl	80003c8 <is_fnqual_component_type>
 80040ca:	2800      	cmp	r0, #0
 80040cc:	f000 87c8 	beq.w	8005060 <d_print_comp+0x24bc>
 80040d0:	68a4      	ldr	r4, [r4, #8]
 80040d2:	2c00      	cmp	r4, #0
 80040d4:	f001 8057 	beq.w	8005186 <d_print_comp+0x25e2>
 80040d8:	2f04      	cmp	r7, #4
 80040da:	f101 0110 	add.w	r1, r1, #16
 80040de:	d1e9      	bne.n	80040b4 <d_print_comp+0x1510>
 80040e0:	4644      	mov	r4, r8
 80040e2:	465d      	mov	r5, fp
 80040e4:	f8c8 2114 	str.w	r2, [r8, #276]	; 0x114
 80040e8:	2301      	movs	r3, #1
 80040ea:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80040ee:	9905      	ldr	r1, [sp, #20]
 80040f0:	686a      	ldr	r2, [r5, #4]
 80040f2:	f7fe be4a 	b.w	8002d8a <d_print_comp+0x1e6>
 80040f6:	f016 0604 	ands.w	r6, r6, #4
 80040fa:	68af      	ldr	r7, [r5, #8]
 80040fc:	f040 8405 	bne.w	800490a <d_print_comp+0x1d66>
 8004100:	68eb      	ldr	r3, [r5, #12]
 8004102:	2b00      	cmp	r3, #0
 8004104:	f43e ae41 	beq.w	8002d8a <d_print_comp+0x1e6>
 8004108:	eb07 0803 	add.w	r8, r7, r3
 800410c:	f108 38ff 	add.w	r8, r8, #4294967295
 8004110:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004114:	3f01      	subs	r7, #1
 8004116:	46b1      	mov	r9, r6
 8004118:	e015      	b.n	8004146 <d_print_comp+0x15a2>
 800411a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800411e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004122:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8004126:	4798      	blx	r3
 8004128:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800412c:	3301      	adds	r3, #1
 800412e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004132:	2200      	movs	r2, #0
 8004134:	2301      	movs	r3, #1
 8004136:	45b8      	cmp	r8, r7
 8004138:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800413c:	54a6      	strb	r6, [r4, r2]
 800413e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004142:	f000 84e0 	beq.w	8004b06 <d_print_comp+0x1f62>
 8004146:	2bff      	cmp	r3, #255	; 0xff
 8004148:	4619      	mov	r1, r3
 800414a:	4620      	mov	r0, r4
 800414c:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 8004150:	d0e3      	beq.n	800411a <d_print_comp+0x1576>
 8004152:	461a      	mov	r2, r3
 8004154:	3301      	adds	r3, #1
 8004156:	e7ee      	b.n	8004136 <d_print_comp+0x1592>
 8004158:	68aa      	ldr	r2, [r5, #8]
 800415a:	4631      	mov	r1, r6
 800415c:	4620      	mov	r0, r4
 800415e:	f7fe fd21 	bl	8002ba4 <d_print_comp>
 8004162:	f016 0904 	ands.w	r9, r6, #4
 8004166:	f000 8681 	beq.w	8004e6c <d_print_comp+0x22c8>
 800416a:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800416e:	2fff      	cmp	r7, #255	; 0xff
 8004170:	d112      	bne.n	8004198 <d_print_comp+0x15f4>
 8004172:	f04f 0800 	mov.w	r8, #0
 8004176:	4639      	mov	r1, r7
 8004178:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800417c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004180:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004184:	4620      	mov	r0, r4
 8004186:	4798      	blx	r3
 8004188:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800418c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8004190:	3301      	adds	r3, #1
 8004192:	4647      	mov	r7, r8
 8004194:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004198:	232e      	movs	r3, #46	; 0x2e
 800419a:	1c7a      	adds	r2, r7, #1
 800419c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80041a0:	55e3      	strb	r3, [r4, r7]
 80041a2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80041a6:	68ef      	ldr	r7, [r5, #12]
 80041a8:	783b      	ldrb	r3, [r7, #0]
 80041aa:	2b46      	cmp	r3, #70	; 0x46
 80041ac:	f000 873a 	beq.w	8005024 <d_print_comp+0x2480>
 80041b0:	463a      	mov	r2, r7
 80041b2:	4631      	mov	r1, r6
 80041b4:	4620      	mov	r0, r4
 80041b6:	f7fe fcf5 	bl	8002ba4 <d_print_comp>
 80041ba:	9905      	ldr	r1, [sp, #20]
 80041bc:	686a      	ldr	r2, [r5, #4]
 80041be:	f7fe bde4 	b.w	8002d8a <d_print_comp+0x1e6>
 80041c2:	2301      	movs	r3, #1
 80041c4:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80041c8:	686a      	ldr	r2, [r5, #4]
 80041ca:	f7fe bdde 	b.w	8002d8a <d_print_comp+0x1e6>
 80041ce:	3701      	adds	r7, #1
 80041d0:	454f      	cmp	r7, r9
 80041d2:	f47e ae2b 	bne.w	8002e2c <d_print_comp+0x288>
 80041d6:	9d03      	ldr	r5, [sp, #12]
 80041d8:	9905      	ldr	r1, [sp, #20]
 80041da:	686a      	ldr	r2, [r5, #4]
 80041dc:	f7fe bdd5 	b.w	8002d8a <d_print_comp+0x1e6>
 80041e0:	4631      	mov	r1, r6
 80041e2:	68aa      	ldr	r2, [r5, #8]
 80041e4:	4620      	mov	r0, r4
 80041e6:	f7fe fcdd 	bl	8002ba4 <d_print_comp>
 80041ea:	9905      	ldr	r1, [sp, #20]
 80041ec:	686a      	ldr	r2, [r5, #4]
 80041ee:	f7fe bdcc 	b.w	8002d8a <d_print_comp+0x1e6>
 80041f2:	4631      	mov	r1, r6
 80041f4:	68aa      	ldr	r2, [r5, #8]
 80041f6:	4620      	mov	r0, r4
 80041f8:	f7fe fcd4 	bl	8002ba4 <d_print_comp>
 80041fc:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004200:	2fff      	cmp	r7, #255	; 0xff
 8004202:	d111      	bne.n	8004228 <d_print_comp+0x1684>
 8004204:	2600      	movs	r6, #0
 8004206:	4639      	mov	r1, r7
 8004208:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800420c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004210:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004214:	4620      	mov	r0, r4
 8004216:	4798      	blx	r3
 8004218:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800421c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004220:	3301      	adds	r3, #1
 8004222:	4637      	mov	r7, r6
 8004224:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004228:	1c7a      	adds	r2, r7, #1
 800422a:	2329      	movs	r3, #41	; 0x29
 800422c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004230:	55e3      	strb	r3, [r4, r7]
 8004232:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004236:	686a      	ldr	r2, [r5, #4]
 8004238:	9905      	ldr	r1, [sp, #20]
 800423a:	f7fe bda6 	b.w	8002d8a <d_print_comp+0x1e6>
 800423e:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8004242:	68aa      	ldr	r2, [r5, #8]
 8004244:	4fd3      	ldr	r7, [pc, #844]	; (8004594 <d_print_comp+0x19f0>)
 8004246:	3301      	adds	r3, #1
 8004248:	4631      	mov	r1, r6
 800424a:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
 800424e:	4620      	mov	r0, r4
 8004250:	f7fe fca8 	bl	8002ba4 <d_print_comp>
 8004254:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
 8004258:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800425c:	3a01      	subs	r2, #1
 800425e:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
 8004262:	1cbe      	adds	r6, r7, #2
 8004264:	f04f 0800 	mov.w	r8, #0
 8004268:	e015      	b.n	8004296 <d_print_comp+0x16f2>
 800426a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800426e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004272:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004276:	4798      	blx	r3
 8004278:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800427c:	3301      	adds	r3, #1
 800427e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004282:	2200      	movs	r2, #0
 8004284:	2301      	movs	r3, #1
 8004286:	42b7      	cmp	r7, r6
 8004288:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800428c:	f804 9002 	strb.w	r9, [r4, r2]
 8004290:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 8004294:	d011      	beq.n	80042ba <d_print_comp+0x1716>
 8004296:	2bff      	cmp	r3, #255	; 0xff
 8004298:	4619      	mov	r1, r3
 800429a:	4620      	mov	r0, r4
 800429c:	f817 9b01 	ldrb.w	r9, [r7], #1
 80042a0:	d0e3      	beq.n	800426a <d_print_comp+0x16c6>
 80042a2:	461a      	mov	r2, r3
 80042a4:	3301      	adds	r3, #1
 80042a6:	e7ee      	b.n	8004286 <d_print_comp+0x16e2>
 80042a8:	4631      	mov	r1, r6
 80042aa:	68aa      	ldr	r2, [r5, #8]
 80042ac:	4620      	mov	r0, r4
 80042ae:	f7fe fc79 	bl	8002ba4 <d_print_comp>
 80042b2:	9905      	ldr	r1, [sp, #20]
 80042b4:	686a      	ldr	r2, [r5, #4]
 80042b6:	f7fe bd68 	b.w	8002d8a <d_print_comp+0x1e6>
 80042ba:	68ea      	ldr	r2, [r5, #12]
 80042bc:	49b6      	ldr	r1, [pc, #728]	; (8004598 <d_print_comp+0x19f4>)
 80042be:	3201      	adds	r2, #1
 80042c0:	a808      	add	r0, sp, #32
 80042c2:	f02a fd7f 	bl	802edc4 <siprintf>
 80042c6:	a808      	add	r0, sp, #32
 80042c8:	f002 fd0a 	bl	8006ce0 <strlen>
 80042cc:	b328      	cbz	r0, 800431a <d_print_comp+0x1776>
 80042ce:	ae08      	add	r6, sp, #32
 80042d0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80042d4:	1837      	adds	r7, r6, r0
 80042d6:	f04f 0800 	mov.w	r8, #0
 80042da:	e015      	b.n	8004308 <d_print_comp+0x1764>
 80042dc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80042e0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80042e4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80042e8:	4798      	blx	r3
 80042ea:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80042ee:	3301      	adds	r3, #1
 80042f0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80042f4:	2200      	movs	r2, #0
 80042f6:	2301      	movs	r3, #1
 80042f8:	42be      	cmp	r6, r7
 80042fa:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80042fe:	f804 9002 	strb.w	r9, [r4, r2]
 8004302:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 8004306:	d00a      	beq.n	800431e <d_print_comp+0x177a>
 8004308:	2bff      	cmp	r3, #255	; 0xff
 800430a:	4619      	mov	r1, r3
 800430c:	4620      	mov	r0, r4
 800430e:	f816 9b01 	ldrb.w	r9, [r6], #1
 8004312:	d0e3      	beq.n	80042dc <d_print_comp+0x1738>
 8004314:	461a      	mov	r2, r3
 8004316:	3301      	adds	r3, #1
 8004318:	e7ee      	b.n	80042f8 <d_print_comp+0x1754>
 800431a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800431e:	2bff      	cmp	r3, #255	; 0xff
 8004320:	d110      	bne.n	8004344 <d_print_comp+0x17a0>
 8004322:	2600      	movs	r6, #0
 8004324:	4619      	mov	r1, r3
 8004326:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800432a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800432e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004332:	4620      	mov	r0, r4
 8004334:	4798      	blx	r3
 8004336:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800433a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800433e:	3301      	adds	r3, #1
 8004340:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004344:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 8004348:	9905      	ldr	r1, [sp, #20]
 800434a:	1c50      	adds	r0, r2, #1
 800434c:	237d      	movs	r3, #125	; 0x7d
 800434e:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 8004352:	54a3      	strb	r3, [r4, r2]
 8004354:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004358:	686a      	ldr	r2, [r5, #4]
 800435a:	f7fe bd16 	b.w	8002d8a <d_print_comp+0x1e6>
 800435e:	4631      	mov	r1, r6
 8004360:	68aa      	ldr	r2, [r5, #8]
 8004362:	4620      	mov	r0, r4
 8004364:	f7fe fc1e 	bl	8002ba4 <d_print_comp>
 8004368:	9905      	ldr	r1, [sp, #20]
 800436a:	686a      	ldr	r2, [r5, #4]
 800436c:	f7fe bd0d 	b.w	8002d8a <d_print_comp+0x1e6>
 8004370:	68aa      	ldr	r2, [r5, #8]
 8004372:	4989      	ldr	r1, [pc, #548]	; (8004598 <d_print_comp+0x19f4>)
 8004374:	3201      	adds	r2, #1
 8004376:	a808      	add	r0, sp, #32
 8004378:	f02a fd24 	bl	802edc4 <siprintf>
 800437c:	a808      	add	r0, sp, #32
 800437e:	f002 fcaf 	bl	8006ce0 <strlen>
 8004382:	2800      	cmp	r0, #0
 8004384:	d071      	beq.n	800446a <d_print_comp+0x18c6>
 8004386:	ae08      	add	r6, sp, #32
 8004388:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800438c:	1837      	adds	r7, r6, r0
 800438e:	f04f 0800 	mov.w	r8, #0
 8004392:	e015      	b.n	80043c0 <d_print_comp+0x181c>
 8004394:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004398:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800439c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80043a0:	4798      	blx	r3
 80043a2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80043a6:	3301      	adds	r3, #1
 80043a8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80043ac:	2200      	movs	r2, #0
 80043ae:	2301      	movs	r3, #1
 80043b0:	42b7      	cmp	r7, r6
 80043b2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80043b6:	f804 9002 	strb.w	r9, [r4, r2]
 80043ba:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80043be:	d056      	beq.n	800446e <d_print_comp+0x18ca>
 80043c0:	2bff      	cmp	r3, #255	; 0xff
 80043c2:	4619      	mov	r1, r3
 80043c4:	4620      	mov	r0, r4
 80043c6:	f816 9b01 	ldrb.w	r9, [r6], #1
 80043ca:	d0e3      	beq.n	8004394 <d_print_comp+0x17f0>
 80043cc:	461a      	mov	r2, r3
 80043ce:	3301      	adds	r3, #1
 80043d0:	e7ee      	b.n	80043b0 <d_print_comp+0x180c>
 80043d2:	4631      	mov	r1, r6
 80043d4:	68ea      	ldr	r2, [r5, #12]
 80043d6:	4620      	mov	r0, r4
 80043d8:	f7fe fbe4 	bl	8002ba4 <d_print_comp>
 80043dc:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80043e0:	2fff      	cmp	r7, #255	; 0xff
 80043e2:	d111      	bne.n	8004408 <d_print_comp+0x1864>
 80043e4:	2600      	movs	r6, #0
 80043e6:	4639      	mov	r1, r7
 80043e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80043ec:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80043f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80043f4:	4620      	mov	r0, r4
 80043f6:	4798      	blx	r3
 80043f8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80043fc:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004400:	3301      	adds	r3, #1
 8004402:	4637      	mov	r7, r6
 8004404:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004408:	1c7a      	adds	r2, r7, #1
 800440a:	235d      	movs	r3, #93	; 0x5d
 800440c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004410:	55e3      	strb	r3, [r4, r7]
 8004412:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004416:	686a      	ldr	r2, [r5, #4]
 8004418:	9905      	ldr	r1, [sp, #20]
 800441a:	f7fe bcb6 	b.w	8002d8a <d_print_comp+0x1e6>
 800441e:	4631      	mov	r1, r6
 8004420:	68ea      	ldr	r2, [r5, #12]
 8004422:	4620      	mov	r0, r4
 8004424:	f7fe fbbe 	bl	8002ba4 <d_print_comp>
 8004428:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800442c:	2fff      	cmp	r7, #255	; 0xff
 800442e:	d111      	bne.n	8004454 <d_print_comp+0x18b0>
 8004430:	2600      	movs	r6, #0
 8004432:	4639      	mov	r1, r7
 8004434:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004438:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800443c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004440:	4620      	mov	r0, r4
 8004442:	4798      	blx	r3
 8004444:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004448:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800444c:	3301      	adds	r3, #1
 800444e:	4637      	mov	r7, r6
 8004450:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004454:	1c7a      	adds	r2, r7, #1
 8004456:	235d      	movs	r3, #93	; 0x5d
 8004458:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800445c:	55e3      	strb	r3, [r4, r7]
 800445e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004462:	686a      	ldr	r2, [r5, #4]
 8004464:	9905      	ldr	r1, [sp, #20]
 8004466:	f7fe bc90 	b.w	8002d8a <d_print_comp+0x1e6>
 800446a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800446e:	2bff      	cmp	r3, #255	; 0xff
 8004470:	d110      	bne.n	8004494 <d_print_comp+0x18f0>
 8004472:	2600      	movs	r6, #0
 8004474:	4619      	mov	r1, r3
 8004476:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800447a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800447e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004482:	4620      	mov	r0, r4
 8004484:	4798      	blx	r3
 8004486:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800448a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800448e:	3301      	adds	r3, #1
 8004490:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004494:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 8004498:	9905      	ldr	r1, [sp, #20]
 800449a:	1c50      	adds	r0, r2, #1
 800449c:	237d      	movs	r3, #125	; 0x7d
 800449e:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 80044a2:	54a3      	strb	r3, [r4, r2]
 80044a4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80044a8:	686a      	ldr	r2, [r5, #4]
 80044aa:	f7fe bc6e 	b.w	8002d8a <d_print_comp+0x1e6>
 80044ae:	4631      	mov	r1, r6
 80044b0:	68aa      	ldr	r2, [r5, #8]
 80044b2:	4620      	mov	r0, r4
 80044b4:	f7fe fb76 	bl	8002ba4 <d_print_comp>
 80044b8:	9905      	ldr	r1, [sp, #20]
 80044ba:	686a      	ldr	r2, [r5, #4]
 80044bc:	f7fe bc65 	b.w	8002d8a <d_print_comp+0x1e6>
 80044c0:	9905      	ldr	r1, [sp, #20]
 80044c2:	686a      	ldr	r2, [r5, #4]
 80044c4:	f7fe bc61 	b.w	8002d8a <d_print_comp+0x1e6>
 80044c8:	4631      	mov	r1, r6
 80044ca:	68aa      	ldr	r2, [r5, #8]
 80044cc:	4620      	mov	r0, r4
 80044ce:	f7fe fb69 	bl	8002ba4 <d_print_comp>
 80044d2:	9905      	ldr	r1, [sp, #20]
 80044d4:	686a      	ldr	r2, [r5, #4]
 80044d6:	f7fe bc58 	b.w	8002d8a <d_print_comp+0x1e6>
 80044da:	4631      	mov	r1, r6
 80044dc:	68ea      	ldr	r2, [r5, #12]
 80044de:	4620      	mov	r0, r4
 80044e0:	f7fe fb60 	bl	8002ba4 <d_print_comp>
 80044e4:	9905      	ldr	r1, [sp, #20]
 80044e6:	686a      	ldr	r2, [r5, #4]
 80044e8:	f7fe bc4f 	b.w	8002d8a <d_print_comp+0x1e6>
 80044ec:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
 80044f0:	b13a      	cbz	r2, 8004502 <d_print_comp+0x195e>
 80044f2:	ab18      	add	r3, sp, #96	; 0x60
 80044f4:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
 80044f8:	f843 1d40 	str.w	r1, [r3, #-64]!
 80044fc:	9209      	str	r2, [sp, #36]	; 0x24
 80044fe:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8004502:	68aa      	ldr	r2, [r5, #8]
 8004504:	7813      	ldrb	r3, [r2, #0]
 8004506:	2b04      	cmp	r3, #4
 8004508:	f000 84d6 	beq.w	8004eb8 <d_print_comp+0x2314>
 800450c:	4631      	mov	r1, r6
 800450e:	4620      	mov	r0, r4
 8004510:	f7fe fb48 	bl	8002ba4 <d_print_comp>
 8004514:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 8004518:	b113      	cbz	r3, 8004520 <d_print_comp+0x197c>
 800451a:	9b08      	ldr	r3, [sp, #32]
 800451c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8004520:	9905      	ldr	r1, [sp, #20]
 8004522:	686a      	ldr	r2, [r5, #4]
 8004524:	f7fe bc31 	b.w	8002d8a <d_print_comp+0x1e6>
 8004528:	f8da 6004 	ldr.w	r6, [sl, #4]
 800452c:	7832      	ldrb	r2, [r6, #0]
 800452e:	3a61      	subs	r2, #97	; 0x61
 8004530:	2a19      	cmp	r2, #25
 8004532:	d81d      	bhi.n	8004570 <d_print_comp+0x19cc>
 8004534:	2bff      	cmp	r3, #255	; 0xff
 8004536:	d110      	bne.n	800455a <d_print_comp+0x19b6>
 8004538:	2600      	movs	r6, #0
 800453a:	4619      	mov	r1, r3
 800453c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004540:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004544:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004548:	4620      	mov	r0, r4
 800454a:	4798      	blx	r3
 800454c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004550:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004554:	3301      	adds	r3, #1
 8004556:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800455a:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 800455e:	2320      	movs	r3, #32
 8004560:	1c51      	adds	r1, r2, #1
 8004562:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004566:	54a3      	strb	r3, [r4, r2]
 8004568:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800456c:	f8da 6004 	ldr.w	r6, [sl, #4]
 8004570:	19f3      	adds	r3, r6, r7
 8004572:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8004576:	2b20      	cmp	r3, #32
 8004578:	bf08      	it	eq
 800457a:	f107 37ff 	addeq.w	r7, r7, #4294967295
 800457e:	2f00      	cmp	r7, #0
 8004580:	f000 86fb 	beq.w	800537a <d_print_comp+0x27d6>
 8004584:	3e01      	subs	r6, #1
 8004586:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800458a:	4437      	add	r7, r6
 800458c:	f04f 0800 	mov.w	r8, #0
 8004590:	e01b      	b.n	80045ca <d_print_comp+0x1a26>
 8004592:	bf00      	nop
 8004594:	08035064 	.word	0x08035064
 8004598:	08034db4 	.word	0x08034db4
 800459c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80045a0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80045a4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80045a8:	4798      	blx	r3
 80045aa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80045ae:	3301      	adds	r3, #1
 80045b0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80045b4:	2200      	movs	r2, #0
 80045b6:	2301      	movs	r3, #1
 80045b8:	42be      	cmp	r6, r7
 80045ba:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80045be:	f804 9002 	strb.w	r9, [r4, r2]
 80045c2:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80045c6:	f000 80ec 	beq.w	80047a2 <d_print_comp+0x1bfe>
 80045ca:	2bff      	cmp	r3, #255	; 0xff
 80045cc:	4619      	mov	r1, r3
 80045ce:	4620      	mov	r0, r4
 80045d0:	f816 9f01 	ldrb.w	r9, [r6, #1]!
 80045d4:	d0e2      	beq.n	800459c <d_print_comp+0x19f8>
 80045d6:	461a      	mov	r2, r3
 80045d8:	3301      	adds	r3, #1
 80045da:	e7ed      	b.n	80045b8 <d_print_comp+0x1a14>
 80045dc:	4631      	mov	r1, r6
 80045de:	68aa      	ldr	r2, [r5, #8]
 80045e0:	4620      	mov	r0, r4
 80045e2:	f7fe fadf 	bl	8002ba4 <d_print_comp>
 80045e6:	9905      	ldr	r1, [sp, #20]
 80045e8:	686a      	ldr	r2, [r5, #4]
 80045ea:	f7fe bbce 	b.w	8002d8a <d_print_comp+0x1e6>
 80045ee:	4631      	mov	r1, r6
 80045f0:	68aa      	ldr	r2, [r5, #8]
 80045f2:	4620      	mov	r0, r4
 80045f4:	f7fe fad6 	bl	8002ba4 <d_print_comp>
 80045f8:	9905      	ldr	r1, [sp, #20]
 80045fa:	686a      	ldr	r2, [r5, #4]
 80045fc:	f7fe bbc5 	b.w	8002d8a <d_print_comp+0x1e6>
 8004600:	4631      	mov	r1, r6
 8004602:	68aa      	ldr	r2, [r5, #8]
 8004604:	4620      	mov	r0, r4
 8004606:	f7fe facd 	bl	8002ba4 <d_print_comp>
 800460a:	9905      	ldr	r1, [sp, #20]
 800460c:	686a      	ldr	r2, [r5, #4]
 800460e:	f7fe bbbc 	b.w	8002d8a <d_print_comp+0x1e6>
 8004612:	4631      	mov	r1, r6
 8004614:	68aa      	ldr	r2, [r5, #8]
 8004616:	4620      	mov	r0, r4
 8004618:	f7fe fac4 	bl	8002ba4 <d_print_comp>
 800461c:	9905      	ldr	r1, [sp, #20]
 800461e:	686a      	ldr	r2, [r5, #4]
 8004620:	f7fe bbb3 	b.w	8002d8a <d_print_comp+0x1e6>
 8004624:	4631      	mov	r1, r6
 8004626:	68aa      	ldr	r2, [r5, #8]
 8004628:	4620      	mov	r0, r4
 800462a:	f7fe fabb 	bl	8002ba4 <d_print_comp>
 800462e:	9905      	ldr	r1, [sp, #20]
 8004630:	686a      	ldr	r2, [r5, #4]
 8004632:	f7fe bbaa 	b.w	8002d8a <d_print_comp+0x1e6>
 8004636:	4631      	mov	r1, r6
 8004638:	68aa      	ldr	r2, [r5, #8]
 800463a:	4620      	mov	r0, r4
 800463c:	f7fe fab2 	bl	8002ba4 <d_print_comp>
 8004640:	9905      	ldr	r1, [sp, #20]
 8004642:	686a      	ldr	r2, [r5, #4]
 8004644:	f7fe bba1 	b.w	8002d8a <d_print_comp+0x1e6>
 8004648:	4631      	mov	r1, r6
 800464a:	68aa      	ldr	r2, [r5, #8]
 800464c:	4620      	mov	r0, r4
 800464e:	f7fe faa9 	bl	8002ba4 <d_print_comp>
 8004652:	9905      	ldr	r1, [sp, #20]
 8004654:	686a      	ldr	r2, [r5, #4]
 8004656:	f7fe bb98 	b.w	8002d8a <d_print_comp+0x1e6>
 800465a:	4631      	mov	r1, r6
 800465c:	68aa      	ldr	r2, [r5, #8]
 800465e:	4620      	mov	r0, r4
 8004660:	f7fe faa0 	bl	8002ba4 <d_print_comp>
 8004664:	9905      	ldr	r1, [sp, #20]
 8004666:	686a      	ldr	r2, [r5, #4]
 8004668:	f7fe bb8f 	b.w	8002d8a <d_print_comp+0x1e6>
 800466c:	4fcf      	ldr	r7, [pc, #828]	; (80049ac <d_print_comp+0x1e08>)
 800466e:	68ea      	ldr	r2, [r5, #12]
 8004670:	4631      	mov	r1, r6
 8004672:	4620      	mov	r0, r4
 8004674:	f7fe fa96 	bl	8002ba4 <d_print_comp>
 8004678:	f107 0805 	add.w	r8, r7, #5
 800467c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004680:	f04f 0900 	mov.w	r9, #0
 8004684:	e015      	b.n	80046b2 <d_print_comp+0x1b0e>
 8004686:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800468a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800468e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8004692:	4798      	blx	r3
 8004694:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004698:	3301      	adds	r3, #1
 800469a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800469e:	2200      	movs	r2, #0
 80046a0:	2301      	movs	r3, #1
 80046a2:	4547      	cmp	r7, r8
 80046a4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80046a8:	f804 a002 	strb.w	sl, [r4, r2]
 80046ac:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80046b0:	d008      	beq.n	80046c4 <d_print_comp+0x1b20>
 80046b2:	2bff      	cmp	r3, #255	; 0xff
 80046b4:	4619      	mov	r1, r3
 80046b6:	4620      	mov	r0, r4
 80046b8:	f817 ab01 	ldrb.w	sl, [r7], #1
 80046bc:	d0e3      	beq.n	8004686 <d_print_comp+0x1ae2>
 80046be:	461a      	mov	r2, r3
 80046c0:	3301      	adds	r3, #1
 80046c2:	e7ee      	b.n	80046a2 <d_print_comp+0x1afe>
 80046c4:	4631      	mov	r1, r6
 80046c6:	68aa      	ldr	r2, [r5, #8]
 80046c8:	4620      	mov	r0, r4
 80046ca:	f7fe fa6b 	bl	8002ba4 <d_print_comp>
 80046ce:	9905      	ldr	r1, [sp, #20]
 80046d0:	686a      	ldr	r2, [r5, #4]
 80046d2:	f7fe bb5a 	b.w	8002d8a <d_print_comp+0x1e6>
 80046d6:	4fb6      	ldr	r7, [pc, #728]	; (80049b0 <d_print_comp+0x1e0c>)
 80046d8:	68aa      	ldr	r2, [r5, #8]
 80046da:	4631      	mov	r1, r6
 80046dc:	4620      	mov	r0, r4
 80046de:	f7fe fa61 	bl	8002ba4 <d_print_comp>
 80046e2:	f107 0804 	add.w	r8, r7, #4
 80046e6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80046ea:	f04f 0900 	mov.w	r9, #0
 80046ee:	e015      	b.n	800471c <d_print_comp+0x1b78>
 80046f0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80046f4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80046f8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80046fc:	4798      	blx	r3
 80046fe:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004702:	3301      	adds	r3, #1
 8004704:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004708:	2200      	movs	r2, #0
 800470a:	2301      	movs	r3, #1
 800470c:	45b8      	cmp	r8, r7
 800470e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004712:	f804 a002 	strb.w	sl, [r4, r2]
 8004716:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 800471a:	d008      	beq.n	800472e <d_print_comp+0x1b8a>
 800471c:	2bff      	cmp	r3, #255	; 0xff
 800471e:	4619      	mov	r1, r3
 8004720:	4620      	mov	r0, r4
 8004722:	f817 ab01 	ldrb.w	sl, [r7], #1
 8004726:	d0e3      	beq.n	80046f0 <d_print_comp+0x1b4c>
 8004728:	461a      	mov	r2, r3
 800472a:	3301      	adds	r3, #1
 800472c:	e7ee      	b.n	800470c <d_print_comp+0x1b68>
 800472e:	4631      	mov	r1, r6
 8004730:	68ea      	ldr	r2, [r5, #12]
 8004732:	4620      	mov	r0, r4
 8004734:	f7fe fa36 	bl	8002ba4 <d_print_comp>
 8004738:	9905      	ldr	r1, [sp, #20]
 800473a:	686a      	ldr	r2, [r5, #4]
 800473c:	f7fe bb25 	b.w	8002d8a <d_print_comp+0x1e6>
 8004740:	4631      	mov	r1, r6
 8004742:	68aa      	ldr	r2, [r5, #8]
 8004744:	4620      	mov	r0, r4
 8004746:	f7fe fa2d 	bl	8002ba4 <d_print_comp>
 800474a:	9905      	ldr	r1, [sp, #20]
 800474c:	686a      	ldr	r2, [r5, #4]
 800474e:	f7fe bb1c 	b.w	8002d8a <d_print_comp+0x1e6>
 8004752:	4631      	mov	r1, r6
 8004754:	68aa      	ldr	r2, [r5, #8]
 8004756:	4620      	mov	r0, r4
 8004758:	f7fe fa24 	bl	8002ba4 <d_print_comp>
 800475c:	9905      	ldr	r1, [sp, #20]
 800475e:	686a      	ldr	r2, [r5, #4]
 8004760:	f7fe bb13 	b.w	8002d8a <d_print_comp+0x1e6>
 8004764:	4631      	mov	r1, r6
 8004766:	68aa      	ldr	r2, [r5, #8]
 8004768:	4620      	mov	r0, r4
 800476a:	f7fe fa1b 	bl	8002ba4 <d_print_comp>
 800476e:	9905      	ldr	r1, [sp, #20]
 8004770:	686a      	ldr	r2, [r5, #4]
 8004772:	f7fe bb0a 	b.w	8002d8a <d_print_comp+0x1e6>
 8004776:	4631      	mov	r1, r6
 8004778:	68aa      	ldr	r2, [r5, #8]
 800477a:	4620      	mov	r0, r4
 800477c:	f7fe fa12 	bl	8002ba4 <d_print_comp>
 8004780:	9905      	ldr	r1, [sp, #20]
 8004782:	686a      	ldr	r2, [r5, #4]
 8004784:	f7fe bb01 	b.w	8002d8a <d_print_comp+0x1e6>
 8004788:	4631      	mov	r1, r6
 800478a:	68aa      	ldr	r2, [r5, #8]
 800478c:	4620      	mov	r0, r4
 800478e:	f7fe fa09 	bl	8002ba4 <d_print_comp>
 8004792:	9905      	ldr	r1, [sp, #20]
 8004794:	686a      	ldr	r2, [r5, #4]
 8004796:	f7fe baf8 	b.w	8002d8a <d_print_comp+0x1e6>
 800479a:	9905      	ldr	r1, [sp, #20]
 800479c:	686a      	ldr	r2, [r5, #4]
 800479e:	f7fe baf4 	b.w	8002d8a <d_print_comp+0x1e6>
 80047a2:	9905      	ldr	r1, [sp, #20]
 80047a4:	686a      	ldr	r2, [r5, #4]
 80047a6:	f7fe baf0 	b.w	8002d8a <d_print_comp+0x1e6>
 80047aa:	4631      	mov	r1, r6
 80047ac:	68ea      	ldr	r2, [r5, #12]
 80047ae:	9301      	str	r3, [sp, #4]
 80047b0:	4620      	mov	r0, r4
 80047b2:	f8d4 6124 	ldr.w	r6, [r4, #292]	; 0x124
 80047b6:	f7fe f9f5 	bl	8002ba4 <d_print_comp>
 80047ba:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80047be:	9b01      	ldr	r3, [sp, #4]
 80047c0:	4296      	cmp	r6, r2
 80047c2:	f000 8441 	beq.w	8005048 <d_print_comp+0x24a4>
 80047c6:	9905      	ldr	r1, [sp, #20]
 80047c8:	686a      	ldr	r2, [r5, #4]
 80047ca:	f7fe bade 	b.w	8002d8a <d_print_comp+0x1e6>
 80047ce:	4e79      	ldr	r6, [pc, #484]	; (80049b4 <d_print_comp+0x1e10>)
 80047d0:	4690      	mov	r8, r2
 80047d2:	f106 0906 	add.w	r9, r6, #6
 80047d6:	e014      	b.n	8004802 <d_print_comp+0x1c5e>
 80047d8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80047dc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80047e0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80047e4:	4798      	blx	r3
 80047e6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80047ea:	3301      	adds	r3, #1
 80047ec:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80047f0:	2200      	movs	r2, #0
 80047f2:	2301      	movs	r3, #1
 80047f4:	45b1      	cmp	r9, r6
 80047f6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80047fa:	54a7      	strb	r7, [r4, r2]
 80047fc:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004800:	d008      	beq.n	8004814 <d_print_comp+0x1c70>
 8004802:	2bff      	cmp	r3, #255	; 0xff
 8004804:	4619      	mov	r1, r3
 8004806:	4620      	mov	r0, r4
 8004808:	f816 7b01 	ldrb.w	r7, [r6], #1
 800480c:	d0e4      	beq.n	80047d8 <d_print_comp+0x1c34>
 800480e:	461a      	mov	r2, r3
 8004810:	3301      	adds	r3, #1
 8004812:	e7ef      	b.n	80047f4 <d_print_comp+0x1c50>
 8004814:	9905      	ldr	r1, [sp, #20]
 8004816:	686a      	ldr	r2, [r5, #4]
 8004818:	f7fe bab7 	b.w	8002d8a <d_print_comp+0x1e6>
 800481c:	4642      	mov	r2, r8
 800481e:	a808      	add	r0, sp, #32
 8004820:	4965      	ldr	r1, [pc, #404]	; (80049b8 <d_print_comp+0x1e14>)
 8004822:	f02a facf 	bl	802edc4 <siprintf>
 8004826:	a808      	add	r0, sp, #32
 8004828:	f002 fa5a 	bl	8006ce0 <strlen>
 800482c:	b328      	cbz	r0, 800487a <d_print_comp+0x1cd6>
 800482e:	ae08      	add	r6, sp, #32
 8004830:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004834:	eb06 0900 	add.w	r9, r6, r0
 8004838:	f04f 0800 	mov.w	r8, #0
 800483c:	e014      	b.n	8004868 <d_print_comp+0x1cc4>
 800483e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004842:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004846:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800484a:	4798      	blx	r3
 800484c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004850:	3301      	adds	r3, #1
 8004852:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004856:	2200      	movs	r2, #0
 8004858:	2301      	movs	r3, #1
 800485a:	45b1      	cmp	r9, r6
 800485c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004860:	54a7      	strb	r7, [r4, r2]
 8004862:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004866:	d008      	beq.n	800487a <d_print_comp+0x1cd6>
 8004868:	2bff      	cmp	r3, #255	; 0xff
 800486a:	4619      	mov	r1, r3
 800486c:	4620      	mov	r0, r4
 800486e:	f816 7b01 	ldrb.w	r7, [r6], #1
 8004872:	d0e4      	beq.n	800483e <d_print_comp+0x1c9a>
 8004874:	461a      	mov	r2, r3
 8004876:	3301      	adds	r3, #1
 8004878:	e7ef      	b.n	800485a <d_print_comp+0x1cb6>
 800487a:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800487e:	2fff      	cmp	r7, #255	; 0xff
 8004880:	d111      	bne.n	80048a6 <d_print_comp+0x1d02>
 8004882:	2600      	movs	r6, #0
 8004884:	4639      	mov	r1, r7
 8004886:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800488a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800488e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004892:	4620      	mov	r0, r4
 8004894:	4798      	blx	r3
 8004896:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800489a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800489e:	3301      	adds	r3, #1
 80048a0:	4637      	mov	r7, r6
 80048a2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80048a6:	1c7a      	adds	r2, r7, #1
 80048a8:	237d      	movs	r3, #125	; 0x7d
 80048aa:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80048ae:	55e3      	strb	r3, [r4, r7]
 80048b0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80048b4:	686a      	ldr	r2, [r5, #4]
 80048b6:	9905      	ldr	r1, [sp, #20]
 80048b8:	f7fe ba67 	b.w	8002d8a <d_print_comp+0x1e6>
 80048bc:	4e3f      	ldr	r6, [pc, #252]	; (80049bc <d_print_comp+0x1e18>)
 80048be:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80048c2:	f106 0905 	add.w	r9, r6, #5
 80048c6:	f04f 0800 	mov.w	r8, #0
 80048ca:	e015      	b.n	80048f8 <d_print_comp+0x1d54>
 80048cc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80048d0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80048d4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80048d8:	4798      	blx	r3
 80048da:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80048de:	3301      	adds	r3, #1
 80048e0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80048e4:	2200      	movs	r2, #0
 80048e6:	2301      	movs	r3, #1
 80048e8:	45b1      	cmp	r9, r6
 80048ea:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80048ee:	54a7      	strb	r7, [r4, r2]
 80048f0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80048f4:	f000 80cf 	beq.w	8004a96 <d_print_comp+0x1ef2>
 80048f8:	2bff      	cmp	r3, #255	; 0xff
 80048fa:	4619      	mov	r1, r3
 80048fc:	4620      	mov	r0, r4
 80048fe:	f816 7b01 	ldrb.w	r7, [r6], #1
 8004902:	d0e3      	beq.n	80048cc <d_print_comp+0x1d28>
 8004904:	461a      	mov	r2, r3
 8004906:	3301      	adds	r3, #1
 8004908:	e7ee      	b.n	80048e8 <d_print_comp+0x1d44>
 800490a:	68ee      	ldr	r6, [r5, #12]
 800490c:	443e      	add	r6, r7
 800490e:	42be      	cmp	r6, r7
 8004910:	f67e aa3b 	bls.w	8002d8a <d_print_comp+0x1e6>
 8004914:	f04f 0800 	mov.w	r8, #0
 8004918:	e018      	b.n	800494c <d_print_comp+0x1da8>
 800491a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800491e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004922:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004926:	4620      	mov	r0, r4
 8004928:	4798      	blx	r3
 800492a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800492e:	3301      	adds	r3, #1
 8004930:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004934:	2100      	movs	r1, #0
 8004936:	2301      	movs	r3, #1
 8004938:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800493c:	f804 9001 	strb.w	r9, [r4, r1]
 8004940:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 8004944:	3701      	adds	r7, #1
 8004946:	42be      	cmp	r6, r7
 8004948:	f240 80e1 	bls.w	8004b0e <d_print_comp+0x1f6a>
 800494c:	1bf3      	subs	r3, r6, r7
 800494e:	2b03      	cmp	r3, #3
 8004950:	f897 9000 	ldrb.w	r9, [r7]
 8004954:	dd02      	ble.n	800495c <d_print_comp+0x1db8>
 8004956:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
 800495a:	d005      	beq.n	8004968 <d_print_comp+0x1dc4>
 800495c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004960:	29ff      	cmp	r1, #255	; 0xff
 8004962:	d0da      	beq.n	800491a <d_print_comp+0x1d76>
 8004964:	1c4b      	adds	r3, r1, #1
 8004966:	e7e7      	b.n	8004938 <d_print_comp+0x1d94>
 8004968:	787b      	ldrb	r3, [r7, #1]
 800496a:	2b5f      	cmp	r3, #95	; 0x5f
 800496c:	d1f6      	bne.n	800495c <d_print_comp+0x1db8>
 800496e:	78bb      	ldrb	r3, [r7, #2]
 8004970:	2b55      	cmp	r3, #85	; 0x55
 8004972:	d1f3      	bne.n	800495c <d_print_comp+0x1db8>
 8004974:	1cf9      	adds	r1, r7, #3
 8004976:	2000      	movs	r0, #0
 8004978:	e002      	b.n	8004980 <d_print_comp+0x1ddc>
 800497a:	4613      	mov	r3, r2
 800497c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8004980:	428e      	cmp	r6, r1
 8004982:	468a      	mov	sl, r1
 8004984:	d9ea      	bls.n	800495c <d_print_comp+0x1db8>
 8004986:	f811 3b01 	ldrb.w	r3, [r1], #1
 800498a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800498e:	fa5f fe82 	uxtb.w	lr, r2
 8004992:	f1be 0f09 	cmp.w	lr, #9
 8004996:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 800499a:	d9ee      	bls.n	800497a <d_print_comp+0x1dd6>
 800499c:	f1bc 0f05 	cmp.w	ip, #5
 80049a0:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80049a4:	f200 85c7 	bhi.w	8005536 <d_print_comp+0x2992>
 80049a8:	3b37      	subs	r3, #55	; 0x37
 80049aa:	e7e7      	b.n	800497c <d_print_comp+0x1dd8>
 80049ac:	08034f28 	.word	0x08034f28
 80049b0:	08034e64 	.word	0x08034e64
 80049b4:	08034f88 	.word	0x08034f88
 80049b8:	08034db4 	.word	0x08034db4
 80049bc:	08034e28 	.word	0x08034e28
 80049c0:	9905      	ldr	r1, [sp, #20]
 80049c2:	686a      	ldr	r2, [r5, #4]
 80049c4:	f7fe b9e1 	b.w	8002d8a <d_print_comp+0x1e6>
 80049c8:	68aa      	ldr	r2, [r5, #8]
 80049ca:	9201      	str	r2, [sp, #4]
 80049cc:	4619      	mov	r1, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f47e aa26 	bne.w	8002e20 <d_print_comp+0x27c>
 80049d4:	9905      	ldr	r1, [sp, #20]
 80049d6:	686a      	ldr	r2, [r5, #4]
 80049d8:	f7fe b9d7 	b.w	8002d8a <d_print_comp+0x1e6>
 80049dc:	4ece      	ldr	r6, [pc, #824]	; (8004d18 <d_print_comp+0x2174>)
 80049de:	f106 0904 	add.w	r9, r6, #4
 80049e2:	e014      	b.n	8004a0e <d_print_comp+0x1e6a>
 80049e4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80049e8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80049ec:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80049f0:	4798      	blx	r3
 80049f2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80049f6:	3301      	adds	r3, #1
 80049f8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80049fc:	2200      	movs	r2, #0
 80049fe:	2301      	movs	r3, #1
 8004a00:	45b1      	cmp	r9, r6
 8004a02:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004a06:	54a7      	strb	r7, [r4, r2]
 8004a08:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004a0c:	d008      	beq.n	8004a20 <d_print_comp+0x1e7c>
 8004a0e:	2bff      	cmp	r3, #255	; 0xff
 8004a10:	4619      	mov	r1, r3
 8004a12:	4620      	mov	r0, r4
 8004a14:	f816 7b01 	ldrb.w	r7, [r6], #1
 8004a18:	d0e4      	beq.n	80049e4 <d_print_comp+0x1e40>
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	e7ef      	b.n	8004a00 <d_print_comp+0x1e5c>
 8004a20:	9905      	ldr	r1, [sp, #20]
 8004a22:	686a      	ldr	r2, [r5, #4]
 8004a24:	f7fe b9b1 	b.w	8002d8a <d_print_comp+0x1e6>
 8004a28:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 8004a2c:	f7ff ba66 	b.w	8003efc <d_print_comp+0x1358>
 8004a30:	2700      	movs	r7, #0
 8004a32:	f7ff ba54 	b.w	8003ede <d_print_comp+0x133a>
 8004a36:	e9d0 6702 	ldrd	r6, r7, [r0, #8]
 8004a3a:	2f00      	cmp	r7, #0
 8004a3c:	f43e a9a5 	beq.w	8002d8a <d_print_comp+0x1e6>
 8004a40:	4437      	add	r7, r6
 8004a42:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004a46:	3f01      	subs	r7, #1
 8004a48:	3e01      	subs	r6, #1
 8004a4a:	f04f 0900 	mov.w	r9, #0
 8004a4e:	e015      	b.n	8004a7c <d_print_comp+0x1ed8>
 8004a50:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004a54:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004a58:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8004a5c:	4798      	blx	r3
 8004a5e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004a62:	3301      	adds	r3, #1
 8004a64:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004a68:	2200      	movs	r2, #0
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	42b7      	cmp	r7, r6
 8004a6e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004a72:	f804 8002 	strb.w	r8, [r4, r2]
 8004a76:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8004a7a:	d008      	beq.n	8004a8e <d_print_comp+0x1eea>
 8004a7c:	2bff      	cmp	r3, #255	; 0xff
 8004a7e:	4619      	mov	r1, r3
 8004a80:	4620      	mov	r0, r4
 8004a82:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8004a86:	d0e3      	beq.n	8004a50 <d_print_comp+0x1eac>
 8004a88:	461a      	mov	r2, r3
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	e7ee      	b.n	8004a6c <d_print_comp+0x1ec8>
 8004a8e:	9905      	ldr	r1, [sp, #20]
 8004a90:	686a      	ldr	r2, [r5, #4]
 8004a92:	f7fe b97a 	b.w	8002d8a <d_print_comp+0x1e6>
 8004a96:	68aa      	ldr	r2, [r5, #8]
 8004a98:	49a0      	ldr	r1, [pc, #640]	; (8004d1c <d_print_comp+0x2178>)
 8004a9a:	3201      	adds	r2, #1
 8004a9c:	a808      	add	r0, sp, #32
 8004a9e:	f02a f991 	bl	802edc4 <siprintf>
 8004aa2:	a808      	add	r0, sp, #32
 8004aa4:	f002 f91c 	bl	8006ce0 <strlen>
 8004aa8:	b328      	cbz	r0, 8004af6 <d_print_comp+0x1f52>
 8004aaa:	ae08      	add	r6, sp, #32
 8004aac:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004ab0:	eb06 0900 	add.w	r9, r6, r0
 8004ab4:	f04f 0800 	mov.w	r8, #0
 8004ab8:	e014      	b.n	8004ae4 <d_print_comp+0x1f40>
 8004aba:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004abe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004ac2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004ac6:	4798      	blx	r3
 8004ac8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004acc:	3301      	adds	r3, #1
 8004ace:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	45b1      	cmp	r9, r6
 8004ad8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004adc:	54a7      	strb	r7, [r4, r2]
 8004ade:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004ae2:	d008      	beq.n	8004af6 <d_print_comp+0x1f52>
 8004ae4:	2bff      	cmp	r3, #255	; 0xff
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	4620      	mov	r0, r4
 8004aea:	f816 7b01 	ldrb.w	r7, [r6], #1
 8004aee:	d0e4      	beq.n	8004aba <d_print_comp+0x1f16>
 8004af0:	461a      	mov	r2, r3
 8004af2:	3301      	adds	r3, #1
 8004af4:	e7ef      	b.n	8004ad6 <d_print_comp+0x1f32>
 8004af6:	9905      	ldr	r1, [sp, #20]
 8004af8:	686a      	ldr	r2, [r5, #4]
 8004afa:	f7fe b946 	b.w	8002d8a <d_print_comp+0x1e6>
 8004afe:	9905      	ldr	r1, [sp, #20]
 8004b00:	686a      	ldr	r2, [r5, #4]
 8004b02:	f7fe b942 	b.w	8002d8a <d_print_comp+0x1e6>
 8004b06:	9905      	ldr	r1, [sp, #20]
 8004b08:	686a      	ldr	r2, [r5, #4]
 8004b0a:	f7fe b93e 	b.w	8002d8a <d_print_comp+0x1e6>
 8004b0e:	9905      	ldr	r1, [sp, #20]
 8004b10:	686a      	ldr	r2, [r5, #4]
 8004b12:	f7fe b93a 	b.w	8002d8a <d_print_comp+0x1e6>
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	2b3b      	cmp	r3, #59	; 0x3b
 8004b1c:	f47e abf6 	bne.w	800330c <d_print_comp+0x768>
 8004b20:	f105 030c 	add.w	r3, r5, #12
 8004b24:	68aa      	ldr	r2, [r5, #8]
 8004b26:	4631      	mov	r1, r6
 8004b28:	4620      	mov	r0, r4
 8004b2a:	f001 fd95 	bl	8006658 <d_maybe_print_fold_expression.isra.20>
 8004b2e:	4680      	mov	r8, r0
 8004b30:	2800      	cmp	r0, #0
 8004b32:	f040 86a0 	bne.w	8005876 <d_print_comp+0x2cd2>
 8004b36:	e9d5 7202 	ldrd	r7, r2, [r5, #8]
 8004b3a:	68b9      	ldr	r1, [r7, #8]
 8004b3c:	68d3      	ldr	r3, [r2, #12]
 8004b3e:	6808      	ldr	r0, [r1, #0]
 8004b40:	4977      	ldr	r1, [pc, #476]	; (8004d20 <d_print_comp+0x217c>)
 8004b42:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8004b46:	e9d3 a902 	ldrd	sl, r9, [r3, #8]
 8004b4a:	f002 f8bf 	bl	8006ccc <strcmp>
 8004b4e:	2800      	cmp	r0, #0
 8004b50:	f000 8674 	beq.w	800583c <d_print_comp+0x2c98>
 8004b54:	2204      	movs	r2, #4
 8004b56:	4973      	ldr	r1, [pc, #460]	; (8004d24 <d_print_comp+0x2180>)
 8004b58:	4620      	mov	r0, r4
 8004b5a:	f7fb fbff 	bl	800035c <d_append_buffer>
 8004b5e:	f8db 3008 	ldr.w	r3, [fp, #8]
 8004b62:	b303      	cbz	r3, 8004ba6 <d_print_comp+0x2002>
 8004b64:	465a      	mov	r2, fp
 8004b66:	4631      	mov	r1, r6
 8004b68:	4620      	mov	r0, r4
 8004b6a:	f001 fd23 	bl	80065b4 <d_print_subexpr>
 8004b6e:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004b72:	2fff      	cmp	r7, #255	; 0xff
 8004b74:	d110      	bne.n	8004b98 <d_print_comp+0x1ff4>
 8004b76:	4639      	mov	r1, r7
 8004b78:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004b7c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004b80:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004b84:	4620      	mov	r0, r4
 8004b86:	4798      	blx	r3
 8004b88:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004b8c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8004b90:	3301      	adds	r3, #1
 8004b92:	4647      	mov	r7, r8
 8004b94:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004b98:	2320      	movs	r3, #32
 8004b9a:	1c7a      	adds	r2, r7, #1
 8004b9c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004ba0:	55e3      	strb	r3, [r4, r7]
 8004ba2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004ba6:	4652      	mov	r2, sl
 8004ba8:	4631      	mov	r1, r6
 8004baa:	4620      	mov	r0, r4
 8004bac:	f7fd fffa 	bl	8002ba4 <d_print_comp>
 8004bb0:	f1b9 0f00 	cmp.w	r9, #0
 8004bb4:	f000 8663 	beq.w	800587e <d_print_comp+0x2cda>
 8004bb8:	464a      	mov	r2, r9
 8004bba:	4631      	mov	r1, r6
 8004bbc:	4620      	mov	r0, r4
 8004bbe:	f001 fcf9 	bl	80065b4 <d_print_subexpr>
 8004bc2:	9905      	ldr	r1, [sp, #20]
 8004bc4:	686a      	ldr	r2, [r5, #4]
 8004bc6:	f7fe b8e0 	b.w	8002d8a <d_print_comp+0x1e6>
 8004bca:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8004bce:	4956      	ldr	r1, [pc, #344]	; (8004d28 <d_print_comp+0x2184>)
 8004bd0:	f8d3 a000 	ldr.w	sl, [r3]
 8004bd4:	4650      	mov	r0, sl
 8004bd6:	f002 f879 	bl	8006ccc <strcmp>
 8004bda:	f898 3000 	ldrb.w	r3, [r8]
 8004bde:	b910      	cbnz	r0, 8004be6 <d_print_comp+0x2042>
 8004be0:	2b03      	cmp	r3, #3
 8004be2:	f000 852b 	beq.w	800563c <d_print_comp+0x2a98>
 8004be6:	2b38      	cmp	r3, #56	; 0x38
 8004be8:	f000 850c 	beq.w	8005604 <d_print_comp+0x2a60>
 8004bec:	494f      	ldr	r1, [pc, #316]	; (8004d2c <d_print_comp+0x2188>)
 8004bee:	4650      	mov	r0, sl
 8004bf0:	f002 f86c 	bl	8006ccc <strcmp>
 8004bf4:	4607      	mov	r7, r0
 8004bf6:	2800      	cmp	r0, #0
 8004bf8:	f000 8513 	beq.w	8005622 <d_print_comp+0x2a7e>
 8004bfc:	494c      	ldr	r1, [pc, #304]	; (8004d30 <d_print_comp+0x218c>)
 8004bfe:	4650      	mov	r0, sl
 8004c00:	f002 f864 	bl	8006ccc <strcmp>
 8004c04:	2800      	cmp	r0, #0
 8004c06:	f000 8333 	beq.w	8005270 <d_print_comp+0x26cc>
 8004c0a:	4631      	mov	r1, r6
 8004c0c:	4620      	mov	r0, r4
 8004c0e:	464a      	mov	r2, r9
 8004c10:	f001 fc90 	bl	8006534 <d_print_expr_op>
 8004c14:	4947      	ldr	r1, [pc, #284]	; (8004d34 <d_print_comp+0x2190>)
 8004c16:	4650      	mov	r0, sl
 8004c18:	f002 f858 	bl	8006ccc <strcmp>
 8004c1c:	2800      	cmp	r0, #0
 8004c1e:	f000 83b0 	beq.w	8005382 <d_print_comp+0x27de>
 8004c22:	4650      	mov	r0, sl
 8004c24:	4944      	ldr	r1, [pc, #272]	; (8004d38 <d_print_comp+0x2194>)
 8004c26:	f002 f851 	bl	8006ccc <strcmp>
 8004c2a:	4681      	mov	r9, r0
 8004c2c:	2800      	cmp	r0, #0
 8004c2e:	f47e abd7 	bne.w	80033e0 <d_print_comp+0x83c>
 8004c32:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004c36:	2fff      	cmp	r7, #255	; 0xff
 8004c38:	d110      	bne.n	8004c5c <d_print_comp+0x20b8>
 8004c3a:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 8004c3e:	4639      	mov	r1, r7
 8004c40:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004c44:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004c48:	4620      	mov	r0, r4
 8004c4a:	4798      	blx	r3
 8004c4c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004c50:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 8004c54:	3301      	adds	r3, #1
 8004c56:	464f      	mov	r7, r9
 8004c58:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004c5c:	1c78      	adds	r0, r7, #1
 8004c5e:	2328      	movs	r3, #40	; 0x28
 8004c60:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 8004c64:	4642      	mov	r2, r8
 8004c66:	55e3      	strb	r3, [r4, r7]
 8004c68:	4631      	mov	r1, r6
 8004c6a:	4620      	mov	r0, r4
 8004c6c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004c70:	f7fd ff98 	bl	8002ba4 <d_print_comp>
 8004c74:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004c78:	2fff      	cmp	r7, #255	; 0xff
 8004c7a:	d111      	bne.n	8004ca0 <d_print_comp+0x20fc>
 8004c7c:	2600      	movs	r6, #0
 8004c7e:	4639      	mov	r1, r7
 8004c80:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004c84:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004c88:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004c8c:	4620      	mov	r0, r4
 8004c8e:	4798      	blx	r3
 8004c90:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004c94:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004c98:	3301      	adds	r3, #1
 8004c9a:	4637      	mov	r7, r6
 8004c9c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004ca0:	1c7a      	adds	r2, r7, #1
 8004ca2:	2329      	movs	r3, #41	; 0x29
 8004ca4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004ca8:	55e3      	strb	r3, [r4, r7]
 8004caa:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004cae:	686a      	ldr	r2, [r5, #4]
 8004cb0:	9905      	ldr	r1, [sp, #20]
 8004cb2:	f7fe b86a 	b.w	8002d8a <d_print_comp+0x1e6>
 8004cb6:	f105 020c 	add.w	r2, r5, #12
 8004cba:	4641      	mov	r1, r8
 8004cbc:	4620      	mov	r0, r4
 8004cbe:	f001 f935 	bl	8005f2c <d_print_function_type.isra.15>
 8004cc2:	68aa      	ldr	r2, [r5, #8]
 8004cc4:	2a00      	cmp	r2, #0
 8004cc6:	f000 83fd 	beq.w	80054c4 <d_print_comp+0x2920>
 8004cca:	4641      	mov	r1, r8
 8004ccc:	4620      	mov	r0, r4
 8004cce:	f7fd ff69 	bl	8002ba4 <d_print_comp>
 8004cd2:	9905      	ldr	r1, [sp, #20]
 8004cd4:	686a      	ldr	r2, [r5, #4]
 8004cd6:	f7fe b858 	b.w	8002d8a <d_print_comp+0x1e6>
 8004cda:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004cde:	2fff      	cmp	r7, #255	; 0xff
 8004ce0:	d111      	bne.n	8004d06 <d_print_comp+0x2162>
 8004ce2:	2600      	movs	r6, #0
 8004ce4:	4639      	mov	r1, r7
 8004ce6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004cea:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004cee:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004cf2:	4620      	mov	r0, r4
 8004cf4:	4798      	blx	r3
 8004cf6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004cfa:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004cfe:	3301      	adds	r3, #1
 8004d00:	4637      	mov	r7, r6
 8004d02:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004d06:	2320      	movs	r3, #32
 8004d08:	1c7a      	adds	r2, r7, #1
 8004d0a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004d0e:	55e3      	strb	r3, [r4, r7]
 8004d10:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004d14:	f7fe bf72 	b.w	8003bfc <d_print_comp+0x1058>
 8004d18:	08035008 	.word	0x08035008
 8004d1c:	08034db4 	.word	0x08034db4
 8004d20:	08034dc8 	.word	0x08034dc8
 8004d24:	08034fc4 	.word	0x08034fc4
 8004d28:	08034fac 	.word	0x08034fac
 8004d2c:	08034fb0 	.word	0x08034fb0
 8004d30:	08034db8 	.word	0x08034db8
 8004d34:	08034fb4 	.word	0x08034fb4
 8004d38:	080352d4 	.word	0x080352d4
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f893 8010 	ldrb.w	r8, [r3, #16]
 8004d42:	f1b8 0f00 	cmp.w	r8, #0
 8004d46:	f43e aa89 	beq.w	800325c <d_print_comp+0x6b8>
 8004d4a:	f1b8 0f06 	cmp.w	r8, #6
 8004d4e:	f240 843f 	bls.w	80055d0 <d_print_comp+0x2a2c>
 8004d52:	f1b8 0f07 	cmp.w	r8, #7
 8004d56:	f47e aa81 	bne.w	800325c <d_print_comp+0x6b8>
 8004d5a:	68eb      	ldr	r3, [r5, #12]
 8004d5c:	781a      	ldrb	r2, [r3, #0]
 8004d5e:	2a00      	cmp	r2, #0
 8004d60:	f47e aa7c 	bne.w	800325c <d_print_comp+0x6b8>
 8004d64:	68da      	ldr	r2, [r3, #12]
 8004d66:	2a01      	cmp	r2, #1
 8004d68:	f47e aa78 	bne.w	800325c <d_print_comp+0x6b8>
 8004d6c:	283c      	cmp	r0, #60	; 0x3c
 8004d6e:	f47e aa75 	bne.w	800325c <d_print_comp+0x6b8>
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	2b30      	cmp	r3, #48	; 0x30
 8004d78:	f000 84b6 	beq.w	80056e8 <d_print_comp+0x2b44>
 8004d7c:	2b31      	cmp	r3, #49	; 0x31
 8004d7e:	f47e aa6d 	bne.w	800325c <d_print_comp+0x6b8>
 8004d82:	2204      	movs	r2, #4
 8004d84:	49c3      	ldr	r1, [pc, #780]	; (8005094 <d_print_comp+0x24f0>)
 8004d86:	4620      	mov	r0, r4
 8004d88:	f7fb fae8 	bl	800035c <d_append_buffer>
 8004d8c:	9905      	ldr	r1, [sp, #20]
 8004d8e:	686a      	ldr	r2, [r5, #4]
 8004d90:	f7fd bffb 	b.w	8002d8a <d_print_comp+0x1e6>
 8004d94:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004d98:	2fff      	cmp	r7, #255	; 0xff
 8004d9a:	d112      	bne.n	8004dc2 <d_print_comp+0x221e>
 8004d9c:	f04f 0800 	mov.w	r8, #0
 8004da0:	4639      	mov	r1, r7
 8004da2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004da6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004daa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004dae:	4620      	mov	r0, r4
 8004db0:	4798      	blx	r3
 8004db2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004db6:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8004dba:	3301      	adds	r3, #1
 8004dbc:	4647      	mov	r7, r8
 8004dbe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004dc2:	1c7a      	adds	r2, r7, #1
 8004dc4:	235b      	movs	r3, #91	; 0x5b
 8004dc6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004dca:	55e3      	strb	r3, [r4, r7]
 8004dcc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004dd0:	4631      	mov	r1, r6
 8004dd2:	68ea      	ldr	r2, [r5, #12]
 8004dd4:	4620      	mov	r0, r4
 8004dd6:	f7fd fee5 	bl	8002ba4 <d_print_comp>
 8004dda:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004dde:	2fff      	cmp	r7, #255	; 0xff
 8004de0:	d111      	bne.n	8004e06 <d_print_comp+0x2262>
 8004de2:	2600      	movs	r6, #0
 8004de4:	4639      	mov	r1, r7
 8004de6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004dea:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004dee:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004df2:	4620      	mov	r0, r4
 8004df4:	4798      	blx	r3
 8004df6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004dfa:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004dfe:	3301      	adds	r3, #1
 8004e00:	4637      	mov	r7, r6
 8004e02:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004e06:	1c7a      	adds	r2, r7, #1
 8004e08:	235d      	movs	r3, #93	; 0x5d
 8004e0a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004e0e:	55e3      	strb	r3, [r4, r7]
 8004e10:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004e14:	686a      	ldr	r2, [r5, #4]
 8004e16:	9905      	ldr	r1, [sp, #20]
 8004e18:	f7fd bfb7 	b.w	8002d8a <d_print_comp+0x1e6>
 8004e1c:	1c59      	adds	r1, r3, #1
 8004e1e:	2229      	movs	r2, #41	; 0x29
 8004e20:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004e24:	54e2      	strb	r2, [r4, r3]
 8004e26:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8004e2a:	782b      	ldrb	r3, [r5, #0]
 8004e2c:	2b3d      	cmp	r3, #61	; 0x3d
 8004e2e:	f47e aa57 	bne.w	80032e0 <d_print_comp+0x73c>
 8004e32:	29ff      	cmp	r1, #255	; 0xff
 8004e34:	d10f      	bne.n	8004e56 <d_print_comp+0x22b2>
 8004e36:	2700      	movs	r7, #0
 8004e38:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004e3c:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8004e40:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004e44:	4620      	mov	r0, r4
 8004e46:	4798      	blx	r3
 8004e48:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004e4c:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 8004e50:	3301      	adds	r3, #1
 8004e52:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004e56:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 8004e5a:	232d      	movs	r3, #45	; 0x2d
 8004e5c:	1c51      	adds	r1, r2, #1
 8004e5e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004e62:	54a3      	strb	r3, [r4, r2]
 8004e64:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004e68:	f7fe ba3a 	b.w	80032e0 <d_print_comp+0x73c>
 8004e6c:	4f8a      	ldr	r7, [pc, #552]	; (8005098 <d_print_comp+0x24f4>)
 8004e6e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004e72:	f107 0a02 	add.w	sl, r7, #2
 8004e76:	e016      	b.n	8004ea6 <d_print_comp+0x2302>
 8004e78:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004e7c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004e80:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8004e84:	4798      	blx	r3
 8004e86:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004e90:	2200      	movs	r2, #0
 8004e92:	2301      	movs	r3, #1
 8004e94:	45ba      	cmp	sl, r7
 8004e96:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004e9a:	f804 8002 	strb.w	r8, [r4, r2]
 8004e9e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8004ea2:	f43f a980 	beq.w	80041a6 <d_print_comp+0x1602>
 8004ea6:	2bff      	cmp	r3, #255	; 0xff
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	4620      	mov	r0, r4
 8004eac:	f817 8b01 	ldrb.w	r8, [r7], #1
 8004eb0:	d0e2      	beq.n	8004e78 <d_print_comp+0x22d4>
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	e7ed      	b.n	8004e94 <d_print_comp+0x22f0>
 8004eb8:	6892      	ldr	r2, [r2, #8]
 8004eba:	4631      	mov	r1, r6
 8004ebc:	4620      	mov	r0, r4
 8004ebe:	f7fd fe71 	bl	8002ba4 <d_print_comp>
 8004ec2:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 8004ec6:	b113      	cbz	r3, 8004ece <d_print_comp+0x232a>
 8004ec8:	9b08      	ldr	r3, [sp, #32]
 8004eca:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8004ece:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8004ed2:	2b3c      	cmp	r3, #60	; 0x3c
 8004ed4:	f000 82c4 	beq.w	8005460 <d_print_comp+0x28bc>
 8004ed8:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004edc:	2fff      	cmp	r7, #255	; 0xff
 8004ede:	d112      	bne.n	8004f06 <d_print_comp+0x2362>
 8004ee0:	f04f 0800 	mov.w	r8, #0
 8004ee4:	4639      	mov	r1, r7
 8004ee6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004eea:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004eee:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004ef2:	4620      	mov	r0, r4
 8004ef4:	4798      	blx	r3
 8004ef6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004efa:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8004efe:	3301      	adds	r3, #1
 8004f00:	4647      	mov	r7, r8
 8004f02:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004f06:	233c      	movs	r3, #60	; 0x3c
 8004f08:	1c7a      	adds	r2, r7, #1
 8004f0a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004f0e:	55e3      	strb	r3, [r4, r7]
 8004f10:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004f14:	68ab      	ldr	r3, [r5, #8]
 8004f16:	4631      	mov	r1, r6
 8004f18:	68da      	ldr	r2, [r3, #12]
 8004f1a:	4620      	mov	r0, r4
 8004f1c:	f7fd fe42 	bl	8002ba4 <d_print_comp>
 8004f20:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8004f24:	2b3e      	cmp	r3, #62	; 0x3e
 8004f26:	f000 827d 	beq.w	8005424 <d_print_comp+0x2880>
 8004f2a:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004f2e:	2fff      	cmp	r7, #255	; 0xff
 8004f30:	d111      	bne.n	8004f56 <d_print_comp+0x23b2>
 8004f32:	2600      	movs	r6, #0
 8004f34:	4639      	mov	r1, r7
 8004f36:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004f3a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004f3e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004f42:	4620      	mov	r0, r4
 8004f44:	4798      	blx	r3
 8004f46:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004f4a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004f4e:	3301      	adds	r3, #1
 8004f50:	4637      	mov	r7, r6
 8004f52:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004f56:	233e      	movs	r3, #62	; 0x3e
 8004f58:	1c7a      	adds	r2, r7, #1
 8004f5a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004f5e:	55e3      	strb	r3, [r4, r7]
 8004f60:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004f64:	f7ff badc 	b.w	8004520 <d_print_comp+0x197c>
 8004f68:	4f4c      	ldr	r7, [pc, #304]	; (800509c <d_print_comp+0x24f8>)
 8004f6a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004f6e:	f107 0905 	add.w	r9, r7, #5
 8004f72:	f04f 0a00 	mov.w	sl, #0
 8004f76:	e016      	b.n	8004fa6 <d_print_comp+0x2402>
 8004f78:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004f7c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004f80:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8004f84:	4798      	blx	r3
 8004f86:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004f90:	2200      	movs	r2, #0
 8004f92:	2301      	movs	r3, #1
 8004f94:	45b9      	cmp	r9, r7
 8004f96:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004f9a:	f804 8002 	strb.w	r8, [r4, r2]
 8004f9e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8004fa2:	f43e ab41 	beq.w	8003628 <d_print_comp+0xa84>
 8004fa6:	2bff      	cmp	r3, #255	; 0xff
 8004fa8:	4619      	mov	r1, r3
 8004faa:	4620      	mov	r0, r4
 8004fac:	f817 8b01 	ldrb.w	r8, [r7], #1
 8004fb0:	d0e2      	beq.n	8004f78 <d_print_comp+0x23d4>
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	e7ed      	b.n	8004f94 <d_print_comp+0x23f0>
 8004fb8:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004fbc:	2fff      	cmp	r7, #255	; 0xff
 8004fbe:	d112      	bne.n	8004fe6 <d_print_comp+0x2442>
 8004fc0:	f04f 0a00 	mov.w	sl, #0
 8004fc4:	4639      	mov	r1, r7
 8004fc6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004fca:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8004fce:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004fd2:	4620      	mov	r0, r4
 8004fd4:	4798      	blx	r3
 8004fd6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004fda:	f8c4 a100 	str.w	sl, [r4, #256]	; 0x100
 8004fde:	3301      	adds	r3, #1
 8004fe0:	4657      	mov	r7, sl
 8004fe2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004fe6:	2320      	movs	r3, #32
 8004fe8:	1c7a      	adds	r2, r7, #1
 8004fea:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004fee:	55e3      	strb	r3, [r4, r7]
 8004ff0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004ff4:	f7fe bdda 	b.w	8003bac <d_print_comp+0x1008>
 8004ff8:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
 8004ffc:	2900      	cmp	r1, #0
 8004ffe:	f6fe ad99 	blt.w	8003b34 <d_print_comp+0xf90>
 8005002:	f7fb fbc3 	bl	800078c <d_index_template_argument.part.9>
 8005006:	4602      	mov	r2, r0
 8005008:	2800      	cmp	r0, #0
 800500a:	f47e ad93 	bne.w	8003b34 <d_print_comp+0xf90>
 800500e:	2301      	movs	r3, #1
 8005010:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8005014:	686a      	ldr	r2, [r5, #4]
 8005016:	9905      	ldr	r1, [sp, #20]
 8005018:	f7fd beb7 	b.w	8002d8a <d_print_comp+0x1e6>
 800501c:	9905      	ldr	r1, [sp, #20]
 800501e:	686a      	ldr	r2, [r5, #4]
 8005020:	f7fd beb3 	b.w	8002d8a <d_print_comp+0x1e6>
 8005024:	220d      	movs	r2, #13
 8005026:	491e      	ldr	r1, [pc, #120]	; (80050a0 <d_print_comp+0x24fc>)
 8005028:	4620      	mov	r0, r4
 800502a:	f7fb f997 	bl	800035c <d_append_buffer>
 800502e:	68f9      	ldr	r1, [r7, #12]
 8005030:	4620      	mov	r0, r4
 8005032:	3101      	adds	r1, #1
 8005034:	f7fb fc84 	bl	8000940 <d_append_num>
 8005038:	2203      	movs	r2, #3
 800503a:	491a      	ldr	r1, [pc, #104]	; (80050a4 <d_print_comp+0x2500>)
 800503c:	4620      	mov	r0, r4
 800503e:	f7fb f98d 	bl	800035c <d_append_buffer>
 8005042:	68bf      	ldr	r7, [r7, #8]
 8005044:	f7ff b8b4 	b.w	80041b0 <d_print_comp+0x160c>
 8005048:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 800504c:	9905      	ldr	r1, [sp, #20]
 800504e:	686a      	ldr	r2, [r5, #4]
 8005050:	42b8      	cmp	r0, r7
 8005052:	f47d ae9a 	bne.w	8002d8a <d_print_comp+0x1e6>
 8005056:	3b01      	subs	r3, #1
 8005058:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800505c:	f7fd be95 	b.w	8002d8a <d_print_comp+0x1e6>
 8005060:	4642      	mov	r2, r8
 8005062:	465b      	mov	r3, fp
 8005064:	46ab      	mov	fp, r5
 8005066:	f1bb 0f04 	cmp.w	fp, #4
 800506a:	46a0      	mov	r8, r4
 800506c:	461d      	mov	r5, r3
 800506e:	4614      	mov	r4, r2
 8005070:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
 8005074:	f000 82a3 	beq.w	80055be <d_print_comp+0x2a1a>
 8005078:	f1bb 0f02 	cmp.w	fp, #2
 800507c:	d137      	bne.n	80050ee <d_print_comp+0x254a>
 800507e:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 8005082:	f89a 3000 	ldrb.w	r3, [sl]
 8005086:	2b46      	cmp	r3, #70	; 0x46
 8005088:	f000 8327 	beq.w	80056da <d_print_comp+0x2b36>
 800508c:	eb09 1207 	add.w	r2, r9, r7, lsl #4
 8005090:	3a0c      	subs	r2, #12
 8005092:	e020      	b.n	80050d6 <d_print_comp+0x2532>
 8005094:	08034fe0 	.word	0x08034fe0
 8005098:	08034e04 	.word	0x08034e04
 800509c:	08034f78 	.word	0x08034f78
 80050a0:	08034e08 	.word	0x08034e08
 80050a4:	08034e18 	.word	0x08034e18
 80050a8:	2f04      	cmp	r7, #4
 80050aa:	f43f a81d 	beq.w	80040e8 <d_print_comp+0x1544>
 80050ae:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 80050b2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80050b6:	2300      	movs	r3, #0
 80050b8:	f84e 3c0c 	str.w	r3, [lr, #-12]
 80050bc:	f84e ac10 	str.w	sl, [lr, #-16]
 80050c0:	9b01      	ldr	r3, [sp, #4]
 80050c2:	f8da a008 	ldr.w	sl, [sl, #8]
 80050c6:	f8c4 c114 	str.w	ip, [r4, #276]	; 0x114
 80050ca:	3701      	adds	r7, #1
 80050cc:	f84e bc04 	str.w	fp, [lr, #-4]
 80050d0:	f84e 3c08 	str.w	r3, [lr, #-8]
 80050d4:	4672      	mov	r2, lr
 80050d6:	f89a 0000 	ldrb.w	r0, [sl]
 80050da:	f7fb f975 	bl	80003c8 <is_fnqual_component_type>
 80050de:	f1a2 0b04 	sub.w	fp, r2, #4
 80050e2:	f102 0e10 	add.w	lr, r2, #16
 80050e6:	f102 0c0c 	add.w	ip, r2, #12
 80050ea:	2800      	cmp	r0, #0
 80050ec:	d1dc      	bne.n	80050a8 <d_print_comp+0x2504>
 80050ee:	68ea      	ldr	r2, [r5, #12]
 80050f0:	4631      	mov	r1, r6
 80050f2:	4620      	mov	r0, r4
 80050f4:	f7fd fd56 	bl	8002ba4 <d_print_comp>
 80050f8:	f898 3000 	ldrb.w	r3, [r8]
 80050fc:	2b04      	cmp	r3, #4
 80050fe:	bf04      	itt	eq
 8005100:	9b06      	ldreq	r3, [sp, #24]
 8005102:	f8c4 3110 	streq.w	r3, [r4, #272]	; 0x110
 8005106:	013f      	lsls	r7, r7, #4
 8005108:	f04f 0a20 	mov.w	sl, #32
 800510c:	46a8      	mov	r8, r5
 800510e:	eb09 0b07 	add.w	fp, r9, r7
 8005112:	f85b 5c08 	ldr.w	r5, [fp, #-8]
 8005116:	bb0d      	cbnz	r5, 800515c <d_print_comp+0x25b8>
 8005118:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800511c:	2bff      	cmp	r3, #255	; 0xff
 800511e:	4620      	mov	r0, r4
 8005120:	4619      	mov	r1, r3
 8005122:	d10e      	bne.n	8005142 <d_print_comp+0x259e>
 8005124:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005128:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800512c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005130:	4798      	blx	r3
 8005132:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005136:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 800513a:	1c5a      	adds	r2, r3, #1
 800513c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005140:	462b      	mov	r3, r5
 8005142:	1c59      	adds	r1, r3, #1
 8005144:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005148:	f85b 2c0c 	ldr.w	r2, [fp, #-12]
 800514c:	f804 a003 	strb.w	sl, [r4, r3]
 8005150:	4631      	mov	r1, r6
 8005152:	4620      	mov	r0, r4
 8005154:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8005158:	f000 fbba 	bl	80058d0 <d_print_mod>
 800515c:	3f10      	subs	r7, #16
 800515e:	d1d6      	bne.n	800510e <d_print_comp+0x256a>
 8005160:	9b02      	ldr	r3, [sp, #8]
 8005162:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8005166:	4645      	mov	r5, r8
 8005168:	f7fe bfc1 	b.w	80040ee <d_print_comp+0x154a>
 800516c:	4631      	mov	r1, r6
 800516e:	68aa      	ldr	r2, [r5, #8]
 8005170:	4620      	mov	r0, r4
 8005172:	f7fd fd17 	bl	8002ba4 <d_print_comp>
 8005176:	9905      	ldr	r1, [sp, #20]
 8005178:	686a      	ldr	r2, [r5, #4]
 800517a:	f7fd be06 	b.w	8002d8a <d_print_comp+0x1e6>
 800517e:	460f      	mov	r7, r1
 8005180:	46a9      	mov	r9, r5
 8005182:	f7fe bebb 	b.w	8003efc <d_print_comp+0x1358>
 8005186:	4644      	mov	r4, r8
 8005188:	465d      	mov	r5, fp
 800518a:	f8c8 1114 	str.w	r1, [r8, #276]	; 0x114
 800518e:	f7fe bfab 	b.w	80040e8 <d_print_comp+0x1544>
 8005192:	68ea      	ldr	r2, [r5, #12]
 8005194:	4631      	mov	r1, r6
 8005196:	4620      	mov	r0, r4
 8005198:	f7fd fd04 	bl	8002ba4 <d_print_comp>
 800519c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800519e:	9a01      	ldr	r2, [sp, #4]
 80051a0:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f43e ab19 	beq.w	80037dc <d_print_comp+0xc38>
 80051aa:	f7fe bb1f 	b.w	80037ec <d_print_comp+0xc48>
 80051ae:	2301      	movs	r3, #1
 80051b0:	4664      	mov	r4, ip
 80051b2:	f8cc 3118 	str.w	r3, [ip, #280]	; 0x118
 80051b6:	f7fe bb19 	b.w	80037ec <d_print_comp+0xc48>
 80051ba:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80051be:	f7fe bead 	b.w	8003f1c <d_print_comp+0x1378>
 80051c2:	4631      	mov	r1, r6
 80051c4:	68aa      	ldr	r2, [r5, #8]
 80051c6:	4620      	mov	r0, r4
 80051c8:	f001 f9f4 	bl	80065b4 <d_print_subexpr>
 80051cc:	2203      	movs	r2, #3
 80051ce:	49bf      	ldr	r1, [pc, #764]	; (80054cc <d_print_comp+0x2928>)
 80051d0:	4620      	mov	r0, r4
 80051d2:	f7fb f8c3 	bl	800035c <d_append_buffer>
 80051d6:	9905      	ldr	r1, [sp, #20]
 80051d8:	686a      	ldr	r2, [r5, #4]
 80051da:	f7fd bdd6 	b.w	8002d8a <d_print_comp+0x1e6>
 80051de:	f8d4 e130 	ldr.w	lr, [r4, #304]	; 0x130
 80051e2:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
 80051e6:	f1be 0f00 	cmp.w	lr, #0
 80051ea:	dd17      	ble.n	800521c <d_print_comp+0x2678>
 80051ec:	6810      	ldr	r0, [r2, #0]
 80051ee:	4581      	cmp	r9, r0
 80051f0:	f000 81a7 	beq.w	8005542 <d_print_comp+0x299e>
 80051f4:	f102 0b08 	add.w	fp, r2, #8
 80051f8:	46bc      	mov	ip, r7
 80051fa:	9101      	str	r1, [sp, #4]
 80051fc:	4670      	mov	r0, lr
 80051fe:	e004      	b.n	800520a <d_print_comp+0x2666>
 8005200:	f852 103c 	ldr.w	r1, [r2, ip, lsl #3]
 8005204:	4589      	cmp	r9, r1
 8005206:	f000 819d 	beq.w	8005544 <d_print_comp+0x29a0>
 800520a:	f10c 0c01 	add.w	ip, ip, #1
 800520e:	4560      	cmp	r0, ip
 8005210:	46da      	mov	sl, fp
 8005212:	f10b 0b08 	add.w	fp, fp, #8
 8005216:	d1f3      	bne.n	8005200 <d_print_comp+0x265c>
 8005218:	9901      	ldr	r1, [sp, #4]
 800521a:	4686      	mov	lr, r0
 800521c:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
 8005220:	459e      	cmp	lr, r3
 8005222:	f280 8344 	bge.w	80058ae <d_print_comp+0x2d0a>
 8005226:	f10e 0301 	add.w	r3, lr, #1
 800522a:	eb02 0cce 	add.w	ip, r2, lr, lsl #3
 800522e:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
 8005232:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
 8005236:	f842 903e 	str.w	r9, [r2, lr, lsl #3]
 800523a:	f10c 0c04 	add.w	ip, ip, #4
 800523e:	2800      	cmp	r0, #0
 8005240:	f000 825b 	beq.w	80056fa <d_print_comp+0x2b56>
 8005244:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 8005248:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 800524c:	429a      	cmp	r2, r3
 800524e:	f102 0e01 	add.w	lr, r2, #1
 8005252:	f280 832c 	bge.w	80058ae <d_print_comp+0x2d0a>
 8005256:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800525a:	f8c4 e13c 	str.w	lr, [r4, #316]	; 0x13c
 800525e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005262:	6842      	ldr	r2, [r0, #4]
 8005264:	605a      	str	r2, [r3, #4]
 8005266:	f8cc 3000 	str.w	r3, [ip]
 800526a:	6800      	ldr	r0, [r0, #0]
 800526c:	469c      	mov	ip, r3
 800526e:	e7e6      	b.n	800523e <d_print_comp+0x269a>
 8005270:	4606      	mov	r6, r0
 8005272:	4647      	mov	r7, r8
 8005274:	e001      	b.n	800527a <d_print_comp+0x26d6>
 8005276:	68ff      	ldr	r7, [r7, #12]
 8005278:	b31f      	cbz	r7, 80052c2 <d_print_comp+0x271e>
 800527a:	783b      	ldrb	r3, [r7, #0]
 800527c:	2b2f      	cmp	r3, #47	; 0x2f
 800527e:	d120      	bne.n	80052c2 <d_print_comp+0x271e>
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	b1f3      	cbz	r3, 80052c2 <d_print_comp+0x271e>
 8005284:	781a      	ldrb	r2, [r3, #0]
 8005286:	2a4a      	cmp	r2, #74	; 0x4a
 8005288:	bf18      	it	ne
 800528a:	3601      	addne	r6, #1
 800528c:	d1f3      	bne.n	8005276 <d_print_comp+0x26d2>
 800528e:	6899      	ldr	r1, [r3, #8]
 8005290:	4620      	mov	r0, r4
 8005292:	f7fb faa1 	bl	80007d8 <d_find_pack>
 8005296:	2800      	cmp	r0, #0
 8005298:	f000 81ef 	beq.w	800567a <d_print_comp+0x2ad6>
 800529c:	7803      	ldrb	r3, [r0, #0]
 800529e:	2b2f      	cmp	r3, #47	; 0x2f
 80052a0:	f040 81eb 	bne.w	800567a <d_print_comp+0x2ad6>
 80052a4:	6883      	ldr	r3, [r0, #8]
 80052a6:	b153      	cbz	r3, 80052be <d_print_comp+0x271a>
 80052a8:	2300      	movs	r3, #0
 80052aa:	e004      	b.n	80052b6 <d_print_comp+0x2712>
 80052ac:	7802      	ldrb	r2, [r0, #0]
 80052ae:	2a2f      	cmp	r2, #47	; 0x2f
 80052b0:	d105      	bne.n	80052be <d_print_comp+0x271a>
 80052b2:	6882      	ldr	r2, [r0, #8]
 80052b4:	b11a      	cbz	r2, 80052be <d_print_comp+0x271a>
 80052b6:	68c0      	ldr	r0, [r0, #12]
 80052b8:	3301      	adds	r3, #1
 80052ba:	2800      	cmp	r0, #0
 80052bc:	d1f6      	bne.n	80052ac <d_print_comp+0x2708>
 80052be:	441e      	add	r6, r3
 80052c0:	e7d9      	b.n	8005276 <d_print_comp+0x26d2>
 80052c2:	4631      	mov	r1, r6
 80052c4:	4620      	mov	r0, r4
 80052c6:	f7fb fb3b 	bl	8000940 <d_append_num>
 80052ca:	9905      	ldr	r1, [sp, #20]
 80052cc:	686a      	ldr	r2, [r5, #4]
 80052ce:	f7fd bd5c 	b.w	8002d8a <d_print_comp+0x1e6>
 80052d2:	4631      	mov	r1, r6
 80052d4:	4620      	mov	r0, r4
 80052d6:	f001 f92d 	bl	8006534 <d_print_expr_op>
 80052da:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80052de:	2fff      	cmp	r7, #255	; 0xff
 80052e0:	d112      	bne.n	8005308 <d_print_comp+0x2764>
 80052e2:	f04f 0800 	mov.w	r8, #0
 80052e6:	4639      	mov	r1, r7
 80052e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80052ec:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80052f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80052f4:	4620      	mov	r0, r4
 80052f6:	4798      	blx	r3
 80052f8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80052fc:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8005300:	3301      	adds	r3, #1
 8005302:	4647      	mov	r7, r8
 8005304:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005308:	1c7a      	adds	r2, r7, #1
 800530a:	233c      	movs	r3, #60	; 0x3c
 800530c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005310:	55e3      	strb	r3, [r4, r7]
 8005312:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005316:	68eb      	ldr	r3, [r5, #12]
 8005318:	4631      	mov	r1, r6
 800531a:	689a      	ldr	r2, [r3, #8]
 800531c:	4620      	mov	r0, r4
 800531e:	f7fd fc41 	bl	8002ba4 <d_print_comp>
 8005322:	2202      	movs	r2, #2
 8005324:	496a      	ldr	r1, [pc, #424]	; (80054d0 <d_print_comp+0x292c>)
 8005326:	4620      	mov	r0, r4
 8005328:	f7fb f818 	bl	800035c <d_append_buffer>
 800532c:	68eb      	ldr	r3, [r5, #12]
 800532e:	4631      	mov	r1, r6
 8005330:	68da      	ldr	r2, [r3, #12]
 8005332:	4620      	mov	r0, r4
 8005334:	f7fd fc36 	bl	8002ba4 <d_print_comp>
 8005338:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800533c:	2fff      	cmp	r7, #255	; 0xff
 800533e:	d111      	bne.n	8005364 <d_print_comp+0x27c0>
 8005340:	2600      	movs	r6, #0
 8005342:	4639      	mov	r1, r7
 8005344:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005348:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800534c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005350:	4620      	mov	r0, r4
 8005352:	4798      	blx	r3
 8005354:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005358:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800535c:	3301      	adds	r3, #1
 800535e:	4637      	mov	r7, r6
 8005360:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005364:	1c7a      	adds	r2, r7, #1
 8005366:	2329      	movs	r3, #41	; 0x29
 8005368:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800536c:	55e3      	strb	r3, [r4, r7]
 800536e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005372:	686a      	ldr	r2, [r5, #4]
 8005374:	9905      	ldr	r1, [sp, #20]
 8005376:	f7fd bd08 	b.w	8002d8a <d_print_comp+0x1e6>
 800537a:	9905      	ldr	r1, [sp, #20]
 800537c:	686a      	ldr	r2, [r5, #4]
 800537e:	f7fd bd04 	b.w	8002d8a <d_print_comp+0x1e6>
 8005382:	4642      	mov	r2, r8
 8005384:	4631      	mov	r1, r6
 8005386:	4620      	mov	r0, r4
 8005388:	f7fd fc0c 	bl	8002ba4 <d_print_comp>
 800538c:	9905      	ldr	r1, [sp, #20]
 800538e:	686a      	ldr	r2, [r5, #4]
 8005390:	f7fd bcfb 	b.w	8002d8a <d_print_comp+0x1e6>
 8005394:	a918      	add	r1, sp, #96	; 0x60
 8005396:	4620      	mov	r0, r4
 8005398:	f841 3d40 	str.w	r3, [r1, #-64]!
 800539c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80053a0:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
 80053a4:	4641      	mov	r1, r8
 80053a6:	960a      	str	r6, [sp, #40]	; 0x28
 80053a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80053aa:	9509      	str	r5, [sp, #36]	; 0x24
 80053ac:	f7fd fbfa 	bl	8002ba4 <d_print_comp>
 80053b0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80053b2:	9b08      	ldr	r3, [sp, #32]
 80053b4:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 80053b8:	b9ee      	cbnz	r6, 80053f6 <d_print_comp+0x2852>
 80053ba:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80053be:	2fff      	cmp	r7, #255	; 0xff
 80053c0:	d110      	bne.n	80053e4 <d_print_comp+0x2840>
 80053c2:	4639      	mov	r1, r7
 80053c4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80053c8:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80053cc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80053d0:	4620      	mov	r0, r4
 80053d2:	4798      	blx	r3
 80053d4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80053d8:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80053dc:	3301      	adds	r3, #1
 80053de:	4637      	mov	r7, r6
 80053e0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80053e4:	2320      	movs	r3, #32
 80053e6:	1c7a      	adds	r2, r7, #1
 80053e8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80053ec:	55e3      	strb	r3, [r4, r7]
 80053ee:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80053f2:	f7fe ba0c 	b.w	800380e <d_print_comp+0xc6a>
 80053f6:	9905      	ldr	r1, [sp, #20]
 80053f8:	686a      	ldr	r2, [r5, #4]
 80053fa:	f7fd bcc6 	b.w	8002d8a <d_print_comp+0x1e6>
 80053fe:	4935      	ldr	r1, [pc, #212]	; (80054d4 <d_print_comp+0x2930>)
 8005400:	68b8      	ldr	r0, [r7, #8]
 8005402:	f029 fcff 	bl	802ee04 <strncmp>
 8005406:	2800      	cmp	r0, #0
 8005408:	f47e abc6 	bne.w	8003b98 <d_print_comp+0xff4>
 800540c:	4631      	mov	r1, r6
 800540e:	68ea      	ldr	r2, [r5, #12]
 8005410:	4620      	mov	r0, r4
 8005412:	f7fd fbc7 	bl	8002ba4 <d_print_comp>
 8005416:	2202      	movs	r2, #2
 8005418:	492f      	ldr	r1, [pc, #188]	; (80054d8 <d_print_comp+0x2934>)
 800541a:	4620      	mov	r0, r4
 800541c:	f7fa ff9e 	bl	800035c <d_append_buffer>
 8005420:	f7fe bc09 	b.w	8003c36 <d_print_comp+0x1092>
 8005424:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8005428:	2fff      	cmp	r7, #255	; 0xff
 800542a:	d111      	bne.n	8005450 <d_print_comp+0x28ac>
 800542c:	2600      	movs	r6, #0
 800542e:	4639      	mov	r1, r7
 8005430:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005434:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005438:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800543c:	4620      	mov	r0, r4
 800543e:	4798      	blx	r3
 8005440:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005444:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005448:	3301      	adds	r3, #1
 800544a:	4637      	mov	r7, r6
 800544c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005450:	2320      	movs	r3, #32
 8005452:	1c7a      	adds	r2, r7, #1
 8005454:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005458:	55e3      	strb	r3, [r4, r7]
 800545a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800545e:	e564      	b.n	8004f2a <d_print_comp+0x2386>
 8005460:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8005464:	2fff      	cmp	r7, #255	; 0xff
 8005466:	d112      	bne.n	800548e <d_print_comp+0x28ea>
 8005468:	f04f 0800 	mov.w	r8, #0
 800546c:	4639      	mov	r1, r7
 800546e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005472:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005476:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800547a:	4620      	mov	r0, r4
 800547c:	4798      	blx	r3
 800547e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005482:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8005486:	3301      	adds	r3, #1
 8005488:	4647      	mov	r7, r8
 800548a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800548e:	2320      	movs	r3, #32
 8005490:	1c7a      	adds	r2, r7, #1
 8005492:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005496:	55e3      	strb	r3, [r4, r7]
 8005498:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800549c:	e51c      	b.n	8004ed8 <d_print_comp+0x2334>
 800549e:	4640      	mov	r0, r8
 80054a0:	490e      	ldr	r1, [pc, #56]	; (80054dc <d_print_comp+0x2938>)
 80054a2:	f001 fc13 	bl	8006ccc <strcmp>
 80054a6:	2800      	cmp	r0, #0
 80054a8:	f040 81fb 	bne.w	80058a2 <d_print_comp+0x2cfe>
 80054ac:	68eb      	ldr	r3, [r5, #12]
 80054ae:	4631      	mov	r1, r6
 80054b0:	68da      	ldr	r2, [r3, #12]
 80054b2:	4620      	mov	r0, r4
 80054b4:	f001 f87e 	bl	80065b4 <d_print_subexpr>
 80054b8:	f7fd bc60 	b.w	8002d7c <d_print_comp+0x1d8>
 80054bc:	9905      	ldr	r1, [sp, #20]
 80054be:	686a      	ldr	r2, [r5, #4]
 80054c0:	f7fd bc63 	b.w	8002d8a <d_print_comp+0x1e6>
 80054c4:	9905      	ldr	r1, [sp, #20]
 80054c6:	686a      	ldr	r2, [r5, #4]
 80054c8:	f7fd bc5f 	b.w	8002d8a <d_print_comp+0x1e6>
 80054cc:	08035004 	.word	0x08035004
 80054d0:	08034fb8 	.word	0x08034fb8
 80054d4:	08034e1c 	.word	0x08034e1c
 80054d8:	08034e24 	.word	0x08034e24
 80054dc:	08034dbc 	.word	0x08034dbc
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	689a      	ldr	r2, [r3, #8]
 80054e4:	2a01      	cmp	r2, #1
 80054e6:	f47d ac4e 	bne.w	8002d86 <d_print_comp+0x1e2>
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	2b3e      	cmp	r3, #62	; 0x3e
 80054f0:	f47d ac49 	bne.w	8002d86 <d_print_comp+0x1e2>
 80054f4:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80054f8:	2fff      	cmp	r7, #255	; 0xff
 80054fa:	d111      	bne.n	8005520 <d_print_comp+0x297c>
 80054fc:	2600      	movs	r6, #0
 80054fe:	4639      	mov	r1, r7
 8005500:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005504:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005508:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800550c:	4620      	mov	r0, r4
 800550e:	4798      	blx	r3
 8005510:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005514:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005518:	3301      	adds	r3, #1
 800551a:	4637      	mov	r7, r6
 800551c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005520:	1c7a      	adds	r2, r7, #1
 8005522:	2329      	movs	r3, #41	; 0x29
 8005524:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005528:	55e3      	strb	r3, [r4, r7]
 800552a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800552e:	686a      	ldr	r2, [r5, #4]
 8005530:	9905      	ldr	r1, [sp, #20]
 8005532:	f7fd bc2a 	b.w	8002d8a <d_print_comp+0x1e6>
 8005536:	2a05      	cmp	r2, #5
 8005538:	f200 80a9 	bhi.w	800568e <d_print_comp+0x2aea>
 800553c:	3b57      	subs	r3, #87	; 0x57
 800553e:	f7ff ba1d 	b.w	800497c <d_print_comp+0x1dd8>
 8005542:	4692      	mov	sl, r2
 8005544:	461a      	mov	r2, r3
 8005546:	e001      	b.n	800554c <d_print_comp+0x29a8>
 8005548:	6852      	ldr	r2, [r2, #4]
 800554a:	b342      	cbz	r2, 800559e <d_print_comp+0x29fa>
 800554c:	6811      	ldr	r1, [r2, #0]
 800554e:	4589      	cmp	r9, r1
 8005550:	d003      	beq.n	800555a <d_print_comp+0x29b6>
 8005552:	428d      	cmp	r5, r1
 8005554:	d1f8      	bne.n	8005548 <d_print_comp+0x29a4>
 8005556:	429a      	cmp	r2, r3
 8005558:	d0f6      	beq.n	8005548 <d_print_comp+0x29a4>
 800555a:	f109 0108 	add.w	r1, r9, #8
 800555e:	4620      	mov	r0, r4
 8005560:	f7fb f92a 	bl	80007b8 <d_lookup_template_argument.isra.10>
 8005564:	4681      	mov	r9, r0
 8005566:	b198      	cbz	r0, 8005590 <d_print_comp+0x29ec>
 8005568:	f899 3000 	ldrb.w	r3, [r9]
 800556c:	2b2f      	cmp	r3, #47	; 0x2f
 800556e:	f47e acb6 	bne.w	8003ede <d_print_comp+0x133a>
 8005572:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
 8005576:	2900      	cmp	r1, #0
 8005578:	f6fe acb6 	blt.w	8003ee8 <d_print_comp+0x1344>
 800557c:	4648      	mov	r0, r9
 800557e:	f7fb f905 	bl	800078c <d_index_template_argument.part.9>
 8005582:	4681      	mov	r9, r0
 8005584:	2800      	cmp	r0, #0
 8005586:	f47e acaa 	bne.w	8003ede <d_print_comp+0x133a>
 800558a:	b10f      	cbz	r7, 8005590 <d_print_comp+0x29ec>
 800558c:	f8c4 8110 	str.w	r8, [r4, #272]	; 0x110
 8005590:	2301      	movs	r3, #1
 8005592:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8005596:	686a      	ldr	r2, [r5, #4]
 8005598:	9905      	ldr	r1, [sp, #20]
 800559a:	f7fd bbf6 	b.w	8002d8a <d_print_comp+0x1e6>
 800559e:	f8da 3004 	ldr.w	r3, [sl, #4]
 80055a2:	f8d4 8110 	ldr.w	r8, [r4, #272]	; 0x110
 80055a6:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80055aa:	f109 0108 	add.w	r1, r9, #8
 80055ae:	4620      	mov	r0, r4
 80055b0:	f7fb f902 	bl	80007b8 <d_lookup_template_argument.isra.10>
 80055b4:	2701      	movs	r7, #1
 80055b6:	4681      	mov	r9, r0
 80055b8:	2800      	cmp	r0, #0
 80055ba:	d1d5      	bne.n	8005568 <d_print_comp+0x29c4>
 80055bc:	e7e6      	b.n	800558c <d_print_comp+0x29e8>
 80055be:	ab18      	add	r3, sp, #96	; 0x60
 80055c0:	9a01      	ldr	r2, [sp, #4]
 80055c2:	f843 2d48 	str.w	r2, [r3, #-72]!
 80055c6:	f8cd 801c 	str.w	r8, [sp, #28]
 80055ca:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80055ce:	e58e      	b.n	80050ee <d_print_comp+0x254a>
 80055d0:	68eb      	ldr	r3, [r5, #12]
 80055d2:	f893 9000 	ldrb.w	r9, [r3]
 80055d6:	f1b9 0f00 	cmp.w	r9, #0
 80055da:	f47d ae3f 	bne.w	800325c <d_print_comp+0x6b8>
 80055de:	283d      	cmp	r0, #61	; 0x3d
 80055e0:	f000 80e6 	beq.w	80057b0 <d_print_comp+0x2c0c>
 80055e4:	4631      	mov	r1, r6
 80055e6:	68ea      	ldr	r2, [r5, #12]
 80055e8:	4620      	mov	r0, r4
 80055ea:	f1a8 0802 	sub.w	r8, r8, #2
 80055ee:	f7fd fad9 	bl	8002ba4 <d_print_comp>
 80055f2:	f1b8 0f04 	cmp.w	r8, #4
 80055f6:	f200 80d7 	bhi.w	80057a8 <d_print_comp+0x2c04>
 80055fa:	e8df f008 	tbb	[pc, r8]
 80055fe:	93b4      	.short	0x93b4
 8005600:	818a      	.short	0x818a
 8005602:	35          	.byte	0x35
 8005603:	00          	.byte	0x00
 8005604:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8005608:	4631      	mov	r1, r6
 800560a:	4620      	mov	r0, r4
 800560c:	f000 ffd2 	bl	80065b4 <d_print_subexpr>
 8005610:	464a      	mov	r2, r9
 8005612:	4631      	mov	r1, r6
 8005614:	4620      	mov	r0, r4
 8005616:	f000 ff8d 	bl	8006534 <d_print_expr_op>
 800561a:	9905      	ldr	r1, [sp, #20]
 800561c:	686a      	ldr	r2, [r5, #4]
 800561e:	f7fd bbb4 	b.w	8002d8a <d_print_comp+0x1e6>
 8005622:	4641      	mov	r1, r8
 8005624:	4620      	mov	r0, r4
 8005626:	f7fb f8d7 	bl	80007d8 <d_find_pack>
 800562a:	b1a8      	cbz	r0, 8005658 <d_print_comp+0x2ab4>
 800562c:	7803      	ldrb	r3, [r0, #0]
 800562e:	2b2f      	cmp	r3, #47	; 0x2f
 8005630:	d112      	bne.n	8005658 <d_print_comp+0x2ab4>
 8005632:	6883      	ldr	r3, [r0, #8]
 8005634:	b183      	cbz	r3, 8005658 <d_print_comp+0x2ab4>
 8005636:	68c0      	ldr	r0, [r0, #12]
 8005638:	3701      	adds	r7, #1
 800563a:	e7f6      	b.n	800562a <d_print_comp+0x2a86>
 800563c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005640:	781a      	ldrb	r2, [r3, #0]
 8005642:	2a01      	cmp	r2, #1
 8005644:	f47f aad2 	bne.w	8004bec <d_print_comp+0x2048>
 8005648:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800564c:	7812      	ldrb	r2, [r2, #0]
 800564e:	2a29      	cmp	r2, #41	; 0x29
 8005650:	bf08      	it	eq
 8005652:	4698      	moveq	r8, r3
 8005654:	f7ff baca 	b.w	8004bec <d_print_comp+0x2048>
 8005658:	4639      	mov	r1, r7
 800565a:	4620      	mov	r0, r4
 800565c:	f7fb f970 	bl	8000940 <d_append_num>
 8005660:	9905      	ldr	r1, [sp, #20]
 8005662:	686a      	ldr	r2, [r5, #4]
 8005664:	f7fd bb91 	b.w	8002d8a <d_print_comp+0x1e6>
 8005668:	2203      	movs	r2, #3
 800566a:	4994      	ldr	r1, [pc, #592]	; (80058bc <d_print_comp+0x2d18>)
 800566c:	4620      	mov	r0, r4
 800566e:	f7fa fe75 	bl	800035c <d_append_buffer>
 8005672:	9905      	ldr	r1, [sp, #20]
 8005674:	686a      	ldr	r2, [r5, #4]
 8005676:	f7fd bb88 	b.w	8002d8a <d_print_comp+0x1e6>
 800567a:	2300      	movs	r3, #0
 800567c:	441e      	add	r6, r3
 800567e:	e5fa      	b.n	8005276 <d_print_comp+0x26d2>
 8005680:	464a      	mov	r2, r9
 8005682:	4631      	mov	r1, r6
 8005684:	4620      	mov	r0, r4
 8005686:	f000 ff55 	bl	8006534 <d_print_expr_op>
 800568a:	f7fd bea9 	b.w	80033e0 <d_print_comp+0x83c>
 800568e:	2b5f      	cmp	r3, #95	; 0x5f
 8005690:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005694:	f47f a964 	bne.w	8004960 <d_print_comp+0x1dbc>
 8005698:	28ff      	cmp	r0, #255	; 0xff
 800569a:	f63f a961 	bhi.w	8004960 <d_print_comp+0x1dbc>
 800569e:	29ff      	cmp	r1, #255	; 0xff
 80056a0:	fa5f f980 	uxtb.w	r9, r0
 80056a4:	d10f      	bne.n	80056c6 <d_print_comp+0x2b22>
 80056a6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80056aa:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80056ae:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80056b2:	4620      	mov	r0, r4
 80056b4:	4798      	blx	r3
 80056b6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80056ba:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 80056be:	3301      	adds	r3, #1
 80056c0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80056c4:	2100      	movs	r1, #0
 80056c6:	1c4b      	adds	r3, r1, #1
 80056c8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80056cc:	4657      	mov	r7, sl
 80056ce:	f804 9001 	strb.w	r9, [r4, r1]
 80056d2:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80056d6:	f7ff b935 	b.w	8004944 <d_print_comp+0x1da0>
 80056da:	f8da a008 	ldr.w	sl, [sl, #8]
 80056de:	f1ba 0f00 	cmp.w	sl, #0
 80056e2:	f43e ad01 	beq.w	80040e8 <d_print_comp+0x1544>
 80056e6:	e4d1      	b.n	800508c <d_print_comp+0x24e8>
 80056e8:	2205      	movs	r2, #5
 80056ea:	4975      	ldr	r1, [pc, #468]	; (80058c0 <d_print_comp+0x2d1c>)
 80056ec:	4620      	mov	r0, r4
 80056ee:	f7fa fe35 	bl	800035c <d_append_buffer>
 80056f2:	9905      	ldr	r1, [sp, #20]
 80056f4:	686a      	ldr	r2, [r5, #4]
 80056f6:	f7fd bb48 	b.w	8002d8a <d_print_comp+0x1e6>
 80056fa:	f8cc 0000 	str.w	r0, [ip]
 80056fe:	e72c      	b.n	800555a <d_print_comp+0x29b6>
 8005700:	2202      	movs	r2, #2
 8005702:	4970      	ldr	r1, [pc, #448]	; (80058c4 <d_print_comp+0x2d20>)
 8005704:	4620      	mov	r0, r4
 8005706:	f7fa fe29 	bl	800035c <d_append_buffer>
 800570a:	9905      	ldr	r1, [sp, #20]
 800570c:	686a      	ldr	r2, [r5, #4]
 800570e:	f7fd bb3c 	b.w	8002d8a <d_print_comp+0x1e6>
 8005712:	2202      	movs	r2, #2
 8005714:	496c      	ldr	r1, [pc, #432]	; (80058c8 <d_print_comp+0x2d24>)
 8005716:	4620      	mov	r0, r4
 8005718:	f7fa fe20 	bl	800035c <d_append_buffer>
 800571c:	9905      	ldr	r1, [sp, #20]
 800571e:	686a      	ldr	r2, [r5, #4]
 8005720:	f7fd bb33 	b.w	8002d8a <d_print_comp+0x1e6>
 8005724:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8005728:	2fff      	cmp	r7, #255	; 0xff
 800572a:	d111      	bne.n	8005750 <d_print_comp+0x2bac>
 800572c:	2600      	movs	r6, #0
 800572e:	4639      	mov	r1, r7
 8005730:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005734:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005738:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800573c:	4620      	mov	r0, r4
 800573e:	4798      	blx	r3
 8005740:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005744:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005748:	3301      	adds	r3, #1
 800574a:	4637      	mov	r7, r6
 800574c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005750:	1c7a      	adds	r2, r7, #1
 8005752:	236c      	movs	r3, #108	; 0x6c
 8005754:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005758:	55e3      	strb	r3, [r4, r7]
 800575a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800575e:	686a      	ldr	r2, [r5, #4]
 8005760:	9905      	ldr	r1, [sp, #20]
 8005762:	f7fd bb12 	b.w	8002d8a <d_print_comp+0x1e6>
 8005766:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800576a:	2fff      	cmp	r7, #255	; 0xff
 800576c:	d111      	bne.n	8005792 <d_print_comp+0x2bee>
 800576e:	2600      	movs	r6, #0
 8005770:	4639      	mov	r1, r7
 8005772:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005776:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800577a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800577e:	4620      	mov	r0, r4
 8005780:	4798      	blx	r3
 8005782:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005786:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800578a:	3301      	adds	r3, #1
 800578c:	4637      	mov	r7, r6
 800578e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005792:	1c7a      	adds	r2, r7, #1
 8005794:	2375      	movs	r3, #117	; 0x75
 8005796:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800579a:	55e3      	strb	r3, [r4, r7]
 800579c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80057a0:	686a      	ldr	r2, [r5, #4]
 80057a2:	9905      	ldr	r1, [sp, #20]
 80057a4:	f7fd baf1 	b.w	8002d8a <d_print_comp+0x1e6>
 80057a8:	9905      	ldr	r1, [sp, #20]
 80057aa:	686a      	ldr	r2, [r5, #4]
 80057ac:	f7fd baed 	b.w	8002d8a <d_print_comp+0x1e6>
 80057b0:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80057b4:	2fff      	cmp	r7, #255	; 0xff
 80057b6:	d110      	bne.n	80057da <d_print_comp+0x2c36>
 80057b8:	4639      	mov	r1, r7
 80057ba:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80057be:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80057c2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80057c6:	4620      	mov	r0, r4
 80057c8:	4798      	blx	r3
 80057ca:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80057ce:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 80057d2:	3301      	adds	r3, #1
 80057d4:	464f      	mov	r7, r9
 80057d6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80057da:	232d      	movs	r3, #45	; 0x2d
 80057dc:	1c7a      	adds	r2, r7, #1
 80057de:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80057e2:	55e3      	strb	r3, [r4, r7]
 80057e4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80057e8:	e6fc      	b.n	80055e4 <d_print_comp+0x2a40>
 80057ea:	689a      	ldr	r2, [r3, #8]
 80057ec:	6891      	ldr	r1, [r2, #8]
 80057ee:	2901      	cmp	r1, #1
 80057f0:	f47d aa69 	bne.w	8002cc6 <d_print_comp+0x122>
 80057f4:	6852      	ldr	r2, [r2, #4]
 80057f6:	7812      	ldrb	r2, [r2, #0]
 80057f8:	2a3e      	cmp	r2, #62	; 0x3e
 80057fa:	f47d aa64 	bne.w	8002cc6 <d_print_comp+0x122>
 80057fe:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8005802:	2fff      	cmp	r7, #255	; 0xff
 8005804:	d110      	bne.n	8005828 <d_print_comp+0x2c84>
 8005806:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 800580a:	4639      	mov	r1, r7
 800580c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005810:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005814:	4620      	mov	r0, r4
 8005816:	4798      	blx	r3
 8005818:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800581c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8005820:	3301      	adds	r3, #1
 8005822:	4647      	mov	r7, r8
 8005824:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005828:	2328      	movs	r3, #40	; 0x28
 800582a:	1c7a      	adds	r2, r7, #1
 800582c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005830:	55e3      	strb	r3, [r4, r7]
 8005832:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005836:	68ab      	ldr	r3, [r5, #8]
 8005838:	f7fd ba45 	b.w	8002cc6 <d_print_comp+0x122>
 800583c:	465a      	mov	r2, fp
 800583e:	4631      	mov	r1, r6
 8005840:	4620      	mov	r0, r4
 8005842:	f000 feb7 	bl	80065b4 <d_print_subexpr>
 8005846:	463a      	mov	r2, r7
 8005848:	4631      	mov	r1, r6
 800584a:	4620      	mov	r0, r4
 800584c:	f000 fe72 	bl	8006534 <d_print_expr_op>
 8005850:	4652      	mov	r2, sl
 8005852:	4631      	mov	r1, r6
 8005854:	4620      	mov	r0, r4
 8005856:	f000 fead 	bl	80065b4 <d_print_subexpr>
 800585a:	2203      	movs	r2, #3
 800585c:	491b      	ldr	r1, [pc, #108]	; (80058cc <d_print_comp+0x2d28>)
 800585e:	4620      	mov	r0, r4
 8005860:	f7fa fd7c 	bl	800035c <d_append_buffer>
 8005864:	464a      	mov	r2, r9
 8005866:	4631      	mov	r1, r6
 8005868:	4620      	mov	r0, r4
 800586a:	f000 fea3 	bl	80065b4 <d_print_subexpr>
 800586e:	9905      	ldr	r1, [sp, #20]
 8005870:	686a      	ldr	r2, [r5, #4]
 8005872:	f7fd ba8a 	b.w	8002d8a <d_print_comp+0x1e6>
 8005876:	9905      	ldr	r1, [sp, #20]
 8005878:	686a      	ldr	r2, [r5, #4]
 800587a:	f7fd ba86 	b.w	8002d8a <d_print_comp+0x1e6>
 800587e:	9905      	ldr	r1, [sp, #20]
 8005880:	686a      	ldr	r2, [r5, #4]
 8005882:	f7fd ba82 	b.w	8002d8a <d_print_comp+0x1e6>
 8005886:	68d3      	ldr	r3, [r2, #12]
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	2b29      	cmp	r3, #41	; 0x29
 800588c:	bf1c      	itt	ne
 800588e:	2301      	movne	r3, #1
 8005890:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
 8005894:	6892      	ldr	r2, [r2, #8]
 8005896:	4631      	mov	r1, r6
 8005898:	4620      	mov	r0, r4
 800589a:	f000 fe8b 	bl	80065b4 <d_print_subexpr>
 800589e:	f7fd ba22 	b.w	8002ce6 <d_print_comp+0x142>
 80058a2:	463a      	mov	r2, r7
 80058a4:	4631      	mov	r1, r6
 80058a6:	4620      	mov	r0, r4
 80058a8:	f000 fe44 	bl	8006534 <d_print_expr_op>
 80058ac:	e5fe      	b.n	80054ac <d_print_comp+0x2908>
 80058ae:	2301      	movs	r3, #1
 80058b0:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80058b4:	686a      	ldr	r2, [r5, #4]
 80058b6:	f7fd ba68 	b.w	8002d8a <d_print_comp+0x1e6>
 80058ba:	bf00      	nop
 80058bc:	08034fd4 	.word	0x08034fd4
 80058c0:	08034fd8 	.word	0x08034fd8
 80058c4:	08034fd0 	.word	0x08034fd0
 80058c8:	08034fcc 	.word	0x08034fcc
 80058cc:	08034fc0 	.word	0x08034fc0

080058d0 <d_print_mod>:
 80058d0:	7813      	ldrb	r3, [r2, #0]
 80058d2:	3b03      	subs	r3, #3
 80058d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058d8:	4615      	mov	r5, r2
 80058da:	4604      	mov	r4, r0
 80058dc:	460e      	mov	r6, r1
 80058de:	2b4c      	cmp	r3, #76	; 0x4c
 80058e0:	f200 82c8 	bhi.w	8005e74 <d_print_mod+0x5a4>
 80058e4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80058e8:	02c60075 	.word	0x02c60075
 80058ec:	02c602c6 	.word	0x02c602c6
 80058f0:	02c602c6 	.word	0x02c602c6
 80058f4:	02c602c6 	.word	0x02c602c6
 80058f8:	02c602c6 	.word	0x02c602c6
 80058fc:	02c602c6 	.word	0x02c602c6
 8005900:	02c602c6 	.word	0x02c602c6
 8005904:	02c602c6 	.word	0x02c602c6
 8005908:	02c602c6 	.word	0x02c602c6
 800590c:	02c602c6 	.word	0x02c602c6
 8005910:	02c602c6 	.word	0x02c602c6
 8005914:	00a1007a 	.word	0x00a1007a
 8005918:	007a00c8 	.word	0x007a00c8
 800591c:	00c800a1 	.word	0x00c800a1
 8005920:	010a00ee 	.word	0x010a00ee
 8005924:	01480126 	.word	0x01480126
 8005928:	02790166 	.word	0x02790166
 800592c:	029f0252 	.word	0x029f0252
 8005930:	02c602c6 	.word	0x02c602c6
 8005934:	02c602c6 	.word	0x02c602c6
 8005938:	02c60184 	.word	0x02c60184
 800593c:	02c601cc 	.word	0x02c601cc
 8005940:	02c602c6 	.word	0x02c602c6
 8005944:	02c602c6 	.word	0x02c602c6
 8005948:	02c602c6 	.word	0x02c602c6
 800594c:	02c602c6 	.word	0x02c602c6
 8005950:	02c602c6 	.word	0x02c602c6
 8005954:	02c602c6 	.word	0x02c602c6
 8005958:	02c602c6 	.word	0x02c602c6
 800595c:	02c602c6 	.word	0x02c602c6
 8005960:	02c602c6 	.word	0x02c602c6
 8005964:	02c602c6 	.word	0x02c602c6
 8005968:	02c602c6 	.word	0x02c602c6
 800596c:	02c602c6 	.word	0x02c602c6
 8005970:	02c602c6 	.word	0x02c602c6
 8005974:	02c602c6 	.word	0x02c602c6
 8005978:	01f402c6 	.word	0x01f402c6
 800597c:	022a02c6 	.word	0x022a02c6
 8005980:	004d      	.short	0x004d
 8005982:	4fd7      	ldr	r7, [pc, #860]	; (8005ce0 <d_print_mod+0x410>)
 8005984:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005988:	f107 0806 	add.w	r8, r7, #6
 800598c:	f04f 0900 	mov.w	r9, #0
 8005990:	e016      	b.n	80059c0 <d_print_mod+0xf0>
 8005992:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005996:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800599a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800599e:	4798      	blx	r3
 80059a0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80059a4:	3301      	adds	r3, #1
 80059a6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80059aa:	2200      	movs	r2, #0
 80059ac:	2301      	movs	r3, #1
 80059ae:	4547      	cmp	r7, r8
 80059b0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80059b4:	f804 a002 	strb.w	sl, [r4, r2]
 80059b8:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80059bc:	f000 825f 	beq.w	8005e7e <d_print_mod+0x5ae>
 80059c0:	2bff      	cmp	r3, #255	; 0xff
 80059c2:	4619      	mov	r1, r3
 80059c4:	4620      	mov	r0, r4
 80059c6:	f817 ab01 	ldrb.w	sl, [r7], #1
 80059ca:	d0e2      	beq.n	8005992 <d_print_mod+0xc2>
 80059cc:	461a      	mov	r2, r3
 80059ce:	3301      	adds	r3, #1
 80059d0:	e7ed      	b.n	80059ae <d_print_mod+0xde>
 80059d2:	68aa      	ldr	r2, [r5, #8]
 80059d4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059d8:	f7fd b8e4 	b.w	8002ba4 <d_print_comp>
 80059dc:	4dc1      	ldr	r5, [pc, #772]	; (8005ce4 <d_print_mod+0x414>)
 80059de:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80059e2:	f105 0609 	add.w	r6, r5, #9
 80059e6:	2700      	movs	r7, #0
 80059e8:	e016      	b.n	8005a18 <d_print_mod+0x148>
 80059ea:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80059ee:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80059f2:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 80059f6:	4798      	blx	r3
 80059f8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80059fc:	3301      	adds	r3, #1
 80059fe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005a02:	2200      	movs	r2, #0
 8005a04:	2301      	movs	r3, #1
 8005a06:	42ae      	cmp	r6, r5
 8005a08:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005a0c:	f804 8002 	strb.w	r8, [r4, r2]
 8005a10:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005a14:	f000 80ea 	beq.w	8005bec <d_print_mod+0x31c>
 8005a18:	2bff      	cmp	r3, #255	; 0xff
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	4620      	mov	r0, r4
 8005a1e:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 8005a22:	d0e2      	beq.n	80059ea <d_print_mod+0x11a>
 8005a24:	461a      	mov	r2, r3
 8005a26:	3301      	adds	r3, #1
 8005a28:	e7ed      	b.n	8005a06 <d_print_mod+0x136>
 8005a2a:	4daf      	ldr	r5, [pc, #700]	; (8005ce8 <d_print_mod+0x418>)
 8005a2c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005a30:	f105 0609 	add.w	r6, r5, #9
 8005a34:	2700      	movs	r7, #0
 8005a36:	e016      	b.n	8005a66 <d_print_mod+0x196>
 8005a38:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005a3c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005a40:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005a44:	4798      	blx	r3
 8005a46:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005a50:	2200      	movs	r2, #0
 8005a52:	2301      	movs	r3, #1
 8005a54:	42ae      	cmp	r6, r5
 8005a56:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005a5a:	f804 8002 	strb.w	r8, [r4, r2]
 8005a5e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005a62:	f000 80c3 	beq.w	8005bec <d_print_mod+0x31c>
 8005a66:	2bff      	cmp	r3, #255	; 0xff
 8005a68:	4619      	mov	r1, r3
 8005a6a:	4620      	mov	r0, r4
 8005a6c:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 8005a70:	d0e2      	beq.n	8005a38 <d_print_mod+0x168>
 8005a72:	461a      	mov	r2, r3
 8005a74:	3301      	adds	r3, #1
 8005a76:	e7ed      	b.n	8005a54 <d_print_mod+0x184>
 8005a78:	4d9c      	ldr	r5, [pc, #624]	; (8005cec <d_print_mod+0x41c>)
 8005a7a:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005a7e:	1dae      	adds	r6, r5, #6
 8005a80:	2700      	movs	r7, #0
 8005a82:	e016      	b.n	8005ab2 <d_print_mod+0x1e2>
 8005a84:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005a88:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005a8c:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005a90:	4798      	blx	r3
 8005a92:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005a96:	3301      	adds	r3, #1
 8005a98:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	42b5      	cmp	r5, r6
 8005aa2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005aa6:	f804 8002 	strb.w	r8, [r4, r2]
 8005aaa:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005aae:	f000 809d 	beq.w	8005bec <d_print_mod+0x31c>
 8005ab2:	2bff      	cmp	r3, #255	; 0xff
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	f815 8b01 	ldrb.w	r8, [r5], #1
 8005abc:	d0e2      	beq.n	8005a84 <d_print_mod+0x1b4>
 8005abe:	461a      	mov	r2, r3
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	e7ed      	b.n	8005aa0 <d_print_mod+0x1d0>
 8005ac4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005ac8:	29ff      	cmp	r1, #255	; 0xff
 8005aca:	d10f      	bne.n	8005aec <d_print_mod+0x21c>
 8005acc:	2500      	movs	r5, #0
 8005ace:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005ad2:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8005ad6:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005ada:	4798      	blx	r3
 8005adc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005ae0:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	4629      	mov	r1, r5
 8005ae8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005aec:	2220      	movs	r2, #32
 8005aee:	1c4b      	adds	r3, r1, #1
 8005af0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005af4:	5462      	strb	r2, [r4, r1]
 8005af6:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005afa:	e05d      	b.n	8005bb8 <d_print_mod+0x2e8>
 8005afc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005b00:	29ff      	cmp	r1, #255	; 0xff
 8005b02:	d10f      	bne.n	8005b24 <d_print_mod+0x254>
 8005b04:	2500      	movs	r5, #0
 8005b06:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005b0a:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8005b0e:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005b12:	4798      	blx	r3
 8005b14:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005b18:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	4629      	mov	r1, r5
 8005b20:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005b24:	2220      	movs	r2, #32
 8005b26:	1c4b      	adds	r3, r1, #1
 8005b28:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005b2c:	5462      	strb	r2, [r4, r1]
 8005b2e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005b32:	e154      	b.n	8005dde <d_print_mod+0x50e>
 8005b34:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005b38:	29ff      	cmp	r1, #255	; 0xff
 8005b3a:	d10f      	bne.n	8005b5c <d_print_mod+0x28c>
 8005b3c:	2700      	movs	r7, #0
 8005b3e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005b42:	f880 70ff 	strb.w	r7, [r0, #255]	; 0xff
 8005b46:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005b4a:	4798      	blx	r3
 8005b4c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005b50:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 8005b54:	3301      	adds	r3, #1
 8005b56:	4639      	mov	r1, r7
 8005b58:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005b5c:	1c4a      	adds	r2, r1, #1
 8005b5e:	2320      	movs	r3, #32
 8005b60:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005b64:	5463      	strb	r3, [r4, r1]
 8005b66:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005b6a:	4631      	mov	r1, r6
 8005b6c:	68ea      	ldr	r2, [r5, #12]
 8005b6e:	4620      	mov	r0, r4
 8005b70:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b74:	f7fd b816 	b.w	8002ba4 <d_print_comp>
 8005b78:	f011 0604 	ands.w	r6, r1, #4
 8005b7c:	d136      	bne.n	8005bec <d_print_mod+0x31c>
 8005b7e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005b82:	29ff      	cmp	r1, #255	; 0xff
 8005b84:	d10e      	bne.n	8005ba4 <d_print_mod+0x2d4>
 8005b86:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005b8a:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8005b8e:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005b92:	4798      	blx	r3
 8005b94:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005b98:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	4631      	mov	r1, r6
 8005ba0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005ba4:	232a      	movs	r3, #42	; 0x2a
 8005ba6:	1c4a      	adds	r2, r1, #1
 8005ba8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005bac:	5463      	strb	r3, [r4, r1]
 8005bae:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005bb2:	e01b      	b.n	8005bec <d_print_mod+0x31c>
 8005bb4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005bb8:	2bff      	cmp	r3, #255	; 0xff
 8005bba:	f040 81a9 	bne.w	8005f10 <d_print_mod+0x640>
 8005bbe:	2500      	movs	r5, #0
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005bc6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005bca:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005bce:	4620      	mov	r0, r4
 8005bd0:	4798      	blx	r3
 8005bd2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005bd6:	1c5a      	adds	r2, r3, #1
 8005bd8:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005bdc:	462b      	mov	r3, r5
 8005bde:	2101      	movs	r1, #1
 8005be0:	2226      	movs	r2, #38	; 0x26
 8005be2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005be6:	54e2      	strb	r2, [r4, r3]
 8005be8:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bf0:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
 8005bf4:	2b28      	cmp	r3, #40	; 0x28
 8005bf6:	d019      	beq.n	8005c2c <d_print_mod+0x35c>
 8005bf8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005bfc:	29ff      	cmp	r1, #255	; 0xff
 8005bfe:	f040 818b 	bne.w	8005f18 <d_print_mod+0x648>
 8005c02:	2700      	movs	r7, #0
 8005c04:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005c08:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005c0c:	f880 70ff 	strb.w	r7, [r0, #255]	; 0xff
 8005c10:	4798      	blx	r3
 8005c12:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005c16:	3301      	adds	r3, #1
 8005c18:	4639      	mov	r1, r7
 8005c1a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005c1e:	2201      	movs	r2, #1
 8005c20:	2320      	movs	r3, #32
 8005c22:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005c26:	5463      	strb	r3, [r4, r1]
 8005c28:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005c2c:	68aa      	ldr	r2, [r5, #8]
 8005c2e:	4d30      	ldr	r5, [pc, #192]	; (8005cf0 <d_print_mod+0x420>)
 8005c30:	4631      	mov	r1, r6
 8005c32:	4620      	mov	r0, r4
 8005c34:	f7fc ffb6 	bl	8002ba4 <d_print_comp>
 8005c38:	1cee      	adds	r6, r5, #3
 8005c3a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005c3e:	2700      	movs	r7, #0
 8005c40:	e015      	b.n	8005c6e <d_print_mod+0x39e>
 8005c42:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005c46:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005c4a:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005c4e:	4798      	blx	r3
 8005c50:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005c54:	3301      	adds	r3, #1
 8005c56:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	42ae      	cmp	r6, r5
 8005c60:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005c64:	f804 8002 	strb.w	r8, [r4, r2]
 8005c68:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005c6c:	d0be      	beq.n	8005bec <d_print_mod+0x31c>
 8005c6e:	2bff      	cmp	r3, #255	; 0xff
 8005c70:	4619      	mov	r1, r3
 8005c72:	4620      	mov	r0, r4
 8005c74:	f815 8b01 	ldrb.w	r8, [r5], #1
 8005c78:	d0e3      	beq.n	8005c42 <d_print_mod+0x372>
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	e7ee      	b.n	8005c5e <d_print_mod+0x38e>
 8005c80:	4f1c      	ldr	r7, [pc, #112]	; (8005cf4 <d_print_mod+0x424>)
 8005c82:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005c86:	f107 080a 	add.w	r8, r7, #10
 8005c8a:	f04f 0900 	mov.w	r9, #0
 8005c8e:	e016      	b.n	8005cbe <d_print_mod+0x3ee>
 8005c90:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005c94:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005c98:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005c9c:	4798      	blx	r3
 8005c9e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005ca8:	2200      	movs	r2, #0
 8005caa:	2301      	movs	r3, #1
 8005cac:	45b8      	cmp	r8, r7
 8005cae:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005cb2:	f804 a002 	strb.w	sl, [r4, r2]
 8005cb6:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8005cba:	f000 811e 	beq.w	8005efa <d_print_mod+0x62a>
 8005cbe:	2bff      	cmp	r3, #255	; 0xff
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	4620      	mov	r0, r4
 8005cc4:	f817 ab01 	ldrb.w	sl, [r7], #1
 8005cc8:	d0e2      	beq.n	8005c90 <d_print_mod+0x3c0>
 8005cca:	461a      	mov	r2, r3
 8005ccc:	3301      	adds	r3, #1
 8005cce:	e7ed      	b.n	8005cac <d_print_mod+0x3dc>
 8005cd0:	4d09      	ldr	r5, [pc, #36]	; (8005cf8 <d_print_mod+0x428>)
 8005cd2:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005cd6:	f105 0611 	add.w	r6, r5, #17
 8005cda:	2700      	movs	r7, #0
 8005cdc:	e025      	b.n	8005d2a <d_print_mod+0x45a>
 8005cde:	bf00      	nop
 8005ce0:	080350c4 	.word	0x080350c4
 8005ce4:	08035083 	.word	0x08035083
 8005ce8:	0803508f 	.word	0x0803508f
 8005cec:	0803509c 	.word	0x0803509c
 8005cf0:	080350e8 	.word	0x080350e8
 8005cf4:	080350ec 	.word	0x080350ec
 8005cf8:	080350a3 	.word	0x080350a3
 8005cfc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005d00:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005d04:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005d08:	4798      	blx	r3
 8005d0a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005d0e:	3301      	adds	r3, #1
 8005d10:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005d14:	2200      	movs	r2, #0
 8005d16:	2301      	movs	r3, #1
 8005d18:	42ae      	cmp	r6, r5
 8005d1a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005d1e:	f804 8002 	strb.w	r8, [r4, r2]
 8005d22:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005d26:	f43f af61 	beq.w	8005bec <d_print_mod+0x31c>
 8005d2a:	2bff      	cmp	r3, #255	; 0xff
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	4620      	mov	r0, r4
 8005d30:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 8005d34:	d0e2      	beq.n	8005cfc <d_print_mod+0x42c>
 8005d36:	461a      	mov	r2, r3
 8005d38:	3301      	adds	r3, #1
 8005d3a:	e7ed      	b.n	8005d18 <d_print_mod+0x448>
 8005d3c:	4f77      	ldr	r7, [pc, #476]	; (8005f1c <d_print_mod+0x64c>)
 8005d3e:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005d42:	f107 0809 	add.w	r8, r7, #9
 8005d46:	f04f 0900 	mov.w	r9, #0
 8005d4a:	e016      	b.n	8005d7a <d_print_mod+0x4aa>
 8005d4c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005d50:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005d54:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005d58:	4798      	blx	r3
 8005d5a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005d5e:	3301      	adds	r3, #1
 8005d60:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005d64:	2200      	movs	r2, #0
 8005d66:	2301      	movs	r3, #1
 8005d68:	4547      	cmp	r7, r8
 8005d6a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005d6e:	f804 a002 	strb.w	sl, [r4, r2]
 8005d72:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8005d76:	f000 8082 	beq.w	8005e7e <d_print_mod+0x5ae>
 8005d7a:	2bff      	cmp	r3, #255	; 0xff
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	4620      	mov	r0, r4
 8005d80:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8005d84:	d0e2      	beq.n	8005d4c <d_print_mod+0x47c>
 8005d86:	461a      	mov	r2, r3
 8005d88:	3301      	adds	r3, #1
 8005d8a:	e7ed      	b.n	8005d68 <d_print_mod+0x498>
 8005d8c:	4d64      	ldr	r5, [pc, #400]	; (8005f20 <d_print_mod+0x650>)
 8005d8e:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005d92:	f105 0608 	add.w	r6, r5, #8
 8005d96:	2700      	movs	r7, #0
 8005d98:	e016      	b.n	8005dc8 <d_print_mod+0x4f8>
 8005d9a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005d9e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005da2:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005da6:	4798      	blx	r3
 8005da8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005dac:	3301      	adds	r3, #1
 8005dae:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005db2:	2200      	movs	r2, #0
 8005db4:	2301      	movs	r3, #1
 8005db6:	42ae      	cmp	r6, r5
 8005db8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005dbc:	f804 8002 	strb.w	r8, [r4, r2]
 8005dc0:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005dc4:	f43f af12 	beq.w	8005bec <d_print_mod+0x31c>
 8005dc8:	2bff      	cmp	r3, #255	; 0xff
 8005dca:	4619      	mov	r1, r3
 8005dcc:	4620      	mov	r0, r4
 8005dce:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 8005dd2:	d0e2      	beq.n	8005d9a <d_print_mod+0x4ca>
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	e7ed      	b.n	8005db6 <d_print_mod+0x4e6>
 8005dda:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005dde:	4d51      	ldr	r5, [pc, #324]	; (8005f24 <d_print_mod+0x654>)
 8005de0:	2700      	movs	r7, #0
 8005de2:	1cae      	adds	r6, r5, #2
 8005de4:	e016      	b.n	8005e14 <d_print_mod+0x544>
 8005de6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005dea:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005dee:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005df2:	4798      	blx	r3
 8005df4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005df8:	3301      	adds	r3, #1
 8005dfa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005dfe:	2200      	movs	r2, #0
 8005e00:	2301      	movs	r3, #1
 8005e02:	42b5      	cmp	r5, r6
 8005e04:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005e08:	f804 8002 	strb.w	r8, [r4, r2]
 8005e0c:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005e10:	f43f aeec 	beq.w	8005bec <d_print_mod+0x31c>
 8005e14:	2bff      	cmp	r3, #255	; 0xff
 8005e16:	4619      	mov	r1, r3
 8005e18:	4620      	mov	r0, r4
 8005e1a:	f815 8b01 	ldrb.w	r8, [r5], #1
 8005e1e:	d0e2      	beq.n	8005de6 <d_print_mod+0x516>
 8005e20:	461a      	mov	r2, r3
 8005e22:	3301      	adds	r3, #1
 8005e24:	e7ed      	b.n	8005e02 <d_print_mod+0x532>
 8005e26:	4d40      	ldr	r5, [pc, #256]	; (8005f28 <d_print_mod+0x658>)
 8005e28:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005e2c:	f105 060a 	add.w	r6, r5, #10
 8005e30:	2700      	movs	r7, #0
 8005e32:	e016      	b.n	8005e62 <d_print_mod+0x592>
 8005e34:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005e38:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005e3c:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005e40:	4798      	blx	r3
 8005e42:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005e46:	3301      	adds	r3, #1
 8005e48:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	2301      	movs	r3, #1
 8005e50:	42b5      	cmp	r5, r6
 8005e52:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005e56:	f804 8002 	strb.w	r8, [r4, r2]
 8005e5a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005e5e:	f43f aec5 	beq.w	8005bec <d_print_mod+0x31c>
 8005e62:	2bff      	cmp	r3, #255	; 0xff
 8005e64:	4619      	mov	r1, r3
 8005e66:	4620      	mov	r0, r4
 8005e68:	f815 8b01 	ldrb.w	r8, [r5], #1
 8005e6c:	d0e2      	beq.n	8005e34 <d_print_mod+0x564>
 8005e6e:	461a      	mov	r2, r3
 8005e70:	3301      	adds	r3, #1
 8005e72:	e7ed      	b.n	8005e50 <d_print_mod+0x580>
 8005e74:	462a      	mov	r2, r5
 8005e76:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e7a:	f7fc be93 	b.w	8002ba4 <d_print_comp>
 8005e7e:	68ea      	ldr	r2, [r5, #12]
 8005e80:	2a00      	cmp	r2, #0
 8005e82:	f43f aeb3 	beq.w	8005bec <d_print_mod+0x31c>
 8005e86:	2bff      	cmp	r3, #255	; 0xff
 8005e88:	d144      	bne.n	8005f14 <d_print_mod+0x644>
 8005e8a:	2700      	movs	r7, #0
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005e92:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005e96:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005e9a:	4620      	mov	r0, r4
 8005e9c:	4798      	blx	r3
 8005e9e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005ea2:	68ea      	ldr	r2, [r5, #12]
 8005ea4:	1c59      	adds	r1, r3, #1
 8005ea6:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
 8005eaa:	463b      	mov	r3, r7
 8005eac:	2101      	movs	r1, #1
 8005eae:	2528      	movs	r5, #40	; 0x28
 8005eb0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	4631      	mov	r1, r6
 8005eb8:	54e5      	strb	r5, [r4, r3]
 8005eba:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8005ebe:	f7fc fe71 	bl	8002ba4 <d_print_comp>
 8005ec2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005ec6:	29ff      	cmp	r1, #255	; 0xff
 8005ec8:	d120      	bne.n	8005f0c <d_print_mod+0x63c>
 8005eca:	2500      	movs	r5, #0
 8005ecc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005ed0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005ed4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005ed8:	4620      	mov	r0, r4
 8005eda:	4798      	blx	r3
 8005edc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	4629      	mov	r1, r5
 8005ee4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005ee8:	2201      	movs	r2, #1
 8005eea:	2329      	movs	r3, #41	; 0x29
 8005eec:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005ef0:	5463      	strb	r3, [r4, r1]
 8005ef2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005efa:	4631      	mov	r1, r6
 8005efc:	68aa      	ldr	r2, [r5, #8]
 8005efe:	4620      	mov	r0, r4
 8005f00:	f7fc fe50 	bl	8002ba4 <d_print_comp>
 8005f04:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005f08:	29ff      	cmp	r1, #255	; 0xff
 8005f0a:	d0de      	beq.n	8005eca <d_print_mod+0x5fa>
 8005f0c:	1c4a      	adds	r2, r1, #1
 8005f0e:	e7ec      	b.n	8005eea <d_print_mod+0x61a>
 8005f10:	1c59      	adds	r1, r3, #1
 8005f12:	e665      	b.n	8005be0 <d_print_mod+0x310>
 8005f14:	1c59      	adds	r1, r3, #1
 8005f16:	e7ca      	b.n	8005eae <d_print_mod+0x5de>
 8005f18:	1c4a      	adds	r2, r1, #1
 8005f1a:	e681      	b.n	8005c20 <d_print_mod+0x350>
 8005f1c:	080350b7 	.word	0x080350b7
 8005f20:	080350cf 	.word	0x080350cf
 8005f24:	080350cc 	.word	0x080350cc
 8005f28:	080350dc 	.word	0x080350dc

08005f2c <d_print_function_type.isra.15>:
 8005f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f30:	4604      	mov	r4, r0
 8005f32:	460e      	mov	r6, r1
 8005f34:	4617      	mov	r7, r2
 8005f36:	461d      	mov	r5, r3
 8005f38:	b1d3      	cbz	r3, 8005f70 <d_print_function_type.isra.15+0x44>
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	b9c3      	cbnz	r3, 8005f70 <d_print_function_type.isra.15+0x44>
 8005f3e:	462a      	mov	r2, r5
 8005f40:	2001      	movs	r0, #1
 8005f42:	f8df c1c8 	ldr.w	ip, [pc, #456]	; 800610c <d_print_function_type.isra.15+0x1e0>
 8005f46:	e001      	b.n	8005f4c <d_print_function_type.isra.15+0x20>
 8005f48:	6893      	ldr	r3, [r2, #8]
 8005f4a:	b98b      	cbnz	r3, 8005f70 <d_print_function_type.isra.15+0x44>
 8005f4c:	6853      	ldr	r3, [r2, #4]
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	3b19      	subs	r3, #25
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	2b12      	cmp	r3, #18
 8005f56:	fa00 f103 	lsl.w	r1, r0, r3
 8005f5a:	d806      	bhi.n	8005f6a <d_print_function_type.isra.15+0x3e>
 8005f5c:	ea11 0f0c 	tst.w	r1, ip
 8005f60:	f040 80c7 	bne.w	80060f2 <d_print_function_type.isra.15+0x1c6>
 8005f64:	f411 6f60 	tst.w	r1, #3584	; 0xe00
 8005f68:	d154      	bne.n	8006014 <d_print_function_type.isra.15+0xe8>
 8005f6a:	6812      	ldr	r2, [r2, #0]
 8005f6c:	2a00      	cmp	r2, #0
 8005f6e:	d1eb      	bne.n	8005f48 <d_print_function_type.isra.15+0x1c>
 8005f70:	2300      	movs	r3, #0
 8005f72:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
 8005f76:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8005f7a:	4631      	mov	r1, r6
 8005f7c:	462a      	mov	r2, r5
 8005f7e:	4620      	mov	r0, r4
 8005f80:	f000 f8c6 	bl	8006110 <d_print_mod_list>
 8005f84:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005f88:	29ff      	cmp	r1, #255	; 0xff
 8005f8a:	f040 80a4 	bne.w	80060d6 <d_print_function_type.isra.15+0x1aa>
 8005f8e:	2300      	movs	r3, #0
 8005f90:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 8005f94:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005f98:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	4798      	blx	r3
 8005fa0:	2328      	movs	r3, #40	; 0x28
 8005fa2:	7023      	strb	r3, [r4, #0]
 8005fa4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005fa8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005fac:	683a      	ldr	r2, [r7, #0]
 8005fae:	1c59      	adds	r1, r3, #1
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
 8005fb6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005fba:	2a00      	cmp	r2, #0
 8005fbc:	f000 8097 	beq.w	80060ee <d_print_function_type.isra.15+0x1c2>
 8005fc0:	4631      	mov	r1, r6
 8005fc2:	4620      	mov	r0, r4
 8005fc4:	f7fc fdee 	bl	8002ba4 <d_print_comp>
 8005fc8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005fcc:	2bff      	cmp	r3, #255	; 0xff
 8005fce:	f040 808e 	bne.w	80060ee <d_print_function_type.isra.15+0x1c2>
 8005fd2:	2700      	movs	r7, #0
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005fda:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005fde:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005fe2:	4620      	mov	r0, r4
 8005fe4:	4798      	blx	r3
 8005fe6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005fea:	1c5a      	adds	r2, r3, #1
 8005fec:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005ff0:	463b      	mov	r3, r7
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	2029      	movs	r0, #41	; 0x29
 8005ff6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005ffa:	4631      	mov	r1, r6
 8005ffc:	54e0      	strb	r0, [r4, r3]
 8005ffe:	462a      	mov	r2, r5
 8006000:	f884 0104 	strb.w	r0, [r4, #260]	; 0x104
 8006004:	2301      	movs	r3, #1
 8006006:	4620      	mov	r0, r4
 8006008:	f000 f882 	bl	8006110 <d_print_mod_list>
 800600c:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
 8006010:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006014:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8006018:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800601c:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8006020:	2a28      	cmp	r2, #40	; 0x28
 8006022:	d01e      	beq.n	8006062 <d_print_function_type.isra.15+0x136>
 8006024:	2b20      	cmp	r3, #32
 8006026:	d01c      	beq.n	8006062 <d_print_function_type.isra.15+0x136>
 8006028:	29ff      	cmp	r1, #255	; 0xff
 800602a:	d112      	bne.n	8006052 <d_print_function_type.isra.15+0x126>
 800602c:	2300      	movs	r3, #0
 800602e:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 8006032:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006036:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800603a:	4620      	mov	r0, r4
 800603c:	4798      	blx	r3
 800603e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006042:	2220      	movs	r2, #32
 8006044:	3301      	adds	r3, #1
 8006046:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800604a:	7022      	strb	r2, [r4, #0]
 800604c:	2101      	movs	r1, #1
 800604e:	1c4a      	adds	r2, r1, #1
 8006050:	e01a      	b.n	8006088 <d_print_function_type.isra.15+0x15c>
 8006052:	1c4b      	adds	r3, r1, #1
 8006054:	2220      	movs	r2, #32
 8006056:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800605a:	5462      	strb	r2, [r4, r1]
 800605c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8006060:	4619      	mov	r1, r3
 8006062:	29ff      	cmp	r1, #255	; 0xff
 8006064:	d1f3      	bne.n	800604e <d_print_function_type.isra.15+0x122>
 8006066:	f04f 0800 	mov.w	r8, #0
 800606a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800606e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006072:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006076:	4620      	mov	r0, r4
 8006078:	4798      	blx	r3
 800607a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800607e:	3301      	adds	r3, #1
 8006080:	4641      	mov	r1, r8
 8006082:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006086:	2201      	movs	r2, #1
 8006088:	2328      	movs	r3, #40	; 0x28
 800608a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800608e:	5463      	strb	r3, [r4, r1]
 8006090:	f04f 0900 	mov.w	r9, #0
 8006094:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006098:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
 800609c:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 80060a0:	464b      	mov	r3, r9
 80060a2:	462a      	mov	r2, r5
 80060a4:	4631      	mov	r1, r6
 80060a6:	4620      	mov	r0, r4
 80060a8:	f000 f832 	bl	8006110 <d_print_mod_list>
 80060ac:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80060b0:	2bff      	cmp	r3, #255	; 0xff
 80060b2:	d123      	bne.n	80060fc <d_print_function_type.isra.15+0x1d0>
 80060b4:	4619      	mov	r1, r3
 80060b6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80060ba:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80060be:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80060c2:	4620      	mov	r0, r4
 80060c4:	4798      	blx	r3
 80060c6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80060ca:	2229      	movs	r2, #41	; 0x29
 80060cc:	3301      	adds	r3, #1
 80060ce:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80060d2:	7022      	strb	r2, [r4, #0]
 80060d4:	2101      	movs	r1, #1
 80060d6:	2228      	movs	r2, #40	; 0x28
 80060d8:	1c4b      	adds	r3, r1, #1
 80060da:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80060de:	5462      	strb	r2, [r4, r1]
 80060e0:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80060e4:	683a      	ldr	r2, [r7, #0]
 80060e6:	2a00      	cmp	r2, #0
 80060e8:	f43f af70 	beq.w	8005fcc <d_print_function_type.isra.15+0xa0>
 80060ec:	e768      	b.n	8005fc0 <d_print_function_type.isra.15+0x94>
 80060ee:	1c5a      	adds	r2, r3, #1
 80060f0:	e780      	b.n	8005ff4 <d_print_function_type.isra.15+0xc8>
 80060f2:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 80060f6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80060fa:	e793      	b.n	8006024 <d_print_function_type.isra.15+0xf8>
 80060fc:	2229      	movs	r2, #41	; 0x29
 80060fe:	1c59      	adds	r1, r3, #1
 8006100:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006104:	54e2      	strb	r2, [r4, r3]
 8006106:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800610a:	e73d      	b.n	8005f88 <d_print_function_type.isra.15+0x5c>
 800610c:	00043107 	.word	0x00043107

08006110 <d_print_mod_list>:
 8006110:	2a00      	cmp	r2, #0
 8006112:	f000 80ac 	beq.w	800626e <d_print_mod_list+0x15e>
 8006116:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800611a:	461f      	mov	r7, r3
 800611c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 8006120:	b089      	sub	sp, #36	; 0x24
 8006122:	4605      	mov	r5, r0
 8006124:	bb4b      	cbnz	r3, 800617a <d_print_mod_list+0x6a>
 8006126:	4688      	mov	r8, r1
 8006128:	4614      	mov	r4, r2
 800612a:	f04f 0901 	mov.w	r9, #1
 800612e:	e002      	b.n	8006136 <d_print_mod_list+0x26>
 8006130:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8006134:	bb0b      	cbnz	r3, 800617a <d_print_mod_list+0x6a>
 8006136:	68a3      	ldr	r3, [r4, #8]
 8006138:	b9e3      	cbnz	r3, 8006174 <d_print_mod_list+0x64>
 800613a:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800613e:	f89a 6000 	ldrb.w	r6, [sl]
 8006142:	4630      	mov	r0, r6
 8006144:	b917      	cbnz	r7, 800614c <d_print_mod_list+0x3c>
 8006146:	f7fa f93f 	bl	80003c8 <is_fnqual_component_type>
 800614a:	b998      	cbnz	r0, 8006174 <d_print_mod_list+0x64>
 800614c:	68e3      	ldr	r3, [r4, #12]
 800614e:	f8c4 9008 	str.w	r9, [r4, #8]
 8006152:	2e29      	cmp	r6, #41	; 0x29
 8006154:	f8d5 b110 	ldr.w	fp, [r5, #272]	; 0x110
 8006158:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
 800615c:	4652      	mov	r2, sl
 800615e:	4641      	mov	r1, r8
 8006160:	4628      	mov	r0, r5
 8006162:	d00d      	beq.n	8006180 <d_print_mod_list+0x70>
 8006164:	2e2a      	cmp	r6, #42	; 0x2a
 8006166:	d015      	beq.n	8006194 <d_print_mod_list+0x84>
 8006168:	2e02      	cmp	r6, #2
 800616a:	d01d      	beq.n	80061a8 <d_print_mod_list+0x98>
 800616c:	f7ff fbb0 	bl	80058d0 <d_print_mod>
 8006170:	f8c5 b110 	str.w	fp, [r5, #272]	; 0x110
 8006174:	6824      	ldr	r4, [r4, #0]
 8006176:	2c00      	cmp	r4, #0
 8006178:	d1da      	bne.n	8006130 <d_print_mod_list+0x20>
 800617a:	b009      	add	sp, #36	; 0x24
 800617c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006180:	6823      	ldr	r3, [r4, #0]
 8006182:	f10a 020c 	add.w	r2, sl, #12
 8006186:	f7ff fed1 	bl	8005f2c <d_print_function_type.isra.15>
 800618a:	f8c5 b110 	str.w	fp, [r5, #272]	; 0x110
 800618e:	b009      	add	sp, #36	; 0x24
 8006190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006194:	6823      	ldr	r3, [r4, #0]
 8006196:	f10a 0208 	add.w	r2, sl, #8
 800619a:	f000 f8f1 	bl	8006380 <d_print_array_type.isra.14>
 800619e:	f8c5 b110 	str.w	fp, [r5, #272]	; 0x110
 80061a2:	b009      	add	sp, #36	; 0x24
 80061a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061a8:	2600      	movs	r6, #0
 80061aa:	f8d5 7114 	ldr.w	r7, [r5, #276]	; 0x114
 80061ae:	f8da 2008 	ldr.w	r2, [sl, #8]
 80061b2:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
 80061b6:	f7fc fcf5 	bl	8002ba4 <d_print_comp>
 80061ba:	f8c5 7114 	str.w	r7, [r5, #276]	; 0x114
 80061be:	f018 0704 	ands.w	r7, r8, #4
 80061c2:	d02f      	beq.n	8006224 <d_print_mod_list+0x114>
 80061c4:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 80061c8:	29ff      	cmp	r1, #255	; 0xff
 80061ca:	f040 80cf 	bne.w	800636c <d_print_mod_list+0x25c>
 80061ce:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 80061d2:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 80061d6:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
 80061da:	4628      	mov	r0, r5
 80061dc:	4798      	blx	r3
 80061de:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 80061e2:	3301      	adds	r3, #1
 80061e4:	4631      	mov	r1, r6
 80061e6:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 80061ea:	2201      	movs	r2, #1
 80061ec:	232e      	movs	r3, #46	; 0x2e
 80061ee:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
 80061f2:	546b      	strb	r3, [r5, r1]
 80061f4:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
 80061f8:	6863      	ldr	r3, [r4, #4]
 80061fa:	68dc      	ldr	r4, [r3, #12]
 80061fc:	7820      	ldrb	r0, [r4, #0]
 80061fe:	2846      	cmp	r0, #70	; 0x46
 8006200:	d102      	bne.n	8006208 <d_print_mod_list+0xf8>
 8006202:	e035      	b.n	8006270 <d_print_mod_list+0x160>
 8006204:	68a4      	ldr	r4, [r4, #8]
 8006206:	7820      	ldrb	r0, [r4, #0]
 8006208:	f7fa f8de 	bl	80003c8 <is_fnqual_component_type>
 800620c:	2800      	cmp	r0, #0
 800620e:	d1f9      	bne.n	8006204 <d_print_mod_list+0xf4>
 8006210:	4622      	mov	r2, r4
 8006212:	4641      	mov	r1, r8
 8006214:	4628      	mov	r0, r5
 8006216:	f7fc fcc5 	bl	8002ba4 <d_print_comp>
 800621a:	f8c5 b110 	str.w	fp, [r5, #272]	; 0x110
 800621e:	b009      	add	sp, #36	; 0x24
 8006220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006224:	4e52      	ldr	r6, [pc, #328]	; (8006370 <d_print_mod_list+0x260>)
 8006226:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 800622a:	f106 0902 	add.w	r9, r6, #2
 800622e:	e015      	b.n	800625c <d_print_mod_list+0x14c>
 8006230:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8006234:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8006238:	f885 70ff 	strb.w	r7, [r5, #255]	; 0xff
 800623c:	4798      	blx	r3
 800623e:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8006242:	3301      	adds	r3, #1
 8006244:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8006248:	2200      	movs	r2, #0
 800624a:	2301      	movs	r3, #1
 800624c:	45b1      	cmp	r9, r6
 800624e:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
 8006252:	f805 a002 	strb.w	sl, [r5, r2]
 8006256:	f885 a104 	strb.w	sl, [r5, #260]	; 0x104
 800625a:	d0cd      	beq.n	80061f8 <d_print_mod_list+0xe8>
 800625c:	2bff      	cmp	r3, #255	; 0xff
 800625e:	4619      	mov	r1, r3
 8006260:	4628      	mov	r0, r5
 8006262:	f816 ab01 	ldrb.w	sl, [r6], #1
 8006266:	d0e3      	beq.n	8006230 <d_print_mod_list+0x120>
 8006268:	461a      	mov	r2, r3
 800626a:	3301      	adds	r3, #1
 800626c:	e7ee      	b.n	800624c <d_print_mod_list+0x13c>
 800626e:	4770      	bx	lr
 8006270:	4e40      	ldr	r6, [pc, #256]	; (8006374 <d_print_mod_list+0x264>)
 8006272:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 8006276:	f106 070d 	add.w	r7, r6, #13
 800627a:	f04f 0900 	mov.w	r9, #0
 800627e:	e015      	b.n	80062ac <d_print_mod_list+0x19c>
 8006280:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8006284:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8006288:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
 800628c:	4798      	blx	r3
 800628e:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8006292:	3301      	adds	r3, #1
 8006294:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8006298:	2200      	movs	r2, #0
 800629a:	2301      	movs	r3, #1
 800629c:	42b7      	cmp	r7, r6
 800629e:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
 80062a2:	f805 a002 	strb.w	sl, [r5, r2]
 80062a6:	f885 a104 	strb.w	sl, [r5, #260]	; 0x104
 80062aa:	d008      	beq.n	80062be <d_print_mod_list+0x1ae>
 80062ac:	2bff      	cmp	r3, #255	; 0xff
 80062ae:	4619      	mov	r1, r3
 80062b0:	4628      	mov	r0, r5
 80062b2:	f816 ab01 	ldrb.w	sl, [r6], #1
 80062b6:	d0e3      	beq.n	8006280 <d_print_mod_list+0x170>
 80062b8:	461a      	mov	r2, r3
 80062ba:	3301      	adds	r3, #1
 80062bc:	e7ee      	b.n	800629c <d_print_mod_list+0x18c>
 80062be:	68e2      	ldr	r2, [r4, #12]
 80062c0:	492d      	ldr	r1, [pc, #180]	; (8006378 <d_print_mod_list+0x268>)
 80062c2:	3201      	adds	r2, #1
 80062c4:	a801      	add	r0, sp, #4
 80062c6:	f028 fd7d 	bl	802edc4 <siprintf>
 80062ca:	a801      	add	r0, sp, #4
 80062cc:	f000 fd08 	bl	8006ce0 <strlen>
 80062d0:	b328      	cbz	r0, 800631e <d_print_mod_list+0x20e>
 80062d2:	ae01      	add	r6, sp, #4
 80062d4:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 80062d8:	1837      	adds	r7, r6, r0
 80062da:	f04f 0900 	mov.w	r9, #0
 80062de:	e015      	b.n	800630c <d_print_mod_list+0x1fc>
 80062e0:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 80062e4:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 80062e8:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
 80062ec:	4798      	blx	r3
 80062ee:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 80062f2:	3301      	adds	r3, #1
 80062f4:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 80062f8:	2200      	movs	r2, #0
 80062fa:	2301      	movs	r3, #1
 80062fc:	42be      	cmp	r6, r7
 80062fe:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
 8006302:	f805 a002 	strb.w	sl, [r5, r2]
 8006306:	f885 a104 	strb.w	sl, [r5, #260]	; 0x104
 800630a:	d00a      	beq.n	8006322 <d_print_mod_list+0x212>
 800630c:	2bff      	cmp	r3, #255	; 0xff
 800630e:	4619      	mov	r1, r3
 8006310:	4628      	mov	r0, r5
 8006312:	f816 ab01 	ldrb.w	sl, [r6], #1
 8006316:	d0e3      	beq.n	80062e0 <d_print_mod_list+0x1d0>
 8006318:	461a      	mov	r2, r3
 800631a:	3301      	adds	r3, #1
 800631c:	e7ee      	b.n	80062fc <d_print_mod_list+0x1ec>
 800631e:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 8006322:	4e16      	ldr	r6, [pc, #88]	; (800637c <d_print_mod_list+0x26c>)
 8006324:	f04f 0900 	mov.w	r9, #0
 8006328:	1cf7      	adds	r7, r6, #3
 800632a:	e016      	b.n	800635a <d_print_mod_list+0x24a>
 800632c:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8006330:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8006334:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
 8006338:	4798      	blx	r3
 800633a:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 800633e:	3301      	adds	r3, #1
 8006340:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8006344:	2200      	movs	r2, #0
 8006346:	2301      	movs	r3, #1
 8006348:	42b7      	cmp	r7, r6
 800634a:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
 800634e:	f805 a002 	strb.w	sl, [r5, r2]
 8006352:	f885 a104 	strb.w	sl, [r5, #260]	; 0x104
 8006356:	f43f af55 	beq.w	8006204 <d_print_mod_list+0xf4>
 800635a:	2bff      	cmp	r3, #255	; 0xff
 800635c:	4619      	mov	r1, r3
 800635e:	4628      	mov	r0, r5
 8006360:	f816 ab01 	ldrb.w	sl, [r6], #1
 8006364:	d0e2      	beq.n	800632c <d_print_mod_list+0x21c>
 8006366:	461a      	mov	r2, r3
 8006368:	3301      	adds	r3, #1
 800636a:	e7ed      	b.n	8006348 <d_print_mod_list+0x238>
 800636c:	1c4a      	adds	r2, r1, #1
 800636e:	e73d      	b.n	80061ec <d_print_mod_list+0xdc>
 8006370:	08034e04 	.word	0x08034e04
 8006374:	08034e08 	.word	0x08034e08
 8006378:	08034db4 	.word	0x08034db4
 800637c:	08034e18 	.word	0x08034e18

08006380 <d_print_array_type.isra.14>:
 8006380:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006384:	4604      	mov	r4, r0
 8006386:	460f      	mov	r7, r1
 8006388:	4690      	mov	r8, r2
 800638a:	b15b      	cbz	r3, 80063a4 <d_print_array_type.isra.14+0x24>
 800638c:	461e      	mov	r6, r3
 800638e:	689d      	ldr	r5, [r3, #8]
 8006390:	2d00      	cmp	r5, #0
 8006392:	d042      	beq.n	800641a <d_print_array_type.isra.14+0x9a>
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1f9      	bne.n	800638e <d_print_array_type.isra.14+0xe>
 800639a:	4632      	mov	r2, r6
 800639c:	4639      	mov	r1, r7
 800639e:	4620      	mov	r0, r4
 80063a0:	f7ff feb6 	bl	8006110 <d_print_mod_list>
 80063a4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80063a8:	29ff      	cmp	r1, #255	; 0xff
 80063aa:	f040 80b1 	bne.w	8006510 <d_print_array_type.isra.14+0x190>
 80063ae:	2300      	movs	r3, #0
 80063b0:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 80063b4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80063b8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80063bc:	4620      	mov	r0, r4
 80063be:	4798      	blx	r3
 80063c0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80063c4:	2220      	movs	r2, #32
 80063c6:	3301      	adds	r3, #1
 80063c8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80063cc:	7022      	strb	r2, [r4, #0]
 80063ce:	2301      	movs	r3, #1
 80063d0:	225b      	movs	r2, #91	; 0x5b
 80063d2:	1c59      	adds	r1, r3, #1
 80063d4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80063d8:	54e2      	strb	r2, [r4, r3]
 80063da:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80063de:	f8d8 2000 	ldr.w	r2, [r8]
 80063e2:	2a00      	cmp	r2, #0
 80063e4:	d140      	bne.n	8006468 <d_print_array_type.isra.14+0xe8>
 80063e6:	29ff      	cmp	r1, #255	; 0xff
 80063e8:	d145      	bne.n	8006476 <d_print_array_type.isra.14+0xf6>
 80063ea:	2500      	movs	r5, #0
 80063ec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80063f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80063f4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80063f8:	4620      	mov	r0, r4
 80063fa:	4798      	blx	r3
 80063fc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006400:	3301      	adds	r3, #1
 8006402:	4629      	mov	r1, r5
 8006404:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006408:	2201      	movs	r2, #1
 800640a:	235d      	movs	r3, #93	; 0x5d
 800640c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8006410:	5463      	strb	r3, [r4, r1]
 8006412:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006416:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	2b2a      	cmp	r3, #42	; 0x2a
 8006420:	d12b      	bne.n	800647a <d_print_array_type.isra.14+0xfa>
 8006422:	462b      	mov	r3, r5
 8006424:	4632      	mov	r2, r6
 8006426:	4639      	mov	r1, r7
 8006428:	4620      	mov	r0, r4
 800642a:	f7ff fe71 	bl	8006110 <d_print_mod_list>
 800642e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8006432:	2bff      	cmp	r3, #255	; 0xff
 8006434:	d1cc      	bne.n	80063d0 <d_print_array_type.isra.14+0x50>
 8006436:	2200      	movs	r2, #0
 8006438:	4619      	mov	r1, r3
 800643a:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 800643e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006442:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006446:	4620      	mov	r0, r4
 8006448:	4798      	blx	r3
 800644a:	235b      	movs	r3, #91	; 0x5b
 800644c:	7023      	strb	r3, [r4, #0]
 800644e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006452:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006456:	f8d8 2000 	ldr.w	r2, [r8]
 800645a:	3301      	adds	r3, #1
 800645c:	2101      	movs	r1, #1
 800645e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006462:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006466:	b132      	cbz	r2, 8006476 <d_print_array_type.isra.14+0xf6>
 8006468:	4639      	mov	r1, r7
 800646a:	4620      	mov	r0, r4
 800646c:	f7fc fb9a 	bl	8002ba4 <d_print_comp>
 8006470:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006474:	e7b7      	b.n	80063e6 <d_print_array_type.isra.14+0x66>
 8006476:	1c4a      	adds	r2, r1, #1
 8006478:	e7c7      	b.n	800640a <d_print_array_type.isra.14+0x8a>
 800647a:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8006530 <d_print_array_type.isra.14+0x1b0>
 800647e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8006482:	f109 0a02 	add.w	sl, r9, #2
 8006486:	e016      	b.n	80064b6 <d_print_array_type.isra.14+0x136>
 8006488:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800648c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006490:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8006494:	4798      	blx	r3
 8006496:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800649a:	2200      	movs	r2, #0
 800649c:	3301      	adds	r3, #1
 800649e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80064a2:	45ca      	cmp	sl, r9
 80064a4:	f04f 0301 	mov.w	r3, #1
 80064a8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80064ac:	f804 b002 	strb.w	fp, [r4, r2]
 80064b0:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 80064b4:	d010      	beq.n	80064d8 <d_print_array_type.isra.14+0x158>
 80064b6:	2bff      	cmp	r3, #255	; 0xff
 80064b8:	4619      	mov	r1, r3
 80064ba:	4620      	mov	r0, r4
 80064bc:	f819 bb01 	ldrb.w	fp, [r9], #1
 80064c0:	d0e2      	beq.n	8006488 <d_print_array_type.isra.14+0x108>
 80064c2:	461a      	mov	r2, r3
 80064c4:	45ca      	cmp	sl, r9
 80064c6:	f103 0301 	add.w	r3, r3, #1
 80064ca:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80064ce:	f804 b002 	strb.w	fp, [r4, r2]
 80064d2:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 80064d6:	d1ee      	bne.n	80064b6 <d_print_array_type.isra.14+0x136>
 80064d8:	2300      	movs	r3, #0
 80064da:	4632      	mov	r2, r6
 80064dc:	4639      	mov	r1, r7
 80064de:	4620      	mov	r0, r4
 80064e0:	f7ff fe16 	bl	8006110 <d_print_mod_list>
 80064e4:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80064e8:	2bff      	cmp	r3, #255	; 0xff
 80064ea:	d119      	bne.n	8006520 <d_print_array_type.isra.14+0x1a0>
 80064ec:	2200      	movs	r2, #0
 80064ee:	4619      	mov	r1, r3
 80064f0:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 80064f4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80064f8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80064fc:	4620      	mov	r0, r4
 80064fe:	4798      	blx	r3
 8006500:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006504:	2229      	movs	r2, #41	; 0x29
 8006506:	3301      	adds	r3, #1
 8006508:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800650c:	7022      	strb	r2, [r4, #0]
 800650e:	2101      	movs	r1, #1
 8006510:	2220      	movs	r2, #32
 8006512:	1c4b      	adds	r3, r1, #1
 8006514:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8006518:	5462      	strb	r2, [r4, r1]
 800651a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800651e:	e788      	b.n	8006432 <d_print_array_type.isra.14+0xb2>
 8006520:	2229      	movs	r2, #41	; 0x29
 8006522:	1c59      	adds	r1, r3, #1
 8006524:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006528:	54e2      	strb	r2, [r4, r3]
 800652a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800652e:	e73b      	b.n	80063a8 <d_print_array_type.isra.14+0x28>
 8006530:	08035000 	.word	0x08035000

08006534 <d_print_expr_op>:
 8006534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006538:	7815      	ldrb	r5, [r2, #0]
 800653a:	2d31      	cmp	r5, #49	; 0x31
 800653c:	d003      	beq.n	8006546 <d_print_expr_op+0x12>
 800653e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006542:	f7fc bb2f 	b.w	8002ba4 <d_print_comp>
 8006546:	6893      	ldr	r3, [r2, #8]
 8006548:	e9d3 5601 	ldrd	r5, r6, [r3, #4]
 800654c:	b37e      	cbz	r6, 80065ae <d_print_expr_op+0x7a>
 800654e:	442e      	add	r6, r5
 8006550:	4604      	mov	r4, r0
 8006552:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8006556:	3e01      	subs	r6, #1
 8006558:	3d01      	subs	r5, #1
 800655a:	2700      	movs	r7, #0
 800655c:	e016      	b.n	800658c <d_print_expr_op+0x58>
 800655e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006562:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006566:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 800656a:	4798      	blx	r3
 800656c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006570:	2200      	movs	r2, #0
 8006572:	3301      	adds	r3, #1
 8006574:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006578:	42b5      	cmp	r5, r6
 800657a:	f04f 0301 	mov.w	r3, #1
 800657e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8006582:	f804 8002 	strb.w	r8, [r4, r2]
 8006586:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800658a:	d010      	beq.n	80065ae <d_print_expr_op+0x7a>
 800658c:	2bff      	cmp	r3, #255	; 0xff
 800658e:	4619      	mov	r1, r3
 8006590:	4620      	mov	r0, r4
 8006592:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 8006596:	d0e2      	beq.n	800655e <d_print_expr_op+0x2a>
 8006598:	461a      	mov	r2, r3
 800659a:	42b5      	cmp	r5, r6
 800659c:	f103 0301 	add.w	r3, r3, #1
 80065a0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80065a4:	f804 8002 	strb.w	r8, [r4, r2]
 80065a8:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80065ac:	d1ee      	bne.n	800658c <d_print_expr_op+0x58>
 80065ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065b2:	bf00      	nop

080065b4 <d_print_subexpr>:
 80065b4:	7813      	ldrb	r3, [r2, #0]
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065bc:	4604      	mov	r4, r0
 80065be:	d941      	bls.n	8006644 <d_print_subexpr+0x90>
 80065c0:	2b30      	cmp	r3, #48	; 0x30
 80065c2:	d03f      	beq.n	8006644 <d_print_subexpr+0x90>
 80065c4:	2b06      	cmp	r3, #6
 80065c6:	d03d      	beq.n	8006644 <d_print_subexpr+0x90>
 80065c8:	f8d0 7100 	ldr.w	r7, [r0, #256]	; 0x100
 80065cc:	2fff      	cmp	r7, #255	; 0xff
 80065ce:	460e      	mov	r6, r1
 80065d0:	4615      	mov	r5, r2
 80065d2:	d13e      	bne.n	8006652 <d_print_subexpr+0x9e>
 80065d4:	f04f 0800 	mov.w	r8, #0
 80065d8:	4639      	mov	r1, r7
 80065da:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80065de:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 80065e2:	f880 80ff 	strb.w	r8, [r0, #255]	; 0xff
 80065e6:	4798      	blx	r3
 80065e8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80065ec:	3301      	adds	r3, #1
 80065ee:	4647      	mov	r7, r8
 80065f0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80065f4:	2201      	movs	r2, #1
 80065f6:	2328      	movs	r3, #40	; 0x28
 80065f8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80065fc:	4631      	mov	r1, r6
 80065fe:	55e3      	strb	r3, [r4, r7]
 8006600:	462a      	mov	r2, r5
 8006602:	4620      	mov	r0, r4
 8006604:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006608:	f7fc facc 	bl	8002ba4 <d_print_comp>
 800660c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006610:	29ff      	cmp	r1, #255	; 0xff
 8006612:	d11c      	bne.n	800664e <d_print_subexpr+0x9a>
 8006614:	2500      	movs	r5, #0
 8006616:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800661a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800661e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8006622:	4620      	mov	r0, r4
 8006624:	4798      	blx	r3
 8006626:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800662a:	3301      	adds	r3, #1
 800662c:	4629      	mov	r1, r5
 800662e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006632:	2201      	movs	r2, #1
 8006634:	2329      	movs	r3, #41	; 0x29
 8006636:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800663a:	5463      	strb	r3, [r4, r1]
 800663c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006644:	4620      	mov	r0, r4
 8006646:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800664a:	f7fc baab 	b.w	8002ba4 <d_print_comp>
 800664e:	1c4a      	adds	r2, r1, #1
 8006650:	e7f0      	b.n	8006634 <d_print_subexpr+0x80>
 8006652:	1c7a      	adds	r2, r7, #1
 8006654:	e7cf      	b.n	80065f6 <d_print_subexpr+0x42>
 8006656:	bf00      	nop

08006658 <d_maybe_print_fold_expression.isra.20>:
 8006658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800665c:	6892      	ldr	r2, [r2, #8]
 800665e:	6812      	ldr	r2, [r2, #0]
 8006660:	7816      	ldrb	r6, [r2, #0]
 8006662:	2e66      	cmp	r6, #102	; 0x66
 8006664:	b083      	sub	sp, #12
 8006666:	d003      	beq.n	8006670 <d_maybe_print_fold_expression.isra.20+0x18>
 8006668:	2000      	movs	r0, #0
 800666a:	b003      	add	sp, #12
 800666c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8006676:	f899 3000 	ldrb.w	r3, [r9]
 800667a:	2b3b      	cmp	r3, #59	; 0x3b
 800667c:	f000 8110 	beq.w	80068a0 <d_maybe_print_fold_expression.isra.20+0x248>
 8006680:	2300      	movs	r3, #0
 8006682:	9301      	str	r3, [sp, #4]
 8006684:	f04f 33ff 	mov.w	r3, #4294967295
 8006688:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
 800668c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
 8006690:	7853      	ldrb	r3, [r2, #1]
 8006692:	3b4c      	subs	r3, #76	; 0x4c
 8006694:	460d      	mov	r5, r1
 8006696:	4604      	mov	r4, r0
 8006698:	2b26      	cmp	r3, #38	; 0x26
 800669a:	d83a      	bhi.n	8006712 <d_maybe_print_fold_expression.isra.20+0xba>
 800669c:	e8df f003 	tbb	[pc, r3]
 80066a0:	393939b0 	.word	0x393939b0
 80066a4:	39b03939 	.word	0x39b03939
 80066a8:	39393939 	.word	0x39393939
 80066ac:	39393939 	.word	0x39393939
 80066b0:	39393939 	.word	0x39393939
 80066b4:	39393939 	.word	0x39393939
 80066b8:	39393939 	.word	0x39393939
 80066bc:	39393939 	.word	0x39393939
 80066c0:	39393989 	.word	0x39393989
 80066c4:	3939      	.short	0x3939
 80066c6:	3f          	.byte	0x3f
 80066c7:	00          	.byte	0x00
 80066c8:	4642      	mov	r2, r8
 80066ca:	4629      	mov	r1, r5
 80066cc:	4620      	mov	r0, r4
 80066ce:	f7ff ff31 	bl	8006534 <d_print_expr_op>
 80066d2:	9a01      	ldr	r2, [sp, #4]
 80066d4:	4629      	mov	r1, r5
 80066d6:	4620      	mov	r0, r4
 80066d8:	f7ff ff6c 	bl	80065b4 <d_print_subexpr>
 80066dc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80066e0:	29ff      	cmp	r1, #255	; 0xff
 80066e2:	f040 80ea 	bne.w	80068ba <d_maybe_print_fold_expression.isra.20+0x262>
 80066e6:	2500      	movs	r5, #0
 80066e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80066ec:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80066f0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80066f4:	4620      	mov	r0, r4
 80066f6:	4798      	blx	r3
 80066f8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80066fc:	3301      	adds	r3, #1
 80066fe:	4629      	mov	r1, r5
 8006700:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006704:	2201      	movs	r2, #1
 8006706:	2329      	movs	r3, #41	; 0x29
 8006708:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800670c:	5463      	strb	r3, [r4, r1]
 800670e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006712:	2001      	movs	r0, #1
 8006714:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
 8006718:	b003      	add	sp, #12
 800671a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800671e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8006722:	29ff      	cmp	r1, #255	; 0xff
 8006724:	f040 80cb 	bne.w	80068be <d_maybe_print_fold_expression.isra.20+0x266>
 8006728:	2600      	movs	r6, #0
 800672a:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800672e:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8006732:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8006736:	4798      	blx	r3
 8006738:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800673c:	3301      	adds	r3, #1
 800673e:	4631      	mov	r1, r6
 8006740:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006744:	2201      	movs	r2, #1
 8006746:	2328      	movs	r3, #40	; 0x28
 8006748:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800674c:	4620      	mov	r0, r4
 800674e:	5463      	strb	r3, [r4, r1]
 8006750:	464a      	mov	r2, r9
 8006752:	4629      	mov	r1, r5
 8006754:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006758:	f7ff ff2c 	bl	80065b4 <d_print_subexpr>
 800675c:	4629      	mov	r1, r5
 800675e:	4d59      	ldr	r5, [pc, #356]	; (80068c4 <d_maybe_print_fold_expression.isra.20+0x26c>)
 8006760:	4642      	mov	r2, r8
 8006762:	4620      	mov	r0, r4
 8006764:	f7ff fee6 	bl	8006534 <d_print_expr_op>
 8006768:	1d2e      	adds	r6, r5, #4
 800676a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800676e:	f04f 0800 	mov.w	r8, #0
 8006772:	e015      	b.n	80067a0 <d_maybe_print_fold_expression.isra.20+0x148>
 8006774:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006778:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800677c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006780:	4798      	blx	r3
 8006782:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006786:	3301      	adds	r3, #1
 8006788:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800678c:	2200      	movs	r2, #0
 800678e:	2301      	movs	r3, #1
 8006790:	42ae      	cmp	r6, r5
 8006792:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8006796:	f804 9002 	strb.w	r9, [r4, r2]
 800679a:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 800679e:	d0b8      	beq.n	8006712 <d_maybe_print_fold_expression.isra.20+0xba>
 80067a0:	2bff      	cmp	r3, #255	; 0xff
 80067a2:	4619      	mov	r1, r3
 80067a4:	4620      	mov	r0, r4
 80067a6:	f815 9b01 	ldrb.w	r9, [r5], #1
 80067aa:	d0e3      	beq.n	8006774 <d_maybe_print_fold_expression.isra.20+0x11c>
 80067ac:	461a      	mov	r2, r3
 80067ae:	3301      	adds	r3, #1
 80067b0:	e7ee      	b.n	8006790 <d_maybe_print_fold_expression.isra.20+0x138>
 80067b2:	4e45      	ldr	r6, [pc, #276]	; (80068c8 <d_maybe_print_fold_expression.isra.20+0x270>)
 80067b4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80067b8:	f106 0a04 	add.w	sl, r6, #4
 80067bc:	e017      	b.n	80067ee <d_maybe_print_fold_expression.isra.20+0x196>
 80067be:	f04f 0300 	mov.w	r3, #0
 80067c2:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 80067c6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80067ca:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80067ce:	4798      	blx	r3
 80067d0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80067d4:	3301      	adds	r3, #1
 80067d6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80067da:	2200      	movs	r2, #0
 80067dc:	2301      	movs	r3, #1
 80067de:	45b2      	cmp	sl, r6
 80067e0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80067e4:	f804 b002 	strb.w	fp, [r4, r2]
 80067e8:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 80067ec:	d05e      	beq.n	80068ac <d_maybe_print_fold_expression.isra.20+0x254>
 80067ee:	2bff      	cmp	r3, #255	; 0xff
 80067f0:	4619      	mov	r1, r3
 80067f2:	4620      	mov	r0, r4
 80067f4:	f816 bb01 	ldrb.w	fp, [r6], #1
 80067f8:	d0e1      	beq.n	80067be <d_maybe_print_fold_expression.isra.20+0x166>
 80067fa:	461a      	mov	r2, r3
 80067fc:	3301      	adds	r3, #1
 80067fe:	e7ee      	b.n	80067de <d_maybe_print_fold_expression.isra.20+0x186>
 8006800:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8006804:	2bff      	cmp	r3, #255	; 0xff
 8006806:	d110      	bne.n	800682a <d_maybe_print_fold_expression.isra.20+0x1d2>
 8006808:	2600      	movs	r6, #0
 800680a:	4619      	mov	r1, r3
 800680c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8006810:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8006814:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8006818:	4798      	blx	r3
 800681a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800681e:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8006822:	1c5a      	adds	r2, r3, #1
 8006824:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8006828:	4633      	mov	r3, r6
 800682a:	1c59      	adds	r1, r3, #1
 800682c:	f04f 0c28 	mov.w	ip, #40	; 0x28
 8006830:	464a      	mov	r2, r9
 8006832:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006836:	4620      	mov	r0, r4
 8006838:	f804 c003 	strb.w	ip, [r4, r3]
 800683c:	4629      	mov	r1, r5
 800683e:	f884 c104 	strb.w	ip, [r4, #260]	; 0x104
 8006842:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80068cc <d_maybe_print_fold_expression.isra.20+0x274>
 8006846:	f7ff feb5 	bl	80065b4 <d_print_subexpr>
 800684a:	4642      	mov	r2, r8
 800684c:	4629      	mov	r1, r5
 800684e:	4620      	mov	r0, r4
 8006850:	f7ff fe70 	bl	8006534 <d_print_expr_op>
 8006854:	f109 0a03 	add.w	sl, r9, #3
 8006858:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800685c:	2600      	movs	r6, #0
 800685e:	e016      	b.n	800688e <d_maybe_print_fold_expression.isra.20+0x236>
 8006860:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006864:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006868:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800686c:	4798      	blx	r3
 800686e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006872:	3301      	adds	r3, #1
 8006874:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006878:	2200      	movs	r2, #0
 800687a:	2301      	movs	r3, #1
 800687c:	45d1      	cmp	r9, sl
 800687e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8006882:	f804 b002 	strb.w	fp, [r4, r2]
 8006886:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 800688a:	f43f af1d 	beq.w	80066c8 <d_maybe_print_fold_expression.isra.20+0x70>
 800688e:	2bff      	cmp	r3, #255	; 0xff
 8006890:	4619      	mov	r1, r3
 8006892:	4620      	mov	r0, r4
 8006894:	f819 bb01 	ldrb.w	fp, [r9], #1
 8006898:	d0e2      	beq.n	8006860 <d_maybe_print_fold_expression.isra.20+0x208>
 800689a:	461a      	mov	r2, r3
 800689c:	3301      	adds	r3, #1
 800689e:	e7ed      	b.n	800687c <d_maybe_print_fold_expression.isra.20+0x224>
 80068a0:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80068a4:	9301      	str	r3, [sp, #4]
 80068a6:	f8d9 9008 	ldr.w	r9, [r9, #8]
 80068aa:	e6eb      	b.n	8006684 <d_maybe_print_fold_expression.isra.20+0x2c>
 80068ac:	4642      	mov	r2, r8
 80068ae:	4629      	mov	r1, r5
 80068b0:	4620      	mov	r0, r4
 80068b2:	f7ff fe3f 	bl	8006534 <d_print_expr_op>
 80068b6:	464a      	mov	r2, r9
 80068b8:	e70c      	b.n	80066d4 <d_maybe_print_fold_expression.isra.20+0x7c>
 80068ba:	1c4a      	adds	r2, r1, #1
 80068bc:	e723      	b.n	8006706 <d_maybe_print_fold_expression.isra.20+0xae>
 80068be:	1c4a      	adds	r2, r1, #1
 80068c0:	e741      	b.n	8006746 <d_maybe_print_fold_expression.isra.20+0xee>
 80068c2:	bf00      	nop
 80068c4:	08035100 	.word	0x08035100
 80068c8:	080350f8 	.word	0x080350f8
 80068cc:	08035004 	.word	0x08035004

080068d0 <d_demangle_callback.constprop.22>:
 80068d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068d4:	b0e5      	sub	sp, #404	; 0x194
 80068d6:	f890 a000 	ldrb.w	sl, [r0]
 80068da:	f1ba 0f5f 	cmp.w	sl, #95	; 0x5f
 80068de:	af00      	add	r7, sp, #0
 80068e0:	4605      	mov	r5, r0
 80068e2:	4688      	mov	r8, r1
 80068e4:	4616      	mov	r6, r2
 80068e6:	f000 80f3 	beq.w	8006ad0 <d_demangle_callback.constprop.22+0x200>
 80068ea:	2208      	movs	r2, #8
 80068ec:	49bb      	ldr	r1, [pc, #748]	; (8006bdc <d_demangle_callback.constprop.22+0x30c>)
 80068ee:	4628      	mov	r0, r5
 80068f0:	f028 fa88 	bl	802ee04 <strncmp>
 80068f4:	b948      	cbnz	r0, 800690a <d_demangle_callback.constprop.22+0x3a>
 80068f6:	7a2b      	ldrb	r3, [r5, #8]
 80068f8:	2b2e      	cmp	r3, #46	; 0x2e
 80068fa:	f000 80d8 	beq.w	8006aae <d_demangle_callback.constprop.22+0x1de>
 80068fe:	2b5f      	cmp	r3, #95	; 0x5f
 8006900:	f000 80d5 	beq.w	8006aae <d_demangle_callback.constprop.22+0x1de>
 8006904:	2b24      	cmp	r3, #36	; 0x24
 8006906:	f000 80d2 	beq.w	8006aae <d_demangle_callback.constprop.22+0x1de>
 800690a:	f04f 0900 	mov.w	r9, #0
 800690e:	4628      	mov	r0, r5
 8006910:	f000 f9e6 	bl	8006ce0 <strlen>
 8006914:	0142      	lsls	r2, r0, #5
 8006916:	0083      	lsls	r3, r0, #2
 8006918:	3208      	adds	r2, #8
 800691a:	330a      	adds	r3, #10
 800691c:	ebad 0d02 	sub.w	sp, sp, r2
 8006920:	f023 0307 	bic.w	r3, r3, #7
 8006924:	2400      	movs	r4, #0
 8006926:	46eb      	mov	fp, sp
 8006928:	1829      	adds	r1, r5, r0
 800692a:	ebad 0d03 	sub.w	sp, sp, r3
 800692e:	2211      	movs	r2, #17
 8006930:	0043      	lsls	r3, r0, #1
 8006932:	f1b9 0f01 	cmp.w	r9, #1
 8006936:	f8c7 b01c 	str.w	fp, [r7, #28]
 800693a:	f8c7 d028 	str.w	sp, [r7, #40]	; 0x28
 800693e:	60fd      	str	r5, [r7, #12]
 8006940:	61bd      	str	r5, [r7, #24]
 8006942:	6338      	str	r0, [r7, #48]	; 0x30
 8006944:	6139      	str	r1, [r7, #16]
 8006946:	627b      	str	r3, [r7, #36]	; 0x24
 8006948:	617a      	str	r2, [r7, #20]
 800694a:	623c      	str	r4, [r7, #32]
 800694c:	62fc      	str	r4, [r7, #44]	; 0x2c
 800694e:	e9c7 440d 	strd	r4, r4, [r7, #52]	; 0x34
 8006952:	e9c7 440f 	strd	r4, r4, [r7, #60]	; 0x3c
 8006956:	647c      	str	r4, [r7, #68]	; 0x44
 8006958:	f000 80a0 	beq.w	8006a9c <d_demangle_callback.constprop.22+0x1cc>
 800695c:	f0c0 80bf 	bcc.w	8006ade <d_demangle_callback.constprop.22+0x20e>
 8006960:	7aea      	ldrb	r2, [r5, #11]
 8006962:	f1b9 0f02 	cmp.w	r9, #2
 8006966:	f105 0a0b 	add.w	sl, r5, #11
 800696a:	bf14      	ite	ne
 800696c:	f04f 0944 	movne.w	r9, #68	; 0x44
 8006970:	f04f 0943 	moveq.w	r9, #67	; 0x43
 8006974:	2a5f      	cmp	r2, #95	; 0x5f
 8006976:	f8c7 a018 	str.w	sl, [r7, #24]
 800697a:	f000 80b9 	beq.w	8006af0 <d_demangle_callback.constprop.22+0x220>
 800697e:	4650      	mov	r0, sl
 8006980:	607b      	str	r3, [r7, #4]
 8006982:	f000 f9ad 	bl	8006ce0 <strlen>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2b00      	cmp	r3, #0
 800698a:	f340 8123 	ble.w	8006bd4 <d_demangle_callback.constprop.22+0x304>
 800698e:	2300      	movs	r3, #0
 8006990:	2201      	movs	r2, #1
 8006992:	f8cb 3004 	str.w	r3, [fp, #4]
 8006996:	623a      	str	r2, [r7, #32]
 8006998:	2800      	cmp	r0, #0
 800699a:	f000 811b 	beq.w	8006bd4 <d_demangle_callback.constprop.22+0x304>
 800699e:	e9cb a002 	strd	sl, r0, [fp, #8]
 80069a2:	f88b 3000 	strb.w	r3, [fp]
 80069a6:	4649      	mov	r1, r9
 80069a8:	2300      	movs	r3, #0
 80069aa:	465a      	mov	r2, fp
 80069ac:	f107 000c 	add.w	r0, r7, #12
 80069b0:	f7f9 fc1e 	bl	80001f0 <d_make_comp>
 80069b4:	69bc      	ldr	r4, [r7, #24]
 80069b6:	4605      	mov	r5, r0
 80069b8:	4620      	mov	r0, r4
 80069ba:	f000 f991 	bl	8006ce0 <strlen>
 80069be:	1823      	adds	r3, r4, r0
 80069c0:	61bb      	str	r3, [r7, #24]
 80069c2:	f814 9000 	ldrb.w	r9, [r4, r0]
 80069c6:	f1b9 0f00 	cmp.w	r9, #0
 80069ca:	d16a      	bne.n	8006aa2 <d_demangle_callback.constprop.22+0x1d2>
 80069cc:	2d00      	cmp	r5, #0
 80069ce:	d068      	beq.n	8006aa2 <d_demangle_callback.constprop.22+0x1d2>
 80069d0:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80069d4:	462a      	mov	r2, r5
 80069d6:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 80069da:	f507 70c4 	add.w	r0, r7, #392	; 0x188
 80069de:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
 80069e2:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
 80069e6:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 80069ea:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80069ee:	f8c4 9110 	str.w	r9, [r4, #272]	; 0x110
 80069f2:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 80069f6:	f8c4 9120 	str.w	r9, [r4, #288]	; 0x120
 80069fa:	f8c4 9124 	str.w	r9, [r4, #292]	; 0x124
 80069fe:	f8c4 9118 	str.w	r9, [r4, #280]	; 0x118
 8006a02:	f8c4 911c 	str.w	r9, [r4, #284]	; 0x11c
 8006a06:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
 8006a0a:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
 8006a0e:	f8c4 9130 	str.w	r9, [r4, #304]	; 0x130
 8006a12:	f8c4 9134 	str.w	r9, [r4, #308]	; 0x134
 8006a16:	f8c4 9138 	str.w	r9, [r4, #312]	; 0x138
 8006a1a:	f8c4 913c 	str.w	r9, [r4, #316]	; 0x13c
 8006a1e:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
 8006a22:	f7f9 fc49 	bl	80002b8 <d_count_templates_scopes>
 8006a26:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
 8006a2a:	f8d4 6140 	ldr.w	r6, [r4, #320]	; 0x140
 8006a2e:	f8c4 9144 	str.w	r9, [r4, #324]	; 0x144
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	fb06 f603 	mul.w	r6, r6, r3
 8006a38:	461a      	mov	r2, r3
 8006a3a:	bfb8      	it	lt
 8006a3c:	2201      	movlt	r2, #1
 8006a3e:	00d2      	lsls	r2, r2, #3
 8006a40:	2e01      	cmp	r6, #1
 8006a42:	4633      	mov	r3, r6
 8006a44:	f102 0208 	add.w	r2, r2, #8
 8006a48:	bfb8      	it	lt
 8006a4a:	2301      	movlt	r3, #1
 8006a4c:	46e8      	mov	r8, sp
 8006a4e:	00db      	lsls	r3, r3, #3
 8006a50:	ebad 0d02 	sub.w	sp, sp, r2
 8006a54:	3308      	adds	r3, #8
 8006a56:	4669      	mov	r1, sp
 8006a58:	462a      	mov	r2, r5
 8006a5a:	ebad 0d03 	sub.w	sp, sp, r3
 8006a5e:	4620      	mov	r0, r4
 8006a60:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
 8006a64:	2111      	movs	r1, #17
 8006a66:	f8c4 d138 	str.w	sp, [r4, #312]	; 0x138
 8006a6a:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
 8006a6e:	f7fc f899 	bl	8002ba4 <d_print_comp>
 8006a72:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006a76:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006a7a:	f804 9001 	strb.w	r9, [r4, r1]
 8006a7e:	4620      	mov	r0, r4
 8006a80:	46c5      	mov	sp, r8
 8006a82:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006a86:	4798      	blx	r3
 8006a88:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
 8006a8c:	fab0 f080 	clz	r0, r0
 8006a90:	0940      	lsrs	r0, r0, #5
 8006a92:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8006a96:	46bd      	mov	sp, r7
 8006a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a9c:	f1ba 0f5f 	cmp.w	sl, #95	; 0x5f
 8006aa0:	d033      	beq.n	8006b0a <d_demangle_callback.constprop.22+0x23a>
 8006aa2:	2000      	movs	r0, #0
 8006aa4:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aae:	7a6b      	ldrb	r3, [r5, #9]
 8006ab0:	2b44      	cmp	r3, #68	; 0x44
 8006ab2:	d002      	beq.n	8006aba <d_demangle_callback.constprop.22+0x1ea>
 8006ab4:	2b49      	cmp	r3, #73	; 0x49
 8006ab6:	f47f af28 	bne.w	800690a <d_demangle_callback.constprop.22+0x3a>
 8006aba:	7aaa      	ldrb	r2, [r5, #10]
 8006abc:	2a5f      	cmp	r2, #95	; 0x5f
 8006abe:	f47f af24 	bne.w	800690a <d_demangle_callback.constprop.22+0x3a>
 8006ac2:	2b49      	cmp	r3, #73	; 0x49
 8006ac4:	bf14      	ite	ne
 8006ac6:	f04f 0903 	movne.w	r9, #3
 8006aca:	f04f 0902 	moveq.w	r9, #2
 8006ace:	e71e      	b.n	800690e <d_demangle_callback.constprop.22+0x3e>
 8006ad0:	7843      	ldrb	r3, [r0, #1]
 8006ad2:	2b5a      	cmp	r3, #90	; 0x5a
 8006ad4:	f47f af09 	bne.w	80068ea <d_demangle_callback.constprop.22+0x1a>
 8006ad8:	f04f 0901 	mov.w	r9, #1
 8006adc:	e717      	b.n	800690e <d_demangle_callback.constprop.22+0x3e>
 8006ade:	f107 000c 	add.w	r0, r7, #12
 8006ae2:	f7fa fe05 	bl	80016f0 <d_type>
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	4605      	mov	r5, r0
 8006aea:	f893 9000 	ldrb.w	r9, [r3]
 8006aee:	e76a      	b.n	80069c6 <d_demangle_callback.constprop.22+0xf6>
 8006af0:	7b2a      	ldrb	r2, [r5, #12]
 8006af2:	2a5a      	cmp	r2, #90	; 0x5a
 8006af4:	f47f af43 	bne.w	800697e <d_demangle_callback.constprop.22+0xae>
 8006af8:	350d      	adds	r5, #13
 8006afa:	4621      	mov	r1, r4
 8006afc:	f107 000c 	add.w	r0, r7, #12
 8006b00:	61bd      	str	r5, [r7, #24]
 8006b02:	f7fb fd37 	bl	8002574 <d_encoding>
 8006b06:	4683      	mov	fp, r0
 8006b08:	e74d      	b.n	80069a6 <d_demangle_callback.constprop.22+0xd6>
 8006b0a:	786b      	ldrb	r3, [r5, #1]
 8006b0c:	2b5a      	cmp	r3, #90	; 0x5a
 8006b0e:	d1c8      	bne.n	8006aa2 <d_demangle_callback.constprop.22+0x1d2>
 8006b10:	3502      	adds	r5, #2
 8006b12:	4649      	mov	r1, r9
 8006b14:	f107 000c 	add.w	r0, r7, #12
 8006b18:	61bd      	str	r5, [r7, #24]
 8006b1a:	f7fb fd2b 	bl	8002574 <d_encoding>
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	07db      	lsls	r3, r3, #31
 8006b22:	4605      	mov	r5, r0
 8006b24:	d552      	bpl.n	8006bcc <d_demangle_callback.constprop.22+0x2fc>
 8006b26:	69b8      	ldr	r0, [r7, #24]
 8006b28:	f890 9000 	ldrb.w	r9, [r0]
 8006b2c:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
 8006b30:	f47f af49 	bne.w	80069c6 <d_demangle_callback.constprop.22+0xf6>
 8006b34:	7843      	ldrb	r3, [r0, #1]
 8006b36:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006b3a:	2a19      	cmp	r2, #25
 8006b3c:	d93a      	bls.n	8006bb4 <d_demangle_callback.constprop.22+0x2e4>
 8006b3e:	2b5f      	cmp	r3, #95	; 0x5f
 8006b40:	d038      	beq.n	8006bb4 <d_demangle_callback.constprop.22+0x2e4>
 8006b42:	3b30      	subs	r3, #48	; 0x30
 8006b44:	2b09      	cmp	r3, #9
 8006b46:	d841      	bhi.n	8006bcc <d_demangle_callback.constprop.22+0x2fc>
 8006b48:	7803      	ldrb	r3, [r0, #0]
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	2b2e      	cmp	r3, #46	; 0x2e
 8006b4e:	d112      	bne.n	8006b76 <d_demangle_callback.constprop.22+0x2a6>
 8006b50:	7853      	ldrb	r3, [r2, #1]
 8006b52:	3b30      	subs	r3, #48	; 0x30
 8006b54:	2b09      	cmp	r3, #9
 8006b56:	d80e      	bhi.n	8006b76 <d_demangle_callback.constprop.22+0x2a6>
 8006b58:	7893      	ldrb	r3, [r2, #2]
 8006b5a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006b5e:	2909      	cmp	r1, #9
 8006b60:	f102 0202 	add.w	r2, r2, #2
 8006b64:	d8f2      	bhi.n	8006b4c <d_demangle_callback.constprop.22+0x27c>
 8006b66:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8006b6a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006b6e:	2909      	cmp	r1, #9
 8006b70:	d9f9      	bls.n	8006b66 <d_demangle_callback.constprop.22+0x296>
 8006b72:	2b2e      	cmp	r3, #46	; 0x2e
 8006b74:	d0ec      	beq.n	8006b50 <d_demangle_callback.constprop.22+0x280>
 8006b76:	e9d7 1308 	ldrd	r1, r3, [r7, #32]
 8006b7a:	4299      	cmp	r1, r3
 8006b7c:	61ba      	str	r2, [r7, #24]
 8006b7e:	da17      	bge.n	8006bb0 <d_demangle_callback.constprop.22+0x2e0>
 8006b80:	f8d7 e01c 	ldr.w	lr, [r7, #28]
 8006b84:	ea4f 1c01 	mov.w	ip, r1, lsl #4
 8006b88:	eb0e 030c 	add.w	r3, lr, ip
 8006b8c:	3101      	adds	r1, #1
 8006b8e:	1a12      	subs	r2, r2, r0
 8006b90:	605c      	str	r4, [r3, #4]
 8006b92:	6239      	str	r1, [r7, #32]
 8006b94:	d00c      	beq.n	8006bb0 <d_demangle_callback.constprop.22+0x2e0>
 8006b96:	605c      	str	r4, [r3, #4]
 8006b98:	f80e 400c 	strb.w	r4, [lr, ip]
 8006b9c:	e9c3 0202 	strd	r0, r2, [r3, #8]
 8006ba0:	462a      	mov	r2, r5
 8006ba2:	214d      	movs	r1, #77	; 0x4d
 8006ba4:	f107 000c 	add.w	r0, r7, #12
 8006ba8:	f7f9 fb22 	bl	80001f0 <d_make_comp>
 8006bac:	4605      	mov	r5, r0
 8006bae:	e7ba      	b.n	8006b26 <d_demangle_callback.constprop.22+0x256>
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	e7f5      	b.n	8006ba0 <d_demangle_callback.constprop.22+0x2d0>
 8006bb4:	1c81      	adds	r1, r0, #2
 8006bb6:	460a      	mov	r2, r1
 8006bb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bbc:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 8006bc0:	f1bc 0f19 	cmp.w	ip, #25
 8006bc4:	d9f7      	bls.n	8006bb6 <d_demangle_callback.constprop.22+0x2e6>
 8006bc6:	2b5f      	cmp	r3, #95	; 0x5f
 8006bc8:	d0f5      	beq.n	8006bb6 <d_demangle_callback.constprop.22+0x2e6>
 8006bca:	e7bf      	b.n	8006b4c <d_demangle_callback.constprop.22+0x27c>
 8006bcc:	69bb      	ldr	r3, [r7, #24]
 8006bce:	f893 9000 	ldrb.w	r9, [r3]
 8006bd2:	e6f8      	b.n	80069c6 <d_demangle_callback.constprop.22+0xf6>
 8006bd4:	f04f 0b00 	mov.w	fp, #0
 8006bd8:	e6e5      	b.n	80069a6 <d_demangle_callback.constprop.22+0xd6>
 8006bda:	bf00      	nop
 8006bdc:	08034d90 	.word	0x08034d90

08006be0 <__cxa_demangle>:
 8006be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006be4:	b084      	sub	sp, #16
 8006be6:	b380      	cbz	r0, 8006c4a <__cxa_demangle+0x6a>
 8006be8:	b101      	cbz	r1, 8006bec <__cxa_demangle+0xc>
 8006bea:	b372      	cbz	r2, 8006c4a <__cxa_demangle+0x6a>
 8006bec:	2400      	movs	r4, #0
 8006bee:	4617      	mov	r7, r2
 8006bf0:	460e      	mov	r6, r1
 8006bf2:	466a      	mov	r2, sp
 8006bf4:	492b      	ldr	r1, [pc, #172]	; (8006ca4 <__cxa_demangle+0xc4>)
 8006bf6:	461d      	mov	r5, r3
 8006bf8:	e9cd 4400 	strd	r4, r4, [sp]
 8006bfc:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8006c00:	f7ff fe66 	bl	80068d0 <d_demangle_callback.constprop.22>
 8006c04:	2800      	cmp	r0, #0
 8006c06:	d047      	beq.n	8006c98 <__cxa_demangle+0xb8>
 8006c08:	9b03      	ldr	r3, [sp, #12]
 8006c0a:	9c00      	ldr	r4, [sp, #0]
 8006c0c:	b9ab      	cbnz	r3, 8006c3a <__cxa_demangle+0x5a>
 8006c0e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006c12:	b36c      	cbz	r4, 8006c70 <__cxa_demangle+0x90>
 8006c14:	b1b6      	cbz	r6, 8006c44 <__cxa_demangle+0x64>
 8006c16:	4620      	mov	r0, r4
 8006c18:	f000 f862 	bl	8006ce0 <strlen>
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	4298      	cmp	r0, r3
 8006c20:	d31c      	bcc.n	8006c5c <__cxa_demangle+0x7c>
 8006c22:	4630      	mov	r0, r6
 8006c24:	f027 fc6e 	bl	802e504 <free>
 8006c28:	f8c7 8000 	str.w	r8, [r7]
 8006c2c:	b195      	cbz	r5, 8006c54 <__cxa_demangle+0x74>
 8006c2e:	2300      	movs	r3, #0
 8006c30:	4620      	mov	r0, r4
 8006c32:	602b      	str	r3, [r5, #0]
 8006c34:	b004      	add	sp, #16
 8006c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c3a:	b334      	cbz	r4, 8006c8a <__cxa_demangle+0xaa>
 8006c3c:	f04f 0801 	mov.w	r8, #1
 8006c40:	2e00      	cmp	r6, #0
 8006c42:	d1e8      	bne.n	8006c16 <__cxa_demangle+0x36>
 8006c44:	2f00      	cmp	r7, #0
 8006c46:	d1ef      	bne.n	8006c28 <__cxa_demangle+0x48>
 8006c48:	e7f0      	b.n	8006c2c <__cxa_demangle+0x4c>
 8006c4a:	b113      	cbz	r3, 8006c52 <__cxa_demangle+0x72>
 8006c4c:	f06f 0202 	mvn.w	r2, #2
 8006c50:	601a      	str	r2, [r3, #0]
 8006c52:	2400      	movs	r4, #0
 8006c54:	4620      	mov	r0, r4
 8006c56:	b004      	add	sp, #16
 8006c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c5c:	1c42      	adds	r2, r0, #1
 8006c5e:	4621      	mov	r1, r4
 8006c60:	4630      	mov	r0, r6
 8006c62:	f027 fc66 	bl	802e532 <memcpy>
 8006c66:	4620      	mov	r0, r4
 8006c68:	f027 fc4c 	bl	802e504 <free>
 8006c6c:	4634      	mov	r4, r6
 8006c6e:	e7dd      	b.n	8006c2c <__cxa_demangle+0x4c>
 8006c70:	2d00      	cmp	r5, #0
 8006c72:	d0ee      	beq.n	8006c52 <__cxa_demangle+0x72>
 8006c74:	f1b8 0f01 	cmp.w	r8, #1
 8006c78:	d009      	beq.n	8006c8e <__cxa_demangle+0xae>
 8006c7a:	2400      	movs	r4, #0
 8006c7c:	f06f 0301 	mvn.w	r3, #1
 8006c80:	4620      	mov	r0, r4
 8006c82:	602b      	str	r3, [r5, #0]
 8006c84:	b004      	add	sp, #16
 8006c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c8a:	2d00      	cmp	r5, #0
 8006c8c:	d0e1      	beq.n	8006c52 <__cxa_demangle+0x72>
 8006c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006c92:	602b      	str	r3, [r5, #0]
 8006c94:	2400      	movs	r4, #0
 8006c96:	e7dd      	b.n	8006c54 <__cxa_demangle+0x74>
 8006c98:	9800      	ldr	r0, [sp, #0]
 8006c9a:	f027 fc33 	bl	802e504 <free>
 8006c9e:	2d00      	cmp	r5, #0
 8006ca0:	d1eb      	bne.n	8006c7a <__cxa_demangle+0x9a>
 8006ca2:	e7d6      	b.n	8006c52 <__cxa_demangle+0x72>
 8006ca4:	08000869 	.word	0x08000869

08006ca8 <__gcclibcxx_demangle_callback>:
 8006ca8:	b160      	cbz	r0, 8006cc4 <__gcclibcxx_demangle_callback+0x1c>
 8006caa:	b508      	push	{r3, lr}
 8006cac:	b139      	cbz	r1, 8006cbe <__gcclibcxx_demangle_callback+0x16>
 8006cae:	f7ff fe0f 	bl	80068d0 <d_demangle_callback.constprop.22>
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	bf0c      	ite	eq
 8006cb6:	f06f 0001 	mvneq.w	r0, #1
 8006cba:	2000      	movne	r0, #0
 8006cbc:	bd08      	pop	{r3, pc}
 8006cbe:	f06f 0002 	mvn.w	r0, #2
 8006cc2:	bd08      	pop	{r3, pc}
 8006cc4:	f06f 0002 	mvn.w	r0, #2
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop

08006ccc <strcmp>:
 8006ccc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cd4:	2a01      	cmp	r2, #1
 8006cd6:	bf28      	it	cs
 8006cd8:	429a      	cmpcs	r2, r3
 8006cda:	d0f7      	beq.n	8006ccc <strcmp>
 8006cdc:	1ad0      	subs	r0, r2, r3
 8006cde:	4770      	bx	lr

08006ce0 <strlen>:
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ce6:	2a00      	cmp	r2, #0
 8006ce8:	d1fb      	bne.n	8006ce2 <strlen+0x2>
 8006cea:	1a18      	subs	r0, r3, r0
 8006cec:	3801      	subs	r0, #1
 8006cee:	4770      	bx	lr

08006cf0 <memchr>:
 8006cf0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8006cf4:	2a10      	cmp	r2, #16
 8006cf6:	db2b      	blt.n	8006d50 <memchr+0x60>
 8006cf8:	f010 0f07 	tst.w	r0, #7
 8006cfc:	d008      	beq.n	8006d10 <memchr+0x20>
 8006cfe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006d02:	3a01      	subs	r2, #1
 8006d04:	428b      	cmp	r3, r1
 8006d06:	d02d      	beq.n	8006d64 <memchr+0x74>
 8006d08:	f010 0f07 	tst.w	r0, #7
 8006d0c:	b342      	cbz	r2, 8006d60 <memchr+0x70>
 8006d0e:	d1f6      	bne.n	8006cfe <memchr+0xe>
 8006d10:	b4f0      	push	{r4, r5, r6, r7}
 8006d12:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8006d16:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8006d1a:	f022 0407 	bic.w	r4, r2, #7
 8006d1e:	f07f 0700 	mvns.w	r7, #0
 8006d22:	2300      	movs	r3, #0
 8006d24:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8006d28:	3c08      	subs	r4, #8
 8006d2a:	ea85 0501 	eor.w	r5, r5, r1
 8006d2e:	ea86 0601 	eor.w	r6, r6, r1
 8006d32:	fa85 f547 	uadd8	r5, r5, r7
 8006d36:	faa3 f587 	sel	r5, r3, r7
 8006d3a:	fa86 f647 	uadd8	r6, r6, r7
 8006d3e:	faa5 f687 	sel	r6, r5, r7
 8006d42:	b98e      	cbnz	r6, 8006d68 <memchr+0x78>
 8006d44:	d1ee      	bne.n	8006d24 <memchr+0x34>
 8006d46:	bcf0      	pop	{r4, r5, r6, r7}
 8006d48:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8006d4c:	f002 0207 	and.w	r2, r2, #7
 8006d50:	b132      	cbz	r2, 8006d60 <memchr+0x70>
 8006d52:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006d56:	3a01      	subs	r2, #1
 8006d58:	ea83 0301 	eor.w	r3, r3, r1
 8006d5c:	b113      	cbz	r3, 8006d64 <memchr+0x74>
 8006d5e:	d1f8      	bne.n	8006d52 <memchr+0x62>
 8006d60:	2000      	movs	r0, #0
 8006d62:	4770      	bx	lr
 8006d64:	3801      	subs	r0, #1
 8006d66:	4770      	bx	lr
 8006d68:	2d00      	cmp	r5, #0
 8006d6a:	bf06      	itte	eq
 8006d6c:	4635      	moveq	r5, r6
 8006d6e:	3803      	subeq	r0, #3
 8006d70:	3807      	subne	r0, #7
 8006d72:	f015 0f01 	tst.w	r5, #1
 8006d76:	d107      	bne.n	8006d88 <memchr+0x98>
 8006d78:	3001      	adds	r0, #1
 8006d7a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8006d7e:	bf02      	ittt	eq
 8006d80:	3001      	addeq	r0, #1
 8006d82:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8006d86:	3001      	addeq	r0, #1
 8006d88:	bcf0      	pop	{r4, r5, r6, r7}
 8006d8a:	3801      	subs	r0, #1
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop

08006d90 <__aeabi_drsub>:
 8006d90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8006d94:	e002      	b.n	8006d9c <__adddf3>
 8006d96:	bf00      	nop

08006d98 <__aeabi_dsub>:
 8006d98:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08006d9c <__adddf3>:
 8006d9c:	b530      	push	{r4, r5, lr}
 8006d9e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8006da2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8006da6:	ea94 0f05 	teq	r4, r5
 8006daa:	bf08      	it	eq
 8006dac:	ea90 0f02 	teqeq	r0, r2
 8006db0:	bf1f      	itttt	ne
 8006db2:	ea54 0c00 	orrsne.w	ip, r4, r0
 8006db6:	ea55 0c02 	orrsne.w	ip, r5, r2
 8006dba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8006dbe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006dc2:	f000 80e2 	beq.w	8006f8a <__adddf3+0x1ee>
 8006dc6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8006dca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8006dce:	bfb8      	it	lt
 8006dd0:	426d      	neglt	r5, r5
 8006dd2:	dd0c      	ble.n	8006dee <__adddf3+0x52>
 8006dd4:	442c      	add	r4, r5
 8006dd6:	ea80 0202 	eor.w	r2, r0, r2
 8006dda:	ea81 0303 	eor.w	r3, r1, r3
 8006dde:	ea82 0000 	eor.w	r0, r2, r0
 8006de2:	ea83 0101 	eor.w	r1, r3, r1
 8006de6:	ea80 0202 	eor.w	r2, r0, r2
 8006dea:	ea81 0303 	eor.w	r3, r1, r3
 8006dee:	2d36      	cmp	r5, #54	; 0x36
 8006df0:	bf88      	it	hi
 8006df2:	bd30      	pophi	{r4, r5, pc}
 8006df4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006df8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006dfc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8006e00:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8006e04:	d002      	beq.n	8006e0c <__adddf3+0x70>
 8006e06:	4240      	negs	r0, r0
 8006e08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006e0c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8006e10:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006e14:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8006e18:	d002      	beq.n	8006e20 <__adddf3+0x84>
 8006e1a:	4252      	negs	r2, r2
 8006e1c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8006e20:	ea94 0f05 	teq	r4, r5
 8006e24:	f000 80a7 	beq.w	8006f76 <__adddf3+0x1da>
 8006e28:	f1a4 0401 	sub.w	r4, r4, #1
 8006e2c:	f1d5 0e20 	rsbs	lr, r5, #32
 8006e30:	db0d      	blt.n	8006e4e <__adddf3+0xb2>
 8006e32:	fa02 fc0e 	lsl.w	ip, r2, lr
 8006e36:	fa22 f205 	lsr.w	r2, r2, r5
 8006e3a:	1880      	adds	r0, r0, r2
 8006e3c:	f141 0100 	adc.w	r1, r1, #0
 8006e40:	fa03 f20e 	lsl.w	r2, r3, lr
 8006e44:	1880      	adds	r0, r0, r2
 8006e46:	fa43 f305 	asr.w	r3, r3, r5
 8006e4a:	4159      	adcs	r1, r3
 8006e4c:	e00e      	b.n	8006e6c <__adddf3+0xd0>
 8006e4e:	f1a5 0520 	sub.w	r5, r5, #32
 8006e52:	f10e 0e20 	add.w	lr, lr, #32
 8006e56:	2a01      	cmp	r2, #1
 8006e58:	fa03 fc0e 	lsl.w	ip, r3, lr
 8006e5c:	bf28      	it	cs
 8006e5e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8006e62:	fa43 f305 	asr.w	r3, r3, r5
 8006e66:	18c0      	adds	r0, r0, r3
 8006e68:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8006e6c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006e70:	d507      	bpl.n	8006e82 <__adddf3+0xe6>
 8006e72:	f04f 0e00 	mov.w	lr, #0
 8006e76:	f1dc 0c00 	rsbs	ip, ip, #0
 8006e7a:	eb7e 0000 	sbcs.w	r0, lr, r0
 8006e7e:	eb6e 0101 	sbc.w	r1, lr, r1
 8006e82:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006e86:	d31b      	bcc.n	8006ec0 <__adddf3+0x124>
 8006e88:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8006e8c:	d30c      	bcc.n	8006ea8 <__adddf3+0x10c>
 8006e8e:	0849      	lsrs	r1, r1, #1
 8006e90:	ea5f 0030 	movs.w	r0, r0, rrx
 8006e94:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8006e98:	f104 0401 	add.w	r4, r4, #1
 8006e9c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8006ea0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8006ea4:	f080 809a 	bcs.w	8006fdc <__adddf3+0x240>
 8006ea8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8006eac:	bf08      	it	eq
 8006eae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006eb2:	f150 0000 	adcs.w	r0, r0, #0
 8006eb6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006eba:	ea41 0105 	orr.w	r1, r1, r5
 8006ebe:	bd30      	pop	{r4, r5, pc}
 8006ec0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8006ec4:	4140      	adcs	r0, r0
 8006ec6:	eb41 0101 	adc.w	r1, r1, r1
 8006eca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006ece:	f1a4 0401 	sub.w	r4, r4, #1
 8006ed2:	d1e9      	bne.n	8006ea8 <__adddf3+0x10c>
 8006ed4:	f091 0f00 	teq	r1, #0
 8006ed8:	bf04      	itt	eq
 8006eda:	4601      	moveq	r1, r0
 8006edc:	2000      	moveq	r0, #0
 8006ede:	fab1 f381 	clz	r3, r1
 8006ee2:	bf08      	it	eq
 8006ee4:	3320      	addeq	r3, #32
 8006ee6:	f1a3 030b 	sub.w	r3, r3, #11
 8006eea:	f1b3 0220 	subs.w	r2, r3, #32
 8006eee:	da0c      	bge.n	8006f0a <__adddf3+0x16e>
 8006ef0:	320c      	adds	r2, #12
 8006ef2:	dd08      	ble.n	8006f06 <__adddf3+0x16a>
 8006ef4:	f102 0c14 	add.w	ip, r2, #20
 8006ef8:	f1c2 020c 	rsb	r2, r2, #12
 8006efc:	fa01 f00c 	lsl.w	r0, r1, ip
 8006f00:	fa21 f102 	lsr.w	r1, r1, r2
 8006f04:	e00c      	b.n	8006f20 <__adddf3+0x184>
 8006f06:	f102 0214 	add.w	r2, r2, #20
 8006f0a:	bfd8      	it	le
 8006f0c:	f1c2 0c20 	rsble	ip, r2, #32
 8006f10:	fa01 f102 	lsl.w	r1, r1, r2
 8006f14:	fa20 fc0c 	lsr.w	ip, r0, ip
 8006f18:	bfdc      	itt	le
 8006f1a:	ea41 010c 	orrle.w	r1, r1, ip
 8006f1e:	4090      	lslle	r0, r2
 8006f20:	1ae4      	subs	r4, r4, r3
 8006f22:	bfa2      	ittt	ge
 8006f24:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8006f28:	4329      	orrge	r1, r5
 8006f2a:	bd30      	popge	{r4, r5, pc}
 8006f2c:	ea6f 0404 	mvn.w	r4, r4
 8006f30:	3c1f      	subs	r4, #31
 8006f32:	da1c      	bge.n	8006f6e <__adddf3+0x1d2>
 8006f34:	340c      	adds	r4, #12
 8006f36:	dc0e      	bgt.n	8006f56 <__adddf3+0x1ba>
 8006f38:	f104 0414 	add.w	r4, r4, #20
 8006f3c:	f1c4 0220 	rsb	r2, r4, #32
 8006f40:	fa20 f004 	lsr.w	r0, r0, r4
 8006f44:	fa01 f302 	lsl.w	r3, r1, r2
 8006f48:	ea40 0003 	orr.w	r0, r0, r3
 8006f4c:	fa21 f304 	lsr.w	r3, r1, r4
 8006f50:	ea45 0103 	orr.w	r1, r5, r3
 8006f54:	bd30      	pop	{r4, r5, pc}
 8006f56:	f1c4 040c 	rsb	r4, r4, #12
 8006f5a:	f1c4 0220 	rsb	r2, r4, #32
 8006f5e:	fa20 f002 	lsr.w	r0, r0, r2
 8006f62:	fa01 f304 	lsl.w	r3, r1, r4
 8006f66:	ea40 0003 	orr.w	r0, r0, r3
 8006f6a:	4629      	mov	r1, r5
 8006f6c:	bd30      	pop	{r4, r5, pc}
 8006f6e:	fa21 f004 	lsr.w	r0, r1, r4
 8006f72:	4629      	mov	r1, r5
 8006f74:	bd30      	pop	{r4, r5, pc}
 8006f76:	f094 0f00 	teq	r4, #0
 8006f7a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8006f7e:	bf06      	itte	eq
 8006f80:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8006f84:	3401      	addeq	r4, #1
 8006f86:	3d01      	subne	r5, #1
 8006f88:	e74e      	b.n	8006e28 <__adddf3+0x8c>
 8006f8a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006f8e:	bf18      	it	ne
 8006f90:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006f94:	d029      	beq.n	8006fea <__adddf3+0x24e>
 8006f96:	ea94 0f05 	teq	r4, r5
 8006f9a:	bf08      	it	eq
 8006f9c:	ea90 0f02 	teqeq	r0, r2
 8006fa0:	d005      	beq.n	8006fae <__adddf3+0x212>
 8006fa2:	ea54 0c00 	orrs.w	ip, r4, r0
 8006fa6:	bf04      	itt	eq
 8006fa8:	4619      	moveq	r1, r3
 8006faa:	4610      	moveq	r0, r2
 8006fac:	bd30      	pop	{r4, r5, pc}
 8006fae:	ea91 0f03 	teq	r1, r3
 8006fb2:	bf1e      	ittt	ne
 8006fb4:	2100      	movne	r1, #0
 8006fb6:	2000      	movne	r0, #0
 8006fb8:	bd30      	popne	{r4, r5, pc}
 8006fba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8006fbe:	d105      	bne.n	8006fcc <__adddf3+0x230>
 8006fc0:	0040      	lsls	r0, r0, #1
 8006fc2:	4149      	adcs	r1, r1
 8006fc4:	bf28      	it	cs
 8006fc6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8006fca:	bd30      	pop	{r4, r5, pc}
 8006fcc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8006fd0:	bf3c      	itt	cc
 8006fd2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8006fd6:	bd30      	popcc	{r4, r5, pc}
 8006fd8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006fdc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8006fe0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006fe4:	f04f 0000 	mov.w	r0, #0
 8006fe8:	bd30      	pop	{r4, r5, pc}
 8006fea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006fee:	bf1a      	itte	ne
 8006ff0:	4619      	movne	r1, r3
 8006ff2:	4610      	movne	r0, r2
 8006ff4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8006ff8:	bf1c      	itt	ne
 8006ffa:	460b      	movne	r3, r1
 8006ffc:	4602      	movne	r2, r0
 8006ffe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8007002:	bf06      	itte	eq
 8007004:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8007008:	ea91 0f03 	teqeq	r1, r3
 800700c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8007010:	bd30      	pop	{r4, r5, pc}
 8007012:	bf00      	nop

08007014 <__aeabi_ui2d>:
 8007014:	f090 0f00 	teq	r0, #0
 8007018:	bf04      	itt	eq
 800701a:	2100      	moveq	r1, #0
 800701c:	4770      	bxeq	lr
 800701e:	b530      	push	{r4, r5, lr}
 8007020:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007024:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007028:	f04f 0500 	mov.w	r5, #0
 800702c:	f04f 0100 	mov.w	r1, #0
 8007030:	e750      	b.n	8006ed4 <__adddf3+0x138>
 8007032:	bf00      	nop

08007034 <__aeabi_i2d>:
 8007034:	f090 0f00 	teq	r0, #0
 8007038:	bf04      	itt	eq
 800703a:	2100      	moveq	r1, #0
 800703c:	4770      	bxeq	lr
 800703e:	b530      	push	{r4, r5, lr}
 8007040:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007044:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007048:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800704c:	bf48      	it	mi
 800704e:	4240      	negmi	r0, r0
 8007050:	f04f 0100 	mov.w	r1, #0
 8007054:	e73e      	b.n	8006ed4 <__adddf3+0x138>
 8007056:	bf00      	nop

08007058 <__aeabi_f2d>:
 8007058:	0042      	lsls	r2, r0, #1
 800705a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800705e:	ea4f 0131 	mov.w	r1, r1, rrx
 8007062:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8007066:	bf1f      	itttt	ne
 8007068:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800706c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8007070:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8007074:	4770      	bxne	lr
 8007076:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800707a:	bf08      	it	eq
 800707c:	4770      	bxeq	lr
 800707e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8007082:	bf04      	itt	eq
 8007084:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8007088:	4770      	bxeq	lr
 800708a:	b530      	push	{r4, r5, lr}
 800708c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8007090:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007094:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007098:	e71c      	b.n	8006ed4 <__adddf3+0x138>
 800709a:	bf00      	nop

0800709c <__aeabi_ul2d>:
 800709c:	ea50 0201 	orrs.w	r2, r0, r1
 80070a0:	bf08      	it	eq
 80070a2:	4770      	bxeq	lr
 80070a4:	b530      	push	{r4, r5, lr}
 80070a6:	f04f 0500 	mov.w	r5, #0
 80070aa:	e00a      	b.n	80070c2 <__aeabi_l2d+0x16>

080070ac <__aeabi_l2d>:
 80070ac:	ea50 0201 	orrs.w	r2, r0, r1
 80070b0:	bf08      	it	eq
 80070b2:	4770      	bxeq	lr
 80070b4:	b530      	push	{r4, r5, lr}
 80070b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80070ba:	d502      	bpl.n	80070c2 <__aeabi_l2d+0x16>
 80070bc:	4240      	negs	r0, r0
 80070be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80070c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80070c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80070ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80070ce:	f43f aed8 	beq.w	8006e82 <__adddf3+0xe6>
 80070d2:	f04f 0203 	mov.w	r2, #3
 80070d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80070da:	bf18      	it	ne
 80070dc:	3203      	addne	r2, #3
 80070de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80070e2:	bf18      	it	ne
 80070e4:	3203      	addne	r2, #3
 80070e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80070ea:	f1c2 0320 	rsb	r3, r2, #32
 80070ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80070f2:	fa20 f002 	lsr.w	r0, r0, r2
 80070f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80070fa:	ea40 000e 	orr.w	r0, r0, lr
 80070fe:	fa21 f102 	lsr.w	r1, r1, r2
 8007102:	4414      	add	r4, r2
 8007104:	e6bd      	b.n	8006e82 <__adddf3+0xe6>
 8007106:	bf00      	nop

08007108 <__aeabi_dmul>:
 8007108:	b570      	push	{r4, r5, r6, lr}
 800710a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800710e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8007112:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8007116:	bf1d      	ittte	ne
 8007118:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800711c:	ea94 0f0c 	teqne	r4, ip
 8007120:	ea95 0f0c 	teqne	r5, ip
 8007124:	f000 f8de 	bleq	80072e4 <__aeabi_dmul+0x1dc>
 8007128:	442c      	add	r4, r5
 800712a:	ea81 0603 	eor.w	r6, r1, r3
 800712e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8007132:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8007136:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800713a:	bf18      	it	ne
 800713c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8007140:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007144:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007148:	d038      	beq.n	80071bc <__aeabi_dmul+0xb4>
 800714a:	fba0 ce02 	umull	ip, lr, r0, r2
 800714e:	f04f 0500 	mov.w	r5, #0
 8007152:	fbe1 e502 	umlal	lr, r5, r1, r2
 8007156:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800715a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800715e:	f04f 0600 	mov.w	r6, #0
 8007162:	fbe1 5603 	umlal	r5, r6, r1, r3
 8007166:	f09c 0f00 	teq	ip, #0
 800716a:	bf18      	it	ne
 800716c:	f04e 0e01 	orrne.w	lr, lr, #1
 8007170:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8007174:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8007178:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800717c:	d204      	bcs.n	8007188 <__aeabi_dmul+0x80>
 800717e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8007182:	416d      	adcs	r5, r5
 8007184:	eb46 0606 	adc.w	r6, r6, r6
 8007188:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800718c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8007190:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8007194:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8007198:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800719c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80071a0:	bf88      	it	hi
 80071a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80071a6:	d81e      	bhi.n	80071e6 <__aeabi_dmul+0xde>
 80071a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80071ac:	bf08      	it	eq
 80071ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80071b2:	f150 0000 	adcs.w	r0, r0, #0
 80071b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80071ba:	bd70      	pop	{r4, r5, r6, pc}
 80071bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80071c0:	ea46 0101 	orr.w	r1, r6, r1
 80071c4:	ea40 0002 	orr.w	r0, r0, r2
 80071c8:	ea81 0103 	eor.w	r1, r1, r3
 80071cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80071d0:	bfc2      	ittt	gt
 80071d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80071d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80071da:	bd70      	popgt	{r4, r5, r6, pc}
 80071dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80071e0:	f04f 0e00 	mov.w	lr, #0
 80071e4:	3c01      	subs	r4, #1
 80071e6:	f300 80ab 	bgt.w	8007340 <__aeabi_dmul+0x238>
 80071ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80071ee:	bfde      	ittt	le
 80071f0:	2000      	movle	r0, #0
 80071f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80071f6:	bd70      	pople	{r4, r5, r6, pc}
 80071f8:	f1c4 0400 	rsb	r4, r4, #0
 80071fc:	3c20      	subs	r4, #32
 80071fe:	da35      	bge.n	800726c <__aeabi_dmul+0x164>
 8007200:	340c      	adds	r4, #12
 8007202:	dc1b      	bgt.n	800723c <__aeabi_dmul+0x134>
 8007204:	f104 0414 	add.w	r4, r4, #20
 8007208:	f1c4 0520 	rsb	r5, r4, #32
 800720c:	fa00 f305 	lsl.w	r3, r0, r5
 8007210:	fa20 f004 	lsr.w	r0, r0, r4
 8007214:	fa01 f205 	lsl.w	r2, r1, r5
 8007218:	ea40 0002 	orr.w	r0, r0, r2
 800721c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8007220:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007224:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8007228:	fa21 f604 	lsr.w	r6, r1, r4
 800722c:	eb42 0106 	adc.w	r1, r2, r6
 8007230:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007234:	bf08      	it	eq
 8007236:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800723a:	bd70      	pop	{r4, r5, r6, pc}
 800723c:	f1c4 040c 	rsb	r4, r4, #12
 8007240:	f1c4 0520 	rsb	r5, r4, #32
 8007244:	fa00 f304 	lsl.w	r3, r0, r4
 8007248:	fa20 f005 	lsr.w	r0, r0, r5
 800724c:	fa01 f204 	lsl.w	r2, r1, r4
 8007250:	ea40 0002 	orr.w	r0, r0, r2
 8007254:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007258:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800725c:	f141 0100 	adc.w	r1, r1, #0
 8007260:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007264:	bf08      	it	eq
 8007266:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800726a:	bd70      	pop	{r4, r5, r6, pc}
 800726c:	f1c4 0520 	rsb	r5, r4, #32
 8007270:	fa00 f205 	lsl.w	r2, r0, r5
 8007274:	ea4e 0e02 	orr.w	lr, lr, r2
 8007278:	fa20 f304 	lsr.w	r3, r0, r4
 800727c:	fa01 f205 	lsl.w	r2, r1, r5
 8007280:	ea43 0302 	orr.w	r3, r3, r2
 8007284:	fa21 f004 	lsr.w	r0, r1, r4
 8007288:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800728c:	fa21 f204 	lsr.w	r2, r1, r4
 8007290:	ea20 0002 	bic.w	r0, r0, r2
 8007294:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8007298:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800729c:	bf08      	it	eq
 800729e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80072a2:	bd70      	pop	{r4, r5, r6, pc}
 80072a4:	f094 0f00 	teq	r4, #0
 80072a8:	d10f      	bne.n	80072ca <__aeabi_dmul+0x1c2>
 80072aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80072ae:	0040      	lsls	r0, r0, #1
 80072b0:	eb41 0101 	adc.w	r1, r1, r1
 80072b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80072b8:	bf08      	it	eq
 80072ba:	3c01      	subeq	r4, #1
 80072bc:	d0f7      	beq.n	80072ae <__aeabi_dmul+0x1a6>
 80072be:	ea41 0106 	orr.w	r1, r1, r6
 80072c2:	f095 0f00 	teq	r5, #0
 80072c6:	bf18      	it	ne
 80072c8:	4770      	bxne	lr
 80072ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80072ce:	0052      	lsls	r2, r2, #1
 80072d0:	eb43 0303 	adc.w	r3, r3, r3
 80072d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80072d8:	bf08      	it	eq
 80072da:	3d01      	subeq	r5, #1
 80072dc:	d0f7      	beq.n	80072ce <__aeabi_dmul+0x1c6>
 80072de:	ea43 0306 	orr.w	r3, r3, r6
 80072e2:	4770      	bx	lr
 80072e4:	ea94 0f0c 	teq	r4, ip
 80072e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80072ec:	bf18      	it	ne
 80072ee:	ea95 0f0c 	teqne	r5, ip
 80072f2:	d00c      	beq.n	800730e <__aeabi_dmul+0x206>
 80072f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80072f8:	bf18      	it	ne
 80072fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80072fe:	d1d1      	bne.n	80072a4 <__aeabi_dmul+0x19c>
 8007300:	ea81 0103 	eor.w	r1, r1, r3
 8007304:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007308:	f04f 0000 	mov.w	r0, #0
 800730c:	bd70      	pop	{r4, r5, r6, pc}
 800730e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007312:	bf06      	itte	eq
 8007314:	4610      	moveq	r0, r2
 8007316:	4619      	moveq	r1, r3
 8007318:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800731c:	d019      	beq.n	8007352 <__aeabi_dmul+0x24a>
 800731e:	ea94 0f0c 	teq	r4, ip
 8007322:	d102      	bne.n	800732a <__aeabi_dmul+0x222>
 8007324:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8007328:	d113      	bne.n	8007352 <__aeabi_dmul+0x24a>
 800732a:	ea95 0f0c 	teq	r5, ip
 800732e:	d105      	bne.n	800733c <__aeabi_dmul+0x234>
 8007330:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8007334:	bf1c      	itt	ne
 8007336:	4610      	movne	r0, r2
 8007338:	4619      	movne	r1, r3
 800733a:	d10a      	bne.n	8007352 <__aeabi_dmul+0x24a>
 800733c:	ea81 0103 	eor.w	r1, r1, r3
 8007340:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007344:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8007348:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800734c:	f04f 0000 	mov.w	r0, #0
 8007350:	bd70      	pop	{r4, r5, r6, pc}
 8007352:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8007356:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800735a:	bd70      	pop	{r4, r5, r6, pc}

0800735c <__aeabi_ddiv>:
 800735c:	b570      	push	{r4, r5, r6, lr}
 800735e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8007362:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8007366:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800736a:	bf1d      	ittte	ne
 800736c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8007370:	ea94 0f0c 	teqne	r4, ip
 8007374:	ea95 0f0c 	teqne	r5, ip
 8007378:	f000 f8a7 	bleq	80074ca <__aeabi_ddiv+0x16e>
 800737c:	eba4 0405 	sub.w	r4, r4, r5
 8007380:	ea81 0e03 	eor.w	lr, r1, r3
 8007384:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8007388:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800738c:	f000 8088 	beq.w	80074a0 <__aeabi_ddiv+0x144>
 8007390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8007394:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8007398:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800739c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80073a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80073a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80073a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80073ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80073b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80073b4:	429d      	cmp	r5, r3
 80073b6:	bf08      	it	eq
 80073b8:	4296      	cmpeq	r6, r2
 80073ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80073be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80073c2:	d202      	bcs.n	80073ca <__aeabi_ddiv+0x6e>
 80073c4:	085b      	lsrs	r3, r3, #1
 80073c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80073ca:	1ab6      	subs	r6, r6, r2
 80073cc:	eb65 0503 	sbc.w	r5, r5, r3
 80073d0:	085b      	lsrs	r3, r3, #1
 80073d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80073d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80073da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80073de:	ebb6 0e02 	subs.w	lr, r6, r2
 80073e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80073e6:	bf22      	ittt	cs
 80073e8:	1ab6      	subcs	r6, r6, r2
 80073ea:	4675      	movcs	r5, lr
 80073ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80073f0:	085b      	lsrs	r3, r3, #1
 80073f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80073f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80073fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80073fe:	bf22      	ittt	cs
 8007400:	1ab6      	subcs	r6, r6, r2
 8007402:	4675      	movcs	r5, lr
 8007404:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8007408:	085b      	lsrs	r3, r3, #1
 800740a:	ea4f 0232 	mov.w	r2, r2, rrx
 800740e:	ebb6 0e02 	subs.w	lr, r6, r2
 8007412:	eb75 0e03 	sbcs.w	lr, r5, r3
 8007416:	bf22      	ittt	cs
 8007418:	1ab6      	subcs	r6, r6, r2
 800741a:	4675      	movcs	r5, lr
 800741c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8007420:	085b      	lsrs	r3, r3, #1
 8007422:	ea4f 0232 	mov.w	r2, r2, rrx
 8007426:	ebb6 0e02 	subs.w	lr, r6, r2
 800742a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800742e:	bf22      	ittt	cs
 8007430:	1ab6      	subcs	r6, r6, r2
 8007432:	4675      	movcs	r5, lr
 8007434:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8007438:	ea55 0e06 	orrs.w	lr, r5, r6
 800743c:	d018      	beq.n	8007470 <__aeabi_ddiv+0x114>
 800743e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8007442:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8007446:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800744a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800744e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8007452:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8007456:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800745a:	d1c0      	bne.n	80073de <__aeabi_ddiv+0x82>
 800745c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007460:	d10b      	bne.n	800747a <__aeabi_ddiv+0x11e>
 8007462:	ea41 0100 	orr.w	r1, r1, r0
 8007466:	f04f 0000 	mov.w	r0, #0
 800746a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800746e:	e7b6      	b.n	80073de <__aeabi_ddiv+0x82>
 8007470:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007474:	bf04      	itt	eq
 8007476:	4301      	orreq	r1, r0
 8007478:	2000      	moveq	r0, #0
 800747a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800747e:	bf88      	it	hi
 8007480:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8007484:	f63f aeaf 	bhi.w	80071e6 <__aeabi_dmul+0xde>
 8007488:	ebb5 0c03 	subs.w	ip, r5, r3
 800748c:	bf04      	itt	eq
 800748e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8007492:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8007496:	f150 0000 	adcs.w	r0, r0, #0
 800749a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800749e:	bd70      	pop	{r4, r5, r6, pc}
 80074a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80074a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80074a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80074ac:	bfc2      	ittt	gt
 80074ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80074b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80074b6:	bd70      	popgt	{r4, r5, r6, pc}
 80074b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80074bc:	f04f 0e00 	mov.w	lr, #0
 80074c0:	3c01      	subs	r4, #1
 80074c2:	e690      	b.n	80071e6 <__aeabi_dmul+0xde>
 80074c4:	ea45 0e06 	orr.w	lr, r5, r6
 80074c8:	e68d      	b.n	80071e6 <__aeabi_dmul+0xde>
 80074ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80074ce:	ea94 0f0c 	teq	r4, ip
 80074d2:	bf08      	it	eq
 80074d4:	ea95 0f0c 	teqeq	r5, ip
 80074d8:	f43f af3b 	beq.w	8007352 <__aeabi_dmul+0x24a>
 80074dc:	ea94 0f0c 	teq	r4, ip
 80074e0:	d10a      	bne.n	80074f8 <__aeabi_ddiv+0x19c>
 80074e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80074e6:	f47f af34 	bne.w	8007352 <__aeabi_dmul+0x24a>
 80074ea:	ea95 0f0c 	teq	r5, ip
 80074ee:	f47f af25 	bne.w	800733c <__aeabi_dmul+0x234>
 80074f2:	4610      	mov	r0, r2
 80074f4:	4619      	mov	r1, r3
 80074f6:	e72c      	b.n	8007352 <__aeabi_dmul+0x24a>
 80074f8:	ea95 0f0c 	teq	r5, ip
 80074fc:	d106      	bne.n	800750c <__aeabi_ddiv+0x1b0>
 80074fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8007502:	f43f aefd 	beq.w	8007300 <__aeabi_dmul+0x1f8>
 8007506:	4610      	mov	r0, r2
 8007508:	4619      	mov	r1, r3
 800750a:	e722      	b.n	8007352 <__aeabi_dmul+0x24a>
 800750c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007510:	bf18      	it	ne
 8007512:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8007516:	f47f aec5 	bne.w	80072a4 <__aeabi_dmul+0x19c>
 800751a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800751e:	f47f af0d 	bne.w	800733c <__aeabi_dmul+0x234>
 8007522:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8007526:	f47f aeeb 	bne.w	8007300 <__aeabi_dmul+0x1f8>
 800752a:	e712      	b.n	8007352 <__aeabi_dmul+0x24a>

0800752c <__aeabi_d2iz>:
 800752c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8007530:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8007534:	d215      	bcs.n	8007562 <__aeabi_d2iz+0x36>
 8007536:	d511      	bpl.n	800755c <__aeabi_d2iz+0x30>
 8007538:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800753c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8007540:	d912      	bls.n	8007568 <__aeabi_d2iz+0x3c>
 8007542:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8007546:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800754a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800754e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8007552:	fa23 f002 	lsr.w	r0, r3, r2
 8007556:	bf18      	it	ne
 8007558:	4240      	negne	r0, r0
 800755a:	4770      	bx	lr
 800755c:	f04f 0000 	mov.w	r0, #0
 8007560:	4770      	bx	lr
 8007562:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8007566:	d105      	bne.n	8007574 <__aeabi_d2iz+0x48>
 8007568:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800756c:	bf08      	it	eq
 800756e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8007572:	4770      	bx	lr
 8007574:	f04f 0000 	mov.w	r0, #0
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop

0800757c <__aeabi_uldivmod>:
 800757c:	b953      	cbnz	r3, 8007594 <__aeabi_uldivmod+0x18>
 800757e:	b94a      	cbnz	r2, 8007594 <__aeabi_uldivmod+0x18>
 8007580:	2900      	cmp	r1, #0
 8007582:	bf08      	it	eq
 8007584:	2800      	cmpeq	r0, #0
 8007586:	bf1c      	itt	ne
 8007588:	f04f 31ff 	movne.w	r1, #4294967295
 800758c:	f04f 30ff 	movne.w	r0, #4294967295
 8007590:	f001 b8f8 	b.w	8008784 <__aeabi_idiv0>
 8007594:	f1ad 0c08 	sub.w	ip, sp, #8
 8007598:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800759c:	f000 f806 	bl	80075ac <__udivmoddi4>
 80075a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80075a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075a8:	b004      	add	sp, #16
 80075aa:	4770      	bx	lr

080075ac <__udivmoddi4>:
 80075ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075b0:	9e08      	ldr	r6, [sp, #32]
 80075b2:	4604      	mov	r4, r0
 80075b4:	4688      	mov	r8, r1
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d14b      	bne.n	8007652 <__udivmoddi4+0xa6>
 80075ba:	428a      	cmp	r2, r1
 80075bc:	4615      	mov	r5, r2
 80075be:	d967      	bls.n	8007690 <__udivmoddi4+0xe4>
 80075c0:	fab2 f282 	clz	r2, r2
 80075c4:	b14a      	cbz	r2, 80075da <__udivmoddi4+0x2e>
 80075c6:	f1c2 0720 	rsb	r7, r2, #32
 80075ca:	fa01 f302 	lsl.w	r3, r1, r2
 80075ce:	fa20 f707 	lsr.w	r7, r0, r7
 80075d2:	4095      	lsls	r5, r2
 80075d4:	ea47 0803 	orr.w	r8, r7, r3
 80075d8:	4094      	lsls	r4, r2
 80075da:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80075de:	0c23      	lsrs	r3, r4, #16
 80075e0:	fbb8 f7fe 	udiv	r7, r8, lr
 80075e4:	fa1f fc85 	uxth.w	ip, r5
 80075e8:	fb0e 8817 	mls	r8, lr, r7, r8
 80075ec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80075f0:	fb07 f10c 	mul.w	r1, r7, ip
 80075f4:	4299      	cmp	r1, r3
 80075f6:	d909      	bls.n	800760c <__udivmoddi4+0x60>
 80075f8:	18eb      	adds	r3, r5, r3
 80075fa:	f107 30ff 	add.w	r0, r7, #4294967295
 80075fe:	f080 811b 	bcs.w	8007838 <__udivmoddi4+0x28c>
 8007602:	4299      	cmp	r1, r3
 8007604:	f240 8118 	bls.w	8007838 <__udivmoddi4+0x28c>
 8007608:	3f02      	subs	r7, #2
 800760a:	442b      	add	r3, r5
 800760c:	1a5b      	subs	r3, r3, r1
 800760e:	b2a4      	uxth	r4, r4
 8007610:	fbb3 f0fe 	udiv	r0, r3, lr
 8007614:	fb0e 3310 	mls	r3, lr, r0, r3
 8007618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800761c:	fb00 fc0c 	mul.w	ip, r0, ip
 8007620:	45a4      	cmp	ip, r4
 8007622:	d909      	bls.n	8007638 <__udivmoddi4+0x8c>
 8007624:	192c      	adds	r4, r5, r4
 8007626:	f100 33ff 	add.w	r3, r0, #4294967295
 800762a:	f080 8107 	bcs.w	800783c <__udivmoddi4+0x290>
 800762e:	45a4      	cmp	ip, r4
 8007630:	f240 8104 	bls.w	800783c <__udivmoddi4+0x290>
 8007634:	3802      	subs	r0, #2
 8007636:	442c      	add	r4, r5
 8007638:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800763c:	eba4 040c 	sub.w	r4, r4, ip
 8007640:	2700      	movs	r7, #0
 8007642:	b11e      	cbz	r6, 800764c <__udivmoddi4+0xa0>
 8007644:	40d4      	lsrs	r4, r2
 8007646:	2300      	movs	r3, #0
 8007648:	e9c6 4300 	strd	r4, r3, [r6]
 800764c:	4639      	mov	r1, r7
 800764e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007652:	428b      	cmp	r3, r1
 8007654:	d909      	bls.n	800766a <__udivmoddi4+0xbe>
 8007656:	2e00      	cmp	r6, #0
 8007658:	f000 80eb 	beq.w	8007832 <__udivmoddi4+0x286>
 800765c:	2700      	movs	r7, #0
 800765e:	e9c6 0100 	strd	r0, r1, [r6]
 8007662:	4638      	mov	r0, r7
 8007664:	4639      	mov	r1, r7
 8007666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800766a:	fab3 f783 	clz	r7, r3
 800766e:	2f00      	cmp	r7, #0
 8007670:	d147      	bne.n	8007702 <__udivmoddi4+0x156>
 8007672:	428b      	cmp	r3, r1
 8007674:	d302      	bcc.n	800767c <__udivmoddi4+0xd0>
 8007676:	4282      	cmp	r2, r0
 8007678:	f200 80fa 	bhi.w	8007870 <__udivmoddi4+0x2c4>
 800767c:	1a84      	subs	r4, r0, r2
 800767e:	eb61 0303 	sbc.w	r3, r1, r3
 8007682:	2001      	movs	r0, #1
 8007684:	4698      	mov	r8, r3
 8007686:	2e00      	cmp	r6, #0
 8007688:	d0e0      	beq.n	800764c <__udivmoddi4+0xa0>
 800768a:	e9c6 4800 	strd	r4, r8, [r6]
 800768e:	e7dd      	b.n	800764c <__udivmoddi4+0xa0>
 8007690:	b902      	cbnz	r2, 8007694 <__udivmoddi4+0xe8>
 8007692:	deff      	udf	#255	; 0xff
 8007694:	fab2 f282 	clz	r2, r2
 8007698:	2a00      	cmp	r2, #0
 800769a:	f040 808f 	bne.w	80077bc <__udivmoddi4+0x210>
 800769e:	1b49      	subs	r1, r1, r5
 80076a0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80076a4:	fa1f f885 	uxth.w	r8, r5
 80076a8:	2701      	movs	r7, #1
 80076aa:	fbb1 fcfe 	udiv	ip, r1, lr
 80076ae:	0c23      	lsrs	r3, r4, #16
 80076b0:	fb0e 111c 	mls	r1, lr, ip, r1
 80076b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80076b8:	fb08 f10c 	mul.w	r1, r8, ip
 80076bc:	4299      	cmp	r1, r3
 80076be:	d907      	bls.n	80076d0 <__udivmoddi4+0x124>
 80076c0:	18eb      	adds	r3, r5, r3
 80076c2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80076c6:	d202      	bcs.n	80076ce <__udivmoddi4+0x122>
 80076c8:	4299      	cmp	r1, r3
 80076ca:	f200 80cd 	bhi.w	8007868 <__udivmoddi4+0x2bc>
 80076ce:	4684      	mov	ip, r0
 80076d0:	1a59      	subs	r1, r3, r1
 80076d2:	b2a3      	uxth	r3, r4
 80076d4:	fbb1 f0fe 	udiv	r0, r1, lr
 80076d8:	fb0e 1410 	mls	r4, lr, r0, r1
 80076dc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80076e0:	fb08 f800 	mul.w	r8, r8, r0
 80076e4:	45a0      	cmp	r8, r4
 80076e6:	d907      	bls.n	80076f8 <__udivmoddi4+0x14c>
 80076e8:	192c      	adds	r4, r5, r4
 80076ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80076ee:	d202      	bcs.n	80076f6 <__udivmoddi4+0x14a>
 80076f0:	45a0      	cmp	r8, r4
 80076f2:	f200 80b6 	bhi.w	8007862 <__udivmoddi4+0x2b6>
 80076f6:	4618      	mov	r0, r3
 80076f8:	eba4 0408 	sub.w	r4, r4, r8
 80076fc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8007700:	e79f      	b.n	8007642 <__udivmoddi4+0x96>
 8007702:	f1c7 0c20 	rsb	ip, r7, #32
 8007706:	40bb      	lsls	r3, r7
 8007708:	fa22 fe0c 	lsr.w	lr, r2, ip
 800770c:	ea4e 0e03 	orr.w	lr, lr, r3
 8007710:	fa01 f407 	lsl.w	r4, r1, r7
 8007714:	fa20 f50c 	lsr.w	r5, r0, ip
 8007718:	fa21 f30c 	lsr.w	r3, r1, ip
 800771c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8007720:	4325      	orrs	r5, r4
 8007722:	fbb3 f9f8 	udiv	r9, r3, r8
 8007726:	0c2c      	lsrs	r4, r5, #16
 8007728:	fb08 3319 	mls	r3, r8, r9, r3
 800772c:	fa1f fa8e 	uxth.w	sl, lr
 8007730:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8007734:	fb09 f40a 	mul.w	r4, r9, sl
 8007738:	429c      	cmp	r4, r3
 800773a:	fa02 f207 	lsl.w	r2, r2, r7
 800773e:	fa00 f107 	lsl.w	r1, r0, r7
 8007742:	d90b      	bls.n	800775c <__udivmoddi4+0x1b0>
 8007744:	eb1e 0303 	adds.w	r3, lr, r3
 8007748:	f109 30ff 	add.w	r0, r9, #4294967295
 800774c:	f080 8087 	bcs.w	800785e <__udivmoddi4+0x2b2>
 8007750:	429c      	cmp	r4, r3
 8007752:	f240 8084 	bls.w	800785e <__udivmoddi4+0x2b2>
 8007756:	f1a9 0902 	sub.w	r9, r9, #2
 800775a:	4473      	add	r3, lr
 800775c:	1b1b      	subs	r3, r3, r4
 800775e:	b2ad      	uxth	r5, r5
 8007760:	fbb3 f0f8 	udiv	r0, r3, r8
 8007764:	fb08 3310 	mls	r3, r8, r0, r3
 8007768:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800776c:	fb00 fa0a 	mul.w	sl, r0, sl
 8007770:	45a2      	cmp	sl, r4
 8007772:	d908      	bls.n	8007786 <__udivmoddi4+0x1da>
 8007774:	eb1e 0404 	adds.w	r4, lr, r4
 8007778:	f100 33ff 	add.w	r3, r0, #4294967295
 800777c:	d26b      	bcs.n	8007856 <__udivmoddi4+0x2aa>
 800777e:	45a2      	cmp	sl, r4
 8007780:	d969      	bls.n	8007856 <__udivmoddi4+0x2aa>
 8007782:	3802      	subs	r0, #2
 8007784:	4474      	add	r4, lr
 8007786:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800778a:	fba0 8902 	umull	r8, r9, r0, r2
 800778e:	eba4 040a 	sub.w	r4, r4, sl
 8007792:	454c      	cmp	r4, r9
 8007794:	46c2      	mov	sl, r8
 8007796:	464b      	mov	r3, r9
 8007798:	d354      	bcc.n	8007844 <__udivmoddi4+0x298>
 800779a:	d051      	beq.n	8007840 <__udivmoddi4+0x294>
 800779c:	2e00      	cmp	r6, #0
 800779e:	d069      	beq.n	8007874 <__udivmoddi4+0x2c8>
 80077a0:	ebb1 050a 	subs.w	r5, r1, sl
 80077a4:	eb64 0403 	sbc.w	r4, r4, r3
 80077a8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80077ac:	40fd      	lsrs	r5, r7
 80077ae:	40fc      	lsrs	r4, r7
 80077b0:	ea4c 0505 	orr.w	r5, ip, r5
 80077b4:	e9c6 5400 	strd	r5, r4, [r6]
 80077b8:	2700      	movs	r7, #0
 80077ba:	e747      	b.n	800764c <__udivmoddi4+0xa0>
 80077bc:	f1c2 0320 	rsb	r3, r2, #32
 80077c0:	fa20 f703 	lsr.w	r7, r0, r3
 80077c4:	4095      	lsls	r5, r2
 80077c6:	fa01 f002 	lsl.w	r0, r1, r2
 80077ca:	fa21 f303 	lsr.w	r3, r1, r3
 80077ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80077d2:	4338      	orrs	r0, r7
 80077d4:	0c01      	lsrs	r1, r0, #16
 80077d6:	fbb3 f7fe 	udiv	r7, r3, lr
 80077da:	fa1f f885 	uxth.w	r8, r5
 80077de:	fb0e 3317 	mls	r3, lr, r7, r3
 80077e2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80077e6:	fb07 f308 	mul.w	r3, r7, r8
 80077ea:	428b      	cmp	r3, r1
 80077ec:	fa04 f402 	lsl.w	r4, r4, r2
 80077f0:	d907      	bls.n	8007802 <__udivmoddi4+0x256>
 80077f2:	1869      	adds	r1, r5, r1
 80077f4:	f107 3cff 	add.w	ip, r7, #4294967295
 80077f8:	d22f      	bcs.n	800785a <__udivmoddi4+0x2ae>
 80077fa:	428b      	cmp	r3, r1
 80077fc:	d92d      	bls.n	800785a <__udivmoddi4+0x2ae>
 80077fe:	3f02      	subs	r7, #2
 8007800:	4429      	add	r1, r5
 8007802:	1acb      	subs	r3, r1, r3
 8007804:	b281      	uxth	r1, r0
 8007806:	fbb3 f0fe 	udiv	r0, r3, lr
 800780a:	fb0e 3310 	mls	r3, lr, r0, r3
 800780e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007812:	fb00 f308 	mul.w	r3, r0, r8
 8007816:	428b      	cmp	r3, r1
 8007818:	d907      	bls.n	800782a <__udivmoddi4+0x27e>
 800781a:	1869      	adds	r1, r5, r1
 800781c:	f100 3cff 	add.w	ip, r0, #4294967295
 8007820:	d217      	bcs.n	8007852 <__udivmoddi4+0x2a6>
 8007822:	428b      	cmp	r3, r1
 8007824:	d915      	bls.n	8007852 <__udivmoddi4+0x2a6>
 8007826:	3802      	subs	r0, #2
 8007828:	4429      	add	r1, r5
 800782a:	1ac9      	subs	r1, r1, r3
 800782c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8007830:	e73b      	b.n	80076aa <__udivmoddi4+0xfe>
 8007832:	4637      	mov	r7, r6
 8007834:	4630      	mov	r0, r6
 8007836:	e709      	b.n	800764c <__udivmoddi4+0xa0>
 8007838:	4607      	mov	r7, r0
 800783a:	e6e7      	b.n	800760c <__udivmoddi4+0x60>
 800783c:	4618      	mov	r0, r3
 800783e:	e6fb      	b.n	8007638 <__udivmoddi4+0x8c>
 8007840:	4541      	cmp	r1, r8
 8007842:	d2ab      	bcs.n	800779c <__udivmoddi4+0x1f0>
 8007844:	ebb8 0a02 	subs.w	sl, r8, r2
 8007848:	eb69 020e 	sbc.w	r2, r9, lr
 800784c:	3801      	subs	r0, #1
 800784e:	4613      	mov	r3, r2
 8007850:	e7a4      	b.n	800779c <__udivmoddi4+0x1f0>
 8007852:	4660      	mov	r0, ip
 8007854:	e7e9      	b.n	800782a <__udivmoddi4+0x27e>
 8007856:	4618      	mov	r0, r3
 8007858:	e795      	b.n	8007786 <__udivmoddi4+0x1da>
 800785a:	4667      	mov	r7, ip
 800785c:	e7d1      	b.n	8007802 <__udivmoddi4+0x256>
 800785e:	4681      	mov	r9, r0
 8007860:	e77c      	b.n	800775c <__udivmoddi4+0x1b0>
 8007862:	3802      	subs	r0, #2
 8007864:	442c      	add	r4, r5
 8007866:	e747      	b.n	80076f8 <__udivmoddi4+0x14c>
 8007868:	f1ac 0c02 	sub.w	ip, ip, #2
 800786c:	442b      	add	r3, r5
 800786e:	e72f      	b.n	80076d0 <__udivmoddi4+0x124>
 8007870:	4638      	mov	r0, r7
 8007872:	e708      	b.n	8007686 <__udivmoddi4+0xda>
 8007874:	4637      	mov	r7, r6
 8007876:	e6e9      	b.n	800764c <__udivmoddi4+0xa0>

08007878 <selfrel_offset31>:
 8007878:	6803      	ldr	r3, [r0, #0]
 800787a:	005a      	lsls	r2, r3, #1
 800787c:	bf4c      	ite	mi
 800787e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8007882:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8007886:	4418      	add	r0, r3
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop

0800788c <search_EIT_table>:
 800788c:	b361      	cbz	r1, 80078e8 <search_EIT_table+0x5c>
 800788e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007892:	f101 3aff 	add.w	sl, r1, #4294967295
 8007896:	4690      	mov	r8, r2
 8007898:	4606      	mov	r6, r0
 800789a:	46d1      	mov	r9, sl
 800789c:	2700      	movs	r7, #0
 800789e:	eb07 0409 	add.w	r4, r7, r9
 80078a2:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 80078a6:	1064      	asrs	r4, r4, #1
 80078a8:	00e5      	lsls	r5, r4, #3
 80078aa:	1971      	adds	r1, r6, r5
 80078ac:	4608      	mov	r0, r1
 80078ae:	f7ff ffe3 	bl	8007878 <selfrel_offset31>
 80078b2:	45a2      	cmp	sl, r4
 80078b4:	4683      	mov	fp, r0
 80078b6:	f105 0008 	add.w	r0, r5, #8
 80078ba:	4430      	add	r0, r6
 80078bc:	d009      	beq.n	80078d2 <search_EIT_table+0x46>
 80078be:	f7ff ffdb 	bl	8007878 <selfrel_offset31>
 80078c2:	45c3      	cmp	fp, r8
 80078c4:	f100 30ff 	add.w	r0, r0, #4294967295
 80078c8:	d805      	bhi.n	80078d6 <search_EIT_table+0x4a>
 80078ca:	4540      	cmp	r0, r8
 80078cc:	d209      	bcs.n	80078e2 <search_EIT_table+0x56>
 80078ce:	1c67      	adds	r7, r4, #1
 80078d0:	e7e5      	b.n	800789e <search_EIT_table+0x12>
 80078d2:	45c3      	cmp	fp, r8
 80078d4:	d905      	bls.n	80078e2 <search_EIT_table+0x56>
 80078d6:	42a7      	cmp	r7, r4
 80078d8:	d002      	beq.n	80078e0 <search_EIT_table+0x54>
 80078da:	f104 39ff 	add.w	r9, r4, #4294967295
 80078de:	e7de      	b.n	800789e <search_EIT_table+0x12>
 80078e0:	2100      	movs	r1, #0
 80078e2:	4608      	mov	r0, r1
 80078e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078e8:	4608      	mov	r0, r1
 80078ea:	4770      	bx	lr

080078ec <__gnu_unwind_get_pr_addr>:
 80078ec:	2801      	cmp	r0, #1
 80078ee:	d007      	beq.n	8007900 <__gnu_unwind_get_pr_addr+0x14>
 80078f0:	2802      	cmp	r0, #2
 80078f2:	d007      	beq.n	8007904 <__gnu_unwind_get_pr_addr+0x18>
 80078f4:	4b04      	ldr	r3, [pc, #16]	; (8007908 <__gnu_unwind_get_pr_addr+0x1c>)
 80078f6:	2800      	cmp	r0, #0
 80078f8:	bf0c      	ite	eq
 80078fa:	4618      	moveq	r0, r3
 80078fc:	2000      	movne	r0, #0
 80078fe:	4770      	bx	lr
 8007900:	4802      	ldr	r0, [pc, #8]	; (800790c <__gnu_unwind_get_pr_addr+0x20>)
 8007902:	4770      	bx	lr
 8007904:	4802      	ldr	r0, [pc, #8]	; (8007910 <__gnu_unwind_get_pr_addr+0x24>)
 8007906:	4770      	bx	lr
 8007908:	08007fd9 	.word	0x08007fd9
 800790c:	08007fdd 	.word	0x08007fdd
 8007910:	08007fe1 	.word	0x08007fe1

08007914 <get_eit_entry>:
 8007914:	b530      	push	{r4, r5, lr}
 8007916:	4b25      	ldr	r3, [pc, #148]	; (80079ac <get_eit_entry+0x98>)
 8007918:	b083      	sub	sp, #12
 800791a:	4604      	mov	r4, r0
 800791c:	1e8d      	subs	r5, r1, #2
 800791e:	b34b      	cbz	r3, 8007974 <get_eit_entry+0x60>
 8007920:	a901      	add	r1, sp, #4
 8007922:	4628      	mov	r0, r5
 8007924:	f3af 8000 	nop.w
 8007928:	b1f0      	cbz	r0, 8007968 <get_eit_entry+0x54>
 800792a:	9901      	ldr	r1, [sp, #4]
 800792c:	462a      	mov	r2, r5
 800792e:	f7ff ffad 	bl	800788c <search_EIT_table>
 8007932:	4601      	mov	r1, r0
 8007934:	b1c0      	cbz	r0, 8007968 <get_eit_entry+0x54>
 8007936:	f7ff ff9f 	bl	8007878 <selfrel_offset31>
 800793a:	684b      	ldr	r3, [r1, #4]
 800793c:	64a0      	str	r0, [r4, #72]	; 0x48
 800793e:	2b01      	cmp	r3, #1
 8007940:	d02e      	beq.n	80079a0 <get_eit_entry+0x8c>
 8007942:	2b00      	cmp	r3, #0
 8007944:	f101 0004 	add.w	r0, r1, #4
 8007948:	db26      	blt.n	8007998 <get_eit_entry+0x84>
 800794a:	f7ff ff95 	bl	8007878 <selfrel_offset31>
 800794e:	2300      	movs	r3, #0
 8007950:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8007954:	6803      	ldr	r3, [r0, #0]
 8007956:	2b00      	cmp	r3, #0
 8007958:	db12      	blt.n	8007980 <get_eit_entry+0x6c>
 800795a:	f7ff ff8d 	bl	8007878 <selfrel_offset31>
 800795e:	2300      	movs	r3, #0
 8007960:	6120      	str	r0, [r4, #16]
 8007962:	4618      	mov	r0, r3
 8007964:	b003      	add	sp, #12
 8007966:	bd30      	pop	{r4, r5, pc}
 8007968:	2300      	movs	r3, #0
 800796a:	6123      	str	r3, [r4, #16]
 800796c:	2309      	movs	r3, #9
 800796e:	4618      	mov	r0, r3
 8007970:	b003      	add	sp, #12
 8007972:	bd30      	pop	{r4, r5, pc}
 8007974:	490e      	ldr	r1, [pc, #56]	; (80079b0 <get_eit_entry+0x9c>)
 8007976:	480f      	ldr	r0, [pc, #60]	; (80079b4 <get_eit_entry+0xa0>)
 8007978:	1a09      	subs	r1, r1, r0
 800797a:	10c9      	asrs	r1, r1, #3
 800797c:	9101      	str	r1, [sp, #4]
 800797e:	e7d5      	b.n	800792c <get_eit_entry+0x18>
 8007980:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8007984:	f7ff ffb2 	bl	80078ec <__gnu_unwind_get_pr_addr>
 8007988:	2800      	cmp	r0, #0
 800798a:	bf14      	ite	ne
 800798c:	2300      	movne	r3, #0
 800798e:	2309      	moveq	r3, #9
 8007990:	6120      	str	r0, [r4, #16]
 8007992:	4618      	mov	r0, r3
 8007994:	b003      	add	sp, #12
 8007996:	bd30      	pop	{r4, r5, pc}
 8007998:	2301      	movs	r3, #1
 800799a:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 800799e:	e7d9      	b.n	8007954 <get_eit_entry+0x40>
 80079a0:	2300      	movs	r3, #0
 80079a2:	6123      	str	r3, [r4, #16]
 80079a4:	2305      	movs	r3, #5
 80079a6:	4618      	mov	r0, r3
 80079a8:	b003      	add	sp, #12
 80079aa:	bd30      	pop	{r4, r5, pc}
 80079ac:	00000000 	.word	0x00000000
 80079b0:	0807b3ac 	.word	0x0807b3ac
 80079b4:	0807b20c 	.word	0x0807b20c

080079b8 <restore_non_core_regs>:
 80079b8:	6803      	ldr	r3, [r0, #0]
 80079ba:	07da      	lsls	r2, r3, #31
 80079bc:	b510      	push	{r4, lr}
 80079be:	4604      	mov	r4, r0
 80079c0:	d406      	bmi.n	80079d0 <restore_non_core_regs+0x18>
 80079c2:	079b      	lsls	r3, r3, #30
 80079c4:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80079c8:	d509      	bpl.n	80079de <restore_non_core_regs+0x26>
 80079ca:	f000 fc5f 	bl	800828c <__gnu_Unwind_Restore_VFP_D>
 80079ce:	6823      	ldr	r3, [r4, #0]
 80079d0:	0759      	lsls	r1, r3, #29
 80079d2:	d509      	bpl.n	80079e8 <restore_non_core_regs+0x30>
 80079d4:	071a      	lsls	r2, r3, #28
 80079d6:	d50e      	bpl.n	80079f6 <restore_non_core_regs+0x3e>
 80079d8:	06db      	lsls	r3, r3, #27
 80079da:	d513      	bpl.n	8007a04 <restore_non_core_regs+0x4c>
 80079dc:	bd10      	pop	{r4, pc}
 80079de:	f000 fc4d 	bl	800827c <__gnu_Unwind_Restore_VFP>
 80079e2:	6823      	ldr	r3, [r4, #0]
 80079e4:	0759      	lsls	r1, r3, #29
 80079e6:	d4f5      	bmi.n	80079d4 <restore_non_core_regs+0x1c>
 80079e8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80079ec:	f000 fc56 	bl	800829c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80079f0:	6823      	ldr	r3, [r4, #0]
 80079f2:	071a      	lsls	r2, r3, #28
 80079f4:	d4f0      	bmi.n	80079d8 <restore_non_core_regs+0x20>
 80079f6:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80079fa:	f000 fc57 	bl	80082ac <__gnu_Unwind_Restore_WMMXD>
 80079fe:	6823      	ldr	r3, [r4, #0]
 8007a00:	06db      	lsls	r3, r3, #27
 8007a02:	d4eb      	bmi.n	80079dc <restore_non_core_regs+0x24>
 8007a04:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8007a08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a0c:	f000 bc92 	b.w	8008334 <__gnu_Unwind_Restore_WMMXC>

08007a10 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8007a10:	6803      	ldr	r3, [r0, #0]
 8007a12:	b103      	cbz	r3, 8007a16 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8007a14:	4403      	add	r3, r0
 8007a16:	4618      	mov	r0, r3
 8007a18:	4770      	bx	lr
 8007a1a:	bf00      	nop

08007a1c <__gnu_unwind_24bit.isra.1>:
 8007a1c:	2009      	movs	r0, #9
 8007a1e:	4770      	bx	lr

08007a20 <_Unwind_DebugHook>:
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop

08007a24 <unwind_phase2>:
 8007a24:	b570      	push	{r4, r5, r6, lr}
 8007a26:	4604      	mov	r4, r0
 8007a28:	460d      	mov	r5, r1
 8007a2a:	e008      	b.n	8007a3e <unwind_phase2+0x1a>
 8007a2c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8007a2e:	6163      	str	r3, [r4, #20]
 8007a30:	462a      	mov	r2, r5
 8007a32:	6923      	ldr	r3, [r4, #16]
 8007a34:	4621      	mov	r1, r4
 8007a36:	2001      	movs	r0, #1
 8007a38:	4798      	blx	r3
 8007a3a:	2808      	cmp	r0, #8
 8007a3c:	d108      	bne.n	8007a50 <unwind_phase2+0x2c>
 8007a3e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8007a40:	4620      	mov	r0, r4
 8007a42:	f7ff ff67 	bl	8007914 <get_eit_entry>
 8007a46:	4606      	mov	r6, r0
 8007a48:	2800      	cmp	r0, #0
 8007a4a:	d0ef      	beq.n	8007a2c <unwind_phase2+0x8>
 8007a4c:	f026 fc04 	bl	802e258 <abort>
 8007a50:	2807      	cmp	r0, #7
 8007a52:	d1fb      	bne.n	8007a4c <unwind_phase2+0x28>
 8007a54:	4630      	mov	r0, r6
 8007a56:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8007a58:	f7ff ffe2 	bl	8007a20 <_Unwind_DebugHook>
 8007a5c:	1d28      	adds	r0, r5, #4
 8007a5e:	f000 fc01 	bl	8008264 <__restore_core_regs>
 8007a62:	bf00      	nop

08007a64 <unwind_phase2_forced>:
 8007a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a68:	1d0c      	adds	r4, r1, #4
 8007a6a:	4605      	mov	r5, r0
 8007a6c:	4617      	mov	r7, r2
 8007a6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007a70:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8007a74:	ae03      	add	r6, sp, #12
 8007a76:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007a78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007a7a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007a7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007a7e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007a80:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007a84:	ac02      	add	r4, sp, #8
 8007a86:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8007a8a:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8007a8e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8007a92:	2300      	movs	r3, #0
 8007a94:	6023      	str	r3, [r4, #0]
 8007a96:	e021      	b.n	8007adc <unwind_phase2_forced+0x78>
 8007a98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a9a:	616b      	str	r3, [r5, #20]
 8007a9c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007aa0:	4621      	mov	r1, r4
 8007aa2:	a87a      	add	r0, sp, #488	; 0x1e8
 8007aa4:	f026 fd45 	bl	802e532 <memcpy>
 8007aa8:	692b      	ldr	r3, [r5, #16]
 8007aaa:	aa7a      	add	r2, sp, #488	; 0x1e8
 8007aac:	4629      	mov	r1, r5
 8007aae:	4630      	mov	r0, r6
 8007ab0:	4798      	blx	r3
 8007ab2:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8007ab4:	e9cd 4900 	strd	r4, r9, [sp]
 8007ab8:	4682      	mov	sl, r0
 8007aba:	6463      	str	r3, [r4, #68]	; 0x44
 8007abc:	4631      	mov	r1, r6
 8007abe:	462b      	mov	r3, r5
 8007ac0:	462a      	mov	r2, r5
 8007ac2:	2001      	movs	r0, #1
 8007ac4:	47c0      	blx	r8
 8007ac6:	4607      	mov	r7, r0
 8007ac8:	b9f8      	cbnz	r0, 8007b0a <unwind_phase2_forced+0xa6>
 8007aca:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007ace:	a97a      	add	r1, sp, #488	; 0x1e8
 8007ad0:	4620      	mov	r0, r4
 8007ad2:	f026 fd2e 	bl	802e532 <memcpy>
 8007ad6:	f1ba 0f08 	cmp.w	sl, #8
 8007ada:	d11c      	bne.n	8007b16 <unwind_phase2_forced+0xb2>
 8007adc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007ade:	4628      	mov	r0, r5
 8007ae0:	f7ff ff18 	bl	8007914 <get_eit_entry>
 8007ae4:	2f00      	cmp	r7, #0
 8007ae6:	bf08      	it	eq
 8007ae8:	2609      	moveq	r6, #9
 8007aea:	4607      	mov	r7, r0
 8007aec:	bf18      	it	ne
 8007aee:	260a      	movne	r6, #10
 8007af0:	2800      	cmp	r0, #0
 8007af2:	d0d1      	beq.n	8007a98 <unwind_phase2_forced+0x34>
 8007af4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007af6:	f046 0110 	orr.w	r1, r6, #16
 8007afa:	e9cd 4900 	strd	r4, r9, [sp]
 8007afe:	462a      	mov	r2, r5
 8007b00:	6463      	str	r3, [r4, #68]	; 0x44
 8007b02:	2001      	movs	r0, #1
 8007b04:	462b      	mov	r3, r5
 8007b06:	47c0      	blx	r8
 8007b08:	b100      	cbz	r0, 8007b0c <unwind_phase2_forced+0xa8>
 8007b0a:	2709      	movs	r7, #9
 8007b0c:	4638      	mov	r0, r7
 8007b0e:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8007b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b16:	f1ba 0f07 	cmp.w	sl, #7
 8007b1a:	d1f6      	bne.n	8007b0a <unwind_phase2_forced+0xa6>
 8007b1c:	4638      	mov	r0, r7
 8007b1e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007b20:	f7ff ff7e 	bl	8007a20 <_Unwind_DebugHook>
 8007b24:	a803      	add	r0, sp, #12
 8007b26:	f000 fb9d 	bl	8008264 <__restore_core_regs>
 8007b2a:	bf00      	nop

08007b2c <_Unwind_GetCFA>:
 8007b2c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8007b2e:	4770      	bx	lr

08007b30 <__gnu_Unwind_RaiseException>:
 8007b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b32:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8007b34:	640b      	str	r3, [r1, #64]	; 0x40
 8007b36:	1d0d      	adds	r5, r1, #4
 8007b38:	460f      	mov	r7, r1
 8007b3a:	4606      	mov	r6, r0
 8007b3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b3e:	b0f9      	sub	sp, #484	; 0x1e4
 8007b40:	ac01      	add	r4, sp, #4
 8007b42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b4c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007b50:	f04f 35ff 	mov.w	r5, #4294967295
 8007b54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007b58:	9500      	str	r5, [sp, #0]
 8007b5a:	e006      	b.n	8007b6a <__gnu_Unwind_RaiseException+0x3a>
 8007b5c:	6933      	ldr	r3, [r6, #16]
 8007b5e:	466a      	mov	r2, sp
 8007b60:	4631      	mov	r1, r6
 8007b62:	4798      	blx	r3
 8007b64:	2808      	cmp	r0, #8
 8007b66:	4604      	mov	r4, r0
 8007b68:	d108      	bne.n	8007b7c <__gnu_Unwind_RaiseException+0x4c>
 8007b6a:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007b6c:	4630      	mov	r0, r6
 8007b6e:	f7ff fed1 	bl	8007914 <get_eit_entry>
 8007b72:	2800      	cmp	r0, #0
 8007b74:	d0f2      	beq.n	8007b5c <__gnu_Unwind_RaiseException+0x2c>
 8007b76:	2009      	movs	r0, #9
 8007b78:	b079      	add	sp, #484	; 0x1e4
 8007b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b7c:	4668      	mov	r0, sp
 8007b7e:	f7ff ff1b 	bl	80079b8 <restore_non_core_regs>
 8007b82:	2c06      	cmp	r4, #6
 8007b84:	d1f7      	bne.n	8007b76 <__gnu_Unwind_RaiseException+0x46>
 8007b86:	4639      	mov	r1, r7
 8007b88:	4630      	mov	r0, r6
 8007b8a:	f7ff ff4b 	bl	8007a24 <unwind_phase2>
 8007b8e:	bf00      	nop

08007b90 <__gnu_Unwind_ForcedUnwind>:
 8007b90:	b430      	push	{r4, r5}
 8007b92:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8007b94:	60c1      	str	r1, [r0, #12]
 8007b96:	6182      	str	r2, [r0, #24]
 8007b98:	4619      	mov	r1, r3
 8007b9a:	641d      	str	r5, [r3, #64]	; 0x40
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	bc30      	pop	{r4, r5}
 8007ba0:	e760      	b.n	8007a64 <unwind_phase2_forced>
 8007ba2:	bf00      	nop

08007ba4 <__gnu_Unwind_Resume>:
 8007ba4:	b570      	push	{r4, r5, r6, lr}
 8007ba6:	68c6      	ldr	r6, [r0, #12]
 8007ba8:	6943      	ldr	r3, [r0, #20]
 8007baa:	640b      	str	r3, [r1, #64]	; 0x40
 8007bac:	b9be      	cbnz	r6, 8007bde <__gnu_Unwind_Resume+0x3a>
 8007bae:	6903      	ldr	r3, [r0, #16]
 8007bb0:	460a      	mov	r2, r1
 8007bb2:	4604      	mov	r4, r0
 8007bb4:	460d      	mov	r5, r1
 8007bb6:	4601      	mov	r1, r0
 8007bb8:	2002      	movs	r0, #2
 8007bba:	4798      	blx	r3
 8007bbc:	2807      	cmp	r0, #7
 8007bbe:	d007      	beq.n	8007bd0 <__gnu_Unwind_Resume+0x2c>
 8007bc0:	2808      	cmp	r0, #8
 8007bc2:	d103      	bne.n	8007bcc <__gnu_Unwind_Resume+0x28>
 8007bc4:	4629      	mov	r1, r5
 8007bc6:	4620      	mov	r0, r4
 8007bc8:	f7ff ff2c 	bl	8007a24 <unwind_phase2>
 8007bcc:	f026 fb44 	bl	802e258 <abort>
 8007bd0:	4630      	mov	r0, r6
 8007bd2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8007bd4:	f7ff ff24 	bl	8007a20 <_Unwind_DebugHook>
 8007bd8:	1d28      	adds	r0, r5, #4
 8007bda:	f000 fb43 	bl	8008264 <__restore_core_regs>
 8007bde:	2201      	movs	r2, #1
 8007be0:	f7ff ff40 	bl	8007a64 <unwind_phase2_forced>
 8007be4:	f026 fb38 	bl	802e258 <abort>

08007be8 <__gnu_Unwind_Resume_or_Rethrow>:
 8007be8:	68c2      	ldr	r2, [r0, #12]
 8007bea:	b11a      	cbz	r2, 8007bf4 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8007bec:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8007bee:	640a      	str	r2, [r1, #64]	; 0x40
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	e737      	b.n	8007a64 <unwind_phase2_forced>
 8007bf4:	e79c      	b.n	8007b30 <__gnu_Unwind_RaiseException>
 8007bf6:	bf00      	nop

08007bf8 <_Unwind_Complete>:
 8007bf8:	4770      	bx	lr
 8007bfa:	bf00      	nop

08007bfc <_Unwind_DeleteException>:
 8007bfc:	6883      	ldr	r3, [r0, #8]
 8007bfe:	b113      	cbz	r3, 8007c06 <_Unwind_DeleteException+0xa>
 8007c00:	4601      	mov	r1, r0
 8007c02:	2001      	movs	r0, #1
 8007c04:	4718      	bx	r3
 8007c06:	4770      	bx	lr

08007c08 <_Unwind_VRS_Get>:
 8007c08:	2904      	cmp	r1, #4
 8007c0a:	d807      	bhi.n	8007c1c <_Unwind_VRS_Get+0x14>
 8007c0c:	e8df f001 	tbb	[pc, r1]
 8007c10:	08060803 	.word	0x08060803
 8007c14:	08          	.byte	0x08
 8007c15:	00          	.byte	0x00
 8007c16:	b90b      	cbnz	r3, 8007c1c <_Unwind_VRS_Get+0x14>
 8007c18:	2a0f      	cmp	r2, #15
 8007c1a:	d903      	bls.n	8007c24 <_Unwind_VRS_Get+0x1c>
 8007c1c:	2002      	movs	r0, #2
 8007c1e:	4770      	bx	lr
 8007c20:	2001      	movs	r0, #1
 8007c22:	4770      	bx	lr
 8007c24:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007c28:	4618      	mov	r0, r3
 8007c2a:	6853      	ldr	r3, [r2, #4]
 8007c2c:	9a00      	ldr	r2, [sp, #0]
 8007c2e:	6013      	str	r3, [r2, #0]
 8007c30:	4770      	bx	lr
 8007c32:	bf00      	nop

08007c34 <_Unwind_GetGR>:
 8007c34:	b510      	push	{r4, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	2300      	movs	r3, #0
 8007c3a:	ac03      	add	r4, sp, #12
 8007c3c:	460a      	mov	r2, r1
 8007c3e:	9400      	str	r4, [sp, #0]
 8007c40:	4619      	mov	r1, r3
 8007c42:	f7ff ffe1 	bl	8007c08 <_Unwind_VRS_Get>
 8007c46:	9803      	ldr	r0, [sp, #12]
 8007c48:	b004      	add	sp, #16
 8007c4a:	bd10      	pop	{r4, pc}

08007c4c <_Unwind_VRS_Set>:
 8007c4c:	2904      	cmp	r1, #4
 8007c4e:	d807      	bhi.n	8007c60 <_Unwind_VRS_Set+0x14>
 8007c50:	e8df f001 	tbb	[pc, r1]
 8007c54:	08060803 	.word	0x08060803
 8007c58:	08          	.byte	0x08
 8007c59:	00          	.byte	0x00
 8007c5a:	b90b      	cbnz	r3, 8007c60 <_Unwind_VRS_Set+0x14>
 8007c5c:	2a0f      	cmp	r2, #15
 8007c5e:	d903      	bls.n	8007c68 <_Unwind_VRS_Set+0x1c>
 8007c60:	2002      	movs	r0, #2
 8007c62:	4770      	bx	lr
 8007c64:	2001      	movs	r0, #1
 8007c66:	4770      	bx	lr
 8007c68:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8007c6c:	9a00      	ldr	r2, [sp, #0]
 8007c6e:	6812      	ldr	r2, [r2, #0]
 8007c70:	6042      	str	r2, [r0, #4]
 8007c72:	4618      	mov	r0, r3
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop

08007c78 <_Unwind_SetGR>:
 8007c78:	b510      	push	{r4, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	ac04      	add	r4, sp, #16
 8007c7e:	2300      	movs	r3, #0
 8007c80:	f844 2d04 	str.w	r2, [r4, #-4]!
 8007c84:	460a      	mov	r2, r1
 8007c86:	9400      	str	r4, [sp, #0]
 8007c88:	4619      	mov	r1, r3
 8007c8a:	f7ff ffdf 	bl	8007c4c <_Unwind_VRS_Set>
 8007c8e:	b004      	add	sp, #16
 8007c90:	bd10      	pop	{r4, pc}
 8007c92:	bf00      	nop

08007c94 <__gnu_Unwind_Backtrace>:
 8007c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c96:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8007c98:	6413      	str	r3, [r2, #64]	; 0x40
 8007c9a:	1d15      	adds	r5, r2, #4
 8007c9c:	4607      	mov	r7, r0
 8007c9e:	460e      	mov	r6, r1
 8007ca0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ca2:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8007ca6:	ac17      	add	r4, sp, #92	; 0x5c
 8007ca8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007caa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007cac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007cae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007cb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007cb2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007cb6:	f04f 35ff 	mov.w	r5, #4294967295
 8007cba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007cbe:	9516      	str	r5, [sp, #88]	; 0x58
 8007cc0:	e010      	b.n	8007ce4 <__gnu_Unwind_Backtrace+0x50>
 8007cc2:	a816      	add	r0, sp, #88	; 0x58
 8007cc4:	f7ff ffd8 	bl	8007c78 <_Unwind_SetGR>
 8007cc8:	4631      	mov	r1, r6
 8007cca:	a816      	add	r0, sp, #88	; 0x58
 8007ccc:	47b8      	blx	r7
 8007cce:	aa16      	add	r2, sp, #88	; 0x58
 8007cd0:	4669      	mov	r1, sp
 8007cd2:	b978      	cbnz	r0, 8007cf4 <__gnu_Unwind_Backtrace+0x60>
 8007cd4:	9b04      	ldr	r3, [sp, #16]
 8007cd6:	2008      	movs	r0, #8
 8007cd8:	4798      	blx	r3
 8007cda:	2805      	cmp	r0, #5
 8007cdc:	4604      	mov	r4, r0
 8007cde:	d00a      	beq.n	8007cf6 <__gnu_Unwind_Backtrace+0x62>
 8007ce0:	2809      	cmp	r0, #9
 8007ce2:	d007      	beq.n	8007cf4 <__gnu_Unwind_Backtrace+0x60>
 8007ce4:	9926      	ldr	r1, [sp, #152]	; 0x98
 8007ce6:	4668      	mov	r0, sp
 8007ce8:	f7ff fe14 	bl	8007914 <get_eit_entry>
 8007cec:	466a      	mov	r2, sp
 8007cee:	210c      	movs	r1, #12
 8007cf0:	2800      	cmp	r0, #0
 8007cf2:	d0e6      	beq.n	8007cc2 <__gnu_Unwind_Backtrace+0x2e>
 8007cf4:	2409      	movs	r4, #9
 8007cf6:	a816      	add	r0, sp, #88	; 0x58
 8007cf8:	f7ff fe5e 	bl	80079b8 <restore_non_core_regs>
 8007cfc:	4620      	mov	r0, r4
 8007cfe:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8007d02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007d04 <__gnu_unwind_pr_common>:
 8007d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d08:	460d      	mov	r5, r1
 8007d0a:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007d0c:	b089      	sub	sp, #36	; 0x24
 8007d0e:	1d0c      	adds	r4, r1, #4
 8007d10:	4616      	mov	r6, r2
 8007d12:	f000 0b03 	and.w	fp, r0, #3
 8007d16:	680a      	ldr	r2, [r1, #0]
 8007d18:	9406      	str	r4, [sp, #24]
 8007d1a:	461f      	mov	r7, r3
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d068      	beq.n	8007df2 <__gnu_unwind_pr_common+0xee>
 8007d20:	0c13      	lsrs	r3, r2, #16
 8007d22:	b2d9      	uxtb	r1, r3
 8007d24:	0412      	lsls	r2, r2, #16
 8007d26:	f88d 301d 	strb.w	r3, [sp, #29]
 8007d2a:	2302      	movs	r3, #2
 8007d2c:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8007d30:	9205      	str	r2, [sp, #20]
 8007d32:	f88d 301c 	strb.w	r3, [sp, #28]
 8007d36:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8007d38:	f1bb 0f02 	cmp.w	fp, #2
 8007d3c:	bf08      	it	eq
 8007d3e:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8007d40:	f013 0301 	ands.w	r3, r3, #1
 8007d44:	d146      	bne.n	8007dd4 <__gnu_unwind_pr_common+0xd0>
 8007d46:	9301      	str	r3, [sp, #4]
 8007d48:	f000 0308 	and.w	r3, r0, #8
 8007d4c:	9300      	str	r3, [sp, #0]
 8007d4e:	f8d4 9000 	ldr.w	r9, [r4]
 8007d52:	f1b9 0f00 	cmp.w	r9, #0
 8007d56:	f000 80f3 	beq.w	8007f40 <__gnu_unwind_pr_common+0x23c>
 8007d5a:	2f02      	cmp	r7, #2
 8007d5c:	d045      	beq.n	8007dea <__gnu_unwind_pr_common+0xe6>
 8007d5e:	f8b4 9000 	ldrh.w	r9, [r4]
 8007d62:	f8b4 8002 	ldrh.w	r8, [r4, #2]
 8007d66:	3404      	adds	r4, #4
 8007d68:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8007d6a:	f028 0a01 	bic.w	sl, r8, #1
 8007d6e:	210f      	movs	r1, #15
 8007d70:	4630      	mov	r0, r6
 8007d72:	449a      	add	sl, r3
 8007d74:	f7ff ff5e 	bl	8007c34 <_Unwind_GetGR>
 8007d78:	4582      	cmp	sl, r0
 8007d7a:	d834      	bhi.n	8007de6 <__gnu_unwind_pr_common+0xe2>
 8007d7c:	f029 0301 	bic.w	r3, r9, #1
 8007d80:	4453      	add	r3, sl
 8007d82:	4283      	cmp	r3, r0
 8007d84:	bf94      	ite	ls
 8007d86:	2000      	movls	r0, #0
 8007d88:	2001      	movhi	r0, #1
 8007d8a:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8007d8e:	f008 0802 	and.w	r8, r8, #2
 8007d92:	f009 0901 	and.w	r9, r9, #1
 8007d96:	ea48 0809 	orr.w	r8, r8, r9
 8007d9a:	f1b8 0f01 	cmp.w	r8, #1
 8007d9e:	d03a      	beq.n	8007e16 <__gnu_unwind_pr_common+0x112>
 8007da0:	d331      	bcc.n	8007e06 <__gnu_unwind_pr_common+0x102>
 8007da2:	f1b8 0f02 	cmp.w	r8, #2
 8007da6:	d11a      	bne.n	8007dde <__gnu_unwind_pr_common+0xda>
 8007da8:	6823      	ldr	r3, [r4, #0]
 8007daa:	f023 4a00 	bic.w	sl, r3, #2147483648	; 0x80000000
 8007dae:	f1bb 0f00 	cmp.w	fp, #0
 8007db2:	d166      	bne.n	8007e82 <__gnu_unwind_pr_common+0x17e>
 8007db4:	b130      	cbz	r0, 8007dc4 <__gnu_unwind_pr_common+0xc0>
 8007db6:	9a00      	ldr	r2, [sp, #0]
 8007db8:	2a00      	cmp	r2, #0
 8007dba:	d06c      	beq.n	8007e96 <__gnu_unwind_pr_common+0x192>
 8007dbc:	f1ba 0f00 	cmp.w	sl, #0
 8007dc0:	f000 8090 	beq.w	8007ee4 <__gnu_unwind_pr_common+0x1e0>
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	da00      	bge.n	8007dca <__gnu_unwind_pr_common+0xc6>
 8007dc8:	3404      	adds	r4, #4
 8007dca:	f10a 0301 	add.w	r3, sl, #1
 8007dce:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8007dd2:	e7bc      	b.n	8007d4e <__gnu_unwind_pr_common+0x4a>
 8007dd4:	4630      	mov	r0, r6
 8007dd6:	a905      	add	r1, sp, #20
 8007dd8:	f000 fb46 	bl	8008468 <__gnu_unwind_execute>
 8007ddc:	b178      	cbz	r0, 8007dfe <__gnu_unwind_pr_common+0xfa>
 8007dde:	2009      	movs	r0, #9
 8007de0:	b009      	add	sp, #36	; 0x24
 8007de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007de6:	2000      	movs	r0, #0
 8007de8:	e7cf      	b.n	8007d8a <__gnu_unwind_pr_common+0x86>
 8007dea:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8007dee:	3408      	adds	r4, #8
 8007df0:	e7ba      	b.n	8007d68 <__gnu_unwind_pr_common+0x64>
 8007df2:	0212      	lsls	r2, r2, #8
 8007df4:	2303      	movs	r3, #3
 8007df6:	9205      	str	r2, [sp, #20]
 8007df8:	f8ad 301c 	strh.w	r3, [sp, #28]
 8007dfc:	e79b      	b.n	8007d36 <__gnu_unwind_pr_common+0x32>
 8007dfe:	2008      	movs	r0, #8
 8007e00:	b009      	add	sp, #36	; 0x24
 8007e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e06:	f1bb 0f00 	cmp.w	fp, #0
 8007e0a:	d002      	beq.n	8007e12 <__gnu_unwind_pr_common+0x10e>
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	f040 80b4 	bne.w	8007f7a <__gnu_unwind_pr_common+0x276>
 8007e12:	3404      	adds	r4, #4
 8007e14:	e79b      	b.n	8007d4e <__gnu_unwind_pr_common+0x4a>
 8007e16:	f1bb 0f00 	cmp.w	fp, #0
 8007e1a:	d118      	bne.n	8007e4e <__gnu_unwind_pr_common+0x14a>
 8007e1c:	b1a8      	cbz	r0, 8007e4a <__gnu_unwind_pr_common+0x146>
 8007e1e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007e22:	1c99      	adds	r1, r3, #2
 8007e24:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8007e28:	d0d9      	beq.n	8007dde <__gnu_unwind_pr_common+0xda>
 8007e2a:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8007e2e:	3301      	adds	r3, #1
 8007e30:	9104      	str	r1, [sp, #16]
 8007e32:	f000 80b5 	beq.w	8007fa0 <__gnu_unwind_pr_common+0x29c>
 8007e36:	1d20      	adds	r0, r4, #4
 8007e38:	f7ff fdea 	bl	8007a10 <_Unwind_decode_typeinfo_ptr.isra.0>
 8007e3c:	ab04      	add	r3, sp, #16
 8007e3e:	4601      	mov	r1, r0
 8007e40:	4628      	mov	r0, r5
 8007e42:	f025 fafb 	bl	802d43c <__cxa_type_match>
 8007e46:	2800      	cmp	r0, #0
 8007e48:	d167      	bne.n	8007f1a <__gnu_unwind_pr_common+0x216>
 8007e4a:	3408      	adds	r4, #8
 8007e4c:	e77f      	b.n	8007d4e <__gnu_unwind_pr_common+0x4a>
 8007e4e:	210d      	movs	r1, #13
 8007e50:	4630      	mov	r0, r6
 8007e52:	f8d5 8020 	ldr.w	r8, [r5, #32]
 8007e56:	f7ff feed 	bl	8007c34 <_Unwind_GetGR>
 8007e5a:	4580      	cmp	r8, r0
 8007e5c:	d1f5      	bne.n	8007e4a <__gnu_unwind_pr_common+0x146>
 8007e5e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007e60:	429c      	cmp	r4, r3
 8007e62:	d1f2      	bne.n	8007e4a <__gnu_unwind_pr_common+0x146>
 8007e64:	4620      	mov	r0, r4
 8007e66:	f7ff fd07 	bl	8007878 <selfrel_offset31>
 8007e6a:	210f      	movs	r1, #15
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	4630      	mov	r0, r6
 8007e70:	f7ff ff02 	bl	8007c78 <_Unwind_SetGR>
 8007e74:	4630      	mov	r0, r6
 8007e76:	462a      	mov	r2, r5
 8007e78:	2100      	movs	r1, #0
 8007e7a:	f7ff fefd 	bl	8007c78 <_Unwind_SetGR>
 8007e7e:	2007      	movs	r0, #7
 8007e80:	e7ae      	b.n	8007de0 <__gnu_unwind_pr_common+0xdc>
 8007e82:	210d      	movs	r1, #13
 8007e84:	4630      	mov	r0, r6
 8007e86:	f8d5 8020 	ldr.w	r8, [r5, #32]
 8007e8a:	f7ff fed3 	bl	8007c34 <_Unwind_GetGR>
 8007e8e:	4580      	cmp	r8, r0
 8007e90:	d032      	beq.n	8007ef8 <__gnu_unwind_pr_common+0x1f4>
 8007e92:	6823      	ldr	r3, [r4, #0]
 8007e94:	e796      	b.n	8007dc4 <__gnu_unwind_pr_common+0xc0>
 8007e96:	f1ba 0f00 	cmp.w	sl, #0
 8007e9a:	d023      	beq.n	8007ee4 <__gnu_unwind_pr_common+0x1e0>
 8007e9c:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8007ea0:	f104 0804 	add.w	r8, r4, #4
 8007ea4:	f8cd b008 	str.w	fp, [sp, #8]
 8007ea8:	f8dd 9000 	ldr.w	r9, [sp]
 8007eac:	9703      	str	r7, [sp, #12]
 8007eae:	46a3      	mov	fp, r4
 8007eb0:	461c      	mov	r4, r3
 8007eb2:	e002      	b.n	8007eba <__gnu_unwind_pr_common+0x1b6>
 8007eb4:	4557      	cmp	r7, sl
 8007eb6:	46b9      	mov	r9, r7
 8007eb8:	d040      	beq.n	8007f3c <__gnu_unwind_pr_common+0x238>
 8007eba:	4640      	mov	r0, r8
 8007ebc:	9404      	str	r4, [sp, #16]
 8007ebe:	f7ff fda7 	bl	8007a10 <_Unwind_decode_typeinfo_ptr.isra.0>
 8007ec2:	ab04      	add	r3, sp, #16
 8007ec4:	4601      	mov	r1, r0
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	4628      	mov	r0, r5
 8007eca:	f025 fab7 	bl	802d43c <__cxa_type_match>
 8007ece:	f109 0701 	add.w	r7, r9, #1
 8007ed2:	f108 0804 	add.w	r8, r8, #4
 8007ed6:	2800      	cmp	r0, #0
 8007ed8:	d0ec      	beq.n	8007eb4 <__gnu_unwind_pr_common+0x1b0>
 8007eda:	45d1      	cmp	r9, sl
 8007edc:	465c      	mov	r4, fp
 8007ede:	e9dd b702 	ldrd	fp, r7, [sp, #8]
 8007ee2:	d1d6      	bne.n	8007e92 <__gnu_unwind_pr_common+0x18e>
 8007ee4:	4630      	mov	r0, r6
 8007ee6:	210d      	movs	r1, #13
 8007ee8:	f7ff fea4 	bl	8007c34 <_Unwind_GetGR>
 8007eec:	9b04      	ldr	r3, [sp, #16]
 8007eee:	6228      	str	r0, [r5, #32]
 8007ef0:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
 8007ef4:	2006      	movs	r0, #6
 8007ef6:	e773      	b.n	8007de0 <__gnu_unwind_pr_common+0xdc>
 8007ef8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007efa:	429c      	cmp	r4, r3
 8007efc:	d1c9      	bne.n	8007e92 <__gnu_unwind_pr_common+0x18e>
 8007efe:	2204      	movs	r2, #4
 8007f00:	f04f 0800 	mov.w	r8, #0
 8007f04:	18a3      	adds	r3, r4, r2
 8007f06:	e9c5 a80a 	strd	sl, r8, [r5, #40]	; 0x28
 8007f0a:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
 8007f0e:	6823      	ldr	r3, [r4, #0]
 8007f10:	4543      	cmp	r3, r8
 8007f12:	db4d      	blt.n	8007fb0 <__gnu_unwind_pr_common+0x2ac>
 8007f14:	2301      	movs	r3, #1
 8007f16:	9301      	str	r3, [sp, #4]
 8007f18:	e757      	b.n	8007dca <__gnu_unwind_pr_common+0xc6>
 8007f1a:	4680      	mov	r8, r0
 8007f1c:	210d      	movs	r1, #13
 8007f1e:	4630      	mov	r0, r6
 8007f20:	f7ff fe88 	bl	8007c34 <_Unwind_GetGR>
 8007f24:	f1b8 0f02 	cmp.w	r8, #2
 8007f28:	6228      	str	r0, [r5, #32]
 8007f2a:	d13e      	bne.n	8007faa <__gnu_unwind_pr_common+0x2a6>
 8007f2c:	462b      	mov	r3, r5
 8007f2e:	9a04      	ldr	r2, [sp, #16]
 8007f30:	f843 2f2c 	str.w	r2, [r3, #44]!
 8007f34:	626b      	str	r3, [r5, #36]	; 0x24
 8007f36:	62ac      	str	r4, [r5, #40]	; 0x28
 8007f38:	2006      	movs	r0, #6
 8007f3a:	e751      	b.n	8007de0 <__gnu_unwind_pr_common+0xdc>
 8007f3c:	465c      	mov	r4, fp
 8007f3e:	e7d1      	b.n	8007ee4 <__gnu_unwind_pr_common+0x1e0>
 8007f40:	a905      	add	r1, sp, #20
 8007f42:	4630      	mov	r0, r6
 8007f44:	f000 fa90 	bl	8008468 <__gnu_unwind_execute>
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	f47f af48 	bne.w	8007dde <__gnu_unwind_pr_common+0xda>
 8007f4e:	9b01      	ldr	r3, [sp, #4]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	f43f af54 	beq.w	8007dfe <__gnu_unwind_pr_common+0xfa>
 8007f56:	210f      	movs	r1, #15
 8007f58:	4630      	mov	r0, r6
 8007f5a:	f7ff fe6b 	bl	8007c34 <_Unwind_GetGR>
 8007f5e:	210e      	movs	r1, #14
 8007f60:	4602      	mov	r2, r0
 8007f62:	4630      	mov	r0, r6
 8007f64:	f7ff fe88 	bl	8007c78 <_Unwind_SetGR>
 8007f68:	4630      	mov	r0, r6
 8007f6a:	4a1a      	ldr	r2, [pc, #104]	; (8007fd4 <__gnu_unwind_pr_common+0x2d0>)
 8007f6c:	210f      	movs	r1, #15
 8007f6e:	f7ff fe83 	bl	8007c78 <_Unwind_SetGR>
 8007f72:	2007      	movs	r0, #7
 8007f74:	b009      	add	sp, #36	; 0x24
 8007f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	f7ff fc7c 	bl	8007878 <selfrel_offset31>
 8007f80:	3404      	adds	r4, #4
 8007f82:	4607      	mov	r7, r0
 8007f84:	63ac      	str	r4, [r5, #56]	; 0x38
 8007f86:	4628      	mov	r0, r5
 8007f88:	f025 fab0 	bl	802d4ec <__cxa_begin_cleanup>
 8007f8c:	2800      	cmp	r0, #0
 8007f8e:	f43f af26 	beq.w	8007dde <__gnu_unwind_pr_common+0xda>
 8007f92:	4630      	mov	r0, r6
 8007f94:	463a      	mov	r2, r7
 8007f96:	210f      	movs	r1, #15
 8007f98:	f7ff fe6e 	bl	8007c78 <_Unwind_SetGR>
 8007f9c:	2007      	movs	r0, #7
 8007f9e:	e71f      	b.n	8007de0 <__gnu_unwind_pr_common+0xdc>
 8007fa0:	4630      	mov	r0, r6
 8007fa2:	210d      	movs	r1, #13
 8007fa4:	f7ff fe46 	bl	8007c34 <_Unwind_GetGR>
 8007fa8:	6228      	str	r0, [r5, #32]
 8007faa:	9b04      	ldr	r3, [sp, #16]
 8007fac:	626b      	str	r3, [r5, #36]	; 0x24
 8007fae:	e7c2      	b.n	8007f36 <__gnu_unwind_pr_common+0x232>
 8007fb0:	f10a 0001 	add.w	r0, sl, #1
 8007fb4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8007fb8:	f7ff fc5e 	bl	8007878 <selfrel_offset31>
 8007fbc:	210f      	movs	r1, #15
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	4630      	mov	r0, r6
 8007fc2:	f7ff fe59 	bl	8007c78 <_Unwind_SetGR>
 8007fc6:	4630      	mov	r0, r6
 8007fc8:	462a      	mov	r2, r5
 8007fca:	4641      	mov	r1, r8
 8007fcc:	f7ff fe54 	bl	8007c78 <_Unwind_SetGR>
 8007fd0:	2007      	movs	r0, #7
 8007fd2:	e705      	b.n	8007de0 <__gnu_unwind_pr_common+0xdc>
 8007fd4:	0802d355 	.word	0x0802d355

08007fd8 <__aeabi_unwind_cpp_pr0>:
 8007fd8:	2300      	movs	r3, #0
 8007fda:	e693      	b.n	8007d04 <__gnu_unwind_pr_common>

08007fdc <__aeabi_unwind_cpp_pr1>:
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e691      	b.n	8007d04 <__gnu_unwind_pr_common>

08007fe0 <__aeabi_unwind_cpp_pr2>:
 8007fe0:	2302      	movs	r3, #2
 8007fe2:	e68f      	b.n	8007d04 <__gnu_unwind_pr_common>

08007fe4 <_Unwind_VRS_Pop>:
 8007fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fe8:	4605      	mov	r5, r0
 8007fea:	b0c4      	sub	sp, #272	; 0x110
 8007fec:	2904      	cmp	r1, #4
 8007fee:	d806      	bhi.n	8007ffe <_Unwind_VRS_Pop+0x1a>
 8007ff0:	e8df f001 	tbb	[pc, r1]
 8007ff4:	03052b4d 	.word	0x03052b4d
 8007ff8:	09          	.byte	0x09
 8007ff9:	00          	.byte	0x00
 8007ffa:	2b03      	cmp	r3, #3
 8007ffc:	d05f      	beq.n	80080be <_Unwind_VRS_Pop+0xda>
 8007ffe:	2002      	movs	r0, #2
 8008000:	b044      	add	sp, #272	; 0x110
 8008002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008006:	2b00      	cmp	r3, #0
 8008008:	d1f9      	bne.n	8007ffe <_Unwind_VRS_Pop+0x1a>
 800800a:	2a10      	cmp	r2, #16
 800800c:	d8f7      	bhi.n	8007ffe <_Unwind_VRS_Pop+0x1a>
 800800e:	682b      	ldr	r3, [r5, #0]
 8008010:	06dc      	lsls	r4, r3, #27
 8008012:	f100 80f4 	bmi.w	80081fe <_Unwind_VRS_Pop+0x21a>
 8008016:	ac22      	add	r4, sp, #136	; 0x88
 8008018:	4620      	mov	r0, r4
 800801a:	9201      	str	r2, [sp, #4]
 800801c:	f000 f994 	bl	8008348 <__gnu_Unwind_Save_WMMXC>
 8008020:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8008022:	9a01      	ldr	r2, [sp, #4]
 8008024:	2300      	movs	r3, #0
 8008026:	2601      	movs	r6, #1
 8008028:	fa06 f103 	lsl.w	r1, r6, r3
 800802c:	4211      	tst	r1, r2
 800802e:	d003      	beq.n	8008038 <_Unwind_VRS_Pop+0x54>
 8008030:	6801      	ldr	r1, [r0, #0]
 8008032:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 8008036:	3004      	adds	r0, #4
 8008038:	3301      	adds	r3, #1
 800803a:	2b04      	cmp	r3, #4
 800803c:	d1f4      	bne.n	8008028 <_Unwind_VRS_Pop+0x44>
 800803e:	63a8      	str	r0, [r5, #56]	; 0x38
 8008040:	4620      	mov	r0, r4
 8008042:	f000 f977 	bl	8008334 <__gnu_Unwind_Restore_WMMXC>
 8008046:	2000      	movs	r0, #0
 8008048:	e7da      	b.n	8008000 <_Unwind_VRS_Pop+0x1c>
 800804a:	2b01      	cmp	r3, #1
 800804c:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8008050:	b297      	uxth	r7, r2
 8008052:	d052      	beq.n	80080fa <_Unwind_VRS_Pop+0x116>
 8008054:	2b05      	cmp	r3, #5
 8008056:	d1d2      	bne.n	8007ffe <_Unwind_VRS_Pop+0x1a>
 8008058:	eb06 0807 	add.w	r8, r6, r7
 800805c:	f1b8 0f20 	cmp.w	r8, #32
 8008060:	d8cd      	bhi.n	8007ffe <_Unwind_VRS_Pop+0x1a>
 8008062:	2e0f      	cmp	r6, #15
 8008064:	f240 8099 	bls.w	800819a <_Unwind_VRS_Pop+0x1b6>
 8008068:	46b8      	mov	r8, r7
 800806a:	2f00      	cmp	r7, #0
 800806c:	f040 80db 	bne.w	8008226 <_Unwind_VRS_Pop+0x242>
 8008070:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8008072:	63aa      	str	r2, [r5, #56]	; 0x38
 8008074:	2e0f      	cmp	r6, #15
 8008076:	f240 80be 	bls.w	80081f6 <_Unwind_VRS_Pop+0x212>
 800807a:	f1b8 0f00 	cmp.w	r8, #0
 800807e:	d002      	beq.n	8008086 <_Unwind_VRS_Pop+0xa2>
 8008080:	a802      	add	r0, sp, #8
 8008082:	f000 f90b 	bl	800829c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8008086:	2000      	movs	r0, #0
 8008088:	b044      	add	sp, #272	; 0x110
 800808a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800808e:	2b00      	cmp	r3, #0
 8008090:	d1b5      	bne.n	8007ffe <_Unwind_VRS_Pop+0x1a>
 8008092:	6bac      	ldr	r4, [r5, #56]	; 0x38
 8008094:	b297      	uxth	r7, r2
 8008096:	1d28      	adds	r0, r5, #4
 8008098:	2601      	movs	r6, #1
 800809a:	fa06 f103 	lsl.w	r1, r6, r3
 800809e:	4239      	tst	r1, r7
 80080a0:	f103 0301 	add.w	r3, r3, #1
 80080a4:	d002      	beq.n	80080ac <_Unwind_VRS_Pop+0xc8>
 80080a6:	6821      	ldr	r1, [r4, #0]
 80080a8:	6001      	str	r1, [r0, #0]
 80080aa:	3404      	adds	r4, #4
 80080ac:	2b10      	cmp	r3, #16
 80080ae:	f100 0004 	add.w	r0, r0, #4
 80080b2:	d1f2      	bne.n	800809a <_Unwind_VRS_Pop+0xb6>
 80080b4:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 80080b8:	d1e5      	bne.n	8008086 <_Unwind_VRS_Pop+0xa2>
 80080ba:	63ac      	str	r4, [r5, #56]	; 0x38
 80080bc:	e7a0      	b.n	8008000 <_Unwind_VRS_Pop+0x1c>
 80080be:	0c16      	lsrs	r6, r2, #16
 80080c0:	b297      	uxth	r7, r2
 80080c2:	19f3      	adds	r3, r6, r7
 80080c4:	2b10      	cmp	r3, #16
 80080c6:	d89a      	bhi.n	8007ffe <_Unwind_VRS_Pop+0x1a>
 80080c8:	682b      	ldr	r3, [r5, #0]
 80080ca:	071a      	lsls	r2, r3, #28
 80080cc:	d45d      	bmi.n	800818a <_Unwind_VRS_Pop+0x1a6>
 80080ce:	ac22      	add	r4, sp, #136	; 0x88
 80080d0:	4620      	mov	r0, r4
 80080d2:	f000 f90d 	bl	80082f0 <__gnu_Unwind_Save_WMMXD>
 80080d6:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80080da:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80080dc:	b13f      	cbz	r7, 80080ee <_Unwind_VRS_Pop+0x10a>
 80080de:	eb03 02c7 	add.w	r2, r3, r7, lsl #3
 80080e2:	6818      	ldr	r0, [r3, #0]
 80080e4:	f841 0b04 	str.w	r0, [r1], #4
 80080e8:	3304      	adds	r3, #4
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d1f9      	bne.n	80080e2 <_Unwind_VRS_Pop+0xfe>
 80080ee:	4620      	mov	r0, r4
 80080f0:	63ab      	str	r3, [r5, #56]	; 0x38
 80080f2:	f000 f8db 	bl	80082ac <__gnu_Unwind_Restore_WMMXD>
 80080f6:	2000      	movs	r0, #0
 80080f8:	e782      	b.n	8008000 <_Unwind_VRS_Pop+0x1c>
 80080fa:	19f2      	adds	r2, r6, r7
 80080fc:	2a10      	cmp	r2, #16
 80080fe:	f63f af7e 	bhi.w	8007ffe <_Unwind_VRS_Pop+0x1a>
 8008102:	2e0f      	cmp	r6, #15
 8008104:	f63f af7b 	bhi.w	8007ffe <_Unwind_VRS_Pop+0x1a>
 8008108:	682a      	ldr	r2, [r5, #0]
 800810a:	07d1      	lsls	r1, r2, #31
 800810c:	d508      	bpl.n	8008120 <_Unwind_VRS_Pop+0x13c>
 800810e:	4628      	mov	r0, r5
 8008110:	f022 0203 	bic.w	r2, r2, #3
 8008114:	f840 2b48 	str.w	r2, [r0], #72
 8008118:	9301      	str	r3, [sp, #4]
 800811a:	f000 f8b3 	bl	8008284 <__gnu_Unwind_Save_VFP>
 800811e:	9b01      	ldr	r3, [sp, #4]
 8008120:	9301      	str	r3, [sp, #4]
 8008122:	ac22      	add	r4, sp, #136	; 0x88
 8008124:	4620      	mov	r0, r4
 8008126:	f000 f8ad 	bl	8008284 <__gnu_Unwind_Save_VFP>
 800812a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800812c:	9b01      	ldr	r3, [sp, #4]
 800812e:	2f00      	cmp	r7, #0
 8008130:	f000 8095 	beq.w	800825e <_Unwind_VRS_Pop+0x27a>
 8008134:	007f      	lsls	r7, r7, #1
 8008136:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800813a:	f04f 0800 	mov.w	r8, #0
 800813e:	3c04      	subs	r4, #4
 8008140:	eb01 0287 	add.w	r2, r1, r7, lsl #2
 8008144:	f851 0b04 	ldr.w	r0, [r1], #4
 8008148:	f844 0f04 	str.w	r0, [r4, #4]!
 800814c:	4291      	cmp	r1, r2
 800814e:	d1f9      	bne.n	8008144 <_Unwind_VRS_Pop+0x160>
 8008150:	f1b8 0f00 	cmp.w	r8, #0
 8008154:	d00f      	beq.n	8008176 <_Unwind_VRS_Pop+0x192>
 8008156:	ac02      	add	r4, sp, #8
 8008158:	2e10      	cmp	r6, #16
 800815a:	4631      	mov	r1, r6
 800815c:	bf38      	it	cc
 800815e:	2110      	movcc	r1, #16
 8008160:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8008164:	3984      	subs	r1, #132	; 0x84
 8008166:	eb02 04c8 	add.w	r4, r2, r8, lsl #3
 800816a:	f852 0b04 	ldr.w	r0, [r2], #4
 800816e:	f841 0f04 	str.w	r0, [r1, #4]!
 8008172:	4294      	cmp	r4, r2
 8008174:	d1f9      	bne.n	800816a <_Unwind_VRS_Pop+0x186>
 8008176:	2b01      	cmp	r3, #1
 8008178:	f47f af7b 	bne.w	8008072 <_Unwind_VRS_Pop+0x8e>
 800817c:	ac22      	add	r4, sp, #136	; 0x88
 800817e:	3204      	adds	r2, #4
 8008180:	63aa      	str	r2, [r5, #56]	; 0x38
 8008182:	4620      	mov	r0, r4
 8008184:	f000 f87a 	bl	800827c <__gnu_Unwind_Restore_VFP>
 8008188:	e77d      	b.n	8008086 <_Unwind_VRS_Pop+0xa2>
 800818a:	f023 0308 	bic.w	r3, r3, #8
 800818e:	602b      	str	r3, [r5, #0]
 8008190:	f505 70a8 	add.w	r0, r5, #336	; 0x150
 8008194:	f000 f8ac 	bl	80082f0 <__gnu_Unwind_Save_WMMXD>
 8008198:	e799      	b.n	80080ce <_Unwind_VRS_Pop+0xea>
 800819a:	f1b8 0f10 	cmp.w	r8, #16
 800819e:	682a      	ldr	r2, [r5, #0]
 80081a0:	d943      	bls.n	800822a <_Unwind_VRS_Pop+0x246>
 80081a2:	07d0      	lsls	r0, r2, #31
 80081a4:	f1a8 0810 	sub.w	r8, r8, #16
 80081a8:	d50b      	bpl.n	80081c2 <_Unwind_VRS_Pop+0x1de>
 80081aa:	4628      	mov	r0, r5
 80081ac:	f022 0201 	bic.w	r2, r2, #1
 80081b0:	f042 0202 	orr.w	r2, r2, #2
 80081b4:	f840 2b48 	str.w	r2, [r0], #72
 80081b8:	9301      	str	r3, [sp, #4]
 80081ba:	f000 f86b 	bl	8008294 <__gnu_Unwind_Save_VFP_D>
 80081be:	682a      	ldr	r2, [r5, #0]
 80081c0:	9b01      	ldr	r3, [sp, #4]
 80081c2:	0751      	lsls	r1, r2, #29
 80081c4:	d425      	bmi.n	8008212 <_Unwind_VRS_Pop+0x22e>
 80081c6:	2e0f      	cmp	r6, #15
 80081c8:	d804      	bhi.n	80081d4 <_Unwind_VRS_Pop+0x1f0>
 80081ca:	a822      	add	r0, sp, #136	; 0x88
 80081cc:	9301      	str	r3, [sp, #4]
 80081ce:	f000 f861 	bl	8008294 <__gnu_Unwind_Save_VFP_D>
 80081d2:	9b01      	ldr	r3, [sp, #4]
 80081d4:	9301      	str	r3, [sp, #4]
 80081d6:	ac02      	add	r4, sp, #8
 80081d8:	4620      	mov	r0, r4
 80081da:	f000 f863 	bl	80082a4 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80081de:	f1c6 0110 	rsb	r1, r6, #16
 80081e2:	2900      	cmp	r1, #0
 80081e4:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80081e6:	9b01      	ldr	r3, [sp, #4]
 80081e8:	ddb6      	ble.n	8008158 <_Unwind_VRS_Pop+0x174>
 80081ea:	ac22      	add	r4, sp, #136	; 0x88
 80081ec:	004f      	lsls	r7, r1, #1
 80081ee:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80081f2:	4611      	mov	r1, r2
 80081f4:	e7a3      	b.n	800813e <_Unwind_VRS_Pop+0x15a>
 80081f6:	a822      	add	r0, sp, #136	; 0x88
 80081f8:	f000 f848 	bl	800828c <__gnu_Unwind_Restore_VFP_D>
 80081fc:	e73d      	b.n	800807a <_Unwind_VRS_Pop+0x96>
 80081fe:	f023 0310 	bic.w	r3, r3, #16
 8008202:	602b      	str	r3, [r5, #0]
 8008204:	f505 70e8 	add.w	r0, r5, #464	; 0x1d0
 8008208:	9201      	str	r2, [sp, #4]
 800820a:	f000 f89d 	bl	8008348 <__gnu_Unwind_Save_WMMXC>
 800820e:	9a01      	ldr	r2, [sp, #4]
 8008210:	e701      	b.n	8008016 <_Unwind_VRS_Pop+0x32>
 8008212:	4628      	mov	r0, r5
 8008214:	f022 0204 	bic.w	r2, r2, #4
 8008218:	f840 2bd0 	str.w	r2, [r0], #208
 800821c:	9301      	str	r3, [sp, #4]
 800821e:	f000 f841 	bl	80082a4 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8008222:	9b01      	ldr	r3, [sp, #4]
 8008224:	e7cf      	b.n	80081c6 <_Unwind_VRS_Pop+0x1e2>
 8008226:	682a      	ldr	r2, [r5, #0]
 8008228:	e7cb      	b.n	80081c2 <_Unwind_VRS_Pop+0x1de>
 800822a:	07d0      	lsls	r0, r2, #31
 800822c:	d50a      	bpl.n	8008244 <_Unwind_VRS_Pop+0x260>
 800822e:	4628      	mov	r0, r5
 8008230:	f022 0201 	bic.w	r2, r2, #1
 8008234:	f042 0202 	orr.w	r2, r2, #2
 8008238:	f840 2b48 	str.w	r2, [r0], #72
 800823c:	9301      	str	r3, [sp, #4]
 800823e:	f000 f829 	bl	8008294 <__gnu_Unwind_Save_VFP_D>
 8008242:	9b01      	ldr	r3, [sp, #4]
 8008244:	9301      	str	r3, [sp, #4]
 8008246:	ac22      	add	r4, sp, #136	; 0x88
 8008248:	4620      	mov	r0, r4
 800824a:	f000 f823 	bl	8008294 <__gnu_Unwind_Save_VFP_D>
 800824e:	46b8      	mov	r8, r7
 8008250:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8008252:	9b01      	ldr	r3, [sp, #4]
 8008254:	2f00      	cmp	r7, #0
 8008256:	f47f af6d 	bne.w	8008134 <_Unwind_VRS_Pop+0x150>
 800825a:	460a      	mov	r2, r1
 800825c:	e709      	b.n	8008072 <_Unwind_VRS_Pop+0x8e>
 800825e:	460a      	mov	r2, r1
 8008260:	e78d      	b.n	800817e <_Unwind_VRS_Pop+0x19a>
 8008262:	bf00      	nop

08008264 <__restore_core_regs>:
 8008264:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8008268:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 800826c:	469c      	mov	ip, r3
 800826e:	46a6      	mov	lr, r4
 8008270:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8008274:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8008278:	46e5      	mov	sp, ip
 800827a:	bd00      	pop	{pc}

0800827c <__gnu_Unwind_Restore_VFP>:
 800827c:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8008280:	4770      	bx	lr
 8008282:	bf00      	nop

08008284 <__gnu_Unwind_Save_VFP>:
 8008284:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop

0800828c <__gnu_Unwind_Restore_VFP_D>:
 800828c:	ec90 0b20 	vldmia	r0, {d0-d15}
 8008290:	4770      	bx	lr
 8008292:	bf00      	nop

08008294 <__gnu_Unwind_Save_VFP_D>:
 8008294:	ec80 0b20 	vstmia	r0, {d0-d15}
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop

0800829c <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 800829c:	ecd0 0b20 	vldmia	r0, {d16-d31}
 80082a0:	4770      	bx	lr
 80082a2:	bf00      	nop

080082a4 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 80082a4:	ecc0 0b20 	vstmia	r0, {d16-d31}
 80082a8:	4770      	bx	lr
 80082aa:	bf00      	nop

080082ac <__gnu_Unwind_Restore_WMMXD>:
 80082ac:	ecf0 0102 	ldfe	f0, [r0], #8
 80082b0:	ecf0 1102 	ldfe	f1, [r0], #8
 80082b4:	ecf0 2102 	ldfe	f2, [r0], #8
 80082b8:	ecf0 3102 	ldfe	f3, [r0], #8
 80082bc:	ecf0 4102 	ldfe	f4, [r0], #8
 80082c0:	ecf0 5102 	ldfe	f5, [r0], #8
 80082c4:	ecf0 6102 	ldfe	f6, [r0], #8
 80082c8:	ecf0 7102 	ldfe	f7, [r0], #8
 80082cc:	ecf0 8102 	ldfp	f0, [r0], #8
 80082d0:	ecf0 9102 	ldfp	f1, [r0], #8
 80082d4:	ecf0 a102 	ldfp	f2, [r0], #8
 80082d8:	ecf0 b102 	ldfp	f3, [r0], #8
 80082dc:	ecf0 c102 	ldfp	f4, [r0], #8
 80082e0:	ecf0 d102 	ldfp	f5, [r0], #8
 80082e4:	ecf0 e102 	ldfp	f6, [r0], #8
 80082e8:	ecf0 f102 	ldfp	f7, [r0], #8
 80082ec:	4770      	bx	lr
 80082ee:	bf00      	nop

080082f0 <__gnu_Unwind_Save_WMMXD>:
 80082f0:	ece0 0102 	stfe	f0, [r0], #8
 80082f4:	ece0 1102 	stfe	f1, [r0], #8
 80082f8:	ece0 2102 	stfe	f2, [r0], #8
 80082fc:	ece0 3102 	stfe	f3, [r0], #8
 8008300:	ece0 4102 	stfe	f4, [r0], #8
 8008304:	ece0 5102 	stfe	f5, [r0], #8
 8008308:	ece0 6102 	stfe	f6, [r0], #8
 800830c:	ece0 7102 	stfe	f7, [r0], #8
 8008310:	ece0 8102 	stfp	f0, [r0], #8
 8008314:	ece0 9102 	stfp	f1, [r0], #8
 8008318:	ece0 a102 	stfp	f2, [r0], #8
 800831c:	ece0 b102 	stfp	f3, [r0], #8
 8008320:	ece0 c102 	stfp	f4, [r0], #8
 8008324:	ece0 d102 	stfp	f5, [r0], #8
 8008328:	ece0 e102 	stfp	f6, [r0], #8
 800832c:	ece0 f102 	stfp	f7, [r0], #8
 8008330:	4770      	bx	lr
 8008332:	bf00      	nop

08008334 <__gnu_Unwind_Restore_WMMXC>:
 8008334:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8008338:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 800833c:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8008340:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8008344:	4770      	bx	lr
 8008346:	bf00      	nop

08008348 <__gnu_Unwind_Save_WMMXC>:
 8008348:	fca0 8101 	stc2	1, cr8, [r0], #4
 800834c:	fca0 9101 	stc2	1, cr9, [r0], #4
 8008350:	fca0 a101 	stc2	1, cr10, [r0], #4
 8008354:	fca0 b101 	stc2	1, cr11, [r0], #4
 8008358:	4770      	bx	lr
 800835a:	bf00      	nop

0800835c <_Unwind_RaiseException>:
 800835c:	46ec      	mov	ip, sp
 800835e:	b500      	push	{lr}
 8008360:	e92d 5000 	stmdb	sp!, {ip, lr}
 8008364:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8008368:	f04f 0300 	mov.w	r3, #0
 800836c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8008370:	a901      	add	r1, sp, #4
 8008372:	f7ff fbdd 	bl	8007b30 <__gnu_Unwind_RaiseException>
 8008376:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800837a:	b012      	add	sp, #72	; 0x48
 800837c:	4770      	bx	lr
 800837e:	bf00      	nop

08008380 <_Unwind_Resume>:
 8008380:	46ec      	mov	ip, sp
 8008382:	b500      	push	{lr}
 8008384:	e92d 5000 	stmdb	sp!, {ip, lr}
 8008388:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800838c:	f04f 0300 	mov.w	r3, #0
 8008390:	e92d 000c 	stmdb	sp!, {r2, r3}
 8008394:	a901      	add	r1, sp, #4
 8008396:	f7ff fc05 	bl	8007ba4 <__gnu_Unwind_Resume>
 800839a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800839e:	b012      	add	sp, #72	; 0x48
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop

080083a4 <_Unwind_Resume_or_Rethrow>:
 80083a4:	46ec      	mov	ip, sp
 80083a6:	b500      	push	{lr}
 80083a8:	e92d 5000 	stmdb	sp!, {ip, lr}
 80083ac:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80083b0:	f04f 0300 	mov.w	r3, #0
 80083b4:	e92d 000c 	stmdb	sp!, {r2, r3}
 80083b8:	a901      	add	r1, sp, #4
 80083ba:	f7ff fc15 	bl	8007be8 <__gnu_Unwind_Resume_or_Rethrow>
 80083be:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80083c2:	b012      	add	sp, #72	; 0x48
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop

080083c8 <_Unwind_ForcedUnwind>:
 80083c8:	46ec      	mov	ip, sp
 80083ca:	b500      	push	{lr}
 80083cc:	e92d 5000 	stmdb	sp!, {ip, lr}
 80083d0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80083d4:	f04f 0300 	mov.w	r3, #0
 80083d8:	e92d 000c 	stmdb	sp!, {r2, r3}
 80083dc:	ab01      	add	r3, sp, #4
 80083de:	f7ff fbd7 	bl	8007b90 <__gnu_Unwind_ForcedUnwind>
 80083e2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80083e6:	b012      	add	sp, #72	; 0x48
 80083e8:	4770      	bx	lr
 80083ea:	bf00      	nop

080083ec <_Unwind_Backtrace>:
 80083ec:	46ec      	mov	ip, sp
 80083ee:	b500      	push	{lr}
 80083f0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80083f4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80083f8:	f04f 0300 	mov.w	r3, #0
 80083fc:	e92d 000c 	stmdb	sp!, {r2, r3}
 8008400:	aa01      	add	r2, sp, #4
 8008402:	f7ff fc47 	bl	8007c94 <__gnu_Unwind_Backtrace>
 8008406:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800840a:	b012      	add	sp, #72	; 0x48
 800840c:	4770      	bx	lr
 800840e:	bf00      	nop

08008410 <next_unwind_byte>:
 8008410:	7a02      	ldrb	r2, [r0, #8]
 8008412:	b982      	cbnz	r2, 8008436 <next_unwind_byte+0x26>
 8008414:	7a43      	ldrb	r3, [r0, #9]
 8008416:	b1ab      	cbz	r3, 8008444 <next_unwind_byte+0x34>
 8008418:	6842      	ldr	r2, [r0, #4]
 800841a:	3b01      	subs	r3, #1
 800841c:	b410      	push	{r4}
 800841e:	7243      	strb	r3, [r0, #9]
 8008420:	6813      	ldr	r3, [r2, #0]
 8008422:	2103      	movs	r1, #3
 8008424:	1d14      	adds	r4, r2, #4
 8008426:	7201      	strb	r1, [r0, #8]
 8008428:	021a      	lsls	r2, r3, #8
 800842a:	6044      	str	r4, [r0, #4]
 800842c:	6002      	str	r2, [r0, #0]
 800842e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008432:	0e18      	lsrs	r0, r3, #24
 8008434:	4770      	bx	lr
 8008436:	6803      	ldr	r3, [r0, #0]
 8008438:	3a01      	subs	r2, #1
 800843a:	7202      	strb	r2, [r0, #8]
 800843c:	021a      	lsls	r2, r3, #8
 800843e:	6002      	str	r2, [r0, #0]
 8008440:	0e18      	lsrs	r0, r3, #24
 8008442:	4770      	bx	lr
 8008444:	20b0      	movs	r0, #176	; 0xb0
 8008446:	4770      	bx	lr

08008448 <_Unwind_GetGR.constprop.0>:
 8008448:	b500      	push	{lr}
 800844a:	b085      	sub	sp, #20
 800844c:	aa03      	add	r2, sp, #12
 800844e:	2300      	movs	r3, #0
 8008450:	9200      	str	r2, [sp, #0]
 8008452:	4619      	mov	r1, r3
 8008454:	220c      	movs	r2, #12
 8008456:	f7ff fbd7 	bl	8007c08 <_Unwind_VRS_Get>
 800845a:	9803      	ldr	r0, [sp, #12]
 800845c:	b005      	add	sp, #20
 800845e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008462:	bf00      	nop

08008464 <unwind_UCB_from_context>:
 8008464:	e7f0      	b.n	8008448 <_Unwind_GetGR.constprop.0>
 8008466:	bf00      	nop

08008468 <__gnu_unwind_execute>:
 8008468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800846c:	4605      	mov	r5, r0
 800846e:	b085      	sub	sp, #20
 8008470:	460e      	mov	r6, r1
 8008472:	f04f 0800 	mov.w	r8, #0
 8008476:	4630      	mov	r0, r6
 8008478:	f7ff ffca 	bl	8008410 <next_unwind_byte>
 800847c:	28b0      	cmp	r0, #176	; 0xb0
 800847e:	4604      	mov	r4, r0
 8008480:	f000 80b1 	beq.w	80085e6 <__gnu_unwind_execute+0x17e>
 8008484:	0607      	lsls	r7, r0, #24
 8008486:	d520      	bpl.n	80084ca <__gnu_unwind_execute+0x62>
 8008488:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800848c:	2b80      	cmp	r3, #128	; 0x80
 800848e:	d065      	beq.n	800855c <__gnu_unwind_execute+0xf4>
 8008490:	2b90      	cmp	r3, #144	; 0x90
 8008492:	d036      	beq.n	8008502 <__gnu_unwind_execute+0x9a>
 8008494:	2ba0      	cmp	r3, #160	; 0xa0
 8008496:	d078      	beq.n	800858a <__gnu_unwind_execute+0x122>
 8008498:	2bb0      	cmp	r3, #176	; 0xb0
 800849a:	d047      	beq.n	800852c <__gnu_unwind_execute+0xc4>
 800849c:	2bc0      	cmp	r3, #192	; 0xc0
 800849e:	f000 808a 	beq.w	80085b6 <__gnu_unwind_execute+0x14e>
 80084a2:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80084a6:	2bd0      	cmp	r3, #208	; 0xd0
 80084a8:	d10b      	bne.n	80084c2 <__gnu_unwind_execute+0x5a>
 80084aa:	f000 0207 	and.w	r2, r0, #7
 80084ae:	3201      	adds	r2, #1
 80084b0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80084b4:	2305      	movs	r3, #5
 80084b6:	2101      	movs	r1, #1
 80084b8:	4628      	mov	r0, r5
 80084ba:	f7ff fd93 	bl	8007fe4 <_Unwind_VRS_Pop>
 80084be:	2800      	cmp	r0, #0
 80084c0:	d0d9      	beq.n	8008476 <__gnu_unwind_execute+0xe>
 80084c2:	2009      	movs	r0, #9
 80084c4:	b005      	add	sp, #20
 80084c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80084ca:	f10d 090c 	add.w	r9, sp, #12
 80084ce:	2300      	movs	r3, #0
 80084d0:	4619      	mov	r1, r3
 80084d2:	0087      	lsls	r7, r0, #2
 80084d4:	f8cd 9000 	str.w	r9, [sp]
 80084d8:	220d      	movs	r2, #13
 80084da:	4628      	mov	r0, r5
 80084dc:	f7ff fb94 	bl	8007c08 <_Unwind_VRS_Get>
 80084e0:	b2ff      	uxtb	r7, r7
 80084e2:	9b03      	ldr	r3, [sp, #12]
 80084e4:	f8cd 9000 	str.w	r9, [sp]
 80084e8:	3704      	adds	r7, #4
 80084ea:	0660      	lsls	r0, r4, #25
 80084ec:	bf4c      	ite	mi
 80084ee:	1bdf      	submi	r7, r3, r7
 80084f0:	18ff      	addpl	r7, r7, r3
 80084f2:	2300      	movs	r3, #0
 80084f4:	4619      	mov	r1, r3
 80084f6:	220d      	movs	r2, #13
 80084f8:	4628      	mov	r0, r5
 80084fa:	9703      	str	r7, [sp, #12]
 80084fc:	f7ff fba6 	bl	8007c4c <_Unwind_VRS_Set>
 8008500:	e7b9      	b.n	8008476 <__gnu_unwind_execute+0xe>
 8008502:	f000 030d 	and.w	r3, r0, #13
 8008506:	2b0d      	cmp	r3, #13
 8008508:	d0db      	beq.n	80084c2 <__gnu_unwind_execute+0x5a>
 800850a:	af03      	add	r7, sp, #12
 800850c:	2300      	movs	r3, #0
 800850e:	f000 020f 	and.w	r2, r0, #15
 8008512:	4619      	mov	r1, r3
 8008514:	9700      	str	r7, [sp, #0]
 8008516:	4628      	mov	r0, r5
 8008518:	f7ff fb76 	bl	8007c08 <_Unwind_VRS_Get>
 800851c:	2300      	movs	r3, #0
 800851e:	9700      	str	r7, [sp, #0]
 8008520:	4619      	mov	r1, r3
 8008522:	220d      	movs	r2, #13
 8008524:	4628      	mov	r0, r5
 8008526:	f7ff fb91 	bl	8007c4c <_Unwind_VRS_Set>
 800852a:	e7a4      	b.n	8008476 <__gnu_unwind_execute+0xe>
 800852c:	28b1      	cmp	r0, #177	; 0xb1
 800852e:	d05f      	beq.n	80085f0 <__gnu_unwind_execute+0x188>
 8008530:	28b2      	cmp	r0, #178	; 0xb2
 8008532:	f000 80cc 	beq.w	80086ce <__gnu_unwind_execute+0x266>
 8008536:	28b3      	cmp	r0, #179	; 0xb3
 8008538:	d07e      	beq.n	8008638 <__gnu_unwind_execute+0x1d0>
 800853a:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 800853e:	2bb4      	cmp	r3, #180	; 0xb4
 8008540:	d0bf      	beq.n	80084c2 <__gnu_unwind_execute+0x5a>
 8008542:	f000 0207 	and.w	r2, r0, #7
 8008546:	3201      	adds	r2, #1
 8008548:	2301      	movs	r3, #1
 800854a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800854e:	4619      	mov	r1, r3
 8008550:	4628      	mov	r0, r5
 8008552:	f7ff fd47 	bl	8007fe4 <_Unwind_VRS_Pop>
 8008556:	2800      	cmp	r0, #0
 8008558:	d08d      	beq.n	8008476 <__gnu_unwind_execute+0xe>
 800855a:	e7b2      	b.n	80084c2 <__gnu_unwind_execute+0x5a>
 800855c:	4630      	mov	r0, r6
 800855e:	f7ff ff57 	bl	8008410 <next_unwind_byte>
 8008562:	0224      	lsls	r4, r4, #8
 8008564:	4304      	orrs	r4, r0
 8008566:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800856a:	d0aa      	beq.n	80084c2 <__gnu_unwind_execute+0x5a>
 800856c:	0124      	lsls	r4, r4, #4
 800856e:	2300      	movs	r3, #0
 8008570:	b2a2      	uxth	r2, r4
 8008572:	4619      	mov	r1, r3
 8008574:	4628      	mov	r0, r5
 8008576:	f7ff fd35 	bl	8007fe4 <_Unwind_VRS_Pop>
 800857a:	2800      	cmp	r0, #0
 800857c:	d1a1      	bne.n	80084c2 <__gnu_unwind_execute+0x5a>
 800857e:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8008582:	bf18      	it	ne
 8008584:	f04f 0801 	movne.w	r8, #1
 8008588:	e775      	b.n	8008476 <__gnu_unwind_execute+0xe>
 800858a:	43c2      	mvns	r2, r0
 800858c:	f002 0307 	and.w	r3, r2, #7
 8008590:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8008594:	411a      	asrs	r2, r3
 8008596:	0701      	lsls	r1, r0, #28
 8008598:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 800859c:	f04f 0300 	mov.w	r3, #0
 80085a0:	bf48      	it	mi
 80085a2:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 80085a6:	4619      	mov	r1, r3
 80085a8:	4628      	mov	r0, r5
 80085aa:	f7ff fd1b 	bl	8007fe4 <_Unwind_VRS_Pop>
 80085ae:	2800      	cmp	r0, #0
 80085b0:	f43f af61 	beq.w	8008476 <__gnu_unwind_execute+0xe>
 80085b4:	e785      	b.n	80084c2 <__gnu_unwind_execute+0x5a>
 80085b6:	28c6      	cmp	r0, #198	; 0xc6
 80085b8:	d051      	beq.n	800865e <__gnu_unwind_execute+0x1f6>
 80085ba:	28c7      	cmp	r0, #199	; 0xc7
 80085bc:	d05a      	beq.n	8008674 <__gnu_unwind_execute+0x20c>
 80085be:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80085c2:	2bc0      	cmp	r3, #192	; 0xc0
 80085c4:	d069      	beq.n	800869a <__gnu_unwind_execute+0x232>
 80085c6:	28c8      	cmp	r0, #200	; 0xc8
 80085c8:	d075      	beq.n	80086b6 <__gnu_unwind_execute+0x24e>
 80085ca:	28c9      	cmp	r0, #201	; 0xc9
 80085cc:	f47f af79 	bne.w	80084c2 <__gnu_unwind_execute+0x5a>
 80085d0:	4630      	mov	r0, r6
 80085d2:	f7ff ff1d 	bl	8008410 <next_unwind_byte>
 80085d6:	0302      	lsls	r2, r0, #12
 80085d8:	f000 000f 	and.w	r0, r0, #15
 80085dc:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 80085e0:	3001      	adds	r0, #1
 80085e2:	4302      	orrs	r2, r0
 80085e4:	e766      	b.n	80084b4 <__gnu_unwind_execute+0x4c>
 80085e6:	f1b8 0f00 	cmp.w	r8, #0
 80085ea:	d014      	beq.n	8008616 <__gnu_unwind_execute+0x1ae>
 80085ec:	2000      	movs	r0, #0
 80085ee:	e769      	b.n	80084c4 <__gnu_unwind_execute+0x5c>
 80085f0:	4630      	mov	r0, r6
 80085f2:	f7ff ff0d 	bl	8008410 <next_unwind_byte>
 80085f6:	2800      	cmp	r0, #0
 80085f8:	f43f af63 	beq.w	80084c2 <__gnu_unwind_execute+0x5a>
 80085fc:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8008600:	f47f af5f 	bne.w	80084c2 <__gnu_unwind_execute+0x5a>
 8008604:	4602      	mov	r2, r0
 8008606:	4619      	mov	r1, r3
 8008608:	4628      	mov	r0, r5
 800860a:	f7ff fceb 	bl	8007fe4 <_Unwind_VRS_Pop>
 800860e:	2800      	cmp	r0, #0
 8008610:	f43f af31 	beq.w	8008476 <__gnu_unwind_execute+0xe>
 8008614:	e755      	b.n	80084c2 <__gnu_unwind_execute+0x5a>
 8008616:	ac03      	add	r4, sp, #12
 8008618:	4643      	mov	r3, r8
 800861a:	220e      	movs	r2, #14
 800861c:	4641      	mov	r1, r8
 800861e:	9400      	str	r4, [sp, #0]
 8008620:	4628      	mov	r0, r5
 8008622:	f7ff faf1 	bl	8007c08 <_Unwind_VRS_Get>
 8008626:	9400      	str	r4, [sp, #0]
 8008628:	4628      	mov	r0, r5
 800862a:	4643      	mov	r3, r8
 800862c:	220f      	movs	r2, #15
 800862e:	4641      	mov	r1, r8
 8008630:	f7ff fb0c 	bl	8007c4c <_Unwind_VRS_Set>
 8008634:	4640      	mov	r0, r8
 8008636:	e745      	b.n	80084c4 <__gnu_unwind_execute+0x5c>
 8008638:	4630      	mov	r0, r6
 800863a:	f7ff fee9 	bl	8008410 <next_unwind_byte>
 800863e:	0301      	lsls	r1, r0, #12
 8008640:	f000 000f 	and.w	r0, r0, #15
 8008644:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8008648:	1c42      	adds	r2, r0, #1
 800864a:	2301      	movs	r3, #1
 800864c:	430a      	orrs	r2, r1
 800864e:	4628      	mov	r0, r5
 8008650:	4619      	mov	r1, r3
 8008652:	f7ff fcc7 	bl	8007fe4 <_Unwind_VRS_Pop>
 8008656:	2800      	cmp	r0, #0
 8008658:	f43f af0d 	beq.w	8008476 <__gnu_unwind_execute+0xe>
 800865c:	e731      	b.n	80084c2 <__gnu_unwind_execute+0x5a>
 800865e:	4630      	mov	r0, r6
 8008660:	f7ff fed6 	bl	8008410 <next_unwind_byte>
 8008664:	0301      	lsls	r1, r0, #12
 8008666:	f000 000f 	and.w	r0, r0, #15
 800866a:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 800866e:	1c42      	adds	r2, r0, #1
 8008670:	2303      	movs	r3, #3
 8008672:	e7eb      	b.n	800864c <__gnu_unwind_execute+0x1e4>
 8008674:	4630      	mov	r0, r6
 8008676:	f7ff fecb 	bl	8008410 <next_unwind_byte>
 800867a:	4602      	mov	r2, r0
 800867c:	2800      	cmp	r0, #0
 800867e:	f43f af20 	beq.w	80084c2 <__gnu_unwind_execute+0x5a>
 8008682:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8008686:	f47f af1c 	bne.w	80084c2 <__gnu_unwind_execute+0x5a>
 800868a:	2104      	movs	r1, #4
 800868c:	4628      	mov	r0, r5
 800868e:	f7ff fca9 	bl	8007fe4 <_Unwind_VRS_Pop>
 8008692:	2800      	cmp	r0, #0
 8008694:	f43f aeef 	beq.w	8008476 <__gnu_unwind_execute+0xe>
 8008698:	e713      	b.n	80084c2 <__gnu_unwind_execute+0x5a>
 800869a:	f000 020f 	and.w	r2, r0, #15
 800869e:	3201      	adds	r2, #1
 80086a0:	2303      	movs	r3, #3
 80086a2:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 80086a6:	4619      	mov	r1, r3
 80086a8:	4628      	mov	r0, r5
 80086aa:	f7ff fc9b 	bl	8007fe4 <_Unwind_VRS_Pop>
 80086ae:	2800      	cmp	r0, #0
 80086b0:	f43f aee1 	beq.w	8008476 <__gnu_unwind_execute+0xe>
 80086b4:	e705      	b.n	80084c2 <__gnu_unwind_execute+0x5a>
 80086b6:	4630      	mov	r0, r6
 80086b8:	f7ff feaa 	bl	8008410 <next_unwind_byte>
 80086bc:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80086c0:	f000 030f 	and.w	r3, r0, #15
 80086c4:	3210      	adds	r2, #16
 80086c6:	3301      	adds	r3, #1
 80086c8:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 80086cc:	e6f2      	b.n	80084b4 <__gnu_unwind_execute+0x4c>
 80086ce:	2300      	movs	r3, #0
 80086d0:	f10d 090c 	add.w	r9, sp, #12
 80086d4:	220d      	movs	r2, #13
 80086d6:	4619      	mov	r1, r3
 80086d8:	f8cd 9000 	str.w	r9, [sp]
 80086dc:	4628      	mov	r0, r5
 80086de:	f7ff fa93 	bl	8007c08 <_Unwind_VRS_Get>
 80086e2:	4630      	mov	r0, r6
 80086e4:	f7ff fe94 	bl	8008410 <next_unwind_byte>
 80086e8:	0602      	lsls	r2, r0, #24
 80086ea:	f04f 0702 	mov.w	r7, #2
 80086ee:	d50c      	bpl.n	800870a <__gnu_unwind_execute+0x2a2>
 80086f0:	9b03      	ldr	r3, [sp, #12]
 80086f2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80086f6:	40b8      	lsls	r0, r7
 80086f8:	4403      	add	r3, r0
 80086fa:	4630      	mov	r0, r6
 80086fc:	9303      	str	r3, [sp, #12]
 80086fe:	f7ff fe87 	bl	8008410 <next_unwind_byte>
 8008702:	0603      	lsls	r3, r0, #24
 8008704:	f107 0707 	add.w	r7, r7, #7
 8008708:	d4f2      	bmi.n	80086f0 <__gnu_unwind_execute+0x288>
 800870a:	9b03      	ldr	r3, [sp, #12]
 800870c:	f8cd 9000 	str.w	r9, [sp]
 8008710:	f000 047f 	and.w	r4, r0, #127	; 0x7f
 8008714:	f503 7201 	add.w	r2, r3, #516	; 0x204
 8008718:	40bc      	lsls	r4, r7
 800871a:	2300      	movs	r3, #0
 800871c:	4414      	add	r4, r2
 800871e:	4619      	mov	r1, r3
 8008720:	220d      	movs	r2, #13
 8008722:	4628      	mov	r0, r5
 8008724:	9403      	str	r4, [sp, #12]
 8008726:	f7ff fa91 	bl	8007c4c <_Unwind_VRS_Set>
 800872a:	e6a4      	b.n	8008476 <__gnu_unwind_execute+0xe>

0800872c <__gnu_unwind_frame>:
 800872c:	b510      	push	{r4, lr}
 800872e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008730:	b084      	sub	sp, #16
 8008732:	685a      	ldr	r2, [r3, #4]
 8008734:	2003      	movs	r0, #3
 8008736:	f88d 000c 	strb.w	r0, [sp, #12]
 800873a:	79dc      	ldrb	r4, [r3, #7]
 800873c:	f88d 400d 	strb.w	r4, [sp, #13]
 8008740:	0212      	lsls	r2, r2, #8
 8008742:	3308      	adds	r3, #8
 8008744:	4608      	mov	r0, r1
 8008746:	a901      	add	r1, sp, #4
 8008748:	9201      	str	r2, [sp, #4]
 800874a:	9302      	str	r3, [sp, #8]
 800874c:	f7ff fe8c 	bl	8008468 <__gnu_unwind_execute>
 8008750:	b004      	add	sp, #16
 8008752:	bd10      	pop	{r4, pc}

08008754 <_Unwind_GetRegionStart>:
 8008754:	b508      	push	{r3, lr}
 8008756:	f7ff fe85 	bl	8008464 <unwind_UCB_from_context>
 800875a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800875c:	bd08      	pop	{r3, pc}
 800875e:	bf00      	nop

08008760 <_Unwind_GetLanguageSpecificData>:
 8008760:	b508      	push	{r3, lr}
 8008762:	f7ff fe7f 	bl	8008464 <unwind_UCB_from_context>
 8008766:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8008768:	79c3      	ldrb	r3, [r0, #7]
 800876a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800876e:	3008      	adds	r0, #8
 8008770:	bd08      	pop	{r3, pc}
 8008772:	bf00      	nop

08008774 <_Unwind_GetDataRelBase>:
 8008774:	b508      	push	{r3, lr}
 8008776:	f025 fd6f 	bl	802e258 <abort>
 800877a:	bf00      	nop

0800877c <_Unwind_GetTextRelBase>:
 800877c:	b508      	push	{r3, lr}
 800877e:	f7ff fff9 	bl	8008774 <_Unwind_GetDataRelBase>
 8008782:	bf00      	nop

08008784 <__aeabi_idiv0>:
 8008784:	4770      	bx	lr
 8008786:	bf00      	nop

08008788 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8008788:	f8df d034 	ldr.w	sp, [pc, #52]	; 80087c0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800878c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800878e:	e003      	b.n	8008798 <LoopCopyDataInit>

08008790 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008790:	4b0c      	ldr	r3, [pc, #48]	; (80087c4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008792:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008794:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008796:	3104      	adds	r1, #4

08008798 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008798:	480b      	ldr	r0, [pc, #44]	; (80087c8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800879a:	4b0c      	ldr	r3, [pc, #48]	; (80087cc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800879c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800879e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80087a0:	d3f6      	bcc.n	8008790 <CopyDataInit>
  ldr  r2, =_sbss
 80087a2:	4a0b      	ldr	r2, [pc, #44]	; (80087d0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80087a4:	e002      	b.n	80087ac <LoopFillZerobss>

080087a6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80087a6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80087a8:	f842 3b04 	str.w	r3, [r2], #4

080087ac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80087ac:	4b09      	ldr	r3, [pc, #36]	; (80087d4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80087ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80087b0:	d3f9      	bcc.n	80087a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80087b2:	f009 fb6d 	bl	8011e90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80087b6:	f025 fe79 	bl	802e4ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80087ba:	f002 f9ff 	bl	800abbc <main>
  bx  lr    
 80087be:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80087c0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80087c4:	0807b3cc 	.word	0x0807b3cc
  ldr  r0, =_sdata
 80087c8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80087cc:	2000017c 	.word	0x2000017c
  ldr  r2, =_sbss
 80087d0:	2000017c 	.word	0x2000017c
  ldr  r3, = _ebss
 80087d4:	200130bc 	.word	0x200130bc

080087d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80087d8:	e7fe      	b.n	80087d8 <ADC_IRQHandler>

080087da <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 80087de:	f001 fdcb 	bl	800a378 <touchgfx_init>
}
 80087e2:	bf00      	nop
 80087e4:	bd80      	pop	{r7, pc}

080087e6 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 80087e6:	b580      	push	{r7, lr}
 80087e8:	b082      	sub	sp, #8
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 80087ee:	f001 fded 	bl	800a3cc <touchgfx_taskEntry>
}
 80087f2:	bf00      	nop
 80087f4:	3708      	adds	r7, #8
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
	...

080087fc <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
    {
 8008804:	4a04      	ldr	r2, [pc, #16]	; (8008818 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	601a      	str	r2, [r3, #0]
    }
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4618      	mov	r0, r3
 800880e:	370c      	adds	r7, #12
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr
 8008818:	08030990 	.word	0x08030990

0800881c <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
    }
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f7ff ffe9 	bl	80087fc <_ZN8touchgfx15TouchControllerD1Ev>
 800882a:	2104      	movs	r1, #4
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f024 fc4d 	bl	802d0cc <_ZdlPvj>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	4618      	mov	r0, r3
 8008836:	3708      	adds	r7, #8
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <_ZN20STM32TouchController4initEv>:

uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize);
void    BSP_TS_GetState(TS_StateTypeDef* TsState);

void STM32TouchController::init()
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
    BSP_TS_Init(240, 320);
 8008844:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008848:	20f0      	movs	r0, #240	; 0xf0
 800884a:	f000 f821 	bl	8008890 <_Z11BSP_TS_Inittt>
}
 800884e:	bf00      	nop
 8008850:	3708      	adds	r7, #8
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b086      	sub	sp, #24
 800885a:	af00      	add	r7, sp, #0
 800885c:	60f8      	str	r0, [r7, #12]
 800885e:	60b9      	str	r1, [r7, #8]
 8008860:	607a      	str	r2, [r7, #4]
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    TS_StateTypeDef state;
    BSP_TS_GetState(&state);
 8008862:	f107 0310 	add.w	r3, r7, #16
 8008866:	4618      	mov	r0, r3
 8008868:	f000 f850 	bl	800890c <_Z15BSP_TS_GetStateP15TS_StateTypeDef>
    if (state.TouchDetected)
 800886c:	8a3b      	ldrh	r3, [r7, #16]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d009      	beq.n	8008886 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>
    {
        x = state.X;
 8008872:	8a7b      	ldrh	r3, [r7, #18]
 8008874:	461a      	mov	r2, r3
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	601a      	str	r2, [r3, #0]
        y = state.Y;
 800887a:	8abb      	ldrh	r3, [r7, #20]
 800887c:	461a      	mov	r2, r3
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	601a      	str	r2, [r3, #0]
        return true;
 8008882:	2301      	movs	r3, #1
 8008884:	e000      	b.n	8008888 <_ZN20STM32TouchController11sampleTouchERlS0_+0x32>
    }
    return false;
 8008886:	2300      	movs	r3, #0
}
 8008888:	4618      	mov	r0, r3
 800888a:	3718      	adds	r7, #24
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <_Z11BSP_TS_Inittt>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	4603      	mov	r3, r0
 8008898:	460a      	mov	r2, r1
 800889a:	80fb      	strh	r3, [r7, #6]
 800889c:	4613      	mov	r3, r2
 800889e:	80bb      	strh	r3, [r7, #4]
    uint8_t ret = TS_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	73fb      	strb	r3, [r7, #15]

    /* Initialize x and y positions boundaries */
    TsXBoundary = XSize;
 80088a4:	4a15      	ldr	r2, [pc, #84]	; (80088fc <_Z11BSP_TS_Inittt+0x6c>)
 80088a6:	88fb      	ldrh	r3, [r7, #6]
 80088a8:	8013      	strh	r3, [r2, #0]
    TsYBoundary = YSize;
 80088aa:	4a15      	ldr	r2, [pc, #84]	; (8008900 <_Z11BSP_TS_Inittt+0x70>)
 80088ac:	88bb      	ldrh	r3, [r7, #4]
 80088ae:	8013      	strh	r3, [r2, #0]

    /* Read ID and verify if the IO expander is ready */
    if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80088b0:	4b14      	ldr	r3, [pc, #80]	; (8008904 <_Z11BSP_TS_Inittt+0x74>)
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	2082      	movs	r0, #130	; 0x82
 80088b6:	4798      	blx	r3
 80088b8:	4603      	mov	r3, r0
 80088ba:	461a      	mov	r2, r3
 80088bc:	f640 0311 	movw	r3, #2065	; 0x811
 80088c0:	429a      	cmp	r2, r3
 80088c2:	bf0c      	ite	eq
 80088c4:	2301      	moveq	r3, #1
 80088c6:	2300      	movne	r3, #0
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d004      	beq.n	80088d8 <_Z11BSP_TS_Inittt+0x48>
    {
        /* Initialize the TS driver structure */
        TsDrv = &stmpe811_ts_drv;
 80088ce:	4b0e      	ldr	r3, [pc, #56]	; (8008908 <_Z11BSP_TS_Inittt+0x78>)
 80088d0:	4a0c      	ldr	r2, [pc, #48]	; (8008904 <_Z11BSP_TS_Inittt+0x74>)
 80088d2:	601a      	str	r2, [r3, #0]

        ret = TS_OK;
 80088d4:	2300      	movs	r3, #0
 80088d6:	73fb      	strb	r3, [r7, #15]
    }

    if (ret == TS_OK)
 80088d8:	7bfb      	ldrb	r3, [r7, #15]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d109      	bne.n	80088f2 <_Z11BSP_TS_Inittt+0x62>
    {
        /* Initialize the LL TS Driver */
        TsDrv->Init(TS_I2C_ADDRESS);
 80088de:	4b0a      	ldr	r3, [pc, #40]	; (8008908 <_Z11BSP_TS_Inittt+0x78>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	2082      	movs	r0, #130	; 0x82
 80088e6:	4798      	blx	r3
        TsDrv->Start(TS_I2C_ADDRESS);
 80088e8:	4b07      	ldr	r3, [pc, #28]	; (8008908 <_Z11BSP_TS_Inittt+0x78>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	2082      	movs	r0, #130	; 0x82
 80088f0:	4798      	blx	r3
    }

    return ret;
 80088f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3710      	adds	r7, #16
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	2000019c 	.word	0x2000019c
 8008900:	2000019e 	.word	0x2000019e
 8008904:	20000064 	.word	0x20000064
 8008908:	20000198 	.word	0x20000198

0800890c <_Z15BSP_TS_GetStateP15TS_StateTypeDef>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b086      	sub	sp, #24
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
    static uint32_t _x = 0, _y = 0;
    uint16_t xDiff, yDiff, x, y, xr, yr;

    TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8008914:	4b4f      	ldr	r3, [pc, #316]	; (8008a54 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x148>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	691b      	ldr	r3, [r3, #16]
 800891a:	2082      	movs	r0, #130	; 0x82
 800891c:	4798      	blx	r3
 800891e:	4603      	mov	r3, r0
 8008920:	b29a      	uxth	r2, r3
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	801a      	strh	r2, [r3, #0]

    if (TsState->TouchDetected)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	881b      	ldrh	r3, [r3, #0]
 800892a:	2b00      	cmp	r3, #0
 800892c:	f000 808d 	beq.w	8008a4a <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x13e>
    {
        TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8008930:	4b48      	ldr	r3, [pc, #288]	; (8008a54 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x148>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	695b      	ldr	r3, [r3, #20]
 8008936:	f107 020c 	add.w	r2, r7, #12
 800893a:	f107 010e 	add.w	r1, r7, #14
 800893e:	2082      	movs	r0, #130	; 0x82
 8008940:	4798      	blx	r3

        /* Y value first correction */
        y -= 360;
 8008942:	89bb      	ldrh	r3, [r7, #12]
 8008944:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8008948:	b29b      	uxth	r3, r3
 800894a:	81bb      	strh	r3, [r7, #12]

        /* Y value second correction */
        yr = y / 11;
 800894c:	89bb      	ldrh	r3, [r7, #12]
 800894e:	4a42      	ldr	r2, [pc, #264]	; (8008a58 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x14c>)
 8008950:	fba2 2303 	umull	r2, r3, r2, r3
 8008954:	08db      	lsrs	r3, r3, #3
 8008956:	82bb      	strh	r3, [r7, #20]

        /* Return y position value */
        if (yr <= 0)
 8008958:	8abb      	ldrh	r3, [r7, #20]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d102      	bne.n	8008964 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x58>
        {
            yr = 0;
 800895e:	2300      	movs	r3, #0
 8008960:	82bb      	strh	r3, [r7, #20]
 8008962:	e008      	b.n	8008976 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x6a>
        }
        else if (yr > TsYBoundary)
 8008964:	4b3d      	ldr	r3, [pc, #244]	; (8008a5c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x150>)
 8008966:	881b      	ldrh	r3, [r3, #0]
 8008968:	8aba      	ldrh	r2, [r7, #20]
 800896a:	429a      	cmp	r2, r3
 800896c:	d903      	bls.n	8008976 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x6a>
        {
            yr = TsYBoundary - 1;
 800896e:	4b3b      	ldr	r3, [pc, #236]	; (8008a5c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x150>)
 8008970:	881b      	ldrh	r3, [r3, #0]
 8008972:	3b01      	subs	r3, #1
 8008974:	82bb      	strh	r3, [r7, #20]
        }
        else
        {}
        y = yr;
 8008976:	8abb      	ldrh	r3, [r7, #20]
 8008978:	81bb      	strh	r3, [r7, #12]

        /* X value first correction */
        if (x <= 3000)
 800897a:	89fb      	ldrh	r3, [r7, #14]
 800897c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8008980:	4293      	cmp	r3, r2
 8008982:	d806      	bhi.n	8008992 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x86>
        {
            x = 3870 - x;
 8008984:	89fb      	ldrh	r3, [r7, #14]
 8008986:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 800898a:	330e      	adds	r3, #14
 800898c:	b29b      	uxth	r3, r3
 800898e:	81fb      	strh	r3, [r7, #14]
 8008990:	e005      	b.n	800899e <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x92>
        }
        else
        {
            x = 3800 - x;
 8008992:	89fb      	ldrh	r3, [r7, #14]
 8008994:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 8008998:	3308      	adds	r3, #8
 800899a:	b29b      	uxth	r3, r3
 800899c:	81fb      	strh	r3, [r7, #14]
        }

        /* X value second correction */
        xr = x / 15;
 800899e:	89fb      	ldrh	r3, [r7, #14]
 80089a0:	4a2f      	ldr	r2, [pc, #188]	; (8008a60 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x154>)
 80089a2:	fba2 2303 	umull	r2, r3, r2, r3
 80089a6:	08db      	lsrs	r3, r3, #3
 80089a8:	82fb      	strh	r3, [r7, #22]

        /* Return X position value */
        if (xr <= 0)
 80089aa:	8afb      	ldrh	r3, [r7, #22]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d102      	bne.n	80089b6 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xaa>
        {
            xr = 0;
 80089b0:	2300      	movs	r3, #0
 80089b2:	82fb      	strh	r3, [r7, #22]
 80089b4:	e008      	b.n	80089c8 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xbc>
        }
        else if (xr > TsXBoundary)
 80089b6:	4b2b      	ldr	r3, [pc, #172]	; (8008a64 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x158>)
 80089b8:	881b      	ldrh	r3, [r3, #0]
 80089ba:	8afa      	ldrh	r2, [r7, #22]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d903      	bls.n	80089c8 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xbc>
        {
            xr = TsXBoundary - 1;
 80089c0:	4b28      	ldr	r3, [pc, #160]	; (8008a64 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x158>)
 80089c2:	881b      	ldrh	r3, [r3, #0]
 80089c4:	3b01      	subs	r3, #1
 80089c6:	82fb      	strh	r3, [r7, #22]
        }
        else
        {}

        x = xr;
 80089c8:	8afb      	ldrh	r3, [r7, #22]
 80089ca:	81fb      	strh	r3, [r7, #14]
        xDiff = x > _x ? (x - _x) : (_x - x);
 80089cc:	89fb      	ldrh	r3, [r7, #14]
 80089ce:	461a      	mov	r2, r3
 80089d0:	4b25      	ldr	r3, [pc, #148]	; (8008a68 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x15c>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d906      	bls.n	80089e6 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xda>
 80089d8:	89fa      	ldrh	r2, [r7, #14]
 80089da:	4b23      	ldr	r3, [pc, #140]	; (8008a68 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x15c>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	b29b      	uxth	r3, r3
 80089e0:	1ad3      	subs	r3, r2, r3
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	e005      	b.n	80089f2 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xe6>
 80089e6:	4b20      	ldr	r3, [pc, #128]	; (8008a68 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x15c>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	b29a      	uxth	r2, r3
 80089ec:	89fb      	ldrh	r3, [r7, #14]
 80089ee:	1ad3      	subs	r3, r2, r3
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	827b      	strh	r3, [r7, #18]
        yDiff = y > _y ? (y - _y) : (_y - y);
 80089f4:	89bb      	ldrh	r3, [r7, #12]
 80089f6:	461a      	mov	r2, r3
 80089f8:	4b1c      	ldr	r3, [pc, #112]	; (8008a6c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x160>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d906      	bls.n	8008a0e <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x102>
 8008a00:	89ba      	ldrh	r2, [r7, #12]
 8008a02:	4b1a      	ldr	r3, [pc, #104]	; (8008a6c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x160>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	1ad3      	subs	r3, r2, r3
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	e005      	b.n	8008a1a <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x10e>
 8008a0e:	4b17      	ldr	r3, [pc, #92]	; (8008a6c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x160>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	b29a      	uxth	r2, r3
 8008a14:	89bb      	ldrh	r3, [r7, #12]
 8008a16:	1ad3      	subs	r3, r2, r3
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	823b      	strh	r3, [r7, #16]

        if (xDiff + yDiff > 5)
 8008a1c:	8a7a      	ldrh	r2, [r7, #18]
 8008a1e:	8a3b      	ldrh	r3, [r7, #16]
 8008a20:	4413      	add	r3, r2
 8008a22:	2b05      	cmp	r3, #5
 8008a24:	dd07      	ble.n	8008a36 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x12a>
        {
            _x = x;
 8008a26:	89fb      	ldrh	r3, [r7, #14]
 8008a28:	461a      	mov	r2, r3
 8008a2a:	4b0f      	ldr	r3, [pc, #60]	; (8008a68 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x15c>)
 8008a2c:	601a      	str	r2, [r3, #0]
            _y = y;
 8008a2e:	89bb      	ldrh	r3, [r7, #12]
 8008a30:	461a      	mov	r2, r3
 8008a32:	4b0e      	ldr	r3, [pc, #56]	; (8008a6c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x160>)
 8008a34:	601a      	str	r2, [r3, #0]
        }

        /* Update the X position */
        TsState->X = _x;
 8008a36:	4b0c      	ldr	r3, [pc, #48]	; (8008a68 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x15c>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	b29a      	uxth	r2, r3
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	805a      	strh	r2, [r3, #2]

        /* Update the Y position */
        TsState->Y = _y;
 8008a40:	4b0a      	ldr	r3, [pc, #40]	; (8008a6c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x160>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	b29a      	uxth	r2, r3
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	809a      	strh	r2, [r3, #4]
    }
}
 8008a4a:	bf00      	nop
 8008a4c:	3718      	adds	r7, #24
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	20000198 	.word	0x20000198
 8008a58:	ba2e8ba3 	.word	0xba2e8ba3
 8008a5c:	2000019e 	.word	0x2000019e
 8008a60:	88888889 	.word	0x88888889
 8008a64:	2000019c 	.word	0x2000019c
 8008a68:	200001a0 	.word	0x200001a0
 8008a6c:	200001a4 	.word	0x200001a4

08008a70 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	4a05      	ldr	r2, [pc, #20]	; (8008a90 <_ZN20STM32TouchControllerD1Ev+0x20>)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	601a      	str	r2, [r3, #0]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	4618      	mov	r0, r3
 8008a82:	f7ff febb 	bl	80087fc <_ZN8touchgfx15TouchControllerD1Ev>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3708      	adds	r7, #8
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}
 8008a90:	08030978 	.word	0x08030978

08008a94 <_ZN20STM32TouchControllerD0Ev>:
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b082      	sub	sp, #8
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f7ff ffe7 	bl	8008a70 <_ZN20STM32TouchControllerD1Ev>
 8008aa2:	2104      	movs	r1, #4
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f024 fb11 	bl	802d0cc <_ZdlPvj>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	4618      	mov	r0, r3
 8008aae:	3708      	adds	r7, #8
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	4603      	mov	r3, r0
 8008abc:	71fb      	strb	r3, [r7, #7]

}
 8008abe:	bf00      	nop
 8008ac0:	370c      	adds	r7, #12
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr

08008aca <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8008aca:	b480      	push	{r7}
 8008acc:	b083      	sub	sp, #12
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	71fb      	strb	r3, [r7, #7]

}
 8008ad4:	bf00      	nop
 8008ad6:	370c      	adds	r7, #12
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b083      	sub	sp, #12
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	71fb      	strb	r3, [r7, #7]

}
 8008aea:	bf00      	nop
 8008aec:	370c      	adds	r7, #12
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr
	...

08008af8 <_ZN8touchgfx3HALD1Ev>:
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
    }

    /** Finalizes an instance of the HAL class. */
    virtual ~HAL()
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
    {
 8008b00:	4a04      	ldr	r2, [pc, #16]	; (8008b14 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	601a      	str	r2, [r3, #0]
    }
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	4618      	mov	r0, r3
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr
 8008b14:	08032a0c 	.word	0x08032a0c

08008b18 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
    }
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f7ff ffe9 	bl	8008af8 <_ZN8touchgfx3HALD1Ev>
 8008b26:	2178      	movs	r1, #120	; 0x78
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f024 facf 	bl	802d0cc <_ZdlPvj>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	4618      	mov	r0, r3
 8008b32:	3708      	adds	r7, #8
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	460b      	mov	r3, r1
 8008b42:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	78fa      	ldrb	r2, [r7, #3]
 8008b48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8008b54:	bf00      	nop
 8008b56:	370c      	adds	r7, #12
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr

08008b60 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 8008b60:	b480      	push	{r7}
 8008b62:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8008b64:	4b0b      	ldr	r3, [pc, #44]	; (8008b94 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d008      	beq.n	8008b82 <_ZN8touchgfx3HAL3lcdEv+0x22>
 8008b70:	4b08      	ldr	r3, [pc, #32]	; (8008b94 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d003      	beq.n	8008b82 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 8008b7a:	4b06      	ldr	r3, [pc, #24]	; (8008b94 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b80:	e002      	b.n	8008b88 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 8008b82:	4b04      	ldr	r3, [pc, #16]	; (8008b94 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	689b      	ldr	r3, [r3, #8]
        }
    }
 8008b88:	4618      	mov	r0, r3
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr
 8008b92:	bf00      	nop
 8008b94:	200128a4 	.word	0x200128a4

08008b98 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d009      	beq.n	8008bbe <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	685a      	ldr	r2, [r3, #4]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4610      	mov	r0, r2
 8008bb8:	4798      	blx	r3
 8008bba:	4603      	mov	r3, r0
 8008bbc:	e000      	b.n	8008bc0 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        else
        {
            return static_cast<BlitOperations>(0);
 8008bbe:	2300      	movs	r3, #0
        }
    }
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3708      	adds	r7, #8
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f014 fba3 	bl	801d31c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	3394      	adds	r3, #148	; 0x94
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	4798      	blx	r3
    }
 8008be2:	bf00      	nop
 8008be4:	3708      	adds	r7, #8
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}

08008bea <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8008bea:	b480      	push	{r7}
 8008bec:	b083      	sub	sp, #12
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
 8008bf2:	6039      	str	r1, [r7, #0]
    {
        return false;
 8008bf4:	2300      	movs	r3, #0
    }
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	370c      	adds	r7, #12
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr
	...

08008c04 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
     * @param      useAnimationStorage (Optional) If true, reserve memory for animation
     *                                 storage.
     *
     * @deprecated Use HAL::setFrameBufferStartAddresses(void*,void*,void*).
     */
    TOUCHGFX_DEPRECATED(
 8008c04:	b590      	push	{r4, r7, lr}
 8008c06:	b08b      	sub	sp, #44	; 0x2c
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	4611      	mov	r1, r2
 8008c10:	461a      	mov	r2, r3
 8008c12:	460b      	mov	r3, r1
 8008c14:	80fb      	strh	r3, [r7, #6]
 8008c16:	4613      	mov	r3, r2
 8008c18:	717b      	strb	r3, [r7, #5]
        "Use HAL::setFrameBufferStartAddresses(void*,void*,void*).",
        virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true))
    {
        uint16_t stride = lcd().framebufferStride();
 8008c1a:	f7ff ffa1 	bl	8008b60 <_ZN8touchgfx3HAL3lcdEv>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	6813      	ldr	r3, [r2, #0]
 8008c22:	3324      	adds	r3, #36	; 0x24
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4610      	mov	r0, r2
 8008c28:	4798      	blx	r3
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 8008c2e:	8b7b      	ldrh	r3, [r7, #26]
 8008c30:	4a3d      	ldr	r2, [pc, #244]	; (8008d28 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 8008c32:	8812      	ldrh	r2, [r2, #0]
 8008c34:	fb02 f303 	mul.w	r3, r2, r3
 8008c38:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 8008c42:	2300      	movs	r3, #0
 8008c44:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 8008c46:	797b      	ldrb	r3, [r7, #5]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d005      	beq.n	8008c58 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 8008c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	4413      	add	r3, r2
 8008c52:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 8008c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c56:	623b      	str	r3, [r7, #32]
        }
        if (useAnimationStorage)
 8008c58:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d005      	beq.n	8008c6c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 8008c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	4413      	add	r3, r2
 8008c66:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 8008c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6a:	61fb      	str	r3, [r7, #28]
        }
        switch (depth)
 8008c6c:	88fb      	ldrh	r3, [r7, #6]
 8008c6e:	3b01      	subs	r3, #1
 8008c70:	2b1f      	cmp	r3, #31
 8008c72:	d84d      	bhi.n	8008d10 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 8008c74:	a201      	add	r2, pc, #4	; (adr r2, 8008c7c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 8008c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c7a:	bf00      	nop
 8008c7c:	08008cfd 	.word	0x08008cfd
 8008c80:	08008cfd 	.word	0x08008cfd
 8008c84:	08008d11 	.word	0x08008d11
 8008c88:	08008cfd 	.word	0x08008cfd
 8008c8c:	08008d11 	.word	0x08008d11
 8008c90:	08008d11 	.word	0x08008d11
 8008c94:	08008d11 	.word	0x08008d11
 8008c98:	08008cfd 	.word	0x08008cfd
 8008c9c:	08008d11 	.word	0x08008d11
 8008ca0:	08008d11 	.word	0x08008d11
 8008ca4:	08008d11 	.word	0x08008d11
 8008ca8:	08008d11 	.word	0x08008d11
 8008cac:	08008d11 	.word	0x08008d11
 8008cb0:	08008d11 	.word	0x08008d11
 8008cb4:	08008d11 	.word	0x08008d11
 8008cb8:	08008cfd 	.word	0x08008cfd
 8008cbc:	08008d11 	.word	0x08008d11
 8008cc0:	08008d11 	.word	0x08008d11
 8008cc4:	08008d11 	.word	0x08008d11
 8008cc8:	08008d11 	.word	0x08008d11
 8008ccc:	08008d11 	.word	0x08008d11
 8008cd0:	08008d11 	.word	0x08008d11
 8008cd4:	08008d11 	.word	0x08008d11
 8008cd8:	08008cfd 	.word	0x08008cfd
 8008cdc:	08008d11 	.word	0x08008d11
 8008ce0:	08008d11 	.word	0x08008d11
 8008ce4:	08008d11 	.word	0x08008d11
 8008ce8:	08008d11 	.word	0x08008d11
 8008cec:	08008d11 	.word	0x08008d11
 8008cf0:	08008d11 	.word	0x08008d11
 8008cf4:	08008d11 	.word	0x08008d11
 8008cf8:	08008cfd 	.word	0x08008cfd
        case 16:
        case 8:
        case 4:
        case 2:
        case 1:
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	3374      	adds	r3, #116	; 0x74
 8008d02:	681c      	ldr	r4, [r3, #0]
 8008d04:	69fb      	ldr	r3, [r7, #28]
 8008d06:	6a3a      	ldr	r2, [r7, #32]
 8008d08:	68b9      	ldr	r1, [r7, #8]
 8008d0a:	68f8      	ldr	r0, [r7, #12]
 8008d0c:	47a0      	blx	r4
            break;
 8008d0e:	e006      	b.n	8008d1e <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
        default:
            assert(0 && "Unsupported bit depth");
 8008d10:	4b06      	ldr	r3, [pc, #24]	; (8008d2c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 8008d12:	4a07      	ldr	r2, [pc, #28]	; (8008d30 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 8008d14:	f240 2189 	movw	r1, #649	; 0x289
 8008d18:	4806      	ldr	r0, [pc, #24]	; (8008d34 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 8008d1a:	f025 faa5 	bl	802e268 <__assert_func>
            break;
        }
    }
 8008d1e:	bf00      	nop
 8008d20:	372c      	adds	r7, #44	; 0x2c
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd90      	pop	{r4, r7, pc}
 8008d26:	bf00      	nop
 8008d28:	200128a0 	.word	0x200128a0
 8008d2c:	0802f8e8 	.word	0x0802f8e8
 8008d30:	08030aa8 	.word	0x08030aa8
 8008d34:	0802f908 	.word	0x0802f908

08008d38 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	607a      	str	r2, [r7, #4]
 8008d44:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d106      	bne.n	8008d5a <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8008d4c:	4b11      	ldr	r3, [pc, #68]	; (8008d94 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8008d4e:	4a12      	ldr	r2, [pc, #72]	; (8008d98 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8008d50:	f44f 7127 	mov.w	r1, #668	; 0x29c
 8008d54:	4811      	ldr	r0, [pc, #68]	; (8008d9c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8008d56:	f025 fa87 	bl	802e268 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	68ba      	ldr	r2, [r7, #8]
 8008d5e:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	683a      	ldr	r2, [r7, #0]
 8008d6a:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	bf14      	ite	ne
 8008d72:	2301      	movne	r3, #1
 8008d74:	2300      	moveq	r3, #0
 8008d76:	b2da      	uxtb	r2, r3
 8008d78:	4b09      	ldr	r3, [pc, #36]	; (8008da0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8008d7a:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	bf14      	ite	ne
 8008d82:	2301      	movne	r3, #1
 8008d84:	2300      	moveq	r3, #0
 8008d86:	b2da      	uxtb	r2, r3
 8008d88:	4b06      	ldr	r3, [pc, #24]	; (8008da4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8008d8a:	701a      	strb	r2, [r3, #0]
    }
 8008d8c:	bf00      	nop
 8008d8e:	3710      	adds	r7, #16
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}
 8008d94:	0802f950 	.word	0x0802f950
 8008d98:	08030a58 	.word	0x08030a58
 8008d9c:	0802f908 	.word	0x0802f908
 8008da0:	200128a2 	.word	0x200128a2
 8008da4:	200128a3 	.word	0x200128a3

08008da8 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8008db0:	2300      	movs	r3, #0
    }
 8008db2:	4618      	mov	r0, r3
 8008db4:	370c      	adds	r7, #12
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr

08008dbe <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b082      	sub	sp, #8
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d004      	beq.n	8008ddc <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd6:	887a      	ldrh	r2, [r7, #2]
 8008dd8:	4610      	mov	r0, r2
 8008dda:	4798      	blx	r3
        }
    }
 8008ddc:	bf00      	nop
 8008dde:	3708      	adds	r7, #8
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 8008dec:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 8008df0:	4618      	mov	r0, r3
 8008df2:	370c      	adds	r7, #12
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b082      	sub	sp, #8
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	685a      	ldr	r2, [r3, #4]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	3318      	adds	r3, #24
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4610      	mov	r0, r2
 8008e14:	4798      	blx	r3
 8008e16:	4603      	mov	r3, r0
    }
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8008e20:	b480      	push	{r7}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d017      	beq.n	8008e68 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8008e38:	4b1a      	ldr	r3, [pc, #104]	; (8008ea4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d12a      	bne.n	8008e96 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8008e40:	4b19      	ldr	r3, [pc, #100]	; (8008ea8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8008e42:	881a      	ldrh	r2, [r3, #0]
 8008e44:	4b19      	ldr	r3, [pc, #100]	; (8008eac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8008e46:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8008e48:	4b19      	ldr	r3, [pc, #100]	; (8008eb0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8008e4a:	881a      	ldrh	r2, [r3, #0]
 8008e4c:	4b19      	ldr	r3, [pc, #100]	; (8008eb4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8008e4e:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8008e50:	4b16      	ldr	r3, [pc, #88]	; (8008eac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8008e52:	881a      	ldrh	r2, [r3, #0]
 8008e54:	4b16      	ldr	r3, [pc, #88]	; (8008eb0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8008e56:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8008e58:	4b16      	ldr	r3, [pc, #88]	; (8008eb4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8008e5a:	881a      	ldrh	r2, [r3, #0]
 8008e5c:	4b12      	ldr	r3, [pc, #72]	; (8008ea8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8008e5e:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8008e60:	4b10      	ldr	r3, [pc, #64]	; (8008ea4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8008e62:	2201      	movs	r2, #1
 8008e64:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8008e66:	e016      	b.n	8008e96 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8008e68:	4b0e      	ldr	r3, [pc, #56]	; (8008ea4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d012      	beq.n	8008e96 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8008e70:	4b0f      	ldr	r3, [pc, #60]	; (8008eb0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8008e72:	881a      	ldrh	r2, [r3, #0]
 8008e74:	4b0d      	ldr	r3, [pc, #52]	; (8008eac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8008e76:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8008e78:	4b0b      	ldr	r3, [pc, #44]	; (8008ea8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8008e7a:	881a      	ldrh	r2, [r3, #0]
 8008e7c:	4b0d      	ldr	r3, [pc, #52]	; (8008eb4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8008e7e:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8008e80:	4b0c      	ldr	r3, [pc, #48]	; (8008eb4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8008e82:	881a      	ldrh	r2, [r3, #0]
 8008e84:	4b0a      	ldr	r3, [pc, #40]	; (8008eb0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8008e86:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8008e88:	4b08      	ldr	r3, [pc, #32]	; (8008eac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8008e8a:	881a      	ldrh	r2, [r3, #0]
 8008e8c:	4b06      	ldr	r3, [pc, #24]	; (8008ea8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8008e8e:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8008e90:	4b04      	ldr	r3, [pc, #16]	; (8008ea4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8008e92:	2200      	movs	r2, #0
 8008e94:	701a      	strb	r2, [r3, #0]
    }
 8008e96:	bf00      	nop
 8008e98:	370c      	adds	r7, #12
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr
 8008ea2:	bf00      	nop
 8008ea4:	2001289c 	.word	0x2001289c
 8008ea8:	20012898 	.word	0x20012898
 8008eac:	2001289e 	.word	0x2001289e
 8008eb0:	2001289a 	.word	0x2001289a
 8008eb4:	200128a0 	.word	0x200128a0

08008eb8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f013 fcad 	bl	801c822 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8008ec8:	bf00      	nop
 8008eca:	3708      	adds	r7, #8
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	4a05      	ldr	r2, [pc, #20]	; (8008ef0 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	601a      	str	r2, [r3, #0]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f7ff fe09 	bl	8008af8 <_ZN8touchgfx3HALD1Ev>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3708      	adds	r7, #8
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	08030ebc 	.word	0x08030ebc

08008ef4 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f7ff ffe7 	bl	8008ed0 <_ZN20TouchGFXGeneratedHALD1Ev>
 8008f02:	2178      	movs	r1, #120	; 0x78
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f024 f8e1 	bl	802d0cc <_ZdlPvj>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3708      	adds	r7, #8
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7ff ffca 	bl	8008eb8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8008f24:	bf00      	nop
 8008f26:	3708      	adds	r7, #8
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <_ZN11TouchGFXHAL10initializeEv>:
}

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	4618      	mov	r0, r3
 8008f38:	f001 fd4a 	bl	800a9d0 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8008f3c:	bf00      	nop
 8008f3e:	3708      	adds	r7, #8
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b082      	sub	sp, #8
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
    enableLCDControllerInterrupt();
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	3368      	adds	r3, #104	; 0x68
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	4798      	blx	r3
    enableInterrupts();
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	3360      	adds	r3, #96	; 0x60
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	4798      	blx	r3

    OSWrappers::waitForVSync();
 8008f64:	f000 f936 	bl	80091d4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	3358      	adds	r3, #88	; 0x58
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4610      	mov	r0, r2
 8008f74:	4798      	blx	r3

    LCD_IO_WriteReg(0x29);
 8008f76:	2029      	movs	r0, #41	; 0x29
 8008f78:	f002 facc 	bl	800b514 <LCD_IO_WriteReg>

    for (;;)
    {
        OSWrappers::waitForVSync();
 8008f7c:	f000 f92a 	bl	80091d4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	3358      	adds	r3, #88	; 0x58
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4610      	mov	r0, r2
 8008f8c:	4798      	blx	r3
        OSWrappers::waitForVSync();
 8008f8e:	e7f5      	b.n	8008f7c <_ZN11TouchGFXHAL9taskEntryEv+0x38>

08008f90 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f001 fd9c 	bl	800aad8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8008fa0:	4603      	mov	r3, r0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3708      	adds	r7, #8
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b082      	sub	sp, #8
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
 8008fb2:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6839      	ldr	r1, [r7, #0]
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f001 fd9b 	bl	800aaf4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8008fbe:	bf00      	nop
 8008fc0:	3708      	adds	r7, #8
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b082      	sub	sp, #8
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
 8008fce:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6839      	ldr	r1, [r7, #0]
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f001 fda3 	bl	800ab20 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8008fda:	bf00      	nop
 8008fdc:	3708      	adds	r7, #8
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}

08008fe2 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8008fe2:	b580      	push	{r7, lr}
 8008fe4:	b082      	sub	sp, #8
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	4618      	mov	r0, r3
 8008fee:	f001 fd19 	bl	800aa24 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8008ff2:	bf00      	nop
 8008ff4:	3708      	adds	r7, #8
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8008ffa:	b580      	push	{r7, lr}
 8008ffc:	b082      	sub	sp, #8
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	4618      	mov	r0, r3
 8009006:	f001 fd1d 	bl	800aa44 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 800900a:	bf00      	nop
 800900c:	3708      	adds	r7, #8
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8009012:	b580      	push	{r7, lr}
 8009014:	b082      	sub	sp, #8
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	4618      	mov	r0, r3
 800901e:	f001 fd1f 	bl	800aa60 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8009022:	bf00      	nop
 8009024:	3708      	adds	r7, #8
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 800902a:	b580      	push	{r7, lr}
 800902c:	b082      	sub	sp, #8
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4618      	mov	r0, r3
 8009036:	f001 fd21 	bl	800aa7c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 800903a:	bf00      	nop
 800903c:	3708      	adds	r7, #8
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
	...

08009044 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8009044:	b580      	push	{r7, lr}
 8009046:	b082      	sub	sp, #8
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	4a05      	ldr	r2, [pc, #20]	; (8009064 <_ZN11TouchGFXHALD1Ev+0x20>)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	601a      	str	r2, [r3, #0]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	4618      	mov	r0, r3
 8009056:	f7ff ff3b 	bl	8008ed0 <_ZN20TouchGFXGeneratedHALD1Ev>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	4618      	mov	r0, r3
 800905e:	3708      	adds	r7, #8
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}
 8009064:	080309a8 	.word	0x080309a8

08009068 <_ZN11TouchGFXHALD0Ev>:
 8009068:	b580      	push	{r7, lr}
 800906a:	b082      	sub	sp, #8
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f7ff ffe7 	bl	8009044 <_ZN11TouchGFXHALD1Ev>
 8009076:	2178      	movs	r1, #120	; 0x78
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f024 f827 	bl	802d0cc <_ZdlPvj>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	4618      	mov	r0, r3
 8009082:	3708      	adds	r7, #8
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8009088:	b580      	push	{r7, lr}
 800908a:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800908c:	2200      	movs	r2, #0
 800908e:	2101      	movs	r1, #1
 8009090:	2001      	movs	r0, #1
 8009092:	f00e fae9 	bl	8017668 <osSemaphoreNew>
 8009096:	4602      	mov	r2, r0
 8009098:	4b09      	ldr	r3, [pc, #36]	; (80090c0 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 800909a:	601a      	str	r2, [r3, #0]
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever); // take the lock
 800909c:	4b08      	ldr	r3, [pc, #32]	; (80090c0 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f04f 31ff 	mov.w	r1, #4294967295
 80090a4:	4618      	mov	r0, r3
 80090a6:	f00e fb7d 	bl	80177a4 <osSemaphoreAcquire>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 80090aa:	2200      	movs	r2, #0
 80090ac:	2104      	movs	r1, #4
 80090ae:	2001      	movs	r0, #1
 80090b0:	f00e fc36 	bl	8017920 <osMessageQueueNew>
 80090b4:	4602      	mov	r2, r0
 80090b6:	4b03      	ldr	r3, [pc, #12]	; (80090c4 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 80090b8:	601a      	str	r2, [r3, #0]
}
 80090ba:	bf00      	nop
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	200001a8 	.word	0x200001a8
 80090c4:	200001ac 	.word	0x200001ac

080090c8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	af00      	add	r7, sp, #0
    assert(frame_buffer_sem);
 80090cc:	4b09      	ldr	r3, [pc, #36]	; (80090f4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x2c>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d105      	bne.n	80090e0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>
 80090d4:	4b08      	ldr	r3, [pc, #32]	; (80090f8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x30>)
 80090d6:	4a09      	ldr	r2, [pc, #36]	; (80090fc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x34>)
 80090d8:	2131      	movs	r1, #49	; 0x31
 80090da:	4809      	ldr	r0, [pc, #36]	; (8009100 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x38>)
 80090dc:	f025 f8c4 	bl	802e268 <__assert_func>
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 80090e0:	4b04      	ldr	r3, [pc, #16]	; (80090f4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x2c>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f04f 31ff 	mov.w	r1, #4294967295
 80090e8:	4618      	mov	r0, r3
 80090ea:	f00e fb5b 	bl	80177a4 <osSemaphoreAcquire>
}
 80090ee:	bf00      	nop
 80090f0:	bd80      	pop	{r7, pc}
 80090f2:	bf00      	nop
 80090f4:	200001a8 	.word	0x200001a8
 80090f8:	0802f988 	.word	0x0802f988
 80090fc:	08030afc 	.word	0x08030afc
 8009100:	0802f99c 	.word	0x0802f99c

08009104 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8009104:	b580      	push	{r7, lr}
 8009106:	af00      	add	r7, sp, #0
    assert(frame_buffer_sem);
 8009108:	4b08      	ldr	r3, [pc, #32]	; (800912c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x28>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d105      	bne.n	800911c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>
 8009110:	4b07      	ldr	r3, [pc, #28]	; (8009130 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x2c>)
 8009112:	4a08      	ldr	r2, [pc, #32]	; (8009134 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x30>)
 8009114:	213a      	movs	r1, #58	; 0x3a
 8009116:	4808      	ldr	r0, [pc, #32]	; (8009138 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x34>)
 8009118:	f025 f8a6 	bl	802e268 <__assert_func>
    osSemaphoreRelease(frame_buffer_sem);
 800911c:	4b03      	ldr	r3, [pc, #12]	; (800912c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x28>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4618      	mov	r0, r3
 8009122:	f00e fba5 	bl	8017870 <osSemaphoreRelease>
}
 8009126:	bf00      	nop
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	200001a8 	.word	0x200001a8
 8009130:	0802f988 	.word	0x0802f988
 8009134:	08030b3c 	.word	0x08030b3c
 8009138:	0802f99c 	.word	0x0802f99c

0800913c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 800913c:	b580      	push	{r7, lr}
 800913e:	af00      	add	r7, sp, #0
    assert(frame_buffer_sem);
 8009140:	4b08      	ldr	r3, [pc, #32]	; (8009164 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x28>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d105      	bne.n	8009154 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x18>
 8009148:	4b07      	ldr	r3, [pc, #28]	; (8009168 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x2c>)
 800914a:	4a08      	ldr	r2, [pc, #32]	; (800916c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x30>)
 800914c:	2147      	movs	r1, #71	; 0x47
 800914e:	4808      	ldr	r0, [pc, #32]	; (8009170 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x34>)
 8009150:	f025 f88a 	bl	802e268 <__assert_func>
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8009154:	4b03      	ldr	r3, [pc, #12]	; (8009164 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x28>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	2100      	movs	r1, #0
 800915a:	4618      	mov	r0, r3
 800915c:	f00e fb22 	bl	80177a4 <osSemaphoreAcquire>
}
 8009160:	bf00      	nop
 8009162:	bd80      	pop	{r7, pc}
 8009164:	200001a8 	.word	0x200001a8
 8009168:	0802f988 	.word	0x0802f988
 800916c:	08030b7c 	.word	0x08030b7c
 8009170:	0802f99c 	.word	0x0802f99c

08009174 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8009174:	b580      	push	{r7, lr}
 8009176:	af00      	add	r7, sp, #0
    assert(frame_buffer_sem);
 8009178:	4b08      	ldr	r3, [pc, #32]	; (800919c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x28>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d105      	bne.n	800918c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x18>
 8009180:	4b07      	ldr	r3, [pc, #28]	; (80091a0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2c>)
 8009182:	4a08      	ldr	r2, [pc, #32]	; (80091a4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x30>)
 8009184:	2154      	movs	r1, #84	; 0x54
 8009186:	4808      	ldr	r0, [pc, #32]	; (80091a8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x34>)
 8009188:	f025 f86e 	bl	802e268 <__assert_func>
    osSemaphoreRelease(frame_buffer_sem);
 800918c:	4b03      	ldr	r3, [pc, #12]	; (800919c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x28>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4618      	mov	r0, r3
 8009192:	f00e fb6d 	bl	8017870 <osSemaphoreRelease>
}
 8009196:	bf00      	nop
 8009198:	bd80      	pop	{r7, pc}
 800919a:	bf00      	nop
 800919c:	200001a8 	.word	0x200001a8
 80091a0:	0802f988 	.word	0x0802f988
 80091a4:	08030bbc 	.word	0x08030bbc
 80091a8:	0802f99c 	.word	0x0802f99c

080091ac <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	af00      	add	r7, sp, #0
    if (vsync_queue)
 80091b0:	4b06      	ldr	r3, [pc, #24]	; (80091cc <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x20>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d006      	beq.n	80091c6 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1a>
    {
        osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 80091b8:	4b04      	ldr	r3, [pc, #16]	; (80091cc <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x20>)
 80091ba:	6818      	ldr	r0, [r3, #0]
 80091bc:	2300      	movs	r3, #0
 80091be:	2200      	movs	r2, #0
 80091c0:	4903      	ldr	r1, [pc, #12]	; (80091d0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x24>)
 80091c2:	f00e fc33 	bl	8017a2c <osMessageQueuePut>
    }
}
 80091c6:	bf00      	nop
 80091c8:	bd80      	pop	{r7, pc}
 80091ca:	bf00      	nop
 80091cc:	200001ac 	.word	0x200001ac
 80091d0:	20000004 	.word	0x20000004

080091d4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
    if (vsync_queue)
 80091da:	4b0b      	ldr	r3, [pc, #44]	; (8009208 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x34>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d00e      	beq.n	8009200 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>
    {
        uint32_t dummyGet;
        // First make sure the queue is empty, by trying to remove an element with 0 timeout.
        osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 80091e2:	4b09      	ldr	r3, [pc, #36]	; (8009208 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x34>)
 80091e4:	6818      	ldr	r0, [r3, #0]
 80091e6:	1d39      	adds	r1, r7, #4
 80091e8:	2300      	movs	r3, #0
 80091ea:	2200      	movs	r2, #0
 80091ec:	f00e fc92 	bl	8017b14 <osMessageQueueGet>

        // Then, wait for next VSYNC to occur.
        osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 80091f0:	4b05      	ldr	r3, [pc, #20]	; (8009208 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x34>)
 80091f2:	6818      	ldr	r0, [r3, #0]
 80091f4:	1d39      	adds	r1, r7, #4
 80091f6:	f04f 33ff 	mov.w	r3, #4294967295
 80091fa:	2200      	movs	r2, #0
 80091fc:	f00e fc8a 	bl	8017b14 <osMessageQueueGet>
    }
}
 8009200:	bf00      	nop
 8009202:	3708      	adds	r7, #8
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}
 8009208:	200001ac 	.word	0x200001ac

0800920c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	4603      	mov	r3, r0
 8009214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800921a:	2b00      	cmp	r3, #0
 800921c:	db0d      	blt.n	800923a <__NVIC_EnableIRQ+0x2e>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800921e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009222:	b2db      	uxtb	r3, r3
 8009224:	f003 021f 	and.w	r2, r3, #31
 8009228:	4907      	ldr	r1, [pc, #28]	; (8009248 <__NVIC_EnableIRQ+0x3c>)
 800922a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800922e:	095b      	lsrs	r3, r3, #5
 8009230:	2001      	movs	r0, #1
 8009232:	fa00 f202 	lsl.w	r2, r0, r2
 8009236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800923a:	bf00      	nop
 800923c:	370c      	adds	r7, #12
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop
 8009248:	e000e100 	.word	0xe000e100

0800924c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800924c:	b480      	push	{r7}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
 8009252:	4603      	mov	r3, r0
 8009254:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800925a:	2b00      	cmp	r3, #0
 800925c:	db12      	blt.n	8009284 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800925e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009262:	b2db      	uxtb	r3, r3
 8009264:	f003 021f 	and.w	r2, r3, #31
 8009268:	4909      	ldr	r1, [pc, #36]	; (8009290 <__NVIC_DisableIRQ+0x44>)
 800926a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800926e:	095b      	lsrs	r3, r3, #5
 8009270:	2001      	movs	r0, #1
 8009272:	fa00 f202 	lsl.w	r2, r0, r2
 8009276:	3320      	adds	r3, #32
 8009278:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800927c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009280:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8009284:	bf00      	nop
 8009286:	370c      	adds	r7, #12
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr
 8009290:	e000e100 	.word	0xe000e100

08009294 <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 8009294:	b480      	push	{r7}
 8009296:	b083      	sub	sp, #12
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
        : color(0)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	601a      	str	r2, [r3, #0]
    {
    }
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	4618      	mov	r0, r3
 80092a6:	370c      	adds	r7, #12
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr

080092b0 <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 80092b0:	b480      	push	{r7}
 80092b2:	b083      	sub	sp, #12
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
    {
        return color;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
    }
 80092bc:	4618      	mov	r0, r3
 80092be:	370c      	adds	r7, #12
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr

080092c8 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 80092c8:	b480      	push	{r7}
 80092ca:	b083      	sub	sp, #12
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
    {
 80092d0:	4a04      	ldr	r2, [pc, #16]	; (80092e4 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	601a      	str	r2, [r3, #0]
    }
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	4618      	mov	r0, r3
 80092da:	370c      	adds	r7, #12
 80092dc:	46bd      	mov	sp, r7
 80092de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e2:	4770      	bx	lr
 80092e4:	08030c58 	.word	0x08030c58

080092e8 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
    }
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f7ff ffe9 	bl	80092c8 <_ZN8touchgfx9DMA_QueueD1Ev>
 80092f6:	2104      	movs	r1, #4
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f023 fee7 	bl	802d0cc <_ZdlPvj>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	4618      	mov	r0, r3
 8009302:	3708      	adds	r7, #8
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8009308:	b580      	push	{r7, lr}
 800930a:	b082      	sub	sp, #8
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	3344      	adds	r3, #68	; 0x44
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	4798      	blx	r3
    }
 800931c:	bf00      	nop
 800931e:	3708      	adds	r7, #8
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA_Interface implementation. As
     * default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 8009324:	b480      	push	{r7}
 8009326:	b083      	sub	sp, #12
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 800932c:	2300      	movs	r3, #0
    }
 800932e:	4618      	mov	r0, r3
 8009330:	370c      	adds	r7, #12
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr
	...

0800933c <_ZN8touchgfx13DMA_InterfaceD1Ev>:

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 800933c:	b480      	push	{r7}
 800933e:	b083      	sub	sp, #12
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
    {
 8009344:	4a04      	ldr	r2, [pc, #16]	; (8009358 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	601a      	str	r2, [r3, #0]
    }
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	4618      	mov	r0, r3
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr
 8009358:	08032e54 	.word	0x08032e54

0800935c <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 800935c:	b580      	push	{r7, lr}
 800935e:	b082      	sub	sp, #8
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
    }
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f7ff ffe9 	bl	800933c <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800936a:	210c      	movs	r1, #12
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f023 fead 	bl	802d0cc <_ZdlPvj>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	4618      	mov	r0, r3
 8009376:	3708      	adds	r7, #8
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 800937c:	b480      	push	{r7}
 800937e:	b083      	sub	sp, #12
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8009386:	4a09      	ldr	r2, [pc, #36]	; (80093ac <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	601a      	str	r2, [r3, #0]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	683a      	ldr	r2, [r7, #0]
 8009390:	605a      	str	r2, [r3, #4]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	721a      	strb	r2, [r3, #8]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2200      	movs	r2, #0
 800939c:	725a      	strb	r2, [r3, #9]
    {
    }
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	4618      	mov	r0, r3
 80093a2:	370c      	adds	r7, #12
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr
 80093ac:	08032e54 	.word	0x08032e54

080093b0 <_ZN8touchgfx3HAL11getInstanceEv>:
    static HAL* getInstance()
 80093b0:	b480      	push	{r7}
 80093b2:	af00      	add	r7, sp, #0
        return instance;
 80093b4:	4b03      	ldr	r3, [pc, #12]	; (80093c4 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 80093b6:	681b      	ldr	r3, [r3, #0]
    }
 80093b8:	4618      	mov	r0, r3
 80093ba:	46bd      	mov	sp, r7
 80093bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c0:	4770      	bx	lr
 80093c2:	bf00      	nop
 80093c4:	200128a4 	.word	0x200128a4

080093c8 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b082      	sub	sp, #8
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	685a      	ldr	r2, [r3, #4]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	3314      	adds	r3, #20
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4610      	mov	r0, r2
 80093e0:	4798      	blx	r3
    }
 80093e2:	bf00      	nop
 80093e4:	3708      	adds	r7, #8
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}

080093ea <_ZN10STM32F4DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b082      	sub	sp, #8
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	3328      	adds	r3, #40	; 0x28
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4610      	mov	r0, r2
 80093fe:	4798      	blx	r3
    }
 8009400:	bf00      	nop
 8009402:	3708      	adds	r7, #8
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef* hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 8009408:	b480      	push	{r7}
 800940a:	b085      	sub	sp, #20
 800940c:	af00      	add	r7, sp, #0
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	60b9      	str	r1, [r7, #8]
 8009412:	607a      	str	r2, [r7, #4]
 8009414:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8009420:	68ba      	ldr	r2, [r7, #8]
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	430a      	orrs	r2, r1
 8009428:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009430:	f023 0107 	bic.w	r1, r3, #7
 8009434:	687a      	ldr	r2, [r7, #4]
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	430a      	orrs	r2, r1
 800943c:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009444:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8009448:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800944c:	6839      	ldr	r1, [r7, #0]
 800944e:	68fa      	ldr	r2, [r7, #12]
 8009450:	6812      	ldr	r2, [r2, #0]
 8009452:	430b      	orrs	r3, r1
 8009454:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 8009456:	2300      	movs	r3, #0
}
 8009458:	4618      	mov	r0, r3
 800945a:	3714      	adds	r7, #20
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <DMA2D_XferCpltCallback>:

extern "C" {

    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
        touchgfx::HAL::getInstance()->signalDMAInterrupt();
 800946c:	f7ff ffa0 	bl	80093b0 <_ZN8touchgfx3HAL11getInstanceEv>
 8009470:	4603      	mov	r3, r0
 8009472:	4618      	mov	r0, r3
 8009474:	f7ff ffa8 	bl	80093c8 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 8009478:	bf00      	nop
 800947a:	3708      	adds	r7, #8
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <DMA2D_XferErrorCallback>:

    static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
    {
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
        assert(0);
 8009488:	4b02      	ldr	r3, [pc, #8]	; (8009494 <DMA2D_XferErrorCallback+0x14>)
 800948a:	4a03      	ldr	r2, [pc, #12]	; (8009498 <DMA2D_XferErrorCallback+0x18>)
 800948c:	2136      	movs	r1, #54	; 0x36
 800948e:	4803      	ldr	r0, [pc, #12]	; (800949c <DMA2D_XferErrorCallback+0x1c>)
 8009490:	f024 feea 	bl	802e268 <__assert_func>
 8009494:	0802f9ec 	.word	0x0802f9ec
 8009498:	08030c74 	.word	0x08030c74
 800949c:	0802f9f0 	.word	0x0802f9f0

080094a0 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	3318      	adds	r3, #24
 80094ac:	4618      	mov	r0, r3
 80094ae:	f7ff fef1 	bl	8009294 <_ZN8touchgfx9colortypeC1Ev>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	4618      	mov	r0, r3
 80094b6:	3708      	adds	r7, #8
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <_ZN10STM32F4DMAC1Ev>:
    }

}

STM32F4DMA::STM32F4DMA()
 80094bc:	b5b0      	push	{r4, r5, r7, lr}
 80094be:	b082      	sub	sp, #8
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 80094c4:	687a      	ldr	r2, [r7, #4]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	330c      	adds	r3, #12
 80094ca:	4619      	mov	r1, r3
 80094cc:	4610      	mov	r0, r2
 80094ce:	f7ff ff55 	bl	800937c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 80094d2:	4a0e      	ldr	r2, [pc, #56]	; (800950c <_ZN10STM32F4DMAC1Ev+0x50>)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	601a      	str	r2, [r3, #0]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f103 000c 	add.w	r0, r3, #12
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	3320      	adds	r3, #32
 80094e2:	2260      	movs	r2, #96	; 0x60
 80094e4:	4619      	mov	r1, r3
 80094e6:	f014 f83f 	bl	801d568 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	3320      	adds	r3, #32
 80094ee:	245f      	movs	r4, #95	; 0x5f
 80094f0:	461d      	mov	r5, r3
 80094f2:	2c00      	cmp	r4, #0
 80094f4:	db05      	blt.n	8009502 <_ZN10STM32F4DMAC1Ev+0x46>
 80094f6:	4628      	mov	r0, r5
 80094f8:	f7ff ffd2 	bl	80094a0 <_ZN8touchgfx6BlitOpC1Ev>
 80094fc:	3520      	adds	r5, #32
 80094fe:	3c01      	subs	r4, #1
 8009500:	e7f7      	b.n	80094f2 <_ZN10STM32F4DMAC1Ev+0x36>
{}
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	4618      	mov	r0, r3
 8009506:	3708      	adds	r7, #8
 8009508:	46bd      	mov	sp, r7
 800950a:	bdb0      	pop	{r4, r5, r7, pc}
 800950c:	08030c08 	.word	0x08030c08

08009510 <_ZN10STM32F4DMAD1Ev>:

STM32F4DMA::~STM32F4DMA()
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	4a0b      	ldr	r2, [pc, #44]	; (8009548 <_ZN10STM32F4DMAD1Ev+0x38>)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 800951e:	480b      	ldr	r0, [pc, #44]	; (800954c <_ZN10STM32F4DMAD1Ev+0x3c>)
 8009520:	f009 f88c 	bl	801263c <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 8009524:	205a      	movs	r0, #90	; 0x5a
 8009526:	f7ff fe91 	bl	800924c <__NVIC_DisableIRQ>
STM32F4DMA::~STM32F4DMA()
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	330c      	adds	r3, #12
 800952e:	4618      	mov	r0, r3
 8009530:	f000 faa4 	bl	8009a7c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	4618      	mov	r0, r3
 8009538:	f7ff ff00 	bl	800933c <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	4618      	mov	r0, r3
 8009540:	3708      	adds	r7, #8
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop
 8009548:	08030c08 	.word	0x08030c08
 800954c:	20012f20 	.word	0x20012f20

08009550 <_ZN10STM32F4DMAD0Ev>:
STM32F4DMA::~STM32F4DMA()
 8009550:	b580      	push	{r7, lr}
 8009552:	b082      	sub	sp, #8
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
}
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f7ff ffd9 	bl	8009510 <_ZN10STM32F4DMAD1Ev>
 800955e:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f023 fdb2 	bl	802d0cc <_ZdlPvj>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	4618      	mov	r0, r3
 800956c:	3708      	adds	r7, #8
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}
	...

08009574 <_ZN10STM32F4DMA10initializeEv>:

void STM32F4DMA::initialize()
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 800957c:	4b09      	ldr	r3, [pc, #36]	; (80095a4 <_ZN10STM32F4DMA10initializeEv+0x30>)
 800957e:	4a0a      	ldr	r2, [pc, #40]	; (80095a8 <_ZN10STM32F4DMA10initializeEv+0x34>)
 8009580:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 8009582:	4808      	ldr	r0, [pc, #32]	; (80095a4 <_ZN10STM32F4DMA10initializeEv+0x30>)
 8009584:	f009 f810 	bl	80125a8 <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8009588:	4b06      	ldr	r3, [pc, #24]	; (80095a4 <_ZN10STM32F4DMA10initializeEv+0x30>)
 800958a:	4a08      	ldr	r2, [pc, #32]	; (80095ac <_ZN10STM32F4DMA10initializeEv+0x38>)
 800958c:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 800958e:	4b05      	ldr	r3, [pc, #20]	; (80095a4 <_ZN10STM32F4DMA10initializeEv+0x30>)
 8009590:	4a07      	ldr	r2, [pc, #28]	; (80095b0 <_ZN10STM32F4DMA10initializeEv+0x3c>)
 8009592:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 8009594:	205a      	movs	r0, #90	; 0x5a
 8009596:	f7ff fe39 	bl	800920c <__NVIC_EnableIRQ>
}
 800959a:	bf00      	nop
 800959c:	3708      	adds	r7, #8
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	20012f20 	.word	0x20012f20
 80095a8:	4002b000 	.word	0x4002b000
 80095ac:	08009465 	.word	0x08009465
 80095b0:	08009481 	.word	0x08009481

080095b4 <_ZN10STM32F4DMA11getBlitCapsEv>:

BlitOperations STM32F4DMA::getBlitCaps()
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 80095bc:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	370c      	adds	r7, #12
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr

080095cc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F4DMA::setupDataCopy(const BlitOp& blitOp)
{
 80095cc:	b590      	push	{r4, r7, lr}
 80095ce:	b08d      	sub	sp, #52	; 0x34
 80095d0:	af02      	add	r7, sp, #8
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 80095d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80095da:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 80095dc:	2300      	movs	r3, #0
 80095de:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 80095e4:	2b20      	cmp	r3, #32
 80095e6:	d007      	beq.n	80095f8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	2b40      	cmp	r3, #64	; 0x40
 80095ee:	d003      	beq.n	80095f8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	2b04      	cmp	r3, #4
 80095f6:	d101      	bne.n	80095fc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 80095f8:	2301      	movs	r3, #1
 80095fa:	e000      	b.n	80095fe <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 80095fc:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 80095fe:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 8009604:	2b80      	cmp	r3, #128	; 0x80
 8009606:	d004      	beq.n	8009612 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009610:	d101      	bne.n	8009616 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 8009612:	2301      	movs	r3, #1
 8009614:	e000      	b.n	8009618 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 8009616:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8009618:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 800961a:	f7ff faa1 	bl	8008b60 <_ZN8touchgfx3HAL3lcdEv>
 800961e:	4602      	mov	r2, r0
 8009620:	6813      	ldr	r3, [r2, #0]
 8009622:	331c      	adds	r3, #28
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4610      	mov	r0, r2
 8009628:	4798      	blx	r3
 800962a:	4603      	mov	r3, r0
 800962c:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	2b40      	cmp	r3, #64	; 0x40
 8009634:	d01d      	beq.n	8009672 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8009636:	2b40      	cmp	r3, #64	; 0x40
 8009638:	d804      	bhi.n	8009644 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 800963a:	2b04      	cmp	r3, #4
 800963c:	d00e      	beq.n	800965c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 800963e:	2b20      	cmp	r3, #32
 8009640:	d017      	beq.n	8009672 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8009642:	e019      	b.n	8009678 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 8009644:	2b80      	cmp	r3, #128	; 0x80
 8009646:	d003      	beq.n	8009650 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 8009648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800964c:	d003      	beq.n	8009656 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 800964e:	e013      	b.n	8009678 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 8009650:	230a      	movs	r3, #10
 8009652:	623b      	str	r3, [r7, #32]
        break;
 8009654:	e01a      	b.n	800968c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 8009656:	2309      	movs	r3, #9
 8009658:	623b      	str	r3, [r7, #32]
        break;
 800965a:	e017      	b.n	800968c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 800965c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009660:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8009662:	7f7b      	ldrb	r3, [r7, #29]
 8009664:	2b10      	cmp	r3, #16
 8009666:	d101      	bne.n	800966c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 8009668:	2302      	movs	r3, #2
 800966a:	e000      	b.n	800966e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 800966c:	2301      	movs	r3, #1
 800966e:	623b      	str	r3, [r7, #32]
        break;
 8009670:	e00c      	b.n	800968c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 8009672:	2300      	movs	r3, #0
 8009674:	623b      	str	r3, [r7, #32]
        break;
 8009676:	e009      	b.n	800968c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 8009678:	2300      	movs	r3, #0
 800967a:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 800967c:	7f7b      	ldrb	r3, [r7, #29]
 800967e:	2b10      	cmp	r3, #16
 8009680:	d101      	bne.n	8009686 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 8009682:	2302      	movs	r3, #2
 8009684:	e000      	b.n	8009688 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 8009686:	2301      	movs	r3, #1
 8009688:	623b      	str	r3, [r7, #32]
        break;
 800968a:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 800968c:	4a75      	ldr	r2, [pc, #468]	; (8009864 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800968e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009690:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8009692:	7f7b      	ldrb	r3, [r7, #29]
 8009694:	2b10      	cmp	r3, #16
 8009696:	d101      	bne.n	800969c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8009698:	2302      	movs	r3, #2
 800969a:	e000      	b.n	800969e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 800969c:	2301      	movs	r3, #1
 800969e:	4a71      	ldr	r2, [pc, #452]	; (8009864 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80096a0:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	8adb      	ldrh	r3, [r3, #22]
 80096a6:	461a      	mov	r2, r3
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	8a1b      	ldrh	r3, [r3, #16]
 80096ac:	1ad3      	subs	r3, r2, r3
 80096ae:	461a      	mov	r2, r3
 80096b0:	4b6c      	ldr	r3, [pc, #432]	; (8009864 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80096b2:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80096b4:	7f7b      	ldrb	r3, [r7, #29]
 80096b6:	2b10      	cmp	r3, #16
 80096b8:	d101      	bne.n	80096be <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 80096ba:	2202      	movs	r2, #2
 80096bc:	e000      	b.n	80096c0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 80096be:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	8adb      	ldrh	r3, [r3, #22]
 80096c4:	4619      	mov	r1, r3
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	8a1b      	ldrh	r3, [r3, #16]
 80096ca:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80096cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80096ce:	4865      	ldr	r0, [pc, #404]	; (8009864 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80096d0:	f7ff fe9a 	bl	8009408 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 80096d4:	4a63      	ldr	r2, [pc, #396]	; (8009864 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80096d6:	6a3b      	ldr	r3, [r7, #32]
 80096d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	8a9b      	ldrh	r3, [r3, #20]
 80096de:	461a      	mov	r2, r3
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	8a1b      	ldrh	r3, [r3, #16]
 80096e4:	1ad3      	subs	r3, r2, r3
 80096e6:	461a      	mov	r2, r3
 80096e8:	4b5e      	ldr	r3, [pc, #376]	; (8009864 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80096ea:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 80096ec:	7ffb      	ldrb	r3, [r7, #31]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d103      	bne.n	80096fa <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 80096f2:	7fbb      	ldrb	r3, [r7, #30]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	f000 8081 	beq.w	80097fc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
    {
        if (blitOp.alpha < 255)
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	7f1b      	ldrb	r3, [r3, #28]
 80096fe:	2bff      	cmp	r3, #255	; 0xff
 8009700:	d008      	beq.n	8009714 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 8009702:	4b58      	ldr	r3, [pc, #352]	; (8009864 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8009704:	2202      	movs	r2, #2
 8009706:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	7f1b      	ldrb	r3, [r3, #28]
 800970c:	461a      	mov	r2, r3
 800970e:	4b55      	ldr	r3, [pc, #340]	; (8009864 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8009710:	635a      	str	r2, [r3, #52]	; 0x34
 8009712:	e002      	b.n	800971a <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8009714:	4b53      	ldr	r3, [pc, #332]	; (8009864 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8009716:	2200      	movs	r2, #0
 8009718:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 800971a:	7fbb      	ldrb	r3, [r7, #30]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d058      	beq.n	80097d2 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x206>
        {
            if (bitDepth == 16)
 8009720:	7f7b      	ldrb	r3, [r7, #29]
 8009722:	2b10      	cmp	r3, #16
 8009724:	d14a      	bne.n	80097bc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	3318      	adds	r3, #24
 800972a:	4618      	mov	r0, r3
 800972c:	f7ff fdc0 	bl	80092b0 <_ZNK8touchgfx9colortypecvmEv>
 8009730:	4603      	mov	r3, r0
 8009732:	0adb      	lsrs	r3, r3, #11
 8009734:	f003 021f 	and.w	r2, r3, #31
 8009738:	4613      	mov	r3, r2
 800973a:	021b      	lsls	r3, r3, #8
 800973c:	1a9a      	subs	r2, r3, r2
 800973e:	4b4a      	ldr	r3, [pc, #296]	; (8009868 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8009740:	fba3 1302 	umull	r1, r3, r3, r2
 8009744:	1ad2      	subs	r2, r2, r3
 8009746:	0852      	lsrs	r2, r2, #1
 8009748:	4413      	add	r3, r2
 800974a:	091b      	lsrs	r3, r3, #4
 800974c:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	3318      	adds	r3, #24
 8009752:	4618      	mov	r0, r3
 8009754:	f7ff fdac 	bl	80092b0 <_ZNK8touchgfx9colortypecvmEv>
 8009758:	4603      	mov	r3, r0
 800975a:	095b      	lsrs	r3, r3, #5
 800975c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009760:	4613      	mov	r3, r2
 8009762:	021b      	lsls	r3, r3, #8
 8009764:	1a9a      	subs	r2, r3, r2
 8009766:	4b41      	ldr	r3, [pc, #260]	; (800986c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8009768:	fba3 1302 	umull	r1, r3, r3, r2
 800976c:	1ad2      	subs	r2, r2, r3
 800976e:	0852      	lsrs	r2, r2, #1
 8009770:	4413      	add	r3, r2
 8009772:	095b      	lsrs	r3, r3, #5
 8009774:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	3318      	adds	r3, #24
 800977a:	4618      	mov	r0, r3
 800977c:	f7ff fd98 	bl	80092b0 <_ZNK8touchgfx9colortypecvmEv>
 8009780:	4603      	mov	r3, r0
 8009782:	f003 021f 	and.w	r2, r3, #31
 8009786:	4613      	mov	r3, r2
 8009788:	021b      	lsls	r3, r3, #8
 800978a:	1a9a      	subs	r2, r3, r2
 800978c:	4b36      	ldr	r3, [pc, #216]	; (8009868 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800978e:	fba3 1302 	umull	r1, r3, r3, r2
 8009792:	1ad2      	subs	r2, r2, r3
 8009794:	0852      	lsrs	r2, r2, #1
 8009796:	4413      	add	r3, r2
 8009798:	091b      	lsrs	r3, r3, #4
 800979a:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	7f1b      	ldrb	r3, [r3, #28]
 80097a0:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	061a      	lsls	r2, r3, #24
 80097a6:	69bb      	ldr	r3, [r7, #24]
 80097a8:	041b      	lsls	r3, r3, #16
 80097aa:	431a      	orrs	r2, r3
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	021b      	lsls	r3, r3, #8
 80097b0:	431a      	orrs	r2, r3
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	4313      	orrs	r3, r2
 80097b6:	4a2b      	ldr	r2, [pc, #172]	; (8009864 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80097b8:	6353      	str	r3, [r2, #52]	; 0x34
 80097ba:	e00a      	b.n	80097d2 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x206>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	3318      	adds	r3, #24
 80097c0:	60bb      	str	r3, [r7, #8]
        return color;
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	683a      	ldr	r2, [r7, #0]
 80097c8:	7f12      	ldrb	r2, [r2, #28]
 80097ca:	0612      	lsls	r2, r2, #24
 80097cc:	4313      	orrs	r3, r2
 80097ce:	4a25      	ldr	r2, [pc, #148]	; (8009864 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80097d0:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	8adb      	ldrh	r3, [r3, #22]
 80097d6:	461a      	mov	r2, r3
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	8a1b      	ldrh	r3, [r3, #16]
 80097dc:	1ad3      	subs	r3, r2, r3
 80097de:	461a      	mov	r2, r3
 80097e0:	4b20      	ldr	r3, [pc, #128]	; (8009864 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80097e2:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80097e4:	7f7b      	ldrb	r3, [r7, #29]
 80097e6:	2b10      	cmp	r3, #16
 80097e8:	d101      	bne.n	80097ee <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x222>
 80097ea:	2302      	movs	r3, #2
 80097ec:	e000      	b.n	80097f0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 80097ee:	2301      	movs	r3, #1
 80097f0:	4a1c      	ldr	r2, [pc, #112]	; (8009864 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80097f2:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 80097f4:	2100      	movs	r1, #0
 80097f6:	481b      	ldr	r0, [pc, #108]	; (8009864 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80097f8:	f009 f9a0 	bl	8012b3c <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 80097fc:	2101      	movs	r1, #1
 80097fe:	4819      	ldr	r0, [pc, #100]	; (8009864 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8009800:	f009 f99c 	bl	8012b3c <HAL_DMA2D_ConfigLayer>

    if (blendingImage || blendingText)
 8009804:	7ffb      	ldrb	r3, [r7, #31]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d102      	bne.n	8009810 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>
 800980a:	7fbb      	ldrb	r3, [r7, #30]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d015      	beq.n	800983c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8009814:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800981a:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8009820:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8009826:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800982c:	9301      	str	r3, [sp, #4]
 800982e:	9200      	str	r2, [sp, #0]
 8009830:	4623      	mov	r3, r4
 8009832:	4602      	mov	r2, r0
 8009834:	480b      	ldr	r0, [pc, #44]	; (8009864 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8009836:	f008 ffa4 	bl	8012782 <HAL_DMA2D_BlendingStart_IT>
 800983a:	e00f      	b.n	800985c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 8009840:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 8009846:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 800984c:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 8009852:	9300      	str	r3, [sp, #0]
 8009854:	4603      	mov	r3, r0
 8009856:	4803      	ldr	r0, [pc, #12]	; (8009864 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8009858:	f008 ff60 	bl	801271c <HAL_DMA2D_Start_IT>
    }
}
 800985c:	bf00      	nop
 800985e:	372c      	adds	r7, #44	; 0x2c
 8009860:	46bd      	mov	sp, r7
 8009862:	bd90      	pop	{r4, r7, pc}
 8009864:	20012f20 	.word	0x20012f20
 8009868:	08421085 	.word	0x08421085
 800986c:	04104105 	.word	0x04104105

08009870 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F4DMA::setupDataFill(const BlitOp& blitOp)
{
 8009870:	b590      	push	{r4, r7, lr}
 8009872:	b08f      	sub	sp, #60	; 0x3c
 8009874:	af02      	add	r7, sp, #8
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 800987a:	f7ff f971 	bl	8008b60 <_ZN8touchgfx3HAL3lcdEv>
 800987e:	4602      	mov	r2, r0
 8009880:	6813      	ldr	r3, [r2, #0]
 8009882:	331c      	adds	r3, #28
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4610      	mov	r0, r2
 8009888:	4798      	blx	r3
 800988a:	4603      	mov	r3, r0
 800988c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8009890:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009894:	2b10      	cmp	r3, #16
 8009896:	d101      	bne.n	800989c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2c>
 8009898:	2302      	movs	r3, #2
 800989a:	e000      	b.n	800989e <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2e>
 800989c:	2301      	movs	r3, #1
 800989e:	623b      	str	r3, [r7, #32]

    uint32_t color = 0;
 80098a0:	2300      	movs	r3, #0
 80098a2:	62bb      	str	r3, [r7, #40]	; 0x28
    if (bitDepth == 16)
 80098a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098a8:	2b10      	cmp	r3, #16
 80098aa:	d149      	bne.n	8009940 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	3318      	adds	r3, #24
 80098b0:	4618      	mov	r0, r3
 80098b2:	f7ff fcfd 	bl	80092b0 <_ZNK8touchgfx9colortypecvmEv>
 80098b6:	4603      	mov	r3, r0
 80098b8:	0adb      	lsrs	r3, r3, #11
 80098ba:	f003 021f 	and.w	r2, r3, #31
 80098be:	4613      	mov	r3, r2
 80098c0:	021b      	lsls	r3, r3, #8
 80098c2:	1a9a      	subs	r2, r3, r2
 80098c4:	4b6a      	ldr	r3, [pc, #424]	; (8009a70 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 80098c6:	fba3 1302 	umull	r1, r3, r3, r2
 80098ca:	1ad2      	subs	r2, r2, r3
 80098cc:	0852      	lsrs	r2, r2, #1
 80098ce:	4413      	add	r3, r2
 80098d0:	091b      	lsrs	r3, r3, #4
 80098d2:	61fb      	str	r3, [r7, #28]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	3318      	adds	r3, #24
 80098d8:	4618      	mov	r0, r3
 80098da:	f7ff fce9 	bl	80092b0 <_ZNK8touchgfx9colortypecvmEv>
 80098de:	4603      	mov	r3, r0
 80098e0:	095b      	lsrs	r3, r3, #5
 80098e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80098e6:	4613      	mov	r3, r2
 80098e8:	021b      	lsls	r3, r3, #8
 80098ea:	1a9a      	subs	r2, r3, r2
 80098ec:	4b61      	ldr	r3, [pc, #388]	; (8009a74 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x204>)
 80098ee:	fba3 1302 	umull	r1, r3, r3, r2
 80098f2:	1ad2      	subs	r2, r2, r3
 80098f4:	0852      	lsrs	r2, r2, #1
 80098f6:	4413      	add	r3, r2
 80098f8:	095b      	lsrs	r3, r3, #5
 80098fa:	61bb      	str	r3, [r7, #24]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	3318      	adds	r3, #24
 8009900:	4618      	mov	r0, r3
 8009902:	f7ff fcd5 	bl	80092b0 <_ZNK8touchgfx9colortypecvmEv>
 8009906:	4603      	mov	r3, r0
 8009908:	f003 021f 	and.w	r2, r3, #31
 800990c:	4613      	mov	r3, r2
 800990e:	021b      	lsls	r3, r3, #8
 8009910:	1a9a      	subs	r2, r3, r2
 8009912:	4b57      	ldr	r3, [pc, #348]	; (8009a70 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8009914:	fba3 1302 	umull	r1, r3, r3, r2
 8009918:	1ad2      	subs	r2, r2, r3
 800991a:	0852      	lsrs	r2, r2, #1
 800991c:	4413      	add	r3, r2
 800991e:	091b      	lsrs	r3, r3, #4
 8009920:	617b      	str	r3, [r7, #20]
        uint32_t alpha = blitOp.alpha;
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	7f1b      	ldrb	r3, [r3, #28]
 8009926:	613b      	str	r3, [r7, #16]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	061a      	lsls	r2, r3, #24
 800992c:	69fb      	ldr	r3, [r7, #28]
 800992e:	041b      	lsls	r3, r3, #16
 8009930:	431a      	orrs	r2, r3
 8009932:	69bb      	ldr	r3, [r7, #24]
 8009934:	021b      	lsls	r3, r3, #8
 8009936:	4313      	orrs	r3, r2
 8009938:	697a      	ldr	r2, [r7, #20]
 800993a:	4313      	orrs	r3, r2
 800993c:	62bb      	str	r3, [r7, #40]	; 0x28
 800993e:	e00a      	b.n	8009956 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe6>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	7f1b      	ldrb	r3, [r3, #28]
 8009944:	061b      	lsls	r3, r3, #24
 8009946:	461a      	mov	r2, r3
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	3318      	adds	r3, #24
 800994c:	60fb      	str	r3, [r7, #12]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4313      	orrs	r3, r2
 8009954:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    switch (blitOp.operation)
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	2b08      	cmp	r3, #8
 800995c:	d103      	bne.n	8009966 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf6>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 800995e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009962:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009964:	e003      	b.n	800996e <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfe>
    default:
        dma2dTransferMode = DMA2D_R2M;
 8009966:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800996a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800996c:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 800996e:	4a42      	ldr	r2, [pc, #264]	; (8009a78 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8009970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009972:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8009974:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009978:	2b10      	cmp	r3, #16
 800997a:	d101      	bne.n	8009980 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>
 800997c:	2302      	movs	r3, #2
 800997e:	e000      	b.n	8009982 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x112>
 8009980:	2301      	movs	r3, #1
 8009982:	4a3d      	ldr	r2, [pc, #244]	; (8009a78 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8009984:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	8adb      	ldrh	r3, [r3, #22]
 800998a:	461a      	mov	r2, r3
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	8a1b      	ldrh	r3, [r3, #16]
 8009990:	1ad3      	subs	r3, r2, r3
 8009992:	461a      	mov	r2, r3
 8009994:	4b38      	ldr	r3, [pc, #224]	; (8009a78 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8009996:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8009998:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800999c:	2b10      	cmp	r3, #16
 800999e:	d101      	bne.n	80099a4 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x134>
 80099a0:	2202      	movs	r2, #2
 80099a2:	e000      	b.n	80099a6 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x136>
 80099a4:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	8adb      	ldrh	r3, [r3, #22]
 80099aa:	4619      	mov	r1, r3
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	8a1b      	ldrh	r3, [r3, #16]
 80099b0:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80099b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80099b4:	4830      	ldr	r0, [pc, #192]	; (8009a78 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 80099b6:	f7ff fd27 	bl	8009408 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 80099ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099c0:	d11f      	bne.n	8009a02 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x192>
    {
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 80099c2:	4b2d      	ldr	r3, [pc, #180]	; (8009a78 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 80099c4:	2201      	movs	r2, #1
 80099c6:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 80099c8:	4a2b      	ldr	r2, [pc, #172]	; (8009a78 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 80099ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099cc:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 80099ce:	4b2a      	ldr	r3, [pc, #168]	; (8009a78 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 80099d0:	2209      	movs	r2, #9
 80099d2:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	8adb      	ldrh	r3, [r3, #22]
 80099d8:	461a      	mov	r2, r3
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	8a1b      	ldrh	r3, [r3, #16]
 80099de:	1ad3      	subs	r3, r2, r3
 80099e0:	461a      	mov	r2, r3
 80099e2:	4b25      	ldr	r3, [pc, #148]	; (8009a78 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 80099e4:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80099e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099ea:	2b10      	cmp	r3, #16
 80099ec:	d101      	bne.n	80099f2 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x182>
 80099ee:	2302      	movs	r3, #2
 80099f0:	e000      	b.n	80099f4 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x184>
 80099f2:	2301      	movs	r3, #1
 80099f4:	4a20      	ldr	r2, [pc, #128]	; (8009a78 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 80099f6:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 80099f8:	2100      	movs	r1, #0
 80099fa:	481f      	ldr	r0, [pc, #124]	; (8009a78 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 80099fc:	f009 f89e 	bl	8012b3c <HAL_DMA2D_ConfigLayer>
 8009a00:	e005      	b.n	8009a0e <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x19e>
    }
    else
    {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8009a02:	4a1d      	ldr	r2, [pc, #116]	; (8009a78 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8009a04:	6a3b      	ldr	r3, [r7, #32]
 8009a06:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 8009a08:	4b1b      	ldr	r3, [pc, #108]	; (8009a78 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8009a0e:	2101      	movs	r1, #1
 8009a10:	4819      	ldr	r0, [pc, #100]	; (8009a78 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8009a12:	f009 f893 	bl	8012b3c <HAL_DMA2D_ConfigLayer>

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 8009a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a1c:	d115      	bne.n	8009a4a <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1da>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8009a22:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8009a28:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8009a2e:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8009a34:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8009a3a:	9301      	str	r3, [sp, #4]
 8009a3c:	9200      	str	r2, [sp, #0]
 8009a3e:	4623      	mov	r3, r4
 8009a40:	4602      	mov	r2, r0
 8009a42:	480d      	ldr	r0, [pc, #52]	; (8009a78 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8009a44:	f008 fe9d 	bl	8012782 <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 8009a48:	e00d      	b.n	8009a66 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f6>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	68db      	ldr	r3, [r3, #12]
 8009a4e:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8009a54:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8009a5a:	9300      	str	r3, [sp, #0]
 8009a5c:	460b      	mov	r3, r1
 8009a5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a60:	4805      	ldr	r0, [pc, #20]	; (8009a78 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8009a62:	f008 fe5b 	bl	801271c <HAL_DMA2D_Start_IT>
}
 8009a66:	bf00      	nop
 8009a68:	3734      	adds	r7, #52	; 0x34
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd90      	pop	{r4, r7, pc}
 8009a6e:	bf00      	nop
 8009a70:	08421085 	.word	0x08421085
 8009a74:	04104105 	.word	0x04104105
 8009a78:	20012f20 	.word	0x20012f20

08009a7c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b082      	sub	sp, #8
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	4a05      	ldr	r2, [pc, #20]	; (8009a9c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	601a      	str	r2, [r3, #0]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f7ff fc1b 	bl	80092c8 <_ZN8touchgfx9DMA_QueueD1Ev>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	4618      	mov	r0, r3
 8009a96:	3708      	adds	r7, #8
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	08032ea4 	.word	0x08032ea4

08009aa0 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b082      	sub	sp, #8
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f7ff ffe7 	bl	8009a7c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8009aae:	2114      	movs	r1, #20
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f023 fb0b 	bl	802d0cc <_ZdlPvj>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3708      	adds	r7, #8
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 8009ac0:	b480      	push	{r7}
 8009ac2:	b083      	sub	sp, #12
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2200      	movs	r2, #0
 8009acc:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2200      	movs	r2, #0
 8009ade:	80da      	strh	r2, [r3, #6]
    }
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	370c      	adds	r7, #12
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr
	...

08009af0 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8009af0:	b480      	push	{r7}
 8009af2:	b083      	sub	sp, #12
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8009af8:	4a04      	ldr	r2, [pc, #16]	; (8009b0c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6013      	str	r3, [r2, #0]
    }
 8009afe:	bf00      	nop
 8009b00:	370c      	adds	r7, #12
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr
 8009b0a:	bf00      	nop
 8009b0c:	20012920 	.word	0x20012920

08009b10 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 8009b10:	b480      	push	{r7}
 8009b12:	b083      	sub	sp, #12
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
    {
 8009b18:	4a04      	ldr	r2, [pc, #16]	; (8009b2c <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	601a      	str	r2, [r3, #0]
    }
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	4618      	mov	r0, r3
 8009b22:	370c      	adds	r7, #12
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr
 8009b2c:	08030ea8 	.word	0x08030ea8

08009b30 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b082      	sub	sp, #8
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
    }
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f7ff ffe9 	bl	8009b10 <_ZN8touchgfx12FontProviderD1Ev>
 8009b3e:	2104      	movs	r1, #4
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f023 fac3 	bl	802d0cc <_ZdlPvj>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3708      	adds	r7, #8
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8009b50:	b480      	push	{r7}
 8009b52:	b085      	sub	sp, #20
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	60f8      	str	r0, [r7, #12]
 8009b58:	60b9      	str	r1, [r7, #8]
 8009b5a:	607a      	str	r2, [r7, #4]
 8009b5c:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8009b5e:	4a0b      	ldr	r2, [pc, #44]	; (8009b8c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	601a      	str	r2, [r3, #0]
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	68ba      	ldr	r2, [r7, #8]
 8009b68:	605a      	str	r2, [r3, #4]
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	687a      	ldr	r2, [r7, #4]
 8009b6e:	609a      	str	r2, [r3, #8]
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	683a      	ldr	r2, [r7, #0]
 8009b74:	60da      	str	r2, [r3, #12]
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	69ba      	ldr	r2, [r7, #24]
 8009b7a:	611a      	str	r2, [r3, #16]
    {
    }
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3714      	adds	r7, #20
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr
 8009b8a:	bf00      	nop
 8009b8c:	08030e98 	.word	0x08030e98

08009b90 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8009b90:	b480      	push	{r7}
 8009b92:	b083      	sub	sp, #12
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
    {
 8009b98:	4a04      	ldr	r2, [pc, #16]	; (8009bac <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	601a      	str	r2, [r3, #0]
    }
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	370c      	adds	r7, #12
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr
 8009bac:	08030e98 	.word	0x08030e98

08009bb0 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b082      	sub	sp, #8
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
    }
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f7ff ffe9 	bl	8009b90 <_ZN8touchgfx7MVPHeapD1Ev>
 8009bbe:	2114      	movs	r1, #20
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f023 fa83 	bl	802d0cc <_ZdlPvj>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3708      	adds	r7, #8
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8009bd0:	b480      	push	{r7}
 8009bd2:	b083      	sub	sp, #12
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	6039      	str	r1, [r7, #0]
    {
    }
 8009bda:	bf00      	nop
 8009bdc:	370c      	adds	r7, #12
 8009bde:	46bd      	mov	sp, r7
 8009be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be4:	4770      	bx	lr

08009be6 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8009be6:	b480      	push	{r7}
 8009be8:	b083      	sub	sp, #12
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	6078      	str	r0, [r7, #4]
 8009bee:	6039      	str	r1, [r7, #0]
    {
    }
 8009bf0:	bf00      	nop
 8009bf2:	370c      	adds	r7, #12
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8009bfc:	b480      	push	{r7}
 8009bfe:	b083      	sub	sp, #12
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]
    {
    }
 8009c06:	bf00      	nop
 8009c08:	370c      	adds	r7, #12
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c10:	4770      	bx	lr

08009c12 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8009c12:	b480      	push	{r7}
 8009c14:	b083      	sub	sp, #12
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	6078      	str	r0, [r7, #4]
 8009c1a:	460b      	mov	r3, r1
 8009c1c:	70fb      	strb	r3, [r7, #3]
    {
    }
 8009c1e:	bf00      	nop
 8009c20:	370c      	adds	r7, #12
 8009c22:	46bd      	mov	sp, r7
 8009c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c28:	4770      	bx	lr

08009c2a <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8009c2a:	b480      	push	{r7}
 8009c2c:	b083      	sub	sp, #12
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
    {
    }
 8009c32:	bf00      	nop
 8009c34:	370c      	adds	r7, #12
 8009c36:	46bd      	mov	sp, r7
 8009c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3c:	4770      	bx	lr

08009c3e <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 8009c3e:	b480      	push	{r7}
 8009c40:	b083      	sub	sp, #12
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
    {
    }
 8009c46:	bf00      	nop
 8009c48:	370c      	adds	r7, #12
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c50:	4770      	bx	lr
	...

08009c54 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8009c54:	b480      	push	{r7}
 8009c56:	b083      	sub	sp, #12
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
    {
 8009c5c:	4a04      	ldr	r2, [pc, #16]	; (8009c70 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	601a      	str	r2, [r3, #0]
    }
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	4618      	mov	r0, r3
 8009c66:	370c      	adds	r7, #12
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr
 8009c70:	08030e70 	.word	0x08030e70

08009c74 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b082      	sub	sp, #8
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
    }
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f7ff ffe9 	bl	8009c54 <_ZN8touchgfx15UIEventListenerD1Ev>
 8009c82:	2104      	movs	r1, #4
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f023 fa21 	bl	802d0cc <_ZdlPvj>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3708      	adds	r7, #8
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <_ZN8touchgfx3LCDD1Ev>:
 */
class LCD
{
public:
    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8009c94:	b480      	push	{r7}
 8009c96:	b083      	sub	sp, #12
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
    {
 8009c9c:	4a04      	ldr	r2, [pc, #16]	; (8009cb0 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	601a      	str	r2, [r3, #0]
    }
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	370c      	adds	r7, #12
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr
 8009cb0:	08033560 	.word	0x08033560

08009cb4 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b082      	sub	sp, #8
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
    }
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f7ff ffe9 	bl	8009c94 <_ZN8touchgfx3LCDD1Ev>
 8009cc2:	2108      	movs	r1, #8
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f023 fa01 	bl	802d0cc <_ZdlPvj>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3708      	adds	r7, #8
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8009cd4:	b480      	push	{r7}
 8009cd6:	b083      	sub	sp, #12
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	460b      	mov	r3, r1
 8009cde:	70fb      	strb	r3, [r7, #3]
    {
    }
 8009ce0:	bf00      	nop
 8009ce2:	370c      	adds	r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr

08009cec <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 8009cec:	b480      	push	{r7}
 8009cee:	b083      	sub	sp, #12
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	683a      	ldr	r2, [r7, #0]
 8009cfa:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8009cfe:	6810      	ldr	r0, [r2, #0]
 8009d00:	6851      	ldr	r1, [r2, #4]
 8009d02:	c303      	stmia	r3!, {r0, r1}
    };
 8009d04:	bf00      	nop
 8009d06:	370c      	adds	r7, #12
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr

08009d10 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 8009d10:	b480      	push	{r7}
 8009d12:	b083      	sub	sp, #12
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
    {
 8009d18:	4a04      	ldr	r2, [pc, #16]	; (8009d2c <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	601a      	str	r2, [r3, #0]
    }
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	4618      	mov	r0, r3
 8009d22:	370c      	adds	r7, #12
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr
 8009d2c:	08030e58 	.word	0x08030e58

08009d30 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b082      	sub	sp, #8
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
    }
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f7ff ffe9 	bl	8009d10 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8009d3e:	2104      	movs	r1, #4
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f023 f9c3 	bl	802d0cc <_ZdlPvj>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3708      	adds	r7, #8
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8009d50:	b480      	push	{r7}
 8009d52:	b083      	sub	sp, #12
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	801a      	strh	r2, [r3, #0]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2200      	movs	r2, #0
 8009d62:	805a      	strh	r2, [r3, #2]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2200      	movs	r2, #0
 8009d68:	809a      	strh	r2, [r3, #4]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	80da      	strh	r2, [r3, #6]
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	811a      	strh	r2, [r3, #8]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	815a      	strh	r2, [r3, #10]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	819a      	strh	r2, [r3, #12]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2200      	movs	r2, #0
 8009d86:	739a      	strb	r2, [r3, #14]
        {
        }
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	370c      	adds	r7, #12
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr

08009d96 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8009d96:	b580      	push	{r7, lr}
 8009d98:	b082      	sub	sp, #8
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
        : listener(0), dragThresholdValue(0)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	4618      	mov	r0, r3
 8009da2:	f7ff ffd5 	bl	8009d50 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2200      	movs	r2, #0
 8009daa:	611a      	str	r2, [r3, #16]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2200      	movs	r2, #0
 8009db0:	829a      	strh	r2, [r3, #20]
    {
    }
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	4618      	mov	r0, r3
 8009db6:	3708      	adds	r7, #8
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}

08009dbc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b084      	sub	sp, #16
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	60b9      	str	r1, [r7, #8]
 8009dc6:	607a      	str	r2, [r7, #4]
 8009dc8:	603b      	str	r3, [r7, #0]
          useDMAAcceleration(true)
 8009dca:	4a48      	ldr	r2, [pc, #288]	; (8009eec <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	601a      	str	r2, [r3, #0]
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	68ba      	ldr	r2, [r7, #8]
 8009dd4:	605a      	str	r2, [r3, #4]
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	687a      	ldr	r2, [r7, #4]
 8009dda:	609a      	str	r2, [r3, #8]
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	683a      	ldr	r2, [r7, #0]
 8009de0:	60da      	str	r2, [r3, #12]
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2200      	movs	r2, #0
 8009de6:	611a      	str	r2, [r3, #16]
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2200      	movs	r2, #0
 8009dec:	615a      	str	r2, [r3, #20]
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2200      	movs	r2, #0
 8009df2:	619a      	str	r2, [r3, #24]
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	331c      	adds	r3, #28
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f7ff ffcc 	bl	8009d96 <_ZN8touchgfx8GesturesC1Ev>
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2200      	movs	r2, #0
 8009e02:	639a      	str	r2, [r3, #56]	; 0x38
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2200      	movs	r2, #0
 8009e08:	63da      	str	r2, [r3, #60]	; 0x3c
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	641a      	str	r2, [r3, #64]	; 0x40
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2200      	movs	r2, #0
 8009e14:	645a      	str	r2, [r3, #68]	; 0x44
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2201      	movs	r2, #1
 8009e22:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2200      	movs	r2, #0
 8009e32:	64da      	str	r2, [r3, #76]	; 0x4c
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	3350      	adds	r3, #80	; 0x50
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f7ff fe41 	bl	8009ac0 <_ZN8touchgfx4RectC1Ev>
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2201      	movs	r2, #1
 8009e42:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	2200      	movs	r2, #0
 8009e52:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2201      	movs	r2, #1
 8009e5a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2200      	movs	r2, #0
 8009e62:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2200      	movs	r2, #0
 8009e72:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2200      	movs	r2, #0
 8009e82:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	671a      	str	r2, [r3, #112]	; 0x70
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2200      	movs	r2, #0
 8009e98:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
        instance = this;
 8009ea4:	4a12      	ldr	r2, [pc, #72]	; (8009ef0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 8009eaa:	4a12      	ldr	r2, [pc, #72]	; (8009ef4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 8009eac:	8b3b      	ldrh	r3, [r7, #24]
 8009eae:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8009eb0:	4a11      	ldr	r2, [pc, #68]	; (8009ef8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x13c>)
 8009eb2:	8bbb      	ldrh	r3, [r7, #28]
 8009eb4:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8009eb6:	4b11      	ldr	r3, [pc, #68]	; (8009efc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x140>)
 8009eb8:	2200      	movs	r2, #0
 8009eba:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8009ebc:	4b0d      	ldr	r3, [pc, #52]	; (8009ef4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 8009ebe:	881a      	ldrh	r2, [r3, #0]
 8009ec0:	4b0f      	ldr	r3, [pc, #60]	; (8009f00 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x144>)
 8009ec2:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8009ec4:	4b0c      	ldr	r3, [pc, #48]	; (8009ef8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x13c>)
 8009ec6:	881a      	ldrh	r2, [r3, #0]
 8009ec8:	4b0e      	ldr	r3, [pc, #56]	; (8009f04 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x148>)
 8009eca:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8009ecc:	8b3a      	ldrh	r2, [r7, #24]
 8009ece:	8bbb      	ldrh	r3, [r7, #28]
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d301      	bcc.n	8009ed8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x11c>
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	e000      	b.n	8009eda <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x11e>
 8009ed8:	2201      	movs	r2, #1
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3710      	adds	r7, #16
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
 8009eea:	bf00      	nop
 8009eec:	08032a0c 	.word	0x08032a0c
 8009ef0:	200128a4 	.word	0x200128a4
 8009ef4:	20012898 	.word	0x20012898
 8009ef8:	2001289a 	.word	0x2001289a
 8009efc:	2001289c 	.word	0x2001289c
 8009f00:	2001289e 	.word	0x2001289e
 8009f04:	200128a0 	.word	0x200128a0

08009f08 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b082      	sub	sp, #8
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	4a05      	ldr	r2, [pc, #20]	; (8009f28 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	601a      	str	r2, [r3, #0]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f7ff fe9b 	bl	8009c54 <_ZN8touchgfx15UIEventListenerD1Ev>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	4618      	mov	r0, r3
 8009f22:	3708      	adds	r7, #8
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}
 8009f28:	08033660 	.word	0x08033660

08009f2c <_ZN8touchgfx11ApplicationD0Ev>:
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b082      	sub	sp, #8
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f7ff ffe7 	bl	8009f08 <_ZN8touchgfx11ApplicationD1Ev>
 8009f3a:	f44f 719c 	mov.w	r1, #312	; 0x138
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f023 f8c4 	bl	802d0cc <_ZdlPvj>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	4618      	mov	r0, r3
 8009f48:	3708      	adds	r7, #8
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}

08009f4e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8009f4e:	b580      	push	{r7, lr}
 8009f50:	b082      	sub	sp, #8
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f000 f804 	bl	8009f64 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8009f5c:	bf00      	nop
 8009f5e:	3708      	adds	r7, #8
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d00f      	beq.n	8009f96 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	330c      	adds	r3, #12
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	4610      	mov	r0, r2
 8009f8a:	4798      	blx	r3
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d001      	beq.n	8009f96 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8009f92:	2301      	movs	r3, #1
 8009f94:	e000      	b.n	8009f98 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8009f96:	2300      	movs	r3, #0
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d00e      	beq.n	8009fba <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	3308      	adds	r3, #8
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	4610      	mov	r0, r2
 8009fb0:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 8009fba:	bf00      	nop
 8009fbc:	3708      	adds	r7, #8
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
	...

08009fc4 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b082      	sub	sp, #8
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	4a05      	ldr	r2, [pc, #20]	; (8009fe4 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	601a      	str	r2, [r3, #0]
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f7ff ff97 	bl	8009f08 <_ZN8touchgfx11ApplicationD1Ev>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3708      	adds	r7, #8
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}
 8009fe4:	08030e14 	.word	0x08030e14

08009fe8 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b082      	sub	sp, #8
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f7ff ffe7 	bl	8009fc4 <_ZN8touchgfx14MVPApplicationD1Ev>
 8009ff6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f023 f866 	bl	802d0cc <_ZdlPvj>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	4618      	mov	r0, r3
 800a004:	3708      	adds	r7, #8
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
	...

0800a00c <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b082      	sub	sp, #8
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	4a08      	ldr	r2, [pc, #32]	; (800a038 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	601a      	str	r2, [r3, #0]
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800a020:	4618      	mov	r0, r3
 800a022:	f000 fae7 	bl	800a5f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	4618      	mov	r0, r3
 800a02a:	f7ff ffcb 	bl	8009fc4 <_ZN8touchgfx14MVPApplicationD1Ev>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	4618      	mov	r0, r3
 800a032:	3708      	adds	r7, #8
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}
 800a038:	08030db8 	.word	0x08030db8

0800a03c <_ZN23FrontendApplicationBaseD0Ev>:
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b082      	sub	sp, #8
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f7ff ffe1 	bl	800a00c <_ZN23FrontendApplicationBaseD1Ev>
 800a04a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f023 f83c 	bl	802d0cc <_ZdlPvj>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	4618      	mov	r0, r3
 800a058:	3708      	adds	r7, #8
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
	...

0800a060 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800a060:	b580      	push	{r7, lr}
 800a062:	b082      	sub	sp, #8
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	4a05      	ldr	r2, [pc, #20]	; (800a080 <_ZN19FrontendApplicationD1Ev+0x20>)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	601a      	str	r2, [r3, #0]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	4618      	mov	r0, r3
 800a072:	f7ff ffcb 	bl	800a00c <_ZN23FrontendApplicationBaseD1Ev>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	4618      	mov	r0, r3
 800a07a:	3708      	adds	r7, #8
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	08030d74 	.word	0x08030d74

0800a084 <_ZN19FrontendApplicationD0Ev>:
 800a084:	b580      	push	{r7, lr}
 800a086:	b082      	sub	sp, #8
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f7ff ffe7 	bl	800a060 <_ZN19FrontendApplicationD1Ev>
 800a092:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f023 f818 	bl	802d0cc <_ZdlPvj>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3708      	adds	r7, #8
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}

0800a0a6 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800a0a6:	b580      	push	{r7, lr}
 800a0a8:	b082      	sub	sp, #8
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f006 fe61 	bl	8010d7c <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f014 fef3 	bl	801eea8 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 800a0c2:	bf00      	nop
 800a0c4:	3708      	adds	r7, #8
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}

0800a0ca <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 800a0ca:	b580      	push	{r7, lr}
 800a0cc:	b082      	sub	sp, #8
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	6078      	str	r0, [r7, #4]
 800a0d2:	6039      	str	r1, [r7, #0]
    {
        app.gotomainScreenScreenNoTransition();
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f002 feae 	bl	800ce38 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>
    }
 800a0dc:	bf00      	nop
 800a0de:	3708      	adds	r7, #8
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b086      	sub	sp, #24
 800a0e8:	af02      	add	r7, sp, #8
 800a0ea:	60f8      	str	r0, [r7, #12]
 800a0ec:	60b9      	str	r1, [r7, #8]
 800a0ee:	607a      	str	r2, [r7, #4]
 800a0f0:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 800a0f2:	68f8      	ldr	r0, [r7, #12]
 800a0f4:	69bb      	ldr	r3, [r7, #24]
 800a0f6:	9300      	str	r3, [sp, #0]
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	687a      	ldr	r2, [r7, #4]
 800a0fc:	68b9      	ldr	r1, [r7, #8]
 800a0fe:	f7ff fd27 	bl	8009b50 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 800a102:	4a04      	ldr	r2, [pc, #16]	; (800a114 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	601a      	str	r2, [r3, #0]
    {

    }
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	4618      	mov	r0, r3
 800a10c:	3710      	adds	r7, #16
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
 800a112:	bf00      	nop
 800a114:	08030d60 	.word	0x08030d60

0800a118 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 800a118:	b580      	push	{r7, lr}
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	4801      	ldr	r0, [pc, #4]	; (800a124 <__tcf_0+0xc>)
 800a11e:	f000 f95f 	bl	800a3e0 <_ZN12FrontendHeapD1Ev>
 800a122:	bd80      	pop	{r7, pc}
 800a124:	200001b0 	.word	0x200001b0

0800a128 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 800a128:	b580      	push	{r7, lr}
 800a12a:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 800a12c:	4b12      	ldr	r3, [pc, #72]	; (800a178 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	f3bf 8f5b 	dmb	ish
 800a134:	b2db      	uxtb	r3, r3
 800a136:	f003 0301 	and.w	r3, r3, #1
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	bf0c      	ite	eq
 800a13e:	2301      	moveq	r3, #1
 800a140:	2300      	movne	r3, #0
 800a142:	b2db      	uxtb	r3, r3
 800a144:	2b00      	cmp	r3, #0
 800a146:	d013      	beq.n	800a170 <_ZN12FrontendHeap11getInstanceEv+0x48>
 800a148:	480b      	ldr	r0, [pc, #44]	; (800a178 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 800a14a:	f022 ffc1 	bl	802d0d0 <__cxa_guard_acquire>
 800a14e:	4603      	mov	r3, r0
 800a150:	2b00      	cmp	r3, #0
 800a152:	bf14      	ite	ne
 800a154:	2301      	movne	r3, #1
 800a156:	2300      	moveq	r3, #0
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d008      	beq.n	800a170 <_ZN12FrontendHeap11getInstanceEv+0x48>
 800a15e:	4807      	ldr	r0, [pc, #28]	; (800a17c <_ZN12FrontendHeap11getInstanceEv+0x54>)
 800a160:	f000 f868 	bl	800a234 <_ZN12FrontendHeapC1Ev>
 800a164:	4804      	ldr	r0, [pc, #16]	; (800a178 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 800a166:	f022 ffcf 	bl	802d108 <__cxa_guard_release>
 800a16a:	4805      	ldr	r0, [pc, #20]	; (800a180 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 800a16c:	f024 f89a 	bl	802e2a4 <atexit>
        return instance;
 800a170:	4b02      	ldr	r3, [pc, #8]	; (800a17c <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 800a172:	4618      	mov	r0, r3
 800a174:	bd80      	pop	{r7, pc}
 800a176:	bf00      	nop
 800a178:	20000d10 	.word	0x20000d10
 800a17c:	200001b0 	.word	0x200001b0
 800a180:	0800a119 	.word	0x0800a119

0800a184 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 800a184:	b580      	push	{r7, lr}
 800a186:	b082      	sub	sp, #8
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	4a05      	ldr	r2, [pc, #20]	; (800a1a4 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	601a      	str	r2, [r3, #0]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	4618      	mov	r0, r3
 800a196:	f7ff fcfb 	bl	8009b90 <_ZN8touchgfx7MVPHeapD1Ev>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	4618      	mov	r0, r3
 800a19e:	3708      	adds	r7, #8
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}
 800a1a4:	08030d60 	.word	0x08030d60

0800a1a8 <_ZN16FrontendHeapBaseD0Ev>:
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b082      	sub	sp, #8
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f7ff ffe7 	bl	800a184 <_ZN16FrontendHeapBaseD1Ev>
 800a1b6:	2114      	movs	r1, #20
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f022 ff87 	bl	802d0cc <_ZdlPvj>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3708      	adds	r7, #8
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI23sequenceScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b082      	sub	sp, #8
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f010 fd76 	bl	801acc4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800a1d8:	4a03      	ldr	r2, [pc, #12]	; (800a1e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI23sequenceScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	601a      	str	r2, [r3, #0]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3708      	adds	r7, #8
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}
 800a1e8:	08030d2c 	.word	0x08030d2c

0800a1ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI18sequenceScreenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b082      	sub	sp, #8
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f010 fd64 	bl	801acc4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800a1fc:	4a03      	ldr	r2, [pc, #12]	; (800a20c <_ZN8touchgfx9PartitionINS_4meta8TypeListI18sequenceScreenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	601a      	str	r2, [r3, #0]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	4618      	mov	r0, r3
 800a206:	3708      	adds	r7, #8
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}
 800a20c:	08030cf8 	.word	0x08030cf8

0800a210 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
 800a210:	b580      	push	{r7, lr}
 800a212:	b082      	sub	sp, #8
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	4618      	mov	r0, r3
 800a21c:	f010 fd52 	bl	801acc4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800a220:	4a03      	ldr	r2, [pc, #12]	; (800a230 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	601a      	str	r2, [r3, #0]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	4618      	mov	r0, r3
 800a22a:	3708      	adds	r7, #8
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}
 800a230:	08030cc4 	.word	0x08030cc4

0800a234 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800a234:	b590      	push	{r4, r7, lr}
 800a236:	b085      	sub	sp, #20
 800a238:	af02      	add	r7, sp, #8
 800a23a:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f103 0114 	add.w	r1, r3, #20
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f603 14a8 	addw	r4, r3, #2472	; 0x9a8
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 800a256:	9300      	str	r3, [sp, #0]
 800a258:	4623      	mov	r3, r4
 800a25a:	f7ff ff43 	bl	800a0e4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 800a25e:	4a18      	ldr	r2, [pc, #96]	; (800a2c0 <_ZN12FrontendHeapC1Ev+0x8c>)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	601a      	str	r2, [r3, #0]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	3314      	adds	r3, #20
 800a268:	4618      	mov	r0, r3
 800a26a:	f7ff ffad 	bl	800a1c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI23sequenceScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	332c      	adds	r3, #44	; 0x2c
 800a272:	4618      	mov	r0, r3
 800a274:	f7ff ffba 	bl	800a1ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI18sequenceScreenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f603 13a8 	addw	r3, r3, #2472	; 0x9a8
 800a27e:	4618      	mov	r0, r3
 800a280:	f7ff ffc6 	bl	800a210 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f603 2304 	addw	r3, r3, #2564	; 0xa04
 800a28a:	4618      	mov	r0, r3
 800a28c:	f006 fd68 	bl	8010d60 <_ZN5ModelC1Ev>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f603 2008 	addw	r0, r3, #2568	; 0xa08
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f603 2304 	addw	r3, r3, #2564	; 0xa04
 800a29c:	687a      	ldr	r2, [r7, #4]
 800a29e:	4619      	mov	r1, r3
 800a2a0:	f006 fd48 	bl	8010d34 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 800a2ac:	4619      	mov	r1, r3
 800a2ae:	4610      	mov	r0, r2
 800a2b0:	f7ff ff0b 	bl	800a0ca <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	370c      	adds	r7, #12
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd90      	pop	{r4, r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	08030cb0 	.word	0x08030cb0

0800a2c4 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b086      	sub	sp, #24
 800a2c8:	af02      	add	r7, sp, #8
 800a2ca:	60f8      	str	r0, [r7, #12]
 800a2cc:	60b9      	str	r1, [r7, #8]
 800a2ce:	607a      	str	r2, [r7, #4]
 800a2d0:	603b      	str	r3, [r7, #0]
 800a2d2:	68f8      	ldr	r0, [r7, #12]
 800a2d4:	8bbb      	ldrh	r3, [r7, #28]
 800a2d6:	9301      	str	r3, [sp, #4]
 800a2d8:	8b3b      	ldrh	r3, [r7, #24]
 800a2da:	9300      	str	r3, [sp, #0]
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	687a      	ldr	r2, [r7, #4]
 800a2e0:	68b9      	ldr	r1, [r7, #8]
 800a2e2:	f7ff fd6b 	bl	8009dbc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 800a2e6:	4a04      	ldr	r2, [pc, #16]	; (800a2f8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	601a      	str	r2, [r3, #0]
    }
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3710      	adds	r7, #16
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
 800a2f6:	bf00      	nop
 800a2f8:	08030ebc 	.word	0x08030ebc

0800a2fc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b086      	sub	sp, #24
 800a300:	af02      	add	r7, sp, #8
 800a302:	60f8      	str	r0, [r7, #12]
 800a304:	60b9      	str	r1, [r7, #8]
 800a306:	607a      	str	r2, [r7, #4]
 800a308:	603b      	str	r3, [r7, #0]
 800a30a:	68f8      	ldr	r0, [r7, #12]
 800a30c:	8bbb      	ldrh	r3, [r7, #28]
 800a30e:	9301      	str	r3, [sp, #4]
 800a310:	8b3b      	ldrh	r3, [r7, #24]
 800a312:	9300      	str	r3, [sp, #0]
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	687a      	ldr	r2, [r7, #4]
 800a318:	68b9      	ldr	r1, [r7, #8]
 800a31a:	f7ff ffd3 	bl	800a2c4 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800a31e:	4a04      	ldr	r2, [pc, #16]	; (800a330 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	601a      	str	r2, [r3, #0]
    }
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	4618      	mov	r0, r3
 800a328:	3710      	adds	r7, #16
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}
 800a32e:	bf00      	nop
 800a330:	080309a8 	.word	0x080309a8

0800a334 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 800a334:	b480      	push	{r7}
 800a336:	b083      	sub	sp, #12
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	4a04      	ldr	r2, [pc, #16]	; (800a350 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	601a      	str	r2, [r3, #0]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	4618      	mov	r0, r3
 800a346:	370c      	adds	r7, #12
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr
 800a350:	08030990 	.word	0x08030990

0800a354 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 800a354:	b580      	push	{r7, lr}
 800a356:	b082      	sub	sp, #8
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	4618      	mov	r0, r3
 800a360:	f7ff ffe8 	bl	800a334 <_ZN8touchgfx15TouchControllerC1Ev>
 800a364:	4a03      	ldr	r2, [pc, #12]	; (800a374 <_ZN20STM32TouchControllerC1Ev+0x20>)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	601a      	str	r2, [r3, #0]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	4618      	mov	r0, r3
 800a36e:	3708      	adds	r7, #8
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}
 800a374:	08030978 	.word	0x08030978

0800a378 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 240, 320);

void touchgfx_init()
{
 800a378:	b590      	push	{r4, r7, lr}
 800a37a:	b085      	sub	sp, #20
 800a37c:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 800a37e:	f002 f98b 	bl	800c698 <_ZN14BitmapDatabase11getInstanceEv>
 800a382:	4604      	mov	r4, r0
 800a384:	f002 f992 	bl	800c6ac <_ZN14BitmapDatabase15getInstanceSizeEv>
 800a388:	4603      	mov	r3, r0
 800a38a:	4619      	mov	r1, r3
 800a38c:	2300      	movs	r3, #0
 800a38e:	9300      	str	r3, [sp, #0]
 800a390:	2300      	movs	r3, #0
 800a392:	2200      	movs	r2, #0
 800a394:	4620      	mov	r0, r4
 800a396:	f017 fa0b 	bl	80217b0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 800a39a:	4809      	ldr	r0, [pc, #36]	; (800a3c0 <touchgfx_init+0x48>)
 800a39c:	f7ff fba8 	bl	8009af0 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 800a3a0:	2000      	movs	r0, #0
 800a3a2:	f004 fbad 	bl	800eb00 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 800a3a6:	4807      	ldr	r0, [pc, #28]	; (800a3c4 <touchgfx_init+0x4c>)
 800a3a8:	f017 f94c 	bl	8021644 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 800a3ac:	f7ff febc 	bl	800a128 <_ZN12FrontendHeap11getInstanceEv>
 800a3b0:	6078      	str	r0, [r7, #4]
    (void)heap; // we need to obtain the reference above to initialize the frontend heap.

    hal.initialize();
 800a3b2:	4805      	ldr	r0, [pc, #20]	; (800a3c8 <touchgfx_init+0x50>)
 800a3b4:	f7fe fdba 	bl	8008f2c <_ZN11TouchGFXHAL10initializeEv>
}
 800a3b8:	bf00      	nop
 800a3ba:	370c      	adds	r7, #12
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd90      	pop	{r4, r7, pc}
 800a3c0:	200019b0 	.word	0x200019b0
 800a3c4:	20000008 	.word	0x20000008
 800a3c8:	200019b4 	.word	0x200019b4

0800a3cc <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 800a3d0:	4802      	ldr	r0, [pc, #8]	; (800a3dc <touchgfx_taskEntry+0x10>)
 800a3d2:	f7fe fdb7 	bl	8008f44 <_ZN11TouchGFXHAL9taskEntryEv>
}
 800a3d6:	bf00      	nop
 800a3d8:	bd80      	pop	{r7, pc}
 800a3da:	bf00      	nop
 800a3dc:	200019b4 	.word	0x200019b4

0800a3e0 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b082      	sub	sp, #8
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	4a10      	ldr	r2, [pc, #64]	; (800a42c <_ZN12FrontendHeapD1Ev+0x4c>)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	601a      	str	r2, [r3, #0]
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f7ff fe33 	bl	800a060 <_ZN19FrontendApplicationD1Ev>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f603 13a8 	addw	r3, r3, #2472	; 0x9a8
 800a400:	4618      	mov	r0, r3
 800a402:	f000 f827 	bl	800a454 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	332c      	adds	r3, #44	; 0x2c
 800a40a:	4618      	mov	r0, r3
 800a40c:	f000 f844 	bl	800a498 <_ZN8touchgfx9PartitionINS_4meta8TypeListI18sequenceScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	3314      	adds	r3, #20
 800a414:	4618      	mov	r0, r3
 800a416:	f000 f863 	bl	800a4e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI23sequenceScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	4618      	mov	r0, r3
 800a41e:	f7ff feb1 	bl	800a184 <_ZN16FrontendHeapBaseD1Ev>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	4618      	mov	r0, r3
 800a426:	3708      	adds	r7, #8
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}
 800a42c:	08030cb0 	.word	0x08030cb0

0800a430 <_ZN12FrontendHeapD0Ev>:
 800a430:	b580      	push	{r7, lr}
 800a432:	b082      	sub	sp, #8
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f7ff ffd1 	bl	800a3e0 <_ZN12FrontendHeapD1Ev>
 800a43e:	f44f 6136 	mov.w	r1, #2912	; 0xb60
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f022 fe42 	bl	802d0cc <_ZdlPvj>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	4618      	mov	r0, r3
 800a44c:	3708      	adds	r7, #8
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}
	...

0800a454 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	4a05      	ldr	r2, [pc, #20]	; (800a474 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	601a      	str	r2, [r3, #0]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	4618      	mov	r0, r3
 800a466:	f010 fc2b 	bl	801acc0 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	4618      	mov	r0, r3
 800a46e:	3708      	adds	r7, #8
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}
 800a474:	08030cc4 	.word	0x08030cc4

0800a478 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 800a478:	b580      	push	{r7, lr}
 800a47a:	b082      	sub	sp, #8
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f7ff ffe7 	bl	800a454 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 800a486:	215c      	movs	r1, #92	; 0x5c
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f022 fe1f 	bl	802d0cc <_ZdlPvj>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	4618      	mov	r0, r3
 800a492:	3708      	adds	r7, #8
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}

0800a498 <_ZN8touchgfx9PartitionINS_4meta8TypeListI18sequenceScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800a498:	b580      	push	{r7, lr}
 800a49a:	b082      	sub	sp, #8
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	4a05      	ldr	r2, [pc, #20]	; (800a4b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI18sequenceScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	601a      	str	r2, [r3, #0]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f010 fc09 	bl	801acc0 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	3708      	adds	r7, #8
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}
 800a4b8:	08030cf8 	.word	0x08030cf8

0800a4bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI18sequenceScreenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b082      	sub	sp, #8
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f7ff ffe7 	bl	800a498 <_ZN8touchgfx9PartitionINS_4meta8TypeListI18sequenceScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800a4ca:	f640 117c 	movw	r1, #2428	; 0x97c
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f022 fdfc 	bl	802d0cc <_ZdlPvj>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3708      	adds	r7, #8
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
	...

0800a4e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI23sequenceScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b082      	sub	sp, #8
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	4a05      	ldr	r2, [pc, #20]	; (800a500 <_ZN8touchgfx9PartitionINS_4meta8TypeListI23sequenceScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	601a      	str	r2, [r3, #0]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f010 fbe5 	bl	801acc0 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3708      	adds	r7, #8
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}
 800a500:	08030d2c 	.word	0x08030d2c

0800a504 <_ZN8touchgfx9PartitionINS_4meta8TypeListI23sequenceScreenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800a504:	b580      	push	{r7, lr}
 800a506:	b082      	sub	sp, #8
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f7ff ffe7 	bl	800a4e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI23sequenceScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800a512:	2118      	movs	r1, #24
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f022 fdd9 	bl	802d0cc <_ZdlPvj>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	4618      	mov	r0, r3
 800a51e:	3708      	adds	r7, #8
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 800a524:	b580      	push	{r7, lr}
 800a526:	b082      	sub	sp, #8
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	4a05      	ldr	r2, [pc, #20]	; (800a544 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	601a      	str	r2, [r3, #0]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	4618      	mov	r0, r3
 800a536:	f7ff fbad 	bl	8009c94 <_ZN8touchgfx3LCDD1Ev>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	4618      	mov	r0, r3
 800a53e:	3708      	adds	r7, #8
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}
 800a544:	08034664 	.word	0x08034664

0800a548 <_ZN8touchgfx8LCD16bppD0Ev>:
 800a548:	b580      	push	{r7, lr}
 800a54a:	b082      	sub	sp, #8
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f7ff ffe7 	bl	800a524 <_ZN8touchgfx8LCD16bppD1Ev>
 800a556:	2178      	movs	r1, #120	; 0x78
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f022 fdb7 	bl	802d0cc <_ZdlPvj>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	4618      	mov	r0, r3
 800a562:	3708      	adds	r7, #8
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}

0800a568 <_Z41__static_initialization_and_destruction_0ii>:
 800a568:	b580      	push	{r7, lr}
 800a56a:	b084      	sub	sp, #16
 800a56c:	af02      	add	r7, sp, #8
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	6039      	str	r1, [r7, #0]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2b01      	cmp	r3, #1
 800a576:	d118      	bne.n	800a5aa <_Z41__static_initialization_and_destruction_0ii+0x42>
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a57e:	4293      	cmp	r3, r2
 800a580:	d113      	bne.n	800a5aa <_Z41__static_initialization_and_destruction_0ii+0x42>
static STM32TouchController tc;
 800a582:	4817      	ldr	r0, [pc, #92]	; (800a5e0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800a584:	f7ff fee6 	bl	800a354 <_ZN20STM32TouchControllerC1Ev>
static STM32F4DMA dma;
 800a588:	4816      	ldr	r0, [pc, #88]	; (800a5e4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800a58a:	f7fe ff97 	bl	80094bc <_ZN10STM32F4DMAC1Ev>
static LCD16bpp display;
 800a58e:	4816      	ldr	r0, [pc, #88]	; (800a5e8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800a590:	f01a f8fe 	bl	8024790 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 240, 320);
 800a594:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800a598:	9301      	str	r3, [sp, #4]
 800a59a:	23f0      	movs	r3, #240	; 0xf0
 800a59c:	9300      	str	r3, [sp, #0]
 800a59e:	4b10      	ldr	r3, [pc, #64]	; (800a5e0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800a5a0:	4a11      	ldr	r2, [pc, #68]	; (800a5e8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800a5a2:	4910      	ldr	r1, [pc, #64]	; (800a5e4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800a5a4:	4811      	ldr	r0, [pc, #68]	; (800a5ec <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800a5a6:	f7ff fea9 	bl	800a2fc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d113      	bne.n	800a5d8 <_Z41__static_initialization_and_destruction_0ii+0x70>
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d10e      	bne.n	800a5d8 <_Z41__static_initialization_and_destruction_0ii+0x70>
 800a5ba:	480c      	ldr	r0, [pc, #48]	; (800a5ec <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800a5bc:	f7fe fd42 	bl	8009044 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 800a5c0:	480b      	ldr	r0, [pc, #44]	; (800a5f0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800a5c2:	f000 f839 	bl	800a638 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 800a5c6:	4808      	ldr	r0, [pc, #32]	; (800a5e8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800a5c8:	f7ff ffac 	bl	800a524 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32F4DMA dma;
 800a5cc:	4805      	ldr	r0, [pc, #20]	; (800a5e4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800a5ce:	f7fe ff9f 	bl	8009510 <_ZN10STM32F4DMAD1Ev>
static STM32TouchController tc;
 800a5d2:	4803      	ldr	r0, [pc, #12]	; (800a5e0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800a5d4:	f7fe fa4c 	bl	8008a70 <_ZN20STM32TouchControllerD1Ev>
}
 800a5d8:	bf00      	nop
 800a5da:	3708      	adds	r7, #8
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}
 800a5e0:	20000d14 	.word	0x20000d14
 800a5e4:	20000d18 	.word	0x20000d18
 800a5e8:	20001938 	.word	0x20001938
 800a5ec:	200019b4 	.word	0x200019b4
 800a5f0:	20000008 	.word	0x20000008

0800a5f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b082      	sub	sp, #8
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	4a05      	ldr	r2, [pc, #20]	; (800a614 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	601a      	str	r2, [r3, #0]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	4618      	mov	r0, r3
 800a606:	f7ff fb83 	bl	8009d10 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	4618      	mov	r0, r3
 800a60e:	3708      	adds	r7, #8
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}
 800a614:	08030dfc 	.word	0x08030dfc

0800a618 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800a618:	b580      	push	{r7, lr}
 800a61a:	b082      	sub	sp, #8
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f7ff ffe7 	bl	800a5f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800a626:	2110      	movs	r1, #16
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f022 fd4f 	bl	802d0cc <_ZdlPvj>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	4618      	mov	r0, r3
 800a632:	3708      	adds	r7, #8
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}

0800a638 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800a638:	b580      	push	{r7, lr}
 800a63a:	b082      	sub	sp, #8
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	4a05      	ldr	r2, [pc, #20]	; (800a658 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	601a      	str	r2, [r3, #0]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	4618      	mov	r0, r3
 800a64a:	f7ff fa61 	bl	8009b10 <_ZN8touchgfx12FontProviderD1Ev>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	4618      	mov	r0, r3
 800a652:	3708      	adds	r7, #8
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}
 800a658:	08030f98 	.word	0x08030f98

0800a65c <_ZN23ApplicationFontProviderD0Ev>:
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f7ff ffe7 	bl	800a638 <_ZN23ApplicationFontProviderD1Ev>
 800a66a:	2104      	movs	r1, #4
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f022 fd2d 	bl	802d0cc <_ZdlPvj>
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	4618      	mov	r0, r3
 800a676:	3708      	adds	r7, #8
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}

0800a67c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity
     */
    virtual uint16_t capacity() const
 800a67c:	b480      	push	{r7}
 800a67e:	b083      	sub	sp, #12
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 800a684:	2301      	movs	r3, #1
    }
 800a686:	4618      	mov	r0, r3
 800a688:	370c      	adds	r7, #12
 800a68a:	46bd      	mov	sp, r7
 800a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a690:	4770      	bx	lr

0800a692 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size
     */
    virtual uint32_t element_size()
 800a692:	b480      	push	{r7}
 800a694:	b083      	sub	sp, #12
 800a696:	af00      	add	r7, sp, #0
 800a698:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 800a69a:	2354      	movs	r3, #84	; 0x54
    }
 800a69c:	4618      	mov	r0, r3
 800a69e:	370c      	adds	r7, #12
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr

0800a6a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element
     */
    virtual void* element(uint16_t index)
 800a6a8:	b480      	push	{r7}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	460b      	mov	r3, r1
 800a6b2:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 800a6b4:	887b      	ldrh	r3, [r7, #2]
 800a6b6:	2254      	movs	r2, #84	; 0x54
 800a6b8:	fb02 f303 	mul.w	r3, r2, r3
 800a6bc:	3308      	adds	r3, #8
 800a6be:	687a      	ldr	r2, [r7, #4]
 800a6c0:	4413      	add	r3, r2
    }
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	370c      	adds	r7, #12
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6cc:	4770      	bx	lr

0800a6ce <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element
     */
    virtual const void* element(uint16_t index) const
 800a6ce:	b480      	push	{r7}
 800a6d0:	b083      	sub	sp, #12
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	6078      	str	r0, [r7, #4]
 800a6d6:	460b      	mov	r3, r1
 800a6d8:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 800a6da:	887b      	ldrh	r3, [r7, #2]
 800a6dc:	2254      	movs	r2, #84	; 0x54
 800a6de:	fb02 f303 	mul.w	r3, r2, r3
 800a6e2:	3308      	adds	r3, #8
 800a6e4:	687a      	ldr	r2, [r7, #4]
 800a6e6:	4413      	add	r3, r2
    }
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	370c      	adds	r7, #12
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr

0800a6f4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI18sequenceScreenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800a6f4:	b480      	push	{r7}
 800a6f6:	b083      	sub	sp, #12
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800a6fc:	2301      	movs	r3, #1
    }
 800a6fe:	4618      	mov	r0, r3
 800a700:	370c      	adds	r7, #12
 800a702:	46bd      	mov	sp, r7
 800a704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a708:	4770      	bx	lr

0800a70a <_ZN8touchgfx9PartitionINS_4meta8TypeListI18sequenceScreenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800a70a:	b480      	push	{r7}
 800a70c:	b083      	sub	sp, #12
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800a712:	f640 1374 	movw	r3, #2420	; 0x974
    }
 800a716:	4618      	mov	r0, r3
 800a718:	370c      	adds	r7, #12
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr

0800a722 <_ZN8touchgfx9PartitionINS_4meta8TypeListI18sequenceScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800a722:	b480      	push	{r7}
 800a724:	b083      	sub	sp, #12
 800a726:	af00      	add	r7, sp, #0
 800a728:	6078      	str	r0, [r7, #4]
 800a72a:	460b      	mov	r3, r1
 800a72c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800a72e:	887b      	ldrh	r3, [r7, #2]
 800a730:	f640 1274 	movw	r2, #2420	; 0x974
 800a734:	fb02 f303 	mul.w	r3, r2, r3
 800a738:	3308      	adds	r3, #8
 800a73a:	687a      	ldr	r2, [r7, #4]
 800a73c:	4413      	add	r3, r2
    }
 800a73e:	4618      	mov	r0, r3
 800a740:	370c      	adds	r7, #12
 800a742:	46bd      	mov	sp, r7
 800a744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a748:	4770      	bx	lr

0800a74a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI18sequenceScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800a74a:	b480      	push	{r7}
 800a74c:	b083      	sub	sp, #12
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6078      	str	r0, [r7, #4]
 800a752:	460b      	mov	r3, r1
 800a754:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800a756:	887b      	ldrh	r3, [r7, #2]
 800a758:	f640 1274 	movw	r2, #2420	; 0x974
 800a75c:	fb02 f303 	mul.w	r3, r2, r3
 800a760:	3308      	adds	r3, #8
 800a762:	687a      	ldr	r2, [r7, #4]
 800a764:	4413      	add	r3, r2
    }
 800a766:	4618      	mov	r0, r3
 800a768:	370c      	adds	r7, #12
 800a76a:	46bd      	mov	sp, r7
 800a76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a770:	4770      	bx	lr

0800a772 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI23sequenceScreenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800a772:	b480      	push	{r7}
 800a774:	b083      	sub	sp, #12
 800a776:	af00      	add	r7, sp, #0
 800a778:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800a77a:	2301      	movs	r3, #1
    }
 800a77c:	4618      	mov	r0, r3
 800a77e:	370c      	adds	r7, #12
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr

0800a788 <_ZN8touchgfx9PartitionINS_4meta8TypeListI23sequenceScreenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800a788:	b480      	push	{r7}
 800a78a:	b083      	sub	sp, #12
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800a790:	2310      	movs	r3, #16
    }
 800a792:	4618      	mov	r0, r3
 800a794:	370c      	adds	r7, #12
 800a796:	46bd      	mov	sp, r7
 800a798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79c:	4770      	bx	lr

0800a79e <_ZN8touchgfx9PartitionINS_4meta8TypeListI23sequenceScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800a79e:	b480      	push	{r7}
 800a7a0:	b083      	sub	sp, #12
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	6078      	str	r0, [r7, #4]
 800a7a6:	460b      	mov	r3, r1
 800a7a8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800a7aa:	887b      	ldrh	r3, [r7, #2]
 800a7ac:	011b      	lsls	r3, r3, #4
 800a7ae:	3308      	adds	r3, #8
 800a7b0:	687a      	ldr	r2, [r7, #4]
 800a7b2:	4413      	add	r3, r2
    }
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	370c      	adds	r7, #12
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr

0800a7c0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI23sequenceScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800a7c0:	b480      	push	{r7}
 800a7c2:	b083      	sub	sp, #12
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	460b      	mov	r3, r1
 800a7ca:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800a7cc:	887b      	ldrh	r3, [r7, #2]
 800a7ce:	011b      	lsls	r3, r3, #4
 800a7d0:	3308      	adds	r3, #8
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	4413      	add	r3, r2
    }
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	370c      	adds	r7, #12
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e0:	4770      	bx	lr

0800a7e2 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800a7e2:	b580      	push	{r7, lr}
 800a7e4:	b082      	sub	sp, #8
 800a7e6:	af00      	add	r7, sp, #0
 800a7e8:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	68d2      	ldr	r2, [r2, #12]
 800a7f2:	1052      	asrs	r2, r2, #1
 800a7f4:	1899      	adds	r1, r3, r2
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	68db      	ldr	r3, [r3, #12]
 800a7fa:	f003 0301 	and.w	r3, r3, #1
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d102      	bne.n	800a808 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	689b      	ldr	r3, [r3, #8]
 800a806:	e00a      	b.n	800a81e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	685b      	ldr	r3, [r3, #4]
 800a80c:	687a      	ldr	r2, [r7, #4]
 800a80e:	68d2      	ldr	r2, [r2, #12]
 800a810:	1052      	asrs	r2, r2, #1
 800a812:	4413      	add	r3, r2
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	687a      	ldr	r2, [r7, #4]
 800a818:	6892      	ldr	r2, [r2, #8]
 800a81a:	4413      	add	r3, r2
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	4608      	mov	r0, r1
 800a820:	4798      	blx	r3
    }
 800a822:	bf00      	nop
 800a824:	3708      	adds	r7, #8
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}

0800a82a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800a82a:	b480      	push	{r7}
 800a82c:	b083      	sub	sp, #12
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	685b      	ldr	r3, [r3, #4]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d010      	beq.n	800a85c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	689b      	ldr	r3, [r3, #8]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d107      	bne.n	800a852 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	68db      	ldr	r3, [r3, #12]
 800a846:	f003 0301 	and.w	r3, r3, #1
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d101      	bne.n	800a852 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800a84e:	2301      	movs	r3, #1
 800a850:	e000      	b.n	800a854 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800a852:	2300      	movs	r3, #0
 800a854:	2b01      	cmp	r3, #1
 800a856:	d001      	beq.n	800a85c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800a858:	2301      	movs	r3, #1
 800a85a:	e000      	b.n	800a85e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800a85c:	2300      	movs	r3, #0
    }
 800a85e:	4618      	mov	r0, r3
 800a860:	370c      	adds	r7, #12
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr

0800a86a <_GLOBAL__sub_I_touchgfx_init>:
 800a86a:	b580      	push	{r7, lr}
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a872:	2001      	movs	r0, #1
 800a874:	f7ff fe78 	bl	800a568 <_Z41__static_initialization_and_destruction_0ii>
 800a878:	bd80      	pop	{r7, pc}

0800a87a <_GLOBAL__sub_D_touchgfx_init>:
 800a87a:	b580      	push	{r7, lr}
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a882:	2000      	movs	r0, #0
 800a884:	f7ff fe70 	bl	800a568 <_Z41__static_initialization_and_destruction_0ii>
 800a888:	bd80      	pop	{r7, pc}

0800a88a <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 800a88a:	b580      	push	{r7, lr}
 800a88c:	b082      	sub	sp, #8
 800a88e:	af00      	add	r7, sp, #0
 800a890:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	3318      	adds	r3, #24
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	4798      	blx	r3
    }
 800a89e:	bf00      	nop
 800a8a0:	3708      	adds	r7, #8
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}

0800a8a6 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 800a8a6:	b480      	push	{r7}
 800a8a8:	b083      	sub	sp, #12
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
 800a8ae:	460b      	mov	r3, r1
 800a8b0:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	78fa      	ldrb	r2, [r7, #3]
 800a8b6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 800a8ba:	bf00      	nop
 800a8bc:	370c      	adds	r7, #12
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c4:	4770      	bx	lr

0800a8c6 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 800a8c6:	b480      	push	{r7}
 800a8c8:	b083      	sub	sp, #12
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800a8d4:	3301      	adds	r3, #1
 800a8d6:	b2da      	uxtb	r2, r3
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 800a8de:	bf00      	nop
 800a8e0:	370c      	adds	r7, #12
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e8:	4770      	bx	lr
	...

0800a8ec <__NVIC_EnableIRQ>:
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b083      	sub	sp, #12
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a8f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	db0d      	blt.n	800a91a <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a8fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a902:	b2db      	uxtb	r3, r3
 800a904:	f003 021f 	and.w	r2, r3, #31
 800a908:	4907      	ldr	r1, [pc, #28]	; (800a928 <__NVIC_EnableIRQ+0x3c>)
 800a90a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a90e:	095b      	lsrs	r3, r3, #5
 800a910:	2001      	movs	r0, #1
 800a912:	fa00 f202 	lsl.w	r2, r0, r2
 800a916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a91a:	bf00      	nop
 800a91c:	370c      	adds	r7, #12
 800a91e:	46bd      	mov	sp, r7
 800a920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a924:	4770      	bx	lr
 800a926:	bf00      	nop
 800a928:	e000e100 	.word	0xe000e100

0800a92c <__NVIC_DisableIRQ>:
{
 800a92c:	b480      	push	{r7}
 800a92e:	b083      	sub	sp, #12
 800a930:	af00      	add	r7, sp, #0
 800a932:	4603      	mov	r3, r0
 800a934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	db12      	blt.n	800a964 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a93e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a942:	b2db      	uxtb	r3, r3
 800a944:	f003 021f 	and.w	r2, r3, #31
 800a948:	4909      	ldr	r1, [pc, #36]	; (800a970 <__NVIC_DisableIRQ+0x44>)
 800a94a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a94e:	095b      	lsrs	r3, r3, #5
 800a950:	2001      	movs	r0, #1
 800a952:	fa00 f202 	lsl.w	r2, r0, r2
 800a956:	3320      	adds	r3, #32
 800a958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800a95c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a960:	f3bf 8f6f 	isb	sy
}
 800a964:	bf00      	nop
 800a966:	370c      	adds	r7, #12
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr
 800a970:	e000e100 	.word	0xe000e100

0800a974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a974:	b480      	push	{r7}
 800a976:	b083      	sub	sp, #12
 800a978:	af00      	add	r7, sp, #0
 800a97a:	4603      	mov	r3, r0
 800a97c:	6039      	str	r1, [r7, #0]
 800a97e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a984:	2b00      	cmp	r3, #0
 800a986:	db0c      	blt.n	800a9a2 <__NVIC_SetPriority+0x2e>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	b2db      	uxtb	r3, r3
 800a98c:	4a0e      	ldr	r2, [pc, #56]	; (800a9c8 <__NVIC_SetPriority+0x54>)
 800a98e:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800a992:	4608      	mov	r0, r1
 800a994:	011b      	lsls	r3, r3, #4
 800a996:	b2d9      	uxtb	r1, r3
 800a998:	1813      	adds	r3, r2, r0
 800a99a:	460a      	mov	r2, r1
 800a99c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a9a0:	e00c      	b.n	800a9bc <__NVIC_SetPriority+0x48>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	b2da      	uxtb	r2, r3
 800a9a6:	4909      	ldr	r1, [pc, #36]	; (800a9cc <__NVIC_SetPriority+0x58>)
 800a9a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	f003 030f 	and.w	r3, r3, #15
 800a9b2:	3b04      	subs	r3, #4
 800a9b4:	0112      	lsls	r2, r2, #4
 800a9b6:	b2d2      	uxtb	r2, r2
 800a9b8:	440b      	add	r3, r1
 800a9ba:	761a      	strb	r2, [r3, #24]
}
 800a9bc:	bf00      	nop
 800a9be:	370c      	adds	r7, #12
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr
 800a9c8:	e000e100 	.word	0xe000e100
 800a9cc:	e000ed00 	.word	0xe000ed00

0800a9d0 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
static uint16_t lcd_int_active_line;
static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 800a9d0:	b5b0      	push	{r4, r5, r7, lr}
 800a9d2:	b082      	sub	sp, #8
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f012 fa16 	bl	801ce0c <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(touchgfx::Application::getInstance()));
 800a9e0:	687d      	ldr	r5, [r7, #4]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	334c      	adds	r3, #76	; 0x4c
 800a9e8:	681c      	ldr	r4, [r3, #0]
 800a9ea:	f014 fb35 	bl	801f058 <_ZN8touchgfx11Application11getInstanceEv>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	4619      	mov	r1, r3
 800a9f2:	4628      	mov	r0, r5
 800a9f4:	47a0      	blx	r4

    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	3374      	adds	r3, #116	; 0x74
 800a9fe:	681c      	ldr	r4, [r3, #0]
 800aa00:	4a06      	ldr	r2, [pc, #24]	; (800aa1c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x4c>)
 800aa02:	2300      	movs	r3, #0
 800aa04:	4906      	ldr	r1, [pc, #24]	; (800aa20 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x50>)
 800aa06:	47a0      	blx	r4
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     *
     * Setting to false to increase performance when using double buffering
     */
    lockDMAToFrontPorch(false);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2100      	movs	r1, #0
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f7ff ff4a 	bl	800a8a6 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 800aa12:	bf00      	nop
 800aa14:	3708      	adds	r7, #8
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bdb0      	pop	{r4, r5, r7, pc}
 800aa1a:	bf00      	nop
 800aa1c:	d0025800 	.word	0xd0025800
 800aa20:	d0000000 	.word	0xd0000000

0800aa24 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b082      	sub	sp, #8
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 800aa2c:	2109      	movs	r1, #9
 800aa2e:	205a      	movs	r0, #90	; 0x5a
 800aa30:	f7ff ffa0 	bl	800a974 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 800aa34:	2109      	movs	r1, #9
 800aa36:	2058      	movs	r0, #88	; 0x58
 800aa38:	f7ff ff9c 	bl	800a974 <__NVIC_SetPriority>
}
 800aa3c:	bf00      	nop
 800aa3e:	3708      	adds	r7, #8
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}

0800aa44 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b082      	sub	sp, #8
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 800aa4c:	205a      	movs	r0, #90	; 0x5a
 800aa4e:	f7ff ff4d 	bl	800a8ec <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 800aa52:	2058      	movs	r0, #88	; 0x58
 800aa54:	f7ff ff4a 	bl	800a8ec <__NVIC_EnableIRQ>
}
 800aa58:	bf00      	nop
 800aa5a:	3708      	adds	r7, #8
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}

0800aa60 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b082      	sub	sp, #8
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 800aa68:	205a      	movs	r0, #90	; 0x5a
 800aa6a:	f7ff ff5f 	bl	800a92c <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 800aa6e:	2058      	movs	r0, #88	; 0x58
 800aa70:	f7ff ff5c 	bl	800a92c <__NVIC_DisableIRQ>
}
 800aa74:	bf00      	nop
 800aa76:	3708      	adds	r7, #8
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b083      	sub	sp, #12
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 800aa84:	4b11      	ldr	r3, [pc, #68]	; (800aacc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800aa86:	68db      	ldr	r3, [r3, #12]
 800aa88:	b29b      	uxth	r3, r3
 800aa8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aa8e:	b29b      	uxth	r3, r3
 800aa90:	3b01      	subs	r3, #1
 800aa92:	b29a      	uxth	r2, r3
 800aa94:	4b0e      	ldr	r3, [pc, #56]	; (800aad0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800aa96:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800aa98:	4b0c      	ldr	r3, [pc, #48]	; (800aacc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800aa9a:	691b      	ldr	r3, [r3, #16]
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aaa2:	b29b      	uxth	r3, r3
 800aaa4:	3b01      	subs	r3, #1
 800aaa6:	b29a      	uxth	r2, r3
 800aaa8:	4b0a      	ldr	r3, [pc, #40]	; (800aad4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 800aaaa:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 800aaac:	4b08      	ldr	r3, [pc, #32]	; (800aad0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800aaae:	881a      	ldrh	r2, [r3, #0]
 800aab0:	4b06      	ldr	r3, [pc, #24]	; (800aacc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800aab2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 800aab4:	4b05      	ldr	r3, [pc, #20]	; (800aacc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800aab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aab8:	4a04      	ldr	r2, [pc, #16]	; (800aacc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800aaba:	f043 0301 	orr.w	r3, r3, #1
 800aabe:	6353      	str	r3, [r2, #52]	; 0x34
}
 800aac0:	bf00      	nop
 800aac2:	370c      	adds	r7, #12
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr
 800aacc:	40016800 	.word	0x40016800
 800aad0:	20001a2c 	.word	0x20001a2c
 800aad4:	20001a2e 	.word	0x20001a2e

0800aad8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 800aad8:	b480      	push	{r7}
 800aada:	b083      	sub	sp, #12
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 800aae0:	4b03      	ldr	r3, [pc, #12]	; (800aaf0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 800aae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	370c      	adds	r7, #12
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr
 800aaf0:	40016884 	.word	0x40016884

0800aaf4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b083      	sub	sp, #12
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 800aafe:	4a06      	ldr	r2, [pc, #24]	; (800ab18 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 800ab04:	4b05      	ldr	r3, [pc, #20]	; (800ab1c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 800ab06:	2201      	movs	r2, #1
 800ab08:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ab0a:	bf00      	nop
 800ab0c:	370c      	adds	r7, #12
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab14:	4770      	bx	lr
 800ab16:	bf00      	nop
 800ab18:	40016884 	.word	0x40016884
 800ab1c:	40016800 	.word	0x40016800

0800ab20 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b082      	sub	sp, #8
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6839      	ldr	r1, [r7, #0]
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f011 fe7d 	bl	801c82e <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 800ab34:	bf00      	nop
 800ab36:	3708      	adds	r7, #8
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b082      	sub	sp, #8
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 800ab44:	4b1a      	ldr	r3, [pc, #104]	; (800abb0 <HAL_LTDC_LineEventCallback+0x74>)
 800ab46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab48:	4a1a      	ldr	r2, [pc, #104]	; (800abb4 <HAL_LTDC_LineEventCallback+0x78>)
 800ab4a:	8812      	ldrh	r2, [r2, #0]
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	bf0c      	ite	eq
 800ab50:	2301      	moveq	r3, #1
 800ab52:	2300      	movne	r3, #0
 800ab54:	b2db      	uxtb	r3, r3
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d017      	beq.n	800ab8a <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 800ab5a:	4b17      	ldr	r3, [pc, #92]	; (800abb8 <HAL_LTDC_LineEventCallback+0x7c>)
 800ab5c:	881b      	ldrh	r3, [r3, #0]
 800ab5e:	4619      	mov	r1, r3
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f009 fccd 	bl	8014500 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 800ab66:	f7fe fc23 	bl	80093b0 <_ZN8touchgfx3HAL11getInstanceEv>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f7ff feaa 	bl	800a8c6 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 800ab72:	f7fe fb1b 	bl	80091ac <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 800ab76:	f7fe fc1b 	bl	80093b0 <_ZN8touchgfx3HAL11getInstanceEv>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f012 fbcd 	bl	801d31c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 800ab82:	2000      	movs	r0, #0
 800ab84:	f7fd ff96 	bl	8008ab4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 800ab88:	e00e      	b.n	800aba8 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 800ab8a:	4b0a      	ldr	r3, [pc, #40]	; (800abb4 <HAL_LTDC_LineEventCallback+0x78>)
 800ab8c:	881b      	ldrh	r3, [r3, #0]
 800ab8e:	4619      	mov	r1, r3
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f009 fcb5 	bl	8014500 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 800ab96:	2000      	movs	r0, #0
 800ab98:	f7fd ff97 	bl	8008aca <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 800ab9c:	f7fe fc08 	bl	80093b0 <_ZN8touchgfx3HAL11getInstanceEv>
 800aba0:	4603      	mov	r3, r0
 800aba2:	4618      	mov	r0, r3
 800aba4:	f7ff fe71 	bl	800a88a <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 800aba8:	bf00      	nop
 800abaa:	3708      	adds	r7, #8
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}
 800abb0:	40016800 	.word	0x40016800
 800abb4:	20001a2c 	.word	0x20001a2c
 800abb8:	20001a2e 	.word	0x20001a2e

0800abbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800abc0:	f007 f97c 	bl	8011ebc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800abc4:	f000 f82e 	bl	800ac24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800abc8:	f000 fa52 	bl	800b070 <MX_GPIO_Init>
  MX_CRC_Init();
 800abcc:	f000 f8ae 	bl	800ad2c <MX_CRC_Init>
  MX_I2C3_Init();
 800abd0:	f000 f8f2 	bl	800adb8 <MX_I2C3_Init>
  MX_SPI5_Init();
 800abd4:	f000 f9be 	bl	800af54 <MX_SPI5_Init>
  MX_FMC_Init();
 800abd8:	f000 f9f2 	bl	800afc0 <MX_FMC_Init>
  MX_LTDC_Init();
 800abdc:	f000 f92c 	bl	800ae38 <MX_LTDC_Init>
  MX_DMA2D_Init();
 800abe0:	f000 f8b8 	bl	800ad54 <MX_DMA2D_Init>
  MX_TouchGFX_Init();
 800abe4:	f7fd fdf9 	bl	80087da <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */
	MX_DMA_Init();
 800abe8:	f000 fee6 	bl	800b9b8 <MX_DMA_Init>
	MX_TIM2_Init();
 800abec:	f000 fd0c 	bl	800b608 <MX_TIM2_Init>
	MX_TIM3_Init();
 800abf0:	f000 fd80 	bl	800b6f4 <MX_TIM3_Init>
	MX_TIM4_Init();
 800abf4:	f000 fdf4 	bl	800b7e0 <MX_TIM4_Init>
	MX_TIM5_Init();
 800abf8:	f000 fe68 	bl	800b8cc <MX_TIM5_Init>
//	HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_1, &yAxisPWMDuty_R, 1);
//	HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_1, &manipulatorPWMDuty, 2);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800abfc:	f00c fc24 	bl	8017448 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of GUI_Task */
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 800ac00:	4a05      	ldr	r2, [pc, #20]	; (800ac18 <main+0x5c>)
 800ac02:	2100      	movs	r1, #0
 800ac04:	4805      	ldr	r0, [pc, #20]	; (800ac1c <main+0x60>)
 800ac06:	f00c fc89 	bl	801751c <osThreadNew>
 800ac0a:	4602      	mov	r2, r0
 800ac0c:	4b04      	ldr	r3, [pc, #16]	; (800ac20 <main+0x64>)
 800ac0e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800ac10:	f00c fc4e 	bl	80174b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800ac14:	e7fe      	b.n	800ac14 <main+0x58>
 800ac16:	bf00      	nop
 800ac18:	08030f6c 	.word	0x08030f6c
 800ac1c:	080087e7 	.word	0x080087e7
 800ac20:	20012f1c 	.word	0x20012f1c

0800ac24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b0a0      	sub	sp, #128	; 0x80
 800ac28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ac2a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ac2e:	2230      	movs	r2, #48	; 0x30
 800ac30:	2100      	movs	r1, #0
 800ac32:	4618      	mov	r0, r3
 800ac34:	f023 fc88 	bl	802e548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ac38:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	601a      	str	r2, [r3, #0]
 800ac40:	605a      	str	r2, [r3, #4]
 800ac42:	609a      	str	r2, [r3, #8]
 800ac44:	60da      	str	r2, [r3, #12]
 800ac46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ac48:	f107 030c 	add.w	r3, r7, #12
 800ac4c:	2230      	movs	r2, #48	; 0x30
 800ac4e:	2100      	movs	r1, #0
 800ac50:	4618      	mov	r0, r3
 800ac52:	f023 fc79 	bl	802e548 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800ac56:	2300      	movs	r3, #0
 800ac58:	60bb      	str	r3, [r7, #8]
 800ac5a:	4b32      	ldr	r3, [pc, #200]	; (800ad24 <SystemClock_Config+0x100>)
 800ac5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac5e:	4a31      	ldr	r2, [pc, #196]	; (800ad24 <SystemClock_Config+0x100>)
 800ac60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac64:	6413      	str	r3, [r2, #64]	; 0x40
 800ac66:	4b2f      	ldr	r3, [pc, #188]	; (800ad24 <SystemClock_Config+0x100>)
 800ac68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac6e:	60bb      	str	r3, [r7, #8]
 800ac70:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800ac72:	2300      	movs	r3, #0
 800ac74:	607b      	str	r3, [r7, #4]
 800ac76:	4b2c      	ldr	r3, [pc, #176]	; (800ad28 <SystemClock_Config+0x104>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	4a2b      	ldr	r2, [pc, #172]	; (800ad28 <SystemClock_Config+0x104>)
 800ac7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ac80:	6013      	str	r3, [r2, #0]
 800ac82:	4b29      	ldr	r3, [pc, #164]	; (800ad28 <SystemClock_Config+0x104>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ac8a:	607b      	str	r3, [r7, #4]
 800ac8c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800ac8e:	2301      	movs	r3, #1
 800ac90:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800ac92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ac96:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ac98:	2302      	movs	r3, #2
 800ac9a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800ac9c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800aca0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800aca2:	2308      	movs	r3, #8
 800aca4:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 336;
 800aca6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800acaa:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800acac:	2302      	movs	r3, #2
 800acae:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800acb0:	2304      	movs	r3, #4
 800acb2:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800acb4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800acb8:	4618      	mov	r0, r3
 800acba:	f009 fdf1 	bl	80148a0 <HAL_RCC_OscConfig>
 800acbe:	4603      	mov	r3, r0
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d001      	beq.n	800acc8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800acc4:	f000 fc98 	bl	800b5f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800acc8:	230f      	movs	r3, #15
 800acca:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800accc:	2302      	movs	r3, #2
 800acce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800acd0:	2300      	movs	r3, #0
 800acd2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800acd4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800acd8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800acda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800acde:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800ace0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ace4:	2105      	movs	r1, #5
 800ace6:	4618      	mov	r0, r3
 800ace8:	f00a f84a 	bl	8014d80 <HAL_RCC_ClockConfig>
 800acec:	4603      	mov	r3, r0
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d001      	beq.n	800acf6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800acf2:	f000 fc81 	bl	800b5f8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800acf6:	2308      	movs	r3, #8
 800acf8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800acfa:	23c0      	movs	r3, #192	; 0xc0
 800acfc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800acfe:	2304      	movs	r3, #4
 800ad00:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800ad02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ad06:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ad08:	f107 030c 	add.w	r3, r7, #12
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f00a fa47 	bl	80151a0 <HAL_RCCEx_PeriphCLKConfig>
 800ad12:	4603      	mov	r3, r0
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d001      	beq.n	800ad1c <SystemClock_Config+0xf8>
  {
    Error_Handler();
 800ad18:	f000 fc6e 	bl	800b5f8 <Error_Handler>
  }
}
 800ad1c:	bf00      	nop
 800ad1e:	3780      	adds	r7, #128	; 0x80
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}
 800ad24:	40023800 	.word	0x40023800
 800ad28:	40007000 	.word	0x40007000

0800ad2c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800ad30:	4b06      	ldr	r3, [pc, #24]	; (800ad4c <MX_CRC_Init+0x20>)
 800ad32:	4a07      	ldr	r2, [pc, #28]	; (800ad50 <MX_CRC_Init+0x24>)
 800ad34:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800ad36:	4805      	ldr	r0, [pc, #20]	; (800ad4c <MX_CRC_Init+0x20>)
 800ad38:	f007 fa36 	bl	80121a8 <HAL_CRC_Init>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d001      	beq.n	800ad46 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800ad42:	f000 fc59 	bl	800b5f8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800ad46:	bf00      	nop
 800ad48:	bd80      	pop	{r7, pc}
 800ad4a:	bf00      	nop
 800ad4c:	20012ccc 	.word	0x20012ccc
 800ad50:	40023000 	.word	0x40023000

0800ad54 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800ad58:	4b15      	ldr	r3, [pc, #84]	; (800adb0 <MX_DMA2D_Init+0x5c>)
 800ad5a:	4a16      	ldr	r2, [pc, #88]	; (800adb4 <MX_DMA2D_Init+0x60>)
 800ad5c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800ad5e:	4b14      	ldr	r3, [pc, #80]	; (800adb0 <MX_DMA2D_Init+0x5c>)
 800ad60:	2200      	movs	r2, #0
 800ad62:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 800ad64:	4b12      	ldr	r3, [pc, #72]	; (800adb0 <MX_DMA2D_Init+0x5c>)
 800ad66:	2202      	movs	r2, #2
 800ad68:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800ad6a:	4b11      	ldr	r3, [pc, #68]	; (800adb0 <MX_DMA2D_Init+0x5c>)
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800ad70:	4b0f      	ldr	r3, [pc, #60]	; (800adb0 <MX_DMA2D_Init+0x5c>)
 800ad72:	2200      	movs	r2, #0
 800ad74:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 800ad76:	4b0e      	ldr	r3, [pc, #56]	; (800adb0 <MX_DMA2D_Init+0x5c>)
 800ad78:	2202      	movs	r2, #2
 800ad7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800ad7c:	4b0c      	ldr	r3, [pc, #48]	; (800adb0 <MX_DMA2D_Init+0x5c>)
 800ad7e:	2200      	movs	r2, #0
 800ad80:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800ad82:	4b0b      	ldr	r3, [pc, #44]	; (800adb0 <MX_DMA2D_Init+0x5c>)
 800ad84:	2200      	movs	r2, #0
 800ad86:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800ad88:	4809      	ldr	r0, [pc, #36]	; (800adb0 <MX_DMA2D_Init+0x5c>)
 800ad8a:	f007 fc0d 	bl	80125a8 <HAL_DMA2D_Init>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d001      	beq.n	800ad98 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800ad94:	f000 fc30 	bl	800b5f8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800ad98:	2101      	movs	r1, #1
 800ad9a:	4805      	ldr	r0, [pc, #20]	; (800adb0 <MX_DMA2D_Init+0x5c>)
 800ad9c:	f007 fece 	bl	8012b3c <HAL_DMA2D_ConfigLayer>
 800ada0:	4603      	mov	r3, r0
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d001      	beq.n	800adaa <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800ada6:	f000 fc27 	bl	800b5f8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800adaa:	bf00      	nop
 800adac:	bd80      	pop	{r7, pc}
 800adae:	bf00      	nop
 800adb0:	20012f20 	.word	0x20012f20
 800adb4:	4002b000 	.word	0x4002b000

0800adb8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800adbc:	4b1b      	ldr	r3, [pc, #108]	; (800ae2c <MX_I2C3_Init+0x74>)
 800adbe:	4a1c      	ldr	r2, [pc, #112]	; (800ae30 <MX_I2C3_Init+0x78>)
 800adc0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800adc2:	4b1a      	ldr	r3, [pc, #104]	; (800ae2c <MX_I2C3_Init+0x74>)
 800adc4:	4a1b      	ldr	r2, [pc, #108]	; (800ae34 <MX_I2C3_Init+0x7c>)
 800adc6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800adc8:	4b18      	ldr	r3, [pc, #96]	; (800ae2c <MX_I2C3_Init+0x74>)
 800adca:	2200      	movs	r2, #0
 800adcc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800adce:	4b17      	ldr	r3, [pc, #92]	; (800ae2c <MX_I2C3_Init+0x74>)
 800add0:	2200      	movs	r2, #0
 800add2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800add4:	4b15      	ldr	r3, [pc, #84]	; (800ae2c <MX_I2C3_Init+0x74>)
 800add6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800adda:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800addc:	4b13      	ldr	r3, [pc, #76]	; (800ae2c <MX_I2C3_Init+0x74>)
 800adde:	2200      	movs	r2, #0
 800ade0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800ade2:	4b12      	ldr	r3, [pc, #72]	; (800ae2c <MX_I2C3_Init+0x74>)
 800ade4:	2200      	movs	r2, #0
 800ade6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800ade8:	4b10      	ldr	r3, [pc, #64]	; (800ae2c <MX_I2C3_Init+0x74>)
 800adea:	2200      	movs	r2, #0
 800adec:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800adee:	4b0f      	ldr	r3, [pc, #60]	; (800ae2c <MX_I2C3_Init+0x74>)
 800adf0:	2200      	movs	r2, #0
 800adf2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800adf4:	480d      	ldr	r0, [pc, #52]	; (800ae2c <MX_I2C3_Init+0x74>)
 800adf6:	f008 f993 	bl	8013120 <HAL_I2C_Init>
 800adfa:	4603      	mov	r3, r0
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d001      	beq.n	800ae04 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800ae00:	f000 fbfa 	bl	800b5f8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 800ae04:	2110      	movs	r1, #16
 800ae06:	4809      	ldr	r0, [pc, #36]	; (800ae2c <MX_I2C3_Init+0x74>)
 800ae08:	f009 f939 	bl	801407e <HAL_I2CEx_ConfigAnalogFilter>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d001      	beq.n	800ae16 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800ae12:	f000 fbf1 	bl	800b5f8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800ae16:	2100      	movs	r1, #0
 800ae18:	4804      	ldr	r0, [pc, #16]	; (800ae2c <MX_I2C3_Init+0x74>)
 800ae1a:	f009 f96c 	bl	80140f6 <HAL_I2CEx_ConfigDigitalFilter>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d001      	beq.n	800ae28 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800ae24:	f000 fbe8 	bl	800b5f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800ae28:	bf00      	nop
 800ae2a:	bd80      	pop	{r7, pc}
 800ae2c:	20012be0 	.word	0x20012be0
 800ae30:	40005c00 	.word	0x40005c00
 800ae34:	000186a0 	.word	0x000186a0

0800ae38 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b08e      	sub	sp, #56	; 0x38
 800ae3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800ae3e:	1d3b      	adds	r3, r7, #4
 800ae40:	2234      	movs	r2, #52	; 0x34
 800ae42:	2100      	movs	r1, #0
 800ae44:	4618      	mov	r0, r3
 800ae46:	f023 fb7f 	bl	802e548 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800ae4a:	4b3e      	ldr	r3, [pc, #248]	; (800af44 <MX_LTDC_Init+0x10c>)
 800ae4c:	4a3e      	ldr	r2, [pc, #248]	; (800af48 <MX_LTDC_Init+0x110>)
 800ae4e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800ae50:	4b3c      	ldr	r3, [pc, #240]	; (800af44 <MX_LTDC_Init+0x10c>)
 800ae52:	2200      	movs	r2, #0
 800ae54:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800ae56:	4b3b      	ldr	r3, [pc, #236]	; (800af44 <MX_LTDC_Init+0x10c>)
 800ae58:	2200      	movs	r2, #0
 800ae5a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800ae5c:	4b39      	ldr	r3, [pc, #228]	; (800af44 <MX_LTDC_Init+0x10c>)
 800ae5e:	2200      	movs	r2, #0
 800ae60:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800ae62:	4b38      	ldr	r3, [pc, #224]	; (800af44 <MX_LTDC_Init+0x10c>)
 800ae64:	2200      	movs	r2, #0
 800ae66:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 800ae68:	4b36      	ldr	r3, [pc, #216]	; (800af44 <MX_LTDC_Init+0x10c>)
 800ae6a:	2209      	movs	r2, #9
 800ae6c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 800ae6e:	4b35      	ldr	r3, [pc, #212]	; (800af44 <MX_LTDC_Init+0x10c>)
 800ae70:	2201      	movs	r2, #1
 800ae72:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 800ae74:	4b33      	ldr	r3, [pc, #204]	; (800af44 <MX_LTDC_Init+0x10c>)
 800ae76:	221d      	movs	r2, #29
 800ae78:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 800ae7a:	4b32      	ldr	r3, [pc, #200]	; (800af44 <MX_LTDC_Init+0x10c>)
 800ae7c:	2203      	movs	r2, #3
 800ae7e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 800ae80:	4b30      	ldr	r3, [pc, #192]	; (800af44 <MX_LTDC_Init+0x10c>)
 800ae82:	f240 120d 	movw	r2, #269	; 0x10d
 800ae86:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 800ae88:	4b2e      	ldr	r3, [pc, #184]	; (800af44 <MX_LTDC_Init+0x10c>)
 800ae8a:	f240 1243 	movw	r2, #323	; 0x143
 800ae8e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 800ae90:	4b2c      	ldr	r3, [pc, #176]	; (800af44 <MX_LTDC_Init+0x10c>)
 800ae92:	f240 1217 	movw	r2, #279	; 0x117
 800ae96:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 800ae98:	4b2a      	ldr	r3, [pc, #168]	; (800af44 <MX_LTDC_Init+0x10c>)
 800ae9a:	f240 1247 	movw	r2, #327	; 0x147
 800ae9e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800aea0:	4b28      	ldr	r3, [pc, #160]	; (800af44 <MX_LTDC_Init+0x10c>)
 800aea2:	2200      	movs	r2, #0
 800aea4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800aea8:	4b26      	ldr	r3, [pc, #152]	; (800af44 <MX_LTDC_Init+0x10c>)
 800aeaa:	2200      	movs	r2, #0
 800aeac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800aeb0:	4b24      	ldr	r3, [pc, #144]	; (800af44 <MX_LTDC_Init+0x10c>)
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800aeb8:	4822      	ldr	r0, [pc, #136]	; (800af44 <MX_LTDC_Init+0x10c>)
 800aeba:	f009 f95b 	bl	8014174 <HAL_LTDC_Init>
 800aebe:	4603      	mov	r3, r0
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d001      	beq.n	800aec8 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800aec4:	f000 fb98 	bl	800b5f8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800aec8:	2300      	movs	r3, #0
 800aeca:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 800aecc:	23f0      	movs	r3, #240	; 0xf0
 800aece:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800aed0:	2300      	movs	r3, #0
 800aed2:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 800aed4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800aed8:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800aeda:	2302      	movs	r3, #2
 800aedc:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800aede:	23ff      	movs	r3, #255	; 0xff
 800aee0:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800aee2:	2300      	movs	r3, #0
 800aee4:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800aee6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aeea:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800aeec:	2305      	movs	r3, #5
 800aeee:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 800aef0:	2300      	movs	r3, #0
 800aef2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 800aef4:	23f0      	movs	r3, #240	; 0xf0
 800aef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 800aef8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800aefc:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800aefe:	2300      	movs	r3, #0
 800af00:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800af04:	2300      	movs	r3, #0
 800af06:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800af0a:	2300      	movs	r3, #0
 800af0c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800af10:	1d3b      	adds	r3, r7, #4
 800af12:	2200      	movs	r2, #0
 800af14:	4619      	mov	r1, r3
 800af16:	480b      	ldr	r0, [pc, #44]	; (800af44 <MX_LTDC_Init+0x10c>)
 800af18:	f009 fab4 	bl	8014484 <HAL_LTDC_ConfigLayer>
 800af1c:	4603      	mov	r3, r0
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d001      	beq.n	800af26 <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 800af22:	f000 fb69 	bl	800b5f8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */
    /*Select the device */
  LcdDrv = &ili9341_drv;
 800af26:	4b09      	ldr	r3, [pc, #36]	; (800af4c <MX_LTDC_Init+0x114>)
 800af28:	4a09      	ldr	r2, [pc, #36]	; (800af50 <MX_LTDC_Init+0x118>)
 800af2a:	601a      	str	r2, [r3, #0]
  /* LCD Init */
  LcdDrv->Init();
 800af2c:	4b07      	ldr	r3, [pc, #28]	; (800af4c <MX_LTDC_Init+0x114>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	4798      	blx	r3
  
  LcdDrv->DisplayOff();
 800af34:	4b05      	ldr	r3, [pc, #20]	; (800af4c <MX_LTDC_Init+0x114>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	68db      	ldr	r3, [r3, #12]
 800af3a:	4798      	blx	r3
  /* USER CODE END LTDC_Init 2 */

}
 800af3c:	bf00      	nop
 800af3e:	3738      	adds	r7, #56	; 0x38
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}
 800af44:	20012db4 	.word	0x20012db4
 800af48:	40016800 	.word	0x40016800
 800af4c:	20001a30 	.word	0x20001a30
 800af50:	2000002c 	.word	0x2000002c

0800af54 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800af58:	4b17      	ldr	r3, [pc, #92]	; (800afb8 <MX_SPI5_Init+0x64>)
 800af5a:	4a18      	ldr	r2, [pc, #96]	; (800afbc <MX_SPI5_Init+0x68>)
 800af5c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800af5e:	4b16      	ldr	r3, [pc, #88]	; (800afb8 <MX_SPI5_Init+0x64>)
 800af60:	f44f 7282 	mov.w	r2, #260	; 0x104
 800af64:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800af66:	4b14      	ldr	r3, [pc, #80]	; (800afb8 <MX_SPI5_Init+0x64>)
 800af68:	2200      	movs	r2, #0
 800af6a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800af6c:	4b12      	ldr	r3, [pc, #72]	; (800afb8 <MX_SPI5_Init+0x64>)
 800af6e:	2200      	movs	r2, #0
 800af70:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800af72:	4b11      	ldr	r3, [pc, #68]	; (800afb8 <MX_SPI5_Init+0x64>)
 800af74:	2200      	movs	r2, #0
 800af76:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800af78:	4b0f      	ldr	r3, [pc, #60]	; (800afb8 <MX_SPI5_Init+0x64>)
 800af7a:	2200      	movs	r2, #0
 800af7c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800af7e:	4b0e      	ldr	r3, [pc, #56]	; (800afb8 <MX_SPI5_Init+0x64>)
 800af80:	f44f 7200 	mov.w	r2, #512	; 0x200
 800af84:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800af86:	4b0c      	ldr	r3, [pc, #48]	; (800afb8 <MX_SPI5_Init+0x64>)
 800af88:	2218      	movs	r2, #24
 800af8a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800af8c:	4b0a      	ldr	r3, [pc, #40]	; (800afb8 <MX_SPI5_Init+0x64>)
 800af8e:	2200      	movs	r2, #0
 800af90:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800af92:	4b09      	ldr	r3, [pc, #36]	; (800afb8 <MX_SPI5_Init+0x64>)
 800af94:	2200      	movs	r2, #0
 800af96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800af98:	4b07      	ldr	r3, [pc, #28]	; (800afb8 <MX_SPI5_Init+0x64>)
 800af9a:	2200      	movs	r2, #0
 800af9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800af9e:	4b06      	ldr	r3, [pc, #24]	; (800afb8 <MX_SPI5_Init+0x64>)
 800afa0:	220a      	movs	r2, #10
 800afa2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800afa4:	4804      	ldr	r0, [pc, #16]	; (800afb8 <MX_SPI5_Init+0x64>)
 800afa6:	f00a fb38 	bl	801561a <HAL_SPI_Init>
 800afaa:	4603      	mov	r3, r0
 800afac:	2b00      	cmp	r3, #0
 800afae:	d001      	beq.n	800afb4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800afb0:	f000 fb22 	bl	800b5f8 <Error_Handler>
  
  

  /* USER CODE END SPI5_Init 2 */

}
 800afb4:	bf00      	nop
 800afb6:	bd80      	pop	{r7, pc}
 800afb8:	20012c34 	.word	0x20012c34
 800afbc:	40015000 	.word	0x40015000

0800afc0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b08c      	sub	sp, #48	; 0x30
 800afc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800afc6:	f107 0314 	add.w	r3, r7, #20
 800afca:	2200      	movs	r2, #0
 800afcc:	601a      	str	r2, [r3, #0]
 800afce:	605a      	str	r2, [r3, #4]
 800afd0:	609a      	str	r2, [r3, #8]
 800afd2:	60da      	str	r2, [r3, #12]
 800afd4:	611a      	str	r2, [r3, #16]
 800afd6:	615a      	str	r2, [r3, #20]
 800afd8:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800afda:	4b23      	ldr	r3, [pc, #140]	; (800b068 <MX_FMC_Init+0xa8>)
 800afdc:	4a23      	ldr	r2, [pc, #140]	; (800b06c <MX_FMC_Init+0xac>)
 800afde:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800afe0:	4b21      	ldr	r3, [pc, #132]	; (800b068 <MX_FMC_Init+0xa8>)
 800afe2:	2201      	movs	r2, #1
 800afe4:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800afe6:	4b20      	ldr	r3, [pc, #128]	; (800b068 <MX_FMC_Init+0xa8>)
 800afe8:	2200      	movs	r2, #0
 800afea:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800afec:	4b1e      	ldr	r3, [pc, #120]	; (800b068 <MX_FMC_Init+0xa8>)
 800afee:	2204      	movs	r2, #4
 800aff0:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800aff2:	4b1d      	ldr	r3, [pc, #116]	; (800b068 <MX_FMC_Init+0xa8>)
 800aff4:	2210      	movs	r2, #16
 800aff6:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800aff8:	4b1b      	ldr	r3, [pc, #108]	; (800b068 <MX_FMC_Init+0xa8>)
 800affa:	2240      	movs	r2, #64	; 0x40
 800affc:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800affe:	4b1a      	ldr	r3, [pc, #104]	; (800b068 <MX_FMC_Init+0xa8>)
 800b000:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800b004:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800b006:	4b18      	ldr	r3, [pc, #96]	; (800b068 <MX_FMC_Init+0xa8>)
 800b008:	2200      	movs	r2, #0
 800b00a:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800b00c:	4b16      	ldr	r3, [pc, #88]	; (800b068 <MX_FMC_Init+0xa8>)
 800b00e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b012:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800b014:	4b14      	ldr	r3, [pc, #80]	; (800b068 <MX_FMC_Init+0xa8>)
 800b016:	2200      	movs	r2, #0
 800b018:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 800b01a:	4b13      	ldr	r3, [pc, #76]	; (800b068 <MX_FMC_Init+0xa8>)
 800b01c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b020:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800b022:	2302      	movs	r3, #2
 800b024:	617b      	str	r3, [r7, #20]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800b026:	2307      	movs	r3, #7
 800b028:	61bb      	str	r3, [r7, #24]
  SdramTiming.SelfRefreshTime = 4;
 800b02a:	2304      	movs	r3, #4
 800b02c:	61fb      	str	r3, [r7, #28]
  SdramTiming.RowCycleDelay = 7;
 800b02e:	2307      	movs	r3, #7
 800b030:	623b      	str	r3, [r7, #32]
  SdramTiming.WriteRecoveryTime = 3;
 800b032:	2303      	movs	r3, #3
 800b034:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.RPDelay = 2;
 800b036:	2302      	movs	r3, #2
 800b038:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.RCDDelay = 2;
 800b03a:	2302      	movs	r3, #2
 800b03c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800b03e:	f107 0314 	add.w	r3, r7, #20
 800b042:	4619      	mov	r1, r3
 800b044:	4808      	ldr	r0, [pc, #32]	; (800b068 <MX_FMC_Init+0xa8>)
 800b046:	f00a fa69 	bl	801551c <HAL_SDRAM_Init>
 800b04a:	4603      	mov	r3, r0
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d001      	beq.n	800b054 <MX_FMC_Init+0x94>
  {
    Error_Handler( );
 800b050:	f000 fad2 	bl	800b5f8 <Error_Handler>
  /* USER CODE BEGIN FMC_Init 2 */
  
  FMC_SDRAM_CommandTypeDef command;
  
  /* Program the SDRAM external device */
  BSP_SDRAM_Initialization_Sequence(&hsdram1, &command);
 800b054:	1d3b      	adds	r3, r7, #4
 800b056:	4619      	mov	r1, r3
 800b058:	4803      	ldr	r0, [pc, #12]	; (800b068 <MX_FMC_Init+0xa8>)
 800b05a:	f000 f8b7 	bl	800b1cc <BSP_SDRAM_Initialization_Sequence>
  /* USER CODE END FMC_Init 2 */
}
 800b05e:	bf00      	nop
 800b060:	3730      	adds	r7, #48	; 0x30
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}
 800b066:	bf00      	nop
 800b068:	20013000 	.word	0x20013000
 800b06c:	a0000140 	.word	0xa0000140

0800b070 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b08e      	sub	sp, #56	; 0x38
 800b074:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b076:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b07a:	2200      	movs	r2, #0
 800b07c:	601a      	str	r2, [r3, #0]
 800b07e:	605a      	str	r2, [r3, #4]
 800b080:	609a      	str	r2, [r3, #8]
 800b082:	60da      	str	r2, [r3, #12]
 800b084:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800b086:	2300      	movs	r3, #0
 800b088:	623b      	str	r3, [r7, #32]
 800b08a:	4b4d      	ldr	r3, [pc, #308]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b08c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b08e:	4a4c      	ldr	r2, [pc, #304]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b090:	f043 0320 	orr.w	r3, r3, #32
 800b094:	6313      	str	r3, [r2, #48]	; 0x30
 800b096:	4b4a      	ldr	r3, [pc, #296]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b09a:	f003 0320 	and.w	r3, r3, #32
 800b09e:	623b      	str	r3, [r7, #32]
 800b0a0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	61fb      	str	r3, [r7, #28]
 800b0a6:	4b46      	ldr	r3, [pc, #280]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b0a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0aa:	4a45      	ldr	r2, [pc, #276]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b0ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0b0:	6313      	str	r3, [r2, #48]	; 0x30
 800b0b2:	4b43      	ldr	r3, [pc, #268]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b0b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0ba:	61fb      	str	r3, [r7, #28]
 800b0bc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b0be:	2300      	movs	r3, #0
 800b0c0:	61bb      	str	r3, [r7, #24]
 800b0c2:	4b3f      	ldr	r3, [pc, #252]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b0c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0c6:	4a3e      	ldr	r2, [pc, #248]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b0c8:	f043 0304 	orr.w	r3, r3, #4
 800b0cc:	6313      	str	r3, [r2, #48]	; 0x30
 800b0ce:	4b3c      	ldr	r3, [pc, #240]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b0d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0d2:	f003 0304 	and.w	r3, r3, #4
 800b0d6:	61bb      	str	r3, [r7, #24]
 800b0d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b0da:	2300      	movs	r3, #0
 800b0dc:	617b      	str	r3, [r7, #20]
 800b0de:	4b38      	ldr	r3, [pc, #224]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b0e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0e2:	4a37      	ldr	r2, [pc, #220]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b0e4:	f043 0301 	orr.w	r3, r3, #1
 800b0e8:	6313      	str	r3, [r2, #48]	; 0x30
 800b0ea:	4b35      	ldr	r3, [pc, #212]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b0ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0ee:	f003 0301 	and.w	r3, r3, #1
 800b0f2:	617b      	str	r3, [r7, #20]
 800b0f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	613b      	str	r3, [r7, #16]
 800b0fa:	4b31      	ldr	r3, [pc, #196]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b0fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0fe:	4a30      	ldr	r2, [pc, #192]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b100:	f043 0302 	orr.w	r3, r3, #2
 800b104:	6313      	str	r3, [r2, #48]	; 0x30
 800b106:	4b2e      	ldr	r3, [pc, #184]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b10a:	f003 0302 	and.w	r3, r3, #2
 800b10e:	613b      	str	r3, [r7, #16]
 800b110:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800b112:	2300      	movs	r3, #0
 800b114:	60fb      	str	r3, [r7, #12]
 800b116:	4b2a      	ldr	r3, [pc, #168]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b11a:	4a29      	ldr	r2, [pc, #164]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b11c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b120:	6313      	str	r3, [r2, #48]	; 0x30
 800b122:	4b27      	ldr	r3, [pc, #156]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b12a:	60fb      	str	r3, [r7, #12]
 800b12c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800b12e:	2300      	movs	r3, #0
 800b130:	60bb      	str	r3, [r7, #8]
 800b132:	4b23      	ldr	r3, [pc, #140]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b136:	4a22      	ldr	r2, [pc, #136]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b138:	f043 0310 	orr.w	r3, r3, #16
 800b13c:	6313      	str	r3, [r2, #48]	; 0x30
 800b13e:	4b20      	ldr	r3, [pc, #128]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b142:	f003 0310 	and.w	r3, r3, #16
 800b146:	60bb      	str	r3, [r7, #8]
 800b148:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b14a:	2300      	movs	r3, #0
 800b14c:	607b      	str	r3, [r7, #4]
 800b14e:	4b1c      	ldr	r3, [pc, #112]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b152:	4a1b      	ldr	r2, [pc, #108]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b154:	f043 0308 	orr.w	r3, r3, #8
 800b158:	6313      	str	r3, [r2, #48]	; 0x30
 800b15a:	4b19      	ldr	r3, [pc, #100]	; (800b1c0 <MX_GPIO_Init+0x150>)
 800b15c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b15e:	f003 0308 	and.w	r3, r3, #8
 800b162:	607b      	str	r3, [r7, #4]
 800b164:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800b166:	2200      	movs	r2, #0
 800b168:	2104      	movs	r1, #4
 800b16a:	4816      	ldr	r0, [pc, #88]	; (800b1c4 <MX_GPIO_Init+0x154>)
 800b16c:	f007 ffbe 	bl	80130ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 800b170:	2200      	movs	r2, #0
 800b172:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800b176:	4814      	ldr	r0, [pc, #80]	; (800b1c8 <MX_GPIO_Init+0x158>)
 800b178:	f007 ffb8 	bl	80130ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800b17c:	2304      	movs	r3, #4
 800b17e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b180:	2301      	movs	r3, #1
 800b182:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b184:	2300      	movs	r3, #0
 800b186:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b188:	2302      	movs	r3, #2
 800b18a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b18c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b190:	4619      	mov	r1, r3
 800b192:	480c      	ldr	r0, [pc, #48]	; (800b1c4 <MX_GPIO_Init+0x154>)
 800b194:	f007 fe00 	bl	8012d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800b198:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800b19c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b19e:	2301      	movs	r3, #1
 800b1a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b1a6:	2302      	movs	r3, #2
 800b1a8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b1aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b1ae:	4619      	mov	r1, r3
 800b1b0:	4805      	ldr	r0, [pc, #20]	; (800b1c8 <MX_GPIO_Init+0x158>)
 800b1b2:	f007 fdf1 	bl	8012d98 <HAL_GPIO_Init>

}
 800b1b6:	bf00      	nop
 800b1b8:	3738      	adds	r7, #56	; 0x38
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}
 800b1be:	bf00      	nop
 800b1c0:	40023800 	.word	0x40023800
 800b1c4:	40020800 	.word	0x40020800
 800b1c8:	40020c00 	.word	0x40020c00

0800b1cc <BSP_SDRAM_Initialization_Sequence>:
  * @param  hsdram: SDRAM handle
  * @param  Command: Pointer to SDRAM command structure
  * @retval None
  */
static void BSP_SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b084      	sub	sp, #16
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	6039      	str	r1, [r7, #0]
 __IO uint32_t tmpmrd =0;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command->CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	2201      	movs	r2, #1
 800b1de:	601a      	str	r2, [r3, #0]
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	2208      	movs	r2, #8
 800b1e4:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber       = 1;
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	2201      	movs	r2, #1
 800b1ea:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition  = 0;
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800b1f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b1f6:	6839      	ldr	r1, [r7, #0]
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f00a f9c3 	bl	8015584 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800b1fe:	2001      	movs	r0, #1
 800b200:	f006 fe9e 	bl	8011f40 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command->CommandMode             = FMC_SDRAM_CMD_PALL;
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	2202      	movs	r2, #2
 800b208:	601a      	str	r2, [r3, #0]
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	2208      	movs	r2, #8
 800b20e:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber       = 1;
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	2201      	movs	r2, #1
 800b214:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition  = 0;
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	2200      	movs	r2, #0
 800b21a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);  
 800b21c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b220:	6839      	ldr	r1, [r7, #0]
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f00a f9ae 	bl	8015584 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command->CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	2203      	movs	r2, #3
 800b22c:	601a      	str	r2, [r3, #0]
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	2208      	movs	r2, #8
 800b232:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber       = 4;
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	2204      	movs	r2, #4
 800b238:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition  = 0;
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	2200      	movs	r2, #0
 800b23e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800b240:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b244:	6839      	ldr	r1, [r7, #0]
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f00a f99c 	bl	8015584 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800b24c:	f44f 730c 	mov.w	r3, #560	; 0x230
 800b250:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command->CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	2204      	movs	r2, #4
 800b256:	601a      	str	r2, [r3, #0]
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	2208      	movs	r2, #8
 800b25c:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber       = 1;
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	2201      	movs	r2, #1
 800b262:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition  = tmpmrd;
 800b264:	68fa      	ldr	r2, [r7, #12]
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800b26a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b26e:	6839      	ldr	r1, [r7, #0]
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f00a f987 	bl	8015584 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT); 
 800b276:	f240 516a 	movw	r1, #1386	; 0x56a
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f00a f9ad 	bl	80155da <HAL_SDRAM_ProgramRefreshRate>
}
 800b280:	bf00      	nop
 800b282:	3710      	adds	r7, #16
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}

0800b288 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 800b288:	b480      	push	{r7}
 800b28a:	af00      	add	r7, sp, #0
  //Dummy function called when initializing to stmpe811 to setup the i2c.
  //This is done with cubmx and is therfore not done here.
}
 800b28c:	bf00      	nop
 800b28e:	46bd      	mov	sp, r7
 800b290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b294:	4770      	bx	lr

0800b296 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 800b296:	b480      	push	{r7}
 800b298:	af00      	add	r7, sp, #0
  //Dummy function called when initializing to stmpe811 to setup interupt for the i2c.
  //The interupt is not used in our case, therefore nothing is done here.
}
 800b29a:	bf00      	nop
 800b29c:	46bd      	mov	sp, r7
 800b29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a2:	4770      	bx	lr

0800b2a4 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b082      	sub	sp, #8
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	71fb      	strb	r3, [r7, #7]
 800b2ae:	460b      	mov	r3, r1
 800b2b0:	71bb      	strb	r3, [r7, #6]
 800b2b2:	4613      	mov	r3, r2
 800b2b4:	717b      	strb	r3, [r7, #5]
  I2C3_WriteData(Addr, Reg, Value);
 800b2b6:	797a      	ldrb	r2, [r7, #5]
 800b2b8:	79b9      	ldrb	r1, [r7, #6]
 800b2ba:	79fb      	ldrb	r3, [r7, #7]
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f000 f839 	bl	800b334 <I2C3_WriteData>
}
 800b2c2:	bf00      	nop
 800b2c4:	3708      	adds	r7, #8
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}

0800b2ca <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 800b2ca:	b580      	push	{r7, lr}
 800b2cc:	b082      	sub	sp, #8
 800b2ce:	af00      	add	r7, sp, #0
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	460a      	mov	r2, r1
 800b2d4:	71fb      	strb	r3, [r7, #7]
 800b2d6:	4613      	mov	r3, r2
 800b2d8:	71bb      	strb	r3, [r7, #6]
  return I2C3_ReadData(Addr, Reg);
 800b2da:	79ba      	ldrb	r2, [r7, #6]
 800b2dc:	79fb      	ldrb	r3, [r7, #7]
 800b2de:	4611      	mov	r1, r2
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f000 f84b 	bl	800b37c <I2C3_ReadData>
 800b2e6:	4603      	mov	r3, r0
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	3708      	adds	r7, #8
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}

0800b2f0 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b082      	sub	sp, #8
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	603a      	str	r2, [r7, #0]
 800b2f8:	461a      	mov	r2, r3
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	71fb      	strb	r3, [r7, #7]
 800b2fe:	460b      	mov	r3, r1
 800b300:	71bb      	strb	r3, [r7, #6]
 800b302:	4613      	mov	r3, r2
 800b304:	80bb      	strh	r3, [r7, #4]
 return I2C3_ReadBuffer(Addr, Reg, pBuffer, Length);
 800b306:	88bb      	ldrh	r3, [r7, #4]
 800b308:	79b9      	ldrb	r1, [r7, #6]
 800b30a:	79f8      	ldrb	r0, [r7, #7]
 800b30c:	683a      	ldr	r2, [r7, #0]
 800b30e:	f000 f85d 	bl	800b3cc <I2C3_ReadBuffer>
 800b312:	4603      	mov	r3, r0
 800b314:	b29b      	uxth	r3, r3
}
 800b316:	4618      	mov	r0, r3
 800b318:	3708      	adds	r7, #8
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}

0800b31e <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 800b31e:	b580      	push	{r7, lr}
 800b320:	b082      	sub	sp, #8
 800b322:	af00      	add	r7, sp, #0
 800b324:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f006 fe0a 	bl	8011f40 <HAL_Delay>
}
 800b32c:	bf00      	nop
 800b32e:	3708      	adds	r7, #8
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}

0800b334 <I2C3_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2C3_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b088      	sub	sp, #32
 800b338:	af04      	add	r7, sp, #16
 800b33a:	4603      	mov	r3, r0
 800b33c:	71fb      	strb	r3, [r7, #7]
 800b33e:	460b      	mov	r3, r1
 800b340:	71bb      	strb	r3, [r7, #6]
 800b342:	4613      	mov	r3, r2
 800b344:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 800b346:	2300      	movs	r3, #0
 800b348:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2c3Timeout); 
 800b34a:	79fb      	ldrb	r3, [r7, #7]
 800b34c:	b299      	uxth	r1, r3
 800b34e:	79bb      	ldrb	r3, [r7, #6]
 800b350:	b29a      	uxth	r2, r3
 800b352:	4b08      	ldr	r3, [pc, #32]	; (800b374 <I2C3_WriteData+0x40>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	9302      	str	r3, [sp, #8]
 800b358:	2301      	movs	r3, #1
 800b35a:	9301      	str	r3, [sp, #4]
 800b35c:	1d7b      	adds	r3, r7, #5
 800b35e:	9300      	str	r3, [sp, #0]
 800b360:	2301      	movs	r3, #1
 800b362:	4805      	ldr	r0, [pc, #20]	; (800b378 <I2C3_WriteData+0x44>)
 800b364:	f008 f814 	bl	8013390 <HAL_I2C_Mem_Write>
 800b368:	4603      	mov	r3, r0
 800b36a:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK)
  {
    /* Re-Initialize the BUS */
    //I2Cx_Error();
  }        
}
 800b36c:	bf00      	nop
 800b36e:	3710      	adds	r7, #16
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}
 800b374:	2000001c 	.word	0x2000001c
 800b378:	20012be0 	.word	0x20012be0

0800b37c <I2C3_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2C3_ReadData(uint8_t Addr, uint8_t Reg)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b088      	sub	sp, #32
 800b380:	af04      	add	r7, sp, #16
 800b382:	4603      	mov	r3, r0
 800b384:	460a      	mov	r2, r1
 800b386:	71fb      	strb	r3, [r7, #7]
 800b388:	4613      	mov	r3, r2
 800b38a:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800b38c:	2300      	movs	r3, #0
 800b38e:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 800b390:	2300      	movs	r3, #0
 800b392:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2c3Timeout);
 800b394:	79fb      	ldrb	r3, [r7, #7]
 800b396:	b299      	uxth	r1, r3
 800b398:	79bb      	ldrb	r3, [r7, #6]
 800b39a:	b29a      	uxth	r2, r3
 800b39c:	4b09      	ldr	r3, [pc, #36]	; (800b3c4 <I2C3_ReadData+0x48>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	9302      	str	r3, [sp, #8]
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	9301      	str	r3, [sp, #4]
 800b3a6:	f107 030e 	add.w	r3, r7, #14
 800b3aa:	9300      	str	r3, [sp, #0]
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	4806      	ldr	r0, [pc, #24]	; (800b3c8 <I2C3_ReadData+0x4c>)
 800b3b0:	f008 f8e8 	bl	8013584 <HAL_I2C_Mem_Read>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	73fb      	strb	r3, [r7, #15]
  {
    /* Re-Initialize the BUS */
    //I2Cx_Error();
  
  }
  return value;
 800b3b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3710      	adds	r7, #16
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}
 800b3c2:	bf00      	nop
 800b3c4:	2000001c 	.word	0x2000001c
 800b3c8:	20012be0 	.word	0x20012be0

0800b3cc <I2C3_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2C3_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b088      	sub	sp, #32
 800b3d0:	af04      	add	r7, sp, #16
 800b3d2:	603a      	str	r2, [r7, #0]
 800b3d4:	461a      	mov	r2, r3
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	71fb      	strb	r3, [r7, #7]
 800b3da:	460b      	mov	r3, r1
 800b3dc:	71bb      	strb	r3, [r7, #6]
 800b3de:	4613      	mov	r3, r2
 800b3e0:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2c3Timeout);
 800b3e6:	79fb      	ldrb	r3, [r7, #7]
 800b3e8:	b299      	uxth	r1, r3
 800b3ea:	79bb      	ldrb	r3, [r7, #6]
 800b3ec:	b29a      	uxth	r2, r3
 800b3ee:	4b0b      	ldr	r3, [pc, #44]	; (800b41c <I2C3_ReadBuffer+0x50>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	9302      	str	r3, [sp, #8]
 800b3f4:	88bb      	ldrh	r3, [r7, #4]
 800b3f6:	9301      	str	r3, [sp, #4]
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	9300      	str	r3, [sp, #0]
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	4808      	ldr	r0, [pc, #32]	; (800b420 <I2C3_ReadBuffer+0x54>)
 800b400:	f008 f8c0 	bl	8013584 <HAL_I2C_Mem_Read>
 800b404:	4603      	mov	r3, r0
 800b406:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 800b408:	7bfb      	ldrb	r3, [r7, #15]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d101      	bne.n	800b412 <I2C3_ReadBuffer+0x46>
  {
    return 0;
 800b40e:	2300      	movs	r3, #0
 800b410:	e000      	b.n	800b414 <I2C3_ReadBuffer+0x48>
  else
  {
    /* Re-Initialize the BUS */
    //I2Cx_Error();

    return 1;
 800b412:	2301      	movs	r3, #1
  }
}
 800b414:	4618      	mov	r0, r3
 800b416:	3710      	adds	r7, #16
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}
 800b41c:	2000001c 	.word	0x2000001c
 800b420:	20012be0 	.word	0x20012be0

0800b424 <SPI5_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPI5_Read(uint8_t ReadSize)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b084      	sub	sp, #16
 800b428:	af00      	add	r7, sp, #0
 800b42a:	4603      	mov	r3, r0
 800b42c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800b42e:	2300      	movs	r3, #0
 800b430:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&hspi5, (uint8_t*) &readvalue, ReadSize, Spi5Timeout);
 800b432:	79fb      	ldrb	r3, [r7, #7]
 800b434:	b29a      	uxth	r2, r3
 800b436:	4b09      	ldr	r3, [pc, #36]	; (800b45c <SPI5_Read+0x38>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f107 0108 	add.w	r1, r7, #8
 800b43e:	4808      	ldr	r0, [pc, #32]	; (800b460 <SPI5_Read+0x3c>)
 800b440:	f00a fa83 	bl	801594a <HAL_SPI_Receive>
 800b444:	4603      	mov	r3, r0
 800b446:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800b448:	7bfb      	ldrb	r3, [r7, #15]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d001      	beq.n	800b452 <SPI5_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPI5_Error();
 800b44e:	f000 f827 	bl	800b4a0 <SPI5_Error>
  }
  
  return readvalue;
 800b452:	68bb      	ldr	r3, [r7, #8]
}
 800b454:	4618      	mov	r0, r3
 800b456:	3710      	adds	r7, #16
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}
 800b45c:	20000020 	.word	0x20000020
 800b460:	20012c34 	.word	0x20012c34

0800b464 <SPI5_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI5_Write(uint16_t Value)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b084      	sub	sp, #16
 800b468:	af00      	add	r7, sp, #0
 800b46a:	4603      	mov	r3, r0
 800b46c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800b46e:	2300      	movs	r3, #0
 800b470:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&hspi5, (uint8_t*) &Value, 1, Spi5Timeout);
 800b472:	4b09      	ldr	r3, [pc, #36]	; (800b498 <SPI5_Write+0x34>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	1db9      	adds	r1, r7, #6
 800b478:	2201      	movs	r2, #1
 800b47a:	4808      	ldr	r0, [pc, #32]	; (800b49c <SPI5_Write+0x38>)
 800b47c:	f00a f931 	bl	80156e2 <HAL_SPI_Transmit>
 800b480:	4603      	mov	r3, r0
 800b482:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800b484:	7bfb      	ldrb	r3, [r7, #15]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d001      	beq.n	800b48e <SPI5_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI5_Error();
 800b48a:	f000 f809 	bl	800b4a0 <SPI5_Error>
  }
}
 800b48e:	bf00      	nop
 800b490:	3710      	adds	r7, #16
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
 800b496:	bf00      	nop
 800b498:	20000020 	.word	0x20000020
 800b49c:	20012c34 	.word	0x20012c34

0800b4a0 <SPI5_Error>:

/**
  * @brief  SPI5 error treatment function.
  */
static void SPI5_Error(void)
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  //HAL_SPI_DeInit(&SpiHandle);
  
  /* Re- Initialize the SPI communication BUS */
  //SPIx_Init();
}
 800b4a4:	bf00      	nop
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ac:	4770      	bx	lr
	...

0800b4b0 <LCD_IO_Init>:

void LCD_IO_Init(void)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	af00      	add	r7, sp, #0
  /* Set or Reset the control line */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	2104      	movs	r1, #4
 800b4b8:	4804      	ldr	r0, [pc, #16]	; (800b4cc <LCD_IO_Init+0x1c>)
 800b4ba:	f007 fe17 	bl	80130ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800b4be:	2201      	movs	r2, #1
 800b4c0:	2104      	movs	r1, #4
 800b4c2:	4802      	ldr	r0, [pc, #8]	; (800b4cc <LCD_IO_Init+0x1c>)
 800b4c4:	f007 fe12 	bl	80130ec <HAL_GPIO_WritePin>
}
 800b4c8:	bf00      	nop
 800b4ca:	bd80      	pop	{r7, pc}
 800b4cc:	40020800 	.word	0x40020800

0800b4d0 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b082      	sub	sp, #8
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800b4da:	2201      	movs	r2, #1
 800b4dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b4e0:	480a      	ldr	r0, [pc, #40]	; (800b50c <LCD_IO_WriteData+0x3c>)
 800b4e2:	f007 fe03 	bl	80130ec <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	2104      	movs	r1, #4
 800b4ea:	4809      	ldr	r0, [pc, #36]	; (800b510 <LCD_IO_WriteData+0x40>)
 800b4ec:	f007 fdfe 	bl	80130ec <HAL_GPIO_WritePin>
  SPI5_Write(RegValue);
 800b4f0:	88fb      	ldrh	r3, [r7, #6]
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f7ff ffb6 	bl	800b464 <SPI5_Write>
  
  /* Deselect: Chip Select high */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800b4f8:	2201      	movs	r2, #1
 800b4fa:	2104      	movs	r1, #4
 800b4fc:	4804      	ldr	r0, [pc, #16]	; (800b510 <LCD_IO_WriteData+0x40>)
 800b4fe:	f007 fdf5 	bl	80130ec <HAL_GPIO_WritePin>
}
 800b502:	bf00      	nop
 800b504:	3708      	adds	r7, #8
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}
 800b50a:	bf00      	nop
 800b50c:	40020c00 	.word	0x40020c00
 800b510:	40020800 	.word	0x40020800

0800b514 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b082      	sub	sp, #8
 800b518:	af00      	add	r7, sp, #0
 800b51a:	4603      	mov	r3, r0
 800b51c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800b51e:	2200      	movs	r2, #0
 800b520:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b524:	480a      	ldr	r0, [pc, #40]	; (800b550 <LCD_IO_WriteReg+0x3c>)
 800b526:	f007 fde1 	bl	80130ec <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800b52a:	2200      	movs	r2, #0
 800b52c:	2104      	movs	r1, #4
 800b52e:	4809      	ldr	r0, [pc, #36]	; (800b554 <LCD_IO_WriteReg+0x40>)
 800b530:	f007 fddc 	bl	80130ec <HAL_GPIO_WritePin>
  SPI5_Write(Reg);
 800b534:	79fb      	ldrb	r3, [r7, #7]
 800b536:	b29b      	uxth	r3, r3
 800b538:	4618      	mov	r0, r3
 800b53a:	f7ff ff93 	bl	800b464 <SPI5_Write>
  
  /* Deselect: Chip Select high */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800b53e:	2201      	movs	r2, #1
 800b540:	2104      	movs	r1, #4
 800b542:	4804      	ldr	r0, [pc, #16]	; (800b554 <LCD_IO_WriteReg+0x40>)
 800b544:	f007 fdd2 	bl	80130ec <HAL_GPIO_WritePin>
}
 800b548:	bf00      	nop
 800b54a:	3708      	adds	r7, #8
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}
 800b550:	40020c00 	.word	0x40020c00
 800b554:	40020800 	.word	0x40020800

0800b558 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b084      	sub	sp, #16
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	4603      	mov	r3, r0
 800b560:	460a      	mov	r2, r1
 800b562:	80fb      	strh	r3, [r7, #6]
 800b564:	4613      	mov	r3, r2
 800b566:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 800b568:	2300      	movs	r3, #0
 800b56a:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800b56c:	2200      	movs	r2, #0
 800b56e:	2104      	movs	r1, #4
 800b570:	4810      	ldr	r0, [pc, #64]	; (800b5b4 <LCD_IO_ReadData+0x5c>)
 800b572:	f007 fdbb 	bl	80130ec <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800b576:	2200      	movs	r2, #0
 800b578:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b57c:	480e      	ldr	r0, [pc, #56]	; (800b5b8 <LCD_IO_ReadData+0x60>)
 800b57e:	f007 fdb5 	bl	80130ec <HAL_GPIO_WritePin>
  
  SPI5_Write(RegValue);
 800b582:	88fb      	ldrh	r3, [r7, #6]
 800b584:	4618      	mov	r0, r3
 800b586:	f7ff ff6d 	bl	800b464 <SPI5_Write>
  
  readvalue = SPI5_Read(ReadSize);
 800b58a:	797b      	ldrb	r3, [r7, #5]
 800b58c:	4618      	mov	r0, r3
 800b58e:	f7ff ff49 	bl	800b424 <SPI5_Read>
 800b592:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800b594:	2201      	movs	r2, #1
 800b596:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b59a:	4807      	ldr	r0, [pc, #28]	; (800b5b8 <LCD_IO_ReadData+0x60>)
 800b59c:	f007 fda6 	bl	80130ec <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800b5a0:	2201      	movs	r2, #1
 800b5a2:	2104      	movs	r1, #4
 800b5a4:	4803      	ldr	r0, [pc, #12]	; (800b5b4 <LCD_IO_ReadData+0x5c>)
 800b5a6:	f007 fda1 	bl	80130ec <HAL_GPIO_WritePin>
  
  return readvalue;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3710      	adds	r7, #16
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}
 800b5b4:	40020800 	.word	0x40020800
 800b5b8:	40020c00 	.word	0x40020c00

0800b5bc <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b082      	sub	sp, #8
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f006 fcbb 	bl	8011f40 <HAL_Delay>
}
 800b5ca:	bf00      	nop
 800b5cc:	3708      	adds	r7, #8
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}
	...

0800b5d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b082      	sub	sp, #8
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	4a04      	ldr	r2, [pc, #16]	; (800b5f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800b5e2:	4293      	cmp	r3, r2
 800b5e4:	d101      	bne.n	800b5ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800b5e6:	f006 fc8b 	bl	8011f00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800b5ea:	bf00      	nop
 800b5ec:	3708      	adds	r7, #8
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}
 800b5f2:	bf00      	nop
 800b5f4:	40001000 	.word	0x40001000

0800b5f8 <Error_Handler>:
DMA_HandleTypeDef hdma_tim3_ch2;
DMA_HandleTypeDef hdma_tim4_ch1;
DMA_HandleTypeDef hdma_tim5_ch1;

void Error_Handler(void)
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800b5fc:	bf00      	nop
 800b5fe:	46bd      	mov	sp, r7
 800b600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b604:	4770      	bx	lr
	...

0800b608 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b08e      	sub	sp, #56	; 0x38
 800b60c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b60e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b612:	2200      	movs	r2, #0
 800b614:	601a      	str	r2, [r3, #0]
 800b616:	605a      	str	r2, [r3, #4]
 800b618:	609a      	str	r2, [r3, #8]
 800b61a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b61c:	f107 0320 	add.w	r3, r7, #32
 800b620:	2200      	movs	r2, #0
 800b622:	601a      	str	r2, [r3, #0]
 800b624:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800b626:	1d3b      	adds	r3, r7, #4
 800b628:	2200      	movs	r2, #0
 800b62a:	601a      	str	r2, [r3, #0]
 800b62c:	605a      	str	r2, [r3, #4]
 800b62e:	609a      	str	r2, [r3, #8]
 800b630:	60da      	str	r2, [r3, #12]
 800b632:	611a      	str	r2, [r3, #16]
 800b634:	615a      	str	r2, [r3, #20]
 800b636:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800b638:	4b2d      	ldr	r3, [pc, #180]	; (800b6f0 <MX_TIM2_Init+0xe8>)
 800b63a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b63e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 167;
 800b640:	4b2b      	ldr	r3, [pc, #172]	; (800b6f0 <MX_TIM2_Init+0xe8>)
 800b642:	22a7      	movs	r2, #167	; 0xa7
 800b644:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b646:	4b2a      	ldr	r3, [pc, #168]	; (800b6f0 <MX_TIM2_Init+0xe8>)
 800b648:	2200      	movs	r2, #0
 800b64a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 800b64c:	4b28      	ldr	r3, [pc, #160]	; (800b6f0 <MX_TIM2_Init+0xe8>)
 800b64e:	f242 720f 	movw	r2, #9999	; 0x270f
 800b652:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b654:	4b26      	ldr	r3, [pc, #152]	; (800b6f0 <MX_TIM2_Init+0xe8>)
 800b656:	2200      	movs	r2, #0
 800b658:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b65a:	4b25      	ldr	r3, [pc, #148]	; (800b6f0 <MX_TIM2_Init+0xe8>)
 800b65c:	2200      	movs	r2, #0
 800b65e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800b660:	4823      	ldr	r0, [pc, #140]	; (800b6f0 <MX_TIM2_Init+0xe8>)
 800b662:	f00a fd2f 	bl	80160c4 <HAL_TIM_Base_Init>
 800b666:	4603      	mov	r3, r0
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d001      	beq.n	800b670 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800b66c:	f7ff ffc4 	bl	800b5f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b674:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800b676:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b67a:	4619      	mov	r1, r3
 800b67c:	481c      	ldr	r0, [pc, #112]	; (800b6f0 <MX_TIM2_Init+0xe8>)
 800b67e:	f00b f885 	bl	801678c <HAL_TIM_ConfigClockSource>
 800b682:	4603      	mov	r3, r0
 800b684:	2b00      	cmp	r3, #0
 800b686:	d001      	beq.n	800b68c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800b688:	f7ff ffb6 	bl	800b5f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800b68c:	4818      	ldr	r0, [pc, #96]	; (800b6f0 <MX_TIM2_Init+0xe8>)
 800b68e:	f00a fd68 	bl	8016162 <HAL_TIM_PWM_Init>
 800b692:	4603      	mov	r3, r0
 800b694:	2b00      	cmp	r3, #0
 800b696:	d001      	beq.n	800b69c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800b698:	f7ff ffae 	bl	800b5f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b69c:	2300      	movs	r3, #0
 800b69e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b6a4:	f107 0320 	add.w	r3, r7, #32
 800b6a8:	4619      	mov	r1, r3
 800b6aa:	4811      	ldr	r0, [pc, #68]	; (800b6f0 <MX_TIM2_Init+0xe8>)
 800b6ac:	f00b fcf4 	bl	8017098 <HAL_TIMEx_MasterConfigSynchronization>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d001      	beq.n	800b6ba <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800b6b6:	f7ff ff9f 	bl	800b5f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b6ba:	2360      	movs	r3, #96	; 0x60
 800b6bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800b6ca:	1d3b      	adds	r3, r7, #4
 800b6cc:	220c      	movs	r2, #12
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	4807      	ldr	r0, [pc, #28]	; (800b6f0 <MX_TIM2_Init+0xe8>)
 800b6d2:	f00a ff95 	bl	8016600 <HAL_TIM_PWM_ConfigChannel>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d001      	beq.n	800b6e0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800b6dc:	f7ff ff8c 	bl	800b5f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800b6e0:	4803      	ldr	r0, [pc, #12]	; (800b6f0 <MX_TIM2_Init+0xe8>)
 800b6e2:	f000 fdbd 	bl	800c260 <HAL_TIM_MspPostInit>

}
 800b6e6:	bf00      	nop
 800b6e8:	3738      	adds	r7, #56	; 0x38
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
 800b6ee:	bf00      	nop
 800b6f0:	20012f60 	.word	0x20012f60

0800b6f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b08e      	sub	sp, #56	; 0x38
 800b6f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b6fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b6fe:	2200      	movs	r2, #0
 800b700:	601a      	str	r2, [r3, #0]
 800b702:	605a      	str	r2, [r3, #4]
 800b704:	609a      	str	r2, [r3, #8]
 800b706:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b708:	f107 0320 	add.w	r3, r7, #32
 800b70c:	2200      	movs	r2, #0
 800b70e:	601a      	str	r2, [r3, #0]
 800b710:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800b712:	1d3b      	adds	r3, r7, #4
 800b714:	2200      	movs	r2, #0
 800b716:	601a      	str	r2, [r3, #0]
 800b718:	605a      	str	r2, [r3, #4]
 800b71a:	609a      	str	r2, [r3, #8]
 800b71c:	60da      	str	r2, [r3, #12]
 800b71e:	611a      	str	r2, [r3, #16]
 800b720:	615a      	str	r2, [r3, #20]
 800b722:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800b724:	4b2c      	ldr	r3, [pc, #176]	; (800b7d8 <MX_TIM3_Init+0xe4>)
 800b726:	4a2d      	ldr	r2, [pc, #180]	; (800b7dc <MX_TIM3_Init+0xe8>)
 800b728:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 800b72a:	4b2b      	ldr	r3, [pc, #172]	; (800b7d8 <MX_TIM3_Init+0xe4>)
 800b72c:	22a7      	movs	r2, #167	; 0xa7
 800b72e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b730:	4b29      	ldr	r3, [pc, #164]	; (800b7d8 <MX_TIM3_Init+0xe4>)
 800b732:	2200      	movs	r2, #0
 800b734:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 800b736:	4b28      	ldr	r3, [pc, #160]	; (800b7d8 <MX_TIM3_Init+0xe4>)
 800b738:	f242 720f 	movw	r2, #9999	; 0x270f
 800b73c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b73e:	4b26      	ldr	r3, [pc, #152]	; (800b7d8 <MX_TIM3_Init+0xe4>)
 800b740:	2200      	movs	r2, #0
 800b742:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b744:	4b24      	ldr	r3, [pc, #144]	; (800b7d8 <MX_TIM3_Init+0xe4>)
 800b746:	2200      	movs	r2, #0
 800b748:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800b74a:	4823      	ldr	r0, [pc, #140]	; (800b7d8 <MX_TIM3_Init+0xe4>)
 800b74c:	f00a fcba 	bl	80160c4 <HAL_TIM_Base_Init>
 800b750:	4603      	mov	r3, r0
 800b752:	2b00      	cmp	r3, #0
 800b754:	d001      	beq.n	800b75a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800b756:	f7ff ff4f 	bl	800b5f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b75a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b75e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800b760:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b764:	4619      	mov	r1, r3
 800b766:	481c      	ldr	r0, [pc, #112]	; (800b7d8 <MX_TIM3_Init+0xe4>)
 800b768:	f00b f810 	bl	801678c <HAL_TIM_ConfigClockSource>
 800b76c:	4603      	mov	r3, r0
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d001      	beq.n	800b776 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800b772:	f7ff ff41 	bl	800b5f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800b776:	4818      	ldr	r0, [pc, #96]	; (800b7d8 <MX_TIM3_Init+0xe4>)
 800b778:	f00a fcf3 	bl	8016162 <HAL_TIM_PWM_Init>
 800b77c:	4603      	mov	r3, r0
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d001      	beq.n	800b786 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800b782:	f7ff ff39 	bl	800b5f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b786:	2300      	movs	r3, #0
 800b788:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b78a:	2300      	movs	r3, #0
 800b78c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800b78e:	f107 0320 	add.w	r3, r7, #32
 800b792:	4619      	mov	r1, r3
 800b794:	4810      	ldr	r0, [pc, #64]	; (800b7d8 <MX_TIM3_Init+0xe4>)
 800b796:	f00b fc7f 	bl	8017098 <HAL_TIMEx_MasterConfigSynchronization>
 800b79a:	4603      	mov	r3, r0
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d001      	beq.n	800b7a4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800b7a0:	f7ff ff2a 	bl	800b5f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b7a4:	2360      	movs	r3, #96	; 0x60
 800b7a6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800b7b4:	1d3b      	adds	r3, r7, #4
 800b7b6:	2204      	movs	r2, #4
 800b7b8:	4619      	mov	r1, r3
 800b7ba:	4807      	ldr	r0, [pc, #28]	; (800b7d8 <MX_TIM3_Init+0xe4>)
 800b7bc:	f00a ff20 	bl	8016600 <HAL_TIM_PWM_ConfigChannel>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d001      	beq.n	800b7ca <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800b7c6:	f7ff ff17 	bl	800b5f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800b7ca:	4803      	ldr	r0, [pc, #12]	; (800b7d8 <MX_TIM3_Init+0xe4>)
 800b7cc:	f000 fd48 	bl	800c260 <HAL_TIM_MspPostInit>

}
 800b7d0:	bf00      	nop
 800b7d2:	3738      	adds	r7, #56	; 0x38
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}
 800b7d8:	20012d74 	.word	0x20012d74
 800b7dc:	40000400 	.word	0x40000400

0800b7e0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b08e      	sub	sp, #56	; 0x38
 800b7e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b7e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	601a      	str	r2, [r3, #0]
 800b7ee:	605a      	str	r2, [r3, #4]
 800b7f0:	609a      	str	r2, [r3, #8]
 800b7f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b7f4:	f107 0320 	add.w	r3, r7, #32
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	601a      	str	r2, [r3, #0]
 800b7fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800b7fe:	1d3b      	adds	r3, r7, #4
 800b800:	2200      	movs	r2, #0
 800b802:	601a      	str	r2, [r3, #0]
 800b804:	605a      	str	r2, [r3, #4]
 800b806:	609a      	str	r2, [r3, #8]
 800b808:	60da      	str	r2, [r3, #12]
 800b80a:	611a      	str	r2, [r3, #16]
 800b80c:	615a      	str	r2, [r3, #20]
 800b80e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800b810:	4b2c      	ldr	r3, [pc, #176]	; (800b8c4 <MX_TIM4_Init+0xe4>)
 800b812:	4a2d      	ldr	r2, [pc, #180]	; (800b8c8 <MX_TIM4_Init+0xe8>)
 800b814:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 167;
 800b816:	4b2b      	ldr	r3, [pc, #172]	; (800b8c4 <MX_TIM4_Init+0xe4>)
 800b818:	22a7      	movs	r2, #167	; 0xa7
 800b81a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b81c:	4b29      	ldr	r3, [pc, #164]	; (800b8c4 <MX_TIM4_Init+0xe4>)
 800b81e:	2200      	movs	r2, #0
 800b820:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 800b822:	4b28      	ldr	r3, [pc, #160]	; (800b8c4 <MX_TIM4_Init+0xe4>)
 800b824:	f242 720f 	movw	r2, #9999	; 0x270f
 800b828:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b82a:	4b26      	ldr	r3, [pc, #152]	; (800b8c4 <MX_TIM4_Init+0xe4>)
 800b82c:	2200      	movs	r2, #0
 800b82e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b830:	4b24      	ldr	r3, [pc, #144]	; (800b8c4 <MX_TIM4_Init+0xe4>)
 800b832:	2200      	movs	r2, #0
 800b834:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800b836:	4823      	ldr	r0, [pc, #140]	; (800b8c4 <MX_TIM4_Init+0xe4>)
 800b838:	f00a fc44 	bl	80160c4 <HAL_TIM_Base_Init>
 800b83c:	4603      	mov	r3, r0
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d001      	beq.n	800b846 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800b842:	f7ff fed9 	bl	800b5f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b846:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b84a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800b84c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b850:	4619      	mov	r1, r3
 800b852:	481c      	ldr	r0, [pc, #112]	; (800b8c4 <MX_TIM4_Init+0xe4>)
 800b854:	f00a ff9a 	bl	801678c <HAL_TIM_ConfigClockSource>
 800b858:	4603      	mov	r3, r0
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d001      	beq.n	800b862 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800b85e:	f7ff fecb 	bl	800b5f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800b862:	4818      	ldr	r0, [pc, #96]	; (800b8c4 <MX_TIM4_Init+0xe4>)
 800b864:	f00a fc7d 	bl	8016162 <HAL_TIM_PWM_Init>
 800b868:	4603      	mov	r3, r0
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d001      	beq.n	800b872 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800b86e:	f7ff fec3 	bl	800b5f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b872:	2300      	movs	r3, #0
 800b874:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b876:	2300      	movs	r3, #0
 800b878:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800b87a:	f107 0320 	add.w	r3, r7, #32
 800b87e:	4619      	mov	r1, r3
 800b880:	4810      	ldr	r0, [pc, #64]	; (800b8c4 <MX_TIM4_Init+0xe4>)
 800b882:	f00b fc09 	bl	8017098 <HAL_TIMEx_MasterConfigSynchronization>
 800b886:	4603      	mov	r3, r0
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d001      	beq.n	800b890 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800b88c:	f7ff feb4 	bl	800b5f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b890:	2360      	movs	r3, #96	; 0x60
 800b892:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800b894:	2300      	movs	r3, #0
 800b896:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b898:	2300      	movs	r3, #0
 800b89a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b89c:	2300      	movs	r3, #0
 800b89e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b8a0:	1d3b      	adds	r3, r7, #4
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	4619      	mov	r1, r3
 800b8a6:	4807      	ldr	r0, [pc, #28]	; (800b8c4 <MX_TIM4_Init+0xe4>)
 800b8a8:	f00a feaa 	bl	8016600 <HAL_TIM_PWM_ConfigChannel>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d001      	beq.n	800b8b6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800b8b2:	f7ff fea1 	bl	800b5f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800b8b6:	4803      	ldr	r0, [pc, #12]	; (800b8c4 <MX_TIM4_Init+0xe4>)
 800b8b8:	f000 fcd2 	bl	800c260 <HAL_TIM_MspPostInit>

}
 800b8bc:	bf00      	nop
 800b8be:	3738      	adds	r7, #56	; 0x38
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}
 800b8c4:	20012c8c 	.word	0x20012c8c
 800b8c8:	40000800 	.word	0x40000800

0800b8cc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b08e      	sub	sp, #56	; 0x38
 800b8d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b8d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	601a      	str	r2, [r3, #0]
 800b8da:	605a      	str	r2, [r3, #4]
 800b8dc:	609a      	str	r2, [r3, #8]
 800b8de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b8e0:	f107 0320 	add.w	r3, r7, #32
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	601a      	str	r2, [r3, #0]
 800b8e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800b8ea:	1d3b      	adds	r3, r7, #4
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	601a      	str	r2, [r3, #0]
 800b8f0:	605a      	str	r2, [r3, #4]
 800b8f2:	609a      	str	r2, [r3, #8]
 800b8f4:	60da      	str	r2, [r3, #12]
 800b8f6:	611a      	str	r2, [r3, #16]
 800b8f8:	615a      	str	r2, [r3, #20]
 800b8fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800b8fc:	4b2c      	ldr	r3, [pc, #176]	; (800b9b0 <MX_TIM5_Init+0xe4>)
 800b8fe:	4a2d      	ldr	r2, [pc, #180]	; (800b9b4 <MX_TIM5_Init+0xe8>)
 800b900:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 167;
 800b902:	4b2b      	ldr	r3, [pc, #172]	; (800b9b0 <MX_TIM5_Init+0xe4>)
 800b904:	22a7      	movs	r2, #167	; 0xa7
 800b906:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b908:	4b29      	ldr	r3, [pc, #164]	; (800b9b0 <MX_TIM5_Init+0xe4>)
 800b90a:	2200      	movs	r2, #0
 800b90c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 9999;
 800b90e:	4b28      	ldr	r3, [pc, #160]	; (800b9b0 <MX_TIM5_Init+0xe4>)
 800b910:	f242 720f 	movw	r2, #9999	; 0x270f
 800b914:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b916:	4b26      	ldr	r3, [pc, #152]	; (800b9b0 <MX_TIM5_Init+0xe4>)
 800b918:	2200      	movs	r2, #0
 800b91a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b91c:	4b24      	ldr	r3, [pc, #144]	; (800b9b0 <MX_TIM5_Init+0xe4>)
 800b91e:	2200      	movs	r2, #0
 800b920:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800b922:	4823      	ldr	r0, [pc, #140]	; (800b9b0 <MX_TIM5_Init+0xe4>)
 800b924:	f00a fbce 	bl	80160c4 <HAL_TIM_Base_Init>
 800b928:	4603      	mov	r3, r0
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d001      	beq.n	800b932 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800b92e:	f7ff fe63 	bl	800b5f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b932:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b936:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800b938:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b93c:	4619      	mov	r1, r3
 800b93e:	481c      	ldr	r0, [pc, #112]	; (800b9b0 <MX_TIM5_Init+0xe4>)
 800b940:	f00a ff24 	bl	801678c <HAL_TIM_ConfigClockSource>
 800b944:	4603      	mov	r3, r0
 800b946:	2b00      	cmp	r3, #0
 800b948:	d001      	beq.n	800b94e <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800b94a:	f7ff fe55 	bl	800b5f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800b94e:	4818      	ldr	r0, [pc, #96]	; (800b9b0 <MX_TIM5_Init+0xe4>)
 800b950:	f00a fc07 	bl	8016162 <HAL_TIM_PWM_Init>
 800b954:	4603      	mov	r3, r0
 800b956:	2b00      	cmp	r3, #0
 800b958:	d001      	beq.n	800b95e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800b95a:	f7ff fe4d 	bl	800b5f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b95e:	2300      	movs	r3, #0
 800b960:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b962:	2300      	movs	r3, #0
 800b964:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800b966:	f107 0320 	add.w	r3, r7, #32
 800b96a:	4619      	mov	r1, r3
 800b96c:	4810      	ldr	r0, [pc, #64]	; (800b9b0 <MX_TIM5_Init+0xe4>)
 800b96e:	f00b fb93 	bl	8017098 <HAL_TIMEx_MasterConfigSynchronization>
 800b972:	4603      	mov	r3, r0
 800b974:	2b00      	cmp	r3, #0
 800b976:	d001      	beq.n	800b97c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800b978:	f7ff fe3e 	bl	800b5f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b97c:	2360      	movs	r3, #96	; 0x60
 800b97e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800b980:	2300      	movs	r3, #0
 800b982:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b984:	2300      	movs	r3, #0
 800b986:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b988:	2300      	movs	r3, #0
 800b98a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b98c:	1d3b      	adds	r3, r7, #4
 800b98e:	2200      	movs	r2, #0
 800b990:	4619      	mov	r1, r3
 800b992:	4807      	ldr	r0, [pc, #28]	; (800b9b0 <MX_TIM5_Init+0xe4>)
 800b994:	f00a fe34 	bl	8016600 <HAL_TIM_PWM_ConfigChannel>
 800b998:	4603      	mov	r3, r0
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d001      	beq.n	800b9a2 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800b99e:	f7ff fe2b 	bl	800b5f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800b9a2:	4803      	ldr	r0, [pc, #12]	; (800b9b0 <MX_TIM5_Init+0xe4>)
 800b9a4:	f000 fc5c 	bl	800c260 <HAL_TIM_MspPostInit>

}
 800b9a8:	bf00      	nop
 800b9aa:	3738      	adds	r7, #56	; 0x38
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}
 800b9b0:	20012d34 	.word	0x20012d34
 800b9b4:	40000c00 	.word	0x40000c00

0800b9b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b083      	sub	sp, #12
 800b9bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800b9be:	2300      	movs	r3, #0
 800b9c0:	607b      	str	r3, [r7, #4]
 800b9c2:	4b09      	ldr	r3, [pc, #36]	; (800b9e8 <MX_DMA_Init+0x30>)
 800b9c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9c6:	4a08      	ldr	r2, [pc, #32]	; (800b9e8 <MX_DMA_Init+0x30>)
 800b9c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b9cc:	6313      	str	r3, [r2, #48]	; 0x30
 800b9ce:	4b06      	ldr	r3, [pc, #24]	; (800b9e8 <MX_DMA_Init+0x30>)
 800b9d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b9d6:	607b      	str	r3, [r7, #4]
 800b9d8:	687b      	ldr	r3, [r7, #4]
//  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
//  /* DMA1_Stream6_IRQn interrupt configuration */
//  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
//  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);

}
 800b9da:	bf00      	nop
 800b9dc:	370c      	adds	r7, #12
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e4:	4770      	bx	lr
 800b9e6:	bf00      	nop
 800b9e8:	40023800 	.word	0x40023800

0800b9ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b082      	sub	sp, #8
 800b9f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	607b      	str	r3, [r7, #4]
 800b9f6:	4b12      	ldr	r3, [pc, #72]	; (800ba40 <HAL_MspInit+0x54>)
 800b9f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9fa:	4a11      	ldr	r2, [pc, #68]	; (800ba40 <HAL_MspInit+0x54>)
 800b9fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ba00:	6453      	str	r3, [r2, #68]	; 0x44
 800ba02:	4b0f      	ldr	r3, [pc, #60]	; (800ba40 <HAL_MspInit+0x54>)
 800ba04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba0a:	607b      	str	r3, [r7, #4]
 800ba0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800ba0e:	2300      	movs	r3, #0
 800ba10:	603b      	str	r3, [r7, #0]
 800ba12:	4b0b      	ldr	r3, [pc, #44]	; (800ba40 <HAL_MspInit+0x54>)
 800ba14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba16:	4a0a      	ldr	r2, [pc, #40]	; (800ba40 <HAL_MspInit+0x54>)
 800ba18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba1c:	6413      	str	r3, [r2, #64]	; 0x40
 800ba1e:	4b08      	ldr	r3, [pc, #32]	; (800ba40 <HAL_MspInit+0x54>)
 800ba20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba26:	603b      	str	r3, [r7, #0]
 800ba28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	210f      	movs	r1, #15
 800ba2e:	f06f 0001 	mvn.w	r0, #1
 800ba32:	f006 fb81 	bl	8012138 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ba36:	bf00      	nop
 800ba38:	3708      	adds	r7, #8
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}
 800ba3e:	bf00      	nop
 800ba40:	40023800 	.word	0x40023800

0800ba44 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800ba44:	b480      	push	{r7}
 800ba46:	b085      	sub	sp, #20
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	4a0b      	ldr	r2, [pc, #44]	; (800ba80 <HAL_CRC_MspInit+0x3c>)
 800ba52:	4293      	cmp	r3, r2
 800ba54:	d10d      	bne.n	800ba72 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800ba56:	2300      	movs	r3, #0
 800ba58:	60fb      	str	r3, [r7, #12]
 800ba5a:	4b0a      	ldr	r3, [pc, #40]	; (800ba84 <HAL_CRC_MspInit+0x40>)
 800ba5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba5e:	4a09      	ldr	r2, [pc, #36]	; (800ba84 <HAL_CRC_MspInit+0x40>)
 800ba60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ba64:	6313      	str	r3, [r2, #48]	; 0x30
 800ba66:	4b07      	ldr	r3, [pc, #28]	; (800ba84 <HAL_CRC_MspInit+0x40>)
 800ba68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ba6e:	60fb      	str	r3, [r7, #12]
 800ba70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800ba72:	bf00      	nop
 800ba74:	3714      	adds	r7, #20
 800ba76:	46bd      	mov	sp, r7
 800ba78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7c:	4770      	bx	lr
 800ba7e:	bf00      	nop
 800ba80:	40023000 	.word	0x40023000
 800ba84:	40023800 	.word	0x40023800

0800ba88 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b084      	sub	sp, #16
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	4a0e      	ldr	r2, [pc, #56]	; (800bad0 <HAL_DMA2D_MspInit+0x48>)
 800ba96:	4293      	cmp	r3, r2
 800ba98:	d115      	bne.n	800bac6 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	60fb      	str	r3, [r7, #12]
 800ba9e:	4b0d      	ldr	r3, [pc, #52]	; (800bad4 <HAL_DMA2D_MspInit+0x4c>)
 800baa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baa2:	4a0c      	ldr	r2, [pc, #48]	; (800bad4 <HAL_DMA2D_MspInit+0x4c>)
 800baa4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800baa8:	6313      	str	r3, [r2, #48]	; 0x30
 800baaa:	4b0a      	ldr	r3, [pc, #40]	; (800bad4 <HAL_DMA2D_MspInit+0x4c>)
 800baac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bab2:	60fb      	str	r3, [r7, #12]
 800bab4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800bab6:	2200      	movs	r2, #0
 800bab8:	2105      	movs	r1, #5
 800baba:	205a      	movs	r0, #90	; 0x5a
 800babc:	f006 fb3c 	bl	8012138 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800bac0:	205a      	movs	r0, #90	; 0x5a
 800bac2:	f006 fb55 	bl	8012170 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800bac6:	bf00      	nop
 800bac8:	3710      	adds	r7, #16
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}
 800bace:	bf00      	nop
 800bad0:	4002b000 	.word	0x4002b000
 800bad4:	40023800 	.word	0x40023800

0800bad8 <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b082      	sub	sp, #8
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	4a07      	ldr	r2, [pc, #28]	; (800bb04 <HAL_DMA2D_MspDeInit+0x2c>)
 800bae6:	4293      	cmp	r3, r2
 800bae8:	d108      	bne.n	800bafc <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 800baea:	4b07      	ldr	r3, [pc, #28]	; (800bb08 <HAL_DMA2D_MspDeInit+0x30>)
 800baec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baee:	4a06      	ldr	r2, [pc, #24]	; (800bb08 <HAL_DMA2D_MspDeInit+0x30>)
 800baf0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800baf4:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 800baf6:	205a      	movs	r0, #90	; 0x5a
 800baf8:	f006 fb48 	bl	801218c <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 800bafc:	bf00      	nop
 800bafe:	3708      	adds	r7, #8
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}
 800bb04:	4002b000 	.word	0x4002b000
 800bb08:	40023800 	.word	0x40023800

0800bb0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b08a      	sub	sp, #40	; 0x28
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bb14:	f107 0314 	add.w	r3, r7, #20
 800bb18:	2200      	movs	r2, #0
 800bb1a:	601a      	str	r2, [r3, #0]
 800bb1c:	605a      	str	r2, [r3, #4]
 800bb1e:	609a      	str	r2, [r3, #8]
 800bb20:	60da      	str	r2, [r3, #12]
 800bb22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	4a2f      	ldr	r2, [pc, #188]	; (800bbe8 <HAL_I2C_MspInit+0xdc>)
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d157      	bne.n	800bbde <HAL_I2C_MspInit+0xd2>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800bb2e:	2300      	movs	r3, #0
 800bb30:	613b      	str	r3, [r7, #16]
 800bb32:	4b2e      	ldr	r3, [pc, #184]	; (800bbec <HAL_I2C_MspInit+0xe0>)
 800bb34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb36:	4a2d      	ldr	r2, [pc, #180]	; (800bbec <HAL_I2C_MspInit+0xe0>)
 800bb38:	f043 0304 	orr.w	r3, r3, #4
 800bb3c:	6313      	str	r3, [r2, #48]	; 0x30
 800bb3e:	4b2b      	ldr	r3, [pc, #172]	; (800bbec <HAL_I2C_MspInit+0xe0>)
 800bb40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb42:	f003 0304 	and.w	r3, r3, #4
 800bb46:	613b      	str	r3, [r7, #16]
 800bb48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	60fb      	str	r3, [r7, #12]
 800bb4e:	4b27      	ldr	r3, [pc, #156]	; (800bbec <HAL_I2C_MspInit+0xe0>)
 800bb50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb52:	4a26      	ldr	r2, [pc, #152]	; (800bbec <HAL_I2C_MspInit+0xe0>)
 800bb54:	f043 0301 	orr.w	r3, r3, #1
 800bb58:	6313      	str	r3, [r2, #48]	; 0x30
 800bb5a:	4b24      	ldr	r3, [pc, #144]	; (800bbec <HAL_I2C_MspInit+0xe0>)
 800bb5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb5e:	f003 0301 	and.w	r3, r3, #1
 800bb62:	60fb      	str	r3, [r7, #12]
 800bb64:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800bb66:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800bb6c:	2312      	movs	r3, #18
 800bb6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800bb70:	2301      	movs	r3, #1
 800bb72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bb74:	2303      	movs	r3, #3
 800bb76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800bb78:	2304      	movs	r3, #4
 800bb7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bb7c:	f107 0314 	add.w	r3, r7, #20
 800bb80:	4619      	mov	r1, r3
 800bb82:	481b      	ldr	r0, [pc, #108]	; (800bbf0 <HAL_I2C_MspInit+0xe4>)
 800bb84:	f007 f908 	bl	8012d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800bb88:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800bb8e:	2312      	movs	r3, #18
 800bb90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800bb92:	2301      	movs	r3, #1
 800bb94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bb96:	2303      	movs	r3, #3
 800bb98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800bb9a:	2304      	movs	r3, #4
 800bb9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bb9e:	f107 0314 	add.w	r3, r7, #20
 800bba2:	4619      	mov	r1, r3
 800bba4:	4813      	ldr	r0, [pc, #76]	; (800bbf4 <HAL_I2C_MspInit+0xe8>)
 800bba6:	f007 f8f7 	bl	8012d98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800bbaa:	2300      	movs	r3, #0
 800bbac:	60bb      	str	r3, [r7, #8]
 800bbae:	4b0f      	ldr	r3, [pc, #60]	; (800bbec <HAL_I2C_MspInit+0xe0>)
 800bbb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbb2:	4a0e      	ldr	r2, [pc, #56]	; (800bbec <HAL_I2C_MspInit+0xe0>)
 800bbb4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bbb8:	6413      	str	r3, [r2, #64]	; 0x40
 800bbba:	4b0c      	ldr	r3, [pc, #48]	; (800bbec <HAL_I2C_MspInit+0xe0>)
 800bbbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bbc2:	60bb      	str	r3, [r7, #8]
 800bbc4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */
  /* Force the I2C Peripheral Clock Reset */  
    __HAL_RCC_I2C3_FORCE_RESET();
 800bbc6:	4b09      	ldr	r3, [pc, #36]	; (800bbec <HAL_I2C_MspInit+0xe0>)
 800bbc8:	6a1b      	ldr	r3, [r3, #32]
 800bbca:	4a08      	ldr	r2, [pc, #32]	; (800bbec <HAL_I2C_MspInit+0xe0>)
 800bbcc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bbd0:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    __HAL_RCC_I2C3_RELEASE_RESET(); 
 800bbd2:	4b06      	ldr	r3, [pc, #24]	; (800bbec <HAL_I2C_MspInit+0xe0>)
 800bbd4:	6a1b      	ldr	r3, [r3, #32]
 800bbd6:	4a05      	ldr	r2, [pc, #20]	; (800bbec <HAL_I2C_MspInit+0xe0>)
 800bbd8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800bbdc:	6213      	str	r3, [r2, #32]
  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800bbde:	bf00      	nop
 800bbe0:	3728      	adds	r7, #40	; 0x28
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}
 800bbe6:	bf00      	nop
 800bbe8:	40005c00 	.word	0x40005c00
 800bbec:	40023800 	.word	0x40023800
 800bbf0:	40020800 	.word	0x40020800
 800bbf4:	40020000 	.word	0x40020000

0800bbf8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b08e      	sub	sp, #56	; 0x38
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bc00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc04:	2200      	movs	r2, #0
 800bc06:	601a      	str	r2, [r3, #0]
 800bc08:	605a      	str	r2, [r3, #4]
 800bc0a:	609a      	str	r2, [r3, #8]
 800bc0c:	60da      	str	r2, [r3, #12]
 800bc0e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	4a7b      	ldr	r2, [pc, #492]	; (800be04 <HAL_LTDC_MspInit+0x20c>)
 800bc16:	4293      	cmp	r3, r2
 800bc18:	f040 80ef 	bne.w	800bdfa <HAL_LTDC_MspInit+0x202>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	623b      	str	r3, [r7, #32]
 800bc20:	4b79      	ldr	r3, [pc, #484]	; (800be08 <HAL_LTDC_MspInit+0x210>)
 800bc22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc24:	4a78      	ldr	r2, [pc, #480]	; (800be08 <HAL_LTDC_MspInit+0x210>)
 800bc26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bc2a:	6453      	str	r3, [r2, #68]	; 0x44
 800bc2c:	4b76      	ldr	r3, [pc, #472]	; (800be08 <HAL_LTDC_MspInit+0x210>)
 800bc2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bc34:	623b      	str	r3, [r7, #32]
 800bc36:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800bc38:	2300      	movs	r3, #0
 800bc3a:	61fb      	str	r3, [r7, #28]
 800bc3c:	4b72      	ldr	r3, [pc, #456]	; (800be08 <HAL_LTDC_MspInit+0x210>)
 800bc3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc40:	4a71      	ldr	r2, [pc, #452]	; (800be08 <HAL_LTDC_MspInit+0x210>)
 800bc42:	f043 0320 	orr.w	r3, r3, #32
 800bc46:	6313      	str	r3, [r2, #48]	; 0x30
 800bc48:	4b6f      	ldr	r3, [pc, #444]	; (800be08 <HAL_LTDC_MspInit+0x210>)
 800bc4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc4c:	f003 0320 	and.w	r3, r3, #32
 800bc50:	61fb      	str	r3, [r7, #28]
 800bc52:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bc54:	2300      	movs	r3, #0
 800bc56:	61bb      	str	r3, [r7, #24]
 800bc58:	4b6b      	ldr	r3, [pc, #428]	; (800be08 <HAL_LTDC_MspInit+0x210>)
 800bc5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc5c:	4a6a      	ldr	r2, [pc, #424]	; (800be08 <HAL_LTDC_MspInit+0x210>)
 800bc5e:	f043 0301 	orr.w	r3, r3, #1
 800bc62:	6313      	str	r3, [r2, #48]	; 0x30
 800bc64:	4b68      	ldr	r3, [pc, #416]	; (800be08 <HAL_LTDC_MspInit+0x210>)
 800bc66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc68:	f003 0301 	and.w	r3, r3, #1
 800bc6c:	61bb      	str	r3, [r7, #24]
 800bc6e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bc70:	2300      	movs	r3, #0
 800bc72:	617b      	str	r3, [r7, #20]
 800bc74:	4b64      	ldr	r3, [pc, #400]	; (800be08 <HAL_LTDC_MspInit+0x210>)
 800bc76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc78:	4a63      	ldr	r2, [pc, #396]	; (800be08 <HAL_LTDC_MspInit+0x210>)
 800bc7a:	f043 0302 	orr.w	r3, r3, #2
 800bc7e:	6313      	str	r3, [r2, #48]	; 0x30
 800bc80:	4b61      	ldr	r3, [pc, #388]	; (800be08 <HAL_LTDC_MspInit+0x210>)
 800bc82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc84:	f003 0302 	and.w	r3, r3, #2
 800bc88:	617b      	str	r3, [r7, #20]
 800bc8a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	613b      	str	r3, [r7, #16]
 800bc90:	4b5d      	ldr	r3, [pc, #372]	; (800be08 <HAL_LTDC_MspInit+0x210>)
 800bc92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc94:	4a5c      	ldr	r2, [pc, #368]	; (800be08 <HAL_LTDC_MspInit+0x210>)
 800bc96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc9a:	6313      	str	r3, [r2, #48]	; 0x30
 800bc9c:	4b5a      	ldr	r3, [pc, #360]	; (800be08 <HAL_LTDC_MspInit+0x210>)
 800bc9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bca4:	613b      	str	r3, [r7, #16]
 800bca6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800bca8:	2300      	movs	r3, #0
 800bcaa:	60fb      	str	r3, [r7, #12]
 800bcac:	4b56      	ldr	r3, [pc, #344]	; (800be08 <HAL_LTDC_MspInit+0x210>)
 800bcae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcb0:	4a55      	ldr	r2, [pc, #340]	; (800be08 <HAL_LTDC_MspInit+0x210>)
 800bcb2:	f043 0304 	orr.w	r3, r3, #4
 800bcb6:	6313      	str	r3, [r2, #48]	; 0x30
 800bcb8:	4b53      	ldr	r3, [pc, #332]	; (800be08 <HAL_LTDC_MspInit+0x210>)
 800bcba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcbc:	f003 0304 	and.w	r3, r3, #4
 800bcc0:	60fb      	str	r3, [r7, #12]
 800bcc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	60bb      	str	r3, [r7, #8]
 800bcc8:	4b4f      	ldr	r3, [pc, #316]	; (800be08 <HAL_LTDC_MspInit+0x210>)
 800bcca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bccc:	4a4e      	ldr	r2, [pc, #312]	; (800be08 <HAL_LTDC_MspInit+0x210>)
 800bcce:	f043 0308 	orr.w	r3, r3, #8
 800bcd2:	6313      	str	r3, [r2, #48]	; 0x30
 800bcd4:	4b4c      	ldr	r3, [pc, #304]	; (800be08 <HAL_LTDC_MspInit+0x210>)
 800bcd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcd8:	f003 0308 	and.w	r3, r3, #8
 800bcdc:	60bb      	str	r3, [r7, #8]
 800bcde:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800bce0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bce4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bce6:	2302      	movs	r3, #2
 800bce8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bcea:	2300      	movs	r3, #0
 800bcec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800bcee:	2302      	movs	r3, #2
 800bcf0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800bcf2:	230e      	movs	r3, #14
 800bcf4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800bcf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bcfa:	4619      	mov	r1, r3
 800bcfc:	4843      	ldr	r0, [pc, #268]	; (800be0c <HAL_LTDC_MspInit+0x214>)
 800bcfe:	f007 f84b 	bl	8012d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11 
 800bd02:	f641 0358 	movw	r3, #6232	; 0x1858
 800bd06:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd08:	2302      	movs	r3, #2
 800bd0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800bd10:	2302      	movs	r3, #2
 800bd12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800bd14:	230e      	movs	r3, #14
 800bd16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bd18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd1c:	4619      	mov	r1, r3
 800bd1e:	483c      	ldr	r0, [pc, #240]	; (800be10 <HAL_LTDC_MspInit+0x218>)
 800bd20:	f007 f83a 	bl	8012d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800bd24:	2303      	movs	r3, #3
 800bd26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd28:	2302      	movs	r3, #2
 800bd2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800bd30:	2302      	movs	r3, #2
 800bd32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800bd34:	2309      	movs	r3, #9
 800bd36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bd38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd3c:	4619      	mov	r1, r3
 800bd3e:	4835      	ldr	r0, [pc, #212]	; (800be14 <HAL_LTDC_MspInit+0x21c>)
 800bd40:	f007 f82a 	bl	8012d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 800bd44:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800bd48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd4a:	2302      	movs	r3, #2
 800bd4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800bd52:	2302      	movs	r3, #2
 800bd54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800bd56:	230e      	movs	r3, #14
 800bd58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bd5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd5e:	4619      	mov	r1, r3
 800bd60:	482c      	ldr	r0, [pc, #176]	; (800be14 <HAL_LTDC_MspInit+0x21c>)
 800bd62:	f007 f819 	bl	8012d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 800bd66:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800bd6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd6c:	2302      	movs	r3, #2
 800bd6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd70:	2300      	movs	r3, #0
 800bd72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800bd74:	2302      	movs	r3, #2
 800bd76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800bd78:	230e      	movs	r3, #14
 800bd7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800bd7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd80:	4619      	mov	r1, r3
 800bd82:	4825      	ldr	r0, [pc, #148]	; (800be18 <HAL_LTDC_MspInit+0x220>)
 800bd84:	f007 f808 	bl	8012d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800bd88:	23c0      	movs	r3, #192	; 0xc0
 800bd8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd8c:	2302      	movs	r3, #2
 800bd8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd90:	2300      	movs	r3, #0
 800bd92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800bd94:	2302      	movs	r3, #2
 800bd96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800bd98:	230e      	movs	r3, #14
 800bd9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bd9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bda0:	4619      	mov	r1, r3
 800bda2:	481e      	ldr	r0, [pc, #120]	; (800be1c <HAL_LTDC_MspInit+0x224>)
 800bda4:	f006 fff8 	bl	8012d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800bda8:	2308      	movs	r3, #8
 800bdaa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bdac:	2302      	movs	r3, #2
 800bdae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800bdb4:	2302      	movs	r3, #2
 800bdb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800bdb8:	230e      	movs	r3, #14
 800bdba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800bdbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bdc0:	4619      	mov	r1, r3
 800bdc2:	4817      	ldr	r0, [pc, #92]	; (800be20 <HAL_LTDC_MspInit+0x228>)
 800bdc4:	f006 ffe8 	bl	8012d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800bdc8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800bdcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bdce:	2302      	movs	r3, #2
 800bdd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800bdd6:	2302      	movs	r3, #2
 800bdd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800bdda:	2309      	movs	r3, #9
 800bddc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800bdde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bde2:	4619      	mov	r1, r3
 800bde4:	480c      	ldr	r0, [pc, #48]	; (800be18 <HAL_LTDC_MspInit+0x220>)
 800bde6:	f006 ffd7 	bl	8012d98 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800bdea:	2200      	movs	r2, #0
 800bdec:	2105      	movs	r1, #5
 800bdee:	2058      	movs	r0, #88	; 0x58
 800bdf0:	f006 f9a2 	bl	8012138 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800bdf4:	2058      	movs	r0, #88	; 0x58
 800bdf6:	f006 f9bb 	bl	8012170 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800bdfa:	bf00      	nop
 800bdfc:	3738      	adds	r7, #56	; 0x38
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}
 800be02:	bf00      	nop
 800be04:	40016800 	.word	0x40016800
 800be08:	40023800 	.word	0x40023800
 800be0c:	40021400 	.word	0x40021400
 800be10:	40020000 	.word	0x40020000
 800be14:	40020400 	.word	0x40020400
 800be18:	40021800 	.word	0x40021800
 800be1c:	40020800 	.word	0x40020800
 800be20:	40020c00 	.word	0x40020c00

0800be24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b08a      	sub	sp, #40	; 0x28
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be2c:	f107 0314 	add.w	r3, r7, #20
 800be30:	2200      	movs	r2, #0
 800be32:	601a      	str	r2, [r3, #0]
 800be34:	605a      	str	r2, [r3, #4]
 800be36:	609a      	str	r2, [r3, #8]
 800be38:	60da      	str	r2, [r3, #12]
 800be3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	4a19      	ldr	r2, [pc, #100]	; (800bea8 <HAL_SPI_MspInit+0x84>)
 800be42:	4293      	cmp	r3, r2
 800be44:	d12c      	bne.n	800bea0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800be46:	2300      	movs	r3, #0
 800be48:	613b      	str	r3, [r7, #16]
 800be4a:	4b18      	ldr	r3, [pc, #96]	; (800beac <HAL_SPI_MspInit+0x88>)
 800be4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be4e:	4a17      	ldr	r2, [pc, #92]	; (800beac <HAL_SPI_MspInit+0x88>)
 800be50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be54:	6453      	str	r3, [r2, #68]	; 0x44
 800be56:	4b15      	ldr	r3, [pc, #84]	; (800beac <HAL_SPI_MspInit+0x88>)
 800be58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800be5e:	613b      	str	r3, [r7, #16]
 800be60:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800be62:	2300      	movs	r3, #0
 800be64:	60fb      	str	r3, [r7, #12]
 800be66:	4b11      	ldr	r3, [pc, #68]	; (800beac <HAL_SPI_MspInit+0x88>)
 800be68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be6a:	4a10      	ldr	r2, [pc, #64]	; (800beac <HAL_SPI_MspInit+0x88>)
 800be6c:	f043 0320 	orr.w	r3, r3, #32
 800be70:	6313      	str	r3, [r2, #48]	; 0x30
 800be72:	4b0e      	ldr	r3, [pc, #56]	; (800beac <HAL_SPI_MspInit+0x88>)
 800be74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be76:	f003 0320 	and.w	r3, r3, #32
 800be7a:	60fb      	str	r3, [r7, #12]
 800be7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800be7e:	f44f 7360 	mov.w	r3, #896	; 0x380
 800be82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be84:	2302      	movs	r3, #2
 800be86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be88:	2300      	movs	r3, #0
 800be8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800be8c:	2303      	movs	r3, #3
 800be8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800be90:	2305      	movs	r3, #5
 800be92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800be94:	f107 0314 	add.w	r3, r7, #20
 800be98:	4619      	mov	r1, r3
 800be9a:	4805      	ldr	r0, [pc, #20]	; (800beb0 <HAL_SPI_MspInit+0x8c>)
 800be9c:	f006 ff7c 	bl	8012d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800bea0:	bf00      	nop
 800bea2:	3728      	adds	r7, #40	; 0x28
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}
 800bea8:	40015000 	.word	0x40015000
 800beac:	40023800 	.word	0x40023800
 800beb0:	40021400 	.word	0x40021400

0800beb4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b086      	sub	sp, #24
 800beb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800beba:	1d3b      	adds	r3, r7, #4
 800bebc:	2200      	movs	r2, #0
 800bebe:	601a      	str	r2, [r3, #0]
 800bec0:	605a      	str	r2, [r3, #4]
 800bec2:	609a      	str	r2, [r3, #8]
 800bec4:	60da      	str	r2, [r3, #12]
 800bec6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800bec8:	4b3b      	ldr	r3, [pc, #236]	; (800bfb8 <HAL_FMC_MspInit+0x104>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d16f      	bne.n	800bfb0 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800bed0:	4b39      	ldr	r3, [pc, #228]	; (800bfb8 <HAL_FMC_MspInit+0x104>)
 800bed2:	2201      	movs	r2, #1
 800bed4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800bed6:	2300      	movs	r3, #0
 800bed8:	603b      	str	r3, [r7, #0]
 800beda:	4b38      	ldr	r3, [pc, #224]	; (800bfbc <HAL_FMC_MspInit+0x108>)
 800bedc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bede:	4a37      	ldr	r2, [pc, #220]	; (800bfbc <HAL_FMC_MspInit+0x108>)
 800bee0:	f043 0301 	orr.w	r3, r3, #1
 800bee4:	6393      	str	r3, [r2, #56]	; 0x38
 800bee6:	4b35      	ldr	r3, [pc, #212]	; (800bfbc <HAL_FMC_MspInit+0x108>)
 800bee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beea:	f003 0301 	and.w	r3, r3, #1
 800beee:	603b      	str	r3, [r7, #0]
 800bef0:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800bef2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800bef6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bef8:	2302      	movs	r3, #2
 800befa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800befc:	2300      	movs	r3, #0
 800befe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf00:	2303      	movs	r3, #3
 800bf02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800bf04:	230c      	movs	r3, #12
 800bf06:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800bf08:	1d3b      	adds	r3, r7, #4
 800bf0a:	4619      	mov	r1, r3
 800bf0c:	482c      	ldr	r0, [pc, #176]	; (800bfc0 <HAL_FMC_MspInit+0x10c>)
 800bf0e:	f006 ff43 	bl	8012d98 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800bf12:	2301      	movs	r3, #1
 800bf14:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf16:	2302      	movs	r3, #2
 800bf18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf1e:	2303      	movs	r3, #3
 800bf20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800bf22:	230c      	movs	r3, #12
 800bf24:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bf26:	1d3b      	adds	r3, r7, #4
 800bf28:	4619      	mov	r1, r3
 800bf2a:	4826      	ldr	r0, [pc, #152]	; (800bfc4 <HAL_FMC_MspInit+0x110>)
 800bf2c:	f006 ff34 	bl	8012d98 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 800bf30:	f248 1333 	movw	r3, #33075	; 0x8133
 800bf34:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf36:	2302      	movs	r3, #2
 800bf38:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf3e:	2303      	movs	r3, #3
 800bf40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800bf42:	230c      	movs	r3, #12
 800bf44:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800bf46:	1d3b      	adds	r3, r7, #4
 800bf48:	4619      	mov	r1, r3
 800bf4a:	481f      	ldr	r0, [pc, #124]	; (800bfc8 <HAL_FMC_MspInit+0x114>)
 800bf4c:	f006 ff24 	bl	8012d98 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 800bf50:	f64f 7383 	movw	r3, #65411	; 0xff83
 800bf54:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf56:	2302      	movs	r3, #2
 800bf58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf5e:	2303      	movs	r3, #3
 800bf60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800bf62:	230c      	movs	r3, #12
 800bf64:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800bf66:	1d3b      	adds	r3, r7, #4
 800bf68:	4619      	mov	r1, r3
 800bf6a:	4818      	ldr	r0, [pc, #96]	; (800bfcc <HAL_FMC_MspInit+0x118>)
 800bf6c:	f006 ff14 	bl	8012d98 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 800bf70:	f24c 7303 	movw	r3, #50947	; 0xc703
 800bf74:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf76:	2302      	movs	r3, #2
 800bf78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf7e:	2303      	movs	r3, #3
 800bf80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800bf82:	230c      	movs	r3, #12
 800bf84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800bf86:	1d3b      	adds	r3, r7, #4
 800bf88:	4619      	mov	r1, r3
 800bf8a:	4811      	ldr	r0, [pc, #68]	; (800bfd0 <HAL_FMC_MspInit+0x11c>)
 800bf8c:	f006 ff04 	bl	8012d98 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800bf90:	2360      	movs	r3, #96	; 0x60
 800bf92:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf94:	2302      	movs	r3, #2
 800bf96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf98:	2300      	movs	r3, #0
 800bf9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf9c:	2303      	movs	r3, #3
 800bf9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800bfa0:	230c      	movs	r3, #12
 800bfa2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bfa4:	1d3b      	adds	r3, r7, #4
 800bfa6:	4619      	mov	r1, r3
 800bfa8:	480a      	ldr	r0, [pc, #40]	; (800bfd4 <HAL_FMC_MspInit+0x120>)
 800bfaa:	f006 fef5 	bl	8012d98 <HAL_GPIO_Init>
 800bfae:	e000      	b.n	800bfb2 <HAL_FMC_MspInit+0xfe>
    return;
 800bfb0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800bfb2:	3718      	adds	r7, #24
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}
 800bfb8:	20001a34 	.word	0x20001a34
 800bfbc:	40023800 	.word	0x40023800
 800bfc0:	40021400 	.word	0x40021400
 800bfc4:	40020800 	.word	0x40020800
 800bfc8:	40021800 	.word	0x40021800
 800bfcc:	40021000 	.word	0x40021000
 800bfd0:	40020c00 	.word	0x40020c00
 800bfd4:	40020400 	.word	0x40020400

0800bfd8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b082      	sub	sp, #8
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800bfe0:	f7ff ff68 	bl	800beb4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800bfe4:	bf00      	nop
 800bfe6:	3708      	adds	r7, #8
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}

0800bfec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b086      	sub	sp, #24
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bffc:	d145      	bne.n	800c08a <HAL_TIM_Base_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800bffe:	2300      	movs	r3, #0
 800c000:	617b      	str	r3, [r7, #20]
 800c002:	4b8b      	ldr	r3, [pc, #556]	; (800c230 <HAL_TIM_Base_MspInit+0x244>)
 800c004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c006:	4a8a      	ldr	r2, [pc, #552]	; (800c230 <HAL_TIM_Base_MspInit+0x244>)
 800c008:	f043 0301 	orr.w	r3, r3, #1
 800c00c:	6413      	str	r3, [r2, #64]	; 0x40
 800c00e:	4b88      	ldr	r3, [pc, #544]	; (800c230 <HAL_TIM_Base_MspInit+0x244>)
 800c010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c012:	f003 0301 	and.w	r3, r3, #1
 800c016:	617b      	str	r3, [r7, #20]
 800c018:	697b      	ldr	r3, [r7, #20]

    /* TIM2 DMA Init */
    /* TIM2_UP_CH4 Init */
    hdma_tim2_up_ch4.Instance = DMA1_Stream7;
 800c01a:	4b86      	ldr	r3, [pc, #536]	; (800c234 <HAL_TIM_Base_MspInit+0x248>)
 800c01c:	4a86      	ldr	r2, [pc, #536]	; (800c238 <HAL_TIM_Base_MspInit+0x24c>)
 800c01e:	601a      	str	r2, [r3, #0]
    hdma_tim2_up_ch4.Init.Channel = DMA_CHANNEL_3;
 800c020:	4b84      	ldr	r3, [pc, #528]	; (800c234 <HAL_TIM_Base_MspInit+0x248>)
 800c022:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800c026:	605a      	str	r2, [r3, #4]
    hdma_tim2_up_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c028:	4b82      	ldr	r3, [pc, #520]	; (800c234 <HAL_TIM_Base_MspInit+0x248>)
 800c02a:	2240      	movs	r2, #64	; 0x40
 800c02c:	609a      	str	r2, [r3, #8]
    hdma_tim2_up_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800c02e:	4b81      	ldr	r3, [pc, #516]	; (800c234 <HAL_TIM_Base_MspInit+0x248>)
 800c030:	2200      	movs	r2, #0
 800c032:	60da      	str	r2, [r3, #12]
    hdma_tim2_up_ch4.Init.MemInc = DMA_MINC_ENABLE;
 800c034:	4b7f      	ldr	r3, [pc, #508]	; (800c234 <HAL_TIM_Base_MspInit+0x248>)
 800c036:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c03a:	611a      	str	r2, [r3, #16]
    hdma_tim2_up_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800c03c:	4b7d      	ldr	r3, [pc, #500]	; (800c234 <HAL_TIM_Base_MspInit+0x248>)
 800c03e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c042:	615a      	str	r2, [r3, #20]
    hdma_tim2_up_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800c044:	4b7b      	ldr	r3, [pc, #492]	; (800c234 <HAL_TIM_Base_MspInit+0x248>)
 800c046:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c04a:	619a      	str	r2, [r3, #24]
    hdma_tim2_up_ch4.Init.Mode = DMA_CIRCULAR;
 800c04c:	4b79      	ldr	r3, [pc, #484]	; (800c234 <HAL_TIM_Base_MspInit+0x248>)
 800c04e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c052:	61da      	str	r2, [r3, #28]
    hdma_tim2_up_ch4.Init.Priority = DMA_PRIORITY_LOW;
 800c054:	4b77      	ldr	r3, [pc, #476]	; (800c234 <HAL_TIM_Base_MspInit+0x248>)
 800c056:	2200      	movs	r2, #0
 800c058:	621a      	str	r2, [r3, #32]
    hdma_tim2_up_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c05a:	4b76      	ldr	r3, [pc, #472]	; (800c234 <HAL_TIM_Base_MspInit+0x248>)
 800c05c:	2200      	movs	r2, #0
 800c05e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_up_ch4) != HAL_OK)
 800c060:	4874      	ldr	r0, [pc, #464]	; (800c234 <HAL_TIM_Base_MspInit+0x248>)
 800c062:	f006 f8bd 	bl	80121e0 <HAL_DMA_Init>
 800c066:	4603      	mov	r3, r0
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d001      	beq.n	800c070 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 800c06c:	f7ff fac4 	bl	800b5f8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up_ch4);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	4a70      	ldr	r2, [pc, #448]	; (800c234 <HAL_TIM_Base_MspInit+0x248>)
 800c074:	621a      	str	r2, [r3, #32]
 800c076:	4a6f      	ldr	r2, [pc, #444]	; (800c234 <HAL_TIM_Base_MspInit+0x248>)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_up_ch4);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	4a6d      	ldr	r2, [pc, #436]	; (800c234 <HAL_TIM_Base_MspInit+0x248>)
 800c080:	631a      	str	r2, [r3, #48]	; 0x30
 800c082:	4a6c      	ldr	r2, [pc, #432]	; (800c234 <HAL_TIM_Base_MspInit+0x248>)
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800c088:	e0cd      	b.n	800c226 <HAL_TIM_Base_MspInit+0x23a>
  else if(htim_base->Instance==TIM3)
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	4a6b      	ldr	r2, [pc, #428]	; (800c23c <HAL_TIM_Base_MspInit+0x250>)
 800c090:	4293      	cmp	r3, r2
 800c092:	d13f      	bne.n	800c114 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800c094:	2300      	movs	r3, #0
 800c096:	613b      	str	r3, [r7, #16]
 800c098:	4b65      	ldr	r3, [pc, #404]	; (800c230 <HAL_TIM_Base_MspInit+0x244>)
 800c09a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c09c:	4a64      	ldr	r2, [pc, #400]	; (800c230 <HAL_TIM_Base_MspInit+0x244>)
 800c09e:	f043 0302 	orr.w	r3, r3, #2
 800c0a2:	6413      	str	r3, [r2, #64]	; 0x40
 800c0a4:	4b62      	ldr	r3, [pc, #392]	; (800c230 <HAL_TIM_Base_MspInit+0x244>)
 800c0a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0a8:	f003 0302 	and.w	r3, r3, #2
 800c0ac:	613b      	str	r3, [r7, #16]
 800c0ae:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream5;
 800c0b0:	4b63      	ldr	r3, [pc, #396]	; (800c240 <HAL_TIM_Base_MspInit+0x254>)
 800c0b2:	4a64      	ldr	r2, [pc, #400]	; (800c244 <HAL_TIM_Base_MspInit+0x258>)
 800c0b4:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Channel = DMA_CHANNEL_5;
 800c0b6:	4b62      	ldr	r3, [pc, #392]	; (800c240 <HAL_TIM_Base_MspInit+0x254>)
 800c0b8:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800c0bc:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c0be:	4b60      	ldr	r3, [pc, #384]	; (800c240 <HAL_TIM_Base_MspInit+0x254>)
 800c0c0:	2240      	movs	r2, #64	; 0x40
 800c0c2:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800c0c4:	4b5e      	ldr	r3, [pc, #376]	; (800c240 <HAL_TIM_Base_MspInit+0x254>)
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800c0ca:	4b5d      	ldr	r3, [pc, #372]	; (800c240 <HAL_TIM_Base_MspInit+0x254>)
 800c0cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c0d0:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c0d2:	4b5b      	ldr	r3, [pc, #364]	; (800c240 <HAL_TIM_Base_MspInit+0x254>)
 800c0d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c0d8:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800c0da:	4b59      	ldr	r3, [pc, #356]	; (800c240 <HAL_TIM_Base_MspInit+0x254>)
 800c0dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c0e0:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR;
 800c0e2:	4b57      	ldr	r3, [pc, #348]	; (800c240 <HAL_TIM_Base_MspInit+0x254>)
 800c0e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c0e8:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800c0ea:	4b55      	ldr	r3, [pc, #340]	; (800c240 <HAL_TIM_Base_MspInit+0x254>)
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c0f0:	4b53      	ldr	r3, [pc, #332]	; (800c240 <HAL_TIM_Base_MspInit+0x254>)
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 800c0f6:	4852      	ldr	r0, [pc, #328]	; (800c240 <HAL_TIM_Base_MspInit+0x254>)
 800c0f8:	f006 f872 	bl	80121e0 <HAL_DMA_Init>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d001      	beq.n	800c106 <HAL_TIM_Base_MspInit+0x11a>
      Error_Handler();
 800c102:	f7ff fa79 	bl	800b5f8 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	4a4d      	ldr	r2, [pc, #308]	; (800c240 <HAL_TIM_Base_MspInit+0x254>)
 800c10a:	629a      	str	r2, [r3, #40]	; 0x28
 800c10c:	4a4c      	ldr	r2, [pc, #304]	; (800c240 <HAL_TIM_Base_MspInit+0x254>)
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6393      	str	r3, [r2, #56]	; 0x38
}
 800c112:	e088      	b.n	800c226 <HAL_TIM_Base_MspInit+0x23a>
  else if(htim_base->Instance==TIM4)
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	4a4b      	ldr	r2, [pc, #300]	; (800c248 <HAL_TIM_Base_MspInit+0x25c>)
 800c11a:	4293      	cmp	r3, r2
 800c11c:	d13f      	bne.n	800c19e <HAL_TIM_Base_MspInit+0x1b2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800c11e:	2300      	movs	r3, #0
 800c120:	60fb      	str	r3, [r7, #12]
 800c122:	4b43      	ldr	r3, [pc, #268]	; (800c230 <HAL_TIM_Base_MspInit+0x244>)
 800c124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c126:	4a42      	ldr	r2, [pc, #264]	; (800c230 <HAL_TIM_Base_MspInit+0x244>)
 800c128:	f043 0304 	orr.w	r3, r3, #4
 800c12c:	6413      	str	r3, [r2, #64]	; 0x40
 800c12e:	4b40      	ldr	r3, [pc, #256]	; (800c230 <HAL_TIM_Base_MspInit+0x244>)
 800c130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c132:	f003 0304 	and.w	r3, r3, #4
 800c136:	60fb      	str	r3, [r7, #12]
 800c138:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 800c13a:	4b44      	ldr	r3, [pc, #272]	; (800c24c <HAL_TIM_Base_MspInit+0x260>)
 800c13c:	4a44      	ldr	r2, [pc, #272]	; (800c250 <HAL_TIM_Base_MspInit+0x264>)
 800c13e:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 800c140:	4b42      	ldr	r3, [pc, #264]	; (800c24c <HAL_TIM_Base_MspInit+0x260>)
 800c142:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800c146:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c148:	4b40      	ldr	r3, [pc, #256]	; (800c24c <HAL_TIM_Base_MspInit+0x260>)
 800c14a:	2240      	movs	r2, #64	; 0x40
 800c14c:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800c14e:	4b3f      	ldr	r3, [pc, #252]	; (800c24c <HAL_TIM_Base_MspInit+0x260>)
 800c150:	2200      	movs	r2, #0
 800c152:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800c154:	4b3d      	ldr	r3, [pc, #244]	; (800c24c <HAL_TIM_Base_MspInit+0x260>)
 800c156:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c15a:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c15c:	4b3b      	ldr	r3, [pc, #236]	; (800c24c <HAL_TIM_Base_MspInit+0x260>)
 800c15e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c162:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800c164:	4b39      	ldr	r3, [pc, #228]	; (800c24c <HAL_TIM_Base_MspInit+0x260>)
 800c166:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c16a:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_CIRCULAR;
 800c16c:	4b37      	ldr	r3, [pc, #220]	; (800c24c <HAL_TIM_Base_MspInit+0x260>)
 800c16e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c172:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800c174:	4b35      	ldr	r3, [pc, #212]	; (800c24c <HAL_TIM_Base_MspInit+0x260>)
 800c176:	2200      	movs	r2, #0
 800c178:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c17a:	4b34      	ldr	r3, [pc, #208]	; (800c24c <HAL_TIM_Base_MspInit+0x260>)
 800c17c:	2200      	movs	r2, #0
 800c17e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 800c180:	4832      	ldr	r0, [pc, #200]	; (800c24c <HAL_TIM_Base_MspInit+0x260>)
 800c182:	f006 f82d 	bl	80121e0 <HAL_DMA_Init>
 800c186:	4603      	mov	r3, r0
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d001      	beq.n	800c190 <HAL_TIM_Base_MspInit+0x1a4>
      Error_Handler();
 800c18c:	f7ff fa34 	bl	800b5f8 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	4a2e      	ldr	r2, [pc, #184]	; (800c24c <HAL_TIM_Base_MspInit+0x260>)
 800c194:	625a      	str	r2, [r3, #36]	; 0x24
 800c196:	4a2d      	ldr	r2, [pc, #180]	; (800c24c <HAL_TIM_Base_MspInit+0x260>)
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800c19c:	e043      	b.n	800c226 <HAL_TIM_Base_MspInit+0x23a>
  else if(htim_base->Instance==TIM5)
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	4a2c      	ldr	r2, [pc, #176]	; (800c254 <HAL_TIM_Base_MspInit+0x268>)
 800c1a4:	4293      	cmp	r3, r2
 800c1a6:	d13e      	bne.n	800c226 <HAL_TIM_Base_MspInit+0x23a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	60bb      	str	r3, [r7, #8]
 800c1ac:	4b20      	ldr	r3, [pc, #128]	; (800c230 <HAL_TIM_Base_MspInit+0x244>)
 800c1ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1b0:	4a1f      	ldr	r2, [pc, #124]	; (800c230 <HAL_TIM_Base_MspInit+0x244>)
 800c1b2:	f043 0308 	orr.w	r3, r3, #8
 800c1b6:	6413      	str	r3, [r2, #64]	; 0x40
 800c1b8:	4b1d      	ldr	r3, [pc, #116]	; (800c230 <HAL_TIM_Base_MspInit+0x244>)
 800c1ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1bc:	f003 0308 	and.w	r3, r3, #8
 800c1c0:	60bb      	str	r3, [r7, #8]
 800c1c2:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch1.Instance = DMA1_Stream2;
 800c1c4:	4b24      	ldr	r3, [pc, #144]	; (800c258 <HAL_TIM_Base_MspInit+0x26c>)
 800c1c6:	4a25      	ldr	r2, [pc, #148]	; (800c25c <HAL_TIM_Base_MspInit+0x270>)
 800c1c8:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Channel = DMA_CHANNEL_6;
 800c1ca:	4b23      	ldr	r3, [pc, #140]	; (800c258 <HAL_TIM_Base_MspInit+0x26c>)
 800c1cc:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800c1d0:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c1d2:	4b21      	ldr	r3, [pc, #132]	; (800c258 <HAL_TIM_Base_MspInit+0x26c>)
 800c1d4:	2240      	movs	r2, #64	; 0x40
 800c1d6:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800c1d8:	4b1f      	ldr	r3, [pc, #124]	; (800c258 <HAL_TIM_Base_MspInit+0x26c>)
 800c1da:	2200      	movs	r2, #0
 800c1dc:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800c1de:	4b1e      	ldr	r3, [pc, #120]	; (800c258 <HAL_TIM_Base_MspInit+0x26c>)
 800c1e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c1e4:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800c1e6:	4b1c      	ldr	r3, [pc, #112]	; (800c258 <HAL_TIM_Base_MspInit+0x26c>)
 800c1e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c1ec:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800c1ee:	4b1a      	ldr	r3, [pc, #104]	; (800c258 <HAL_TIM_Base_MspInit+0x26c>)
 800c1f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c1f4:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Mode = DMA_CIRCULAR;
 800c1f6:	4b18      	ldr	r3, [pc, #96]	; (800c258 <HAL_TIM_Base_MspInit+0x26c>)
 800c1f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c1fc:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800c1fe:	4b16      	ldr	r3, [pc, #88]	; (800c258 <HAL_TIM_Base_MspInit+0x26c>)
 800c200:	2200      	movs	r2, #0
 800c202:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c204:	4b14      	ldr	r3, [pc, #80]	; (800c258 <HAL_TIM_Base_MspInit+0x26c>)
 800c206:	2200      	movs	r2, #0
 800c208:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 800c20a:	4813      	ldr	r0, [pc, #76]	; (800c258 <HAL_TIM_Base_MspInit+0x26c>)
 800c20c:	f005 ffe8 	bl	80121e0 <HAL_DMA_Init>
 800c210:	4603      	mov	r3, r0
 800c212:	2b00      	cmp	r3, #0
 800c214:	d001      	beq.n	800c21a <HAL_TIM_Base_MspInit+0x22e>
      Error_Handler();
 800c216:	f7ff f9ef 	bl	800b5f8 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	4a0e      	ldr	r2, [pc, #56]	; (800c258 <HAL_TIM_Base_MspInit+0x26c>)
 800c21e:	625a      	str	r2, [r3, #36]	; 0x24
 800c220:	4a0d      	ldr	r2, [pc, #52]	; (800c258 <HAL_TIM_Base_MspInit+0x26c>)
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6393      	str	r3, [r2, #56]	; 0x38
}
 800c226:	bf00      	nop
 800c228:	3718      	adds	r7, #24
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}
 800c22e:	bf00      	nop
 800c230:	40023800 	.word	0x40023800
 800c234:	20012b80 	.word	0x20012b80
 800c238:	400260b8 	.word	0x400260b8
 800c23c:	40000400 	.word	0x40000400
 800c240:	20012ebc 	.word	0x20012ebc
 800c244:	40026088 	.word	0x40026088
 800c248:	40000800 	.word	0x40000800
 800c24c:	20012fa0 	.word	0x20012fa0
 800c250:	40026010 	.word	0x40026010
 800c254:	40000c00 	.word	0x40000c00
 800c258:	20012e5c 	.word	0x20012e5c
 800c25c:	40026040 	.word	0x40026040

0800c260 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b08c      	sub	sp, #48	; 0x30
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c268:	f107 031c 	add.w	r3, r7, #28
 800c26c:	2200      	movs	r2, #0
 800c26e:	601a      	str	r2, [r3, #0]
 800c270:	605a      	str	r2, [r3, #4]
 800c272:	609a      	str	r2, [r3, #8]
 800c274:	60da      	str	r2, [r3, #12]
 800c276:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c280:	d11e      	bne.n	800c2c0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c282:	2300      	movs	r3, #0
 800c284:	61bb      	str	r3, [r7, #24]
 800c286:	4b46      	ldr	r3, [pc, #280]	; (800c3a0 <HAL_TIM_MspPostInit+0x140>)
 800c288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c28a:	4a45      	ldr	r2, [pc, #276]	; (800c3a0 <HAL_TIM_MspPostInit+0x140>)
 800c28c:	f043 0301 	orr.w	r3, r3, #1
 800c290:	6313      	str	r3, [r2, #48]	; 0x30
 800c292:	4b43      	ldr	r3, [pc, #268]	; (800c3a0 <HAL_TIM_MspPostInit+0x140>)
 800c294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c296:	f003 0301 	and.w	r3, r3, #1
 800c29a:	61bb      	str	r3, [r7, #24]
 800c29c:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = xAxisPWM_Pin;
 800c29e:	2308      	movs	r3, #8
 800c2a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c2a2:	2302      	movs	r3, #2
 800c2a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(xAxisPWM_GPIO_Port, &GPIO_InitStruct);
 800c2b2:	f107 031c 	add.w	r3, r7, #28
 800c2b6:	4619      	mov	r1, r3
 800c2b8:	483a      	ldr	r0, [pc, #232]	; (800c3a4 <HAL_TIM_MspPostInit+0x144>)
 800c2ba:	f006 fd6d 	bl	8012d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800c2be:	e06b      	b.n	800c398 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM3)
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	4a38      	ldr	r2, [pc, #224]	; (800c3a8 <HAL_TIM_MspPostInit+0x148>)
 800c2c6:	4293      	cmp	r3, r2
 800c2c8:	d11e      	bne.n	800c308 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	617b      	str	r3, [r7, #20]
 800c2ce:	4b34      	ldr	r3, [pc, #208]	; (800c3a0 <HAL_TIM_MspPostInit+0x140>)
 800c2d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2d2:	4a33      	ldr	r2, [pc, #204]	; (800c3a0 <HAL_TIM_MspPostInit+0x140>)
 800c2d4:	f043 0301 	orr.w	r3, r3, #1
 800c2d8:	6313      	str	r3, [r2, #48]	; 0x30
 800c2da:	4b31      	ldr	r3, [pc, #196]	; (800c3a0 <HAL_TIM_MspPostInit+0x140>)
 800c2dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2de:	f003 0301 	and.w	r3, r3, #1
 800c2e2:	617b      	str	r3, [r7, #20]
 800c2e4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = yAxisPWM_L_Pin;
 800c2e6:	2380      	movs	r3, #128	; 0x80
 800c2e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c2ea:	2302      	movs	r3, #2
 800c2ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800c2f6:	2302      	movs	r3, #2
 800c2f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(yAxisPWM_L_GPIO_Port, &GPIO_InitStruct);
 800c2fa:	f107 031c 	add.w	r3, r7, #28
 800c2fe:	4619      	mov	r1, r3
 800c300:	4828      	ldr	r0, [pc, #160]	; (800c3a4 <HAL_TIM_MspPostInit+0x144>)
 800c302:	f006 fd49 	bl	8012d98 <HAL_GPIO_Init>
}
 800c306:	e047      	b.n	800c398 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM4)
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	4a27      	ldr	r2, [pc, #156]	; (800c3ac <HAL_TIM_MspPostInit+0x14c>)
 800c30e:	4293      	cmp	r3, r2
 800c310:	d11f      	bne.n	800c352 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800c312:	2300      	movs	r3, #0
 800c314:	613b      	str	r3, [r7, #16]
 800c316:	4b22      	ldr	r3, [pc, #136]	; (800c3a0 <HAL_TIM_MspPostInit+0x140>)
 800c318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c31a:	4a21      	ldr	r2, [pc, #132]	; (800c3a0 <HAL_TIM_MspPostInit+0x140>)
 800c31c:	f043 0308 	orr.w	r3, r3, #8
 800c320:	6313      	str	r3, [r2, #48]	; 0x30
 800c322:	4b1f      	ldr	r3, [pc, #124]	; (800c3a0 <HAL_TIM_MspPostInit+0x140>)
 800c324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c326:	f003 0308 	and.w	r3, r3, #8
 800c32a:	613b      	str	r3, [r7, #16]
 800c32c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = yAxisPWM_R_Pin;
 800c32e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c334:	2302      	movs	r3, #2
 800c336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c338:	2300      	movs	r3, #0
 800c33a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c33c:	2300      	movs	r3, #0
 800c33e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800c340:	2302      	movs	r3, #2
 800c342:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(yAxisPWM_R_GPIO_Port, &GPIO_InitStruct);
 800c344:	f107 031c 	add.w	r3, r7, #28
 800c348:	4619      	mov	r1, r3
 800c34a:	4819      	ldr	r0, [pc, #100]	; (800c3b0 <HAL_TIM_MspPostInit+0x150>)
 800c34c:	f006 fd24 	bl	8012d98 <HAL_GPIO_Init>
}
 800c350:	e022      	b.n	800c398 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM5)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	4a17      	ldr	r2, [pc, #92]	; (800c3b4 <HAL_TIM_MspPostInit+0x154>)
 800c358:	4293      	cmp	r3, r2
 800c35a:	d11d      	bne.n	800c398 <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c35c:	2300      	movs	r3, #0
 800c35e:	60fb      	str	r3, [r7, #12]
 800c360:	4b0f      	ldr	r3, [pc, #60]	; (800c3a0 <HAL_TIM_MspPostInit+0x140>)
 800c362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c364:	4a0e      	ldr	r2, [pc, #56]	; (800c3a0 <HAL_TIM_MspPostInit+0x140>)
 800c366:	f043 0301 	orr.w	r3, r3, #1
 800c36a:	6313      	str	r3, [r2, #48]	; 0x30
 800c36c:	4b0c      	ldr	r3, [pc, #48]	; (800c3a0 <HAL_TIM_MspPostInit+0x140>)
 800c36e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c370:	f003 0301 	and.w	r3, r3, #1
 800c374:	60fb      	str	r3, [r7, #12]
 800c376:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = manipulatorPWM_Pin;
 800c378:	2301      	movs	r3, #1
 800c37a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c37c:	2302      	movs	r3, #2
 800c37e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c380:	2300      	movs	r3, #0
 800c382:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c384:	2300      	movs	r3, #0
 800c386:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800c388:	2302      	movs	r3, #2
 800c38a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(manipulatorPWM_GPIO_Port, &GPIO_InitStruct);
 800c38c:	f107 031c 	add.w	r3, r7, #28
 800c390:	4619      	mov	r1, r3
 800c392:	4804      	ldr	r0, [pc, #16]	; (800c3a4 <HAL_TIM_MspPostInit+0x144>)
 800c394:	f006 fd00 	bl	8012d98 <HAL_GPIO_Init>
}
 800c398:	bf00      	nop
 800c39a:	3730      	adds	r7, #48	; 0x30
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}
 800c3a0:	40023800 	.word	0x40023800
 800c3a4:	40020000 	.word	0x40020000
 800c3a8:	40000400 	.word	0x40000400
 800c3ac:	40000800 	.word	0x40000800
 800c3b0:	40020c00 	.word	0x40020c00
 800c3b4:	40000c00 	.word	0x40000c00

0800c3b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b08c      	sub	sp, #48	; 0x30
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	6879      	ldr	r1, [r7, #4]
 800c3cc:	2036      	movs	r0, #54	; 0x36
 800c3ce:	f005 feb3 	bl	8012138 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800c3d2:	2036      	movs	r0, #54	; 0x36
 800c3d4:	f005 fecc 	bl	8012170 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800c3d8:	2300      	movs	r3, #0
 800c3da:	60fb      	str	r3, [r7, #12]
 800c3dc:	4b1f      	ldr	r3, [pc, #124]	; (800c45c <HAL_InitTick+0xa4>)
 800c3de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3e0:	4a1e      	ldr	r2, [pc, #120]	; (800c45c <HAL_InitTick+0xa4>)
 800c3e2:	f043 0310 	orr.w	r3, r3, #16
 800c3e6:	6413      	str	r3, [r2, #64]	; 0x40
 800c3e8:	4b1c      	ldr	r3, [pc, #112]	; (800c45c <HAL_InitTick+0xa4>)
 800c3ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3ec:	f003 0310 	and.w	r3, r3, #16
 800c3f0:	60fb      	str	r3, [r7, #12]
 800c3f2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800c3f4:	f107 0210 	add.w	r2, r7, #16
 800c3f8:	f107 0314 	add.w	r3, r7, #20
 800c3fc:	4611      	mov	r1, r2
 800c3fe:	4618      	mov	r0, r3
 800c400:	f008 fe9c 	bl	801513c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800c404:	f008 fe86 	bl	8015114 <HAL_RCC_GetPCLK1Freq>
 800c408:	4603      	mov	r3, r0
 800c40a:	005b      	lsls	r3, r3, #1
 800c40c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800c40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c410:	4a13      	ldr	r2, [pc, #76]	; (800c460 <HAL_InitTick+0xa8>)
 800c412:	fba2 2303 	umull	r2, r3, r2, r3
 800c416:	0c9b      	lsrs	r3, r3, #18
 800c418:	3b01      	subs	r3, #1
 800c41a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800c41c:	4b11      	ldr	r3, [pc, #68]	; (800c464 <HAL_InitTick+0xac>)
 800c41e:	4a12      	ldr	r2, [pc, #72]	; (800c468 <HAL_InitTick+0xb0>)
 800c420:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800c422:	4b10      	ldr	r3, [pc, #64]	; (800c464 <HAL_InitTick+0xac>)
 800c424:	f240 32e7 	movw	r2, #999	; 0x3e7
 800c428:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800c42a:	4a0e      	ldr	r2, [pc, #56]	; (800c464 <HAL_InitTick+0xac>)
 800c42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c42e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800c430:	4b0c      	ldr	r3, [pc, #48]	; (800c464 <HAL_InitTick+0xac>)
 800c432:	2200      	movs	r2, #0
 800c434:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c436:	4b0b      	ldr	r3, [pc, #44]	; (800c464 <HAL_InitTick+0xac>)
 800c438:	2200      	movs	r2, #0
 800c43a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800c43c:	4809      	ldr	r0, [pc, #36]	; (800c464 <HAL_InitTick+0xac>)
 800c43e:	f009 fe41 	bl	80160c4 <HAL_TIM_Base_Init>
 800c442:	4603      	mov	r3, r0
 800c444:	2b00      	cmp	r3, #0
 800c446:	d104      	bne.n	800c452 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800c448:	4806      	ldr	r0, [pc, #24]	; (800c464 <HAL_InitTick+0xac>)
 800c44a:	f009 fe66 	bl	801611a <HAL_TIM_Base_Start_IT>
 800c44e:	4603      	mov	r3, r0
 800c450:	e000      	b.n	800c454 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800c452:	2301      	movs	r3, #1
}
 800c454:	4618      	mov	r0, r3
 800c456:	3730      	adds	r7, #48	; 0x30
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}
 800c45c:	40023800 	.word	0x40023800
 800c460:	431bde83 	.word	0x431bde83
 800c464:	20013034 	.word	0x20013034
 800c468:	40001000 	.word	0x40001000

0800c46c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c46c:	b480      	push	{r7}
 800c46e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800c470:	bf00      	nop
 800c472:	46bd      	mov	sp, r7
 800c474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c478:	4770      	bx	lr

0800c47a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c47a:	b480      	push	{r7}
 800c47c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800c47e:	e7fe      	b.n	800c47e <HardFault_Handler+0x4>

0800c480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800c480:	b480      	push	{r7}
 800c482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800c484:	e7fe      	b.n	800c484 <MemManage_Handler+0x4>

0800c486 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800c486:	b480      	push	{r7}
 800c488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800c48a:	e7fe      	b.n	800c48a <BusFault_Handler+0x4>

0800c48c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800c48c:	b480      	push	{r7}
 800c48e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800c490:	e7fe      	b.n	800c490 <UsageFault_Handler+0x4>

0800c492 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800c492:	b480      	push	{r7}
 800c494:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800c496:	bf00      	nop
 800c498:	46bd      	mov	sp, r7
 800c49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49e:	4770      	bx	lr

0800c4a0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800c4a4:	4802      	ldr	r0, [pc, #8]	; (800c4b0 <TIM6_DAC_IRQHandler+0x10>)
 800c4a6:	f009 ffa3 	bl	80163f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800c4aa:	bf00      	nop
 800c4ac:	bd80      	pop	{r7, pc}
 800c4ae:	bf00      	nop
 800c4b0:	20013034 	.word	0x20013034

0800c4b4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800c4b8:	4802      	ldr	r0, [pc, #8]	; (800c4c4 <LTDC_IRQHandler+0x10>)
 800c4ba:	f007 ff2b 	bl	8014314 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800c4be:	bf00      	nop
 800c4c0:	bd80      	pop	{r7, pc}
 800c4c2:	bf00      	nop
 800c4c4:	20012db4 	.word	0x20012db4

0800c4c8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800c4cc:	4802      	ldr	r0, [pc, #8]	; (800c4d8 <DMA2D_IRQHandler+0x10>)
 800c4ce:	f006 fa24 	bl	801291a <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800c4d2:	bf00      	nop
 800c4d4:	bd80      	pop	{r7, pc}
 800c4d6:	bf00      	nop
 800c4d8:	20012f20 	.word	0x20012f20

0800c4dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800c4dc:	b480      	push	{r7}
 800c4de:	af00      	add	r7, sp, #0
	return 1;
 800c4e0:	2301      	movs	r3, #1
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ea:	4770      	bx	lr

0800c4ec <_kill>:

int _kill(int pid, int sig)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b082      	sub	sp, #8
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
 800c4f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800c4f6:	f021 fee9 	bl	802e2cc <__errno>
 800c4fa:	4602      	mov	r2, r0
 800c4fc:	2316      	movs	r3, #22
 800c4fe:	6013      	str	r3, [r2, #0]
	return -1;
 800c500:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c504:	4618      	mov	r0, r3
 800c506:	3708      	adds	r7, #8
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}

0800c50c <_exit>:

void _exit (int status)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b082      	sub	sp, #8
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800c514:	f04f 31ff 	mov.w	r1, #4294967295
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f7ff ffe7 	bl	800c4ec <_kill>
	while (1) {}		/* Make sure we hang here */
 800c51e:	e7fe      	b.n	800c51e <_exit+0x12>

0800c520 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b086      	sub	sp, #24
 800c524:	af00      	add	r7, sp, #0
 800c526:	60f8      	str	r0, [r7, #12]
 800c528:	60b9      	str	r1, [r7, #8]
 800c52a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c52c:	2300      	movs	r3, #0
 800c52e:	617b      	str	r3, [r7, #20]
 800c530:	e00a      	b.n	800c548 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800c532:	f3af 8000 	nop.w
 800c536:	4601      	mov	r1, r0
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	1c5a      	adds	r2, r3, #1
 800c53c:	60ba      	str	r2, [r7, #8]
 800c53e:	b2ca      	uxtb	r2, r1
 800c540:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c542:	697b      	ldr	r3, [r7, #20]
 800c544:	3301      	adds	r3, #1
 800c546:	617b      	str	r3, [r7, #20]
 800c548:	697a      	ldr	r2, [r7, #20]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	429a      	cmp	r2, r3
 800c54e:	dbf0      	blt.n	800c532 <_read+0x12>
	}

return len;
 800c550:	687b      	ldr	r3, [r7, #4]
}
 800c552:	4618      	mov	r0, r3
 800c554:	3718      	adds	r7, #24
 800c556:	46bd      	mov	sp, r7
 800c558:	bd80      	pop	{r7, pc}

0800c55a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800c55a:	b580      	push	{r7, lr}
 800c55c:	b086      	sub	sp, #24
 800c55e:	af00      	add	r7, sp, #0
 800c560:	60f8      	str	r0, [r7, #12]
 800c562:	60b9      	str	r1, [r7, #8]
 800c564:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c566:	2300      	movs	r3, #0
 800c568:	617b      	str	r3, [r7, #20]
 800c56a:	e009      	b.n	800c580 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	1c5a      	adds	r2, r3, #1
 800c570:	60ba      	str	r2, [r7, #8]
 800c572:	781b      	ldrb	r3, [r3, #0]
 800c574:	4618      	mov	r0, r3
 800c576:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	3301      	adds	r3, #1
 800c57e:	617b      	str	r3, [r7, #20]
 800c580:	697a      	ldr	r2, [r7, #20]
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	429a      	cmp	r2, r3
 800c586:	dbf1      	blt.n	800c56c <_write+0x12>
	}
	return len;
 800c588:	687b      	ldr	r3, [r7, #4]
}
 800c58a:	4618      	mov	r0, r3
 800c58c:	3718      	adds	r7, #24
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd80      	pop	{r7, pc}

0800c592 <_close>:

int _close(int file)
{
 800c592:	b480      	push	{r7}
 800c594:	b083      	sub	sp, #12
 800c596:	af00      	add	r7, sp, #0
 800c598:	6078      	str	r0, [r7, #4]
	return -1;
 800c59a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	370c      	adds	r7, #12
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a8:	4770      	bx	lr

0800c5aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 800c5aa:	b480      	push	{r7}
 800c5ac:	b083      	sub	sp, #12
 800c5ae:	af00      	add	r7, sp, #0
 800c5b0:	6078      	str	r0, [r7, #4]
 800c5b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c5ba:	605a      	str	r2, [r3, #4]
	return 0;
 800c5bc:	2300      	movs	r3, #0
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	370c      	adds	r7, #12
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c8:	4770      	bx	lr

0800c5ca <_isatty>:

int _isatty(int file)
{
 800c5ca:	b480      	push	{r7}
 800c5cc:	b083      	sub	sp, #12
 800c5ce:	af00      	add	r7, sp, #0
 800c5d0:	6078      	str	r0, [r7, #4]
	return 1;
 800c5d2:	2301      	movs	r3, #1
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	370c      	adds	r7, #12
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5de:	4770      	bx	lr

0800c5e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	b085      	sub	sp, #20
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	60f8      	str	r0, [r7, #12]
 800c5e8:	60b9      	str	r1, [r7, #8]
 800c5ea:	607a      	str	r2, [r7, #4]
	return 0;
 800c5ec:	2300      	movs	r3, #0
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3714      	adds	r7, #20
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f8:	4770      	bx	lr
	...

0800c5fc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b084      	sub	sp, #16
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800c604:	4b11      	ldr	r3, [pc, #68]	; (800c64c <_sbrk+0x50>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d102      	bne.n	800c612 <_sbrk+0x16>
		heap_end = &end;
 800c60c:	4b0f      	ldr	r3, [pc, #60]	; (800c64c <_sbrk+0x50>)
 800c60e:	4a10      	ldr	r2, [pc, #64]	; (800c650 <_sbrk+0x54>)
 800c610:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800c612:	4b0e      	ldr	r3, [pc, #56]	; (800c64c <_sbrk+0x50>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800c618:	4b0c      	ldr	r3, [pc, #48]	; (800c64c <_sbrk+0x50>)
 800c61a:	681a      	ldr	r2, [r3, #0]
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	4413      	add	r3, r2
 800c620:	466a      	mov	r2, sp
 800c622:	4293      	cmp	r3, r2
 800c624:	d907      	bls.n	800c636 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800c626:	f021 fe51 	bl	802e2cc <__errno>
 800c62a:	4602      	mov	r2, r0
 800c62c:	230c      	movs	r3, #12
 800c62e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800c630:	f04f 33ff 	mov.w	r3, #4294967295
 800c634:	e006      	b.n	800c644 <_sbrk+0x48>
	}

	heap_end += incr;
 800c636:	4b05      	ldr	r3, [pc, #20]	; (800c64c <_sbrk+0x50>)
 800c638:	681a      	ldr	r2, [r3, #0]
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	4413      	add	r3, r2
 800c63e:	4a03      	ldr	r2, [pc, #12]	; (800c64c <_sbrk+0x50>)
 800c640:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800c642:	68fb      	ldr	r3, [r7, #12]
}
 800c644:	4618      	mov	r0, r3
 800c646:	3710      	adds	r7, #16
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}
 800c64c:	20001a38 	.word	0x20001a38
 800c650:	200130c0 	.word	0x200130c0

0800c654 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b082      	sub	sp, #8
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
 800c65c:	460b      	mov	r3, r1
 800c65e:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800c660:	887b      	ldrh	r3, [r7, #2]
 800c662:	2b01      	cmp	r3, #1
 800c664:	d008      	beq.n	800c678 <_ZN23ApplicationFontProvider7getFontEt+0x24>
 800c666:	2b02      	cmp	r3, #2
 800c668:	d00b      	beq.n	800c682 <_ZN23ApplicationFontProvider7getFontEt+0x2e>
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d10e      	bne.n	800c68c <_ZN23ApplicationFontProvider7getFontEt+0x38>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800c66e:	f002 fabf 	bl	800ebf0 <_ZN17TypedTextDatabase8getFontsEv>
 800c672:	4603      	mov	r3, r0
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	e00a      	b.n	800c68e <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800c678:	f002 faba 	bl	800ebf0 <_ZN17TypedTextDatabase8getFontsEv>
 800c67c:	4603      	mov	r3, r0
 800c67e:	685b      	ldr	r3, [r3, #4]
 800c680:	e005      	b.n	800c68e <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800c682:	f002 fab5 	bl	800ebf0 <_ZN17TypedTextDatabase8getFontsEv>
 800c686:	4603      	mov	r3, r0
 800c688:	689b      	ldr	r3, [r3, #8]
 800c68a:	e000      	b.n	800c68e <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    default:
        return 0;
 800c68c:	2300      	movs	r3, #0
    }
}
 800c68e:	4618      	mov	r0, r3
 800c690:	3708      	adds	r7, #8
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}
	...

0800c698 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 800c698:	b480      	push	{r7}
 800c69a:	af00      	add	r7, sp, #0
    return bitmap_database;
 800c69c:	4b02      	ldr	r3, [pc, #8]	; (800c6a8 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 800c69e:	4618      	mov	r0, r3
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a6:	4770      	bx	lr
 800c6a8:	08030fa4 	.word	0x08030fa4

0800c6ac <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 800c6ac:	b480      	push	{r7}
 800c6ae:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 800c6b0:	230f      	movs	r3, #15
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ba:	4770      	bx	lr

0800c6bc <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800c6bc:	b480      	push	{r7}
 800c6be:	b083      	sub	sp, #12
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
    {
 800c6c4:	4a04      	ldr	r2, [pc, #16]	; (800c6d8 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	601a      	str	r2, [r3, #0]
    }
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	370c      	adds	r7, #12
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d6:	4770      	bx	lr
 800c6d8:	080315fc 	.word	0x080315fc

0800c6dc <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b082      	sub	sp, #8
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
    }
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f7ff ffe9 	bl	800c6bc <_ZN8touchgfx4FontD1Ev>
 800c6ea:	2110      	movs	r1, #16
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f020 fced 	bl	802d0cc <_ZdlPvj>
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	3708      	adds	r7, #8
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}

0800c6fc <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800c6fc:	b590      	push	{r4, r7, lr}
 800c6fe:	b087      	sub	sp, #28
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
 800c704:	460b      	mov	r3, r1
 800c706:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800c708:	887b      	ldrh	r3, [r7, #2]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d101      	bne.n	800c712 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800c70e:	2300      	movs	r3, #0
 800c710:	e010      	b.n	800c734 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800c712:	2300      	movs	r3, #0
 800c714:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800c716:	2300      	movs	r3, #0
 800c718:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	3308      	adds	r3, #8
 800c720:	681c      	ldr	r4, [r3, #0]
 800c722:	f107 030f 	add.w	r3, r7, #15
 800c726:	f107 0210 	add.w	r2, r7, #16
 800c72a:	8879      	ldrh	r1, [r7, #2]
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	47a0      	blx	r4
 800c730:	6178      	str	r0, [r7, #20]
        return glyph;
 800c732:	697b      	ldr	r3, [r7, #20]
    }
 800c734:	4618      	mov	r0, r3
 800c736:	371c      	adds	r7, #28
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd90      	pop	{r4, r7, pc}

0800c73c <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800c73c:	b480      	push	{r7}
 800c73e:	b083      	sub	sp, #12
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	895b      	ldrh	r3, [r3, #10]
    }
 800c748:	4618      	mov	r0, r3
 800c74a:	370c      	adds	r7, #12
 800c74c:	46bd      	mov	sp, r7
 800c74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c752:	4770      	bx	lr

0800c754 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800c754:	b480      	push	{r7}
 800c756:	b083      	sub	sp, #12
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	899b      	ldrh	r3, [r3, #12]
    }
 800c760:	4618      	mov	r0, r3
 800c762:	370c      	adds	r7, #12
 800c764:	46bd      	mov	sp, r7
 800c766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76a:	4770      	bx	lr

0800c76c <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 800c76c:	b480      	push	{r7}
 800c76e:	b083      	sub	sp, #12
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	889b      	ldrh	r3, [r3, #4]
    }
 800c778:	4618      	mov	r0, r3
 800c77a:	370c      	adds	r7, #12
 800c77c:	46bd      	mov	sp, r7
 800c77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c782:	4770      	bx	lr

0800c784 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 800c784:	b480      	push	{r7}
 800c786:	b083      	sub	sp, #12
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	889a      	ldrh	r2, [r3, #4]
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	799b      	ldrb	r3, [r3, #6]
 800c794:	b29b      	uxth	r3, r3
 800c796:	4413      	add	r3, r2
 800c798:	b29b      	uxth	r3, r3
    }
 800c79a:	4618      	mov	r0, r3
 800c79c:	370c      	adds	r7, #12
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a4:	4770      	bx	lr

0800c7a6 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800c7a6:	b480      	push	{r7}
 800c7a8:	b083      	sub	sp, #12
 800c7aa:	af00      	add	r7, sp, #0
 800c7ac:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	79db      	ldrb	r3, [r3, #7]
 800c7b2:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800c7b6:	b2db      	uxtb	r3, r3
    }
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	370c      	adds	r7, #12
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c2:	4770      	bx	lr

0800c7c4 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800c7c4:	b480      	push	{r7}
 800c7c6:	b083      	sub	sp, #12
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	79db      	ldrb	r3, [r3, #7]
 800c7d0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800c7d4:	b2db      	uxtb	r3, r3
    }
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	370c      	adds	r7, #12
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e0:	4770      	bx	lr
	...

0800c7e4 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b082      	sub	sp, #8
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
 800c7ec:	4a05      	ldr	r2, [pc, #20]	; (800c804 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	601a      	str	r2, [r3, #0]
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f7ff ff61 	bl	800c6bc <_ZN8touchgfx4FontD1Ev>
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	3708      	adds	r7, #8
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}
 800c804:	080337fc 	.word	0x080337fc

0800c808 <_ZN8touchgfx9ConstFontD0Ev>:
 800c808:	b580      	push	{r7, lr}
 800c80a:	b082      	sub	sp, #8
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
 800c810:	6878      	ldr	r0, [r7, #4]
 800c812:	f7ff ffe7 	bl	800c7e4 <_ZN8touchgfx9ConstFontD1Ev>
 800c816:	2118      	movs	r1, #24
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f020 fc57 	bl	802d0cc <_ZdlPvj>
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	4618      	mov	r0, r3
 800c822:	3708      	adds	r7, #8
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}

0800c828 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800c828:	b580      	push	{r7, lr}
 800c82a:	b082      	sub	sp, #8
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
 800c830:	4a05      	ldr	r2, [pc, #20]	; (800c848 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	601a      	str	r2, [r3, #0]
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	4618      	mov	r0, r3
 800c83a:	f7ff ffd3 	bl	800c7e4 <_ZN8touchgfx9ConstFontD1Ev>
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	4618      	mov	r0, r3
 800c842:	3708      	adds	r7, #8
 800c844:	46bd      	mov	sp, r7
 800c846:	bd80      	pop	{r7, pc}
 800c848:	0803159c 	.word	0x0803159c

0800c84c <_ZN8touchgfx13GeneratedFontD0Ev>:
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b082      	sub	sp, #8
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f7ff ffe7 	bl	800c828 <_ZN8touchgfx13GeneratedFontD1Ev>
 800c85a:	2124      	movs	r1, #36	; 0x24
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f020 fc35 	bl	802d0cc <_ZdlPvj>
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	4618      	mov	r0, r3
 800c866:	3708      	adds	r7, #8
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}

0800c86c <_ZN8touchgfx9TypedTextD1Ev>:
    virtual ~TypedText()
 800c86c:	b480      	push	{r7}
 800c86e:	b083      	sub	sp, #12
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
    {
 800c874:	4a04      	ldr	r2, [pc, #16]	; (800c888 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	601a      	str	r2, [r3, #0]
    }
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	4618      	mov	r0, r3
 800c87e:	370c      	adds	r7, #12
 800c880:	46bd      	mov	sp, r7
 800c882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c886:	4770      	bx	lr
 800c888:	080310d8 	.word	0x080310d8

0800c88c <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b082      	sub	sp, #8
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
    }
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f7ff ffe9 	bl	800c86c <_ZN8touchgfx9TypedTextD1Ev>
 800c89a:	2108      	movs	r1, #8
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	f020 fc15 	bl	802d0cc <_ZdlPvj>
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	3708      	adds	r7, #8
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}

0800c8ac <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800c8ac:	b480      	push	{r7}
 800c8ae:	b083      	sub	sp, #12
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
 800c8b4:	6039      	str	r1, [r7, #0]
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	370c      	adds	r7, #12
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c2:	4770      	bx	lr

0800c8c4 <_ZN8touchgfx8DrawableD1Ev>:
          visible(true)
    {
    }

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800c8c4:	b480      	push	{r7}
 800c8c6:	b083      	sub	sp, #12
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
    {
 800c8cc:	4a04      	ldr	r2, [pc, #16]	; (800c8e0 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	601a      	str	r2, [r3, #0]
    }
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	370c      	adds	r7, #12
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8de:	4770      	bx	lr
 800c8e0:	08033794 	.word	0x08033794

0800c8e4 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b082      	sub	sp, #8
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
    }
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f7ff ffe9 	bl	800c8c4 <_ZN8touchgfx8DrawableD1Ev>
 800c8f2:	2128      	movs	r1, #40	; 0x28
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f020 fbe9 	bl	802d0cc <_ZdlPvj>
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	3708      	adds	r7, #8
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}

0800c904 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800c904:	b580      	push	{r7, lr}
 800c906:	b084      	sub	sp, #16
 800c908:	af00      	add	r7, sp, #0
 800c90a:	60f8      	str	r0, [r7, #12]
 800c90c:	4608      	mov	r0, r1
 800c90e:	4611      	mov	r1, r2
 800c910:	461a      	mov	r2, r3
 800c912:	4603      	mov	r3, r0
 800c914:	817b      	strh	r3, [r7, #10]
 800c916:	460b      	mov	r3, r1
 800c918:	813b      	strh	r3, [r7, #8]
 800c91a:	4613      	mov	r3, r2
 800c91c:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	3334      	adds	r3, #52	; 0x34
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800c92a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800c92e:	68f8      	ldr	r0, [r7, #12]
 800c930:	4798      	blx	r3
        setWidth(width);
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	3338      	adds	r3, #56	; 0x38
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c93e:	4611      	mov	r1, r2
 800c940:	68f8      	ldr	r0, [r7, #12]
 800c942:	4798      	blx	r3
        setHeight(height);
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	333c      	adds	r3, #60	; 0x3c
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800c950:	4611      	mov	r1, r2
 800c952:	68f8      	ldr	r0, [r7, #12]
 800c954:	4798      	blx	r3
    }
 800c956:	bf00      	nop
 800c958:	3710      	adds	r7, #16
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}

0800c95e <_ZNK8touchgfx8Drawable4getXEv>:
    /**
     * Gets the x coordinate of this Drawable, relative to its parent.
     *
     * @return The x value, relative to the parent.
     */
    int16_t getX() const
 800c95e:	b480      	push	{r7}
 800c960:	b083      	sub	sp, #12
 800c962:	af00      	add	r7, sp, #0
 800c964:	6078      	str	r0, [r7, #4]
    {
        return rect.x;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 800c96c:	4618      	mov	r0, r3
 800c96e:	370c      	adds	r7, #12
 800c970:	46bd      	mov	sp, r7
 800c972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c976:	4770      	bx	lr

0800c978 <_ZNK8touchgfx8Drawable4getYEv>:
    /**
     * Gets the y coordinate of this Drawable, relative to its parent.
     *
     * @return The y value, relative to the parent.
     */
    int16_t getY() const
 800c978:	b480      	push	{r7}
 800c97a:	b083      	sub	sp, #12
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
    {
        return rect.y;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 800c986:	4618      	mov	r0, r3
 800c988:	370c      	adds	r7, #12
 800c98a:	46bd      	mov	sp, r7
 800c98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c990:	4770      	bx	lr

0800c992 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800c992:	b480      	push	{r7}
 800c994:	b083      	sub	sp, #12
 800c996:	af00      	add	r7, sp, #0
 800c998:	6078      	str	r0, [r7, #4]
 800c99a:	460b      	mov	r3, r1
 800c99c:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	887a      	ldrh	r2, [r7, #2]
 800c9a2:	809a      	strh	r2, [r3, #4]
    }
 800c9a4:	bf00      	nop
 800c9a6:	370c      	adds	r7, #12
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ae:	4770      	bx	lr

0800c9b0 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800c9b0:	b480      	push	{r7}
 800c9b2:	b083      	sub	sp, #12
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
 800c9b8:	460b      	mov	r3, r1
 800c9ba:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	887a      	ldrh	r2, [r7, #2]
 800c9c0:	80da      	strh	r2, [r3, #6]
    }
 800c9c2:	bf00      	nop
 800c9c4:	370c      	adds	r7, #12
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9cc:	4770      	bx	lr

0800c9ce <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setXY(int16_t x, int16_t y)
 800c9ce:	b580      	push	{r7, lr}
 800c9d0:	b082      	sub	sp, #8
 800c9d2:	af00      	add	r7, sp, #0
 800c9d4:	6078      	str	r0, [r7, #4]
 800c9d6:	460b      	mov	r3, r1
 800c9d8:	807b      	strh	r3, [r7, #2]
 800c9da:	4613      	mov	r3, r2
 800c9dc:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	332c      	adds	r3, #44	; 0x2c
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800c9ea:	4611      	mov	r1, r2
 800c9ec:	6878      	ldr	r0, [r7, #4]
 800c9ee:	4798      	blx	r3
        setY(y);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	3330      	adds	r3, #48	; 0x30
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	f9b7 2000 	ldrsh.w	r2, [r7]
 800c9fc:	4611      	mov	r1, r2
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	4798      	blx	r3
    }
 800ca02:	bf00      	nop
 800ca04:	3708      	adds	r7, #8
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}

0800ca0a <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800ca0a:	b480      	push	{r7}
 800ca0c:	b083      	sub	sp, #12
 800ca0e:	af00      	add	r7, sp, #0
 800ca10:	6078      	str	r0, [r7, #4]
 800ca12:	460b      	mov	r3, r1
 800ca14:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	887a      	ldrh	r2, [r7, #2]
 800ca1a:	811a      	strh	r2, [r3, #8]
    }
 800ca1c:	bf00      	nop
 800ca1e:	370c      	adds	r7, #12
 800ca20:	46bd      	mov	sp, r7
 800ca22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca26:	4770      	bx	lr

0800ca28 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800ca28:	b480      	push	{r7}
 800ca2a:	b083      	sub	sp, #12
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
 800ca30:	460b      	mov	r3, r1
 800ca32:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	887a      	ldrh	r2, [r7, #2]
 800ca38:	815a      	strh	r2, [r3, #10]
    }
 800ca3a:	bf00      	nop
 800ca3c:	370c      	adds	r7, #12
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca44:	4770      	bx	lr

0800ca46 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800ca46:	b480      	push	{r7}
 800ca48:	b083      	sub	sp, #12
 800ca4a:	af00      	add	r7, sp, #0
 800ca4c:	6078      	str	r0, [r7, #4]
    {
    }
 800ca4e:	bf00      	nop
 800ca50:	370c      	adds	r7, #12
 800ca52:	46bd      	mov	sp, r7
 800ca54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca58:	4770      	bx	lr

0800ca5a <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * Defines the event handler interface for ClickEvents. The default implementation
     * ignores the event. The event is only received if the Drawable is touchable and visible.
     *
     * @param  evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt)
 800ca5a:	b480      	push	{r7}
 800ca5c:	b083      	sub	sp, #12
 800ca5e:	af00      	add	r7, sp, #0
 800ca60:	6078      	str	r0, [r7, #4]
 800ca62:	6039      	str	r1, [r7, #0]
    {
    }
 800ca64:	bf00      	nop
 800ca66:	370c      	adds	r7, #12
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6e:	4770      	bx	lr

0800ca70 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * Defines the event handler interface for GestureEvents. The default implementation
     * ignores the event. The event is only received if the Drawable is touchable and visible.
     *
     * @param  evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt)
 800ca70:	b480      	push	{r7}
 800ca72:	b083      	sub	sp, #12
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
 800ca78:	6039      	str	r1, [r7, #0]
    {
    }
 800ca7a:	bf00      	nop
 800ca7c:	370c      	adds	r7, #12
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca84:	4770      	bx	lr

0800ca86 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * Defines the event handler interface for DragEvents. The default implementation
     * ignores the event. The event is only received if the drawable is touchable and visible.
     *
     * @param  evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt)
 800ca86:	b480      	push	{r7}
 800ca88:	b083      	sub	sp, #12
 800ca8a:	af00      	add	r7, sp, #0
 800ca8c:	6078      	str	r0, [r7, #4]
 800ca8e:	6039      	str	r1, [r7, #0]
    {
    }
 800ca90:	bf00      	nop
 800ca92:	370c      	adds	r7, #12
 800ca94:	46bd      	mov	sp, r7
 800ca96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9a:	4770      	bx	lr

0800ca9c <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800ca9c:	b480      	push	{r7}
 800ca9e:	b083      	sub	sp, #12
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
    {
    }
 800caa4:	bf00      	nop
 800caa6:	370c      	adds	r7, #12
 800caa8:	46bd      	mov	sp, r7
 800caaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caae:	4770      	bx	lr

0800cab0 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800cab0:	b480      	push	{r7}
 800cab2:	b083      	sub	sp, #12
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800cabe:	4618      	mov	r0, r3
 800cac0:	370c      	adds	r7, #12
 800cac2:	46bd      	mov	sp, r7
 800cac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac8:	4770      	bx	lr

0800caca <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800caca:	b480      	push	{r7}
 800cacc:	b083      	sub	sp, #12
 800cace:	af00      	add	r7, sp, #0
 800cad0:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800cad8:	4618      	mov	r0, r3
 800cada:	370c      	adds	r7, #12
 800cadc:	46bd      	mov	sp, r7
 800cade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae2:	4770      	bx	lr

0800cae4 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b082      	sub	sp, #8
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
 800caec:	460b      	mov	r3, r1
 800caee:	807b      	strh	r3, [r7, #2]
 800caf0:	4613      	mov	r3, r2
 800caf2:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	3354      	adds	r3, #84	; 0x54
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	8879      	ldrh	r1, [r7, #2]
 800cafe:	687a      	ldr	r2, [r7, #4]
 800cb00:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800cb04:	b292      	uxth	r2, r2
 800cb06:	1a8a      	subs	r2, r1, r2
 800cb08:	b292      	uxth	r2, r2
 800cb0a:	b210      	sxth	r0, r2
 800cb0c:	8839      	ldrh	r1, [r7, #0]
 800cb0e:	687a      	ldr	r2, [r7, #4]
 800cb10:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800cb14:	b292      	uxth	r2, r2
 800cb16:	1a8a      	subs	r2, r1, r2
 800cb18:	b292      	uxth	r2, r2
 800cb1a:	b212      	sxth	r2, r2
 800cb1c:	4601      	mov	r1, r0
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	4798      	blx	r3
    }
 800cb22:	bf00      	nop
 800cb24:	3708      	adds	r7, #8
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}

0800cb2a <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800cb2a:	b480      	push	{r7}
 800cb2c:	b083      	sub	sp, #12
 800cb2e:	af00      	add	r7, sp, #0
 800cb30:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cb38:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cb40:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cb48:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800cb4a:	bf00      	nop
 800cb4c:	370c      	adds	r7, #12
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb54:	4770      	bx	lr

0800cb56 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800cb56:	b580      	push	{r7, lr}
 800cb58:	b084      	sub	sp, #16
 800cb5a:	af00      	add	r7, sp, #0
 800cb5c:	60f8      	str	r0, [r7, #12]
 800cb5e:	60b9      	str	r1, [r7, #8]
 800cb60:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 800cb62:	68f8      	ldr	r0, [r7, #12]
 800cb64:	f7ff ffe1 	bl	800cb2a <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681a      	ldr	r2, [r3, #0]
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	68fa      	ldr	r2, [r7, #12]
 800cb74:	601a      	str	r2, [r3, #0]
    }
 800cb76:	bf00      	nop
 800cb78:	3710      	adds	r7, #16
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}
	...

0800cb80 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800cb80:	b480      	push	{r7}
 800cb82:	b083      	sub	sp, #12
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800cb88:	4a07      	ldr	r2, [pc, #28]	; (800cba8 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	601a      	str	r2, [r3, #0]
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2200      	movs	r2, #0
 800cb92:	605a      	str	r2, [r3, #4]
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2200      	movs	r2, #0
 800cb98:	721a      	strb	r2, [r3, #8]
    {
    }
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	370c      	adds	r7, #12
 800cba0:	46bd      	mov	sp, r7
 800cba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba6:	4770      	bx	lr
 800cba8:	08031214 	.word	0x08031214

0800cbac <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800cbac:	b480      	push	{r7}
 800cbae:	b083      	sub	sp, #12
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
    {
 800cbb4:	4a04      	ldr	r2, [pc, #16]	; (800cbc8 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	601a      	str	r2, [r3, #0]
    }
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	370c      	adds	r7, #12
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc6:	4770      	bx	lr
 800cbc8:	08031214 	.word	0x08031214

0800cbcc <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b082      	sub	sp, #8
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
    }
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	f7ff ffe9 	bl	800cbac <_ZN8touchgfx10TransitionD1Ev>
 800cbda:	210c      	movs	r1, #12
 800cbdc:	6878      	ldr	r0, [r7, #4]
 800cbde:	f020 fa75 	bl	802d0cc <_ZdlPvj>
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3708      	adds	r7, #8
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}

0800cbec <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800cbec:	b480      	push	{r7}
 800cbee:	b083      	sub	sp, #12
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
    {
    }
 800cbf4:	bf00      	nop
 800cbf6:	370c      	adds	r7, #12
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfe:	4770      	bx	lr

0800cc00 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800cc00:	b480      	push	{r7}
 800cc02:	b083      	sub	sp, #12
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
    {
    }
 800cc08:	bf00      	nop
 800cc0a:	370c      	adds	r7, #12
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc12:	4770      	bx	lr

0800cc14 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800cc14:	b480      	push	{r7}
 800cc16:	b083      	sub	sp, #12
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
    {
    }
 800cc1c:	bf00      	nop
 800cc1e:	370c      	adds	r7, #12
 800cc20:	46bd      	mov	sp, r7
 800cc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc26:	4770      	bx	lr

0800cc28 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b082      	sub	sp, #8
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 800cc30:	f012 fa12 	bl	801f058 <_ZN8touchgfx11Application11getInstanceEv>
 800cc34:	4602      	mov	r2, r0
 800cc36:	6813      	ldr	r3, [r2, #0]
 800cc38:	3330      	adds	r3, #48	; 0x30
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	4610      	mov	r0, r2
 800cc3e:	4798      	blx	r3
    }
 800cc40:	bf00      	nop
 800cc42:	3708      	adds	r7, #8
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}

0800cc48 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800cc48:	b480      	push	{r7}
 800cc4a:	b083      	sub	sp, #12
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
 800cc50:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	683a      	ldr	r2, [r7, #0]
 800cc56:	605a      	str	r2, [r3, #4]
    }
 800cc58:	bf00      	nop
 800cc5a:	370c      	adds	r7, #12
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc62:	4770      	bx	lr

0800cc64 <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication()
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b082      	sub	sp, #8
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
          pendingScreenTransitionCallback(0)
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f012 fa5a 	bl	801f128 <_ZN8touchgfx11ApplicationC1Ev>
 800cc74:	4a09      	ldr	r2, [pc, #36]	; (800cc9c <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	601a      	str	r2, [r3, #0]
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	2200      	movs	r2, #0
 800cc86:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        instance = this;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	4a04      	ldr	r2, [pc, #16]	; (800cca0 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800cc8e:	6013      	str	r3, [r2, #0]
    }
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	4618      	mov	r0, r3
 800cc94:	3708      	adds	r7, #8
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}
 800cc9a:	bf00      	nop
 800cc9c:	08030e14 	.word	0x08030e14
 800cca0:	20012910 	.word	0x20012910

0800cca4 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800cca4:	b480      	push	{r7}
 800cca6:	b083      	sub	sp, #12
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
 800ccac:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	683a      	ldr	r2, [r7, #0]
 800ccb2:	601a      	str	r2, [r3, #0]
    }
 800ccb4:	bf00      	nop
 800ccb6:	370c      	adds	r7, #12
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbe:	4770      	bx	lr

0800ccc0 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800ccc0:	b480      	push	{r7}
 800ccc2:	b083      	sub	sp, #12
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2201      	movs	r2, #1
 800cccc:	721a      	strb	r2, [r3, #8]
    }
 800ccce:	bf00      	nop
 800ccd0:	370c      	adds	r7, #12
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd8:	4770      	bx	lr

0800ccda <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800ccda:	b580      	push	{r7, lr}
 800ccdc:	b084      	sub	sp, #16
 800ccde:	af00      	add	r7, sp, #0
 800cce0:	60f8      	str	r0, [r7, #12]
 800cce2:	607b      	str	r3, [r7, #4]
 800cce4:	460b      	mov	r3, r1
 800cce6:	817b      	strh	r3, [r7, #10]
 800cce8:	4613      	mov	r3, r2
 800ccea:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f7ff fede 	bl	800cab0 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d008      	beq.n	800cd0c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f7ff fee4 	bl	800caca <_ZNK8touchgfx8Drawable11isTouchableEv>
 800cd02:	4603      	mov	r3, r0
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d001      	beq.n	800cd0c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800cd08:	2301      	movs	r3, #1
 800cd0a:	e000      	b.n	800cd0e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d002      	beq.n	800cd18 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800cd12:	68fa      	ldr	r2, [r7, #12]
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	601a      	str	r2, [r3, #0]
        }
    }
 800cd18:	bf00      	nop
 800cd1a:	3710      	adds	r7, #16
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}

0800cd20 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800cd20:	b480      	push	{r7}
 800cd22:	b083      	sub	sp, #12
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
 800cd28:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	683a      	ldr	r2, [r7, #0]
 800cd2e:	605a      	str	r2, [r3, #4]
    }
 800cd30:	bf00      	nop
 800cd32:	370c      	adds	r7, #12
 800cd34:	46bd      	mov	sp, r7
 800cd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3a:	4770      	bx	lr

0800cd3c <_ZN8touchgfx6WidgetD1Ev>:
class Widget : public Drawable
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b082      	sub	sp, #8
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
 800cd44:	4a05      	ldr	r2, [pc, #20]	; (800cd5c <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	601a      	str	r2, [r3, #0]
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f7ff fdb9 	bl	800c8c4 <_ZN8touchgfx8DrawableD1Ev>
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	4618      	mov	r0, r3
 800cd56:	3708      	adds	r7, #8
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}
 800cd5c:	08031188 	.word	0x08031188

0800cd60 <_ZN8touchgfx6WidgetD0Ev>:
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b082      	sub	sp, #8
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
 800cd68:	6878      	ldr	r0, [r7, #4]
 800cd6a:	f7ff ffe7 	bl	800cd3c <_ZN8touchgfx6WidgetD1Ev>
 800cd6e:	2128      	movs	r1, #40	; 0x28
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f020 f9ab 	bl	802d0cc <_ZdlPvj>
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	4618      	mov	r0, r3
 800cd7a:	3708      	adds	r7, #8
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}

0800cd80 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/sequencescreen_screen/sequenceScreenView.hpp>
#include <gui/sequencescreen_screen/sequenceScreenPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b084      	sub	sp, #16
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	60f8      	str	r0, [r7, #12]
 800cd88:	60b9      	str	r1, [r7, #8]
 800cd8a:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f7ff ff68 	bl	800cc64 <_ZN8touchgfx14MVPApplicationC1Ev>
 800cd94:	4a13      	ldr	r2, [pc, #76]	; (800cde4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	601a      	str	r2, [r3, #0]
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800cda0:	4618      	mov	r0, r3
 800cda2:	f000 f92b 	bl	800cffc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	687a      	ldr	r2, [r7, #4]
 800cdaa:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	68ba      	ldr	r2, [r7, #8]
 800cdb2:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 800cdb6:	f7fc fafb 	bl	80093b0 <_ZN8touchgfx3HAL11getInstanceEv>
 800cdba:	4602      	mov	r2, r0
 800cdbc:	6813      	ldr	r3, [r2, #0]
 800cdbe:	3308      	adds	r3, #8
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	2101      	movs	r1, #1
 800cdc4:	4610      	mov	r0, r2
 800cdc6:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 800cdc8:	2000      	movs	r0, #0
 800cdca:	f001 fe99 	bl	800eb00 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800cdce:	f7fb fec7 	bl	8008b60 <_ZN8touchgfx3HAL3lcdEv>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f019 f914 	bl	8026002 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	4618      	mov	r0, r3
 800cdde:	3710      	adds	r7, #16
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}
 800cde4:	08030db8 	.word	0x08030db8

0800cde8 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800cde8:	b480      	push	{r7}
 800cdea:	b083      	sub	sp, #12
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
 800cdf0:	6039      	str	r1, [r7, #0]
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	370c      	adds	r7, #12
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfe:	4770      	bx	lr

0800ce00 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b082      	sub	sp, #8
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
 800ce08:	6039      	str	r1, [r7, #0]
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	683a      	ldr	r2, [r7, #0]
 800ce0e:	4611      	mov	r1, r2
 800ce10:	4618      	mov	r0, r3
 800ce12:	f7ff ffe9 	bl	800cde8 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	685a      	ldr	r2, [r3, #4]
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	605a      	str	r2, [r3, #4]
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	683a      	ldr	r2, [r7, #0]
 800ce22:	3308      	adds	r3, #8
 800ce24:	3208      	adds	r2, #8
 800ce26:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ce2a:	e883 0003 	stmia.w	r3, {r0, r1}
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	4618      	mov	r0, r3
 800ce32:	3708      	adds	r7, #8
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}

0800ce38 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>:
 */

// mainScreen

void FrontendApplicationBase::gotomainScreenScreenNoTransition()
{
 800ce38:	b590      	push	{r4, r7, lr}
 800ce3a:	b089      	sub	sp, #36	; 0x24
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotomainScreenScreenNoTransitionImpl);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800ce46:	4b10      	ldr	r3, [pc, #64]	; (800ce88 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv+0x50>)
 800ce48:	61bb      	str	r3, [r7, #24]
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	61fb      	str	r3, [r7, #28]
 800ce4e:	f107 0008 	add.w	r0, r7, #8
 800ce52:	f107 0318 	add.w	r3, r7, #24
 800ce56:	cb0c      	ldmia	r3, {r2, r3}
 800ce58:	6879      	ldr	r1, [r7, #4]
 800ce5a:	f000 f8eb 	bl	800d034 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800ce5e:	f107 0308 	add.w	r3, r7, #8
 800ce62:	4619      	mov	r1, r3
 800ce64:	4620      	mov	r0, r4
 800ce66:	f7ff ffcb 	bl	800ce00 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800ce6a:	f107 0308 	add.w	r3, r7, #8
 800ce6e:	4618      	mov	r0, r3
 800ce70:	f7fd fbc0 	bl	800a5f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800ce80:	bf00      	nop
 800ce82:	3724      	adds	r7, #36	; 0x24
 800ce84:	46bd      	mov	sp, r7
 800ce86:	bd90      	pop	{r4, r7, pc}
 800ce88:	0800ce8d 	.word	0x0800ce8d

0800ce8c <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotomainScreenScreenNoTransitionImpl()
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b084      	sub	sp, #16
 800ce90:	af02      	add	r7, sp, #8
 800ce92:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<mainScreenView, mainScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800cea0:	461a      	mov	r2, r3
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800cea8:	9300      	str	r3, [sp, #0]
 800ceaa:	4b04      	ldr	r3, [pc, #16]	; (800cebc <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x30>)
 800ceac:	4804      	ldr	r0, [pc, #16]	; (800cec0 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x34>)
 800ceae:	f000 f8f3 	bl	800d098 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800ceb2:	bf00      	nop
 800ceb4:	3708      	adds	r7, #8
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bd80      	pop	{r7, pc}
 800ceba:	bf00      	nop
 800cebc:	20012904 	.word	0x20012904
 800cec0:	20012900 	.word	0x20012900

0800cec4 <_ZN23FrontendApplicationBase39gotomainScreenScreenSlideTransitionWestEv>:

void FrontendApplicationBase::gotomainScreenScreenSlideTransitionWest()
{
 800cec4:	b590      	push	{r4, r7, lr}
 800cec6:	b089      	sub	sp, #36	; 0x24
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotomainScreenScreenSlideTransitionWestImpl);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800ced2:	4b10      	ldr	r3, [pc, #64]	; (800cf14 <_ZN23FrontendApplicationBase39gotomainScreenScreenSlideTransitionWestEv+0x50>)
 800ced4:	61bb      	str	r3, [r7, #24]
 800ced6:	2300      	movs	r3, #0
 800ced8:	61fb      	str	r3, [r7, #28]
 800ceda:	f107 0008 	add.w	r0, r7, #8
 800cede:	f107 0318 	add.w	r3, r7, #24
 800cee2:	cb0c      	ldmia	r3, {r2, r3}
 800cee4:	6879      	ldr	r1, [r7, #4]
 800cee6:	f000 f8a5 	bl	800d034 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800ceea:	f107 0308 	add.w	r3, r7, #8
 800ceee:	4619      	mov	r1, r3
 800cef0:	4620      	mov	r0, r4
 800cef2:	f7ff ff85 	bl	800ce00 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800cef6:	f107 0308 	add.w	r3, r7, #8
 800cefa:	4618      	mov	r0, r3
 800cefc:	f7fd fb7a 	bl	800a5f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800cf0c:	bf00      	nop
 800cf0e:	3724      	adds	r7, #36	; 0x24
 800cf10:	46bd      	mov	sp, r7
 800cf12:	bd90      	pop	{r4, r7, pc}
 800cf14:	0800cf19 	.word	0x0800cf19

0800cf18 <_ZN23FrontendApplicationBase43gotomainScreenScreenSlideTransitionWestImplEv>:

void FrontendApplicationBase::gotomainScreenScreenSlideTransitionWestImpl()
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b084      	sub	sp, #16
 800cf1c:	af02      	add	r7, sp, #8
 800cf1e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<mainScreenView, mainScreenPresenter, touchgfx::SlideTransition<WEST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800cf2c:	461a      	mov	r2, r3
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800cf34:	9300      	str	r3, [sp, #0]
 800cf36:	4b04      	ldr	r3, [pc, #16]	; (800cf48 <_ZN23FrontendApplicationBase43gotomainScreenScreenSlideTransitionWestImplEv+0x30>)
 800cf38:	4804      	ldr	r0, [pc, #16]	; (800cf4c <_ZN23FrontendApplicationBase43gotomainScreenScreenSlideTransitionWestImplEv+0x34>)
 800cf3a:	f000 f9d7 	bl	800d2ec <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800cf3e:	bf00      	nop
 800cf40:	3708      	adds	r7, #8
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}
 800cf46:	bf00      	nop
 800cf48:	20012904 	.word	0x20012904
 800cf4c:	20012900 	.word	0x20012900

0800cf50 <_ZN23FrontendApplicationBase43gotosequenceScreenScreenSlideTransitionEastEv>:

// sequenceScreen

void FrontendApplicationBase::gotosequenceScreenScreenSlideTransitionEast()
{
 800cf50:	b590      	push	{r4, r7, lr}
 800cf52:	b089      	sub	sp, #36	; 0x24
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotosequenceScreenScreenSlideTransitionEastImpl);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800cf5e:	4b10      	ldr	r3, [pc, #64]	; (800cfa0 <_ZN23FrontendApplicationBase43gotosequenceScreenScreenSlideTransitionEastEv+0x50>)
 800cf60:	61bb      	str	r3, [r7, #24]
 800cf62:	2300      	movs	r3, #0
 800cf64:	61fb      	str	r3, [r7, #28]
 800cf66:	f107 0008 	add.w	r0, r7, #8
 800cf6a:	f107 0318 	add.w	r3, r7, #24
 800cf6e:	cb0c      	ldmia	r3, {r2, r3}
 800cf70:	6879      	ldr	r1, [r7, #4]
 800cf72:	f000 f85f 	bl	800d034 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800cf76:	f107 0308 	add.w	r3, r7, #8
 800cf7a:	4619      	mov	r1, r3
 800cf7c:	4620      	mov	r0, r4
 800cf7e:	f7ff ff3f 	bl	800ce00 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800cf82:	f107 0308 	add.w	r3, r7, #8
 800cf86:	4618      	mov	r0, r3
 800cf88:	f7fd fb34 	bl	800a5f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800cf98:	bf00      	nop
 800cf9a:	3724      	adds	r7, #36	; 0x24
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd90      	pop	{r4, r7, pc}
 800cfa0:	0800cfa5 	.word	0x0800cfa5

0800cfa4 <_ZN23FrontendApplicationBase47gotosequenceScreenScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotosequenceScreenScreenSlideTransitionEastImpl()
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b084      	sub	sp, #16
 800cfa8:	af02      	add	r7, sp, #8
 800cfaa:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<sequenceScreenView, sequenceScreenPresenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800cfb8:	461a      	mov	r2, r3
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800cfc0:	9300      	str	r3, [sp, #0]
 800cfc2:	4b04      	ldr	r3, [pc, #16]	; (800cfd4 <_ZN23FrontendApplicationBase47gotosequenceScreenScreenSlideTransitionEastImplEv+0x30>)
 800cfc4:	4804      	ldr	r0, [pc, #16]	; (800cfd8 <_ZN23FrontendApplicationBase47gotosequenceScreenScreenSlideTransitionEastImplEv+0x34>)
 800cfc6:	f000 fabb 	bl	800d540 <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800cfca:	bf00      	nop
 800cfcc:	3708      	adds	r7, #8
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bd80      	pop	{r7, pc}
 800cfd2:	bf00      	nop
 800cfd4:	20012904 	.word	0x20012904
 800cfd8:	20012900 	.word	0x20012900

0800cfdc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800cfdc:	b480      	push	{r7}
 800cfde:	b083      	sub	sp, #12
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
 800cfe4:	4a04      	ldr	r2, [pc, #16]	; (800cff8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	601a      	str	r2, [r3, #0]
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	4618      	mov	r0, r3
 800cfee:	370c      	adds	r7, #12
 800cff0:	46bd      	mov	sp, r7
 800cff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff6:	4770      	bx	lr
 800cff8:	08030e58 	.word	0x08030e58

0800cffc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback()
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b082      	sub	sp, #8
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	4618      	mov	r0, r3
 800d008:	f7ff ffe8 	bl	800cfdc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800d00c:	4a08      	ldr	r2, [pc, #32]	; (800d030 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	601a      	str	r2, [r3, #0]
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	2200      	movs	r2, #0
 800d016:	605a      	str	r2, [r3, #4]
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2200      	movs	r2, #0
 800d01c:	609a      	str	r2, [r3, #8]
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2200      	movs	r2, #0
 800d022:	60da      	str	r2, [r3, #12]
    }
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	4618      	mov	r0, r3
 800d028:	3708      	adds	r7, #8
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}
 800d02e:	bf00      	nop
 800d030:	08030dfc 	.word	0x08030dfc

0800d034 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 800d034:	b580      	push	{r7, lr}
 800d036:	b084      	sub	sp, #16
 800d038:	af00      	add	r7, sp, #0
 800d03a:	60f8      	str	r0, [r7, #12]
 800d03c:	60b9      	str	r1, [r7, #8]
 800d03e:	4639      	mov	r1, r7
 800d040:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	4618      	mov	r0, r3
 800d048:	f7ff ffc8 	bl	800cfdc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800d04c:	4a08      	ldr	r2, [pc, #32]	; (800d070 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	68ba      	ldr	r2, [r7, #8]
 800d056:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	3308      	adds	r3, #8
 800d05c:	463a      	mov	r2, r7
 800d05e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d062:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	4618      	mov	r0, r3
 800d06a:	3710      	adds	r7, #16
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}
 800d070:	08030dfc 	.word	0x08030dfc

0800d074 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800d074:	b580      	push	{r7, lr}
 800d076:	b082      	sub	sp, #8
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	4618      	mov	r0, r3
 800d080:	f7ff fd7e 	bl	800cb80 <_ZN8touchgfx10TransitionC1Ev>
 800d084:	4a03      	ldr	r2, [pc, #12]	; (800d094 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	601a      	str	r2, [r3, #0]
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	4618      	mov	r0, r3
 800d08e:	3708      	adds	r7, #8
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}
 800d094:	080311f0 	.word	0x080311f0

0800d098 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800d098:	b590      	push	{r4, r7, lr}
 800d09a:	b08f      	sub	sp, #60	; 0x3c
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	60f8      	str	r0, [r7, #12]
 800d0a0:	60b9      	str	r1, [r7, #8]
 800d0a2:	607a      	str	r2, [r7, #4]
 800d0a4:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	689a      	ldr	r2, [r3, #8]
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	689b      	ldr	r3, [r3, #8]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	3320      	adds	r3, #32
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	4610      	mov	r0, r2
 800d0b6:	4798      	blx	r3
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	f5b3 6faa 	cmp.w	r3, #1360	; 0x550
 800d0be:	d205      	bcs.n	800d0cc <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800d0c0:	4b85      	ldr	r3, [pc, #532]	; (800d2d8 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x240>)
 800d0c2:	4a86      	ldr	r2, [pc, #536]	; (800d2dc <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800d0c4:	21a7      	movs	r1, #167	; 0xa7
 800d0c6:	4886      	ldr	r0, [pc, #536]	; (800d2e0 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d0c8:	f021 f8ce 	bl	802e268 <__assert_func>
 800d0cc:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	685a      	ldr	r2, [r3, #4]
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	685b      	ldr	r3, [r3, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	3320      	adds	r3, #32
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	4610      	mov	r0, r2
 800d0de:	4798      	blx	r3
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	2b0f      	cmp	r3, #15
 800d0e4:	d805      	bhi.n	800d0f2 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800d0e6:	4b7f      	ldr	r3, [pc, #508]	; (800d2e4 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d0e8:	4a7c      	ldr	r2, [pc, #496]	; (800d2dc <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800d0ea:	21a8      	movs	r1, #168	; 0xa8
 800d0ec:	487c      	ldr	r0, [pc, #496]	; (800d2e0 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d0ee:	f021 f8bb 	bl	802e268 <__assert_func>
 800d0f2:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	68da      	ldr	r2, [r3, #12]
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	68db      	ldr	r3, [r3, #12]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	3320      	adds	r3, #32
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	4610      	mov	r0, r2
 800d104:	4798      	blx	r3
 800d106:	4603      	mov	r3, r0
 800d108:	2b0b      	cmp	r3, #11
 800d10a:	d805      	bhi.n	800d118 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800d10c:	4b76      	ldr	r3, [pc, #472]	; (800d2e8 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800d10e:	4a73      	ldr	r2, [pc, #460]	; (800d2dc <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800d110:	21a9      	movs	r1, #169	; 0xa9
 800d112:	4873      	ldr	r0, [pc, #460]	; (800d2e0 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d114:	f021 f8a8 	bl	802e268 <__assert_func>
 800d118:	bf00      	nop
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d11e:	68bb      	ldr	r3, [r7, #8]
 800d120:	627b      	str	r3, [r7, #36]	; 0x24
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800d126:	f011 ff97 	bl	801f058 <_ZN8touchgfx11Application11getInstanceEv>
 800d12a:	4603      	mov	r3, r0
 800d12c:	4618      	mov	r0, r3
 800d12e:	f011 ffe1 	bl	801f0f4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800d132:	6a3b      	ldr	r3, [r7, #32]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d008      	beq.n	800d14c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800d13a:	6a3b      	ldr	r3, [r7, #32]
 800d13c:	681a      	ldr	r2, [r3, #0]
 800d13e:	6a3b      	ldr	r3, [r7, #32]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	330c      	adds	r3, #12
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	4610      	mov	r0, r2
 800d14a:	4798      	blx	r3
    if (*currentTrans)
 800d14c:	6a3b      	ldr	r3, [r7, #32]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d007      	beq.n	800d164 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800d154:	6a3b      	ldr	r3, [r7, #32]
 800d156:	681a      	ldr	r2, [r3, #0]
 800d158:	6a3b      	ldr	r3, [r7, #32]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	4610      	mov	r0, r2
 800d162:	4798      	blx	r3
    if (*currentScreen)
 800d164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d008      	beq.n	800d17e <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800d16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d16e:	681a      	ldr	r2, [r3, #0]
 800d170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	3314      	adds	r3, #20
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	4610      	mov	r0, r2
 800d17c:	4798      	blx	r3
    if (*currentPresenter)
 800d17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d008      	beq.n	800d198 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800d186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d188:	681a      	ldr	r2, [r3, #0]
 800d18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	3304      	adds	r3, #4
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	4610      	mov	r0, r2
 800d196:	4798      	blx	r3
    if (*currentScreen)
 800d198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d007      	beq.n	800d1b0 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800d1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1a2:	681a      	ldr	r2, [r3, #0]
 800d1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	4610      	mov	r0, r2
 800d1ae:	4798      	blx	r3
    if (*currentPresenter)
 800d1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d008      	beq.n	800d1ca <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800d1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ba:	681a      	ldr	r2, [r3, #0]
 800d1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	3308      	adds	r3, #8
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	4610      	mov	r0, r2
 800d1c8:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	68db      	ldr	r3, [r3, #12]
 800d1ce:	2100      	movs	r1, #0
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f000 fae1 	bl	800d798 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	4619      	mov	r1, r3
 800d1da:	200c      	movs	r0, #12
 800d1dc:	f7ff fb66 	bl	800c8ac <_ZnwjPv>
 800d1e0:	4604      	mov	r4, r0
 800d1e2:	2c00      	cmp	r4, #0
 800d1e4:	d004      	beq.n	800d1f0 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x158>
 800d1e6:	4620      	mov	r0, r4
 800d1e8:	f7ff ff44 	bl	800d074 <_ZN8touchgfx12NoTransitionC1Ev>
 800d1ec:	4623      	mov	r3, r4
 800d1ee:	e000      	b.n	800d1f2 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 800d1f0:	4623      	mov	r3, r4
 800d1f2:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	689b      	ldr	r3, [r3, #8]
 800d1f8:	2100      	movs	r1, #0
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f000 fadf 	bl	800d7be <_ZN8touchgfx17AbstractPartition2atI14mainScreenViewEERT_t>
 800d200:	4603      	mov	r3, r0
 800d202:	4619      	mov	r1, r3
 800d204:	f44f 60aa 	mov.w	r0, #1360	; 0x550
 800d208:	f7ff fb50 	bl	800c8ac <_ZnwjPv>
 800d20c:	4604      	mov	r4, r0
 800d20e:	2c00      	cmp	r4, #0
 800d210:	d004      	beq.n	800d21c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x184>
 800d212:	4620      	mov	r0, r4
 800d214:	f003 fec0 	bl	8010f98 <_ZN14mainScreenViewC1Ev>
 800d218:	4623      	mov	r3, r4
 800d21a:	e000      	b.n	800d21e <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 800d21c:	4623      	mov	r3, r4
 800d21e:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	685b      	ldr	r3, [r3, #4]
 800d224:	2100      	movs	r1, #0
 800d226:	4618      	mov	r0, r3
 800d228:	f000 fadc 	bl	800d7e4 <_ZN8touchgfx17AbstractPartition2atI19mainScreenPresenterEERT_t>
 800d22c:	4603      	mov	r3, r0
 800d22e:	4619      	mov	r1, r3
 800d230:	2010      	movs	r0, #16
 800d232:	f7ff fb3b 	bl	800c8ac <_ZnwjPv>
 800d236:	4604      	mov	r4, r0
 800d238:	2c00      	cmp	r4, #0
 800d23a:	d005      	beq.n	800d248 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 800d23c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d23e:	4620      	mov	r0, r4
 800d240:	f003 fe52 	bl	8010ee8 <_ZN19mainScreenPresenterC1ER14mainScreenView>
 800d244:	4623      	mov	r3, r4
 800d246:	e000      	b.n	800d24a <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800d248:	4623      	mov	r3, r4
 800d24a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d250:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d256:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d25c:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800d25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d260:	2b00      	cmp	r3, #0
 800d262:	d002      	beq.n	800d26a <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d2>
 800d264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d266:	3304      	adds	r3, #4
 800d268:	e000      	b.n	800d26c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 800d26a:	2300      	movs	r3, #0
 800d26c:	4619      	mov	r1, r3
 800d26e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800d270:	f7ff fd18 	bl	800cca4 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800d274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d276:	3304      	adds	r3, #4
 800d278:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d27a:	4618      	mov	r0, r3
 800d27c:	f7ff fd50 	bl	800cd20 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800d280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d282:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d284:	4618      	mov	r0, r3
 800d286:	f000 fac0 	bl	800d80a <_ZN8touchgfx4ViewI19mainScreenPresenterE4bindERS1_>
 800d28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d28c:	61fb      	str	r3, [r7, #28]
 800d28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d290:	61bb      	str	r3, [r7, #24]
 800d292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d294:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800d296:	69fb      	ldr	r3, [r7, #28]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	330c      	adds	r3, #12
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	69f8      	ldr	r0, [r7, #28]
 800d2a0:	4798      	blx	r3
    newPresenter->activate();
 800d2a2:	69bb      	ldr	r3, [r7, #24]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	69b8      	ldr	r0, [r7, #24]
 800d2aa:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800d2ac:	6979      	ldr	r1, [r7, #20]
 800d2ae:	69f8      	ldr	r0, [r7, #28]
 800d2b0:	f013 f88a 	bl	80203c8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800d2b4:	697b      	ldr	r3, [r7, #20]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	3310      	adds	r3, #16
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	6978      	ldr	r0, [r7, #20]
 800d2be:	4798      	blx	r3
    newTransition->invalidate();
 800d2c0:	697b      	ldr	r3, [r7, #20]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	3314      	adds	r3, #20
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	6978      	ldr	r0, [r7, #20]
 800d2ca:	4798      	blx	r3

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800d2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	373c      	adds	r7, #60	; 0x3c
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	bd90      	pop	{r4, r7, pc}
 800d2d6:	bf00      	nop
 800d2d8:	0802fa48 	.word	0x0802fa48
 800d2dc:	08031230 	.word	0x08031230
 800d2e0:	0802fad8 	.word	0x0802fad8
 800d2e4:	0802fb20 	.word	0x0802fb20
 800d2e8:	0802fbc4 	.word	0x0802fbc4

0800d2ec <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800d2ec:	b590      	push	{r4, r7, lr}
 800d2ee:	b08f      	sub	sp, #60	; 0x3c
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	60f8      	str	r0, [r7, #12]
 800d2f4:	60b9      	str	r1, [r7, #8]
 800d2f6:	607a      	str	r2, [r7, #4]
 800d2f8:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	689a      	ldr	r2, [r3, #8]
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	689b      	ldr	r3, [r3, #8]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	3320      	adds	r3, #32
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	4610      	mov	r0, r2
 800d30a:	4798      	blx	r3
 800d30c:	4603      	mov	r3, r0
 800d30e:	f5b3 6faa 	cmp.w	r3, #1360	; 0x550
 800d312:	d205      	bcs.n	800d320 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800d314:	4b85      	ldr	r3, [pc, #532]	; (800d52c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x240>)
 800d316:	4a86      	ldr	r2, [pc, #536]	; (800d530 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800d318:	21a7      	movs	r1, #167	; 0xa7
 800d31a:	4886      	ldr	r0, [pc, #536]	; (800d534 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d31c:	f020 ffa4 	bl	802e268 <__assert_func>
 800d320:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	685a      	ldr	r2, [r3, #4]
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	685b      	ldr	r3, [r3, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	3320      	adds	r3, #32
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	4610      	mov	r0, r2
 800d332:	4798      	blx	r3
 800d334:	4603      	mov	r3, r0
 800d336:	2b0f      	cmp	r3, #15
 800d338:	d805      	bhi.n	800d346 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800d33a:	4b7f      	ldr	r3, [pc, #508]	; (800d538 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d33c:	4a7c      	ldr	r2, [pc, #496]	; (800d530 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800d33e:	21a8      	movs	r1, #168	; 0xa8
 800d340:	487c      	ldr	r0, [pc, #496]	; (800d534 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d342:	f020 ff91 	bl	802e268 <__assert_func>
 800d346:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	68da      	ldr	r2, [r3, #12]
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	68db      	ldr	r3, [r3, #12]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	3320      	adds	r3, #32
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	4610      	mov	r0, r2
 800d358:	4798      	blx	r3
 800d35a:	4603      	mov	r3, r0
 800d35c:	2b53      	cmp	r3, #83	; 0x53
 800d35e:	d805      	bhi.n	800d36c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800d360:	4b76      	ldr	r3, [pc, #472]	; (800d53c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800d362:	4a73      	ldr	r2, [pc, #460]	; (800d530 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800d364:	21a9      	movs	r1, #169	; 0xa9
 800d366:	4873      	ldr	r0, [pc, #460]	; (800d534 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d368:	f020 ff7e 	bl	802e268 <__assert_func>
 800d36c:	bf00      	nop
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	62bb      	str	r3, [r7, #40]	; 0x28
 800d372:	68bb      	ldr	r3, [r7, #8]
 800d374:	627b      	str	r3, [r7, #36]	; 0x24
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800d37a:	f011 fe6d 	bl	801f058 <_ZN8touchgfx11Application11getInstanceEv>
 800d37e:	4603      	mov	r3, r0
 800d380:	4618      	mov	r0, r3
 800d382:	f011 feb7 	bl	801f0f4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800d386:	6a3b      	ldr	r3, [r7, #32]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d008      	beq.n	800d3a0 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800d38e:	6a3b      	ldr	r3, [r7, #32]
 800d390:	681a      	ldr	r2, [r3, #0]
 800d392:	6a3b      	ldr	r3, [r7, #32]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	330c      	adds	r3, #12
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	4610      	mov	r0, r2
 800d39e:	4798      	blx	r3
    if (*currentTrans)
 800d3a0:	6a3b      	ldr	r3, [r7, #32]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d007      	beq.n	800d3b8 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800d3a8:	6a3b      	ldr	r3, [r7, #32]
 800d3aa:	681a      	ldr	r2, [r3, #0]
 800d3ac:	6a3b      	ldr	r3, [r7, #32]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	4610      	mov	r0, r2
 800d3b6:	4798      	blx	r3
    if (*currentScreen)
 800d3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d008      	beq.n	800d3d2 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800d3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c2:	681a      	ldr	r2, [r3, #0]
 800d3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	3314      	adds	r3, #20
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	4610      	mov	r0, r2
 800d3d0:	4798      	blx	r3
    if (*currentPresenter)
 800d3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d008      	beq.n	800d3ec <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800d3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3dc:	681a      	ldr	r2, [r3, #0]
 800d3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	3304      	adds	r3, #4
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	4610      	mov	r0, r2
 800d3ea:	4798      	blx	r3
    if (*currentScreen)
 800d3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d007      	beq.n	800d404 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800d3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3f6:	681a      	ldr	r2, [r3, #0]
 800d3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	4610      	mov	r0, r2
 800d402:	4798      	blx	r3
    if (*currentPresenter)
 800d404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d008      	beq.n	800d41e <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800d40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d40e:	681a      	ldr	r2, [r3, #0]
 800d410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	3308      	adds	r3, #8
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	4610      	mov	r0, r2
 800d41c:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	68db      	ldr	r3, [r3, #12]
 800d422:	2100      	movs	r1, #0
 800d424:	4618      	mov	r0, r3
 800d426:	f000 f9fe 	bl	800d826 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE3EEEEERT_t>
 800d42a:	4603      	mov	r3, r0
 800d42c:	4619      	mov	r1, r3
 800d42e:	2054      	movs	r0, #84	; 0x54
 800d430:	f7ff fa3c 	bl	800c8ac <_ZnwjPv>
 800d434:	4604      	mov	r4, r0
 800d436:	2c00      	cmp	r4, #0
 800d438:	d005      	beq.n	800d446 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 800d43a:	2114      	movs	r1, #20
 800d43c:	4620      	mov	r0, r4
 800d43e:	f000 fa49 	bl	800d8d4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh>
 800d442:	4623      	mov	r3, r4
 800d444:	e000      	b.n	800d448 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>
 800d446:	4623      	mov	r3, r4
 800d448:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	689b      	ldr	r3, [r3, #8]
 800d44e:	2100      	movs	r1, #0
 800d450:	4618      	mov	r0, r3
 800d452:	f000 f9b4 	bl	800d7be <_ZN8touchgfx17AbstractPartition2atI14mainScreenViewEERT_t>
 800d456:	4603      	mov	r3, r0
 800d458:	4619      	mov	r1, r3
 800d45a:	f44f 60aa 	mov.w	r0, #1360	; 0x550
 800d45e:	f7ff fa25 	bl	800c8ac <_ZnwjPv>
 800d462:	4604      	mov	r4, r0
 800d464:	2c00      	cmp	r4, #0
 800d466:	d004      	beq.n	800d472 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 800d468:	4620      	mov	r0, r4
 800d46a:	f003 fd95 	bl	8010f98 <_ZN14mainScreenViewC1Ev>
 800d46e:	4623      	mov	r3, r4
 800d470:	e000      	b.n	800d474 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x188>
 800d472:	4623      	mov	r3, r4
 800d474:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	685b      	ldr	r3, [r3, #4]
 800d47a:	2100      	movs	r1, #0
 800d47c:	4618      	mov	r0, r3
 800d47e:	f000 f9b1 	bl	800d7e4 <_ZN8touchgfx17AbstractPartition2atI19mainScreenPresenterEERT_t>
 800d482:	4603      	mov	r3, r0
 800d484:	4619      	mov	r1, r3
 800d486:	2010      	movs	r0, #16
 800d488:	f7ff fa10 	bl	800c8ac <_ZnwjPv>
 800d48c:	4604      	mov	r4, r0
 800d48e:	2c00      	cmp	r4, #0
 800d490:	d005      	beq.n	800d49e <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800d492:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d494:	4620      	mov	r0, r4
 800d496:	f003 fd27 	bl	8010ee8 <_ZN19mainScreenPresenterC1ER14mainScreenView>
 800d49a:	4623      	mov	r3, r4
 800d49c:	e000      	b.n	800d4a0 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800d49e:	4623      	mov	r3, r4
 800d4a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d4a6:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d4ac:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4b2:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800d4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d002      	beq.n	800d4c0 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 800d4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4bc:	3304      	adds	r3, #4
 800d4be:	e000      	b.n	800d4c2 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d6>
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	4619      	mov	r1, r3
 800d4c4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800d4c6:	f7ff fbed 	bl	800cca4 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800d4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4cc:	3304      	adds	r3, #4
 800d4ce:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f7ff fc25 	bl	800cd20 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800d4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f000 f995 	bl	800d80a <_ZN8touchgfx4ViewI19mainScreenPresenterE4bindERS1_>
 800d4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e2:	61fb      	str	r3, [r7, #28]
 800d4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4e6:	61bb      	str	r3, [r7, #24]
 800d4e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4ea:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800d4ec:	69fb      	ldr	r3, [r7, #28]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	330c      	adds	r3, #12
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	69f8      	ldr	r0, [r7, #28]
 800d4f6:	4798      	blx	r3
    newPresenter->activate();
 800d4f8:	69bb      	ldr	r3, [r7, #24]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	69b8      	ldr	r0, [r7, #24]
 800d500:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800d502:	6979      	ldr	r1, [r7, #20]
 800d504:	69f8      	ldr	r0, [r7, #28]
 800d506:	f012 ff5f 	bl	80203c8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	3310      	adds	r3, #16
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	6978      	ldr	r0, [r7, #20]
 800d514:	4798      	blx	r3
    newTransition->invalidate();
 800d516:	697b      	ldr	r3, [r7, #20]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	3314      	adds	r3, #20
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	6978      	ldr	r0, [r7, #20]
 800d520:	4798      	blx	r3
    return newPresenter;
 800d522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d524:	4618      	mov	r0, r3
 800d526:	373c      	adds	r7, #60	; 0x3c
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd90      	pop	{r4, r7, pc}
 800d52c:	0802fa48 	.word	0x0802fa48
 800d530:	0803133c 	.word	0x0803133c
 800d534:	0802fad8 	.word	0x0802fad8
 800d538:	0802fb20 	.word	0x0802fb20
 800d53c:	0802fbc4 	.word	0x0802fbc4

0800d540 <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800d540:	b590      	push	{r4, r7, lr}
 800d542:	b08f      	sub	sp, #60	; 0x3c
 800d544:	af00      	add	r7, sp, #0
 800d546:	60f8      	str	r0, [r7, #12]
 800d548:	60b9      	str	r1, [r7, #8]
 800d54a:	607a      	str	r2, [r7, #4]
 800d54c:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	689a      	ldr	r2, [r3, #8]
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	689b      	ldr	r3, [r3, #8]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	3320      	adds	r3, #32
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	4610      	mov	r0, r2
 800d55e:	4798      	blx	r3
 800d560:	4602      	mov	r2, r0
 800d562:	f640 1373 	movw	r3, #2419	; 0x973
 800d566:	429a      	cmp	r2, r3
 800d568:	d805      	bhi.n	800d576 <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800d56a:	4b86      	ldr	r3, [pc, #536]	; (800d784 <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800d56c:	4a86      	ldr	r2, [pc, #536]	; (800d788 <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d56e:	21a7      	movs	r1, #167	; 0xa7
 800d570:	4886      	ldr	r0, [pc, #536]	; (800d78c <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d572:	f020 fe79 	bl	802e268 <__assert_func>
 800d576:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	685a      	ldr	r2, [r3, #4]
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	685b      	ldr	r3, [r3, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	3320      	adds	r3, #32
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	4610      	mov	r0, r2
 800d588:	4798      	blx	r3
 800d58a:	4603      	mov	r3, r0
 800d58c:	2b0f      	cmp	r3, #15
 800d58e:	d805      	bhi.n	800d59c <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800d590:	4b7f      	ldr	r3, [pc, #508]	; (800d790 <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800d592:	4a7d      	ldr	r2, [pc, #500]	; (800d788 <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d594:	21a8      	movs	r1, #168	; 0xa8
 800d596:	487d      	ldr	r0, [pc, #500]	; (800d78c <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d598:	f020 fe66 	bl	802e268 <__assert_func>
 800d59c:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	68da      	ldr	r2, [r3, #12]
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	68db      	ldr	r3, [r3, #12]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	3320      	adds	r3, #32
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	4610      	mov	r0, r2
 800d5ae:	4798      	blx	r3
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	2b53      	cmp	r3, #83	; 0x53
 800d5b4:	d805      	bhi.n	800d5c2 <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800d5b6:	4b77      	ldr	r3, [pc, #476]	; (800d794 <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 800d5b8:	4a73      	ldr	r2, [pc, #460]	; (800d788 <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d5ba:	21a9      	movs	r1, #169	; 0xa9
 800d5bc:	4873      	ldr	r0, [pc, #460]	; (800d78c <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d5be:	f020 fe53 	bl	802e268 <__assert_func>
 800d5c2:	bf00      	nop
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	62bb      	str	r3, [r7, #40]	; 0x28
 800d5c8:	68bb      	ldr	r3, [r7, #8]
 800d5ca:	627b      	str	r3, [r7, #36]	; 0x24
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800d5d0:	f011 fd42 	bl	801f058 <_ZN8touchgfx11Application11getInstanceEv>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f011 fd8c 	bl	801f0f4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800d5dc:	6a3b      	ldr	r3, [r7, #32]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d008      	beq.n	800d5f6 <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 800d5e4:	6a3b      	ldr	r3, [r7, #32]
 800d5e6:	681a      	ldr	r2, [r3, #0]
 800d5e8:	6a3b      	ldr	r3, [r7, #32]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	330c      	adds	r3, #12
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	4610      	mov	r0, r2
 800d5f4:	4798      	blx	r3
    if (*currentTrans)
 800d5f6:	6a3b      	ldr	r3, [r7, #32]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d007      	beq.n	800d60e <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 800d5fe:	6a3b      	ldr	r3, [r7, #32]
 800d600:	681a      	ldr	r2, [r3, #0]
 800d602:	6a3b      	ldr	r3, [r7, #32]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	4610      	mov	r0, r2
 800d60c:	4798      	blx	r3
    if (*currentScreen)
 800d60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d008      	beq.n	800d628 <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 800d616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d618:	681a      	ldr	r2, [r3, #0]
 800d61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	3314      	adds	r3, #20
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	4610      	mov	r0, r2
 800d626:	4798      	blx	r3
    if (*currentPresenter)
 800d628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d008      	beq.n	800d642 <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 800d630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d632:	681a      	ldr	r2, [r3, #0]
 800d634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	3304      	adds	r3, #4
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	4610      	mov	r0, r2
 800d640:	4798      	blx	r3
    if (*currentScreen)
 800d642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d007      	beq.n	800d65a <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 800d64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d64c:	681a      	ldr	r2, [r3, #0]
 800d64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	4610      	mov	r0, r2
 800d658:	4798      	blx	r3
    if (*currentPresenter)
 800d65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d008      	beq.n	800d674 <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 800d662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d664:	681a      	ldr	r2, [r3, #0]
 800d666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	3308      	adds	r3, #8
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	4610      	mov	r0, r2
 800d672:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	68db      	ldr	r3, [r3, #12]
 800d678:	2100      	movs	r1, #0
 800d67a:	4618      	mov	r0, r3
 800d67c:	f000 f9be 	bl	800d9fc <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 800d680:	4603      	mov	r3, r0
 800d682:	4619      	mov	r1, r3
 800d684:	2054      	movs	r0, #84	; 0x54
 800d686:	f7ff f911 	bl	800c8ac <_ZnwjPv>
 800d68a:	4604      	mov	r4, r0
 800d68c:	2c00      	cmp	r4, #0
 800d68e:	d005      	beq.n	800d69c <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>
 800d690:	2114      	movs	r1, #20
 800d692:	4620      	mov	r0, r4
 800d694:	f000 f9e8 	bl	800da68 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 800d698:	4623      	mov	r3, r4
 800d69a:	e000      	b.n	800d69e <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15e>
 800d69c:	4623      	mov	r3, r4
 800d69e:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	689b      	ldr	r3, [r3, #8]
 800d6a4:	2100      	movs	r1, #0
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	f000 fa72 	bl	800db90 <_ZN8touchgfx17AbstractPartition2atI18sequenceScreenViewEERT_t>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	4619      	mov	r1, r3
 800d6b0:	f640 1074 	movw	r0, #2420	; 0x974
 800d6b4:	f7ff f8fa 	bl	800c8ac <_ZnwjPv>
 800d6b8:	4604      	mov	r4, r0
 800d6ba:	2c00      	cmp	r4, #0
 800d6bc:	d004      	beq.n	800d6c8 <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x188>
 800d6be:	4620      	mov	r0, r4
 800d6c0:	f003 fe5e 	bl	8011380 <_ZN18sequenceScreenViewC1Ev>
 800d6c4:	4623      	mov	r3, r4
 800d6c6:	e000      	b.n	800d6ca <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x18a>
 800d6c8:	4623      	mov	r3, r4
 800d6ca:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	685b      	ldr	r3, [r3, #4]
 800d6d0:	2100      	movs	r1, #0
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f000 fa6f 	bl	800dbb6 <_ZN8touchgfx17AbstractPartition2atI23sequenceScreenPresenterEERT_t>
 800d6d8:	4603      	mov	r3, r0
 800d6da:	4619      	mov	r1, r3
 800d6dc:	2010      	movs	r0, #16
 800d6de:	f7ff f8e5 	bl	800c8ac <_ZnwjPv>
 800d6e2:	4604      	mov	r4, r0
 800d6e4:	2c00      	cmp	r4, #0
 800d6e6:	d005      	beq.n	800d6f4 <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800d6e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d6ea:	4620      	mov	r0, r4
 800d6ec:	f003 fdca 	bl	8011284 <_ZN23sequenceScreenPresenterC1ER18sequenceScreenView>
 800d6f0:	4623      	mov	r3, r4
 800d6f2:	e000      	b.n	800d6f6 <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 800d6f4:	4623      	mov	r3, r4
 800d6f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d6fc:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d702:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d708:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800d70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d002      	beq.n	800d716 <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d6>
 800d710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d712:	3304      	adds	r3, #4
 800d714:	e000      	b.n	800d718 <_ZN8touchgfx14makeTransitionI18sequenceScreenView23sequenceScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d8>
 800d716:	2300      	movs	r3, #0
 800d718:	4619      	mov	r1, r3
 800d71a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800d71c:	f7ff fac2 	bl	800cca4 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800d720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d722:	3304      	adds	r3, #4
 800d724:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d726:	4618      	mov	r0, r3
 800d728:	f7ff fafa 	bl	800cd20 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800d72c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d72e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d730:	4618      	mov	r0, r3
 800d732:	f000 fa53 	bl	800dbdc <_ZN8touchgfx4ViewI23sequenceScreenPresenterE4bindERS1_>
 800d736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d738:	61fb      	str	r3, [r7, #28]
 800d73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d73c:	61bb      	str	r3, [r7, #24]
 800d73e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d740:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800d742:	69fb      	ldr	r3, [r7, #28]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	330c      	adds	r3, #12
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	69f8      	ldr	r0, [r7, #28]
 800d74c:	4798      	blx	r3
    newPresenter->activate();
 800d74e:	69bb      	ldr	r3, [r7, #24]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	69b8      	ldr	r0, [r7, #24]
 800d756:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800d758:	6979      	ldr	r1, [r7, #20]
 800d75a:	69f8      	ldr	r0, [r7, #28]
 800d75c:	f012 fe34 	bl	80203c8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800d760:	697b      	ldr	r3, [r7, #20]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	3310      	adds	r3, #16
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	6978      	ldr	r0, [r7, #20]
 800d76a:	4798      	blx	r3
    newTransition->invalidate();
 800d76c:	697b      	ldr	r3, [r7, #20]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	3314      	adds	r3, #20
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	6978      	ldr	r0, [r7, #20]
 800d776:	4798      	blx	r3
    return newPresenter;
 800d778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d77a:	4618      	mov	r0, r3
 800d77c:	373c      	adds	r7, #60	; 0x3c
 800d77e:	46bd      	mov	sp, r7
 800d780:	bd90      	pop	{r4, r7, pc}
 800d782:	bf00      	nop
 800d784:	0802fa48 	.word	0x0802fa48
 800d788:	08031464 	.word	0x08031464
 800d78c:	0802fad8 	.word	0x0802fad8
 800d790:	0802fb20 	.word	0x0802fb20
 800d794:	0802fbc4 	.word	0x0802fbc4

0800d798 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800d798:	b580      	push	{r7, lr}
 800d79a:	b082      	sub	sp, #8
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
 800d7a0:	460b      	mov	r3, r1
 800d7a2:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	3324      	adds	r3, #36	; 0x24
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	887a      	ldrh	r2, [r7, #2]
 800d7ae:	4611      	mov	r1, r2
 800d7b0:	6878      	ldr	r0, [r7, #4]
 800d7b2:	4798      	blx	r3
 800d7b4:	4603      	mov	r3, r0
    }
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	3708      	adds	r7, #8
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	bd80      	pop	{r7, pc}

0800d7be <_ZN8touchgfx17AbstractPartition2atI14mainScreenViewEERT_t>:
    T& at(const uint16_t index)
 800d7be:	b580      	push	{r7, lr}
 800d7c0:	b082      	sub	sp, #8
 800d7c2:	af00      	add	r7, sp, #0
 800d7c4:	6078      	str	r0, [r7, #4]
 800d7c6:	460b      	mov	r3, r1
 800d7c8:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	3324      	adds	r3, #36	; 0x24
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	887a      	ldrh	r2, [r7, #2]
 800d7d4:	4611      	mov	r1, r2
 800d7d6:	6878      	ldr	r0, [r7, #4]
 800d7d8:	4798      	blx	r3
 800d7da:	4603      	mov	r3, r0
    }
 800d7dc:	4618      	mov	r0, r3
 800d7de:	3708      	adds	r7, #8
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bd80      	pop	{r7, pc}

0800d7e4 <_ZN8touchgfx17AbstractPartition2atI19mainScreenPresenterEERT_t>:
    T& at(const uint16_t index)
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b082      	sub	sp, #8
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
 800d7ec:	460b      	mov	r3, r1
 800d7ee:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	3324      	adds	r3, #36	; 0x24
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	887a      	ldrh	r2, [r7, #2]
 800d7fa:	4611      	mov	r1, r2
 800d7fc:	6878      	ldr	r0, [r7, #4]
 800d7fe:	4798      	blx	r3
 800d800:	4603      	mov	r3, r0
    }
 800d802:	4618      	mov	r0, r3
 800d804:	3708      	adds	r7, #8
 800d806:	46bd      	mov	sp, r7
 800d808:	bd80      	pop	{r7, pc}

0800d80a <_ZN8touchgfx4ViewI19mainScreenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 800d80a:	b480      	push	{r7}
 800d80c:	b083      	sub	sp, #12
 800d80e:	af00      	add	r7, sp, #0
 800d810:	6078      	str	r0, [r7, #4]
 800d812:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	683a      	ldr	r2, [r7, #0]
 800d818:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800d81a:	bf00      	nop
 800d81c:	370c      	adds	r7, #12
 800d81e:	46bd      	mov	sp, r7
 800d820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d824:	4770      	bx	lr

0800d826 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE3EEEEERT_t>:
    T& at(const uint16_t index)
 800d826:	b580      	push	{r7, lr}
 800d828:	b082      	sub	sp, #8
 800d82a:	af00      	add	r7, sp, #0
 800d82c:	6078      	str	r0, [r7, #4]
 800d82e:	460b      	mov	r3, r1
 800d830:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	3324      	adds	r3, #36	; 0x24
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	887a      	ldrh	r2, [r7, #2]
 800d83c:	4611      	mov	r1, r2
 800d83e:	6878      	ldr	r0, [r7, #4]
 800d840:	4798      	blx	r3
 800d842:	4603      	mov	r3, r0
    }
 800d844:	4618      	mov	r0, r3
 800d846:	3708      	adds	r7, #8
 800d848:	46bd      	mov	sp, r7
 800d84a:	bd80      	pop	{r7, pc}

0800d84c <_ZN8touchgfx14SnapshotWidgetD1Ev>:
 * A widget that is able to make a snapshot of the area the SnapshotWidget covers into either a
 * Bitmap or into animation storage (if this available). Once the snapshot has been
 * taken using SnapshowWidget::makeSnapshot(), the SnapshotWidget will show the captured
 * snapshot when it is subsequently drawn.
 */
class SnapshotWidget : public Widget
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b082      	sub	sp, #8
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
 800d854:	4a05      	ldr	r2, [pc, #20]	; (800d86c <_ZN8touchgfx14SnapshotWidgetD1Ev+0x20>)
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	601a      	str	r2, [r3, #0]
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	4618      	mov	r0, r3
 800d85e:	f7ff fa6d 	bl	800cd3c <_ZN8touchgfx6WidgetD1Ev>
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	4618      	mov	r0, r3
 800d866:	3708      	adds	r7, #8
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}
 800d86c:	08033054 	.word	0x08033054

0800d870 <_ZN8touchgfx14SnapshotWidgetD0Ev>:
 800d870:	b580      	push	{r7, lr}
 800d872:	b082      	sub	sp, #8
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
 800d878:	6878      	ldr	r0, [r7, #4]
 800d87a:	f7ff ffe7 	bl	800d84c <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800d87e:	212c      	movs	r1, #44	; 0x2c
 800d880:	6878      	ldr	r0, [r7, #4]
 800d882:	f01f fc23 	bl	802d0cc <_ZdlPvj>
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	4618      	mov	r0, r3
 800d88a:	3708      	adds	r7, #8
 800d88c:	46bd      	mov	sp, r7
 800d88e:	bd80      	pop	{r7, pc}

0800d890 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800d890:	b580      	push	{r7, lr}
 800d892:	b082      	sub	sp, #8
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
 800d898:	4a05      	ldr	r2, [pc, #20]	; (800d8b0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev+0x20>)
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	601a      	str	r2, [r3, #0]
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	f000 fa13 	bl	800dccc <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	3708      	adds	r7, #8
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}
 800d8b0:	08031114 	.word	0x08031114

0800d8b4 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED0Ev>:
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b082      	sub	sp, #8
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	f7ff ffe7 	bl	800d890 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>
 800d8c2:	2110      	movs	r1, #16
 800d8c4:	6878      	ldr	r0, [r7, #4]
 800d8c6:	f01f fc01 	bl	802d0cc <_ZdlPvj>
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	3708      	adds	r7, #8
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}

0800d8d4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh>:
    /**
     * Initializes a new instance of the SlideTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps (ticks) in the transition animation, default is 20.
     */
    SlideTransition(const uint8_t transitionSteps = 20)
 800d8d4:	b590      	push	{r4, r7, lr}
 800d8d6:	b087      	sub	sp, #28
 800d8d8:	af02      	add	r7, sp, #8
 800d8da:	6078      	str	r0, [r7, #4]
 800d8dc:	460b      	mov	r3, r1
 800d8de:	70fb      	strb	r3, [r7, #3]
          snapshotPtr(&snapshot),
          handleTickCallback(this, &SlideTransition::tickMoveDrawable),
          direction(templateDirection),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0)
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f7ff f94c 	bl	800cb80 <_ZN8touchgfx10TransitionC1Ev>
 800d8e8:	4a3f      	ldr	r2, [pc, #252]	; (800d9e8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x114>)
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	601a      	str	r2, [r3, #0]
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	330c      	adds	r3, #12
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	f00f fefa 	bl	801d6ec <_ZN8touchgfx14SnapshotWidgetC1Ev>
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	f103 020c 	add.w	r2, r3, #12
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	639a      	str	r2, [r3, #56]	; 0x38
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 800d908:	4a38      	ldr	r2, [pc, #224]	; (800d9ec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x118>)
 800d90a:	f107 0308 	add.w	r3, r7, #8
 800d90e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d912:	e883 0003 	stmia.w	r3, {r0, r1}
 800d916:	f107 0308 	add.w	r3, r7, #8
 800d91a:	cb0c      	ldmia	r3, {r2, r3}
 800d91c:	6879      	ldr	r1, [r7, #4]
 800d91e:	4620      	mov	r0, r4
 800d920:	f000 f9b4 	bl	800dc8c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2203      	movs	r2, #3
 800d928:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	78fa      	ldrb	r2, [r7, #3]
 800d930:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2200      	movs	r2, #0
 800d938:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2200      	movs	r2, #0
 800d940:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    {
        if (HAL::USE_ANIMATION_STORAGE)
 800d944:	4b2a      	ldr	r3, [pc, #168]	; (800d9f0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x11c>)
 800d946:	781b      	ldrb	r3, [r3, #0]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d047      	beq.n	800d9dc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
        {
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	f103 000c 	add.w	r0, r3, #12
 800d952:	4b28      	ldr	r3, [pc, #160]	; (800d9f4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x120>)
 800d954:	881b      	ldrh	r3, [r3, #0]
 800d956:	b21a      	sxth	r2, r3
 800d958:	4b27      	ldr	r3, [pc, #156]	; (800d9f8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x124>)
 800d95a:	881b      	ldrh	r3, [r3, #0]
 800d95c:	b21b      	sxth	r3, r3
 800d95e:	9300      	str	r3, [sp, #0]
 800d960:	4613      	mov	r3, r2
 800d962:	2200      	movs	r2, #0
 800d964:	2100      	movs	r1, #0
 800d966:	f7fe ffcd 	bl	800c904 <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	330c      	adds	r3, #12
 800d96e:	4618      	mov	r0, r3
 800d970:	f00f fe3f 	bl	801d5f2 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>

            switch (direction)
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800d97a:	2b03      	cmp	r3, #3
 800d97c:	d82a      	bhi.n	800d9d4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x100>
 800d97e:	a201      	add	r2, pc, #4	; (adr r2, 800d984 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0xb0>)
 800d980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d984:	0800d9b5 	.word	0x0800d9b5
 800d988:	0800d9c3 	.word	0x0800d9c3
 800d98c:	0800d995 	.word	0x0800d995
 800d990:	0800d9a7 	.word	0x0800d9a7
            {
            case EAST:
                targetValue = -HAL::DISPLAY_WIDTH;
 800d994:	4b17      	ldr	r3, [pc, #92]	; (800d9f4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x120>)
 800d996:	881b      	ldrh	r3, [r3, #0]
 800d998:	425b      	negs	r3, r3
 800d99a:	b29b      	uxth	r3, r3
 800d99c:	b21a      	sxth	r2, r3
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800d9a4:	e01a      	b.n	800d9dc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
            case WEST:
                targetValue = HAL::DISPLAY_WIDTH;
 800d9a6:	4b13      	ldr	r3, [pc, #76]	; (800d9f4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x120>)
 800d9a8:	881b      	ldrh	r3, [r3, #0]
 800d9aa:	b21a      	sxth	r2, r3
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800d9b2:	e013      	b.n	800d9dc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
            case NORTH:
                targetValue = HAL::DISPLAY_HEIGHT;
 800d9b4:	4b10      	ldr	r3, [pc, #64]	; (800d9f8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x124>)
 800d9b6:	881b      	ldrh	r3, [r3, #0]
 800d9b8:	b21a      	sxth	r2, r3
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800d9c0:	e00c      	b.n	800d9dc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
            case SOUTH:
                targetValue = -HAL::DISPLAY_HEIGHT;
 800d9c2:	4b0d      	ldr	r3, [pc, #52]	; (800d9f8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x124>)
 800d9c4:	881b      	ldrh	r3, [r3, #0]
 800d9c6:	425b      	negs	r3, r3
 800d9c8:	b29b      	uxth	r3, r3
 800d9ca:	b21a      	sxth	r2, r3
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800d9d2:	e003      	b.n	800d9dc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
            default:
                done = true;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2201      	movs	r2, #1
 800d9d8:	721a      	strb	r2, [r3, #8]
                // Nothing to do here
                break;
 800d9da:	bf00      	nop
            }
        }
    }
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	4618      	mov	r0, r3
 800d9e0:	3714      	adds	r7, #20
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd90      	pop	{r4, r7, pc}
 800d9e6:	bf00      	nop
 800d9e8:	080310e8 	.word	0x080310e8
 800d9ec:	0802fc68 	.word	0x0802fc68
 800d9f0:	200128a3 	.word	0x200128a3
 800d9f4:	20012898 	.word	0x20012898
 800d9f8:	2001289a 	.word	0x2001289a

0800d9fc <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b082      	sub	sp, #8
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	460b      	mov	r3, r1
 800da06:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	3324      	adds	r3, #36	; 0x24
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	887a      	ldrh	r2, [r7, #2]
 800da12:	4611      	mov	r1, r2
 800da14:	6878      	ldr	r0, [r7, #4]
 800da16:	4798      	blx	r3
 800da18:	4603      	mov	r3, r0
    }
 800da1a:	4618      	mov	r0, r3
 800da1c:	3708      	adds	r7, #8
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}
	...

0800da24 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>:
 800da24:	b580      	push	{r7, lr}
 800da26:	b082      	sub	sp, #8
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
 800da2c:	4a05      	ldr	r2, [pc, #20]	; (800da44 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev+0x20>)
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	601a      	str	r2, [r3, #0]
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	4618      	mov	r0, r3
 800da36:	f000 f949 	bl	800dccc <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	4618      	mov	r0, r3
 800da3e:	3708      	adds	r7, #8
 800da40:	46bd      	mov	sp, r7
 800da42:	bd80      	pop	{r7, pc}
 800da44:	08031158 	.word	0x08031158

0800da48 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED0Ev>:
 800da48:	b580      	push	{r7, lr}
 800da4a:	b082      	sub	sp, #8
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
 800da50:	6878      	ldr	r0, [r7, #4]
 800da52:	f7ff ffe7 	bl	800da24 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 800da56:	2110      	movs	r1, #16
 800da58:	6878      	ldr	r0, [r7, #4]
 800da5a:	f01f fb37 	bl	802d0cc <_ZdlPvj>
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	4618      	mov	r0, r3
 800da62:	3708      	adds	r7, #8
 800da64:	46bd      	mov	sp, r7
 800da66:	bd80      	pop	{r7, pc}

0800da68 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>:
    SlideTransition(const uint8_t transitionSteps = 20)
 800da68:	b590      	push	{r4, r7, lr}
 800da6a:	b087      	sub	sp, #28
 800da6c:	af02      	add	r7, sp, #8
 800da6e:	6078      	str	r0, [r7, #4]
 800da70:	460b      	mov	r3, r1
 800da72:	70fb      	strb	r3, [r7, #3]
          calculatedValue(0)
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	4618      	mov	r0, r3
 800da78:	f7ff f882 	bl	800cb80 <_ZN8touchgfx10TransitionC1Ev>
 800da7c:	4a3f      	ldr	r2, [pc, #252]	; (800db7c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x114>)
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	601a      	str	r2, [r3, #0]
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	330c      	adds	r3, #12
 800da86:	4618      	mov	r0, r3
 800da88:	f00f fe30 	bl	801d6ec <_ZN8touchgfx14SnapshotWidgetC1Ev>
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	f103 020c 	add.w	r2, r3, #12
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	639a      	str	r2, [r3, #56]	; 0x38
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 800da9c:	4a38      	ldr	r2, [pc, #224]	; (800db80 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x118>)
 800da9e:	f107 0308 	add.w	r3, r7, #8
 800daa2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800daa6:	e883 0003 	stmia.w	r3, {r0, r1}
 800daaa:	f107 0308 	add.w	r3, r7, #8
 800daae:	cb0c      	ldmia	r3, {r2, r3}
 800dab0:	6879      	ldr	r1, [r7, #4]
 800dab2:	4620      	mov	r0, r4
 800dab4:	f000 f964 	bl	800dd80 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2202      	movs	r2, #2
 800dabc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	78fa      	ldrb	r2, [r7, #3]
 800dac4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2200      	movs	r2, #0
 800dacc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2200      	movs	r2, #0
 800dad4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
        if (HAL::USE_ANIMATION_STORAGE)
 800dad8:	4b2a      	ldr	r3, [pc, #168]	; (800db84 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x11c>)
 800dada:	781b      	ldrb	r3, [r3, #0]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d047      	beq.n	800db70 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	f103 000c 	add.w	r0, r3, #12
 800dae6:	4b28      	ldr	r3, [pc, #160]	; (800db88 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 800dae8:	881b      	ldrh	r3, [r3, #0]
 800daea:	b21a      	sxth	r2, r3
 800daec:	4b27      	ldr	r3, [pc, #156]	; (800db8c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 800daee:	881b      	ldrh	r3, [r3, #0]
 800daf0:	b21b      	sxth	r3, r3
 800daf2:	9300      	str	r3, [sp, #0]
 800daf4:	4613      	mov	r3, r2
 800daf6:	2200      	movs	r2, #0
 800daf8:	2100      	movs	r1, #0
 800dafa:	f7fe ff03 	bl	800c904 <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	330c      	adds	r3, #12
 800db02:	4618      	mov	r0, r3
 800db04:	f00f fd75 	bl	801d5f2 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>
            switch (direction)
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800db0e:	2b03      	cmp	r3, #3
 800db10:	d82a      	bhi.n	800db68 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x100>
 800db12:	a201      	add	r2, pc, #4	; (adr r2, 800db18 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xb0>)
 800db14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db18:	0800db49 	.word	0x0800db49
 800db1c:	0800db57 	.word	0x0800db57
 800db20:	0800db29 	.word	0x0800db29
 800db24:	0800db3b 	.word	0x0800db3b
                targetValue = -HAL::DISPLAY_WIDTH;
 800db28:	4b17      	ldr	r3, [pc, #92]	; (800db88 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 800db2a:	881b      	ldrh	r3, [r3, #0]
 800db2c:	425b      	negs	r3, r3
 800db2e:	b29b      	uxth	r3, r3
 800db30:	b21a      	sxth	r2, r3
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800db38:	e01a      	b.n	800db70 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
                targetValue = HAL::DISPLAY_WIDTH;
 800db3a:	4b13      	ldr	r3, [pc, #76]	; (800db88 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 800db3c:	881b      	ldrh	r3, [r3, #0]
 800db3e:	b21a      	sxth	r2, r3
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800db46:	e013      	b.n	800db70 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
                targetValue = HAL::DISPLAY_HEIGHT;
 800db48:	4b10      	ldr	r3, [pc, #64]	; (800db8c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 800db4a:	881b      	ldrh	r3, [r3, #0]
 800db4c:	b21a      	sxth	r2, r3
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800db54:	e00c      	b.n	800db70 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
                targetValue = -HAL::DISPLAY_HEIGHT;
 800db56:	4b0d      	ldr	r3, [pc, #52]	; (800db8c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 800db58:	881b      	ldrh	r3, [r3, #0]
 800db5a:	425b      	negs	r3, r3
 800db5c:	b29b      	uxth	r3, r3
 800db5e:	b21a      	sxth	r2, r3
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800db66:	e003      	b.n	800db70 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
                done = true;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2201      	movs	r2, #1
 800db6c:	721a      	strb	r2, [r3, #8]
                break;
 800db6e:	bf00      	nop
    }
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	4618      	mov	r0, r3
 800db74:	3714      	adds	r7, #20
 800db76:	46bd      	mov	sp, r7
 800db78:	bd90      	pop	{r4, r7, pc}
 800db7a:	bf00      	nop
 800db7c:	0803112c 	.word	0x0803112c
 800db80:	0802fc70 	.word	0x0802fc70
 800db84:	200128a3 	.word	0x200128a3
 800db88:	20012898 	.word	0x20012898
 800db8c:	2001289a 	.word	0x2001289a

0800db90 <_ZN8touchgfx17AbstractPartition2atI18sequenceScreenViewEERT_t>:
    T& at(const uint16_t index)
 800db90:	b580      	push	{r7, lr}
 800db92:	b082      	sub	sp, #8
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
 800db98:	460b      	mov	r3, r1
 800db9a:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	3324      	adds	r3, #36	; 0x24
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	887a      	ldrh	r2, [r7, #2]
 800dba6:	4611      	mov	r1, r2
 800dba8:	6878      	ldr	r0, [r7, #4]
 800dbaa:	4798      	blx	r3
 800dbac:	4603      	mov	r3, r0
    }
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3708      	adds	r7, #8
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}

0800dbb6 <_ZN8touchgfx17AbstractPartition2atI23sequenceScreenPresenterEERT_t>:
    T& at(const uint16_t index)
 800dbb6:	b580      	push	{r7, lr}
 800dbb8:	b082      	sub	sp, #8
 800dbba:	af00      	add	r7, sp, #0
 800dbbc:	6078      	str	r0, [r7, #4]
 800dbbe:	460b      	mov	r3, r1
 800dbc0:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	3324      	adds	r3, #36	; 0x24
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	887a      	ldrh	r2, [r7, #2]
 800dbcc:	4611      	mov	r1, r2
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	4798      	blx	r3
 800dbd2:	4603      	mov	r3, r0
    }
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	3708      	adds	r7, #8
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}

0800dbdc <_ZN8touchgfx4ViewI23sequenceScreenPresenterE4bindERS1_>:
    void bind(T& presenter)
 800dbdc:	b480      	push	{r7}
 800dbde:	b083      	sub	sp, #12
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
 800dbe4:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	683a      	ldr	r2, [r7, #0]
 800dbea:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800dbec:	bf00      	nop
 800dbee:	370c      	adds	r7, #12
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf6:	4770      	bx	lr

0800dbf8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE>:
    /**
     * Moves the Drawable.
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b082      	sub	sp, #8
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
 800dc00:	6039      	str	r1, [r7, #0]
    {
        if (&d == snapshotPtr)
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc06:	683a      	ldr	r2, [r7, #0]
 800dc08:	429a      	cmp	r2, r3
 800dc0a:	d02a      	beq.n	800dc62 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x6a>
        {
            return;
        }

        switch (direction)
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800dc12:	2b03      	cmp	r3, #3
 800dc14:	d820      	bhi.n	800dc58 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x60>
 800dc16:	a201      	add	r2, pc, #4	; (adr r2, 800dc1c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x24>)
 800dc18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc1c:	0800dc43 	.word	0x0800dc43
 800dc20:	0800dc43 	.word	0x0800dc43
 800dc24:	0800dc2d 	.word	0x0800dc2d
 800dc28:	0800dc2d 	.word	0x0800dc2d
        {
        case EAST:
        case WEST:
            d.moveRelative(calculatedValue, 0);
 800dc2c:	683b      	ldr	r3, [r7, #0]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	3354      	adds	r3, #84	; 0x54
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	687a      	ldr	r2, [r7, #4]
 800dc36:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	6838      	ldr	r0, [r7, #0]
 800dc3e:	4798      	blx	r3
            break;
 800dc40:	e010      	b.n	800dc64 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x6c>
        case NORTH:
        case SOUTH:
            d.moveRelative(0, calculatedValue);
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	3354      	adds	r3, #84	; 0x54
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	687a      	ldr	r2, [r7, #4]
 800dc4c:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 800dc50:	2100      	movs	r1, #0
 800dc52:	6838      	ldr	r0, [r7, #0]
 800dc54:	4798      	blx	r3
            break;
 800dc56:	e005      	b.n	800dc64 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x6c>
        default:
            // Special case, do not move. Class NoTransition can be used instead.
            done = true;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2201      	movs	r2, #1
 800dc5c:	721a      	strb	r2, [r3, #8]
            break;
 800dc5e:	bf00      	nop
 800dc60:	e000      	b.n	800dc64 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x6c>
            return;
 800dc62:	bf00      	nop
        }
    }
 800dc64:	3708      	adds	r7, #8
 800dc66:	46bd      	mov	sp, r7
 800dc68:	bd80      	pop	{r7, pc}
 800dc6a:	bf00      	nop

0800dc6c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800dc6c:	b480      	push	{r7}
 800dc6e:	b083      	sub	sp, #12
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
 800dc74:	4a04      	ldr	r2, [pc, #16]	; (800dc88 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev+0x1c>)
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	601a      	str	r2, [r3, #0]
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	370c      	adds	r7, #12
 800dc80:	46bd      	mov	sp, r7
 800dc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc86:	4770      	bx	lr
 800dc88:	08031170 	.word	0x08031170

0800dc8c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b084      	sub	sp, #16
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	60f8      	str	r0, [r7, #12]
 800dc94:	60b9      	str	r1, [r7, #8]
 800dc96:	4639      	mov	r1, r7
 800dc98:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	4618      	mov	r0, r3
 800dca0:	f7ff ffe4 	bl	800dc6c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 800dca4:	4a08      	ldr	r2, [pc, #32]	; (800dcc8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	68ba      	ldr	r2, [r7, #8]
 800dcae:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	3308      	adds	r3, #8
 800dcb4:	463a      	mov	r2, r7
 800dcb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dcba:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	3710      	adds	r7, #16
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bd80      	pop	{r7, pc}
 800dcc8:	08031114 	.word	0x08031114

0800dccc <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>:
    virtual ~GenericCallback()
 800dccc:	b480      	push	{r7}
 800dcce:	b083      	sub	sp, #12
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
    }
 800dcd4:	4a04      	ldr	r2, [pc, #16]	; (800dce8 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev+0x1c>)
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	601a      	str	r2, [r3, #0]
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	4618      	mov	r0, r3
 800dcde:	370c      	adds	r7, #12
 800dce0:	46bd      	mov	sp, r7
 800dce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce6:	4770      	bx	lr
 800dce8:	08031170 	.word	0x08031170

0800dcec <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED0Ev>:
    virtual ~GenericCallback()
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b082      	sub	sp, #8
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
    }
 800dcf4:	6878      	ldr	r0, [r7, #4]
 800dcf6:	f7ff ffe9 	bl	800dccc <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800dcfa:	2104      	movs	r1, #4
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	f01f f9e5 	bl	802d0cc <_ZdlPvj>
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	4618      	mov	r0, r3
 800dd06:	3708      	adds	r7, #8
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}

0800dd0c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE>:
    virtual void tickMoveDrawable(Drawable& d)
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b082      	sub	sp, #8
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
 800dd14:	6039      	str	r1, [r7, #0]
        if (&d == snapshotPtr)
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd1a:	683a      	ldr	r2, [r7, #0]
 800dd1c:	429a      	cmp	r2, r3
 800dd1e:	d02a      	beq.n	800dd76 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6a>
        switch (direction)
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800dd26:	2b03      	cmp	r3, #3
 800dd28:	d820      	bhi.n	800dd6c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x60>
 800dd2a:	a201      	add	r2, pc, #4	; (adr r2, 800dd30 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x24>)
 800dd2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd30:	0800dd57 	.word	0x0800dd57
 800dd34:	0800dd57 	.word	0x0800dd57
 800dd38:	0800dd41 	.word	0x0800dd41
 800dd3c:	0800dd41 	.word	0x0800dd41
            d.moveRelative(calculatedValue, 0);
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	3354      	adds	r3, #84	; 0x54
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	687a      	ldr	r2, [r7, #4]
 800dd4a:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 800dd4e:	2200      	movs	r2, #0
 800dd50:	6838      	ldr	r0, [r7, #0]
 800dd52:	4798      	blx	r3
            break;
 800dd54:	e010      	b.n	800dd78 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
            d.moveRelative(0, calculatedValue);
 800dd56:	683b      	ldr	r3, [r7, #0]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	3354      	adds	r3, #84	; 0x54
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	687a      	ldr	r2, [r7, #4]
 800dd60:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 800dd64:	2100      	movs	r1, #0
 800dd66:	6838      	ldr	r0, [r7, #0]
 800dd68:	4798      	blx	r3
            break;
 800dd6a:	e005      	b.n	800dd78 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
            done = true;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	2201      	movs	r2, #1
 800dd70:	721a      	strb	r2, [r3, #8]
            break;
 800dd72:	bf00      	nop
 800dd74:	e000      	b.n	800dd78 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
            return;
 800dd76:	bf00      	nop
    }
 800dd78:	3708      	adds	r7, #8
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bd80      	pop	{r7, pc}
 800dd7e:	bf00      	nop

0800dd80 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b084      	sub	sp, #16
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	60f8      	str	r0, [r7, #12]
 800dd88:	60b9      	str	r1, [r7, #8]
 800dd8a:	4639      	mov	r1, r7
 800dd8c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	4618      	mov	r0, r3
 800dd94:	f7ff ff6a 	bl	800dc6c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 800dd98:	4a08      	ldr	r2, [pc, #32]	; (800ddbc <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	68ba      	ldr	r2, [r7, #8]
 800dda2:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	3308      	adds	r3, #8
 800dda8:	463a      	mov	r2, r7
 800ddaa:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ddae:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	3710      	adds	r7, #16
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}
 800ddbc:	08031158 	.word	0x08031158

0800ddc0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev>:
class SlideTransition : public Transition
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b082      	sub	sp, #8
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
 800ddc8:	4a0a      	ldr	r2, [pc, #40]	; (800ddf4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev+0x34>)
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	601a      	str	r2, [r3, #0]
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	333c      	adds	r3, #60	; 0x3c
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f7ff fd5c 	bl	800d890 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	330c      	adds	r3, #12
 800dddc:	4618      	mov	r0, r3
 800ddde:	f7ff fd35 	bl	800d84c <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	4618      	mov	r0, r3
 800dde6:	f7fe fee1 	bl	800cbac <_ZN8touchgfx10TransitionD1Ev>
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	4618      	mov	r0, r3
 800ddee:	3708      	adds	r7, #8
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd80      	pop	{r7, pc}
 800ddf4:	080310e8 	.word	0x080310e8

0800ddf8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED0Ev>:
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b082      	sub	sp, #8
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
 800de00:	6878      	ldr	r0, [r7, #4]
 800de02:	f7ff ffdd 	bl	800ddc0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev>
 800de06:	2154      	movs	r1, #84	; 0x54
 800de08:	6878      	ldr	r0, [r7, #4]
 800de0a:	f01f f95f 	bl	802d0cc <_ZdlPvj>
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	4618      	mov	r0, r3
 800de12:	3708      	adds	r7, #8
 800de14:	46bd      	mov	sp, r7
 800de16:	bd80      	pop	{r7, pc}

0800de18 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>:
 800de18:	b580      	push	{r7, lr}
 800de1a:	b082      	sub	sp, #8
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
 800de20:	4a0a      	ldr	r2, [pc, #40]	; (800de4c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev+0x34>)
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	601a      	str	r2, [r3, #0]
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	333c      	adds	r3, #60	; 0x3c
 800de2a:	4618      	mov	r0, r3
 800de2c:	f7ff fdfa 	bl	800da24 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	330c      	adds	r3, #12
 800de34:	4618      	mov	r0, r3
 800de36:	f7ff fd09 	bl	800d84c <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	4618      	mov	r0, r3
 800de3e:	f7fe feb5 	bl	800cbac <_ZN8touchgfx10TransitionD1Ev>
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	4618      	mov	r0, r3
 800de46:	3708      	adds	r7, #8
 800de48:	46bd      	mov	sp, r7
 800de4a:	bd80      	pop	{r7, pc}
 800de4c:	0803112c 	.word	0x0803112c

0800de50 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED0Ev>:
 800de50:	b580      	push	{r7, lr}
 800de52:	b082      	sub	sp, #8
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
 800de58:	6878      	ldr	r0, [r7, #4]
 800de5a:	f7ff ffdd 	bl	800de18 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>
 800de5e:	2154      	movs	r1, #84	; 0x54
 800de60:	6878      	ldr	r0, [r7, #4]
 800de62:	f01f f933 	bl	802d0cc <_ZdlPvj>
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	4618      	mov	r0, r3
 800de6a:	3708      	adds	r7, #8
 800de6c:	46bd      	mov	sp, r7
 800de6e:	bd80      	pop	{r7, pc}

0800de70 <_ZN8touchgfx12NoTransitionD1Ev>:
 800de70:	b580      	push	{r7, lr}
 800de72:	b082      	sub	sp, #8
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
 800de78:	4a05      	ldr	r2, [pc, #20]	; (800de90 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	601a      	str	r2, [r3, #0]
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	4618      	mov	r0, r3
 800de82:	f7fe fe93 	bl	800cbac <_ZN8touchgfx10TransitionD1Ev>
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	4618      	mov	r0, r3
 800de8a:	3708      	adds	r7, #8
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}
 800de90:	080311f0 	.word	0x080311f0

0800de94 <_ZN8touchgfx12NoTransitionD0Ev>:
 800de94:	b580      	push	{r7, lr}
 800de96:	b082      	sub	sp, #8
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
 800de9c:	6878      	ldr	r0, [r7, #4]
 800de9e:	f7ff ffe7 	bl	800de70 <_ZN8touchgfx12NoTransitionD1Ev>
 800dea2:	210c      	movs	r1, #12
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f01f f911 	bl	802d0cc <_ZdlPvj>
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	4618      	mov	r0, r3
 800deae:	3708      	adds	r7, #8
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}

0800deb4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv>:
    virtual void handleTickEvent()
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b082      	sub	sp, #8
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 800debc:	4b59      	ldr	r3, [pc, #356]	; (800e024 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x170>)
 800debe:	781b      	ldrb	r3, [r3, #0]
 800dec0:	f083 0301 	eor.w	r3, r3, #1
 800dec4:	b2db      	uxtb	r3, r3
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d003      	beq.n	800ded2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x1e>
            done = true;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	2201      	movs	r2, #1
 800dece:	721a      	strb	r2, [r3, #8]
            return;
 800ded0:	e0a5      	b.n	800e01e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x16a>
        Transition::handleTickEvent();
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	4618      	mov	r0, r3
 800ded6:	f7fe fe89 	bl	800cbec <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800dee0:	3301      	adds	r3, #1
 800dee2:	b2da      	uxtb	r2, r3
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        if (animationCounter <= animationSteps)
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800def6:	429a      	cmp	r2, r3
 800def8:	d82f      	bhi.n	800df5a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800df00:	b298      	uxth	r0, r3
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800df0e:	b29b      	uxth	r3, r3
 800df10:	2100      	movs	r1, #0
 800df12:	f012 fa5f 	bl	80203d4 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 800df16:	4603      	mov	r3, r0
 800df18:	461a      	mov	r2, r3
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            if (calculatedValue % 2)
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800df26:	b29b      	uxth	r3, r3
 800df28:	f003 0301 	and.w	r3, r3, #1
 800df2c:	b29b      	uxth	r3, r3
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d01b      	beq.n	800df6a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800df38:	b29b      	uxth	r3, r3
 800df3a:	687a      	ldr	r2, [r7, #4]
 800df3c:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 800df40:	2a00      	cmp	r2, #0
 800df42:	dd01      	ble.n	800df48 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x94>
 800df44:	2201      	movs	r2, #1
 800df46:	e001      	b.n	800df4c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x98>
 800df48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800df4c:	4413      	add	r3, r2
 800df4e:	b29b      	uxth	r3, r3
 800df50:	b21a      	sxth	r2, r3
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800df58:	e007      	b.n	800df6a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xb6>
            done = true;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2201      	movs	r2, #1
 800df5e:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	2200      	movs	r2, #0
 800df64:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            return;
 800df68:	e059      	b.n	800e01e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x16a>
        switch (direction)
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800df70:	2b03      	cmp	r3, #3
 800df72:	d845      	bhi.n	800e000 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x14c>
 800df74:	a201      	add	r2, pc, #4	; (adr r2, 800df7c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xc8>)
 800df76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df7a:	bf00      	nop
 800df7c:	0800dfc7 	.word	0x0800dfc7
 800df80:	0800dfc7 	.word	0x0800dfc7
 800df84:	0800df8d 	.word	0x0800df8d
 800df88:	0800df8d 	.word	0x0800df8d
            calculatedValue -= snapshot.getX();
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	330c      	adds	r3, #12
 800df90:	4618      	mov	r0, r3
 800df92:	f7fe fce4 	bl	800c95e <_ZNK8touchgfx8Drawable4getXEv>
 800df96:	4603      	mov	r3, r0
 800df98:	4619      	mov	r1, r3
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800dfa0:	b29a      	uxth	r2, r3
 800dfa2:	b28b      	uxth	r3, r1
 800dfa4:	1ad3      	subs	r3, r2, r3
 800dfa6:	b29b      	uxth	r3, r3
 800dfa8:	b21a      	sxth	r2, r3
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(calculatedValue, 0);
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	f103 000c 	add.w	r0, r3, #12
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	4619      	mov	r1, r3
 800dfc0:	f011 fd91 	bl	801fae6 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 800dfc4:	e020      	b.n	800e008 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x154>
            calculatedValue -= snapshot.getY();
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	330c      	adds	r3, #12
 800dfca:	4618      	mov	r0, r3
 800dfcc:	f7fe fcd4 	bl	800c978 <_ZNK8touchgfx8Drawable4getYEv>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	4619      	mov	r1, r3
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800dfda:	b29a      	uxth	r2, r3
 800dfdc:	b28b      	uxth	r3, r1
 800dfde:	1ad3      	subs	r3, r2, r3
 800dfe0:	b29b      	uxth	r3, r3
 800dfe2:	b21a      	sxth	r2, r3
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(0, calculatedValue);
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	f103 000c 	add.w	r0, r3, #12
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800dff6:	461a      	mov	r2, r3
 800dff8:	2100      	movs	r1, #0
 800dffa:	f011 fd74 	bl	801fae6 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 800dffe:	e003      	b.n	800e008 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x154>
            done = true;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	2201      	movs	r2, #1
 800e004:	721a      	strb	r2, [r3, #8]
            break;
 800e006:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	6858      	ldr	r0, [r3, #4]
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	685b      	ldr	r3, [r3, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	3378      	adds	r3, #120	; 0x78
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	687a      	ldr	r2, [r7, #4]
 800e018:	323c      	adds	r2, #60	; 0x3c
 800e01a:	4611      	mov	r1, r2
 800e01c:	4798      	blx	r3
    }
 800e01e:	3708      	adds	r7, #8
 800e020:	46bd      	mov	sp, r7
 800e022:	bd80      	pop	{r7, pc}
 800e024:	200128a3 	.word	0x200128a3

0800e028 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv>:
    virtual void tearDown()
 800e028:	b580      	push	{r7, lr}
 800e02a:	b082      	sub	sp, #8
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 800e030:	4b0b      	ldr	r3, [pc, #44]	; (800e060 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x38>)
 800e032:	781b      	ldrb	r3, [r3, #0]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d00e      	beq.n	800e056 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x2e>
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	685b      	ldr	r3, [r3, #4]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d00a      	beq.n	800e056 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x2e>
            screenContainer->remove(snapshot);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	6858      	ldr	r0, [r3, #4]
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	685b      	ldr	r3, [r3, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	3364      	adds	r3, #100	; 0x64
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	687a      	ldr	r2, [r7, #4]
 800e050:	320c      	adds	r2, #12
 800e052:	4611      	mov	r1, r2
 800e054:	4798      	blx	r3
    }
 800e056:	bf00      	nop
 800e058:	3708      	adds	r7, #8
 800e05a:	46bd      	mov	sp, r7
 800e05c:	bd80      	pop	{r7, pc}
 800e05e:	bf00      	nop
 800e060:	200128a3 	.word	0x200128a3

0800e064 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv>:
    virtual void init()
 800e064:	b580      	push	{r7, lr}
 800e066:	b088      	sub	sp, #32
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 800e06c:	4b1a      	ldr	r3, [pc, #104]	; (800e0d8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x74>)
 800e06e:	781b      	ldrb	r3, [r3, #0]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d02d      	beq.n	800e0d0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x6c>
            Transition::init();
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	4618      	mov	r0, r3
 800e078:	f7fe fdcc 	bl	800cc14 <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 800e07c:	4a17      	ldr	r2, [pc, #92]	; (800e0dc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x78>)
 800e07e:	f107 0318 	add.w	r3, r7, #24
 800e082:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e086:	e883 0003 	stmia.w	r3, {r0, r1}
 800e08a:	f107 0008 	add.w	r0, r7, #8
 800e08e:	f107 0318 	add.w	r3, r7, #24
 800e092:	cb0c      	ldmia	r3, {r2, r3}
 800e094:	6879      	ldr	r1, [r7, #4]
 800e096:	f7ff fdf9 	bl	800dc8c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	685a      	ldr	r2, [r3, #4]
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	685b      	ldr	r3, [r3, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	3378      	adds	r3, #120	; 0x78
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	f107 0108 	add.w	r1, r7, #8
 800e0ac:	4610      	mov	r0, r2
 800e0ae:	4798      	blx	r3
            screenContainer->add(snapshot);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	6858      	ldr	r0, [r3, #4]
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	685b      	ldr	r3, [r3, #4]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	3360      	adds	r3, #96	; 0x60
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	687a      	ldr	r2, [r7, #4]
 800e0c0:	320c      	adds	r2, #12
 800e0c2:	4611      	mov	r1, r2
 800e0c4:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 800e0c6:	f107 0308 	add.w	r3, r7, #8
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	f7ff fbe0 	bl	800d890 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>
    }
 800e0d0:	bf00      	nop
 800e0d2:	3720      	adds	r7, #32
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	bd80      	pop	{r7, pc}
 800e0d8:	200128a3 	.word	0x200128a3
 800e0dc:	0802fc78 	.word	0x0802fc78

0800e0e0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b082      	sub	sp, #8
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
 800e0e8:	6039      	str	r1, [r7, #0]
        switch (direction)
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e0f0:	2b03      	cmp	r3, #3
 800e0f2:	d83b      	bhi.n	800e16c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8c>
 800e0f4:	a201      	add	r2, pc, #4	; (adr r2, 800e0fc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x1c>)
 800e0f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0fa:	bf00      	nop
 800e0fc:	0800e13d 	.word	0x0800e13d
 800e100:	0800e157 	.word	0x0800e157
 800e104:	0800e10d 	.word	0x0800e10d
 800e108:	0800e123 	.word	0x0800e123
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	3354      	adds	r3, #84	; 0x54
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	4a18      	ldr	r2, [pc, #96]	; (800e178 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x98>)
 800e116:	8812      	ldrh	r2, [r2, #0]
 800e118:	b211      	sxth	r1, r2
 800e11a:	2200      	movs	r2, #0
 800e11c:	6838      	ldr	r0, [r7, #0]
 800e11e:	4798      	blx	r3
            break;
 800e120:	e025      	b.n	800e16e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	3354      	adds	r3, #84	; 0x54
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	4a13      	ldr	r2, [pc, #76]	; (800e178 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x98>)
 800e12c:	8812      	ldrh	r2, [r2, #0]
 800e12e:	4252      	negs	r2, r2
 800e130:	b292      	uxth	r2, r2
 800e132:	b211      	sxth	r1, r2
 800e134:	2200      	movs	r2, #0
 800e136:	6838      	ldr	r0, [r7, #0]
 800e138:	4798      	blx	r3
            break;
 800e13a:	e018      	b.n	800e16e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, -HAL::DISPLAY_HEIGHT);
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	3354      	adds	r3, #84	; 0x54
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	4a0d      	ldr	r2, [pc, #52]	; (800e17c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 800e146:	8812      	ldrh	r2, [r2, #0]
 800e148:	4252      	negs	r2, r2
 800e14a:	b292      	uxth	r2, r2
 800e14c:	b212      	sxth	r2, r2
 800e14e:	2100      	movs	r1, #0
 800e150:	6838      	ldr	r0, [r7, #0]
 800e152:	4798      	blx	r3
            break;
 800e154:	e00b      	b.n	800e16e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	3354      	adds	r3, #84	; 0x54
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	4a07      	ldr	r2, [pc, #28]	; (800e17c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 800e160:	8812      	ldrh	r2, [r2, #0]
 800e162:	b212      	sxth	r2, r2
 800e164:	2100      	movs	r1, #0
 800e166:	6838      	ldr	r0, [r7, #0]
 800e168:	4798      	blx	r3
            break;
 800e16a:	e000      	b.n	800e16e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8e>
            break;
 800e16c:	bf00      	nop
    }
 800e16e:	bf00      	nop
 800e170:	3708      	adds	r7, #8
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}
 800e176:	bf00      	nop
 800e178:	20012898 	.word	0x20012898
 800e17c:	2001289a 	.word	0x2001289a

0800e180 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 800e180:	b580      	push	{r7, lr}
 800e182:	b082      	sub	sp, #8
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
 800e188:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	685b      	ldr	r3, [r3, #4]
 800e18e:	687a      	ldr	r2, [r7, #4]
 800e190:	68d2      	ldr	r2, [r2, #12]
 800e192:	1052      	asrs	r2, r2, #1
 800e194:	1898      	adds	r0, r3, r2
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	68db      	ldr	r3, [r3, #12]
 800e19a:	f003 0301 	and.w	r3, r3, #1
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d102      	bne.n	800e1a8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7executeES5_+0x28>
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	689b      	ldr	r3, [r3, #8]
 800e1a6:	e00a      	b.n	800e1be <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7executeES5_+0x3e>
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	685b      	ldr	r3, [r3, #4]
 800e1ac:	687a      	ldr	r2, [r7, #4]
 800e1ae:	68d2      	ldr	r2, [r2, #12]
 800e1b0:	1052      	asrs	r2, r2, #1
 800e1b2:	4413      	add	r3, r2
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	687a      	ldr	r2, [r7, #4]
 800e1b8:	6892      	ldr	r2, [r2, #8]
 800e1ba:	4413      	add	r3, r2
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	6839      	ldr	r1, [r7, #0]
 800e1c0:	4798      	blx	r3
    }
 800e1c2:	bf00      	nop
 800e1c4:	3708      	adds	r7, #8
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}

0800e1ca <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 800e1ca:	b480      	push	{r7}
 800e1cc:	b083      	sub	sp, #12
 800e1ce:	af00      	add	r7, sp, #0
 800e1d0:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	685b      	ldr	r3, [r3, #4]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d010      	beq.n	800e1fc <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x32>
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	689b      	ldr	r3, [r3, #8]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d107      	bne.n	800e1f2 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x28>
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	68db      	ldr	r3, [r3, #12]
 800e1e6:	f003 0301 	and.w	r3, r3, #1
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d101      	bne.n	800e1f2 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x28>
 800e1ee:	2301      	movs	r3, #1
 800e1f0:	e000      	b.n	800e1f4 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x2a>
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	2b01      	cmp	r3, #1
 800e1f6:	d001      	beq.n	800e1fc <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x32>
 800e1f8:	2301      	movs	r3, #1
 800e1fa:	e000      	b.n	800e1fe <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x34>
 800e1fc:	2300      	movs	r3, #0
    }
 800e1fe:	4618      	mov	r0, r3
 800e200:	370c      	adds	r7, #12
 800e202:	46bd      	mov	sp, r7
 800e204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e208:	4770      	bx	lr
	...

0800e20c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b082      	sub	sp, #8
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 800e214:	4b59      	ldr	r3, [pc, #356]	; (800e37c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x170>)
 800e216:	781b      	ldrb	r3, [r3, #0]
 800e218:	f083 0301 	eor.w	r3, r3, #1
 800e21c:	b2db      	uxtb	r3, r3
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d003      	beq.n	800e22a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	2201      	movs	r2, #1
 800e226:	721a      	strb	r2, [r3, #8]
            return;
 800e228:	e0a5      	b.n	800e376 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x16a>
        Transition::handleTickEvent();
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	4618      	mov	r0, r3
 800e22e:	f7fe fcdd 	bl	800cbec <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800e238:	3301      	adds	r3, #1
 800e23a:	b2da      	uxtb	r2, r3
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        if (animationCounter <= animationSteps)
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800e24e:	429a      	cmp	r2, r3
 800e250:	d82f      	bhi.n	800e2b2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800e258:	b298      	uxth	r0, r3
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800e266:	b29b      	uxth	r3, r3
 800e268:	2100      	movs	r1, #0
 800e26a:	f012 f8b3 	bl	80203d4 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 800e26e:	4603      	mov	r3, r0
 800e270:	461a      	mov	r2, r3
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            if (calculatedValue % 2)
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800e27e:	b29b      	uxth	r3, r3
 800e280:	f003 0301 	and.w	r3, r3, #1
 800e284:	b29b      	uxth	r3, r3
 800e286:	2b00      	cmp	r3, #0
 800e288:	d01b      	beq.n	800e2c2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800e290:	b29b      	uxth	r3, r3
 800e292:	687a      	ldr	r2, [r7, #4]
 800e294:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 800e298:	2a00      	cmp	r2, #0
 800e29a:	dd01      	ble.n	800e2a0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>
 800e29c:	2201      	movs	r2, #1
 800e29e:	e001      	b.n	800e2a4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x98>
 800e2a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e2a4:	4413      	add	r3, r2
 800e2a6:	b29b      	uxth	r3, r3
 800e2a8:	b21a      	sxth	r2, r3
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800e2b0:	e007      	b.n	800e2c2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
            done = true;
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	2201      	movs	r2, #1
 800e2b6:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            return;
 800e2c0:	e059      	b.n	800e376 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x16a>
        switch (direction)
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e2c8:	2b03      	cmp	r3, #3
 800e2ca:	d845      	bhi.n	800e358 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x14c>
 800e2cc:	a201      	add	r2, pc, #4	; (adr r2, 800e2d4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xc8>)
 800e2ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2d2:	bf00      	nop
 800e2d4:	0800e31f 	.word	0x0800e31f
 800e2d8:	0800e31f 	.word	0x0800e31f
 800e2dc:	0800e2e5 	.word	0x0800e2e5
 800e2e0:	0800e2e5 	.word	0x0800e2e5
            calculatedValue -= snapshot.getX();
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	330c      	adds	r3, #12
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	f7fe fb38 	bl	800c95e <_ZNK8touchgfx8Drawable4getXEv>
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	4619      	mov	r1, r3
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800e2f8:	b29a      	uxth	r2, r3
 800e2fa:	b28b      	uxth	r3, r1
 800e2fc:	1ad3      	subs	r3, r2, r3
 800e2fe:	b29b      	uxth	r3, r3
 800e300:	b21a      	sxth	r2, r3
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(calculatedValue, 0);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	f103 000c 	add.w	r0, r3, #12
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800e314:	2200      	movs	r2, #0
 800e316:	4619      	mov	r1, r3
 800e318:	f011 fbe5 	bl	801fae6 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 800e31c:	e020      	b.n	800e360 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x154>
            calculatedValue -= snapshot.getY();
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	330c      	adds	r3, #12
 800e322:	4618      	mov	r0, r3
 800e324:	f7fe fb28 	bl	800c978 <_ZNK8touchgfx8Drawable4getYEv>
 800e328:	4603      	mov	r3, r0
 800e32a:	4619      	mov	r1, r3
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800e332:	b29a      	uxth	r2, r3
 800e334:	b28b      	uxth	r3, r1
 800e336:	1ad3      	subs	r3, r2, r3
 800e338:	b29b      	uxth	r3, r3
 800e33a:	b21a      	sxth	r2, r3
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(0, calculatedValue);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	f103 000c 	add.w	r0, r3, #12
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800e34e:	461a      	mov	r2, r3
 800e350:	2100      	movs	r1, #0
 800e352:	f011 fbc8 	bl	801fae6 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 800e356:	e003      	b.n	800e360 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x154>
            done = true;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	2201      	movs	r2, #1
 800e35c:	721a      	strb	r2, [r3, #8]
            break;
 800e35e:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	6858      	ldr	r0, [r3, #4]
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	685b      	ldr	r3, [r3, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	3378      	adds	r3, #120	; 0x78
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	687a      	ldr	r2, [r7, #4]
 800e370:	323c      	adds	r2, #60	; 0x3c
 800e372:	4611      	mov	r1, r2
 800e374:	4798      	blx	r3
    }
 800e376:	3708      	adds	r7, #8
 800e378:	46bd      	mov	sp, r7
 800e37a:	bd80      	pop	{r7, pc}
 800e37c:	200128a3 	.word	0x200128a3

0800e380 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 800e380:	b580      	push	{r7, lr}
 800e382:	b082      	sub	sp, #8
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 800e388:	4b0b      	ldr	r3, [pc, #44]	; (800e3b8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x38>)
 800e38a:	781b      	ldrb	r3, [r3, #0]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d00e      	beq.n	800e3ae <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	685b      	ldr	r3, [r3, #4]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d00a      	beq.n	800e3ae <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
            screenContainer->remove(snapshot);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	6858      	ldr	r0, [r3, #4]
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	685b      	ldr	r3, [r3, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	3364      	adds	r3, #100	; 0x64
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	687a      	ldr	r2, [r7, #4]
 800e3a8:	320c      	adds	r2, #12
 800e3aa:	4611      	mov	r1, r2
 800e3ac:	4798      	blx	r3
    }
 800e3ae:	bf00      	nop
 800e3b0:	3708      	adds	r7, #8
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	bd80      	pop	{r7, pc}
 800e3b6:	bf00      	nop
 800e3b8:	200128a3 	.word	0x200128a3

0800e3bc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b088      	sub	sp, #32
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 800e3c4:	4b1a      	ldr	r3, [pc, #104]	; (800e430 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x74>)
 800e3c6:	781b      	ldrb	r3, [r3, #0]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d02d      	beq.n	800e428 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x6c>
            Transition::init();
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	f7fe fc20 	bl	800cc14 <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 800e3d4:	4a17      	ldr	r2, [pc, #92]	; (800e434 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x78>)
 800e3d6:	f107 0318 	add.w	r3, r7, #24
 800e3da:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e3de:	e883 0003 	stmia.w	r3, {r0, r1}
 800e3e2:	f107 0008 	add.w	r0, r7, #8
 800e3e6:	f107 0318 	add.w	r3, r7, #24
 800e3ea:	cb0c      	ldmia	r3, {r2, r3}
 800e3ec:	6879      	ldr	r1, [r7, #4]
 800e3ee:	f7ff fcc7 	bl	800dd80 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	685a      	ldr	r2, [r3, #4]
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	685b      	ldr	r3, [r3, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	3378      	adds	r3, #120	; 0x78
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	f107 0108 	add.w	r1, r7, #8
 800e404:	4610      	mov	r0, r2
 800e406:	4798      	blx	r3
            screenContainer->add(snapshot);
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	6858      	ldr	r0, [r3, #4]
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	685b      	ldr	r3, [r3, #4]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	3360      	adds	r3, #96	; 0x60
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	687a      	ldr	r2, [r7, #4]
 800e418:	320c      	adds	r2, #12
 800e41a:	4611      	mov	r1, r2
 800e41c:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 800e41e:	f107 0308 	add.w	r3, r7, #8
 800e422:	4618      	mov	r0, r3
 800e424:	f7ff fafe 	bl	800da24 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
    }
 800e428:	bf00      	nop
 800e42a:	3720      	adds	r7, #32
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd80      	pop	{r7, pc}
 800e430:	200128a3 	.word	0x200128a3
 800e434:	0802fc80 	.word	0x0802fc80

0800e438 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 800e438:	b580      	push	{r7, lr}
 800e43a:	b082      	sub	sp, #8
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
 800e440:	6039      	str	r1, [r7, #0]
        switch (direction)
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e448:	2b03      	cmp	r3, #3
 800e44a:	d83b      	bhi.n	800e4c4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8c>
 800e44c:	a201      	add	r2, pc, #4	; (adr r2, 800e454 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x1c>)
 800e44e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e452:	bf00      	nop
 800e454:	0800e495 	.word	0x0800e495
 800e458:	0800e4af 	.word	0x0800e4af
 800e45c:	0800e465 	.word	0x0800e465
 800e460:	0800e47b 	.word	0x0800e47b
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 800e464:	683b      	ldr	r3, [r7, #0]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	3354      	adds	r3, #84	; 0x54
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	4a18      	ldr	r2, [pc, #96]	; (800e4d0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 800e46e:	8812      	ldrh	r2, [r2, #0]
 800e470:	b211      	sxth	r1, r2
 800e472:	2200      	movs	r2, #0
 800e474:	6838      	ldr	r0, [r7, #0]
 800e476:	4798      	blx	r3
            break;
 800e478:	e025      	b.n	800e4c6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	3354      	adds	r3, #84	; 0x54
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	4a13      	ldr	r2, [pc, #76]	; (800e4d0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 800e484:	8812      	ldrh	r2, [r2, #0]
 800e486:	4252      	negs	r2, r2
 800e488:	b292      	uxth	r2, r2
 800e48a:	b211      	sxth	r1, r2
 800e48c:	2200      	movs	r2, #0
 800e48e:	6838      	ldr	r0, [r7, #0]
 800e490:	4798      	blx	r3
            break;
 800e492:	e018      	b.n	800e4c6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, -HAL::DISPLAY_HEIGHT);
 800e494:	683b      	ldr	r3, [r7, #0]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	3354      	adds	r3, #84	; 0x54
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	4a0d      	ldr	r2, [pc, #52]	; (800e4d4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 800e49e:	8812      	ldrh	r2, [r2, #0]
 800e4a0:	4252      	negs	r2, r2
 800e4a2:	b292      	uxth	r2, r2
 800e4a4:	b212      	sxth	r2, r2
 800e4a6:	2100      	movs	r1, #0
 800e4a8:	6838      	ldr	r0, [r7, #0]
 800e4aa:	4798      	blx	r3
            break;
 800e4ac:	e00b      	b.n	800e4c6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	3354      	adds	r3, #84	; 0x54
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	4a07      	ldr	r2, [pc, #28]	; (800e4d4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 800e4b8:	8812      	ldrh	r2, [r2, #0]
 800e4ba:	b212      	sxth	r2, r2
 800e4bc:	2100      	movs	r1, #0
 800e4be:	6838      	ldr	r0, [r7, #0]
 800e4c0:	4798      	blx	r3
            break;
 800e4c2:	e000      	b.n	800e4c6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            break;
 800e4c4:	bf00      	nop
    }
 800e4c6:	bf00      	nop
 800e4c8:	3708      	adds	r7, #8
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	bd80      	pop	{r7, pc}
 800e4ce:	bf00      	nop
 800e4d0:	20012898 	.word	0x20012898
 800e4d4:	2001289a 	.word	0x2001289a

0800e4d8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b082      	sub	sp, #8
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
 800e4e0:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	685b      	ldr	r3, [r3, #4]
 800e4e6:	687a      	ldr	r2, [r7, #4]
 800e4e8:	68d2      	ldr	r2, [r2, #12]
 800e4ea:	1052      	asrs	r2, r2, #1
 800e4ec:	1898      	adds	r0, r3, r2
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	68db      	ldr	r3, [r3, #12]
 800e4f2:	f003 0301 	and.w	r3, r3, #1
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d102      	bne.n	800e500 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x28>
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	689b      	ldr	r3, [r3, #8]
 800e4fe:	e00a      	b.n	800e516 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x3e>
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	685b      	ldr	r3, [r3, #4]
 800e504:	687a      	ldr	r2, [r7, #4]
 800e506:	68d2      	ldr	r2, [r2, #12]
 800e508:	1052      	asrs	r2, r2, #1
 800e50a:	4413      	add	r3, r2
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	687a      	ldr	r2, [r7, #4]
 800e510:	6892      	ldr	r2, [r2, #8]
 800e512:	4413      	add	r3, r2
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	6839      	ldr	r1, [r7, #0]
 800e518:	4798      	blx	r3
    }
 800e51a:	bf00      	nop
 800e51c:	3708      	adds	r7, #8
 800e51e:	46bd      	mov	sp, r7
 800e520:	bd80      	pop	{r7, pc}

0800e522 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 800e522:	b480      	push	{r7}
 800e524:	b083      	sub	sp, #12
 800e526:	af00      	add	r7, sp, #0
 800e528:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	685b      	ldr	r3, [r3, #4]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d010      	beq.n	800e554 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	689b      	ldr	r3, [r3, #8]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d107      	bne.n	800e54a <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	68db      	ldr	r3, [r3, #12]
 800e53e:	f003 0301 	and.w	r3, r3, #1
 800e542:	2b00      	cmp	r3, #0
 800e544:	d101      	bne.n	800e54a <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 800e546:	2301      	movs	r3, #1
 800e548:	e000      	b.n	800e54c <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x2a>
 800e54a:	2300      	movs	r3, #0
 800e54c:	2b01      	cmp	r3, #1
 800e54e:	d001      	beq.n	800e554 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 800e550:	2301      	movs	r3, #1
 800e552:	e000      	b.n	800e556 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x34>
 800e554:	2300      	movs	r3, #0
    }
 800e556:	4618      	mov	r0, r3
 800e558:	370c      	adds	r7, #12
 800e55a:	46bd      	mov	sp, r7
 800e55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e560:	4770      	bx	lr

0800e562 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800e562:	b480      	push	{r7}
 800e564:	b083      	sub	sp, #12
 800e566:	af00      	add	r7, sp, #0
 800e568:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	6a1b      	ldr	r3, [r3, #32]
    }
 800e56e:	4618      	mov	r0, r3
 800e570:	370c      	adds	r7, #12
 800e572:	46bd      	mov	sp, r7
 800e574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e578:	4770      	bx	lr
	...

0800e57c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b08c      	sub	sp, #48	; 0x30
 800e580:	af08      	add	r7, sp, #32
 800e582:	60f8      	str	r0, [r7, #12]
 800e584:	60b9      	str	r1, [r7, #8]
 800e586:	4611      	mov	r1, r2
 800e588:	461a      	mov	r2, r3
 800e58a:	460b      	mov	r3, r1
 800e58c:	80fb      	strh	r3, [r7, #6]
 800e58e:	4613      	mov	r3, r2
 800e590:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 800e592:	68f8      	ldr	r0, [r7, #12]
 800e594:	88b9      	ldrh	r1, [r7, #4]
 800e596:	88fa      	ldrh	r2, [r7, #6]
 800e598:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800e59a:	9306      	str	r3, [sp, #24]
 800e59c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e59e:	9305      	str	r3, [sp, #20]
 800e5a0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e5a4:	9304      	str	r3, [sp, #16]
 800e5a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e5aa:	9303      	str	r3, [sp, #12]
 800e5ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e5b0:	9302      	str	r3, [sp, #8]
 800e5b2:	7f3b      	ldrb	r3, [r7, #28]
 800e5b4:	9301      	str	r3, [sp, #4]
 800e5b6:	7e3b      	ldrb	r3, [r7, #24]
 800e5b8:	9300      	str	r3, [sp, #0]
 800e5ba:	460b      	mov	r3, r1
 800e5bc:	68b9      	ldr	r1, [r7, #8]
 800e5be:	f011 fb1d 	bl	801fbfc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800e5c2:	4a08      	ldr	r2, [pc, #32]	; (800e5e4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	601a      	str	r2, [r3, #0]
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e5cc:	619a      	str	r2, [r3, #24]
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5d2:	61da      	str	r2, [r3, #28]
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e5d8:	621a      	str	r2, [r3, #32]
{
}
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	4618      	mov	r0, r3
 800e5de:	3710      	adds	r7, #16
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd80      	pop	{r7, pc}
 800e5e4:	0803159c 	.word	0x0803159c

0800e5e8 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800e5e8:	b480      	push	{r7}
 800e5ea:	b085      	sub	sp, #20
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
 800e5f0:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	699b      	ldr	r3, [r3, #24]
 800e5f6:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800e5f8:	683b      	ldr	r3, [r7, #0]
 800e5fa:	889b      	ldrh	r3, [r3, #4]
 800e5fc:	0adb      	lsrs	r3, r3, #11
 800e5fe:	b29b      	uxth	r3, r3
 800e600:	009b      	lsls	r3, r3, #2
 800e602:	68fa      	ldr	r2, [r7, #12]
 800e604:	4413      	add	r3, r2
 800e606:	681a      	ldr	r2, [r3, #0]
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	4413      	add	r3, r2
}
 800e60e:	4618      	mov	r0, r3
 800e610:	3714      	adds	r7, #20
 800e612:	46bd      	mov	sp, r7
 800e614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e618:	4770      	bx	lr

0800e61a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800e61a:	b480      	push	{r7}
 800e61c:	b089      	sub	sp, #36	; 0x24
 800e61e:	af00      	add	r7, sp, #0
 800e620:	60f8      	str	r0, [r7, #12]
 800e622:	460b      	mov	r3, r1
 800e624:	607a      	str	r2, [r7, #4]
 800e626:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d003      	beq.n	800e636 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	7b1b      	ldrb	r3, [r3, #12]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d101      	bne.n	800e63a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800e636:	2300      	movs	r3, #0
 800e638:	e030      	b.n	800e69c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	69da      	ldr	r2, [r3, #28]
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800e642:	697b      	ldr	r3, [r7, #20]
 800e644:	7b5b      	ldrb	r3, [r3, #13]
 800e646:	021b      	lsls	r3, r3, #8
 800e648:	b21b      	sxth	r3, r3
 800e64a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e64e:	b219      	sxth	r1, r3
 800e650:	697b      	ldr	r3, [r7, #20]
 800e652:	7adb      	ldrb	r3, [r3, #11]
 800e654:	b21b      	sxth	r3, r3
 800e656:	430b      	orrs	r3, r1
 800e658:	b21b      	sxth	r3, r3
 800e65a:	b29b      	uxth	r3, r3
 800e65c:	009b      	lsls	r3, r3, #2
 800e65e:	4413      	add	r3, r2
 800e660:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	7b1b      	ldrb	r3, [r3, #12]
 800e666:	837b      	strh	r3, [r7, #26]
 800e668:	8b7b      	ldrh	r3, [r7, #26]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d015      	beq.n	800e69a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800e66e:	69fb      	ldr	r3, [r7, #28]
 800e670:	881b      	ldrh	r3, [r3, #0]
 800e672:	897a      	ldrh	r2, [r7, #10]
 800e674:	429a      	cmp	r2, r3
 800e676:	d103      	bne.n	800e680 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800e678:	69fb      	ldr	r3, [r7, #28]
 800e67a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800e67e:	e00d      	b.n	800e69c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800e680:	69fb      	ldr	r3, [r7, #28]
 800e682:	881b      	ldrh	r3, [r3, #0]
 800e684:	897a      	ldrh	r2, [r7, #10]
 800e686:	429a      	cmp	r2, r3
 800e688:	d306      	bcc.n	800e698 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800e68a:	8b7b      	ldrh	r3, [r7, #26]
 800e68c:	3b01      	subs	r3, #1
 800e68e:	837b      	strh	r3, [r7, #26]
 800e690:	69fb      	ldr	r3, [r7, #28]
 800e692:	3304      	adds	r3, #4
 800e694:	61fb      	str	r3, [r7, #28]
 800e696:	e7e7      	b.n	800e668 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800e698:	bf00      	nop
        }
    }
    return 0;
 800e69a:	2300      	movs	r3, #0
}
 800e69c:	4618      	mov	r0, r3
 800e69e:	3724      	adds	r7, #36	; 0x24
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a6:	4770      	bx	lr

0800e6a8 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 94, 10, 2, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	af00      	add	r7, sp, #0
 800e6ac:	4801      	ldr	r0, [pc, #4]	; (800e6b4 <__tcf_0+0xc>)
 800e6ae:	f7fe f8bb 	bl	800c828 <_ZN8touchgfx13GeneratedFontD1Ev>
 800e6b2:	bd80      	pop	{r7, pc}
 800e6b4:	20001a3c 	.word	0x20001a3c

0800e6b8 <_Z23getFont_verdana_10_4bppv>:
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b08a      	sub	sp, #40	; 0x28
 800e6bc:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 94, 10, 2, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 800e6be:	4b1e      	ldr	r3, [pc, #120]	; (800e738 <_Z23getFont_verdana_10_4bppv+0x80>)
 800e6c0:	781b      	ldrb	r3, [r3, #0]
 800e6c2:	f3bf 8f5b 	dmb	ish
 800e6c6:	b2db      	uxtb	r3, r3
 800e6c8:	f003 0301 	and.w	r3, r3, #1
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	bf0c      	ite	eq
 800e6d0:	2301      	moveq	r3, #1
 800e6d2:	2300      	movne	r3, #0
 800e6d4:	b2db      	uxtb	r3, r3
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d02a      	beq.n	800e730 <_Z23getFont_verdana_10_4bppv+0x78>
 800e6da:	4817      	ldr	r0, [pc, #92]	; (800e738 <_Z23getFont_verdana_10_4bppv+0x80>)
 800e6dc:	f01e fcf8 	bl	802d0d0 <__cxa_guard_acquire>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	bf14      	ite	ne
 800e6e6:	2301      	movne	r3, #1
 800e6e8:	2300      	moveq	r3, #0
 800e6ea:	b2db      	uxtb	r3, r3
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d01f      	beq.n	800e730 <_Z23getFont_verdana_10_4bppv+0x78>
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	9309      	str	r3, [sp, #36]	; 0x24
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	9308      	str	r3, [sp, #32]
 800e6f8:	233f      	movs	r3, #63	; 0x3f
 800e6fa:	9307      	str	r3, [sp, #28]
 800e6fc:	4b0f      	ldr	r3, [pc, #60]	; (800e73c <_Z23getFont_verdana_10_4bppv+0x84>)
 800e6fe:	9306      	str	r3, [sp, #24]
 800e700:	4b0f      	ldr	r3, [pc, #60]	; (800e740 <_Z23getFont_verdana_10_4bppv+0x88>)
 800e702:	9305      	str	r3, [sp, #20]
 800e704:	2301      	movs	r3, #1
 800e706:	9304      	str	r3, [sp, #16]
 800e708:	2301      	movs	r3, #1
 800e70a:	9303      	str	r3, [sp, #12]
 800e70c:	2301      	movs	r3, #1
 800e70e:	9302      	str	r3, [sp, #8]
 800e710:	2304      	movs	r3, #4
 800e712:	9301      	str	r3, [sp, #4]
 800e714:	2302      	movs	r3, #2
 800e716:	9300      	str	r3, [sp, #0]
 800e718:	230a      	movs	r3, #10
 800e71a:	225e      	movs	r2, #94	; 0x5e
 800e71c:	4909      	ldr	r1, [pc, #36]	; (800e744 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800e71e:	480a      	ldr	r0, [pc, #40]	; (800e748 <_Z23getFont_verdana_10_4bppv+0x90>)
 800e720:	f7ff ff2c 	bl	800e57c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800e724:	4804      	ldr	r0, [pc, #16]	; (800e738 <_Z23getFont_verdana_10_4bppv+0x80>)
 800e726:	f01e fcef 	bl	802d108 <__cxa_guard_release>
 800e72a:	4808      	ldr	r0, [pc, #32]	; (800e74c <_Z23getFont_verdana_10_4bppv+0x94>)
 800e72c:	f01f fdba 	bl	802e2a4 <atexit>
    return verdana_10_4bpp;
 800e730:	4b05      	ldr	r3, [pc, #20]	; (800e748 <_Z23getFont_verdana_10_4bppv+0x90>)
}
 800e732:	4618      	mov	r0, r3
 800e734:	46bd      	mov	sp, r7
 800e736:	bd80      	pop	{r7, pc}
 800e738:	20001a60 	.word	0x20001a60
 800e73c:	080384c8 	.word	0x080384c8
 800e740:	080315e8 	.word	0x080315e8
 800e744:	08037a70 	.word	0x08037a70
 800e748:	20001a3c 	.word	0x20001a3c
 800e74c:	0800e6a9 	.word	0x0800e6a9

0800e750 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 94, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800e750:	b580      	push	{r7, lr}
 800e752:	af00      	add	r7, sp, #0
 800e754:	4801      	ldr	r0, [pc, #4]	; (800e75c <__tcf_0+0xc>)
 800e756:	f7fe f867 	bl	800c828 <_ZN8touchgfx13GeneratedFontD1Ev>
 800e75a:	bd80      	pop	{r7, pc}
 800e75c:	20001a64 	.word	0x20001a64

0800e760 <_Z23getFont_verdana_20_4bppv>:
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b08a      	sub	sp, #40	; 0x28
 800e764:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 94, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800e766:	4b1e      	ldr	r3, [pc, #120]	; (800e7e0 <_Z23getFont_verdana_20_4bppv+0x80>)
 800e768:	781b      	ldrb	r3, [r3, #0]
 800e76a:	f3bf 8f5b 	dmb	ish
 800e76e:	b2db      	uxtb	r3, r3
 800e770:	f003 0301 	and.w	r3, r3, #1
 800e774:	2b00      	cmp	r3, #0
 800e776:	bf0c      	ite	eq
 800e778:	2301      	moveq	r3, #1
 800e77a:	2300      	movne	r3, #0
 800e77c:	b2db      	uxtb	r3, r3
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d02a      	beq.n	800e7d8 <_Z23getFont_verdana_20_4bppv+0x78>
 800e782:	4817      	ldr	r0, [pc, #92]	; (800e7e0 <_Z23getFont_verdana_20_4bppv+0x80>)
 800e784:	f01e fca4 	bl	802d0d0 <__cxa_guard_acquire>
 800e788:	4603      	mov	r3, r0
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	bf14      	ite	ne
 800e78e:	2301      	movne	r3, #1
 800e790:	2300      	moveq	r3, #0
 800e792:	b2db      	uxtb	r3, r3
 800e794:	2b00      	cmp	r3, #0
 800e796:	d01f      	beq.n	800e7d8 <_Z23getFont_verdana_20_4bppv+0x78>
 800e798:	2300      	movs	r3, #0
 800e79a:	9309      	str	r3, [sp, #36]	; 0x24
 800e79c:	2300      	movs	r3, #0
 800e79e:	9308      	str	r3, [sp, #32]
 800e7a0:	233f      	movs	r3, #63	; 0x3f
 800e7a2:	9307      	str	r3, [sp, #28]
 800e7a4:	4b0f      	ldr	r3, [pc, #60]	; (800e7e4 <_Z23getFont_verdana_20_4bppv+0x84>)
 800e7a6:	9306      	str	r3, [sp, #24]
 800e7a8:	4b0f      	ldr	r3, [pc, #60]	; (800e7e8 <_Z23getFont_verdana_20_4bppv+0x88>)
 800e7aa:	9305      	str	r3, [sp, #20]
 800e7ac:	2301      	movs	r3, #1
 800e7ae:	9304      	str	r3, [sp, #16]
 800e7b0:	2301      	movs	r3, #1
 800e7b2:	9303      	str	r3, [sp, #12]
 800e7b4:	2301      	movs	r3, #1
 800e7b6:	9302      	str	r3, [sp, #8]
 800e7b8:	2304      	movs	r3, #4
 800e7ba:	9301      	str	r3, [sp, #4]
 800e7bc:	2304      	movs	r3, #4
 800e7be:	9300      	str	r3, [sp, #0]
 800e7c0:	2314      	movs	r3, #20
 800e7c2:	225e      	movs	r2, #94	; 0x5e
 800e7c4:	4909      	ldr	r1, [pc, #36]	; (800e7ec <_Z23getFont_verdana_20_4bppv+0x8c>)
 800e7c6:	480a      	ldr	r0, [pc, #40]	; (800e7f0 <_Z23getFont_verdana_20_4bppv+0x90>)
 800e7c8:	f7ff fed8 	bl	800e57c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800e7cc:	4804      	ldr	r0, [pc, #16]	; (800e7e0 <_Z23getFont_verdana_20_4bppv+0x80>)
 800e7ce:	f01e fc9b 	bl	802d108 <__cxa_guard_release>
 800e7d2:	4808      	ldr	r0, [pc, #32]	; (800e7f4 <_Z23getFont_verdana_20_4bppv+0x94>)
 800e7d4:	f01f fd66 	bl	802e2a4 <atexit>
    return verdana_20_4bpp;
 800e7d8:	4b05      	ldr	r3, [pc, #20]	; (800e7f0 <_Z23getFont_verdana_20_4bppv+0x90>)
}
 800e7da:	4618      	mov	r0, r3
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	bd80      	pop	{r7, pc}
 800e7e0:	20001a88 	.word	0x20001a88
 800e7e4:	080384fc 	.word	0x080384fc
 800e7e8:	080315ec 	.word	0x080315ec
 800e7ec:	08037f94 	.word	0x08037f94
 800e7f0:	20001a64 	.word	0x20001a64
 800e7f4:	0800e751 	.word	0x0800e751

0800e7f8 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	af00      	add	r7, sp, #0
 800e7fc:	4801      	ldr	r0, [pc, #4]	; (800e804 <__tcf_0+0xc>)
 800e7fe:	f7fe f813 	bl	800c828 <_ZN8touchgfx13GeneratedFontD1Ev>
 800e802:	bd80      	pop	{r7, pc}
 800e804:	20001a8c 	.word	0x20001a8c

0800e808 <_Z23getFont_verdana_40_4bppv>:
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b08a      	sub	sp, #40	; 0x28
 800e80c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800e80e:	4b1e      	ldr	r3, [pc, #120]	; (800e888 <_Z23getFont_verdana_40_4bppv+0x80>)
 800e810:	781b      	ldrb	r3, [r3, #0]
 800e812:	f3bf 8f5b 	dmb	ish
 800e816:	b2db      	uxtb	r3, r3
 800e818:	f003 0301 	and.w	r3, r3, #1
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	bf0c      	ite	eq
 800e820:	2301      	moveq	r3, #1
 800e822:	2300      	movne	r3, #0
 800e824:	b2db      	uxtb	r3, r3
 800e826:	2b00      	cmp	r3, #0
 800e828:	d02a      	beq.n	800e880 <_Z23getFont_verdana_40_4bppv+0x78>
 800e82a:	4817      	ldr	r0, [pc, #92]	; (800e888 <_Z23getFont_verdana_40_4bppv+0x80>)
 800e82c:	f01e fc50 	bl	802d0d0 <__cxa_guard_acquire>
 800e830:	4603      	mov	r3, r0
 800e832:	2b00      	cmp	r3, #0
 800e834:	bf14      	ite	ne
 800e836:	2301      	movne	r3, #1
 800e838:	2300      	moveq	r3, #0
 800e83a:	b2db      	uxtb	r3, r3
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d01f      	beq.n	800e880 <_Z23getFont_verdana_40_4bppv+0x78>
 800e840:	2300      	movs	r3, #0
 800e842:	9309      	str	r3, [sp, #36]	; 0x24
 800e844:	2300      	movs	r3, #0
 800e846:	9308      	str	r3, [sp, #32]
 800e848:	233f      	movs	r3, #63	; 0x3f
 800e84a:	9307      	str	r3, [sp, #28]
 800e84c:	4b0f      	ldr	r3, [pc, #60]	; (800e88c <_Z23getFont_verdana_40_4bppv+0x84>)
 800e84e:	9306      	str	r3, [sp, #24]
 800e850:	4b0f      	ldr	r3, [pc, #60]	; (800e890 <_Z23getFont_verdana_40_4bppv+0x88>)
 800e852:	9305      	str	r3, [sp, #20]
 800e854:	2300      	movs	r3, #0
 800e856:	9304      	str	r3, [sp, #16]
 800e858:	2300      	movs	r3, #0
 800e85a:	9303      	str	r3, [sp, #12]
 800e85c:	2301      	movs	r3, #1
 800e85e:	9302      	str	r3, [sp, #8]
 800e860:	2304      	movs	r3, #4
 800e862:	9301      	str	r3, [sp, #4]
 800e864:	2300      	movs	r3, #0
 800e866:	9300      	str	r3, [sp, #0]
 800e868:	2328      	movs	r3, #40	; 0x28
 800e86a:	2201      	movs	r2, #1
 800e86c:	4909      	ldr	r1, [pc, #36]	; (800e894 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800e86e:	480a      	ldr	r0, [pc, #40]	; (800e898 <_Z23getFont_verdana_40_4bppv+0x90>)
 800e870:	f7ff fe84 	bl	800e57c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800e874:	4804      	ldr	r0, [pc, #16]	; (800e888 <_Z23getFont_verdana_40_4bppv+0x80>)
 800e876:	f01e fc47 	bl	802d108 <__cxa_guard_release>
 800e87a:	4808      	ldr	r0, [pc, #32]	; (800e89c <_Z23getFont_verdana_40_4bppv+0x94>)
 800e87c:	f01f fd12 	bl	802e2a4 <atexit>
    return verdana_40_4bpp;
 800e880:	4b05      	ldr	r3, [pc, #20]	; (800e898 <_Z23getFont_verdana_40_4bppv+0x90>)
}
 800e882:	4618      	mov	r0, r3
 800e884:	46bd      	mov	sp, r7
 800e886:	bd80      	pop	{r7, pc}
 800e888:	20001ab0 	.word	0x20001ab0
 800e88c:	080386a0 	.word	0x080386a0
 800e890:	080315f0 	.word	0x080315f0
 800e894:	080384b8 	.word	0x080384b8
 800e898:	20001a8c 	.word	0x20001a8c
 800e89c:	0800e7f9 	.word	0x0800e7f9

0800e8a0 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 800e8a0:	b480      	push	{r7}
 800e8a2:	b085      	sub	sp, #20
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	60f8      	str	r0, [r7, #12]
 800e8a8:	460b      	mov	r3, r1
 800e8aa:	607a      	str	r2, [r7, #4]
 800e8ac:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 800e8ae:	2300      	movs	r3, #0
    }
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	3714      	adds	r7, #20
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ba:	4770      	bx	lr

0800e8bc <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 800e8bc:	b480      	push	{r7}
 800e8be:	b083      	sub	sp, #12
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800e8c4:	2300      	movs	r3, #0
    }
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	370c      	adds	r7, #12
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d0:	4770      	bx	lr
	...

0800e8d4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 800e8d4:	b480      	push	{r7}
 800e8d6:	b085      	sub	sp, #20
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	60f8      	str	r0, [r7, #12]
 800e8dc:	60b9      	str	r1, [r7, #8]
 800e8de:	4613      	mov	r3, r2
 800e8e0:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 800e8e2:	4a07      	ldr	r2, [pc, #28]	; (800e900 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	6013      	str	r3, [r2, #0]
        fonts = f;
 800e8e8:	4a06      	ldr	r2, [pc, #24]	; (800e904 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 800e8ea:	68bb      	ldr	r3, [r7, #8]
 800e8ec:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800e8ee:	4a06      	ldr	r2, [pc, #24]	; (800e908 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 800e8f0:	88fb      	ldrh	r3, [r7, #6]
 800e8f2:	8013      	strh	r3, [r2, #0]
    }
 800e8f4:	bf00      	nop
 800e8f6:	3714      	adds	r7, #20
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fe:	4770      	bx	lr
 800e900:	20012914 	.word	0x20012914
 800e904:	2001291c 	.word	0x2001291c
 800e908:	20012918 	.word	0x20012918

0800e90c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800e90c:	b40e      	push	{r1, r2, r3}
 800e90e:	b580      	push	{r7, lr}
 800e910:	b085      	sub	sp, #20
 800e912:	af00      	add	r7, sp, #0
 800e914:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 800e916:	f107 0320 	add.w	r3, r7, #32
 800e91a:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800e91c:	68bb      	ldr	r3, [r7, #8]
 800e91e:	69fa      	ldr	r2, [r7, #28]
 800e920:	2100      	movs	r1, #0
 800e922:	6878      	ldr	r0, [r7, #4]
 800e924:	f010 ffa6 	bl	801f874 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800e928:	4603      	mov	r3, r0
 800e92a:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800e92c:	89fb      	ldrh	r3, [r7, #14]
}
 800e92e:	4618      	mov	r0, r3
 800e930:	3714      	adds	r7, #20
 800e932:	46bd      	mov	sp, r7
 800e934:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e938:	b003      	add	sp, #12
 800e93a:	4770      	bx	lr

0800e93c <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800e93c:	b40c      	push	{r2, r3}
 800e93e:	b580      	push	{r7, lr}
 800e940:	b084      	sub	sp, #16
 800e942:	af00      	add	r7, sp, #0
 800e944:	6078      	str	r0, [r7, #4]
 800e946:	460b      	mov	r3, r1
 800e948:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800e94a:	f107 031c 	add.w	r3, r7, #28
 800e94e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800e950:	78f9      	ldrb	r1, [r7, #3]
 800e952:	68bb      	ldr	r3, [r7, #8]
 800e954:	69ba      	ldr	r2, [r7, #24]
 800e956:	6878      	ldr	r0, [r7, #4]
 800e958:	f010 ff8c 	bl	801f874 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800e95c:	4603      	mov	r3, r0
 800e95e:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800e960:	89fb      	ldrh	r3, [r7, #14]
}
 800e962:	4618      	mov	r0, r3
 800e964:	3710      	adds	r7, #16
 800e966:	46bd      	mov	sp, r7
 800e968:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e96c:	b002      	add	sp, #8
 800e96e:	4770      	bx	lr

0800e970 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b08a      	sub	sp, #40	; 0x28
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
 800e978:	460b      	mov	r3, r1
 800e97a:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e980:	2b00      	cmp	r3, #0
 800e982:	d016      	beq.n	800e9b2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	331a      	adds	r3, #26
 800e988:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800e98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e98c:	8adb      	ldrh	r3, [r3, #22]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d105      	bne.n	800e99e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 800e992:	4b42      	ldr	r3, [pc, #264]	; (800ea9c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12c>)
 800e994:	4a42      	ldr	r2, [pc, #264]	; (800eaa0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800e996:	21c0      	movs	r1, #192	; 0xc0
 800e998:	4842      	ldr	r0, [pc, #264]	; (800eaa4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800e99a:	f01f fc65 	bl	802e268 <__assert_func>
            return buffer[pos];
 800e99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9a0:	8a9b      	ldrh	r3, [r3, #20]
 800e9a2:	461a      	mov	r2, r3
 800e9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9a6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d001      	beq.n	800e9b2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800e9ae:	2301      	movs	r3, #1
 800e9b0:	e000      	b.n	800e9b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d068      	beq.n	800ea8a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11a>
    {
        substituteGlyphs();
 800e9b8:	6878      	ldr	r0, [r7, #4]
 800e9ba:	f012 fa93 	bl	8020ee4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	331a      	adds	r3, #26
 800e9c2:	623b      	str	r3, [r7, #32]
 800e9c4:	2301      	movs	r3, #1
 800e9c6:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800e9c8:	6a3b      	ldr	r3, [r7, #32]
 800e9ca:	8adb      	ldrh	r3, [r3, #22]
 800e9cc:	8bfa      	ldrh	r2, [r7, #30]
 800e9ce:	429a      	cmp	r2, r3
 800e9d0:	d305      	bcc.n	800e9de <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 800e9d2:	4b35      	ldr	r3, [pc, #212]	; (800eaa8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800e9d4:	4a35      	ldr	r2, [pc, #212]	; (800eaac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 800e9d6:	21c5      	movs	r1, #197	; 0xc5
 800e9d8:	4832      	ldr	r0, [pc, #200]	; (800eaa4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800e9da:	f01f fc45 	bl	802e268 <__assert_func>
            const uint16_t index = pos + offset;
 800e9de:	6a3b      	ldr	r3, [r7, #32]
 800e9e0:	8a9a      	ldrh	r2, [r3, #20]
 800e9e2:	8bfb      	ldrh	r3, [r7, #30]
 800e9e4:	4413      	add	r3, r2
 800e9e6:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 800e9e8:	8bbb      	ldrh	r3, [r7, #28]
 800e9ea:	2b09      	cmp	r3, #9
 800e9ec:	d801      	bhi.n	800e9f2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800e9ee:	8bbb      	ldrh	r3, [r7, #28]
 800e9f0:	e001      	b.n	800e9f6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 800e9f2:	8bbb      	ldrh	r3, [r7, #28]
 800e9f4:	3b0a      	subs	r3, #10
 800e9f6:	6a3a      	ldr	r2, [r7, #32]
 800e9f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e9fc:	f640 123f 	movw	r2, #2367	; 0x93f
 800ea00:	4293      	cmp	r3, r2
 800ea02:	bf0c      	ite	eq
 800ea04:	2301      	moveq	r3, #1
 800ea06:	2300      	movne	r3, #0
 800ea08:	b2db      	uxtb	r3, r3
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d03d      	beq.n	800ea8a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11a>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	331a      	adds	r3, #26
 800ea12:	687a      	ldr	r2, [r7, #4]
 800ea14:	321a      	adds	r2, #26
 800ea16:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 800ea18:	68ba      	ldr	r2, [r7, #8]
 800ea1a:	8ad2      	ldrh	r2, [r2, #22]
 800ea1c:	2a00      	cmp	r2, #0
 800ea1e:	d105      	bne.n	800ea2c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 800ea20:	4b1e      	ldr	r3, [pc, #120]	; (800ea9c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12c>)
 800ea22:	4a1f      	ldr	r2, [pc, #124]	; (800eaa0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800ea24:	21c0      	movs	r1, #192	; 0xc0
 800ea26:	481f      	ldr	r0, [pc, #124]	; (800eaa4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800ea28:	f01f fc1e 	bl	802e268 <__assert_func>
            return buffer[pos];
 800ea2c:	68ba      	ldr	r2, [r7, #8]
 800ea2e:	8a92      	ldrh	r2, [r2, #20]
 800ea30:	4611      	mov	r1, r2
 800ea32:	68ba      	ldr	r2, [r7, #8]
 800ea34:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800ea38:	613b      	str	r3, [r7, #16]
 800ea3a:	4613      	mov	r3, r2
 800ea3c:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 800ea3e:	693b      	ldr	r3, [r7, #16]
 800ea40:	8adb      	ldrh	r3, [r3, #22]
 800ea42:	2b01      	cmp	r3, #1
 800ea44:	d806      	bhi.n	800ea54 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800ea46:	4b1a      	ldr	r3, [pc, #104]	; (800eab0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 800ea48:	4a1a      	ldr	r2, [pc, #104]	; (800eab4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 800ea4a:	f240 110d 	movw	r1, #269	; 0x10d
 800ea4e:	4815      	ldr	r0, [pc, #84]	; (800eaa4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800ea50:	f01f fc0a 	bl	802e268 <__assert_func>
            const uint16_t index = pos + 1;
 800ea54:	693b      	ldr	r3, [r7, #16]
 800ea56:	8a9b      	ldrh	r3, [r3, #20]
 800ea58:	3301      	adds	r3, #1
 800ea5a:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 800ea5c:	89bb      	ldrh	r3, [r7, #12]
 800ea5e:	2b09      	cmp	r3, #9
 800ea60:	d801      	bhi.n	800ea66 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 800ea62:	89bb      	ldrh	r3, [r7, #12]
 800ea64:	e000      	b.n	800ea68 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800ea66:	2300      	movs	r3, #0
 800ea68:	693a      	ldr	r2, [r7, #16]
 800ea6a:	89f9      	ldrh	r1, [r7, #14]
 800ea6c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            nextCharacters.replaceAt0(0x093F);
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	331a      	adds	r3, #26
 800ea74:	61bb      	str	r3, [r7, #24]
 800ea76:	f640 133f 	movw	r3, #2367	; 0x93f
 800ea7a:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 800ea7c:	69bb      	ldr	r3, [r7, #24]
 800ea7e:	8a9b      	ldrh	r3, [r3, #20]
 800ea80:	4619      	mov	r1, r3
 800ea82:	69bb      	ldr	r3, [r7, #24]
 800ea84:	8afa      	ldrh	r2, [r7, #22]
 800ea86:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
    }
    return getNextChar();
 800ea8a:	6878      	ldr	r0, [r7, #4]
 800ea8c:	f012 f90e 	bl	8020cac <_ZN8touchgfx12TextProvider11getNextCharEv>
 800ea90:	4603      	mov	r3, r0
}
 800ea92:	4618      	mov	r0, r3
 800ea94:	3728      	adds	r7, #40	; 0x28
 800ea96:	46bd      	mov	sp, r7
 800ea98:	bd80      	pop	{r7, pc}
 800ea9a:	bf00      	nop
 800ea9c:	0802fc88 	.word	0x0802fc88
 800eaa0:	08031718 	.word	0x08031718
 800eaa4:	0802fc94 	.word	0x0802fc94
 800eaa8:	0802fce0 	.word	0x0802fce0
 800eaac:	08031644 	.word	0x08031644
 800eab0:	0802fcf0 	.word	0x0802fcf0
 800eab4:	080317c4 	.word	0x080317c4

0800eab8 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b082      	sub	sp, #8
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 800eac0:	6878      	ldr	r0, [r7, #4]
 800eac2:	f012 f8ad 	bl	8020c20 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800eac6:	bf00      	nop
 800eac8:	3708      	adds	r7, #8
 800eaca:	46bd      	mov	sp, r7
 800eacc:	bd80      	pop	{r7, pc}

0800eace <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 800eace:	b580      	push	{r7, lr}
 800ead0:	b088      	sub	sp, #32
 800ead2:	af02      	add	r7, sp, #8
 800ead4:	60f8      	str	r0, [r7, #12]
 800ead6:	1d38      	adds	r0, r7, #4
 800ead8:	e880 0006 	stmia.w	r0, {r1, r2}
 800eadc:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 800eade:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800eae2:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800eae4:	1d39      	adds	r1, r7, #4
 800eae6:	697b      	ldr	r3, [r7, #20]
 800eae8:	9301      	str	r3, [sp, #4]
 800eaea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaec:	9300      	str	r3, [sp, #0]
 800eaee:	6a3b      	ldr	r3, [r7, #32]
 800eaf0:	683a      	ldr	r2, [r7, #0]
 800eaf2:	68f8      	ldr	r0, [r7, #12]
 800eaf4:	f00f ff0f 	bl	801e916 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 800eaf8:	bf00      	nop
 800eafa:	3718      	adds	r7, #24
 800eafc:	46bd      	mov	sp, r7
 800eafe:	bd80      	pop	{r7, pc}

0800eb00 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800eb00:	b590      	push	{r4, r7, lr}
 800eb02:	b085      	sub	sp, #20
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	4603      	mov	r3, r0
 800eb08:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800eb0e:	88fb      	ldrh	r3, [r7, #6]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d127      	bne.n	800eb64 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 800eb14:	88fb      	ldrh	r3, [r7, #6]
 800eb16:	4a1e      	ldr	r2, [pc, #120]	; (800eb90 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800eb18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d016      	beq.n	800eb4e <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 800eb20:	88fb      	ldrh	r3, [r7, #6]
 800eb22:	4a1b      	ldr	r2, [pc, #108]	; (800eb90 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800eb24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb28:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800eb2a:	68bb      	ldr	r3, [r7, #8]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	68ba      	ldr	r2, [r7, #8]
 800eb30:	4413      	add	r3, r2
 800eb32:	4a18      	ldr	r2, [pc, #96]	; (800eb94 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800eb34:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800eb36:	68bb      	ldr	r3, [r7, #8]
 800eb38:	685b      	ldr	r3, [r3, #4]
 800eb3a:	68ba      	ldr	r2, [r7, #8]
 800eb3c:	4413      	add	r3, r2
 800eb3e:	4a16      	ldr	r2, [pc, #88]	; (800eb98 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800eb40:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800eb42:	68bb      	ldr	r3, [r7, #8]
 800eb44:	689b      	ldr	r3, [r3, #8]
 800eb46:	68ba      	ldr	r2, [r7, #8]
 800eb48:	4413      	add	r3, r2
 800eb4a:	60fb      	str	r3, [r7, #12]
 800eb4c:	e00a      	b.n	800eb64 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800eb4e:	4b11      	ldr	r3, [pc, #68]	; (800eb94 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800eb50:	4a12      	ldr	r2, [pc, #72]	; (800eb9c <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800eb52:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800eb54:	4a12      	ldr	r2, [pc, #72]	; (800eba0 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800eb56:	4b10      	ldr	r3, [pc, #64]	; (800eb98 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800eb58:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800eb5a:	88fb      	ldrh	r3, [r7, #6]
 800eb5c:	4a11      	ldr	r2, [pc, #68]	; (800eba4 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800eb5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb62:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d00d      	beq.n	800eb86 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 800eb6a:	4a0f      	ldr	r2, [pc, #60]	; (800eba8 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 800eb6c:	88fb      	ldrh	r3, [r7, #6]
 800eb6e:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800eb70:	f000 f83e 	bl	800ebf0 <_ZN17TypedTextDatabase8getFontsEv>
 800eb74:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800eb76:	f000 f833 	bl	800ebe0 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	461a      	mov	r2, r3
 800eb7e:	4621      	mov	r1, r4
 800eb80:	68f8      	ldr	r0, [r7, #12]
 800eb82:	f7ff fea7 	bl	800e8d4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800eb86:	bf00      	nop
 800eb88:	3714      	adds	r7, #20
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	bd90      	pop	{r4, r7, pc}
 800eb8e:	bf00      	nop
 800eb90:	20001ab4 	.word	0x20001ab4
 800eb94:	20001abc 	.word	0x20001abc
 800eb98:	20001ac0 	.word	0x20001ac0
 800eb9c:	080386c8 	.word	0x080386c8
 800eba0:	080386a4 	.word	0x080386a4
 800eba4:	08038774 	.word	0x08038774
 800eba8:	20001ab8 	.word	0x20001ab8

0800ebac <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 800ebac:	b480      	push	{r7}
 800ebae:	b083      	sub	sp, #12
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
 800ebb4:	460b      	mov	r3, r1
 800ebb6:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 800ebb8:	4b07      	ldr	r3, [pc, #28]	; (800ebd8 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 800ebba:	681a      	ldr	r2, [r3, #0]
 800ebbc:	4b07      	ldr	r3, [pc, #28]	; (800ebdc <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 800ebbe:	6819      	ldr	r1, [r3, #0]
 800ebc0:	887b      	ldrh	r3, [r7, #2]
 800ebc2:	009b      	lsls	r3, r3, #2
 800ebc4:	440b      	add	r3, r1
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	005b      	lsls	r3, r3, #1
 800ebca:	4413      	add	r3, r2
}
 800ebcc:	4618      	mov	r0, r3
 800ebce:	370c      	adds	r7, #12
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd6:	4770      	bx	lr
 800ebd8:	20001abc 	.word	0x20001abc
 800ebdc:	20001ac0 	.word	0x20001ac0

0800ebe0 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 800ebe0:	b480      	push	{r7}
 800ebe2:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 800ebe4:	2309      	movs	r3, #9
}
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebee:	4770      	bx	lr

0800ebf0 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 800ebf0:	b480      	push	{r7}
 800ebf2:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 800ebf4:	4b02      	ldr	r3, [pc, #8]	; (800ec00 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfe:	4770      	bx	lr
 800ec00:	20001ac4 	.word	0x20001ac4

0800ec04 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b082      	sub	sp, #8
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
 800ec0c:	6039      	str	r1, [r7, #0]
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	2b01      	cmp	r3, #1
 800ec12:	d113      	bne.n	800ec3c <_Z41__static_initialization_and_destruction_0ii+0x38>
 800ec14:	683b      	ldr	r3, [r7, #0]
 800ec16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ec1a:	4293      	cmp	r3, r2
 800ec1c:	d10e      	bne.n	800ec3c <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 800ec1e:	f7ff fd9f 	bl	800e760 <_Z23getFont_verdana_20_4bppv>
 800ec22:	4602      	mov	r2, r0
};
 800ec24:	4b07      	ldr	r3, [pc, #28]	; (800ec44 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800ec26:	601a      	str	r2, [r3, #0]
    &(getFont_verdana_40_4bpp()),
 800ec28:	f7ff fdee 	bl	800e808 <_Z23getFont_verdana_40_4bppv>
 800ec2c:	4602      	mov	r2, r0
};
 800ec2e:	4b05      	ldr	r3, [pc, #20]	; (800ec44 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800ec30:	605a      	str	r2, [r3, #4]
    &(getFont_verdana_10_4bpp())
 800ec32:	f7ff fd41 	bl	800e6b8 <_Z23getFont_verdana_10_4bppv>
 800ec36:	4602      	mov	r2, r0
};
 800ec38:	4b02      	ldr	r3, [pc, #8]	; (800ec44 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800ec3a:	609a      	str	r2, [r3, #8]
}  // namespace TypedTextDatabase
 800ec3c:	bf00      	nop
 800ec3e:	3708      	adds	r7, #8
 800ec40:	46bd      	mov	sp, r7
 800ec42:	bd80      	pop	{r7, pc}
 800ec44:	20001ac4 	.word	0x20001ac4

0800ec48 <_GLOBAL__sub_I_touchgfx_fonts>:
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	af00      	add	r7, sp, #0
 800ec4c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ec50:	2001      	movs	r0, #1
 800ec52:	f7ff ffd7 	bl	800ec04 <_Z41__static_initialization_and_destruction_0ii>
 800ec56:	bd80      	pop	{r7, pc}

0800ec58 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 800ec58:	b480      	push	{r7}
 800ec5a:	b083      	sub	sp, #12
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
 800ec60:	6039      	str	r1, [r7, #0]
        color = col;
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	683a      	ldr	r2, [r7, #0]
 800ec66:	601a      	str	r2, [r3, #0]
    }
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	370c      	adds	r7, #12
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec74:	4770      	bx	lr

0800ec76 <_ZN8touchgfx4RectC1Essss>:
     * @param  x      The x coordinate.
     * @param  y      The y coordinate.
     * @param  width  The width.
     * @param  height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 800ec76:	b480      	push	{r7}
 800ec78:	b085      	sub	sp, #20
 800ec7a:	af00      	add	r7, sp, #0
 800ec7c:	60f8      	str	r0, [r7, #12]
 800ec7e:	4608      	mov	r0, r1
 800ec80:	4611      	mov	r1, r2
 800ec82:	461a      	mov	r2, r3
 800ec84:	4603      	mov	r3, r0
 800ec86:	817b      	strh	r3, [r7, #10]
 800ec88:	460b      	mov	r3, r1
 800ec8a:	813b      	strh	r3, [r7, #8]
 800ec8c:	4613      	mov	r3, r2
 800ec8e:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	897a      	ldrh	r2, [r7, #10]
 800ec94:	801a      	strh	r2, [r3, #0]
        this->y = y;
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	893a      	ldrh	r2, [r7, #8]
 800ec9a:	805a      	strh	r2, [r3, #2]
        this->width = width;
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	88fa      	ldrh	r2, [r7, #6]
 800eca0:	809a      	strh	r2, [r3, #4]
        this->height = height;
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	8b3a      	ldrh	r2, [r7, #24]
 800eca6:	80da      	strh	r2, [r3, #6]
    }
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	4618      	mov	r0, r3
 800ecac:	3714      	adds	r7, #20
 800ecae:	46bd      	mov	sp, r7
 800ecb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb4:	4770      	bx	lr

0800ecb6 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 800ecb6:	b480      	push	{r7}
 800ecb8:	b083      	sub	sp, #12
 800ecba:	af00      	add	r7, sp, #0
 800ecbc:	6078      	str	r0, [r7, #4]
 800ecbe:	460b      	mov	r3, r1
 800ecc0:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	887a      	ldrh	r2, [r7, #2]
 800ecc6:	801a      	strh	r2, [r3, #0]
    {
    }
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	4618      	mov	r0, r3
 800eccc:	370c      	adds	r7, #12
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd4:	4770      	bx	lr
	...

0800ecd8 <_ZN8touchgfx8DrawableC1Ev>:
    Drawable()
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b084      	sub	sp, #16
 800ecdc:	af02      	add	r7, sp, #8
 800ecde:	6078      	str	r0, [r7, #4]
          visible(true)
 800ece0:	4a13      	ldr	r2, [pc, #76]	; (800ed30 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	601a      	str	r2, [r3, #0]
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	1d18      	adds	r0, r3, #4
 800ecea:	2300      	movs	r3, #0
 800ecec:	9300      	str	r3, [sp, #0]
 800ecee:	2300      	movs	r3, #0
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	2100      	movs	r1, #0
 800ecf4:	f7ff ffbf 	bl	800ec76 <_ZN8touchgfx4RectC1Essss>
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	330c      	adds	r3, #12
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	f7fa fedf 	bl	8009ac0 <_ZN8touchgfx4RectC1Ev>
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	2200      	movs	r2, #0
 800ed06:	615a      	str	r2, [r3, #20]
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	619a      	str	r2, [r3, #24]
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	2200      	movs	r2, #0
 800ed12:	61da      	str	r2, [r3, #28]
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	2200      	movs	r2, #0
 800ed18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	2201      	movs	r2, #1
 800ed20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	4618      	mov	r0, r3
 800ed28:	3708      	adds	r7, #8
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}
 800ed2e:	bf00      	nop
 800ed30:	08033794 	.word	0x08033794

0800ed34 <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 800ed34:	b480      	push	{r7}
 800ed36:	b083      	sub	sp, #12
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
 800ed3c:	460b      	mov	r3, r1
 800ed3e:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	78fa      	ldrb	r2, [r7, #3]
 800ed44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 800ed48:	bf00      	nop
 800ed4a:	370c      	adds	r7, #12
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed52:	4770      	bx	lr

0800ed54 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b082      	sub	sp, #8
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
    {
 800ed5c:	4a06      	ldr	r2, [pc, #24]	; (800ed78 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	601a      	str	r2, [r3, #0]
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	3304      	adds	r3, #4
 800ed66:	4618      	mov	r0, r3
 800ed68:	f000 fff2 	bl	800fd50 <_ZN8touchgfx9ContainerD1Ev>
    }
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	4618      	mov	r0, r3
 800ed70:	3708      	adds	r7, #8
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bd80      	pop	{r7, pc}
 800ed76:	bf00      	nop
 800ed78:	08033864 	.word	0x08033864

0800ed7c <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b082      	sub	sp, #8
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
    }
 800ed84:	6878      	ldr	r0, [r7, #4]
 800ed86:	f7ff ffe5 	bl	800ed54 <_ZN8touchgfx6ScreenD1Ev>
 800ed8a:	213c      	movs	r1, #60	; 0x3c
 800ed8c:	6878      	ldr	r0, [r7, #4]
 800ed8e:	f01e f99d 	bl	802d0cc <_ZdlPvj>
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	4618      	mov	r0, r3
 800ed96:	3708      	adds	r7, #8
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bd80      	pop	{r7, pc}

0800ed9c <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800ed9c:	b480      	push	{r7}
 800ed9e:	b083      	sub	sp, #12
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
    {
    }
 800eda4:	bf00      	nop
 800eda6:	370c      	adds	r7, #12
 800eda8:	46bd      	mov	sp, r7
 800edaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edae:	4770      	bx	lr

0800edb0 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800edb0:	b480      	push	{r7}
 800edb2:	b083      	sub	sp, #12
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
    {
    }
 800edb8:	bf00      	nop
 800edba:	370c      	adds	r7, #12
 800edbc:	46bd      	mov	sp, r7
 800edbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc2:	4770      	bx	lr

0800edc4 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see touchgfx::Application::switchScreen
     */
    virtual void tearDownScreen()
 800edc4:	b480      	push	{r7}
 800edc6:	b083      	sub	sp, #12
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
    {
    }
 800edcc:	bf00      	nop
 800edce:	370c      	adds	r7, #12
 800edd0:	46bd      	mov	sp, r7
 800edd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd6:	4770      	bx	lr

0800edd8 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800edd8:	b480      	push	{r7}
 800edda:	b083      	sub	sp, #12
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
    {
    }
 800ede0:	bf00      	nop
 800ede2:	370c      	adds	r7, #12
 800ede4:	46bd      	mov	sp, r7
 800ede6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edea:	4770      	bx	lr

0800edec <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800edec:	b480      	push	{r7}
 800edee:	b083      	sub	sp, #12
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
 800edf4:	460b      	mov	r3, r1
 800edf6:	70fb      	strb	r3, [r7, #3]
    {
    }
 800edf8:	bf00      	nop
 800edfa:	370c      	adds	r7, #12
 800edfc:	46bd      	mov	sp, r7
 800edfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee02:	4770      	bx	lr

0800ee04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b082      	sub	sp, #8
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
 800ee0c:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	3304      	adds	r3, #4
 800ee12:	6839      	ldr	r1, [r7, #0]
 800ee14:	4618      	mov	r0, r3
 800ee16:	f00b fff5 	bl	801ae04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800ee1a:	bf00      	nop
 800ee1c:	3708      	adds	r7, #8
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	bd80      	pop	{r7, pc}
	...

0800ee24 <_ZN8touchgfx6WidgetC1Ev>:
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b082      	sub	sp, #8
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	4618      	mov	r0, r3
 800ee30:	f7ff ff52 	bl	800ecd8 <_ZN8touchgfx8DrawableC1Ev>
 800ee34:	4a03      	ldr	r2, [pc, #12]	; (800ee44 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	601a      	str	r2, [r3, #0]
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	3708      	adds	r7, #8
 800ee40:	46bd      	mov	sp, r7
 800ee42:	bd80      	pop	{r7, pc}
 800ee44:	08031188 	.word	0x08031188

0800ee48 <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b082      	sub	sp, #8
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	4618      	mov	r0, r3
 800ee54:	2326      	movs	r3, #38	; 0x26
 800ee56:	461a      	mov	r2, r3
 800ee58:	2100      	movs	r1, #0
 800ee5a:	f01f fb75 	bl	802e548 <memset>
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	4618      	mov	r0, r3
 800ee62:	f7ff ffdf 	bl	800ee24 <_ZN8touchgfx6WidgetC1Ev>
 800ee66:	4a0a      	ldr	r2, [pc, #40]	; (800ee90 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	601a      	str	r2, [r3, #0]
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	2200      	movs	r2, #0
 800ee70:	629a      	str	r2, [r3, #40]	; 0x28
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	2200      	movs	r2, #0
 800ee76:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	2101      	movs	r1, #1
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f7ff ff58 	bl	800ed34 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	4618      	mov	r0, r3
 800ee88:	3708      	adds	r7, #8
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}
 800ee8e:	bf00      	nop
 800ee90:	08032f78 	.word	0x08032f78

0800ee94 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 800ee94:	b480      	push	{r7}
 800ee96:	b083      	sub	sp, #12
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
 800ee9c:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	683a      	ldr	r2, [r7, #0]
 800eea2:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800eea4:	bf00      	nop
 800eea6:	370c      	adds	r7, #12
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeae:	4770      	bx	lr

0800eeb0 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b082      	sub	sp, #8
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	6078      	str	r0, [r7, #4]
 800eeb8:	4a05      	ldr	r2, [pc, #20]	; (800eed0 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	601a      	str	r2, [r3, #0]
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	4618      	mov	r0, r3
 800eec2:	f7fd ff3b 	bl	800cd3c <_ZN8touchgfx6WidgetD1Ev>
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	4618      	mov	r0, r3
 800eeca:	3708      	adds	r7, #8
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd80      	pop	{r7, pc}
 800eed0:	08032f78 	.word	0x08032f78

0800eed4 <_ZN8touchgfx14AbstractButtonD0Ev>:
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b082      	sub	sp, #8
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
 800eedc:	6878      	ldr	r0, [r7, #4]
 800eede:	f7ff ffe7 	bl	800eeb0 <_ZN8touchgfx14AbstractButtonD1Ev>
 800eee2:	2130      	movs	r1, #48	; 0x30
 800eee4:	6878      	ldr	r0, [r7, #4]
 800eee6:	f01e f8f1 	bl	802d0cc <_ZdlPvj>
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	4618      	mov	r0, r3
 800eeee:	3708      	adds	r7, #8
 800eef0:	46bd      	mov	sp, r7
 800eef2:	bd80      	pop	{r7, pc}

0800eef4 <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b082      	sub	sp, #8
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	4618      	mov	r0, r3
 800ef00:	f7ff ffa2 	bl	800ee48 <_ZN8touchgfx14AbstractButtonC1Ev>
 800ef04:	4a0c      	ldr	r2, [pc, #48]	; (800ef38 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	601a      	str	r2, [r3, #0]
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	332e      	adds	r3, #46	; 0x2e
 800ef0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ef12:	4618      	mov	r0, r3
 800ef14:	f7ff fecf 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	3330      	adds	r3, #48	; 0x30
 800ef1c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ef20:	4618      	mov	r0, r3
 800ef22:	f7ff fec8 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	22ff      	movs	r2, #255	; 0xff
 800ef2a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    {
    }
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	4618      	mov	r0, r3
 800ef32:	3708      	adds	r7, #8
 800ef34:	46bd      	mov	sp, r7
 800ef36:	bd80      	pop	{r7, pc}
 800ef38:	080332fc 	.word	0x080332fc

0800ef3c <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b082      	sub	sp, #8
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0), reportAsSolid(false)
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	4618      	mov	r0, r3
 800ef48:	2326      	movs	r3, #38	; 0x26
 800ef4a:	461a      	mov	r2, r3
 800ef4c:	2100      	movs	r1, #0
 800ef4e:	f01f fafb 	bl	802e548 <memset>
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	4618      	mov	r0, r3
 800ef56:	f7ff ff65 	bl	800ee24 <_ZN8touchgfx6WidgetC1Ev>
 800ef5a:	4a0b      	ldr	r2, [pc, #44]	; (800ef88 <_ZN8touchgfx3BoxC1Ev+0x4c>)
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	601a      	str	r2, [r3, #0]
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	22ff      	movs	r2, #255	; 0xff
 800ef64:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	3328      	adds	r3, #40	; 0x28
 800ef6c:	2100      	movs	r1, #0
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f7ff fe72 	bl	800ec58 <_ZN8touchgfx9colortypeC1Em>
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	2200      	movs	r2, #0
 800ef78:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	4618      	mov	r0, r3
 800ef80:	3708      	adds	r7, #8
 800ef82:	46bd      	mov	sp, r7
 800ef84:	bd80      	pop	{r7, pc}
 800ef86:	bf00      	nop
 800ef88:	08033230 	.word	0x08033230

0800ef8c <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 800ef8c:	b480      	push	{r7}
 800ef8e:	b083      	sub	sp, #12
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
 800ef94:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	683a      	ldr	r2, [r7, #0]
 800ef9a:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800ef9c:	bf00      	nop
 800ef9e:	370c      	adds	r7, #12
 800efa0:	46bd      	mov	sp, r7
 800efa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa6:	4770      	bx	lr

0800efa8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param  bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b082      	sub	sp, #8
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
 800efb0:	6039      	str	r1, [r7, #0]
        : Widget(), alpha(255)
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	4618      	mov	r0, r3
 800efb6:	2326      	movs	r3, #38	; 0x26
 800efb8:	461a      	mov	r2, r3
 800efba:	2100      	movs	r1, #0
 800efbc:	f01f fac4 	bl	802e548 <memset>
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	4618      	mov	r0, r3
 800efc4:	f7ff ff2e 	bl	800ee24 <_ZN8touchgfx6WidgetC1Ev>
 800efc8:	4a0b      	ldr	r2, [pc, #44]	; (800eff8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x50>)
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	601a      	str	r2, [r3, #0]
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	3326      	adds	r3, #38	; 0x26
 800efd2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800efd6:	4618      	mov	r0, r3
 800efd8:	f7ff fe6d 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	22ff      	movs	r2, #255	; 0xff
 800efe0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 800efe4:	6839      	ldr	r1, [r7, #0]
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	f00f f832 	bl	801e050 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	4618      	mov	r0, r3
 800eff0:	3708      	adds	r7, #8
 800eff2:	46bd      	mov	sp, r7
 800eff4:	bd80      	pop	{r7, pc}
 800eff6:	bf00      	nop
 800eff8:	080334f4 	.word	0x080334f4

0800effc <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>:
 */
class ToggleButton : public Button
{
public:

    virtual void setBitmaps(const Bitmap& bmpReleased, const Bitmap& bmpPressed)
 800effc:	b580      	push	{r7, lr}
 800effe:	b084      	sub	sp, #16
 800f000:	af00      	add	r7, sp, #0
 800f002:	60f8      	str	r0, [r7, #12]
 800f004:	60b9      	str	r1, [r7, #8]
 800f006:	607a      	str	r2, [r7, #4]
    {
        originalPressed = bmpPressed;
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	687a      	ldr	r2, [r7, #4]
 800f00c:	8812      	ldrh	r2, [r2, #0]
 800f00e:	869a      	strh	r2, [r3, #52]	; 0x34
        Button::setBitmaps(bmpReleased, bmpPressed);
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	687a      	ldr	r2, [r7, #4]
 800f014:	68b9      	ldr	r1, [r7, #8]
 800f016:	4618      	mov	r0, r3
 800f018:	f00e fda6 	bl	801db68 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    }
 800f01c:	bf00      	nop
 800f01e:	3710      	adds	r7, #16
 800f020:	46bd      	mov	sp, r7
 800f022:	bd80      	pop	{r7, pc}

0800f024 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 800f024:	b480      	push	{r7}
 800f026:	b083      	sub	sp, #12
 800f028:	af00      	add	r7, sp, #0
 800f02a:	6078      	str	r0, [r7, #4]
 800f02c:	460b      	mov	r3, r1
 800f02e:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 800f030:	4a06      	ldr	r2, [pc, #24]	; (800f04c <_ZN8touchgfx9TypedTextC1Et+0x28>)
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	601a      	str	r2, [r3, #0]
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	887a      	ldrh	r2, [r7, #2]
 800f03a:	809a      	strh	r2, [r3, #4]
    }
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	4618      	mov	r0, r3
 800f040:	370c      	adds	r7, #12
 800f042:	46bd      	mov	sp, r7
 800f044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f048:	4770      	bx	lr
 800f04a:	bf00      	nop
 800f04c:	080310d8 	.word	0x080310d8

0800f050 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 800f050:	b580      	push	{r7, lr}
 800f052:	b082      	sub	sp, #8
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	4618      	mov	r0, r3
 800f05c:	2326      	movs	r3, #38	; 0x26
 800f05e:	461a      	mov	r2, r3
 800f060:	2100      	movs	r1, #0
 800f062:	f01f fa71 	bl	802e548 <memset>
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	4618      	mov	r0, r3
 800f06a:	f7ff fedb 	bl	800ee24 <_ZN8touchgfx6WidgetC1Ev>
 800f06e:	4a14      	ldr	r2, [pc, #80]	; (800f0c0 <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	601a      	str	r2, [r3, #0]
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	3328      	adds	r3, #40	; 0x28
 800f078:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f07c:	4618      	mov	r0, r3
 800f07e:	f7ff ffd1 	bl	800f024 <_ZN8touchgfx9TypedTextC1Et>
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	3330      	adds	r3, #48	; 0x30
 800f086:	2100      	movs	r1, #0
 800f088:	4618      	mov	r0, r3
 800f08a:	f7ff fde5 	bl	800ec58 <_ZN8touchgfx9colortypeC1Em>
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	2200      	movs	r2, #0
 800f092:	869a      	strh	r2, [r3, #52]	; 0x34
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	22ff      	movs	r2, #255	; 0xff
 800f098:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	2200      	movs	r2, #0
 800f0a0:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	3708      	adds	r7, #8
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	bd80      	pop	{r7, pc}
 800f0be:	bf00      	nop
 800f0c0:	08033184 	.word	0x08033184

0800f0c4 <_ZN8touchgfx6Slider19setNewValueCallbackERNS_15GenericCallbackIRKS0_ivEE>:
     * @param  callback The callback to be executed. The callback will be given a reference
     *                  to the Slider and the current value of the slider.
     *
     * @see GenericCallback
     */
    void setNewValueCallback(GenericCallback<const Slider&, int>& callback)
 800f0c4:	b480      	push	{r7}
 800f0c6:	b083      	sub	sp, #12
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
 800f0cc:	6039      	str	r1, [r7, #0]
    {
        newValueCallback = &callback;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	683a      	ldr	r2, [r7, #0]
 800f0d2:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    }
 800f0d6:	bf00      	nop
 800f0d8:	370c      	adds	r7, #12
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e0:	4770      	bx	lr

0800f0e2 <_ZN8touchgfx14ButtonWithIcon8setIconXEs>:
     *           allowed.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The value set is overwritten on a subsequent call to setBitmaps.
     */
    void setIconX(int16_t x)
 800f0e2:	b480      	push	{r7}
 800f0e4:	b083      	sub	sp, #12
 800f0e6:	af00      	add	r7, sp, #0
 800f0e8:	6078      	str	r0, [r7, #4]
 800f0ea:	460b      	mov	r3, r1
 800f0ec:	807b      	strh	r3, [r7, #2]
    {
        iconX = x;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	887a      	ldrh	r2, [r7, #2]
 800f0f2:	871a      	strh	r2, [r3, #56]	; 0x38
    }
 800f0f4:	bf00      	nop
 800f0f6:	370c      	adds	r7, #12
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fe:	4770      	bx	lr

0800f100 <_ZN8touchgfx14ButtonWithIcon8setIconYEs>:
     *           allowed.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The value set is overwritten on a subsequent call to setBitmaps.
     */
    void setIconY(int16_t y)
 800f100:	b480      	push	{r7}
 800f102:	b083      	sub	sp, #12
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
 800f108:	460b      	mov	r3, r1
 800f10a:	807b      	strh	r3, [r7, #2]
    {
        iconY = y;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	887a      	ldrh	r2, [r7, #2]
 800f110:	875a      	strh	r2, [r3, #58]	; 0x3a
    }
 800f112:	bf00      	nop
 800f114:	370c      	adds	r7, #12
 800f116:	46bd      	mov	sp, r7
 800f118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f11c:	4770      	bx	lr

0800f11e <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>:
     *           allowed.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The values set are overwritten on a subsequent call to setBitmaps.
     */
    void setIconXY(int16_t x, int16_t y)
 800f11e:	b580      	push	{r7, lr}
 800f120:	b082      	sub	sp, #8
 800f122:	af00      	add	r7, sp, #0
 800f124:	6078      	str	r0, [r7, #4]
 800f126:	460b      	mov	r3, r1
 800f128:	807b      	strh	r3, [r7, #2]
 800f12a:	4613      	mov	r3, r2
 800f12c:	803b      	strh	r3, [r7, #0]
    {
        setIconX(x);
 800f12e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f132:	4619      	mov	r1, r3
 800f134:	6878      	ldr	r0, [r7, #4]
 800f136:	f7ff ffd4 	bl	800f0e2 <_ZN8touchgfx14ButtonWithIcon8setIconXEs>
        setIconY(y);
 800f13a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800f13e:	4619      	mov	r1, r3
 800f140:	6878      	ldr	r0, [r7, #4]
 800f142:	f7ff ffdd 	bl	800f100 <_ZN8touchgfx14ButtonWithIcon8setIconYEs>
    }
 800f146:	bf00      	nop
 800f148:	3708      	adds	r7, #8
 800f14a:	46bd      	mov	sp, r7
 800f14c:	bd80      	pop	{r7, pc}
	...

0800f150 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev>:
class View : public Screen
 800f150:	b580      	push	{r7, lr}
 800f152:	b082      	sub	sp, #8
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
 800f158:	4a05      	ldr	r2, [pc, #20]	; (800f170 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x20>)
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	601a      	str	r2, [r3, #0]
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	4618      	mov	r0, r3
 800f162:	f7ff fdf7 	bl	800ed54 <_ZN8touchgfx6ScreenD1Ev>
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	4618      	mov	r0, r3
 800f16a:	3708      	adds	r7, #8
 800f16c:	46bd      	mov	sp, r7
 800f16e:	bd80      	pop	{r7, pc}
 800f170:	080318f4 	.word	0x080318f4

0800f174 <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev>:
 800f174:	b580      	push	{r7, lr}
 800f176:	b082      	sub	sp, #8
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
 800f17c:	6878      	ldr	r0, [r7, #4]
 800f17e:	f7ff ffe7 	bl	800f150 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev>
 800f182:	2140      	movs	r1, #64	; 0x40
 800f184:	6878      	ldr	r0, [r7, #4]
 800f186:	f01d ffa1 	bl	802d0cc <_ZdlPvj>
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	4618      	mov	r0, r3
 800f18e:	3708      	adds	r7, #8
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}

0800f194 <_ZN18mainScreenViewBaseD1Ev>:

class mainScreenViewBase : public touchgfx::View<mainScreenPresenter>
{
public:
    mainScreenViewBase();
    virtual ~mainScreenViewBase() {}
 800f194:	b580      	push	{r7, lr}
 800f196:	b082      	sub	sp, #8
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
 800f19c:	4a2d      	ldr	r2, [pc, #180]	; (800f254 <_ZN18mainScreenViewBaseD1Ev+0xc0>)
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	601a      	str	r2, [r3, #0]
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	f000 fd8d 	bl	800fcc8 <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_6SliderEivED1Ev>
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	f000 fda9 	bl	800fd0c <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	f203 43f4 	addw	r3, r3, #1268	; 0x4f4
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	f000 feab 	bl	800ff1c <_ZN8touchgfx14ButtonWithIconD1Ev>
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	f000 fe47 	bl	800fe60 <_ZN8touchgfx8TextAreaD1Ev>
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 800f1d8:	4618      	mov	r0, r3
 800f1da:	f000 fe41 	bl	800fe60 <_ZN8touchgfx8TextAreaD1Ev>
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	f000 fe3b 	bl	800fe60 <_ZN8touchgfx8TextAreaD1Ev>
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	f503 7351 	add.w	r3, r3, #836	; 0x344
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	f000 fe5d 	bl	800feb0 <_ZN8touchgfx6SliderD1Ev>
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	f000 fe57 	bl	800feb0 <_ZN8touchgfx6SliderD1Ev>
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800f208:	4618      	mov	r0, r3
 800f20a:	f000 fe51 	bl	800feb0 <_ZN8touchgfx6SliderD1Ev>
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800f214:	4618      	mov	r0, r3
 800f216:	f000 fe23 	bl	800fe60 <_ZN8touchgfx8TextAreaD1Ev>
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	33d4      	adds	r3, #212	; 0xd4
 800f21e:	4618      	mov	r0, r3
 800f220:	f000 fe1e 	bl	800fe60 <_ZN8touchgfx8TextAreaD1Ev>
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	339c      	adds	r3, #156	; 0x9c
 800f228:	4618      	mov	r0, r3
 800f22a:	f000 fdf7 	bl	800fe1c <_ZN8touchgfx12ToggleButtonD1Ev>
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	3370      	adds	r3, #112	; 0x70
 800f232:	4618      	mov	r0, r3
 800f234:	f000 fdd0 	bl	800fdd8 <_ZN8touchgfx5ImageD1Ev>
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	3340      	adds	r3, #64	; 0x40
 800f23c:	4618      	mov	r0, r3
 800f23e:	f000 fda9 	bl	800fd94 <_ZN8touchgfx3BoxD1Ev>
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	4618      	mov	r0, r3
 800f246:	f7ff ff83 	bl	800f150 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev>
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	4618      	mov	r0, r3
 800f24e:	3708      	adds	r7, #8
 800f250:	46bd      	mov	sp, r7
 800f252:	bd80      	pop	{r7, pc}
 800f254:	08031880 	.word	0x08031880

0800f258 <_ZN18mainScreenViewBaseD0Ev>:
 800f258:	b580      	push	{r7, lr}
 800f25a:	b082      	sub	sp, #8
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
 800f260:	6878      	ldr	r0, [r7, #4]
 800f262:	f7ff ff97 	bl	800f194 <_ZN18mainScreenViewBaseD1Ev>
 800f266:	f44f 61aa 	mov.w	r1, #1360	; 0x550
 800f26a:	6878      	ldr	r0, [r7, #4]
 800f26c:	f01d ff2e 	bl	802d0cc <_ZdlPvj>
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	4618      	mov	r0, r3
 800f274:	3708      	adds	r7, #8
 800f276:	46bd      	mov	sp, r7
 800f278:	bd80      	pop	{r7, pc}

0800f27a <_ZN18mainScreenViewBase24XAxisSliderValue_ChangedEi>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void XAxisSliderValue_Changed(int value)
 800f27a:	b480      	push	{r7}
 800f27c:	b083      	sub	sp, #12
 800f27e:	af00      	add	r7, sp, #0
 800f280:	6078      	str	r0, [r7, #4]
 800f282:	6039      	str	r1, [r7, #0]
    {
        // Override and implement this function in mainScreen
    }
 800f284:	bf00      	nop
 800f286:	370c      	adds	r7, #12
 800f288:	46bd      	mov	sp, r7
 800f28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28e:	4770      	bx	lr

0800f290 <_ZN18mainScreenViewBase27YAxisSlider_L_Value_ChangedEi>:

    virtual void YAxisSlider_L_Value_Changed(int value)
 800f290:	b480      	push	{r7}
 800f292:	b083      	sub	sp, #12
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]
 800f298:	6039      	str	r1, [r7, #0]
    {
        // Override and implement this function in mainScreen
    }
 800f29a:	bf00      	nop
 800f29c:	370c      	adds	r7, #12
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a4:	4770      	bx	lr

0800f2a6 <_ZN18mainScreenViewBase38ManipulatorControlToggleButton_ClickedEv>:

    virtual void ManipulatorControlToggleButton_Clicked()
 800f2a6:	b480      	push	{r7}
 800f2a8:	b083      	sub	sp, #12
 800f2aa:	af00      	add	r7, sp, #0
 800f2ac:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in mainScreen
    }
 800f2ae:	bf00      	nop
 800f2b0:	370c      	adds	r7, #12
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b8:	4770      	bx	lr

0800f2ba <_ZN18mainScreenViewBase27YAxisSlider_R_Value_ChangedEi>:

    virtual void YAxisSlider_R_Value_Changed(int value)
 800f2ba:	b480      	push	{r7}
 800f2bc:	b083      	sub	sp, #12
 800f2be:	af00      	add	r7, sp, #0
 800f2c0:	6078      	str	r0, [r7, #4]
 800f2c2:	6039      	str	r1, [r7, #0]
    {
        // Override and implement this function in mainScreen
    }
 800f2c4:	bf00      	nop
 800f2c6:	370c      	adds	r7, #12
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ce:	4770      	bx	lr

0800f2d0 <_ZN18mainScreenViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b082      	sub	sp, #8
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800f2d8:	f00f febe 	bl	801f058 <_ZN8touchgfx11Application11getInstanceEv>
 800f2dc:	4603      	mov	r3, r0
    }
 800f2de:	4618      	mov	r0, r3
 800f2e0:	3708      	adds	r7, #8
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	bd80      	pop	{r7, pc}
	...

0800f2e8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     *
     * @note This function is not available to call before the LCD has been setup, because the
     *       color depth is required. Consider using the function getColorFromRGB for a
     *       specific class, e.g. LCD16::getColorFromRGB().
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 800f2e8:	b590      	push	{r4, r7, lr}
 800f2ea:	b083      	sub	sp, #12
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	71fb      	strb	r3, [r7, #7]
 800f2f2:	460b      	mov	r3, r1
 800f2f4:	71bb      	strb	r3, [r7, #6]
 800f2f6:	4613      	mov	r3, r2
 800f2f8:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 800f2fa:	f7fa f859 	bl	80093b0 <_ZN8touchgfx3HAL11getInstanceEv>
 800f2fe:	4603      	mov	r3, r0
 800f300:	2b00      	cmp	r3, #0
 800f302:	d105      	bne.n	800f310 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 800f304:	4b0a      	ldr	r3, [pc, #40]	; (800f330 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 800f306:	4a0b      	ldr	r2, [pc, #44]	; (800f334 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 800f308:	2135      	movs	r1, #53	; 0x35
 800f30a:	480b      	ldr	r0, [pc, #44]	; (800f338 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 800f30c:	f01e ffac 	bl	802e268 <__assert_func>
 800f310:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 800f312:	f7f9 fc25 	bl	8008b60 <_ZN8touchgfx3HAL3lcdEv>
 800f316:	6803      	ldr	r3, [r0, #0]
 800f318:	3328      	adds	r3, #40	; 0x28
 800f31a:	681c      	ldr	r4, [r3, #0]
 800f31c:	797b      	ldrb	r3, [r7, #5]
 800f31e:	79ba      	ldrb	r2, [r7, #6]
 800f320:	79f9      	ldrb	r1, [r7, #7]
 800f322:	47a0      	blx	r4
 800f324:	4603      	mov	r3, r0
    }
 800f326:	4618      	mov	r0, r3
 800f328:	370c      	adds	r7, #12
 800f32a:	46bd      	mov	sp, r7
 800f32c:	bd90      	pop	{r4, r7, pc}
 800f32e:	bf00      	nop
 800f330:	0802fcfc 	.word	0x0802fcfc
 800f334:	08031950 	.word	0x08031950
 800f338:	0802fd40 	.word	0x0802fd40

0800f33c <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b082      	sub	sp, #8
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
 800f344:	4a05      	ldr	r2, [pc, #20]	; (800f35c <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	601a      	str	r2, [r3, #0]
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	4618      	mov	r0, r3
 800f34e:	f7ff fdaf 	bl	800eeb0 <_ZN8touchgfx14AbstractButtonD1Ev>
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	4618      	mov	r0, r3
 800f356:	3708      	adds	r7, #8
 800f358:	46bd      	mov	sp, r7
 800f35a:	bd80      	pop	{r7, pc}
 800f35c:	080332fc 	.word	0x080332fc

0800f360 <_ZN8touchgfx6ButtonD0Ev>:
 800f360:	b580      	push	{r7, lr}
 800f362:	b082      	sub	sp, #8
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
 800f368:	6878      	ldr	r0, [r7, #4]
 800f36a:	f7ff ffe7 	bl	800f33c <_ZN8touchgfx6ButtonD1Ev>
 800f36e:	2134      	movs	r1, #52	; 0x34
 800f370:	6878      	ldr	r0, [r7, #4]
 800f372:	f01d feab 	bl	802d0cc <_ZdlPvj>
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	4618      	mov	r0, r3
 800f37a:	3708      	adds	r7, #8
 800f37c:	46bd      	mov	sp, r7
 800f37e:	bd80      	pop	{r7, pc}

0800f380 <_ZN8touchgfx12ToggleButtonC1Ev>:
class ToggleButton : public Button
 800f380:	b580      	push	{r7, lr}
 800f382:	b082      	sub	sp, #8
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	4618      	mov	r0, r3
 800f38c:	f7ff fdb2 	bl	800eef4 <_ZN8touchgfx6ButtonC1Ev>
 800f390:	4a07      	ldr	r2, [pc, #28]	; (800f3b0 <_ZN8touchgfx12ToggleButtonC1Ev+0x30>)
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	601a      	str	r2, [r3, #0]
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	3334      	adds	r3, #52	; 0x34
 800f39a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f39e:	4618      	mov	r0, r3
 800f3a0:	f7ff fc89 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	3708      	adds	r7, #8
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	bd80      	pop	{r7, pc}
 800f3ae:	bf00      	nop
 800f3b0:	08032fe4 	.word	0x08032fe4

0800f3b4 <_ZN18mainScreenViewBaseC1Ev>:
#include <gui_generated/mainscreen_screen/mainScreenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

mainScreenViewBase::mainScreenViewBase() :
 800f3b4:	b590      	push	{r4, r7, lr}
 800f3b6:	b0b9      	sub	sp, #228	; 0xe4
 800f3b8:	af02      	add	r7, sp, #8
 800f3ba:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &mainScreenViewBase::buttonCallbackHandler),
    sliderValueChangedCallback(this, &mainScreenViewBase::sliderValueChangedCallbackHandler)
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	4618      	mov	r0, r3
 800f3c0:	f000 fbcc 	bl	800fb5c <_ZN8touchgfx4ViewI19mainScreenPresenterEC1Ev>
 800f3c4:	4adc      	ldr	r2, [pc, #880]	; (800f738 <_ZN18mainScreenViewBaseC1Ev+0x384>)
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	601a      	str	r2, [r3, #0]
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	3340      	adds	r3, #64	; 0x40
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	f7ff fdb4 	bl	800ef3c <_ZN8touchgfx3BoxC1Ev>
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800f3da:	f107 0320 	add.w	r3, r7, #32
 800f3de:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	f7ff fc67 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 800f3e8:	f107 0320 	add.w	r3, r7, #32
 800f3ec:	4619      	mov	r1, r3
 800f3ee:	4620      	mov	r0, r4
 800f3f0:	f7ff fdda 	bl	800efa8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	339c      	adds	r3, #156	; 0x9c
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	f7ff ffc1 	bl	800f380 <_ZN8touchgfx12ToggleButtonC1Ev>
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	33d4      	adds	r3, #212	; 0xd4
 800f402:	4618      	mov	r0, r3
 800f404:	f7ff fe24 	bl	800f050 <_ZN8touchgfx8TextAreaC1Ev>
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800f40e:	4618      	mov	r0, r3
 800f410:	f7ff fe1e 	bl	800f050 <_ZN8touchgfx8TextAreaC1Ev>
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800f41a:	4618      	mov	r0, r3
 800f41c:	f00c f86c 	bl	801b4f8 <_ZN8touchgfx6SliderC1Ev>
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800f426:	4618      	mov	r0, r3
 800f428:	f00c f866 	bl	801b4f8 <_ZN8touchgfx6SliderC1Ev>
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	f503 7351 	add.w	r3, r3, #836	; 0x344
 800f432:	4618      	mov	r0, r3
 800f434:	f00c f860 	bl	801b4f8 <_ZN8touchgfx6SliderC1Ev>
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800f43e:	4618      	mov	r0, r3
 800f440:	f7ff fe06 	bl	800f050 <_ZN8touchgfx8TextAreaC1Ev>
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 800f44a:	4618      	mov	r0, r3
 800f44c:	f7ff fe00 	bl	800f050 <_ZN8touchgfx8TextAreaC1Ev>
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 800f456:	4618      	mov	r0, r3
 800f458:	f7ff fdfa 	bl	800f050 <_ZN8touchgfx8TextAreaC1Ev>
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	f203 43f4 	addw	r3, r3, #1268	; 0x4f4
 800f462:	4618      	mov	r0, r3
 800f464:	f00e fdd0 	bl	801e008 <_ZN8touchgfx14ButtonWithIconC1Ev>
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	f503 60a6 	add.w	r0, r3, #1328	; 0x530
 800f46e:	4bb3      	ldr	r3, [pc, #716]	; (800f73c <_ZN18mainScreenViewBaseC1Ev+0x388>)
 800f470:	627b      	str	r3, [r7, #36]	; 0x24
 800f472:	2300      	movs	r3, #0
 800f474:	62bb      	str	r3, [r7, #40]	; 0x28
 800f476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f47a:	cb0c      	ldmia	r3, {r2, r3}
 800f47c:	6879      	ldr	r1, [r7, #4]
 800f47e:	f000 fb93 	bl	800fba8 <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	f503 60a8 	add.w	r0, r3, #1344	; 0x540
 800f488:	4bad      	ldr	r3, [pc, #692]	; (800f740 <_ZN18mainScreenViewBaseC1Ev+0x38c>)
 800f48a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f48c:	2300      	movs	r3, #0
 800f48e:	633b      	str	r3, [r7, #48]	; 0x30
 800f490:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f494:	cb0c      	ldmia	r3, {r2, r3}
 800f496:	6879      	ldr	r1, [r7, #4]
 800f498:	f000 fbb6 	bl	800fc08 <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE>
{

    __background.setPosition(0, 0, 240, 320);
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800f4a2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800f4a6:	9300      	str	r3, [sp, #0]
 800f4a8:	23f0      	movs	r3, #240	; 0xf0
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	2100      	movs	r1, #0
 800f4ae:	f7fd fa29 	bl	800c904 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	2100      	movs	r1, #0
 800f4bc:	2000      	movs	r0, #0
 800f4be:	f7ff ff13 	bl	800f2e8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	4619      	mov	r1, r3
 800f4c6:	4620      	mov	r0, r4
 800f4c8:	f7ff fd60 	bl	800ef8c <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    backgroundImage.setXY(0, 0);
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	3370      	adds	r3, #112	; 0x70
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	2100      	movs	r1, #0
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	f7fd fa7a 	bl	800c9ce <_ZN8touchgfx8Drawable5setXYEss>
    backgroundImage.setBitmap(touchgfx::Bitmap(BITMAP_BLUE_BACKGROUNDS_MAIN_BG_PORTRAIT_240X320PX_ID));
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800f4e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f4e4:	2100      	movs	r1, #0
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	f7ff fbe5 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 800f4ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f4f0:	4619      	mov	r1, r3
 800f4f2:	4620      	mov	r0, r4
 800f4f4:	f00e fdac 	bl	801e050 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    manipulatorControlToggleButton.setXY(72, 193);
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	339c      	adds	r3, #156	; 0x9c
 800f4fc:	22c1      	movs	r2, #193	; 0xc1
 800f4fe:	2148      	movs	r1, #72	; 0x48
 800f500:	4618      	mov	r0, r3
 800f502:	f7fd fa64 	bl	800c9ce <_ZN8touchgfx8Drawable5setXYEss>
    manipulatorControlToggleButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_ROUND_SMALL_BUTTON_OFF_ID), touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_ROUND_SMALL_BUTTON_ON_ID));
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 800f50c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f510:	210c      	movs	r1, #12
 800f512:	4618      	mov	r0, r3
 800f514:	f7ff fbcf 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 800f518:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f51c:	210d      	movs	r1, #13
 800f51e:	4618      	mov	r0, r3
 800f520:	f7ff fbc9 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 800f524:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800f528:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f52c:	4619      	mov	r1, r3
 800f52e:	4620      	mov	r0, r4
 800f530:	f7ff fd64 	bl	800effc <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>
    manipulatorControlToggleButton.setAction(buttonCallback);
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 800f540:	4619      	mov	r1, r3
 800f542:	4610      	mov	r0, r2
 800f544:	f7ff fca6 	bl	800ee94 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    titleText.setXY(23, 15);
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	33d4      	adds	r3, #212	; 0xd4
 800f54c:	220f      	movs	r2, #15
 800f54e:	2117      	movs	r1, #23
 800f550:	4618      	mov	r0, r3
 800f552:	f7fd fa3c 	bl	800c9ce <_ZN8touchgfx8Drawable5setXYEss>
    titleText.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 800f55c:	2200      	movs	r2, #0
 800f55e:	2100      	movs	r1, #0
 800f560:	2000      	movs	r0, #0
 800f562:	f7ff fec1 	bl	800f2e8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800f566:	4603      	mov	r3, r0
 800f568:	f8c7 409c 	str.w	r4, [r7, #156]	; 0x9c
 800f56c:	61fb      	str	r3, [r7, #28]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 800f56e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f572:	69fa      	ldr	r2, [r7, #28]
 800f574:	631a      	str	r2, [r3, #48]	; 0x30
    titleText.setLinespacing(0);
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	33d4      	adds	r3, #212	; 0xd4
 800f57a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f57e:	2300      	movs	r3, #0
 800f580:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 800f584:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f588:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 800f58c:	869a      	strh	r2, [r3, #52]	; 0x34
    titleText.setTypedText(touchgfx::TypedText(T_SINGLEUSEID1));
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 800f594:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f598:	2100      	movs	r1, #0
 800f59a:	4618      	mov	r0, r3
 800f59c:	f7ff fd42 	bl	800f024 <_ZN8touchgfx9TypedTextC1Et>
 800f5a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f5a4:	4619      	mov	r1, r3
 800f5a6:	4620      	mov	r0, r4
 800f5a8:	f00e faa4 	bl	801daf4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 800f5ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	f7fd f95b 	bl	800c86c <_ZN8touchgfx9TypedTextD1Ev>

    manipulatorText.setXY(61, 128);
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800f5bc:	2280      	movs	r2, #128	; 0x80
 800f5be:	213d      	movs	r1, #61	; 0x3d
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	f7fd fa04 	bl	800c9ce <_ZN8touchgfx8Drawable5setXYEss>
    manipulatorText.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	f503 7488 	add.w	r4, r3, #272	; 0x110
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	2100      	movs	r1, #0
 800f5d0:	2000      	movs	r0, #0
 800f5d2:	f7ff fe89 	bl	800f2e8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800f5dc:	61bb      	str	r3, [r7, #24]
        this->color = color;
 800f5de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f5e2:	69ba      	ldr	r2, [r7, #24]
 800f5e4:	631a      	str	r2, [r3, #48]	; 0x30
    manipulatorText.setLinespacing(0);
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800f5ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
        linespace = space;
 800f5f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f5fa:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 800f5fe:	869a      	strh	r2, [r3, #52]	; 0x34
    manipulatorText.setTypedText(touchgfx::TypedText(T_SINGLEUSEID2));
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	f503 7488 	add.w	r4, r3, #272	; 0x110
 800f606:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f60a:	2101      	movs	r1, #1
 800f60c:	4618      	mov	r0, r3
 800f60e:	f7ff fd09 	bl	800f024 <_ZN8touchgfx9TypedTextC1Et>
 800f612:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f616:	4619      	mov	r1, r3
 800f618:	4620      	mov	r0, r4
 800f61a:	f00e fa6b 	bl	801daf4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 800f61e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f622:	4618      	mov	r0, r3
 800f624:	f7fd f922 	bl	800c86c <_ZN8touchgfx9TypedTextD1Ev>

    yAxisSlider_L.setXY(23, 52);
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800f62e:	2234      	movs	r2, #52	; 0x34
 800f630:	2117      	movs	r1, #23
 800f632:	4618      	mov	r0, r3
 800f634:	f7fd f9cb 	bl	800c9ce <_ZN8touchgfx8Drawable5setXYEss>
    yAxisSlider_L.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_SLIDER_VERTICAL_SMALL_SLIDER3_VERTICAL_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_VERTICAL_SMALL_SLIDER3_VERTICAL_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_VERTICAL_SMALL_INDICATORS_SLIDER3_VERTICAL_ROUND_NOB_ID));
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 800f63e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f642:	210b      	movs	r1, #11
 800f644:	4618      	mov	r0, r3
 800f646:	f7ff fb36 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 800f64a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f64e:	210b      	movs	r1, #11
 800f650:	4618      	mov	r0, r3
 800f652:	f7ff fb30 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 800f656:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f65a:	210a      	movs	r1, #10
 800f65c:	4618      	mov	r0, r3
 800f65e:	f7ff fb2a 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 800f662:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f666:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800f66a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800f66e:	4620      	mov	r0, r4
 800f670:	f00b ff96 	bl	801b5a0 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>
    yAxisSlider_L.setupVerticalSlider(7, 3, 0, 0, 125);
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	f503 70a6 	add.w	r0, r3, #332	; 0x14c
 800f67a:	237d      	movs	r3, #125	; 0x7d
 800f67c:	9301      	str	r3, [sp, #4]
 800f67e:	2300      	movs	r3, #0
 800f680:	9300      	str	r3, [sp, #0]
 800f682:	2300      	movs	r3, #0
 800f684:	2203      	movs	r2, #3
 800f686:	2107      	movs	r1, #7
 800f688:	f00b fe68 	bl	801b35c <_ZN8touchgfx6Slider19setupVerticalSliderEttttt>
    yAxisSlider_L.setValueRange(0, 100);
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800f692:	2264      	movs	r2, #100	; 0x64
 800f694:	2100      	movs	r1, #0
 800f696:	4618      	mov	r0, r3
 800f698:	f00b fd67 	bl	801b16a <_ZN8touchgfx6Slider13setValueRangeEii>
    yAxisSlider_L.setValue(0);
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800f6a2:	2100      	movs	r1, #0
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	f00b fcec 	bl	801b082 <_ZN8touchgfx6Slider8setValueEi>
    yAxisSlider_L.setNewValueCallback(sliderValueChangedCallback);
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	f503 72a6 	add.w	r2, r3, #332	; 0x14c
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
 800f6b6:	4619      	mov	r1, r3
 800f6b8:	4610      	mov	r0, r2
 800f6ba:	f7ff fd03 	bl	800f0c4 <_ZN8touchgfx6Slider19setNewValueCallbackERNS_15GenericCallbackIRKS0_ivEE>

    xAxisSlider.setXY(31, 261);
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800f6c4:	f240 1205 	movw	r2, #261	; 0x105
 800f6c8:	211f      	movs	r1, #31
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	f7fd f97f 	bl	800c9ce <_ZN8touchgfx8Drawable5setXYEss>
    xAxisSlider.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_SLIDER_HORIZONTAL_SMALL_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_SLIDER_HORIZONTAL_SMALL_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_INDICATORS_SLIDER_HORIZONTAL_SMALL_ROUND_KNOB_ID));
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	f503 7412 	add.w	r4, r3, #584	; 0x248
 800f6d6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800f6da:	2109      	movs	r1, #9
 800f6dc:	4618      	mov	r0, r3
 800f6de:	f7ff faea 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 800f6e2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f6e6:	2109      	movs	r1, #9
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	f7ff fae4 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 800f6ee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800f6f2:	2108      	movs	r1, #8
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f7ff fade 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 800f6fa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800f6fe:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800f702:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800f706:	4620      	mov	r0, r4
 800f708:	f00b ff4a 	bl	801b5a0 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>
    xAxisSlider.setupHorizontalSlider(3, 7, 0, 0, 125);
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	f503 7012 	add.w	r0, r3, #584	; 0x248
 800f712:	237d      	movs	r3, #125	; 0x7d
 800f714:	9301      	str	r3, [sp, #4]
 800f716:	2300      	movs	r3, #0
 800f718:	9300      	str	r3, [sp, #0]
 800f71a:	2300      	movs	r3, #0
 800f71c:	2207      	movs	r2, #7
 800f71e:	2103      	movs	r1, #3
 800f720:	f00b fdb8 	bl	801b294 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>
    xAxisSlider.setValueRange(0, 100);
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800f72a:	2264      	movs	r2, #100	; 0x64
 800f72c:	2100      	movs	r1, #0
 800f72e:	4618      	mov	r0, r3
 800f730:	f00b fd1b 	bl	801b16a <_ZN8touchgfx6Slider13setValueRangeEii>
 800f734:	e006      	b.n	800f744 <_ZN18mainScreenViewBaseC1Ev+0x390>
 800f736:	bf00      	nop
 800f738:	08031880 	.word	0x08031880
 800f73c:	0800fab1 	.word	0x0800fab1
 800f740:	0800faf5 	.word	0x0800faf5
    xAxisSlider.setValue(50);
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800f74a:	2132      	movs	r1, #50	; 0x32
 800f74c:	4618      	mov	r0, r3
 800f74e:	f00b fc98 	bl	801b082 <_ZN8touchgfx6Slider8setValueEi>
    xAxisSlider.setNewValueCallback(sliderValueChangedCallback);
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	f503 7212 	add.w	r2, r3, #584	; 0x248
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
 800f75e:	4619      	mov	r1, r3
 800f760:	4610      	mov	r0, r2
 800f762:	f7ff fcaf 	bl	800f0c4 <_ZN8touchgfx6Slider19setNewValueCallbackERNS_15GenericCallbackIRKS0_ivEE>

    yAxisSlider_R.setXY(183, 52);
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	f503 7351 	add.w	r3, r3, #836	; 0x344
 800f76c:	2234      	movs	r2, #52	; 0x34
 800f76e:	21b7      	movs	r1, #183	; 0xb7
 800f770:	4618      	mov	r0, r3
 800f772:	f7fd f92c 	bl	800c9ce <_ZN8touchgfx8Drawable5setXYEss>
    yAxisSlider_R.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_SLIDER_VERTICAL_SMALL_SLIDER3_VERTICAL_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_VERTICAL_SMALL_SLIDER3_VERTICAL_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_VERTICAL_SMALL_INDICATORS_SLIDER3_VERTICAL_ROUND_NOB_ID));
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	f503 7451 	add.w	r4, r3, #836	; 0x344
 800f77c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f780:	210b      	movs	r1, #11
 800f782:	4618      	mov	r0, r3
 800f784:	f7ff fa97 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 800f788:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800f78c:	210b      	movs	r1, #11
 800f78e:	4618      	mov	r0, r3
 800f790:	f7ff fa91 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 800f794:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800f798:	210a      	movs	r1, #10
 800f79a:	4618      	mov	r0, r3
 800f79c:	f7ff fa8b 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 800f7a0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800f7a4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800f7a8:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800f7ac:	4620      	mov	r0, r4
 800f7ae:	f00b fef7 	bl	801b5a0 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>
    yAxisSlider_R.setupVerticalSlider(7, 3, 0, 0, 125);
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	f503 7051 	add.w	r0, r3, #836	; 0x344
 800f7b8:	237d      	movs	r3, #125	; 0x7d
 800f7ba:	9301      	str	r3, [sp, #4]
 800f7bc:	2300      	movs	r3, #0
 800f7be:	9300      	str	r3, [sp, #0]
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	2203      	movs	r2, #3
 800f7c4:	2107      	movs	r1, #7
 800f7c6:	f00b fdc9 	bl	801b35c <_ZN8touchgfx6Slider19setupVerticalSliderEttttt>
    yAxisSlider_R.setValueRange(0, 100);
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	f503 7351 	add.w	r3, r3, #836	; 0x344
 800f7d0:	2264      	movs	r2, #100	; 0x64
 800f7d2:	2100      	movs	r1, #0
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	f00b fcc8 	bl	801b16a <_ZN8touchgfx6Slider13setValueRangeEii>
    yAxisSlider_R.setValue(0);
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	f503 7351 	add.w	r3, r3, #836	; 0x344
 800f7e0:	2100      	movs	r1, #0
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	f00b fc4d 	bl	801b082 <_ZN8touchgfx6Slider8setValueEi>
    yAxisSlider_R.setNewValueCallback(sliderValueChangedCallback);
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	f503 7251 	add.w	r2, r3, #836	; 0x344
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
 800f7f4:	4619      	mov	r1, r3
 800f7f6:	4610      	mov	r0, r2
 800f7f8:	f7ff fc64 	bl	800f0c4 <_ZN8touchgfx6Slider19setNewValueCallbackERNS_15GenericCallbackIRKS0_ivEE>

    leftText.setXY(21, 239);
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800f802:	22ef      	movs	r2, #239	; 0xef
 800f804:	2115      	movs	r1, #21
 800f806:	4618      	mov	r0, r3
 800f808:	f7fd f8e1 	bl	800c9ce <_ZN8touchgfx8Drawable5setXYEss>
    leftText.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	f503 6488 	add.w	r4, r3, #1088	; 0x440
 800f812:	2200      	movs	r2, #0
 800f814:	2100      	movs	r1, #0
 800f816:	2000      	movs	r0, #0
 800f818:	f7ff fd66 	bl	800f2e8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800f81c:	4603      	mov	r3, r0
 800f81e:	f8c7 40b4 	str.w	r4, [r7, #180]	; 0xb4
 800f822:	617b      	str	r3, [r7, #20]
        this->color = color;
 800f824:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f828:	697a      	ldr	r2, [r7, #20]
 800f82a:	631a      	str	r2, [r3, #48]	; 0x30
    leftText.setLinespacing(0);
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800f832:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f836:	2300      	movs	r3, #0
 800f838:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
        linespace = space;
 800f83c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f840:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 800f844:	869a      	strh	r2, [r3, #52]	; 0x34
    leftText.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3));
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	f503 6488 	add.w	r4, r3, #1088	; 0x440
 800f84c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800f850:	2102      	movs	r1, #2
 800f852:	4618      	mov	r0, r3
 800f854:	f7ff fbe6 	bl	800f024 <_ZN8touchgfx9TypedTextC1Et>
 800f858:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800f85c:	4619      	mov	r1, r3
 800f85e:	4620      	mov	r0, r4
 800f860:	f00e f948 	bl	801daf4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 800f864:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800f868:	4618      	mov	r0, r3
 800f86a:	f7fc ffff 	bl	800c86c <_ZN8touchgfx9TypedTextD1Ev>

    rightText.setXY(174, 239);
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 800f874:	22ef      	movs	r2, #239	; 0xef
 800f876:	21ae      	movs	r1, #174	; 0xae
 800f878:	4618      	mov	r0, r3
 800f87a:	f7fd f8a8 	bl	800c9ce <_ZN8touchgfx8Drawable5setXYEss>
    rightText.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	f203 447c 	addw	r4, r3, #1148	; 0x47c
 800f884:	2200      	movs	r2, #0
 800f886:	2100      	movs	r1, #0
 800f888:	2000      	movs	r0, #0
 800f88a:	f7ff fd2d 	bl	800f2e8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800f88e:	4603      	mov	r3, r0
 800f890:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 800f894:	613b      	str	r3, [r7, #16]
        this->color = color;
 800f896:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f89a:	693a      	ldr	r2, [r7, #16]
 800f89c:	631a      	str	r2, [r3, #48]	; 0x30
    rightText.setLinespacing(0);
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 800f8a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
        linespace = space;
 800f8ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f8b2:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 800f8b6:	869a      	strh	r2, [r3, #52]	; 0x34
    rightText.setTypedText(touchgfx::TypedText(T_SINGLEUSEID4));
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	f203 447c 	addw	r4, r3, #1148	; 0x47c
 800f8be:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800f8c2:	2103      	movs	r1, #3
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	f7ff fbad 	bl	800f024 <_ZN8touchgfx9TypedTextC1Et>
 800f8ca:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800f8ce:	4619      	mov	r1, r3
 800f8d0:	4620      	mov	r0, r4
 800f8d2:	f00e f90f 	bl	801daf4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 800f8d6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800f8da:	4618      	mov	r0, r3
 800f8dc:	f7fc ffc6 	bl	800c86c <_ZN8touchgfx9TypedTextD1Ev>

    baseText.setXY(96, 295);
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 800f8e6:	f240 1227 	movw	r2, #295	; 0x127
 800f8ea:	2160      	movs	r1, #96	; 0x60
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	f7fd f86e 	bl	800c9ce <_ZN8touchgfx8Drawable5setXYEss>
    baseText.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	f503 6497 	add.w	r4, r3, #1208	; 0x4b8
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	2100      	movs	r1, #0
 800f8fc:	2000      	movs	r0, #0
 800f8fe:	f7ff fcf3 	bl	800f2e8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800f902:	4603      	mov	r3, r0
 800f904:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
 800f908:	60fb      	str	r3, [r7, #12]
        this->color = color;
 800f90a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800f90e:	68fa      	ldr	r2, [r7, #12]
 800f910:	631a      	str	r2, [r3, #48]	; 0x30
    baseText.setLinespacing(0);
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 800f918:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f91c:	2300      	movs	r3, #0
 800f91e:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
        linespace = space;
 800f922:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f926:	f8b7 20d2 	ldrh.w	r2, [r7, #210]	; 0xd2
 800f92a:	869a      	strh	r2, [r3, #52]	; 0x34
    baseText.setTypedText(touchgfx::TypedText(T_SINGLEUSEID5));
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	f503 6497 	add.w	r4, r3, #1208	; 0x4b8
 800f932:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800f936:	2104      	movs	r1, #4
 800f938:	4618      	mov	r0, r3
 800f93a:	f7ff fb73 	bl	800f024 <_ZN8touchgfx9TypedTextC1Et>
 800f93e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800f942:	4619      	mov	r1, r3
 800f944:	4620      	mov	r0, r4
 800f946:	f00e f8d5 	bl	801daf4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 800f94a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800f94e:	4618      	mov	r0, r3
 800f950:	f7fc ff8c 	bl	800c86c <_ZN8touchgfx9TypedTextD1Ev>

    sequenceScreenButton.setXY(90, 52);
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	f203 43f4 	addw	r3, r3, #1268	; 0x4f4
 800f95a:	2234      	movs	r2, #52	; 0x34
 800f95c:	215a      	movs	r1, #90	; 0x5a
 800f95e:	4618      	mov	r0, r3
 800f960:	f7fd f835 	bl	800c9ce <_ZN8touchgfx8Drawable5setXYEss>
    sequenceScreenButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_SEQUENCE_ICON_32_ID), touchgfx::Bitmap(BITMAP_SEQUENCE_ICON_32_ID));
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	f203 44f4 	addw	r4, r3, #1268	; 0x4f4
 800f96a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800f96e:	2101      	movs	r1, #1
 800f970:	4618      	mov	r0, r3
 800f972:	f7ff f9a0 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 800f976:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800f97a:	2102      	movs	r1, #2
 800f97c:	4618      	mov	r0, r3
 800f97e:	f7ff f99a 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 800f982:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800f986:	210e      	movs	r1, #14
 800f988:	4618      	mov	r0, r3
 800f98a:	f7ff f994 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 800f98e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800f992:	210e      	movs	r1, #14
 800f994:	4618      	mov	r0, r3
 800f996:	f7ff f98e 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 800f99a:	f107 0094 	add.w	r0, r7, #148	; 0x94
 800f99e:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800f9a2:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800f9a6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800f9aa:	9300      	str	r3, [sp, #0]
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	4620      	mov	r0, r4
 800f9b0:	f00e fa86 	bl	801dec0 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    sequenceScreenButton.setIconXY(14, 14);
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	f203 43f4 	addw	r3, r3, #1268	; 0x4f4
 800f9ba:	220e      	movs	r2, #14
 800f9bc:	210e      	movs	r1, #14
 800f9be:	4618      	mov	r0, r3
 800f9c0:	f7ff fbad 	bl	800f11e <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    sequenceScreenButton.setAction(buttonCallback);
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	f203 42f4 	addw	r2, r3, #1268	; 0x4f4
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 800f9d0:	4619      	mov	r1, r3
 800f9d2:	4610      	mov	r0, r2
 800f9d4:	f7ff fa5e 	bl	800ee94 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(__background);
 800f9d8:	687a      	ldr	r2, [r7, #4]
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	3340      	adds	r3, #64	; 0x40
 800f9de:	4619      	mov	r1, r3
 800f9e0:	4610      	mov	r0, r2
 800f9e2:	f7ff fa0f 	bl	800ee04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(backgroundImage);
 800f9e6:	687a      	ldr	r2, [r7, #4]
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	3370      	adds	r3, #112	; 0x70
 800f9ec:	4619      	mov	r1, r3
 800f9ee:	4610      	mov	r0, r2
 800f9f0:	f7ff fa08 	bl	800ee04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(manipulatorControlToggleButton);
 800f9f4:	687a      	ldr	r2, [r7, #4]
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	339c      	adds	r3, #156	; 0x9c
 800f9fa:	4619      	mov	r1, r3
 800f9fc:	4610      	mov	r0, r2
 800f9fe:	f7ff fa01 	bl	800ee04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(titleText);
 800fa02:	687a      	ldr	r2, [r7, #4]
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	33d4      	adds	r3, #212	; 0xd4
 800fa08:	4619      	mov	r1, r3
 800fa0a:	4610      	mov	r0, r2
 800fa0c:	f7ff f9fa 	bl	800ee04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(manipulatorText);
 800fa10:	687a      	ldr	r2, [r7, #4]
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800fa18:	4619      	mov	r1, r3
 800fa1a:	4610      	mov	r0, r2
 800fa1c:	f7ff f9f2 	bl	800ee04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(yAxisSlider_L);
 800fa20:	687a      	ldr	r2, [r7, #4]
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800fa28:	4619      	mov	r1, r3
 800fa2a:	4610      	mov	r0, r2
 800fa2c:	f7ff f9ea 	bl	800ee04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(xAxisSlider);
 800fa30:	687a      	ldr	r2, [r7, #4]
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800fa38:	4619      	mov	r1, r3
 800fa3a:	4610      	mov	r0, r2
 800fa3c:	f7ff f9e2 	bl	800ee04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(yAxisSlider_R);
 800fa40:	687a      	ldr	r2, [r7, #4]
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	f503 7351 	add.w	r3, r3, #836	; 0x344
 800fa48:	4619      	mov	r1, r3
 800fa4a:	4610      	mov	r0, r2
 800fa4c:	f7ff f9da 	bl	800ee04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(leftText);
 800fa50:	687a      	ldr	r2, [r7, #4]
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800fa58:	4619      	mov	r1, r3
 800fa5a:	4610      	mov	r0, r2
 800fa5c:	f7ff f9d2 	bl	800ee04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rightText);
 800fa60:	687a      	ldr	r2, [r7, #4]
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 800fa68:	4619      	mov	r1, r3
 800fa6a:	4610      	mov	r0, r2
 800fa6c:	f7ff f9ca 	bl	800ee04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(baseText);
 800fa70:	687a      	ldr	r2, [r7, #4]
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 800fa78:	4619      	mov	r1, r3
 800fa7a:	4610      	mov	r0, r2
 800fa7c:	f7ff f9c2 	bl	800ee04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(sequenceScreenButton);
 800fa80:	687a      	ldr	r2, [r7, #4]
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	f203 43f4 	addw	r3, r3, #1268	; 0x4f4
 800fa88:	4619      	mov	r1, r3
 800fa8a:	4610      	mov	r0, r2
 800fa8c:	f7ff f9ba 	bl	800ee04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	4618      	mov	r0, r3
 800fa94:	37dc      	adds	r7, #220	; 0xdc
 800fa96:	46bd      	mov	sp, r7
 800fa98:	bd90      	pop	{r4, r7, pc}
 800fa9a:	bf00      	nop

0800fa9c <_ZN18mainScreenViewBase11setupScreenEv>:

void mainScreenViewBase::setupScreen()
{
 800fa9c:	b480      	push	{r7}
 800fa9e:	b083      	sub	sp, #12
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]

}
 800faa4:	bf00      	nop
 800faa6:	370c      	adds	r7, #12
 800faa8:	46bd      	mov	sp, r7
 800faaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faae:	4770      	bx	lr

0800fab0 <_ZN18mainScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void mainScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800fab0:	b580      	push	{r7, lr}
 800fab2:	b082      	sub	sp, #8
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	6078      	str	r0, [r7, #4]
 800fab8:	6039      	str	r1, [r7, #0]
    if (&src == &manipulatorControlToggleButton)
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	339c      	adds	r3, #156	; 0x9c
 800fabe:	683a      	ldr	r2, [r7, #0]
 800fac0:	429a      	cmp	r2, r3
 800fac2:	d106      	bne.n	800fad2 <_ZN18mainScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //ManipulatorControlToggleButton_Clicked
        //When manipulatorControlToggleButton clicked call virtual function
        //Call ManipulatorControlToggleButton_Clicked
        ManipulatorControlToggleButton_Clicked();
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	3334      	adds	r3, #52	; 0x34
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	6878      	ldr	r0, [r7, #4]
 800face:	4798      	blx	r3
        //sequenceScreenButton_Clicked
        //When sequenceScreenButton clicked change screen to sequenceScreen
        //Go to sequenceScreen with screen transition towards East
        application().gotosequenceScreenScreenSlideTransitionEast();
    }
}
 800fad0:	e00c      	b.n	800faec <_ZN18mainScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3c>
    else if (&src == &sequenceScreenButton)
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	f203 43f4 	addw	r3, r3, #1268	; 0x4f4
 800fad8:	683a      	ldr	r2, [r7, #0]
 800fada:	429a      	cmp	r2, r3
 800fadc:	d106      	bne.n	800faec <_ZN18mainScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3c>
        application().gotosequenceScreenScreenSlideTransitionEast();
 800fade:	6878      	ldr	r0, [r7, #4]
 800fae0:	f7ff fbf6 	bl	800f2d0 <_ZN18mainScreenViewBase11applicationEv>
 800fae4:	4603      	mov	r3, r0
 800fae6:	4618      	mov	r0, r3
 800fae8:	f7fd fa32 	bl	800cf50 <_ZN23FrontendApplicationBase43gotosequenceScreenScreenSlideTransitionEastEv>
}
 800faec:	bf00      	nop
 800faee:	3708      	adds	r7, #8
 800faf0:	46bd      	mov	sp, r7
 800faf2:	bd80      	pop	{r7, pc}

0800faf4 <_ZN18mainScreenViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi>:

void mainScreenViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b084      	sub	sp, #16
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	60f8      	str	r0, [r7, #12]
 800fafc:	60b9      	str	r1, [r7, #8]
 800fafe:	607a      	str	r2, [r7, #4]
    if (&src == &yAxisSlider_L)
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800fb06:	68ba      	ldr	r2, [r7, #8]
 800fb08:	429a      	cmp	r2, r3
 800fb0a:	d107      	bne.n	800fb1c <_ZN18mainScreenViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0x28>
    {
        //YAxisSlider_L_Value_Changed
        //When yAxisSlider_L value changed call virtual function
        //Call YAxisSlider_L_Value_Changed
        YAxisSlider_L_Value_Changed(value);
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	3330      	adds	r3, #48	; 0x30
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	6879      	ldr	r1, [r7, #4]
 800fb16:	68f8      	ldr	r0, [r7, #12]
 800fb18:	4798      	blx	r3
        //YAxisSlider_R_Value_Changed
        //When yAxisSlider_R value changed call virtual function
        //Call YAxisSlider_R_Value_Changed
        YAxisSlider_R_Value_Changed(value);
    }
}
 800fb1a:	e01a      	b.n	800fb52 <_ZN18mainScreenViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0x5e>
    else if (&src == &xAxisSlider)
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800fb22:	68ba      	ldr	r2, [r7, #8]
 800fb24:	429a      	cmp	r2, r3
 800fb26:	d107      	bne.n	800fb38 <_ZN18mainScreenViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0x44>
        XAxisSliderValue_Changed(value);
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	332c      	adds	r3, #44	; 0x2c
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	6879      	ldr	r1, [r7, #4]
 800fb32:	68f8      	ldr	r0, [r7, #12]
 800fb34:	4798      	blx	r3
}
 800fb36:	e00c      	b.n	800fb52 <_ZN18mainScreenViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0x5e>
    else if (&src == &yAxisSlider_R)
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	f503 7351 	add.w	r3, r3, #836	; 0x344
 800fb3e:	68ba      	ldr	r2, [r7, #8]
 800fb40:	429a      	cmp	r2, r3
 800fb42:	d106      	bne.n	800fb52 <_ZN18mainScreenViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0x5e>
        YAxisSlider_R_Value_Changed(value);
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	3338      	adds	r3, #56	; 0x38
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	6879      	ldr	r1, [r7, #4]
 800fb4e:	68f8      	ldr	r0, [r7, #12]
 800fb50:	4798      	blx	r3
}
 800fb52:	bf00      	nop
 800fb54:	3710      	adds	r7, #16
 800fb56:	46bd      	mov	sp, r7
 800fb58:	bd80      	pop	{r7, pc}
	...

0800fb5c <_ZN8touchgfx4ViewI19mainScreenPresenterEC1Ev>:
    View()
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b082      	sub	sp, #8
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	4618      	mov	r0, r3
 800fb68:	f010 fab2 	bl	80200d0 <_ZN8touchgfx6ScreenC1Ev>
 800fb6c:	4a05      	ldr	r2, [pc, #20]	; (800fb84 <_ZN8touchgfx4ViewI19mainScreenPresenterEC1Ev+0x28>)
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	601a      	str	r2, [r3, #0]
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	2200      	movs	r2, #0
 800fb76:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	3708      	adds	r7, #8
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	bd80      	pop	{r7, pc}
 800fb82:	bf00      	nop
 800fb84:	080318f4 	.word	0x080318f4

0800fb88 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800fb88:	b480      	push	{r7}
 800fb8a:	b083      	sub	sp, #12
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]
 800fb90:	4a04      	ldr	r2, [pc, #16]	; (800fba4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	601a      	str	r2, [r3, #0]
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	4618      	mov	r0, r3
 800fb9a:	370c      	adds	r7, #12
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba2:	4770      	bx	lr
 800fba4:	08031940 	.word	0x08031940

0800fba8 <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b084      	sub	sp, #16
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	60f8      	str	r0, [r7, #12]
 800fbb0:	60b9      	str	r1, [r7, #8]
 800fbb2:	4639      	mov	r1, r7
 800fbb4:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	4618      	mov	r0, r3
 800fbbc:	f7ff ffe4 	bl	800fb88 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800fbc0:	4a08      	ldr	r2, [pc, #32]	; (800fbe4 <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	68ba      	ldr	r2, [r7, #8]
 800fbca:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	3308      	adds	r3, #8
 800fbd0:	463a      	mov	r2, r7
 800fbd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fbd6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	4618      	mov	r0, r3
 800fbde:	3710      	adds	r7, #16
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	bd80      	pop	{r7, pc}
 800fbe4:	080318dc 	.word	0x080318dc

0800fbe8 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev>:
class GenericCallback<T1, T2, void>
 800fbe8:	b480      	push	{r7}
 800fbea:	b083      	sub	sp, #12
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
 800fbf0:	4a04      	ldr	r2, [pc, #16]	; (800fc04 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev+0x1c>)
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	601a      	str	r2, [r3, #0]
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	370c      	adds	r7, #12
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc02:	4770      	bx	lr
 800fc04:	08031928 	.word	0x08031928

0800fc08 <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_2)(T1, T2))
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b084      	sub	sp, #16
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	60f8      	str	r0, [r7, #12]
 800fc10:	60b9      	str	r1, [r7, #8]
 800fc12:	4639      	mov	r1, r7
 800fc14:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	f7ff ffe4 	bl	800fbe8 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev>
 800fc20:	4a08      	ldr	r2, [pc, #32]	; (800fc44 <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE+0x3c>)
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	68ba      	ldr	r2, [r7, #8]
 800fc2a:	605a      	str	r2, [r3, #4]
        this->pmemfun_2 = pmemfun_2;
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	3308      	adds	r3, #8
 800fc30:	463a      	mov	r2, r7
 800fc32:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fc36:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	3710      	adds	r7, #16
 800fc40:	46bd      	mov	sp, r7
 800fc42:	bd80      	pop	{r7, pc}
 800fc44:	080318c4 	.word	0x080318c4

0800fc48 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 800fc48:	b480      	push	{r7}
 800fc4a:	b083      	sub	sp, #12
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
    }
 800fc50:	4a04      	ldr	r2, [pc, #16]	; (800fc64 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	601a      	str	r2, [r3, #0]
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	4618      	mov	r0, r3
 800fc5a:	370c      	adds	r7, #12
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc62:	4770      	bx	lr
 800fc64:	08031940 	.word	0x08031940

0800fc68 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b082      	sub	sp, #8
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
    }
 800fc70:	6878      	ldr	r0, [r7, #4]
 800fc72:	f7ff ffe9 	bl	800fc48 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800fc76:	2104      	movs	r1, #4
 800fc78:	6878      	ldr	r0, [r7, #4]
 800fc7a:	f01d fa27 	bl	802d0cc <_ZdlPvj>
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	4618      	mov	r0, r3
 800fc82:	3708      	adds	r7, #8
 800fc84:	46bd      	mov	sp, r7
 800fc86:	bd80      	pop	{r7, pc}

0800fc88 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>:
    virtual ~GenericCallback()
 800fc88:	b480      	push	{r7}
 800fc8a:	b083      	sub	sp, #12
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	6078      	str	r0, [r7, #4]
    }
 800fc90:	4a04      	ldr	r2, [pc, #16]	; (800fca4 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev+0x1c>)
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	601a      	str	r2, [r3, #0]
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	4618      	mov	r0, r3
 800fc9a:	370c      	adds	r7, #12
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca2:	4770      	bx	lr
 800fca4:	08031928 	.word	0x08031928

0800fca8 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED0Ev>:
    virtual ~GenericCallback()
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b082      	sub	sp, #8
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]
    }
 800fcb0:	6878      	ldr	r0, [r7, #4]
 800fcb2:	f7ff ffe9 	bl	800fc88 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>
 800fcb6:	2104      	movs	r1, #4
 800fcb8:	6878      	ldr	r0, [r7, #4]
 800fcba:	f01d fa07 	bl	802d0cc <_ZdlPvj>
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	3708      	adds	r7, #8
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	bd80      	pop	{r7, pc}

0800fcc8 <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_6SliderEivED1Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	b082      	sub	sp, #8
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
 800fcd0:	4a05      	ldr	r2, [pc, #20]	; (800fce8 <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_6SliderEivED1Ev+0x20>)
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	601a      	str	r2, [r3, #0]
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	4618      	mov	r0, r3
 800fcda:	f7ff ffd5 	bl	800fc88 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	4618      	mov	r0, r3
 800fce2:	3708      	adds	r7, #8
 800fce4:	46bd      	mov	sp, r7
 800fce6:	bd80      	pop	{r7, pc}
 800fce8:	080318c4 	.word	0x080318c4

0800fcec <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_6SliderEivED0Ev>:
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b082      	sub	sp, #8
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	6078      	str	r0, [r7, #4]
 800fcf4:	6878      	ldr	r0, [r7, #4]
 800fcf6:	f7ff ffe7 	bl	800fcc8 <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_6SliderEivED1Ev>
 800fcfa:	2110      	movs	r1, #16
 800fcfc:	6878      	ldr	r0, [r7, #4]
 800fcfe:	f01d f9e5 	bl	802d0cc <_ZdlPvj>
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	4618      	mov	r0, r3
 800fd06:	3708      	adds	r7, #8
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	bd80      	pop	{r7, pc}

0800fd0c <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b082      	sub	sp, #8
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
 800fd14:	4a05      	ldr	r2, [pc, #20]	; (800fd2c <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	601a      	str	r2, [r3, #0]
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	f7ff ff93 	bl	800fc48 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	4618      	mov	r0, r3
 800fd26:	3708      	adds	r7, #8
 800fd28:	46bd      	mov	sp, r7
 800fd2a:	bd80      	pop	{r7, pc}
 800fd2c:	080318dc 	.word	0x080318dc

0800fd30 <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b082      	sub	sp, #8
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
 800fd38:	6878      	ldr	r0, [r7, #4]
 800fd3a:	f7ff ffe7 	bl	800fd0c <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800fd3e:	2110      	movs	r1, #16
 800fd40:	6878      	ldr	r0, [r7, #4]
 800fd42:	f01d f9c3 	bl	802d0cc <_ZdlPvj>
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	4618      	mov	r0, r3
 800fd4a:	3708      	adds	r7, #8
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	bd80      	pop	{r7, pc}

0800fd50 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b082      	sub	sp, #8
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
 800fd58:	4a05      	ldr	r2, [pc, #20]	; (800fd70 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	601a      	str	r2, [r3, #0]
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	4618      	mov	r0, r3
 800fd62:	f7fc fdaf 	bl	800c8c4 <_ZN8touchgfx8DrawableD1Ev>
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	4618      	mov	r0, r3
 800fd6a:	3708      	adds	r7, #8
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd80      	pop	{r7, pc}
 800fd70:	08031fd8 	.word	0x08031fd8

0800fd74 <_ZN8touchgfx9ContainerD0Ev>:
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b082      	sub	sp, #8
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	6078      	str	r0, [r7, #4]
 800fd7c:	6878      	ldr	r0, [r7, #4]
 800fd7e:	f7ff ffe7 	bl	800fd50 <_ZN8touchgfx9ContainerD1Ev>
 800fd82:	212c      	movs	r1, #44	; 0x2c
 800fd84:	6878      	ldr	r0, [r7, #4]
 800fd86:	f01d f9a1 	bl	802d0cc <_ZdlPvj>
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	3708      	adds	r7, #8
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bd80      	pop	{r7, pc}

0800fd94 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b082      	sub	sp, #8
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
 800fd9c:	4a05      	ldr	r2, [pc, #20]	; (800fdb4 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	601a      	str	r2, [r3, #0]
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	4618      	mov	r0, r3
 800fda6:	f7fc ffc9 	bl	800cd3c <_ZN8touchgfx6WidgetD1Ev>
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	4618      	mov	r0, r3
 800fdae:	3708      	adds	r7, #8
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	bd80      	pop	{r7, pc}
 800fdb4:	08033230 	.word	0x08033230

0800fdb8 <_ZN8touchgfx3BoxD0Ev>:
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b082      	sub	sp, #8
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	6078      	str	r0, [r7, #4]
 800fdc0:	6878      	ldr	r0, [r7, #4]
 800fdc2:	f7ff ffe7 	bl	800fd94 <_ZN8touchgfx3BoxD1Ev>
 800fdc6:	2130      	movs	r1, #48	; 0x30
 800fdc8:	6878      	ldr	r0, [r7, #4]
 800fdca:	f01d f97f 	bl	802d0cc <_ZdlPvj>
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	3708      	adds	r7, #8
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	bd80      	pop	{r7, pc}

0800fdd8 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b082      	sub	sp, #8
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
 800fde0:	4a05      	ldr	r2, [pc, #20]	; (800fdf8 <_ZN8touchgfx5ImageD1Ev+0x20>)
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	601a      	str	r2, [r3, #0]
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	4618      	mov	r0, r3
 800fdea:	f7fc ffa7 	bl	800cd3c <_ZN8touchgfx6WidgetD1Ev>
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	3708      	adds	r7, #8
 800fdf4:	46bd      	mov	sp, r7
 800fdf6:	bd80      	pop	{r7, pc}
 800fdf8:	080334f4 	.word	0x080334f4

0800fdfc <_ZN8touchgfx5ImageD0Ev>:
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b082      	sub	sp, #8
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
 800fe04:	6878      	ldr	r0, [r7, #4]
 800fe06:	f7ff ffe7 	bl	800fdd8 <_ZN8touchgfx5ImageD1Ev>
 800fe0a:	212c      	movs	r1, #44	; 0x2c
 800fe0c:	6878      	ldr	r0, [r7, #4]
 800fe0e:	f01d f95d 	bl	802d0cc <_ZdlPvj>
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	4618      	mov	r0, r3
 800fe16:	3708      	adds	r7, #8
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	bd80      	pop	{r7, pc}

0800fe1c <_ZN8touchgfx12ToggleButtonD1Ev>:
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b082      	sub	sp, #8
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
 800fe24:	4a05      	ldr	r2, [pc, #20]	; (800fe3c <_ZN8touchgfx12ToggleButtonD1Ev+0x20>)
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	601a      	str	r2, [r3, #0]
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	f7ff fa85 	bl	800f33c <_ZN8touchgfx6ButtonD1Ev>
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	4618      	mov	r0, r3
 800fe36:	3708      	adds	r7, #8
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	bd80      	pop	{r7, pc}
 800fe3c:	08032fe4 	.word	0x08032fe4

0800fe40 <_ZN8touchgfx12ToggleButtonD0Ev>:
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b082      	sub	sp, #8
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
 800fe48:	6878      	ldr	r0, [r7, #4]
 800fe4a:	f7ff ffe7 	bl	800fe1c <_ZN8touchgfx12ToggleButtonD1Ev>
 800fe4e:	2138      	movs	r1, #56	; 0x38
 800fe50:	6878      	ldr	r0, [r7, #4]
 800fe52:	f01d f93b 	bl	802d0cc <_ZdlPvj>
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	4618      	mov	r0, r3
 800fe5a:	3708      	adds	r7, #8
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	bd80      	pop	{r7, pc}

0800fe60 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b082      	sub	sp, #8
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
 800fe68:	4a08      	ldr	r2, [pc, #32]	; (800fe8c <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	601a      	str	r2, [r3, #0]
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	3328      	adds	r3, #40	; 0x28
 800fe72:	4618      	mov	r0, r3
 800fe74:	f7fc fcfa 	bl	800c86c <_ZN8touchgfx9TypedTextD1Ev>
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	4618      	mov	r0, r3
 800fe7c:	f7fc ff5e 	bl	800cd3c <_ZN8touchgfx6WidgetD1Ev>
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	4618      	mov	r0, r3
 800fe84:	3708      	adds	r7, #8
 800fe86:	46bd      	mov	sp, r7
 800fe88:	bd80      	pop	{r7, pc}
 800fe8a:	bf00      	nop
 800fe8c:	08033184 	.word	0x08033184

0800fe90 <_ZN8touchgfx8TextAreaD0Ev>:
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b082      	sub	sp, #8
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
 800fe98:	6878      	ldr	r0, [r7, #4]
 800fe9a:	f7ff ffe1 	bl	800fe60 <_ZN8touchgfx8TextAreaD1Ev>
 800fe9e:	213c      	movs	r1, #60	; 0x3c
 800fea0:	6878      	ldr	r0, [r7, #4]
 800fea2:	f01d f913 	bl	802d0cc <_ZdlPvj>
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	4618      	mov	r0, r3
 800feaa:	3708      	adds	r7, #8
 800feac:	46bd      	mov	sp, r7
 800feae:	bd80      	pop	{r7, pc}

0800feb0 <_ZN8touchgfx6SliderD1Ev>:
class Slider : public Container
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b082      	sub	sp, #8
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
 800feb8:	4a0f      	ldr	r2, [pc, #60]	; (800fef8 <_ZN8touchgfx6SliderD1Ev+0x48>)
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	601a      	str	r2, [r3, #0]
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	33c0      	adds	r3, #192	; 0xc0
 800fec2:	4618      	mov	r0, r3
 800fec4:	f7ff ff44 	bl	800fd50 <_ZN8touchgfx9ContainerD1Ev>
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	3394      	adds	r3, #148	; 0x94
 800fecc:	4618      	mov	r0, r3
 800fece:	f7ff ff83 	bl	800fdd8 <_ZN8touchgfx5ImageD1Ev>
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	3368      	adds	r3, #104	; 0x68
 800fed6:	4618      	mov	r0, r3
 800fed8:	f7ff ff7e 	bl	800fdd8 <_ZN8touchgfx5ImageD1Ev>
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	333c      	adds	r3, #60	; 0x3c
 800fee0:	4618      	mov	r0, r3
 800fee2:	f7ff ff79 	bl	800fdd8 <_ZN8touchgfx5ImageD1Ev>
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	4618      	mov	r0, r3
 800feea:	f7ff ff31 	bl	800fd50 <_ZN8touchgfx9ContainerD1Ev>
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	4618      	mov	r0, r3
 800fef2:	3708      	adds	r7, #8
 800fef4:	46bd      	mov	sp, r7
 800fef6:	bd80      	pop	{r7, pc}
 800fef8:	080322ec 	.word	0x080322ec

0800fefc <_ZN8touchgfx6SliderD0Ev>:
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b082      	sub	sp, #8
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
 800ff04:	6878      	ldr	r0, [r7, #4]
 800ff06:	f7ff ffd3 	bl	800feb0 <_ZN8touchgfx6SliderD1Ev>
 800ff0a:	21fc      	movs	r1, #252	; 0xfc
 800ff0c:	6878      	ldr	r0, [r7, #4]
 800ff0e:	f01d f8dd 	bl	802d0cc <_ZdlPvj>
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	4618      	mov	r0, r3
 800ff16:	3708      	adds	r7, #8
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	bd80      	pop	{r7, pc}

0800ff1c <_ZN8touchgfx14ButtonWithIconD1Ev>:
class ButtonWithIcon : public Button
 800ff1c:	b580      	push	{r7, lr}
 800ff1e:	b082      	sub	sp, #8
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]
 800ff24:	4a05      	ldr	r2, [pc, #20]	; (800ff3c <_ZN8touchgfx14ButtonWithIconD1Ev+0x20>)
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	601a      	str	r2, [r3, #0]
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	f7ff fa05 	bl	800f33c <_ZN8touchgfx6ButtonD1Ev>
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	4618      	mov	r0, r3
 800ff36:	3708      	adds	r7, #8
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	bd80      	pop	{r7, pc}
 800ff3c:	0803344c 	.word	0x0803344c

0800ff40 <_ZN8touchgfx14ButtonWithIconD0Ev>:
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b082      	sub	sp, #8
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
 800ff48:	6878      	ldr	r0, [r7, #4]
 800ff4a:	f7ff ffe7 	bl	800ff1c <_ZN8touchgfx14ButtonWithIconD1Ev>
 800ff4e:	213c      	movs	r1, #60	; 0x3c
 800ff50:	6878      	ldr	r0, [r7, #4]
 800ff52:	f01d f8bb 	bl	802d0cc <_ZdlPvj>
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	4618      	mov	r0, r3
 800ff5a:	3708      	adds	r7, #8
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	bd80      	pop	{r7, pc}

0800ff60 <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_6SliderEivE7executeES4_i>:
    virtual void execute(T1 t1, T2 t2)
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b084      	sub	sp, #16
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	60f8      	str	r0, [r7, #12]
 800ff68:	60b9      	str	r1, [r7, #8]
 800ff6a:	607a      	str	r2, [r7, #4]
        (pobject->*pmemfun_2)(t1, t2);
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	685b      	ldr	r3, [r3, #4]
 800ff70:	68fa      	ldr	r2, [r7, #12]
 800ff72:	68d2      	ldr	r2, [r2, #12]
 800ff74:	1052      	asrs	r2, r2, #1
 800ff76:	1898      	adds	r0, r3, r2
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	68db      	ldr	r3, [r3, #12]
 800ff7c:	f003 0301 	and.w	r3, r3, #1
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d102      	bne.n	800ff8a <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_6SliderEivE7executeES4_i+0x2a>
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	689b      	ldr	r3, [r3, #8]
 800ff88:	e00a      	b.n	800ffa0 <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_6SliderEivE7executeES4_i+0x40>
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	685b      	ldr	r3, [r3, #4]
 800ff8e:	68fa      	ldr	r2, [r7, #12]
 800ff90:	68d2      	ldr	r2, [r2, #12]
 800ff92:	1052      	asrs	r2, r2, #1
 800ff94:	4413      	add	r3, r2
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	68fa      	ldr	r2, [r7, #12]
 800ff9a:	6892      	ldr	r2, [r2, #8]
 800ff9c:	4413      	add	r3, r2
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	687a      	ldr	r2, [r7, #4]
 800ffa2:	68b9      	ldr	r1, [r7, #8]
 800ffa4:	4798      	blx	r3
    }
 800ffa6:	bf00      	nop
 800ffa8:	3710      	adds	r7, #16
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	bd80      	pop	{r7, pc}

0800ffae <_ZNK8touchgfx8CallbackI18mainScreenViewBaseRKNS_6SliderEivE7isValidEv>:
    virtual bool isValid() const
 800ffae:	b480      	push	{r7}
 800ffb0:	b083      	sub	sp, #12
 800ffb2:	af00      	add	r7, sp, #0
 800ffb4:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_2 != 0);
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	685b      	ldr	r3, [r3, #4]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d010      	beq.n	800ffe0 <_ZNK8touchgfx8CallbackI18mainScreenViewBaseRKNS_6SliderEivE7isValidEv+0x32>
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	689b      	ldr	r3, [r3, #8]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d107      	bne.n	800ffd6 <_ZNK8touchgfx8CallbackI18mainScreenViewBaseRKNS_6SliderEivE7isValidEv+0x28>
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	68db      	ldr	r3, [r3, #12]
 800ffca:	f003 0301 	and.w	r3, r3, #1
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d101      	bne.n	800ffd6 <_ZNK8touchgfx8CallbackI18mainScreenViewBaseRKNS_6SliderEivE7isValidEv+0x28>
 800ffd2:	2301      	movs	r3, #1
 800ffd4:	e000      	b.n	800ffd8 <_ZNK8touchgfx8CallbackI18mainScreenViewBaseRKNS_6SliderEivE7isValidEv+0x2a>
 800ffd6:	2300      	movs	r3, #0
 800ffd8:	2b01      	cmp	r3, #1
 800ffda:	d001      	beq.n	800ffe0 <_ZNK8touchgfx8CallbackI18mainScreenViewBaseRKNS_6SliderEivE7isValidEv+0x32>
 800ffdc:	2301      	movs	r3, #1
 800ffde:	e000      	b.n	800ffe2 <_ZNK8touchgfx8CallbackI18mainScreenViewBaseRKNS_6SliderEivE7isValidEv+0x34>
 800ffe0:	2300      	movs	r3, #0
    }
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	370c      	adds	r7, #12
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffec:	4770      	bx	lr

0800ffee <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800ffee:	b580      	push	{r7, lr}
 800fff0:	b082      	sub	sp, #8
 800fff2:	af00      	add	r7, sp, #0
 800fff4:	6078      	str	r0, [r7, #4]
 800fff6:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	685b      	ldr	r3, [r3, #4]
 800fffc:	687a      	ldr	r2, [r7, #4]
 800fffe:	68d2      	ldr	r2, [r2, #12]
 8010000:	1052      	asrs	r2, r2, #1
 8010002:	1898      	adds	r0, r3, r2
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	68db      	ldr	r3, [r3, #12]
 8010008:	f003 0301 	and.w	r3, r3, #1
 801000c:	2b00      	cmp	r3, #0
 801000e:	d102      	bne.n	8010016 <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	689b      	ldr	r3, [r3, #8]
 8010014:	e00a      	b.n	801002c <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	685b      	ldr	r3, [r3, #4]
 801001a:	687a      	ldr	r2, [r7, #4]
 801001c:	68d2      	ldr	r2, [r2, #12]
 801001e:	1052      	asrs	r2, r2, #1
 8010020:	4413      	add	r3, r2
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	687a      	ldr	r2, [r7, #4]
 8010026:	6892      	ldr	r2, [r2, #8]
 8010028:	4413      	add	r3, r2
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	6839      	ldr	r1, [r7, #0]
 801002e:	4798      	blx	r3
    }
 8010030:	bf00      	nop
 8010032:	3708      	adds	r7, #8
 8010034:	46bd      	mov	sp, r7
 8010036:	bd80      	pop	{r7, pc}

08010038 <_ZNK8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8010038:	b480      	push	{r7}
 801003a:	b083      	sub	sp, #12
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	685b      	ldr	r3, [r3, #4]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d010      	beq.n	801006a <_ZNK8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	689b      	ldr	r3, [r3, #8]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d107      	bne.n	8010060 <_ZNK8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	68db      	ldr	r3, [r3, #12]
 8010054:	f003 0301 	and.w	r3, r3, #1
 8010058:	2b00      	cmp	r3, #0
 801005a:	d101      	bne.n	8010060 <_ZNK8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801005c:	2301      	movs	r3, #1
 801005e:	e000      	b.n	8010062 <_ZNK8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8010060:	2300      	movs	r3, #0
 8010062:	2b01      	cmp	r3, #1
 8010064:	d001      	beq.n	801006a <_ZNK8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8010066:	2301      	movs	r3, #1
 8010068:	e000      	b.n	801006c <_ZNK8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 801006a:	2300      	movs	r3, #0
    }
 801006c:	4618      	mov	r0, r3
 801006e:	370c      	adds	r7, #12
 8010070:	46bd      	mov	sp, r7
 8010072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010076:	4770      	bx	lr

08010078 <_ZN8touchgfx9ContainerC1Ev>:
{
public:
    Container()
 8010078:	b580      	push	{r7, lr}
 801007a:	b082      	sub	sp, #8
 801007c:	af00      	add	r7, sp, #0
 801007e:	6078      	str	r0, [r7, #4]
        : Drawable(),
          firstChild(0)
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	4618      	mov	r0, r3
 8010084:	f7fe fe28 	bl	800ecd8 <_ZN8touchgfx8DrawableC1Ev>
 8010088:	4a05      	ldr	r2, [pc, #20]	; (80100a0 <_ZN8touchgfx9ContainerC1Ev+0x28>)
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	601a      	str	r2, [r3, #0]
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	2200      	movs	r2, #0
 8010092:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	4618      	mov	r0, r3
 8010098:	3708      	adds	r7, #8
 801009a:	46bd      	mov	sp, r7
 801009c:	bd80      	pop	{r7, pc}
 801009e:	bf00      	nop
 80100a0:	08031fd8 	.word	0x08031fd8

080100a4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextArea
{
public:
    TextAreaWithOneWildcard()
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b082      	sub	sp, #8
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
        : TextArea(), wildcard(0)
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	4618      	mov	r0, r3
 80100b0:	f7fe ffce 	bl	800f050 <_ZN8touchgfx8TextAreaC1Ev>
 80100b4:	4a05      	ldr	r2, [pc, #20]	; (80100cc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	601a      	str	r2, [r3, #0]
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	2200      	movs	r2, #0
 80100be:	63da      	str	r2, [r3, #60]	; 0x3c
    {
    }
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	4618      	mov	r0, r3
 80100c4:	3708      	adds	r7, #8
 80100c6:	46bd      	mov	sp, r7
 80100c8:	bd80      	pop	{r7, pc}
 80100ca:	bf00      	nop
 80100cc:	080333a0 	.word	0x080333a0

080100d0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 80100d0:	b480      	push	{r7}
 80100d2:	b083      	sub	sp, #12
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
 80100d8:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	683a      	ldr	r2, [r7, #0]
 80100de:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80100e0:	bf00      	nop
 80100e2:	370c      	adds	r7, #12
 80100e4:	46bd      	mov	sp, r7
 80100e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ea:	4770      	bx	lr

080100ec <_ZN21positionContainerBaseD1Ev>:

class positionContainerBase : public touchgfx::Container
{
public:
    positionContainerBase();
    virtual ~positionContainerBase() {}
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b082      	sub	sp, #8
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
 80100f4:	4a08      	ldr	r2, [pc, #32]	; (8010118 <_ZN21positionContainerBaseD1Ev+0x2c>)
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	601a      	str	r2, [r3, #0]
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	332c      	adds	r3, #44	; 0x2c
 80100fe:	4618      	mov	r0, r3
 8010100:	f000 f8d0 	bl	80102a4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	4618      	mov	r0, r3
 8010108:	f7ff fe22 	bl	800fd50 <_ZN8touchgfx9ContainerD1Ev>
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	4618      	mov	r0, r3
 8010110:	3708      	adds	r7, #8
 8010112:	46bd      	mov	sp, r7
 8010114:	bd80      	pop	{r7, pc}
 8010116:	bf00      	nop
 8010118:	080319b4 	.word	0x080319b4

0801011c <_ZN21positionContainerBaseD0Ev>:
 801011c:	b580      	push	{r7, lr}
 801011e:	b082      	sub	sp, #8
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
 8010124:	6878      	ldr	r0, [r7, #4]
 8010126:	f7ff ffe1 	bl	80100ec <_ZN21positionContainerBaseD1Ev>
 801012a:	2190      	movs	r1, #144	; 0x90
 801012c:	6878      	ldr	r0, [r7, #4]
 801012e:	f01c ffcd 	bl	802d0cc <_ZdlPvj>
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	4618      	mov	r0, r3
 8010136:	3708      	adds	r7, #8
 8010138:	46bd      	mov	sp, r7
 801013a:	bd80      	pop	{r7, pc}

0801013c <_ZN21positionContainerBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/containers/positionContainerBase.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

positionContainerBase::positionContainerBase()
 801013c:	b590      	push	{r4, r7, lr}
 801013e:	b08f      	sub	sp, #60	; 0x3c
 8010140:	af02      	add	r7, sp, #8
 8010142:	6078      	str	r0, [r7, #4]
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	4618      	mov	r0, r3
 8010148:	f7ff ff96 	bl	8010078 <_ZN8touchgfx9ContainerC1Ev>
 801014c:	4a47      	ldr	r2, [pc, #284]	; (801026c <_ZN21positionContainerBaseC1Ev+0x130>)
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	601a      	str	r2, [r3, #0]
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	332c      	adds	r3, #44	; 0x2c
 8010156:	4618      	mov	r0, r3
 8010158:	f7ff ffa4 	bl	80100a4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
{
    setWidth(240);
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	21f0      	movs	r1, #240	; 0xf0
 8010160:	4618      	mov	r0, r3
 8010162:	f7fc fc52 	bl	800ca0a <_ZN8touchgfx8Drawable8setWidthEs>
    setHeight(27);
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	211b      	movs	r1, #27
 801016a:	4618      	mov	r0, r3
 801016c:	f7fc fc5c 	bl	800ca28 <_ZN8touchgfx8Drawable9setHeightEs>
    positionText.setPosition(0, 0, 240, 27);
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8010176:	231b      	movs	r3, #27
 8010178:	9300      	str	r3, [sp, #0]
 801017a:	23f0      	movs	r3, #240	; 0xf0
 801017c:	2200      	movs	r2, #0
 801017e:	2100      	movs	r1, #0
 8010180:	f7fc fbc0 	bl	800c904 <_ZN8touchgfx8Drawable11setPositionEssss>
    positionText.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801018a:	2200      	movs	r2, #0
 801018c:	2100      	movs	r1, #0
 801018e:	2000      	movs	r0, #0
 8010190:	f7ff f8aa 	bl	800f2e8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010194:	4603      	mov	r3, r0
 8010196:	623c      	str	r4, [r7, #32]
 8010198:	60fb      	str	r3, [r7, #12]
        this->color = color;
 801019a:	6a3b      	ldr	r3, [r7, #32]
 801019c:	68fa      	ldr	r2, [r7, #12]
 801019e:	631a      	str	r2, [r3, #48]	; 0x30
    positionText.setLinespacing(0);
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	332c      	adds	r3, #44	; 0x2c
 80101a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80101a6:	2300      	movs	r3, #0
 80101a8:	84fb      	strh	r3, [r7, #38]	; 0x26
        linespace = space;
 80101aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101ac:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80101ae:	869a      	strh	r2, [r3, #52]	; 0x34
    Unicode::snprintf(positionTextBuffer, POSITIONTEXT_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID9).getText());
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 80101b6:	f107 0310 	add.w	r3, r7, #16
 80101ba:	2107      	movs	r1, #7
 80101bc:	4618      	mov	r0, r3
 80101be:	f7fe ff31 	bl	800f024 <_ZN8touchgfx9TypedTextC1Et>
 80101c2:	f107 0310 	add.w	r3, r7, #16
 80101c6:	62fb      	str	r3, [r7, #44]	; 0x2c

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80101c8:	4b29      	ldr	r3, [pc, #164]	; (8010270 <_ZN21positionContainerBaseC1Ev+0x134>)
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d105      	bne.n	80101dc <_ZN21positionContainerBaseC1Ev+0xa0>
 80101d0:	4b28      	ldr	r3, [pc, #160]	; (8010274 <_ZN21positionContainerBaseC1Ev+0x138>)
 80101d2:	4a29      	ldr	r2, [pc, #164]	; (8010278 <_ZN21positionContainerBaseC1Ev+0x13c>)
 80101d4:	21b1      	movs	r1, #177	; 0xb1
 80101d6:	4829      	ldr	r0, [pc, #164]	; (801027c <_ZN21positionContainerBaseC1Ev+0x140>)
 80101d8:	f01e f846 	bl	802e268 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80101dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101de:	889a      	ldrh	r2, [r3, #4]
 80101e0:	4b27      	ldr	r3, [pc, #156]	; (8010280 <_ZN21positionContainerBaseC1Ev+0x144>)
 80101e2:	881b      	ldrh	r3, [r3, #0]
 80101e4:	429a      	cmp	r2, r3
 80101e6:	d305      	bcc.n	80101f4 <_ZN21positionContainerBaseC1Ev+0xb8>
 80101e8:	4b26      	ldr	r3, [pc, #152]	; (8010284 <_ZN21positionContainerBaseC1Ev+0x148>)
 80101ea:	4a23      	ldr	r2, [pc, #140]	; (8010278 <_ZN21positionContainerBaseC1Ev+0x13c>)
 80101ec:	21b2      	movs	r1, #178	; 0xb2
 80101ee:	4823      	ldr	r0, [pc, #140]	; (801027c <_ZN21positionContainerBaseC1Ev+0x140>)
 80101f0:	f01e f83a 	bl	802e268 <__assert_func>
        return texts->getText(typedTextId);
 80101f4:	4b24      	ldr	r3, [pc, #144]	; (8010288 <_ZN21positionContainerBaseC1Ev+0x14c>)
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	8aba      	ldrh	r2, [r7, #20]
 80101fa:	4611      	mov	r1, r2
 80101fc:	4618      	mov	r0, r3
 80101fe:	f7fe fcd5 	bl	800ebac <_ZNK8touchgfx5Texts7getTextEt>
 8010202:	4603      	mov	r3, r0
 8010204:	4a21      	ldr	r2, [pc, #132]	; (801028c <_ZN21positionContainerBaseC1Ev+0x150>)
 8010206:	2111      	movs	r1, #17
 8010208:	4620      	mov	r0, r4
 801020a:	f011 fa0d 	bl	8021628 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 801020e:	f107 0310 	add.w	r3, r7, #16
 8010212:	4618      	mov	r0, r3
 8010214:	f7fc fb2a 	bl	800c86c <_ZN8touchgfx9TypedTextD1Ev>
    positionText.setWildcard(positionTextBuffer);
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	336c      	adds	r3, #108	; 0x6c
 8010222:	4619      	mov	r1, r3
 8010224:	4610      	mov	r0, r2
 8010226:	f7ff ff53 	bl	80100d0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    positionText.setTypedText(touchgfx::TypedText(T_SINGLEUSEID8));
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010230:	f107 0318 	add.w	r3, r7, #24
 8010234:	2106      	movs	r1, #6
 8010236:	4618      	mov	r0, r3
 8010238:	f7fe fef4 	bl	800f024 <_ZN8touchgfx9TypedTextC1Et>
 801023c:	f107 0318 	add.w	r3, r7, #24
 8010240:	4619      	mov	r1, r3
 8010242:	4620      	mov	r0, r4
 8010244:	f00d fc56 	bl	801daf4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8010248:	f107 0318 	add.w	r3, r7, #24
 801024c:	4618      	mov	r0, r3
 801024e:	f7fc fb0d 	bl	800c86c <_ZN8touchgfx9TypedTextD1Ev>

    add(positionText);
 8010252:	687a      	ldr	r2, [r7, #4]
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	332c      	adds	r3, #44	; 0x2c
 8010258:	4619      	mov	r1, r3
 801025a:	4610      	mov	r0, r2
 801025c:	f00a fdd2 	bl	801ae04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	4618      	mov	r0, r3
 8010264:	3734      	adds	r7, #52	; 0x34
 8010266:	46bd      	mov	sp, r7
 8010268:	bd90      	pop	{r4, r7, pc}
 801026a:	bf00      	nop
 801026c:	080319b4 	.word	0x080319b4
 8010270:	20012914 	.word	0x20012914
 8010274:	0802fe0c 	.word	0x0802fe0c
 8010278:	08031a3c 	.word	0x08031a3c
 801027c:	0802fe50 	.word	0x0802fe50
 8010280:	20012918 	.word	0x20012918
 8010284:	0802fe98 	.word	0x0802fe98
 8010288:	20012920 	.word	0x20012920
 801028c:	0802feec 	.word	0x0802feec

08010290 <_ZN21positionContainerBase10initializeEv>:

void positionContainerBase::initialize()
{
 8010290:	b480      	push	{r7}
 8010292:	b083      	sub	sp, #12
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]

}
 8010298:	bf00      	nop
 801029a:	370c      	adds	r7, #12
 801029c:	46bd      	mov	sp, r7
 801029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a2:	4770      	bx	lr

080102a4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextArea
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b082      	sub	sp, #8
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
 80102ac:	4a05      	ldr	r2, [pc, #20]	; (80102c4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	601a      	str	r2, [r3, #0]
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	4618      	mov	r0, r3
 80102b6:	f7ff fdd3 	bl	800fe60 <_ZN8touchgfx8TextAreaD1Ev>
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	4618      	mov	r0, r3
 80102be:	3708      	adds	r7, #8
 80102c0:	46bd      	mov	sp, r7
 80102c2:	bd80      	pop	{r7, pc}
 80102c4:	080333a0 	.word	0x080333a0

080102c8 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 80102c8:	b580      	push	{r7, lr}
 80102ca:	b082      	sub	sp, #8
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	6078      	str	r0, [r7, #4]
 80102d0:	6878      	ldr	r0, [r7, #4]
 80102d2:	f7ff ffe7 	bl	80102a4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80102d6:	2140      	movs	r1, #64	; 0x40
 80102d8:	6878      	ldr	r0, [r7, #4]
 80102da:	f01c fef7 	bl	802d0cc <_ZdlPvj>
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	4618      	mov	r0, r3
 80102e2:	3708      	adds	r7, #8
 80102e4:	46bd      	mov	sp, r7
 80102e6:	bd80      	pop	{r7, pc}

080102e8 <_ZN8touchgfx19ScrollableContainer22enableHorizontalScrollEb>:
     * @param  enable If true (default), horizontal scrolling is enabled. If false, horizontal
     *                scrolling is disabled.
     *
     * @see enableVerticalScroll
     */
    void enableHorizontalScroll(bool enable)
 80102e8:	b480      	push	{r7}
 80102ea:	b083      	sub	sp, #12
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
 80102f0:	460b      	mov	r3, r1
 80102f2:	70fb      	strb	r3, [r7, #3]
    {
        scrollableX = enable;
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	78fa      	ldrb	r2, [r7, #3]
 80102f8:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    }
 80102fc:	bf00      	nop
 80102fe:	370c      	adds	r7, #12
 8010300:	46bd      	mov	sp, r7
 8010302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010306:	4770      	bx	lr

08010308 <_ZN8touchgfx10ListLayoutC1ENS_9DirectionE>:
     * @param  d (Optional) The direction to place the elements. ::SOUTH (Default)
     *           places the elements vertically, ::EAST places the elements horizontally.
     *
     * @see setDirection
     */
    ListLayout(const Direction d = SOUTH)
 8010308:	b580      	push	{r7, lr}
 801030a:	b082      	sub	sp, #8
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
 8010310:	460b      	mov	r3, r1
 8010312:	70fb      	strb	r3, [r7, #3]
        : Container(), direction(d), offset(0)
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	4618      	mov	r0, r3
 8010318:	f7ff feae 	bl	8010078 <_ZN8touchgfx9ContainerC1Ev>
 801031c:	4a0d      	ldr	r2, [pc, #52]	; (8010354 <_ZN8touchgfx10ListLayoutC1ENS_9DirectionE+0x4c>)
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	601a      	str	r2, [r3, #0]
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	78fa      	ldrb	r2, [r7, #3]
 8010326:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	2200      	movs	r2, #0
 801032e:	85da      	strh	r2, [r3, #46]	; 0x2e
    {
        assert((d == SOUTH || d == EAST) && "Chosen direction not supported");
 8010330:	78fb      	ldrb	r3, [r7, #3]
 8010332:	2b01      	cmp	r3, #1
 8010334:	d008      	beq.n	8010348 <_ZN8touchgfx10ListLayoutC1ENS_9DirectionE+0x40>
 8010336:	78fb      	ldrb	r3, [r7, #3]
 8010338:	2b02      	cmp	r3, #2
 801033a:	d005      	beq.n	8010348 <_ZN8touchgfx10ListLayoutC1ENS_9DirectionE+0x40>
 801033c:	4b06      	ldr	r3, [pc, #24]	; (8010358 <_ZN8touchgfx10ListLayoutC1ENS_9DirectionE+0x50>)
 801033e:	4a07      	ldr	r2, [pc, #28]	; (801035c <_ZN8touchgfx10ListLayoutC1ENS_9DirectionE+0x54>)
 8010340:	2136      	movs	r1, #54	; 0x36
 8010342:	4807      	ldr	r0, [pc, #28]	; (8010360 <_ZN8touchgfx10ListLayoutC1ENS_9DirectionE+0x58>)
 8010344:	f01d ff90 	bl	802e268 <__assert_func>
    }
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	4618      	mov	r0, r3
 801034c:	3708      	adds	r7, #8
 801034e:	46bd      	mov	sp, r7
 8010350:	bd80      	pop	{r7, pc}
 8010352:	bf00      	nop
 8010354:	080325d0 	.word	0x080325d0
 8010358:	0802fef0 	.word	0x0802fef0
 801035c:	08031afc 	.word	0x08031afc
 8010360:	0802ff30 	.word	0x0802ff30

08010364 <_ZN8touchgfx4ViewI23sequenceScreenPresenterED1Ev>:
class View : public Screen
 8010364:	b580      	push	{r7, lr}
 8010366:	b082      	sub	sp, #8
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
 801036c:	4a05      	ldr	r2, [pc, #20]	; (8010384 <_ZN8touchgfx4ViewI23sequenceScreenPresenterED1Ev+0x20>)
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	601a      	str	r2, [r3, #0]
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	4618      	mov	r0, r3
 8010376:	f7fe fced 	bl	800ed54 <_ZN8touchgfx6ScreenD1Ev>
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	4618      	mov	r0, r3
 801037e:	3708      	adds	r7, #8
 8010380:	46bd      	mov	sp, r7
 8010382:	bd80      	pop	{r7, pc}
 8010384:	08031ad0 	.word	0x08031ad0

08010388 <_ZN8touchgfx4ViewI23sequenceScreenPresenterED0Ev>:
 8010388:	b580      	push	{r7, lr}
 801038a:	b082      	sub	sp, #8
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
 8010390:	6878      	ldr	r0, [r7, #4]
 8010392:	f7ff ffe7 	bl	8010364 <_ZN8touchgfx4ViewI23sequenceScreenPresenterED1Ev>
 8010396:	2140      	movs	r1, #64	; 0x40
 8010398:	6878      	ldr	r0, [r7, #4]
 801039a:	f01c fe97 	bl	802d0cc <_ZdlPvj>
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	4618      	mov	r0, r3
 80103a2:	3708      	adds	r7, #8
 80103a4:	46bd      	mov	sp, r7
 80103a6:	bd80      	pop	{r7, pc}

080103a8 <_ZN22sequenceScreenViewBaseD1Ev>:

class sequenceScreenViewBase : public touchgfx::View<sequenceScreenPresenter>
{
public:
    sequenceScreenViewBase();
    virtual ~sequenceScreenViewBase() {}
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b082      	sub	sp, #8
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
 80103b0:	4a24      	ldr	r2, [pc, #144]	; (8010444 <_ZN22sequenceScreenViewBaseD1Ev+0x9c>)
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	601a      	str	r2, [r3, #0]
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80103bc:	4618      	mov	r0, r3
 80103be:	f000 fc03 	bl	8010bc8 <_ZN8touchgfx8CallbackI22sequenceScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80103c8:	4618      	mov	r0, r3
 80103ca:	f7ff ff6b 	bl	80102a4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80103d4:	4618      	mov	r0, r3
 80103d6:	f000 fc45 	bl	8010c64 <_ZN8touchgfx10ListLayoutD1Ev>
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80103e0:	4618      	mov	r0, r3
 80103e2:	f000 fc13 	bl	8010c0c <_ZN8touchgfx19ScrollableContainerD1Ev>
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80103ec:	4618      	mov	r0, r3
 80103ee:	f7ff fd95 	bl	800ff1c <_ZN8touchgfx14ButtonWithIconD1Ev>
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80103f8:	4618      	mov	r0, r3
 80103fa:	f7ff fd8f 	bl	800ff1c <_ZN8touchgfx14ButtonWithIconD1Ev>
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8010404:	4618      	mov	r0, r3
 8010406:	f7ff fd89 	bl	800ff1c <_ZN8touchgfx14ButtonWithIconD1Ev>
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	33d8      	adds	r3, #216	; 0xd8
 801040e:	4618      	mov	r0, r3
 8010410:	f7ff fd84 	bl	800ff1c <_ZN8touchgfx14ButtonWithIconD1Ev>
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	339c      	adds	r3, #156	; 0x9c
 8010418:	4618      	mov	r0, r3
 801041a:	f7ff fd7f 	bl	800ff1c <_ZN8touchgfx14ButtonWithIconD1Ev>
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	3370      	adds	r3, #112	; 0x70
 8010422:	4618      	mov	r0, r3
 8010424:	f7ff fcd8 	bl	800fdd8 <_ZN8touchgfx5ImageD1Ev>
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	3340      	adds	r3, #64	; 0x40
 801042c:	4618      	mov	r0, r3
 801042e:	f7ff fcb1 	bl	800fd94 <_ZN8touchgfx3BoxD1Ev>
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	4618      	mov	r0, r3
 8010436:	f7ff ff95 	bl	8010364 <_ZN8touchgfx4ViewI23sequenceScreenPresenterED1Ev>
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	4618      	mov	r0, r3
 801043e:	3708      	adds	r7, #8
 8010440:	46bd      	mov	sp, r7
 8010442:	bd80      	pop	{r7, pc}
 8010444:	08031a74 	.word	0x08031a74

08010448 <_ZN22sequenceScreenViewBaseD0Ev>:
 8010448:	b580      	push	{r7, lr}
 801044a:	b082      	sub	sp, #8
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
 8010450:	6878      	ldr	r0, [r7, #4]
 8010452:	f7ff ffa9 	bl	80103a8 <_ZN22sequenceScreenViewBaseD1Ev>
 8010456:	f44f 7175 	mov.w	r1, #980	; 0x3d4
 801045a:	6878      	ldr	r0, [r7, #4]
 801045c:	f01c fe36 	bl	802d0cc <_ZdlPvj>
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	4618      	mov	r0, r3
 8010464:	3708      	adds	r7, #8
 8010466:	46bd      	mov	sp, r7
 8010468:	bd80      	pop	{r7, pc}

0801046a <_ZN22sequenceScreenViewBase26SaveSequenceButton_ClickedEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void SaveSequenceButton_Clicked()
 801046a:	b480      	push	{r7}
 801046c:	b083      	sub	sp, #12
 801046e:	af00      	add	r7, sp, #0
 8010470:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in sequenceScreen
    }
 8010472:	bf00      	nop
 8010474:	370c      	adds	r7, #12
 8010476:	46bd      	mov	sp, r7
 8010478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047c:	4770      	bx	lr

0801047e <_ZN22sequenceScreenViewBase26PlaySequenceButton_ClickedEv>:

    virtual void PlaySequenceButton_Clicked()
 801047e:	b480      	push	{r7}
 8010480:	b083      	sub	sp, #12
 8010482:	af00      	add	r7, sp, #0
 8010484:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in sequenceScreen
    }
 8010486:	bf00      	nop
 8010488:	370c      	adds	r7, #12
 801048a:	46bd      	mov	sp, r7
 801048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010490:	4770      	bx	lr

08010492 <_ZN22sequenceScreenViewBase28AddNewPositionButton_ClickedEv>:

    virtual void AddNewPositionButton_Clicked()
 8010492:	b480      	push	{r7}
 8010494:	b083      	sub	sp, #12
 8010496:	af00      	add	r7, sp, #0
 8010498:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in sequenceScreen
    }
 801049a:	bf00      	nop
 801049c:	370c      	adds	r7, #12
 801049e:	46bd      	mov	sp, r7
 80104a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a4:	4770      	bx	lr

080104a6 <_ZN22sequenceScreenViewBase28DeletePositionButton_ClickedEv>:

    virtual void DeletePositionButton_Clicked()
 80104a6:	b480      	push	{r7}
 80104a8:	b083      	sub	sp, #12
 80104aa:	af00      	add	r7, sp, #0
 80104ac:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in sequenceScreen
    }
 80104ae:	bf00      	nop
 80104b0:	370c      	adds	r7, #12
 80104b2:	46bd      	mov	sp, r7
 80104b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b8:	4770      	bx	lr

080104ba <_ZN22sequenceScreenViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 80104ba:	b580      	push	{r7, lr}
 80104bc:	b082      	sub	sp, #8
 80104be:	af00      	add	r7, sp, #0
 80104c0:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80104c2:	f00e fdc9 	bl	801f058 <_ZN8touchgfx11Application11getInstanceEv>
 80104c6:	4603      	mov	r3, r0
    }
 80104c8:	4618      	mov	r0, r3
 80104ca:	3708      	adds	r7, #8
 80104cc:	46bd      	mov	sp, r7
 80104ce:	bd80      	pop	{r7, pc}

080104d0 <_ZN22sequenceScreenViewBaseC1Ev>:
#include <gui_generated/sequencescreen_screen/sequenceScreenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

sequenceScreenViewBase::sequenceScreenViewBase() :
 80104d0:	b590      	push	{r4, r7, lr}
 80104d2:	b0a7      	sub	sp, #156	; 0x9c
 80104d4:	af02      	add	r7, sp, #8
 80104d6:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &sequenceScreenViewBase::buttonCallbackHandler)
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	4618      	mov	r0, r3
 80104dc:	f000 fb3e 	bl	8010b5c <_ZN8touchgfx4ViewI23sequenceScreenPresenterEC1Ev>
 80104e0:	4ae2      	ldr	r2, [pc, #904]	; (801086c <_ZN22sequenceScreenViewBaseC1Ev+0x39c>)
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	601a      	str	r2, [r3, #0]
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	3340      	adds	r3, #64	; 0x40
 80104ea:	4618      	mov	r0, r3
 80104ec:	f7fe fd26 	bl	800ef3c <_ZN8touchgfx3BoxC1Ev>
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80104f6:	f107 0310 	add.w	r3, r7, #16
 80104fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80104fe:	4618      	mov	r0, r3
 8010500:	f7fe fbd9 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 8010504:	f107 0310 	add.w	r3, r7, #16
 8010508:	4619      	mov	r1, r3
 801050a:	4620      	mov	r0, r4
 801050c:	f7fe fd4c 	bl	800efa8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	339c      	adds	r3, #156	; 0x9c
 8010514:	4618      	mov	r0, r3
 8010516:	f00d fd77 	bl	801e008 <_ZN8touchgfx14ButtonWithIconC1Ev>
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	33d8      	adds	r3, #216	; 0xd8
 801051e:	4618      	mov	r0, r3
 8010520:	f00d fd72 	bl	801e008 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	f503 738a 	add.w	r3, r3, #276	; 0x114
 801052a:	4618      	mov	r0, r3
 801052c:	f00d fd6c 	bl	801e008 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010536:	4618      	mov	r0, r3
 8010538:	f00d fd66 	bl	801e008 <_ZN8touchgfx14ButtonWithIconC1Ev>
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8010542:	4618      	mov	r0, r3
 8010544:	f00d fd60 	bl	801e008 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801054e:	4618      	mov	r0, r3
 8010550:	f00b fd34 	bl	801bfbc <_ZN8touchgfx19ScrollableContainerC1Ev>
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801055a:	2101      	movs	r1, #1
 801055c:	4618      	mov	r0, r3
 801055e:	f7ff fed3 	bl	8010308 <_ZN8touchgfx10ListLayoutC1ENS_9DirectionE>
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8010568:	4618      	mov	r0, r3
 801056a:	f7ff fd9b 	bl	80100a4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	f503 7071 	add.w	r0, r3, #964	; 0x3c4
 8010574:	4bbe      	ldr	r3, [pc, #760]	; (8010870 <_ZN22sequenceScreenViewBaseC1Ev+0x3a0>)
 8010576:	617b      	str	r3, [r7, #20]
 8010578:	2300      	movs	r3, #0
 801057a:	61bb      	str	r3, [r7, #24]
 801057c:	f107 0314 	add.w	r3, r7, #20
 8010580:	cb0c      	ldmia	r3, {r2, r3}
 8010582:	6879      	ldr	r1, [r7, #4]
 8010584:	f000 fb00 	bl	8010b88 <_ZN8touchgfx8CallbackI22sequenceScreenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 240, 320);
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	f103 0040 	add.w	r0, r3, #64	; 0x40
 801058e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8010592:	9300      	str	r3, [sp, #0]
 8010594:	23f0      	movs	r3, #240	; 0xf0
 8010596:	2200      	movs	r2, #0
 8010598:	2100      	movs	r1, #0
 801059a:	f7fc f9b3 	bl	800c904 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80105a4:	2200      	movs	r2, #0
 80105a6:	2100      	movs	r1, #0
 80105a8:	2000      	movs	r0, #0
 80105aa:	f7fe fe9d 	bl	800f2e8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80105ae:	4603      	mov	r3, r0
 80105b0:	4619      	mov	r1, r3
 80105b2:	4620      	mov	r0, r4
 80105b4:	f7fe fcea 	bl	800ef8c <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    backgroundImage.setXY(0, 0);
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	3370      	adds	r3, #112	; 0x70
 80105bc:	2200      	movs	r2, #0
 80105be:	2100      	movs	r1, #0
 80105c0:	4618      	mov	r0, r3
 80105c2:	f7fc fa04 	bl	800c9ce <_ZN8touchgfx8Drawable5setXYEss>
    backgroundImage.setBitmap(touchgfx::Bitmap(BITMAP_BLUE_BACKGROUNDS_MAIN_BG_PORTRAIT_240X320PX_ID));
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80105cc:	f107 031c 	add.w	r3, r7, #28
 80105d0:	2100      	movs	r1, #0
 80105d2:	4618      	mov	r0, r3
 80105d4:	f7fe fb6f 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 80105d8:	f107 031c 	add.w	r3, r7, #28
 80105dc:	4619      	mov	r1, r3
 80105de:	4620      	mov	r0, r4
 80105e0:	f00d fd36 	bl	801e050 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    backButton.setXY(0, 260);
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	339c      	adds	r3, #156	; 0x9c
 80105e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80105ec:	2100      	movs	r1, #0
 80105ee:	4618      	mov	r0, r3
 80105f0:	f7fc f9ed 	bl	800c9ce <_ZN8touchgfx8Drawable5setXYEss>
    backButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_BACK_ARROW_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_BACK_ARROW_32_ID));
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 80105fa:	f107 0320 	add.w	r3, r7, #32
 80105fe:	2101      	movs	r1, #1
 8010600:	4618      	mov	r0, r3
 8010602:	f7fe fb58 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 8010606:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801060a:	2102      	movs	r1, #2
 801060c:	4618      	mov	r0, r3
 801060e:	f7fe fb52 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 8010612:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010616:	2104      	movs	r1, #4
 8010618:	4618      	mov	r0, r3
 801061a:	f7fe fb4c 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 801061e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010622:	2104      	movs	r1, #4
 8010624:	4618      	mov	r0, r3
 8010626:	f7fe fb46 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 801062a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 801062e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8010632:	f107 0120 	add.w	r1, r7, #32
 8010636:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801063a:	9300      	str	r3, [sp, #0]
 801063c:	4603      	mov	r3, r0
 801063e:	4620      	mov	r0, r4
 8010640:	f00d fc3e 	bl	801dec0 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    backButton.setIconXY(22, 15);
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	339c      	adds	r3, #156	; 0x9c
 8010648:	220f      	movs	r2, #15
 801064a:	2116      	movs	r1, #22
 801064c:	4618      	mov	r0, r3
 801064e:	f7fe fd66 	bl	800f11e <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    backButton.setAction(buttonCallback);
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801065e:	4619      	mov	r1, r3
 8010660:	4610      	mov	r0, r2
 8010662:	f7fe fc17 	bl	800ee94 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    deletePositionButton.setXY(180, 0);
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	33d8      	adds	r3, #216	; 0xd8
 801066a:	2200      	movs	r2, #0
 801066c:	21b4      	movs	r1, #180	; 0xb4
 801066e:	4618      	mov	r0, r3
 8010670:	f7fc f9ad 	bl	800c9ce <_ZN8touchgfx8Drawable5setXYEss>
    deletePositionButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_REMOVE_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_REMOVE_32_ID));
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 801067a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801067e:	2101      	movs	r1, #1
 8010680:	4618      	mov	r0, r3
 8010682:	f7fe fb18 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 8010686:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801068a:	2102      	movs	r1, #2
 801068c:	4618      	mov	r0, r3
 801068e:	f7fe fb12 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 8010692:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010696:	2107      	movs	r1, #7
 8010698:	4618      	mov	r0, r3
 801069a:	f7fe fb0c 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 801069e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80106a2:	2107      	movs	r1, #7
 80106a4:	4618      	mov	r0, r3
 80106a6:	f7fe fb06 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 80106aa:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80106ae:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80106b2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80106b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80106ba:	9300      	str	r3, [sp, #0]
 80106bc:	4603      	mov	r3, r0
 80106be:	4620      	mov	r0, r4
 80106c0:	f00d fbfe 	bl	801dec0 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    deletePositionButton.setIconXY(16, 16);
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	33d8      	adds	r3, #216	; 0xd8
 80106c8:	2210      	movs	r2, #16
 80106ca:	2110      	movs	r1, #16
 80106cc:	4618      	mov	r0, r3
 80106ce:	f7fe fd26 	bl	800f11e <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    deletePositionButton.setAction(buttonCallback);
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80106de:	4619      	mov	r1, r3
 80106e0:	4610      	mov	r0, r2
 80106e2:	f7fe fbd7 	bl	800ee94 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    addNewPositionButton.setXY(90, 260);
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80106ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80106f0:	215a      	movs	r1, #90	; 0x5a
 80106f2:	4618      	mov	r0, r3
 80106f4:	f7fc f96b 	bl	800c9ce <_ZN8touchgfx8Drawable5setXYEss>
    addNewPositionButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_ADD_NEW_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_ADD_NEW_32_ID));
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	f503 748a 	add.w	r4, r3, #276	; 0x114
 80106fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010702:	2101      	movs	r1, #1
 8010704:	4618      	mov	r0, r3
 8010706:	f7fe fad6 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 801070a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801070e:	2102      	movs	r1, #2
 8010710:	4618      	mov	r0, r3
 8010712:	f7fe fad0 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 8010716:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801071a:	2103      	movs	r1, #3
 801071c:	4618      	mov	r0, r3
 801071e:	f7fe faca 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 8010722:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010726:	2103      	movs	r1, #3
 8010728:	4618      	mov	r0, r3
 801072a:	f7fe fac4 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 801072e:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8010732:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8010736:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801073a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801073e:	9300      	str	r3, [sp, #0]
 8010740:	4603      	mov	r3, r0
 8010742:	4620      	mov	r0, r4
 8010744:	f00d fbbc 	bl	801dec0 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    addNewPositionButton.setIconXY(16, 16);
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	f503 738a 	add.w	r3, r3, #276	; 0x114
 801074e:	2210      	movs	r2, #16
 8010750:	2110      	movs	r1, #16
 8010752:	4618      	mov	r0, r3
 8010754:	f7fe fce3 	bl	800f11e <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    addNewPositionButton.setAction(buttonCallback);
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	f503 728a 	add.w	r2, r3, #276	; 0x114
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8010764:	4619      	mov	r1, r3
 8010766:	4610      	mov	r0, r2
 8010768:	f7fe fb94 	bl	800ee94 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    playSequenceButton.setXY(180, 260);
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010772:	f44f 7282 	mov.w	r2, #260	; 0x104
 8010776:	21b4      	movs	r1, #180	; 0xb4
 8010778:	4618      	mov	r0, r3
 801077a:	f7fc f928 	bl	800c9ce <_ZN8touchgfx8Drawable5setXYEss>
    playSequenceButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_PLAY_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_PLAY_32_ID));
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 8010784:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010788:	2101      	movs	r1, #1
 801078a:	4618      	mov	r0, r3
 801078c:	f7fe fa93 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 8010790:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010794:	2102      	movs	r1, #2
 8010796:	4618      	mov	r0, r3
 8010798:	f7fe fa8d 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 801079c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80107a0:	2106      	movs	r1, #6
 80107a2:	4618      	mov	r0, r3
 80107a4:	f7fe fa87 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 80107a8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80107ac:	2106      	movs	r1, #6
 80107ae:	4618      	mov	r0, r3
 80107b0:	f7fe fa81 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 80107b4:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80107b8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80107bc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80107c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80107c4:	9300      	str	r3, [sp, #0]
 80107c6:	4603      	mov	r3, r0
 80107c8:	4620      	mov	r0, r4
 80107ca:	f00d fb79 	bl	801dec0 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    playSequenceButton.setIconXY(20, 15);
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80107d4:	220f      	movs	r2, #15
 80107d6:	2114      	movs	r1, #20
 80107d8:	4618      	mov	r0, r3
 80107da:	f7fe fca0 	bl	800f11e <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    playSequenceButton.setAction(buttonCallback);
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80107ea:	4619      	mov	r1, r3
 80107ec:	4610      	mov	r0, r2
 80107ee:	f7fe fb51 	bl	800ee94 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    saveSequenceButton.setXY(0, 0);
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80107f8:	2200      	movs	r2, #0
 80107fa:	2100      	movs	r1, #0
 80107fc:	4618      	mov	r0, r3
 80107fe:	f7fc f8e6 	bl	800c9ce <_ZN8touchgfx8Drawable5setXYEss>
    saveSequenceButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_DONE_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_DONE_32_ID));
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	f503 74c6 	add.w	r4, r3, #396	; 0x18c
 8010808:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801080c:	2101      	movs	r1, #1
 801080e:	4618      	mov	r0, r3
 8010810:	f7fe fa51 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 8010814:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8010818:	2102      	movs	r1, #2
 801081a:	4618      	mov	r0, r3
 801081c:	f7fe fa4b 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 8010820:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010824:	2105      	movs	r1, #5
 8010826:	4618      	mov	r0, r3
 8010828:	f7fe fa45 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 801082c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010830:	2105      	movs	r1, #5
 8010832:	4618      	mov	r0, r3
 8010834:	f7fe fa3f 	bl	800ecb6 <_ZN8touchgfx6BitmapC1Et>
 8010838:	f107 0068 	add.w	r0, r7, #104	; 0x68
 801083c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8010840:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8010844:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010848:	9300      	str	r3, [sp, #0]
 801084a:	4603      	mov	r3, r0
 801084c:	4620      	mov	r0, r4
 801084e:	f00d fb37 	bl	801dec0 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    saveSequenceButton.setIconXY(15, 15);
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8010858:	220f      	movs	r2, #15
 801085a:	210f      	movs	r1, #15
 801085c:	4618      	mov	r0, r3
 801085e:	f7fe fc5e 	bl	800f11e <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    saveSequenceButton.setAction(buttonCallback);
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	f503 72c6 	add.w	r2, r3, #396	; 0x18c
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	e003      	b.n	8010874 <_ZN22sequenceScreenViewBaseC1Ev+0x3a4>
 801086c:	08031a74 	.word	0x08031a74
 8010870:	08010acd 	.word	0x08010acd
 8010874:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8010878:	4619      	mov	r1, r3
 801087a:	4610      	mov	r0, r2
 801087c:	f7fe fb0a 	bl	800ee94 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    scrollableContainer.setPosition(0, 60, 240, 200);
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	f503 70e4 	add.w	r0, r3, #456	; 0x1c8
 8010886:	23c8      	movs	r3, #200	; 0xc8
 8010888:	9300      	str	r3, [sp, #0]
 801088a:	23f0      	movs	r3, #240	; 0xf0
 801088c:	223c      	movs	r2, #60	; 0x3c
 801088e:	2100      	movs	r1, #0
 8010890:	f7fc f838 	bl	800c904 <_ZN8touchgfx8Drawable11setPositionEssss>
    scrollableContainer.enableHorizontalScroll(false);
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801089a:	2100      	movs	r1, #0
 801089c:	4618      	mov	r0, r3
 801089e:	f7ff fd23 	bl	80102e8 <_ZN8touchgfx19ScrollableContainer22enableHorizontalScrollEb>
    scrollableContainer.setScrollbarsColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	f503 74e4 	add.w	r4, r3, #456	; 0x1c8
 80108a8:	2200      	movs	r2, #0
 80108aa:	2100      	movs	r1, #0
 80108ac:	2000      	movs	r0, #0
 80108ae:	f7fe fd1b 	bl	800f2e8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80108b2:	4603      	mov	r3, r0
 80108b4:	4619      	mov	r1, r3
 80108b6:	4620      	mov	r0, r4
 80108b8:	f00b ff97 	bl	801c7ea <_ZN8touchgfx19ScrollableContainer18setScrollbarsColorENS_9colortypeE>

    positionsList.setDirection(touchgfx::SOUTH);
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80108c2:	2101      	movs	r1, #1
 80108c4:	4618      	mov	r0, r3
 80108c6:	f00a ff67 	bl	801b798 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE>
    positionsList.setPosition(-5, 0, 250, 250);
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	f503 7023 	add.w	r0, r3, #652	; 0x28c
 80108d0:	23fa      	movs	r3, #250	; 0xfa
 80108d2:	9300      	str	r3, [sp, #0]
 80108d4:	23fa      	movs	r3, #250	; 0xfa
 80108d6:	2200      	movs	r2, #0
 80108d8:	f06f 0104 	mvn.w	r1, #4
 80108dc:	f7fc f812 	bl	800c904 <_ZN8touchgfx8Drawable11setPositionEssss>
    scrollableContainer.add(positionsList);
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	f503 72e4 	add.w	r2, r3, #456	; 0x1c8
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80108ec:	4619      	mov	r1, r3
 80108ee:	4610      	mov	r0, r2
 80108f0:	f00b f8b7 	bl	801ba62 <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE>
    scrollableContainer.setScrollbarsPermanentlyVisible();
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80108fa:	4618      	mov	r0, r3
 80108fc:	f00b ff7d 	bl	801c7fa <_ZN8touchgfx19ScrollableContainer31setScrollbarsPermanentlyVisibleEv>
    scrollableContainer.setScrollbarsVisible(false);
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8010906:	2100      	movs	r1, #0
 8010908:	4618      	mov	r0, r3
 801090a:	f00b ff73 	bl	801c7f4 <_ZN8touchgfx19ScrollableContainer20setScrollbarsVisibleEb>

    infoTextArea.setPosition(60, 0, 120, 60);
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	f503 702f 	add.w	r0, r3, #700	; 0x2bc
 8010914:	233c      	movs	r3, #60	; 0x3c
 8010916:	9300      	str	r3, [sp, #0]
 8010918:	2378      	movs	r3, #120	; 0x78
 801091a:	2200      	movs	r2, #0
 801091c:	213c      	movs	r1, #60	; 0x3c
 801091e:	f7fb fff1 	bl	800c904 <_ZN8touchgfx8Drawable11setPositionEssss>
    infoTextArea.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 8010928:	2200      	movs	r2, #0
 801092a:	2100      	movs	r1, #0
 801092c:	2000      	movs	r0, #0
 801092e:	f7fe fcdb 	bl	800f2e8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010932:	4603      	mov	r3, r0
 8010934:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 8010938:	60fb      	str	r3, [r7, #12]
        this->color = color;
 801093a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801093e:	68fa      	ldr	r2, [r7, #12]
 8010940:	631a      	str	r2, [r3, #48]	; 0x30
    infoTextArea.setLinespacing(0);
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8010948:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801094c:	2300      	movs	r3, #0
 801094e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
        linespace = space;
 8010952:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010956:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 801095a:	869a      	strh	r2, [r3, #52]	; 0x34
    Unicode::snprintf(infoTextAreaBuffer, INFOTEXTAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID10).getText());
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	f503 743f 	add.w	r4, r3, #764	; 0x2fc
 8010962:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8010966:	2108      	movs	r1, #8
 8010968:	4618      	mov	r0, r3
 801096a:	f7fe fb5b 	bl	800f024 <_ZN8touchgfx9TypedTextC1Et>
 801096e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8010972:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8010976:	4b48      	ldr	r3, [pc, #288]	; (8010a98 <_ZN22sequenceScreenViewBaseC1Ev+0x5c8>)
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d105      	bne.n	801098a <_ZN22sequenceScreenViewBaseC1Ev+0x4ba>
 801097e:	4b47      	ldr	r3, [pc, #284]	; (8010a9c <_ZN22sequenceScreenViewBaseC1Ev+0x5cc>)
 8010980:	4a47      	ldr	r2, [pc, #284]	; (8010aa0 <_ZN22sequenceScreenViewBaseC1Ev+0x5d0>)
 8010982:	21b1      	movs	r1, #177	; 0xb1
 8010984:	4847      	ldr	r0, [pc, #284]	; (8010aa4 <_ZN22sequenceScreenViewBaseC1Ev+0x5d4>)
 8010986:	f01d fc6f 	bl	802e268 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 801098a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801098e:	889a      	ldrh	r2, [r3, #4]
 8010990:	4b45      	ldr	r3, [pc, #276]	; (8010aa8 <_ZN22sequenceScreenViewBaseC1Ev+0x5d8>)
 8010992:	881b      	ldrh	r3, [r3, #0]
 8010994:	429a      	cmp	r2, r3
 8010996:	d305      	bcc.n	80109a4 <_ZN22sequenceScreenViewBaseC1Ev+0x4d4>
 8010998:	4b44      	ldr	r3, [pc, #272]	; (8010aac <_ZN22sequenceScreenViewBaseC1Ev+0x5dc>)
 801099a:	4a41      	ldr	r2, [pc, #260]	; (8010aa0 <_ZN22sequenceScreenViewBaseC1Ev+0x5d0>)
 801099c:	21b2      	movs	r1, #178	; 0xb2
 801099e:	4841      	ldr	r0, [pc, #260]	; (8010aa4 <_ZN22sequenceScreenViewBaseC1Ev+0x5d4>)
 80109a0:	f01d fc62 	bl	802e268 <__assert_func>
        return texts->getText(typedTextId);
 80109a4:	4b42      	ldr	r3, [pc, #264]	; (8010ab0 <_ZN22sequenceScreenViewBaseC1Ev+0x5e0>)
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 80109ac:	4611      	mov	r1, r2
 80109ae:	4618      	mov	r0, r3
 80109b0:	f7fe f8fc 	bl	800ebac <_ZNK8touchgfx5Texts7getTextEt>
 80109b4:	4603      	mov	r3, r0
 80109b6:	4a3f      	ldr	r2, [pc, #252]	; (8010ab4 <_ZN22sequenceScreenViewBaseC1Ev+0x5e4>)
 80109b8:	2164      	movs	r1, #100	; 0x64
 80109ba:	4620      	mov	r0, r4
 80109bc:	f010 fe34 	bl	8021628 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80109c0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80109c4:	4618      	mov	r0, r3
 80109c6:	f7fb ff51 	bl	800c86c <_ZN8touchgfx9TypedTextD1Ev>
    infoTextArea.setWildcard(infoTextAreaBuffer);
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	f503 722f 	add.w	r2, r3, #700	; 0x2bc
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 80109d6:	4619      	mov	r1, r3
 80109d8:	4610      	mov	r0, r2
 80109da:	f7ff fb79 	bl	80100d0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    infoTextArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID6));
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 80109e4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80109e8:	2105      	movs	r1, #5
 80109ea:	4618      	mov	r0, r3
 80109ec:	f7fe fb1a 	bl	800f024 <_ZN8touchgfx9TypedTextC1Et>
 80109f0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80109f4:	4619      	mov	r1, r3
 80109f6:	4620      	mov	r0, r4
 80109f8:	f00d f87c 	bl	801daf4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 80109fc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8010a00:	4618      	mov	r0, r3
 8010a02:	f7fb ff33 	bl	800c86c <_ZN8touchgfx9TypedTextD1Ev>

    add(__background);
 8010a06:	687a      	ldr	r2, [r7, #4]
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	3340      	adds	r3, #64	; 0x40
 8010a0c:	4619      	mov	r1, r3
 8010a0e:	4610      	mov	r0, r2
 8010a10:	f7fe f9f8 	bl	800ee04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(backgroundImage);
 8010a14:	687a      	ldr	r2, [r7, #4]
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	3370      	adds	r3, #112	; 0x70
 8010a1a:	4619      	mov	r1, r3
 8010a1c:	4610      	mov	r0, r2
 8010a1e:	f7fe f9f1 	bl	800ee04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(backButton);
 8010a22:	687a      	ldr	r2, [r7, #4]
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	339c      	adds	r3, #156	; 0x9c
 8010a28:	4619      	mov	r1, r3
 8010a2a:	4610      	mov	r0, r2
 8010a2c:	f7fe f9ea 	bl	800ee04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(deletePositionButton);
 8010a30:	687a      	ldr	r2, [r7, #4]
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	33d8      	adds	r3, #216	; 0xd8
 8010a36:	4619      	mov	r1, r3
 8010a38:	4610      	mov	r0, r2
 8010a3a:	f7fe f9e3 	bl	800ee04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(addNewPositionButton);
 8010a3e:	687a      	ldr	r2, [r7, #4]
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8010a46:	4619      	mov	r1, r3
 8010a48:	4610      	mov	r0, r2
 8010a4a:	f7fe f9db 	bl	800ee04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(playSequenceButton);
 8010a4e:	687a      	ldr	r2, [r7, #4]
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010a56:	4619      	mov	r1, r3
 8010a58:	4610      	mov	r0, r2
 8010a5a:	f7fe f9d3 	bl	800ee04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(saveSequenceButton);
 8010a5e:	687a      	ldr	r2, [r7, #4]
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8010a66:	4619      	mov	r1, r3
 8010a68:	4610      	mov	r0, r2
 8010a6a:	f7fe f9cb 	bl	800ee04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(scrollableContainer);
 8010a6e:	687a      	ldr	r2, [r7, #4]
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8010a76:	4619      	mov	r1, r3
 8010a78:	4610      	mov	r0, r2
 8010a7a:	f7fe f9c3 	bl	800ee04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(infoTextArea);
 8010a7e:	687a      	ldr	r2, [r7, #4]
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8010a86:	4619      	mov	r1, r3
 8010a88:	4610      	mov	r0, r2
 8010a8a:	f7fe f9bb 	bl	800ee04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	4618      	mov	r0, r3
 8010a92:	3794      	adds	r7, #148	; 0x94
 8010a94:	46bd      	mov	sp, r7
 8010a96:	bd90      	pop	{r4, r7, pc}
 8010a98:	20012914 	.word	0x20012914
 8010a9c:	0803000c 	.word	0x0803000c
 8010aa0:	08031b34 	.word	0x08031b34
 8010aa4:	08030050 	.word	0x08030050
 8010aa8:	20012918 	.word	0x20012918
 8010aac:	08030098 	.word	0x08030098
 8010ab0:	20012920 	.word	0x20012920
 8010ab4:	080300ec 	.word	0x080300ec

08010ab8 <_ZN22sequenceScreenViewBase11setupScreenEv>:

void sequenceScreenViewBase::setupScreen()
{
 8010ab8:	b480      	push	{r7}
 8010aba:	b083      	sub	sp, #12
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	6078      	str	r0, [r7, #4]

}
 8010ac0:	bf00      	nop
 8010ac2:	370c      	adds	r7, #12
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aca:	4770      	bx	lr

08010acc <_ZN22sequenceScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void sequenceScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8010acc:	b580      	push	{r7, lr}
 8010ace:	b082      	sub	sp, #8
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	6078      	str	r0, [r7, #4]
 8010ad4:	6039      	str	r1, [r7, #0]
    if (&src == &backButton)
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	339c      	adds	r3, #156	; 0x9c
 8010ada:	683a      	ldr	r2, [r7, #0]
 8010adc:	429a      	cmp	r2, r3
 8010ade:	d107      	bne.n	8010af0 <_ZN22sequenceScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //BackButton_Clicked
        //When backButton clicked change screen to mainScreen
        //Go to mainScreen with screen transition towards West
        application().gotomainScreenScreenSlideTransitionWest();
 8010ae0:	6878      	ldr	r0, [r7, #4]
 8010ae2:	f7ff fcea 	bl	80104ba <_ZN22sequenceScreenViewBase11applicationEv>
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	4618      	mov	r0, r3
 8010aea:	f7fc f9eb 	bl	800cec4 <_ZN23FrontendApplicationBase39gotomainScreenScreenSlideTransitionWestEv>
        //SaveSequenceButton_Clicked
        //When saveSequenceButton clicked call virtual function
        //Call SaveSequenceButton_Clicked
        SaveSequenceButton_Clicked();
    }
}
 8010aee:	e031      	b.n	8010b54 <_ZN22sequenceScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x88>
    else if (&src == &deletePositionButton)
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	33d8      	adds	r3, #216	; 0xd8
 8010af4:	683a      	ldr	r2, [r7, #0]
 8010af6:	429a      	cmp	r2, r3
 8010af8:	d106      	bne.n	8010b08 <_ZN22sequenceScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3c>
        DeletePositionButton_Clicked();
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	3338      	adds	r3, #56	; 0x38
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	6878      	ldr	r0, [r7, #4]
 8010b04:	4798      	blx	r3
}
 8010b06:	e025      	b.n	8010b54 <_ZN22sequenceScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x88>
    else if (&src == &addNewPositionButton)
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8010b0e:	683a      	ldr	r2, [r7, #0]
 8010b10:	429a      	cmp	r2, r3
 8010b12:	d106      	bne.n	8010b22 <_ZN22sequenceScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x56>
        AddNewPositionButton_Clicked();
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	3334      	adds	r3, #52	; 0x34
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	6878      	ldr	r0, [r7, #4]
 8010b1e:	4798      	blx	r3
}
 8010b20:	e018      	b.n	8010b54 <_ZN22sequenceScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x88>
    else if (&src == &playSequenceButton)
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010b28:	683a      	ldr	r2, [r7, #0]
 8010b2a:	429a      	cmp	r2, r3
 8010b2c:	d106      	bne.n	8010b3c <_ZN22sequenceScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x70>
        PlaySequenceButton_Clicked();
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	3330      	adds	r3, #48	; 0x30
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	6878      	ldr	r0, [r7, #4]
 8010b38:	4798      	blx	r3
}
 8010b3a:	e00b      	b.n	8010b54 <_ZN22sequenceScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x88>
    else if (&src == &saveSequenceButton)
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8010b42:	683a      	ldr	r2, [r7, #0]
 8010b44:	429a      	cmp	r2, r3
 8010b46:	d105      	bne.n	8010b54 <_ZN22sequenceScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x88>
        SaveSequenceButton_Clicked();
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	332c      	adds	r3, #44	; 0x2c
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	6878      	ldr	r0, [r7, #4]
 8010b52:	4798      	blx	r3
}
 8010b54:	bf00      	nop
 8010b56:	3708      	adds	r7, #8
 8010b58:	46bd      	mov	sp, r7
 8010b5a:	bd80      	pop	{r7, pc}

08010b5c <_ZN8touchgfx4ViewI23sequenceScreenPresenterEC1Ev>:
    View()
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	b082      	sub	sp, #8
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	4618      	mov	r0, r3
 8010b68:	f00f fab2 	bl	80200d0 <_ZN8touchgfx6ScreenC1Ev>
 8010b6c:	4a05      	ldr	r2, [pc, #20]	; (8010b84 <_ZN8touchgfx4ViewI23sequenceScreenPresenterEC1Ev+0x28>)
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	601a      	str	r2, [r3, #0]
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	2200      	movs	r2, #0
 8010b76:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	3708      	adds	r7, #8
 8010b7e:	46bd      	mov	sp, r7
 8010b80:	bd80      	pop	{r7, pc}
 8010b82:	bf00      	nop
 8010b84:	08031ad0 	.word	0x08031ad0

08010b88 <_ZN8touchgfx8CallbackI22sequenceScreenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8010b88:	b580      	push	{r7, lr}
 8010b8a:	b084      	sub	sp, #16
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	60f8      	str	r0, [r7, #12]
 8010b90:	60b9      	str	r1, [r7, #8]
 8010b92:	4639      	mov	r1, r7
 8010b94:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	f7fe fff4 	bl	800fb88 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8010ba0:	4a08      	ldr	r2, [pc, #32]	; (8010bc4 <_ZN8touchgfx8CallbackI22sequenceScreenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	68ba      	ldr	r2, [r7, #8]
 8010baa:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	3308      	adds	r3, #8
 8010bb0:	463a      	mov	r2, r7
 8010bb2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010bb6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	3710      	adds	r7, #16
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	bd80      	pop	{r7, pc}
 8010bc4:	08031ab8 	.word	0x08031ab8

08010bc8 <_ZN8touchgfx8CallbackI22sequenceScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8010bc8:	b580      	push	{r7, lr}
 8010bca:	b082      	sub	sp, #8
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
 8010bd0:	4a05      	ldr	r2, [pc, #20]	; (8010be8 <_ZN8touchgfx8CallbackI22sequenceScreenViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	601a      	str	r2, [r3, #0]
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	4618      	mov	r0, r3
 8010bda:	f7ff f835 	bl	800fc48 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	4618      	mov	r0, r3
 8010be2:	3708      	adds	r7, #8
 8010be4:	46bd      	mov	sp, r7
 8010be6:	bd80      	pop	{r7, pc}
 8010be8:	08031ab8 	.word	0x08031ab8

08010bec <_ZN8touchgfx8CallbackI22sequenceScreenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8010bec:	b580      	push	{r7, lr}
 8010bee:	b082      	sub	sp, #8
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	6078      	str	r0, [r7, #4]
 8010bf4:	6878      	ldr	r0, [r7, #4]
 8010bf6:	f7ff ffe7 	bl	8010bc8 <_ZN8touchgfx8CallbackI22sequenceScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8010bfa:	2110      	movs	r1, #16
 8010bfc:	6878      	ldr	r0, [r7, #4]
 8010bfe:	f01c fa65 	bl	802d0cc <_ZdlPvj>
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	4618      	mov	r0, r3
 8010c06:	3708      	adds	r7, #8
 8010c08:	46bd      	mov	sp, r7
 8010c0a:	bd80      	pop	{r7, pc}

08010c0c <_ZN8touchgfx19ScrollableContainerD1Ev>:
class ScrollableContainer : public Container
 8010c0c:	b580      	push	{r7, lr}
 8010c0e:	b082      	sub	sp, #8
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	6078      	str	r0, [r7, #4]
 8010c14:	4a0a      	ldr	r2, [pc, #40]	; (8010c40 <_ZN8touchgfx19ScrollableContainerD1Ev+0x34>)
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	601a      	str	r2, [r3, #0]
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	3368      	adds	r3, #104	; 0x68
 8010c1e:	4618      	mov	r0, r3
 8010c20:	f7ff f8b8 	bl	800fd94 <_ZN8touchgfx3BoxD1Ev>
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	3338      	adds	r3, #56	; 0x38
 8010c28:	4618      	mov	r0, r3
 8010c2a:	f7ff f8b3 	bl	800fd94 <_ZN8touchgfx3BoxD1Ev>
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	4618      	mov	r0, r3
 8010c32:	f7ff f88d 	bl	800fd50 <_ZN8touchgfx9ContainerD1Ev>
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	4618      	mov	r0, r3
 8010c3a:	3708      	adds	r7, #8
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	bd80      	pop	{r7, pc}
 8010c40:	0803273c 	.word	0x0803273c

08010c44 <_ZN8touchgfx19ScrollableContainerD0Ev>:
 8010c44:	b580      	push	{r7, lr}
 8010c46:	b082      	sub	sp, #8
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	6078      	str	r0, [r7, #4]
 8010c4c:	6878      	ldr	r0, [r7, #4]
 8010c4e:	f7ff ffdd 	bl	8010c0c <_ZN8touchgfx19ScrollableContainerD1Ev>
 8010c52:	21c4      	movs	r1, #196	; 0xc4
 8010c54:	6878      	ldr	r0, [r7, #4]
 8010c56:	f01c fa39 	bl	802d0cc <_ZdlPvj>
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	3708      	adds	r7, #8
 8010c60:	46bd      	mov	sp, r7
 8010c62:	bd80      	pop	{r7, pc}

08010c64 <_ZN8touchgfx10ListLayoutD1Ev>:
class ListLayout : public Container
 8010c64:	b580      	push	{r7, lr}
 8010c66:	b082      	sub	sp, #8
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	6078      	str	r0, [r7, #4]
 8010c6c:	4a05      	ldr	r2, [pc, #20]	; (8010c84 <_ZN8touchgfx10ListLayoutD1Ev+0x20>)
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	601a      	str	r2, [r3, #0]
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	4618      	mov	r0, r3
 8010c76:	f7ff f86b 	bl	800fd50 <_ZN8touchgfx9ContainerD1Ev>
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	3708      	adds	r7, #8
 8010c80:	46bd      	mov	sp, r7
 8010c82:	bd80      	pop	{r7, pc}
 8010c84:	080325d0 	.word	0x080325d0

08010c88 <_ZN8touchgfx10ListLayoutD0Ev>:
 8010c88:	b580      	push	{r7, lr}
 8010c8a:	b082      	sub	sp, #8
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	6078      	str	r0, [r7, #4]
 8010c90:	6878      	ldr	r0, [r7, #4]
 8010c92:	f7ff ffe7 	bl	8010c64 <_ZN8touchgfx10ListLayoutD1Ev>
 8010c96:	2130      	movs	r1, #48	; 0x30
 8010c98:	6878      	ldr	r0, [r7, #4]
 8010c9a:	f01c fa17 	bl	802d0cc <_ZdlPvj>
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	3708      	adds	r7, #8
 8010ca4:	46bd      	mov	sp, r7
 8010ca6:	bd80      	pop	{r7, pc}

08010ca8 <_ZN8touchgfx8CallbackI22sequenceScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b082      	sub	sp, #8
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
 8010cb0:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	685b      	ldr	r3, [r3, #4]
 8010cb6:	687a      	ldr	r2, [r7, #4]
 8010cb8:	68d2      	ldr	r2, [r2, #12]
 8010cba:	1052      	asrs	r2, r2, #1
 8010cbc:	1898      	adds	r0, r3, r2
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	68db      	ldr	r3, [r3, #12]
 8010cc2:	f003 0301 	and.w	r3, r3, #1
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d102      	bne.n	8010cd0 <_ZN8touchgfx8CallbackI22sequenceScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	689b      	ldr	r3, [r3, #8]
 8010cce:	e00a      	b.n	8010ce6 <_ZN8touchgfx8CallbackI22sequenceScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	685b      	ldr	r3, [r3, #4]
 8010cd4:	687a      	ldr	r2, [r7, #4]
 8010cd6:	68d2      	ldr	r2, [r2, #12]
 8010cd8:	1052      	asrs	r2, r2, #1
 8010cda:	4413      	add	r3, r2
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	687a      	ldr	r2, [r7, #4]
 8010ce0:	6892      	ldr	r2, [r2, #8]
 8010ce2:	4413      	add	r3, r2
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	6839      	ldr	r1, [r7, #0]
 8010ce8:	4798      	blx	r3
    }
 8010cea:	bf00      	nop
 8010cec:	3708      	adds	r7, #8
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	bd80      	pop	{r7, pc}

08010cf2 <_ZNK8touchgfx8CallbackI22sequenceScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8010cf2:	b480      	push	{r7}
 8010cf4:	b083      	sub	sp, #12
 8010cf6:	af00      	add	r7, sp, #0
 8010cf8:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	685b      	ldr	r3, [r3, #4]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d010      	beq.n	8010d24 <_ZNK8touchgfx8CallbackI22sequenceScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	689b      	ldr	r3, [r3, #8]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d107      	bne.n	8010d1a <_ZNK8touchgfx8CallbackI22sequenceScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	68db      	ldr	r3, [r3, #12]
 8010d0e:	f003 0301 	and.w	r3, r3, #1
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d101      	bne.n	8010d1a <_ZNK8touchgfx8CallbackI22sequenceScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8010d16:	2301      	movs	r3, #1
 8010d18:	e000      	b.n	8010d1c <_ZNK8touchgfx8CallbackI22sequenceScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	2b01      	cmp	r3, #1
 8010d1e:	d001      	beq.n	8010d24 <_ZNK8touchgfx8CallbackI22sequenceScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8010d20:	2301      	movs	r3, #1
 8010d22:	e000      	b.n	8010d26 <_ZNK8touchgfx8CallbackI22sequenceScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8010d24:	2300      	movs	r3, #0
    }
 8010d26:	4618      	mov	r0, r3
 8010d28:	370c      	adds	r7, #12
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d30:	4770      	bx	lr
	...

08010d34 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8010d34:	b580      	push	{r7, lr}
 8010d36:	b084      	sub	sp, #16
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	60f8      	str	r0, [r7, #12]
 8010d3c:	60b9      	str	r1, [r7, #8]
 8010d3e:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	687a      	ldr	r2, [r7, #4]
 8010d44:	68b9      	ldr	r1, [r7, #8]
 8010d46:	4618      	mov	r0, r3
 8010d48:	f7fc f81a 	bl	800cd80 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8010d4c:	4a03      	ldr	r2, [pc, #12]	; (8010d5c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	601a      	str	r2, [r3, #0]
{

}
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	4618      	mov	r0, r3
 8010d56:	3710      	adds	r7, #16
 8010d58:	46bd      	mov	sp, r7
 8010d5a:	bd80      	pop	{r7, pc}
 8010d5c:	08030d74 	.word	0x08030d74

08010d60 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8010d60:	b480      	push	{r7}
 8010d62:	b083      	sub	sp, #12
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	6078      	str	r0, [r7, #4]
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	2200      	movs	r2, #0
 8010d6c:	601a      	str	r2, [r3, #0]
{

}
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	4618      	mov	r0, r3
 8010d72:	370c      	adds	r7, #12
 8010d74:	46bd      	mov	sp, r7
 8010d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d7a:	4770      	bx	lr

08010d7c <_ZN5Model4tickEv>:

void Model::tick()
{
 8010d7c:	b480      	push	{r7}
 8010d7e:	b083      	sub	sp, #12
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	6078      	str	r0, [r7, #4]

}
 8010d84:	bf00      	nop
 8010d86:	370c      	adds	r7, #12
 8010d88:	46bd      	mov	sp, r7
 8010d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8e:	4770      	bx	lr

08010d90 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8010d90:	b480      	push	{r7}
 8010d92:	b083      	sub	sp, #12
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	6078      	str	r0, [r7, #4]
    {
    }
 8010d98:	bf00      	nop
 8010d9a:	370c      	adds	r7, #12
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da2:	4770      	bx	lr

08010da4 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8010da4:	b480      	push	{r7}
 8010da6:	b083      	sub	sp, #12
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	6078      	str	r0, [r7, #4]
    {
    }
 8010dac:	bf00      	nop
 8010dae:	370c      	adds	r7, #12
 8010db0:	46bd      	mov	sp, r7
 8010db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db6:	4770      	bx	lr

08010db8 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8010db8:	b480      	push	{r7}
 8010dba:	b083      	sub	sp, #12
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	6078      	str	r0, [r7, #4]
    {
 8010dc0:	4a04      	ldr	r2, [pc, #16]	; (8010dd4 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	601a      	str	r2, [r3, #0]
    }
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	4618      	mov	r0, r3
 8010dca:	370c      	adds	r7, #12
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd2:	4770      	bx	lr
 8010dd4:	08031ba4 	.word	0x08031ba4

08010dd8 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	b082      	sub	sp, #8
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	6078      	str	r0, [r7, #4]
    }
 8010de0:	6878      	ldr	r0, [r7, #4]
 8010de2:	f7ff ffe9 	bl	8010db8 <_ZN8touchgfx9PresenterD1Ev>
 8010de6:	2104      	movs	r1, #4
 8010de8:	6878      	ldr	r0, [r7, #4]
 8010dea:	f01c f96f 	bl	802d0cc <_ZdlPvj>
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	4618      	mov	r0, r3
 8010df2:	3708      	adds	r7, #8
 8010df4:	46bd      	mov	sp, r7
 8010df6:	bd80      	pop	{r7, pc}

08010df8 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8010df8:	b480      	push	{r7}
 8010dfa:	b083      	sub	sp, #12
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	6078      	str	r0, [r7, #4]
    {
 8010e00:	4a04      	ldr	r2, [pc, #16]	; (8010e14 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	601a      	str	r2, [r3, #0]
    }
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	4618      	mov	r0, r3
 8010e0a:	370c      	adds	r7, #12
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e12:	4770      	bx	lr
 8010e14:	08031ba4 	.word	0x08031ba4

08010e18 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8010e18:	b480      	push	{r7}
 8010e1a:	b083      	sub	sp, #12
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
 8010e20:	4a06      	ldr	r2, [pc, #24]	; (8010e3c <_ZN13ModelListenerC1Ev+0x24>)
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	601a      	str	r2, [r3, #0]
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	2200      	movs	r2, #0
 8010e2a:	605a      	str	r2, [r3, #4]
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	4618      	mov	r0, r3
 8010e30:	370c      	adds	r7, #12
 8010e32:	46bd      	mov	sp, r7
 8010e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e38:	4770      	bx	lr
 8010e3a:	bf00      	nop
 8010e3c:	08031b94 	.word	0x08031b94

08010e40 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8010e40:	b480      	push	{r7}
 8010e42:	b083      	sub	sp, #12
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]
 8010e48:	4a04      	ldr	r2, [pc, #16]	; (8010e5c <_ZN13ModelListenerD1Ev+0x1c>)
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	601a      	str	r2, [r3, #0]
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	4618      	mov	r0, r3
 8010e52:	370c      	adds	r7, #12
 8010e54:	46bd      	mov	sp, r7
 8010e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5a:	4770      	bx	lr
 8010e5c:	08031b94 	.word	0x08031b94

08010e60 <_ZN13ModelListenerD0Ev>:
 8010e60:	b580      	push	{r7, lr}
 8010e62:	b082      	sub	sp, #8
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	6078      	str	r0, [r7, #4]
 8010e68:	6878      	ldr	r0, [r7, #4]
 8010e6a:	f7ff ffe9 	bl	8010e40 <_ZN13ModelListenerD1Ev>
 8010e6e:	2108      	movs	r1, #8
 8010e70:	6878      	ldr	r0, [r7, #4]
 8010e72:	f01c f92b 	bl	802d0cc <_ZdlPvj>
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	4618      	mov	r0, r3
 8010e7a:	3708      	adds	r7, #8
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	bd80      	pop	{r7, pc}

08010e80 <_ZN19mainScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~mainScreenPresenter() {};
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b082      	sub	sp, #8
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	6078      	str	r0, [r7, #4]
 8010e88:	4a09      	ldr	r2, [pc, #36]	; (8010eb0 <_ZN19mainScreenPresenterD1Ev+0x30>)
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	601a      	str	r2, [r3, #0]
 8010e8e:	4a09      	ldr	r2, [pc, #36]	; (8010eb4 <_ZN19mainScreenPresenterD1Ev+0x34>)
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	605a      	str	r2, [r3, #4]
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	3304      	adds	r3, #4
 8010e98:	4618      	mov	r0, r3
 8010e9a:	f7ff ffd1 	bl	8010e40 <_ZN13ModelListenerD1Ev>
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	f7ff ff89 	bl	8010db8 <_ZN8touchgfx9PresenterD1Ev>
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	3708      	adds	r7, #8
 8010eac:	46bd      	mov	sp, r7
 8010eae:	bd80      	pop	{r7, pc}
 8010eb0:	08031b6c 	.word	0x08031b6c
 8010eb4:	08031b84 	.word	0x08031b84

08010eb8 <_ZThn4_N19mainScreenPresenterD1Ev>:
 8010eb8:	f1a0 0004 	sub.w	r0, r0, #4
 8010ebc:	e7e0      	b.n	8010e80 <_ZN19mainScreenPresenterD1Ev>
 8010ebe:	bf00      	nop

08010ec0 <_ZN19mainScreenPresenterD0Ev>:
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b082      	sub	sp, #8
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	6078      	str	r0, [r7, #4]
 8010ec8:	6878      	ldr	r0, [r7, #4]
 8010eca:	f7ff ffd9 	bl	8010e80 <_ZN19mainScreenPresenterD1Ev>
 8010ece:	2110      	movs	r1, #16
 8010ed0:	6878      	ldr	r0, [r7, #4]
 8010ed2:	f01c f8fb 	bl	802d0cc <_ZdlPvj>
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	4618      	mov	r0, r3
 8010eda:	3708      	adds	r7, #8
 8010edc:	46bd      	mov	sp, r7
 8010ede:	bd80      	pop	{r7, pc}

08010ee0 <_ZThn4_N19mainScreenPresenterD0Ev>:
 8010ee0:	f1a0 0004 	sub.w	r0, r0, #4
 8010ee4:	e7ec      	b.n	8010ec0 <_ZN19mainScreenPresenterD0Ev>
	...

08010ee8 <_ZN19mainScreenPresenterC1ER14mainScreenView>:
#include <gui/mainscreen_screen/mainScreenView.hpp>
#include <gui/mainscreen_screen/mainScreenPresenter.hpp>

mainScreenPresenter::mainScreenPresenter(mainScreenView& v)
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b082      	sub	sp, #8
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	6078      	str	r0, [r7, #4]
 8010ef0:	6039      	str	r1, [r7, #0]
    : view(v)
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	f7ff ff7f 	bl	8010df8 <_ZN8touchgfx9PresenterC1Ev>
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	3304      	adds	r3, #4
 8010efe:	4618      	mov	r0, r3
 8010f00:	f7ff ff8a 	bl	8010e18 <_ZN13ModelListenerC1Ev>
 8010f04:	4a06      	ldr	r2, [pc, #24]	; (8010f20 <_ZN19mainScreenPresenterC1ER14mainScreenView+0x38>)
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	601a      	str	r2, [r3, #0]
 8010f0a:	4a06      	ldr	r2, [pc, #24]	; (8010f24 <_ZN19mainScreenPresenterC1ER14mainScreenView+0x3c>)
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	605a      	str	r2, [r3, #4]
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	683a      	ldr	r2, [r7, #0]
 8010f14:	60da      	str	r2, [r3, #12]
{

}
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	4618      	mov	r0, r3
 8010f1a:	3708      	adds	r7, #8
 8010f1c:	46bd      	mov	sp, r7
 8010f1e:	bd80      	pop	{r7, pc}
 8010f20:	08031b6c 	.word	0x08031b6c
 8010f24:	08031b84 	.word	0x08031b84

08010f28 <_ZN19mainScreenPresenter8activateEv>:

void mainScreenPresenter::activate()
{
 8010f28:	b480      	push	{r7}
 8010f2a:	b083      	sub	sp, #12
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	6078      	str	r0, [r7, #4]

}
 8010f30:	bf00      	nop
 8010f32:	370c      	adds	r7, #12
 8010f34:	46bd      	mov	sp, r7
 8010f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f3a:	4770      	bx	lr

08010f3c <_ZN19mainScreenPresenter10deactivateEv>:

void mainScreenPresenter::deactivate()
{
 8010f3c:	b480      	push	{r7}
 8010f3e:	b083      	sub	sp, #12
 8010f40:	af00      	add	r7, sp, #0
 8010f42:	6078      	str	r0, [r7, #4]

}
 8010f44:	bf00      	nop
 8010f46:	370c      	adds	r7, #12
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f4e:	4770      	bx	lr

08010f50 <_ZN14mainScreenViewD1Ev>:

class mainScreenView : public mainScreenViewBase
{
public:
    mainScreenView();
    virtual ~mainScreenView() {}
 8010f50:	b580      	push	{r7, lr}
 8010f52:	b082      	sub	sp, #8
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	6078      	str	r0, [r7, #4]
 8010f58:	4a05      	ldr	r2, [pc, #20]	; (8010f70 <_ZN14mainScreenViewD1Ev+0x20>)
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	601a      	str	r2, [r3, #0]
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	4618      	mov	r0, r3
 8010f62:	f7fe f917 	bl	800f194 <_ZN18mainScreenViewBaseD1Ev>
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	4618      	mov	r0, r3
 8010f6a:	3708      	adds	r7, #8
 8010f6c:	46bd      	mov	sp, r7
 8010f6e:	bd80      	pop	{r7, pc}
 8010f70:	08031bbc 	.word	0x08031bbc

08010f74 <_ZN14mainScreenViewD0Ev>:
 8010f74:	b580      	push	{r7, lr}
 8010f76:	b082      	sub	sp, #8
 8010f78:	af00      	add	r7, sp, #0
 8010f7a:	6078      	str	r0, [r7, #4]
 8010f7c:	6878      	ldr	r0, [r7, #4]
 8010f7e:	f7ff ffe7 	bl	8010f50 <_ZN14mainScreenViewD1Ev>
 8010f82:	f44f 61aa 	mov.w	r1, #1360	; 0x550
 8010f86:	6878      	ldr	r0, [r7, #4]
 8010f88:	f01c f8a0 	bl	802d0cc <_ZdlPvj>
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	4618      	mov	r0, r3
 8010f90:	3708      	adds	r7, #8
 8010f92:	46bd      	mov	sp, r7
 8010f94:	bd80      	pop	{r7, pc}
	...

08010f98 <_ZN14mainScreenViewC1Ev>:
extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim4;
extern TIM_HandleTypeDef htim5;

mainScreenView::mainScreenView()
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	b082      	sub	sp, #8
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	6078      	str	r0, [r7, #4]
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	f7fe fa06 	bl	800f3b4 <_ZN18mainScreenViewBaseC1Ev>
 8010fa8:	4a0f      	ldr	r2, [pc, #60]	; (8010fe8 <_ZN14mainScreenViewC1Ev+0x50>)
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	601a      	str	r2, [r3, #0]
{
	/* Initialize all configured peripherals */
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_4, &xAxisPWMDuty, 1);
 8010fae:	2301      	movs	r3, #1
 8010fb0:	4a0e      	ldr	r2, [pc, #56]	; (8010fec <_ZN14mainScreenViewC1Ev+0x54>)
 8010fb2:	210c      	movs	r1, #12
 8010fb4:	480e      	ldr	r0, [pc, #56]	; (8010ff0 <_ZN14mainScreenViewC1Ev+0x58>)
 8010fb6:	f005 f909 	bl	80161cc <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, &yAxisPWMDuty_L, 1);
 8010fba:	2301      	movs	r3, #1
 8010fbc:	4a0d      	ldr	r2, [pc, #52]	; (8010ff4 <_ZN14mainScreenViewC1Ev+0x5c>)
 8010fbe:	2104      	movs	r1, #4
 8010fc0:	480d      	ldr	r0, [pc, #52]	; (8010ff8 <_ZN14mainScreenViewC1Ev+0x60>)
 8010fc2:	f005 f903 	bl	80161cc <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_1, &yAxisPWMDuty_R, 1);
 8010fc6:	2301      	movs	r3, #1
 8010fc8:	4a0c      	ldr	r2, [pc, #48]	; (8010ffc <_ZN14mainScreenViewC1Ev+0x64>)
 8010fca:	2100      	movs	r1, #0
 8010fcc:	480c      	ldr	r0, [pc, #48]	; (8011000 <_ZN14mainScreenViewC1Ev+0x68>)
 8010fce:	f005 f8fd 	bl	80161cc <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_1, &manipulatorPWMDuty, 1);
 8010fd2:	2301      	movs	r3, #1
 8010fd4:	4a0b      	ldr	r2, [pc, #44]	; (8011004 <_ZN14mainScreenViewC1Ev+0x6c>)
 8010fd6:	2100      	movs	r1, #0
 8010fd8:	480b      	ldr	r0, [pc, #44]	; (8011008 <_ZN14mainScreenViewC1Ev+0x70>)
 8010fda:	f005 f8f7 	bl	80161cc <HAL_TIM_PWM_Start_DMA>
}
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	3708      	adds	r7, #8
 8010fe4:	46bd      	mov	sp, r7
 8010fe6:	bd80      	pop	{r7, pc}
 8010fe8:	08031bbc 	.word	0x08031bbc
 8010fec:	2000000c 	.word	0x2000000c
 8010ff0:	20012f60 	.word	0x20012f60
 8010ff4:	20000010 	.word	0x20000010
 8010ff8:	20012d74 	.word	0x20012d74
 8010ffc:	20000014 	.word	0x20000014
 8011000:	20012c8c 	.word	0x20012c8c
 8011004:	20000018 	.word	0x20000018
 8011008:	20012d34 	.word	0x20012d34

0801100c <_ZN14mainScreenView11setupScreenEv>:

void mainScreenView::setupScreen()
{
 801100c:	b580      	push	{r7, lr}
 801100e:	b082      	sub	sp, #8
 8011010:	af00      	add	r7, sp, #0
 8011012:	6078      	str	r0, [r7, #4]
    mainScreenViewBase::setupScreen();
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	4618      	mov	r0, r3
 8011018:	f7fe fd40 	bl	800fa9c <_ZN18mainScreenViewBase11setupScreenEv>
}
 801101c:	bf00      	nop
 801101e:	3708      	adds	r7, #8
 8011020:	46bd      	mov	sp, r7
 8011022:	bd80      	pop	{r7, pc}

08011024 <_ZN14mainScreenView14tearDownScreenEv>:

void mainScreenView::tearDownScreen()
{
 8011024:	b580      	push	{r7, lr}
 8011026:	b082      	sub	sp, #8
 8011028:	af00      	add	r7, sp, #0
 801102a:	6078      	str	r0, [r7, #4]
    mainScreenViewBase::tearDownScreen();
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	4618      	mov	r0, r3
 8011030:	f7fd fec8 	bl	800edc4 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8011034:	bf00      	nop
 8011036:	3708      	adds	r7, #8
 8011038:	46bd      	mov	sp, r7
 801103a:	bd80      	pop	{r7, pc}

0801103c <_ZN14mainScreenView24XAxisSliderValue_ChangedEi>:

void mainScreenView::XAxisSliderValue_Changed(int value)
{
 801103c:	b480      	push	{r7}
 801103e:	b083      	sub	sp, #12
 8011040:	af00      	add	r7, sp, #0
 8011042:	6078      	str	r0, [r7, #4]
 8011044:	6039      	str	r1, [r7, #0]
	xAxisPWMDuty = 275 + 9 * value;
 8011046:	683a      	ldr	r2, [r7, #0]
 8011048:	4613      	mov	r3, r2
 801104a:	00db      	lsls	r3, r3, #3
 801104c:	4413      	add	r3, r2
 801104e:	f203 1313 	addw	r3, r3, #275	; 0x113
 8011052:	461a      	mov	r2, r3
 8011054:	4b03      	ldr	r3, [pc, #12]	; (8011064 <_ZN14mainScreenView24XAxisSliderValue_ChangedEi+0x28>)
 8011056:	601a      	str	r2, [r3, #0]
}
 8011058:	bf00      	nop
 801105a:	370c      	adds	r7, #12
 801105c:	46bd      	mov	sp, r7
 801105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011062:	4770      	bx	lr
 8011064:	2000000c 	.word	0x2000000c

08011068 <_ZN14mainScreenView27YAxisSlider_L_Value_ChangedEi>:

void mainScreenView::YAxisSlider_L_Value_Changed(int value)
{
 8011068:	b590      	push	{r4, r7, lr}
 801106a:	b083      	sub	sp, #12
 801106c:	af00      	add	r7, sp, #0
 801106e:	6078      	str	r0, [r7, #4]
 8011070:	6039      	str	r1, [r7, #0]
	yAxisPWMDuty_L = (int) (842.0 + 5.06 * (float)value);
 8011072:	683b      	ldr	r3, [r7, #0]
 8011074:	ee07 3a90 	vmov	s15, r3
 8011078:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801107c:	ee17 0a90 	vmov	r0, s15
 8011080:	f7f5 ffea 	bl	8007058 <__aeabi_f2d>
 8011084:	a310      	add	r3, pc, #64	; (adr r3, 80110c8 <_ZN14mainScreenView27YAxisSlider_L_Value_ChangedEi+0x60>)
 8011086:	e9d3 2300 	ldrd	r2, r3, [r3]
 801108a:	f7f6 f83d 	bl	8007108 <__aeabi_dmul>
 801108e:	4603      	mov	r3, r0
 8011090:	460c      	mov	r4, r1
 8011092:	4618      	mov	r0, r3
 8011094:	4621      	mov	r1, r4
 8011096:	f04f 0200 	mov.w	r2, #0
 801109a:	4b09      	ldr	r3, [pc, #36]	; (80110c0 <_ZN14mainScreenView27YAxisSlider_L_Value_ChangedEi+0x58>)
 801109c:	f7f5 fe7e 	bl	8006d9c <__adddf3>
 80110a0:	4603      	mov	r3, r0
 80110a2:	460c      	mov	r4, r1
 80110a4:	4618      	mov	r0, r3
 80110a6:	4621      	mov	r1, r4
 80110a8:	f7f6 fa40 	bl	800752c <__aeabi_d2iz>
 80110ac:	4603      	mov	r3, r0
 80110ae:	461a      	mov	r2, r3
 80110b0:	4b04      	ldr	r3, [pc, #16]	; (80110c4 <_ZN14mainScreenView27YAxisSlider_L_Value_ChangedEi+0x5c>)
 80110b2:	601a      	str	r2, [r3, #0]
}
 80110b4:	bf00      	nop
 80110b6:	370c      	adds	r7, #12
 80110b8:	46bd      	mov	sp, r7
 80110ba:	bd90      	pop	{r4, r7, pc}
 80110bc:	f3af 8000 	nop.w
 80110c0:	408a5000 	.word	0x408a5000
 80110c4:	20000010 	.word	0x20000010
 80110c8:	a3d70a3d 	.word	0xa3d70a3d
 80110cc:	40143d70 	.word	0x40143d70

080110d0 <_ZN14mainScreenView27YAxisSlider_R_Value_ChangedEi>:

void mainScreenView::YAxisSlider_R_Value_Changed(int value)
{
 80110d0:	b590      	push	{r4, r7, lr}
 80110d2:	b083      	sub	sp, #12
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	6078      	str	r0, [r7, #4]
 80110d8:	6039      	str	r1, [r7, #0]
	yAxisPWMDuty_R = (int) (842.0 + 3.42 * (float)value);
 80110da:	683b      	ldr	r3, [r7, #0]
 80110dc:	ee07 3a90 	vmov	s15, r3
 80110e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80110e4:	ee17 0a90 	vmov	r0, s15
 80110e8:	f7f5 ffb6 	bl	8007058 <__aeabi_f2d>
 80110ec:	a310      	add	r3, pc, #64	; (adr r3, 8011130 <_ZN14mainScreenView27YAxisSlider_R_Value_ChangedEi+0x60>)
 80110ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110f2:	f7f6 f809 	bl	8007108 <__aeabi_dmul>
 80110f6:	4603      	mov	r3, r0
 80110f8:	460c      	mov	r4, r1
 80110fa:	4618      	mov	r0, r3
 80110fc:	4621      	mov	r1, r4
 80110fe:	f04f 0200 	mov.w	r2, #0
 8011102:	4b09      	ldr	r3, [pc, #36]	; (8011128 <_ZN14mainScreenView27YAxisSlider_R_Value_ChangedEi+0x58>)
 8011104:	f7f5 fe4a 	bl	8006d9c <__adddf3>
 8011108:	4603      	mov	r3, r0
 801110a:	460c      	mov	r4, r1
 801110c:	4618      	mov	r0, r3
 801110e:	4621      	mov	r1, r4
 8011110:	f7f6 fa0c 	bl	800752c <__aeabi_d2iz>
 8011114:	4603      	mov	r3, r0
 8011116:	461a      	mov	r2, r3
 8011118:	4b04      	ldr	r3, [pc, #16]	; (801112c <_ZN14mainScreenView27YAxisSlider_R_Value_ChangedEi+0x5c>)
 801111a:	601a      	str	r2, [r3, #0]
}
 801111c:	bf00      	nop
 801111e:	370c      	adds	r7, #12
 8011120:	46bd      	mov	sp, r7
 8011122:	bd90      	pop	{r4, r7, pc}
 8011124:	f3af 8000 	nop.w
 8011128:	408a5000 	.word	0x408a5000
 801112c:	20000014 	.word	0x20000014
 8011130:	f5c28f5c 	.word	0xf5c28f5c
 8011134:	400b5c28 	.word	0x400b5c28

08011138 <_ZN14mainScreenView38ManipulatorControlToggleButton_ClickedEv>:

void mainScreenView::ManipulatorControlToggleButton_Clicked()
{
 8011138:	b480      	push	{r7}
 801113a:	b083      	sub	sp, #12
 801113c:	af00      	add	r7, sp, #0
 801113e:	6078      	str	r0, [r7, #4]
	static bool state = false;

	if (state)
 8011140:	4b0c      	ldr	r3, [pc, #48]	; (8011174 <_ZN14mainScreenView38ManipulatorControlToggleButton_ClickedEv+0x3c>)
 8011142:	781b      	ldrb	r3, [r3, #0]
 8011144:	2b00      	cmp	r3, #0
 8011146:	d007      	beq.n	8011158 <_ZN14mainScreenView38ManipulatorControlToggleButton_ClickedEv+0x20>
	{
		manipulatorPWMDuty = 275;
 8011148:	4b0b      	ldr	r3, [pc, #44]	; (8011178 <_ZN14mainScreenView38ManipulatorControlToggleButton_ClickedEv+0x40>)
 801114a:	f240 1213 	movw	r2, #275	; 0x113
 801114e:	601a      	str	r2, [r3, #0]
		state = false;
 8011150:	4b08      	ldr	r3, [pc, #32]	; (8011174 <_ZN14mainScreenView38ManipulatorControlToggleButton_ClickedEv+0x3c>)
 8011152:	2200      	movs	r2, #0
 8011154:	701a      	strb	r2, [r3, #0]
	else
	{
		manipulatorPWMDuty = 700;
		state = true;
	}
}
 8011156:	e006      	b.n	8011166 <_ZN14mainScreenView38ManipulatorControlToggleButton_ClickedEv+0x2e>
		manipulatorPWMDuty = 700;
 8011158:	4b07      	ldr	r3, [pc, #28]	; (8011178 <_ZN14mainScreenView38ManipulatorControlToggleButton_ClickedEv+0x40>)
 801115a:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 801115e:	601a      	str	r2, [r3, #0]
		state = true;
 8011160:	4b04      	ldr	r3, [pc, #16]	; (8011174 <_ZN14mainScreenView38ManipulatorControlToggleButton_ClickedEv+0x3c>)
 8011162:	2201      	movs	r2, #1
 8011164:	701a      	strb	r2, [r3, #0]
}
 8011166:	bf00      	nop
 8011168:	370c      	adds	r7, #12
 801116a:	46bd      	mov	sp, r7
 801116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011170:	4770      	bx	lr
 8011172:	bf00      	nop
 8011174:	20001ad0 	.word	0x20001ad0
 8011178:	20000018 	.word	0x20000018

0801117c <_ZN17positionContainerD1Ev>:

class positionContainer : public positionContainerBase
{
public:
    positionContainer();
    virtual ~positionContainer() {}
 801117c:	b580      	push	{r7, lr}
 801117e:	b082      	sub	sp, #8
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
 8011184:	4a05      	ldr	r2, [pc, #20]	; (801119c <_ZN17positionContainerD1Ev+0x20>)
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	601a      	str	r2, [r3, #0]
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	4618      	mov	r0, r3
 801118e:	f7fe ffad 	bl	80100ec <_ZN21positionContainerBaseD1Ev>
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	4618      	mov	r0, r3
 8011196:	3708      	adds	r7, #8
 8011198:	46bd      	mov	sp, r7
 801119a:	bd80      	pop	{r7, pc}
 801119c:	08031c00 	.word	0x08031c00

080111a0 <_ZN17positionContainerD0Ev>:
 80111a0:	b580      	push	{r7, lr}
 80111a2:	b082      	sub	sp, #8
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	6078      	str	r0, [r7, #4]
 80111a8:	6878      	ldr	r0, [r7, #4]
 80111aa:	f7ff ffe7 	bl	801117c <_ZN17positionContainerD1Ev>
 80111ae:	2190      	movs	r1, #144	; 0x90
 80111b0:	6878      	ldr	r0, [r7, #4]
 80111b2:	f01b ff8b 	bl	802d0cc <_ZdlPvj>
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	4618      	mov	r0, r3
 80111ba:	3708      	adds	r7, #8
 80111bc:	46bd      	mov	sp, r7
 80111be:	bd80      	pop	{r7, pc}

080111c0 <_ZN17positionContainerC1Ev>:
#include <gui/containers/positionContainer.hpp>

positionContainer::positionContainer()
 80111c0:	b580      	push	{r7, lr}
 80111c2:	b082      	sub	sp, #8
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	6078      	str	r0, [r7, #4]
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	4618      	mov	r0, r3
 80111cc:	f7fe ffb6 	bl	801013c <_ZN21positionContainerBaseC1Ev>
 80111d0:	4a03      	ldr	r2, [pc, #12]	; (80111e0 <_ZN17positionContainerC1Ev+0x20>)
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	601a      	str	r2, [r3, #0]
{

}
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	4618      	mov	r0, r3
 80111da:	3708      	adds	r7, #8
 80111dc:	46bd      	mov	sp, r7
 80111de:	bd80      	pop	{r7, pc}
 80111e0:	08031c00 	.word	0x08031c00

080111e4 <_ZN17positionContainer10initializeEv>:

void positionContainer::initialize()
{
 80111e4:	b580      	push	{r7, lr}
 80111e6:	b082      	sub	sp, #8
 80111e8:	af00      	add	r7, sp, #0
 80111ea:	6078      	str	r0, [r7, #4]
    positionContainerBase::initialize();
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	4618      	mov	r0, r3
 80111f0:	f7ff f84e 	bl	8010290 <_ZN21positionContainerBase10initializeEv>
}
 80111f4:	bf00      	nop
 80111f6:	3708      	adds	r7, #8
 80111f8:	46bd      	mov	sp, r7
 80111fa:	bd80      	pop	{r7, pc}

080111fc <_ZN17positionContainer7SetTextEPc>:

void positionContainer::SetText(char* t)
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b082      	sub	sp, #8
 8011200:	af00      	add	r7, sp, #0
 8011202:	6078      	str	r0, [r7, #4]
 8011204:	6039      	str	r1, [r7, #0]
		Unicode::snprintf(positionTextBuffer, POSITIONTEXT_SIZE, t);
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	336c      	adds	r3, #108	; 0x6c
 801120a:	683a      	ldr	r2, [r7, #0]
 801120c:	2111      	movs	r1, #17
 801120e:	4618      	mov	r0, r3
 8011210:	f010 fa0a 	bl	8021628 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
}
 8011214:	bf00      	nop
 8011216:	3708      	adds	r7, #8
 8011218:	46bd      	mov	sp, r7
 801121a:	bd80      	pop	{r7, pc}

0801121c <_ZN23sequenceScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~sequenceScreenPresenter() {};
 801121c:	b580      	push	{r7, lr}
 801121e:	b082      	sub	sp, #8
 8011220:	af00      	add	r7, sp, #0
 8011222:	6078      	str	r0, [r7, #4]
 8011224:	4a09      	ldr	r2, [pc, #36]	; (801124c <_ZN23sequenceScreenPresenterD1Ev+0x30>)
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	601a      	str	r2, [r3, #0]
 801122a:	4a09      	ldr	r2, [pc, #36]	; (8011250 <_ZN23sequenceScreenPresenterD1Ev+0x34>)
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	605a      	str	r2, [r3, #4]
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	3304      	adds	r3, #4
 8011234:	4618      	mov	r0, r3
 8011236:	f7ff fe03 	bl	8010e40 <_ZN13ModelListenerD1Ev>
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	4618      	mov	r0, r3
 801123e:	f7ff fdbb 	bl	8010db8 <_ZN8touchgfx9PresenterD1Ev>
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	4618      	mov	r0, r3
 8011246:	3708      	adds	r7, #8
 8011248:	46bd      	mov	sp, r7
 801124a:	bd80      	pop	{r7, pc}
 801124c:	08031c90 	.word	0x08031c90
 8011250:	08031ca8 	.word	0x08031ca8

08011254 <_ZThn4_N23sequenceScreenPresenterD1Ev>:
 8011254:	f1a0 0004 	sub.w	r0, r0, #4
 8011258:	e7e0      	b.n	801121c <_ZN23sequenceScreenPresenterD1Ev>
 801125a:	bf00      	nop

0801125c <_ZN23sequenceScreenPresenterD0Ev>:
 801125c:	b580      	push	{r7, lr}
 801125e:	b082      	sub	sp, #8
 8011260:	af00      	add	r7, sp, #0
 8011262:	6078      	str	r0, [r7, #4]
 8011264:	6878      	ldr	r0, [r7, #4]
 8011266:	f7ff ffd9 	bl	801121c <_ZN23sequenceScreenPresenterD1Ev>
 801126a:	2110      	movs	r1, #16
 801126c:	6878      	ldr	r0, [r7, #4]
 801126e:	f01b ff2d 	bl	802d0cc <_ZdlPvj>
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	4618      	mov	r0, r3
 8011276:	3708      	adds	r7, #8
 8011278:	46bd      	mov	sp, r7
 801127a:	bd80      	pop	{r7, pc}

0801127c <_ZThn4_N23sequenceScreenPresenterD0Ev>:
 801127c:	f1a0 0004 	sub.w	r0, r0, #4
 8011280:	e7ec      	b.n	801125c <_ZN23sequenceScreenPresenterD0Ev>
	...

08011284 <_ZN23sequenceScreenPresenterC1ER18sequenceScreenView>:
#include <gui/sequencescreen_screen/sequenceScreenView.hpp>
#include <gui/sequencescreen_screen/sequenceScreenPresenter.hpp>

sequenceScreenPresenter::sequenceScreenPresenter(sequenceScreenView& v)
 8011284:	b580      	push	{r7, lr}
 8011286:	b082      	sub	sp, #8
 8011288:	af00      	add	r7, sp, #0
 801128a:	6078      	str	r0, [r7, #4]
 801128c:	6039      	str	r1, [r7, #0]
    : view(v)
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	4618      	mov	r0, r3
 8011292:	f7ff fdb1 	bl	8010df8 <_ZN8touchgfx9PresenterC1Ev>
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	3304      	adds	r3, #4
 801129a:	4618      	mov	r0, r3
 801129c:	f7ff fdbc 	bl	8010e18 <_ZN13ModelListenerC1Ev>
 80112a0:	4a06      	ldr	r2, [pc, #24]	; (80112bc <_ZN23sequenceScreenPresenterC1ER18sequenceScreenView+0x38>)
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	601a      	str	r2, [r3, #0]
 80112a6:	4a06      	ldr	r2, [pc, #24]	; (80112c0 <_ZN23sequenceScreenPresenterC1ER18sequenceScreenView+0x3c>)
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	605a      	str	r2, [r3, #4]
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	683a      	ldr	r2, [r7, #0]
 80112b0:	60da      	str	r2, [r3, #12]
{

}
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	4618      	mov	r0, r3
 80112b6:	3708      	adds	r7, #8
 80112b8:	46bd      	mov	sp, r7
 80112ba:	bd80      	pop	{r7, pc}
 80112bc:	08031c90 	.word	0x08031c90
 80112c0:	08031ca8 	.word	0x08031ca8

080112c4 <_ZN23sequenceScreenPresenter8activateEv>:

void sequenceScreenPresenter::activate()
{
 80112c4:	b480      	push	{r7}
 80112c6:	b083      	sub	sp, #12
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	6078      	str	r0, [r7, #4]

}
 80112cc:	bf00      	nop
 80112ce:	370c      	adds	r7, #12
 80112d0:	46bd      	mov	sp, r7
 80112d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d6:	4770      	bx	lr

080112d8 <_ZN23sequenceScreenPresenter10deactivateEv>:

void sequenceScreenPresenter::deactivate()
{
 80112d8:	b480      	push	{r7}
 80112da:	b083      	sub	sp, #12
 80112dc:	af00      	add	r7, sp, #0
 80112de:	6078      	str	r0, [r7, #4]

}
 80112e0:	bf00      	nop
 80112e2:	370c      	adds	r7, #12
 80112e4:	46bd      	mov	sp, r7
 80112e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ea:	4770      	bx	lr

080112ec <_ZN8touchgfx8TextArea17setWideTextActionENS_14WideTextActionE>:
     *
     * @param  action The action to perform for wide lines of text.
     *
     * @see WideTextAction, getWideTextAction, resizeHeightToCurrentText
     */
    void setWideTextAction(WideTextAction action)
 80112ec:	b480      	push	{r7}
 80112ee:	b083      	sub	sp, #12
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
 80112f4:	460b      	mov	r3, r1
 80112f6:	70fb      	strb	r3, [r7, #3]
    {
        wideTextAction = action;
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	78fa      	ldrb	r2, [r7, #3]
 80112fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
 8011300:	bf00      	nop
 8011302:	370c      	adds	r7, #12
 8011304:	46bd      	mov	sp, r7
 8011306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801130a:	4770      	bx	lr

0801130c <_ZN18sequenceScreenViewD1Ev>:

class sequenceScreenView : public sequenceScreenViewBase
{
public:
    sequenceScreenView();
    virtual ~sequenceScreenView() {}
 801130c:	b590      	push	{r4, r7, lr}
 801130e:	b083      	sub	sp, #12
 8011310:	af00      	add	r7, sp, #0
 8011312:	6078      	str	r0, [r7, #4]
 8011314:	4a10      	ldr	r2, [pc, #64]	; (8011358 <_ZN18sequenceScreenViewD1Ev+0x4c>)
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	601a      	str	r2, [r3, #0]
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	f503 7375 	add.w	r3, r3, #980	; 0x3d4
 8011320:	2b00      	cmp	r3, #0
 8011322:	d00f      	beq.n	8011344 <_ZN18sequenceScreenViewD1Ev+0x38>
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	f503 7375 	add.w	r3, r3, #980	; 0x3d4
 801132a:	f503 64b4 	add.w	r4, r3, #1440	; 0x5a0
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	f503 7375 	add.w	r3, r3, #980	; 0x3d4
 8011334:	429c      	cmp	r4, r3
 8011336:	d005      	beq.n	8011344 <_ZN18sequenceScreenViewD1Ev+0x38>
 8011338:	3c90      	subs	r4, #144	; 0x90
 801133a:	6823      	ldr	r3, [r4, #0]
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	4620      	mov	r0, r4
 8011340:	4798      	blx	r3
 8011342:	e7f4      	b.n	801132e <_ZN18sequenceScreenViewD1Ev+0x22>
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	4618      	mov	r0, r3
 8011348:	f7ff f82e 	bl	80103a8 <_ZN22sequenceScreenViewBaseD1Ev>
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	4618      	mov	r0, r3
 8011350:	370c      	adds	r7, #12
 8011352:	46bd      	mov	sp, r7
 8011354:	bd90      	pop	{r4, r7, pc}
 8011356:	bf00      	nop
 8011358:	08031cb8 	.word	0x08031cb8

0801135c <_ZN18sequenceScreenViewD0Ev>:
 801135c:	b580      	push	{r7, lr}
 801135e:	b082      	sub	sp, #8
 8011360:	af00      	add	r7, sp, #0
 8011362:	6078      	str	r0, [r7, #4]
 8011364:	6878      	ldr	r0, [r7, #4]
 8011366:	f7ff ffd1 	bl	801130c <_ZN18sequenceScreenViewD1Ev>
 801136a:	f640 1174 	movw	r1, #2420	; 0x974
 801136e:	6878      	ldr	r0, [r7, #4]
 8011370:	f01b feac 	bl	802d0cc <_ZdlPvj>
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	4618      	mov	r0, r3
 8011378:	3708      	adds	r7, #8
 801137a:	46bd      	mov	sp, r7
 801137c:	bd80      	pop	{r7, pc}
	...

08011380 <_ZN18sequenceScreenViewC1Ev>:
extern uint32_t xAxisPWMDuty;
extern uint32_t yAxisPWMDuty_L;
extern uint32_t yAxisPWMDuty_R;
extern uint32_t manipulatorPWMDuty;

sequenceScreenView::sequenceScreenView() {
 8011380:	b5b0      	push	{r4, r5, r7, lr}
 8011382:	b082      	sub	sp, #8
 8011384:	af00      	add	r7, sp, #0
 8011386:	6078      	str	r0, [r7, #4]
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	4618      	mov	r0, r3
 801138c:	f7ff f8a0 	bl	80104d0 <_ZN22sequenceScreenViewBaseC1Ev>
 8011390:	4a0a      	ldr	r2, [pc, #40]	; (80113bc <_ZN18sequenceScreenViewC1Ev+0x3c>)
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	601a      	str	r2, [r3, #0]
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	f503 7375 	add.w	r3, r3, #980	; 0x3d4
 801139c:	2409      	movs	r4, #9
 801139e:	461d      	mov	r5, r3
 80113a0:	2c00      	cmp	r4, #0
 80113a2:	db05      	blt.n	80113b0 <_ZN18sequenceScreenViewC1Ev+0x30>
 80113a4:	4628      	mov	r0, r5
 80113a6:	f7ff ff0b 	bl	80111c0 <_ZN17positionContainerC1Ev>
 80113aa:	3590      	adds	r5, #144	; 0x90
 80113ac:	3c01      	subs	r4, #1
 80113ae:	e7f7      	b.n	80113a0 <_ZN18sequenceScreenViewC1Ev+0x20>

}
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	4618      	mov	r0, r3
 80113b4:	3708      	adds	r7, #8
 80113b6:	46bd      	mov	sp, r7
 80113b8:	bdb0      	pop	{r4, r5, r7, pc}
 80113ba:	bf00      	nop
 80113bc:	08031cb8 	.word	0x08031cb8

080113c0 <_ZN18sequenceScreenView11setupScreenEv>:

void sequenceScreenView::setupScreen() {
 80113c0:	b580      	push	{r7, lr}
 80113c2:	b084      	sub	sp, #16
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	6078      	str	r0, [r7, #4]
	sequenceScreenViewBase::setupScreen();
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	4618      	mov	r0, r3
 80113cc:	f7ff fb74 	bl	8010ab8 <_ZN22sequenceScreenViewBase11setupScreenEv>

	positionsList.removeAll();
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80113d6:	4618      	mov	r0, r3
 80113d8:	f00a f99a 	bl	801b710 <_ZN8touchgfx10ListLayout9removeAllEv>
	scrollableContainer.invalidate();
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80113e2:	4618      	mov	r0, r3
 80113e4:	f00e fb4f 	bl	801fa86 <_ZNK8touchgfx8Drawable10invalidateEv>

	if (!DataStorageModel::screenViewFirstOpen) {
 80113e8:	4b20      	ldr	r3, [pc, #128]	; (801146c <_ZN18sequenceScreenView11setupScreenEv+0xac>)
 80113ea:	781b      	ldrb	r3, [r3, #0]
 80113ec:	f083 0301 	eor.w	r3, r3, #1
 80113f0:	b2db      	uxtb	r3, r3
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d033      	beq.n	801145e <_ZN18sequenceScreenView11setupScreenEv+0x9e>
		for (size_t i = 0; i < DataStorageModel::numOfListItems; ++i) {
 80113f6:	2300      	movs	r3, #0
 80113f8:	60fb      	str	r3, [r7, #12]
 80113fa:	4b1d      	ldr	r3, [pc, #116]	; (8011470 <_ZN18sequenceScreenView11setupScreenEv+0xb0>)
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	68fa      	ldr	r2, [r7, #12]
 8011400:	429a      	cmp	r2, r3
 8011402:	d22f      	bcs.n	8011464 <_ZN18sequenceScreenView11setupScreenEv+0xa4>
			positionContainersList[i].SetText(DataStorageModel::positionsList[i]);
 8011404:	68fa      	ldr	r2, [r7, #12]
 8011406:	4613      	mov	r3, r2
 8011408:	00db      	lsls	r3, r3, #3
 801140a:	4413      	add	r3, r2
 801140c:	011b      	lsls	r3, r3, #4
 801140e:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8011412:	687a      	ldr	r2, [r7, #4]
 8011414:	4413      	add	r3, r2
 8011416:	1d18      	adds	r0, r3, #4
 8011418:	68fa      	ldr	r2, [r7, #12]
 801141a:	4613      	mov	r3, r2
 801141c:	011b      	lsls	r3, r3, #4
 801141e:	4413      	add	r3, r2
 8011420:	4a14      	ldr	r2, [pc, #80]	; (8011474 <_ZN18sequenceScreenView11setupScreenEv+0xb4>)
 8011422:	4413      	add	r3, r2
 8011424:	4619      	mov	r1, r3
 8011426:	f7ff fee9 	bl	80111fc <_ZN17positionContainer7SetTextEPc>
			positionsList.add(positionContainersList[i]);
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	f503 7023 	add.w	r0, r3, #652	; 0x28c
 8011430:	68fa      	ldr	r2, [r7, #12]
 8011432:	4613      	mov	r3, r2
 8011434:	00db      	lsls	r3, r3, #3
 8011436:	4413      	add	r3, r2
 8011438:	011b      	lsls	r3, r3, #4
 801143a:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 801143e:	687a      	ldr	r2, [r7, #4]
 8011440:	4413      	add	r3, r2
 8011442:	3304      	adds	r3, #4
 8011444:	4619      	mov	r1, r3
 8011446:	f00a fa19 	bl	801b87c <_ZN8touchgfx10ListLayout3addERNS_8DrawableE>
			scrollableContainer.invalidate();
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8011450:	4618      	mov	r0, r3
 8011452:	f00e fb18 	bl	801fa86 <_ZNK8touchgfx8Drawable10invalidateEv>
		for (size_t i = 0; i < DataStorageModel::numOfListItems; ++i) {
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	3301      	adds	r3, #1
 801145a:	60fb      	str	r3, [r7, #12]
 801145c:	e7cd      	b.n	80113fa <_ZN18sequenceScreenView11setupScreenEv+0x3a>
		}
	} else {
		DataStorageModel::screenViewFirstOpen = false;
 801145e:	4b03      	ldr	r3, [pc, #12]	; (801146c <_ZN18sequenceScreenView11setupScreenEv+0xac>)
 8011460:	2200      	movs	r2, #0
 8011462:	701a      	strb	r2, [r3, #0]
	}
}
 8011464:	bf00      	nop
 8011466:	3710      	adds	r7, #16
 8011468:	46bd      	mov	sp, r7
 801146a:	bd80      	pop	{r7, pc}
 801146c:	20000028 	.word	0x20000028
 8011470:	20001ad4 	.word	0x20001ad4
 8011474:	20001ad8 	.word	0x20001ad8

08011478 <_ZN18sequenceScreenView14tearDownScreenEv>:

void sequenceScreenView::tearDownScreen() {
 8011478:	b580      	push	{r7, lr}
 801147a:	b082      	sub	sp, #8
 801147c:	af00      	add	r7, sp, #0
 801147e:	6078      	str	r0, [r7, #4]
	sequenceScreenViewBase::tearDownScreen();
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	4618      	mov	r0, r3
 8011484:	f7fd fc9e 	bl	800edc4 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8011488:	bf00      	nop
 801148a:	3708      	adds	r7, #8
 801148c:	46bd      	mov	sp, r7
 801148e:	bd80      	pop	{r7, pc}

08011490 <_ZN18sequenceScreenView26SaveSequenceButton_ClickedEv>:

void sequenceScreenView::SaveSequenceButton_Clicked() {
 8011490:	b480      	push	{r7}
 8011492:	b083      	sub	sp, #12
 8011494:	af00      	add	r7, sp, #0
 8011496:	6078      	str	r0, [r7, #4]

}
 8011498:	bf00      	nop
 801149a:	370c      	adds	r7, #12
 801149c:	46bd      	mov	sp, r7
 801149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a2:	4770      	bx	lr

080114a4 <_ZN18sequenceScreenView26PlaySequenceButton_ClickedEv>:

void sequenceScreenView::PlaySequenceButton_Clicked() {
 80114a4:	b480      	push	{r7}
 80114a6:	b083      	sub	sp, #12
 80114a8:	af00      	add	r7, sp, #0
 80114aa:	6078      	str	r0, [r7, #4]

}
 80114ac:	bf00      	nop
 80114ae:	370c      	adds	r7, #12
 80114b0:	46bd      	mov	sp, r7
 80114b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b6:	4770      	bx	lr

080114b8 <_ZN18sequenceScreenView28AddNewPositionButton_ClickedEv>:

void sequenceScreenView::AddNewPositionButton_Clicked() {
 80114b8:	b5b0      	push	{r4, r5, r7, lr}
 80114ba:	b08c      	sub	sp, #48	; 0x30
 80114bc:	af04      	add	r7, sp, #16
 80114be:	6078      	str	r0, [r7, #4]
	if (DataStorageModel::numOfListItems < DataStorageModel::maxNumOfPositions) {
 80114c0:	4b42      	ldr	r3, [pc, #264]	; (80115cc <_ZN18sequenceScreenView28AddNewPositionButton_ClickedEv+0x114>)
 80114c2:	681a      	ldr	r2, [r3, #0]
 80114c4:	4b42      	ldr	r3, [pc, #264]	; (80115d0 <_ZN18sequenceScreenView28AddNewPositionButton_ClickedEv+0x118>)
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	429a      	cmp	r2, r3
 80114ca:	d265      	bcs.n	8011598 <_ZN18sequenceScreenView28AddNewPositionButton_ClickedEv+0xe0>
		static unsigned int temp = 3;

		char positionChar[17];
		memset(positionChar, '\0', 17);
 80114cc:	f107 030c 	add.w	r3, r7, #12
 80114d0:	2211      	movs	r2, #17
 80114d2:	2100      	movs	r1, #0
 80114d4:	4618      	mov	r0, r3
 80114d6:	f01d f837 	bl	802e548 <memset>
		snprintf(positionChar, 17, "%d,%d,%d,%d", 100 * temp, 100 * temp,
 80114da:	4b3e      	ldr	r3, [pc, #248]	; (80115d4 <_ZN18sequenceScreenView28AddNewPositionButton_ClickedEv+0x11c>)
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	2264      	movs	r2, #100	; 0x64
 80114e0:	fb02 f403 	mul.w	r4, r2, r3
 80114e4:	4b3b      	ldr	r3, [pc, #236]	; (80115d4 <_ZN18sequenceScreenView28AddNewPositionButton_ClickedEv+0x11c>)
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	2264      	movs	r2, #100	; 0x64
 80114ea:	fb02 f303 	mul.w	r3, r2, r3
 80114ee:	4a39      	ldr	r2, [pc, #228]	; (80115d4 <_ZN18sequenceScreenView28AddNewPositionButton_ClickedEv+0x11c>)
 80114f0:	6812      	ldr	r2, [r2, #0]
 80114f2:	2164      	movs	r1, #100	; 0x64
 80114f4:	fb01 f202 	mul.w	r2, r1, r2
 80114f8:	4936      	ldr	r1, [pc, #216]	; (80115d4 <_ZN18sequenceScreenView28AddNewPositionButton_ClickedEv+0x11c>)
 80114fa:	6809      	ldr	r1, [r1, #0]
 80114fc:	f107 000c 	add.w	r0, r7, #12
 8011500:	9102      	str	r1, [sp, #8]
 8011502:	9201      	str	r2, [sp, #4]
 8011504:	9300      	str	r3, [sp, #0]
 8011506:	4623      	mov	r3, r4
 8011508:	4a33      	ldr	r2, [pc, #204]	; (80115d8 <_ZN18sequenceScreenView28AddNewPositionButton_ClickedEv+0x120>)
 801150a:	2111      	movs	r1, #17
 801150c:	f01d fc26 	bl	802ed5c <sniprintf>
				100 * temp, 1 * temp);
		memcpy(DataStorageModel::positionsList[DataStorageModel::numOfListItems], positionChar, 17);
 8011510:	4b2e      	ldr	r3, [pc, #184]	; (80115cc <_ZN18sequenceScreenView28AddNewPositionButton_ClickedEv+0x114>)
 8011512:	681a      	ldr	r2, [r3, #0]
 8011514:	4613      	mov	r3, r2
 8011516:	011b      	lsls	r3, r3, #4
 8011518:	4413      	add	r3, r2
 801151a:	4a30      	ldr	r2, [pc, #192]	; (80115dc <_ZN18sequenceScreenView28AddNewPositionButton_ClickedEv+0x124>)
 801151c:	4413      	add	r3, r2
 801151e:	461d      	mov	r5, r3
 8011520:	f107 040c 	add.w	r4, r7, #12
 8011524:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011526:	6028      	str	r0, [r5, #0]
 8011528:	6069      	str	r1, [r5, #4]
 801152a:	60aa      	str	r2, [r5, #8]
 801152c:	60eb      	str	r3, [r5, #12]
 801152e:	7823      	ldrb	r3, [r4, #0]
 8011530:	742b      	strb	r3, [r5, #16]
		positionContainersList[DataStorageModel::numOfListItems].SetText(positionChar);
 8011532:	4b26      	ldr	r3, [pc, #152]	; (80115cc <_ZN18sequenceScreenView28AddNewPositionButton_ClickedEv+0x114>)
 8011534:	681a      	ldr	r2, [r3, #0]
 8011536:	4613      	mov	r3, r2
 8011538:	00db      	lsls	r3, r3, #3
 801153a:	4413      	add	r3, r2
 801153c:	011b      	lsls	r3, r3, #4
 801153e:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8011542:	687a      	ldr	r2, [r7, #4]
 8011544:	4413      	add	r3, r2
 8011546:	3304      	adds	r3, #4
 8011548:	f107 020c 	add.w	r2, r7, #12
 801154c:	4611      	mov	r1, r2
 801154e:	4618      	mov	r0, r3
 8011550:	f7ff fe54 	bl	80111fc <_ZN17positionContainer7SetTextEPc>
		positionsList.add(positionContainersList[DataStorageModel::numOfListItems]);
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	f503 7023 	add.w	r0, r3, #652	; 0x28c
 801155a:	4b1c      	ldr	r3, [pc, #112]	; (80115cc <_ZN18sequenceScreenView28AddNewPositionButton_ClickedEv+0x114>)
 801155c:	681a      	ldr	r2, [r3, #0]
 801155e:	4613      	mov	r3, r2
 8011560:	00db      	lsls	r3, r3, #3
 8011562:	4413      	add	r3, r2
 8011564:	011b      	lsls	r3, r3, #4
 8011566:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 801156a:	687a      	ldr	r2, [r7, #4]
 801156c:	4413      	add	r3, r2
 801156e:	3304      	adds	r3, #4
 8011570:	4619      	mov	r1, r3
 8011572:	f00a f983 	bl	801b87c <_ZN8touchgfx10ListLayout3addERNS_8DrawableE>
		scrollableContainer.invalidate();
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801157c:	4618      	mov	r0, r3
 801157e:	f00e fa82 	bl	801fa86 <_ZNK8touchgfx8Drawable10invalidateEv>
		++DataStorageModel::numOfListItems;
 8011582:	4b12      	ldr	r3, [pc, #72]	; (80115cc <_ZN18sequenceScreenView28AddNewPositionButton_ClickedEv+0x114>)
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	3301      	adds	r3, #1
 8011588:	4a10      	ldr	r2, [pc, #64]	; (80115cc <_ZN18sequenceScreenView28AddNewPositionButton_ClickedEv+0x114>)
 801158a:	6013      	str	r3, [r2, #0]

		++temp;
 801158c:	4b11      	ldr	r3, [pc, #68]	; (80115d4 <_ZN18sequenceScreenView28AddNewPositionButton_ClickedEv+0x11c>)
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	3301      	adds	r3, #1
 8011592:	4a10      	ldr	r2, [pc, #64]	; (80115d4 <_ZN18sequenceScreenView28AddNewPositionButton_ClickedEv+0x11c>)
 8011594:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(infoTextAreaBuffer, INFOTEXTAREA_SIZE,
				"ERROR:\nMaximum number of positions!");
		infoTextArea.setWideTextAction(WIDE_TEXT_WORDWRAP);
		infoTextArea.invalidate();
	}
}
 8011596:	e014      	b.n	80115c2 <_ZN18sequenceScreenView28AddNewPositionButton_ClickedEv+0x10a>
		Unicode::snprintf(infoTextAreaBuffer, INFOTEXTAREA_SIZE,
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 801159e:	4a10      	ldr	r2, [pc, #64]	; (80115e0 <_ZN18sequenceScreenView28AddNewPositionButton_ClickedEv+0x128>)
 80115a0:	2164      	movs	r1, #100	; 0x64
 80115a2:	4618      	mov	r0, r3
 80115a4:	f010 f840 	bl	8021628 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		infoTextArea.setWideTextAction(WIDE_TEXT_WORDWRAP);
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80115ae:	2101      	movs	r1, #1
 80115b0:	4618      	mov	r0, r3
 80115b2:	f7ff fe9b 	bl	80112ec <_ZN8touchgfx8TextArea17setWideTextActionENS_14WideTextActionE>
		infoTextArea.invalidate();
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80115bc:	4618      	mov	r0, r3
 80115be:	f00e fa62 	bl	801fa86 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 80115c2:	bf00      	nop
 80115c4:	3720      	adds	r7, #32
 80115c6:	46bd      	mov	sp, r7
 80115c8:	bdb0      	pop	{r4, r5, r7, pc}
 80115ca:	bf00      	nop
 80115cc:	20001ad4 	.word	0x20001ad4
 80115d0:	08031cf4 	.word	0x08031cf4
 80115d4:	20000024 	.word	0x20000024
 80115d8:	080300f0 	.word	0x080300f0
 80115dc:	20001ad8 	.word	0x20001ad8
 80115e0:	080300fc 	.word	0x080300fc

080115e4 <_ZN18sequenceScreenView28DeletePositionButton_ClickedEv>:

void sequenceScreenView::DeletePositionButton_Clicked() {
 80115e4:	b580      	push	{r7, lr}
 80115e6:	b082      	sub	sp, #8
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	6078      	str	r0, [r7, #4]
	positionsList.removeAll();
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80115f2:	4618      	mov	r0, r3
 80115f4:	f00a f88c 	bl	801b710 <_ZN8touchgfx10ListLayout9removeAllEv>
	scrollableContainer.invalidate();
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80115fe:	4618      	mov	r0, r3
 8011600:	f00e fa41 	bl	801fa86 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(infoTextAreaBuffer, INFOTEXTAREA_SIZE, "INFO:");
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 801160a:	4a0c      	ldr	r2, [pc, #48]	; (801163c <_ZN18sequenceScreenView28DeletePositionButton_ClickedEv+0x58>)
 801160c:	2164      	movs	r1, #100	; 0x64
 801160e:	4618      	mov	r0, r3
 8011610:	f010 f80a 	bl	8021628 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	infoTextArea.setWideTextAction(WIDE_TEXT_WORDWRAP);
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 801161a:	2101      	movs	r1, #1
 801161c:	4618      	mov	r0, r3
 801161e:	f7ff fe65 	bl	80112ec <_ZN8touchgfx8TextArea17setWideTextActionENS_14WideTextActionE>
	infoTextArea.invalidate();
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8011628:	4618      	mov	r0, r3
 801162a:	f00e fa2c 	bl	801fa86 <_ZNK8touchgfx8Drawable10invalidateEv>

	DataStorageModel::numOfListItems = 0;
 801162e:	4b04      	ldr	r3, [pc, #16]	; (8011640 <_ZN18sequenceScreenView28DeletePositionButton_ClickedEv+0x5c>)
 8011630:	2200      	movs	r2, #0
 8011632:	601a      	str	r2, [r3, #0]
}
 8011634:	bf00      	nop
 8011636:	3708      	adds	r7, #8
 8011638:	46bd      	mov	sp, r7
 801163a:	bd80      	pop	{r7, pc}
 801163c:	08030120 	.word	0x08030120
 8011640:	20001ad4 	.word	0x20001ad4

08011644 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8011644:	b580      	push	{r7, lr}
 8011646:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8011648:	f7f9 ff32 	bl	800b4b0 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 801164c:	20ca      	movs	r0, #202	; 0xca
 801164e:	f000 f95d 	bl	801190c <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8011652:	20c3      	movs	r0, #195	; 0xc3
 8011654:	f000 f967 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8011658:	2008      	movs	r0, #8
 801165a:	f000 f964 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 801165e:	2050      	movs	r0, #80	; 0x50
 8011660:	f000 f961 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8011664:	20cf      	movs	r0, #207	; 0xcf
 8011666:	f000 f951 	bl	801190c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 801166a:	2000      	movs	r0, #0
 801166c:	f000 f95b 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8011670:	20c1      	movs	r0, #193	; 0xc1
 8011672:	f000 f958 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8011676:	2030      	movs	r0, #48	; 0x30
 8011678:	f000 f955 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 801167c:	20ed      	movs	r0, #237	; 0xed
 801167e:	f000 f945 	bl	801190c <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8011682:	2064      	movs	r0, #100	; 0x64
 8011684:	f000 f94f 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8011688:	2003      	movs	r0, #3
 801168a:	f000 f94c 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 801168e:	2012      	movs	r0, #18
 8011690:	f000 f949 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8011694:	2081      	movs	r0, #129	; 0x81
 8011696:	f000 f946 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 801169a:	20e8      	movs	r0, #232	; 0xe8
 801169c:	f000 f936 	bl	801190c <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80116a0:	2085      	movs	r0, #133	; 0x85
 80116a2:	f000 f940 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80116a6:	2000      	movs	r0, #0
 80116a8:	f000 f93d 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80116ac:	2078      	movs	r0, #120	; 0x78
 80116ae:	f000 f93a 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80116b2:	20cb      	movs	r0, #203	; 0xcb
 80116b4:	f000 f92a 	bl	801190c <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80116b8:	2039      	movs	r0, #57	; 0x39
 80116ba:	f000 f934 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80116be:	202c      	movs	r0, #44	; 0x2c
 80116c0:	f000 f931 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80116c4:	2000      	movs	r0, #0
 80116c6:	f000 f92e 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 80116ca:	2034      	movs	r0, #52	; 0x34
 80116cc:	f000 f92b 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 80116d0:	2002      	movs	r0, #2
 80116d2:	f000 f928 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80116d6:	20f7      	movs	r0, #247	; 0xf7
 80116d8:	f000 f918 	bl	801190c <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80116dc:	2020      	movs	r0, #32
 80116de:	f000 f922 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80116e2:	20ea      	movs	r0, #234	; 0xea
 80116e4:	f000 f912 	bl	801190c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80116e8:	2000      	movs	r0, #0
 80116ea:	f000 f91c 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80116ee:	2000      	movs	r0, #0
 80116f0:	f000 f919 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80116f4:	20b1      	movs	r0, #177	; 0xb1
 80116f6:	f000 f909 	bl	801190c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80116fa:	2000      	movs	r0, #0
 80116fc:	f000 f913 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8011700:	201b      	movs	r0, #27
 8011702:	f000 f910 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8011706:	20b6      	movs	r0, #182	; 0xb6
 8011708:	f000 f900 	bl	801190c <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 801170c:	200a      	movs	r0, #10
 801170e:	f000 f90a 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8011712:	20a2      	movs	r0, #162	; 0xa2
 8011714:	f000 f907 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8011718:	20c0      	movs	r0, #192	; 0xc0
 801171a:	f000 f8f7 	bl	801190c <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 801171e:	2010      	movs	r0, #16
 8011720:	f000 f901 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8011724:	20c1      	movs	r0, #193	; 0xc1
 8011726:	f000 f8f1 	bl	801190c <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 801172a:	2010      	movs	r0, #16
 801172c:	f000 f8fb 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8011730:	20c5      	movs	r0, #197	; 0xc5
 8011732:	f000 f8eb 	bl	801190c <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8011736:	2045      	movs	r0, #69	; 0x45
 8011738:	f000 f8f5 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 801173c:	2015      	movs	r0, #21
 801173e:	f000 f8f2 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8011742:	20c7      	movs	r0, #199	; 0xc7
 8011744:	f000 f8e2 	bl	801190c <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8011748:	2090      	movs	r0, #144	; 0x90
 801174a:	f000 f8ec 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 801174e:	2036      	movs	r0, #54	; 0x36
 8011750:	f000 f8dc 	bl	801190c <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8011754:	20c8      	movs	r0, #200	; 0xc8
 8011756:	f000 f8e6 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 801175a:	20f2      	movs	r0, #242	; 0xf2
 801175c:	f000 f8d6 	bl	801190c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8011760:	2000      	movs	r0, #0
 8011762:	f000 f8e0 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8011766:	20b0      	movs	r0, #176	; 0xb0
 8011768:	f000 f8d0 	bl	801190c <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 801176c:	20c2      	movs	r0, #194	; 0xc2
 801176e:	f000 f8da 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8011772:	20b6      	movs	r0, #182	; 0xb6
 8011774:	f000 f8ca 	bl	801190c <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8011778:	200a      	movs	r0, #10
 801177a:	f000 f8d4 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 801177e:	20a7      	movs	r0, #167	; 0xa7
 8011780:	f000 f8d1 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8011784:	2027      	movs	r0, #39	; 0x27
 8011786:	f000 f8ce 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 801178a:	2004      	movs	r0, #4
 801178c:	f000 f8cb 	bl	8011926 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8011790:	202a      	movs	r0, #42	; 0x2a
 8011792:	f000 f8bb 	bl	801190c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8011796:	2000      	movs	r0, #0
 8011798:	f000 f8c5 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 801179c:	2000      	movs	r0, #0
 801179e:	f000 f8c2 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80117a2:	2000      	movs	r0, #0
 80117a4:	f000 f8bf 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80117a8:	20ef      	movs	r0, #239	; 0xef
 80117aa:	f000 f8bc 	bl	8011926 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80117ae:	202b      	movs	r0, #43	; 0x2b
 80117b0:	f000 f8ac 	bl	801190c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80117b4:	2000      	movs	r0, #0
 80117b6:	f000 f8b6 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80117ba:	2000      	movs	r0, #0
 80117bc:	f000 f8b3 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 80117c0:	2001      	movs	r0, #1
 80117c2:	f000 f8b0 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 80117c6:	203f      	movs	r0, #63	; 0x3f
 80117c8:	f000 f8ad 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 80117cc:	20f6      	movs	r0, #246	; 0xf6
 80117ce:	f000 f89d 	bl	801190c <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80117d2:	2001      	movs	r0, #1
 80117d4:	f000 f8a7 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80117d8:	2000      	movs	r0, #0
 80117da:	f000 f8a4 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80117de:	2006      	movs	r0, #6
 80117e0:	f000 f8a1 	bl	8011926 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80117e4:	202c      	movs	r0, #44	; 0x2c
 80117e6:	f000 f891 	bl	801190c <ili9341_WriteReg>
  LCD_Delay(200);
 80117ea:	20c8      	movs	r0, #200	; 0xc8
 80117ec:	f7f9 fee6 	bl	800b5bc <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80117f0:	2026      	movs	r0, #38	; 0x26
 80117f2:	f000 f88b 	bl	801190c <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80117f6:	2001      	movs	r0, #1
 80117f8:	f000 f895 	bl	8011926 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80117fc:	20e0      	movs	r0, #224	; 0xe0
 80117fe:	f000 f885 	bl	801190c <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8011802:	200f      	movs	r0, #15
 8011804:	f000 f88f 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8011808:	2029      	movs	r0, #41	; 0x29
 801180a:	f000 f88c 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 801180e:	2024      	movs	r0, #36	; 0x24
 8011810:	f000 f889 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8011814:	200c      	movs	r0, #12
 8011816:	f000 f886 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 801181a:	200e      	movs	r0, #14
 801181c:	f000 f883 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8011820:	2009      	movs	r0, #9
 8011822:	f000 f880 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8011826:	204e      	movs	r0, #78	; 0x4e
 8011828:	f000 f87d 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 801182c:	2078      	movs	r0, #120	; 0x78
 801182e:	f000 f87a 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8011832:	203c      	movs	r0, #60	; 0x3c
 8011834:	f000 f877 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8011838:	2009      	movs	r0, #9
 801183a:	f000 f874 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 801183e:	2013      	movs	r0, #19
 8011840:	f000 f871 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8011844:	2005      	movs	r0, #5
 8011846:	f000 f86e 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 801184a:	2017      	movs	r0, #23
 801184c:	f000 f86b 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8011850:	2011      	movs	r0, #17
 8011852:	f000 f868 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8011856:	2000      	movs	r0, #0
 8011858:	f000 f865 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 801185c:	20e1      	movs	r0, #225	; 0xe1
 801185e:	f000 f855 	bl	801190c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8011862:	2000      	movs	r0, #0
 8011864:	f000 f85f 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8011868:	2016      	movs	r0, #22
 801186a:	f000 f85c 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 801186e:	201b      	movs	r0, #27
 8011870:	f000 f859 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8011874:	2004      	movs	r0, #4
 8011876:	f000 f856 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 801187a:	2011      	movs	r0, #17
 801187c:	f000 f853 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8011880:	2007      	movs	r0, #7
 8011882:	f000 f850 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8011886:	2031      	movs	r0, #49	; 0x31
 8011888:	f000 f84d 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 801188c:	2033      	movs	r0, #51	; 0x33
 801188e:	f000 f84a 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8011892:	2042      	movs	r0, #66	; 0x42
 8011894:	f000 f847 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8011898:	2005      	movs	r0, #5
 801189a:	f000 f844 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 801189e:	200c      	movs	r0, #12
 80118a0:	f000 f841 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80118a4:	200a      	movs	r0, #10
 80118a6:	f000 f83e 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80118aa:	2028      	movs	r0, #40	; 0x28
 80118ac:	f000 f83b 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80118b0:	202f      	movs	r0, #47	; 0x2f
 80118b2:	f000 f838 	bl	8011926 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 80118b6:	200f      	movs	r0, #15
 80118b8:	f000 f835 	bl	8011926 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80118bc:	2011      	movs	r0, #17
 80118be:	f000 f825 	bl	801190c <ili9341_WriteReg>
  LCD_Delay(200);
 80118c2:	20c8      	movs	r0, #200	; 0xc8
 80118c4:	f7f9 fe7a 	bl	800b5bc <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80118c8:	2029      	movs	r0, #41	; 0x29
 80118ca:	f000 f81f 	bl	801190c <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 80118ce:	202c      	movs	r0, #44	; 0x2c
 80118d0:	f000 f81c 	bl	801190c <ili9341_WriteReg>
}
 80118d4:	bf00      	nop
 80118d6:	bd80      	pop	{r7, pc}

080118d8 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 80118d8:	b580      	push	{r7, lr}
 80118da:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80118dc:	f7f9 fde8 	bl	800b4b0 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 80118e0:	2103      	movs	r1, #3
 80118e2:	20d3      	movs	r0, #211	; 0xd3
 80118e4:	f000 f82c 	bl	8011940 <ili9341_ReadData>
 80118e8:	4603      	mov	r3, r0
 80118ea:	b29b      	uxth	r3, r3
}
 80118ec:	4618      	mov	r0, r3
 80118ee:	bd80      	pop	{r7, pc}

080118f0 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80118f0:	b580      	push	{r7, lr}
 80118f2:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80118f4:	2029      	movs	r0, #41	; 0x29
 80118f6:	f000 f809 	bl	801190c <ili9341_WriteReg>
}
 80118fa:	bf00      	nop
 80118fc:	bd80      	pop	{r7, pc}

080118fe <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80118fe:	b580      	push	{r7, lr}
 8011900:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8011902:	2028      	movs	r0, #40	; 0x28
 8011904:	f000 f802 	bl	801190c <ili9341_WriteReg>
}
 8011908:	bf00      	nop
 801190a:	bd80      	pop	{r7, pc}

0801190c <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 801190c:	b580      	push	{r7, lr}
 801190e:	b082      	sub	sp, #8
 8011910:	af00      	add	r7, sp, #0
 8011912:	4603      	mov	r3, r0
 8011914:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8011916:	79fb      	ldrb	r3, [r7, #7]
 8011918:	4618      	mov	r0, r3
 801191a:	f7f9 fdfb 	bl	800b514 <LCD_IO_WriteReg>
}
 801191e:	bf00      	nop
 8011920:	3708      	adds	r7, #8
 8011922:	46bd      	mov	sp, r7
 8011924:	bd80      	pop	{r7, pc}

08011926 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8011926:	b580      	push	{r7, lr}
 8011928:	b082      	sub	sp, #8
 801192a:	af00      	add	r7, sp, #0
 801192c:	4603      	mov	r3, r0
 801192e:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8011930:	88fb      	ldrh	r3, [r7, #6]
 8011932:	4618      	mov	r0, r3
 8011934:	f7f9 fdcc 	bl	800b4d0 <LCD_IO_WriteData>
}
 8011938:	bf00      	nop
 801193a:	3708      	adds	r7, #8
 801193c:	46bd      	mov	sp, r7
 801193e:	bd80      	pop	{r7, pc}

08011940 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8011940:	b580      	push	{r7, lr}
 8011942:	b082      	sub	sp, #8
 8011944:	af00      	add	r7, sp, #0
 8011946:	4603      	mov	r3, r0
 8011948:	460a      	mov	r2, r1
 801194a:	80fb      	strh	r3, [r7, #6]
 801194c:	4613      	mov	r3, r2
 801194e:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8011950:	797a      	ldrb	r2, [r7, #5]
 8011952:	88fb      	ldrh	r3, [r7, #6]
 8011954:	4611      	mov	r1, r2
 8011956:	4618      	mov	r0, r3
 8011958:	f7f9 fdfe 	bl	800b558 <LCD_IO_ReadData>
 801195c:	4603      	mov	r3, r0
}
 801195e:	4618      	mov	r0, r3
 8011960:	3708      	adds	r7, #8
 8011962:	46bd      	mov	sp, r7
 8011964:	bd80      	pop	{r7, pc}

08011966 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8011966:	b480      	push	{r7}
 8011968:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 801196a:	23f0      	movs	r3, #240	; 0xf0
}
 801196c:	4618      	mov	r0, r3
 801196e:	46bd      	mov	sp, r7
 8011970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011974:	4770      	bx	lr

08011976 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8011976:	b480      	push	{r7}
 8011978:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 801197a:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 801197e:	4618      	mov	r0, r3
 8011980:	46bd      	mov	sp, r7
 8011982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011986:	4770      	bx	lr

08011988 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8011988:	b580      	push	{r7, lr}
 801198a:	b084      	sub	sp, #16
 801198c:	af00      	add	r7, sp, #0
 801198e:	4603      	mov	r3, r0
 8011990:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8011992:	88fb      	ldrh	r3, [r7, #6]
 8011994:	4618      	mov	r0, r3
 8011996:	f000 fa59 	bl	8011e4c <stmpe811_GetInstance>
 801199a:	4603      	mov	r3, r0
 801199c:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 801199e:	7bfb      	ldrb	r3, [r7, #15]
 80119a0:	2bff      	cmp	r3, #255	; 0xff
 80119a2:	d112      	bne.n	80119ca <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 80119a4:	2000      	movs	r0, #0
 80119a6:	f000 fa51 	bl	8011e4c <stmpe811_GetInstance>
 80119aa:	4603      	mov	r3, r0
 80119ac:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 80119ae:	7bbb      	ldrb	r3, [r7, #14]
 80119b0:	2b01      	cmp	r3, #1
 80119b2:	d80a      	bhi.n	80119ca <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 80119b4:	7bbb      	ldrb	r3, [r7, #14]
 80119b6:	88fa      	ldrh	r2, [r7, #6]
 80119b8:	b2d1      	uxtb	r1, r2
 80119ba:	4a06      	ldr	r2, [pc, #24]	; (80119d4 <stmpe811_Init+0x4c>)
 80119bc:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 80119be:	f7f9 fc63 	bl	800b288 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 80119c2:	88fb      	ldrh	r3, [r7, #6]
 80119c4:	4618      	mov	r0, r3
 80119c6:	f000 f807 	bl	80119d8 <stmpe811_Reset>
    }
  }
}
 80119ca:	bf00      	nop
 80119cc:	3710      	adds	r7, #16
 80119ce:	46bd      	mov	sp, r7
 80119d0:	bd80      	pop	{r7, pc}
 80119d2:	bf00      	nop
 80119d4:	20001b84 	.word	0x20001b84

080119d8 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 80119d8:	b580      	push	{r7, lr}
 80119da:	b082      	sub	sp, #8
 80119dc:	af00      	add	r7, sp, #0
 80119de:	4603      	mov	r3, r0
 80119e0:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 80119e2:	88fb      	ldrh	r3, [r7, #6]
 80119e4:	b2db      	uxtb	r3, r3
 80119e6:	2202      	movs	r2, #2
 80119e8:	2103      	movs	r1, #3
 80119ea:	4618      	mov	r0, r3
 80119ec:	f7f9 fc5a 	bl	800b2a4 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 80119f0:	200a      	movs	r0, #10
 80119f2:	f7f9 fc94 	bl	800b31e <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 80119f6:	88fb      	ldrh	r3, [r7, #6]
 80119f8:	b2db      	uxtb	r3, r3
 80119fa:	2200      	movs	r2, #0
 80119fc:	2103      	movs	r1, #3
 80119fe:	4618      	mov	r0, r3
 8011a00:	f7f9 fc50 	bl	800b2a4 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8011a04:	2002      	movs	r0, #2
 8011a06:	f7f9 fc8a 	bl	800b31e <IOE_Delay>
}
 8011a0a:	bf00      	nop
 8011a0c:	3708      	adds	r7, #8
 8011a0e:	46bd      	mov	sp, r7
 8011a10:	bd80      	pop	{r7, pc}

08011a12 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8011a12:	b590      	push	{r4, r7, lr}
 8011a14:	b083      	sub	sp, #12
 8011a16:	af00      	add	r7, sp, #0
 8011a18:	4603      	mov	r3, r0
 8011a1a:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8011a1c:	f7f9 fc34 	bl	800b288 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8011a20:	88fb      	ldrh	r3, [r7, #6]
 8011a22:	b2db      	uxtb	r3, r3
 8011a24:	2100      	movs	r1, #0
 8011a26:	4618      	mov	r0, r3
 8011a28:	f7f9 fc4f 	bl	800b2ca <IOE_Read>
 8011a2c:	4603      	mov	r3, r0
 8011a2e:	021b      	lsls	r3, r3, #8
 8011a30:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8011a32:	88fb      	ldrh	r3, [r7, #6]
 8011a34:	b2db      	uxtb	r3, r3
 8011a36:	2101      	movs	r1, #1
 8011a38:	4618      	mov	r0, r3
 8011a3a:	f7f9 fc46 	bl	800b2ca <IOE_Read>
 8011a3e:	4603      	mov	r3, r0
 8011a40:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8011a42:	4323      	orrs	r3, r4
 8011a44:	b21b      	sxth	r3, r3
 8011a46:	b29b      	uxth	r3, r3
}
 8011a48:	4618      	mov	r0, r3
 8011a4a:	370c      	adds	r7, #12
 8011a4c:	46bd      	mov	sp, r7
 8011a4e:	bd90      	pop	{r4, r7, pc}

08011a50 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b084      	sub	sp, #16
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	4603      	mov	r3, r0
 8011a58:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8011a5a:	2300      	movs	r3, #0
 8011a5c:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8011a5e:	88fb      	ldrh	r3, [r7, #6]
 8011a60:	b2db      	uxtb	r3, r3
 8011a62:	2109      	movs	r1, #9
 8011a64:	4618      	mov	r0, r3
 8011a66:	f7f9 fc30 	bl	800b2ca <IOE_Read>
 8011a6a:	4603      	mov	r3, r0
 8011a6c:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8011a6e:	7bfb      	ldrb	r3, [r7, #15]
 8011a70:	f043 0301 	orr.w	r3, r3, #1
 8011a74:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8011a76:	88fb      	ldrh	r3, [r7, #6]
 8011a78:	b2db      	uxtb	r3, r3
 8011a7a:	7bfa      	ldrb	r2, [r7, #15]
 8011a7c:	2109      	movs	r1, #9
 8011a7e:	4618      	mov	r0, r3
 8011a80:	f7f9 fc10 	bl	800b2a4 <IOE_Write>
}
 8011a84:	bf00      	nop
 8011a86:	3710      	adds	r7, #16
 8011a88:	46bd      	mov	sp, r7
 8011a8a:	bd80      	pop	{r7, pc}

08011a8c <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	b084      	sub	sp, #16
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	4603      	mov	r3, r0
 8011a94:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8011a96:	2300      	movs	r3, #0
 8011a98:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8011a9a:	88fb      	ldrh	r3, [r7, #6]
 8011a9c:	b2db      	uxtb	r3, r3
 8011a9e:	2109      	movs	r1, #9
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	f7f9 fc12 	bl	800b2ca <IOE_Read>
 8011aa6:	4603      	mov	r3, r0
 8011aa8:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8011aaa:	7bfb      	ldrb	r3, [r7, #15]
 8011aac:	f023 0301 	bic.w	r3, r3, #1
 8011ab0:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8011ab2:	88fb      	ldrh	r3, [r7, #6]
 8011ab4:	b2db      	uxtb	r3, r3
 8011ab6:	7bfa      	ldrb	r2, [r7, #15]
 8011ab8:	2109      	movs	r1, #9
 8011aba:	4618      	mov	r0, r3
 8011abc:	f7f9 fbf2 	bl	800b2a4 <IOE_Write>
    
}
 8011ac0:	bf00      	nop
 8011ac2:	3710      	adds	r7, #16
 8011ac4:	46bd      	mov	sp, r7
 8011ac6:	bd80      	pop	{r7, pc}

08011ac8 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8011ac8:	b580      	push	{r7, lr}
 8011aca:	b084      	sub	sp, #16
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	4603      	mov	r3, r0
 8011ad0:	460a      	mov	r2, r1
 8011ad2:	80fb      	strh	r3, [r7, #6]
 8011ad4:	4613      	mov	r3, r2
 8011ad6:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8011ad8:	2300      	movs	r3, #0
 8011ada:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8011adc:	88fb      	ldrh	r3, [r7, #6]
 8011ade:	b2db      	uxtb	r3, r3
 8011ae0:	210a      	movs	r1, #10
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	f7f9 fbf1 	bl	800b2ca <IOE_Read>
 8011ae8:	4603      	mov	r3, r0
 8011aea:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8011aec:	7bfa      	ldrb	r2, [r7, #15]
 8011aee:	797b      	ldrb	r3, [r7, #5]
 8011af0:	4313      	orrs	r3, r2
 8011af2:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8011af4:	88fb      	ldrh	r3, [r7, #6]
 8011af6:	b2db      	uxtb	r3, r3
 8011af8:	7bfa      	ldrb	r2, [r7, #15]
 8011afa:	210a      	movs	r1, #10
 8011afc:	4618      	mov	r0, r3
 8011afe:	f7f9 fbd1 	bl	800b2a4 <IOE_Write>
}
 8011b02:	bf00      	nop
 8011b04:	3710      	adds	r7, #16
 8011b06:	46bd      	mov	sp, r7
 8011b08:	bd80      	pop	{r7, pc}

08011b0a <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8011b0a:	b580      	push	{r7, lr}
 8011b0c:	b084      	sub	sp, #16
 8011b0e:	af00      	add	r7, sp, #0
 8011b10:	4603      	mov	r3, r0
 8011b12:	460a      	mov	r2, r1
 8011b14:	80fb      	strh	r3, [r7, #6]
 8011b16:	4613      	mov	r3, r2
 8011b18:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8011b1e:	88fb      	ldrh	r3, [r7, #6]
 8011b20:	b2db      	uxtb	r3, r3
 8011b22:	210a      	movs	r1, #10
 8011b24:	4618      	mov	r0, r3
 8011b26:	f7f9 fbd0 	bl	800b2ca <IOE_Read>
 8011b2a:	4603      	mov	r3, r0
 8011b2c:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8011b2e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8011b32:	43db      	mvns	r3, r3
 8011b34:	b25a      	sxtb	r2, r3
 8011b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011b3a:	4013      	ands	r3, r2
 8011b3c:	b25b      	sxtb	r3, r3
 8011b3e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8011b40:	88fb      	ldrh	r3, [r7, #6]
 8011b42:	b2db      	uxtb	r3, r3
 8011b44:	7bfa      	ldrb	r2, [r7, #15]
 8011b46:	210a      	movs	r1, #10
 8011b48:	4618      	mov	r0, r3
 8011b4a:	f7f9 fbab 	bl	800b2a4 <IOE_Write>
}
 8011b4e:	bf00      	nop
 8011b50:	3710      	adds	r7, #16
 8011b52:	46bd      	mov	sp, r7
 8011b54:	bd80      	pop	{r7, pc}

08011b56 <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8011b56:	b580      	push	{r7, lr}
 8011b58:	b082      	sub	sp, #8
 8011b5a:	af00      	add	r7, sp, #0
 8011b5c:	4603      	mov	r3, r0
 8011b5e:	460a      	mov	r2, r1
 8011b60:	80fb      	strh	r3, [r7, #6]
 8011b62:	4613      	mov	r3, r2
 8011b64:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8011b66:	88fb      	ldrh	r3, [r7, #6]
 8011b68:	b2db      	uxtb	r3, r3
 8011b6a:	210b      	movs	r1, #11
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	f7f9 fbac 	bl	800b2ca <IOE_Read>
 8011b72:	4603      	mov	r3, r0
 8011b74:	461a      	mov	r2, r3
 8011b76:	797b      	ldrb	r3, [r7, #5]
 8011b78:	4013      	ands	r3, r2
 8011b7a:	b2db      	uxtb	r3, r3
}
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	3708      	adds	r7, #8
 8011b80:	46bd      	mov	sp, r7
 8011b82:	bd80      	pop	{r7, pc}

08011b84 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8011b84:	b580      	push	{r7, lr}
 8011b86:	b082      	sub	sp, #8
 8011b88:	af00      	add	r7, sp, #0
 8011b8a:	4603      	mov	r3, r0
 8011b8c:	460a      	mov	r2, r1
 8011b8e:	80fb      	strh	r3, [r7, #6]
 8011b90:	4613      	mov	r3, r2
 8011b92:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8011b94:	88fb      	ldrh	r3, [r7, #6]
 8011b96:	b2db      	uxtb	r3, r3
 8011b98:	797a      	ldrb	r2, [r7, #5]
 8011b9a:	210b      	movs	r1, #11
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	f7f9 fb81 	bl	800b2a4 <IOE_Write>
}
 8011ba2:	bf00      	nop
 8011ba4:	3708      	adds	r7, #8
 8011ba6:	46bd      	mov	sp, r7
 8011ba8:	bd80      	pop	{r7, pc}

08011baa <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8011baa:	b580      	push	{r7, lr}
 8011bac:	b084      	sub	sp, #16
 8011bae:	af00      	add	r7, sp, #0
 8011bb0:	4603      	mov	r3, r0
 8011bb2:	6039      	str	r1, [r7, #0]
 8011bb4:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8011bba:	88fb      	ldrh	r3, [r7, #6]
 8011bbc:	b2db      	uxtb	r3, r3
 8011bbe:	2117      	movs	r1, #23
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	f7f9 fb82 	bl	800b2ca <IOE_Read>
 8011bc6:	4603      	mov	r3, r0
 8011bc8:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8011bca:	683b      	ldr	r3, [r7, #0]
 8011bcc:	b25b      	sxtb	r3, r3
 8011bce:	43db      	mvns	r3, r3
 8011bd0:	b25a      	sxtb	r2, r3
 8011bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011bd6:	4013      	ands	r3, r2
 8011bd8:	b25b      	sxtb	r3, r3
 8011bda:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8011bdc:	88fb      	ldrh	r3, [r7, #6]
 8011bde:	b2db      	uxtb	r3, r3
 8011be0:	7bfa      	ldrb	r2, [r7, #15]
 8011be2:	2117      	movs	r1, #23
 8011be4:	4618      	mov	r0, r3
 8011be6:	f7f9 fb5d 	bl	800b2a4 <IOE_Write>
}
 8011bea:	bf00      	nop
 8011bec:	3710      	adds	r7, #16
 8011bee:	46bd      	mov	sp, r7
 8011bf0:	bd80      	pop	{r7, pc}

08011bf2 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8011bf2:	b580      	push	{r7, lr}
 8011bf4:	b084      	sub	sp, #16
 8011bf6:	af00      	add	r7, sp, #0
 8011bf8:	4603      	mov	r3, r0
 8011bfa:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8011bfc:	88fb      	ldrh	r3, [r7, #6]
 8011bfe:	b2db      	uxtb	r3, r3
 8011c00:	2104      	movs	r1, #4
 8011c02:	4618      	mov	r0, r3
 8011c04:	f7f9 fb61 	bl	800b2ca <IOE_Read>
 8011c08:	4603      	mov	r3, r0
 8011c0a:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8011c0c:	7bfb      	ldrb	r3, [r7, #15]
 8011c0e:	f023 0304 	bic.w	r3, r3, #4
 8011c12:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8011c14:	88fb      	ldrh	r3, [r7, #6]
 8011c16:	b2db      	uxtb	r3, r3
 8011c18:	7bfa      	ldrb	r2, [r7, #15]
 8011c1a:	2104      	movs	r1, #4
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	f7f9 fb41 	bl	800b2a4 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8011c22:	88fb      	ldrh	r3, [r7, #6]
 8011c24:	21f0      	movs	r1, #240	; 0xf0
 8011c26:	4618      	mov	r0, r3
 8011c28:	f7ff ffbf 	bl	8011baa <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8011c2c:	7bfb      	ldrb	r3, [r7, #15]
 8011c2e:	f023 0303 	bic.w	r3, r3, #3
 8011c32:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8011c34:	88fb      	ldrh	r3, [r7, #6]
 8011c36:	b2db      	uxtb	r3, r3
 8011c38:	7bfa      	ldrb	r2, [r7, #15]
 8011c3a:	2104      	movs	r1, #4
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	f7f9 fb31 	bl	800b2a4 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8011c42:	88fb      	ldrh	r3, [r7, #6]
 8011c44:	b2db      	uxtb	r3, r3
 8011c46:	2249      	movs	r2, #73	; 0x49
 8011c48:	2120      	movs	r1, #32
 8011c4a:	4618      	mov	r0, r3
 8011c4c:	f7f9 fb2a 	bl	800b2a4 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8011c50:	2002      	movs	r0, #2
 8011c52:	f7f9 fb64 	bl	800b31e <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8011c56:	88fb      	ldrh	r3, [r7, #6]
 8011c58:	b2db      	uxtb	r3, r3
 8011c5a:	2201      	movs	r2, #1
 8011c5c:	2121      	movs	r1, #33	; 0x21
 8011c5e:	4618      	mov	r0, r3
 8011c60:	f7f9 fb20 	bl	800b2a4 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8011c64:	88fb      	ldrh	r3, [r7, #6]
 8011c66:	b2db      	uxtb	r3, r3
 8011c68:	229a      	movs	r2, #154	; 0x9a
 8011c6a:	2141      	movs	r1, #65	; 0x41
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	f7f9 fb19 	bl	800b2a4 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8011c72:	88fb      	ldrh	r3, [r7, #6]
 8011c74:	b2db      	uxtb	r3, r3
 8011c76:	2201      	movs	r2, #1
 8011c78:	214a      	movs	r1, #74	; 0x4a
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	f7f9 fb12 	bl	800b2a4 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8011c80:	88fb      	ldrh	r3, [r7, #6]
 8011c82:	b2db      	uxtb	r3, r3
 8011c84:	2201      	movs	r2, #1
 8011c86:	214b      	movs	r1, #75	; 0x4b
 8011c88:	4618      	mov	r0, r3
 8011c8a:	f7f9 fb0b 	bl	800b2a4 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8011c8e:	88fb      	ldrh	r3, [r7, #6]
 8011c90:	b2db      	uxtb	r3, r3
 8011c92:	2200      	movs	r2, #0
 8011c94:	214b      	movs	r1, #75	; 0x4b
 8011c96:	4618      	mov	r0, r3
 8011c98:	f7f9 fb04 	bl	800b2a4 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8011c9c:	88fb      	ldrh	r3, [r7, #6]
 8011c9e:	b2db      	uxtb	r3, r3
 8011ca0:	2201      	movs	r2, #1
 8011ca2:	2156      	movs	r1, #86	; 0x56
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	f7f9 fafd 	bl	800b2a4 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8011caa:	88fb      	ldrh	r3, [r7, #6]
 8011cac:	b2db      	uxtb	r3, r3
 8011cae:	2201      	movs	r2, #1
 8011cb0:	2158      	movs	r1, #88	; 0x58
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	f7f9 faf6 	bl	800b2a4 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8011cb8:	88fb      	ldrh	r3, [r7, #6]
 8011cba:	b2db      	uxtb	r3, r3
 8011cbc:	2201      	movs	r2, #1
 8011cbe:	2140      	movs	r1, #64	; 0x40
 8011cc0:	4618      	mov	r0, r3
 8011cc2:	f7f9 faef 	bl	800b2a4 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8011cc6:	88fb      	ldrh	r3, [r7, #6]
 8011cc8:	b2db      	uxtb	r3, r3
 8011cca:	22ff      	movs	r2, #255	; 0xff
 8011ccc:	210b      	movs	r1, #11
 8011cce:	4618      	mov	r0, r3
 8011cd0:	f7f9 fae8 	bl	800b2a4 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8011cd4:	2002      	movs	r0, #2
 8011cd6:	f7f9 fb22 	bl	800b31e <IOE_Delay>
}
 8011cda:	bf00      	nop
 8011cdc:	3710      	adds	r7, #16
 8011cde:	46bd      	mov	sp, r7
 8011ce0:	bd80      	pop	{r7, pc}

08011ce2 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8011ce2:	b580      	push	{r7, lr}
 8011ce4:	b084      	sub	sp, #16
 8011ce6:	af00      	add	r7, sp, #0
 8011ce8:	4603      	mov	r3, r0
 8011cea:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8011cec:	2300      	movs	r3, #0
 8011cee:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8011cf0:	88fb      	ldrh	r3, [r7, #6]
 8011cf2:	b2db      	uxtb	r3, r3
 8011cf4:	2140      	movs	r1, #64	; 0x40
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	f7f9 fae7 	bl	800b2ca <IOE_Read>
 8011cfc:	4603      	mov	r3, r0
 8011cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011d02:	2b80      	cmp	r3, #128	; 0x80
 8011d04:	bf0c      	ite	eq
 8011d06:	2301      	moveq	r3, #1
 8011d08:	2300      	movne	r3, #0
 8011d0a:	b2db      	uxtb	r3, r3
 8011d0c:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8011d0e:	7bbb      	ldrb	r3, [r7, #14]
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d00b      	beq.n	8011d2c <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8011d14:	88fb      	ldrh	r3, [r7, #6]
 8011d16:	b2db      	uxtb	r3, r3
 8011d18:	214c      	movs	r1, #76	; 0x4c
 8011d1a:	4618      	mov	r0, r3
 8011d1c:	f7f9 fad5 	bl	800b2ca <IOE_Read>
 8011d20:	4603      	mov	r3, r0
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d010      	beq.n	8011d48 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8011d26:	2301      	movs	r3, #1
 8011d28:	73fb      	strb	r3, [r7, #15]
 8011d2a:	e00d      	b.n	8011d48 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8011d2c:	88fb      	ldrh	r3, [r7, #6]
 8011d2e:	b2db      	uxtb	r3, r3
 8011d30:	2201      	movs	r2, #1
 8011d32:	214b      	movs	r1, #75	; 0x4b
 8011d34:	4618      	mov	r0, r3
 8011d36:	f7f9 fab5 	bl	800b2a4 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8011d3a:	88fb      	ldrh	r3, [r7, #6]
 8011d3c:	b2db      	uxtb	r3, r3
 8011d3e:	2200      	movs	r2, #0
 8011d40:	214b      	movs	r1, #75	; 0x4b
 8011d42:	4618      	mov	r0, r3
 8011d44:	f7f9 faae 	bl	800b2a4 <IOE_Write>
  }
  
  return ret;
 8011d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	3710      	adds	r7, #16
 8011d4e:	46bd      	mov	sp, r7
 8011d50:	bd80      	pop	{r7, pc}

08011d52 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8011d52:	b580      	push	{r7, lr}
 8011d54:	b086      	sub	sp, #24
 8011d56:	af00      	add	r7, sp, #0
 8011d58:	4603      	mov	r3, r0
 8011d5a:	60b9      	str	r1, [r7, #8]
 8011d5c:	607a      	str	r2, [r7, #4]
 8011d5e:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8011d60:	89fb      	ldrh	r3, [r7, #14]
 8011d62:	b2d8      	uxtb	r0, r3
 8011d64:	f107 0210 	add.w	r2, r7, #16
 8011d68:	2304      	movs	r3, #4
 8011d6a:	21d7      	movs	r1, #215	; 0xd7
 8011d6c:	f7f9 fac0 	bl	800b2f0 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8011d70:	7c3b      	ldrb	r3, [r7, #16]
 8011d72:	061a      	lsls	r2, r3, #24
 8011d74:	7c7b      	ldrb	r3, [r7, #17]
 8011d76:	041b      	lsls	r3, r3, #16
 8011d78:	431a      	orrs	r2, r3
 8011d7a:	7cbb      	ldrb	r3, [r7, #18]
 8011d7c:	021b      	lsls	r3, r3, #8
 8011d7e:	4313      	orrs	r3, r2
 8011d80:	7cfa      	ldrb	r2, [r7, #19]
 8011d82:	4313      	orrs	r3, r2
 8011d84:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8011d86:	697b      	ldr	r3, [r7, #20]
 8011d88:	0d1b      	lsrs	r3, r3, #20
 8011d8a:	b29a      	uxth	r2, r3
 8011d8c:	68bb      	ldr	r3, [r7, #8]
 8011d8e:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8011d90:	697b      	ldr	r3, [r7, #20]
 8011d92:	0a1b      	lsrs	r3, r3, #8
 8011d94:	b29b      	uxth	r3, r3
 8011d96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011d9a:	b29a      	uxth	r2, r3
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8011da0:	89fb      	ldrh	r3, [r7, #14]
 8011da2:	b2db      	uxtb	r3, r3
 8011da4:	2201      	movs	r2, #1
 8011da6:	214b      	movs	r1, #75	; 0x4b
 8011da8:	4618      	mov	r0, r3
 8011daa:	f7f9 fa7b 	bl	800b2a4 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8011dae:	89fb      	ldrh	r3, [r7, #14]
 8011db0:	b2db      	uxtb	r3, r3
 8011db2:	2200      	movs	r2, #0
 8011db4:	214b      	movs	r1, #75	; 0x4b
 8011db6:	4618      	mov	r0, r3
 8011db8:	f7f9 fa74 	bl	800b2a4 <IOE_Write>
}
 8011dbc:	bf00      	nop
 8011dbe:	3718      	adds	r7, #24
 8011dc0:	46bd      	mov	sp, r7
 8011dc2:	bd80      	pop	{r7, pc}

08011dc4 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b082      	sub	sp, #8
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	4603      	mov	r3, r0
 8011dcc:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8011dce:	f7f9 fa62 	bl	800b296 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8011dd2:	88fb      	ldrh	r3, [r7, #6]
 8011dd4:	211f      	movs	r1, #31
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	f7ff fe76 	bl	8011ac8 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8011ddc:	88fb      	ldrh	r3, [r7, #6]
 8011dde:	4618      	mov	r0, r3
 8011de0:	f7ff fe36 	bl	8011a50 <stmpe811_EnableGlobalIT>
}
 8011de4:	bf00      	nop
 8011de6:	3708      	adds	r7, #8
 8011de8:	46bd      	mov	sp, r7
 8011dea:	bd80      	pop	{r7, pc}

08011dec <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b082      	sub	sp, #8
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	4603      	mov	r3, r0
 8011df4:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8011df6:	88fb      	ldrh	r3, [r7, #6]
 8011df8:	4618      	mov	r0, r3
 8011dfa:	f7ff fe47 	bl	8011a8c <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8011dfe:	88fb      	ldrh	r3, [r7, #6]
 8011e00:	211f      	movs	r1, #31
 8011e02:	4618      	mov	r0, r3
 8011e04:	f7ff fe81 	bl	8011b0a <stmpe811_DisableITSource>
}
 8011e08:	bf00      	nop
 8011e0a:	3708      	adds	r7, #8
 8011e0c:	46bd      	mov	sp, r7
 8011e0e:	bd80      	pop	{r7, pc}

08011e10 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8011e10:	b580      	push	{r7, lr}
 8011e12:	b082      	sub	sp, #8
 8011e14:	af00      	add	r7, sp, #0
 8011e16:	4603      	mov	r3, r0
 8011e18:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8011e1a:	88fb      	ldrh	r3, [r7, #6]
 8011e1c:	211f      	movs	r1, #31
 8011e1e:	4618      	mov	r0, r3
 8011e20:	f7ff fe99 	bl	8011b56 <stmpe811_ReadGITStatus>
 8011e24:	4603      	mov	r3, r0
}
 8011e26:	4618      	mov	r0, r3
 8011e28:	3708      	adds	r7, #8
 8011e2a:	46bd      	mov	sp, r7
 8011e2c:	bd80      	pop	{r7, pc}

08011e2e <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8011e2e:	b580      	push	{r7, lr}
 8011e30:	b082      	sub	sp, #8
 8011e32:	af00      	add	r7, sp, #0
 8011e34:	4603      	mov	r3, r0
 8011e36:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8011e38:	88fb      	ldrh	r3, [r7, #6]
 8011e3a:	211f      	movs	r1, #31
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	f7ff fea1 	bl	8011b84 <stmpe811_ClearGlobalIT>
}
 8011e42:	bf00      	nop
 8011e44:	3708      	adds	r7, #8
 8011e46:	46bd      	mov	sp, r7
 8011e48:	bd80      	pop	{r7, pc}
	...

08011e4c <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8011e4c:	b480      	push	{r7}
 8011e4e:	b085      	sub	sp, #20
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	4603      	mov	r3, r0
 8011e54:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8011e56:	2300      	movs	r3, #0
 8011e58:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	73fb      	strb	r3, [r7, #15]
 8011e5e:	e00b      	b.n	8011e78 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8011e60:	7bfb      	ldrb	r3, [r7, #15]
 8011e62:	4a0a      	ldr	r2, [pc, #40]	; (8011e8c <stmpe811_GetInstance+0x40>)
 8011e64:	5cd3      	ldrb	r3, [r2, r3]
 8011e66:	b29b      	uxth	r3, r3
 8011e68:	88fa      	ldrh	r2, [r7, #6]
 8011e6a:	429a      	cmp	r2, r3
 8011e6c:	d101      	bne.n	8011e72 <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8011e6e:	7bfb      	ldrb	r3, [r7, #15]
 8011e70:	e006      	b.n	8011e80 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8011e72:	7bfb      	ldrb	r3, [r7, #15]
 8011e74:	3301      	adds	r3, #1
 8011e76:	73fb      	strb	r3, [r7, #15]
 8011e78:	7bfb      	ldrb	r3, [r7, #15]
 8011e7a:	2b01      	cmp	r3, #1
 8011e7c:	d9f0      	bls.n	8011e60 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8011e7e:	23ff      	movs	r3, #255	; 0xff
}
 8011e80:	4618      	mov	r0, r3
 8011e82:	3714      	adds	r7, #20
 8011e84:	46bd      	mov	sp, r7
 8011e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e8a:	4770      	bx	lr
 8011e8c:	20001b84 	.word	0x20001b84

08011e90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8011e90:	b480      	push	{r7}
 8011e92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8011e94:	4b08      	ldr	r3, [pc, #32]	; (8011eb8 <SystemInit+0x28>)
 8011e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011e9a:	4a07      	ldr	r2, [pc, #28]	; (8011eb8 <SystemInit+0x28>)
 8011e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011ea0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8011ea4:	4b04      	ldr	r3, [pc, #16]	; (8011eb8 <SystemInit+0x28>)
 8011ea6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8011eaa:	609a      	str	r2, [r3, #8]
#endif
}
 8011eac:	bf00      	nop
 8011eae:	46bd      	mov	sp, r7
 8011eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb4:	4770      	bx	lr
 8011eb6:	bf00      	nop
 8011eb8:	e000ed00 	.word	0xe000ed00

08011ebc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8011ebc:	b580      	push	{r7, lr}
 8011ebe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8011ec0:	4b0e      	ldr	r3, [pc, #56]	; (8011efc <HAL_Init+0x40>)
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	4a0d      	ldr	r2, [pc, #52]	; (8011efc <HAL_Init+0x40>)
 8011ec6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011eca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8011ecc:	4b0b      	ldr	r3, [pc, #44]	; (8011efc <HAL_Init+0x40>)
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	4a0a      	ldr	r2, [pc, #40]	; (8011efc <HAL_Init+0x40>)
 8011ed2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011ed6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8011ed8:	4b08      	ldr	r3, [pc, #32]	; (8011efc <HAL_Init+0x40>)
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	4a07      	ldr	r2, [pc, #28]	; (8011efc <HAL_Init+0x40>)
 8011ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011ee2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8011ee4:	2003      	movs	r0, #3
 8011ee6:	f000 f91c 	bl	8012122 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8011eea:	2000      	movs	r0, #0
 8011eec:	f7fa fa64 	bl	800c3b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8011ef0:	f7f9 fd7c 	bl	800b9ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8011ef4:	2300      	movs	r3, #0
}
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	bd80      	pop	{r7, pc}
 8011efa:	bf00      	nop
 8011efc:	40023c00 	.word	0x40023c00

08011f00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8011f00:	b480      	push	{r7}
 8011f02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8011f04:	4b06      	ldr	r3, [pc, #24]	; (8011f20 <HAL_IncTick+0x20>)
 8011f06:	781b      	ldrb	r3, [r3, #0]
 8011f08:	461a      	mov	r2, r3
 8011f0a:	4b06      	ldr	r3, [pc, #24]	; (8011f24 <HAL_IncTick+0x24>)
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	4413      	add	r3, r2
 8011f10:	4a04      	ldr	r2, [pc, #16]	; (8011f24 <HAL_IncTick+0x24>)
 8011f12:	6013      	str	r3, [r2, #0]
}
 8011f14:	bf00      	nop
 8011f16:	46bd      	mov	sp, r7
 8011f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f1c:	4770      	bx	lr
 8011f1e:	bf00      	nop
 8011f20:	20000094 	.word	0x20000094
 8011f24:	20013074 	.word	0x20013074

08011f28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8011f28:	b480      	push	{r7}
 8011f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8011f2c:	4b03      	ldr	r3, [pc, #12]	; (8011f3c <HAL_GetTick+0x14>)
 8011f2e:	681b      	ldr	r3, [r3, #0]
}
 8011f30:	4618      	mov	r0, r3
 8011f32:	46bd      	mov	sp, r7
 8011f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f38:	4770      	bx	lr
 8011f3a:	bf00      	nop
 8011f3c:	20013074 	.word	0x20013074

08011f40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8011f40:	b580      	push	{r7, lr}
 8011f42:	b084      	sub	sp, #16
 8011f44:	af00      	add	r7, sp, #0
 8011f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8011f48:	f7ff ffee 	bl	8011f28 <HAL_GetTick>
 8011f4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f58:	d005      	beq.n	8011f66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8011f5a:	4b09      	ldr	r3, [pc, #36]	; (8011f80 <HAL_Delay+0x40>)
 8011f5c:	781b      	ldrb	r3, [r3, #0]
 8011f5e:	461a      	mov	r2, r3
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	4413      	add	r3, r2
 8011f64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8011f66:	bf00      	nop
 8011f68:	f7ff ffde 	bl	8011f28 <HAL_GetTick>
 8011f6c:	4602      	mov	r2, r0
 8011f6e:	68bb      	ldr	r3, [r7, #8]
 8011f70:	1ad3      	subs	r3, r2, r3
 8011f72:	68fa      	ldr	r2, [r7, #12]
 8011f74:	429a      	cmp	r2, r3
 8011f76:	d8f7      	bhi.n	8011f68 <HAL_Delay+0x28>
  {
  }
}
 8011f78:	bf00      	nop
 8011f7a:	3710      	adds	r7, #16
 8011f7c:	46bd      	mov	sp, r7
 8011f7e:	bd80      	pop	{r7, pc}
 8011f80:	20000094 	.word	0x20000094

08011f84 <__NVIC_SetPriorityGrouping>:
{
 8011f84:	b480      	push	{r7}
 8011f86:	b085      	sub	sp, #20
 8011f88:	af00      	add	r7, sp, #0
 8011f8a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	f003 0307 	and.w	r3, r3, #7
 8011f92:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8011f94:	4b0c      	ldr	r3, [pc, #48]	; (8011fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8011f96:	68db      	ldr	r3, [r3, #12]
 8011f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8011f9a:	68ba      	ldr	r2, [r7, #8]
 8011f9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8011fa0:	4013      	ands	r3, r2
 8011fa2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8011fa8:	68bb      	ldr	r3, [r7, #8]
 8011faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8011fac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8011fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8011fb6:	4a04      	ldr	r2, [pc, #16]	; (8011fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8011fb8:	68bb      	ldr	r3, [r7, #8]
 8011fba:	60d3      	str	r3, [r2, #12]
}
 8011fbc:	bf00      	nop
 8011fbe:	3714      	adds	r7, #20
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc6:	4770      	bx	lr
 8011fc8:	e000ed00 	.word	0xe000ed00

08011fcc <__NVIC_GetPriorityGrouping>:
{
 8011fcc:	b480      	push	{r7}
 8011fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8011fd0:	4b04      	ldr	r3, [pc, #16]	; (8011fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8011fd2:	68db      	ldr	r3, [r3, #12]
 8011fd4:	0a1b      	lsrs	r3, r3, #8
 8011fd6:	f003 0307 	and.w	r3, r3, #7
}
 8011fda:	4618      	mov	r0, r3
 8011fdc:	46bd      	mov	sp, r7
 8011fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe2:	4770      	bx	lr
 8011fe4:	e000ed00 	.word	0xe000ed00

08011fe8 <__NVIC_EnableIRQ>:
{
 8011fe8:	b480      	push	{r7}
 8011fea:	b083      	sub	sp, #12
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	4603      	mov	r3, r0
 8011ff0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	db0b      	blt.n	8012012 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011ffa:	79fb      	ldrb	r3, [r7, #7]
 8011ffc:	f003 021f 	and.w	r2, r3, #31
 8012000:	4907      	ldr	r1, [pc, #28]	; (8012020 <__NVIC_EnableIRQ+0x38>)
 8012002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012006:	095b      	lsrs	r3, r3, #5
 8012008:	2001      	movs	r0, #1
 801200a:	fa00 f202 	lsl.w	r2, r0, r2
 801200e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8012012:	bf00      	nop
 8012014:	370c      	adds	r7, #12
 8012016:	46bd      	mov	sp, r7
 8012018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801201c:	4770      	bx	lr
 801201e:	bf00      	nop
 8012020:	e000e100 	.word	0xe000e100

08012024 <__NVIC_DisableIRQ>:
{
 8012024:	b480      	push	{r7}
 8012026:	b083      	sub	sp, #12
 8012028:	af00      	add	r7, sp, #0
 801202a:	4603      	mov	r3, r0
 801202c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801202e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012032:	2b00      	cmp	r3, #0
 8012034:	db10      	blt.n	8012058 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012036:	79fb      	ldrb	r3, [r7, #7]
 8012038:	f003 021f 	and.w	r2, r3, #31
 801203c:	4909      	ldr	r1, [pc, #36]	; (8012064 <__NVIC_DisableIRQ+0x40>)
 801203e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012042:	095b      	lsrs	r3, r3, #5
 8012044:	2001      	movs	r0, #1
 8012046:	fa00 f202 	lsl.w	r2, r0, r2
 801204a:	3320      	adds	r3, #32
 801204c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8012050:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8012054:	f3bf 8f6f 	isb	sy
}
 8012058:	bf00      	nop
 801205a:	370c      	adds	r7, #12
 801205c:	46bd      	mov	sp, r7
 801205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012062:	4770      	bx	lr
 8012064:	e000e100 	.word	0xe000e100

08012068 <__NVIC_SetPriority>:
{
 8012068:	b480      	push	{r7}
 801206a:	b083      	sub	sp, #12
 801206c:	af00      	add	r7, sp, #0
 801206e:	4603      	mov	r3, r0
 8012070:	6039      	str	r1, [r7, #0]
 8012072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012078:	2b00      	cmp	r3, #0
 801207a:	db0a      	blt.n	8012092 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801207c:	683b      	ldr	r3, [r7, #0]
 801207e:	b2da      	uxtb	r2, r3
 8012080:	490c      	ldr	r1, [pc, #48]	; (80120b4 <__NVIC_SetPriority+0x4c>)
 8012082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012086:	0112      	lsls	r2, r2, #4
 8012088:	b2d2      	uxtb	r2, r2
 801208a:	440b      	add	r3, r1
 801208c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8012090:	e00a      	b.n	80120a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012092:	683b      	ldr	r3, [r7, #0]
 8012094:	b2da      	uxtb	r2, r3
 8012096:	4908      	ldr	r1, [pc, #32]	; (80120b8 <__NVIC_SetPriority+0x50>)
 8012098:	79fb      	ldrb	r3, [r7, #7]
 801209a:	f003 030f 	and.w	r3, r3, #15
 801209e:	3b04      	subs	r3, #4
 80120a0:	0112      	lsls	r2, r2, #4
 80120a2:	b2d2      	uxtb	r2, r2
 80120a4:	440b      	add	r3, r1
 80120a6:	761a      	strb	r2, [r3, #24]
}
 80120a8:	bf00      	nop
 80120aa:	370c      	adds	r7, #12
 80120ac:	46bd      	mov	sp, r7
 80120ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b2:	4770      	bx	lr
 80120b4:	e000e100 	.word	0xe000e100
 80120b8:	e000ed00 	.word	0xe000ed00

080120bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80120bc:	b480      	push	{r7}
 80120be:	b089      	sub	sp, #36	; 0x24
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	60f8      	str	r0, [r7, #12]
 80120c4:	60b9      	str	r1, [r7, #8]
 80120c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	f003 0307 	and.w	r3, r3, #7
 80120ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80120d0:	69fb      	ldr	r3, [r7, #28]
 80120d2:	f1c3 0307 	rsb	r3, r3, #7
 80120d6:	2b04      	cmp	r3, #4
 80120d8:	bf28      	it	cs
 80120da:	2304      	movcs	r3, #4
 80120dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80120de:	69fb      	ldr	r3, [r7, #28]
 80120e0:	3304      	adds	r3, #4
 80120e2:	2b06      	cmp	r3, #6
 80120e4:	d902      	bls.n	80120ec <NVIC_EncodePriority+0x30>
 80120e6:	69fb      	ldr	r3, [r7, #28]
 80120e8:	3b03      	subs	r3, #3
 80120ea:	e000      	b.n	80120ee <NVIC_EncodePriority+0x32>
 80120ec:	2300      	movs	r3, #0
 80120ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80120f0:	f04f 32ff 	mov.w	r2, #4294967295
 80120f4:	69bb      	ldr	r3, [r7, #24]
 80120f6:	fa02 f303 	lsl.w	r3, r2, r3
 80120fa:	43da      	mvns	r2, r3
 80120fc:	68bb      	ldr	r3, [r7, #8]
 80120fe:	401a      	ands	r2, r3
 8012100:	697b      	ldr	r3, [r7, #20]
 8012102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8012104:	f04f 31ff 	mov.w	r1, #4294967295
 8012108:	697b      	ldr	r3, [r7, #20]
 801210a:	fa01 f303 	lsl.w	r3, r1, r3
 801210e:	43d9      	mvns	r1, r3
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012114:	4313      	orrs	r3, r2
         );
}
 8012116:	4618      	mov	r0, r3
 8012118:	3724      	adds	r7, #36	; 0x24
 801211a:	46bd      	mov	sp, r7
 801211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012120:	4770      	bx	lr

08012122 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8012122:	b580      	push	{r7, lr}
 8012124:	b082      	sub	sp, #8
 8012126:	af00      	add	r7, sp, #0
 8012128:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801212a:	6878      	ldr	r0, [r7, #4]
 801212c:	f7ff ff2a 	bl	8011f84 <__NVIC_SetPriorityGrouping>
}
 8012130:	bf00      	nop
 8012132:	3708      	adds	r7, #8
 8012134:	46bd      	mov	sp, r7
 8012136:	bd80      	pop	{r7, pc}

08012138 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8012138:	b580      	push	{r7, lr}
 801213a:	b086      	sub	sp, #24
 801213c:	af00      	add	r7, sp, #0
 801213e:	4603      	mov	r3, r0
 8012140:	60b9      	str	r1, [r7, #8]
 8012142:	607a      	str	r2, [r7, #4]
 8012144:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8012146:	2300      	movs	r3, #0
 8012148:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801214a:	f7ff ff3f 	bl	8011fcc <__NVIC_GetPriorityGrouping>
 801214e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8012150:	687a      	ldr	r2, [r7, #4]
 8012152:	68b9      	ldr	r1, [r7, #8]
 8012154:	6978      	ldr	r0, [r7, #20]
 8012156:	f7ff ffb1 	bl	80120bc <NVIC_EncodePriority>
 801215a:	4602      	mov	r2, r0
 801215c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012160:	4611      	mov	r1, r2
 8012162:	4618      	mov	r0, r3
 8012164:	f7ff ff80 	bl	8012068 <__NVIC_SetPriority>
}
 8012168:	bf00      	nop
 801216a:	3718      	adds	r7, #24
 801216c:	46bd      	mov	sp, r7
 801216e:	bd80      	pop	{r7, pc}

08012170 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8012170:	b580      	push	{r7, lr}
 8012172:	b082      	sub	sp, #8
 8012174:	af00      	add	r7, sp, #0
 8012176:	4603      	mov	r3, r0
 8012178:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801217a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801217e:	4618      	mov	r0, r3
 8012180:	f7ff ff32 	bl	8011fe8 <__NVIC_EnableIRQ>
}
 8012184:	bf00      	nop
 8012186:	3708      	adds	r7, #8
 8012188:	46bd      	mov	sp, r7
 801218a:	bd80      	pop	{r7, pc}

0801218c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 801218c:	b580      	push	{r7, lr}
 801218e:	b082      	sub	sp, #8
 8012190:	af00      	add	r7, sp, #0
 8012192:	4603      	mov	r3, r0
 8012194:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8012196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801219a:	4618      	mov	r0, r3
 801219c:	f7ff ff42 	bl	8012024 <__NVIC_DisableIRQ>
}
 80121a0:	bf00      	nop
 80121a2:	3708      	adds	r7, #8
 80121a4:	46bd      	mov	sp, r7
 80121a6:	bd80      	pop	{r7, pc}

080121a8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80121a8:	b580      	push	{r7, lr}
 80121aa:	b082      	sub	sp, #8
 80121ac:	af00      	add	r7, sp, #0
 80121ae:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d101      	bne.n	80121ba <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80121b6:	2301      	movs	r3, #1
 80121b8:	e00e      	b.n	80121d8 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	795b      	ldrb	r3, [r3, #5]
 80121be:	b2db      	uxtb	r3, r3
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d105      	bne.n	80121d0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	2200      	movs	r2, #0
 80121c8:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80121ca:	6878      	ldr	r0, [r7, #4]
 80121cc:	f7f9 fc3a 	bl	800ba44 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	2201      	movs	r2, #1
 80121d4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80121d6:	2300      	movs	r3, #0
}
 80121d8:	4618      	mov	r0, r3
 80121da:	3708      	adds	r7, #8
 80121dc:	46bd      	mov	sp, r7
 80121de:	bd80      	pop	{r7, pc}

080121e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80121e0:	b580      	push	{r7, lr}
 80121e2:	b086      	sub	sp, #24
 80121e4:	af00      	add	r7, sp, #0
 80121e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80121e8:	2300      	movs	r3, #0
 80121ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80121ec:	f7ff fe9c 	bl	8011f28 <HAL_GetTick>
 80121f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d101      	bne.n	80121fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80121f8:	2301      	movs	r3, #1
 80121fa:	e099      	b.n	8012330 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	2200      	movs	r2, #0
 8012200:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	2202      	movs	r2, #2
 8012208:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	681a      	ldr	r2, [r3, #0]
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	f022 0201 	bic.w	r2, r2, #1
 801221a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801221c:	e00f      	b.n	801223e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801221e:	f7ff fe83 	bl	8011f28 <HAL_GetTick>
 8012222:	4602      	mov	r2, r0
 8012224:	693b      	ldr	r3, [r7, #16]
 8012226:	1ad3      	subs	r3, r2, r3
 8012228:	2b05      	cmp	r3, #5
 801222a:	d908      	bls.n	801223e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	2220      	movs	r2, #32
 8012230:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	2203      	movs	r2, #3
 8012236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 801223a:	2303      	movs	r3, #3
 801223c:	e078      	b.n	8012330 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	f003 0301 	and.w	r3, r3, #1
 8012248:	2b00      	cmp	r3, #0
 801224a:	d1e8      	bne.n	801221e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8012254:	697a      	ldr	r2, [r7, #20]
 8012256:	4b38      	ldr	r3, [pc, #224]	; (8012338 <HAL_DMA_Init+0x158>)
 8012258:	4013      	ands	r3, r2
 801225a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	685a      	ldr	r2, [r3, #4]
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	689b      	ldr	r3, [r3, #8]
 8012264:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801226a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	691b      	ldr	r3, [r3, #16]
 8012270:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8012276:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	699b      	ldr	r3, [r3, #24]
 801227c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8012282:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	6a1b      	ldr	r3, [r3, #32]
 8012288:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801228a:	697a      	ldr	r2, [r7, #20]
 801228c:	4313      	orrs	r3, r2
 801228e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012294:	2b04      	cmp	r3, #4
 8012296:	d107      	bne.n	80122a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122a0:	4313      	orrs	r3, r2
 80122a2:	697a      	ldr	r2, [r7, #20]
 80122a4:	4313      	orrs	r3, r2
 80122a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	697a      	ldr	r2, [r7, #20]
 80122ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	695b      	ldr	r3, [r3, #20]
 80122b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80122b8:	697b      	ldr	r3, [r7, #20]
 80122ba:	f023 0307 	bic.w	r3, r3, #7
 80122be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122c4:	697a      	ldr	r2, [r7, #20]
 80122c6:	4313      	orrs	r3, r2
 80122c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122ce:	2b04      	cmp	r3, #4
 80122d0:	d117      	bne.n	8012302 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80122d6:	697a      	ldr	r2, [r7, #20]
 80122d8:	4313      	orrs	r3, r2
 80122da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d00e      	beq.n	8012302 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80122e4:	6878      	ldr	r0, [r7, #4]
 80122e6:	f000 f8e5 	bl	80124b4 <DMA_CheckFifoParam>
 80122ea:	4603      	mov	r3, r0
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d008      	beq.n	8012302 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	2240      	movs	r2, #64	; 0x40
 80122f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	2201      	movs	r2, #1
 80122fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80122fe:	2301      	movs	r3, #1
 8012300:	e016      	b.n	8012330 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	697a      	ldr	r2, [r7, #20]
 8012308:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801230a:	6878      	ldr	r0, [r7, #4]
 801230c:	f000 f89c 	bl	8012448 <DMA_CalcBaseAndBitshift>
 8012310:	4603      	mov	r3, r0
 8012312:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012318:	223f      	movs	r2, #63	; 0x3f
 801231a:	409a      	lsls	r2, r3
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	2200      	movs	r2, #0
 8012324:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	2201      	movs	r2, #1
 801232a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 801232e:	2300      	movs	r3, #0
}
 8012330:	4618      	mov	r0, r3
 8012332:	3718      	adds	r7, #24
 8012334:	46bd      	mov	sp, r7
 8012336:	bd80      	pop	{r7, pc}
 8012338:	f010803f 	.word	0xf010803f

0801233c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801233c:	b580      	push	{r7, lr}
 801233e:	b086      	sub	sp, #24
 8012340:	af00      	add	r7, sp, #0
 8012342:	60f8      	str	r0, [r7, #12]
 8012344:	60b9      	str	r1, [r7, #8]
 8012346:	607a      	str	r2, [r7, #4]
 8012348:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801234a:	2300      	movs	r3, #0
 801234c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012352:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801235a:	2b01      	cmp	r3, #1
 801235c:	d101      	bne.n	8012362 <HAL_DMA_Start_IT+0x26>
 801235e:	2302      	movs	r3, #2
 8012360:	e040      	b.n	80123e4 <HAL_DMA_Start_IT+0xa8>
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	2201      	movs	r2, #1
 8012366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8012370:	b2db      	uxtb	r3, r3
 8012372:	2b01      	cmp	r3, #1
 8012374:	d12f      	bne.n	80123d6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	2202      	movs	r2, #2
 801237a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	2200      	movs	r2, #0
 8012382:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8012384:	683b      	ldr	r3, [r7, #0]
 8012386:	687a      	ldr	r2, [r7, #4]
 8012388:	68b9      	ldr	r1, [r7, #8]
 801238a:	68f8      	ldr	r0, [r7, #12]
 801238c:	f000 f82e 	bl	80123ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012394:	223f      	movs	r2, #63	; 0x3f
 8012396:	409a      	lsls	r2, r3
 8012398:	693b      	ldr	r3, [r7, #16]
 801239a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	681a      	ldr	r2, [r3, #0]
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	f042 0216 	orr.w	r2, r2, #22
 80123aa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d007      	beq.n	80123c4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	681a      	ldr	r2, [r3, #0]
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	f042 0208 	orr.w	r2, r2, #8
 80123c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	681a      	ldr	r2, [r3, #0]
 80123ca:	68fb      	ldr	r3, [r7, #12]
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	f042 0201 	orr.w	r2, r2, #1
 80123d2:	601a      	str	r2, [r3, #0]
 80123d4:	e005      	b.n	80123e2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	2200      	movs	r2, #0
 80123da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80123de:	2302      	movs	r3, #2
 80123e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80123e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80123e4:	4618      	mov	r0, r3
 80123e6:	3718      	adds	r7, #24
 80123e8:	46bd      	mov	sp, r7
 80123ea:	bd80      	pop	{r7, pc}

080123ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80123ec:	b480      	push	{r7}
 80123ee:	b085      	sub	sp, #20
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	60f8      	str	r0, [r7, #12]
 80123f4:	60b9      	str	r1, [r7, #8]
 80123f6:	607a      	str	r2, [r7, #4]
 80123f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	681a      	ldr	r2, [r3, #0]
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8012408:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	683a      	ldr	r2, [r7, #0]
 8012410:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	689b      	ldr	r3, [r3, #8]
 8012416:	2b40      	cmp	r3, #64	; 0x40
 8012418:	d108      	bne.n	801242c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	687a      	ldr	r2, [r7, #4]
 8012420:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	68ba      	ldr	r2, [r7, #8]
 8012428:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 801242a:	e007      	b.n	801243c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	68ba      	ldr	r2, [r7, #8]
 8012432:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	687a      	ldr	r2, [r7, #4]
 801243a:	60da      	str	r2, [r3, #12]
}
 801243c:	bf00      	nop
 801243e:	3714      	adds	r7, #20
 8012440:	46bd      	mov	sp, r7
 8012442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012446:	4770      	bx	lr

08012448 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8012448:	b480      	push	{r7}
 801244a:	b085      	sub	sp, #20
 801244c:	af00      	add	r7, sp, #0
 801244e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	b2db      	uxtb	r3, r3
 8012456:	3b10      	subs	r3, #16
 8012458:	4a14      	ldr	r2, [pc, #80]	; (80124ac <DMA_CalcBaseAndBitshift+0x64>)
 801245a:	fba2 2303 	umull	r2, r3, r2, r3
 801245e:	091b      	lsrs	r3, r3, #4
 8012460:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8012462:	4a13      	ldr	r2, [pc, #76]	; (80124b0 <DMA_CalcBaseAndBitshift+0x68>)
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	4413      	add	r3, r2
 8012468:	781b      	ldrb	r3, [r3, #0]
 801246a:	461a      	mov	r2, r3
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	2b03      	cmp	r3, #3
 8012474:	d909      	bls.n	801248a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801247e:	f023 0303 	bic.w	r3, r3, #3
 8012482:	1d1a      	adds	r2, r3, #4
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	659a      	str	r2, [r3, #88]	; 0x58
 8012488:	e007      	b.n	801249a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8012492:	f023 0303 	bic.w	r3, r3, #3
 8012496:	687a      	ldr	r2, [r7, #4]
 8012498:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 801249e:	4618      	mov	r0, r3
 80124a0:	3714      	adds	r7, #20
 80124a2:	46bd      	mov	sp, r7
 80124a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a8:	4770      	bx	lr
 80124aa:	bf00      	nop
 80124ac:	aaaaaaab 	.word	0xaaaaaaab
 80124b0:	08031d10 	.word	0x08031d10

080124b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80124b4:	b480      	push	{r7}
 80124b6:	b085      	sub	sp, #20
 80124b8:	af00      	add	r7, sp, #0
 80124ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80124bc:	2300      	movs	r3, #0
 80124be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80124c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	699b      	ldr	r3, [r3, #24]
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d11f      	bne.n	801250e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80124ce:	68bb      	ldr	r3, [r7, #8]
 80124d0:	2b03      	cmp	r3, #3
 80124d2:	d855      	bhi.n	8012580 <DMA_CheckFifoParam+0xcc>
 80124d4:	a201      	add	r2, pc, #4	; (adr r2, 80124dc <DMA_CheckFifoParam+0x28>)
 80124d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124da:	bf00      	nop
 80124dc:	080124ed 	.word	0x080124ed
 80124e0:	080124ff 	.word	0x080124ff
 80124e4:	080124ed 	.word	0x080124ed
 80124e8:	08012581 	.word	0x08012581
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d045      	beq.n	8012584 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80124f8:	2301      	movs	r3, #1
 80124fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80124fc:	e042      	b.n	8012584 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012502:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8012506:	d13f      	bne.n	8012588 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8012508:	2301      	movs	r3, #1
 801250a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801250c:	e03c      	b.n	8012588 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	699b      	ldr	r3, [r3, #24]
 8012512:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012516:	d121      	bne.n	801255c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8012518:	68bb      	ldr	r3, [r7, #8]
 801251a:	2b03      	cmp	r3, #3
 801251c:	d836      	bhi.n	801258c <DMA_CheckFifoParam+0xd8>
 801251e:	a201      	add	r2, pc, #4	; (adr r2, 8012524 <DMA_CheckFifoParam+0x70>)
 8012520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012524:	08012535 	.word	0x08012535
 8012528:	0801253b 	.word	0x0801253b
 801252c:	08012535 	.word	0x08012535
 8012530:	0801254d 	.word	0x0801254d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8012534:	2301      	movs	r3, #1
 8012536:	73fb      	strb	r3, [r7, #15]
      break;
 8012538:	e02f      	b.n	801259a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801253e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012542:	2b00      	cmp	r3, #0
 8012544:	d024      	beq.n	8012590 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8012546:	2301      	movs	r3, #1
 8012548:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801254a:	e021      	b.n	8012590 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012550:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8012554:	d11e      	bne.n	8012594 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8012556:	2301      	movs	r3, #1
 8012558:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 801255a:	e01b      	b.n	8012594 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 801255c:	68bb      	ldr	r3, [r7, #8]
 801255e:	2b02      	cmp	r3, #2
 8012560:	d902      	bls.n	8012568 <DMA_CheckFifoParam+0xb4>
 8012562:	2b03      	cmp	r3, #3
 8012564:	d003      	beq.n	801256e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8012566:	e018      	b.n	801259a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8012568:	2301      	movs	r3, #1
 801256a:	73fb      	strb	r3, [r7, #15]
      break;
 801256c:	e015      	b.n	801259a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012572:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012576:	2b00      	cmp	r3, #0
 8012578:	d00e      	beq.n	8012598 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 801257a:	2301      	movs	r3, #1
 801257c:	73fb      	strb	r3, [r7, #15]
      break;
 801257e:	e00b      	b.n	8012598 <DMA_CheckFifoParam+0xe4>
      break;
 8012580:	bf00      	nop
 8012582:	e00a      	b.n	801259a <DMA_CheckFifoParam+0xe6>
      break;
 8012584:	bf00      	nop
 8012586:	e008      	b.n	801259a <DMA_CheckFifoParam+0xe6>
      break;
 8012588:	bf00      	nop
 801258a:	e006      	b.n	801259a <DMA_CheckFifoParam+0xe6>
      break;
 801258c:	bf00      	nop
 801258e:	e004      	b.n	801259a <DMA_CheckFifoParam+0xe6>
      break;
 8012590:	bf00      	nop
 8012592:	e002      	b.n	801259a <DMA_CheckFifoParam+0xe6>
      break;   
 8012594:	bf00      	nop
 8012596:	e000      	b.n	801259a <DMA_CheckFifoParam+0xe6>
      break;
 8012598:	bf00      	nop
    }
  } 
  
  return status; 
 801259a:	7bfb      	ldrb	r3, [r7, #15]
}
 801259c:	4618      	mov	r0, r3
 801259e:	3714      	adds	r7, #20
 80125a0:	46bd      	mov	sp, r7
 80125a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a6:	4770      	bx	lr

080125a8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80125a8:	b580      	push	{r7, lr}
 80125aa:	b082      	sub	sp, #8
 80125ac:	af00      	add	r7, sp, #0
 80125ae:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d101      	bne.n	80125ba <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80125b6:	2301      	movs	r3, #1
 80125b8:	e03b      	b.n	8012632 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80125c0:	b2db      	uxtb	r3, r3
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d106      	bne.n	80125d4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	2200      	movs	r2, #0
 80125ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80125ce:	6878      	ldr	r0, [r7, #4]
 80125d0:	f7f9 fa5a 	bl	800ba88 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	2202      	movs	r2, #2
 80125d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	685a      	ldr	r2, [r3, #4]
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	430a      	orrs	r2, r1
 80125f0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125f8:	f023 0107 	bic.w	r1, r3, #7
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	689a      	ldr	r2, [r3, #8]
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	430a      	orrs	r2, r1
 8012606:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801260e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8012612:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8012616:	687a      	ldr	r2, [r7, #4]
 8012618:	68d1      	ldr	r1, [r2, #12]
 801261a:	687a      	ldr	r2, [r7, #4]
 801261c:	6812      	ldr	r2, [r2, #0]
 801261e:	430b      	orrs	r3, r1
 8012620:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	2200      	movs	r2, #0
 8012626:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	2201      	movs	r2, #1
 801262c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8012630:	2300      	movs	r3, #0
}
 8012632:	4618      	mov	r0, r3
 8012634:	3708      	adds	r7, #8
 8012636:	46bd      	mov	sp, r7
 8012638:	bd80      	pop	{r7, pc}
	...

0801263c <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 801263c:	b580      	push	{r7, lr}
 801263e:	b082      	sub	sp, #8
 8012640:	af00      	add	r7, sp, #0
 8012642:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	2b00      	cmp	r3, #0
 8012648:	d101      	bne.n	801264e <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 801264a:	2301      	movs	r3, #1
 801264c:	e05f      	b.n	801270e <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 801264e:	4b32      	ldr	r3, [pc, #200]	; (8012718 <HAL_DMA2D_DeInit+0xdc>)
 8012650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012652:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012656:	2b00      	cmp	r3, #0
 8012658:	d02e      	beq.n	80126b8 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	f003 0301 	and.w	r3, r3, #1
 8012664:	2b01      	cmp	r3, #1
 8012666:	d107      	bne.n	8012678 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 8012668:	6878      	ldr	r0, [r7, #4]
 801266a:	f000 f8c1 	bl	80127f0 <HAL_DMA2D_Abort>
 801266e:	4603      	mov	r3, r0
 8012670:	2b00      	cmp	r3, #0
 8012672:	d021      	beq.n	80126b8 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 8012674:	2301      	movs	r3, #1
 8012676:	e04a      	b.n	801270e <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801267e:	f003 0320 	and.w	r3, r3, #32
 8012682:	2b20      	cmp	r3, #32
 8012684:	d108      	bne.n	8012698 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 8012686:	2100      	movs	r1, #0
 8012688:	6878      	ldr	r0, [r7, #4]
 801268a:	f000 f8f7 	bl	801287c <HAL_DMA2D_CLUTLoading_Abort>
 801268e:	4603      	mov	r3, r0
 8012690:	2b00      	cmp	r3, #0
 8012692:	d011      	beq.n	80126b8 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 8012694:	2301      	movs	r3, #1
 8012696:	e03a      	b.n	801270e <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	69db      	ldr	r3, [r3, #28]
 801269e:	f003 0320 	and.w	r3, r3, #32
 80126a2:	2b20      	cmp	r3, #32
 80126a4:	d108      	bne.n	80126b8 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 80126a6:	2101      	movs	r1, #1
 80126a8:	6878      	ldr	r0, [r7, #4]
 80126aa:	f000 f8e7 	bl	801287c <HAL_DMA2D_CLUTLoading_Abort>
 80126ae:	4603      	mov	r3, r0
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d001      	beq.n	80126b8 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 80126b4:	2301      	movs	r3, #1
 80126b6:	e02a      	b.n	801270e <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	2200      	movs	r2, #0
 80126be:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	681b      	ldr	r3, [r3, #0]
 80126c4:	223f      	movs	r2, #63	; 0x3f
 80126c6:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	2200      	movs	r2, #0
 80126ce:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	2200      	movs	r2, #0
 80126d6:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	2200      	movs	r2, #0
 80126de:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	2200      	movs	r2, #0
 80126e6:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	2200      	movs	r2, #0
 80126ee:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 80126f0:	6878      	ldr	r0, [r7, #4]
 80126f2:	f7f9 f9f1 	bl	800bad8 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	2200      	movs	r2, #0
 80126fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	2200      	movs	r2, #0
 8012700:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	2200      	movs	r2, #0
 8012708:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 801270c:	2300      	movs	r3, #0
}
 801270e:	4618      	mov	r0, r3
 8012710:	3708      	adds	r7, #8
 8012712:	46bd      	mov	sp, r7
 8012714:	bd80      	pop	{r7, pc}
 8012716:	bf00      	nop
 8012718:	40023800 	.word	0x40023800

0801271c <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 801271c:	b580      	push	{r7, lr}
 801271e:	b086      	sub	sp, #24
 8012720:	af02      	add	r7, sp, #8
 8012722:	60f8      	str	r0, [r7, #12]
 8012724:	60b9      	str	r1, [r7, #8]
 8012726:	607a      	str	r2, [r7, #4]
 8012728:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012730:	2b01      	cmp	r3, #1
 8012732:	d101      	bne.n	8012738 <HAL_DMA2D_Start_IT+0x1c>
 8012734:	2302      	movs	r3, #2
 8012736:	e020      	b.n	801277a <HAL_DMA2D_Start_IT+0x5e>
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	2201      	movs	r2, #1
 801273c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	2202      	movs	r2, #2
 8012744:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8012748:	69bb      	ldr	r3, [r7, #24]
 801274a:	9300      	str	r3, [sp, #0]
 801274c:	683b      	ldr	r3, [r7, #0]
 801274e:	687a      	ldr	r2, [r7, #4]
 8012750:	68b9      	ldr	r1, [r7, #8]
 8012752:	68f8      	ldr	r0, [r7, #12]
 8012754:	f000 fa84 	bl	8012c60 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	681b      	ldr	r3, [r3, #0]
 801275c:	681a      	ldr	r2, [r3, #0]
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8012766:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	681a      	ldr	r2, [r3, #0]
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	f042 0201 	orr.w	r2, r2, #1
 8012776:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8012778:	2300      	movs	r3, #0
}
 801277a:	4618      	mov	r0, r3
 801277c:	3710      	adds	r7, #16
 801277e:	46bd      	mov	sp, r7
 8012780:	bd80      	pop	{r7, pc}

08012782 <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8012782:	b580      	push	{r7, lr}
 8012784:	b086      	sub	sp, #24
 8012786:	af02      	add	r7, sp, #8
 8012788:	60f8      	str	r0, [r7, #12]
 801278a:	60b9      	str	r1, [r7, #8]
 801278c:	607a      	str	r2, [r7, #4]
 801278e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012796:	2b01      	cmp	r3, #1
 8012798:	d101      	bne.n	801279e <HAL_DMA2D_BlendingStart_IT+0x1c>
 801279a:	2302      	movs	r3, #2
 801279c:	e024      	b.n	80127e8 <HAL_DMA2D_BlendingStart_IT+0x66>
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	2201      	movs	r2, #1
 80127a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	2202      	movs	r2, #2
 80127aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	687a      	ldr	r2, [r7, #4]
 80127b4:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 80127b6:	69fb      	ldr	r3, [r7, #28]
 80127b8:	9300      	str	r3, [sp, #0]
 80127ba:	69bb      	ldr	r3, [r7, #24]
 80127bc:	683a      	ldr	r2, [r7, #0]
 80127be:	68b9      	ldr	r1, [r7, #8]
 80127c0:	68f8      	ldr	r0, [r7, #12]
 80127c2:	f000 fa4d 	bl	8012c60 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	681a      	ldr	r2, [r3, #0]
 80127cc:	68fb      	ldr	r3, [r7, #12]
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 80127d4:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	681a      	ldr	r2, [r3, #0]
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	f042 0201 	orr.w	r2, r2, #1
 80127e4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80127e6:	2300      	movs	r3, #0
}
 80127e8:	4618      	mov	r0, r3
 80127ea:	3710      	adds	r7, #16
 80127ec:	46bd      	mov	sp, r7
 80127ee:	bd80      	pop	{r7, pc}

080127f0 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 80127f0:	b580      	push	{r7, lr}
 80127f2:	b084      	sub	sp, #16
 80127f4:	af00      	add	r7, sp, #0
 80127f6:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	f023 0205 	bic.w	r2, r3, #5
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	f042 0204 	orr.w	r2, r2, #4
 801280a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801280c:	f7ff fb8c 	bl	8011f28 <HAL_GetTick>
 8012810:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8012812:	e017      	b.n	8012844 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8012814:	f7ff fb88 	bl	8011f28 <HAL_GetTick>
 8012818:	4602      	mov	r2, r0
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	1ad3      	subs	r3, r2, r3
 801281e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012822:	d90f      	bls.n	8012844 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012828:	f043 0220 	orr.w	r2, r3, #32
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	2203      	movs	r2, #3
 8012834:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	2200      	movs	r2, #0
 801283c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8012840:	2303      	movs	r3, #3
 8012842:	e017      	b.n	8012874 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	f003 0301 	and.w	r3, r3, #1
 801284e:	2b00      	cmp	r3, #0
 8012850:	d1e0      	bne.n	8012814 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	681a      	ldr	r2, [r3, #0]
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 8012860:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	2201      	movs	r2, #1
 8012866:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	2200      	movs	r2, #0
 801286e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8012872:	2300      	movs	r3, #0
}
 8012874:	4618      	mov	r0, r3
 8012876:	3710      	adds	r7, #16
 8012878:	46bd      	mov	sp, r7
 801287a:	bd80      	pop	{r7, pc}

0801287c <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 801287c:	b580      	push	{r7, lr}
 801287e:	b084      	sub	sp, #16
 8012880:	af00      	add	r7, sp, #0
 8012882:	6078      	str	r0, [r7, #4]
 8012884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	3324      	adds	r3, #36	; 0x24
 801288c:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	681a      	ldr	r2, [r3, #0]
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	f042 0204 	orr.w	r2, r2, #4
 801289c:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 801289e:	683b      	ldr	r3, [r7, #0]
 80128a0:	2b01      	cmp	r3, #1
 80128a2:	d103      	bne.n	80128ac <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	331c      	adds	r3, #28
 80128aa:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 80128ac:	f7ff fb3c 	bl	8011f28 <HAL_GetTick>
 80128b0:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 80128b2:	e017      	b.n	80128e4 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 80128b4:	f7ff fb38 	bl	8011f28 <HAL_GetTick>
 80128b8:	4602      	mov	r2, r0
 80128ba:	68bb      	ldr	r3, [r7, #8]
 80128bc:	1ad3      	subs	r3, r2, r3
 80128be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80128c2:	d90f      	bls.n	80128e4 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80128c8:	f043 0220 	orr.w	r2, r3, #32
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	2203      	movs	r2, #3
 80128d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	2200      	movs	r2, #0
 80128dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 80128e0:	2303      	movs	r3, #3
 80128e2:	e016      	b.n	8012912 <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	f003 0320 	and.w	r3, r3, #32
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d1e1      	bne.n	80128b4 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	681a      	ldr	r2, [r3, #0]
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 80128fe:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	2201      	movs	r2, #1
 8012904:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	2200      	movs	r2, #0
 801290c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8012910:	2300      	movs	r3, #0
}
 8012912:	4618      	mov	r0, r3
 8012914:	3710      	adds	r7, #16
 8012916:	46bd      	mov	sp, r7
 8012918:	bd80      	pop	{r7, pc}

0801291a <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 801291a:	b580      	push	{r7, lr}
 801291c:	b084      	sub	sp, #16
 801291e:	af00      	add	r7, sp, #0
 8012920:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	685b      	ldr	r3, [r3, #4]
 8012928:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	f003 0301 	and.w	r3, r3, #1
 8012938:	2b00      	cmp	r3, #0
 801293a:	d026      	beq.n	801298a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 801293c:	68bb      	ldr	r3, [r7, #8]
 801293e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012942:	2b00      	cmp	r3, #0
 8012944:	d021      	beq.n	801298a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	681a      	ldr	r2, [r3, #0]
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8012954:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801295a:	f043 0201 	orr.w	r2, r3, #1
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	2201      	movs	r2, #1
 8012968:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	2204      	movs	r2, #4
 801296e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	2200      	movs	r2, #0
 8012976:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	695b      	ldr	r3, [r3, #20]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d003      	beq.n	801298a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	695b      	ldr	r3, [r3, #20]
 8012986:	6878      	ldr	r0, [r7, #4]
 8012988:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	f003 0320 	and.w	r3, r3, #32
 8012990:	2b00      	cmp	r3, #0
 8012992:	d026      	beq.n	80129e2 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8012994:	68bb      	ldr	r3, [r7, #8]
 8012996:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801299a:	2b00      	cmp	r3, #0
 801299c:	d021      	beq.n	80129e2 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	681a      	ldr	r2, [r3, #0]
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80129ac:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	2220      	movs	r2, #32
 80129b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80129ba:	f043 0202 	orr.w	r2, r3, #2
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	2204      	movs	r2, #4
 80129c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	2200      	movs	r2, #0
 80129ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	695b      	ldr	r3, [r3, #20]
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d003      	beq.n	80129e2 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	695b      	ldr	r3, [r3, #20]
 80129de:	6878      	ldr	r0, [r7, #4]
 80129e0:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	f003 0308 	and.w	r3, r3, #8
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d026      	beq.n	8012a3a <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80129ec:	68bb      	ldr	r3, [r7, #8]
 80129ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d021      	beq.n	8012a3a <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	681a      	ldr	r2, [r3, #0]
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012a04:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	2208      	movs	r2, #8
 8012a0c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012a12:	f043 0204 	orr.w	r2, r3, #4
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	2204      	movs	r2, #4
 8012a1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	2200      	movs	r2, #0
 8012a26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	695b      	ldr	r3, [r3, #20]
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d003      	beq.n	8012a3a <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	695b      	ldr	r3, [r3, #20]
 8012a36:	6878      	ldr	r0, [r7, #4]
 8012a38:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	f003 0304 	and.w	r3, r3, #4
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d013      	beq.n	8012a6c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8012a44:	68bb      	ldr	r3, [r7, #8]
 8012a46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d00e      	beq.n	8012a6c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	681a      	ldr	r2, [r3, #0]
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012a5c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	2204      	movs	r2, #4
 8012a64:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8012a66:	6878      	ldr	r0, [r7, #4]
 8012a68:	f000 f853 	bl	8012b12 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	f003 0302 	and.w	r3, r3, #2
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d024      	beq.n	8012ac0 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8012a76:	68bb      	ldr	r3, [r7, #8]
 8012a78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d01f      	beq.n	8012ac0 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	681a      	ldr	r2, [r3, #0]
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8012a8e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	2202      	movs	r2, #2
 8012a96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	2201      	movs	r2, #1
 8012aa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	2200      	movs	r2, #0
 8012aac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	691b      	ldr	r3, [r3, #16]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d003      	beq.n	8012ac0 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	691b      	ldr	r3, [r3, #16]
 8012abc:	6878      	ldr	r0, [r7, #4]
 8012abe:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8012ac0:	68fb      	ldr	r3, [r7, #12]
 8012ac2:	f003 0310 	and.w	r3, r3, #16
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d01f      	beq.n	8012b0a <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8012aca:	68bb      	ldr	r3, [r7, #8]
 8012acc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d01a      	beq.n	8012b0a <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	681a      	ldr	r2, [r3, #0]
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8012ae2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	2210      	movs	r2, #16
 8012aea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	2201      	movs	r2, #1
 8012af8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	2200      	movs	r2, #0
 8012b00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8012b04:	6878      	ldr	r0, [r7, #4]
 8012b06:	f000 f80e 	bl	8012b26 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8012b0a:	bf00      	nop
 8012b0c:	3710      	adds	r7, #16
 8012b0e:	46bd      	mov	sp, r7
 8012b10:	bd80      	pop	{r7, pc}

08012b12 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8012b12:	b480      	push	{r7}
 8012b14:	b083      	sub	sp, #12
 8012b16:	af00      	add	r7, sp, #0
 8012b18:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8012b1a:	bf00      	nop
 8012b1c:	370c      	adds	r7, #12
 8012b1e:	46bd      	mov	sp, r7
 8012b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b24:	4770      	bx	lr

08012b26 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8012b26:	b480      	push	{r7}
 8012b28:	b083      	sub	sp, #12
 8012b2a:	af00      	add	r7, sp, #0
 8012b2c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8012b2e:	bf00      	nop
 8012b30:	370c      	adds	r7, #12
 8012b32:	46bd      	mov	sp, r7
 8012b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b38:	4770      	bx	lr
	...

08012b3c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8012b3c:	b480      	push	{r7}
 8012b3e:	b087      	sub	sp, #28
 8012b40:	af00      	add	r7, sp, #0
 8012b42:	6078      	str	r0, [r7, #4]
 8012b44:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	685b      	ldr	r3, [r3, #4]
 8012b4a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012b54:	2b01      	cmp	r3, #1
 8012b56:	d101      	bne.n	8012b5c <HAL_DMA2D_ConfigLayer+0x20>
 8012b58:	2302      	movs	r3, #2
 8012b5a:	e079      	b.n	8012c50 <HAL_DMA2D_ConfigLayer+0x114>
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	2201      	movs	r2, #1
 8012b60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	2202      	movs	r2, #2
 8012b68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8012b6c:	683b      	ldr	r3, [r7, #0]
 8012b6e:	011b      	lsls	r3, r3, #4
 8012b70:	3318      	adds	r3, #24
 8012b72:	687a      	ldr	r2, [r7, #4]
 8012b74:	4413      	add	r3, r2
 8012b76:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8012b78:	693b      	ldr	r3, [r7, #16]
 8012b7a:	685a      	ldr	r2, [r3, #4]
 8012b7c:	693b      	ldr	r3, [r7, #16]
 8012b7e:	689b      	ldr	r3, [r3, #8]
 8012b80:	041b      	lsls	r3, r3, #16
 8012b82:	4313      	orrs	r3, r2
 8012b84:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8012b86:	4b35      	ldr	r3, [pc, #212]	; (8012c5c <HAL_DMA2D_ConfigLayer+0x120>)
 8012b88:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8012b8a:	693b      	ldr	r3, [r7, #16]
 8012b8c:	685b      	ldr	r3, [r3, #4]
 8012b8e:	2b0a      	cmp	r3, #10
 8012b90:	d003      	beq.n	8012b9a <HAL_DMA2D_ConfigLayer+0x5e>
 8012b92:	693b      	ldr	r3, [r7, #16]
 8012b94:	685b      	ldr	r3, [r3, #4]
 8012b96:	2b09      	cmp	r3, #9
 8012b98:	d107      	bne.n	8012baa <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8012b9a:	693b      	ldr	r3, [r7, #16]
 8012b9c:	68db      	ldr	r3, [r3, #12]
 8012b9e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012ba2:	697a      	ldr	r2, [r7, #20]
 8012ba4:	4313      	orrs	r3, r2
 8012ba6:	617b      	str	r3, [r7, #20]
 8012ba8:	e005      	b.n	8012bb6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8012baa:	693b      	ldr	r3, [r7, #16]
 8012bac:	68db      	ldr	r3, [r3, #12]
 8012bae:	061b      	lsls	r3, r3, #24
 8012bb0:	697a      	ldr	r2, [r7, #20]
 8012bb2:	4313      	orrs	r3, r2
 8012bb4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8012bb6:	683b      	ldr	r3, [r7, #0]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d120      	bne.n	8012bfe <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	43db      	mvns	r3, r3
 8012bc6:	ea02 0103 	and.w	r1, r2, r3
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	697a      	ldr	r2, [r7, #20]
 8012bd0:	430a      	orrs	r2, r1
 8012bd2:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	693a      	ldr	r2, [r7, #16]
 8012bda:	6812      	ldr	r2, [r2, #0]
 8012bdc:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8012bde:	693b      	ldr	r3, [r7, #16]
 8012be0:	685b      	ldr	r3, [r3, #4]
 8012be2:	2b0a      	cmp	r3, #10
 8012be4:	d003      	beq.n	8012bee <HAL_DMA2D_ConfigLayer+0xb2>
 8012be6:	693b      	ldr	r3, [r7, #16]
 8012be8:	685b      	ldr	r3, [r3, #4]
 8012bea:	2b09      	cmp	r3, #9
 8012bec:	d127      	bne.n	8012c3e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8012bee:	693b      	ldr	r3, [r7, #16]
 8012bf0:	68da      	ldr	r2, [r3, #12]
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8012bfa:	629a      	str	r2, [r3, #40]	; 0x28
 8012bfc:	e01f      	b.n	8012c3e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	69da      	ldr	r2, [r3, #28]
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	43db      	mvns	r3, r3
 8012c08:	ea02 0103 	and.w	r1, r2, r3
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	697a      	ldr	r2, [r7, #20]
 8012c12:	430a      	orrs	r2, r1
 8012c14:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	693a      	ldr	r2, [r7, #16]
 8012c1c:	6812      	ldr	r2, [r2, #0]
 8012c1e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8012c20:	693b      	ldr	r3, [r7, #16]
 8012c22:	685b      	ldr	r3, [r3, #4]
 8012c24:	2b0a      	cmp	r3, #10
 8012c26:	d003      	beq.n	8012c30 <HAL_DMA2D_ConfigLayer+0xf4>
 8012c28:	693b      	ldr	r3, [r7, #16]
 8012c2a:	685b      	ldr	r3, [r3, #4]
 8012c2c:	2b09      	cmp	r3, #9
 8012c2e:	d106      	bne.n	8012c3e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8012c30:	693b      	ldr	r3, [r7, #16]
 8012c32:	68da      	ldr	r2, [r3, #12]
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8012c3c:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	2201      	movs	r2, #1
 8012c42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	2200      	movs	r2, #0
 8012c4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8012c4e:	2300      	movs	r3, #0
}
 8012c50:	4618      	mov	r0, r3
 8012c52:	371c      	adds	r7, #28
 8012c54:	46bd      	mov	sp, r7
 8012c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c5a:	4770      	bx	lr
 8012c5c:	ff03000f 	.word	0xff03000f

08012c60 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8012c60:	b480      	push	{r7}
 8012c62:	b08b      	sub	sp, #44	; 0x2c
 8012c64:	af00      	add	r7, sp, #0
 8012c66:	60f8      	str	r0, [r7, #12]
 8012c68:	60b9      	str	r1, [r7, #8]
 8012c6a:	607a      	str	r2, [r7, #4]
 8012c6c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012c74:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8012c78:	683b      	ldr	r3, [r7, #0]
 8012c7a:	041a      	lsls	r2, r3, #16
 8012c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c7e:	431a      	orrs	r2, r3
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	430a      	orrs	r2, r1
 8012c86:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	687a      	ldr	r2, [r7, #4]
 8012c8e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	685b      	ldr	r3, [r3, #4]
 8012c94:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8012c98:	d174      	bne.n	8012d84 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8012c9a:	68bb      	ldr	r3, [r7, #8]
 8012c9c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012ca0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8012ca2:	68bb      	ldr	r3, [r7, #8]
 8012ca4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8012ca8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8012caa:	68bb      	ldr	r3, [r7, #8]
 8012cac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8012cb0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8012cb2:	68bb      	ldr	r3, [r7, #8]
 8012cb4:	b2db      	uxtb	r3, r3
 8012cb6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	689b      	ldr	r3, [r3, #8]
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d108      	bne.n	8012cd2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8012cc0:	69ba      	ldr	r2, [r7, #24]
 8012cc2:	69fb      	ldr	r3, [r7, #28]
 8012cc4:	431a      	orrs	r2, r3
 8012cc6:	6a3b      	ldr	r3, [r7, #32]
 8012cc8:	4313      	orrs	r3, r2
 8012cca:	697a      	ldr	r2, [r7, #20]
 8012ccc:	4313      	orrs	r3, r2
 8012cce:	627b      	str	r3, [r7, #36]	; 0x24
 8012cd0:	e053      	b.n	8012d7a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	689b      	ldr	r3, [r3, #8]
 8012cd6:	2b01      	cmp	r3, #1
 8012cd8:	d106      	bne.n	8012ce8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8012cda:	69ba      	ldr	r2, [r7, #24]
 8012cdc:	69fb      	ldr	r3, [r7, #28]
 8012cde:	4313      	orrs	r3, r2
 8012ce0:	697a      	ldr	r2, [r7, #20]
 8012ce2:	4313      	orrs	r3, r2
 8012ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8012ce6:	e048      	b.n	8012d7a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	689b      	ldr	r3, [r3, #8]
 8012cec:	2b02      	cmp	r3, #2
 8012cee:	d111      	bne.n	8012d14 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8012cf0:	69fb      	ldr	r3, [r7, #28]
 8012cf2:	0cdb      	lsrs	r3, r3, #19
 8012cf4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8012cf6:	69bb      	ldr	r3, [r7, #24]
 8012cf8:	0a9b      	lsrs	r3, r3, #10
 8012cfa:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8012cfc:	697b      	ldr	r3, [r7, #20]
 8012cfe:	08db      	lsrs	r3, r3, #3
 8012d00:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8012d02:	69bb      	ldr	r3, [r7, #24]
 8012d04:	015a      	lsls	r2, r3, #5
 8012d06:	69fb      	ldr	r3, [r7, #28]
 8012d08:	02db      	lsls	r3, r3, #11
 8012d0a:	4313      	orrs	r3, r2
 8012d0c:	697a      	ldr	r2, [r7, #20]
 8012d0e:	4313      	orrs	r3, r2
 8012d10:	627b      	str	r3, [r7, #36]	; 0x24
 8012d12:	e032      	b.n	8012d7a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	689b      	ldr	r3, [r3, #8]
 8012d18:	2b03      	cmp	r3, #3
 8012d1a:	d117      	bne.n	8012d4c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8012d1c:	6a3b      	ldr	r3, [r7, #32]
 8012d1e:	0fdb      	lsrs	r3, r3, #31
 8012d20:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8012d22:	69fb      	ldr	r3, [r7, #28]
 8012d24:	0cdb      	lsrs	r3, r3, #19
 8012d26:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8012d28:	69bb      	ldr	r3, [r7, #24]
 8012d2a:	0adb      	lsrs	r3, r3, #11
 8012d2c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8012d2e:	697b      	ldr	r3, [r7, #20]
 8012d30:	08db      	lsrs	r3, r3, #3
 8012d32:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8012d34:	69bb      	ldr	r3, [r7, #24]
 8012d36:	015a      	lsls	r2, r3, #5
 8012d38:	69fb      	ldr	r3, [r7, #28]
 8012d3a:	029b      	lsls	r3, r3, #10
 8012d3c:	431a      	orrs	r2, r3
 8012d3e:	6a3b      	ldr	r3, [r7, #32]
 8012d40:	03db      	lsls	r3, r3, #15
 8012d42:	4313      	orrs	r3, r2
 8012d44:	697a      	ldr	r2, [r7, #20]
 8012d46:	4313      	orrs	r3, r2
 8012d48:	627b      	str	r3, [r7, #36]	; 0x24
 8012d4a:	e016      	b.n	8012d7a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8012d4c:	6a3b      	ldr	r3, [r7, #32]
 8012d4e:	0f1b      	lsrs	r3, r3, #28
 8012d50:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8012d52:	69fb      	ldr	r3, [r7, #28]
 8012d54:	0d1b      	lsrs	r3, r3, #20
 8012d56:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8012d58:	69bb      	ldr	r3, [r7, #24]
 8012d5a:	0b1b      	lsrs	r3, r3, #12
 8012d5c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8012d5e:	697b      	ldr	r3, [r7, #20]
 8012d60:	091b      	lsrs	r3, r3, #4
 8012d62:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8012d64:	69bb      	ldr	r3, [r7, #24]
 8012d66:	011a      	lsls	r2, r3, #4
 8012d68:	69fb      	ldr	r3, [r7, #28]
 8012d6a:	021b      	lsls	r3, r3, #8
 8012d6c:	431a      	orrs	r2, r3
 8012d6e:	6a3b      	ldr	r3, [r7, #32]
 8012d70:	031b      	lsls	r3, r3, #12
 8012d72:	4313      	orrs	r3, r2
 8012d74:	697a      	ldr	r2, [r7, #20]
 8012d76:	4313      	orrs	r3, r2
 8012d78:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d80:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8012d82:	e003      	b.n	8012d8c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	68ba      	ldr	r2, [r7, #8]
 8012d8a:	60da      	str	r2, [r3, #12]
}
 8012d8c:	bf00      	nop
 8012d8e:	372c      	adds	r7, #44	; 0x2c
 8012d90:	46bd      	mov	sp, r7
 8012d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d96:	4770      	bx	lr

08012d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8012d98:	b480      	push	{r7}
 8012d9a:	b089      	sub	sp, #36	; 0x24
 8012d9c:	af00      	add	r7, sp, #0
 8012d9e:	6078      	str	r0, [r7, #4]
 8012da0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8012da2:	2300      	movs	r3, #0
 8012da4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8012da6:	2300      	movs	r3, #0
 8012da8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8012daa:	2300      	movs	r3, #0
 8012dac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8012dae:	2300      	movs	r3, #0
 8012db0:	61fb      	str	r3, [r7, #28]
 8012db2:	e177      	b.n	80130a4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8012db4:	2201      	movs	r2, #1
 8012db6:	69fb      	ldr	r3, [r7, #28]
 8012db8:	fa02 f303 	lsl.w	r3, r2, r3
 8012dbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8012dbe:	683b      	ldr	r3, [r7, #0]
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	697a      	ldr	r2, [r7, #20]
 8012dc4:	4013      	ands	r3, r2
 8012dc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8012dc8:	693a      	ldr	r2, [r7, #16]
 8012dca:	697b      	ldr	r3, [r7, #20]
 8012dcc:	429a      	cmp	r2, r3
 8012dce:	f040 8166 	bne.w	801309e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8012dd2:	683b      	ldr	r3, [r7, #0]
 8012dd4:	685b      	ldr	r3, [r3, #4]
 8012dd6:	2b01      	cmp	r3, #1
 8012dd8:	d00b      	beq.n	8012df2 <HAL_GPIO_Init+0x5a>
 8012dda:	683b      	ldr	r3, [r7, #0]
 8012ddc:	685b      	ldr	r3, [r3, #4]
 8012dde:	2b02      	cmp	r3, #2
 8012de0:	d007      	beq.n	8012df2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8012de2:	683b      	ldr	r3, [r7, #0]
 8012de4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8012de6:	2b11      	cmp	r3, #17
 8012de8:	d003      	beq.n	8012df2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8012dea:	683b      	ldr	r3, [r7, #0]
 8012dec:	685b      	ldr	r3, [r3, #4]
 8012dee:	2b12      	cmp	r3, #18
 8012df0:	d130      	bne.n	8012e54 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	689b      	ldr	r3, [r3, #8]
 8012df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8012df8:	69fb      	ldr	r3, [r7, #28]
 8012dfa:	005b      	lsls	r3, r3, #1
 8012dfc:	2203      	movs	r2, #3
 8012dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8012e02:	43db      	mvns	r3, r3
 8012e04:	69ba      	ldr	r2, [r7, #24]
 8012e06:	4013      	ands	r3, r2
 8012e08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8012e0a:	683b      	ldr	r3, [r7, #0]
 8012e0c:	68da      	ldr	r2, [r3, #12]
 8012e0e:	69fb      	ldr	r3, [r7, #28]
 8012e10:	005b      	lsls	r3, r3, #1
 8012e12:	fa02 f303 	lsl.w	r3, r2, r3
 8012e16:	69ba      	ldr	r2, [r7, #24]
 8012e18:	4313      	orrs	r3, r2
 8012e1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	69ba      	ldr	r2, [r7, #24]
 8012e20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	685b      	ldr	r3, [r3, #4]
 8012e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8012e28:	2201      	movs	r2, #1
 8012e2a:	69fb      	ldr	r3, [r7, #28]
 8012e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8012e30:	43db      	mvns	r3, r3
 8012e32:	69ba      	ldr	r2, [r7, #24]
 8012e34:	4013      	ands	r3, r2
 8012e36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8012e38:	683b      	ldr	r3, [r7, #0]
 8012e3a:	685b      	ldr	r3, [r3, #4]
 8012e3c:	091b      	lsrs	r3, r3, #4
 8012e3e:	f003 0201 	and.w	r2, r3, #1
 8012e42:	69fb      	ldr	r3, [r7, #28]
 8012e44:	fa02 f303 	lsl.w	r3, r2, r3
 8012e48:	69ba      	ldr	r2, [r7, #24]
 8012e4a:	4313      	orrs	r3, r2
 8012e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	69ba      	ldr	r2, [r7, #24]
 8012e52:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	68db      	ldr	r3, [r3, #12]
 8012e58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8012e5a:	69fb      	ldr	r3, [r7, #28]
 8012e5c:	005b      	lsls	r3, r3, #1
 8012e5e:	2203      	movs	r2, #3
 8012e60:	fa02 f303 	lsl.w	r3, r2, r3
 8012e64:	43db      	mvns	r3, r3
 8012e66:	69ba      	ldr	r2, [r7, #24]
 8012e68:	4013      	ands	r3, r2
 8012e6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8012e6c:	683b      	ldr	r3, [r7, #0]
 8012e6e:	689a      	ldr	r2, [r3, #8]
 8012e70:	69fb      	ldr	r3, [r7, #28]
 8012e72:	005b      	lsls	r3, r3, #1
 8012e74:	fa02 f303 	lsl.w	r3, r2, r3
 8012e78:	69ba      	ldr	r2, [r7, #24]
 8012e7a:	4313      	orrs	r3, r2
 8012e7c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	69ba      	ldr	r2, [r7, #24]
 8012e82:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8012e84:	683b      	ldr	r3, [r7, #0]
 8012e86:	685b      	ldr	r3, [r3, #4]
 8012e88:	2b02      	cmp	r3, #2
 8012e8a:	d003      	beq.n	8012e94 <HAL_GPIO_Init+0xfc>
 8012e8c:	683b      	ldr	r3, [r7, #0]
 8012e8e:	685b      	ldr	r3, [r3, #4]
 8012e90:	2b12      	cmp	r3, #18
 8012e92:	d123      	bne.n	8012edc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8012e94:	69fb      	ldr	r3, [r7, #28]
 8012e96:	08da      	lsrs	r2, r3, #3
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	3208      	adds	r2, #8
 8012e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8012ea2:	69fb      	ldr	r3, [r7, #28]
 8012ea4:	f003 0307 	and.w	r3, r3, #7
 8012ea8:	009b      	lsls	r3, r3, #2
 8012eaa:	220f      	movs	r2, #15
 8012eac:	fa02 f303 	lsl.w	r3, r2, r3
 8012eb0:	43db      	mvns	r3, r3
 8012eb2:	69ba      	ldr	r2, [r7, #24]
 8012eb4:	4013      	ands	r3, r2
 8012eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8012eb8:	683b      	ldr	r3, [r7, #0]
 8012eba:	691a      	ldr	r2, [r3, #16]
 8012ebc:	69fb      	ldr	r3, [r7, #28]
 8012ebe:	f003 0307 	and.w	r3, r3, #7
 8012ec2:	009b      	lsls	r3, r3, #2
 8012ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8012ec8:	69ba      	ldr	r2, [r7, #24]
 8012eca:	4313      	orrs	r3, r2
 8012ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8012ece:	69fb      	ldr	r3, [r7, #28]
 8012ed0:	08da      	lsrs	r2, r3, #3
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	3208      	adds	r2, #8
 8012ed6:	69b9      	ldr	r1, [r7, #24]
 8012ed8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8012ee2:	69fb      	ldr	r3, [r7, #28]
 8012ee4:	005b      	lsls	r3, r3, #1
 8012ee6:	2203      	movs	r2, #3
 8012ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8012eec:	43db      	mvns	r3, r3
 8012eee:	69ba      	ldr	r2, [r7, #24]
 8012ef0:	4013      	ands	r3, r2
 8012ef2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8012ef4:	683b      	ldr	r3, [r7, #0]
 8012ef6:	685b      	ldr	r3, [r3, #4]
 8012ef8:	f003 0203 	and.w	r2, r3, #3
 8012efc:	69fb      	ldr	r3, [r7, #28]
 8012efe:	005b      	lsls	r3, r3, #1
 8012f00:	fa02 f303 	lsl.w	r3, r2, r3
 8012f04:	69ba      	ldr	r2, [r7, #24]
 8012f06:	4313      	orrs	r3, r2
 8012f08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	69ba      	ldr	r2, [r7, #24]
 8012f0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8012f10:	683b      	ldr	r3, [r7, #0]
 8012f12:	685b      	ldr	r3, [r3, #4]
 8012f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	f000 80c0 	beq.w	801309e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012f1e:	2300      	movs	r3, #0
 8012f20:	60fb      	str	r3, [r7, #12]
 8012f22:	4b65      	ldr	r3, [pc, #404]	; (80130b8 <HAL_GPIO_Init+0x320>)
 8012f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012f26:	4a64      	ldr	r2, [pc, #400]	; (80130b8 <HAL_GPIO_Init+0x320>)
 8012f28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8012f2e:	4b62      	ldr	r3, [pc, #392]	; (80130b8 <HAL_GPIO_Init+0x320>)
 8012f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012f36:	60fb      	str	r3, [r7, #12]
 8012f38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8012f3a:	4a60      	ldr	r2, [pc, #384]	; (80130bc <HAL_GPIO_Init+0x324>)
 8012f3c:	69fb      	ldr	r3, [r7, #28]
 8012f3e:	089b      	lsrs	r3, r3, #2
 8012f40:	3302      	adds	r3, #2
 8012f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8012f48:	69fb      	ldr	r3, [r7, #28]
 8012f4a:	f003 0303 	and.w	r3, r3, #3
 8012f4e:	009b      	lsls	r3, r3, #2
 8012f50:	220f      	movs	r2, #15
 8012f52:	fa02 f303 	lsl.w	r3, r2, r3
 8012f56:	43db      	mvns	r3, r3
 8012f58:	69ba      	ldr	r2, [r7, #24]
 8012f5a:	4013      	ands	r3, r2
 8012f5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	4a57      	ldr	r2, [pc, #348]	; (80130c0 <HAL_GPIO_Init+0x328>)
 8012f62:	4293      	cmp	r3, r2
 8012f64:	d037      	beq.n	8012fd6 <HAL_GPIO_Init+0x23e>
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	4a56      	ldr	r2, [pc, #344]	; (80130c4 <HAL_GPIO_Init+0x32c>)
 8012f6a:	4293      	cmp	r3, r2
 8012f6c:	d031      	beq.n	8012fd2 <HAL_GPIO_Init+0x23a>
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	4a55      	ldr	r2, [pc, #340]	; (80130c8 <HAL_GPIO_Init+0x330>)
 8012f72:	4293      	cmp	r3, r2
 8012f74:	d02b      	beq.n	8012fce <HAL_GPIO_Init+0x236>
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	4a54      	ldr	r2, [pc, #336]	; (80130cc <HAL_GPIO_Init+0x334>)
 8012f7a:	4293      	cmp	r3, r2
 8012f7c:	d025      	beq.n	8012fca <HAL_GPIO_Init+0x232>
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	4a53      	ldr	r2, [pc, #332]	; (80130d0 <HAL_GPIO_Init+0x338>)
 8012f82:	4293      	cmp	r3, r2
 8012f84:	d01f      	beq.n	8012fc6 <HAL_GPIO_Init+0x22e>
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	4a52      	ldr	r2, [pc, #328]	; (80130d4 <HAL_GPIO_Init+0x33c>)
 8012f8a:	4293      	cmp	r3, r2
 8012f8c:	d019      	beq.n	8012fc2 <HAL_GPIO_Init+0x22a>
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	4a51      	ldr	r2, [pc, #324]	; (80130d8 <HAL_GPIO_Init+0x340>)
 8012f92:	4293      	cmp	r3, r2
 8012f94:	d013      	beq.n	8012fbe <HAL_GPIO_Init+0x226>
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	4a50      	ldr	r2, [pc, #320]	; (80130dc <HAL_GPIO_Init+0x344>)
 8012f9a:	4293      	cmp	r3, r2
 8012f9c:	d00d      	beq.n	8012fba <HAL_GPIO_Init+0x222>
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	4a4f      	ldr	r2, [pc, #316]	; (80130e0 <HAL_GPIO_Init+0x348>)
 8012fa2:	4293      	cmp	r3, r2
 8012fa4:	d007      	beq.n	8012fb6 <HAL_GPIO_Init+0x21e>
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	4a4e      	ldr	r2, [pc, #312]	; (80130e4 <HAL_GPIO_Init+0x34c>)
 8012faa:	4293      	cmp	r3, r2
 8012fac:	d101      	bne.n	8012fb2 <HAL_GPIO_Init+0x21a>
 8012fae:	2309      	movs	r3, #9
 8012fb0:	e012      	b.n	8012fd8 <HAL_GPIO_Init+0x240>
 8012fb2:	230a      	movs	r3, #10
 8012fb4:	e010      	b.n	8012fd8 <HAL_GPIO_Init+0x240>
 8012fb6:	2308      	movs	r3, #8
 8012fb8:	e00e      	b.n	8012fd8 <HAL_GPIO_Init+0x240>
 8012fba:	2307      	movs	r3, #7
 8012fbc:	e00c      	b.n	8012fd8 <HAL_GPIO_Init+0x240>
 8012fbe:	2306      	movs	r3, #6
 8012fc0:	e00a      	b.n	8012fd8 <HAL_GPIO_Init+0x240>
 8012fc2:	2305      	movs	r3, #5
 8012fc4:	e008      	b.n	8012fd8 <HAL_GPIO_Init+0x240>
 8012fc6:	2304      	movs	r3, #4
 8012fc8:	e006      	b.n	8012fd8 <HAL_GPIO_Init+0x240>
 8012fca:	2303      	movs	r3, #3
 8012fcc:	e004      	b.n	8012fd8 <HAL_GPIO_Init+0x240>
 8012fce:	2302      	movs	r3, #2
 8012fd0:	e002      	b.n	8012fd8 <HAL_GPIO_Init+0x240>
 8012fd2:	2301      	movs	r3, #1
 8012fd4:	e000      	b.n	8012fd8 <HAL_GPIO_Init+0x240>
 8012fd6:	2300      	movs	r3, #0
 8012fd8:	69fa      	ldr	r2, [r7, #28]
 8012fda:	f002 0203 	and.w	r2, r2, #3
 8012fde:	0092      	lsls	r2, r2, #2
 8012fe0:	4093      	lsls	r3, r2
 8012fe2:	69ba      	ldr	r2, [r7, #24]
 8012fe4:	4313      	orrs	r3, r2
 8012fe6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8012fe8:	4934      	ldr	r1, [pc, #208]	; (80130bc <HAL_GPIO_Init+0x324>)
 8012fea:	69fb      	ldr	r3, [r7, #28]
 8012fec:	089b      	lsrs	r3, r3, #2
 8012fee:	3302      	adds	r3, #2
 8012ff0:	69ba      	ldr	r2, [r7, #24]
 8012ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8012ff6:	4b3c      	ldr	r3, [pc, #240]	; (80130e8 <HAL_GPIO_Init+0x350>)
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012ffc:	693b      	ldr	r3, [r7, #16]
 8012ffe:	43db      	mvns	r3, r3
 8013000:	69ba      	ldr	r2, [r7, #24]
 8013002:	4013      	ands	r3, r2
 8013004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8013006:	683b      	ldr	r3, [r7, #0]
 8013008:	685b      	ldr	r3, [r3, #4]
 801300a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801300e:	2b00      	cmp	r3, #0
 8013010:	d003      	beq.n	801301a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8013012:	69ba      	ldr	r2, [r7, #24]
 8013014:	693b      	ldr	r3, [r7, #16]
 8013016:	4313      	orrs	r3, r2
 8013018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801301a:	4a33      	ldr	r2, [pc, #204]	; (80130e8 <HAL_GPIO_Init+0x350>)
 801301c:	69bb      	ldr	r3, [r7, #24]
 801301e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8013020:	4b31      	ldr	r3, [pc, #196]	; (80130e8 <HAL_GPIO_Init+0x350>)
 8013022:	685b      	ldr	r3, [r3, #4]
 8013024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8013026:	693b      	ldr	r3, [r7, #16]
 8013028:	43db      	mvns	r3, r3
 801302a:	69ba      	ldr	r2, [r7, #24]
 801302c:	4013      	ands	r3, r2
 801302e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8013030:	683b      	ldr	r3, [r7, #0]
 8013032:	685b      	ldr	r3, [r3, #4]
 8013034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013038:	2b00      	cmp	r3, #0
 801303a:	d003      	beq.n	8013044 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 801303c:	69ba      	ldr	r2, [r7, #24]
 801303e:	693b      	ldr	r3, [r7, #16]
 8013040:	4313      	orrs	r3, r2
 8013042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8013044:	4a28      	ldr	r2, [pc, #160]	; (80130e8 <HAL_GPIO_Init+0x350>)
 8013046:	69bb      	ldr	r3, [r7, #24]
 8013048:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801304a:	4b27      	ldr	r3, [pc, #156]	; (80130e8 <HAL_GPIO_Init+0x350>)
 801304c:	689b      	ldr	r3, [r3, #8]
 801304e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8013050:	693b      	ldr	r3, [r7, #16]
 8013052:	43db      	mvns	r3, r3
 8013054:	69ba      	ldr	r2, [r7, #24]
 8013056:	4013      	ands	r3, r2
 8013058:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801305a:	683b      	ldr	r3, [r7, #0]
 801305c:	685b      	ldr	r3, [r3, #4]
 801305e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013062:	2b00      	cmp	r3, #0
 8013064:	d003      	beq.n	801306e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8013066:	69ba      	ldr	r2, [r7, #24]
 8013068:	693b      	ldr	r3, [r7, #16]
 801306a:	4313      	orrs	r3, r2
 801306c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801306e:	4a1e      	ldr	r2, [pc, #120]	; (80130e8 <HAL_GPIO_Init+0x350>)
 8013070:	69bb      	ldr	r3, [r7, #24]
 8013072:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8013074:	4b1c      	ldr	r3, [pc, #112]	; (80130e8 <HAL_GPIO_Init+0x350>)
 8013076:	68db      	ldr	r3, [r3, #12]
 8013078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801307a:	693b      	ldr	r3, [r7, #16]
 801307c:	43db      	mvns	r3, r3
 801307e:	69ba      	ldr	r2, [r7, #24]
 8013080:	4013      	ands	r3, r2
 8013082:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8013084:	683b      	ldr	r3, [r7, #0]
 8013086:	685b      	ldr	r3, [r3, #4]
 8013088:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801308c:	2b00      	cmp	r3, #0
 801308e:	d003      	beq.n	8013098 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8013090:	69ba      	ldr	r2, [r7, #24]
 8013092:	693b      	ldr	r3, [r7, #16]
 8013094:	4313      	orrs	r3, r2
 8013096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8013098:	4a13      	ldr	r2, [pc, #76]	; (80130e8 <HAL_GPIO_Init+0x350>)
 801309a:	69bb      	ldr	r3, [r7, #24]
 801309c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801309e:	69fb      	ldr	r3, [r7, #28]
 80130a0:	3301      	adds	r3, #1
 80130a2:	61fb      	str	r3, [r7, #28]
 80130a4:	69fb      	ldr	r3, [r7, #28]
 80130a6:	2b0f      	cmp	r3, #15
 80130a8:	f67f ae84 	bls.w	8012db4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80130ac:	bf00      	nop
 80130ae:	3724      	adds	r7, #36	; 0x24
 80130b0:	46bd      	mov	sp, r7
 80130b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130b6:	4770      	bx	lr
 80130b8:	40023800 	.word	0x40023800
 80130bc:	40013800 	.word	0x40013800
 80130c0:	40020000 	.word	0x40020000
 80130c4:	40020400 	.word	0x40020400
 80130c8:	40020800 	.word	0x40020800
 80130cc:	40020c00 	.word	0x40020c00
 80130d0:	40021000 	.word	0x40021000
 80130d4:	40021400 	.word	0x40021400
 80130d8:	40021800 	.word	0x40021800
 80130dc:	40021c00 	.word	0x40021c00
 80130e0:	40022000 	.word	0x40022000
 80130e4:	40022400 	.word	0x40022400
 80130e8:	40013c00 	.word	0x40013c00

080130ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80130ec:	b480      	push	{r7}
 80130ee:	b083      	sub	sp, #12
 80130f0:	af00      	add	r7, sp, #0
 80130f2:	6078      	str	r0, [r7, #4]
 80130f4:	460b      	mov	r3, r1
 80130f6:	807b      	strh	r3, [r7, #2]
 80130f8:	4613      	mov	r3, r2
 80130fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80130fc:	787b      	ldrb	r3, [r7, #1]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d003      	beq.n	801310a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8013102:	887a      	ldrh	r2, [r7, #2]
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8013108:	e003      	b.n	8013112 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801310a:	887b      	ldrh	r3, [r7, #2]
 801310c:	041a      	lsls	r2, r3, #16
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	619a      	str	r2, [r3, #24]
}
 8013112:	bf00      	nop
 8013114:	370c      	adds	r7, #12
 8013116:	46bd      	mov	sp, r7
 8013118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801311c:	4770      	bx	lr
	...

08013120 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8013120:	b580      	push	{r7, lr}
 8013122:	b084      	sub	sp, #16
 8013124:	af00      	add	r7, sp, #0
 8013126:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	2b00      	cmp	r3, #0
 801312c:	d101      	bne.n	8013132 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801312e:	2301      	movs	r3, #1
 8013130:	e11f      	b.n	8013372 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013138:	b2db      	uxtb	r3, r3
 801313a:	2b00      	cmp	r3, #0
 801313c:	d106      	bne.n	801314c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	2200      	movs	r2, #0
 8013142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8013146:	6878      	ldr	r0, [r7, #4]
 8013148:	f7f8 fce0 	bl	800bb0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	2224      	movs	r2, #36	; 0x24
 8013150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	681a      	ldr	r2, [r3, #0]
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	681b      	ldr	r3, [r3, #0]
 801315e:	f022 0201 	bic.w	r2, r2, #1
 8013162:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	681a      	ldr	r2, [r3, #0]
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8013172:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	681a      	ldr	r2, [r3, #0]
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8013182:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8013184:	f001 ffc6 	bl	8015114 <HAL_RCC_GetPCLK1Freq>
 8013188:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	685b      	ldr	r3, [r3, #4]
 801318e:	4a7b      	ldr	r2, [pc, #492]	; (801337c <HAL_I2C_Init+0x25c>)
 8013190:	4293      	cmp	r3, r2
 8013192:	d807      	bhi.n	80131a4 <HAL_I2C_Init+0x84>
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	4a7a      	ldr	r2, [pc, #488]	; (8013380 <HAL_I2C_Init+0x260>)
 8013198:	4293      	cmp	r3, r2
 801319a:	bf94      	ite	ls
 801319c:	2301      	movls	r3, #1
 801319e:	2300      	movhi	r3, #0
 80131a0:	b2db      	uxtb	r3, r3
 80131a2:	e006      	b.n	80131b2 <HAL_I2C_Init+0x92>
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	4a77      	ldr	r2, [pc, #476]	; (8013384 <HAL_I2C_Init+0x264>)
 80131a8:	4293      	cmp	r3, r2
 80131aa:	bf94      	ite	ls
 80131ac:	2301      	movls	r3, #1
 80131ae:	2300      	movhi	r3, #0
 80131b0:	b2db      	uxtb	r3, r3
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d001      	beq.n	80131ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80131b6:	2301      	movs	r3, #1
 80131b8:	e0db      	b.n	8013372 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	4a72      	ldr	r2, [pc, #456]	; (8013388 <HAL_I2C_Init+0x268>)
 80131be:	fba2 2303 	umull	r2, r3, r2, r3
 80131c2:	0c9b      	lsrs	r3, r3, #18
 80131c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	685b      	ldr	r3, [r3, #4]
 80131cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	68ba      	ldr	r2, [r7, #8]
 80131d6:	430a      	orrs	r2, r1
 80131d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	6a1b      	ldr	r3, [r3, #32]
 80131e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	685b      	ldr	r3, [r3, #4]
 80131e8:	4a64      	ldr	r2, [pc, #400]	; (801337c <HAL_I2C_Init+0x25c>)
 80131ea:	4293      	cmp	r3, r2
 80131ec:	d802      	bhi.n	80131f4 <HAL_I2C_Init+0xd4>
 80131ee:	68bb      	ldr	r3, [r7, #8]
 80131f0:	3301      	adds	r3, #1
 80131f2:	e009      	b.n	8013208 <HAL_I2C_Init+0xe8>
 80131f4:	68bb      	ldr	r3, [r7, #8]
 80131f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80131fa:	fb02 f303 	mul.w	r3, r2, r3
 80131fe:	4a63      	ldr	r2, [pc, #396]	; (801338c <HAL_I2C_Init+0x26c>)
 8013200:	fba2 2303 	umull	r2, r3, r2, r3
 8013204:	099b      	lsrs	r3, r3, #6
 8013206:	3301      	adds	r3, #1
 8013208:	687a      	ldr	r2, [r7, #4]
 801320a:	6812      	ldr	r2, [r2, #0]
 801320c:	430b      	orrs	r3, r1
 801320e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	69db      	ldr	r3, [r3, #28]
 8013216:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 801321a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	685b      	ldr	r3, [r3, #4]
 8013222:	4956      	ldr	r1, [pc, #344]	; (801337c <HAL_I2C_Init+0x25c>)
 8013224:	428b      	cmp	r3, r1
 8013226:	d80d      	bhi.n	8013244 <HAL_I2C_Init+0x124>
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	1e59      	subs	r1, r3, #1
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	685b      	ldr	r3, [r3, #4]
 8013230:	005b      	lsls	r3, r3, #1
 8013232:	fbb1 f3f3 	udiv	r3, r1, r3
 8013236:	3301      	adds	r3, #1
 8013238:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801323c:	2b04      	cmp	r3, #4
 801323e:	bf38      	it	cc
 8013240:	2304      	movcc	r3, #4
 8013242:	e04f      	b.n	80132e4 <HAL_I2C_Init+0x1c4>
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	689b      	ldr	r3, [r3, #8]
 8013248:	2b00      	cmp	r3, #0
 801324a:	d111      	bne.n	8013270 <HAL_I2C_Init+0x150>
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	1e58      	subs	r0, r3, #1
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	6859      	ldr	r1, [r3, #4]
 8013254:	460b      	mov	r3, r1
 8013256:	005b      	lsls	r3, r3, #1
 8013258:	440b      	add	r3, r1
 801325a:	fbb0 f3f3 	udiv	r3, r0, r3
 801325e:	3301      	adds	r3, #1
 8013260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013264:	2b00      	cmp	r3, #0
 8013266:	bf0c      	ite	eq
 8013268:	2301      	moveq	r3, #1
 801326a:	2300      	movne	r3, #0
 801326c:	b2db      	uxtb	r3, r3
 801326e:	e012      	b.n	8013296 <HAL_I2C_Init+0x176>
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	1e58      	subs	r0, r3, #1
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	6859      	ldr	r1, [r3, #4]
 8013278:	460b      	mov	r3, r1
 801327a:	009b      	lsls	r3, r3, #2
 801327c:	440b      	add	r3, r1
 801327e:	0099      	lsls	r1, r3, #2
 8013280:	440b      	add	r3, r1
 8013282:	fbb0 f3f3 	udiv	r3, r0, r3
 8013286:	3301      	adds	r3, #1
 8013288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801328c:	2b00      	cmp	r3, #0
 801328e:	bf0c      	ite	eq
 8013290:	2301      	moveq	r3, #1
 8013292:	2300      	movne	r3, #0
 8013294:	b2db      	uxtb	r3, r3
 8013296:	2b00      	cmp	r3, #0
 8013298:	d001      	beq.n	801329e <HAL_I2C_Init+0x17e>
 801329a:	2301      	movs	r3, #1
 801329c:	e022      	b.n	80132e4 <HAL_I2C_Init+0x1c4>
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	689b      	ldr	r3, [r3, #8]
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d10e      	bne.n	80132c4 <HAL_I2C_Init+0x1a4>
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	1e58      	subs	r0, r3, #1
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	6859      	ldr	r1, [r3, #4]
 80132ae:	460b      	mov	r3, r1
 80132b0:	005b      	lsls	r3, r3, #1
 80132b2:	440b      	add	r3, r1
 80132b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80132b8:	3301      	adds	r3, #1
 80132ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80132be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80132c2:	e00f      	b.n	80132e4 <HAL_I2C_Init+0x1c4>
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	1e58      	subs	r0, r3, #1
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	6859      	ldr	r1, [r3, #4]
 80132cc:	460b      	mov	r3, r1
 80132ce:	009b      	lsls	r3, r3, #2
 80132d0:	440b      	add	r3, r1
 80132d2:	0099      	lsls	r1, r3, #2
 80132d4:	440b      	add	r3, r1
 80132d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80132da:	3301      	adds	r3, #1
 80132dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80132e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80132e4:	6879      	ldr	r1, [r7, #4]
 80132e6:	6809      	ldr	r1, [r1, #0]
 80132e8:	4313      	orrs	r3, r2
 80132ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	69da      	ldr	r2, [r3, #28]
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	6a1b      	ldr	r3, [r3, #32]
 80132fe:	431a      	orrs	r2, r3
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	430a      	orrs	r2, r1
 8013306:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	689b      	ldr	r3, [r3, #8]
 801330e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8013312:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8013316:	687a      	ldr	r2, [r7, #4]
 8013318:	6911      	ldr	r1, [r2, #16]
 801331a:	687a      	ldr	r2, [r7, #4]
 801331c:	68d2      	ldr	r2, [r2, #12]
 801331e:	4311      	orrs	r1, r2
 8013320:	687a      	ldr	r2, [r7, #4]
 8013322:	6812      	ldr	r2, [r2, #0]
 8013324:	430b      	orrs	r3, r1
 8013326:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	68db      	ldr	r3, [r3, #12]
 801332e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	695a      	ldr	r2, [r3, #20]
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	699b      	ldr	r3, [r3, #24]
 801333a:	431a      	orrs	r2, r3
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	430a      	orrs	r2, r1
 8013342:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	681b      	ldr	r3, [r3, #0]
 8013348:	681a      	ldr	r2, [r3, #0]
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	f042 0201 	orr.w	r2, r2, #1
 8013352:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	2200      	movs	r2, #0
 8013358:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	2220      	movs	r2, #32
 801335e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	2200      	movs	r2, #0
 8013366:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	2200      	movs	r2, #0
 801336c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8013370:	2300      	movs	r3, #0
}
 8013372:	4618      	mov	r0, r3
 8013374:	3710      	adds	r7, #16
 8013376:	46bd      	mov	sp, r7
 8013378:	bd80      	pop	{r7, pc}
 801337a:	bf00      	nop
 801337c:	000186a0 	.word	0x000186a0
 8013380:	001e847f 	.word	0x001e847f
 8013384:	003d08ff 	.word	0x003d08ff
 8013388:	431bde83 	.word	0x431bde83
 801338c:	10624dd3 	.word	0x10624dd3

08013390 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013390:	b580      	push	{r7, lr}
 8013392:	b088      	sub	sp, #32
 8013394:	af02      	add	r7, sp, #8
 8013396:	60f8      	str	r0, [r7, #12]
 8013398:	4608      	mov	r0, r1
 801339a:	4611      	mov	r1, r2
 801339c:	461a      	mov	r2, r3
 801339e:	4603      	mov	r3, r0
 80133a0:	817b      	strh	r3, [r7, #10]
 80133a2:	460b      	mov	r3, r1
 80133a4:	813b      	strh	r3, [r7, #8]
 80133a6:	4613      	mov	r3, r2
 80133a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80133aa:	f7fe fdbd 	bl	8011f28 <HAL_GetTick>
 80133ae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80133b6:	b2db      	uxtb	r3, r3
 80133b8:	2b20      	cmp	r3, #32
 80133ba:	f040 80d9 	bne.w	8013570 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80133be:	697b      	ldr	r3, [r7, #20]
 80133c0:	9300      	str	r3, [sp, #0]
 80133c2:	2319      	movs	r3, #25
 80133c4:	2201      	movs	r2, #1
 80133c6:	496d      	ldr	r1, [pc, #436]	; (801357c <HAL_I2C_Mem_Write+0x1ec>)
 80133c8:	68f8      	ldr	r0, [r7, #12]
 80133ca:	f000 fc7b 	bl	8013cc4 <I2C_WaitOnFlagUntilTimeout>
 80133ce:	4603      	mov	r3, r0
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d001      	beq.n	80133d8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80133d4:	2302      	movs	r3, #2
 80133d6:	e0cc      	b.n	8013572 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80133d8:	68fb      	ldr	r3, [r7, #12]
 80133da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80133de:	2b01      	cmp	r3, #1
 80133e0:	d101      	bne.n	80133e6 <HAL_I2C_Mem_Write+0x56>
 80133e2:	2302      	movs	r3, #2
 80133e4:	e0c5      	b.n	8013572 <HAL_I2C_Mem_Write+0x1e2>
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	2201      	movs	r2, #1
 80133ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	f003 0301 	and.w	r3, r3, #1
 80133f8:	2b01      	cmp	r3, #1
 80133fa:	d007      	beq.n	801340c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	681a      	ldr	r2, [r3, #0]
 8013402:	68fb      	ldr	r3, [r7, #12]
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	f042 0201 	orr.w	r2, r2, #1
 801340a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801340c:	68fb      	ldr	r3, [r7, #12]
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	681a      	ldr	r2, [r3, #0]
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801341a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801341c:	68fb      	ldr	r3, [r7, #12]
 801341e:	2221      	movs	r2, #33	; 0x21
 8013420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	2240      	movs	r2, #64	; 0x40
 8013428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	2200      	movs	r2, #0
 8013430:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	6a3a      	ldr	r2, [r7, #32]
 8013436:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801343c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013442:	b29a      	uxth	r2, r3
 8013444:	68fb      	ldr	r3, [r7, #12]
 8013446:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	4a4d      	ldr	r2, [pc, #308]	; (8013580 <HAL_I2C_Mem_Write+0x1f0>)
 801344c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 801344e:	88f8      	ldrh	r0, [r7, #6]
 8013450:	893a      	ldrh	r2, [r7, #8]
 8013452:	8979      	ldrh	r1, [r7, #10]
 8013454:	697b      	ldr	r3, [r7, #20]
 8013456:	9301      	str	r3, [sp, #4]
 8013458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801345a:	9300      	str	r3, [sp, #0]
 801345c:	4603      	mov	r3, r0
 801345e:	68f8      	ldr	r0, [r7, #12]
 8013460:	f000 fab6 	bl	80139d0 <I2C_RequestMemoryWrite>
 8013464:	4603      	mov	r3, r0
 8013466:	2b00      	cmp	r3, #0
 8013468:	d052      	beq.n	8013510 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 801346a:	2301      	movs	r3, #1
 801346c:	e081      	b.n	8013572 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801346e:	697a      	ldr	r2, [r7, #20]
 8013470:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013472:	68f8      	ldr	r0, [r7, #12]
 8013474:	f000 fcfc 	bl	8013e70 <I2C_WaitOnTXEFlagUntilTimeout>
 8013478:	4603      	mov	r3, r0
 801347a:	2b00      	cmp	r3, #0
 801347c:	d00d      	beq.n	801349a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013482:	2b04      	cmp	r3, #4
 8013484:	d107      	bne.n	8013496 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	681a      	ldr	r2, [r3, #0]
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013494:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8013496:	2301      	movs	r3, #1
 8013498:	e06b      	b.n	8013572 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801349e:	781a      	ldrb	r2, [r3, #0]
 80134a0:	68fb      	ldr	r3, [r7, #12]
 80134a2:	681b      	ldr	r3, [r3, #0]
 80134a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134aa:	1c5a      	adds	r2, r3, #1
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80134b4:	3b01      	subs	r3, #1
 80134b6:	b29a      	uxth	r2, r3
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80134c0:	b29b      	uxth	r3, r3
 80134c2:	3b01      	subs	r3, #1
 80134c4:	b29a      	uxth	r2, r3
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80134ca:	68fb      	ldr	r3, [r7, #12]
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	695b      	ldr	r3, [r3, #20]
 80134d0:	f003 0304 	and.w	r3, r3, #4
 80134d4:	2b04      	cmp	r3, #4
 80134d6:	d11b      	bne.n	8013510 <HAL_I2C_Mem_Write+0x180>
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d017      	beq.n	8013510 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134e4:	781a      	ldrb	r2, [r3, #0]
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	681b      	ldr	r3, [r3, #0]
 80134ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134f0:	1c5a      	adds	r2, r3, #1
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80134fa:	3b01      	subs	r3, #1
 80134fc:	b29a      	uxth	r2, r3
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8013502:	68fb      	ldr	r3, [r7, #12]
 8013504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013506:	b29b      	uxth	r3, r3
 8013508:	3b01      	subs	r3, #1
 801350a:	b29a      	uxth	r2, r3
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8013510:	68fb      	ldr	r3, [r7, #12]
 8013512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013514:	2b00      	cmp	r3, #0
 8013516:	d1aa      	bne.n	801346e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8013518:	697a      	ldr	r2, [r7, #20]
 801351a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801351c:	68f8      	ldr	r0, [r7, #12]
 801351e:	f000 fce8 	bl	8013ef2 <I2C_WaitOnBTFFlagUntilTimeout>
 8013522:	4603      	mov	r3, r0
 8013524:	2b00      	cmp	r3, #0
 8013526:	d00d      	beq.n	8013544 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8013528:	68fb      	ldr	r3, [r7, #12]
 801352a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801352c:	2b04      	cmp	r3, #4
 801352e:	d107      	bne.n	8013540 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	681b      	ldr	r3, [r3, #0]
 8013534:	681a      	ldr	r2, [r3, #0]
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801353e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8013540:	2301      	movs	r3, #1
 8013542:	e016      	b.n	8013572 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	681b      	ldr	r3, [r3, #0]
 8013548:	681a      	ldr	r2, [r3, #0]
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013552:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	2220      	movs	r2, #32
 8013558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	2200      	movs	r2, #0
 8013560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	2200      	movs	r2, #0
 8013568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 801356c:	2300      	movs	r3, #0
 801356e:	e000      	b.n	8013572 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8013570:	2302      	movs	r3, #2
  }
}
 8013572:	4618      	mov	r0, r3
 8013574:	3718      	adds	r7, #24
 8013576:	46bd      	mov	sp, r7
 8013578:	bd80      	pop	{r7, pc}
 801357a:	bf00      	nop
 801357c:	00100002 	.word	0x00100002
 8013580:	ffff0000 	.word	0xffff0000

08013584 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013584:	b580      	push	{r7, lr}
 8013586:	b08c      	sub	sp, #48	; 0x30
 8013588:	af02      	add	r7, sp, #8
 801358a:	60f8      	str	r0, [r7, #12]
 801358c:	4608      	mov	r0, r1
 801358e:	4611      	mov	r1, r2
 8013590:	461a      	mov	r2, r3
 8013592:	4603      	mov	r3, r0
 8013594:	817b      	strh	r3, [r7, #10]
 8013596:	460b      	mov	r3, r1
 8013598:	813b      	strh	r3, [r7, #8]
 801359a:	4613      	mov	r3, r2
 801359c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 801359e:	f7fe fcc3 	bl	8011f28 <HAL_GetTick>
 80135a2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80135aa:	b2db      	uxtb	r3, r3
 80135ac:	2b20      	cmp	r3, #32
 80135ae:	f040 8208 	bne.w	80139c2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80135b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135b4:	9300      	str	r3, [sp, #0]
 80135b6:	2319      	movs	r3, #25
 80135b8:	2201      	movs	r2, #1
 80135ba:	497b      	ldr	r1, [pc, #492]	; (80137a8 <HAL_I2C_Mem_Read+0x224>)
 80135bc:	68f8      	ldr	r0, [r7, #12]
 80135be:	f000 fb81 	bl	8013cc4 <I2C_WaitOnFlagUntilTimeout>
 80135c2:	4603      	mov	r3, r0
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d001      	beq.n	80135cc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80135c8:	2302      	movs	r3, #2
 80135ca:	e1fb      	b.n	80139c4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80135d2:	2b01      	cmp	r3, #1
 80135d4:	d101      	bne.n	80135da <HAL_I2C_Mem_Read+0x56>
 80135d6:	2302      	movs	r3, #2
 80135d8:	e1f4      	b.n	80139c4 <HAL_I2C_Mem_Read+0x440>
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	2201      	movs	r2, #1
 80135de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	f003 0301 	and.w	r3, r3, #1
 80135ec:	2b01      	cmp	r3, #1
 80135ee:	d007      	beq.n	8013600 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	681a      	ldr	r2, [r3, #0]
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	f042 0201 	orr.w	r2, r2, #1
 80135fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8013600:	68fb      	ldr	r3, [r7, #12]
 8013602:	681b      	ldr	r3, [r3, #0]
 8013604:	681a      	ldr	r2, [r3, #0]
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801360e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	2222      	movs	r2, #34	; 0x22
 8013614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	2240      	movs	r2, #64	; 0x40
 801361c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	2200      	movs	r2, #0
 8013624:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8013626:	68fb      	ldr	r3, [r7, #12]
 8013628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801362a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8013630:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013636:	b29a      	uxth	r2, r3
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	4a5b      	ldr	r2, [pc, #364]	; (80137ac <HAL_I2C_Mem_Read+0x228>)
 8013640:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8013642:	88f8      	ldrh	r0, [r7, #6]
 8013644:	893a      	ldrh	r2, [r7, #8]
 8013646:	8979      	ldrh	r1, [r7, #10]
 8013648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801364a:	9301      	str	r3, [sp, #4]
 801364c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801364e:	9300      	str	r3, [sp, #0]
 8013650:	4603      	mov	r3, r0
 8013652:	68f8      	ldr	r0, [r7, #12]
 8013654:	f000 fa50 	bl	8013af8 <I2C_RequestMemoryRead>
 8013658:	4603      	mov	r3, r0
 801365a:	2b00      	cmp	r3, #0
 801365c:	d001      	beq.n	8013662 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 801365e:	2301      	movs	r3, #1
 8013660:	e1b0      	b.n	80139c4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013666:	2b00      	cmp	r3, #0
 8013668:	d113      	bne.n	8013692 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801366a:	2300      	movs	r3, #0
 801366c:	623b      	str	r3, [r7, #32]
 801366e:	68fb      	ldr	r3, [r7, #12]
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	695b      	ldr	r3, [r3, #20]
 8013674:	623b      	str	r3, [r7, #32]
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	699b      	ldr	r3, [r3, #24]
 801367c:	623b      	str	r3, [r7, #32]
 801367e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	681b      	ldr	r3, [r3, #0]
 8013684:	681a      	ldr	r2, [r3, #0]
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801368e:	601a      	str	r2, [r3, #0]
 8013690:	e184      	b.n	801399c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013696:	2b01      	cmp	r3, #1
 8013698:	d11b      	bne.n	80136d2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	681a      	ldr	r2, [r3, #0]
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80136a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80136aa:	2300      	movs	r3, #0
 80136ac:	61fb      	str	r3, [r7, #28]
 80136ae:	68fb      	ldr	r3, [r7, #12]
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	695b      	ldr	r3, [r3, #20]
 80136b4:	61fb      	str	r3, [r7, #28]
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	681b      	ldr	r3, [r3, #0]
 80136ba:	699b      	ldr	r3, [r3, #24]
 80136bc:	61fb      	str	r3, [r7, #28]
 80136be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	681b      	ldr	r3, [r3, #0]
 80136c4:	681a      	ldr	r2, [r3, #0]
 80136c6:	68fb      	ldr	r3, [r7, #12]
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80136ce:	601a      	str	r2, [r3, #0]
 80136d0:	e164      	b.n	801399c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80136d6:	2b02      	cmp	r3, #2
 80136d8:	d11b      	bne.n	8013712 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80136da:	68fb      	ldr	r3, [r7, #12]
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	681a      	ldr	r2, [r3, #0]
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80136e8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	681a      	ldr	r2, [r3, #0]
 80136f0:	68fb      	ldr	r3, [r7, #12]
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80136f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80136fa:	2300      	movs	r3, #0
 80136fc:	61bb      	str	r3, [r7, #24]
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	695b      	ldr	r3, [r3, #20]
 8013704:	61bb      	str	r3, [r7, #24]
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	699b      	ldr	r3, [r3, #24]
 801370c:	61bb      	str	r3, [r7, #24]
 801370e:	69bb      	ldr	r3, [r7, #24]
 8013710:	e144      	b.n	801399c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8013712:	2300      	movs	r3, #0
 8013714:	617b      	str	r3, [r7, #20]
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	681b      	ldr	r3, [r3, #0]
 801371a:	695b      	ldr	r3, [r3, #20]
 801371c:	617b      	str	r3, [r7, #20]
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	699b      	ldr	r3, [r3, #24]
 8013724:	617b      	str	r3, [r7, #20]
 8013726:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8013728:	e138      	b.n	801399c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801372e:	2b03      	cmp	r3, #3
 8013730:	f200 80f1 	bhi.w	8013916 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013738:	2b01      	cmp	r3, #1
 801373a:	d123      	bne.n	8013784 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801373c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801373e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013740:	68f8      	ldr	r0, [r7, #12]
 8013742:	f000 fc17 	bl	8013f74 <I2C_WaitOnRXNEFlagUntilTimeout>
 8013746:	4603      	mov	r3, r0
 8013748:	2b00      	cmp	r3, #0
 801374a:	d001      	beq.n	8013750 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 801374c:	2301      	movs	r3, #1
 801374e:	e139      	b.n	80139c4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013750:	68fb      	ldr	r3, [r7, #12]
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	691a      	ldr	r2, [r3, #16]
 8013756:	68fb      	ldr	r3, [r7, #12]
 8013758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801375a:	b2d2      	uxtb	r2, r2
 801375c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013762:	1c5a      	adds	r2, r3, #1
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8013768:	68fb      	ldr	r3, [r7, #12]
 801376a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801376c:	3b01      	subs	r3, #1
 801376e:	b29a      	uxth	r2, r3
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013778:	b29b      	uxth	r3, r3
 801377a:	3b01      	subs	r3, #1
 801377c:	b29a      	uxth	r2, r3
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	855a      	strh	r2, [r3, #42]	; 0x2a
 8013782:	e10b      	b.n	801399c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013788:	2b02      	cmp	r3, #2
 801378a:	d14e      	bne.n	801382a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 801378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801378e:	9300      	str	r3, [sp, #0]
 8013790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013792:	2200      	movs	r2, #0
 8013794:	4906      	ldr	r1, [pc, #24]	; (80137b0 <HAL_I2C_Mem_Read+0x22c>)
 8013796:	68f8      	ldr	r0, [r7, #12]
 8013798:	f000 fa94 	bl	8013cc4 <I2C_WaitOnFlagUntilTimeout>
 801379c:	4603      	mov	r3, r0
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d008      	beq.n	80137b4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80137a2:	2301      	movs	r3, #1
 80137a4:	e10e      	b.n	80139c4 <HAL_I2C_Mem_Read+0x440>
 80137a6:	bf00      	nop
 80137a8:	00100002 	.word	0x00100002
 80137ac:	ffff0000 	.word	0xffff0000
 80137b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	681b      	ldr	r3, [r3, #0]
 80137b8:	681a      	ldr	r2, [r3, #0]
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80137c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80137c4:	68fb      	ldr	r3, [r7, #12]
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	691a      	ldr	r2, [r3, #16]
 80137ca:	68fb      	ldr	r3, [r7, #12]
 80137cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137ce:	b2d2      	uxtb	r2, r2
 80137d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137d6:	1c5a      	adds	r2, r3, #1
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80137e0:	3b01      	subs	r3, #1
 80137e2:	b29a      	uxth	r2, r3
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80137e8:	68fb      	ldr	r3, [r7, #12]
 80137ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80137ec:	b29b      	uxth	r3, r3
 80137ee:	3b01      	subs	r3, #1
 80137f0:	b29a      	uxth	r2, r3
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	691a      	ldr	r2, [r3, #16]
 80137fc:	68fb      	ldr	r3, [r7, #12]
 80137fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013800:	b2d2      	uxtb	r2, r2
 8013802:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8013804:	68fb      	ldr	r3, [r7, #12]
 8013806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013808:	1c5a      	adds	r2, r3, #1
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013812:	3b01      	subs	r3, #1
 8013814:	b29a      	uxth	r2, r3
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801381e:	b29b      	uxth	r3, r3
 8013820:	3b01      	subs	r3, #1
 8013822:	b29a      	uxth	r2, r3
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	855a      	strh	r2, [r3, #42]	; 0x2a
 8013828:	e0b8      	b.n	801399c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 801382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801382c:	9300      	str	r3, [sp, #0]
 801382e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013830:	2200      	movs	r2, #0
 8013832:	4966      	ldr	r1, [pc, #408]	; (80139cc <HAL_I2C_Mem_Read+0x448>)
 8013834:	68f8      	ldr	r0, [r7, #12]
 8013836:	f000 fa45 	bl	8013cc4 <I2C_WaitOnFlagUntilTimeout>
 801383a:	4603      	mov	r3, r0
 801383c:	2b00      	cmp	r3, #0
 801383e:	d001      	beq.n	8013844 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8013840:	2301      	movs	r3, #1
 8013842:	e0bf      	b.n	80139c4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8013844:	68fb      	ldr	r3, [r7, #12]
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	681a      	ldr	r2, [r3, #0]
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013852:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013854:	68fb      	ldr	r3, [r7, #12]
 8013856:	681b      	ldr	r3, [r3, #0]
 8013858:	691a      	ldr	r2, [r3, #16]
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801385e:	b2d2      	uxtb	r2, r2
 8013860:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013866:	1c5a      	adds	r2, r3, #1
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 801386c:	68fb      	ldr	r3, [r7, #12]
 801386e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013870:	3b01      	subs	r3, #1
 8013872:	b29a      	uxth	r2, r3
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801387c:	b29b      	uxth	r3, r3
 801387e:	3b01      	subs	r3, #1
 8013880:	b29a      	uxth	r2, r3
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8013886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013888:	9300      	str	r3, [sp, #0]
 801388a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801388c:	2200      	movs	r2, #0
 801388e:	494f      	ldr	r1, [pc, #316]	; (80139cc <HAL_I2C_Mem_Read+0x448>)
 8013890:	68f8      	ldr	r0, [r7, #12]
 8013892:	f000 fa17 	bl	8013cc4 <I2C_WaitOnFlagUntilTimeout>
 8013896:	4603      	mov	r3, r0
 8013898:	2b00      	cmp	r3, #0
 801389a:	d001      	beq.n	80138a0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 801389c:	2301      	movs	r3, #1
 801389e:	e091      	b.n	80139c4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	681b      	ldr	r3, [r3, #0]
 80138a4:	681a      	ldr	r2, [r3, #0]
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	681b      	ldr	r3, [r3, #0]
 80138aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80138ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	691a      	ldr	r2, [r3, #16]
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138ba:	b2d2      	uxtb	r2, r2
 80138bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138c2:	1c5a      	adds	r2, r3, #1
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80138cc:	3b01      	subs	r3, #1
 80138ce:	b29a      	uxth	r2, r3
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80138d8:	b29b      	uxth	r3, r3
 80138da:	3b01      	subs	r3, #1
 80138dc:	b29a      	uxth	r2, r3
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	681b      	ldr	r3, [r3, #0]
 80138e6:	691a      	ldr	r2, [r3, #16]
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138ec:	b2d2      	uxtb	r2, r2
 80138ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138f4:	1c5a      	adds	r2, r3, #1
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80138fe:	3b01      	subs	r3, #1
 8013900:	b29a      	uxth	r2, r3
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801390a:	b29b      	uxth	r3, r3
 801390c:	3b01      	subs	r3, #1
 801390e:	b29a      	uxth	r2, r3
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	855a      	strh	r2, [r3, #42]	; 0x2a
 8013914:	e042      	b.n	801399c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8013916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013918:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801391a:	68f8      	ldr	r0, [r7, #12]
 801391c:	f000 fb2a 	bl	8013f74 <I2C_WaitOnRXNEFlagUntilTimeout>
 8013920:	4603      	mov	r3, r0
 8013922:	2b00      	cmp	r3, #0
 8013924:	d001      	beq.n	801392a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8013926:	2301      	movs	r3, #1
 8013928:	e04c      	b.n	80139c4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801392a:	68fb      	ldr	r3, [r7, #12]
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	691a      	ldr	r2, [r3, #16]
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013934:	b2d2      	uxtb	r2, r2
 8013936:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801393c:	1c5a      	adds	r2, r3, #1
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013946:	3b01      	subs	r3, #1
 8013948:	b29a      	uxth	r2, r3
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 801394e:	68fb      	ldr	r3, [r7, #12]
 8013950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013952:	b29b      	uxth	r3, r3
 8013954:	3b01      	subs	r3, #1
 8013956:	b29a      	uxth	r2, r3
 8013958:	68fb      	ldr	r3, [r7, #12]
 801395a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	695b      	ldr	r3, [r3, #20]
 8013962:	f003 0304 	and.w	r3, r3, #4
 8013966:	2b04      	cmp	r3, #4
 8013968:	d118      	bne.n	801399c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	681b      	ldr	r3, [r3, #0]
 801396e:	691a      	ldr	r2, [r3, #16]
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013974:	b2d2      	uxtb	r2, r2
 8013976:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801397c:	1c5a      	adds	r2, r3, #1
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013986:	3b01      	subs	r3, #1
 8013988:	b29a      	uxth	r2, r3
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013992:	b29b      	uxth	r3, r3
 8013994:	3b01      	subs	r3, #1
 8013996:	b29a      	uxth	r2, r3
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 801399c:	68fb      	ldr	r3, [r7, #12]
 801399e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	f47f aec2 	bne.w	801372a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	2220      	movs	r2, #32
 80139aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	2200      	movs	r2, #0
 80139b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	2200      	movs	r2, #0
 80139ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80139be:	2300      	movs	r3, #0
 80139c0:	e000      	b.n	80139c4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80139c2:	2302      	movs	r3, #2
  }
}
 80139c4:	4618      	mov	r0, r3
 80139c6:	3728      	adds	r7, #40	; 0x28
 80139c8:	46bd      	mov	sp, r7
 80139ca:	bd80      	pop	{r7, pc}
 80139cc:	00010004 	.word	0x00010004

080139d0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80139d0:	b580      	push	{r7, lr}
 80139d2:	b088      	sub	sp, #32
 80139d4:	af02      	add	r7, sp, #8
 80139d6:	60f8      	str	r0, [r7, #12]
 80139d8:	4608      	mov	r0, r1
 80139da:	4611      	mov	r1, r2
 80139dc:	461a      	mov	r2, r3
 80139de:	4603      	mov	r3, r0
 80139e0:	817b      	strh	r3, [r7, #10]
 80139e2:	460b      	mov	r3, r1
 80139e4:	813b      	strh	r3, [r7, #8]
 80139e6:	4613      	mov	r3, r2
 80139e8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	681a      	ldr	r2, [r3, #0]
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80139f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80139fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139fc:	9300      	str	r3, [sp, #0]
 80139fe:	6a3b      	ldr	r3, [r7, #32]
 8013a00:	2200      	movs	r2, #0
 8013a02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8013a06:	68f8      	ldr	r0, [r7, #12]
 8013a08:	f000 f95c 	bl	8013cc4 <I2C_WaitOnFlagUntilTimeout>
 8013a0c:	4603      	mov	r3, r0
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d00c      	beq.n	8013a2c <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d003      	beq.n	8013a28 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013a26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8013a28:	2303      	movs	r3, #3
 8013a2a:	e05f      	b.n	8013aec <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8013a2c:	897b      	ldrh	r3, [r7, #10]
 8013a2e:	b2db      	uxtb	r3, r3
 8013a30:	461a      	mov	r2, r3
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8013a3a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8013a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a3e:	6a3a      	ldr	r2, [r7, #32]
 8013a40:	492c      	ldr	r1, [pc, #176]	; (8013af4 <I2C_RequestMemoryWrite+0x124>)
 8013a42:	68f8      	ldr	r0, [r7, #12]
 8013a44:	f000 f995 	bl	8013d72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8013a48:	4603      	mov	r3, r0
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d001      	beq.n	8013a52 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8013a4e:	2301      	movs	r3, #1
 8013a50:	e04c      	b.n	8013aec <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8013a52:	2300      	movs	r3, #0
 8013a54:	617b      	str	r3, [r7, #20]
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	695b      	ldr	r3, [r3, #20]
 8013a5c:	617b      	str	r3, [r7, #20]
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	699b      	ldr	r3, [r3, #24]
 8013a64:	617b      	str	r3, [r7, #20]
 8013a66:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8013a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a6a:	6a39      	ldr	r1, [r7, #32]
 8013a6c:	68f8      	ldr	r0, [r7, #12]
 8013a6e:	f000 f9ff 	bl	8013e70 <I2C_WaitOnTXEFlagUntilTimeout>
 8013a72:	4603      	mov	r3, r0
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d00d      	beq.n	8013a94 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a7c:	2b04      	cmp	r3, #4
 8013a7e:	d107      	bne.n	8013a90 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	681a      	ldr	r2, [r3, #0]
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013a8e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8013a90:	2301      	movs	r3, #1
 8013a92:	e02b      	b.n	8013aec <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8013a94:	88fb      	ldrh	r3, [r7, #6]
 8013a96:	2b01      	cmp	r3, #1
 8013a98:	d105      	bne.n	8013aa6 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8013a9a:	893b      	ldrh	r3, [r7, #8]
 8013a9c:	b2da      	uxtb	r2, r3
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	681b      	ldr	r3, [r3, #0]
 8013aa2:	611a      	str	r2, [r3, #16]
 8013aa4:	e021      	b.n	8013aea <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8013aa6:	893b      	ldrh	r3, [r7, #8]
 8013aa8:	0a1b      	lsrs	r3, r3, #8
 8013aaa:	b29b      	uxth	r3, r3
 8013aac:	b2da      	uxtb	r2, r3
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8013ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ab6:	6a39      	ldr	r1, [r7, #32]
 8013ab8:	68f8      	ldr	r0, [r7, #12]
 8013aba:	f000 f9d9 	bl	8013e70 <I2C_WaitOnTXEFlagUntilTimeout>
 8013abe:	4603      	mov	r3, r0
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d00d      	beq.n	8013ae0 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ac8:	2b04      	cmp	r3, #4
 8013aca:	d107      	bne.n	8013adc <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	681a      	ldr	r2, [r3, #0]
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	681b      	ldr	r3, [r3, #0]
 8013ad6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013ada:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8013adc:	2301      	movs	r3, #1
 8013ade:	e005      	b.n	8013aec <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8013ae0:	893b      	ldrh	r3, [r7, #8]
 8013ae2:	b2da      	uxtb	r2, r3
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8013aea:	2300      	movs	r3, #0
}
 8013aec:	4618      	mov	r0, r3
 8013aee:	3718      	adds	r7, #24
 8013af0:	46bd      	mov	sp, r7
 8013af2:	bd80      	pop	{r7, pc}
 8013af4:	00010002 	.word	0x00010002

08013af8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8013af8:	b580      	push	{r7, lr}
 8013afa:	b088      	sub	sp, #32
 8013afc:	af02      	add	r7, sp, #8
 8013afe:	60f8      	str	r0, [r7, #12]
 8013b00:	4608      	mov	r0, r1
 8013b02:	4611      	mov	r1, r2
 8013b04:	461a      	mov	r2, r3
 8013b06:	4603      	mov	r3, r0
 8013b08:	817b      	strh	r3, [r7, #10]
 8013b0a:	460b      	mov	r3, r1
 8013b0c:	813b      	strh	r3, [r7, #8]
 8013b0e:	4613      	mov	r3, r2
 8013b10:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	681a      	ldr	r2, [r3, #0]
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8013b20:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	681a      	ldr	r2, [r3, #0]
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013b30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8013b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b34:	9300      	str	r3, [sp, #0]
 8013b36:	6a3b      	ldr	r3, [r7, #32]
 8013b38:	2200      	movs	r2, #0
 8013b3a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8013b3e:	68f8      	ldr	r0, [r7, #12]
 8013b40:	f000 f8c0 	bl	8013cc4 <I2C_WaitOnFlagUntilTimeout>
 8013b44:	4603      	mov	r3, r0
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d00c      	beq.n	8013b64 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	681b      	ldr	r3, [r3, #0]
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d003      	beq.n	8013b60 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8013b58:	68fb      	ldr	r3, [r7, #12]
 8013b5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013b5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8013b60:	2303      	movs	r3, #3
 8013b62:	e0a9      	b.n	8013cb8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8013b64:	897b      	ldrh	r3, [r7, #10]
 8013b66:	b2db      	uxtb	r3, r3
 8013b68:	461a      	mov	r2, r3
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	681b      	ldr	r3, [r3, #0]
 8013b6e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8013b72:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8013b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b76:	6a3a      	ldr	r2, [r7, #32]
 8013b78:	4951      	ldr	r1, [pc, #324]	; (8013cc0 <I2C_RequestMemoryRead+0x1c8>)
 8013b7a:	68f8      	ldr	r0, [r7, #12]
 8013b7c:	f000 f8f9 	bl	8013d72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8013b80:	4603      	mov	r3, r0
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d001      	beq.n	8013b8a <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8013b86:	2301      	movs	r3, #1
 8013b88:	e096      	b.n	8013cb8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8013b8a:	2300      	movs	r3, #0
 8013b8c:	617b      	str	r3, [r7, #20]
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	695b      	ldr	r3, [r3, #20]
 8013b94:	617b      	str	r3, [r7, #20]
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	699b      	ldr	r3, [r3, #24]
 8013b9c:	617b      	str	r3, [r7, #20]
 8013b9e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8013ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ba2:	6a39      	ldr	r1, [r7, #32]
 8013ba4:	68f8      	ldr	r0, [r7, #12]
 8013ba6:	f000 f963 	bl	8013e70 <I2C_WaitOnTXEFlagUntilTimeout>
 8013baa:	4603      	mov	r3, r0
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d00d      	beq.n	8013bcc <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013bb4:	2b04      	cmp	r3, #4
 8013bb6:	d107      	bne.n	8013bc8 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	681b      	ldr	r3, [r3, #0]
 8013bbc:	681a      	ldr	r2, [r3, #0]
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013bc6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8013bc8:	2301      	movs	r3, #1
 8013bca:	e075      	b.n	8013cb8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8013bcc:	88fb      	ldrh	r3, [r7, #6]
 8013bce:	2b01      	cmp	r3, #1
 8013bd0:	d105      	bne.n	8013bde <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8013bd2:	893b      	ldrh	r3, [r7, #8]
 8013bd4:	b2da      	uxtb	r2, r3
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	681b      	ldr	r3, [r3, #0]
 8013bda:	611a      	str	r2, [r3, #16]
 8013bdc:	e021      	b.n	8013c22 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8013bde:	893b      	ldrh	r3, [r7, #8]
 8013be0:	0a1b      	lsrs	r3, r3, #8
 8013be2:	b29b      	uxth	r3, r3
 8013be4:	b2da      	uxtb	r2, r3
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	681b      	ldr	r3, [r3, #0]
 8013bea:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8013bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013bee:	6a39      	ldr	r1, [r7, #32]
 8013bf0:	68f8      	ldr	r0, [r7, #12]
 8013bf2:	f000 f93d 	bl	8013e70 <I2C_WaitOnTXEFlagUntilTimeout>
 8013bf6:	4603      	mov	r3, r0
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d00d      	beq.n	8013c18 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c00:	2b04      	cmp	r3, #4
 8013c02:	d107      	bne.n	8013c14 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	681a      	ldr	r2, [r3, #0]
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	681b      	ldr	r3, [r3, #0]
 8013c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013c12:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8013c14:	2301      	movs	r3, #1
 8013c16:	e04f      	b.n	8013cb8 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8013c18:	893b      	ldrh	r3, [r7, #8]
 8013c1a:	b2da      	uxtb	r2, r3
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8013c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013c24:	6a39      	ldr	r1, [r7, #32]
 8013c26:	68f8      	ldr	r0, [r7, #12]
 8013c28:	f000 f922 	bl	8013e70 <I2C_WaitOnTXEFlagUntilTimeout>
 8013c2c:	4603      	mov	r3, r0
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d00d      	beq.n	8013c4e <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c36:	2b04      	cmp	r3, #4
 8013c38:	d107      	bne.n	8013c4a <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	681a      	ldr	r2, [r3, #0]
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	681b      	ldr	r3, [r3, #0]
 8013c44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013c48:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8013c4a:	2301      	movs	r3, #1
 8013c4c:	e034      	b.n	8013cb8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8013c4e:	68fb      	ldr	r3, [r7, #12]
 8013c50:	681b      	ldr	r3, [r3, #0]
 8013c52:	681a      	ldr	r2, [r3, #0]
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013c5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8013c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c60:	9300      	str	r3, [sp, #0]
 8013c62:	6a3b      	ldr	r3, [r7, #32]
 8013c64:	2200      	movs	r2, #0
 8013c66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8013c6a:	68f8      	ldr	r0, [r7, #12]
 8013c6c:	f000 f82a 	bl	8013cc4 <I2C_WaitOnFlagUntilTimeout>
 8013c70:	4603      	mov	r3, r0
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d00c      	beq.n	8013c90 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	681b      	ldr	r3, [r3, #0]
 8013c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d003      	beq.n	8013c8c <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013c8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8013c8c:	2303      	movs	r3, #3
 8013c8e:	e013      	b.n	8013cb8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8013c90:	897b      	ldrh	r3, [r7, #10]
 8013c92:	b2db      	uxtb	r3, r3
 8013c94:	f043 0301 	orr.w	r3, r3, #1
 8013c98:	b2da      	uxtb	r2, r3
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8013ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ca2:	6a3a      	ldr	r2, [r7, #32]
 8013ca4:	4906      	ldr	r1, [pc, #24]	; (8013cc0 <I2C_RequestMemoryRead+0x1c8>)
 8013ca6:	68f8      	ldr	r0, [r7, #12]
 8013ca8:	f000 f863 	bl	8013d72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8013cac:	4603      	mov	r3, r0
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d001      	beq.n	8013cb6 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8013cb2:	2301      	movs	r3, #1
 8013cb4:	e000      	b.n	8013cb8 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8013cb6:	2300      	movs	r3, #0
}
 8013cb8:	4618      	mov	r0, r3
 8013cba:	3718      	adds	r7, #24
 8013cbc:	46bd      	mov	sp, r7
 8013cbe:	bd80      	pop	{r7, pc}
 8013cc0:	00010002 	.word	0x00010002

08013cc4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8013cc4:	b580      	push	{r7, lr}
 8013cc6:	b084      	sub	sp, #16
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	60f8      	str	r0, [r7, #12]
 8013ccc:	60b9      	str	r1, [r7, #8]
 8013cce:	603b      	str	r3, [r7, #0]
 8013cd0:	4613      	mov	r3, r2
 8013cd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8013cd4:	e025      	b.n	8013d22 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013cd6:	683b      	ldr	r3, [r7, #0]
 8013cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013cdc:	d021      	beq.n	8013d22 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013cde:	f7fe f923 	bl	8011f28 <HAL_GetTick>
 8013ce2:	4602      	mov	r2, r0
 8013ce4:	69bb      	ldr	r3, [r7, #24]
 8013ce6:	1ad3      	subs	r3, r2, r3
 8013ce8:	683a      	ldr	r2, [r7, #0]
 8013cea:	429a      	cmp	r2, r3
 8013cec:	d302      	bcc.n	8013cf4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8013cee:	683b      	ldr	r3, [r7, #0]
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d116      	bne.n	8013d22 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	2200      	movs	r2, #0
 8013cf8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	2220      	movs	r2, #32
 8013cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8013d02:	68fb      	ldr	r3, [r7, #12]
 8013d04:	2200      	movs	r2, #0
 8013d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d0e:	f043 0220 	orr.w	r2, r3, #32
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	2200      	movs	r2, #0
 8013d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8013d1e:	2301      	movs	r3, #1
 8013d20:	e023      	b.n	8013d6a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8013d22:	68bb      	ldr	r3, [r7, #8]
 8013d24:	0c1b      	lsrs	r3, r3, #16
 8013d26:	b2db      	uxtb	r3, r3
 8013d28:	2b01      	cmp	r3, #1
 8013d2a:	d10d      	bne.n	8013d48 <I2C_WaitOnFlagUntilTimeout+0x84>
 8013d2c:	68fb      	ldr	r3, [r7, #12]
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	695b      	ldr	r3, [r3, #20]
 8013d32:	43da      	mvns	r2, r3
 8013d34:	68bb      	ldr	r3, [r7, #8]
 8013d36:	4013      	ands	r3, r2
 8013d38:	b29b      	uxth	r3, r3
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	bf0c      	ite	eq
 8013d3e:	2301      	moveq	r3, #1
 8013d40:	2300      	movne	r3, #0
 8013d42:	b2db      	uxtb	r3, r3
 8013d44:	461a      	mov	r2, r3
 8013d46:	e00c      	b.n	8013d62 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	699b      	ldr	r3, [r3, #24]
 8013d4e:	43da      	mvns	r2, r3
 8013d50:	68bb      	ldr	r3, [r7, #8]
 8013d52:	4013      	ands	r3, r2
 8013d54:	b29b      	uxth	r3, r3
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	bf0c      	ite	eq
 8013d5a:	2301      	moveq	r3, #1
 8013d5c:	2300      	movne	r3, #0
 8013d5e:	b2db      	uxtb	r3, r3
 8013d60:	461a      	mov	r2, r3
 8013d62:	79fb      	ldrb	r3, [r7, #7]
 8013d64:	429a      	cmp	r2, r3
 8013d66:	d0b6      	beq.n	8013cd6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8013d68:	2300      	movs	r3, #0
}
 8013d6a:	4618      	mov	r0, r3
 8013d6c:	3710      	adds	r7, #16
 8013d6e:	46bd      	mov	sp, r7
 8013d70:	bd80      	pop	{r7, pc}

08013d72 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8013d72:	b580      	push	{r7, lr}
 8013d74:	b084      	sub	sp, #16
 8013d76:	af00      	add	r7, sp, #0
 8013d78:	60f8      	str	r0, [r7, #12]
 8013d7a:	60b9      	str	r1, [r7, #8]
 8013d7c:	607a      	str	r2, [r7, #4]
 8013d7e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8013d80:	e051      	b.n	8013e26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	695b      	ldr	r3, [r3, #20]
 8013d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013d8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013d90:	d123      	bne.n	8013dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	681a      	ldr	r2, [r3, #0]
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	681b      	ldr	r3, [r3, #0]
 8013d9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013da0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013da2:	68fb      	ldr	r3, [r7, #12]
 8013da4:	681b      	ldr	r3, [r3, #0]
 8013da6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8013daa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	2200      	movs	r2, #0
 8013db0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8013db2:	68fb      	ldr	r3, [r7, #12]
 8013db4:	2220      	movs	r2, #32
 8013db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	2200      	movs	r2, #0
 8013dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013dc6:	f043 0204 	orr.w	r2, r3, #4
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	2200      	movs	r2, #0
 8013dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8013dd6:	2301      	movs	r3, #1
 8013dd8:	e046      	b.n	8013e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013de0:	d021      	beq.n	8013e26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013de2:	f7fe f8a1 	bl	8011f28 <HAL_GetTick>
 8013de6:	4602      	mov	r2, r0
 8013de8:	683b      	ldr	r3, [r7, #0]
 8013dea:	1ad3      	subs	r3, r2, r3
 8013dec:	687a      	ldr	r2, [r7, #4]
 8013dee:	429a      	cmp	r2, r3
 8013df0:	d302      	bcc.n	8013df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d116      	bne.n	8013e26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	2200      	movs	r2, #0
 8013dfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	2220      	movs	r2, #32
 8013e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	2200      	movs	r2, #0
 8013e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e12:	f043 0220 	orr.w	r2, r3, #32
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013e1a:	68fb      	ldr	r3, [r7, #12]
 8013e1c:	2200      	movs	r2, #0
 8013e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8013e22:	2301      	movs	r3, #1
 8013e24:	e020      	b.n	8013e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8013e26:	68bb      	ldr	r3, [r7, #8]
 8013e28:	0c1b      	lsrs	r3, r3, #16
 8013e2a:	b2db      	uxtb	r3, r3
 8013e2c:	2b01      	cmp	r3, #1
 8013e2e:	d10c      	bne.n	8013e4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8013e30:	68fb      	ldr	r3, [r7, #12]
 8013e32:	681b      	ldr	r3, [r3, #0]
 8013e34:	695b      	ldr	r3, [r3, #20]
 8013e36:	43da      	mvns	r2, r3
 8013e38:	68bb      	ldr	r3, [r7, #8]
 8013e3a:	4013      	ands	r3, r2
 8013e3c:	b29b      	uxth	r3, r3
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	bf14      	ite	ne
 8013e42:	2301      	movne	r3, #1
 8013e44:	2300      	moveq	r3, #0
 8013e46:	b2db      	uxtb	r3, r3
 8013e48:	e00b      	b.n	8013e62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	699b      	ldr	r3, [r3, #24]
 8013e50:	43da      	mvns	r2, r3
 8013e52:	68bb      	ldr	r3, [r7, #8]
 8013e54:	4013      	ands	r3, r2
 8013e56:	b29b      	uxth	r3, r3
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	bf14      	ite	ne
 8013e5c:	2301      	movne	r3, #1
 8013e5e:	2300      	moveq	r3, #0
 8013e60:	b2db      	uxtb	r3, r3
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d18d      	bne.n	8013d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8013e66:	2300      	movs	r3, #0
}
 8013e68:	4618      	mov	r0, r3
 8013e6a:	3710      	adds	r7, #16
 8013e6c:	46bd      	mov	sp, r7
 8013e6e:	bd80      	pop	{r7, pc}

08013e70 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8013e70:	b580      	push	{r7, lr}
 8013e72:	b084      	sub	sp, #16
 8013e74:	af00      	add	r7, sp, #0
 8013e76:	60f8      	str	r0, [r7, #12]
 8013e78:	60b9      	str	r1, [r7, #8]
 8013e7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8013e7c:	e02d      	b.n	8013eda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8013e7e:	68f8      	ldr	r0, [r7, #12]
 8013e80:	f000 f8ce 	bl	8014020 <I2C_IsAcknowledgeFailed>
 8013e84:	4603      	mov	r3, r0
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d001      	beq.n	8013e8e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8013e8a:	2301      	movs	r3, #1
 8013e8c:	e02d      	b.n	8013eea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013e8e:	68bb      	ldr	r3, [r7, #8]
 8013e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e94:	d021      	beq.n	8013eda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013e96:	f7fe f847 	bl	8011f28 <HAL_GetTick>
 8013e9a:	4602      	mov	r2, r0
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	1ad3      	subs	r3, r2, r3
 8013ea0:	68ba      	ldr	r2, [r7, #8]
 8013ea2:	429a      	cmp	r2, r3
 8013ea4:	d302      	bcc.n	8013eac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8013ea6:	68bb      	ldr	r3, [r7, #8]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d116      	bne.n	8013eda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	2200      	movs	r2, #0
 8013eb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	2220      	movs	r2, #32
 8013eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	2200      	movs	r2, #0
 8013ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ec6:	f043 0220 	orr.w	r2, r3, #32
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	2200      	movs	r2, #0
 8013ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8013ed6:	2301      	movs	r3, #1
 8013ed8:	e007      	b.n	8013eea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	695b      	ldr	r3, [r3, #20]
 8013ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013ee4:	2b80      	cmp	r3, #128	; 0x80
 8013ee6:	d1ca      	bne.n	8013e7e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8013ee8:	2300      	movs	r3, #0
}
 8013eea:	4618      	mov	r0, r3
 8013eec:	3710      	adds	r7, #16
 8013eee:	46bd      	mov	sp, r7
 8013ef0:	bd80      	pop	{r7, pc}

08013ef2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8013ef2:	b580      	push	{r7, lr}
 8013ef4:	b084      	sub	sp, #16
 8013ef6:	af00      	add	r7, sp, #0
 8013ef8:	60f8      	str	r0, [r7, #12]
 8013efa:	60b9      	str	r1, [r7, #8]
 8013efc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8013efe:	e02d      	b.n	8013f5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8013f00:	68f8      	ldr	r0, [r7, #12]
 8013f02:	f000 f88d 	bl	8014020 <I2C_IsAcknowledgeFailed>
 8013f06:	4603      	mov	r3, r0
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d001      	beq.n	8013f10 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8013f0c:	2301      	movs	r3, #1
 8013f0e:	e02d      	b.n	8013f6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013f10:	68bb      	ldr	r3, [r7, #8]
 8013f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f16:	d021      	beq.n	8013f5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013f18:	f7fe f806 	bl	8011f28 <HAL_GetTick>
 8013f1c:	4602      	mov	r2, r0
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	1ad3      	subs	r3, r2, r3
 8013f22:	68ba      	ldr	r2, [r7, #8]
 8013f24:	429a      	cmp	r2, r3
 8013f26:	d302      	bcc.n	8013f2e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8013f28:	68bb      	ldr	r3, [r7, #8]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d116      	bne.n	8013f5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	2200      	movs	r2, #0
 8013f32:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	2220      	movs	r2, #32
 8013f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	2200      	movs	r2, #0
 8013f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8013f44:	68fb      	ldr	r3, [r7, #12]
 8013f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f48:	f043 0220 	orr.w	r2, r3, #32
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	2200      	movs	r2, #0
 8013f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8013f58:	2301      	movs	r3, #1
 8013f5a:	e007      	b.n	8013f6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	681b      	ldr	r3, [r3, #0]
 8013f60:	695b      	ldr	r3, [r3, #20]
 8013f62:	f003 0304 	and.w	r3, r3, #4
 8013f66:	2b04      	cmp	r3, #4
 8013f68:	d1ca      	bne.n	8013f00 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8013f6a:	2300      	movs	r3, #0
}
 8013f6c:	4618      	mov	r0, r3
 8013f6e:	3710      	adds	r7, #16
 8013f70:	46bd      	mov	sp, r7
 8013f72:	bd80      	pop	{r7, pc}

08013f74 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8013f74:	b580      	push	{r7, lr}
 8013f76:	b084      	sub	sp, #16
 8013f78:	af00      	add	r7, sp, #0
 8013f7a:	60f8      	str	r0, [r7, #12]
 8013f7c:	60b9      	str	r1, [r7, #8]
 8013f7e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8013f80:	e042      	b.n	8014008 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	695b      	ldr	r3, [r3, #20]
 8013f88:	f003 0310 	and.w	r3, r3, #16
 8013f8c:	2b10      	cmp	r3, #16
 8013f8e:	d119      	bne.n	8013fc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	f06f 0210 	mvn.w	r2, #16
 8013f98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8013f9a:	68fb      	ldr	r3, [r7, #12]
 8013f9c:	2200      	movs	r2, #0
 8013f9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	2220      	movs	r2, #32
 8013fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	2200      	movs	r2, #0
 8013fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8013fb0:	68fb      	ldr	r3, [r7, #12]
 8013fb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013fb4:	68fb      	ldr	r3, [r7, #12]
 8013fb6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8013fb8:	68fb      	ldr	r3, [r7, #12]
 8013fba:	2200      	movs	r2, #0
 8013fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8013fc0:	2301      	movs	r3, #1
 8013fc2:	e029      	b.n	8014018 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013fc4:	f7fd ffb0 	bl	8011f28 <HAL_GetTick>
 8013fc8:	4602      	mov	r2, r0
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	1ad3      	subs	r3, r2, r3
 8013fce:	68ba      	ldr	r2, [r7, #8]
 8013fd0:	429a      	cmp	r2, r3
 8013fd2:	d302      	bcc.n	8013fda <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8013fd4:	68bb      	ldr	r3, [r7, #8]
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d116      	bne.n	8014008 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8013fda:	68fb      	ldr	r3, [r7, #12]
 8013fdc:	2200      	movs	r2, #0
 8013fde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	2220      	movs	r2, #32
 8013fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	2200      	movs	r2, #0
 8013fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ff4:	f043 0220 	orr.w	r2, r3, #32
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	2200      	movs	r2, #0
 8014000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8014004:	2301      	movs	r3, #1
 8014006:	e007      	b.n	8014018 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	695b      	ldr	r3, [r3, #20]
 801400e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014012:	2b40      	cmp	r3, #64	; 0x40
 8014014:	d1b5      	bne.n	8013f82 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8014016:	2300      	movs	r3, #0
}
 8014018:	4618      	mov	r0, r3
 801401a:	3710      	adds	r7, #16
 801401c:	46bd      	mov	sp, r7
 801401e:	bd80      	pop	{r7, pc}

08014020 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8014020:	b480      	push	{r7}
 8014022:	b083      	sub	sp, #12
 8014024:	af00      	add	r7, sp, #0
 8014026:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	695b      	ldr	r3, [r3, #20]
 801402e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014036:	d11b      	bne.n	8014070 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	681b      	ldr	r3, [r3, #0]
 801403c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8014040:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	2200      	movs	r2, #0
 8014046:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	2220      	movs	r2, #32
 801404c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	2200      	movs	r2, #0
 8014054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801405c:	f043 0204 	orr.w	r2, r3, #4
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	2200      	movs	r2, #0
 8014068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 801406c:	2301      	movs	r3, #1
 801406e:	e000      	b.n	8014072 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8014070:	2300      	movs	r3, #0
}
 8014072:	4618      	mov	r0, r3
 8014074:	370c      	adds	r7, #12
 8014076:	46bd      	mov	sp, r7
 8014078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801407c:	4770      	bx	lr

0801407e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 801407e:	b480      	push	{r7}
 8014080:	b083      	sub	sp, #12
 8014082:	af00      	add	r7, sp, #0
 8014084:	6078      	str	r0, [r7, #4]
 8014086:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801408e:	b2db      	uxtb	r3, r3
 8014090:	2b20      	cmp	r3, #32
 8014092:	d129      	bne.n	80140e8 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	2224      	movs	r2, #36	; 0x24
 8014098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	681a      	ldr	r2, [r3, #0]
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	f022 0201 	bic.w	r2, r2, #1
 80140aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	681b      	ldr	r3, [r3, #0]
 80140b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	681b      	ldr	r3, [r3, #0]
 80140b6:	f022 0210 	bic.w	r2, r2, #16
 80140ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	683a      	ldr	r2, [r7, #0]
 80140c8:	430a      	orrs	r2, r1
 80140ca:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	681b      	ldr	r3, [r3, #0]
 80140d0:	681a      	ldr	r2, [r3, #0]
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	f042 0201 	orr.w	r2, r2, #1
 80140da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	2220      	movs	r2, #32
 80140e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80140e4:	2300      	movs	r3, #0
 80140e6:	e000      	b.n	80140ea <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80140e8:	2302      	movs	r3, #2
  }
}
 80140ea:	4618      	mov	r0, r3
 80140ec:	370c      	adds	r7, #12
 80140ee:	46bd      	mov	sp, r7
 80140f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140f4:	4770      	bx	lr

080140f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80140f6:	b480      	push	{r7}
 80140f8:	b085      	sub	sp, #20
 80140fa:	af00      	add	r7, sp, #0
 80140fc:	6078      	str	r0, [r7, #4]
 80140fe:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8014100:	2300      	movs	r3, #0
 8014102:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801410a:	b2db      	uxtb	r3, r3
 801410c:	2b20      	cmp	r3, #32
 801410e:	d12a      	bne.n	8014166 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	2224      	movs	r2, #36	; 0x24
 8014114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	681a      	ldr	r2, [r3, #0]
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	681b      	ldr	r3, [r3, #0]
 8014122:	f022 0201 	bic.w	r2, r2, #1
 8014126:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	681b      	ldr	r3, [r3, #0]
 801412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801412e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8014130:	89fb      	ldrh	r3, [r7, #14]
 8014132:	f023 030f 	bic.w	r3, r3, #15
 8014136:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8014138:	683b      	ldr	r3, [r7, #0]
 801413a:	b29a      	uxth	r2, r3
 801413c:	89fb      	ldrh	r3, [r7, #14]
 801413e:	4313      	orrs	r3, r2
 8014140:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	681b      	ldr	r3, [r3, #0]
 8014146:	89fa      	ldrh	r2, [r7, #14]
 8014148:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	681a      	ldr	r2, [r3, #0]
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	681b      	ldr	r3, [r3, #0]
 8014154:	f042 0201 	orr.w	r2, r2, #1
 8014158:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	2220      	movs	r2, #32
 801415e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8014162:	2300      	movs	r3, #0
 8014164:	e000      	b.n	8014168 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8014166:	2302      	movs	r3, #2
  }
}
 8014168:	4618      	mov	r0, r3
 801416a:	3714      	adds	r7, #20
 801416c:	46bd      	mov	sp, r7
 801416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014172:	4770      	bx	lr

08014174 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8014174:	b580      	push	{r7, lr}
 8014176:	b084      	sub	sp, #16
 8014178:	af00      	add	r7, sp, #0
 801417a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	2b00      	cmp	r3, #0
 8014180:	d101      	bne.n	8014186 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8014182:	2301      	movs	r3, #1
 8014184:	e0bf      	b.n	8014306 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 801418c:	b2db      	uxtb	r3, r3
 801418e:	2b00      	cmp	r3, #0
 8014190:	d106      	bne.n	80141a0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	2200      	movs	r2, #0
 8014196:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 801419a:	6878      	ldr	r0, [r7, #4]
 801419c:	f7f7 fd2c 	bl	800bbf8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	2202      	movs	r2, #2
 80141a4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	681b      	ldr	r3, [r3, #0]
 80141ac:	699a      	ldr	r2, [r3, #24]
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80141b6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	681b      	ldr	r3, [r3, #0]
 80141bc:	6999      	ldr	r1, [r3, #24]
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	685a      	ldr	r2, [r3, #4]
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	689b      	ldr	r3, [r3, #8]
 80141c6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80141cc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	691b      	ldr	r3, [r3, #16]
 80141d2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	430a      	orrs	r2, r1
 80141da:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	681b      	ldr	r3, [r3, #0]
 80141e0:	6899      	ldr	r1, [r3, #8]
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	681a      	ldr	r2, [r3, #0]
 80141e6:	4b4a      	ldr	r3, [pc, #296]	; (8014310 <HAL_LTDC_Init+0x19c>)
 80141e8:	400b      	ands	r3, r1
 80141ea:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	695b      	ldr	r3, [r3, #20]
 80141f0:	041b      	lsls	r3, r3, #16
 80141f2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	6899      	ldr	r1, [r3, #8]
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	699a      	ldr	r2, [r3, #24]
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	431a      	orrs	r2, r3
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	430a      	orrs	r2, r1
 8014208:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	68d9      	ldr	r1, [r3, #12]
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	681a      	ldr	r2, [r3, #0]
 8014214:	4b3e      	ldr	r3, [pc, #248]	; (8014310 <HAL_LTDC_Init+0x19c>)
 8014216:	400b      	ands	r3, r1
 8014218:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	69db      	ldr	r3, [r3, #28]
 801421e:	041b      	lsls	r3, r3, #16
 8014220:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	68d9      	ldr	r1, [r3, #12]
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	6a1a      	ldr	r2, [r3, #32]
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	431a      	orrs	r2, r3
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	681b      	ldr	r3, [r3, #0]
 8014234:	430a      	orrs	r2, r1
 8014236:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	6919      	ldr	r1, [r3, #16]
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	681a      	ldr	r2, [r3, #0]
 8014242:	4b33      	ldr	r3, [pc, #204]	; (8014310 <HAL_LTDC_Init+0x19c>)
 8014244:	400b      	ands	r3, r1
 8014246:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801424c:	041b      	lsls	r3, r3, #16
 801424e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	681b      	ldr	r3, [r3, #0]
 8014254:	6919      	ldr	r1, [r3, #16]
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	431a      	orrs	r2, r3
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	430a      	orrs	r2, r1
 8014264:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	6959      	ldr	r1, [r3, #20]
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	681a      	ldr	r2, [r3, #0]
 8014270:	4b27      	ldr	r3, [pc, #156]	; (8014310 <HAL_LTDC_Init+0x19c>)
 8014272:	400b      	ands	r3, r1
 8014274:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801427a:	041b      	lsls	r3, r3, #16
 801427c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	681b      	ldr	r3, [r3, #0]
 8014282:	6959      	ldr	r1, [r3, #20]
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	431a      	orrs	r2, r3
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	681b      	ldr	r3, [r3, #0]
 8014290:	430a      	orrs	r2, r1
 8014292:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801429a:	021b      	lsls	r3, r3, #8
 801429c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80142a4:	041b      	lsls	r3, r3, #16
 80142a6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80142b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	681b      	ldr	r3, [r3, #0]
 80142bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80142be:	68ba      	ldr	r2, [r7, #8]
 80142c0:	68fb      	ldr	r3, [r7, #12]
 80142c2:	4313      	orrs	r3, r2
 80142c4:	687a      	ldr	r2, [r7, #4]
 80142c6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80142ca:	431a      	orrs	r2, r3
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	681b      	ldr	r3, [r3, #0]
 80142d0:	430a      	orrs	r2, r1
 80142d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	681b      	ldr	r3, [r3, #0]
 80142d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	f042 0206 	orr.w	r2, r2, #6
 80142e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	681b      	ldr	r3, [r3, #0]
 80142e8:	699a      	ldr	r2, [r3, #24]
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	f042 0201 	orr.w	r2, r2, #1
 80142f2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	2200      	movs	r2, #0
 80142f8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	2201      	movs	r2, #1
 8014300:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8014304:	2300      	movs	r3, #0
}
 8014306:	4618      	mov	r0, r3
 8014308:	3710      	adds	r7, #16
 801430a:	46bd      	mov	sp, r7
 801430c:	bd80      	pop	{r7, pc}
 801430e:	bf00      	nop
 8014310:	f000f800 	.word	0xf000f800

08014314 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8014314:	b580      	push	{r7, lr}
 8014316:	b084      	sub	sp, #16
 8014318:	af00      	add	r7, sp, #0
 801431a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014322:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	681b      	ldr	r3, [r3, #0]
 8014328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801432a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	f003 0304 	and.w	r3, r3, #4
 8014332:	2b00      	cmp	r3, #0
 8014334:	d023      	beq.n	801437e <HAL_LTDC_IRQHandler+0x6a>
 8014336:	68bb      	ldr	r3, [r7, #8]
 8014338:	f003 0304 	and.w	r3, r3, #4
 801433c:	2b00      	cmp	r3, #0
 801433e:	d01e      	beq.n	801437e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	681b      	ldr	r3, [r3, #0]
 8014344:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	f022 0204 	bic.w	r2, r2, #4
 801434e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	2204      	movs	r2, #4
 8014356:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801435e:	f043 0201 	orr.w	r2, r3, #1
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	2204      	movs	r2, #4
 801436c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	2200      	movs	r2, #0
 8014374:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8014378:	6878      	ldr	r0, [r7, #4]
 801437a:	f000 f86f 	bl	801445c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 801437e:	68fb      	ldr	r3, [r7, #12]
 8014380:	f003 0302 	and.w	r3, r3, #2
 8014384:	2b00      	cmp	r3, #0
 8014386:	d023      	beq.n	80143d0 <HAL_LTDC_IRQHandler+0xbc>
 8014388:	68bb      	ldr	r3, [r7, #8]
 801438a:	f003 0302 	and.w	r3, r3, #2
 801438e:	2b00      	cmp	r3, #0
 8014390:	d01e      	beq.n	80143d0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	681b      	ldr	r3, [r3, #0]
 8014396:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	f022 0202 	bic.w	r2, r2, #2
 80143a0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	2202      	movs	r2, #2
 80143a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80143b0:	f043 0202 	orr.w	r2, r3, #2
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	2204      	movs	r2, #4
 80143be:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	2200      	movs	r2, #0
 80143c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80143ca:	6878      	ldr	r0, [r7, #4]
 80143cc:	f000 f846 	bl	801445c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	f003 0301 	and.w	r3, r3, #1
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d01b      	beq.n	8014412 <HAL_LTDC_IRQHandler+0xfe>
 80143da:	68bb      	ldr	r3, [r7, #8]
 80143dc:	f003 0301 	and.w	r3, r3, #1
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d016      	beq.n	8014412 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	681b      	ldr	r3, [r3, #0]
 80143ee:	f022 0201 	bic.w	r2, r2, #1
 80143f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	2201      	movs	r2, #1
 80143fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	2201      	movs	r2, #1
 8014400:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	2200      	movs	r2, #0
 8014408:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 801440c:	6878      	ldr	r0, [r7, #4]
 801440e:	f7f6 fb95 	bl	800ab3c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	f003 0308 	and.w	r3, r3, #8
 8014418:	2b00      	cmp	r3, #0
 801441a:	d01b      	beq.n	8014454 <HAL_LTDC_IRQHandler+0x140>
 801441c:	68bb      	ldr	r3, [r7, #8]
 801441e:	f003 0308 	and.w	r3, r3, #8
 8014422:	2b00      	cmp	r3, #0
 8014424:	d016      	beq.n	8014454 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	681b      	ldr	r3, [r3, #0]
 8014430:	f022 0208 	bic.w	r2, r2, #8
 8014434:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	2208      	movs	r2, #8
 801443c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	2201      	movs	r2, #1
 8014442:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	2200      	movs	r2, #0
 801444a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 801444e:	6878      	ldr	r0, [r7, #4]
 8014450:	f000 f80e 	bl	8014470 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8014454:	bf00      	nop
 8014456:	3710      	adds	r7, #16
 8014458:	46bd      	mov	sp, r7
 801445a:	bd80      	pop	{r7, pc}

0801445c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 801445c:	b480      	push	{r7}
 801445e:	b083      	sub	sp, #12
 8014460:	af00      	add	r7, sp, #0
 8014462:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8014464:	bf00      	nop
 8014466:	370c      	adds	r7, #12
 8014468:	46bd      	mov	sp, r7
 801446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801446e:	4770      	bx	lr

08014470 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8014470:	b480      	push	{r7}
 8014472:	b083      	sub	sp, #12
 8014474:	af00      	add	r7, sp, #0
 8014476:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8014478:	bf00      	nop
 801447a:	370c      	adds	r7, #12
 801447c:	46bd      	mov	sp, r7
 801447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014482:	4770      	bx	lr

08014484 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8014484:	b5b0      	push	{r4, r5, r7, lr}
 8014486:	b084      	sub	sp, #16
 8014488:	af00      	add	r7, sp, #0
 801448a:	60f8      	str	r0, [r7, #12]
 801448c:	60b9      	str	r1, [r7, #8]
 801448e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8014496:	2b01      	cmp	r3, #1
 8014498:	d101      	bne.n	801449e <HAL_LTDC_ConfigLayer+0x1a>
 801449a:	2302      	movs	r3, #2
 801449c:	e02c      	b.n	80144f8 <HAL_LTDC_ConfigLayer+0x74>
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	2201      	movs	r2, #1
 80144a2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80144a6:	68fb      	ldr	r3, [r7, #12]
 80144a8:	2202      	movs	r2, #2
 80144aa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80144ae:	68fa      	ldr	r2, [r7, #12]
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	2134      	movs	r1, #52	; 0x34
 80144b4:	fb01 f303 	mul.w	r3, r1, r3
 80144b8:	4413      	add	r3, r2
 80144ba:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80144be:	68bb      	ldr	r3, [r7, #8]
 80144c0:	4614      	mov	r4, r2
 80144c2:	461d      	mov	r5, r3
 80144c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80144c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80144c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80144ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80144cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80144ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80144d0:	682b      	ldr	r3, [r5, #0]
 80144d2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80144d4:	687a      	ldr	r2, [r7, #4]
 80144d6:	68b9      	ldr	r1, [r7, #8]
 80144d8:	68f8      	ldr	r0, [r7, #12]
 80144da:	f000 f849 	bl	8014570 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80144de:	68fb      	ldr	r3, [r7, #12]
 80144e0:	681b      	ldr	r3, [r3, #0]
 80144e2:	2201      	movs	r2, #1
 80144e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80144e6:	68fb      	ldr	r3, [r7, #12]
 80144e8:	2201      	movs	r2, #1
 80144ea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80144ee:	68fb      	ldr	r3, [r7, #12]
 80144f0:	2200      	movs	r2, #0
 80144f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80144f6:	2300      	movs	r3, #0
}
 80144f8:	4618      	mov	r0, r3
 80144fa:	3710      	adds	r7, #16
 80144fc:	46bd      	mov	sp, r7
 80144fe:	bdb0      	pop	{r4, r5, r7, pc}

08014500 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8014500:	b480      	push	{r7}
 8014502:	b083      	sub	sp, #12
 8014504:	af00      	add	r7, sp, #0
 8014506:	6078      	str	r0, [r7, #4]
 8014508:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8014510:	2b01      	cmp	r3, #1
 8014512:	d101      	bne.n	8014518 <HAL_LTDC_ProgramLineEvent+0x18>
 8014514:	2302      	movs	r3, #2
 8014516:	e023      	b.n	8014560 <HAL_LTDC_ProgramLineEvent+0x60>
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	2201      	movs	r2, #1
 801451c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	2202      	movs	r2, #2
 8014524:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	681b      	ldr	r3, [r3, #0]
 801452c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	681b      	ldr	r3, [r3, #0]
 8014532:	f022 0201 	bic.w	r2, r2, #1
 8014536:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8014538:	4a0c      	ldr	r2, [pc, #48]	; (801456c <HAL_LTDC_ProgramLineEvent+0x6c>)
 801453a:	683b      	ldr	r3, [r7, #0]
 801453c:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	681b      	ldr	r3, [r3, #0]
 8014542:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	f042 0201 	orr.w	r2, r2, #1
 801454c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	2201      	movs	r2, #1
 8014552:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	2200      	movs	r2, #0
 801455a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 801455e:	2300      	movs	r3, #0
}
 8014560:	4618      	mov	r0, r3
 8014562:	370c      	adds	r7, #12
 8014564:	46bd      	mov	sp, r7
 8014566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801456a:	4770      	bx	lr
 801456c:	40016800 	.word	0x40016800

08014570 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8014570:	b480      	push	{r7}
 8014572:	b089      	sub	sp, #36	; 0x24
 8014574:	af00      	add	r7, sp, #0
 8014576:	60f8      	str	r0, [r7, #12]
 8014578:	60b9      	str	r1, [r7, #8]
 801457a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 801457c:	68bb      	ldr	r3, [r7, #8]
 801457e:	685a      	ldr	r2, [r3, #4]
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	681b      	ldr	r3, [r3, #0]
 8014584:	68db      	ldr	r3, [r3, #12]
 8014586:	0c1b      	lsrs	r3, r3, #16
 8014588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801458c:	4413      	add	r3, r2
 801458e:	041b      	lsls	r3, r3, #16
 8014590:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8014592:	68fb      	ldr	r3, [r7, #12]
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	461a      	mov	r2, r3
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	01db      	lsls	r3, r3, #7
 801459c:	4413      	add	r3, r2
 801459e:	3384      	adds	r3, #132	; 0x84
 80145a0:	685b      	ldr	r3, [r3, #4]
 80145a2:	68fa      	ldr	r2, [r7, #12]
 80145a4:	6812      	ldr	r2, [r2, #0]
 80145a6:	4611      	mov	r1, r2
 80145a8:	687a      	ldr	r2, [r7, #4]
 80145aa:	01d2      	lsls	r2, r2, #7
 80145ac:	440a      	add	r2, r1
 80145ae:	3284      	adds	r2, #132	; 0x84
 80145b0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80145b4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80145b6:	68bb      	ldr	r3, [r7, #8]
 80145b8:	681a      	ldr	r2, [r3, #0]
 80145ba:	68fb      	ldr	r3, [r7, #12]
 80145bc:	681b      	ldr	r3, [r3, #0]
 80145be:	68db      	ldr	r3, [r3, #12]
 80145c0:	0c1b      	lsrs	r3, r3, #16
 80145c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80145c6:	4413      	add	r3, r2
 80145c8:	1c5a      	adds	r2, r3, #1
 80145ca:	68fb      	ldr	r3, [r7, #12]
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	4619      	mov	r1, r3
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	01db      	lsls	r3, r3, #7
 80145d4:	440b      	add	r3, r1
 80145d6:	3384      	adds	r3, #132	; 0x84
 80145d8:	4619      	mov	r1, r3
 80145da:	69fb      	ldr	r3, [r7, #28]
 80145dc:	4313      	orrs	r3, r2
 80145de:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80145e0:	68bb      	ldr	r3, [r7, #8]
 80145e2:	68da      	ldr	r2, [r3, #12]
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	68db      	ldr	r3, [r3, #12]
 80145ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80145ee:	4413      	add	r3, r2
 80145f0:	041b      	lsls	r3, r3, #16
 80145f2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80145f4:	68fb      	ldr	r3, [r7, #12]
 80145f6:	681b      	ldr	r3, [r3, #0]
 80145f8:	461a      	mov	r2, r3
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	01db      	lsls	r3, r3, #7
 80145fe:	4413      	add	r3, r2
 8014600:	3384      	adds	r3, #132	; 0x84
 8014602:	689b      	ldr	r3, [r3, #8]
 8014604:	68fa      	ldr	r2, [r7, #12]
 8014606:	6812      	ldr	r2, [r2, #0]
 8014608:	4611      	mov	r1, r2
 801460a:	687a      	ldr	r2, [r7, #4]
 801460c:	01d2      	lsls	r2, r2, #7
 801460e:	440a      	add	r2, r1
 8014610:	3284      	adds	r2, #132	; 0x84
 8014612:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8014616:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8014618:	68bb      	ldr	r3, [r7, #8]
 801461a:	689a      	ldr	r2, [r3, #8]
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	68db      	ldr	r3, [r3, #12]
 8014622:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014626:	4413      	add	r3, r2
 8014628:	1c5a      	adds	r2, r3, #1
 801462a:	68fb      	ldr	r3, [r7, #12]
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	4619      	mov	r1, r3
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	01db      	lsls	r3, r3, #7
 8014634:	440b      	add	r3, r1
 8014636:	3384      	adds	r3, #132	; 0x84
 8014638:	4619      	mov	r1, r3
 801463a:	69fb      	ldr	r3, [r7, #28]
 801463c:	4313      	orrs	r3, r2
 801463e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8014640:	68fb      	ldr	r3, [r7, #12]
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	461a      	mov	r2, r3
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	01db      	lsls	r3, r3, #7
 801464a:	4413      	add	r3, r2
 801464c:	3384      	adds	r3, #132	; 0x84
 801464e:	691b      	ldr	r3, [r3, #16]
 8014650:	68fa      	ldr	r2, [r7, #12]
 8014652:	6812      	ldr	r2, [r2, #0]
 8014654:	4611      	mov	r1, r2
 8014656:	687a      	ldr	r2, [r7, #4]
 8014658:	01d2      	lsls	r2, r2, #7
 801465a:	440a      	add	r2, r1
 801465c:	3284      	adds	r2, #132	; 0x84
 801465e:	f023 0307 	bic.w	r3, r3, #7
 8014662:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	681b      	ldr	r3, [r3, #0]
 8014668:	461a      	mov	r2, r3
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	01db      	lsls	r3, r3, #7
 801466e:	4413      	add	r3, r2
 8014670:	3384      	adds	r3, #132	; 0x84
 8014672:	461a      	mov	r2, r3
 8014674:	68bb      	ldr	r3, [r7, #8]
 8014676:	691b      	ldr	r3, [r3, #16]
 8014678:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 801467a:	68bb      	ldr	r3, [r7, #8]
 801467c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014680:	021b      	lsls	r3, r3, #8
 8014682:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8014684:	68bb      	ldr	r3, [r7, #8]
 8014686:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801468a:	041b      	lsls	r3, r3, #16
 801468c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 801468e:	68bb      	ldr	r3, [r7, #8]
 8014690:	699b      	ldr	r3, [r3, #24]
 8014692:	061b      	lsls	r3, r3, #24
 8014694:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8014696:	68fb      	ldr	r3, [r7, #12]
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	461a      	mov	r2, r3
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	01db      	lsls	r3, r3, #7
 80146a0:	4413      	add	r3, r2
 80146a2:	3384      	adds	r3, #132	; 0x84
 80146a4:	699b      	ldr	r3, [r3, #24]
 80146a6:	68fb      	ldr	r3, [r7, #12]
 80146a8:	681b      	ldr	r3, [r3, #0]
 80146aa:	461a      	mov	r2, r3
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	01db      	lsls	r3, r3, #7
 80146b0:	4413      	add	r3, r2
 80146b2:	3384      	adds	r3, #132	; 0x84
 80146b4:	461a      	mov	r2, r3
 80146b6:	2300      	movs	r3, #0
 80146b8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80146ba:	68bb      	ldr	r3, [r7, #8]
 80146bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80146c0:	461a      	mov	r2, r3
 80146c2:	69fb      	ldr	r3, [r7, #28]
 80146c4:	431a      	orrs	r2, r3
 80146c6:	69bb      	ldr	r3, [r7, #24]
 80146c8:	431a      	orrs	r2, r3
 80146ca:	68fb      	ldr	r3, [r7, #12]
 80146cc:	681b      	ldr	r3, [r3, #0]
 80146ce:	4619      	mov	r1, r3
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	01db      	lsls	r3, r3, #7
 80146d4:	440b      	add	r3, r1
 80146d6:	3384      	adds	r3, #132	; 0x84
 80146d8:	4619      	mov	r1, r3
 80146da:	697b      	ldr	r3, [r7, #20]
 80146dc:	4313      	orrs	r3, r2
 80146de:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80146e0:	68fb      	ldr	r3, [r7, #12]
 80146e2:	681b      	ldr	r3, [r3, #0]
 80146e4:	461a      	mov	r2, r3
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	01db      	lsls	r3, r3, #7
 80146ea:	4413      	add	r3, r2
 80146ec:	3384      	adds	r3, #132	; 0x84
 80146ee:	695b      	ldr	r3, [r3, #20]
 80146f0:	68fa      	ldr	r2, [r7, #12]
 80146f2:	6812      	ldr	r2, [r2, #0]
 80146f4:	4611      	mov	r1, r2
 80146f6:	687a      	ldr	r2, [r7, #4]
 80146f8:	01d2      	lsls	r2, r2, #7
 80146fa:	440a      	add	r2, r1
 80146fc:	3284      	adds	r2, #132	; 0x84
 80146fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8014702:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	461a      	mov	r2, r3
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	01db      	lsls	r3, r3, #7
 801470e:	4413      	add	r3, r2
 8014710:	3384      	adds	r3, #132	; 0x84
 8014712:	461a      	mov	r2, r3
 8014714:	68bb      	ldr	r3, [r7, #8]
 8014716:	695b      	ldr	r3, [r3, #20]
 8014718:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 801471a:	68fb      	ldr	r3, [r7, #12]
 801471c:	681b      	ldr	r3, [r3, #0]
 801471e:	461a      	mov	r2, r3
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	01db      	lsls	r3, r3, #7
 8014724:	4413      	add	r3, r2
 8014726:	3384      	adds	r3, #132	; 0x84
 8014728:	69db      	ldr	r3, [r3, #28]
 801472a:	68fa      	ldr	r2, [r7, #12]
 801472c:	6812      	ldr	r2, [r2, #0]
 801472e:	4611      	mov	r1, r2
 8014730:	687a      	ldr	r2, [r7, #4]
 8014732:	01d2      	lsls	r2, r2, #7
 8014734:	440a      	add	r2, r1
 8014736:	3284      	adds	r2, #132	; 0x84
 8014738:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 801473c:	f023 0307 	bic.w	r3, r3, #7
 8014740:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8014742:	68bb      	ldr	r3, [r7, #8]
 8014744:	69da      	ldr	r2, [r3, #28]
 8014746:	68bb      	ldr	r3, [r7, #8]
 8014748:	6a1b      	ldr	r3, [r3, #32]
 801474a:	68f9      	ldr	r1, [r7, #12]
 801474c:	6809      	ldr	r1, [r1, #0]
 801474e:	4608      	mov	r0, r1
 8014750:	6879      	ldr	r1, [r7, #4]
 8014752:	01c9      	lsls	r1, r1, #7
 8014754:	4401      	add	r1, r0
 8014756:	3184      	adds	r1, #132	; 0x84
 8014758:	4313      	orrs	r3, r2
 801475a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 801475c:	68fb      	ldr	r3, [r7, #12]
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	461a      	mov	r2, r3
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	01db      	lsls	r3, r3, #7
 8014766:	4413      	add	r3, r2
 8014768:	3384      	adds	r3, #132	; 0x84
 801476a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801476c:	68fb      	ldr	r3, [r7, #12]
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	461a      	mov	r2, r3
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	01db      	lsls	r3, r3, #7
 8014776:	4413      	add	r3, r2
 8014778:	3384      	adds	r3, #132	; 0x84
 801477a:	461a      	mov	r2, r3
 801477c:	2300      	movs	r3, #0
 801477e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8014780:	68fb      	ldr	r3, [r7, #12]
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	461a      	mov	r2, r3
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	01db      	lsls	r3, r3, #7
 801478a:	4413      	add	r3, r2
 801478c:	3384      	adds	r3, #132	; 0x84
 801478e:	461a      	mov	r2, r3
 8014790:	68bb      	ldr	r3, [r7, #8]
 8014792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014794:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8014796:	68bb      	ldr	r3, [r7, #8]
 8014798:	691b      	ldr	r3, [r3, #16]
 801479a:	2b00      	cmp	r3, #0
 801479c:	d102      	bne.n	80147a4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 801479e:	2304      	movs	r3, #4
 80147a0:	61fb      	str	r3, [r7, #28]
 80147a2:	e01b      	b.n	80147dc <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80147a4:	68bb      	ldr	r3, [r7, #8]
 80147a6:	691b      	ldr	r3, [r3, #16]
 80147a8:	2b01      	cmp	r3, #1
 80147aa:	d102      	bne.n	80147b2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80147ac:	2303      	movs	r3, #3
 80147ae:	61fb      	str	r3, [r7, #28]
 80147b0:	e014      	b.n	80147dc <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80147b2:	68bb      	ldr	r3, [r7, #8]
 80147b4:	691b      	ldr	r3, [r3, #16]
 80147b6:	2b04      	cmp	r3, #4
 80147b8:	d00b      	beq.n	80147d2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80147ba:	68bb      	ldr	r3, [r7, #8]
 80147bc:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80147be:	2b02      	cmp	r3, #2
 80147c0:	d007      	beq.n	80147d2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80147c2:	68bb      	ldr	r3, [r7, #8]
 80147c4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80147c6:	2b03      	cmp	r3, #3
 80147c8:	d003      	beq.n	80147d2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80147ca:	68bb      	ldr	r3, [r7, #8]
 80147cc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80147ce:	2b07      	cmp	r3, #7
 80147d0:	d102      	bne.n	80147d8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80147d2:	2302      	movs	r3, #2
 80147d4:	61fb      	str	r3, [r7, #28]
 80147d6:	e001      	b.n	80147dc <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80147d8:	2301      	movs	r3, #1
 80147da:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80147dc:	68fb      	ldr	r3, [r7, #12]
 80147de:	681b      	ldr	r3, [r3, #0]
 80147e0:	461a      	mov	r2, r3
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	01db      	lsls	r3, r3, #7
 80147e6:	4413      	add	r3, r2
 80147e8:	3384      	adds	r3, #132	; 0x84
 80147ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147ec:	68fa      	ldr	r2, [r7, #12]
 80147ee:	6812      	ldr	r2, [r2, #0]
 80147f0:	4611      	mov	r1, r2
 80147f2:	687a      	ldr	r2, [r7, #4]
 80147f4:	01d2      	lsls	r2, r2, #7
 80147f6:	440a      	add	r2, r1
 80147f8:	3284      	adds	r2, #132	; 0x84
 80147fa:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80147fe:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8014800:	68bb      	ldr	r3, [r7, #8]
 8014802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014804:	69fa      	ldr	r2, [r7, #28]
 8014806:	fb02 f303 	mul.w	r3, r2, r3
 801480a:	041a      	lsls	r2, r3, #16
 801480c:	68bb      	ldr	r3, [r7, #8]
 801480e:	6859      	ldr	r1, [r3, #4]
 8014810:	68bb      	ldr	r3, [r7, #8]
 8014812:	681b      	ldr	r3, [r3, #0]
 8014814:	1acb      	subs	r3, r1, r3
 8014816:	69f9      	ldr	r1, [r7, #28]
 8014818:	fb01 f303 	mul.w	r3, r1, r3
 801481c:	3303      	adds	r3, #3
 801481e:	68f9      	ldr	r1, [r7, #12]
 8014820:	6809      	ldr	r1, [r1, #0]
 8014822:	4608      	mov	r0, r1
 8014824:	6879      	ldr	r1, [r7, #4]
 8014826:	01c9      	lsls	r1, r1, #7
 8014828:	4401      	add	r1, r0
 801482a:	3184      	adds	r1, #132	; 0x84
 801482c:	4313      	orrs	r3, r2
 801482e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8014830:	68fb      	ldr	r3, [r7, #12]
 8014832:	681b      	ldr	r3, [r3, #0]
 8014834:	461a      	mov	r2, r3
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	01db      	lsls	r3, r3, #7
 801483a:	4413      	add	r3, r2
 801483c:	3384      	adds	r3, #132	; 0x84
 801483e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014840:	68fa      	ldr	r2, [r7, #12]
 8014842:	6812      	ldr	r2, [r2, #0]
 8014844:	4611      	mov	r1, r2
 8014846:	687a      	ldr	r2, [r7, #4]
 8014848:	01d2      	lsls	r2, r2, #7
 801484a:	440a      	add	r2, r1
 801484c:	3284      	adds	r2, #132	; 0x84
 801484e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8014852:	f023 0307 	bic.w	r3, r3, #7
 8014856:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	681b      	ldr	r3, [r3, #0]
 801485c:	461a      	mov	r2, r3
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	01db      	lsls	r3, r3, #7
 8014862:	4413      	add	r3, r2
 8014864:	3384      	adds	r3, #132	; 0x84
 8014866:	461a      	mov	r2, r3
 8014868:	68bb      	ldr	r3, [r7, #8]
 801486a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801486c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	681b      	ldr	r3, [r3, #0]
 8014872:	461a      	mov	r2, r3
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	01db      	lsls	r3, r3, #7
 8014878:	4413      	add	r3, r2
 801487a:	3384      	adds	r3, #132	; 0x84
 801487c:	681b      	ldr	r3, [r3, #0]
 801487e:	68fa      	ldr	r2, [r7, #12]
 8014880:	6812      	ldr	r2, [r2, #0]
 8014882:	4611      	mov	r1, r2
 8014884:	687a      	ldr	r2, [r7, #4]
 8014886:	01d2      	lsls	r2, r2, #7
 8014888:	440a      	add	r2, r1
 801488a:	3284      	adds	r2, #132	; 0x84
 801488c:	f043 0301 	orr.w	r3, r3, #1
 8014890:	6013      	str	r3, [r2, #0]
}
 8014892:	bf00      	nop
 8014894:	3724      	adds	r7, #36	; 0x24
 8014896:	46bd      	mov	sp, r7
 8014898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801489c:	4770      	bx	lr
	...

080148a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80148a0:	b580      	push	{r7, lr}
 80148a2:	b086      	sub	sp, #24
 80148a4:	af00      	add	r7, sp, #0
 80148a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d101      	bne.n	80148b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80148ae:	2301      	movs	r3, #1
 80148b0:	e25b      	b.n	8014d6a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	681b      	ldr	r3, [r3, #0]
 80148b6:	f003 0301 	and.w	r3, r3, #1
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d075      	beq.n	80149aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80148be:	4ba3      	ldr	r3, [pc, #652]	; (8014b4c <HAL_RCC_OscConfig+0x2ac>)
 80148c0:	689b      	ldr	r3, [r3, #8]
 80148c2:	f003 030c 	and.w	r3, r3, #12
 80148c6:	2b04      	cmp	r3, #4
 80148c8:	d00c      	beq.n	80148e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80148ca:	4ba0      	ldr	r3, [pc, #640]	; (8014b4c <HAL_RCC_OscConfig+0x2ac>)
 80148cc:	689b      	ldr	r3, [r3, #8]
 80148ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80148d2:	2b08      	cmp	r3, #8
 80148d4:	d112      	bne.n	80148fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80148d6:	4b9d      	ldr	r3, [pc, #628]	; (8014b4c <HAL_RCC_OscConfig+0x2ac>)
 80148d8:	685b      	ldr	r3, [r3, #4]
 80148da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80148de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80148e2:	d10b      	bne.n	80148fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80148e4:	4b99      	ldr	r3, [pc, #612]	; (8014b4c <HAL_RCC_OscConfig+0x2ac>)
 80148e6:	681b      	ldr	r3, [r3, #0]
 80148e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d05b      	beq.n	80149a8 <HAL_RCC_OscConfig+0x108>
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	685b      	ldr	r3, [r3, #4]
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d157      	bne.n	80149a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80148f8:	2301      	movs	r3, #1
 80148fa:	e236      	b.n	8014d6a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	685b      	ldr	r3, [r3, #4]
 8014900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014904:	d106      	bne.n	8014914 <HAL_RCC_OscConfig+0x74>
 8014906:	4b91      	ldr	r3, [pc, #580]	; (8014b4c <HAL_RCC_OscConfig+0x2ac>)
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	4a90      	ldr	r2, [pc, #576]	; (8014b4c <HAL_RCC_OscConfig+0x2ac>)
 801490c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014910:	6013      	str	r3, [r2, #0]
 8014912:	e01d      	b.n	8014950 <HAL_RCC_OscConfig+0xb0>
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	685b      	ldr	r3, [r3, #4]
 8014918:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801491c:	d10c      	bne.n	8014938 <HAL_RCC_OscConfig+0x98>
 801491e:	4b8b      	ldr	r3, [pc, #556]	; (8014b4c <HAL_RCC_OscConfig+0x2ac>)
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	4a8a      	ldr	r2, [pc, #552]	; (8014b4c <HAL_RCC_OscConfig+0x2ac>)
 8014924:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8014928:	6013      	str	r3, [r2, #0]
 801492a:	4b88      	ldr	r3, [pc, #544]	; (8014b4c <HAL_RCC_OscConfig+0x2ac>)
 801492c:	681b      	ldr	r3, [r3, #0]
 801492e:	4a87      	ldr	r2, [pc, #540]	; (8014b4c <HAL_RCC_OscConfig+0x2ac>)
 8014930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014934:	6013      	str	r3, [r2, #0]
 8014936:	e00b      	b.n	8014950 <HAL_RCC_OscConfig+0xb0>
 8014938:	4b84      	ldr	r3, [pc, #528]	; (8014b4c <HAL_RCC_OscConfig+0x2ac>)
 801493a:	681b      	ldr	r3, [r3, #0]
 801493c:	4a83      	ldr	r2, [pc, #524]	; (8014b4c <HAL_RCC_OscConfig+0x2ac>)
 801493e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8014942:	6013      	str	r3, [r2, #0]
 8014944:	4b81      	ldr	r3, [pc, #516]	; (8014b4c <HAL_RCC_OscConfig+0x2ac>)
 8014946:	681b      	ldr	r3, [r3, #0]
 8014948:	4a80      	ldr	r2, [pc, #512]	; (8014b4c <HAL_RCC_OscConfig+0x2ac>)
 801494a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801494e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	685b      	ldr	r3, [r3, #4]
 8014954:	2b00      	cmp	r3, #0
 8014956:	d013      	beq.n	8014980 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014958:	f7fd fae6 	bl	8011f28 <HAL_GetTick>
 801495c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801495e:	e008      	b.n	8014972 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8014960:	f7fd fae2 	bl	8011f28 <HAL_GetTick>
 8014964:	4602      	mov	r2, r0
 8014966:	693b      	ldr	r3, [r7, #16]
 8014968:	1ad3      	subs	r3, r2, r3
 801496a:	2b64      	cmp	r3, #100	; 0x64
 801496c:	d901      	bls.n	8014972 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801496e:	2303      	movs	r3, #3
 8014970:	e1fb      	b.n	8014d6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8014972:	4b76      	ldr	r3, [pc, #472]	; (8014b4c <HAL_RCC_OscConfig+0x2ac>)
 8014974:	681b      	ldr	r3, [r3, #0]
 8014976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801497a:	2b00      	cmp	r3, #0
 801497c:	d0f0      	beq.n	8014960 <HAL_RCC_OscConfig+0xc0>
 801497e:	e014      	b.n	80149aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014980:	f7fd fad2 	bl	8011f28 <HAL_GetTick>
 8014984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8014986:	e008      	b.n	801499a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8014988:	f7fd face 	bl	8011f28 <HAL_GetTick>
 801498c:	4602      	mov	r2, r0
 801498e:	693b      	ldr	r3, [r7, #16]
 8014990:	1ad3      	subs	r3, r2, r3
 8014992:	2b64      	cmp	r3, #100	; 0x64
 8014994:	d901      	bls.n	801499a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8014996:	2303      	movs	r3, #3
 8014998:	e1e7      	b.n	8014d6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801499a:	4b6c      	ldr	r3, [pc, #432]	; (8014b4c <HAL_RCC_OscConfig+0x2ac>)
 801499c:	681b      	ldr	r3, [r3, #0]
 801499e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d1f0      	bne.n	8014988 <HAL_RCC_OscConfig+0xe8>
 80149a6:	e000      	b.n	80149aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80149a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	f003 0302 	and.w	r3, r3, #2
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d063      	beq.n	8014a7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80149b6:	4b65      	ldr	r3, [pc, #404]	; (8014b4c <HAL_RCC_OscConfig+0x2ac>)
 80149b8:	689b      	ldr	r3, [r3, #8]
 80149ba:	f003 030c 	and.w	r3, r3, #12
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d00b      	beq.n	80149da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80149c2:	4b62      	ldr	r3, [pc, #392]	; (8014b4c <HAL_RCC_OscConfig+0x2ac>)
 80149c4:	689b      	ldr	r3, [r3, #8]
 80149c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80149ca:	2b08      	cmp	r3, #8
 80149cc:	d11c      	bne.n	8014a08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80149ce:	4b5f      	ldr	r3, [pc, #380]	; (8014b4c <HAL_RCC_OscConfig+0x2ac>)
 80149d0:	685b      	ldr	r3, [r3, #4]
 80149d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d116      	bne.n	8014a08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80149da:	4b5c      	ldr	r3, [pc, #368]	; (8014b4c <HAL_RCC_OscConfig+0x2ac>)
 80149dc:	681b      	ldr	r3, [r3, #0]
 80149de:	f003 0302 	and.w	r3, r3, #2
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d005      	beq.n	80149f2 <HAL_RCC_OscConfig+0x152>
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	68db      	ldr	r3, [r3, #12]
 80149ea:	2b01      	cmp	r3, #1
 80149ec:	d001      	beq.n	80149f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80149ee:	2301      	movs	r3, #1
 80149f0:	e1bb      	b.n	8014d6a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80149f2:	4b56      	ldr	r3, [pc, #344]	; (8014b4c <HAL_RCC_OscConfig+0x2ac>)
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	691b      	ldr	r3, [r3, #16]
 80149fe:	00db      	lsls	r3, r3, #3
 8014a00:	4952      	ldr	r1, [pc, #328]	; (8014b4c <HAL_RCC_OscConfig+0x2ac>)
 8014a02:	4313      	orrs	r3, r2
 8014a04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8014a06:	e03a      	b.n	8014a7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	68db      	ldr	r3, [r3, #12]
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d020      	beq.n	8014a52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8014a10:	4b4f      	ldr	r3, [pc, #316]	; (8014b50 <HAL_RCC_OscConfig+0x2b0>)
 8014a12:	2201      	movs	r2, #1
 8014a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014a16:	f7fd fa87 	bl	8011f28 <HAL_GetTick>
 8014a1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8014a1c:	e008      	b.n	8014a30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8014a1e:	f7fd fa83 	bl	8011f28 <HAL_GetTick>
 8014a22:	4602      	mov	r2, r0
 8014a24:	693b      	ldr	r3, [r7, #16]
 8014a26:	1ad3      	subs	r3, r2, r3
 8014a28:	2b02      	cmp	r3, #2
 8014a2a:	d901      	bls.n	8014a30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8014a2c:	2303      	movs	r3, #3
 8014a2e:	e19c      	b.n	8014d6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8014a30:	4b46      	ldr	r3, [pc, #280]	; (8014b4c <HAL_RCC_OscConfig+0x2ac>)
 8014a32:	681b      	ldr	r3, [r3, #0]
 8014a34:	f003 0302 	and.w	r3, r3, #2
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d0f0      	beq.n	8014a1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014a3c:	4b43      	ldr	r3, [pc, #268]	; (8014b4c <HAL_RCC_OscConfig+0x2ac>)
 8014a3e:	681b      	ldr	r3, [r3, #0]
 8014a40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	691b      	ldr	r3, [r3, #16]
 8014a48:	00db      	lsls	r3, r3, #3
 8014a4a:	4940      	ldr	r1, [pc, #256]	; (8014b4c <HAL_RCC_OscConfig+0x2ac>)
 8014a4c:	4313      	orrs	r3, r2
 8014a4e:	600b      	str	r3, [r1, #0]
 8014a50:	e015      	b.n	8014a7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8014a52:	4b3f      	ldr	r3, [pc, #252]	; (8014b50 <HAL_RCC_OscConfig+0x2b0>)
 8014a54:	2200      	movs	r2, #0
 8014a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014a58:	f7fd fa66 	bl	8011f28 <HAL_GetTick>
 8014a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8014a5e:	e008      	b.n	8014a72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8014a60:	f7fd fa62 	bl	8011f28 <HAL_GetTick>
 8014a64:	4602      	mov	r2, r0
 8014a66:	693b      	ldr	r3, [r7, #16]
 8014a68:	1ad3      	subs	r3, r2, r3
 8014a6a:	2b02      	cmp	r3, #2
 8014a6c:	d901      	bls.n	8014a72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8014a6e:	2303      	movs	r3, #3
 8014a70:	e17b      	b.n	8014d6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8014a72:	4b36      	ldr	r3, [pc, #216]	; (8014b4c <HAL_RCC_OscConfig+0x2ac>)
 8014a74:	681b      	ldr	r3, [r3, #0]
 8014a76:	f003 0302 	and.w	r3, r3, #2
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d1f0      	bne.n	8014a60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	f003 0308 	and.w	r3, r3, #8
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d030      	beq.n	8014aec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	695b      	ldr	r3, [r3, #20]
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d016      	beq.n	8014ac0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8014a92:	4b30      	ldr	r3, [pc, #192]	; (8014b54 <HAL_RCC_OscConfig+0x2b4>)
 8014a94:	2201      	movs	r2, #1
 8014a96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014a98:	f7fd fa46 	bl	8011f28 <HAL_GetTick>
 8014a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8014a9e:	e008      	b.n	8014ab2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8014aa0:	f7fd fa42 	bl	8011f28 <HAL_GetTick>
 8014aa4:	4602      	mov	r2, r0
 8014aa6:	693b      	ldr	r3, [r7, #16]
 8014aa8:	1ad3      	subs	r3, r2, r3
 8014aaa:	2b02      	cmp	r3, #2
 8014aac:	d901      	bls.n	8014ab2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8014aae:	2303      	movs	r3, #3
 8014ab0:	e15b      	b.n	8014d6a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8014ab2:	4b26      	ldr	r3, [pc, #152]	; (8014b4c <HAL_RCC_OscConfig+0x2ac>)
 8014ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014ab6:	f003 0302 	and.w	r3, r3, #2
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d0f0      	beq.n	8014aa0 <HAL_RCC_OscConfig+0x200>
 8014abe:	e015      	b.n	8014aec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8014ac0:	4b24      	ldr	r3, [pc, #144]	; (8014b54 <HAL_RCC_OscConfig+0x2b4>)
 8014ac2:	2200      	movs	r2, #0
 8014ac4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8014ac6:	f7fd fa2f 	bl	8011f28 <HAL_GetTick>
 8014aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8014acc:	e008      	b.n	8014ae0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8014ace:	f7fd fa2b 	bl	8011f28 <HAL_GetTick>
 8014ad2:	4602      	mov	r2, r0
 8014ad4:	693b      	ldr	r3, [r7, #16]
 8014ad6:	1ad3      	subs	r3, r2, r3
 8014ad8:	2b02      	cmp	r3, #2
 8014ada:	d901      	bls.n	8014ae0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8014adc:	2303      	movs	r3, #3
 8014ade:	e144      	b.n	8014d6a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8014ae0:	4b1a      	ldr	r3, [pc, #104]	; (8014b4c <HAL_RCC_OscConfig+0x2ac>)
 8014ae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014ae4:	f003 0302 	and.w	r3, r3, #2
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d1f0      	bne.n	8014ace <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	f003 0304 	and.w	r3, r3, #4
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	f000 80a0 	beq.w	8014c3a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8014afa:	2300      	movs	r3, #0
 8014afc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8014afe:	4b13      	ldr	r3, [pc, #76]	; (8014b4c <HAL_RCC_OscConfig+0x2ac>)
 8014b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d10f      	bne.n	8014b2a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8014b0a:	2300      	movs	r3, #0
 8014b0c:	60bb      	str	r3, [r7, #8]
 8014b0e:	4b0f      	ldr	r3, [pc, #60]	; (8014b4c <HAL_RCC_OscConfig+0x2ac>)
 8014b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b12:	4a0e      	ldr	r2, [pc, #56]	; (8014b4c <HAL_RCC_OscConfig+0x2ac>)
 8014b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014b18:	6413      	str	r3, [r2, #64]	; 0x40
 8014b1a:	4b0c      	ldr	r3, [pc, #48]	; (8014b4c <HAL_RCC_OscConfig+0x2ac>)
 8014b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014b22:	60bb      	str	r3, [r7, #8]
 8014b24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8014b26:	2301      	movs	r3, #1
 8014b28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014b2a:	4b0b      	ldr	r3, [pc, #44]	; (8014b58 <HAL_RCC_OscConfig+0x2b8>)
 8014b2c:	681b      	ldr	r3, [r3, #0]
 8014b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d121      	bne.n	8014b7a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8014b36:	4b08      	ldr	r3, [pc, #32]	; (8014b58 <HAL_RCC_OscConfig+0x2b8>)
 8014b38:	681b      	ldr	r3, [r3, #0]
 8014b3a:	4a07      	ldr	r2, [pc, #28]	; (8014b58 <HAL_RCC_OscConfig+0x2b8>)
 8014b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014b40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8014b42:	f7fd f9f1 	bl	8011f28 <HAL_GetTick>
 8014b46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014b48:	e011      	b.n	8014b6e <HAL_RCC_OscConfig+0x2ce>
 8014b4a:	bf00      	nop
 8014b4c:	40023800 	.word	0x40023800
 8014b50:	42470000 	.word	0x42470000
 8014b54:	42470e80 	.word	0x42470e80
 8014b58:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8014b5c:	f7fd f9e4 	bl	8011f28 <HAL_GetTick>
 8014b60:	4602      	mov	r2, r0
 8014b62:	693b      	ldr	r3, [r7, #16]
 8014b64:	1ad3      	subs	r3, r2, r3
 8014b66:	2b02      	cmp	r3, #2
 8014b68:	d901      	bls.n	8014b6e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8014b6a:	2303      	movs	r3, #3
 8014b6c:	e0fd      	b.n	8014d6a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014b6e:	4b81      	ldr	r3, [pc, #516]	; (8014d74 <HAL_RCC_OscConfig+0x4d4>)
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d0f0      	beq.n	8014b5c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	689b      	ldr	r3, [r3, #8]
 8014b7e:	2b01      	cmp	r3, #1
 8014b80:	d106      	bne.n	8014b90 <HAL_RCC_OscConfig+0x2f0>
 8014b82:	4b7d      	ldr	r3, [pc, #500]	; (8014d78 <HAL_RCC_OscConfig+0x4d8>)
 8014b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014b86:	4a7c      	ldr	r2, [pc, #496]	; (8014d78 <HAL_RCC_OscConfig+0x4d8>)
 8014b88:	f043 0301 	orr.w	r3, r3, #1
 8014b8c:	6713      	str	r3, [r2, #112]	; 0x70
 8014b8e:	e01c      	b.n	8014bca <HAL_RCC_OscConfig+0x32a>
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	689b      	ldr	r3, [r3, #8]
 8014b94:	2b05      	cmp	r3, #5
 8014b96:	d10c      	bne.n	8014bb2 <HAL_RCC_OscConfig+0x312>
 8014b98:	4b77      	ldr	r3, [pc, #476]	; (8014d78 <HAL_RCC_OscConfig+0x4d8>)
 8014b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014b9c:	4a76      	ldr	r2, [pc, #472]	; (8014d78 <HAL_RCC_OscConfig+0x4d8>)
 8014b9e:	f043 0304 	orr.w	r3, r3, #4
 8014ba2:	6713      	str	r3, [r2, #112]	; 0x70
 8014ba4:	4b74      	ldr	r3, [pc, #464]	; (8014d78 <HAL_RCC_OscConfig+0x4d8>)
 8014ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014ba8:	4a73      	ldr	r2, [pc, #460]	; (8014d78 <HAL_RCC_OscConfig+0x4d8>)
 8014baa:	f043 0301 	orr.w	r3, r3, #1
 8014bae:	6713      	str	r3, [r2, #112]	; 0x70
 8014bb0:	e00b      	b.n	8014bca <HAL_RCC_OscConfig+0x32a>
 8014bb2:	4b71      	ldr	r3, [pc, #452]	; (8014d78 <HAL_RCC_OscConfig+0x4d8>)
 8014bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014bb6:	4a70      	ldr	r2, [pc, #448]	; (8014d78 <HAL_RCC_OscConfig+0x4d8>)
 8014bb8:	f023 0301 	bic.w	r3, r3, #1
 8014bbc:	6713      	str	r3, [r2, #112]	; 0x70
 8014bbe:	4b6e      	ldr	r3, [pc, #440]	; (8014d78 <HAL_RCC_OscConfig+0x4d8>)
 8014bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014bc2:	4a6d      	ldr	r2, [pc, #436]	; (8014d78 <HAL_RCC_OscConfig+0x4d8>)
 8014bc4:	f023 0304 	bic.w	r3, r3, #4
 8014bc8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	689b      	ldr	r3, [r3, #8]
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d015      	beq.n	8014bfe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014bd2:	f7fd f9a9 	bl	8011f28 <HAL_GetTick>
 8014bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8014bd8:	e00a      	b.n	8014bf0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8014bda:	f7fd f9a5 	bl	8011f28 <HAL_GetTick>
 8014bde:	4602      	mov	r2, r0
 8014be0:	693b      	ldr	r3, [r7, #16]
 8014be2:	1ad3      	subs	r3, r2, r3
 8014be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8014be8:	4293      	cmp	r3, r2
 8014bea:	d901      	bls.n	8014bf0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8014bec:	2303      	movs	r3, #3
 8014bee:	e0bc      	b.n	8014d6a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8014bf0:	4b61      	ldr	r3, [pc, #388]	; (8014d78 <HAL_RCC_OscConfig+0x4d8>)
 8014bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014bf4:	f003 0302 	and.w	r3, r3, #2
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	d0ee      	beq.n	8014bda <HAL_RCC_OscConfig+0x33a>
 8014bfc:	e014      	b.n	8014c28 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8014bfe:	f7fd f993 	bl	8011f28 <HAL_GetTick>
 8014c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8014c04:	e00a      	b.n	8014c1c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8014c06:	f7fd f98f 	bl	8011f28 <HAL_GetTick>
 8014c0a:	4602      	mov	r2, r0
 8014c0c:	693b      	ldr	r3, [r7, #16]
 8014c0e:	1ad3      	subs	r3, r2, r3
 8014c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8014c14:	4293      	cmp	r3, r2
 8014c16:	d901      	bls.n	8014c1c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8014c18:	2303      	movs	r3, #3
 8014c1a:	e0a6      	b.n	8014d6a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8014c1c:	4b56      	ldr	r3, [pc, #344]	; (8014d78 <HAL_RCC_OscConfig+0x4d8>)
 8014c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014c20:	f003 0302 	and.w	r3, r3, #2
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	d1ee      	bne.n	8014c06 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8014c28:	7dfb      	ldrb	r3, [r7, #23]
 8014c2a:	2b01      	cmp	r3, #1
 8014c2c:	d105      	bne.n	8014c3a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8014c2e:	4b52      	ldr	r3, [pc, #328]	; (8014d78 <HAL_RCC_OscConfig+0x4d8>)
 8014c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c32:	4a51      	ldr	r2, [pc, #324]	; (8014d78 <HAL_RCC_OscConfig+0x4d8>)
 8014c34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014c38:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	699b      	ldr	r3, [r3, #24]
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	f000 8092 	beq.w	8014d68 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8014c44:	4b4c      	ldr	r3, [pc, #304]	; (8014d78 <HAL_RCC_OscConfig+0x4d8>)
 8014c46:	689b      	ldr	r3, [r3, #8]
 8014c48:	f003 030c 	and.w	r3, r3, #12
 8014c4c:	2b08      	cmp	r3, #8
 8014c4e:	d05c      	beq.n	8014d0a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	699b      	ldr	r3, [r3, #24]
 8014c54:	2b02      	cmp	r3, #2
 8014c56:	d141      	bne.n	8014cdc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014c58:	4b48      	ldr	r3, [pc, #288]	; (8014d7c <HAL_RCC_OscConfig+0x4dc>)
 8014c5a:	2200      	movs	r2, #0
 8014c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014c5e:	f7fd f963 	bl	8011f28 <HAL_GetTick>
 8014c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8014c64:	e008      	b.n	8014c78 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014c66:	f7fd f95f 	bl	8011f28 <HAL_GetTick>
 8014c6a:	4602      	mov	r2, r0
 8014c6c:	693b      	ldr	r3, [r7, #16]
 8014c6e:	1ad3      	subs	r3, r2, r3
 8014c70:	2b02      	cmp	r3, #2
 8014c72:	d901      	bls.n	8014c78 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8014c74:	2303      	movs	r3, #3
 8014c76:	e078      	b.n	8014d6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8014c78:	4b3f      	ldr	r3, [pc, #252]	; (8014d78 <HAL_RCC_OscConfig+0x4d8>)
 8014c7a:	681b      	ldr	r3, [r3, #0]
 8014c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d1f0      	bne.n	8014c66 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	69da      	ldr	r2, [r3, #28]
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	6a1b      	ldr	r3, [r3, #32]
 8014c8c:	431a      	orrs	r2, r3
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c92:	019b      	lsls	r3, r3, #6
 8014c94:	431a      	orrs	r2, r3
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c9a:	085b      	lsrs	r3, r3, #1
 8014c9c:	3b01      	subs	r3, #1
 8014c9e:	041b      	lsls	r3, r3, #16
 8014ca0:	431a      	orrs	r2, r3
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ca6:	061b      	lsls	r3, r3, #24
 8014ca8:	4933      	ldr	r1, [pc, #204]	; (8014d78 <HAL_RCC_OscConfig+0x4d8>)
 8014caa:	4313      	orrs	r3, r2
 8014cac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8014cae:	4b33      	ldr	r3, [pc, #204]	; (8014d7c <HAL_RCC_OscConfig+0x4dc>)
 8014cb0:	2201      	movs	r2, #1
 8014cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014cb4:	f7fd f938 	bl	8011f28 <HAL_GetTick>
 8014cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8014cba:	e008      	b.n	8014cce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014cbc:	f7fd f934 	bl	8011f28 <HAL_GetTick>
 8014cc0:	4602      	mov	r2, r0
 8014cc2:	693b      	ldr	r3, [r7, #16]
 8014cc4:	1ad3      	subs	r3, r2, r3
 8014cc6:	2b02      	cmp	r3, #2
 8014cc8:	d901      	bls.n	8014cce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8014cca:	2303      	movs	r3, #3
 8014ccc:	e04d      	b.n	8014d6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8014cce:	4b2a      	ldr	r3, [pc, #168]	; (8014d78 <HAL_RCC_OscConfig+0x4d8>)
 8014cd0:	681b      	ldr	r3, [r3, #0]
 8014cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d0f0      	beq.n	8014cbc <HAL_RCC_OscConfig+0x41c>
 8014cda:	e045      	b.n	8014d68 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014cdc:	4b27      	ldr	r3, [pc, #156]	; (8014d7c <HAL_RCC_OscConfig+0x4dc>)
 8014cde:	2200      	movs	r2, #0
 8014ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014ce2:	f7fd f921 	bl	8011f28 <HAL_GetTick>
 8014ce6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8014ce8:	e008      	b.n	8014cfc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014cea:	f7fd f91d 	bl	8011f28 <HAL_GetTick>
 8014cee:	4602      	mov	r2, r0
 8014cf0:	693b      	ldr	r3, [r7, #16]
 8014cf2:	1ad3      	subs	r3, r2, r3
 8014cf4:	2b02      	cmp	r3, #2
 8014cf6:	d901      	bls.n	8014cfc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8014cf8:	2303      	movs	r3, #3
 8014cfa:	e036      	b.n	8014d6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8014cfc:	4b1e      	ldr	r3, [pc, #120]	; (8014d78 <HAL_RCC_OscConfig+0x4d8>)
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d1f0      	bne.n	8014cea <HAL_RCC_OscConfig+0x44a>
 8014d08:	e02e      	b.n	8014d68 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	699b      	ldr	r3, [r3, #24]
 8014d0e:	2b01      	cmp	r3, #1
 8014d10:	d101      	bne.n	8014d16 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8014d12:	2301      	movs	r3, #1
 8014d14:	e029      	b.n	8014d6a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8014d16:	4b18      	ldr	r3, [pc, #96]	; (8014d78 <HAL_RCC_OscConfig+0x4d8>)
 8014d18:	685b      	ldr	r3, [r3, #4]
 8014d1a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014d1c:	68fb      	ldr	r3, [r7, #12]
 8014d1e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	69db      	ldr	r3, [r3, #28]
 8014d26:	429a      	cmp	r2, r3
 8014d28:	d11c      	bne.n	8014d64 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014d34:	429a      	cmp	r2, r3
 8014d36:	d115      	bne.n	8014d64 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8014d38:	68fa      	ldr	r2, [r7, #12]
 8014d3a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8014d3e:	4013      	ands	r3, r2
 8014d40:	687a      	ldr	r2, [r7, #4]
 8014d42:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8014d44:	4293      	cmp	r3, r2
 8014d46:	d10d      	bne.n	8014d64 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8014d48:	68fb      	ldr	r3, [r7, #12]
 8014d4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8014d52:	429a      	cmp	r2, r3
 8014d54:	d106      	bne.n	8014d64 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8014d60:	429a      	cmp	r2, r3
 8014d62:	d001      	beq.n	8014d68 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8014d64:	2301      	movs	r3, #1
 8014d66:	e000      	b.n	8014d6a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8014d68:	2300      	movs	r3, #0
}
 8014d6a:	4618      	mov	r0, r3
 8014d6c:	3718      	adds	r7, #24
 8014d6e:	46bd      	mov	sp, r7
 8014d70:	bd80      	pop	{r7, pc}
 8014d72:	bf00      	nop
 8014d74:	40007000 	.word	0x40007000
 8014d78:	40023800 	.word	0x40023800
 8014d7c:	42470060 	.word	0x42470060

08014d80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8014d80:	b580      	push	{r7, lr}
 8014d82:	b084      	sub	sp, #16
 8014d84:	af00      	add	r7, sp, #0
 8014d86:	6078      	str	r0, [r7, #4]
 8014d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d101      	bne.n	8014d94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8014d90:	2301      	movs	r3, #1
 8014d92:	e0cc      	b.n	8014f2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8014d94:	4b68      	ldr	r3, [pc, #416]	; (8014f38 <HAL_RCC_ClockConfig+0x1b8>)
 8014d96:	681b      	ldr	r3, [r3, #0]
 8014d98:	f003 030f 	and.w	r3, r3, #15
 8014d9c:	683a      	ldr	r2, [r7, #0]
 8014d9e:	429a      	cmp	r2, r3
 8014da0:	d90c      	bls.n	8014dbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014da2:	4b65      	ldr	r3, [pc, #404]	; (8014f38 <HAL_RCC_ClockConfig+0x1b8>)
 8014da4:	683a      	ldr	r2, [r7, #0]
 8014da6:	b2d2      	uxtb	r2, r2
 8014da8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8014daa:	4b63      	ldr	r3, [pc, #396]	; (8014f38 <HAL_RCC_ClockConfig+0x1b8>)
 8014dac:	681b      	ldr	r3, [r3, #0]
 8014dae:	f003 030f 	and.w	r3, r3, #15
 8014db2:	683a      	ldr	r2, [r7, #0]
 8014db4:	429a      	cmp	r2, r3
 8014db6:	d001      	beq.n	8014dbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8014db8:	2301      	movs	r3, #1
 8014dba:	e0b8      	b.n	8014f2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	f003 0302 	and.w	r3, r3, #2
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d020      	beq.n	8014e0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	681b      	ldr	r3, [r3, #0]
 8014dcc:	f003 0304 	and.w	r3, r3, #4
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d005      	beq.n	8014de0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8014dd4:	4b59      	ldr	r3, [pc, #356]	; (8014f3c <HAL_RCC_ClockConfig+0x1bc>)
 8014dd6:	689b      	ldr	r3, [r3, #8]
 8014dd8:	4a58      	ldr	r2, [pc, #352]	; (8014f3c <HAL_RCC_ClockConfig+0x1bc>)
 8014dda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8014dde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	f003 0308 	and.w	r3, r3, #8
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d005      	beq.n	8014df8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8014dec:	4b53      	ldr	r3, [pc, #332]	; (8014f3c <HAL_RCC_ClockConfig+0x1bc>)
 8014dee:	689b      	ldr	r3, [r3, #8]
 8014df0:	4a52      	ldr	r2, [pc, #328]	; (8014f3c <HAL_RCC_ClockConfig+0x1bc>)
 8014df2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8014df6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8014df8:	4b50      	ldr	r3, [pc, #320]	; (8014f3c <HAL_RCC_ClockConfig+0x1bc>)
 8014dfa:	689b      	ldr	r3, [r3, #8]
 8014dfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	689b      	ldr	r3, [r3, #8]
 8014e04:	494d      	ldr	r1, [pc, #308]	; (8014f3c <HAL_RCC_ClockConfig+0x1bc>)
 8014e06:	4313      	orrs	r3, r2
 8014e08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	681b      	ldr	r3, [r3, #0]
 8014e0e:	f003 0301 	and.w	r3, r3, #1
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d044      	beq.n	8014ea0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	685b      	ldr	r3, [r3, #4]
 8014e1a:	2b01      	cmp	r3, #1
 8014e1c:	d107      	bne.n	8014e2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8014e1e:	4b47      	ldr	r3, [pc, #284]	; (8014f3c <HAL_RCC_ClockConfig+0x1bc>)
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d119      	bne.n	8014e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8014e2a:	2301      	movs	r3, #1
 8014e2c:	e07f      	b.n	8014f2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	685b      	ldr	r3, [r3, #4]
 8014e32:	2b02      	cmp	r3, #2
 8014e34:	d003      	beq.n	8014e3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8014e3a:	2b03      	cmp	r3, #3
 8014e3c:	d107      	bne.n	8014e4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8014e3e:	4b3f      	ldr	r3, [pc, #252]	; (8014f3c <HAL_RCC_ClockConfig+0x1bc>)
 8014e40:	681b      	ldr	r3, [r3, #0]
 8014e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d109      	bne.n	8014e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8014e4a:	2301      	movs	r3, #1
 8014e4c:	e06f      	b.n	8014f2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8014e4e:	4b3b      	ldr	r3, [pc, #236]	; (8014f3c <HAL_RCC_ClockConfig+0x1bc>)
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	f003 0302 	and.w	r3, r3, #2
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d101      	bne.n	8014e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8014e5a:	2301      	movs	r3, #1
 8014e5c:	e067      	b.n	8014f2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8014e5e:	4b37      	ldr	r3, [pc, #220]	; (8014f3c <HAL_RCC_ClockConfig+0x1bc>)
 8014e60:	689b      	ldr	r3, [r3, #8]
 8014e62:	f023 0203 	bic.w	r2, r3, #3
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	685b      	ldr	r3, [r3, #4]
 8014e6a:	4934      	ldr	r1, [pc, #208]	; (8014f3c <HAL_RCC_ClockConfig+0x1bc>)
 8014e6c:	4313      	orrs	r3, r2
 8014e6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8014e70:	f7fd f85a 	bl	8011f28 <HAL_GetTick>
 8014e74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8014e76:	e00a      	b.n	8014e8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014e78:	f7fd f856 	bl	8011f28 <HAL_GetTick>
 8014e7c:	4602      	mov	r2, r0
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	1ad3      	subs	r3, r2, r3
 8014e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8014e86:	4293      	cmp	r3, r2
 8014e88:	d901      	bls.n	8014e8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8014e8a:	2303      	movs	r3, #3
 8014e8c:	e04f      	b.n	8014f2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8014e8e:	4b2b      	ldr	r3, [pc, #172]	; (8014f3c <HAL_RCC_ClockConfig+0x1bc>)
 8014e90:	689b      	ldr	r3, [r3, #8]
 8014e92:	f003 020c 	and.w	r2, r3, #12
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	685b      	ldr	r3, [r3, #4]
 8014e9a:	009b      	lsls	r3, r3, #2
 8014e9c:	429a      	cmp	r2, r3
 8014e9e:	d1eb      	bne.n	8014e78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8014ea0:	4b25      	ldr	r3, [pc, #148]	; (8014f38 <HAL_RCC_ClockConfig+0x1b8>)
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	f003 030f 	and.w	r3, r3, #15
 8014ea8:	683a      	ldr	r2, [r7, #0]
 8014eaa:	429a      	cmp	r2, r3
 8014eac:	d20c      	bcs.n	8014ec8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014eae:	4b22      	ldr	r3, [pc, #136]	; (8014f38 <HAL_RCC_ClockConfig+0x1b8>)
 8014eb0:	683a      	ldr	r2, [r7, #0]
 8014eb2:	b2d2      	uxtb	r2, r2
 8014eb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8014eb6:	4b20      	ldr	r3, [pc, #128]	; (8014f38 <HAL_RCC_ClockConfig+0x1b8>)
 8014eb8:	681b      	ldr	r3, [r3, #0]
 8014eba:	f003 030f 	and.w	r3, r3, #15
 8014ebe:	683a      	ldr	r2, [r7, #0]
 8014ec0:	429a      	cmp	r2, r3
 8014ec2:	d001      	beq.n	8014ec8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8014ec4:	2301      	movs	r3, #1
 8014ec6:	e032      	b.n	8014f2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	681b      	ldr	r3, [r3, #0]
 8014ecc:	f003 0304 	and.w	r3, r3, #4
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d008      	beq.n	8014ee6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8014ed4:	4b19      	ldr	r3, [pc, #100]	; (8014f3c <HAL_RCC_ClockConfig+0x1bc>)
 8014ed6:	689b      	ldr	r3, [r3, #8]
 8014ed8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	68db      	ldr	r3, [r3, #12]
 8014ee0:	4916      	ldr	r1, [pc, #88]	; (8014f3c <HAL_RCC_ClockConfig+0x1bc>)
 8014ee2:	4313      	orrs	r3, r2
 8014ee4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	681b      	ldr	r3, [r3, #0]
 8014eea:	f003 0308 	and.w	r3, r3, #8
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d009      	beq.n	8014f06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8014ef2:	4b12      	ldr	r3, [pc, #72]	; (8014f3c <HAL_RCC_ClockConfig+0x1bc>)
 8014ef4:	689b      	ldr	r3, [r3, #8]
 8014ef6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	691b      	ldr	r3, [r3, #16]
 8014efe:	00db      	lsls	r3, r3, #3
 8014f00:	490e      	ldr	r1, [pc, #56]	; (8014f3c <HAL_RCC_ClockConfig+0x1bc>)
 8014f02:	4313      	orrs	r3, r2
 8014f04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8014f06:	f000 f821 	bl	8014f4c <HAL_RCC_GetSysClockFreq>
 8014f0a:	4601      	mov	r1, r0
 8014f0c:	4b0b      	ldr	r3, [pc, #44]	; (8014f3c <HAL_RCC_ClockConfig+0x1bc>)
 8014f0e:	689b      	ldr	r3, [r3, #8]
 8014f10:	091b      	lsrs	r3, r3, #4
 8014f12:	f003 030f 	and.w	r3, r3, #15
 8014f16:	4a0a      	ldr	r2, [pc, #40]	; (8014f40 <HAL_RCC_ClockConfig+0x1c0>)
 8014f18:	5cd3      	ldrb	r3, [r2, r3]
 8014f1a:	fa21 f303 	lsr.w	r3, r1, r3
 8014f1e:	4a09      	ldr	r2, [pc, #36]	; (8014f44 <HAL_RCC_ClockConfig+0x1c4>)
 8014f20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8014f22:	4b09      	ldr	r3, [pc, #36]	; (8014f48 <HAL_RCC_ClockConfig+0x1c8>)
 8014f24:	681b      	ldr	r3, [r3, #0]
 8014f26:	4618      	mov	r0, r3
 8014f28:	f7f7 fa46 	bl	800c3b8 <HAL_InitTick>

  return HAL_OK;
 8014f2c:	2300      	movs	r3, #0
}
 8014f2e:	4618      	mov	r0, r3
 8014f30:	3710      	adds	r7, #16
 8014f32:	46bd      	mov	sp, r7
 8014f34:	bd80      	pop	{r7, pc}
 8014f36:	bf00      	nop
 8014f38:	40023c00 	.word	0x40023c00
 8014f3c:	40023800 	.word	0x40023800
 8014f40:	08031cf8 	.word	0x08031cf8
 8014f44:	2000008c 	.word	0x2000008c
 8014f48:	20000090 	.word	0x20000090

08014f4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8014f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f4e:	b085      	sub	sp, #20
 8014f50:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8014f52:	2300      	movs	r3, #0
 8014f54:	607b      	str	r3, [r7, #4]
 8014f56:	2300      	movs	r3, #0
 8014f58:	60fb      	str	r3, [r7, #12]
 8014f5a:	2300      	movs	r3, #0
 8014f5c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8014f5e:	2300      	movs	r3, #0
 8014f60:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8014f62:	4b63      	ldr	r3, [pc, #396]	; (80150f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8014f64:	689b      	ldr	r3, [r3, #8]
 8014f66:	f003 030c 	and.w	r3, r3, #12
 8014f6a:	2b04      	cmp	r3, #4
 8014f6c:	d007      	beq.n	8014f7e <HAL_RCC_GetSysClockFreq+0x32>
 8014f6e:	2b08      	cmp	r3, #8
 8014f70:	d008      	beq.n	8014f84 <HAL_RCC_GetSysClockFreq+0x38>
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	f040 80b4 	bne.w	80150e0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8014f78:	4b5e      	ldr	r3, [pc, #376]	; (80150f4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8014f7a:	60bb      	str	r3, [r7, #8]
       break;
 8014f7c:	e0b3      	b.n	80150e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8014f7e:	4b5e      	ldr	r3, [pc, #376]	; (80150f8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8014f80:	60bb      	str	r3, [r7, #8]
      break;
 8014f82:	e0b0      	b.n	80150e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8014f84:	4b5a      	ldr	r3, [pc, #360]	; (80150f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8014f86:	685b      	ldr	r3, [r3, #4]
 8014f88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014f8c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8014f8e:	4b58      	ldr	r3, [pc, #352]	; (80150f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8014f90:	685b      	ldr	r3, [r3, #4]
 8014f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d04a      	beq.n	8015030 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8014f9a:	4b55      	ldr	r3, [pc, #340]	; (80150f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8014f9c:	685b      	ldr	r3, [r3, #4]
 8014f9e:	099b      	lsrs	r3, r3, #6
 8014fa0:	f04f 0400 	mov.w	r4, #0
 8014fa4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8014fa8:	f04f 0200 	mov.w	r2, #0
 8014fac:	ea03 0501 	and.w	r5, r3, r1
 8014fb0:	ea04 0602 	and.w	r6, r4, r2
 8014fb4:	4629      	mov	r1, r5
 8014fb6:	4632      	mov	r2, r6
 8014fb8:	f04f 0300 	mov.w	r3, #0
 8014fbc:	f04f 0400 	mov.w	r4, #0
 8014fc0:	0154      	lsls	r4, r2, #5
 8014fc2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8014fc6:	014b      	lsls	r3, r1, #5
 8014fc8:	4619      	mov	r1, r3
 8014fca:	4622      	mov	r2, r4
 8014fcc:	1b49      	subs	r1, r1, r5
 8014fce:	eb62 0206 	sbc.w	r2, r2, r6
 8014fd2:	f04f 0300 	mov.w	r3, #0
 8014fd6:	f04f 0400 	mov.w	r4, #0
 8014fda:	0194      	lsls	r4, r2, #6
 8014fdc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8014fe0:	018b      	lsls	r3, r1, #6
 8014fe2:	1a5b      	subs	r3, r3, r1
 8014fe4:	eb64 0402 	sbc.w	r4, r4, r2
 8014fe8:	f04f 0100 	mov.w	r1, #0
 8014fec:	f04f 0200 	mov.w	r2, #0
 8014ff0:	00e2      	lsls	r2, r4, #3
 8014ff2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8014ff6:	00d9      	lsls	r1, r3, #3
 8014ff8:	460b      	mov	r3, r1
 8014ffa:	4614      	mov	r4, r2
 8014ffc:	195b      	adds	r3, r3, r5
 8014ffe:	eb44 0406 	adc.w	r4, r4, r6
 8015002:	f04f 0100 	mov.w	r1, #0
 8015006:	f04f 0200 	mov.w	r2, #0
 801500a:	0262      	lsls	r2, r4, #9
 801500c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8015010:	0259      	lsls	r1, r3, #9
 8015012:	460b      	mov	r3, r1
 8015014:	4614      	mov	r4, r2
 8015016:	4618      	mov	r0, r3
 8015018:	4621      	mov	r1, r4
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	f04f 0400 	mov.w	r4, #0
 8015020:	461a      	mov	r2, r3
 8015022:	4623      	mov	r3, r4
 8015024:	f7f2 faaa 	bl	800757c <__aeabi_uldivmod>
 8015028:	4603      	mov	r3, r0
 801502a:	460c      	mov	r4, r1
 801502c:	60fb      	str	r3, [r7, #12]
 801502e:	e049      	b.n	80150c4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8015030:	4b2f      	ldr	r3, [pc, #188]	; (80150f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8015032:	685b      	ldr	r3, [r3, #4]
 8015034:	099b      	lsrs	r3, r3, #6
 8015036:	f04f 0400 	mov.w	r4, #0
 801503a:	f240 11ff 	movw	r1, #511	; 0x1ff
 801503e:	f04f 0200 	mov.w	r2, #0
 8015042:	ea03 0501 	and.w	r5, r3, r1
 8015046:	ea04 0602 	and.w	r6, r4, r2
 801504a:	4629      	mov	r1, r5
 801504c:	4632      	mov	r2, r6
 801504e:	f04f 0300 	mov.w	r3, #0
 8015052:	f04f 0400 	mov.w	r4, #0
 8015056:	0154      	lsls	r4, r2, #5
 8015058:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 801505c:	014b      	lsls	r3, r1, #5
 801505e:	4619      	mov	r1, r3
 8015060:	4622      	mov	r2, r4
 8015062:	1b49      	subs	r1, r1, r5
 8015064:	eb62 0206 	sbc.w	r2, r2, r6
 8015068:	f04f 0300 	mov.w	r3, #0
 801506c:	f04f 0400 	mov.w	r4, #0
 8015070:	0194      	lsls	r4, r2, #6
 8015072:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8015076:	018b      	lsls	r3, r1, #6
 8015078:	1a5b      	subs	r3, r3, r1
 801507a:	eb64 0402 	sbc.w	r4, r4, r2
 801507e:	f04f 0100 	mov.w	r1, #0
 8015082:	f04f 0200 	mov.w	r2, #0
 8015086:	00e2      	lsls	r2, r4, #3
 8015088:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 801508c:	00d9      	lsls	r1, r3, #3
 801508e:	460b      	mov	r3, r1
 8015090:	4614      	mov	r4, r2
 8015092:	195b      	adds	r3, r3, r5
 8015094:	eb44 0406 	adc.w	r4, r4, r6
 8015098:	f04f 0100 	mov.w	r1, #0
 801509c:	f04f 0200 	mov.w	r2, #0
 80150a0:	02a2      	lsls	r2, r4, #10
 80150a2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80150a6:	0299      	lsls	r1, r3, #10
 80150a8:	460b      	mov	r3, r1
 80150aa:	4614      	mov	r4, r2
 80150ac:	4618      	mov	r0, r3
 80150ae:	4621      	mov	r1, r4
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	f04f 0400 	mov.w	r4, #0
 80150b6:	461a      	mov	r2, r3
 80150b8:	4623      	mov	r3, r4
 80150ba:	f7f2 fa5f 	bl	800757c <__aeabi_uldivmod>
 80150be:	4603      	mov	r3, r0
 80150c0:	460c      	mov	r4, r1
 80150c2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80150c4:	4b0a      	ldr	r3, [pc, #40]	; (80150f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80150c6:	685b      	ldr	r3, [r3, #4]
 80150c8:	0c1b      	lsrs	r3, r3, #16
 80150ca:	f003 0303 	and.w	r3, r3, #3
 80150ce:	3301      	adds	r3, #1
 80150d0:	005b      	lsls	r3, r3, #1
 80150d2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80150d4:	68fa      	ldr	r2, [r7, #12]
 80150d6:	683b      	ldr	r3, [r7, #0]
 80150d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80150dc:	60bb      	str	r3, [r7, #8]
      break;
 80150de:	e002      	b.n	80150e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80150e0:	4b04      	ldr	r3, [pc, #16]	; (80150f4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80150e2:	60bb      	str	r3, [r7, #8]
      break;
 80150e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80150e6:	68bb      	ldr	r3, [r7, #8]
}
 80150e8:	4618      	mov	r0, r3
 80150ea:	3714      	adds	r7, #20
 80150ec:	46bd      	mov	sp, r7
 80150ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80150f0:	40023800 	.word	0x40023800
 80150f4:	00f42400 	.word	0x00f42400
 80150f8:	007a1200 	.word	0x007a1200

080150fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80150fc:	b480      	push	{r7}
 80150fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8015100:	4b03      	ldr	r3, [pc, #12]	; (8015110 <HAL_RCC_GetHCLKFreq+0x14>)
 8015102:	681b      	ldr	r3, [r3, #0]
}
 8015104:	4618      	mov	r0, r3
 8015106:	46bd      	mov	sp, r7
 8015108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801510c:	4770      	bx	lr
 801510e:	bf00      	nop
 8015110:	2000008c 	.word	0x2000008c

08015114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8015114:	b580      	push	{r7, lr}
 8015116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8015118:	f7ff fff0 	bl	80150fc <HAL_RCC_GetHCLKFreq>
 801511c:	4601      	mov	r1, r0
 801511e:	4b05      	ldr	r3, [pc, #20]	; (8015134 <HAL_RCC_GetPCLK1Freq+0x20>)
 8015120:	689b      	ldr	r3, [r3, #8]
 8015122:	0a9b      	lsrs	r3, r3, #10
 8015124:	f003 0307 	and.w	r3, r3, #7
 8015128:	4a03      	ldr	r2, [pc, #12]	; (8015138 <HAL_RCC_GetPCLK1Freq+0x24>)
 801512a:	5cd3      	ldrb	r3, [r2, r3]
 801512c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8015130:	4618      	mov	r0, r3
 8015132:	bd80      	pop	{r7, pc}
 8015134:	40023800 	.word	0x40023800
 8015138:	08031d08 	.word	0x08031d08

0801513c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 801513c:	b480      	push	{r7}
 801513e:	b083      	sub	sp, #12
 8015140:	af00      	add	r7, sp, #0
 8015142:	6078      	str	r0, [r7, #4]
 8015144:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	220f      	movs	r2, #15
 801514a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 801514c:	4b12      	ldr	r3, [pc, #72]	; (8015198 <HAL_RCC_GetClockConfig+0x5c>)
 801514e:	689b      	ldr	r3, [r3, #8]
 8015150:	f003 0203 	and.w	r2, r3, #3
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8015158:	4b0f      	ldr	r3, [pc, #60]	; (8015198 <HAL_RCC_GetClockConfig+0x5c>)
 801515a:	689b      	ldr	r3, [r3, #8]
 801515c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8015164:	4b0c      	ldr	r3, [pc, #48]	; (8015198 <HAL_RCC_GetClockConfig+0x5c>)
 8015166:	689b      	ldr	r3, [r3, #8]
 8015168:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8015170:	4b09      	ldr	r3, [pc, #36]	; (8015198 <HAL_RCC_GetClockConfig+0x5c>)
 8015172:	689b      	ldr	r3, [r3, #8]
 8015174:	08db      	lsrs	r3, r3, #3
 8015176:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 801517e:	4b07      	ldr	r3, [pc, #28]	; (801519c <HAL_RCC_GetClockConfig+0x60>)
 8015180:	681b      	ldr	r3, [r3, #0]
 8015182:	f003 020f 	and.w	r2, r3, #15
 8015186:	683b      	ldr	r3, [r7, #0]
 8015188:	601a      	str	r2, [r3, #0]
}
 801518a:	bf00      	nop
 801518c:	370c      	adds	r7, #12
 801518e:	46bd      	mov	sp, r7
 8015190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015194:	4770      	bx	lr
 8015196:	bf00      	nop
 8015198:	40023800 	.word	0x40023800
 801519c:	40023c00 	.word	0x40023c00

080151a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80151a0:	b580      	push	{r7, lr}
 80151a2:	b086      	sub	sp, #24
 80151a4:	af00      	add	r7, sp, #0
 80151a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80151a8:	2300      	movs	r3, #0
 80151aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80151ac:	2300      	movs	r3, #0
 80151ae:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	681b      	ldr	r3, [r3, #0]
 80151b4:	f003 0301 	and.w	r3, r3, #1
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d10b      	bne.n	80151d4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	681b      	ldr	r3, [r3, #0]
 80151c0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d105      	bne.n	80151d4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80151d0:	2b00      	cmp	r3, #0
 80151d2:	d075      	beq.n	80152c0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80151d4:	4bad      	ldr	r3, [pc, #692]	; (801548c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80151d6:	2200      	movs	r2, #0
 80151d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80151da:	f7fc fea5 	bl	8011f28 <HAL_GetTick>
 80151de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80151e0:	e008      	b.n	80151f4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80151e2:	f7fc fea1 	bl	8011f28 <HAL_GetTick>
 80151e6:	4602      	mov	r2, r0
 80151e8:	697b      	ldr	r3, [r7, #20]
 80151ea:	1ad3      	subs	r3, r2, r3
 80151ec:	2b02      	cmp	r3, #2
 80151ee:	d901      	bls.n	80151f4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80151f0:	2303      	movs	r3, #3
 80151f2:	e18b      	b.n	801550c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80151f4:	4ba6      	ldr	r3, [pc, #664]	; (8015490 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80151f6:	681b      	ldr	r3, [r3, #0]
 80151f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d1f0      	bne.n	80151e2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	681b      	ldr	r3, [r3, #0]
 8015204:	f003 0301 	and.w	r3, r3, #1
 8015208:	2b00      	cmp	r3, #0
 801520a:	d009      	beq.n	8015220 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	685b      	ldr	r3, [r3, #4]
 8015210:	019a      	lsls	r2, r3, #6
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	689b      	ldr	r3, [r3, #8]
 8015216:	071b      	lsls	r3, r3, #28
 8015218:	499d      	ldr	r1, [pc, #628]	; (8015490 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 801521a:	4313      	orrs	r3, r2
 801521c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	681b      	ldr	r3, [r3, #0]
 8015224:	f003 0302 	and.w	r3, r3, #2
 8015228:	2b00      	cmp	r3, #0
 801522a:	d01f      	beq.n	801526c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801522c:	4b98      	ldr	r3, [pc, #608]	; (8015490 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 801522e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015232:	0f1b      	lsrs	r3, r3, #28
 8015234:	f003 0307 	and.w	r3, r3, #7
 8015238:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	685b      	ldr	r3, [r3, #4]
 801523e:	019a      	lsls	r2, r3, #6
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	68db      	ldr	r3, [r3, #12]
 8015244:	061b      	lsls	r3, r3, #24
 8015246:	431a      	orrs	r2, r3
 8015248:	693b      	ldr	r3, [r7, #16]
 801524a:	071b      	lsls	r3, r3, #28
 801524c:	4990      	ldr	r1, [pc, #576]	; (8015490 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 801524e:	4313      	orrs	r3, r2
 8015250:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8015254:	4b8e      	ldr	r3, [pc, #568]	; (8015490 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8015256:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801525a:	f023 021f 	bic.w	r2, r3, #31
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	69db      	ldr	r3, [r3, #28]
 8015262:	3b01      	subs	r3, #1
 8015264:	498a      	ldr	r1, [pc, #552]	; (8015490 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8015266:	4313      	orrs	r3, r2
 8015268:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	681b      	ldr	r3, [r3, #0]
 8015270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015274:	2b00      	cmp	r3, #0
 8015276:	d00d      	beq.n	8015294 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	685b      	ldr	r3, [r3, #4]
 801527c:	019a      	lsls	r2, r3, #6
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	68db      	ldr	r3, [r3, #12]
 8015282:	061b      	lsls	r3, r3, #24
 8015284:	431a      	orrs	r2, r3
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	689b      	ldr	r3, [r3, #8]
 801528a:	071b      	lsls	r3, r3, #28
 801528c:	4980      	ldr	r1, [pc, #512]	; (8015490 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 801528e:	4313      	orrs	r3, r2
 8015290:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8015294:	4b7d      	ldr	r3, [pc, #500]	; (801548c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8015296:	2201      	movs	r2, #1
 8015298:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801529a:	f7fc fe45 	bl	8011f28 <HAL_GetTick>
 801529e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80152a0:	e008      	b.n	80152b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80152a2:	f7fc fe41 	bl	8011f28 <HAL_GetTick>
 80152a6:	4602      	mov	r2, r0
 80152a8:	697b      	ldr	r3, [r7, #20]
 80152aa:	1ad3      	subs	r3, r2, r3
 80152ac:	2b02      	cmp	r3, #2
 80152ae:	d901      	bls.n	80152b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80152b0:	2303      	movs	r3, #3
 80152b2:	e12b      	b.n	801550c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80152b4:	4b76      	ldr	r3, [pc, #472]	; (8015490 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80152b6:	681b      	ldr	r3, [r3, #0]
 80152b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d0f0      	beq.n	80152a2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	681b      	ldr	r3, [r3, #0]
 80152c4:	f003 0304 	and.w	r3, r3, #4
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d105      	bne.n	80152d8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	681b      	ldr	r3, [r3, #0]
 80152d0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d079      	beq.n	80153cc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80152d8:	4b6e      	ldr	r3, [pc, #440]	; (8015494 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80152da:	2200      	movs	r2, #0
 80152dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80152de:	f7fc fe23 	bl	8011f28 <HAL_GetTick>
 80152e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80152e4:	e008      	b.n	80152f8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80152e6:	f7fc fe1f 	bl	8011f28 <HAL_GetTick>
 80152ea:	4602      	mov	r2, r0
 80152ec:	697b      	ldr	r3, [r7, #20]
 80152ee:	1ad3      	subs	r3, r2, r3
 80152f0:	2b02      	cmp	r3, #2
 80152f2:	d901      	bls.n	80152f8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80152f4:	2303      	movs	r3, #3
 80152f6:	e109      	b.n	801550c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80152f8:	4b65      	ldr	r3, [pc, #404]	; (8015490 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8015300:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015304:	d0ef      	beq.n	80152e6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	f003 0304 	and.w	r3, r3, #4
 801530e:	2b00      	cmp	r3, #0
 8015310:	d020      	beq.n	8015354 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8015312:	4b5f      	ldr	r3, [pc, #380]	; (8015490 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8015314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015318:	0f1b      	lsrs	r3, r3, #28
 801531a:	f003 0307 	and.w	r3, r3, #7
 801531e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	691b      	ldr	r3, [r3, #16]
 8015324:	019a      	lsls	r2, r3, #6
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	695b      	ldr	r3, [r3, #20]
 801532a:	061b      	lsls	r3, r3, #24
 801532c:	431a      	orrs	r2, r3
 801532e:	693b      	ldr	r3, [r7, #16]
 8015330:	071b      	lsls	r3, r3, #28
 8015332:	4957      	ldr	r1, [pc, #348]	; (8015490 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8015334:	4313      	orrs	r3, r2
 8015336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 801533a:	4b55      	ldr	r3, [pc, #340]	; (8015490 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 801533c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015340:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	6a1b      	ldr	r3, [r3, #32]
 8015348:	3b01      	subs	r3, #1
 801534a:	021b      	lsls	r3, r3, #8
 801534c:	4950      	ldr	r1, [pc, #320]	; (8015490 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 801534e:	4313      	orrs	r3, r2
 8015350:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	681b      	ldr	r3, [r3, #0]
 8015358:	f003 0308 	and.w	r3, r3, #8
 801535c:	2b00      	cmp	r3, #0
 801535e:	d01e      	beq.n	801539e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8015360:	4b4b      	ldr	r3, [pc, #300]	; (8015490 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8015362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015366:	0e1b      	lsrs	r3, r3, #24
 8015368:	f003 030f 	and.w	r3, r3, #15
 801536c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	691b      	ldr	r3, [r3, #16]
 8015372:	019a      	lsls	r2, r3, #6
 8015374:	693b      	ldr	r3, [r7, #16]
 8015376:	061b      	lsls	r3, r3, #24
 8015378:	431a      	orrs	r2, r3
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	699b      	ldr	r3, [r3, #24]
 801537e:	071b      	lsls	r3, r3, #28
 8015380:	4943      	ldr	r1, [pc, #268]	; (8015490 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8015382:	4313      	orrs	r3, r2
 8015384:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8015388:	4b41      	ldr	r3, [pc, #260]	; (8015490 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 801538a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801538e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015396:	493e      	ldr	r1, [pc, #248]	; (8015490 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8015398:	4313      	orrs	r3, r2
 801539a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 801539e:	4b3d      	ldr	r3, [pc, #244]	; (8015494 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80153a0:	2201      	movs	r2, #1
 80153a2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80153a4:	f7fc fdc0 	bl	8011f28 <HAL_GetTick>
 80153a8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80153aa:	e008      	b.n	80153be <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80153ac:	f7fc fdbc 	bl	8011f28 <HAL_GetTick>
 80153b0:	4602      	mov	r2, r0
 80153b2:	697b      	ldr	r3, [r7, #20]
 80153b4:	1ad3      	subs	r3, r2, r3
 80153b6:	2b02      	cmp	r3, #2
 80153b8:	d901      	bls.n	80153be <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80153ba:	2303      	movs	r3, #3
 80153bc:	e0a6      	b.n	801550c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80153be:	4b34      	ldr	r3, [pc, #208]	; (8015490 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80153c0:	681b      	ldr	r3, [r3, #0]
 80153c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80153c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80153ca:	d1ef      	bne.n	80153ac <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	681b      	ldr	r3, [r3, #0]
 80153d0:	f003 0320 	and.w	r3, r3, #32
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	f000 808d 	beq.w	80154f4 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80153da:	2300      	movs	r3, #0
 80153dc:	60fb      	str	r3, [r7, #12]
 80153de:	4b2c      	ldr	r3, [pc, #176]	; (8015490 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80153e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80153e2:	4a2b      	ldr	r2, [pc, #172]	; (8015490 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80153e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80153e8:	6413      	str	r3, [r2, #64]	; 0x40
 80153ea:	4b29      	ldr	r3, [pc, #164]	; (8015490 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80153ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80153ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80153f2:	60fb      	str	r3, [r7, #12]
 80153f4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80153f6:	4b28      	ldr	r3, [pc, #160]	; (8015498 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80153f8:	681b      	ldr	r3, [r3, #0]
 80153fa:	4a27      	ldr	r2, [pc, #156]	; (8015498 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80153fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015400:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8015402:	f7fc fd91 	bl	8011f28 <HAL_GetTick>
 8015406:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8015408:	e008      	b.n	801541c <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 801540a:	f7fc fd8d 	bl	8011f28 <HAL_GetTick>
 801540e:	4602      	mov	r2, r0
 8015410:	697b      	ldr	r3, [r7, #20]
 8015412:	1ad3      	subs	r3, r2, r3
 8015414:	2b02      	cmp	r3, #2
 8015416:	d901      	bls.n	801541c <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8015418:	2303      	movs	r3, #3
 801541a:	e077      	b.n	801550c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 801541c:	4b1e      	ldr	r3, [pc, #120]	; (8015498 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 801541e:	681b      	ldr	r3, [r3, #0]
 8015420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015424:	2b00      	cmp	r3, #0
 8015426:	d0f0      	beq.n	801540a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8015428:	4b19      	ldr	r3, [pc, #100]	; (8015490 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 801542a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801542c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015430:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8015432:	693b      	ldr	r3, [r7, #16]
 8015434:	2b00      	cmp	r3, #0
 8015436:	d039      	beq.n	80154ac <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801543c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015440:	693a      	ldr	r2, [r7, #16]
 8015442:	429a      	cmp	r2, r3
 8015444:	d032      	beq.n	80154ac <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8015446:	4b12      	ldr	r3, [pc, #72]	; (8015490 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8015448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801544a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801544e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8015450:	4b12      	ldr	r3, [pc, #72]	; (801549c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8015452:	2201      	movs	r2, #1
 8015454:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8015456:	4b11      	ldr	r3, [pc, #68]	; (801549c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8015458:	2200      	movs	r2, #0
 801545a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 801545c:	4a0c      	ldr	r2, [pc, #48]	; (8015490 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 801545e:	693b      	ldr	r3, [r7, #16]
 8015460:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8015462:	4b0b      	ldr	r3, [pc, #44]	; (8015490 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8015464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015466:	f003 0301 	and.w	r3, r3, #1
 801546a:	2b01      	cmp	r3, #1
 801546c:	d11e      	bne.n	80154ac <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 801546e:	f7fc fd5b 	bl	8011f28 <HAL_GetTick>
 8015472:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8015474:	e014      	b.n	80154a0 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015476:	f7fc fd57 	bl	8011f28 <HAL_GetTick>
 801547a:	4602      	mov	r2, r0
 801547c:	697b      	ldr	r3, [r7, #20]
 801547e:	1ad3      	subs	r3, r2, r3
 8015480:	f241 3288 	movw	r2, #5000	; 0x1388
 8015484:	4293      	cmp	r3, r2
 8015486:	d90b      	bls.n	80154a0 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8015488:	2303      	movs	r3, #3
 801548a:	e03f      	b.n	801550c <HAL_RCCEx_PeriphCLKConfig+0x36c>
 801548c:	42470068 	.word	0x42470068
 8015490:	40023800 	.word	0x40023800
 8015494:	42470070 	.word	0x42470070
 8015498:	40007000 	.word	0x40007000
 801549c:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80154a0:	4b1c      	ldr	r3, [pc, #112]	; (8015514 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80154a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80154a4:	f003 0302 	and.w	r3, r3, #2
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	d0e4      	beq.n	8015476 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80154b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80154b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80154b8:	d10d      	bne.n	80154d6 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80154ba:	4b16      	ldr	r3, [pc, #88]	; (8015514 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80154bc:	689b      	ldr	r3, [r3, #8]
 80154be:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80154c6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80154ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80154ce:	4911      	ldr	r1, [pc, #68]	; (8015514 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80154d0:	4313      	orrs	r3, r2
 80154d2:	608b      	str	r3, [r1, #8]
 80154d4:	e005      	b.n	80154e2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80154d6:	4b0f      	ldr	r3, [pc, #60]	; (8015514 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80154d8:	689b      	ldr	r3, [r3, #8]
 80154da:	4a0e      	ldr	r2, [pc, #56]	; (8015514 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80154dc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80154e0:	6093      	str	r3, [r2, #8]
 80154e2:	4b0c      	ldr	r3, [pc, #48]	; (8015514 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80154e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80154ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80154ee:	4909      	ldr	r1, [pc, #36]	; (8015514 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80154f0:	4313      	orrs	r3, r2
 80154f2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	681b      	ldr	r3, [r3, #0]
 80154f8:	f003 0310 	and.w	r3, r3, #16
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	d004      	beq.n	801550a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8015506:	4b04      	ldr	r3, [pc, #16]	; (8015518 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8015508:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 801550a:	2300      	movs	r3, #0
}
 801550c:	4618      	mov	r0, r3
 801550e:	3718      	adds	r7, #24
 8015510:	46bd      	mov	sp, r7
 8015512:	bd80      	pop	{r7, pc}
 8015514:	40023800 	.word	0x40023800
 8015518:	424711e0 	.word	0x424711e0

0801551c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 801551c:	b580      	push	{r7, lr}
 801551e:	b082      	sub	sp, #8
 8015520:	af00      	add	r7, sp, #0
 8015522:	6078      	str	r0, [r7, #4]
 8015524:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	2b00      	cmp	r3, #0
 801552a:	d101      	bne.n	8015530 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 801552c:	2301      	movs	r3, #1
 801552e:	e025      	b.n	801557c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015536:	b2db      	uxtb	r3, r3
 8015538:	2b00      	cmp	r3, #0
 801553a:	d106      	bne.n	801554a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	2200      	movs	r2, #0
 8015540:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8015544:	6878      	ldr	r0, [r7, #4]
 8015546:	f7f6 fd47 	bl	800bfd8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	2202      	movs	r2, #2
 801554e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	681a      	ldr	r2, [r3, #0]
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	3304      	adds	r3, #4
 801555a:	4619      	mov	r1, r3
 801555c:	4610      	mov	r0, r2
 801555e:	f001 fe2b 	bl	80171b8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	6818      	ldr	r0, [r3, #0]
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	685b      	ldr	r3, [r3, #4]
 801556a:	461a      	mov	r2, r3
 801556c:	6839      	ldr	r1, [r7, #0]
 801556e:	f001 fe96 	bl	801729e <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	2201      	movs	r2, #1
 8015576:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 801557a:	2300      	movs	r3, #0
}
 801557c:	4618      	mov	r0, r3
 801557e:	3708      	adds	r7, #8
 8015580:	46bd      	mov	sp, r7
 8015582:	bd80      	pop	{r7, pc}

08015584 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8015584:	b580      	push	{r7, lr}
 8015586:	b084      	sub	sp, #16
 8015588:	af00      	add	r7, sp, #0
 801558a:	60f8      	str	r0, [r7, #12]
 801558c:	60b9      	str	r1, [r7, #8]
 801558e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8015590:	68fb      	ldr	r3, [r7, #12]
 8015592:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015596:	b2db      	uxtb	r3, r3
 8015598:	2b02      	cmp	r3, #2
 801559a:	d101      	bne.n	80155a0 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 801559c:	2302      	movs	r3, #2
 801559e:	e018      	b.n	80155d2 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80155a0:	68fb      	ldr	r3, [r7, #12]
 80155a2:	2202      	movs	r2, #2
 80155a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	681b      	ldr	r3, [r3, #0]
 80155ac:	687a      	ldr	r2, [r7, #4]
 80155ae:	68b9      	ldr	r1, [r7, #8]
 80155b0:	4618      	mov	r0, r3
 80155b2:	f001 fef3 	bl	801739c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80155b6:	68bb      	ldr	r3, [r7, #8]
 80155b8:	681b      	ldr	r3, [r3, #0]
 80155ba:	2b02      	cmp	r3, #2
 80155bc:	d104      	bne.n	80155c8 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80155be:	68fb      	ldr	r3, [r7, #12]
 80155c0:	2205      	movs	r2, #5
 80155c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80155c6:	e003      	b.n	80155d0 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80155c8:	68fb      	ldr	r3, [r7, #12]
 80155ca:	2201      	movs	r2, #1
 80155cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80155d0:	2300      	movs	r3, #0
}
 80155d2:	4618      	mov	r0, r3
 80155d4:	3710      	adds	r7, #16
 80155d6:	46bd      	mov	sp, r7
 80155d8:	bd80      	pop	{r7, pc}

080155da <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80155da:	b580      	push	{r7, lr}
 80155dc:	b082      	sub	sp, #8
 80155de:	af00      	add	r7, sp, #0
 80155e0:	6078      	str	r0, [r7, #4]
 80155e2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80155ea:	b2db      	uxtb	r3, r3
 80155ec:	2b02      	cmp	r3, #2
 80155ee:	d101      	bne.n	80155f4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80155f0:	2302      	movs	r3, #2
 80155f2:	e00e      	b.n	8015612 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	2202      	movs	r2, #2
 80155f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	681b      	ldr	r3, [r3, #0]
 8015600:	6839      	ldr	r1, [r7, #0]
 8015602:	4618      	mov	r0, r3
 8015604:	f001 ff06 	bl	8017414 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	2201      	movs	r2, #1
 801560c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8015610:	2300      	movs	r3, #0
}
 8015612:	4618      	mov	r0, r3
 8015614:	3708      	adds	r7, #8
 8015616:	46bd      	mov	sp, r7
 8015618:	bd80      	pop	{r7, pc}

0801561a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801561a:	b580      	push	{r7, lr}
 801561c:	b082      	sub	sp, #8
 801561e:	af00      	add	r7, sp, #0
 8015620:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	2b00      	cmp	r3, #0
 8015626:	d101      	bne.n	801562c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8015628:	2301      	movs	r3, #1
 801562a:	e056      	b.n	80156da <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	2200      	movs	r2, #0
 8015630:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8015638:	b2db      	uxtb	r3, r3
 801563a:	2b00      	cmp	r3, #0
 801563c:	d106      	bne.n	801564c <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	2200      	movs	r2, #0
 8015642:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8015646:	6878      	ldr	r0, [r7, #4]
 8015648:	f7f6 fbec 	bl	800be24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	2202      	movs	r2, #2
 8015650:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	681b      	ldr	r3, [r3, #0]
 8015658:	681a      	ldr	r2, [r3, #0]
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	681b      	ldr	r3, [r3, #0]
 801565e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8015662:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	685a      	ldr	r2, [r3, #4]
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	689b      	ldr	r3, [r3, #8]
 801566c:	431a      	orrs	r2, r3
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	68db      	ldr	r3, [r3, #12]
 8015672:	431a      	orrs	r2, r3
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	691b      	ldr	r3, [r3, #16]
 8015678:	431a      	orrs	r2, r3
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	695b      	ldr	r3, [r3, #20]
 801567e:	431a      	orrs	r2, r3
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	699b      	ldr	r3, [r3, #24]
 8015684:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8015688:	431a      	orrs	r2, r3
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	69db      	ldr	r3, [r3, #28]
 801568e:	431a      	orrs	r2, r3
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	6a1b      	ldr	r3, [r3, #32]
 8015694:	ea42 0103 	orr.w	r1, r2, r3
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	681b      	ldr	r3, [r3, #0]
 80156a0:	430a      	orrs	r2, r1
 80156a2:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	699b      	ldr	r3, [r3, #24]
 80156a8:	0c1b      	lsrs	r3, r3, #16
 80156aa:	f003 0104 	and.w	r1, r3, #4
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	681b      	ldr	r3, [r3, #0]
 80156b6:	430a      	orrs	r2, r1
 80156b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	69da      	ldr	r2, [r3, #28]
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	681b      	ldr	r3, [r3, #0]
 80156c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80156c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	2200      	movs	r2, #0
 80156ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	2201      	movs	r2, #1
 80156d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80156d8:	2300      	movs	r3, #0
}
 80156da:	4618      	mov	r0, r3
 80156dc:	3708      	adds	r7, #8
 80156de:	46bd      	mov	sp, r7
 80156e0:	bd80      	pop	{r7, pc}

080156e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80156e2:	b580      	push	{r7, lr}
 80156e4:	b088      	sub	sp, #32
 80156e6:	af00      	add	r7, sp, #0
 80156e8:	60f8      	str	r0, [r7, #12]
 80156ea:	60b9      	str	r1, [r7, #8]
 80156ec:	603b      	str	r3, [r7, #0]
 80156ee:	4613      	mov	r3, r2
 80156f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80156f2:	2300      	movs	r3, #0
 80156f4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80156f6:	68fb      	ldr	r3, [r7, #12]
 80156f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80156fc:	2b01      	cmp	r3, #1
 80156fe:	d101      	bne.n	8015704 <HAL_SPI_Transmit+0x22>
 8015700:	2302      	movs	r3, #2
 8015702:	e11e      	b.n	8015942 <HAL_SPI_Transmit+0x260>
 8015704:	68fb      	ldr	r3, [r7, #12]
 8015706:	2201      	movs	r2, #1
 8015708:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801570c:	f7fc fc0c 	bl	8011f28 <HAL_GetTick>
 8015710:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8015712:	88fb      	ldrh	r3, [r7, #6]
 8015714:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8015716:	68fb      	ldr	r3, [r7, #12]
 8015718:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801571c:	b2db      	uxtb	r3, r3
 801571e:	2b01      	cmp	r3, #1
 8015720:	d002      	beq.n	8015728 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8015722:	2302      	movs	r3, #2
 8015724:	77fb      	strb	r3, [r7, #31]
    goto error;
 8015726:	e103      	b.n	8015930 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8015728:	68bb      	ldr	r3, [r7, #8]
 801572a:	2b00      	cmp	r3, #0
 801572c:	d002      	beq.n	8015734 <HAL_SPI_Transmit+0x52>
 801572e:	88fb      	ldrh	r3, [r7, #6]
 8015730:	2b00      	cmp	r3, #0
 8015732:	d102      	bne.n	801573a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8015734:	2301      	movs	r3, #1
 8015736:	77fb      	strb	r3, [r7, #31]
    goto error;
 8015738:	e0fa      	b.n	8015930 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801573a:	68fb      	ldr	r3, [r7, #12]
 801573c:	2203      	movs	r2, #3
 801573e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8015742:	68fb      	ldr	r3, [r7, #12]
 8015744:	2200      	movs	r2, #0
 8015746:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8015748:	68fb      	ldr	r3, [r7, #12]
 801574a:	68ba      	ldr	r2, [r7, #8]
 801574c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 801574e:	68fb      	ldr	r3, [r7, #12]
 8015750:	88fa      	ldrh	r2, [r7, #6]
 8015752:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8015754:	68fb      	ldr	r3, [r7, #12]
 8015756:	88fa      	ldrh	r2, [r7, #6]
 8015758:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	2200      	movs	r2, #0
 801575e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	2200      	movs	r2, #0
 8015764:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8015766:	68fb      	ldr	r3, [r7, #12]
 8015768:	2200      	movs	r2, #0
 801576a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 801576c:	68fb      	ldr	r3, [r7, #12]
 801576e:	2200      	movs	r2, #0
 8015770:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8015772:	68fb      	ldr	r3, [r7, #12]
 8015774:	2200      	movs	r2, #0
 8015776:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	689b      	ldr	r3, [r3, #8]
 801577c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015780:	d107      	bne.n	8015792 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8015782:	68fb      	ldr	r3, [r7, #12]
 8015784:	681b      	ldr	r3, [r3, #0]
 8015786:	681a      	ldr	r2, [r3, #0]
 8015788:	68fb      	ldr	r3, [r7, #12]
 801578a:	681b      	ldr	r3, [r3, #0]
 801578c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8015790:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8015792:	68fb      	ldr	r3, [r7, #12]
 8015794:	681b      	ldr	r3, [r3, #0]
 8015796:	681b      	ldr	r3, [r3, #0]
 8015798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801579c:	2b40      	cmp	r3, #64	; 0x40
 801579e:	d007      	beq.n	80157b0 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	681a      	ldr	r2, [r3, #0]
 80157a6:	68fb      	ldr	r3, [r7, #12]
 80157a8:	681b      	ldr	r3, [r3, #0]
 80157aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80157ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80157b0:	68fb      	ldr	r3, [r7, #12]
 80157b2:	68db      	ldr	r3, [r3, #12]
 80157b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80157b8:	d14b      	bne.n	8015852 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80157ba:	68fb      	ldr	r3, [r7, #12]
 80157bc:	685b      	ldr	r3, [r3, #4]
 80157be:	2b00      	cmp	r3, #0
 80157c0:	d002      	beq.n	80157c8 <HAL_SPI_Transmit+0xe6>
 80157c2:	8afb      	ldrh	r3, [r7, #22]
 80157c4:	2b01      	cmp	r3, #1
 80157c6:	d13e      	bne.n	8015846 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80157c8:	68fb      	ldr	r3, [r7, #12]
 80157ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80157cc:	881a      	ldrh	r2, [r3, #0]
 80157ce:	68fb      	ldr	r3, [r7, #12]
 80157d0:	681b      	ldr	r3, [r3, #0]
 80157d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80157d8:	1c9a      	adds	r2, r3, #2
 80157da:	68fb      	ldr	r3, [r7, #12]
 80157dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80157e2:	b29b      	uxth	r3, r3
 80157e4:	3b01      	subs	r3, #1
 80157e6:	b29a      	uxth	r2, r3
 80157e8:	68fb      	ldr	r3, [r7, #12]
 80157ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80157ec:	e02b      	b.n	8015846 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	681b      	ldr	r3, [r3, #0]
 80157f2:	689b      	ldr	r3, [r3, #8]
 80157f4:	f003 0302 	and.w	r3, r3, #2
 80157f8:	2b02      	cmp	r3, #2
 80157fa:	d112      	bne.n	8015822 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80157fc:	68fb      	ldr	r3, [r7, #12]
 80157fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015800:	881a      	ldrh	r2, [r3, #0]
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	681b      	ldr	r3, [r3, #0]
 8015806:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8015808:	68fb      	ldr	r3, [r7, #12]
 801580a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801580c:	1c9a      	adds	r2, r3, #2
 801580e:	68fb      	ldr	r3, [r7, #12]
 8015810:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8015816:	b29b      	uxth	r3, r3
 8015818:	3b01      	subs	r3, #1
 801581a:	b29a      	uxth	r2, r3
 801581c:	68fb      	ldr	r3, [r7, #12]
 801581e:	86da      	strh	r2, [r3, #54]	; 0x36
 8015820:	e011      	b.n	8015846 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8015822:	f7fc fb81 	bl	8011f28 <HAL_GetTick>
 8015826:	4602      	mov	r2, r0
 8015828:	69bb      	ldr	r3, [r7, #24]
 801582a:	1ad3      	subs	r3, r2, r3
 801582c:	683a      	ldr	r2, [r7, #0]
 801582e:	429a      	cmp	r2, r3
 8015830:	d803      	bhi.n	801583a <HAL_SPI_Transmit+0x158>
 8015832:	683b      	ldr	r3, [r7, #0]
 8015834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015838:	d102      	bne.n	8015840 <HAL_SPI_Transmit+0x15e>
 801583a:	683b      	ldr	r3, [r7, #0]
 801583c:	2b00      	cmp	r3, #0
 801583e:	d102      	bne.n	8015846 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8015840:	2303      	movs	r3, #3
 8015842:	77fb      	strb	r3, [r7, #31]
          goto error;
 8015844:	e074      	b.n	8015930 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8015846:	68fb      	ldr	r3, [r7, #12]
 8015848:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801584a:	b29b      	uxth	r3, r3
 801584c:	2b00      	cmp	r3, #0
 801584e:	d1ce      	bne.n	80157ee <HAL_SPI_Transmit+0x10c>
 8015850:	e04c      	b.n	80158ec <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8015852:	68fb      	ldr	r3, [r7, #12]
 8015854:	685b      	ldr	r3, [r3, #4]
 8015856:	2b00      	cmp	r3, #0
 8015858:	d002      	beq.n	8015860 <HAL_SPI_Transmit+0x17e>
 801585a:	8afb      	ldrh	r3, [r7, #22]
 801585c:	2b01      	cmp	r3, #1
 801585e:	d140      	bne.n	80158e2 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8015860:	68fb      	ldr	r3, [r7, #12]
 8015862:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015864:	68fb      	ldr	r3, [r7, #12]
 8015866:	681b      	ldr	r3, [r3, #0]
 8015868:	330c      	adds	r3, #12
 801586a:	7812      	ldrb	r2, [r2, #0]
 801586c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801586e:	68fb      	ldr	r3, [r7, #12]
 8015870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015872:	1c5a      	adds	r2, r3, #1
 8015874:	68fb      	ldr	r3, [r7, #12]
 8015876:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8015878:	68fb      	ldr	r3, [r7, #12]
 801587a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801587c:	b29b      	uxth	r3, r3
 801587e:	3b01      	subs	r3, #1
 8015880:	b29a      	uxth	r2, r3
 8015882:	68fb      	ldr	r3, [r7, #12]
 8015884:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8015886:	e02c      	b.n	80158e2 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	689b      	ldr	r3, [r3, #8]
 801588e:	f003 0302 	and.w	r3, r3, #2
 8015892:	2b02      	cmp	r3, #2
 8015894:	d113      	bne.n	80158be <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8015896:	68fb      	ldr	r3, [r7, #12]
 8015898:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	681b      	ldr	r3, [r3, #0]
 801589e:	330c      	adds	r3, #12
 80158a0:	7812      	ldrb	r2, [r2, #0]
 80158a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80158a8:	1c5a      	adds	r2, r3, #1
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80158b2:	b29b      	uxth	r3, r3
 80158b4:	3b01      	subs	r3, #1
 80158b6:	b29a      	uxth	r2, r3
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	86da      	strh	r2, [r3, #54]	; 0x36
 80158bc:	e011      	b.n	80158e2 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80158be:	f7fc fb33 	bl	8011f28 <HAL_GetTick>
 80158c2:	4602      	mov	r2, r0
 80158c4:	69bb      	ldr	r3, [r7, #24]
 80158c6:	1ad3      	subs	r3, r2, r3
 80158c8:	683a      	ldr	r2, [r7, #0]
 80158ca:	429a      	cmp	r2, r3
 80158cc:	d803      	bhi.n	80158d6 <HAL_SPI_Transmit+0x1f4>
 80158ce:	683b      	ldr	r3, [r7, #0]
 80158d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158d4:	d102      	bne.n	80158dc <HAL_SPI_Transmit+0x1fa>
 80158d6:	683b      	ldr	r3, [r7, #0]
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d102      	bne.n	80158e2 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80158dc:	2303      	movs	r3, #3
 80158de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80158e0:	e026      	b.n	8015930 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80158e6:	b29b      	uxth	r3, r3
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	d1cd      	bne.n	8015888 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80158ec:	69ba      	ldr	r2, [r7, #24]
 80158ee:	6839      	ldr	r1, [r7, #0]
 80158f0:	68f8      	ldr	r0, [r7, #12]
 80158f2:	f000 fba5 	bl	8016040 <SPI_EndRxTxTransaction>
 80158f6:	4603      	mov	r3, r0
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	d002      	beq.n	8015902 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	2220      	movs	r2, #32
 8015900:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	689b      	ldr	r3, [r3, #8]
 8015906:	2b00      	cmp	r3, #0
 8015908:	d10a      	bne.n	8015920 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801590a:	2300      	movs	r3, #0
 801590c:	613b      	str	r3, [r7, #16]
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	681b      	ldr	r3, [r3, #0]
 8015912:	68db      	ldr	r3, [r3, #12]
 8015914:	613b      	str	r3, [r7, #16]
 8015916:	68fb      	ldr	r3, [r7, #12]
 8015918:	681b      	ldr	r3, [r3, #0]
 801591a:	689b      	ldr	r3, [r3, #8]
 801591c:	613b      	str	r3, [r7, #16]
 801591e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015920:	68fb      	ldr	r3, [r7, #12]
 8015922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015924:	2b00      	cmp	r3, #0
 8015926:	d002      	beq.n	801592e <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8015928:	2301      	movs	r3, #1
 801592a:	77fb      	strb	r3, [r7, #31]
 801592c:	e000      	b.n	8015930 <HAL_SPI_Transmit+0x24e>
  }

error:
 801592e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8015930:	68fb      	ldr	r3, [r7, #12]
 8015932:	2201      	movs	r2, #1
 8015934:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	2200      	movs	r2, #0
 801593c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8015940:	7ffb      	ldrb	r3, [r7, #31]
}
 8015942:	4618      	mov	r0, r3
 8015944:	3720      	adds	r7, #32
 8015946:	46bd      	mov	sp, r7
 8015948:	bd80      	pop	{r7, pc}

0801594a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801594a:	b580      	push	{r7, lr}
 801594c:	b088      	sub	sp, #32
 801594e:	af02      	add	r7, sp, #8
 8015950:	60f8      	str	r0, [r7, #12]
 8015952:	60b9      	str	r1, [r7, #8]
 8015954:	603b      	str	r3, [r7, #0]
 8015956:	4613      	mov	r3, r2
 8015958:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801595a:	2300      	movs	r3, #0
 801595c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801595e:	68fb      	ldr	r3, [r7, #12]
 8015960:	685b      	ldr	r3, [r3, #4]
 8015962:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8015966:	d112      	bne.n	801598e <HAL_SPI_Receive+0x44>
 8015968:	68fb      	ldr	r3, [r7, #12]
 801596a:	689b      	ldr	r3, [r3, #8]
 801596c:	2b00      	cmp	r3, #0
 801596e:	d10e      	bne.n	801598e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8015970:	68fb      	ldr	r3, [r7, #12]
 8015972:	2204      	movs	r2, #4
 8015974:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8015978:	88fa      	ldrh	r2, [r7, #6]
 801597a:	683b      	ldr	r3, [r7, #0]
 801597c:	9300      	str	r3, [sp, #0]
 801597e:	4613      	mov	r3, r2
 8015980:	68ba      	ldr	r2, [r7, #8]
 8015982:	68b9      	ldr	r1, [r7, #8]
 8015984:	68f8      	ldr	r0, [r7, #12]
 8015986:	f000 f8e9 	bl	8015b5c <HAL_SPI_TransmitReceive>
 801598a:	4603      	mov	r3, r0
 801598c:	e0e2      	b.n	8015b54 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801598e:	68fb      	ldr	r3, [r7, #12]
 8015990:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8015994:	2b01      	cmp	r3, #1
 8015996:	d101      	bne.n	801599c <HAL_SPI_Receive+0x52>
 8015998:	2302      	movs	r3, #2
 801599a:	e0db      	b.n	8015b54 <HAL_SPI_Receive+0x20a>
 801599c:	68fb      	ldr	r3, [r7, #12]
 801599e:	2201      	movs	r2, #1
 80159a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80159a4:	f7fc fac0 	bl	8011f28 <HAL_GetTick>
 80159a8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80159aa:	68fb      	ldr	r3, [r7, #12]
 80159ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80159b0:	b2db      	uxtb	r3, r3
 80159b2:	2b01      	cmp	r3, #1
 80159b4:	d002      	beq.n	80159bc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80159b6:	2302      	movs	r3, #2
 80159b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80159ba:	e0c2      	b.n	8015b42 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80159bc:	68bb      	ldr	r3, [r7, #8]
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d002      	beq.n	80159c8 <HAL_SPI_Receive+0x7e>
 80159c2:	88fb      	ldrh	r3, [r7, #6]
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	d102      	bne.n	80159ce <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80159c8:	2301      	movs	r3, #1
 80159ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80159cc:	e0b9      	b.n	8015b42 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80159ce:	68fb      	ldr	r3, [r7, #12]
 80159d0:	2204      	movs	r2, #4
 80159d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80159d6:	68fb      	ldr	r3, [r7, #12]
 80159d8:	2200      	movs	r2, #0
 80159da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80159dc:	68fb      	ldr	r3, [r7, #12]
 80159de:	68ba      	ldr	r2, [r7, #8]
 80159e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80159e2:	68fb      	ldr	r3, [r7, #12]
 80159e4:	88fa      	ldrh	r2, [r7, #6]
 80159e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80159e8:	68fb      	ldr	r3, [r7, #12]
 80159ea:	88fa      	ldrh	r2, [r7, #6]
 80159ec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80159ee:	68fb      	ldr	r3, [r7, #12]
 80159f0:	2200      	movs	r2, #0
 80159f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80159f4:	68fb      	ldr	r3, [r7, #12]
 80159f6:	2200      	movs	r2, #0
 80159f8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80159fa:	68fb      	ldr	r3, [r7, #12]
 80159fc:	2200      	movs	r2, #0
 80159fe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8015a00:	68fb      	ldr	r3, [r7, #12]
 8015a02:	2200      	movs	r2, #0
 8015a04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8015a06:	68fb      	ldr	r3, [r7, #12]
 8015a08:	2200      	movs	r2, #0
 8015a0a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015a0c:	68fb      	ldr	r3, [r7, #12]
 8015a0e:	689b      	ldr	r3, [r3, #8]
 8015a10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015a14:	d107      	bne.n	8015a26 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8015a16:	68fb      	ldr	r3, [r7, #12]
 8015a18:	681b      	ldr	r3, [r3, #0]
 8015a1a:	681a      	ldr	r2, [r3, #0]
 8015a1c:	68fb      	ldr	r3, [r7, #12]
 8015a1e:	681b      	ldr	r3, [r3, #0]
 8015a20:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8015a24:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8015a26:	68fb      	ldr	r3, [r7, #12]
 8015a28:	681b      	ldr	r3, [r3, #0]
 8015a2a:	681b      	ldr	r3, [r3, #0]
 8015a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015a30:	2b40      	cmp	r3, #64	; 0x40
 8015a32:	d007      	beq.n	8015a44 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8015a34:	68fb      	ldr	r3, [r7, #12]
 8015a36:	681b      	ldr	r3, [r3, #0]
 8015a38:	681a      	ldr	r2, [r3, #0]
 8015a3a:	68fb      	ldr	r3, [r7, #12]
 8015a3c:	681b      	ldr	r3, [r3, #0]
 8015a3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015a42:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8015a44:	68fb      	ldr	r3, [r7, #12]
 8015a46:	68db      	ldr	r3, [r3, #12]
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	d162      	bne.n	8015b12 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8015a4c:	e02e      	b.n	8015aac <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8015a4e:	68fb      	ldr	r3, [r7, #12]
 8015a50:	681b      	ldr	r3, [r3, #0]
 8015a52:	689b      	ldr	r3, [r3, #8]
 8015a54:	f003 0301 	and.w	r3, r3, #1
 8015a58:	2b01      	cmp	r3, #1
 8015a5a:	d115      	bne.n	8015a88 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8015a5c:	68fb      	ldr	r3, [r7, #12]
 8015a5e:	681b      	ldr	r3, [r3, #0]
 8015a60:	f103 020c 	add.w	r2, r3, #12
 8015a64:	68fb      	ldr	r3, [r7, #12]
 8015a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a68:	7812      	ldrb	r2, [r2, #0]
 8015a6a:	b2d2      	uxtb	r2, r2
 8015a6c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8015a6e:	68fb      	ldr	r3, [r7, #12]
 8015a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a72:	1c5a      	adds	r2, r3, #1
 8015a74:	68fb      	ldr	r3, [r7, #12]
 8015a76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8015a78:	68fb      	ldr	r3, [r7, #12]
 8015a7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015a7c:	b29b      	uxth	r3, r3
 8015a7e:	3b01      	subs	r3, #1
 8015a80:	b29a      	uxth	r2, r3
 8015a82:	68fb      	ldr	r3, [r7, #12]
 8015a84:	87da      	strh	r2, [r3, #62]	; 0x3e
 8015a86:	e011      	b.n	8015aac <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8015a88:	f7fc fa4e 	bl	8011f28 <HAL_GetTick>
 8015a8c:	4602      	mov	r2, r0
 8015a8e:	693b      	ldr	r3, [r7, #16]
 8015a90:	1ad3      	subs	r3, r2, r3
 8015a92:	683a      	ldr	r2, [r7, #0]
 8015a94:	429a      	cmp	r2, r3
 8015a96:	d803      	bhi.n	8015aa0 <HAL_SPI_Receive+0x156>
 8015a98:	683b      	ldr	r3, [r7, #0]
 8015a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a9e:	d102      	bne.n	8015aa6 <HAL_SPI_Receive+0x15c>
 8015aa0:	683b      	ldr	r3, [r7, #0]
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d102      	bne.n	8015aac <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8015aa6:	2303      	movs	r3, #3
 8015aa8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8015aaa:	e04a      	b.n	8015b42 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8015aac:	68fb      	ldr	r3, [r7, #12]
 8015aae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015ab0:	b29b      	uxth	r3, r3
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d1cb      	bne.n	8015a4e <HAL_SPI_Receive+0x104>
 8015ab6:	e031      	b.n	8015b1c <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8015ab8:	68fb      	ldr	r3, [r7, #12]
 8015aba:	681b      	ldr	r3, [r3, #0]
 8015abc:	689b      	ldr	r3, [r3, #8]
 8015abe:	f003 0301 	and.w	r3, r3, #1
 8015ac2:	2b01      	cmp	r3, #1
 8015ac4:	d113      	bne.n	8015aee <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8015ac6:	68fb      	ldr	r3, [r7, #12]
 8015ac8:	681b      	ldr	r3, [r3, #0]
 8015aca:	68da      	ldr	r2, [r3, #12]
 8015acc:	68fb      	ldr	r3, [r7, #12]
 8015ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015ad0:	b292      	uxth	r2, r2
 8015ad2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8015ad4:	68fb      	ldr	r3, [r7, #12]
 8015ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015ad8:	1c9a      	adds	r2, r3, #2
 8015ada:	68fb      	ldr	r3, [r7, #12]
 8015adc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8015ade:	68fb      	ldr	r3, [r7, #12]
 8015ae0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015ae2:	b29b      	uxth	r3, r3
 8015ae4:	3b01      	subs	r3, #1
 8015ae6:	b29a      	uxth	r2, r3
 8015ae8:	68fb      	ldr	r3, [r7, #12]
 8015aea:	87da      	strh	r2, [r3, #62]	; 0x3e
 8015aec:	e011      	b.n	8015b12 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8015aee:	f7fc fa1b 	bl	8011f28 <HAL_GetTick>
 8015af2:	4602      	mov	r2, r0
 8015af4:	693b      	ldr	r3, [r7, #16]
 8015af6:	1ad3      	subs	r3, r2, r3
 8015af8:	683a      	ldr	r2, [r7, #0]
 8015afa:	429a      	cmp	r2, r3
 8015afc:	d803      	bhi.n	8015b06 <HAL_SPI_Receive+0x1bc>
 8015afe:	683b      	ldr	r3, [r7, #0]
 8015b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b04:	d102      	bne.n	8015b0c <HAL_SPI_Receive+0x1c2>
 8015b06:	683b      	ldr	r3, [r7, #0]
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	d102      	bne.n	8015b12 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8015b0c:	2303      	movs	r3, #3
 8015b0e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8015b10:	e017      	b.n	8015b42 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8015b12:	68fb      	ldr	r3, [r7, #12]
 8015b14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015b16:	b29b      	uxth	r3, r3
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	d1cd      	bne.n	8015ab8 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8015b1c:	693a      	ldr	r2, [r7, #16]
 8015b1e:	6839      	ldr	r1, [r7, #0]
 8015b20:	68f8      	ldr	r0, [r7, #12]
 8015b22:	f000 fa27 	bl	8015f74 <SPI_EndRxTransaction>
 8015b26:	4603      	mov	r3, r0
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d002      	beq.n	8015b32 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8015b2c:	68fb      	ldr	r3, [r7, #12]
 8015b2e:	2220      	movs	r2, #32
 8015b30:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015b32:	68fb      	ldr	r3, [r7, #12]
 8015b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d002      	beq.n	8015b40 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8015b3a:	2301      	movs	r3, #1
 8015b3c:	75fb      	strb	r3, [r7, #23]
 8015b3e:	e000      	b.n	8015b42 <HAL_SPI_Receive+0x1f8>
  }

error :
 8015b40:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8015b42:	68fb      	ldr	r3, [r7, #12]
 8015b44:	2201      	movs	r2, #1
 8015b46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8015b4a:	68fb      	ldr	r3, [r7, #12]
 8015b4c:	2200      	movs	r2, #0
 8015b4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8015b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8015b54:	4618      	mov	r0, r3
 8015b56:	3718      	adds	r7, #24
 8015b58:	46bd      	mov	sp, r7
 8015b5a:	bd80      	pop	{r7, pc}

08015b5c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8015b5c:	b580      	push	{r7, lr}
 8015b5e:	b08c      	sub	sp, #48	; 0x30
 8015b60:	af00      	add	r7, sp, #0
 8015b62:	60f8      	str	r0, [r7, #12]
 8015b64:	60b9      	str	r1, [r7, #8]
 8015b66:	607a      	str	r2, [r7, #4]
 8015b68:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8015b6a:	2301      	movs	r3, #1
 8015b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8015b6e:	2300      	movs	r3, #0
 8015b70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8015b74:	68fb      	ldr	r3, [r7, #12]
 8015b76:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8015b7a:	2b01      	cmp	r3, #1
 8015b7c:	d101      	bne.n	8015b82 <HAL_SPI_TransmitReceive+0x26>
 8015b7e:	2302      	movs	r3, #2
 8015b80:	e18a      	b.n	8015e98 <HAL_SPI_TransmitReceive+0x33c>
 8015b82:	68fb      	ldr	r3, [r7, #12]
 8015b84:	2201      	movs	r2, #1
 8015b86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8015b8a:	f7fc f9cd 	bl	8011f28 <HAL_GetTick>
 8015b8e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8015b90:	68fb      	ldr	r3, [r7, #12]
 8015b92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8015b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8015b9a:	68fb      	ldr	r3, [r7, #12]
 8015b9c:	685b      	ldr	r3, [r3, #4]
 8015b9e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8015ba0:	887b      	ldrh	r3, [r7, #2]
 8015ba2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8015ba4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015ba8:	2b01      	cmp	r3, #1
 8015baa:	d00f      	beq.n	8015bcc <HAL_SPI_TransmitReceive+0x70>
 8015bac:	69fb      	ldr	r3, [r7, #28]
 8015bae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8015bb2:	d107      	bne.n	8015bc4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8015bb4:	68fb      	ldr	r3, [r7, #12]
 8015bb6:	689b      	ldr	r3, [r3, #8]
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d103      	bne.n	8015bc4 <HAL_SPI_TransmitReceive+0x68>
 8015bbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015bc0:	2b04      	cmp	r3, #4
 8015bc2:	d003      	beq.n	8015bcc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8015bc4:	2302      	movs	r3, #2
 8015bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8015bca:	e15b      	b.n	8015e84 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8015bcc:	68bb      	ldr	r3, [r7, #8]
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	d005      	beq.n	8015bde <HAL_SPI_TransmitReceive+0x82>
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	d002      	beq.n	8015bde <HAL_SPI_TransmitReceive+0x82>
 8015bd8:	887b      	ldrh	r3, [r7, #2]
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d103      	bne.n	8015be6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8015bde:	2301      	movs	r3, #1
 8015be0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8015be4:	e14e      	b.n	8015e84 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8015be6:	68fb      	ldr	r3, [r7, #12]
 8015be8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8015bec:	b2db      	uxtb	r3, r3
 8015bee:	2b04      	cmp	r3, #4
 8015bf0:	d003      	beq.n	8015bfa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8015bf2:	68fb      	ldr	r3, [r7, #12]
 8015bf4:	2205      	movs	r2, #5
 8015bf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8015bfa:	68fb      	ldr	r3, [r7, #12]
 8015bfc:	2200      	movs	r2, #0
 8015bfe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8015c00:	68fb      	ldr	r3, [r7, #12]
 8015c02:	687a      	ldr	r2, [r7, #4]
 8015c04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8015c06:	68fb      	ldr	r3, [r7, #12]
 8015c08:	887a      	ldrh	r2, [r7, #2]
 8015c0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8015c0c:	68fb      	ldr	r3, [r7, #12]
 8015c0e:	887a      	ldrh	r2, [r7, #2]
 8015c10:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8015c12:	68fb      	ldr	r3, [r7, #12]
 8015c14:	68ba      	ldr	r2, [r7, #8]
 8015c16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8015c18:	68fb      	ldr	r3, [r7, #12]
 8015c1a:	887a      	ldrh	r2, [r7, #2]
 8015c1c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8015c1e:	68fb      	ldr	r3, [r7, #12]
 8015c20:	887a      	ldrh	r2, [r7, #2]
 8015c22:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8015c24:	68fb      	ldr	r3, [r7, #12]
 8015c26:	2200      	movs	r2, #0
 8015c28:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8015c2a:	68fb      	ldr	r3, [r7, #12]
 8015c2c:	2200      	movs	r2, #0
 8015c2e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8015c30:	68fb      	ldr	r3, [r7, #12]
 8015c32:	681b      	ldr	r3, [r3, #0]
 8015c34:	681b      	ldr	r3, [r3, #0]
 8015c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015c3a:	2b40      	cmp	r3, #64	; 0x40
 8015c3c:	d007      	beq.n	8015c4e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8015c3e:	68fb      	ldr	r3, [r7, #12]
 8015c40:	681b      	ldr	r3, [r3, #0]
 8015c42:	681a      	ldr	r2, [r3, #0]
 8015c44:	68fb      	ldr	r3, [r7, #12]
 8015c46:	681b      	ldr	r3, [r3, #0]
 8015c48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015c4c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	68db      	ldr	r3, [r3, #12]
 8015c52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015c56:	d178      	bne.n	8015d4a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8015c58:	68fb      	ldr	r3, [r7, #12]
 8015c5a:	685b      	ldr	r3, [r3, #4]
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d002      	beq.n	8015c66 <HAL_SPI_TransmitReceive+0x10a>
 8015c60:	8b7b      	ldrh	r3, [r7, #26]
 8015c62:	2b01      	cmp	r3, #1
 8015c64:	d166      	bne.n	8015d34 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8015c66:	68fb      	ldr	r3, [r7, #12]
 8015c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c6a:	881a      	ldrh	r2, [r3, #0]
 8015c6c:	68fb      	ldr	r3, [r7, #12]
 8015c6e:	681b      	ldr	r3, [r3, #0]
 8015c70:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8015c72:	68fb      	ldr	r3, [r7, #12]
 8015c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c76:	1c9a      	adds	r2, r3, #2
 8015c78:	68fb      	ldr	r3, [r7, #12]
 8015c7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8015c7c:	68fb      	ldr	r3, [r7, #12]
 8015c7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8015c80:	b29b      	uxth	r3, r3
 8015c82:	3b01      	subs	r3, #1
 8015c84:	b29a      	uxth	r2, r3
 8015c86:	68fb      	ldr	r3, [r7, #12]
 8015c88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8015c8a:	e053      	b.n	8015d34 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8015c8c:	68fb      	ldr	r3, [r7, #12]
 8015c8e:	681b      	ldr	r3, [r3, #0]
 8015c90:	689b      	ldr	r3, [r3, #8]
 8015c92:	f003 0302 	and.w	r3, r3, #2
 8015c96:	2b02      	cmp	r3, #2
 8015c98:	d11b      	bne.n	8015cd2 <HAL_SPI_TransmitReceive+0x176>
 8015c9a:	68fb      	ldr	r3, [r7, #12]
 8015c9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8015c9e:	b29b      	uxth	r3, r3
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d016      	beq.n	8015cd2 <HAL_SPI_TransmitReceive+0x176>
 8015ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ca6:	2b01      	cmp	r3, #1
 8015ca8:	d113      	bne.n	8015cd2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8015caa:	68fb      	ldr	r3, [r7, #12]
 8015cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015cae:	881a      	ldrh	r2, [r3, #0]
 8015cb0:	68fb      	ldr	r3, [r7, #12]
 8015cb2:	681b      	ldr	r3, [r3, #0]
 8015cb4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8015cb6:	68fb      	ldr	r3, [r7, #12]
 8015cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015cba:	1c9a      	adds	r2, r3, #2
 8015cbc:	68fb      	ldr	r3, [r7, #12]
 8015cbe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8015cc0:	68fb      	ldr	r3, [r7, #12]
 8015cc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8015cc4:	b29b      	uxth	r3, r3
 8015cc6:	3b01      	subs	r3, #1
 8015cc8:	b29a      	uxth	r2, r3
 8015cca:	68fb      	ldr	r3, [r7, #12]
 8015ccc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8015cce:	2300      	movs	r3, #0
 8015cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8015cd2:	68fb      	ldr	r3, [r7, #12]
 8015cd4:	681b      	ldr	r3, [r3, #0]
 8015cd6:	689b      	ldr	r3, [r3, #8]
 8015cd8:	f003 0301 	and.w	r3, r3, #1
 8015cdc:	2b01      	cmp	r3, #1
 8015cde:	d119      	bne.n	8015d14 <HAL_SPI_TransmitReceive+0x1b8>
 8015ce0:	68fb      	ldr	r3, [r7, #12]
 8015ce2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015ce4:	b29b      	uxth	r3, r3
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d014      	beq.n	8015d14 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8015cea:	68fb      	ldr	r3, [r7, #12]
 8015cec:	681b      	ldr	r3, [r3, #0]
 8015cee:	68da      	ldr	r2, [r3, #12]
 8015cf0:	68fb      	ldr	r3, [r7, #12]
 8015cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015cf4:	b292      	uxth	r2, r2
 8015cf6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8015cf8:	68fb      	ldr	r3, [r7, #12]
 8015cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015cfc:	1c9a      	adds	r2, r3, #2
 8015cfe:	68fb      	ldr	r3, [r7, #12]
 8015d00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015d06:	b29b      	uxth	r3, r3
 8015d08:	3b01      	subs	r3, #1
 8015d0a:	b29a      	uxth	r2, r3
 8015d0c:	68fb      	ldr	r3, [r7, #12]
 8015d0e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8015d10:	2301      	movs	r3, #1
 8015d12:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8015d14:	f7fc f908 	bl	8011f28 <HAL_GetTick>
 8015d18:	4602      	mov	r2, r0
 8015d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d1c:	1ad3      	subs	r3, r2, r3
 8015d1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015d20:	429a      	cmp	r2, r3
 8015d22:	d807      	bhi.n	8015d34 <HAL_SPI_TransmitReceive+0x1d8>
 8015d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d2a:	d003      	beq.n	8015d34 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8015d2c:	2303      	movs	r3, #3
 8015d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8015d32:	e0a7      	b.n	8015e84 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8015d34:	68fb      	ldr	r3, [r7, #12]
 8015d36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8015d38:	b29b      	uxth	r3, r3
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	d1a6      	bne.n	8015c8c <HAL_SPI_TransmitReceive+0x130>
 8015d3e:	68fb      	ldr	r3, [r7, #12]
 8015d40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015d42:	b29b      	uxth	r3, r3
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	d1a1      	bne.n	8015c8c <HAL_SPI_TransmitReceive+0x130>
 8015d48:	e07c      	b.n	8015e44 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8015d4a:	68fb      	ldr	r3, [r7, #12]
 8015d4c:	685b      	ldr	r3, [r3, #4]
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	d002      	beq.n	8015d58 <HAL_SPI_TransmitReceive+0x1fc>
 8015d52:	8b7b      	ldrh	r3, [r7, #26]
 8015d54:	2b01      	cmp	r3, #1
 8015d56:	d16b      	bne.n	8015e30 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8015d58:	68fb      	ldr	r3, [r7, #12]
 8015d5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015d5c:	68fb      	ldr	r3, [r7, #12]
 8015d5e:	681b      	ldr	r3, [r3, #0]
 8015d60:	330c      	adds	r3, #12
 8015d62:	7812      	ldrb	r2, [r2, #0]
 8015d64:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8015d66:	68fb      	ldr	r3, [r7, #12]
 8015d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d6a:	1c5a      	adds	r2, r3, #1
 8015d6c:	68fb      	ldr	r3, [r7, #12]
 8015d6e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8015d70:	68fb      	ldr	r3, [r7, #12]
 8015d72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8015d74:	b29b      	uxth	r3, r3
 8015d76:	3b01      	subs	r3, #1
 8015d78:	b29a      	uxth	r2, r3
 8015d7a:	68fb      	ldr	r3, [r7, #12]
 8015d7c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8015d7e:	e057      	b.n	8015e30 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8015d80:	68fb      	ldr	r3, [r7, #12]
 8015d82:	681b      	ldr	r3, [r3, #0]
 8015d84:	689b      	ldr	r3, [r3, #8]
 8015d86:	f003 0302 	and.w	r3, r3, #2
 8015d8a:	2b02      	cmp	r3, #2
 8015d8c:	d11c      	bne.n	8015dc8 <HAL_SPI_TransmitReceive+0x26c>
 8015d8e:	68fb      	ldr	r3, [r7, #12]
 8015d90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8015d92:	b29b      	uxth	r3, r3
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d017      	beq.n	8015dc8 <HAL_SPI_TransmitReceive+0x26c>
 8015d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d9a:	2b01      	cmp	r3, #1
 8015d9c:	d114      	bne.n	8015dc8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8015d9e:	68fb      	ldr	r3, [r7, #12]
 8015da0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015da2:	68fb      	ldr	r3, [r7, #12]
 8015da4:	681b      	ldr	r3, [r3, #0]
 8015da6:	330c      	adds	r3, #12
 8015da8:	7812      	ldrb	r2, [r2, #0]
 8015daa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8015dac:	68fb      	ldr	r3, [r7, #12]
 8015dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015db0:	1c5a      	adds	r2, r3, #1
 8015db2:	68fb      	ldr	r3, [r7, #12]
 8015db4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8015db6:	68fb      	ldr	r3, [r7, #12]
 8015db8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8015dba:	b29b      	uxth	r3, r3
 8015dbc:	3b01      	subs	r3, #1
 8015dbe:	b29a      	uxth	r2, r3
 8015dc0:	68fb      	ldr	r3, [r7, #12]
 8015dc2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8015dc4:	2300      	movs	r3, #0
 8015dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8015dc8:	68fb      	ldr	r3, [r7, #12]
 8015dca:	681b      	ldr	r3, [r3, #0]
 8015dcc:	689b      	ldr	r3, [r3, #8]
 8015dce:	f003 0301 	and.w	r3, r3, #1
 8015dd2:	2b01      	cmp	r3, #1
 8015dd4:	d119      	bne.n	8015e0a <HAL_SPI_TransmitReceive+0x2ae>
 8015dd6:	68fb      	ldr	r3, [r7, #12]
 8015dd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015dda:	b29b      	uxth	r3, r3
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d014      	beq.n	8015e0a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8015de0:	68fb      	ldr	r3, [r7, #12]
 8015de2:	681b      	ldr	r3, [r3, #0]
 8015de4:	68da      	ldr	r2, [r3, #12]
 8015de6:	68fb      	ldr	r3, [r7, #12]
 8015de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015dea:	b2d2      	uxtb	r2, r2
 8015dec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8015dee:	68fb      	ldr	r3, [r7, #12]
 8015df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015df2:	1c5a      	adds	r2, r3, #1
 8015df4:	68fb      	ldr	r3, [r7, #12]
 8015df6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8015df8:	68fb      	ldr	r3, [r7, #12]
 8015dfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015dfc:	b29b      	uxth	r3, r3
 8015dfe:	3b01      	subs	r3, #1
 8015e00:	b29a      	uxth	r2, r3
 8015e02:	68fb      	ldr	r3, [r7, #12]
 8015e04:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8015e06:	2301      	movs	r3, #1
 8015e08:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8015e0a:	f7fc f88d 	bl	8011f28 <HAL_GetTick>
 8015e0e:	4602      	mov	r2, r0
 8015e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e12:	1ad3      	subs	r3, r2, r3
 8015e14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015e16:	429a      	cmp	r2, r3
 8015e18:	d803      	bhi.n	8015e22 <HAL_SPI_TransmitReceive+0x2c6>
 8015e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e20:	d102      	bne.n	8015e28 <HAL_SPI_TransmitReceive+0x2cc>
 8015e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d103      	bne.n	8015e30 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8015e28:	2303      	movs	r3, #3
 8015e2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8015e2e:	e029      	b.n	8015e84 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8015e30:	68fb      	ldr	r3, [r7, #12]
 8015e32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8015e34:	b29b      	uxth	r3, r3
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d1a2      	bne.n	8015d80 <HAL_SPI_TransmitReceive+0x224>
 8015e3a:	68fb      	ldr	r3, [r7, #12]
 8015e3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015e3e:	b29b      	uxth	r3, r3
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	d19d      	bne.n	8015d80 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8015e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015e46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015e48:	68f8      	ldr	r0, [r7, #12]
 8015e4a:	f000 f8f9 	bl	8016040 <SPI_EndRxTxTransaction>
 8015e4e:	4603      	mov	r3, r0
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d006      	beq.n	8015e62 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8015e54:	2301      	movs	r3, #1
 8015e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8015e5a:	68fb      	ldr	r3, [r7, #12]
 8015e5c:	2220      	movs	r2, #32
 8015e5e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8015e60:	e010      	b.n	8015e84 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8015e62:	68fb      	ldr	r3, [r7, #12]
 8015e64:	689b      	ldr	r3, [r3, #8]
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d10b      	bne.n	8015e82 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8015e6a:	2300      	movs	r3, #0
 8015e6c:	617b      	str	r3, [r7, #20]
 8015e6e:	68fb      	ldr	r3, [r7, #12]
 8015e70:	681b      	ldr	r3, [r3, #0]
 8015e72:	68db      	ldr	r3, [r3, #12]
 8015e74:	617b      	str	r3, [r7, #20]
 8015e76:	68fb      	ldr	r3, [r7, #12]
 8015e78:	681b      	ldr	r3, [r3, #0]
 8015e7a:	689b      	ldr	r3, [r3, #8]
 8015e7c:	617b      	str	r3, [r7, #20]
 8015e7e:	697b      	ldr	r3, [r7, #20]
 8015e80:	e000      	b.n	8015e84 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8015e82:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8015e84:	68fb      	ldr	r3, [r7, #12]
 8015e86:	2201      	movs	r2, #1
 8015e88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8015e8c:	68fb      	ldr	r3, [r7, #12]
 8015e8e:	2200      	movs	r2, #0
 8015e90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8015e94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8015e98:	4618      	mov	r0, r3
 8015e9a:	3730      	adds	r7, #48	; 0x30
 8015e9c:	46bd      	mov	sp, r7
 8015e9e:	bd80      	pop	{r7, pc}

08015ea0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8015ea0:	b580      	push	{r7, lr}
 8015ea2:	b084      	sub	sp, #16
 8015ea4:	af00      	add	r7, sp, #0
 8015ea6:	60f8      	str	r0, [r7, #12]
 8015ea8:	60b9      	str	r1, [r7, #8]
 8015eaa:	603b      	str	r3, [r7, #0]
 8015eac:	4613      	mov	r3, r2
 8015eae:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8015eb0:	e04c      	b.n	8015f4c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8015eb2:	683b      	ldr	r3, [r7, #0]
 8015eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015eb8:	d048      	beq.n	8015f4c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8015eba:	f7fc f835 	bl	8011f28 <HAL_GetTick>
 8015ebe:	4602      	mov	r2, r0
 8015ec0:	69bb      	ldr	r3, [r7, #24]
 8015ec2:	1ad3      	subs	r3, r2, r3
 8015ec4:	683a      	ldr	r2, [r7, #0]
 8015ec6:	429a      	cmp	r2, r3
 8015ec8:	d902      	bls.n	8015ed0 <SPI_WaitFlagStateUntilTimeout+0x30>
 8015eca:	683b      	ldr	r3, [r7, #0]
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d13d      	bne.n	8015f4c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8015ed0:	68fb      	ldr	r3, [r7, #12]
 8015ed2:	681b      	ldr	r3, [r3, #0]
 8015ed4:	685a      	ldr	r2, [r3, #4]
 8015ed6:	68fb      	ldr	r3, [r7, #12]
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8015ede:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015ee0:	68fb      	ldr	r3, [r7, #12]
 8015ee2:	685b      	ldr	r3, [r3, #4]
 8015ee4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8015ee8:	d111      	bne.n	8015f0e <SPI_WaitFlagStateUntilTimeout+0x6e>
 8015eea:	68fb      	ldr	r3, [r7, #12]
 8015eec:	689b      	ldr	r3, [r3, #8]
 8015eee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015ef2:	d004      	beq.n	8015efe <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8015ef4:	68fb      	ldr	r3, [r7, #12]
 8015ef6:	689b      	ldr	r3, [r3, #8]
 8015ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015efc:	d107      	bne.n	8015f0e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8015efe:	68fb      	ldr	r3, [r7, #12]
 8015f00:	681b      	ldr	r3, [r3, #0]
 8015f02:	681a      	ldr	r2, [r3, #0]
 8015f04:	68fb      	ldr	r3, [r7, #12]
 8015f06:	681b      	ldr	r3, [r3, #0]
 8015f08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8015f0c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8015f0e:	68fb      	ldr	r3, [r7, #12]
 8015f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015f12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015f16:	d10f      	bne.n	8015f38 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8015f18:	68fb      	ldr	r3, [r7, #12]
 8015f1a:	681b      	ldr	r3, [r3, #0]
 8015f1c:	681a      	ldr	r2, [r3, #0]
 8015f1e:	68fb      	ldr	r3, [r7, #12]
 8015f20:	681b      	ldr	r3, [r3, #0]
 8015f22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015f26:	601a      	str	r2, [r3, #0]
 8015f28:	68fb      	ldr	r3, [r7, #12]
 8015f2a:	681b      	ldr	r3, [r3, #0]
 8015f2c:	681a      	ldr	r2, [r3, #0]
 8015f2e:	68fb      	ldr	r3, [r7, #12]
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8015f36:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8015f38:	68fb      	ldr	r3, [r7, #12]
 8015f3a:	2201      	movs	r2, #1
 8015f3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8015f40:	68fb      	ldr	r3, [r7, #12]
 8015f42:	2200      	movs	r2, #0
 8015f44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8015f48:	2303      	movs	r3, #3
 8015f4a:	e00f      	b.n	8015f6c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8015f4c:	68fb      	ldr	r3, [r7, #12]
 8015f4e:	681b      	ldr	r3, [r3, #0]
 8015f50:	689a      	ldr	r2, [r3, #8]
 8015f52:	68bb      	ldr	r3, [r7, #8]
 8015f54:	4013      	ands	r3, r2
 8015f56:	68ba      	ldr	r2, [r7, #8]
 8015f58:	429a      	cmp	r2, r3
 8015f5a:	bf0c      	ite	eq
 8015f5c:	2301      	moveq	r3, #1
 8015f5e:	2300      	movne	r3, #0
 8015f60:	b2db      	uxtb	r3, r3
 8015f62:	461a      	mov	r2, r3
 8015f64:	79fb      	ldrb	r3, [r7, #7]
 8015f66:	429a      	cmp	r2, r3
 8015f68:	d1a3      	bne.n	8015eb2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8015f6a:	2300      	movs	r3, #0
}
 8015f6c:	4618      	mov	r0, r3
 8015f6e:	3710      	adds	r7, #16
 8015f70:	46bd      	mov	sp, r7
 8015f72:	bd80      	pop	{r7, pc}

08015f74 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8015f74:	b580      	push	{r7, lr}
 8015f76:	b086      	sub	sp, #24
 8015f78:	af02      	add	r7, sp, #8
 8015f7a:	60f8      	str	r0, [r7, #12]
 8015f7c:	60b9      	str	r1, [r7, #8]
 8015f7e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015f80:	68fb      	ldr	r3, [r7, #12]
 8015f82:	685b      	ldr	r3, [r3, #4]
 8015f84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8015f88:	d111      	bne.n	8015fae <SPI_EndRxTransaction+0x3a>
 8015f8a:	68fb      	ldr	r3, [r7, #12]
 8015f8c:	689b      	ldr	r3, [r3, #8]
 8015f8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015f92:	d004      	beq.n	8015f9e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	689b      	ldr	r3, [r3, #8]
 8015f98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015f9c:	d107      	bne.n	8015fae <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8015f9e:	68fb      	ldr	r3, [r7, #12]
 8015fa0:	681b      	ldr	r3, [r3, #0]
 8015fa2:	681a      	ldr	r2, [r3, #0]
 8015fa4:	68fb      	ldr	r3, [r7, #12]
 8015fa6:	681b      	ldr	r3, [r3, #0]
 8015fa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8015fac:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8015fae:	68fb      	ldr	r3, [r7, #12]
 8015fb0:	685b      	ldr	r3, [r3, #4]
 8015fb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8015fb6:	d12a      	bne.n	801600e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8015fb8:	68fb      	ldr	r3, [r7, #12]
 8015fba:	689b      	ldr	r3, [r3, #8]
 8015fbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015fc0:	d012      	beq.n	8015fe8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	9300      	str	r3, [sp, #0]
 8015fc6:	68bb      	ldr	r3, [r7, #8]
 8015fc8:	2200      	movs	r2, #0
 8015fca:	2180      	movs	r1, #128	; 0x80
 8015fcc:	68f8      	ldr	r0, [r7, #12]
 8015fce:	f7ff ff67 	bl	8015ea0 <SPI_WaitFlagStateUntilTimeout>
 8015fd2:	4603      	mov	r3, r0
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	d02d      	beq.n	8016034 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8015fd8:	68fb      	ldr	r3, [r7, #12]
 8015fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015fdc:	f043 0220 	orr.w	r2, r3, #32
 8015fe0:	68fb      	ldr	r3, [r7, #12]
 8015fe2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8015fe4:	2303      	movs	r3, #3
 8015fe6:	e026      	b.n	8016036 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	9300      	str	r3, [sp, #0]
 8015fec:	68bb      	ldr	r3, [r7, #8]
 8015fee:	2200      	movs	r2, #0
 8015ff0:	2101      	movs	r1, #1
 8015ff2:	68f8      	ldr	r0, [r7, #12]
 8015ff4:	f7ff ff54 	bl	8015ea0 <SPI_WaitFlagStateUntilTimeout>
 8015ff8:	4603      	mov	r3, r0
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d01a      	beq.n	8016034 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8015ffe:	68fb      	ldr	r3, [r7, #12]
 8016000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016002:	f043 0220 	orr.w	r2, r3, #32
 8016006:	68fb      	ldr	r3, [r7, #12]
 8016008:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801600a:	2303      	movs	r3, #3
 801600c:	e013      	b.n	8016036 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	9300      	str	r3, [sp, #0]
 8016012:	68bb      	ldr	r3, [r7, #8]
 8016014:	2200      	movs	r2, #0
 8016016:	2101      	movs	r1, #1
 8016018:	68f8      	ldr	r0, [r7, #12]
 801601a:	f7ff ff41 	bl	8015ea0 <SPI_WaitFlagStateUntilTimeout>
 801601e:	4603      	mov	r3, r0
 8016020:	2b00      	cmp	r3, #0
 8016022:	d007      	beq.n	8016034 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8016024:	68fb      	ldr	r3, [r7, #12]
 8016026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016028:	f043 0220 	orr.w	r2, r3, #32
 801602c:	68fb      	ldr	r3, [r7, #12]
 801602e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8016030:	2303      	movs	r3, #3
 8016032:	e000      	b.n	8016036 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8016034:	2300      	movs	r3, #0
}
 8016036:	4618      	mov	r0, r3
 8016038:	3710      	adds	r7, #16
 801603a:	46bd      	mov	sp, r7
 801603c:	bd80      	pop	{r7, pc}
	...

08016040 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8016040:	b580      	push	{r7, lr}
 8016042:	b088      	sub	sp, #32
 8016044:	af02      	add	r7, sp, #8
 8016046:	60f8      	str	r0, [r7, #12]
 8016048:	60b9      	str	r1, [r7, #8]
 801604a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801604c:	4b1b      	ldr	r3, [pc, #108]	; (80160bc <SPI_EndRxTxTransaction+0x7c>)
 801604e:	681b      	ldr	r3, [r3, #0]
 8016050:	4a1b      	ldr	r2, [pc, #108]	; (80160c0 <SPI_EndRxTxTransaction+0x80>)
 8016052:	fba2 2303 	umull	r2, r3, r2, r3
 8016056:	0d5b      	lsrs	r3, r3, #21
 8016058:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801605c:	fb02 f303 	mul.w	r3, r2, r3
 8016060:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8016062:	68fb      	ldr	r3, [r7, #12]
 8016064:	685b      	ldr	r3, [r3, #4]
 8016066:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801606a:	d112      	bne.n	8016092 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	9300      	str	r3, [sp, #0]
 8016070:	68bb      	ldr	r3, [r7, #8]
 8016072:	2200      	movs	r2, #0
 8016074:	2180      	movs	r1, #128	; 0x80
 8016076:	68f8      	ldr	r0, [r7, #12]
 8016078:	f7ff ff12 	bl	8015ea0 <SPI_WaitFlagStateUntilTimeout>
 801607c:	4603      	mov	r3, r0
 801607e:	2b00      	cmp	r3, #0
 8016080:	d016      	beq.n	80160b0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8016082:	68fb      	ldr	r3, [r7, #12]
 8016084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016086:	f043 0220 	orr.w	r2, r3, #32
 801608a:	68fb      	ldr	r3, [r7, #12]
 801608c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801608e:	2303      	movs	r3, #3
 8016090:	e00f      	b.n	80160b2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8016092:	697b      	ldr	r3, [r7, #20]
 8016094:	2b00      	cmp	r3, #0
 8016096:	d00a      	beq.n	80160ae <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8016098:	697b      	ldr	r3, [r7, #20]
 801609a:	3b01      	subs	r3, #1
 801609c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801609e:	68fb      	ldr	r3, [r7, #12]
 80160a0:	681b      	ldr	r3, [r3, #0]
 80160a2:	689b      	ldr	r3, [r3, #8]
 80160a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80160a8:	2b80      	cmp	r3, #128	; 0x80
 80160aa:	d0f2      	beq.n	8016092 <SPI_EndRxTxTransaction+0x52>
 80160ac:	e000      	b.n	80160b0 <SPI_EndRxTxTransaction+0x70>
        break;
 80160ae:	bf00      	nop
  }

  return HAL_OK;
 80160b0:	2300      	movs	r3, #0
}
 80160b2:	4618      	mov	r0, r3
 80160b4:	3718      	adds	r7, #24
 80160b6:	46bd      	mov	sp, r7
 80160b8:	bd80      	pop	{r7, pc}
 80160ba:	bf00      	nop
 80160bc:	2000008c 	.word	0x2000008c
 80160c0:	165e9f81 	.word	0x165e9f81

080160c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80160c4:	b580      	push	{r7, lr}
 80160c6:	b082      	sub	sp, #8
 80160c8:	af00      	add	r7, sp, #0
 80160ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	d101      	bne.n	80160d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80160d2:	2301      	movs	r3, #1
 80160d4:	e01d      	b.n	8016112 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80160dc:	b2db      	uxtb	r3, r3
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d106      	bne.n	80160f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	2200      	movs	r2, #0
 80160e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80160ea:	6878      	ldr	r0, [r7, #4]
 80160ec:	f7f5 ff7e 	bl	800bfec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	2202      	movs	r2, #2
 80160f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	681a      	ldr	r2, [r3, #0]
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	3304      	adds	r3, #4
 8016100:	4619      	mov	r1, r3
 8016102:	4610      	mov	r0, r2
 8016104:	f000 fcb8 	bl	8016a78 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	2201      	movs	r2, #1
 801610c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8016110:	2300      	movs	r3, #0
}
 8016112:	4618      	mov	r0, r3
 8016114:	3708      	adds	r7, #8
 8016116:	46bd      	mov	sp, r7
 8016118:	bd80      	pop	{r7, pc}

0801611a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801611a:	b480      	push	{r7}
 801611c:	b085      	sub	sp, #20
 801611e:	af00      	add	r7, sp, #0
 8016120:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	681b      	ldr	r3, [r3, #0]
 8016126:	68da      	ldr	r2, [r3, #12]
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	681b      	ldr	r3, [r3, #0]
 801612c:	f042 0201 	orr.w	r2, r2, #1
 8016130:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	681b      	ldr	r3, [r3, #0]
 8016136:	689b      	ldr	r3, [r3, #8]
 8016138:	f003 0307 	and.w	r3, r3, #7
 801613c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	2b06      	cmp	r3, #6
 8016142:	d007      	beq.n	8016154 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	681b      	ldr	r3, [r3, #0]
 8016148:	681a      	ldr	r2, [r3, #0]
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	681b      	ldr	r3, [r3, #0]
 801614e:	f042 0201 	orr.w	r2, r2, #1
 8016152:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8016154:	2300      	movs	r3, #0
}
 8016156:	4618      	mov	r0, r3
 8016158:	3714      	adds	r7, #20
 801615a:	46bd      	mov	sp, r7
 801615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016160:	4770      	bx	lr

08016162 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8016162:	b580      	push	{r7, lr}
 8016164:	b082      	sub	sp, #8
 8016166:	af00      	add	r7, sp, #0
 8016168:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	2b00      	cmp	r3, #0
 801616e:	d101      	bne.n	8016174 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8016170:	2301      	movs	r3, #1
 8016172:	e01d      	b.n	80161b0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801617a:	b2db      	uxtb	r3, r3
 801617c:	2b00      	cmp	r3, #0
 801617e:	d106      	bne.n	801618e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	2200      	movs	r2, #0
 8016184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8016188:	6878      	ldr	r0, [r7, #4]
 801618a:	f000 f815 	bl	80161b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	2202      	movs	r2, #2
 8016192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	681a      	ldr	r2, [r3, #0]
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	3304      	adds	r3, #4
 801619e:	4619      	mov	r1, r3
 80161a0:	4610      	mov	r0, r2
 80161a2:	f000 fc69 	bl	8016a78 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	2201      	movs	r2, #1
 80161aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80161ae:	2300      	movs	r3, #0
}
 80161b0:	4618      	mov	r0, r3
 80161b2:	3708      	adds	r7, #8
 80161b4:	46bd      	mov	sp, r7
 80161b6:	bd80      	pop	{r7, pc}

080161b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80161b8:	b480      	push	{r7}
 80161ba:	b083      	sub	sp, #12
 80161bc:	af00      	add	r7, sp, #0
 80161be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80161c0:	bf00      	nop
 80161c2:	370c      	adds	r7, #12
 80161c4:	46bd      	mov	sp, r7
 80161c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ca:	4770      	bx	lr

080161cc <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80161cc:	b580      	push	{r7, lr}
 80161ce:	b086      	sub	sp, #24
 80161d0:	af00      	add	r7, sp, #0
 80161d2:	60f8      	str	r0, [r7, #12]
 80161d4:	60b9      	str	r1, [r7, #8]
 80161d6:	607a      	str	r2, [r7, #4]
 80161d8:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 80161da:	68fb      	ldr	r3, [r7, #12]
 80161dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80161e0:	b2db      	uxtb	r3, r3
 80161e2:	2b02      	cmp	r3, #2
 80161e4:	d101      	bne.n	80161ea <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 80161e6:	2302      	movs	r3, #2
 80161e8:	e0f3      	b.n	80163d2 <HAL_TIM_PWM_Start_DMA+0x206>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 80161ea:	68fb      	ldr	r3, [r7, #12]
 80161ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80161f0:	b2db      	uxtb	r3, r3
 80161f2:	2b01      	cmp	r3, #1
 80161f4:	d10b      	bne.n	801620e <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d104      	bne.n	8016206 <HAL_TIM_PWM_Start_DMA+0x3a>
 80161fc:	887b      	ldrh	r3, [r7, #2]
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d001      	beq.n	8016206 <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8016202:	2301      	movs	r3, #1
 8016204:	e0e5      	b.n	80163d2 <HAL_TIM_PWM_Start_DMA+0x206>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8016206:	68fb      	ldr	r3, [r7, #12]
 8016208:	2202      	movs	r2, #2
 801620a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 801620e:	68bb      	ldr	r3, [r7, #8]
 8016210:	2b0c      	cmp	r3, #12
 8016212:	f200 80ad 	bhi.w	8016370 <HAL_TIM_PWM_Start_DMA+0x1a4>
 8016216:	a201      	add	r2, pc, #4	; (adr r2, 801621c <HAL_TIM_PWM_Start_DMA+0x50>)
 8016218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801621c:	08016251 	.word	0x08016251
 8016220:	08016371 	.word	0x08016371
 8016224:	08016371 	.word	0x08016371
 8016228:	08016371 	.word	0x08016371
 801622c:	08016299 	.word	0x08016299
 8016230:	08016371 	.word	0x08016371
 8016234:	08016371 	.word	0x08016371
 8016238:	08016371 	.word	0x08016371
 801623c:	080162e1 	.word	0x080162e1
 8016240:	08016371 	.word	0x08016371
 8016244:	08016371 	.word	0x08016371
 8016248:	08016371 	.word	0x08016371
 801624c:	08016329 	.word	0x08016329
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016254:	4a61      	ldr	r2, [pc, #388]	; (80163dc <HAL_TIM_PWM_Start_DMA+0x210>)
 8016256:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8016258:	68fb      	ldr	r3, [r7, #12]
 801625a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801625c:	4a60      	ldr	r2, [pc, #384]	; (80163e0 <HAL_TIM_PWM_Start_DMA+0x214>)
 801625e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8016260:	68fb      	ldr	r3, [r7, #12]
 8016262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016264:	4a5f      	ldr	r2, [pc, #380]	; (80163e4 <HAL_TIM_PWM_Start_DMA+0x218>)
 8016266:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8016268:	68fb      	ldr	r3, [r7, #12]
 801626a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801626c:	6879      	ldr	r1, [r7, #4]
 801626e:	68fb      	ldr	r3, [r7, #12]
 8016270:	681b      	ldr	r3, [r3, #0]
 8016272:	3334      	adds	r3, #52	; 0x34
 8016274:	461a      	mov	r2, r3
 8016276:	887b      	ldrh	r3, [r7, #2]
 8016278:	f7fc f860 	bl	801233c <HAL_DMA_Start_IT>
 801627c:	4603      	mov	r3, r0
 801627e:	2b00      	cmp	r3, #0
 8016280:	d001      	beq.n	8016286 <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 8016282:	2301      	movs	r3, #1
 8016284:	e0a5      	b.n	80163d2 <HAL_TIM_PWM_Start_DMA+0x206>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8016286:	68fb      	ldr	r3, [r7, #12]
 8016288:	681b      	ldr	r3, [r3, #0]
 801628a:	68da      	ldr	r2, [r3, #12]
 801628c:	68fb      	ldr	r3, [r7, #12]
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016294:	60da      	str	r2, [r3, #12]
      break;
 8016296:	e06c      	b.n	8016372 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8016298:	68fb      	ldr	r3, [r7, #12]
 801629a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801629c:	4a4f      	ldr	r2, [pc, #316]	; (80163dc <HAL_TIM_PWM_Start_DMA+0x210>)
 801629e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80162a4:	4a4e      	ldr	r2, [pc, #312]	; (80163e0 <HAL_TIM_PWM_Start_DMA+0x214>)
 80162a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80162a8:	68fb      	ldr	r3, [r7, #12]
 80162aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80162ac:	4a4d      	ldr	r2, [pc, #308]	; (80163e4 <HAL_TIM_PWM_Start_DMA+0x218>)
 80162ae:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 80162b0:	68fb      	ldr	r3, [r7, #12]
 80162b2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80162b4:	6879      	ldr	r1, [r7, #4]
 80162b6:	68fb      	ldr	r3, [r7, #12]
 80162b8:	681b      	ldr	r3, [r3, #0]
 80162ba:	3338      	adds	r3, #56	; 0x38
 80162bc:	461a      	mov	r2, r3
 80162be:	887b      	ldrh	r3, [r7, #2]
 80162c0:	f7fc f83c 	bl	801233c <HAL_DMA_Start_IT>
 80162c4:	4603      	mov	r3, r0
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	d001      	beq.n	80162ce <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 80162ca:	2301      	movs	r3, #1
 80162cc:	e081      	b.n	80163d2 <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80162ce:	68fb      	ldr	r3, [r7, #12]
 80162d0:	681b      	ldr	r3, [r3, #0]
 80162d2:	68da      	ldr	r2, [r3, #12]
 80162d4:	68fb      	ldr	r3, [r7, #12]
 80162d6:	681b      	ldr	r3, [r3, #0]
 80162d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80162dc:	60da      	str	r2, [r3, #12]
      break;
 80162de:	e048      	b.n	8016372 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80162e0:	68fb      	ldr	r3, [r7, #12]
 80162e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80162e4:	4a3d      	ldr	r2, [pc, #244]	; (80163dc <HAL_TIM_PWM_Start_DMA+0x210>)
 80162e6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80162e8:	68fb      	ldr	r3, [r7, #12]
 80162ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80162ec:	4a3c      	ldr	r2, [pc, #240]	; (80163e0 <HAL_TIM_PWM_Start_DMA+0x214>)
 80162ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80162f0:	68fb      	ldr	r3, [r7, #12]
 80162f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80162f4:	4a3b      	ldr	r2, [pc, #236]	; (80163e4 <HAL_TIM_PWM_Start_DMA+0x218>)
 80162f6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 80162f8:	68fb      	ldr	r3, [r7, #12]
 80162fa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80162fc:	6879      	ldr	r1, [r7, #4]
 80162fe:	68fb      	ldr	r3, [r7, #12]
 8016300:	681b      	ldr	r3, [r3, #0]
 8016302:	333c      	adds	r3, #60	; 0x3c
 8016304:	461a      	mov	r2, r3
 8016306:	887b      	ldrh	r3, [r7, #2]
 8016308:	f7fc f818 	bl	801233c <HAL_DMA_Start_IT>
 801630c:	4603      	mov	r3, r0
 801630e:	2b00      	cmp	r3, #0
 8016310:	d001      	beq.n	8016316 <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 8016312:	2301      	movs	r3, #1
 8016314:	e05d      	b.n	80163d2 <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8016316:	68fb      	ldr	r3, [r7, #12]
 8016318:	681b      	ldr	r3, [r3, #0]
 801631a:	68da      	ldr	r2, [r3, #12]
 801631c:	68fb      	ldr	r3, [r7, #12]
 801631e:	681b      	ldr	r3, [r3, #0]
 8016320:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8016324:	60da      	str	r2, [r3, #12]
      break;
 8016326:	e024      	b.n	8016372 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8016328:	68fb      	ldr	r3, [r7, #12]
 801632a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801632c:	4a2b      	ldr	r2, [pc, #172]	; (80163dc <HAL_TIM_PWM_Start_DMA+0x210>)
 801632e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8016330:	68fb      	ldr	r3, [r7, #12]
 8016332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016334:	4a2a      	ldr	r2, [pc, #168]	; (80163e0 <HAL_TIM_PWM_Start_DMA+0x214>)
 8016336:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801633c:	4a29      	ldr	r2, [pc, #164]	; (80163e4 <HAL_TIM_PWM_Start_DMA+0x218>)
 801633e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8016340:	68fb      	ldr	r3, [r7, #12]
 8016342:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8016344:	6879      	ldr	r1, [r7, #4]
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	681b      	ldr	r3, [r3, #0]
 801634a:	3340      	adds	r3, #64	; 0x40
 801634c:	461a      	mov	r2, r3
 801634e:	887b      	ldrh	r3, [r7, #2]
 8016350:	f7fb fff4 	bl	801233c <HAL_DMA_Start_IT>
 8016354:	4603      	mov	r3, r0
 8016356:	2b00      	cmp	r3, #0
 8016358:	d001      	beq.n	801635e <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 801635a:	2301      	movs	r3, #1
 801635c:	e039      	b.n	80163d2 <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 801635e:	68fb      	ldr	r3, [r7, #12]
 8016360:	681b      	ldr	r3, [r3, #0]
 8016362:	68da      	ldr	r2, [r3, #12]
 8016364:	68fb      	ldr	r3, [r7, #12]
 8016366:	681b      	ldr	r3, [r3, #0]
 8016368:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801636c:	60da      	str	r2, [r3, #12]
      break;
 801636e:	e000      	b.n	8016372 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 8016370:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8016372:	68fb      	ldr	r3, [r7, #12]
 8016374:	681b      	ldr	r3, [r3, #0]
 8016376:	2201      	movs	r2, #1
 8016378:	68b9      	ldr	r1, [r7, #8]
 801637a:	4618      	mov	r0, r3
 801637c:	f000 fe66 	bl	801704c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8016380:	68fb      	ldr	r3, [r7, #12]
 8016382:	681b      	ldr	r3, [r3, #0]
 8016384:	4a18      	ldr	r2, [pc, #96]	; (80163e8 <HAL_TIM_PWM_Start_DMA+0x21c>)
 8016386:	4293      	cmp	r3, r2
 8016388:	d004      	beq.n	8016394 <HAL_TIM_PWM_Start_DMA+0x1c8>
 801638a:	68fb      	ldr	r3, [r7, #12]
 801638c:	681b      	ldr	r3, [r3, #0]
 801638e:	4a17      	ldr	r2, [pc, #92]	; (80163ec <HAL_TIM_PWM_Start_DMA+0x220>)
 8016390:	4293      	cmp	r3, r2
 8016392:	d101      	bne.n	8016398 <HAL_TIM_PWM_Start_DMA+0x1cc>
 8016394:	2301      	movs	r3, #1
 8016396:	e000      	b.n	801639a <HAL_TIM_PWM_Start_DMA+0x1ce>
 8016398:	2300      	movs	r3, #0
 801639a:	2b00      	cmp	r3, #0
 801639c:	d007      	beq.n	80163ae <HAL_TIM_PWM_Start_DMA+0x1e2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801639e:	68fb      	ldr	r3, [r7, #12]
 80163a0:	681b      	ldr	r3, [r3, #0]
 80163a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80163a4:	68fb      	ldr	r3, [r7, #12]
 80163a6:	681b      	ldr	r3, [r3, #0]
 80163a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80163ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80163ae:	68fb      	ldr	r3, [r7, #12]
 80163b0:	681b      	ldr	r3, [r3, #0]
 80163b2:	689b      	ldr	r3, [r3, #8]
 80163b4:	f003 0307 	and.w	r3, r3, #7
 80163b8:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80163ba:	697b      	ldr	r3, [r7, #20]
 80163bc:	2b06      	cmp	r3, #6
 80163be:	d007      	beq.n	80163d0 <HAL_TIM_PWM_Start_DMA+0x204>
  {
    __HAL_TIM_ENABLE(htim);
 80163c0:	68fb      	ldr	r3, [r7, #12]
 80163c2:	681b      	ldr	r3, [r3, #0]
 80163c4:	681a      	ldr	r2, [r3, #0]
 80163c6:	68fb      	ldr	r3, [r7, #12]
 80163c8:	681b      	ldr	r3, [r3, #0]
 80163ca:	f042 0201 	orr.w	r2, r2, #1
 80163ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80163d0:	2300      	movs	r3, #0
}
 80163d2:	4618      	mov	r0, r3
 80163d4:	3718      	adds	r7, #24
 80163d6:	46bd      	mov	sp, r7
 80163d8:	bd80      	pop	{r7, pc}
 80163da:	bf00      	nop
 80163dc:	08016997 	.word	0x08016997
 80163e0:	08016a07 	.word	0x08016a07
 80163e4:	08016973 	.word	0x08016973
 80163e8:	40010000 	.word	0x40010000
 80163ec:	40010400 	.word	0x40010400

080163f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80163f0:	b580      	push	{r7, lr}
 80163f2:	b082      	sub	sp, #8
 80163f4:	af00      	add	r7, sp, #0
 80163f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	681b      	ldr	r3, [r3, #0]
 80163fc:	691b      	ldr	r3, [r3, #16]
 80163fe:	f003 0302 	and.w	r3, r3, #2
 8016402:	2b02      	cmp	r3, #2
 8016404:	d122      	bne.n	801644c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	681b      	ldr	r3, [r3, #0]
 801640a:	68db      	ldr	r3, [r3, #12]
 801640c:	f003 0302 	and.w	r3, r3, #2
 8016410:	2b02      	cmp	r3, #2
 8016412:	d11b      	bne.n	801644c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	681b      	ldr	r3, [r3, #0]
 8016418:	f06f 0202 	mvn.w	r2, #2
 801641c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	2201      	movs	r2, #1
 8016422:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	699b      	ldr	r3, [r3, #24]
 801642a:	f003 0303 	and.w	r3, r3, #3
 801642e:	2b00      	cmp	r3, #0
 8016430:	d003      	beq.n	801643a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8016432:	6878      	ldr	r0, [r7, #4]
 8016434:	f000 fa6b 	bl	801690e <HAL_TIM_IC_CaptureCallback>
 8016438:	e005      	b.n	8016446 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801643a:	6878      	ldr	r0, [r7, #4]
 801643c:	f000 fa5d 	bl	80168fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016440:	6878      	ldr	r0, [r7, #4]
 8016442:	f000 fa6e 	bl	8016922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	2200      	movs	r2, #0
 801644a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	681b      	ldr	r3, [r3, #0]
 8016450:	691b      	ldr	r3, [r3, #16]
 8016452:	f003 0304 	and.w	r3, r3, #4
 8016456:	2b04      	cmp	r3, #4
 8016458:	d122      	bne.n	80164a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	68db      	ldr	r3, [r3, #12]
 8016460:	f003 0304 	and.w	r3, r3, #4
 8016464:	2b04      	cmp	r3, #4
 8016466:	d11b      	bne.n	80164a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	681b      	ldr	r3, [r3, #0]
 801646c:	f06f 0204 	mvn.w	r2, #4
 8016470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	2202      	movs	r2, #2
 8016476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	681b      	ldr	r3, [r3, #0]
 801647c:	699b      	ldr	r3, [r3, #24]
 801647e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8016482:	2b00      	cmp	r3, #0
 8016484:	d003      	beq.n	801648e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016486:	6878      	ldr	r0, [r7, #4]
 8016488:	f000 fa41 	bl	801690e <HAL_TIM_IC_CaptureCallback>
 801648c:	e005      	b.n	801649a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801648e:	6878      	ldr	r0, [r7, #4]
 8016490:	f000 fa33 	bl	80168fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016494:	6878      	ldr	r0, [r7, #4]
 8016496:	f000 fa44 	bl	8016922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	2200      	movs	r2, #0
 801649e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	681b      	ldr	r3, [r3, #0]
 80164a4:	691b      	ldr	r3, [r3, #16]
 80164a6:	f003 0308 	and.w	r3, r3, #8
 80164aa:	2b08      	cmp	r3, #8
 80164ac:	d122      	bne.n	80164f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	681b      	ldr	r3, [r3, #0]
 80164b2:	68db      	ldr	r3, [r3, #12]
 80164b4:	f003 0308 	and.w	r3, r3, #8
 80164b8:	2b08      	cmp	r3, #8
 80164ba:	d11b      	bne.n	80164f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	681b      	ldr	r3, [r3, #0]
 80164c0:	f06f 0208 	mvn.w	r2, #8
 80164c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	2204      	movs	r2, #4
 80164ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	681b      	ldr	r3, [r3, #0]
 80164d0:	69db      	ldr	r3, [r3, #28]
 80164d2:	f003 0303 	and.w	r3, r3, #3
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d003      	beq.n	80164e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80164da:	6878      	ldr	r0, [r7, #4]
 80164dc:	f000 fa17 	bl	801690e <HAL_TIM_IC_CaptureCallback>
 80164e0:	e005      	b.n	80164ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80164e2:	6878      	ldr	r0, [r7, #4]
 80164e4:	f000 fa09 	bl	80168fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80164e8:	6878      	ldr	r0, [r7, #4]
 80164ea:	f000 fa1a 	bl	8016922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	2200      	movs	r2, #0
 80164f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	681b      	ldr	r3, [r3, #0]
 80164f8:	691b      	ldr	r3, [r3, #16]
 80164fa:	f003 0310 	and.w	r3, r3, #16
 80164fe:	2b10      	cmp	r3, #16
 8016500:	d122      	bne.n	8016548 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	681b      	ldr	r3, [r3, #0]
 8016506:	68db      	ldr	r3, [r3, #12]
 8016508:	f003 0310 	and.w	r3, r3, #16
 801650c:	2b10      	cmp	r3, #16
 801650e:	d11b      	bne.n	8016548 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	681b      	ldr	r3, [r3, #0]
 8016514:	f06f 0210 	mvn.w	r2, #16
 8016518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	2208      	movs	r2, #8
 801651e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	681b      	ldr	r3, [r3, #0]
 8016524:	69db      	ldr	r3, [r3, #28]
 8016526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801652a:	2b00      	cmp	r3, #0
 801652c:	d003      	beq.n	8016536 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801652e:	6878      	ldr	r0, [r7, #4]
 8016530:	f000 f9ed 	bl	801690e <HAL_TIM_IC_CaptureCallback>
 8016534:	e005      	b.n	8016542 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016536:	6878      	ldr	r0, [r7, #4]
 8016538:	f000 f9df 	bl	80168fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801653c:	6878      	ldr	r0, [r7, #4]
 801653e:	f000 f9f0 	bl	8016922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	2200      	movs	r2, #0
 8016546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	681b      	ldr	r3, [r3, #0]
 801654c:	691b      	ldr	r3, [r3, #16]
 801654e:	f003 0301 	and.w	r3, r3, #1
 8016552:	2b01      	cmp	r3, #1
 8016554:	d10e      	bne.n	8016574 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	681b      	ldr	r3, [r3, #0]
 801655a:	68db      	ldr	r3, [r3, #12]
 801655c:	f003 0301 	and.w	r3, r3, #1
 8016560:	2b01      	cmp	r3, #1
 8016562:	d107      	bne.n	8016574 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	681b      	ldr	r3, [r3, #0]
 8016568:	f06f 0201 	mvn.w	r2, #1
 801656c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801656e:	6878      	ldr	r0, [r7, #4]
 8016570:	f7f5 f830 	bl	800b5d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	691b      	ldr	r3, [r3, #16]
 801657a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801657e:	2b80      	cmp	r3, #128	; 0x80
 8016580:	d10e      	bne.n	80165a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	681b      	ldr	r3, [r3, #0]
 8016586:	68db      	ldr	r3, [r3, #12]
 8016588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801658c:	2b80      	cmp	r3, #128	; 0x80
 801658e:	d107      	bne.n	80165a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	681b      	ldr	r3, [r3, #0]
 8016594:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8016598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801659a:	6878      	ldr	r0, [r7, #4]
 801659c:	f000 fe02 	bl	80171a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	681b      	ldr	r3, [r3, #0]
 80165a4:	691b      	ldr	r3, [r3, #16]
 80165a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80165aa:	2b40      	cmp	r3, #64	; 0x40
 80165ac:	d10e      	bne.n	80165cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	681b      	ldr	r3, [r3, #0]
 80165b2:	68db      	ldr	r3, [r3, #12]
 80165b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80165b8:	2b40      	cmp	r3, #64	; 0x40
 80165ba:	d107      	bne.n	80165cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	681b      	ldr	r3, [r3, #0]
 80165c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80165c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80165c6:	6878      	ldr	r0, [r7, #4]
 80165c8:	f000 f9bf 	bl	801694a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	681b      	ldr	r3, [r3, #0]
 80165d0:	691b      	ldr	r3, [r3, #16]
 80165d2:	f003 0320 	and.w	r3, r3, #32
 80165d6:	2b20      	cmp	r3, #32
 80165d8:	d10e      	bne.n	80165f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	681b      	ldr	r3, [r3, #0]
 80165de:	68db      	ldr	r3, [r3, #12]
 80165e0:	f003 0320 	and.w	r3, r3, #32
 80165e4:	2b20      	cmp	r3, #32
 80165e6:	d107      	bne.n	80165f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	681b      	ldr	r3, [r3, #0]
 80165ec:	f06f 0220 	mvn.w	r2, #32
 80165f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80165f2:	6878      	ldr	r0, [r7, #4]
 80165f4:	f000 fdcc 	bl	8017190 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80165f8:	bf00      	nop
 80165fa:	3708      	adds	r7, #8
 80165fc:	46bd      	mov	sp, r7
 80165fe:	bd80      	pop	{r7, pc}

08016600 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8016600:	b580      	push	{r7, lr}
 8016602:	b084      	sub	sp, #16
 8016604:	af00      	add	r7, sp, #0
 8016606:	60f8      	str	r0, [r7, #12]
 8016608:	60b9      	str	r1, [r7, #8]
 801660a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801660c:	68fb      	ldr	r3, [r7, #12]
 801660e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016612:	2b01      	cmp	r3, #1
 8016614:	d101      	bne.n	801661a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8016616:	2302      	movs	r3, #2
 8016618:	e0b4      	b.n	8016784 <HAL_TIM_PWM_ConfigChannel+0x184>
 801661a:	68fb      	ldr	r3, [r7, #12]
 801661c:	2201      	movs	r2, #1
 801661e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8016622:	68fb      	ldr	r3, [r7, #12]
 8016624:	2202      	movs	r2, #2
 8016626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	2b0c      	cmp	r3, #12
 801662e:	f200 809f 	bhi.w	8016770 <HAL_TIM_PWM_ConfigChannel+0x170>
 8016632:	a201      	add	r2, pc, #4	; (adr r2, 8016638 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8016634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016638:	0801666d 	.word	0x0801666d
 801663c:	08016771 	.word	0x08016771
 8016640:	08016771 	.word	0x08016771
 8016644:	08016771 	.word	0x08016771
 8016648:	080166ad 	.word	0x080166ad
 801664c:	08016771 	.word	0x08016771
 8016650:	08016771 	.word	0x08016771
 8016654:	08016771 	.word	0x08016771
 8016658:	080166ef 	.word	0x080166ef
 801665c:	08016771 	.word	0x08016771
 8016660:	08016771 	.word	0x08016771
 8016664:	08016771 	.word	0x08016771
 8016668:	0801672f 	.word	0x0801672f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801666c:	68fb      	ldr	r3, [r7, #12]
 801666e:	681b      	ldr	r3, [r3, #0]
 8016670:	68b9      	ldr	r1, [r7, #8]
 8016672:	4618      	mov	r0, r3
 8016674:	f000 faa0 	bl	8016bb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8016678:	68fb      	ldr	r3, [r7, #12]
 801667a:	681b      	ldr	r3, [r3, #0]
 801667c:	699a      	ldr	r2, [r3, #24]
 801667e:	68fb      	ldr	r3, [r7, #12]
 8016680:	681b      	ldr	r3, [r3, #0]
 8016682:	f042 0208 	orr.w	r2, r2, #8
 8016686:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8016688:	68fb      	ldr	r3, [r7, #12]
 801668a:	681b      	ldr	r3, [r3, #0]
 801668c:	699a      	ldr	r2, [r3, #24]
 801668e:	68fb      	ldr	r3, [r7, #12]
 8016690:	681b      	ldr	r3, [r3, #0]
 8016692:	f022 0204 	bic.w	r2, r2, #4
 8016696:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8016698:	68fb      	ldr	r3, [r7, #12]
 801669a:	681b      	ldr	r3, [r3, #0]
 801669c:	6999      	ldr	r1, [r3, #24]
 801669e:	68bb      	ldr	r3, [r7, #8]
 80166a0:	691a      	ldr	r2, [r3, #16]
 80166a2:	68fb      	ldr	r3, [r7, #12]
 80166a4:	681b      	ldr	r3, [r3, #0]
 80166a6:	430a      	orrs	r2, r1
 80166a8:	619a      	str	r2, [r3, #24]
      break;
 80166aa:	e062      	b.n	8016772 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80166ac:	68fb      	ldr	r3, [r7, #12]
 80166ae:	681b      	ldr	r3, [r3, #0]
 80166b0:	68b9      	ldr	r1, [r7, #8]
 80166b2:	4618      	mov	r0, r3
 80166b4:	f000 faf0 	bl	8016c98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80166b8:	68fb      	ldr	r3, [r7, #12]
 80166ba:	681b      	ldr	r3, [r3, #0]
 80166bc:	699a      	ldr	r2, [r3, #24]
 80166be:	68fb      	ldr	r3, [r7, #12]
 80166c0:	681b      	ldr	r3, [r3, #0]
 80166c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80166c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80166c8:	68fb      	ldr	r3, [r7, #12]
 80166ca:	681b      	ldr	r3, [r3, #0]
 80166cc:	699a      	ldr	r2, [r3, #24]
 80166ce:	68fb      	ldr	r3, [r7, #12]
 80166d0:	681b      	ldr	r3, [r3, #0]
 80166d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80166d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80166d8:	68fb      	ldr	r3, [r7, #12]
 80166da:	681b      	ldr	r3, [r3, #0]
 80166dc:	6999      	ldr	r1, [r3, #24]
 80166de:	68bb      	ldr	r3, [r7, #8]
 80166e0:	691b      	ldr	r3, [r3, #16]
 80166e2:	021a      	lsls	r2, r3, #8
 80166e4:	68fb      	ldr	r3, [r7, #12]
 80166e6:	681b      	ldr	r3, [r3, #0]
 80166e8:	430a      	orrs	r2, r1
 80166ea:	619a      	str	r2, [r3, #24]
      break;
 80166ec:	e041      	b.n	8016772 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80166ee:	68fb      	ldr	r3, [r7, #12]
 80166f0:	681b      	ldr	r3, [r3, #0]
 80166f2:	68b9      	ldr	r1, [r7, #8]
 80166f4:	4618      	mov	r0, r3
 80166f6:	f000 fb45 	bl	8016d84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80166fa:	68fb      	ldr	r3, [r7, #12]
 80166fc:	681b      	ldr	r3, [r3, #0]
 80166fe:	69da      	ldr	r2, [r3, #28]
 8016700:	68fb      	ldr	r3, [r7, #12]
 8016702:	681b      	ldr	r3, [r3, #0]
 8016704:	f042 0208 	orr.w	r2, r2, #8
 8016708:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801670a:	68fb      	ldr	r3, [r7, #12]
 801670c:	681b      	ldr	r3, [r3, #0]
 801670e:	69da      	ldr	r2, [r3, #28]
 8016710:	68fb      	ldr	r3, [r7, #12]
 8016712:	681b      	ldr	r3, [r3, #0]
 8016714:	f022 0204 	bic.w	r2, r2, #4
 8016718:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801671a:	68fb      	ldr	r3, [r7, #12]
 801671c:	681b      	ldr	r3, [r3, #0]
 801671e:	69d9      	ldr	r1, [r3, #28]
 8016720:	68bb      	ldr	r3, [r7, #8]
 8016722:	691a      	ldr	r2, [r3, #16]
 8016724:	68fb      	ldr	r3, [r7, #12]
 8016726:	681b      	ldr	r3, [r3, #0]
 8016728:	430a      	orrs	r2, r1
 801672a:	61da      	str	r2, [r3, #28]
      break;
 801672c:	e021      	b.n	8016772 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801672e:	68fb      	ldr	r3, [r7, #12]
 8016730:	681b      	ldr	r3, [r3, #0]
 8016732:	68b9      	ldr	r1, [r7, #8]
 8016734:	4618      	mov	r0, r3
 8016736:	f000 fb99 	bl	8016e6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801673a:	68fb      	ldr	r3, [r7, #12]
 801673c:	681b      	ldr	r3, [r3, #0]
 801673e:	69da      	ldr	r2, [r3, #28]
 8016740:	68fb      	ldr	r3, [r7, #12]
 8016742:	681b      	ldr	r3, [r3, #0]
 8016744:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8016748:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801674a:	68fb      	ldr	r3, [r7, #12]
 801674c:	681b      	ldr	r3, [r3, #0]
 801674e:	69da      	ldr	r2, [r3, #28]
 8016750:	68fb      	ldr	r3, [r7, #12]
 8016752:	681b      	ldr	r3, [r3, #0]
 8016754:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8016758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801675a:	68fb      	ldr	r3, [r7, #12]
 801675c:	681b      	ldr	r3, [r3, #0]
 801675e:	69d9      	ldr	r1, [r3, #28]
 8016760:	68bb      	ldr	r3, [r7, #8]
 8016762:	691b      	ldr	r3, [r3, #16]
 8016764:	021a      	lsls	r2, r3, #8
 8016766:	68fb      	ldr	r3, [r7, #12]
 8016768:	681b      	ldr	r3, [r3, #0]
 801676a:	430a      	orrs	r2, r1
 801676c:	61da      	str	r2, [r3, #28]
      break;
 801676e:	e000      	b.n	8016772 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8016770:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8016772:	68fb      	ldr	r3, [r7, #12]
 8016774:	2201      	movs	r2, #1
 8016776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801677a:	68fb      	ldr	r3, [r7, #12]
 801677c:	2200      	movs	r2, #0
 801677e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8016782:	2300      	movs	r3, #0
}
 8016784:	4618      	mov	r0, r3
 8016786:	3710      	adds	r7, #16
 8016788:	46bd      	mov	sp, r7
 801678a:	bd80      	pop	{r7, pc}

0801678c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801678c:	b580      	push	{r7, lr}
 801678e:	b084      	sub	sp, #16
 8016790:	af00      	add	r7, sp, #0
 8016792:	6078      	str	r0, [r7, #4]
 8016794:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8016796:	687b      	ldr	r3, [r7, #4]
 8016798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801679c:	2b01      	cmp	r3, #1
 801679e:	d101      	bne.n	80167a4 <HAL_TIM_ConfigClockSource+0x18>
 80167a0:	2302      	movs	r3, #2
 80167a2:	e0a6      	b.n	80168f2 <HAL_TIM_ConfigClockSource+0x166>
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	2201      	movs	r2, #1
 80167a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	2202      	movs	r2, #2
 80167b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	681b      	ldr	r3, [r3, #0]
 80167b8:	689b      	ldr	r3, [r3, #8]
 80167ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80167bc:	68fb      	ldr	r3, [r7, #12]
 80167be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80167c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80167c4:	68fb      	ldr	r3, [r7, #12]
 80167c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80167ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	681b      	ldr	r3, [r3, #0]
 80167d0:	68fa      	ldr	r2, [r7, #12]
 80167d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80167d4:	683b      	ldr	r3, [r7, #0]
 80167d6:	681b      	ldr	r3, [r3, #0]
 80167d8:	2b40      	cmp	r3, #64	; 0x40
 80167da:	d067      	beq.n	80168ac <HAL_TIM_ConfigClockSource+0x120>
 80167dc:	2b40      	cmp	r3, #64	; 0x40
 80167de:	d80b      	bhi.n	80167f8 <HAL_TIM_ConfigClockSource+0x6c>
 80167e0:	2b10      	cmp	r3, #16
 80167e2:	d073      	beq.n	80168cc <HAL_TIM_ConfigClockSource+0x140>
 80167e4:	2b10      	cmp	r3, #16
 80167e6:	d802      	bhi.n	80167ee <HAL_TIM_ConfigClockSource+0x62>
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	d06f      	beq.n	80168cc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80167ec:	e078      	b.n	80168e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80167ee:	2b20      	cmp	r3, #32
 80167f0:	d06c      	beq.n	80168cc <HAL_TIM_ConfigClockSource+0x140>
 80167f2:	2b30      	cmp	r3, #48	; 0x30
 80167f4:	d06a      	beq.n	80168cc <HAL_TIM_ConfigClockSource+0x140>
      break;
 80167f6:	e073      	b.n	80168e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80167f8:	2b70      	cmp	r3, #112	; 0x70
 80167fa:	d00d      	beq.n	8016818 <HAL_TIM_ConfigClockSource+0x8c>
 80167fc:	2b70      	cmp	r3, #112	; 0x70
 80167fe:	d804      	bhi.n	801680a <HAL_TIM_ConfigClockSource+0x7e>
 8016800:	2b50      	cmp	r3, #80	; 0x50
 8016802:	d033      	beq.n	801686c <HAL_TIM_ConfigClockSource+0xe0>
 8016804:	2b60      	cmp	r3, #96	; 0x60
 8016806:	d041      	beq.n	801688c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8016808:	e06a      	b.n	80168e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 801680a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801680e:	d066      	beq.n	80168de <HAL_TIM_ConfigClockSource+0x152>
 8016810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8016814:	d017      	beq.n	8016846 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8016816:	e063      	b.n	80168e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	6818      	ldr	r0, [r3, #0]
 801681c:	683b      	ldr	r3, [r7, #0]
 801681e:	6899      	ldr	r1, [r3, #8]
 8016820:	683b      	ldr	r3, [r7, #0]
 8016822:	685a      	ldr	r2, [r3, #4]
 8016824:	683b      	ldr	r3, [r7, #0]
 8016826:	68db      	ldr	r3, [r3, #12]
 8016828:	f000 fbf0 	bl	801700c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	681b      	ldr	r3, [r3, #0]
 8016830:	689b      	ldr	r3, [r3, #8]
 8016832:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8016834:	68fb      	ldr	r3, [r7, #12]
 8016836:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801683a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	681b      	ldr	r3, [r3, #0]
 8016840:	68fa      	ldr	r2, [r7, #12]
 8016842:	609a      	str	r2, [r3, #8]
      break;
 8016844:	e04c      	b.n	80168e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	6818      	ldr	r0, [r3, #0]
 801684a:	683b      	ldr	r3, [r7, #0]
 801684c:	6899      	ldr	r1, [r3, #8]
 801684e:	683b      	ldr	r3, [r7, #0]
 8016850:	685a      	ldr	r2, [r3, #4]
 8016852:	683b      	ldr	r3, [r7, #0]
 8016854:	68db      	ldr	r3, [r3, #12]
 8016856:	f000 fbd9 	bl	801700c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	681b      	ldr	r3, [r3, #0]
 801685e:	689a      	ldr	r2, [r3, #8]
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	681b      	ldr	r3, [r3, #0]
 8016864:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8016868:	609a      	str	r2, [r3, #8]
      break;
 801686a:	e039      	b.n	80168e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	6818      	ldr	r0, [r3, #0]
 8016870:	683b      	ldr	r3, [r7, #0]
 8016872:	6859      	ldr	r1, [r3, #4]
 8016874:	683b      	ldr	r3, [r7, #0]
 8016876:	68db      	ldr	r3, [r3, #12]
 8016878:	461a      	mov	r2, r3
 801687a:	f000 fb4d 	bl	8016f18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	681b      	ldr	r3, [r3, #0]
 8016882:	2150      	movs	r1, #80	; 0x50
 8016884:	4618      	mov	r0, r3
 8016886:	f000 fba6 	bl	8016fd6 <TIM_ITRx_SetConfig>
      break;
 801688a:	e029      	b.n	80168e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	6818      	ldr	r0, [r3, #0]
 8016890:	683b      	ldr	r3, [r7, #0]
 8016892:	6859      	ldr	r1, [r3, #4]
 8016894:	683b      	ldr	r3, [r7, #0]
 8016896:	68db      	ldr	r3, [r3, #12]
 8016898:	461a      	mov	r2, r3
 801689a:	f000 fb6c 	bl	8016f76 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	681b      	ldr	r3, [r3, #0]
 80168a2:	2160      	movs	r1, #96	; 0x60
 80168a4:	4618      	mov	r0, r3
 80168a6:	f000 fb96 	bl	8016fd6 <TIM_ITRx_SetConfig>
      break;
 80168aa:	e019      	b.n	80168e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	6818      	ldr	r0, [r3, #0]
 80168b0:	683b      	ldr	r3, [r7, #0]
 80168b2:	6859      	ldr	r1, [r3, #4]
 80168b4:	683b      	ldr	r3, [r7, #0]
 80168b6:	68db      	ldr	r3, [r3, #12]
 80168b8:	461a      	mov	r2, r3
 80168ba:	f000 fb2d 	bl	8016f18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	681b      	ldr	r3, [r3, #0]
 80168c2:	2140      	movs	r1, #64	; 0x40
 80168c4:	4618      	mov	r0, r3
 80168c6:	f000 fb86 	bl	8016fd6 <TIM_ITRx_SetConfig>
      break;
 80168ca:	e009      	b.n	80168e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	681a      	ldr	r2, [r3, #0]
 80168d0:	683b      	ldr	r3, [r7, #0]
 80168d2:	681b      	ldr	r3, [r3, #0]
 80168d4:	4619      	mov	r1, r3
 80168d6:	4610      	mov	r0, r2
 80168d8:	f000 fb7d 	bl	8016fd6 <TIM_ITRx_SetConfig>
      break;
 80168dc:	e000      	b.n	80168e0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80168de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	2201      	movs	r2, #1
 80168e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	2200      	movs	r2, #0
 80168ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80168f0:	2300      	movs	r3, #0
}
 80168f2:	4618      	mov	r0, r3
 80168f4:	3710      	adds	r7, #16
 80168f6:	46bd      	mov	sp, r7
 80168f8:	bd80      	pop	{r7, pc}

080168fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80168fa:	b480      	push	{r7}
 80168fc:	b083      	sub	sp, #12
 80168fe:	af00      	add	r7, sp, #0
 8016900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8016902:	bf00      	nop
 8016904:	370c      	adds	r7, #12
 8016906:	46bd      	mov	sp, r7
 8016908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801690c:	4770      	bx	lr

0801690e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801690e:	b480      	push	{r7}
 8016910:	b083      	sub	sp, #12
 8016912:	af00      	add	r7, sp, #0
 8016914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8016916:	bf00      	nop
 8016918:	370c      	adds	r7, #12
 801691a:	46bd      	mov	sp, r7
 801691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016920:	4770      	bx	lr

08016922 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8016922:	b480      	push	{r7}
 8016924:	b083      	sub	sp, #12
 8016926:	af00      	add	r7, sp, #0
 8016928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801692a:	bf00      	nop
 801692c:	370c      	adds	r7, #12
 801692e:	46bd      	mov	sp, r7
 8016930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016934:	4770      	bx	lr

08016936 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8016936:	b480      	push	{r7}
 8016938:	b083      	sub	sp, #12
 801693a:	af00      	add	r7, sp, #0
 801693c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 801693e:	bf00      	nop
 8016940:	370c      	adds	r7, #12
 8016942:	46bd      	mov	sp, r7
 8016944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016948:	4770      	bx	lr

0801694a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801694a:	b480      	push	{r7}
 801694c:	b083      	sub	sp, #12
 801694e:	af00      	add	r7, sp, #0
 8016950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8016952:	bf00      	nop
 8016954:	370c      	adds	r7, #12
 8016956:	46bd      	mov	sp, r7
 8016958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801695c:	4770      	bx	lr

0801695e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 801695e:	b480      	push	{r7}
 8016960:	b083      	sub	sp, #12
 8016962:	af00      	add	r7, sp, #0
 8016964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8016966:	bf00      	nop
 8016968:	370c      	adds	r7, #12
 801696a:	46bd      	mov	sp, r7
 801696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016970:	4770      	bx	lr

08016972 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8016972:	b580      	push	{r7, lr}
 8016974:	b084      	sub	sp, #16
 8016976:	af00      	add	r7, sp, #0
 8016978:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801697e:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8016980:	68fb      	ldr	r3, [r7, #12]
 8016982:	2201      	movs	r2, #1
 8016984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8016988:	68f8      	ldr	r0, [r7, #12]
 801698a:	f7ff ffe8 	bl	801695e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 801698e:	bf00      	nop
 8016990:	3710      	adds	r7, #16
 8016992:	46bd      	mov	sp, r7
 8016994:	bd80      	pop	{r7, pc}

08016996 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8016996:	b580      	push	{r7, lr}
 8016998:	b084      	sub	sp, #16
 801699a:	af00      	add	r7, sp, #0
 801699c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80169a2:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 80169a4:	68fb      	ldr	r3, [r7, #12]
 80169a6:	2201      	movs	r2, #1
 80169a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80169ac:	68fb      	ldr	r3, [r7, #12]
 80169ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80169b0:	687a      	ldr	r2, [r7, #4]
 80169b2:	429a      	cmp	r2, r3
 80169b4:	d103      	bne.n	80169be <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80169b6:	68fb      	ldr	r3, [r7, #12]
 80169b8:	2201      	movs	r2, #1
 80169ba:	771a      	strb	r2, [r3, #28]
 80169bc:	e019      	b.n	80169f2 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80169be:	68fb      	ldr	r3, [r7, #12]
 80169c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80169c2:	687a      	ldr	r2, [r7, #4]
 80169c4:	429a      	cmp	r2, r3
 80169c6:	d103      	bne.n	80169d0 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80169c8:	68fb      	ldr	r3, [r7, #12]
 80169ca:	2202      	movs	r2, #2
 80169cc:	771a      	strb	r2, [r3, #28]
 80169ce:	e010      	b.n	80169f2 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80169d0:	68fb      	ldr	r3, [r7, #12]
 80169d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169d4:	687a      	ldr	r2, [r7, #4]
 80169d6:	429a      	cmp	r2, r3
 80169d8:	d103      	bne.n	80169e2 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80169da:	68fb      	ldr	r3, [r7, #12]
 80169dc:	2204      	movs	r2, #4
 80169de:	771a      	strb	r2, [r3, #28]
 80169e0:	e007      	b.n	80169f2 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80169e2:	68fb      	ldr	r3, [r7, #12]
 80169e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80169e6:	687a      	ldr	r2, [r7, #4]
 80169e8:	429a      	cmp	r2, r3
 80169ea:	d102      	bne.n	80169f2 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80169ec:	68fb      	ldr	r3, [r7, #12]
 80169ee:	2208      	movs	r2, #8
 80169f0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80169f2:	68f8      	ldr	r0, [r7, #12]
 80169f4:	f7ff ff95 	bl	8016922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80169f8:	68fb      	ldr	r3, [r7, #12]
 80169fa:	2200      	movs	r2, #0
 80169fc:	771a      	strb	r2, [r3, #28]
}
 80169fe:	bf00      	nop
 8016a00:	3710      	adds	r7, #16
 8016a02:	46bd      	mov	sp, r7
 8016a04:	bd80      	pop	{r7, pc}

08016a06 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8016a06:	b580      	push	{r7, lr}
 8016a08:	b084      	sub	sp, #16
 8016a0a:	af00      	add	r7, sp, #0
 8016a0c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016a12:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8016a14:	68fb      	ldr	r3, [r7, #12]
 8016a16:	2201      	movs	r2, #1
 8016a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8016a1c:	68fb      	ldr	r3, [r7, #12]
 8016a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a20:	687a      	ldr	r2, [r7, #4]
 8016a22:	429a      	cmp	r2, r3
 8016a24:	d103      	bne.n	8016a2e <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8016a26:	68fb      	ldr	r3, [r7, #12]
 8016a28:	2201      	movs	r2, #1
 8016a2a:	771a      	strb	r2, [r3, #28]
 8016a2c:	e019      	b.n	8016a62 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8016a2e:	68fb      	ldr	r3, [r7, #12]
 8016a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016a32:	687a      	ldr	r2, [r7, #4]
 8016a34:	429a      	cmp	r2, r3
 8016a36:	d103      	bne.n	8016a40 <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8016a38:	68fb      	ldr	r3, [r7, #12]
 8016a3a:	2202      	movs	r2, #2
 8016a3c:	771a      	strb	r2, [r3, #28]
 8016a3e:	e010      	b.n	8016a62 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8016a40:	68fb      	ldr	r3, [r7, #12]
 8016a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a44:	687a      	ldr	r2, [r7, #4]
 8016a46:	429a      	cmp	r2, r3
 8016a48:	d103      	bne.n	8016a52 <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8016a4a:	68fb      	ldr	r3, [r7, #12]
 8016a4c:	2204      	movs	r2, #4
 8016a4e:	771a      	strb	r2, [r3, #28]
 8016a50:	e007      	b.n	8016a62 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8016a52:	68fb      	ldr	r3, [r7, #12]
 8016a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016a56:	687a      	ldr	r2, [r7, #4]
 8016a58:	429a      	cmp	r2, r3
 8016a5a:	d102      	bne.n	8016a62 <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8016a5c:	68fb      	ldr	r3, [r7, #12]
 8016a5e:	2208      	movs	r2, #8
 8016a60:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8016a62:	68f8      	ldr	r0, [r7, #12]
 8016a64:	f7ff ff67 	bl	8016936 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016a68:	68fb      	ldr	r3, [r7, #12]
 8016a6a:	2200      	movs	r2, #0
 8016a6c:	771a      	strb	r2, [r3, #28]
}
 8016a6e:	bf00      	nop
 8016a70:	3710      	adds	r7, #16
 8016a72:	46bd      	mov	sp, r7
 8016a74:	bd80      	pop	{r7, pc}
	...

08016a78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8016a78:	b480      	push	{r7}
 8016a7a:	b085      	sub	sp, #20
 8016a7c:	af00      	add	r7, sp, #0
 8016a7e:	6078      	str	r0, [r7, #4]
 8016a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	681b      	ldr	r3, [r3, #0]
 8016a86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	4a40      	ldr	r2, [pc, #256]	; (8016b8c <TIM_Base_SetConfig+0x114>)
 8016a8c:	4293      	cmp	r3, r2
 8016a8e:	d013      	beq.n	8016ab8 <TIM_Base_SetConfig+0x40>
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016a96:	d00f      	beq.n	8016ab8 <TIM_Base_SetConfig+0x40>
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	4a3d      	ldr	r2, [pc, #244]	; (8016b90 <TIM_Base_SetConfig+0x118>)
 8016a9c:	4293      	cmp	r3, r2
 8016a9e:	d00b      	beq.n	8016ab8 <TIM_Base_SetConfig+0x40>
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	4a3c      	ldr	r2, [pc, #240]	; (8016b94 <TIM_Base_SetConfig+0x11c>)
 8016aa4:	4293      	cmp	r3, r2
 8016aa6:	d007      	beq.n	8016ab8 <TIM_Base_SetConfig+0x40>
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	4a3b      	ldr	r2, [pc, #236]	; (8016b98 <TIM_Base_SetConfig+0x120>)
 8016aac:	4293      	cmp	r3, r2
 8016aae:	d003      	beq.n	8016ab8 <TIM_Base_SetConfig+0x40>
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	4a3a      	ldr	r2, [pc, #232]	; (8016b9c <TIM_Base_SetConfig+0x124>)
 8016ab4:	4293      	cmp	r3, r2
 8016ab6:	d108      	bne.n	8016aca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8016ab8:	68fb      	ldr	r3, [r7, #12]
 8016aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8016abe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8016ac0:	683b      	ldr	r3, [r7, #0]
 8016ac2:	685b      	ldr	r3, [r3, #4]
 8016ac4:	68fa      	ldr	r2, [r7, #12]
 8016ac6:	4313      	orrs	r3, r2
 8016ac8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	4a2f      	ldr	r2, [pc, #188]	; (8016b8c <TIM_Base_SetConfig+0x114>)
 8016ace:	4293      	cmp	r3, r2
 8016ad0:	d02b      	beq.n	8016b2a <TIM_Base_SetConfig+0xb2>
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016ad8:	d027      	beq.n	8016b2a <TIM_Base_SetConfig+0xb2>
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	4a2c      	ldr	r2, [pc, #176]	; (8016b90 <TIM_Base_SetConfig+0x118>)
 8016ade:	4293      	cmp	r3, r2
 8016ae0:	d023      	beq.n	8016b2a <TIM_Base_SetConfig+0xb2>
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	4a2b      	ldr	r2, [pc, #172]	; (8016b94 <TIM_Base_SetConfig+0x11c>)
 8016ae6:	4293      	cmp	r3, r2
 8016ae8:	d01f      	beq.n	8016b2a <TIM_Base_SetConfig+0xb2>
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	4a2a      	ldr	r2, [pc, #168]	; (8016b98 <TIM_Base_SetConfig+0x120>)
 8016aee:	4293      	cmp	r3, r2
 8016af0:	d01b      	beq.n	8016b2a <TIM_Base_SetConfig+0xb2>
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	4a29      	ldr	r2, [pc, #164]	; (8016b9c <TIM_Base_SetConfig+0x124>)
 8016af6:	4293      	cmp	r3, r2
 8016af8:	d017      	beq.n	8016b2a <TIM_Base_SetConfig+0xb2>
 8016afa:	687b      	ldr	r3, [r7, #4]
 8016afc:	4a28      	ldr	r2, [pc, #160]	; (8016ba0 <TIM_Base_SetConfig+0x128>)
 8016afe:	4293      	cmp	r3, r2
 8016b00:	d013      	beq.n	8016b2a <TIM_Base_SetConfig+0xb2>
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	4a27      	ldr	r2, [pc, #156]	; (8016ba4 <TIM_Base_SetConfig+0x12c>)
 8016b06:	4293      	cmp	r3, r2
 8016b08:	d00f      	beq.n	8016b2a <TIM_Base_SetConfig+0xb2>
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	4a26      	ldr	r2, [pc, #152]	; (8016ba8 <TIM_Base_SetConfig+0x130>)
 8016b0e:	4293      	cmp	r3, r2
 8016b10:	d00b      	beq.n	8016b2a <TIM_Base_SetConfig+0xb2>
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	4a25      	ldr	r2, [pc, #148]	; (8016bac <TIM_Base_SetConfig+0x134>)
 8016b16:	4293      	cmp	r3, r2
 8016b18:	d007      	beq.n	8016b2a <TIM_Base_SetConfig+0xb2>
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	4a24      	ldr	r2, [pc, #144]	; (8016bb0 <TIM_Base_SetConfig+0x138>)
 8016b1e:	4293      	cmp	r3, r2
 8016b20:	d003      	beq.n	8016b2a <TIM_Base_SetConfig+0xb2>
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	4a23      	ldr	r2, [pc, #140]	; (8016bb4 <TIM_Base_SetConfig+0x13c>)
 8016b26:	4293      	cmp	r3, r2
 8016b28:	d108      	bne.n	8016b3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8016b2a:	68fb      	ldr	r3, [r7, #12]
 8016b2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8016b30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8016b32:	683b      	ldr	r3, [r7, #0]
 8016b34:	68db      	ldr	r3, [r3, #12]
 8016b36:	68fa      	ldr	r2, [r7, #12]
 8016b38:	4313      	orrs	r3, r2
 8016b3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8016b3c:	68fb      	ldr	r3, [r7, #12]
 8016b3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8016b42:	683b      	ldr	r3, [r7, #0]
 8016b44:	695b      	ldr	r3, [r3, #20]
 8016b46:	4313      	orrs	r3, r2
 8016b48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	68fa      	ldr	r2, [r7, #12]
 8016b4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8016b50:	683b      	ldr	r3, [r7, #0]
 8016b52:	689a      	ldr	r2, [r3, #8]
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8016b58:	683b      	ldr	r3, [r7, #0]
 8016b5a:	681a      	ldr	r2, [r3, #0]
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	4a0a      	ldr	r2, [pc, #40]	; (8016b8c <TIM_Base_SetConfig+0x114>)
 8016b64:	4293      	cmp	r3, r2
 8016b66:	d003      	beq.n	8016b70 <TIM_Base_SetConfig+0xf8>
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	4a0c      	ldr	r2, [pc, #48]	; (8016b9c <TIM_Base_SetConfig+0x124>)
 8016b6c:	4293      	cmp	r3, r2
 8016b6e:	d103      	bne.n	8016b78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8016b70:	683b      	ldr	r3, [r7, #0]
 8016b72:	691a      	ldr	r2, [r3, #16]
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	2201      	movs	r2, #1
 8016b7c:	615a      	str	r2, [r3, #20]
}
 8016b7e:	bf00      	nop
 8016b80:	3714      	adds	r7, #20
 8016b82:	46bd      	mov	sp, r7
 8016b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b88:	4770      	bx	lr
 8016b8a:	bf00      	nop
 8016b8c:	40010000 	.word	0x40010000
 8016b90:	40000400 	.word	0x40000400
 8016b94:	40000800 	.word	0x40000800
 8016b98:	40000c00 	.word	0x40000c00
 8016b9c:	40010400 	.word	0x40010400
 8016ba0:	40014000 	.word	0x40014000
 8016ba4:	40014400 	.word	0x40014400
 8016ba8:	40014800 	.word	0x40014800
 8016bac:	40001800 	.word	0x40001800
 8016bb0:	40001c00 	.word	0x40001c00
 8016bb4:	40002000 	.word	0x40002000

08016bb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8016bb8:	b480      	push	{r7}
 8016bba:	b087      	sub	sp, #28
 8016bbc:	af00      	add	r7, sp, #0
 8016bbe:	6078      	str	r0, [r7, #4]
 8016bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	6a1b      	ldr	r3, [r3, #32]
 8016bc6:	f023 0201 	bic.w	r2, r3, #1
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	6a1b      	ldr	r3, [r3, #32]
 8016bd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	685b      	ldr	r3, [r3, #4]
 8016bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	699b      	ldr	r3, [r3, #24]
 8016bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8016be0:	68fb      	ldr	r3, [r7, #12]
 8016be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8016be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8016be8:	68fb      	ldr	r3, [r7, #12]
 8016bea:	f023 0303 	bic.w	r3, r3, #3
 8016bee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016bf0:	683b      	ldr	r3, [r7, #0]
 8016bf2:	681b      	ldr	r3, [r3, #0]
 8016bf4:	68fa      	ldr	r2, [r7, #12]
 8016bf6:	4313      	orrs	r3, r2
 8016bf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8016bfa:	697b      	ldr	r3, [r7, #20]
 8016bfc:	f023 0302 	bic.w	r3, r3, #2
 8016c00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8016c02:	683b      	ldr	r3, [r7, #0]
 8016c04:	689b      	ldr	r3, [r3, #8]
 8016c06:	697a      	ldr	r2, [r7, #20]
 8016c08:	4313      	orrs	r3, r2
 8016c0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	4a20      	ldr	r2, [pc, #128]	; (8016c90 <TIM_OC1_SetConfig+0xd8>)
 8016c10:	4293      	cmp	r3, r2
 8016c12:	d003      	beq.n	8016c1c <TIM_OC1_SetConfig+0x64>
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	4a1f      	ldr	r2, [pc, #124]	; (8016c94 <TIM_OC1_SetConfig+0xdc>)
 8016c18:	4293      	cmp	r3, r2
 8016c1a:	d10c      	bne.n	8016c36 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8016c1c:	697b      	ldr	r3, [r7, #20]
 8016c1e:	f023 0308 	bic.w	r3, r3, #8
 8016c22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8016c24:	683b      	ldr	r3, [r7, #0]
 8016c26:	68db      	ldr	r3, [r3, #12]
 8016c28:	697a      	ldr	r2, [r7, #20]
 8016c2a:	4313      	orrs	r3, r2
 8016c2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8016c2e:	697b      	ldr	r3, [r7, #20]
 8016c30:	f023 0304 	bic.w	r3, r3, #4
 8016c34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	4a15      	ldr	r2, [pc, #84]	; (8016c90 <TIM_OC1_SetConfig+0xd8>)
 8016c3a:	4293      	cmp	r3, r2
 8016c3c:	d003      	beq.n	8016c46 <TIM_OC1_SetConfig+0x8e>
 8016c3e:	687b      	ldr	r3, [r7, #4]
 8016c40:	4a14      	ldr	r2, [pc, #80]	; (8016c94 <TIM_OC1_SetConfig+0xdc>)
 8016c42:	4293      	cmp	r3, r2
 8016c44:	d111      	bne.n	8016c6a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8016c46:	693b      	ldr	r3, [r7, #16]
 8016c48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016c4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8016c4e:	693b      	ldr	r3, [r7, #16]
 8016c50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8016c54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8016c56:	683b      	ldr	r3, [r7, #0]
 8016c58:	695b      	ldr	r3, [r3, #20]
 8016c5a:	693a      	ldr	r2, [r7, #16]
 8016c5c:	4313      	orrs	r3, r2
 8016c5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8016c60:	683b      	ldr	r3, [r7, #0]
 8016c62:	699b      	ldr	r3, [r3, #24]
 8016c64:	693a      	ldr	r2, [r7, #16]
 8016c66:	4313      	orrs	r3, r2
 8016c68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	693a      	ldr	r2, [r7, #16]
 8016c6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	68fa      	ldr	r2, [r7, #12]
 8016c74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8016c76:	683b      	ldr	r3, [r7, #0]
 8016c78:	685a      	ldr	r2, [r3, #4]
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	697a      	ldr	r2, [r7, #20]
 8016c82:	621a      	str	r2, [r3, #32]
}
 8016c84:	bf00      	nop
 8016c86:	371c      	adds	r7, #28
 8016c88:	46bd      	mov	sp, r7
 8016c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c8e:	4770      	bx	lr
 8016c90:	40010000 	.word	0x40010000
 8016c94:	40010400 	.word	0x40010400

08016c98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8016c98:	b480      	push	{r7}
 8016c9a:	b087      	sub	sp, #28
 8016c9c:	af00      	add	r7, sp, #0
 8016c9e:	6078      	str	r0, [r7, #4]
 8016ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	6a1b      	ldr	r3, [r3, #32]
 8016ca6:	f023 0210 	bic.w	r2, r3, #16
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	6a1b      	ldr	r3, [r3, #32]
 8016cb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	685b      	ldr	r3, [r3, #4]
 8016cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016cba:	687b      	ldr	r3, [r7, #4]
 8016cbc:	699b      	ldr	r3, [r3, #24]
 8016cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8016cc0:	68fb      	ldr	r3, [r7, #12]
 8016cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8016cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8016cc8:	68fb      	ldr	r3, [r7, #12]
 8016cca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8016cce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016cd0:	683b      	ldr	r3, [r7, #0]
 8016cd2:	681b      	ldr	r3, [r3, #0]
 8016cd4:	021b      	lsls	r3, r3, #8
 8016cd6:	68fa      	ldr	r2, [r7, #12]
 8016cd8:	4313      	orrs	r3, r2
 8016cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8016cdc:	697b      	ldr	r3, [r7, #20]
 8016cde:	f023 0320 	bic.w	r3, r3, #32
 8016ce2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8016ce4:	683b      	ldr	r3, [r7, #0]
 8016ce6:	689b      	ldr	r3, [r3, #8]
 8016ce8:	011b      	lsls	r3, r3, #4
 8016cea:	697a      	ldr	r2, [r7, #20]
 8016cec:	4313      	orrs	r3, r2
 8016cee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	4a22      	ldr	r2, [pc, #136]	; (8016d7c <TIM_OC2_SetConfig+0xe4>)
 8016cf4:	4293      	cmp	r3, r2
 8016cf6:	d003      	beq.n	8016d00 <TIM_OC2_SetConfig+0x68>
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	4a21      	ldr	r2, [pc, #132]	; (8016d80 <TIM_OC2_SetConfig+0xe8>)
 8016cfc:	4293      	cmp	r3, r2
 8016cfe:	d10d      	bne.n	8016d1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8016d00:	697b      	ldr	r3, [r7, #20]
 8016d02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016d06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8016d08:	683b      	ldr	r3, [r7, #0]
 8016d0a:	68db      	ldr	r3, [r3, #12]
 8016d0c:	011b      	lsls	r3, r3, #4
 8016d0e:	697a      	ldr	r2, [r7, #20]
 8016d10:	4313      	orrs	r3, r2
 8016d12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8016d14:	697b      	ldr	r3, [r7, #20]
 8016d16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016d1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	4a17      	ldr	r2, [pc, #92]	; (8016d7c <TIM_OC2_SetConfig+0xe4>)
 8016d20:	4293      	cmp	r3, r2
 8016d22:	d003      	beq.n	8016d2c <TIM_OC2_SetConfig+0x94>
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	4a16      	ldr	r2, [pc, #88]	; (8016d80 <TIM_OC2_SetConfig+0xe8>)
 8016d28:	4293      	cmp	r3, r2
 8016d2a:	d113      	bne.n	8016d54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8016d2c:	693b      	ldr	r3, [r7, #16]
 8016d2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8016d32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8016d34:	693b      	ldr	r3, [r7, #16]
 8016d36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8016d3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8016d3c:	683b      	ldr	r3, [r7, #0]
 8016d3e:	695b      	ldr	r3, [r3, #20]
 8016d40:	009b      	lsls	r3, r3, #2
 8016d42:	693a      	ldr	r2, [r7, #16]
 8016d44:	4313      	orrs	r3, r2
 8016d46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8016d48:	683b      	ldr	r3, [r7, #0]
 8016d4a:	699b      	ldr	r3, [r3, #24]
 8016d4c:	009b      	lsls	r3, r3, #2
 8016d4e:	693a      	ldr	r2, [r7, #16]
 8016d50:	4313      	orrs	r3, r2
 8016d52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	693a      	ldr	r2, [r7, #16]
 8016d58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	68fa      	ldr	r2, [r7, #12]
 8016d5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8016d60:	683b      	ldr	r3, [r7, #0]
 8016d62:	685a      	ldr	r2, [r3, #4]
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	697a      	ldr	r2, [r7, #20]
 8016d6c:	621a      	str	r2, [r3, #32]
}
 8016d6e:	bf00      	nop
 8016d70:	371c      	adds	r7, #28
 8016d72:	46bd      	mov	sp, r7
 8016d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d78:	4770      	bx	lr
 8016d7a:	bf00      	nop
 8016d7c:	40010000 	.word	0x40010000
 8016d80:	40010400 	.word	0x40010400

08016d84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8016d84:	b480      	push	{r7}
 8016d86:	b087      	sub	sp, #28
 8016d88:	af00      	add	r7, sp, #0
 8016d8a:	6078      	str	r0, [r7, #4]
 8016d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8016d8e:	687b      	ldr	r3, [r7, #4]
 8016d90:	6a1b      	ldr	r3, [r3, #32]
 8016d92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	6a1b      	ldr	r3, [r3, #32]
 8016d9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	685b      	ldr	r3, [r3, #4]
 8016da4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	69db      	ldr	r3, [r3, #28]
 8016daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8016dac:	68fb      	ldr	r3, [r7, #12]
 8016dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8016db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8016db4:	68fb      	ldr	r3, [r7, #12]
 8016db6:	f023 0303 	bic.w	r3, r3, #3
 8016dba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016dbc:	683b      	ldr	r3, [r7, #0]
 8016dbe:	681b      	ldr	r3, [r3, #0]
 8016dc0:	68fa      	ldr	r2, [r7, #12]
 8016dc2:	4313      	orrs	r3, r2
 8016dc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8016dc6:	697b      	ldr	r3, [r7, #20]
 8016dc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8016dcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8016dce:	683b      	ldr	r3, [r7, #0]
 8016dd0:	689b      	ldr	r3, [r3, #8]
 8016dd2:	021b      	lsls	r3, r3, #8
 8016dd4:	697a      	ldr	r2, [r7, #20]
 8016dd6:	4313      	orrs	r3, r2
 8016dd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	4a21      	ldr	r2, [pc, #132]	; (8016e64 <TIM_OC3_SetConfig+0xe0>)
 8016dde:	4293      	cmp	r3, r2
 8016de0:	d003      	beq.n	8016dea <TIM_OC3_SetConfig+0x66>
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	4a20      	ldr	r2, [pc, #128]	; (8016e68 <TIM_OC3_SetConfig+0xe4>)
 8016de6:	4293      	cmp	r3, r2
 8016de8:	d10d      	bne.n	8016e06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8016dea:	697b      	ldr	r3, [r7, #20]
 8016dec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8016df0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8016df2:	683b      	ldr	r3, [r7, #0]
 8016df4:	68db      	ldr	r3, [r3, #12]
 8016df6:	021b      	lsls	r3, r3, #8
 8016df8:	697a      	ldr	r2, [r7, #20]
 8016dfa:	4313      	orrs	r3, r2
 8016dfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8016dfe:	697b      	ldr	r3, [r7, #20]
 8016e00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8016e04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	4a16      	ldr	r2, [pc, #88]	; (8016e64 <TIM_OC3_SetConfig+0xe0>)
 8016e0a:	4293      	cmp	r3, r2
 8016e0c:	d003      	beq.n	8016e16 <TIM_OC3_SetConfig+0x92>
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	4a15      	ldr	r2, [pc, #84]	; (8016e68 <TIM_OC3_SetConfig+0xe4>)
 8016e12:	4293      	cmp	r3, r2
 8016e14:	d113      	bne.n	8016e3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8016e16:	693b      	ldr	r3, [r7, #16]
 8016e18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016e1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8016e1e:	693b      	ldr	r3, [r7, #16]
 8016e20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8016e24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8016e26:	683b      	ldr	r3, [r7, #0]
 8016e28:	695b      	ldr	r3, [r3, #20]
 8016e2a:	011b      	lsls	r3, r3, #4
 8016e2c:	693a      	ldr	r2, [r7, #16]
 8016e2e:	4313      	orrs	r3, r2
 8016e30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8016e32:	683b      	ldr	r3, [r7, #0]
 8016e34:	699b      	ldr	r3, [r3, #24]
 8016e36:	011b      	lsls	r3, r3, #4
 8016e38:	693a      	ldr	r2, [r7, #16]
 8016e3a:	4313      	orrs	r3, r2
 8016e3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	693a      	ldr	r2, [r7, #16]
 8016e42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	68fa      	ldr	r2, [r7, #12]
 8016e48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8016e4a:	683b      	ldr	r3, [r7, #0]
 8016e4c:	685a      	ldr	r2, [r3, #4]
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	697a      	ldr	r2, [r7, #20]
 8016e56:	621a      	str	r2, [r3, #32]
}
 8016e58:	bf00      	nop
 8016e5a:	371c      	adds	r7, #28
 8016e5c:	46bd      	mov	sp, r7
 8016e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e62:	4770      	bx	lr
 8016e64:	40010000 	.word	0x40010000
 8016e68:	40010400 	.word	0x40010400

08016e6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8016e6c:	b480      	push	{r7}
 8016e6e:	b087      	sub	sp, #28
 8016e70:	af00      	add	r7, sp, #0
 8016e72:	6078      	str	r0, [r7, #4]
 8016e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8016e76:	687b      	ldr	r3, [r7, #4]
 8016e78:	6a1b      	ldr	r3, [r3, #32]
 8016e7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	6a1b      	ldr	r3, [r3, #32]
 8016e86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	685b      	ldr	r3, [r3, #4]
 8016e8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	69db      	ldr	r3, [r3, #28]
 8016e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8016e94:	68fb      	ldr	r3, [r7, #12]
 8016e96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8016e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8016e9c:	68fb      	ldr	r3, [r7, #12]
 8016e9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8016ea2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016ea4:	683b      	ldr	r3, [r7, #0]
 8016ea6:	681b      	ldr	r3, [r3, #0]
 8016ea8:	021b      	lsls	r3, r3, #8
 8016eaa:	68fa      	ldr	r2, [r7, #12]
 8016eac:	4313      	orrs	r3, r2
 8016eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8016eb0:	693b      	ldr	r3, [r7, #16]
 8016eb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8016eb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8016eb8:	683b      	ldr	r3, [r7, #0]
 8016eba:	689b      	ldr	r3, [r3, #8]
 8016ebc:	031b      	lsls	r3, r3, #12
 8016ebe:	693a      	ldr	r2, [r7, #16]
 8016ec0:	4313      	orrs	r3, r2
 8016ec2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	4a12      	ldr	r2, [pc, #72]	; (8016f10 <TIM_OC4_SetConfig+0xa4>)
 8016ec8:	4293      	cmp	r3, r2
 8016eca:	d003      	beq.n	8016ed4 <TIM_OC4_SetConfig+0x68>
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	4a11      	ldr	r2, [pc, #68]	; (8016f14 <TIM_OC4_SetConfig+0xa8>)
 8016ed0:	4293      	cmp	r3, r2
 8016ed2:	d109      	bne.n	8016ee8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8016ed4:	697b      	ldr	r3, [r7, #20]
 8016ed6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8016eda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8016edc:	683b      	ldr	r3, [r7, #0]
 8016ede:	695b      	ldr	r3, [r3, #20]
 8016ee0:	019b      	lsls	r3, r3, #6
 8016ee2:	697a      	ldr	r2, [r7, #20]
 8016ee4:	4313      	orrs	r3, r2
 8016ee6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	697a      	ldr	r2, [r7, #20]
 8016eec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	68fa      	ldr	r2, [r7, #12]
 8016ef2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8016ef4:	683b      	ldr	r3, [r7, #0]
 8016ef6:	685a      	ldr	r2, [r3, #4]
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	693a      	ldr	r2, [r7, #16]
 8016f00:	621a      	str	r2, [r3, #32]
}
 8016f02:	bf00      	nop
 8016f04:	371c      	adds	r7, #28
 8016f06:	46bd      	mov	sp, r7
 8016f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f0c:	4770      	bx	lr
 8016f0e:	bf00      	nop
 8016f10:	40010000 	.word	0x40010000
 8016f14:	40010400 	.word	0x40010400

08016f18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8016f18:	b480      	push	{r7}
 8016f1a:	b087      	sub	sp, #28
 8016f1c:	af00      	add	r7, sp, #0
 8016f1e:	60f8      	str	r0, [r7, #12]
 8016f20:	60b9      	str	r1, [r7, #8]
 8016f22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8016f24:	68fb      	ldr	r3, [r7, #12]
 8016f26:	6a1b      	ldr	r3, [r3, #32]
 8016f28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8016f2a:	68fb      	ldr	r3, [r7, #12]
 8016f2c:	6a1b      	ldr	r3, [r3, #32]
 8016f2e:	f023 0201 	bic.w	r2, r3, #1
 8016f32:	68fb      	ldr	r3, [r7, #12]
 8016f34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8016f36:	68fb      	ldr	r3, [r7, #12]
 8016f38:	699b      	ldr	r3, [r3, #24]
 8016f3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8016f3c:	693b      	ldr	r3, [r7, #16]
 8016f3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8016f42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	011b      	lsls	r3, r3, #4
 8016f48:	693a      	ldr	r2, [r7, #16]
 8016f4a:	4313      	orrs	r3, r2
 8016f4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8016f4e:	697b      	ldr	r3, [r7, #20]
 8016f50:	f023 030a 	bic.w	r3, r3, #10
 8016f54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8016f56:	697a      	ldr	r2, [r7, #20]
 8016f58:	68bb      	ldr	r3, [r7, #8]
 8016f5a:	4313      	orrs	r3, r2
 8016f5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8016f5e:	68fb      	ldr	r3, [r7, #12]
 8016f60:	693a      	ldr	r2, [r7, #16]
 8016f62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8016f64:	68fb      	ldr	r3, [r7, #12]
 8016f66:	697a      	ldr	r2, [r7, #20]
 8016f68:	621a      	str	r2, [r3, #32]
}
 8016f6a:	bf00      	nop
 8016f6c:	371c      	adds	r7, #28
 8016f6e:	46bd      	mov	sp, r7
 8016f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f74:	4770      	bx	lr

08016f76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8016f76:	b480      	push	{r7}
 8016f78:	b087      	sub	sp, #28
 8016f7a:	af00      	add	r7, sp, #0
 8016f7c:	60f8      	str	r0, [r7, #12]
 8016f7e:	60b9      	str	r1, [r7, #8]
 8016f80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8016f82:	68fb      	ldr	r3, [r7, #12]
 8016f84:	6a1b      	ldr	r3, [r3, #32]
 8016f86:	f023 0210 	bic.w	r2, r3, #16
 8016f8a:	68fb      	ldr	r3, [r7, #12]
 8016f8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8016f8e:	68fb      	ldr	r3, [r7, #12]
 8016f90:	699b      	ldr	r3, [r3, #24]
 8016f92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8016f94:	68fb      	ldr	r3, [r7, #12]
 8016f96:	6a1b      	ldr	r3, [r3, #32]
 8016f98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8016f9a:	697b      	ldr	r3, [r7, #20]
 8016f9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8016fa0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8016fa2:	687b      	ldr	r3, [r7, #4]
 8016fa4:	031b      	lsls	r3, r3, #12
 8016fa6:	697a      	ldr	r2, [r7, #20]
 8016fa8:	4313      	orrs	r3, r2
 8016faa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8016fac:	693b      	ldr	r3, [r7, #16]
 8016fae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8016fb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8016fb4:	68bb      	ldr	r3, [r7, #8]
 8016fb6:	011b      	lsls	r3, r3, #4
 8016fb8:	693a      	ldr	r2, [r7, #16]
 8016fba:	4313      	orrs	r3, r2
 8016fbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8016fbe:	68fb      	ldr	r3, [r7, #12]
 8016fc0:	697a      	ldr	r2, [r7, #20]
 8016fc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8016fc4:	68fb      	ldr	r3, [r7, #12]
 8016fc6:	693a      	ldr	r2, [r7, #16]
 8016fc8:	621a      	str	r2, [r3, #32]
}
 8016fca:	bf00      	nop
 8016fcc:	371c      	adds	r7, #28
 8016fce:	46bd      	mov	sp, r7
 8016fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fd4:	4770      	bx	lr

08016fd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8016fd6:	b480      	push	{r7}
 8016fd8:	b085      	sub	sp, #20
 8016fda:	af00      	add	r7, sp, #0
 8016fdc:	6078      	str	r0, [r7, #4]
 8016fde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8016fe0:	687b      	ldr	r3, [r7, #4]
 8016fe2:	689b      	ldr	r3, [r3, #8]
 8016fe4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8016fe6:	68fb      	ldr	r3, [r7, #12]
 8016fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8016fec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8016fee:	683a      	ldr	r2, [r7, #0]
 8016ff0:	68fb      	ldr	r3, [r7, #12]
 8016ff2:	4313      	orrs	r3, r2
 8016ff4:	f043 0307 	orr.w	r3, r3, #7
 8016ff8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	68fa      	ldr	r2, [r7, #12]
 8016ffe:	609a      	str	r2, [r3, #8]
}
 8017000:	bf00      	nop
 8017002:	3714      	adds	r7, #20
 8017004:	46bd      	mov	sp, r7
 8017006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801700a:	4770      	bx	lr

0801700c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801700c:	b480      	push	{r7}
 801700e:	b087      	sub	sp, #28
 8017010:	af00      	add	r7, sp, #0
 8017012:	60f8      	str	r0, [r7, #12]
 8017014:	60b9      	str	r1, [r7, #8]
 8017016:	607a      	str	r2, [r7, #4]
 8017018:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801701a:	68fb      	ldr	r3, [r7, #12]
 801701c:	689b      	ldr	r3, [r3, #8]
 801701e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8017020:	697b      	ldr	r3, [r7, #20]
 8017022:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8017026:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8017028:	683b      	ldr	r3, [r7, #0]
 801702a:	021a      	lsls	r2, r3, #8
 801702c:	687b      	ldr	r3, [r7, #4]
 801702e:	431a      	orrs	r2, r3
 8017030:	68bb      	ldr	r3, [r7, #8]
 8017032:	4313      	orrs	r3, r2
 8017034:	697a      	ldr	r2, [r7, #20]
 8017036:	4313      	orrs	r3, r2
 8017038:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801703a:	68fb      	ldr	r3, [r7, #12]
 801703c:	697a      	ldr	r2, [r7, #20]
 801703e:	609a      	str	r2, [r3, #8]
}
 8017040:	bf00      	nop
 8017042:	371c      	adds	r7, #28
 8017044:	46bd      	mov	sp, r7
 8017046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801704a:	4770      	bx	lr

0801704c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801704c:	b480      	push	{r7}
 801704e:	b087      	sub	sp, #28
 8017050:	af00      	add	r7, sp, #0
 8017052:	60f8      	str	r0, [r7, #12]
 8017054:	60b9      	str	r1, [r7, #8]
 8017056:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8017058:	68bb      	ldr	r3, [r7, #8]
 801705a:	f003 031f 	and.w	r3, r3, #31
 801705e:	2201      	movs	r2, #1
 8017060:	fa02 f303 	lsl.w	r3, r2, r3
 8017064:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8017066:	68fb      	ldr	r3, [r7, #12]
 8017068:	6a1a      	ldr	r2, [r3, #32]
 801706a:	697b      	ldr	r3, [r7, #20]
 801706c:	43db      	mvns	r3, r3
 801706e:	401a      	ands	r2, r3
 8017070:	68fb      	ldr	r3, [r7, #12]
 8017072:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8017074:	68fb      	ldr	r3, [r7, #12]
 8017076:	6a1a      	ldr	r2, [r3, #32]
 8017078:	68bb      	ldr	r3, [r7, #8]
 801707a:	f003 031f 	and.w	r3, r3, #31
 801707e:	6879      	ldr	r1, [r7, #4]
 8017080:	fa01 f303 	lsl.w	r3, r1, r3
 8017084:	431a      	orrs	r2, r3
 8017086:	68fb      	ldr	r3, [r7, #12]
 8017088:	621a      	str	r2, [r3, #32]
}
 801708a:	bf00      	nop
 801708c:	371c      	adds	r7, #28
 801708e:	46bd      	mov	sp, r7
 8017090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017094:	4770      	bx	lr
	...

08017098 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8017098:	b480      	push	{r7}
 801709a:	b085      	sub	sp, #20
 801709c:	af00      	add	r7, sp, #0
 801709e:	6078      	str	r0, [r7, #4]
 80170a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80170a8:	2b01      	cmp	r3, #1
 80170aa:	d101      	bne.n	80170b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80170ac:	2302      	movs	r3, #2
 80170ae:	e05a      	b.n	8017166 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	2201      	movs	r2, #1
 80170b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	2202      	movs	r2, #2
 80170bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	681b      	ldr	r3, [r3, #0]
 80170c4:	685b      	ldr	r3, [r3, #4]
 80170c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	681b      	ldr	r3, [r3, #0]
 80170cc:	689b      	ldr	r3, [r3, #8]
 80170ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80170d0:	68fb      	ldr	r3, [r7, #12]
 80170d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80170d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80170d8:	683b      	ldr	r3, [r7, #0]
 80170da:	681b      	ldr	r3, [r3, #0]
 80170dc:	68fa      	ldr	r2, [r7, #12]
 80170de:	4313      	orrs	r3, r2
 80170e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	681b      	ldr	r3, [r3, #0]
 80170e6:	68fa      	ldr	r2, [r7, #12]
 80170e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	681b      	ldr	r3, [r3, #0]
 80170ee:	4a21      	ldr	r2, [pc, #132]	; (8017174 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80170f0:	4293      	cmp	r3, r2
 80170f2:	d022      	beq.n	801713a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	681b      	ldr	r3, [r3, #0]
 80170f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80170fc:	d01d      	beq.n	801713a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80170fe:	687b      	ldr	r3, [r7, #4]
 8017100:	681b      	ldr	r3, [r3, #0]
 8017102:	4a1d      	ldr	r2, [pc, #116]	; (8017178 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8017104:	4293      	cmp	r3, r2
 8017106:	d018      	beq.n	801713a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	681b      	ldr	r3, [r3, #0]
 801710c:	4a1b      	ldr	r2, [pc, #108]	; (801717c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 801710e:	4293      	cmp	r3, r2
 8017110:	d013      	beq.n	801713a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	681b      	ldr	r3, [r3, #0]
 8017116:	4a1a      	ldr	r2, [pc, #104]	; (8017180 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8017118:	4293      	cmp	r3, r2
 801711a:	d00e      	beq.n	801713a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	681b      	ldr	r3, [r3, #0]
 8017120:	4a18      	ldr	r2, [pc, #96]	; (8017184 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8017122:	4293      	cmp	r3, r2
 8017124:	d009      	beq.n	801713a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8017126:	687b      	ldr	r3, [r7, #4]
 8017128:	681b      	ldr	r3, [r3, #0]
 801712a:	4a17      	ldr	r2, [pc, #92]	; (8017188 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 801712c:	4293      	cmp	r3, r2
 801712e:	d004      	beq.n	801713a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8017130:	687b      	ldr	r3, [r7, #4]
 8017132:	681b      	ldr	r3, [r3, #0]
 8017134:	4a15      	ldr	r2, [pc, #84]	; (801718c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8017136:	4293      	cmp	r3, r2
 8017138:	d10c      	bne.n	8017154 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801713a:	68bb      	ldr	r3, [r7, #8]
 801713c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8017140:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8017142:	683b      	ldr	r3, [r7, #0]
 8017144:	685b      	ldr	r3, [r3, #4]
 8017146:	68ba      	ldr	r2, [r7, #8]
 8017148:	4313      	orrs	r3, r2
 801714a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	681b      	ldr	r3, [r3, #0]
 8017150:	68ba      	ldr	r2, [r7, #8]
 8017152:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	2201      	movs	r2, #1
 8017158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	2200      	movs	r2, #0
 8017160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8017164:	2300      	movs	r3, #0
}
 8017166:	4618      	mov	r0, r3
 8017168:	3714      	adds	r7, #20
 801716a:	46bd      	mov	sp, r7
 801716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017170:	4770      	bx	lr
 8017172:	bf00      	nop
 8017174:	40010000 	.word	0x40010000
 8017178:	40000400 	.word	0x40000400
 801717c:	40000800 	.word	0x40000800
 8017180:	40000c00 	.word	0x40000c00
 8017184:	40010400 	.word	0x40010400
 8017188:	40014000 	.word	0x40014000
 801718c:	40001800 	.word	0x40001800

08017190 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8017190:	b480      	push	{r7}
 8017192:	b083      	sub	sp, #12
 8017194:	af00      	add	r7, sp, #0
 8017196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8017198:	bf00      	nop
 801719a:	370c      	adds	r7, #12
 801719c:	46bd      	mov	sp, r7
 801719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171a2:	4770      	bx	lr

080171a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80171a4:	b480      	push	{r7}
 80171a6:	b083      	sub	sp, #12
 80171a8:	af00      	add	r7, sp, #0
 80171aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80171ac:	bf00      	nop
 80171ae:	370c      	adds	r7, #12
 80171b0:	46bd      	mov	sp, r7
 80171b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171b6:	4770      	bx	lr

080171b8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80171b8:	b480      	push	{r7}
 80171ba:	b085      	sub	sp, #20
 80171bc:	af00      	add	r7, sp, #0
 80171be:	6078      	str	r0, [r7, #4]
 80171c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80171c2:	2300      	movs	r3, #0
 80171c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80171c6:	2300      	movs	r3, #0
 80171c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80171ca:	683b      	ldr	r3, [r7, #0]
 80171cc:	681b      	ldr	r3, [r3, #0]
 80171ce:	2b01      	cmp	r3, #1
 80171d0:	d029      	beq.n	8017226 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	681b      	ldr	r3, [r3, #0]
 80171d6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80171d8:	68fb      	ldr	r3, [r7, #12]
 80171da:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80171de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80171e2:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80171e4:	683b      	ldr	r3, [r7, #0]
 80171e6:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80171e8:	683b      	ldr	r3, [r7, #0]
 80171ea:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80171ec:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80171ee:	683b      	ldr	r3, [r7, #0]
 80171f0:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80171f2:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80171f4:	683b      	ldr	r3, [r7, #0]
 80171f6:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80171f8:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80171fa:	683b      	ldr	r3, [r7, #0]
 80171fc:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80171fe:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8017200:	683b      	ldr	r3, [r7, #0]
 8017202:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8017204:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8017206:	683b      	ldr	r3, [r7, #0]
 8017208:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 801720a:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 801720c:	683b      	ldr	r3, [r7, #0]
 801720e:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8017210:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8017212:	683b      	ldr	r3, [r7, #0]
 8017214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8017216:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8017218:	68fa      	ldr	r2, [r7, #12]
 801721a:	4313      	orrs	r3, r2
 801721c:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	68fa      	ldr	r2, [r7, #12]
 8017222:	601a      	str	r2, [r3, #0]
 8017224:	e034      	b.n	8017290 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	681b      	ldr	r3, [r3, #0]
 801722a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 801722c:	68fb      	ldr	r3, [r7, #12]
 801722e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8017232:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8017234:	683b      	ldr	r3, [r7, #0]
 8017236:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8017238:	683b      	ldr	r3, [r7, #0]
 801723a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 801723c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 801723e:	683b      	ldr	r3, [r7, #0]
 8017240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8017242:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8017244:	68fa      	ldr	r2, [r7, #12]
 8017246:	4313      	orrs	r3, r2
 8017248:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	685b      	ldr	r3, [r3, #4]
 801724e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8017250:	68bb      	ldr	r3, [r7, #8]
 8017252:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8017256:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801725a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 801725c:	683b      	ldr	r3, [r7, #0]
 801725e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8017260:	683b      	ldr	r3, [r7, #0]
 8017262:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8017264:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8017266:	683b      	ldr	r3, [r7, #0]
 8017268:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 801726a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 801726c:	683b      	ldr	r3, [r7, #0]
 801726e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8017270:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8017272:	683b      	ldr	r3, [r7, #0]
 8017274:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8017276:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8017278:	683b      	ldr	r3, [r7, #0]
 801727a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 801727c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 801727e:	68ba      	ldr	r2, [r7, #8]
 8017280:	4313      	orrs	r3, r2
 8017282:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	68fa      	ldr	r2, [r7, #12]
 8017288:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	68ba      	ldr	r2, [r7, #8]
 801728e:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8017290:	2300      	movs	r3, #0
}
 8017292:	4618      	mov	r0, r3
 8017294:	3714      	adds	r7, #20
 8017296:	46bd      	mov	sp, r7
 8017298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801729c:	4770      	bx	lr

0801729e <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 801729e:	b480      	push	{r7}
 80172a0:	b087      	sub	sp, #28
 80172a2:	af00      	add	r7, sp, #0
 80172a4:	60f8      	str	r0, [r7, #12]
 80172a6:	60b9      	str	r1, [r7, #8]
 80172a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 80172aa:	2300      	movs	r3, #0
 80172ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 80172ae:	2300      	movs	r3, #0
 80172b0:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	2b01      	cmp	r3, #1
 80172b6:	d02e      	beq.n	8017316 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80172b8:	68fb      	ldr	r3, [r7, #12]
 80172ba:	689b      	ldr	r3, [r3, #8]
 80172bc:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80172be:	697b      	ldr	r3, [r7, #20]
 80172c0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80172c4:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80172c6:	68bb      	ldr	r3, [r7, #8]
 80172c8:	681b      	ldr	r3, [r3, #0]
 80172ca:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80172cc:	68bb      	ldr	r3, [r7, #8]
 80172ce:	685b      	ldr	r3, [r3, #4]
 80172d0:	3b01      	subs	r3, #1
 80172d2:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80172d4:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80172d6:	68bb      	ldr	r3, [r7, #8]
 80172d8:	689b      	ldr	r3, [r3, #8]
 80172da:	3b01      	subs	r3, #1
 80172dc:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80172de:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80172e0:	68bb      	ldr	r3, [r7, #8]
 80172e2:	68db      	ldr	r3, [r3, #12]
 80172e4:	3b01      	subs	r3, #1
 80172e6:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80172e8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80172ea:	68bb      	ldr	r3, [r7, #8]
 80172ec:	691b      	ldr	r3, [r3, #16]
 80172ee:	3b01      	subs	r3, #1
 80172f0:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80172f2:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80172f4:	68bb      	ldr	r3, [r7, #8]
 80172f6:	695b      	ldr	r3, [r3, #20]
 80172f8:	3b01      	subs	r3, #1
 80172fa:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80172fc:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80172fe:	68bb      	ldr	r3, [r7, #8]
 8017300:	699b      	ldr	r3, [r3, #24]
 8017302:	3b01      	subs	r3, #1
 8017304:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8017306:	4313      	orrs	r3, r2
 8017308:	697a      	ldr	r2, [r7, #20]
 801730a:	4313      	orrs	r3, r2
 801730c:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 801730e:	68fb      	ldr	r3, [r7, #12]
 8017310:	697a      	ldr	r2, [r7, #20]
 8017312:	609a      	str	r2, [r3, #8]
 8017314:	e03b      	b.n	801738e <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8017316:	68fb      	ldr	r3, [r7, #12]
 8017318:	689b      	ldr	r3, [r3, #8]
 801731a:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 801731c:	697b      	ldr	r3, [r7, #20]
 801731e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8017322:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8017326:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8017328:	68bb      	ldr	r3, [r7, #8]
 801732a:	68db      	ldr	r3, [r3, #12]
 801732c:	3b01      	subs	r3, #1
 801732e:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8017330:	68bb      	ldr	r3, [r7, #8]
 8017332:	695b      	ldr	r3, [r3, #20]
 8017334:	3b01      	subs	r3, #1
 8017336:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8017338:	4313      	orrs	r3, r2
 801733a:	697a      	ldr	r2, [r7, #20]
 801733c:	4313      	orrs	r3, r2
 801733e:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8017340:	68fb      	ldr	r3, [r7, #12]
 8017342:	68db      	ldr	r3, [r3, #12]
 8017344:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8017346:	693b      	ldr	r3, [r7, #16]
 8017348:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801734c:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 801734e:	68bb      	ldr	r3, [r7, #8]
 8017350:	681b      	ldr	r3, [r3, #0]
 8017352:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8017354:	68bb      	ldr	r3, [r7, #8]
 8017356:	685b      	ldr	r3, [r3, #4]
 8017358:	3b01      	subs	r3, #1
 801735a:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 801735c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 801735e:	68bb      	ldr	r3, [r7, #8]
 8017360:	689b      	ldr	r3, [r3, #8]
 8017362:	3b01      	subs	r3, #1
 8017364:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8017366:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8017368:	68bb      	ldr	r3, [r7, #8]
 801736a:	691b      	ldr	r3, [r3, #16]
 801736c:	3b01      	subs	r3, #1
 801736e:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8017370:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8017372:	68bb      	ldr	r3, [r7, #8]
 8017374:	699b      	ldr	r3, [r3, #24]
 8017376:	3b01      	subs	r3, #1
 8017378:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 801737a:	4313      	orrs	r3, r2
 801737c:	693a      	ldr	r2, [r7, #16]
 801737e:	4313      	orrs	r3, r2
 8017380:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8017382:	68fb      	ldr	r3, [r7, #12]
 8017384:	697a      	ldr	r2, [r7, #20]
 8017386:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8017388:	68fb      	ldr	r3, [r7, #12]
 801738a:	693a      	ldr	r2, [r7, #16]
 801738c:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 801738e:	2300      	movs	r3, #0
}
 8017390:	4618      	mov	r0, r3
 8017392:	371c      	adds	r7, #28
 8017394:	46bd      	mov	sp, r7
 8017396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801739a:	4770      	bx	lr

0801739c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 801739c:	b580      	push	{r7, lr}
 801739e:	b086      	sub	sp, #24
 80173a0:	af00      	add	r7, sp, #0
 80173a2:	60f8      	str	r0, [r7, #12]
 80173a4:	60b9      	str	r1, [r7, #8]
 80173a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 80173a8:	2300      	movs	r3, #0
 80173aa:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 80173ac:	2300      	movs	r3, #0
 80173ae:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80173b0:	68bb      	ldr	r3, [r7, #8]
 80173b2:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 80173b4:	68bb      	ldr	r3, [r7, #8]
 80173b6:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80173b8:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 80173ba:	68bb      	ldr	r3, [r7, #8]
 80173bc:	689b      	ldr	r3, [r3, #8]
 80173be:	3b01      	subs	r3, #1
 80173c0:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80173c2:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 80173c4:	68bb      	ldr	r3, [r7, #8]
 80173c6:	68db      	ldr	r3, [r3, #12]
 80173c8:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80173ca:	4313      	orrs	r3, r2
 80173cc:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 80173ce:	693a      	ldr	r2, [r7, #16]
 80173d0:	68fb      	ldr	r3, [r7, #12]
 80173d2:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80173d4:	f7fa fda8 	bl	8011f28 <HAL_GetTick>
 80173d8:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80173da:	e010      	b.n	80173fe <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80173e2:	d00c      	beq.n	80173fe <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	d007      	beq.n	80173fa <FMC_SDRAM_SendCommand+0x5e>
 80173ea:	f7fa fd9d 	bl	8011f28 <HAL_GetTick>
 80173ee:	4602      	mov	r2, r0
 80173f0:	697b      	ldr	r3, [r7, #20]
 80173f2:	1ad3      	subs	r3, r2, r3
 80173f4:	687a      	ldr	r2, [r7, #4]
 80173f6:	429a      	cmp	r2, r3
 80173f8:	d201      	bcs.n	80173fe <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 80173fa:	2303      	movs	r3, #3
 80173fc:	e006      	b.n	801740c <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80173fe:	68fb      	ldr	r3, [r7, #12]
 8017400:	699b      	ldr	r3, [r3, #24]
 8017402:	f003 0320 	and.w	r3, r3, #32
 8017406:	2b20      	cmp	r3, #32
 8017408:	d0e8      	beq.n	80173dc <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 801740a:	2300      	movs	r3, #0
}
 801740c:	4618      	mov	r0, r3
 801740e:	3718      	adds	r7, #24
 8017410:	46bd      	mov	sp, r7
 8017412:	bd80      	pop	{r7, pc}

08017414 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8017414:	b480      	push	{r7}
 8017416:	b083      	sub	sp, #12
 8017418:	af00      	add	r7, sp, #0
 801741a:	6078      	str	r0, [r7, #4]
 801741c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	695a      	ldr	r2, [r3, #20]
 8017422:	683b      	ldr	r3, [r7, #0]
 8017424:	005b      	lsls	r3, r3, #1
 8017426:	431a      	orrs	r2, r3
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 801742c:	2300      	movs	r3, #0
}
 801742e:	4618      	mov	r0, r3
 8017430:	370c      	adds	r7, #12
 8017432:	46bd      	mov	sp, r7
 8017434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017438:	4770      	bx	lr

0801743a <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801743a:	b480      	push	{r7}
 801743c:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 801743e:	bf00      	nop
 8017440:	46bd      	mov	sp, r7
 8017442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017446:	4770      	bx	lr

08017448 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8017448:	b480      	push	{r7}
 801744a:	b085      	sub	sp, #20
 801744c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801744e:	f3ef 8305 	mrs	r3, IPSR
 8017452:	60bb      	str	r3, [r7, #8]
  return(result);
 8017454:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8017456:	2b00      	cmp	r3, #0
 8017458:	d10f      	bne.n	801747a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801745a:	f3ef 8310 	mrs	r3, PRIMASK
 801745e:	607b      	str	r3, [r7, #4]
  return(result);
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	2b00      	cmp	r3, #0
 8017464:	d105      	bne.n	8017472 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8017466:	f3ef 8311 	mrs	r3, BASEPRI
 801746a:	603b      	str	r3, [r7, #0]
  return(result);
 801746c:	683b      	ldr	r3, [r7, #0]
 801746e:	2b00      	cmp	r3, #0
 8017470:	d007      	beq.n	8017482 <osKernelInitialize+0x3a>
 8017472:	4b0e      	ldr	r3, [pc, #56]	; (80174ac <osKernelInitialize+0x64>)
 8017474:	681b      	ldr	r3, [r3, #0]
 8017476:	2b02      	cmp	r3, #2
 8017478:	d103      	bne.n	8017482 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 801747a:	f06f 0305 	mvn.w	r3, #5
 801747e:	60fb      	str	r3, [r7, #12]
 8017480:	e00c      	b.n	801749c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8017482:	4b0a      	ldr	r3, [pc, #40]	; (80174ac <osKernelInitialize+0x64>)
 8017484:	681b      	ldr	r3, [r3, #0]
 8017486:	2b00      	cmp	r3, #0
 8017488:	d105      	bne.n	8017496 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801748a:	4b08      	ldr	r3, [pc, #32]	; (80174ac <osKernelInitialize+0x64>)
 801748c:	2201      	movs	r2, #1
 801748e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8017490:	2300      	movs	r3, #0
 8017492:	60fb      	str	r3, [r7, #12]
 8017494:	e002      	b.n	801749c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8017496:	f04f 33ff 	mov.w	r3, #4294967295
 801749a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 801749c:	68fb      	ldr	r3, [r7, #12]
}
 801749e:	4618      	mov	r0, r3
 80174a0:	3714      	adds	r7, #20
 80174a2:	46bd      	mov	sp, r7
 80174a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174a8:	4770      	bx	lr
 80174aa:	bf00      	nop
 80174ac:	20001b88 	.word	0x20001b88

080174b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80174b0:	b580      	push	{r7, lr}
 80174b2:	b084      	sub	sp, #16
 80174b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80174b6:	f3ef 8305 	mrs	r3, IPSR
 80174ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80174bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80174be:	2b00      	cmp	r3, #0
 80174c0:	d10f      	bne.n	80174e2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80174c2:	f3ef 8310 	mrs	r3, PRIMASK
 80174c6:	607b      	str	r3, [r7, #4]
  return(result);
 80174c8:	687b      	ldr	r3, [r7, #4]
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	d105      	bne.n	80174da <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80174ce:	f3ef 8311 	mrs	r3, BASEPRI
 80174d2:	603b      	str	r3, [r7, #0]
  return(result);
 80174d4:	683b      	ldr	r3, [r7, #0]
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d007      	beq.n	80174ea <osKernelStart+0x3a>
 80174da:	4b0f      	ldr	r3, [pc, #60]	; (8017518 <osKernelStart+0x68>)
 80174dc:	681b      	ldr	r3, [r3, #0]
 80174de:	2b02      	cmp	r3, #2
 80174e0:	d103      	bne.n	80174ea <osKernelStart+0x3a>
    stat = osErrorISR;
 80174e2:	f06f 0305 	mvn.w	r3, #5
 80174e6:	60fb      	str	r3, [r7, #12]
 80174e8:	e010      	b.n	801750c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80174ea:	4b0b      	ldr	r3, [pc, #44]	; (8017518 <osKernelStart+0x68>)
 80174ec:	681b      	ldr	r3, [r3, #0]
 80174ee:	2b01      	cmp	r3, #1
 80174f0:	d109      	bne.n	8017506 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80174f2:	f7ff ffa2 	bl	801743a <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80174f6:	4b08      	ldr	r3, [pc, #32]	; (8017518 <osKernelStart+0x68>)
 80174f8:	2202      	movs	r2, #2
 80174fa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80174fc:	f002 fa06 	bl	801990c <vTaskStartScheduler>
      stat = osOK;
 8017500:	2300      	movs	r3, #0
 8017502:	60fb      	str	r3, [r7, #12]
 8017504:	e002      	b.n	801750c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8017506:	f04f 33ff 	mov.w	r3, #4294967295
 801750a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 801750c:	68fb      	ldr	r3, [r7, #12]
}
 801750e:	4618      	mov	r0, r3
 8017510:	3710      	adds	r7, #16
 8017512:	46bd      	mov	sp, r7
 8017514:	bd80      	pop	{r7, pc}
 8017516:	bf00      	nop
 8017518:	20001b88 	.word	0x20001b88

0801751c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801751c:	b580      	push	{r7, lr}
 801751e:	b090      	sub	sp, #64	; 0x40
 8017520:	af04      	add	r7, sp, #16
 8017522:	60f8      	str	r0, [r7, #12]
 8017524:	60b9      	str	r1, [r7, #8]
 8017526:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8017528:	2300      	movs	r3, #0
 801752a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801752c:	f3ef 8305 	mrs	r3, IPSR
 8017530:	61fb      	str	r3, [r7, #28]
  return(result);
 8017532:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8017534:	2b00      	cmp	r3, #0
 8017536:	f040 808f 	bne.w	8017658 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801753a:	f3ef 8310 	mrs	r3, PRIMASK
 801753e:	61bb      	str	r3, [r7, #24]
  return(result);
 8017540:	69bb      	ldr	r3, [r7, #24]
 8017542:	2b00      	cmp	r3, #0
 8017544:	d105      	bne.n	8017552 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8017546:	f3ef 8311 	mrs	r3, BASEPRI
 801754a:	617b      	str	r3, [r7, #20]
  return(result);
 801754c:	697b      	ldr	r3, [r7, #20]
 801754e:	2b00      	cmp	r3, #0
 8017550:	d003      	beq.n	801755a <osThreadNew+0x3e>
 8017552:	4b44      	ldr	r3, [pc, #272]	; (8017664 <osThreadNew+0x148>)
 8017554:	681b      	ldr	r3, [r3, #0]
 8017556:	2b02      	cmp	r3, #2
 8017558:	d07e      	beq.n	8017658 <osThreadNew+0x13c>
 801755a:	68fb      	ldr	r3, [r7, #12]
 801755c:	2b00      	cmp	r3, #0
 801755e:	d07b      	beq.n	8017658 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8017560:	2380      	movs	r3, #128	; 0x80
 8017562:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8017564:	2318      	movs	r3, #24
 8017566:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8017568:	2300      	movs	r3, #0
 801756a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 801756c:	f04f 33ff 	mov.w	r3, #4294967295
 8017570:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	2b00      	cmp	r3, #0
 8017576:	d045      	beq.n	8017604 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	681b      	ldr	r3, [r3, #0]
 801757c:	2b00      	cmp	r3, #0
 801757e:	d002      	beq.n	8017586 <osThreadNew+0x6a>
        name = attr->name;
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	681b      	ldr	r3, [r3, #0]
 8017584:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	699b      	ldr	r3, [r3, #24]
 801758a:	2b00      	cmp	r3, #0
 801758c:	d002      	beq.n	8017594 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	699b      	ldr	r3, [r3, #24]
 8017592:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8017594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017596:	2b00      	cmp	r3, #0
 8017598:	d008      	beq.n	80175ac <osThreadNew+0x90>
 801759a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801759c:	2b38      	cmp	r3, #56	; 0x38
 801759e:	d805      	bhi.n	80175ac <osThreadNew+0x90>
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	685b      	ldr	r3, [r3, #4]
 80175a4:	f003 0301 	and.w	r3, r3, #1
 80175a8:	2b00      	cmp	r3, #0
 80175aa:	d001      	beq.n	80175b0 <osThreadNew+0x94>
        return (NULL);
 80175ac:	2300      	movs	r3, #0
 80175ae:	e054      	b.n	801765a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	695b      	ldr	r3, [r3, #20]
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	d003      	beq.n	80175c0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	695b      	ldr	r3, [r3, #20]
 80175bc:	089b      	lsrs	r3, r3, #2
 80175be:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	689b      	ldr	r3, [r3, #8]
 80175c4:	2b00      	cmp	r3, #0
 80175c6:	d00e      	beq.n	80175e6 <osThreadNew+0xca>
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	68db      	ldr	r3, [r3, #12]
 80175cc:	2b5f      	cmp	r3, #95	; 0x5f
 80175ce:	d90a      	bls.n	80175e6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80175d4:	2b00      	cmp	r3, #0
 80175d6:	d006      	beq.n	80175e6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	695b      	ldr	r3, [r3, #20]
 80175dc:	2b00      	cmp	r3, #0
 80175de:	d002      	beq.n	80175e6 <osThreadNew+0xca>
        mem = 1;
 80175e0:	2301      	movs	r3, #1
 80175e2:	623b      	str	r3, [r7, #32]
 80175e4:	e010      	b.n	8017608 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	689b      	ldr	r3, [r3, #8]
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	d10c      	bne.n	8017608 <osThreadNew+0xec>
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	68db      	ldr	r3, [r3, #12]
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d108      	bne.n	8017608 <osThreadNew+0xec>
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	691b      	ldr	r3, [r3, #16]
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	d104      	bne.n	8017608 <osThreadNew+0xec>
          mem = 0;
 80175fe:	2300      	movs	r3, #0
 8017600:	623b      	str	r3, [r7, #32]
 8017602:	e001      	b.n	8017608 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8017604:	2300      	movs	r3, #0
 8017606:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8017608:	6a3b      	ldr	r3, [r7, #32]
 801760a:	2b01      	cmp	r3, #1
 801760c:	d110      	bne.n	8017630 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801760e:	687b      	ldr	r3, [r7, #4]
 8017610:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8017612:	687a      	ldr	r2, [r7, #4]
 8017614:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8017616:	9202      	str	r2, [sp, #8]
 8017618:	9301      	str	r3, [sp, #4]
 801761a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801761c:	9300      	str	r3, [sp, #0]
 801761e:	68bb      	ldr	r3, [r7, #8]
 8017620:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017622:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017624:	68f8      	ldr	r0, [r7, #12]
 8017626:	f001 ffd1 	bl	80195cc <xTaskCreateStatic>
 801762a:	4603      	mov	r3, r0
 801762c:	613b      	str	r3, [r7, #16]
 801762e:	e013      	b.n	8017658 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8017630:	6a3b      	ldr	r3, [r7, #32]
 8017632:	2b00      	cmp	r3, #0
 8017634:	d110      	bne.n	8017658 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8017636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017638:	b29a      	uxth	r2, r3
 801763a:	f107 0310 	add.w	r3, r7, #16
 801763e:	9301      	str	r3, [sp, #4]
 8017640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017642:	9300      	str	r3, [sp, #0]
 8017644:	68bb      	ldr	r3, [r7, #8]
 8017646:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017648:	68f8      	ldr	r0, [r7, #12]
 801764a:	f002 f819 	bl	8019680 <xTaskCreate>
 801764e:	4603      	mov	r3, r0
 8017650:	2b01      	cmp	r3, #1
 8017652:	d001      	beq.n	8017658 <osThreadNew+0x13c>
          hTask = NULL;
 8017654:	2300      	movs	r3, #0
 8017656:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8017658:	693b      	ldr	r3, [r7, #16]
}
 801765a:	4618      	mov	r0, r3
 801765c:	3730      	adds	r7, #48	; 0x30
 801765e:	46bd      	mov	sp, r7
 8017660:	bd80      	pop	{r7, pc}
 8017662:	bf00      	nop
 8017664:	20001b88 	.word	0x20001b88

08017668 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8017668:	b580      	push	{r7, lr}
 801766a:	b08c      	sub	sp, #48	; 0x30
 801766c:	af02      	add	r7, sp, #8
 801766e:	60f8      	str	r0, [r7, #12]
 8017670:	60b9      	str	r1, [r7, #8]
 8017672:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8017674:	2300      	movs	r3, #0
 8017676:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017678:	f3ef 8305 	mrs	r3, IPSR
 801767c:	61bb      	str	r3, [r7, #24]
  return(result);
 801767e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8017680:	2b00      	cmp	r3, #0
 8017682:	f040 8087 	bne.w	8017794 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017686:	f3ef 8310 	mrs	r3, PRIMASK
 801768a:	617b      	str	r3, [r7, #20]
  return(result);
 801768c:	697b      	ldr	r3, [r7, #20]
 801768e:	2b00      	cmp	r3, #0
 8017690:	d105      	bne.n	801769e <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8017692:	f3ef 8311 	mrs	r3, BASEPRI
 8017696:	613b      	str	r3, [r7, #16]
  return(result);
 8017698:	693b      	ldr	r3, [r7, #16]
 801769a:	2b00      	cmp	r3, #0
 801769c:	d003      	beq.n	80176a6 <osSemaphoreNew+0x3e>
 801769e:	4b40      	ldr	r3, [pc, #256]	; (80177a0 <osSemaphoreNew+0x138>)
 80176a0:	681b      	ldr	r3, [r3, #0]
 80176a2:	2b02      	cmp	r3, #2
 80176a4:	d076      	beq.n	8017794 <osSemaphoreNew+0x12c>
 80176a6:	68fb      	ldr	r3, [r7, #12]
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	d073      	beq.n	8017794 <osSemaphoreNew+0x12c>
 80176ac:	68ba      	ldr	r2, [r7, #8]
 80176ae:	68fb      	ldr	r3, [r7, #12]
 80176b0:	429a      	cmp	r2, r3
 80176b2:	d86f      	bhi.n	8017794 <osSemaphoreNew+0x12c>
    mem = -1;
 80176b4:	f04f 33ff 	mov.w	r3, #4294967295
 80176b8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	2b00      	cmp	r3, #0
 80176be:	d015      	beq.n	80176ec <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	689b      	ldr	r3, [r3, #8]
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	d006      	beq.n	80176d6 <osSemaphoreNew+0x6e>
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	68db      	ldr	r3, [r3, #12]
 80176cc:	2b4f      	cmp	r3, #79	; 0x4f
 80176ce:	d902      	bls.n	80176d6 <osSemaphoreNew+0x6e>
        mem = 1;
 80176d0:	2301      	movs	r3, #1
 80176d2:	623b      	str	r3, [r7, #32]
 80176d4:	e00c      	b.n	80176f0 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	689b      	ldr	r3, [r3, #8]
 80176da:	2b00      	cmp	r3, #0
 80176dc:	d108      	bne.n	80176f0 <osSemaphoreNew+0x88>
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	68db      	ldr	r3, [r3, #12]
 80176e2:	2b00      	cmp	r3, #0
 80176e4:	d104      	bne.n	80176f0 <osSemaphoreNew+0x88>
          mem = 0;
 80176e6:	2300      	movs	r3, #0
 80176e8:	623b      	str	r3, [r7, #32]
 80176ea:	e001      	b.n	80176f0 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80176ec:	2300      	movs	r3, #0
 80176ee:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80176f0:	6a3b      	ldr	r3, [r7, #32]
 80176f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80176f6:	d04d      	beq.n	8017794 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 80176f8:	68fb      	ldr	r3, [r7, #12]
 80176fa:	2b01      	cmp	r3, #1
 80176fc:	d129      	bne.n	8017752 <osSemaphoreNew+0xea>
        if (mem == 1) {
 80176fe:	6a3b      	ldr	r3, [r7, #32]
 8017700:	2b01      	cmp	r3, #1
 8017702:	d10b      	bne.n	801771c <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	689a      	ldr	r2, [r3, #8]
 8017708:	2303      	movs	r3, #3
 801770a:	9300      	str	r3, [sp, #0]
 801770c:	4613      	mov	r3, r2
 801770e:	2200      	movs	r2, #0
 8017710:	2100      	movs	r1, #0
 8017712:	2001      	movs	r0, #1
 8017714:	f000 ffd4 	bl	80186c0 <xQueueGenericCreateStatic>
 8017718:	6278      	str	r0, [r7, #36]	; 0x24
 801771a:	e005      	b.n	8017728 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 801771c:	2203      	movs	r2, #3
 801771e:	2100      	movs	r1, #0
 8017720:	2001      	movs	r0, #1
 8017722:	f001 f840 	bl	80187a6 <xQueueGenericCreate>
 8017726:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8017728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801772a:	2b00      	cmp	r3, #0
 801772c:	d022      	beq.n	8017774 <osSemaphoreNew+0x10c>
 801772e:	68bb      	ldr	r3, [r7, #8]
 8017730:	2b00      	cmp	r3, #0
 8017732:	d01f      	beq.n	8017774 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8017734:	2300      	movs	r3, #0
 8017736:	2200      	movs	r2, #0
 8017738:	2100      	movs	r1, #0
 801773a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801773c:	f001 f8fc 	bl	8018938 <xQueueGenericSend>
 8017740:	4603      	mov	r3, r0
 8017742:	2b01      	cmp	r3, #1
 8017744:	d016      	beq.n	8017774 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8017746:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017748:	f001 fd6f 	bl	801922a <vQueueDelete>
            hSemaphore = NULL;
 801774c:	2300      	movs	r3, #0
 801774e:	627b      	str	r3, [r7, #36]	; 0x24
 8017750:	e010      	b.n	8017774 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8017752:	6a3b      	ldr	r3, [r7, #32]
 8017754:	2b01      	cmp	r3, #1
 8017756:	d108      	bne.n	801776a <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8017758:	687b      	ldr	r3, [r7, #4]
 801775a:	689b      	ldr	r3, [r3, #8]
 801775c:	461a      	mov	r2, r3
 801775e:	68b9      	ldr	r1, [r7, #8]
 8017760:	68f8      	ldr	r0, [r7, #12]
 8017762:	f001 f882 	bl	801886a <xQueueCreateCountingSemaphoreStatic>
 8017766:	6278      	str	r0, [r7, #36]	; 0x24
 8017768:	e004      	b.n	8017774 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 801776a:	68b9      	ldr	r1, [r7, #8]
 801776c:	68f8      	ldr	r0, [r7, #12]
 801776e:	f001 f8b1 	bl	80188d4 <xQueueCreateCountingSemaphore>
 8017772:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8017774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017776:	2b00      	cmp	r3, #0
 8017778:	d00c      	beq.n	8017794 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	2b00      	cmp	r3, #0
 801777e:	d003      	beq.n	8017788 <osSemaphoreNew+0x120>
          name = attr->name;
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	681b      	ldr	r3, [r3, #0]
 8017784:	61fb      	str	r3, [r7, #28]
 8017786:	e001      	b.n	801778c <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8017788:	2300      	movs	r3, #0
 801778a:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 801778c:	69f9      	ldr	r1, [r7, #28]
 801778e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017790:	f001 fe96 	bl	80194c0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8017794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017796:	4618      	mov	r0, r3
 8017798:	3728      	adds	r7, #40	; 0x28
 801779a:	46bd      	mov	sp, r7
 801779c:	bd80      	pop	{r7, pc}
 801779e:	bf00      	nop
 80177a0:	20001b88 	.word	0x20001b88

080177a4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80177a4:	b580      	push	{r7, lr}
 80177a6:	b088      	sub	sp, #32
 80177a8:	af00      	add	r7, sp, #0
 80177aa:	6078      	str	r0, [r7, #4]
 80177ac:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80177b2:	2300      	movs	r3, #0
 80177b4:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80177b6:	69bb      	ldr	r3, [r7, #24]
 80177b8:	2b00      	cmp	r3, #0
 80177ba:	d103      	bne.n	80177c4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80177bc:	f06f 0303 	mvn.w	r3, #3
 80177c0:	61fb      	str	r3, [r7, #28]
 80177c2:	e04b      	b.n	801785c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80177c4:	f3ef 8305 	mrs	r3, IPSR
 80177c8:	617b      	str	r3, [r7, #20]
  return(result);
 80177ca:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	d10f      	bne.n	80177f0 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80177d0:	f3ef 8310 	mrs	r3, PRIMASK
 80177d4:	613b      	str	r3, [r7, #16]
  return(result);
 80177d6:	693b      	ldr	r3, [r7, #16]
 80177d8:	2b00      	cmp	r3, #0
 80177da:	d105      	bne.n	80177e8 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80177dc:	f3ef 8311 	mrs	r3, BASEPRI
 80177e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80177e2:	68fb      	ldr	r3, [r7, #12]
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	d026      	beq.n	8017836 <osSemaphoreAcquire+0x92>
 80177e8:	4b1f      	ldr	r3, [pc, #124]	; (8017868 <osSemaphoreAcquire+0xc4>)
 80177ea:	681b      	ldr	r3, [r3, #0]
 80177ec:	2b02      	cmp	r3, #2
 80177ee:	d122      	bne.n	8017836 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80177f0:	683b      	ldr	r3, [r7, #0]
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	d003      	beq.n	80177fe <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80177f6:	f06f 0303 	mvn.w	r3, #3
 80177fa:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80177fc:	e02d      	b.n	801785a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80177fe:	2300      	movs	r3, #0
 8017800:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8017802:	f107 0308 	add.w	r3, r7, #8
 8017806:	461a      	mov	r2, r3
 8017808:	2100      	movs	r1, #0
 801780a:	69b8      	ldr	r0, [r7, #24]
 801780c:	f001 fc90 	bl	8019130 <xQueueReceiveFromISR>
 8017810:	4603      	mov	r3, r0
 8017812:	2b01      	cmp	r3, #1
 8017814:	d003      	beq.n	801781e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8017816:	f06f 0302 	mvn.w	r3, #2
 801781a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 801781c:	e01d      	b.n	801785a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 801781e:	68bb      	ldr	r3, [r7, #8]
 8017820:	2b00      	cmp	r3, #0
 8017822:	d01a      	beq.n	801785a <osSemaphoreAcquire+0xb6>
 8017824:	4b11      	ldr	r3, [pc, #68]	; (801786c <osSemaphoreAcquire+0xc8>)
 8017826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801782a:	601a      	str	r2, [r3, #0]
 801782c:	f3bf 8f4f 	dsb	sy
 8017830:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8017834:	e011      	b.n	801785a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8017836:	6839      	ldr	r1, [r7, #0]
 8017838:	69b8      	ldr	r0, [r7, #24]
 801783a:	f001 fb71 	bl	8018f20 <xQueueSemaphoreTake>
 801783e:	4603      	mov	r3, r0
 8017840:	2b01      	cmp	r3, #1
 8017842:	d00b      	beq.n	801785c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8017844:	683b      	ldr	r3, [r7, #0]
 8017846:	2b00      	cmp	r3, #0
 8017848:	d003      	beq.n	8017852 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 801784a:	f06f 0301 	mvn.w	r3, #1
 801784e:	61fb      	str	r3, [r7, #28]
 8017850:	e004      	b.n	801785c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8017852:	f06f 0302 	mvn.w	r3, #2
 8017856:	61fb      	str	r3, [r7, #28]
 8017858:	e000      	b.n	801785c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 801785a:	bf00      	nop
      }
    }
  }

  return (stat);
 801785c:	69fb      	ldr	r3, [r7, #28]
}
 801785e:	4618      	mov	r0, r3
 8017860:	3720      	adds	r7, #32
 8017862:	46bd      	mov	sp, r7
 8017864:	bd80      	pop	{r7, pc}
 8017866:	bf00      	nop
 8017868:	20001b88 	.word	0x20001b88
 801786c:	e000ed04 	.word	0xe000ed04

08017870 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8017870:	b580      	push	{r7, lr}
 8017872:	b088      	sub	sp, #32
 8017874:	af00      	add	r7, sp, #0
 8017876:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8017878:	687b      	ldr	r3, [r7, #4]
 801787a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801787c:	2300      	movs	r3, #0
 801787e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8017880:	69bb      	ldr	r3, [r7, #24]
 8017882:	2b00      	cmp	r3, #0
 8017884:	d103      	bne.n	801788e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8017886:	f06f 0303 	mvn.w	r3, #3
 801788a:	61fb      	str	r3, [r7, #28]
 801788c:	e03e      	b.n	801790c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801788e:	f3ef 8305 	mrs	r3, IPSR
 8017892:	617b      	str	r3, [r7, #20]
  return(result);
 8017894:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8017896:	2b00      	cmp	r3, #0
 8017898:	d10f      	bne.n	80178ba <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801789a:	f3ef 8310 	mrs	r3, PRIMASK
 801789e:	613b      	str	r3, [r7, #16]
  return(result);
 80178a0:	693b      	ldr	r3, [r7, #16]
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	d105      	bne.n	80178b2 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80178a6:	f3ef 8311 	mrs	r3, BASEPRI
 80178aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80178ac:	68fb      	ldr	r3, [r7, #12]
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	d01e      	beq.n	80178f0 <osSemaphoreRelease+0x80>
 80178b2:	4b19      	ldr	r3, [pc, #100]	; (8017918 <osSemaphoreRelease+0xa8>)
 80178b4:	681b      	ldr	r3, [r3, #0]
 80178b6:	2b02      	cmp	r3, #2
 80178b8:	d11a      	bne.n	80178f0 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80178ba:	2300      	movs	r3, #0
 80178bc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80178be:	f107 0308 	add.w	r3, r7, #8
 80178c2:	4619      	mov	r1, r3
 80178c4:	69b8      	ldr	r0, [r7, #24]
 80178c6:	f001 f9c5 	bl	8018c54 <xQueueGiveFromISR>
 80178ca:	4603      	mov	r3, r0
 80178cc:	2b01      	cmp	r3, #1
 80178ce:	d003      	beq.n	80178d8 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80178d0:	f06f 0302 	mvn.w	r3, #2
 80178d4:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80178d6:	e018      	b.n	801790a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80178d8:	68bb      	ldr	r3, [r7, #8]
 80178da:	2b00      	cmp	r3, #0
 80178dc:	d015      	beq.n	801790a <osSemaphoreRelease+0x9a>
 80178de:	4b0f      	ldr	r3, [pc, #60]	; (801791c <osSemaphoreRelease+0xac>)
 80178e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80178e4:	601a      	str	r2, [r3, #0]
 80178e6:	f3bf 8f4f 	dsb	sy
 80178ea:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80178ee:	e00c      	b.n	801790a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80178f0:	2300      	movs	r3, #0
 80178f2:	2200      	movs	r2, #0
 80178f4:	2100      	movs	r1, #0
 80178f6:	69b8      	ldr	r0, [r7, #24]
 80178f8:	f001 f81e 	bl	8018938 <xQueueGenericSend>
 80178fc:	4603      	mov	r3, r0
 80178fe:	2b01      	cmp	r3, #1
 8017900:	d004      	beq.n	801790c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8017902:	f06f 0302 	mvn.w	r3, #2
 8017906:	61fb      	str	r3, [r7, #28]
 8017908:	e000      	b.n	801790c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801790a:	bf00      	nop
    }
  }

  return (stat);
 801790c:	69fb      	ldr	r3, [r7, #28]
}
 801790e:	4618      	mov	r0, r3
 8017910:	3720      	adds	r7, #32
 8017912:	46bd      	mov	sp, r7
 8017914:	bd80      	pop	{r7, pc}
 8017916:	bf00      	nop
 8017918:	20001b88 	.word	0x20001b88
 801791c:	e000ed04 	.word	0xe000ed04

08017920 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8017920:	b580      	push	{r7, lr}
 8017922:	b08c      	sub	sp, #48	; 0x30
 8017924:	af02      	add	r7, sp, #8
 8017926:	60f8      	str	r0, [r7, #12]
 8017928:	60b9      	str	r1, [r7, #8]
 801792a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 801792c:	2300      	movs	r3, #0
 801792e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017930:	f3ef 8305 	mrs	r3, IPSR
 8017934:	61bb      	str	r3, [r7, #24]
  return(result);
 8017936:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8017938:	2b00      	cmp	r3, #0
 801793a:	d170      	bne.n	8017a1e <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801793c:	f3ef 8310 	mrs	r3, PRIMASK
 8017940:	617b      	str	r3, [r7, #20]
  return(result);
 8017942:	697b      	ldr	r3, [r7, #20]
 8017944:	2b00      	cmp	r3, #0
 8017946:	d105      	bne.n	8017954 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8017948:	f3ef 8311 	mrs	r3, BASEPRI
 801794c:	613b      	str	r3, [r7, #16]
  return(result);
 801794e:	693b      	ldr	r3, [r7, #16]
 8017950:	2b00      	cmp	r3, #0
 8017952:	d003      	beq.n	801795c <osMessageQueueNew+0x3c>
 8017954:	4b34      	ldr	r3, [pc, #208]	; (8017a28 <osMessageQueueNew+0x108>)
 8017956:	681b      	ldr	r3, [r3, #0]
 8017958:	2b02      	cmp	r3, #2
 801795a:	d060      	beq.n	8017a1e <osMessageQueueNew+0xfe>
 801795c:	68fb      	ldr	r3, [r7, #12]
 801795e:	2b00      	cmp	r3, #0
 8017960:	d05d      	beq.n	8017a1e <osMessageQueueNew+0xfe>
 8017962:	68bb      	ldr	r3, [r7, #8]
 8017964:	2b00      	cmp	r3, #0
 8017966:	d05a      	beq.n	8017a1e <osMessageQueueNew+0xfe>
    mem = -1;
 8017968:	f04f 33ff 	mov.w	r3, #4294967295
 801796c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	2b00      	cmp	r3, #0
 8017972:	d029      	beq.n	80179c8 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8017974:	687b      	ldr	r3, [r7, #4]
 8017976:	689b      	ldr	r3, [r3, #8]
 8017978:	2b00      	cmp	r3, #0
 801797a:	d012      	beq.n	80179a2 <osMessageQueueNew+0x82>
 801797c:	687b      	ldr	r3, [r7, #4]
 801797e:	68db      	ldr	r3, [r3, #12]
 8017980:	2b4f      	cmp	r3, #79	; 0x4f
 8017982:	d90e      	bls.n	80179a2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8017984:	687b      	ldr	r3, [r7, #4]
 8017986:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8017988:	2b00      	cmp	r3, #0
 801798a:	d00a      	beq.n	80179a2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801798c:	687b      	ldr	r3, [r7, #4]
 801798e:	695a      	ldr	r2, [r3, #20]
 8017990:	68fb      	ldr	r3, [r7, #12]
 8017992:	68b9      	ldr	r1, [r7, #8]
 8017994:	fb01 f303 	mul.w	r3, r1, r3
 8017998:	429a      	cmp	r2, r3
 801799a:	d302      	bcc.n	80179a2 <osMessageQueueNew+0x82>
        mem = 1;
 801799c:	2301      	movs	r3, #1
 801799e:	623b      	str	r3, [r7, #32]
 80179a0:	e014      	b.n	80179cc <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80179a2:	687b      	ldr	r3, [r7, #4]
 80179a4:	689b      	ldr	r3, [r3, #8]
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	d110      	bne.n	80179cc <osMessageQueueNew+0xac>
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	68db      	ldr	r3, [r3, #12]
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	d10c      	bne.n	80179cc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	d108      	bne.n	80179cc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	695b      	ldr	r3, [r3, #20]
 80179be:	2b00      	cmp	r3, #0
 80179c0:	d104      	bne.n	80179cc <osMessageQueueNew+0xac>
          mem = 0;
 80179c2:	2300      	movs	r3, #0
 80179c4:	623b      	str	r3, [r7, #32]
 80179c6:	e001      	b.n	80179cc <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80179c8:	2300      	movs	r3, #0
 80179ca:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80179cc:	6a3b      	ldr	r3, [r7, #32]
 80179ce:	2b01      	cmp	r3, #1
 80179d0:	d10c      	bne.n	80179ec <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	691a      	ldr	r2, [r3, #16]
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	6899      	ldr	r1, [r3, #8]
 80179da:	2300      	movs	r3, #0
 80179dc:	9300      	str	r3, [sp, #0]
 80179de:	460b      	mov	r3, r1
 80179e0:	68b9      	ldr	r1, [r7, #8]
 80179e2:	68f8      	ldr	r0, [r7, #12]
 80179e4:	f000 fe6c 	bl	80186c0 <xQueueGenericCreateStatic>
 80179e8:	6278      	str	r0, [r7, #36]	; 0x24
 80179ea:	e008      	b.n	80179fe <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 80179ec:	6a3b      	ldr	r3, [r7, #32]
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	d105      	bne.n	80179fe <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 80179f2:	2200      	movs	r2, #0
 80179f4:	68b9      	ldr	r1, [r7, #8]
 80179f6:	68f8      	ldr	r0, [r7, #12]
 80179f8:	f000 fed5 	bl	80187a6 <xQueueGenericCreate>
 80179fc:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80179fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a00:	2b00      	cmp	r3, #0
 8017a02:	d00c      	beq.n	8017a1e <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	2b00      	cmp	r3, #0
 8017a08:	d003      	beq.n	8017a12 <osMessageQueueNew+0xf2>
        name = attr->name;
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	681b      	ldr	r3, [r3, #0]
 8017a0e:	61fb      	str	r3, [r7, #28]
 8017a10:	e001      	b.n	8017a16 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8017a12:	2300      	movs	r3, #0
 8017a14:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8017a16:	69f9      	ldr	r1, [r7, #28]
 8017a18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017a1a:	f001 fd51 	bl	80194c0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8017a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017a20:	4618      	mov	r0, r3
 8017a22:	3728      	adds	r7, #40	; 0x28
 8017a24:	46bd      	mov	sp, r7
 8017a26:	bd80      	pop	{r7, pc}
 8017a28:	20001b88 	.word	0x20001b88

08017a2c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8017a2c:	b580      	push	{r7, lr}
 8017a2e:	b08a      	sub	sp, #40	; 0x28
 8017a30:	af00      	add	r7, sp, #0
 8017a32:	60f8      	str	r0, [r7, #12]
 8017a34:	60b9      	str	r1, [r7, #8]
 8017a36:	603b      	str	r3, [r7, #0]
 8017a38:	4613      	mov	r3, r2
 8017a3a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8017a3c:	68fb      	ldr	r3, [r7, #12]
 8017a3e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8017a40:	2300      	movs	r3, #0
 8017a42:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017a44:	f3ef 8305 	mrs	r3, IPSR
 8017a48:	61fb      	str	r3, [r7, #28]
  return(result);
 8017a4a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	d10f      	bne.n	8017a70 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017a50:	f3ef 8310 	mrs	r3, PRIMASK
 8017a54:	61bb      	str	r3, [r7, #24]
  return(result);
 8017a56:	69bb      	ldr	r3, [r7, #24]
 8017a58:	2b00      	cmp	r3, #0
 8017a5a:	d105      	bne.n	8017a68 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8017a5c:	f3ef 8311 	mrs	r3, BASEPRI
 8017a60:	617b      	str	r3, [r7, #20]
  return(result);
 8017a62:	697b      	ldr	r3, [r7, #20]
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d02c      	beq.n	8017ac2 <osMessageQueuePut+0x96>
 8017a68:	4b28      	ldr	r3, [pc, #160]	; (8017b0c <osMessageQueuePut+0xe0>)
 8017a6a:	681b      	ldr	r3, [r3, #0]
 8017a6c:	2b02      	cmp	r3, #2
 8017a6e:	d128      	bne.n	8017ac2 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8017a70:	6a3b      	ldr	r3, [r7, #32]
 8017a72:	2b00      	cmp	r3, #0
 8017a74:	d005      	beq.n	8017a82 <osMessageQueuePut+0x56>
 8017a76:	68bb      	ldr	r3, [r7, #8]
 8017a78:	2b00      	cmp	r3, #0
 8017a7a:	d002      	beq.n	8017a82 <osMessageQueuePut+0x56>
 8017a7c:	683b      	ldr	r3, [r7, #0]
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	d003      	beq.n	8017a8a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8017a82:	f06f 0303 	mvn.w	r3, #3
 8017a86:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8017a88:	e039      	b.n	8017afe <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8017a8a:	2300      	movs	r3, #0
 8017a8c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8017a8e:	f107 0210 	add.w	r2, r7, #16
 8017a92:	2300      	movs	r3, #0
 8017a94:	68b9      	ldr	r1, [r7, #8]
 8017a96:	6a38      	ldr	r0, [r7, #32]
 8017a98:	f001 f848 	bl	8018b2c <xQueueGenericSendFromISR>
 8017a9c:	4603      	mov	r3, r0
 8017a9e:	2b01      	cmp	r3, #1
 8017aa0:	d003      	beq.n	8017aaa <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8017aa2:	f06f 0302 	mvn.w	r3, #2
 8017aa6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8017aa8:	e029      	b.n	8017afe <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8017aaa:	693b      	ldr	r3, [r7, #16]
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	d026      	beq.n	8017afe <osMessageQueuePut+0xd2>
 8017ab0:	4b17      	ldr	r3, [pc, #92]	; (8017b10 <osMessageQueuePut+0xe4>)
 8017ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017ab6:	601a      	str	r2, [r3, #0]
 8017ab8:	f3bf 8f4f 	dsb	sy
 8017abc:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8017ac0:	e01d      	b.n	8017afe <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8017ac2:	6a3b      	ldr	r3, [r7, #32]
 8017ac4:	2b00      	cmp	r3, #0
 8017ac6:	d002      	beq.n	8017ace <osMessageQueuePut+0xa2>
 8017ac8:	68bb      	ldr	r3, [r7, #8]
 8017aca:	2b00      	cmp	r3, #0
 8017acc:	d103      	bne.n	8017ad6 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8017ace:	f06f 0303 	mvn.w	r3, #3
 8017ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8017ad4:	e014      	b.n	8017b00 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8017ad6:	2300      	movs	r3, #0
 8017ad8:	683a      	ldr	r2, [r7, #0]
 8017ada:	68b9      	ldr	r1, [r7, #8]
 8017adc:	6a38      	ldr	r0, [r7, #32]
 8017ade:	f000 ff2b 	bl	8018938 <xQueueGenericSend>
 8017ae2:	4603      	mov	r3, r0
 8017ae4:	2b01      	cmp	r3, #1
 8017ae6:	d00b      	beq.n	8017b00 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8017ae8:	683b      	ldr	r3, [r7, #0]
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	d003      	beq.n	8017af6 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8017aee:	f06f 0301 	mvn.w	r3, #1
 8017af2:	627b      	str	r3, [r7, #36]	; 0x24
 8017af4:	e004      	b.n	8017b00 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8017af6:	f06f 0302 	mvn.w	r3, #2
 8017afa:	627b      	str	r3, [r7, #36]	; 0x24
 8017afc:	e000      	b.n	8017b00 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8017afe:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8017b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017b02:	4618      	mov	r0, r3
 8017b04:	3728      	adds	r7, #40	; 0x28
 8017b06:	46bd      	mov	sp, r7
 8017b08:	bd80      	pop	{r7, pc}
 8017b0a:	bf00      	nop
 8017b0c:	20001b88 	.word	0x20001b88
 8017b10:	e000ed04 	.word	0xe000ed04

08017b14 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8017b14:	b580      	push	{r7, lr}
 8017b16:	b08a      	sub	sp, #40	; 0x28
 8017b18:	af00      	add	r7, sp, #0
 8017b1a:	60f8      	str	r0, [r7, #12]
 8017b1c:	60b9      	str	r1, [r7, #8]
 8017b1e:	607a      	str	r2, [r7, #4]
 8017b20:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8017b22:	68fb      	ldr	r3, [r7, #12]
 8017b24:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8017b26:	2300      	movs	r3, #0
 8017b28:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017b2a:	f3ef 8305 	mrs	r3, IPSR
 8017b2e:	61fb      	str	r3, [r7, #28]
  return(result);
 8017b30:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d10f      	bne.n	8017b56 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017b36:	f3ef 8310 	mrs	r3, PRIMASK
 8017b3a:	61bb      	str	r3, [r7, #24]
  return(result);
 8017b3c:	69bb      	ldr	r3, [r7, #24]
 8017b3e:	2b00      	cmp	r3, #0
 8017b40:	d105      	bne.n	8017b4e <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8017b42:	f3ef 8311 	mrs	r3, BASEPRI
 8017b46:	617b      	str	r3, [r7, #20]
  return(result);
 8017b48:	697b      	ldr	r3, [r7, #20]
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	d02c      	beq.n	8017ba8 <osMessageQueueGet+0x94>
 8017b4e:	4b28      	ldr	r3, [pc, #160]	; (8017bf0 <osMessageQueueGet+0xdc>)
 8017b50:	681b      	ldr	r3, [r3, #0]
 8017b52:	2b02      	cmp	r3, #2
 8017b54:	d128      	bne.n	8017ba8 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8017b56:	6a3b      	ldr	r3, [r7, #32]
 8017b58:	2b00      	cmp	r3, #0
 8017b5a:	d005      	beq.n	8017b68 <osMessageQueueGet+0x54>
 8017b5c:	68bb      	ldr	r3, [r7, #8]
 8017b5e:	2b00      	cmp	r3, #0
 8017b60:	d002      	beq.n	8017b68 <osMessageQueueGet+0x54>
 8017b62:	683b      	ldr	r3, [r7, #0]
 8017b64:	2b00      	cmp	r3, #0
 8017b66:	d003      	beq.n	8017b70 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8017b68:	f06f 0303 	mvn.w	r3, #3
 8017b6c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8017b6e:	e038      	b.n	8017be2 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8017b70:	2300      	movs	r3, #0
 8017b72:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8017b74:	f107 0310 	add.w	r3, r7, #16
 8017b78:	461a      	mov	r2, r3
 8017b7a:	68b9      	ldr	r1, [r7, #8]
 8017b7c:	6a38      	ldr	r0, [r7, #32]
 8017b7e:	f001 fad7 	bl	8019130 <xQueueReceiveFromISR>
 8017b82:	4603      	mov	r3, r0
 8017b84:	2b01      	cmp	r3, #1
 8017b86:	d003      	beq.n	8017b90 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8017b88:	f06f 0302 	mvn.w	r3, #2
 8017b8c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8017b8e:	e028      	b.n	8017be2 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8017b90:	693b      	ldr	r3, [r7, #16]
 8017b92:	2b00      	cmp	r3, #0
 8017b94:	d025      	beq.n	8017be2 <osMessageQueueGet+0xce>
 8017b96:	4b17      	ldr	r3, [pc, #92]	; (8017bf4 <osMessageQueueGet+0xe0>)
 8017b98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017b9c:	601a      	str	r2, [r3, #0]
 8017b9e:	f3bf 8f4f 	dsb	sy
 8017ba2:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8017ba6:	e01c      	b.n	8017be2 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8017ba8:	6a3b      	ldr	r3, [r7, #32]
 8017baa:	2b00      	cmp	r3, #0
 8017bac:	d002      	beq.n	8017bb4 <osMessageQueueGet+0xa0>
 8017bae:	68bb      	ldr	r3, [r7, #8]
 8017bb0:	2b00      	cmp	r3, #0
 8017bb2:	d103      	bne.n	8017bbc <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8017bb4:	f06f 0303 	mvn.w	r3, #3
 8017bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8017bba:	e013      	b.n	8017be4 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8017bbc:	683a      	ldr	r2, [r7, #0]
 8017bbe:	68b9      	ldr	r1, [r7, #8]
 8017bc0:	6a38      	ldr	r0, [r7, #32]
 8017bc2:	f001 f8d1 	bl	8018d68 <xQueueReceive>
 8017bc6:	4603      	mov	r3, r0
 8017bc8:	2b01      	cmp	r3, #1
 8017bca:	d00b      	beq.n	8017be4 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8017bcc:	683b      	ldr	r3, [r7, #0]
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	d003      	beq.n	8017bda <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8017bd2:	f06f 0301 	mvn.w	r3, #1
 8017bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8017bd8:	e004      	b.n	8017be4 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8017bda:	f06f 0302 	mvn.w	r3, #2
 8017bde:	627b      	str	r3, [r7, #36]	; 0x24
 8017be0:	e000      	b.n	8017be4 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8017be2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8017be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017be6:	4618      	mov	r0, r3
 8017be8:	3728      	adds	r7, #40	; 0x28
 8017bea:	46bd      	mov	sp, r7
 8017bec:	bd80      	pop	{r7, pc}
 8017bee:	bf00      	nop
 8017bf0:	20001b88 	.word	0x20001b88
 8017bf4:	e000ed04 	.word	0xe000ed04

08017bf8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8017bf8:	b480      	push	{r7}
 8017bfa:	b085      	sub	sp, #20
 8017bfc:	af00      	add	r7, sp, #0
 8017bfe:	60f8      	str	r0, [r7, #12]
 8017c00:	60b9      	str	r1, [r7, #8]
 8017c02:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8017c04:	68fb      	ldr	r3, [r7, #12]
 8017c06:	4a07      	ldr	r2, [pc, #28]	; (8017c24 <vApplicationGetIdleTaskMemory+0x2c>)
 8017c08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8017c0a:	68bb      	ldr	r3, [r7, #8]
 8017c0c:	4a06      	ldr	r2, [pc, #24]	; (8017c28 <vApplicationGetIdleTaskMemory+0x30>)
 8017c0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8017c10:	687b      	ldr	r3, [r7, #4]
 8017c12:	2280      	movs	r2, #128	; 0x80
 8017c14:	601a      	str	r2, [r3, #0]
}
 8017c16:	bf00      	nop
 8017c18:	3714      	adds	r7, #20
 8017c1a:	46bd      	mov	sp, r7
 8017c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c20:	4770      	bx	lr
 8017c22:	bf00      	nop
 8017c24:	20001b8c 	.word	0x20001b8c
 8017c28:	20001bec 	.word	0x20001bec

08017c2c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8017c2c:	b480      	push	{r7}
 8017c2e:	b085      	sub	sp, #20
 8017c30:	af00      	add	r7, sp, #0
 8017c32:	60f8      	str	r0, [r7, #12]
 8017c34:	60b9      	str	r1, [r7, #8]
 8017c36:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8017c38:	68fb      	ldr	r3, [r7, #12]
 8017c3a:	4a07      	ldr	r2, [pc, #28]	; (8017c58 <vApplicationGetTimerTaskMemory+0x2c>)
 8017c3c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8017c3e:	68bb      	ldr	r3, [r7, #8]
 8017c40:	4a06      	ldr	r2, [pc, #24]	; (8017c5c <vApplicationGetTimerTaskMemory+0x30>)
 8017c42:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8017c44:	687b      	ldr	r3, [r7, #4]
 8017c46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017c4a:	601a      	str	r2, [r3, #0]
}
 8017c4c:	bf00      	nop
 8017c4e:	3714      	adds	r7, #20
 8017c50:	46bd      	mov	sp, r7
 8017c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c56:	4770      	bx	lr
 8017c58:	20001dec 	.word	0x20001dec
 8017c5c:	20001e4c 	.word	0x20001e4c

08017c60 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8017c60:	b580      	push	{r7, lr}
 8017c62:	b08a      	sub	sp, #40	; 0x28
 8017c64:	af00      	add	r7, sp, #0
 8017c66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8017c68:	2300      	movs	r3, #0
 8017c6a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8017c6c:	f001 feb2 	bl	80199d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8017c70:	4b57      	ldr	r3, [pc, #348]	; (8017dd0 <pvPortMalloc+0x170>)
 8017c72:	681b      	ldr	r3, [r3, #0]
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	d101      	bne.n	8017c7c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8017c78:	f000 f90c 	bl	8017e94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8017c7c:	4b55      	ldr	r3, [pc, #340]	; (8017dd4 <pvPortMalloc+0x174>)
 8017c7e:	681a      	ldr	r2, [r3, #0]
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	4013      	ands	r3, r2
 8017c84:	2b00      	cmp	r3, #0
 8017c86:	f040 808c 	bne.w	8017da2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8017c8a:	687b      	ldr	r3, [r7, #4]
 8017c8c:	2b00      	cmp	r3, #0
 8017c8e:	d01c      	beq.n	8017cca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8017c90:	2208      	movs	r2, #8
 8017c92:	687b      	ldr	r3, [r7, #4]
 8017c94:	4413      	add	r3, r2
 8017c96:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	f003 0307 	and.w	r3, r3, #7
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	d013      	beq.n	8017cca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	f023 0307 	bic.w	r3, r3, #7
 8017ca8:	3308      	adds	r3, #8
 8017caa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	f003 0307 	and.w	r3, r3, #7
 8017cb2:	2b00      	cmp	r3, #0
 8017cb4:	d009      	beq.n	8017cca <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8017cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cba:	f383 8811 	msr	BASEPRI, r3
 8017cbe:	f3bf 8f6f 	isb	sy
 8017cc2:	f3bf 8f4f 	dsb	sy
 8017cc6:	617b      	str	r3, [r7, #20]
 8017cc8:	e7fe      	b.n	8017cc8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	d068      	beq.n	8017da2 <pvPortMalloc+0x142>
 8017cd0:	4b41      	ldr	r3, [pc, #260]	; (8017dd8 <pvPortMalloc+0x178>)
 8017cd2:	681b      	ldr	r3, [r3, #0]
 8017cd4:	687a      	ldr	r2, [r7, #4]
 8017cd6:	429a      	cmp	r2, r3
 8017cd8:	d863      	bhi.n	8017da2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8017cda:	4b40      	ldr	r3, [pc, #256]	; (8017ddc <pvPortMalloc+0x17c>)
 8017cdc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8017cde:	4b3f      	ldr	r3, [pc, #252]	; (8017ddc <pvPortMalloc+0x17c>)
 8017ce0:	681b      	ldr	r3, [r3, #0]
 8017ce2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017ce4:	e004      	b.n	8017cf0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8017ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ce8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8017cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cec:	681b      	ldr	r3, [r3, #0]
 8017cee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cf2:	685b      	ldr	r3, [r3, #4]
 8017cf4:	687a      	ldr	r2, [r7, #4]
 8017cf6:	429a      	cmp	r2, r3
 8017cf8:	d903      	bls.n	8017d02 <pvPortMalloc+0xa2>
 8017cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cfc:	681b      	ldr	r3, [r3, #0]
 8017cfe:	2b00      	cmp	r3, #0
 8017d00:	d1f1      	bne.n	8017ce6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8017d02:	4b33      	ldr	r3, [pc, #204]	; (8017dd0 <pvPortMalloc+0x170>)
 8017d04:	681b      	ldr	r3, [r3, #0]
 8017d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017d08:	429a      	cmp	r2, r3
 8017d0a:	d04a      	beq.n	8017da2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8017d0c:	6a3b      	ldr	r3, [r7, #32]
 8017d0e:	681b      	ldr	r3, [r3, #0]
 8017d10:	2208      	movs	r2, #8
 8017d12:	4413      	add	r3, r2
 8017d14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8017d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d18:	681a      	ldr	r2, [r3, #0]
 8017d1a:	6a3b      	ldr	r3, [r7, #32]
 8017d1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8017d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d20:	685a      	ldr	r2, [r3, #4]
 8017d22:	687b      	ldr	r3, [r7, #4]
 8017d24:	1ad2      	subs	r2, r2, r3
 8017d26:	2308      	movs	r3, #8
 8017d28:	005b      	lsls	r3, r3, #1
 8017d2a:	429a      	cmp	r2, r3
 8017d2c:	d91e      	bls.n	8017d6c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8017d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	4413      	add	r3, r2
 8017d34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017d36:	69bb      	ldr	r3, [r7, #24]
 8017d38:	f003 0307 	and.w	r3, r3, #7
 8017d3c:	2b00      	cmp	r3, #0
 8017d3e:	d009      	beq.n	8017d54 <pvPortMalloc+0xf4>
 8017d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d44:	f383 8811 	msr	BASEPRI, r3
 8017d48:	f3bf 8f6f 	isb	sy
 8017d4c:	f3bf 8f4f 	dsb	sy
 8017d50:	613b      	str	r3, [r7, #16]
 8017d52:	e7fe      	b.n	8017d52 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8017d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d56:	685a      	ldr	r2, [r3, #4]
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	1ad2      	subs	r2, r2, r3
 8017d5c:	69bb      	ldr	r3, [r7, #24]
 8017d5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8017d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d62:	687a      	ldr	r2, [r7, #4]
 8017d64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8017d66:	69b8      	ldr	r0, [r7, #24]
 8017d68:	f000 f8f6 	bl	8017f58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8017d6c:	4b1a      	ldr	r3, [pc, #104]	; (8017dd8 <pvPortMalloc+0x178>)
 8017d6e:	681a      	ldr	r2, [r3, #0]
 8017d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d72:	685b      	ldr	r3, [r3, #4]
 8017d74:	1ad3      	subs	r3, r2, r3
 8017d76:	4a18      	ldr	r2, [pc, #96]	; (8017dd8 <pvPortMalloc+0x178>)
 8017d78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8017d7a:	4b17      	ldr	r3, [pc, #92]	; (8017dd8 <pvPortMalloc+0x178>)
 8017d7c:	681a      	ldr	r2, [r3, #0]
 8017d7e:	4b18      	ldr	r3, [pc, #96]	; (8017de0 <pvPortMalloc+0x180>)
 8017d80:	681b      	ldr	r3, [r3, #0]
 8017d82:	429a      	cmp	r2, r3
 8017d84:	d203      	bcs.n	8017d8e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8017d86:	4b14      	ldr	r3, [pc, #80]	; (8017dd8 <pvPortMalloc+0x178>)
 8017d88:	681b      	ldr	r3, [r3, #0]
 8017d8a:	4a15      	ldr	r2, [pc, #84]	; (8017de0 <pvPortMalloc+0x180>)
 8017d8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8017d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d90:	685a      	ldr	r2, [r3, #4]
 8017d92:	4b10      	ldr	r3, [pc, #64]	; (8017dd4 <pvPortMalloc+0x174>)
 8017d94:	681b      	ldr	r3, [r3, #0]
 8017d96:	431a      	orrs	r2, r3
 8017d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8017d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d9e:	2200      	movs	r2, #0
 8017da0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8017da2:	f001 fe25 	bl	80199f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8017da6:	69fb      	ldr	r3, [r7, #28]
 8017da8:	f003 0307 	and.w	r3, r3, #7
 8017dac:	2b00      	cmp	r3, #0
 8017dae:	d009      	beq.n	8017dc4 <pvPortMalloc+0x164>
 8017db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017db4:	f383 8811 	msr	BASEPRI, r3
 8017db8:	f3bf 8f6f 	isb	sy
 8017dbc:	f3bf 8f4f 	dsb	sy
 8017dc0:	60fb      	str	r3, [r7, #12]
 8017dc2:	e7fe      	b.n	8017dc2 <pvPortMalloc+0x162>
	return pvReturn;
 8017dc4:	69fb      	ldr	r3, [r7, #28]
}
 8017dc6:	4618      	mov	r0, r3
 8017dc8:	3728      	adds	r7, #40	; 0x28
 8017dca:	46bd      	mov	sp, r7
 8017dcc:	bd80      	pop	{r7, pc}
 8017dce:	bf00      	nop
 8017dd0:	20012254 	.word	0x20012254
 8017dd4:	20012260 	.word	0x20012260
 8017dd8:	20012258 	.word	0x20012258
 8017ddc:	2001224c 	.word	0x2001224c
 8017de0:	2001225c 	.word	0x2001225c

08017de4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8017de4:	b580      	push	{r7, lr}
 8017de6:	b086      	sub	sp, #24
 8017de8:	af00      	add	r7, sp, #0
 8017dea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	d046      	beq.n	8017e84 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8017df6:	2308      	movs	r3, #8
 8017df8:	425b      	negs	r3, r3
 8017dfa:	697a      	ldr	r2, [r7, #20]
 8017dfc:	4413      	add	r3, r2
 8017dfe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8017e00:	697b      	ldr	r3, [r7, #20]
 8017e02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8017e04:	693b      	ldr	r3, [r7, #16]
 8017e06:	685a      	ldr	r2, [r3, #4]
 8017e08:	4b20      	ldr	r3, [pc, #128]	; (8017e8c <vPortFree+0xa8>)
 8017e0a:	681b      	ldr	r3, [r3, #0]
 8017e0c:	4013      	ands	r3, r2
 8017e0e:	2b00      	cmp	r3, #0
 8017e10:	d109      	bne.n	8017e26 <vPortFree+0x42>
 8017e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e16:	f383 8811 	msr	BASEPRI, r3
 8017e1a:	f3bf 8f6f 	isb	sy
 8017e1e:	f3bf 8f4f 	dsb	sy
 8017e22:	60fb      	str	r3, [r7, #12]
 8017e24:	e7fe      	b.n	8017e24 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8017e26:	693b      	ldr	r3, [r7, #16]
 8017e28:	681b      	ldr	r3, [r3, #0]
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	d009      	beq.n	8017e42 <vPortFree+0x5e>
 8017e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e32:	f383 8811 	msr	BASEPRI, r3
 8017e36:	f3bf 8f6f 	isb	sy
 8017e3a:	f3bf 8f4f 	dsb	sy
 8017e3e:	60bb      	str	r3, [r7, #8]
 8017e40:	e7fe      	b.n	8017e40 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8017e42:	693b      	ldr	r3, [r7, #16]
 8017e44:	685a      	ldr	r2, [r3, #4]
 8017e46:	4b11      	ldr	r3, [pc, #68]	; (8017e8c <vPortFree+0xa8>)
 8017e48:	681b      	ldr	r3, [r3, #0]
 8017e4a:	4013      	ands	r3, r2
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	d019      	beq.n	8017e84 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8017e50:	693b      	ldr	r3, [r7, #16]
 8017e52:	681b      	ldr	r3, [r3, #0]
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	d115      	bne.n	8017e84 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8017e58:	693b      	ldr	r3, [r7, #16]
 8017e5a:	685a      	ldr	r2, [r3, #4]
 8017e5c:	4b0b      	ldr	r3, [pc, #44]	; (8017e8c <vPortFree+0xa8>)
 8017e5e:	681b      	ldr	r3, [r3, #0]
 8017e60:	43db      	mvns	r3, r3
 8017e62:	401a      	ands	r2, r3
 8017e64:	693b      	ldr	r3, [r7, #16]
 8017e66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8017e68:	f001 fdb4 	bl	80199d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8017e6c:	693b      	ldr	r3, [r7, #16]
 8017e6e:	685a      	ldr	r2, [r3, #4]
 8017e70:	4b07      	ldr	r3, [pc, #28]	; (8017e90 <vPortFree+0xac>)
 8017e72:	681b      	ldr	r3, [r3, #0]
 8017e74:	4413      	add	r3, r2
 8017e76:	4a06      	ldr	r2, [pc, #24]	; (8017e90 <vPortFree+0xac>)
 8017e78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8017e7a:	6938      	ldr	r0, [r7, #16]
 8017e7c:	f000 f86c 	bl	8017f58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8017e80:	f001 fdb6 	bl	80199f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8017e84:	bf00      	nop
 8017e86:	3718      	adds	r7, #24
 8017e88:	46bd      	mov	sp, r7
 8017e8a:	bd80      	pop	{r7, pc}
 8017e8c:	20012260 	.word	0x20012260
 8017e90:	20012258 	.word	0x20012258

08017e94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8017e94:	b480      	push	{r7}
 8017e96:	b085      	sub	sp, #20
 8017e98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8017e9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8017e9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8017ea0:	4b27      	ldr	r3, [pc, #156]	; (8017f40 <prvHeapInit+0xac>)
 8017ea2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8017ea4:	68fb      	ldr	r3, [r7, #12]
 8017ea6:	f003 0307 	and.w	r3, r3, #7
 8017eaa:	2b00      	cmp	r3, #0
 8017eac:	d00c      	beq.n	8017ec8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8017eae:	68fb      	ldr	r3, [r7, #12]
 8017eb0:	3307      	adds	r3, #7
 8017eb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017eb4:	68fb      	ldr	r3, [r7, #12]
 8017eb6:	f023 0307 	bic.w	r3, r3, #7
 8017eba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8017ebc:	68ba      	ldr	r2, [r7, #8]
 8017ebe:	68fb      	ldr	r3, [r7, #12]
 8017ec0:	1ad3      	subs	r3, r2, r3
 8017ec2:	4a1f      	ldr	r2, [pc, #124]	; (8017f40 <prvHeapInit+0xac>)
 8017ec4:	4413      	add	r3, r2
 8017ec6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8017ec8:	68fb      	ldr	r3, [r7, #12]
 8017eca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8017ecc:	4a1d      	ldr	r2, [pc, #116]	; (8017f44 <prvHeapInit+0xb0>)
 8017ece:	687b      	ldr	r3, [r7, #4]
 8017ed0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8017ed2:	4b1c      	ldr	r3, [pc, #112]	; (8017f44 <prvHeapInit+0xb0>)
 8017ed4:	2200      	movs	r2, #0
 8017ed6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	68ba      	ldr	r2, [r7, #8]
 8017edc:	4413      	add	r3, r2
 8017ede:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8017ee0:	2208      	movs	r2, #8
 8017ee2:	68fb      	ldr	r3, [r7, #12]
 8017ee4:	1a9b      	subs	r3, r3, r2
 8017ee6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017ee8:	68fb      	ldr	r3, [r7, #12]
 8017eea:	f023 0307 	bic.w	r3, r3, #7
 8017eee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8017ef0:	68fb      	ldr	r3, [r7, #12]
 8017ef2:	4a15      	ldr	r2, [pc, #84]	; (8017f48 <prvHeapInit+0xb4>)
 8017ef4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8017ef6:	4b14      	ldr	r3, [pc, #80]	; (8017f48 <prvHeapInit+0xb4>)
 8017ef8:	681b      	ldr	r3, [r3, #0]
 8017efa:	2200      	movs	r2, #0
 8017efc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8017efe:	4b12      	ldr	r3, [pc, #72]	; (8017f48 <prvHeapInit+0xb4>)
 8017f00:	681b      	ldr	r3, [r3, #0]
 8017f02:	2200      	movs	r2, #0
 8017f04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8017f06:	687b      	ldr	r3, [r7, #4]
 8017f08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8017f0a:	683b      	ldr	r3, [r7, #0]
 8017f0c:	68fa      	ldr	r2, [r7, #12]
 8017f0e:	1ad2      	subs	r2, r2, r3
 8017f10:	683b      	ldr	r3, [r7, #0]
 8017f12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8017f14:	4b0c      	ldr	r3, [pc, #48]	; (8017f48 <prvHeapInit+0xb4>)
 8017f16:	681a      	ldr	r2, [r3, #0]
 8017f18:	683b      	ldr	r3, [r7, #0]
 8017f1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017f1c:	683b      	ldr	r3, [r7, #0]
 8017f1e:	685b      	ldr	r3, [r3, #4]
 8017f20:	4a0a      	ldr	r2, [pc, #40]	; (8017f4c <prvHeapInit+0xb8>)
 8017f22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017f24:	683b      	ldr	r3, [r7, #0]
 8017f26:	685b      	ldr	r3, [r3, #4]
 8017f28:	4a09      	ldr	r2, [pc, #36]	; (8017f50 <prvHeapInit+0xbc>)
 8017f2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8017f2c:	4b09      	ldr	r3, [pc, #36]	; (8017f54 <prvHeapInit+0xc0>)
 8017f2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8017f32:	601a      	str	r2, [r3, #0]
}
 8017f34:	bf00      	nop
 8017f36:	3714      	adds	r7, #20
 8017f38:	46bd      	mov	sp, r7
 8017f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f3e:	4770      	bx	lr
 8017f40:	2000224c 	.word	0x2000224c
 8017f44:	2001224c 	.word	0x2001224c
 8017f48:	20012254 	.word	0x20012254
 8017f4c:	2001225c 	.word	0x2001225c
 8017f50:	20012258 	.word	0x20012258
 8017f54:	20012260 	.word	0x20012260

08017f58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8017f58:	b480      	push	{r7}
 8017f5a:	b085      	sub	sp, #20
 8017f5c:	af00      	add	r7, sp, #0
 8017f5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8017f60:	4b28      	ldr	r3, [pc, #160]	; (8018004 <prvInsertBlockIntoFreeList+0xac>)
 8017f62:	60fb      	str	r3, [r7, #12]
 8017f64:	e002      	b.n	8017f6c <prvInsertBlockIntoFreeList+0x14>
 8017f66:	68fb      	ldr	r3, [r7, #12]
 8017f68:	681b      	ldr	r3, [r3, #0]
 8017f6a:	60fb      	str	r3, [r7, #12]
 8017f6c:	68fb      	ldr	r3, [r7, #12]
 8017f6e:	681b      	ldr	r3, [r3, #0]
 8017f70:	687a      	ldr	r2, [r7, #4]
 8017f72:	429a      	cmp	r2, r3
 8017f74:	d8f7      	bhi.n	8017f66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8017f76:	68fb      	ldr	r3, [r7, #12]
 8017f78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8017f7a:	68fb      	ldr	r3, [r7, #12]
 8017f7c:	685b      	ldr	r3, [r3, #4]
 8017f7e:	68ba      	ldr	r2, [r7, #8]
 8017f80:	4413      	add	r3, r2
 8017f82:	687a      	ldr	r2, [r7, #4]
 8017f84:	429a      	cmp	r2, r3
 8017f86:	d108      	bne.n	8017f9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8017f88:	68fb      	ldr	r3, [r7, #12]
 8017f8a:	685a      	ldr	r2, [r3, #4]
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	685b      	ldr	r3, [r3, #4]
 8017f90:	441a      	add	r2, r3
 8017f92:	68fb      	ldr	r3, [r7, #12]
 8017f94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8017f96:	68fb      	ldr	r3, [r7, #12]
 8017f98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8017f9a:	687b      	ldr	r3, [r7, #4]
 8017f9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	685b      	ldr	r3, [r3, #4]
 8017fa2:	68ba      	ldr	r2, [r7, #8]
 8017fa4:	441a      	add	r2, r3
 8017fa6:	68fb      	ldr	r3, [r7, #12]
 8017fa8:	681b      	ldr	r3, [r3, #0]
 8017faa:	429a      	cmp	r2, r3
 8017fac:	d118      	bne.n	8017fe0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8017fae:	68fb      	ldr	r3, [r7, #12]
 8017fb0:	681a      	ldr	r2, [r3, #0]
 8017fb2:	4b15      	ldr	r3, [pc, #84]	; (8018008 <prvInsertBlockIntoFreeList+0xb0>)
 8017fb4:	681b      	ldr	r3, [r3, #0]
 8017fb6:	429a      	cmp	r2, r3
 8017fb8:	d00d      	beq.n	8017fd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8017fba:	687b      	ldr	r3, [r7, #4]
 8017fbc:	685a      	ldr	r2, [r3, #4]
 8017fbe:	68fb      	ldr	r3, [r7, #12]
 8017fc0:	681b      	ldr	r3, [r3, #0]
 8017fc2:	685b      	ldr	r3, [r3, #4]
 8017fc4:	441a      	add	r2, r3
 8017fc6:	687b      	ldr	r3, [r7, #4]
 8017fc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8017fca:	68fb      	ldr	r3, [r7, #12]
 8017fcc:	681b      	ldr	r3, [r3, #0]
 8017fce:	681a      	ldr	r2, [r3, #0]
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	601a      	str	r2, [r3, #0]
 8017fd4:	e008      	b.n	8017fe8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8017fd6:	4b0c      	ldr	r3, [pc, #48]	; (8018008 <prvInsertBlockIntoFreeList+0xb0>)
 8017fd8:	681a      	ldr	r2, [r3, #0]
 8017fda:	687b      	ldr	r3, [r7, #4]
 8017fdc:	601a      	str	r2, [r3, #0]
 8017fde:	e003      	b.n	8017fe8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8017fe0:	68fb      	ldr	r3, [r7, #12]
 8017fe2:	681a      	ldr	r2, [r3, #0]
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8017fe8:	68fa      	ldr	r2, [r7, #12]
 8017fea:	687b      	ldr	r3, [r7, #4]
 8017fec:	429a      	cmp	r2, r3
 8017fee:	d002      	beq.n	8017ff6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8017ff0:	68fb      	ldr	r3, [r7, #12]
 8017ff2:	687a      	ldr	r2, [r7, #4]
 8017ff4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017ff6:	bf00      	nop
 8017ff8:	3714      	adds	r7, #20
 8017ffa:	46bd      	mov	sp, r7
 8017ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018000:	4770      	bx	lr
 8018002:	bf00      	nop
 8018004:	2001224c 	.word	0x2001224c
 8018008:	20012254 	.word	0x20012254

0801800c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801800c:	b480      	push	{r7}
 801800e:	b083      	sub	sp, #12
 8018010:	af00      	add	r7, sp, #0
 8018012:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018014:	687b      	ldr	r3, [r7, #4]
 8018016:	f103 0208 	add.w	r2, r3, #8
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801801e:	687b      	ldr	r3, [r7, #4]
 8018020:	f04f 32ff 	mov.w	r2, #4294967295
 8018024:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018026:	687b      	ldr	r3, [r7, #4]
 8018028:	f103 0208 	add.w	r2, r3, #8
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018030:	687b      	ldr	r3, [r7, #4]
 8018032:	f103 0208 	add.w	r2, r3, #8
 8018036:	687b      	ldr	r3, [r7, #4]
 8018038:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	2200      	movs	r2, #0
 801803e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8018040:	bf00      	nop
 8018042:	370c      	adds	r7, #12
 8018044:	46bd      	mov	sp, r7
 8018046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801804a:	4770      	bx	lr

0801804c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801804c:	b480      	push	{r7}
 801804e:	b083      	sub	sp, #12
 8018050:	af00      	add	r7, sp, #0
 8018052:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	2200      	movs	r2, #0
 8018058:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801805a:	bf00      	nop
 801805c:	370c      	adds	r7, #12
 801805e:	46bd      	mov	sp, r7
 8018060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018064:	4770      	bx	lr

08018066 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8018066:	b480      	push	{r7}
 8018068:	b085      	sub	sp, #20
 801806a:	af00      	add	r7, sp, #0
 801806c:	6078      	str	r0, [r7, #4]
 801806e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8018070:	687b      	ldr	r3, [r7, #4]
 8018072:	685b      	ldr	r3, [r3, #4]
 8018074:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8018076:	683b      	ldr	r3, [r7, #0]
 8018078:	68fa      	ldr	r2, [r7, #12]
 801807a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801807c:	68fb      	ldr	r3, [r7, #12]
 801807e:	689a      	ldr	r2, [r3, #8]
 8018080:	683b      	ldr	r3, [r7, #0]
 8018082:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8018084:	68fb      	ldr	r3, [r7, #12]
 8018086:	689b      	ldr	r3, [r3, #8]
 8018088:	683a      	ldr	r2, [r7, #0]
 801808a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801808c:	68fb      	ldr	r3, [r7, #12]
 801808e:	683a      	ldr	r2, [r7, #0]
 8018090:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8018092:	683b      	ldr	r3, [r7, #0]
 8018094:	687a      	ldr	r2, [r7, #4]
 8018096:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	681b      	ldr	r3, [r3, #0]
 801809c:	1c5a      	adds	r2, r3, #1
 801809e:	687b      	ldr	r3, [r7, #4]
 80180a0:	601a      	str	r2, [r3, #0]
}
 80180a2:	bf00      	nop
 80180a4:	3714      	adds	r7, #20
 80180a6:	46bd      	mov	sp, r7
 80180a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180ac:	4770      	bx	lr

080180ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80180ae:	b480      	push	{r7}
 80180b0:	b085      	sub	sp, #20
 80180b2:	af00      	add	r7, sp, #0
 80180b4:	6078      	str	r0, [r7, #4]
 80180b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80180b8:	683b      	ldr	r3, [r7, #0]
 80180ba:	681b      	ldr	r3, [r3, #0]
 80180bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80180be:	68bb      	ldr	r3, [r7, #8]
 80180c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80180c4:	d103      	bne.n	80180ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	691b      	ldr	r3, [r3, #16]
 80180ca:	60fb      	str	r3, [r7, #12]
 80180cc:	e00c      	b.n	80180e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	3308      	adds	r3, #8
 80180d2:	60fb      	str	r3, [r7, #12]
 80180d4:	e002      	b.n	80180dc <vListInsert+0x2e>
 80180d6:	68fb      	ldr	r3, [r7, #12]
 80180d8:	685b      	ldr	r3, [r3, #4]
 80180da:	60fb      	str	r3, [r7, #12]
 80180dc:	68fb      	ldr	r3, [r7, #12]
 80180de:	685b      	ldr	r3, [r3, #4]
 80180e0:	681b      	ldr	r3, [r3, #0]
 80180e2:	68ba      	ldr	r2, [r7, #8]
 80180e4:	429a      	cmp	r2, r3
 80180e6:	d2f6      	bcs.n	80180d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80180e8:	68fb      	ldr	r3, [r7, #12]
 80180ea:	685a      	ldr	r2, [r3, #4]
 80180ec:	683b      	ldr	r3, [r7, #0]
 80180ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80180f0:	683b      	ldr	r3, [r7, #0]
 80180f2:	685b      	ldr	r3, [r3, #4]
 80180f4:	683a      	ldr	r2, [r7, #0]
 80180f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80180f8:	683b      	ldr	r3, [r7, #0]
 80180fa:	68fa      	ldr	r2, [r7, #12]
 80180fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80180fe:	68fb      	ldr	r3, [r7, #12]
 8018100:	683a      	ldr	r2, [r7, #0]
 8018102:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8018104:	683b      	ldr	r3, [r7, #0]
 8018106:	687a      	ldr	r2, [r7, #4]
 8018108:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	681b      	ldr	r3, [r3, #0]
 801810e:	1c5a      	adds	r2, r3, #1
 8018110:	687b      	ldr	r3, [r7, #4]
 8018112:	601a      	str	r2, [r3, #0]
}
 8018114:	bf00      	nop
 8018116:	3714      	adds	r7, #20
 8018118:	46bd      	mov	sp, r7
 801811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801811e:	4770      	bx	lr

08018120 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8018120:	b480      	push	{r7}
 8018122:	b085      	sub	sp, #20
 8018124:	af00      	add	r7, sp, #0
 8018126:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	691b      	ldr	r3, [r3, #16]
 801812c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801812e:	687b      	ldr	r3, [r7, #4]
 8018130:	685b      	ldr	r3, [r3, #4]
 8018132:	687a      	ldr	r2, [r7, #4]
 8018134:	6892      	ldr	r2, [r2, #8]
 8018136:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	689b      	ldr	r3, [r3, #8]
 801813c:	687a      	ldr	r2, [r7, #4]
 801813e:	6852      	ldr	r2, [r2, #4]
 8018140:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8018142:	68fb      	ldr	r3, [r7, #12]
 8018144:	685b      	ldr	r3, [r3, #4]
 8018146:	687a      	ldr	r2, [r7, #4]
 8018148:	429a      	cmp	r2, r3
 801814a:	d103      	bne.n	8018154 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801814c:	687b      	ldr	r3, [r7, #4]
 801814e:	689a      	ldr	r2, [r3, #8]
 8018150:	68fb      	ldr	r3, [r7, #12]
 8018152:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8018154:	687b      	ldr	r3, [r7, #4]
 8018156:	2200      	movs	r2, #0
 8018158:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801815a:	68fb      	ldr	r3, [r7, #12]
 801815c:	681b      	ldr	r3, [r3, #0]
 801815e:	1e5a      	subs	r2, r3, #1
 8018160:	68fb      	ldr	r3, [r7, #12]
 8018162:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8018164:	68fb      	ldr	r3, [r7, #12]
 8018166:	681b      	ldr	r3, [r3, #0]
}
 8018168:	4618      	mov	r0, r3
 801816a:	3714      	adds	r7, #20
 801816c:	46bd      	mov	sp, r7
 801816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018172:	4770      	bx	lr

08018174 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8018174:	b480      	push	{r7}
 8018176:	b085      	sub	sp, #20
 8018178:	af00      	add	r7, sp, #0
 801817a:	60f8      	str	r0, [r7, #12]
 801817c:	60b9      	str	r1, [r7, #8]
 801817e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8018180:	68fb      	ldr	r3, [r7, #12]
 8018182:	3b04      	subs	r3, #4
 8018184:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8018186:	68fb      	ldr	r3, [r7, #12]
 8018188:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801818c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801818e:	68fb      	ldr	r3, [r7, #12]
 8018190:	3b04      	subs	r3, #4
 8018192:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8018194:	68bb      	ldr	r3, [r7, #8]
 8018196:	f023 0201 	bic.w	r2, r3, #1
 801819a:	68fb      	ldr	r3, [r7, #12]
 801819c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801819e:	68fb      	ldr	r3, [r7, #12]
 80181a0:	3b04      	subs	r3, #4
 80181a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80181a4:	4a0c      	ldr	r2, [pc, #48]	; (80181d8 <pxPortInitialiseStack+0x64>)
 80181a6:	68fb      	ldr	r3, [r7, #12]
 80181a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80181aa:	68fb      	ldr	r3, [r7, #12]
 80181ac:	3b14      	subs	r3, #20
 80181ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80181b0:	687a      	ldr	r2, [r7, #4]
 80181b2:	68fb      	ldr	r3, [r7, #12]
 80181b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80181b6:	68fb      	ldr	r3, [r7, #12]
 80181b8:	3b04      	subs	r3, #4
 80181ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80181bc:	68fb      	ldr	r3, [r7, #12]
 80181be:	f06f 0202 	mvn.w	r2, #2
 80181c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80181c4:	68fb      	ldr	r3, [r7, #12]
 80181c6:	3b20      	subs	r3, #32
 80181c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80181ca:	68fb      	ldr	r3, [r7, #12]
}
 80181cc:	4618      	mov	r0, r3
 80181ce:	3714      	adds	r7, #20
 80181d0:	46bd      	mov	sp, r7
 80181d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181d6:	4770      	bx	lr
 80181d8:	080181dd 	.word	0x080181dd

080181dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80181dc:	b480      	push	{r7}
 80181de:	b085      	sub	sp, #20
 80181e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80181e2:	2300      	movs	r3, #0
 80181e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80181e6:	4b11      	ldr	r3, [pc, #68]	; (801822c <prvTaskExitError+0x50>)
 80181e8:	681b      	ldr	r3, [r3, #0]
 80181ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80181ee:	d009      	beq.n	8018204 <prvTaskExitError+0x28>
 80181f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181f4:	f383 8811 	msr	BASEPRI, r3
 80181f8:	f3bf 8f6f 	isb	sy
 80181fc:	f3bf 8f4f 	dsb	sy
 8018200:	60fb      	str	r3, [r7, #12]
 8018202:	e7fe      	b.n	8018202 <prvTaskExitError+0x26>
 8018204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018208:	f383 8811 	msr	BASEPRI, r3
 801820c:	f3bf 8f6f 	isb	sy
 8018210:	f3bf 8f4f 	dsb	sy
 8018214:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8018216:	bf00      	nop
 8018218:	687b      	ldr	r3, [r7, #4]
 801821a:	2b00      	cmp	r3, #0
 801821c:	d0fc      	beq.n	8018218 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801821e:	bf00      	nop
 8018220:	3714      	adds	r7, #20
 8018222:	46bd      	mov	sp, r7
 8018224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018228:	4770      	bx	lr
 801822a:	bf00      	nop
 801822c:	20000098 	.word	0x20000098

08018230 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8018230:	4b07      	ldr	r3, [pc, #28]	; (8018250 <pxCurrentTCBConst2>)
 8018232:	6819      	ldr	r1, [r3, #0]
 8018234:	6808      	ldr	r0, [r1, #0]
 8018236:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801823a:	f380 8809 	msr	PSP, r0
 801823e:	f3bf 8f6f 	isb	sy
 8018242:	f04f 0000 	mov.w	r0, #0
 8018246:	f380 8811 	msr	BASEPRI, r0
 801824a:	4770      	bx	lr
 801824c:	f3af 8000 	nop.w

08018250 <pxCurrentTCBConst2>:
 8018250:	2001226c 	.word	0x2001226c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8018254:	bf00      	nop
 8018256:	bf00      	nop

08018258 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018258:	4808      	ldr	r0, [pc, #32]	; (801827c <prvPortStartFirstTask+0x24>)
 801825a:	6800      	ldr	r0, [r0, #0]
 801825c:	6800      	ldr	r0, [r0, #0]
 801825e:	f380 8808 	msr	MSP, r0
 8018262:	f04f 0000 	mov.w	r0, #0
 8018266:	f380 8814 	msr	CONTROL, r0
 801826a:	b662      	cpsie	i
 801826c:	b661      	cpsie	f
 801826e:	f3bf 8f4f 	dsb	sy
 8018272:	f3bf 8f6f 	isb	sy
 8018276:	df00      	svc	0
 8018278:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801827a:	bf00      	nop
 801827c:	e000ed08 	.word	0xe000ed08

08018280 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8018280:	b580      	push	{r7, lr}
 8018282:	b086      	sub	sp, #24
 8018284:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8018286:	4b44      	ldr	r3, [pc, #272]	; (8018398 <xPortStartScheduler+0x118>)
 8018288:	681b      	ldr	r3, [r3, #0]
 801828a:	4a44      	ldr	r2, [pc, #272]	; (801839c <xPortStartScheduler+0x11c>)
 801828c:	4293      	cmp	r3, r2
 801828e:	d109      	bne.n	80182a4 <xPortStartScheduler+0x24>
 8018290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018294:	f383 8811 	msr	BASEPRI, r3
 8018298:	f3bf 8f6f 	isb	sy
 801829c:	f3bf 8f4f 	dsb	sy
 80182a0:	613b      	str	r3, [r7, #16]
 80182a2:	e7fe      	b.n	80182a2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80182a4:	4b3c      	ldr	r3, [pc, #240]	; (8018398 <xPortStartScheduler+0x118>)
 80182a6:	681b      	ldr	r3, [r3, #0]
 80182a8:	4a3d      	ldr	r2, [pc, #244]	; (80183a0 <xPortStartScheduler+0x120>)
 80182aa:	4293      	cmp	r3, r2
 80182ac:	d109      	bne.n	80182c2 <xPortStartScheduler+0x42>
 80182ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182b2:	f383 8811 	msr	BASEPRI, r3
 80182b6:	f3bf 8f6f 	isb	sy
 80182ba:	f3bf 8f4f 	dsb	sy
 80182be:	60fb      	str	r3, [r7, #12]
 80182c0:	e7fe      	b.n	80182c0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80182c2:	4b38      	ldr	r3, [pc, #224]	; (80183a4 <xPortStartScheduler+0x124>)
 80182c4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80182c6:	697b      	ldr	r3, [r7, #20]
 80182c8:	781b      	ldrb	r3, [r3, #0]
 80182ca:	b2db      	uxtb	r3, r3
 80182cc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80182ce:	697b      	ldr	r3, [r7, #20]
 80182d0:	22ff      	movs	r2, #255	; 0xff
 80182d2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80182d4:	697b      	ldr	r3, [r7, #20]
 80182d6:	781b      	ldrb	r3, [r3, #0]
 80182d8:	b2db      	uxtb	r3, r3
 80182da:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80182dc:	78fb      	ldrb	r3, [r7, #3]
 80182de:	b2db      	uxtb	r3, r3
 80182e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80182e4:	b2da      	uxtb	r2, r3
 80182e6:	4b30      	ldr	r3, [pc, #192]	; (80183a8 <xPortStartScheduler+0x128>)
 80182e8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80182ea:	4b30      	ldr	r3, [pc, #192]	; (80183ac <xPortStartScheduler+0x12c>)
 80182ec:	2207      	movs	r2, #7
 80182ee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80182f0:	e009      	b.n	8018306 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80182f2:	4b2e      	ldr	r3, [pc, #184]	; (80183ac <xPortStartScheduler+0x12c>)
 80182f4:	681b      	ldr	r3, [r3, #0]
 80182f6:	3b01      	subs	r3, #1
 80182f8:	4a2c      	ldr	r2, [pc, #176]	; (80183ac <xPortStartScheduler+0x12c>)
 80182fa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80182fc:	78fb      	ldrb	r3, [r7, #3]
 80182fe:	b2db      	uxtb	r3, r3
 8018300:	005b      	lsls	r3, r3, #1
 8018302:	b2db      	uxtb	r3, r3
 8018304:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018306:	78fb      	ldrb	r3, [r7, #3]
 8018308:	b2db      	uxtb	r3, r3
 801830a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801830e:	2b80      	cmp	r3, #128	; 0x80
 8018310:	d0ef      	beq.n	80182f2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018312:	4b26      	ldr	r3, [pc, #152]	; (80183ac <xPortStartScheduler+0x12c>)
 8018314:	681b      	ldr	r3, [r3, #0]
 8018316:	f1c3 0307 	rsb	r3, r3, #7
 801831a:	2b04      	cmp	r3, #4
 801831c:	d009      	beq.n	8018332 <xPortStartScheduler+0xb2>
 801831e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018322:	f383 8811 	msr	BASEPRI, r3
 8018326:	f3bf 8f6f 	isb	sy
 801832a:	f3bf 8f4f 	dsb	sy
 801832e:	60bb      	str	r3, [r7, #8]
 8018330:	e7fe      	b.n	8018330 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8018332:	4b1e      	ldr	r3, [pc, #120]	; (80183ac <xPortStartScheduler+0x12c>)
 8018334:	681b      	ldr	r3, [r3, #0]
 8018336:	021b      	lsls	r3, r3, #8
 8018338:	4a1c      	ldr	r2, [pc, #112]	; (80183ac <xPortStartScheduler+0x12c>)
 801833a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801833c:	4b1b      	ldr	r3, [pc, #108]	; (80183ac <xPortStartScheduler+0x12c>)
 801833e:	681b      	ldr	r3, [r3, #0]
 8018340:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8018344:	4a19      	ldr	r2, [pc, #100]	; (80183ac <xPortStartScheduler+0x12c>)
 8018346:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8018348:	687b      	ldr	r3, [r7, #4]
 801834a:	b2da      	uxtb	r2, r3
 801834c:	697b      	ldr	r3, [r7, #20]
 801834e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8018350:	4b17      	ldr	r3, [pc, #92]	; (80183b0 <xPortStartScheduler+0x130>)
 8018352:	681b      	ldr	r3, [r3, #0]
 8018354:	4a16      	ldr	r2, [pc, #88]	; (80183b0 <xPortStartScheduler+0x130>)
 8018356:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801835a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801835c:	4b14      	ldr	r3, [pc, #80]	; (80183b0 <xPortStartScheduler+0x130>)
 801835e:	681b      	ldr	r3, [r3, #0]
 8018360:	4a13      	ldr	r2, [pc, #76]	; (80183b0 <xPortStartScheduler+0x130>)
 8018362:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8018366:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8018368:	f000 f8d6 	bl	8018518 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801836c:	4b11      	ldr	r3, [pc, #68]	; (80183b4 <xPortStartScheduler+0x134>)
 801836e:	2200      	movs	r2, #0
 8018370:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8018372:	f000 f8f5 	bl	8018560 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8018376:	4b10      	ldr	r3, [pc, #64]	; (80183b8 <xPortStartScheduler+0x138>)
 8018378:	681b      	ldr	r3, [r3, #0]
 801837a:	4a0f      	ldr	r2, [pc, #60]	; (80183b8 <xPortStartScheduler+0x138>)
 801837c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8018380:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8018382:	f7ff ff69 	bl	8018258 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8018386:	f001 fc97 	bl	8019cb8 <vTaskSwitchContext>
	prvTaskExitError();
 801838a:	f7ff ff27 	bl	80181dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801838e:	2300      	movs	r3, #0
}
 8018390:	4618      	mov	r0, r3
 8018392:	3718      	adds	r7, #24
 8018394:	46bd      	mov	sp, r7
 8018396:	bd80      	pop	{r7, pc}
 8018398:	e000ed00 	.word	0xe000ed00
 801839c:	410fc271 	.word	0x410fc271
 80183a0:	410fc270 	.word	0x410fc270
 80183a4:	e000e400 	.word	0xe000e400
 80183a8:	20012264 	.word	0x20012264
 80183ac:	20012268 	.word	0x20012268
 80183b0:	e000ed20 	.word	0xe000ed20
 80183b4:	20000098 	.word	0x20000098
 80183b8:	e000ef34 	.word	0xe000ef34

080183bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80183bc:	b480      	push	{r7}
 80183be:	b083      	sub	sp, #12
 80183c0:	af00      	add	r7, sp, #0
 80183c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183c6:	f383 8811 	msr	BASEPRI, r3
 80183ca:	f3bf 8f6f 	isb	sy
 80183ce:	f3bf 8f4f 	dsb	sy
 80183d2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80183d4:	4b0e      	ldr	r3, [pc, #56]	; (8018410 <vPortEnterCritical+0x54>)
 80183d6:	681b      	ldr	r3, [r3, #0]
 80183d8:	3301      	adds	r3, #1
 80183da:	4a0d      	ldr	r2, [pc, #52]	; (8018410 <vPortEnterCritical+0x54>)
 80183dc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80183de:	4b0c      	ldr	r3, [pc, #48]	; (8018410 <vPortEnterCritical+0x54>)
 80183e0:	681b      	ldr	r3, [r3, #0]
 80183e2:	2b01      	cmp	r3, #1
 80183e4:	d10e      	bne.n	8018404 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80183e6:	4b0b      	ldr	r3, [pc, #44]	; (8018414 <vPortEnterCritical+0x58>)
 80183e8:	681b      	ldr	r3, [r3, #0]
 80183ea:	b2db      	uxtb	r3, r3
 80183ec:	2b00      	cmp	r3, #0
 80183ee:	d009      	beq.n	8018404 <vPortEnterCritical+0x48>
 80183f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183f4:	f383 8811 	msr	BASEPRI, r3
 80183f8:	f3bf 8f6f 	isb	sy
 80183fc:	f3bf 8f4f 	dsb	sy
 8018400:	603b      	str	r3, [r7, #0]
 8018402:	e7fe      	b.n	8018402 <vPortEnterCritical+0x46>
	}
}
 8018404:	bf00      	nop
 8018406:	370c      	adds	r7, #12
 8018408:	46bd      	mov	sp, r7
 801840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801840e:	4770      	bx	lr
 8018410:	20000098 	.word	0x20000098
 8018414:	e000ed04 	.word	0xe000ed04

08018418 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8018418:	b480      	push	{r7}
 801841a:	b083      	sub	sp, #12
 801841c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801841e:	4b11      	ldr	r3, [pc, #68]	; (8018464 <vPortExitCritical+0x4c>)
 8018420:	681b      	ldr	r3, [r3, #0]
 8018422:	2b00      	cmp	r3, #0
 8018424:	d109      	bne.n	801843a <vPortExitCritical+0x22>
 8018426:	f04f 0350 	mov.w	r3, #80	; 0x50
 801842a:	f383 8811 	msr	BASEPRI, r3
 801842e:	f3bf 8f6f 	isb	sy
 8018432:	f3bf 8f4f 	dsb	sy
 8018436:	607b      	str	r3, [r7, #4]
 8018438:	e7fe      	b.n	8018438 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 801843a:	4b0a      	ldr	r3, [pc, #40]	; (8018464 <vPortExitCritical+0x4c>)
 801843c:	681b      	ldr	r3, [r3, #0]
 801843e:	3b01      	subs	r3, #1
 8018440:	4a08      	ldr	r2, [pc, #32]	; (8018464 <vPortExitCritical+0x4c>)
 8018442:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8018444:	4b07      	ldr	r3, [pc, #28]	; (8018464 <vPortExitCritical+0x4c>)
 8018446:	681b      	ldr	r3, [r3, #0]
 8018448:	2b00      	cmp	r3, #0
 801844a:	d104      	bne.n	8018456 <vPortExitCritical+0x3e>
 801844c:	2300      	movs	r3, #0
 801844e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8018450:	683b      	ldr	r3, [r7, #0]
 8018452:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8018456:	bf00      	nop
 8018458:	370c      	adds	r7, #12
 801845a:	46bd      	mov	sp, r7
 801845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018460:	4770      	bx	lr
 8018462:	bf00      	nop
 8018464:	20000098 	.word	0x20000098
	...

08018470 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8018470:	f3ef 8009 	mrs	r0, PSP
 8018474:	f3bf 8f6f 	isb	sy
 8018478:	4b15      	ldr	r3, [pc, #84]	; (80184d0 <pxCurrentTCBConst>)
 801847a:	681a      	ldr	r2, [r3, #0]
 801847c:	f01e 0f10 	tst.w	lr, #16
 8018480:	bf08      	it	eq
 8018482:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8018486:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801848a:	6010      	str	r0, [r2, #0]
 801848c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8018490:	f04f 0050 	mov.w	r0, #80	; 0x50
 8018494:	f380 8811 	msr	BASEPRI, r0
 8018498:	f3bf 8f4f 	dsb	sy
 801849c:	f3bf 8f6f 	isb	sy
 80184a0:	f001 fc0a 	bl	8019cb8 <vTaskSwitchContext>
 80184a4:	f04f 0000 	mov.w	r0, #0
 80184a8:	f380 8811 	msr	BASEPRI, r0
 80184ac:	bc09      	pop	{r0, r3}
 80184ae:	6819      	ldr	r1, [r3, #0]
 80184b0:	6808      	ldr	r0, [r1, #0]
 80184b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184b6:	f01e 0f10 	tst.w	lr, #16
 80184ba:	bf08      	it	eq
 80184bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80184c0:	f380 8809 	msr	PSP, r0
 80184c4:	f3bf 8f6f 	isb	sy
 80184c8:	4770      	bx	lr
 80184ca:	bf00      	nop
 80184cc:	f3af 8000 	nop.w

080184d0 <pxCurrentTCBConst>:
 80184d0:	2001226c 	.word	0x2001226c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80184d4:	bf00      	nop
 80184d6:	bf00      	nop

080184d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80184d8:	b580      	push	{r7, lr}
 80184da:	b082      	sub	sp, #8
 80184dc:	af00      	add	r7, sp, #0
	__asm volatile
 80184de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184e2:	f383 8811 	msr	BASEPRI, r3
 80184e6:	f3bf 8f6f 	isb	sy
 80184ea:	f3bf 8f4f 	dsb	sy
 80184ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80184f0:	f001 fb2a 	bl	8019b48 <xTaskIncrementTick>
 80184f4:	4603      	mov	r3, r0
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	d003      	beq.n	8018502 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80184fa:	4b06      	ldr	r3, [pc, #24]	; (8018514 <SysTick_Handler+0x3c>)
 80184fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018500:	601a      	str	r2, [r3, #0]
 8018502:	2300      	movs	r3, #0
 8018504:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018506:	683b      	ldr	r3, [r7, #0]
 8018508:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801850c:	bf00      	nop
 801850e:	3708      	adds	r7, #8
 8018510:	46bd      	mov	sp, r7
 8018512:	bd80      	pop	{r7, pc}
 8018514:	e000ed04 	.word	0xe000ed04

08018518 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8018518:	b480      	push	{r7}
 801851a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801851c:	4b0b      	ldr	r3, [pc, #44]	; (801854c <vPortSetupTimerInterrupt+0x34>)
 801851e:	2200      	movs	r2, #0
 8018520:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8018522:	4b0b      	ldr	r3, [pc, #44]	; (8018550 <vPortSetupTimerInterrupt+0x38>)
 8018524:	2200      	movs	r2, #0
 8018526:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8018528:	4b0a      	ldr	r3, [pc, #40]	; (8018554 <vPortSetupTimerInterrupt+0x3c>)
 801852a:	681b      	ldr	r3, [r3, #0]
 801852c:	4a0a      	ldr	r2, [pc, #40]	; (8018558 <vPortSetupTimerInterrupt+0x40>)
 801852e:	fba2 2303 	umull	r2, r3, r2, r3
 8018532:	099b      	lsrs	r3, r3, #6
 8018534:	4a09      	ldr	r2, [pc, #36]	; (801855c <vPortSetupTimerInterrupt+0x44>)
 8018536:	3b01      	subs	r3, #1
 8018538:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801853a:	4b04      	ldr	r3, [pc, #16]	; (801854c <vPortSetupTimerInterrupt+0x34>)
 801853c:	2207      	movs	r2, #7
 801853e:	601a      	str	r2, [r3, #0]
}
 8018540:	bf00      	nop
 8018542:	46bd      	mov	sp, r7
 8018544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018548:	4770      	bx	lr
 801854a:	bf00      	nop
 801854c:	e000e010 	.word	0xe000e010
 8018550:	e000e018 	.word	0xe000e018
 8018554:	2000008c 	.word	0x2000008c
 8018558:	10624dd3 	.word	0x10624dd3
 801855c:	e000e014 	.word	0xe000e014

08018560 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8018560:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8018570 <vPortEnableVFP+0x10>
 8018564:	6801      	ldr	r1, [r0, #0]
 8018566:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801856a:	6001      	str	r1, [r0, #0]
 801856c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801856e:	bf00      	nop
 8018570:	e000ed88 	.word	0xe000ed88

08018574 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8018574:	b480      	push	{r7}
 8018576:	b085      	sub	sp, #20
 8018578:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801857a:	f3ef 8305 	mrs	r3, IPSR
 801857e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8018580:	68fb      	ldr	r3, [r7, #12]
 8018582:	2b0f      	cmp	r3, #15
 8018584:	d913      	bls.n	80185ae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8018586:	4a16      	ldr	r2, [pc, #88]	; (80185e0 <vPortValidateInterruptPriority+0x6c>)
 8018588:	68fb      	ldr	r3, [r7, #12]
 801858a:	4413      	add	r3, r2
 801858c:	781b      	ldrb	r3, [r3, #0]
 801858e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8018590:	4b14      	ldr	r3, [pc, #80]	; (80185e4 <vPortValidateInterruptPriority+0x70>)
 8018592:	781b      	ldrb	r3, [r3, #0]
 8018594:	7afa      	ldrb	r2, [r7, #11]
 8018596:	429a      	cmp	r2, r3
 8018598:	d209      	bcs.n	80185ae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 801859a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801859e:	f383 8811 	msr	BASEPRI, r3
 80185a2:	f3bf 8f6f 	isb	sy
 80185a6:	f3bf 8f4f 	dsb	sy
 80185aa:	607b      	str	r3, [r7, #4]
 80185ac:	e7fe      	b.n	80185ac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80185ae:	4b0e      	ldr	r3, [pc, #56]	; (80185e8 <vPortValidateInterruptPriority+0x74>)
 80185b0:	681b      	ldr	r3, [r3, #0]
 80185b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80185b6:	4b0d      	ldr	r3, [pc, #52]	; (80185ec <vPortValidateInterruptPriority+0x78>)
 80185b8:	681b      	ldr	r3, [r3, #0]
 80185ba:	429a      	cmp	r2, r3
 80185bc:	d909      	bls.n	80185d2 <vPortValidateInterruptPriority+0x5e>
 80185be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80185c2:	f383 8811 	msr	BASEPRI, r3
 80185c6:	f3bf 8f6f 	isb	sy
 80185ca:	f3bf 8f4f 	dsb	sy
 80185ce:	603b      	str	r3, [r7, #0]
 80185d0:	e7fe      	b.n	80185d0 <vPortValidateInterruptPriority+0x5c>
	}
 80185d2:	bf00      	nop
 80185d4:	3714      	adds	r7, #20
 80185d6:	46bd      	mov	sp, r7
 80185d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185dc:	4770      	bx	lr
 80185de:	bf00      	nop
 80185e0:	e000e3f0 	.word	0xe000e3f0
 80185e4:	20012264 	.word	0x20012264
 80185e8:	e000ed0c 	.word	0xe000ed0c
 80185ec:	20012268 	.word	0x20012268

080185f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80185f0:	b580      	push	{r7, lr}
 80185f2:	b084      	sub	sp, #16
 80185f4:	af00      	add	r7, sp, #0
 80185f6:	6078      	str	r0, [r7, #4]
 80185f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80185fa:	687b      	ldr	r3, [r7, #4]
 80185fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80185fe:	68fb      	ldr	r3, [r7, #12]
 8018600:	2b00      	cmp	r3, #0
 8018602:	d109      	bne.n	8018618 <xQueueGenericReset+0x28>
 8018604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018608:	f383 8811 	msr	BASEPRI, r3
 801860c:	f3bf 8f6f 	isb	sy
 8018610:	f3bf 8f4f 	dsb	sy
 8018614:	60bb      	str	r3, [r7, #8]
 8018616:	e7fe      	b.n	8018616 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8018618:	f7ff fed0 	bl	80183bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801861c:	68fb      	ldr	r3, [r7, #12]
 801861e:	681a      	ldr	r2, [r3, #0]
 8018620:	68fb      	ldr	r3, [r7, #12]
 8018622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018624:	68f9      	ldr	r1, [r7, #12]
 8018626:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8018628:	fb01 f303 	mul.w	r3, r1, r3
 801862c:	441a      	add	r2, r3
 801862e:	68fb      	ldr	r3, [r7, #12]
 8018630:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8018632:	68fb      	ldr	r3, [r7, #12]
 8018634:	2200      	movs	r2, #0
 8018636:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8018638:	68fb      	ldr	r3, [r7, #12]
 801863a:	681a      	ldr	r2, [r3, #0]
 801863c:	68fb      	ldr	r3, [r7, #12]
 801863e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018640:	68fb      	ldr	r3, [r7, #12]
 8018642:	681a      	ldr	r2, [r3, #0]
 8018644:	68fb      	ldr	r3, [r7, #12]
 8018646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018648:	3b01      	subs	r3, #1
 801864a:	68f9      	ldr	r1, [r7, #12]
 801864c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801864e:	fb01 f303 	mul.w	r3, r1, r3
 8018652:	441a      	add	r2, r3
 8018654:	68fb      	ldr	r3, [r7, #12]
 8018656:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8018658:	68fb      	ldr	r3, [r7, #12]
 801865a:	22ff      	movs	r2, #255	; 0xff
 801865c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8018660:	68fb      	ldr	r3, [r7, #12]
 8018662:	22ff      	movs	r2, #255	; 0xff
 8018664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8018668:	683b      	ldr	r3, [r7, #0]
 801866a:	2b00      	cmp	r3, #0
 801866c:	d114      	bne.n	8018698 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801866e:	68fb      	ldr	r3, [r7, #12]
 8018670:	691b      	ldr	r3, [r3, #16]
 8018672:	2b00      	cmp	r3, #0
 8018674:	d01a      	beq.n	80186ac <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018676:	68fb      	ldr	r3, [r7, #12]
 8018678:	3310      	adds	r3, #16
 801867a:	4618      	mov	r0, r3
 801867c:	f001 fbc6 	bl	8019e0c <xTaskRemoveFromEventList>
 8018680:	4603      	mov	r3, r0
 8018682:	2b00      	cmp	r3, #0
 8018684:	d012      	beq.n	80186ac <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8018686:	4b0d      	ldr	r3, [pc, #52]	; (80186bc <xQueueGenericReset+0xcc>)
 8018688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801868c:	601a      	str	r2, [r3, #0]
 801868e:	f3bf 8f4f 	dsb	sy
 8018692:	f3bf 8f6f 	isb	sy
 8018696:	e009      	b.n	80186ac <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8018698:	68fb      	ldr	r3, [r7, #12]
 801869a:	3310      	adds	r3, #16
 801869c:	4618      	mov	r0, r3
 801869e:	f7ff fcb5 	bl	801800c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80186a2:	68fb      	ldr	r3, [r7, #12]
 80186a4:	3324      	adds	r3, #36	; 0x24
 80186a6:	4618      	mov	r0, r3
 80186a8:	f7ff fcb0 	bl	801800c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80186ac:	f7ff feb4 	bl	8018418 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80186b0:	2301      	movs	r3, #1
}
 80186b2:	4618      	mov	r0, r3
 80186b4:	3710      	adds	r7, #16
 80186b6:	46bd      	mov	sp, r7
 80186b8:	bd80      	pop	{r7, pc}
 80186ba:	bf00      	nop
 80186bc:	e000ed04 	.word	0xe000ed04

080186c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80186c0:	b580      	push	{r7, lr}
 80186c2:	b08e      	sub	sp, #56	; 0x38
 80186c4:	af02      	add	r7, sp, #8
 80186c6:	60f8      	str	r0, [r7, #12]
 80186c8:	60b9      	str	r1, [r7, #8]
 80186ca:	607a      	str	r2, [r7, #4]
 80186cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80186ce:	68fb      	ldr	r3, [r7, #12]
 80186d0:	2b00      	cmp	r3, #0
 80186d2:	d109      	bne.n	80186e8 <xQueueGenericCreateStatic+0x28>
 80186d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186d8:	f383 8811 	msr	BASEPRI, r3
 80186dc:	f3bf 8f6f 	isb	sy
 80186e0:	f3bf 8f4f 	dsb	sy
 80186e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80186e6:	e7fe      	b.n	80186e6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80186e8:	683b      	ldr	r3, [r7, #0]
 80186ea:	2b00      	cmp	r3, #0
 80186ec:	d109      	bne.n	8018702 <xQueueGenericCreateStatic+0x42>
 80186ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186f2:	f383 8811 	msr	BASEPRI, r3
 80186f6:	f3bf 8f6f 	isb	sy
 80186fa:	f3bf 8f4f 	dsb	sy
 80186fe:	627b      	str	r3, [r7, #36]	; 0x24
 8018700:	e7fe      	b.n	8018700 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8018702:	687b      	ldr	r3, [r7, #4]
 8018704:	2b00      	cmp	r3, #0
 8018706:	d002      	beq.n	801870e <xQueueGenericCreateStatic+0x4e>
 8018708:	68bb      	ldr	r3, [r7, #8]
 801870a:	2b00      	cmp	r3, #0
 801870c:	d001      	beq.n	8018712 <xQueueGenericCreateStatic+0x52>
 801870e:	2301      	movs	r3, #1
 8018710:	e000      	b.n	8018714 <xQueueGenericCreateStatic+0x54>
 8018712:	2300      	movs	r3, #0
 8018714:	2b00      	cmp	r3, #0
 8018716:	d109      	bne.n	801872c <xQueueGenericCreateStatic+0x6c>
 8018718:	f04f 0350 	mov.w	r3, #80	; 0x50
 801871c:	f383 8811 	msr	BASEPRI, r3
 8018720:	f3bf 8f6f 	isb	sy
 8018724:	f3bf 8f4f 	dsb	sy
 8018728:	623b      	str	r3, [r7, #32]
 801872a:	e7fe      	b.n	801872a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801872c:	687b      	ldr	r3, [r7, #4]
 801872e:	2b00      	cmp	r3, #0
 8018730:	d102      	bne.n	8018738 <xQueueGenericCreateStatic+0x78>
 8018732:	68bb      	ldr	r3, [r7, #8]
 8018734:	2b00      	cmp	r3, #0
 8018736:	d101      	bne.n	801873c <xQueueGenericCreateStatic+0x7c>
 8018738:	2301      	movs	r3, #1
 801873a:	e000      	b.n	801873e <xQueueGenericCreateStatic+0x7e>
 801873c:	2300      	movs	r3, #0
 801873e:	2b00      	cmp	r3, #0
 8018740:	d109      	bne.n	8018756 <xQueueGenericCreateStatic+0x96>
 8018742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018746:	f383 8811 	msr	BASEPRI, r3
 801874a:	f3bf 8f6f 	isb	sy
 801874e:	f3bf 8f4f 	dsb	sy
 8018752:	61fb      	str	r3, [r7, #28]
 8018754:	e7fe      	b.n	8018754 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8018756:	2350      	movs	r3, #80	; 0x50
 8018758:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801875a:	697b      	ldr	r3, [r7, #20]
 801875c:	2b50      	cmp	r3, #80	; 0x50
 801875e:	d009      	beq.n	8018774 <xQueueGenericCreateStatic+0xb4>
 8018760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018764:	f383 8811 	msr	BASEPRI, r3
 8018768:	f3bf 8f6f 	isb	sy
 801876c:	f3bf 8f4f 	dsb	sy
 8018770:	61bb      	str	r3, [r7, #24]
 8018772:	e7fe      	b.n	8018772 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8018774:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8018776:	683b      	ldr	r3, [r7, #0]
 8018778:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801877a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801877c:	2b00      	cmp	r3, #0
 801877e:	d00d      	beq.n	801879c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8018780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018782:	2201      	movs	r2, #1
 8018784:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8018788:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801878c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801878e:	9300      	str	r3, [sp, #0]
 8018790:	4613      	mov	r3, r2
 8018792:	687a      	ldr	r2, [r7, #4]
 8018794:	68b9      	ldr	r1, [r7, #8]
 8018796:	68f8      	ldr	r0, [r7, #12]
 8018798:	f000 f844 	bl	8018824 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801879c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801879e:	4618      	mov	r0, r3
 80187a0:	3730      	adds	r7, #48	; 0x30
 80187a2:	46bd      	mov	sp, r7
 80187a4:	bd80      	pop	{r7, pc}

080187a6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80187a6:	b580      	push	{r7, lr}
 80187a8:	b08a      	sub	sp, #40	; 0x28
 80187aa:	af02      	add	r7, sp, #8
 80187ac:	60f8      	str	r0, [r7, #12]
 80187ae:	60b9      	str	r1, [r7, #8]
 80187b0:	4613      	mov	r3, r2
 80187b2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80187b4:	68fb      	ldr	r3, [r7, #12]
 80187b6:	2b00      	cmp	r3, #0
 80187b8:	d109      	bne.n	80187ce <xQueueGenericCreate+0x28>
 80187ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187be:	f383 8811 	msr	BASEPRI, r3
 80187c2:	f3bf 8f6f 	isb	sy
 80187c6:	f3bf 8f4f 	dsb	sy
 80187ca:	613b      	str	r3, [r7, #16]
 80187cc:	e7fe      	b.n	80187cc <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80187ce:	68bb      	ldr	r3, [r7, #8]
 80187d0:	2b00      	cmp	r3, #0
 80187d2:	d102      	bne.n	80187da <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80187d4:	2300      	movs	r3, #0
 80187d6:	61fb      	str	r3, [r7, #28]
 80187d8:	e004      	b.n	80187e4 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80187da:	68fb      	ldr	r3, [r7, #12]
 80187dc:	68ba      	ldr	r2, [r7, #8]
 80187de:	fb02 f303 	mul.w	r3, r2, r3
 80187e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80187e4:	69fb      	ldr	r3, [r7, #28]
 80187e6:	3350      	adds	r3, #80	; 0x50
 80187e8:	4618      	mov	r0, r3
 80187ea:	f7ff fa39 	bl	8017c60 <pvPortMalloc>
 80187ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80187f0:	69bb      	ldr	r3, [r7, #24]
 80187f2:	2b00      	cmp	r3, #0
 80187f4:	d011      	beq.n	801881a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80187f6:	69bb      	ldr	r3, [r7, #24]
 80187f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80187fa:	697b      	ldr	r3, [r7, #20]
 80187fc:	3350      	adds	r3, #80	; 0x50
 80187fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8018800:	69bb      	ldr	r3, [r7, #24]
 8018802:	2200      	movs	r2, #0
 8018804:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8018808:	79fa      	ldrb	r2, [r7, #7]
 801880a:	69bb      	ldr	r3, [r7, #24]
 801880c:	9300      	str	r3, [sp, #0]
 801880e:	4613      	mov	r3, r2
 8018810:	697a      	ldr	r2, [r7, #20]
 8018812:	68b9      	ldr	r1, [r7, #8]
 8018814:	68f8      	ldr	r0, [r7, #12]
 8018816:	f000 f805 	bl	8018824 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801881a:	69bb      	ldr	r3, [r7, #24]
	}
 801881c:	4618      	mov	r0, r3
 801881e:	3720      	adds	r7, #32
 8018820:	46bd      	mov	sp, r7
 8018822:	bd80      	pop	{r7, pc}

08018824 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8018824:	b580      	push	{r7, lr}
 8018826:	b084      	sub	sp, #16
 8018828:	af00      	add	r7, sp, #0
 801882a:	60f8      	str	r0, [r7, #12]
 801882c:	60b9      	str	r1, [r7, #8]
 801882e:	607a      	str	r2, [r7, #4]
 8018830:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8018832:	68bb      	ldr	r3, [r7, #8]
 8018834:	2b00      	cmp	r3, #0
 8018836:	d103      	bne.n	8018840 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8018838:	69bb      	ldr	r3, [r7, #24]
 801883a:	69ba      	ldr	r2, [r7, #24]
 801883c:	601a      	str	r2, [r3, #0]
 801883e:	e002      	b.n	8018846 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8018840:	69bb      	ldr	r3, [r7, #24]
 8018842:	687a      	ldr	r2, [r7, #4]
 8018844:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8018846:	69bb      	ldr	r3, [r7, #24]
 8018848:	68fa      	ldr	r2, [r7, #12]
 801884a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801884c:	69bb      	ldr	r3, [r7, #24]
 801884e:	68ba      	ldr	r2, [r7, #8]
 8018850:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8018852:	2101      	movs	r1, #1
 8018854:	69b8      	ldr	r0, [r7, #24]
 8018856:	f7ff fecb 	bl	80185f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801885a:	69bb      	ldr	r3, [r7, #24]
 801885c:	78fa      	ldrb	r2, [r7, #3]
 801885e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8018862:	bf00      	nop
 8018864:	3710      	adds	r7, #16
 8018866:	46bd      	mov	sp, r7
 8018868:	bd80      	pop	{r7, pc}

0801886a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 801886a:	b580      	push	{r7, lr}
 801886c:	b08a      	sub	sp, #40	; 0x28
 801886e:	af02      	add	r7, sp, #8
 8018870:	60f8      	str	r0, [r7, #12]
 8018872:	60b9      	str	r1, [r7, #8]
 8018874:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8018876:	68fb      	ldr	r3, [r7, #12]
 8018878:	2b00      	cmp	r3, #0
 801887a:	d109      	bne.n	8018890 <xQueueCreateCountingSemaphoreStatic+0x26>
 801887c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018880:	f383 8811 	msr	BASEPRI, r3
 8018884:	f3bf 8f6f 	isb	sy
 8018888:	f3bf 8f4f 	dsb	sy
 801888c:	61bb      	str	r3, [r7, #24]
 801888e:	e7fe      	b.n	801888e <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8018890:	68ba      	ldr	r2, [r7, #8]
 8018892:	68fb      	ldr	r3, [r7, #12]
 8018894:	429a      	cmp	r2, r3
 8018896:	d909      	bls.n	80188ac <xQueueCreateCountingSemaphoreStatic+0x42>
 8018898:	f04f 0350 	mov.w	r3, #80	; 0x50
 801889c:	f383 8811 	msr	BASEPRI, r3
 80188a0:	f3bf 8f6f 	isb	sy
 80188a4:	f3bf 8f4f 	dsb	sy
 80188a8:	617b      	str	r3, [r7, #20]
 80188aa:	e7fe      	b.n	80188aa <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80188ac:	2302      	movs	r3, #2
 80188ae:	9300      	str	r3, [sp, #0]
 80188b0:	687b      	ldr	r3, [r7, #4]
 80188b2:	2200      	movs	r2, #0
 80188b4:	2100      	movs	r1, #0
 80188b6:	68f8      	ldr	r0, [r7, #12]
 80188b8:	f7ff ff02 	bl	80186c0 <xQueueGenericCreateStatic>
 80188bc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80188be:	69fb      	ldr	r3, [r7, #28]
 80188c0:	2b00      	cmp	r3, #0
 80188c2:	d002      	beq.n	80188ca <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80188c4:	69fb      	ldr	r3, [r7, #28]
 80188c6:	68ba      	ldr	r2, [r7, #8]
 80188c8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80188ca:	69fb      	ldr	r3, [r7, #28]
	}
 80188cc:	4618      	mov	r0, r3
 80188ce:	3720      	adds	r7, #32
 80188d0:	46bd      	mov	sp, r7
 80188d2:	bd80      	pop	{r7, pc}

080188d4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80188d4:	b580      	push	{r7, lr}
 80188d6:	b086      	sub	sp, #24
 80188d8:	af00      	add	r7, sp, #0
 80188da:	6078      	str	r0, [r7, #4]
 80188dc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80188de:	687b      	ldr	r3, [r7, #4]
 80188e0:	2b00      	cmp	r3, #0
 80188e2:	d109      	bne.n	80188f8 <xQueueCreateCountingSemaphore+0x24>
 80188e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188e8:	f383 8811 	msr	BASEPRI, r3
 80188ec:	f3bf 8f6f 	isb	sy
 80188f0:	f3bf 8f4f 	dsb	sy
 80188f4:	613b      	str	r3, [r7, #16]
 80188f6:	e7fe      	b.n	80188f6 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 80188f8:	683a      	ldr	r2, [r7, #0]
 80188fa:	687b      	ldr	r3, [r7, #4]
 80188fc:	429a      	cmp	r2, r3
 80188fe:	d909      	bls.n	8018914 <xQueueCreateCountingSemaphore+0x40>
 8018900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018904:	f383 8811 	msr	BASEPRI, r3
 8018908:	f3bf 8f6f 	isb	sy
 801890c:	f3bf 8f4f 	dsb	sy
 8018910:	60fb      	str	r3, [r7, #12]
 8018912:	e7fe      	b.n	8018912 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8018914:	2202      	movs	r2, #2
 8018916:	2100      	movs	r1, #0
 8018918:	6878      	ldr	r0, [r7, #4]
 801891a:	f7ff ff44 	bl	80187a6 <xQueueGenericCreate>
 801891e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8018920:	697b      	ldr	r3, [r7, #20]
 8018922:	2b00      	cmp	r3, #0
 8018924:	d002      	beq.n	801892c <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8018926:	697b      	ldr	r3, [r7, #20]
 8018928:	683a      	ldr	r2, [r7, #0]
 801892a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801892c:	697b      	ldr	r3, [r7, #20]
	}
 801892e:	4618      	mov	r0, r3
 8018930:	3718      	adds	r7, #24
 8018932:	46bd      	mov	sp, r7
 8018934:	bd80      	pop	{r7, pc}
	...

08018938 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8018938:	b580      	push	{r7, lr}
 801893a:	b08e      	sub	sp, #56	; 0x38
 801893c:	af00      	add	r7, sp, #0
 801893e:	60f8      	str	r0, [r7, #12]
 8018940:	60b9      	str	r1, [r7, #8]
 8018942:	607a      	str	r2, [r7, #4]
 8018944:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8018946:	2300      	movs	r3, #0
 8018948:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801894a:	68fb      	ldr	r3, [r7, #12]
 801894c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801894e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018950:	2b00      	cmp	r3, #0
 8018952:	d109      	bne.n	8018968 <xQueueGenericSend+0x30>
 8018954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018958:	f383 8811 	msr	BASEPRI, r3
 801895c:	f3bf 8f6f 	isb	sy
 8018960:	f3bf 8f4f 	dsb	sy
 8018964:	62bb      	str	r3, [r7, #40]	; 0x28
 8018966:	e7fe      	b.n	8018966 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018968:	68bb      	ldr	r3, [r7, #8]
 801896a:	2b00      	cmp	r3, #0
 801896c:	d103      	bne.n	8018976 <xQueueGenericSend+0x3e>
 801896e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018972:	2b00      	cmp	r3, #0
 8018974:	d101      	bne.n	801897a <xQueueGenericSend+0x42>
 8018976:	2301      	movs	r3, #1
 8018978:	e000      	b.n	801897c <xQueueGenericSend+0x44>
 801897a:	2300      	movs	r3, #0
 801897c:	2b00      	cmp	r3, #0
 801897e:	d109      	bne.n	8018994 <xQueueGenericSend+0x5c>
 8018980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018984:	f383 8811 	msr	BASEPRI, r3
 8018988:	f3bf 8f6f 	isb	sy
 801898c:	f3bf 8f4f 	dsb	sy
 8018990:	627b      	str	r3, [r7, #36]	; 0x24
 8018992:	e7fe      	b.n	8018992 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8018994:	683b      	ldr	r3, [r7, #0]
 8018996:	2b02      	cmp	r3, #2
 8018998:	d103      	bne.n	80189a2 <xQueueGenericSend+0x6a>
 801899a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801899c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801899e:	2b01      	cmp	r3, #1
 80189a0:	d101      	bne.n	80189a6 <xQueueGenericSend+0x6e>
 80189a2:	2301      	movs	r3, #1
 80189a4:	e000      	b.n	80189a8 <xQueueGenericSend+0x70>
 80189a6:	2300      	movs	r3, #0
 80189a8:	2b00      	cmp	r3, #0
 80189aa:	d109      	bne.n	80189c0 <xQueueGenericSend+0x88>
 80189ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189b0:	f383 8811 	msr	BASEPRI, r3
 80189b4:	f3bf 8f6f 	isb	sy
 80189b8:	f3bf 8f4f 	dsb	sy
 80189bc:	623b      	str	r3, [r7, #32]
 80189be:	e7fe      	b.n	80189be <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80189c0:	f001 fbda 	bl	801a178 <xTaskGetSchedulerState>
 80189c4:	4603      	mov	r3, r0
 80189c6:	2b00      	cmp	r3, #0
 80189c8:	d102      	bne.n	80189d0 <xQueueGenericSend+0x98>
 80189ca:	687b      	ldr	r3, [r7, #4]
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	d101      	bne.n	80189d4 <xQueueGenericSend+0x9c>
 80189d0:	2301      	movs	r3, #1
 80189d2:	e000      	b.n	80189d6 <xQueueGenericSend+0x9e>
 80189d4:	2300      	movs	r3, #0
 80189d6:	2b00      	cmp	r3, #0
 80189d8:	d109      	bne.n	80189ee <xQueueGenericSend+0xb6>
 80189da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189de:	f383 8811 	msr	BASEPRI, r3
 80189e2:	f3bf 8f6f 	isb	sy
 80189e6:	f3bf 8f4f 	dsb	sy
 80189ea:	61fb      	str	r3, [r7, #28]
 80189ec:	e7fe      	b.n	80189ec <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80189ee:	f7ff fce5 	bl	80183bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80189f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80189f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80189fa:	429a      	cmp	r2, r3
 80189fc:	d302      	bcc.n	8018a04 <xQueueGenericSend+0xcc>
 80189fe:	683b      	ldr	r3, [r7, #0]
 8018a00:	2b02      	cmp	r3, #2
 8018a02:	d129      	bne.n	8018a58 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8018a04:	683a      	ldr	r2, [r7, #0]
 8018a06:	68b9      	ldr	r1, [r7, #8]
 8018a08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018a0a:	f000 fc48 	bl	801929e <prvCopyDataToQueue>
 8018a0e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a14:	2b00      	cmp	r3, #0
 8018a16:	d010      	beq.n	8018a3a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a1a:	3324      	adds	r3, #36	; 0x24
 8018a1c:	4618      	mov	r0, r3
 8018a1e:	f001 f9f5 	bl	8019e0c <xTaskRemoveFromEventList>
 8018a22:	4603      	mov	r3, r0
 8018a24:	2b00      	cmp	r3, #0
 8018a26:	d013      	beq.n	8018a50 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8018a28:	4b3f      	ldr	r3, [pc, #252]	; (8018b28 <xQueueGenericSend+0x1f0>)
 8018a2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018a2e:	601a      	str	r2, [r3, #0]
 8018a30:	f3bf 8f4f 	dsb	sy
 8018a34:	f3bf 8f6f 	isb	sy
 8018a38:	e00a      	b.n	8018a50 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8018a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a3c:	2b00      	cmp	r3, #0
 8018a3e:	d007      	beq.n	8018a50 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8018a40:	4b39      	ldr	r3, [pc, #228]	; (8018b28 <xQueueGenericSend+0x1f0>)
 8018a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018a46:	601a      	str	r2, [r3, #0]
 8018a48:	f3bf 8f4f 	dsb	sy
 8018a4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8018a50:	f7ff fce2 	bl	8018418 <vPortExitCritical>
				return pdPASS;
 8018a54:	2301      	movs	r3, #1
 8018a56:	e063      	b.n	8018b20 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8018a58:	687b      	ldr	r3, [r7, #4]
 8018a5a:	2b00      	cmp	r3, #0
 8018a5c:	d103      	bne.n	8018a66 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8018a5e:	f7ff fcdb 	bl	8018418 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8018a62:	2300      	movs	r3, #0
 8018a64:	e05c      	b.n	8018b20 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8018a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a68:	2b00      	cmp	r3, #0
 8018a6a:	d106      	bne.n	8018a7a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018a6c:	f107 0314 	add.w	r3, r7, #20
 8018a70:	4618      	mov	r0, r3
 8018a72:	f001 fa2d 	bl	8019ed0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018a76:	2301      	movs	r3, #1
 8018a78:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8018a7a:	f7ff fccd 	bl	8018418 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8018a7e:	f000 ffa9 	bl	80199d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018a82:	f7ff fc9b 	bl	80183bc <vPortEnterCritical>
 8018a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018a8c:	b25b      	sxtb	r3, r3
 8018a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018a92:	d103      	bne.n	8018a9c <xQueueGenericSend+0x164>
 8018a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a96:	2200      	movs	r2, #0
 8018a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018aa2:	b25b      	sxtb	r3, r3
 8018aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018aa8:	d103      	bne.n	8018ab2 <xQueueGenericSend+0x17a>
 8018aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018aac:	2200      	movs	r2, #0
 8018aae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018ab2:	f7ff fcb1 	bl	8018418 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018ab6:	1d3a      	adds	r2, r7, #4
 8018ab8:	f107 0314 	add.w	r3, r7, #20
 8018abc:	4611      	mov	r1, r2
 8018abe:	4618      	mov	r0, r3
 8018ac0:	f001 fa1c 	bl	8019efc <xTaskCheckForTimeOut>
 8018ac4:	4603      	mov	r3, r0
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	d124      	bne.n	8018b14 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8018aca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018acc:	f000 fcdf 	bl	801948e <prvIsQueueFull>
 8018ad0:	4603      	mov	r3, r0
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	d018      	beq.n	8018b08 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8018ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ad8:	3310      	adds	r3, #16
 8018ada:	687a      	ldr	r2, [r7, #4]
 8018adc:	4611      	mov	r1, r2
 8018ade:	4618      	mov	r0, r3
 8018ae0:	f001 f946 	bl	8019d70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8018ae4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018ae6:	f000 fc6a 	bl	80193be <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8018aea:	f000 ff81 	bl	80199f0 <xTaskResumeAll>
 8018aee:	4603      	mov	r3, r0
 8018af0:	2b00      	cmp	r3, #0
 8018af2:	f47f af7c 	bne.w	80189ee <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8018af6:	4b0c      	ldr	r3, [pc, #48]	; (8018b28 <xQueueGenericSend+0x1f0>)
 8018af8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018afc:	601a      	str	r2, [r3, #0]
 8018afe:	f3bf 8f4f 	dsb	sy
 8018b02:	f3bf 8f6f 	isb	sy
 8018b06:	e772      	b.n	80189ee <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8018b08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018b0a:	f000 fc58 	bl	80193be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018b0e:	f000 ff6f 	bl	80199f0 <xTaskResumeAll>
 8018b12:	e76c      	b.n	80189ee <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8018b14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018b16:	f000 fc52 	bl	80193be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018b1a:	f000 ff69 	bl	80199f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8018b1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8018b20:	4618      	mov	r0, r3
 8018b22:	3738      	adds	r7, #56	; 0x38
 8018b24:	46bd      	mov	sp, r7
 8018b26:	bd80      	pop	{r7, pc}
 8018b28:	e000ed04 	.word	0xe000ed04

08018b2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8018b2c:	b580      	push	{r7, lr}
 8018b2e:	b08e      	sub	sp, #56	; 0x38
 8018b30:	af00      	add	r7, sp, #0
 8018b32:	60f8      	str	r0, [r7, #12]
 8018b34:	60b9      	str	r1, [r7, #8]
 8018b36:	607a      	str	r2, [r7, #4]
 8018b38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8018b3a:	68fb      	ldr	r3, [r7, #12]
 8018b3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8018b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b40:	2b00      	cmp	r3, #0
 8018b42:	d109      	bne.n	8018b58 <xQueueGenericSendFromISR+0x2c>
 8018b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b48:	f383 8811 	msr	BASEPRI, r3
 8018b4c:	f3bf 8f6f 	isb	sy
 8018b50:	f3bf 8f4f 	dsb	sy
 8018b54:	627b      	str	r3, [r7, #36]	; 0x24
 8018b56:	e7fe      	b.n	8018b56 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018b58:	68bb      	ldr	r3, [r7, #8]
 8018b5a:	2b00      	cmp	r3, #0
 8018b5c:	d103      	bne.n	8018b66 <xQueueGenericSendFromISR+0x3a>
 8018b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018b62:	2b00      	cmp	r3, #0
 8018b64:	d101      	bne.n	8018b6a <xQueueGenericSendFromISR+0x3e>
 8018b66:	2301      	movs	r3, #1
 8018b68:	e000      	b.n	8018b6c <xQueueGenericSendFromISR+0x40>
 8018b6a:	2300      	movs	r3, #0
 8018b6c:	2b00      	cmp	r3, #0
 8018b6e:	d109      	bne.n	8018b84 <xQueueGenericSendFromISR+0x58>
 8018b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b74:	f383 8811 	msr	BASEPRI, r3
 8018b78:	f3bf 8f6f 	isb	sy
 8018b7c:	f3bf 8f4f 	dsb	sy
 8018b80:	623b      	str	r3, [r7, #32]
 8018b82:	e7fe      	b.n	8018b82 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8018b84:	683b      	ldr	r3, [r7, #0]
 8018b86:	2b02      	cmp	r3, #2
 8018b88:	d103      	bne.n	8018b92 <xQueueGenericSendFromISR+0x66>
 8018b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018b8e:	2b01      	cmp	r3, #1
 8018b90:	d101      	bne.n	8018b96 <xQueueGenericSendFromISR+0x6a>
 8018b92:	2301      	movs	r3, #1
 8018b94:	e000      	b.n	8018b98 <xQueueGenericSendFromISR+0x6c>
 8018b96:	2300      	movs	r3, #0
 8018b98:	2b00      	cmp	r3, #0
 8018b9a:	d109      	bne.n	8018bb0 <xQueueGenericSendFromISR+0x84>
 8018b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ba0:	f383 8811 	msr	BASEPRI, r3
 8018ba4:	f3bf 8f6f 	isb	sy
 8018ba8:	f3bf 8f4f 	dsb	sy
 8018bac:	61fb      	str	r3, [r7, #28]
 8018bae:	e7fe      	b.n	8018bae <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8018bb0:	f7ff fce0 	bl	8018574 <vPortValidateInterruptPriority>
	__asm volatile
 8018bb4:	f3ef 8211 	mrs	r2, BASEPRI
 8018bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018bbc:	f383 8811 	msr	BASEPRI, r3
 8018bc0:	f3bf 8f6f 	isb	sy
 8018bc4:	f3bf 8f4f 	dsb	sy
 8018bc8:	61ba      	str	r2, [r7, #24]
 8018bca:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8018bcc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8018bce:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8018bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018bd8:	429a      	cmp	r2, r3
 8018bda:	d302      	bcc.n	8018be2 <xQueueGenericSendFromISR+0xb6>
 8018bdc:	683b      	ldr	r3, [r7, #0]
 8018bde:	2b02      	cmp	r3, #2
 8018be0:	d12c      	bne.n	8018c3c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8018be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018be4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018be8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8018bec:	683a      	ldr	r2, [r7, #0]
 8018bee:	68b9      	ldr	r1, [r7, #8]
 8018bf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018bf2:	f000 fb54 	bl	801929e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8018bf6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8018bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018bfe:	d112      	bne.n	8018c26 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c04:	2b00      	cmp	r3, #0
 8018c06:	d016      	beq.n	8018c36 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c0a:	3324      	adds	r3, #36	; 0x24
 8018c0c:	4618      	mov	r0, r3
 8018c0e:	f001 f8fd 	bl	8019e0c <xTaskRemoveFromEventList>
 8018c12:	4603      	mov	r3, r0
 8018c14:	2b00      	cmp	r3, #0
 8018c16:	d00e      	beq.n	8018c36 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8018c18:	687b      	ldr	r3, [r7, #4]
 8018c1a:	2b00      	cmp	r3, #0
 8018c1c:	d00b      	beq.n	8018c36 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8018c1e:	687b      	ldr	r3, [r7, #4]
 8018c20:	2201      	movs	r2, #1
 8018c22:	601a      	str	r2, [r3, #0]
 8018c24:	e007      	b.n	8018c36 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8018c26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8018c2a:	3301      	adds	r3, #1
 8018c2c:	b2db      	uxtb	r3, r3
 8018c2e:	b25a      	sxtb	r2, r3
 8018c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8018c36:	2301      	movs	r3, #1
 8018c38:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8018c3a:	e001      	b.n	8018c40 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8018c3c:	2300      	movs	r3, #0
 8018c3e:	637b      	str	r3, [r7, #52]	; 0x34
 8018c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c42:	613b      	str	r3, [r7, #16]
	__asm volatile
 8018c44:	693b      	ldr	r3, [r7, #16]
 8018c46:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8018c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8018c4c:	4618      	mov	r0, r3
 8018c4e:	3738      	adds	r7, #56	; 0x38
 8018c50:	46bd      	mov	sp, r7
 8018c52:	bd80      	pop	{r7, pc}

08018c54 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8018c54:	b580      	push	{r7, lr}
 8018c56:	b08e      	sub	sp, #56	; 0x38
 8018c58:	af00      	add	r7, sp, #0
 8018c5a:	6078      	str	r0, [r7, #4]
 8018c5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8018c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c64:	2b00      	cmp	r3, #0
 8018c66:	d109      	bne.n	8018c7c <xQueueGiveFromISR+0x28>
	__asm volatile
 8018c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c6c:	f383 8811 	msr	BASEPRI, r3
 8018c70:	f3bf 8f6f 	isb	sy
 8018c74:	f3bf 8f4f 	dsb	sy
 8018c78:	623b      	str	r3, [r7, #32]
 8018c7a:	e7fe      	b.n	8018c7a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8018c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018c80:	2b00      	cmp	r3, #0
 8018c82:	d009      	beq.n	8018c98 <xQueueGiveFromISR+0x44>
 8018c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c88:	f383 8811 	msr	BASEPRI, r3
 8018c8c:	f3bf 8f6f 	isb	sy
 8018c90:	f3bf 8f4f 	dsb	sy
 8018c94:	61fb      	str	r3, [r7, #28]
 8018c96:	e7fe      	b.n	8018c96 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8018c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c9a:	681b      	ldr	r3, [r3, #0]
 8018c9c:	2b00      	cmp	r3, #0
 8018c9e:	d103      	bne.n	8018ca8 <xQueueGiveFromISR+0x54>
 8018ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ca2:	689b      	ldr	r3, [r3, #8]
 8018ca4:	2b00      	cmp	r3, #0
 8018ca6:	d101      	bne.n	8018cac <xQueueGiveFromISR+0x58>
 8018ca8:	2301      	movs	r3, #1
 8018caa:	e000      	b.n	8018cae <xQueueGiveFromISR+0x5a>
 8018cac:	2300      	movs	r3, #0
 8018cae:	2b00      	cmp	r3, #0
 8018cb0:	d109      	bne.n	8018cc6 <xQueueGiveFromISR+0x72>
 8018cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018cb6:	f383 8811 	msr	BASEPRI, r3
 8018cba:	f3bf 8f6f 	isb	sy
 8018cbe:	f3bf 8f4f 	dsb	sy
 8018cc2:	61bb      	str	r3, [r7, #24]
 8018cc4:	e7fe      	b.n	8018cc4 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8018cc6:	f7ff fc55 	bl	8018574 <vPortValidateInterruptPriority>
	__asm volatile
 8018cca:	f3ef 8211 	mrs	r2, BASEPRI
 8018cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018cd2:	f383 8811 	msr	BASEPRI, r3
 8018cd6:	f3bf 8f6f 	isb	sy
 8018cda:	f3bf 8f4f 	dsb	sy
 8018cde:	617a      	str	r2, [r7, #20]
 8018ce0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8018ce2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8018ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018cea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8018cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018cf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018cf2:	429a      	cmp	r2, r3
 8018cf4:	d22b      	bcs.n	8018d4e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8018cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018cf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018cfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8018d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d02:	1c5a      	adds	r2, r3, #1
 8018d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d06:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8018d08:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8018d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018d10:	d112      	bne.n	8018d38 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d16:	2b00      	cmp	r3, #0
 8018d18:	d016      	beq.n	8018d48 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d1c:	3324      	adds	r3, #36	; 0x24
 8018d1e:	4618      	mov	r0, r3
 8018d20:	f001 f874 	bl	8019e0c <xTaskRemoveFromEventList>
 8018d24:	4603      	mov	r3, r0
 8018d26:	2b00      	cmp	r3, #0
 8018d28:	d00e      	beq.n	8018d48 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8018d2a:	683b      	ldr	r3, [r7, #0]
 8018d2c:	2b00      	cmp	r3, #0
 8018d2e:	d00b      	beq.n	8018d48 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8018d30:	683b      	ldr	r3, [r7, #0]
 8018d32:	2201      	movs	r2, #1
 8018d34:	601a      	str	r2, [r3, #0]
 8018d36:	e007      	b.n	8018d48 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8018d38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018d3c:	3301      	adds	r3, #1
 8018d3e:	b2db      	uxtb	r3, r3
 8018d40:	b25a      	sxtb	r2, r3
 8018d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8018d48:	2301      	movs	r3, #1
 8018d4a:	637b      	str	r3, [r7, #52]	; 0x34
 8018d4c:	e001      	b.n	8018d52 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8018d4e:	2300      	movs	r3, #0
 8018d50:	637b      	str	r3, [r7, #52]	; 0x34
 8018d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d54:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8018d56:	68fb      	ldr	r3, [r7, #12]
 8018d58:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8018d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8018d5e:	4618      	mov	r0, r3
 8018d60:	3738      	adds	r7, #56	; 0x38
 8018d62:	46bd      	mov	sp, r7
 8018d64:	bd80      	pop	{r7, pc}
	...

08018d68 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8018d68:	b580      	push	{r7, lr}
 8018d6a:	b08c      	sub	sp, #48	; 0x30
 8018d6c:	af00      	add	r7, sp, #0
 8018d6e:	60f8      	str	r0, [r7, #12]
 8018d70:	60b9      	str	r1, [r7, #8]
 8018d72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8018d74:	2300      	movs	r3, #0
 8018d76:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8018d78:	68fb      	ldr	r3, [r7, #12]
 8018d7a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8018d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d7e:	2b00      	cmp	r3, #0
 8018d80:	d109      	bne.n	8018d96 <xQueueReceive+0x2e>
	__asm volatile
 8018d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d86:	f383 8811 	msr	BASEPRI, r3
 8018d8a:	f3bf 8f6f 	isb	sy
 8018d8e:	f3bf 8f4f 	dsb	sy
 8018d92:	623b      	str	r3, [r7, #32]
 8018d94:	e7fe      	b.n	8018d94 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018d96:	68bb      	ldr	r3, [r7, #8]
 8018d98:	2b00      	cmp	r3, #0
 8018d9a:	d103      	bne.n	8018da4 <xQueueReceive+0x3c>
 8018d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018da0:	2b00      	cmp	r3, #0
 8018da2:	d101      	bne.n	8018da8 <xQueueReceive+0x40>
 8018da4:	2301      	movs	r3, #1
 8018da6:	e000      	b.n	8018daa <xQueueReceive+0x42>
 8018da8:	2300      	movs	r3, #0
 8018daa:	2b00      	cmp	r3, #0
 8018dac:	d109      	bne.n	8018dc2 <xQueueReceive+0x5a>
 8018dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018db2:	f383 8811 	msr	BASEPRI, r3
 8018db6:	f3bf 8f6f 	isb	sy
 8018dba:	f3bf 8f4f 	dsb	sy
 8018dbe:	61fb      	str	r3, [r7, #28]
 8018dc0:	e7fe      	b.n	8018dc0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018dc2:	f001 f9d9 	bl	801a178 <xTaskGetSchedulerState>
 8018dc6:	4603      	mov	r3, r0
 8018dc8:	2b00      	cmp	r3, #0
 8018dca:	d102      	bne.n	8018dd2 <xQueueReceive+0x6a>
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	2b00      	cmp	r3, #0
 8018dd0:	d101      	bne.n	8018dd6 <xQueueReceive+0x6e>
 8018dd2:	2301      	movs	r3, #1
 8018dd4:	e000      	b.n	8018dd8 <xQueueReceive+0x70>
 8018dd6:	2300      	movs	r3, #0
 8018dd8:	2b00      	cmp	r3, #0
 8018dda:	d109      	bne.n	8018df0 <xQueueReceive+0x88>
 8018ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018de0:	f383 8811 	msr	BASEPRI, r3
 8018de4:	f3bf 8f6f 	isb	sy
 8018de8:	f3bf 8f4f 	dsb	sy
 8018dec:	61bb      	str	r3, [r7, #24]
 8018dee:	e7fe      	b.n	8018dee <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8018df0:	f7ff fae4 	bl	80183bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018df8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018dfc:	2b00      	cmp	r3, #0
 8018dfe:	d01f      	beq.n	8018e40 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8018e00:	68b9      	ldr	r1, [r7, #8]
 8018e02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018e04:	f000 fab5 	bl	8019372 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8018e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e0a:	1e5a      	subs	r2, r3, #1
 8018e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e0e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e12:	691b      	ldr	r3, [r3, #16]
 8018e14:	2b00      	cmp	r3, #0
 8018e16:	d00f      	beq.n	8018e38 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e1a:	3310      	adds	r3, #16
 8018e1c:	4618      	mov	r0, r3
 8018e1e:	f000 fff5 	bl	8019e0c <xTaskRemoveFromEventList>
 8018e22:	4603      	mov	r3, r0
 8018e24:	2b00      	cmp	r3, #0
 8018e26:	d007      	beq.n	8018e38 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8018e28:	4b3c      	ldr	r3, [pc, #240]	; (8018f1c <xQueueReceive+0x1b4>)
 8018e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018e2e:	601a      	str	r2, [r3, #0]
 8018e30:	f3bf 8f4f 	dsb	sy
 8018e34:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8018e38:	f7ff faee 	bl	8018418 <vPortExitCritical>
				return pdPASS;
 8018e3c:	2301      	movs	r3, #1
 8018e3e:	e069      	b.n	8018f14 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	2b00      	cmp	r3, #0
 8018e44:	d103      	bne.n	8018e4e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8018e46:	f7ff fae7 	bl	8018418 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8018e4a:	2300      	movs	r3, #0
 8018e4c:	e062      	b.n	8018f14 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8018e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e50:	2b00      	cmp	r3, #0
 8018e52:	d106      	bne.n	8018e62 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018e54:	f107 0310 	add.w	r3, r7, #16
 8018e58:	4618      	mov	r0, r3
 8018e5a:	f001 f839 	bl	8019ed0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018e5e:	2301      	movs	r3, #1
 8018e60:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8018e62:	f7ff fad9 	bl	8018418 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8018e66:	f000 fdb5 	bl	80199d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018e6a:	f7ff faa7 	bl	80183bc <vPortEnterCritical>
 8018e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018e74:	b25b      	sxtb	r3, r3
 8018e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018e7a:	d103      	bne.n	8018e84 <xQueueReceive+0x11c>
 8018e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e7e:	2200      	movs	r2, #0
 8018e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018e8a:	b25b      	sxtb	r3, r3
 8018e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018e90:	d103      	bne.n	8018e9a <xQueueReceive+0x132>
 8018e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e94:	2200      	movs	r2, #0
 8018e96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018e9a:	f7ff fabd 	bl	8018418 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018e9e:	1d3a      	adds	r2, r7, #4
 8018ea0:	f107 0310 	add.w	r3, r7, #16
 8018ea4:	4611      	mov	r1, r2
 8018ea6:	4618      	mov	r0, r3
 8018ea8:	f001 f828 	bl	8019efc <xTaskCheckForTimeOut>
 8018eac:	4603      	mov	r3, r0
 8018eae:	2b00      	cmp	r3, #0
 8018eb0:	d123      	bne.n	8018efa <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018eb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018eb4:	f000 fad5 	bl	8019462 <prvIsQueueEmpty>
 8018eb8:	4603      	mov	r3, r0
 8018eba:	2b00      	cmp	r3, #0
 8018ebc:	d017      	beq.n	8018eee <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8018ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ec0:	3324      	adds	r3, #36	; 0x24
 8018ec2:	687a      	ldr	r2, [r7, #4]
 8018ec4:	4611      	mov	r1, r2
 8018ec6:	4618      	mov	r0, r3
 8018ec8:	f000 ff52 	bl	8019d70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8018ecc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018ece:	f000 fa76 	bl	80193be <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8018ed2:	f000 fd8d 	bl	80199f0 <xTaskResumeAll>
 8018ed6:	4603      	mov	r3, r0
 8018ed8:	2b00      	cmp	r3, #0
 8018eda:	d189      	bne.n	8018df0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8018edc:	4b0f      	ldr	r3, [pc, #60]	; (8018f1c <xQueueReceive+0x1b4>)
 8018ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018ee2:	601a      	str	r2, [r3, #0]
 8018ee4:	f3bf 8f4f 	dsb	sy
 8018ee8:	f3bf 8f6f 	isb	sy
 8018eec:	e780      	b.n	8018df0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8018eee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018ef0:	f000 fa65 	bl	80193be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018ef4:	f000 fd7c 	bl	80199f0 <xTaskResumeAll>
 8018ef8:	e77a      	b.n	8018df0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8018efa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018efc:	f000 fa5f 	bl	80193be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018f00:	f000 fd76 	bl	80199f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018f04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018f06:	f000 faac 	bl	8019462 <prvIsQueueEmpty>
 8018f0a:	4603      	mov	r3, r0
 8018f0c:	2b00      	cmp	r3, #0
 8018f0e:	f43f af6f 	beq.w	8018df0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8018f12:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8018f14:	4618      	mov	r0, r3
 8018f16:	3730      	adds	r7, #48	; 0x30
 8018f18:	46bd      	mov	sp, r7
 8018f1a:	bd80      	pop	{r7, pc}
 8018f1c:	e000ed04 	.word	0xe000ed04

08018f20 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8018f20:	b580      	push	{r7, lr}
 8018f22:	b08e      	sub	sp, #56	; 0x38
 8018f24:	af00      	add	r7, sp, #0
 8018f26:	6078      	str	r0, [r7, #4]
 8018f28:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8018f2a:	2300      	movs	r3, #0
 8018f2c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8018f2e:	687b      	ldr	r3, [r7, #4]
 8018f30:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8018f32:	2300      	movs	r3, #0
 8018f34:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8018f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f38:	2b00      	cmp	r3, #0
 8018f3a:	d109      	bne.n	8018f50 <xQueueSemaphoreTake+0x30>
 8018f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f40:	f383 8811 	msr	BASEPRI, r3
 8018f44:	f3bf 8f6f 	isb	sy
 8018f48:	f3bf 8f4f 	dsb	sy
 8018f4c:	623b      	str	r3, [r7, #32]
 8018f4e:	e7fe      	b.n	8018f4e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8018f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f54:	2b00      	cmp	r3, #0
 8018f56:	d009      	beq.n	8018f6c <xQueueSemaphoreTake+0x4c>
 8018f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f5c:	f383 8811 	msr	BASEPRI, r3
 8018f60:	f3bf 8f6f 	isb	sy
 8018f64:	f3bf 8f4f 	dsb	sy
 8018f68:	61fb      	str	r3, [r7, #28]
 8018f6a:	e7fe      	b.n	8018f6a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018f6c:	f001 f904 	bl	801a178 <xTaskGetSchedulerState>
 8018f70:	4603      	mov	r3, r0
 8018f72:	2b00      	cmp	r3, #0
 8018f74:	d102      	bne.n	8018f7c <xQueueSemaphoreTake+0x5c>
 8018f76:	683b      	ldr	r3, [r7, #0]
 8018f78:	2b00      	cmp	r3, #0
 8018f7a:	d101      	bne.n	8018f80 <xQueueSemaphoreTake+0x60>
 8018f7c:	2301      	movs	r3, #1
 8018f7e:	e000      	b.n	8018f82 <xQueueSemaphoreTake+0x62>
 8018f80:	2300      	movs	r3, #0
 8018f82:	2b00      	cmp	r3, #0
 8018f84:	d109      	bne.n	8018f9a <xQueueSemaphoreTake+0x7a>
 8018f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f8a:	f383 8811 	msr	BASEPRI, r3
 8018f8e:	f3bf 8f6f 	isb	sy
 8018f92:	f3bf 8f4f 	dsb	sy
 8018f96:	61bb      	str	r3, [r7, #24]
 8018f98:	e7fe      	b.n	8018f98 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8018f9a:	f7ff fa0f 	bl	80183bc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8018f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018fa2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8018fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fa6:	2b00      	cmp	r3, #0
 8018fa8:	d024      	beq.n	8018ff4 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8018faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fac:	1e5a      	subs	r2, r3, #1
 8018fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fb0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8018fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fb4:	681b      	ldr	r3, [r3, #0]
 8018fb6:	2b00      	cmp	r3, #0
 8018fb8:	d104      	bne.n	8018fc4 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8018fba:	f001 fa4f 	bl	801a45c <pvTaskIncrementMutexHeldCount>
 8018fbe:	4602      	mov	r2, r0
 8018fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fc2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fc6:	691b      	ldr	r3, [r3, #16]
 8018fc8:	2b00      	cmp	r3, #0
 8018fca:	d00f      	beq.n	8018fec <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fce:	3310      	adds	r3, #16
 8018fd0:	4618      	mov	r0, r3
 8018fd2:	f000 ff1b 	bl	8019e0c <xTaskRemoveFromEventList>
 8018fd6:	4603      	mov	r3, r0
 8018fd8:	2b00      	cmp	r3, #0
 8018fda:	d007      	beq.n	8018fec <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8018fdc:	4b53      	ldr	r3, [pc, #332]	; (801912c <xQueueSemaphoreTake+0x20c>)
 8018fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018fe2:	601a      	str	r2, [r3, #0]
 8018fe4:	f3bf 8f4f 	dsb	sy
 8018fe8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8018fec:	f7ff fa14 	bl	8018418 <vPortExitCritical>
				return pdPASS;
 8018ff0:	2301      	movs	r3, #1
 8018ff2:	e096      	b.n	8019122 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8018ff4:	683b      	ldr	r3, [r7, #0]
 8018ff6:	2b00      	cmp	r3, #0
 8018ff8:	d110      	bne.n	801901c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8018ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ffc:	2b00      	cmp	r3, #0
 8018ffe:	d009      	beq.n	8019014 <xQueueSemaphoreTake+0xf4>
 8019000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019004:	f383 8811 	msr	BASEPRI, r3
 8019008:	f3bf 8f6f 	isb	sy
 801900c:	f3bf 8f4f 	dsb	sy
 8019010:	617b      	str	r3, [r7, #20]
 8019012:	e7fe      	b.n	8019012 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8019014:	f7ff fa00 	bl	8018418 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8019018:	2300      	movs	r3, #0
 801901a:	e082      	b.n	8019122 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 801901c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801901e:	2b00      	cmp	r3, #0
 8019020:	d106      	bne.n	8019030 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8019022:	f107 030c 	add.w	r3, r7, #12
 8019026:	4618      	mov	r0, r3
 8019028:	f000 ff52 	bl	8019ed0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801902c:	2301      	movs	r3, #1
 801902e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8019030:	f7ff f9f2 	bl	8018418 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8019034:	f000 fcce 	bl	80199d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8019038:	f7ff f9c0 	bl	80183bc <vPortEnterCritical>
 801903c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801903e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019042:	b25b      	sxtb	r3, r3
 8019044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019048:	d103      	bne.n	8019052 <xQueueSemaphoreTake+0x132>
 801904a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801904c:	2200      	movs	r2, #0
 801904e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019054:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019058:	b25b      	sxtb	r3, r3
 801905a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801905e:	d103      	bne.n	8019068 <xQueueSemaphoreTake+0x148>
 8019060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019062:	2200      	movs	r2, #0
 8019064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019068:	f7ff f9d6 	bl	8018418 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801906c:	463a      	mov	r2, r7
 801906e:	f107 030c 	add.w	r3, r7, #12
 8019072:	4611      	mov	r1, r2
 8019074:	4618      	mov	r0, r3
 8019076:	f000 ff41 	bl	8019efc <xTaskCheckForTimeOut>
 801907a:	4603      	mov	r3, r0
 801907c:	2b00      	cmp	r3, #0
 801907e:	d132      	bne.n	80190e6 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019080:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019082:	f000 f9ee 	bl	8019462 <prvIsQueueEmpty>
 8019086:	4603      	mov	r3, r0
 8019088:	2b00      	cmp	r3, #0
 801908a:	d026      	beq.n	80190da <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801908c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801908e:	681b      	ldr	r3, [r3, #0]
 8019090:	2b00      	cmp	r3, #0
 8019092:	d109      	bne.n	80190a8 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8019094:	f7ff f992 	bl	80183bc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8019098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801909a:	689b      	ldr	r3, [r3, #8]
 801909c:	4618      	mov	r0, r3
 801909e:	f001 f889 	bl	801a1b4 <xTaskPriorityInherit>
 80190a2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80190a4:	f7ff f9b8 	bl	8018418 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80190a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190aa:	3324      	adds	r3, #36	; 0x24
 80190ac:	683a      	ldr	r2, [r7, #0]
 80190ae:	4611      	mov	r1, r2
 80190b0:	4618      	mov	r0, r3
 80190b2:	f000 fe5d 	bl	8019d70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80190b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80190b8:	f000 f981 	bl	80193be <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80190bc:	f000 fc98 	bl	80199f0 <xTaskResumeAll>
 80190c0:	4603      	mov	r3, r0
 80190c2:	2b00      	cmp	r3, #0
 80190c4:	f47f af69 	bne.w	8018f9a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80190c8:	4b18      	ldr	r3, [pc, #96]	; (801912c <xQueueSemaphoreTake+0x20c>)
 80190ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80190ce:	601a      	str	r2, [r3, #0]
 80190d0:	f3bf 8f4f 	dsb	sy
 80190d4:	f3bf 8f6f 	isb	sy
 80190d8:	e75f      	b.n	8018f9a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80190da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80190dc:	f000 f96f 	bl	80193be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80190e0:	f000 fc86 	bl	80199f0 <xTaskResumeAll>
 80190e4:	e759      	b.n	8018f9a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80190e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80190e8:	f000 f969 	bl	80193be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80190ec:	f000 fc80 	bl	80199f0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80190f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80190f2:	f000 f9b6 	bl	8019462 <prvIsQueueEmpty>
 80190f6:	4603      	mov	r3, r0
 80190f8:	2b00      	cmp	r3, #0
 80190fa:	f43f af4e 	beq.w	8018f9a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80190fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019100:	2b00      	cmp	r3, #0
 8019102:	d00d      	beq.n	8019120 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8019104:	f7ff f95a 	bl	80183bc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8019108:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801910a:	f000 f8b0 	bl	801926e <prvGetDisinheritPriorityAfterTimeout>
 801910e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8019110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019112:	689b      	ldr	r3, [r3, #8]
 8019114:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019116:	4618      	mov	r0, r3
 8019118:	f001 f920 	bl	801a35c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801911c:	f7ff f97c 	bl	8018418 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8019120:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8019122:	4618      	mov	r0, r3
 8019124:	3738      	adds	r7, #56	; 0x38
 8019126:	46bd      	mov	sp, r7
 8019128:	bd80      	pop	{r7, pc}
 801912a:	bf00      	nop
 801912c:	e000ed04 	.word	0xe000ed04

08019130 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8019130:	b580      	push	{r7, lr}
 8019132:	b08e      	sub	sp, #56	; 0x38
 8019134:	af00      	add	r7, sp, #0
 8019136:	60f8      	str	r0, [r7, #12]
 8019138:	60b9      	str	r1, [r7, #8]
 801913a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801913c:	68fb      	ldr	r3, [r7, #12]
 801913e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8019140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019142:	2b00      	cmp	r3, #0
 8019144:	d109      	bne.n	801915a <xQueueReceiveFromISR+0x2a>
 8019146:	f04f 0350 	mov.w	r3, #80	; 0x50
 801914a:	f383 8811 	msr	BASEPRI, r3
 801914e:	f3bf 8f6f 	isb	sy
 8019152:	f3bf 8f4f 	dsb	sy
 8019156:	623b      	str	r3, [r7, #32]
 8019158:	e7fe      	b.n	8019158 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801915a:	68bb      	ldr	r3, [r7, #8]
 801915c:	2b00      	cmp	r3, #0
 801915e:	d103      	bne.n	8019168 <xQueueReceiveFromISR+0x38>
 8019160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019164:	2b00      	cmp	r3, #0
 8019166:	d101      	bne.n	801916c <xQueueReceiveFromISR+0x3c>
 8019168:	2301      	movs	r3, #1
 801916a:	e000      	b.n	801916e <xQueueReceiveFromISR+0x3e>
 801916c:	2300      	movs	r3, #0
 801916e:	2b00      	cmp	r3, #0
 8019170:	d109      	bne.n	8019186 <xQueueReceiveFromISR+0x56>
 8019172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019176:	f383 8811 	msr	BASEPRI, r3
 801917a:	f3bf 8f6f 	isb	sy
 801917e:	f3bf 8f4f 	dsb	sy
 8019182:	61fb      	str	r3, [r7, #28]
 8019184:	e7fe      	b.n	8019184 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8019186:	f7ff f9f5 	bl	8018574 <vPortValidateInterruptPriority>
	__asm volatile
 801918a:	f3ef 8211 	mrs	r2, BASEPRI
 801918e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019192:	f383 8811 	msr	BASEPRI, r3
 8019196:	f3bf 8f6f 	isb	sy
 801919a:	f3bf 8f4f 	dsb	sy
 801919e:	61ba      	str	r2, [r7, #24]
 80191a0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80191a2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80191a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80191a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80191aa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80191ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191ae:	2b00      	cmp	r3, #0
 80191b0:	d02f      	beq.n	8019212 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80191b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80191b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80191bc:	68b9      	ldr	r1, [r7, #8]
 80191be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80191c0:	f000 f8d7 	bl	8019372 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80191c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191c6:	1e5a      	subs	r2, r3, #1
 80191c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191ca:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80191cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80191d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80191d4:	d112      	bne.n	80191fc <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80191d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191d8:	691b      	ldr	r3, [r3, #16]
 80191da:	2b00      	cmp	r3, #0
 80191dc:	d016      	beq.n	801920c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80191de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191e0:	3310      	adds	r3, #16
 80191e2:	4618      	mov	r0, r3
 80191e4:	f000 fe12 	bl	8019e0c <xTaskRemoveFromEventList>
 80191e8:	4603      	mov	r3, r0
 80191ea:	2b00      	cmp	r3, #0
 80191ec:	d00e      	beq.n	801920c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80191ee:	687b      	ldr	r3, [r7, #4]
 80191f0:	2b00      	cmp	r3, #0
 80191f2:	d00b      	beq.n	801920c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80191f4:	687b      	ldr	r3, [r7, #4]
 80191f6:	2201      	movs	r2, #1
 80191f8:	601a      	str	r2, [r3, #0]
 80191fa:	e007      	b.n	801920c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80191fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019200:	3301      	adds	r3, #1
 8019202:	b2db      	uxtb	r3, r3
 8019204:	b25a      	sxtb	r2, r3
 8019206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801920c:	2301      	movs	r3, #1
 801920e:	637b      	str	r3, [r7, #52]	; 0x34
 8019210:	e001      	b.n	8019216 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8019212:	2300      	movs	r3, #0
 8019214:	637b      	str	r3, [r7, #52]	; 0x34
 8019216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019218:	613b      	str	r3, [r7, #16]
	__asm volatile
 801921a:	693b      	ldr	r3, [r7, #16]
 801921c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8019220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8019222:	4618      	mov	r0, r3
 8019224:	3738      	adds	r7, #56	; 0x38
 8019226:	46bd      	mov	sp, r7
 8019228:	bd80      	pop	{r7, pc}

0801922a <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801922a:	b580      	push	{r7, lr}
 801922c:	b084      	sub	sp, #16
 801922e:	af00      	add	r7, sp, #0
 8019230:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8019236:	68fb      	ldr	r3, [r7, #12]
 8019238:	2b00      	cmp	r3, #0
 801923a:	d109      	bne.n	8019250 <vQueueDelete+0x26>
	__asm volatile
 801923c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019240:	f383 8811 	msr	BASEPRI, r3
 8019244:	f3bf 8f6f 	isb	sy
 8019248:	f3bf 8f4f 	dsb	sy
 801924c:	60bb      	str	r3, [r7, #8]
 801924e:	e7fe      	b.n	801924e <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8019250:	68f8      	ldr	r0, [r7, #12]
 8019252:	f000 f95d 	bl	8019510 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8019256:	68fb      	ldr	r3, [r7, #12]
 8019258:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801925c:	2b00      	cmp	r3, #0
 801925e:	d102      	bne.n	8019266 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8019260:	68f8      	ldr	r0, [r7, #12]
 8019262:	f7fe fdbf 	bl	8017de4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8019266:	bf00      	nop
 8019268:	3710      	adds	r7, #16
 801926a:	46bd      	mov	sp, r7
 801926c:	bd80      	pop	{r7, pc}

0801926e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801926e:	b480      	push	{r7}
 8019270:	b085      	sub	sp, #20
 8019272:	af00      	add	r7, sp, #0
 8019274:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8019276:	687b      	ldr	r3, [r7, #4]
 8019278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801927a:	2b00      	cmp	r3, #0
 801927c:	d006      	beq.n	801928c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801927e:	687b      	ldr	r3, [r7, #4]
 8019280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019282:	681b      	ldr	r3, [r3, #0]
 8019284:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8019288:	60fb      	str	r3, [r7, #12]
 801928a:	e001      	b.n	8019290 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801928c:	2300      	movs	r3, #0
 801928e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8019290:	68fb      	ldr	r3, [r7, #12]
	}
 8019292:	4618      	mov	r0, r3
 8019294:	3714      	adds	r7, #20
 8019296:	46bd      	mov	sp, r7
 8019298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801929c:	4770      	bx	lr

0801929e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801929e:	b580      	push	{r7, lr}
 80192a0:	b086      	sub	sp, #24
 80192a2:	af00      	add	r7, sp, #0
 80192a4:	60f8      	str	r0, [r7, #12]
 80192a6:	60b9      	str	r1, [r7, #8]
 80192a8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80192aa:	2300      	movs	r3, #0
 80192ac:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80192ae:	68fb      	ldr	r3, [r7, #12]
 80192b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80192b2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80192b4:	68fb      	ldr	r3, [r7, #12]
 80192b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80192b8:	2b00      	cmp	r3, #0
 80192ba:	d10d      	bne.n	80192d8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80192bc:	68fb      	ldr	r3, [r7, #12]
 80192be:	681b      	ldr	r3, [r3, #0]
 80192c0:	2b00      	cmp	r3, #0
 80192c2:	d14d      	bne.n	8019360 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80192c4:	68fb      	ldr	r3, [r7, #12]
 80192c6:	689b      	ldr	r3, [r3, #8]
 80192c8:	4618      	mov	r0, r3
 80192ca:	f000 ffdb 	bl	801a284 <xTaskPriorityDisinherit>
 80192ce:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80192d0:	68fb      	ldr	r3, [r7, #12]
 80192d2:	2200      	movs	r2, #0
 80192d4:	609a      	str	r2, [r3, #8]
 80192d6:	e043      	b.n	8019360 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	2b00      	cmp	r3, #0
 80192dc:	d119      	bne.n	8019312 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80192de:	68fb      	ldr	r3, [r7, #12]
 80192e0:	6858      	ldr	r0, [r3, #4]
 80192e2:	68fb      	ldr	r3, [r7, #12]
 80192e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80192e6:	461a      	mov	r2, r3
 80192e8:	68b9      	ldr	r1, [r7, #8]
 80192ea:	f015 f922 	bl	802e532 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80192ee:	68fb      	ldr	r3, [r7, #12]
 80192f0:	685a      	ldr	r2, [r3, #4]
 80192f2:	68fb      	ldr	r3, [r7, #12]
 80192f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80192f6:	441a      	add	r2, r3
 80192f8:	68fb      	ldr	r3, [r7, #12]
 80192fa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80192fc:	68fb      	ldr	r3, [r7, #12]
 80192fe:	685a      	ldr	r2, [r3, #4]
 8019300:	68fb      	ldr	r3, [r7, #12]
 8019302:	689b      	ldr	r3, [r3, #8]
 8019304:	429a      	cmp	r2, r3
 8019306:	d32b      	bcc.n	8019360 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8019308:	68fb      	ldr	r3, [r7, #12]
 801930a:	681a      	ldr	r2, [r3, #0]
 801930c:	68fb      	ldr	r3, [r7, #12]
 801930e:	605a      	str	r2, [r3, #4]
 8019310:	e026      	b.n	8019360 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8019312:	68fb      	ldr	r3, [r7, #12]
 8019314:	68d8      	ldr	r0, [r3, #12]
 8019316:	68fb      	ldr	r3, [r7, #12]
 8019318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801931a:	461a      	mov	r2, r3
 801931c:	68b9      	ldr	r1, [r7, #8]
 801931e:	f015 f908 	bl	802e532 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8019322:	68fb      	ldr	r3, [r7, #12]
 8019324:	68da      	ldr	r2, [r3, #12]
 8019326:	68fb      	ldr	r3, [r7, #12]
 8019328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801932a:	425b      	negs	r3, r3
 801932c:	441a      	add	r2, r3
 801932e:	68fb      	ldr	r3, [r7, #12]
 8019330:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8019332:	68fb      	ldr	r3, [r7, #12]
 8019334:	68da      	ldr	r2, [r3, #12]
 8019336:	68fb      	ldr	r3, [r7, #12]
 8019338:	681b      	ldr	r3, [r3, #0]
 801933a:	429a      	cmp	r2, r3
 801933c:	d207      	bcs.n	801934e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801933e:	68fb      	ldr	r3, [r7, #12]
 8019340:	689a      	ldr	r2, [r3, #8]
 8019342:	68fb      	ldr	r3, [r7, #12]
 8019344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019346:	425b      	negs	r3, r3
 8019348:	441a      	add	r2, r3
 801934a:	68fb      	ldr	r3, [r7, #12]
 801934c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801934e:	687b      	ldr	r3, [r7, #4]
 8019350:	2b02      	cmp	r3, #2
 8019352:	d105      	bne.n	8019360 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8019354:	693b      	ldr	r3, [r7, #16]
 8019356:	2b00      	cmp	r3, #0
 8019358:	d002      	beq.n	8019360 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801935a:	693b      	ldr	r3, [r7, #16]
 801935c:	3b01      	subs	r3, #1
 801935e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8019360:	693b      	ldr	r3, [r7, #16]
 8019362:	1c5a      	adds	r2, r3, #1
 8019364:	68fb      	ldr	r3, [r7, #12]
 8019366:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8019368:	697b      	ldr	r3, [r7, #20]
}
 801936a:	4618      	mov	r0, r3
 801936c:	3718      	adds	r7, #24
 801936e:	46bd      	mov	sp, r7
 8019370:	bd80      	pop	{r7, pc}

08019372 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8019372:	b580      	push	{r7, lr}
 8019374:	b082      	sub	sp, #8
 8019376:	af00      	add	r7, sp, #0
 8019378:	6078      	str	r0, [r7, #4]
 801937a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801937c:	687b      	ldr	r3, [r7, #4]
 801937e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019380:	2b00      	cmp	r3, #0
 8019382:	d018      	beq.n	80193b6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8019384:	687b      	ldr	r3, [r7, #4]
 8019386:	68da      	ldr	r2, [r3, #12]
 8019388:	687b      	ldr	r3, [r7, #4]
 801938a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801938c:	441a      	add	r2, r3
 801938e:	687b      	ldr	r3, [r7, #4]
 8019390:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8019392:	687b      	ldr	r3, [r7, #4]
 8019394:	68da      	ldr	r2, [r3, #12]
 8019396:	687b      	ldr	r3, [r7, #4]
 8019398:	689b      	ldr	r3, [r3, #8]
 801939a:	429a      	cmp	r2, r3
 801939c:	d303      	bcc.n	80193a6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801939e:	687b      	ldr	r3, [r7, #4]
 80193a0:	681a      	ldr	r2, [r3, #0]
 80193a2:	687b      	ldr	r3, [r7, #4]
 80193a4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80193a6:	687b      	ldr	r3, [r7, #4]
 80193a8:	68d9      	ldr	r1, [r3, #12]
 80193aa:	687b      	ldr	r3, [r7, #4]
 80193ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80193ae:	461a      	mov	r2, r3
 80193b0:	6838      	ldr	r0, [r7, #0]
 80193b2:	f015 f8be 	bl	802e532 <memcpy>
	}
}
 80193b6:	bf00      	nop
 80193b8:	3708      	adds	r7, #8
 80193ba:	46bd      	mov	sp, r7
 80193bc:	bd80      	pop	{r7, pc}

080193be <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80193be:	b580      	push	{r7, lr}
 80193c0:	b084      	sub	sp, #16
 80193c2:	af00      	add	r7, sp, #0
 80193c4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80193c6:	f7fe fff9 	bl	80183bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80193ca:	687b      	ldr	r3, [r7, #4]
 80193cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80193d0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80193d2:	e011      	b.n	80193f8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80193d4:	687b      	ldr	r3, [r7, #4]
 80193d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80193d8:	2b00      	cmp	r3, #0
 80193da:	d012      	beq.n	8019402 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80193dc:	687b      	ldr	r3, [r7, #4]
 80193de:	3324      	adds	r3, #36	; 0x24
 80193e0:	4618      	mov	r0, r3
 80193e2:	f000 fd13 	bl	8019e0c <xTaskRemoveFromEventList>
 80193e6:	4603      	mov	r3, r0
 80193e8:	2b00      	cmp	r3, #0
 80193ea:	d001      	beq.n	80193f0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80193ec:	f000 fde6 	bl	8019fbc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80193f0:	7bfb      	ldrb	r3, [r7, #15]
 80193f2:	3b01      	subs	r3, #1
 80193f4:	b2db      	uxtb	r3, r3
 80193f6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80193f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80193fc:	2b00      	cmp	r3, #0
 80193fe:	dce9      	bgt.n	80193d4 <prvUnlockQueue+0x16>
 8019400:	e000      	b.n	8019404 <prvUnlockQueue+0x46>
					break;
 8019402:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8019404:	687b      	ldr	r3, [r7, #4]
 8019406:	22ff      	movs	r2, #255	; 0xff
 8019408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801940c:	f7ff f804 	bl	8018418 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8019410:	f7fe ffd4 	bl	80183bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8019414:	687b      	ldr	r3, [r7, #4]
 8019416:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801941a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801941c:	e011      	b.n	8019442 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801941e:	687b      	ldr	r3, [r7, #4]
 8019420:	691b      	ldr	r3, [r3, #16]
 8019422:	2b00      	cmp	r3, #0
 8019424:	d012      	beq.n	801944c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019426:	687b      	ldr	r3, [r7, #4]
 8019428:	3310      	adds	r3, #16
 801942a:	4618      	mov	r0, r3
 801942c:	f000 fcee 	bl	8019e0c <xTaskRemoveFromEventList>
 8019430:	4603      	mov	r3, r0
 8019432:	2b00      	cmp	r3, #0
 8019434:	d001      	beq.n	801943a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8019436:	f000 fdc1 	bl	8019fbc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801943a:	7bbb      	ldrb	r3, [r7, #14]
 801943c:	3b01      	subs	r3, #1
 801943e:	b2db      	uxtb	r3, r3
 8019440:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8019442:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019446:	2b00      	cmp	r3, #0
 8019448:	dce9      	bgt.n	801941e <prvUnlockQueue+0x60>
 801944a:	e000      	b.n	801944e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801944c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801944e:	687b      	ldr	r3, [r7, #4]
 8019450:	22ff      	movs	r2, #255	; 0xff
 8019452:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8019456:	f7fe ffdf 	bl	8018418 <vPortExitCritical>
}
 801945a:	bf00      	nop
 801945c:	3710      	adds	r7, #16
 801945e:	46bd      	mov	sp, r7
 8019460:	bd80      	pop	{r7, pc}

08019462 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8019462:	b580      	push	{r7, lr}
 8019464:	b084      	sub	sp, #16
 8019466:	af00      	add	r7, sp, #0
 8019468:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801946a:	f7fe ffa7 	bl	80183bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801946e:	687b      	ldr	r3, [r7, #4]
 8019470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019472:	2b00      	cmp	r3, #0
 8019474:	d102      	bne.n	801947c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8019476:	2301      	movs	r3, #1
 8019478:	60fb      	str	r3, [r7, #12]
 801947a:	e001      	b.n	8019480 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801947c:	2300      	movs	r3, #0
 801947e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8019480:	f7fe ffca 	bl	8018418 <vPortExitCritical>

	return xReturn;
 8019484:	68fb      	ldr	r3, [r7, #12]
}
 8019486:	4618      	mov	r0, r3
 8019488:	3710      	adds	r7, #16
 801948a:	46bd      	mov	sp, r7
 801948c:	bd80      	pop	{r7, pc}

0801948e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801948e:	b580      	push	{r7, lr}
 8019490:	b084      	sub	sp, #16
 8019492:	af00      	add	r7, sp, #0
 8019494:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8019496:	f7fe ff91 	bl	80183bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801949e:	687b      	ldr	r3, [r7, #4]
 80194a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80194a2:	429a      	cmp	r2, r3
 80194a4:	d102      	bne.n	80194ac <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80194a6:	2301      	movs	r3, #1
 80194a8:	60fb      	str	r3, [r7, #12]
 80194aa:	e001      	b.n	80194b0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80194ac:	2300      	movs	r3, #0
 80194ae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80194b0:	f7fe ffb2 	bl	8018418 <vPortExitCritical>

	return xReturn;
 80194b4:	68fb      	ldr	r3, [r7, #12]
}
 80194b6:	4618      	mov	r0, r3
 80194b8:	3710      	adds	r7, #16
 80194ba:	46bd      	mov	sp, r7
 80194bc:	bd80      	pop	{r7, pc}
	...

080194c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80194c0:	b480      	push	{r7}
 80194c2:	b085      	sub	sp, #20
 80194c4:	af00      	add	r7, sp, #0
 80194c6:	6078      	str	r0, [r7, #4]
 80194c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80194ca:	2300      	movs	r3, #0
 80194cc:	60fb      	str	r3, [r7, #12]
 80194ce:	e014      	b.n	80194fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80194d0:	4a0e      	ldr	r2, [pc, #56]	; (801950c <vQueueAddToRegistry+0x4c>)
 80194d2:	68fb      	ldr	r3, [r7, #12]
 80194d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80194d8:	2b00      	cmp	r3, #0
 80194da:	d10b      	bne.n	80194f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80194dc:	490b      	ldr	r1, [pc, #44]	; (801950c <vQueueAddToRegistry+0x4c>)
 80194de:	68fb      	ldr	r3, [r7, #12]
 80194e0:	683a      	ldr	r2, [r7, #0]
 80194e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80194e6:	4a09      	ldr	r2, [pc, #36]	; (801950c <vQueueAddToRegistry+0x4c>)
 80194e8:	68fb      	ldr	r3, [r7, #12]
 80194ea:	00db      	lsls	r3, r3, #3
 80194ec:	4413      	add	r3, r2
 80194ee:	687a      	ldr	r2, [r7, #4]
 80194f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80194f2:	e005      	b.n	8019500 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80194f4:	68fb      	ldr	r3, [r7, #12]
 80194f6:	3301      	adds	r3, #1
 80194f8:	60fb      	str	r3, [r7, #12]
 80194fa:	68fb      	ldr	r3, [r7, #12]
 80194fc:	2b07      	cmp	r3, #7
 80194fe:	d9e7      	bls.n	80194d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8019500:	bf00      	nop
 8019502:	3714      	adds	r7, #20
 8019504:	46bd      	mov	sp, r7
 8019506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801950a:	4770      	bx	lr
 801950c:	20013078 	.word	0x20013078

08019510 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8019510:	b480      	push	{r7}
 8019512:	b085      	sub	sp, #20
 8019514:	af00      	add	r7, sp, #0
 8019516:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8019518:	2300      	movs	r3, #0
 801951a:	60fb      	str	r3, [r7, #12]
 801951c:	e016      	b.n	801954c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801951e:	4a10      	ldr	r2, [pc, #64]	; (8019560 <vQueueUnregisterQueue+0x50>)
 8019520:	68fb      	ldr	r3, [r7, #12]
 8019522:	00db      	lsls	r3, r3, #3
 8019524:	4413      	add	r3, r2
 8019526:	685b      	ldr	r3, [r3, #4]
 8019528:	687a      	ldr	r2, [r7, #4]
 801952a:	429a      	cmp	r2, r3
 801952c:	d10b      	bne.n	8019546 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801952e:	4a0c      	ldr	r2, [pc, #48]	; (8019560 <vQueueUnregisterQueue+0x50>)
 8019530:	68fb      	ldr	r3, [r7, #12]
 8019532:	2100      	movs	r1, #0
 8019534:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8019538:	4a09      	ldr	r2, [pc, #36]	; (8019560 <vQueueUnregisterQueue+0x50>)
 801953a:	68fb      	ldr	r3, [r7, #12]
 801953c:	00db      	lsls	r3, r3, #3
 801953e:	4413      	add	r3, r2
 8019540:	2200      	movs	r2, #0
 8019542:	605a      	str	r2, [r3, #4]
				break;
 8019544:	e005      	b.n	8019552 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8019546:	68fb      	ldr	r3, [r7, #12]
 8019548:	3301      	adds	r3, #1
 801954a:	60fb      	str	r3, [r7, #12]
 801954c:	68fb      	ldr	r3, [r7, #12]
 801954e:	2b07      	cmp	r3, #7
 8019550:	d9e5      	bls.n	801951e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8019552:	bf00      	nop
 8019554:	3714      	adds	r7, #20
 8019556:	46bd      	mov	sp, r7
 8019558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801955c:	4770      	bx	lr
 801955e:	bf00      	nop
 8019560:	20013078 	.word	0x20013078

08019564 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8019564:	b580      	push	{r7, lr}
 8019566:	b086      	sub	sp, #24
 8019568:	af00      	add	r7, sp, #0
 801956a:	60f8      	str	r0, [r7, #12]
 801956c:	60b9      	str	r1, [r7, #8]
 801956e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8019570:	68fb      	ldr	r3, [r7, #12]
 8019572:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8019574:	f7fe ff22 	bl	80183bc <vPortEnterCritical>
 8019578:	697b      	ldr	r3, [r7, #20]
 801957a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801957e:	b25b      	sxtb	r3, r3
 8019580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019584:	d103      	bne.n	801958e <vQueueWaitForMessageRestricted+0x2a>
 8019586:	697b      	ldr	r3, [r7, #20]
 8019588:	2200      	movs	r2, #0
 801958a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801958e:	697b      	ldr	r3, [r7, #20]
 8019590:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019594:	b25b      	sxtb	r3, r3
 8019596:	f1b3 3fff 	cmp.w	r3, #4294967295
 801959a:	d103      	bne.n	80195a4 <vQueueWaitForMessageRestricted+0x40>
 801959c:	697b      	ldr	r3, [r7, #20]
 801959e:	2200      	movs	r2, #0
 80195a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80195a4:	f7fe ff38 	bl	8018418 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80195a8:	697b      	ldr	r3, [r7, #20]
 80195aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80195ac:	2b00      	cmp	r3, #0
 80195ae:	d106      	bne.n	80195be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80195b0:	697b      	ldr	r3, [r7, #20]
 80195b2:	3324      	adds	r3, #36	; 0x24
 80195b4:	687a      	ldr	r2, [r7, #4]
 80195b6:	68b9      	ldr	r1, [r7, #8]
 80195b8:	4618      	mov	r0, r3
 80195ba:	f000 fbfd 	bl	8019db8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80195be:	6978      	ldr	r0, [r7, #20]
 80195c0:	f7ff fefd 	bl	80193be <prvUnlockQueue>
	}
 80195c4:	bf00      	nop
 80195c6:	3718      	adds	r7, #24
 80195c8:	46bd      	mov	sp, r7
 80195ca:	bd80      	pop	{r7, pc}

080195cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80195cc:	b580      	push	{r7, lr}
 80195ce:	b08e      	sub	sp, #56	; 0x38
 80195d0:	af04      	add	r7, sp, #16
 80195d2:	60f8      	str	r0, [r7, #12]
 80195d4:	60b9      	str	r1, [r7, #8]
 80195d6:	607a      	str	r2, [r7, #4]
 80195d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80195da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80195dc:	2b00      	cmp	r3, #0
 80195de:	d109      	bne.n	80195f4 <xTaskCreateStatic+0x28>
 80195e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80195e4:	f383 8811 	msr	BASEPRI, r3
 80195e8:	f3bf 8f6f 	isb	sy
 80195ec:	f3bf 8f4f 	dsb	sy
 80195f0:	623b      	str	r3, [r7, #32]
 80195f2:	e7fe      	b.n	80195f2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80195f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195f6:	2b00      	cmp	r3, #0
 80195f8:	d109      	bne.n	801960e <xTaskCreateStatic+0x42>
 80195fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80195fe:	f383 8811 	msr	BASEPRI, r3
 8019602:	f3bf 8f6f 	isb	sy
 8019606:	f3bf 8f4f 	dsb	sy
 801960a:	61fb      	str	r3, [r7, #28]
 801960c:	e7fe      	b.n	801960c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801960e:	2360      	movs	r3, #96	; 0x60
 8019610:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8019612:	693b      	ldr	r3, [r7, #16]
 8019614:	2b60      	cmp	r3, #96	; 0x60
 8019616:	d009      	beq.n	801962c <xTaskCreateStatic+0x60>
 8019618:	f04f 0350 	mov.w	r3, #80	; 0x50
 801961c:	f383 8811 	msr	BASEPRI, r3
 8019620:	f3bf 8f6f 	isb	sy
 8019624:	f3bf 8f4f 	dsb	sy
 8019628:	61bb      	str	r3, [r7, #24]
 801962a:	e7fe      	b.n	801962a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801962c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801962e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019630:	2b00      	cmp	r3, #0
 8019632:	d01e      	beq.n	8019672 <xTaskCreateStatic+0xa6>
 8019634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019636:	2b00      	cmp	r3, #0
 8019638:	d01b      	beq.n	8019672 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801963a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801963c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801963e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019640:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019642:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8019644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019646:	2202      	movs	r2, #2
 8019648:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801964c:	2300      	movs	r3, #0
 801964e:	9303      	str	r3, [sp, #12]
 8019650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019652:	9302      	str	r3, [sp, #8]
 8019654:	f107 0314 	add.w	r3, r7, #20
 8019658:	9301      	str	r3, [sp, #4]
 801965a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801965c:	9300      	str	r3, [sp, #0]
 801965e:	683b      	ldr	r3, [r7, #0]
 8019660:	687a      	ldr	r2, [r7, #4]
 8019662:	68b9      	ldr	r1, [r7, #8]
 8019664:	68f8      	ldr	r0, [r7, #12]
 8019666:	f000 f850 	bl	801970a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801966a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801966c:	f000 f8de 	bl	801982c <prvAddNewTaskToReadyList>
 8019670:	e001      	b.n	8019676 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8019672:	2300      	movs	r3, #0
 8019674:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8019676:	697b      	ldr	r3, [r7, #20]
	}
 8019678:	4618      	mov	r0, r3
 801967a:	3728      	adds	r7, #40	; 0x28
 801967c:	46bd      	mov	sp, r7
 801967e:	bd80      	pop	{r7, pc}

08019680 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8019680:	b580      	push	{r7, lr}
 8019682:	b08c      	sub	sp, #48	; 0x30
 8019684:	af04      	add	r7, sp, #16
 8019686:	60f8      	str	r0, [r7, #12]
 8019688:	60b9      	str	r1, [r7, #8]
 801968a:	603b      	str	r3, [r7, #0]
 801968c:	4613      	mov	r3, r2
 801968e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8019690:	88fb      	ldrh	r3, [r7, #6]
 8019692:	009b      	lsls	r3, r3, #2
 8019694:	4618      	mov	r0, r3
 8019696:	f7fe fae3 	bl	8017c60 <pvPortMalloc>
 801969a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801969c:	697b      	ldr	r3, [r7, #20]
 801969e:	2b00      	cmp	r3, #0
 80196a0:	d00e      	beq.n	80196c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80196a2:	2060      	movs	r0, #96	; 0x60
 80196a4:	f7fe fadc 	bl	8017c60 <pvPortMalloc>
 80196a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80196aa:	69fb      	ldr	r3, [r7, #28]
 80196ac:	2b00      	cmp	r3, #0
 80196ae:	d003      	beq.n	80196b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80196b0:	69fb      	ldr	r3, [r7, #28]
 80196b2:	697a      	ldr	r2, [r7, #20]
 80196b4:	631a      	str	r2, [r3, #48]	; 0x30
 80196b6:	e005      	b.n	80196c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80196b8:	6978      	ldr	r0, [r7, #20]
 80196ba:	f7fe fb93 	bl	8017de4 <vPortFree>
 80196be:	e001      	b.n	80196c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80196c0:	2300      	movs	r3, #0
 80196c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80196c4:	69fb      	ldr	r3, [r7, #28]
 80196c6:	2b00      	cmp	r3, #0
 80196c8:	d017      	beq.n	80196fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80196ca:	69fb      	ldr	r3, [r7, #28]
 80196cc:	2200      	movs	r2, #0
 80196ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80196d2:	88fa      	ldrh	r2, [r7, #6]
 80196d4:	2300      	movs	r3, #0
 80196d6:	9303      	str	r3, [sp, #12]
 80196d8:	69fb      	ldr	r3, [r7, #28]
 80196da:	9302      	str	r3, [sp, #8]
 80196dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196de:	9301      	str	r3, [sp, #4]
 80196e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80196e2:	9300      	str	r3, [sp, #0]
 80196e4:	683b      	ldr	r3, [r7, #0]
 80196e6:	68b9      	ldr	r1, [r7, #8]
 80196e8:	68f8      	ldr	r0, [r7, #12]
 80196ea:	f000 f80e 	bl	801970a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80196ee:	69f8      	ldr	r0, [r7, #28]
 80196f0:	f000 f89c 	bl	801982c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80196f4:	2301      	movs	r3, #1
 80196f6:	61bb      	str	r3, [r7, #24]
 80196f8:	e002      	b.n	8019700 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80196fa:	f04f 33ff 	mov.w	r3, #4294967295
 80196fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8019700:	69bb      	ldr	r3, [r7, #24]
	}
 8019702:	4618      	mov	r0, r3
 8019704:	3720      	adds	r7, #32
 8019706:	46bd      	mov	sp, r7
 8019708:	bd80      	pop	{r7, pc}

0801970a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801970a:	b580      	push	{r7, lr}
 801970c:	b088      	sub	sp, #32
 801970e:	af00      	add	r7, sp, #0
 8019710:	60f8      	str	r0, [r7, #12]
 8019712:	60b9      	str	r1, [r7, #8]
 8019714:	607a      	str	r2, [r7, #4]
 8019716:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8019718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801971a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801971c:	687b      	ldr	r3, [r7, #4]
 801971e:	009b      	lsls	r3, r3, #2
 8019720:	461a      	mov	r2, r3
 8019722:	21a5      	movs	r1, #165	; 0xa5
 8019724:	f014 ff10 	bl	802e548 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8019728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801972a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801972c:	687b      	ldr	r3, [r7, #4]
 801972e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8019732:	3b01      	subs	r3, #1
 8019734:	009b      	lsls	r3, r3, #2
 8019736:	4413      	add	r3, r2
 8019738:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801973a:	69bb      	ldr	r3, [r7, #24]
 801973c:	f023 0307 	bic.w	r3, r3, #7
 8019740:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8019742:	69bb      	ldr	r3, [r7, #24]
 8019744:	f003 0307 	and.w	r3, r3, #7
 8019748:	2b00      	cmp	r3, #0
 801974a:	d009      	beq.n	8019760 <prvInitialiseNewTask+0x56>
 801974c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019750:	f383 8811 	msr	BASEPRI, r3
 8019754:	f3bf 8f6f 	isb	sy
 8019758:	f3bf 8f4f 	dsb	sy
 801975c:	617b      	str	r3, [r7, #20]
 801975e:	e7fe      	b.n	801975e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8019760:	68bb      	ldr	r3, [r7, #8]
 8019762:	2b00      	cmp	r3, #0
 8019764:	d01f      	beq.n	80197a6 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8019766:	2300      	movs	r3, #0
 8019768:	61fb      	str	r3, [r7, #28]
 801976a:	e012      	b.n	8019792 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801976c:	68ba      	ldr	r2, [r7, #8]
 801976e:	69fb      	ldr	r3, [r7, #28]
 8019770:	4413      	add	r3, r2
 8019772:	7819      	ldrb	r1, [r3, #0]
 8019774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019776:	69fb      	ldr	r3, [r7, #28]
 8019778:	4413      	add	r3, r2
 801977a:	3334      	adds	r3, #52	; 0x34
 801977c:	460a      	mov	r2, r1
 801977e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8019780:	68ba      	ldr	r2, [r7, #8]
 8019782:	69fb      	ldr	r3, [r7, #28]
 8019784:	4413      	add	r3, r2
 8019786:	781b      	ldrb	r3, [r3, #0]
 8019788:	2b00      	cmp	r3, #0
 801978a:	d006      	beq.n	801979a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801978c:	69fb      	ldr	r3, [r7, #28]
 801978e:	3301      	adds	r3, #1
 8019790:	61fb      	str	r3, [r7, #28]
 8019792:	69fb      	ldr	r3, [r7, #28]
 8019794:	2b0f      	cmp	r3, #15
 8019796:	d9e9      	bls.n	801976c <prvInitialiseNewTask+0x62>
 8019798:	e000      	b.n	801979c <prvInitialiseNewTask+0x92>
			{
				break;
 801979a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801979c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801979e:	2200      	movs	r2, #0
 80197a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80197a4:	e003      	b.n	80197ae <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80197a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197a8:	2200      	movs	r2, #0
 80197aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80197ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197b0:	2b37      	cmp	r3, #55	; 0x37
 80197b2:	d901      	bls.n	80197b8 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80197b4:	2337      	movs	r3, #55	; 0x37
 80197b6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80197b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80197bc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80197be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80197c2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80197c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197c6:	2200      	movs	r2, #0
 80197c8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80197ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197cc:	3304      	adds	r3, #4
 80197ce:	4618      	mov	r0, r3
 80197d0:	f7fe fc3c 	bl	801804c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80197d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197d6:	3318      	adds	r3, #24
 80197d8:	4618      	mov	r0, r3
 80197da:	f7fe fc37 	bl	801804c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80197de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80197e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80197e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80197ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80197ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80197f2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 80197f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197f6:	2200      	movs	r2, #0
 80197f8:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80197fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197fc:	2200      	movs	r2, #0
 80197fe:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8019800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019802:	2200      	movs	r2, #0
 8019804:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8019808:	683a      	ldr	r2, [r7, #0]
 801980a:	68f9      	ldr	r1, [r7, #12]
 801980c:	69b8      	ldr	r0, [r7, #24]
 801980e:	f7fe fcb1 	bl	8018174 <pxPortInitialiseStack>
 8019812:	4602      	mov	r2, r0
 8019814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019816:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8019818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801981a:	2b00      	cmp	r3, #0
 801981c:	d002      	beq.n	8019824 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801981e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019822:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019824:	bf00      	nop
 8019826:	3720      	adds	r7, #32
 8019828:	46bd      	mov	sp, r7
 801982a:	bd80      	pop	{r7, pc}

0801982c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801982c:	b580      	push	{r7, lr}
 801982e:	b082      	sub	sp, #8
 8019830:	af00      	add	r7, sp, #0
 8019832:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8019834:	f7fe fdc2 	bl	80183bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8019838:	4b2d      	ldr	r3, [pc, #180]	; (80198f0 <prvAddNewTaskToReadyList+0xc4>)
 801983a:	681b      	ldr	r3, [r3, #0]
 801983c:	3301      	adds	r3, #1
 801983e:	4a2c      	ldr	r2, [pc, #176]	; (80198f0 <prvAddNewTaskToReadyList+0xc4>)
 8019840:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8019842:	4b2c      	ldr	r3, [pc, #176]	; (80198f4 <prvAddNewTaskToReadyList+0xc8>)
 8019844:	681b      	ldr	r3, [r3, #0]
 8019846:	2b00      	cmp	r3, #0
 8019848:	d109      	bne.n	801985e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801984a:	4a2a      	ldr	r2, [pc, #168]	; (80198f4 <prvAddNewTaskToReadyList+0xc8>)
 801984c:	687b      	ldr	r3, [r7, #4]
 801984e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8019850:	4b27      	ldr	r3, [pc, #156]	; (80198f0 <prvAddNewTaskToReadyList+0xc4>)
 8019852:	681b      	ldr	r3, [r3, #0]
 8019854:	2b01      	cmp	r3, #1
 8019856:	d110      	bne.n	801987a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8019858:	f000 fbd4 	bl	801a004 <prvInitialiseTaskLists>
 801985c:	e00d      	b.n	801987a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801985e:	4b26      	ldr	r3, [pc, #152]	; (80198f8 <prvAddNewTaskToReadyList+0xcc>)
 8019860:	681b      	ldr	r3, [r3, #0]
 8019862:	2b00      	cmp	r3, #0
 8019864:	d109      	bne.n	801987a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8019866:	4b23      	ldr	r3, [pc, #140]	; (80198f4 <prvAddNewTaskToReadyList+0xc8>)
 8019868:	681b      	ldr	r3, [r3, #0]
 801986a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019870:	429a      	cmp	r2, r3
 8019872:	d802      	bhi.n	801987a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8019874:	4a1f      	ldr	r2, [pc, #124]	; (80198f4 <prvAddNewTaskToReadyList+0xc8>)
 8019876:	687b      	ldr	r3, [r7, #4]
 8019878:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801987a:	4b20      	ldr	r3, [pc, #128]	; (80198fc <prvAddNewTaskToReadyList+0xd0>)
 801987c:	681b      	ldr	r3, [r3, #0]
 801987e:	3301      	adds	r3, #1
 8019880:	4a1e      	ldr	r2, [pc, #120]	; (80198fc <prvAddNewTaskToReadyList+0xd0>)
 8019882:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8019884:	4b1d      	ldr	r3, [pc, #116]	; (80198fc <prvAddNewTaskToReadyList+0xd0>)
 8019886:	681a      	ldr	r2, [r3, #0]
 8019888:	687b      	ldr	r3, [r7, #4]
 801988a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801988c:	687b      	ldr	r3, [r7, #4]
 801988e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019890:	4b1b      	ldr	r3, [pc, #108]	; (8019900 <prvAddNewTaskToReadyList+0xd4>)
 8019892:	681b      	ldr	r3, [r3, #0]
 8019894:	429a      	cmp	r2, r3
 8019896:	d903      	bls.n	80198a0 <prvAddNewTaskToReadyList+0x74>
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801989c:	4a18      	ldr	r2, [pc, #96]	; (8019900 <prvAddNewTaskToReadyList+0xd4>)
 801989e:	6013      	str	r3, [r2, #0]
 80198a0:	687b      	ldr	r3, [r7, #4]
 80198a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80198a4:	4613      	mov	r3, r2
 80198a6:	009b      	lsls	r3, r3, #2
 80198a8:	4413      	add	r3, r2
 80198aa:	009b      	lsls	r3, r3, #2
 80198ac:	4a15      	ldr	r2, [pc, #84]	; (8019904 <prvAddNewTaskToReadyList+0xd8>)
 80198ae:	441a      	add	r2, r3
 80198b0:	687b      	ldr	r3, [r7, #4]
 80198b2:	3304      	adds	r3, #4
 80198b4:	4619      	mov	r1, r3
 80198b6:	4610      	mov	r0, r2
 80198b8:	f7fe fbd5 	bl	8018066 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80198bc:	f7fe fdac 	bl	8018418 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80198c0:	4b0d      	ldr	r3, [pc, #52]	; (80198f8 <prvAddNewTaskToReadyList+0xcc>)
 80198c2:	681b      	ldr	r3, [r3, #0]
 80198c4:	2b00      	cmp	r3, #0
 80198c6:	d00e      	beq.n	80198e6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80198c8:	4b0a      	ldr	r3, [pc, #40]	; (80198f4 <prvAddNewTaskToReadyList+0xc8>)
 80198ca:	681b      	ldr	r3, [r3, #0]
 80198cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80198d2:	429a      	cmp	r2, r3
 80198d4:	d207      	bcs.n	80198e6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80198d6:	4b0c      	ldr	r3, [pc, #48]	; (8019908 <prvAddNewTaskToReadyList+0xdc>)
 80198d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80198dc:	601a      	str	r2, [r3, #0]
 80198de:	f3bf 8f4f 	dsb	sy
 80198e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80198e6:	bf00      	nop
 80198e8:	3708      	adds	r7, #8
 80198ea:	46bd      	mov	sp, r7
 80198ec:	bd80      	pop	{r7, pc}
 80198ee:	bf00      	nop
 80198f0:	20012740 	.word	0x20012740
 80198f4:	2001226c 	.word	0x2001226c
 80198f8:	2001274c 	.word	0x2001274c
 80198fc:	2001275c 	.word	0x2001275c
 8019900:	20012748 	.word	0x20012748
 8019904:	20012270 	.word	0x20012270
 8019908:	e000ed04 	.word	0xe000ed04

0801990c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801990c:	b580      	push	{r7, lr}
 801990e:	b08a      	sub	sp, #40	; 0x28
 8019910:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8019912:	2300      	movs	r3, #0
 8019914:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8019916:	2300      	movs	r3, #0
 8019918:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801991a:	463a      	mov	r2, r7
 801991c:	1d39      	adds	r1, r7, #4
 801991e:	f107 0308 	add.w	r3, r7, #8
 8019922:	4618      	mov	r0, r3
 8019924:	f7fe f968 	bl	8017bf8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8019928:	6839      	ldr	r1, [r7, #0]
 801992a:	687b      	ldr	r3, [r7, #4]
 801992c:	68ba      	ldr	r2, [r7, #8]
 801992e:	9202      	str	r2, [sp, #8]
 8019930:	9301      	str	r3, [sp, #4]
 8019932:	2300      	movs	r3, #0
 8019934:	9300      	str	r3, [sp, #0]
 8019936:	2300      	movs	r3, #0
 8019938:	460a      	mov	r2, r1
 801993a:	4920      	ldr	r1, [pc, #128]	; (80199bc <vTaskStartScheduler+0xb0>)
 801993c:	4820      	ldr	r0, [pc, #128]	; (80199c0 <vTaskStartScheduler+0xb4>)
 801993e:	f7ff fe45 	bl	80195cc <xTaskCreateStatic>
 8019942:	4602      	mov	r2, r0
 8019944:	4b1f      	ldr	r3, [pc, #124]	; (80199c4 <vTaskStartScheduler+0xb8>)
 8019946:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8019948:	4b1e      	ldr	r3, [pc, #120]	; (80199c4 <vTaskStartScheduler+0xb8>)
 801994a:	681b      	ldr	r3, [r3, #0]
 801994c:	2b00      	cmp	r3, #0
 801994e:	d002      	beq.n	8019956 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8019950:	2301      	movs	r3, #1
 8019952:	617b      	str	r3, [r7, #20]
 8019954:	e001      	b.n	801995a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8019956:	2300      	movs	r3, #0
 8019958:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801995a:	697b      	ldr	r3, [r7, #20]
 801995c:	2b01      	cmp	r3, #1
 801995e:	d102      	bne.n	8019966 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8019960:	f000 fde4 	bl	801a52c <xTimerCreateTimerTask>
 8019964:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8019966:	697b      	ldr	r3, [r7, #20]
 8019968:	2b01      	cmp	r3, #1
 801996a:	d115      	bne.n	8019998 <vTaskStartScheduler+0x8c>
 801996c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019970:	f383 8811 	msr	BASEPRI, r3
 8019974:	f3bf 8f6f 	isb	sy
 8019978:	f3bf 8f4f 	dsb	sy
 801997c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801997e:	4b12      	ldr	r3, [pc, #72]	; (80199c8 <vTaskStartScheduler+0xbc>)
 8019980:	f04f 32ff 	mov.w	r2, #4294967295
 8019984:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8019986:	4b11      	ldr	r3, [pc, #68]	; (80199cc <vTaskStartScheduler+0xc0>)
 8019988:	2201      	movs	r2, #1
 801998a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801998c:	4b10      	ldr	r3, [pc, #64]	; (80199d0 <vTaskStartScheduler+0xc4>)
 801998e:	2200      	movs	r2, #0
 8019990:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8019992:	f7fe fc75 	bl	8018280 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8019996:	e00d      	b.n	80199b4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8019998:	697b      	ldr	r3, [r7, #20]
 801999a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801999e:	d109      	bne.n	80199b4 <vTaskStartScheduler+0xa8>
 80199a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80199a4:	f383 8811 	msr	BASEPRI, r3
 80199a8:	f3bf 8f6f 	isb	sy
 80199ac:	f3bf 8f4f 	dsb	sy
 80199b0:	60fb      	str	r3, [r7, #12]
 80199b2:	e7fe      	b.n	80199b2 <vTaskStartScheduler+0xa6>
}
 80199b4:	bf00      	nop
 80199b6:	3718      	adds	r7, #24
 80199b8:	46bd      	mov	sp, r7
 80199ba:	bd80      	pop	{r7, pc}
 80199bc:	08030128 	.word	0x08030128
 80199c0:	08019fd5 	.word	0x08019fd5
 80199c4:	20012764 	.word	0x20012764
 80199c8:	20012760 	.word	0x20012760
 80199cc:	2001274c 	.word	0x2001274c
 80199d0:	20012744 	.word	0x20012744

080199d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80199d4:	b480      	push	{r7}
 80199d6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80199d8:	4b04      	ldr	r3, [pc, #16]	; (80199ec <vTaskSuspendAll+0x18>)
 80199da:	681b      	ldr	r3, [r3, #0]
 80199dc:	3301      	adds	r3, #1
 80199de:	4a03      	ldr	r2, [pc, #12]	; (80199ec <vTaskSuspendAll+0x18>)
 80199e0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80199e2:	bf00      	nop
 80199e4:	46bd      	mov	sp, r7
 80199e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199ea:	4770      	bx	lr
 80199ec:	20012768 	.word	0x20012768

080199f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80199f0:	b580      	push	{r7, lr}
 80199f2:	b084      	sub	sp, #16
 80199f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80199f6:	2300      	movs	r3, #0
 80199f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80199fa:	2300      	movs	r3, #0
 80199fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80199fe:	4b41      	ldr	r3, [pc, #260]	; (8019b04 <xTaskResumeAll+0x114>)
 8019a00:	681b      	ldr	r3, [r3, #0]
 8019a02:	2b00      	cmp	r3, #0
 8019a04:	d109      	bne.n	8019a1a <xTaskResumeAll+0x2a>
 8019a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a0a:	f383 8811 	msr	BASEPRI, r3
 8019a0e:	f3bf 8f6f 	isb	sy
 8019a12:	f3bf 8f4f 	dsb	sy
 8019a16:	603b      	str	r3, [r7, #0]
 8019a18:	e7fe      	b.n	8019a18 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8019a1a:	f7fe fccf 	bl	80183bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8019a1e:	4b39      	ldr	r3, [pc, #228]	; (8019b04 <xTaskResumeAll+0x114>)
 8019a20:	681b      	ldr	r3, [r3, #0]
 8019a22:	3b01      	subs	r3, #1
 8019a24:	4a37      	ldr	r2, [pc, #220]	; (8019b04 <xTaskResumeAll+0x114>)
 8019a26:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019a28:	4b36      	ldr	r3, [pc, #216]	; (8019b04 <xTaskResumeAll+0x114>)
 8019a2a:	681b      	ldr	r3, [r3, #0]
 8019a2c:	2b00      	cmp	r3, #0
 8019a2e:	d162      	bne.n	8019af6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8019a30:	4b35      	ldr	r3, [pc, #212]	; (8019b08 <xTaskResumeAll+0x118>)
 8019a32:	681b      	ldr	r3, [r3, #0]
 8019a34:	2b00      	cmp	r3, #0
 8019a36:	d05e      	beq.n	8019af6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8019a38:	e02f      	b.n	8019a9a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019a3a:	4b34      	ldr	r3, [pc, #208]	; (8019b0c <xTaskResumeAll+0x11c>)
 8019a3c:	68db      	ldr	r3, [r3, #12]
 8019a3e:	68db      	ldr	r3, [r3, #12]
 8019a40:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8019a42:	68fb      	ldr	r3, [r7, #12]
 8019a44:	3318      	adds	r3, #24
 8019a46:	4618      	mov	r0, r3
 8019a48:	f7fe fb6a 	bl	8018120 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019a4c:	68fb      	ldr	r3, [r7, #12]
 8019a4e:	3304      	adds	r3, #4
 8019a50:	4618      	mov	r0, r3
 8019a52:	f7fe fb65 	bl	8018120 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8019a56:	68fb      	ldr	r3, [r7, #12]
 8019a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019a5a:	4b2d      	ldr	r3, [pc, #180]	; (8019b10 <xTaskResumeAll+0x120>)
 8019a5c:	681b      	ldr	r3, [r3, #0]
 8019a5e:	429a      	cmp	r2, r3
 8019a60:	d903      	bls.n	8019a6a <xTaskResumeAll+0x7a>
 8019a62:	68fb      	ldr	r3, [r7, #12]
 8019a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019a66:	4a2a      	ldr	r2, [pc, #168]	; (8019b10 <xTaskResumeAll+0x120>)
 8019a68:	6013      	str	r3, [r2, #0]
 8019a6a:	68fb      	ldr	r3, [r7, #12]
 8019a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019a6e:	4613      	mov	r3, r2
 8019a70:	009b      	lsls	r3, r3, #2
 8019a72:	4413      	add	r3, r2
 8019a74:	009b      	lsls	r3, r3, #2
 8019a76:	4a27      	ldr	r2, [pc, #156]	; (8019b14 <xTaskResumeAll+0x124>)
 8019a78:	441a      	add	r2, r3
 8019a7a:	68fb      	ldr	r3, [r7, #12]
 8019a7c:	3304      	adds	r3, #4
 8019a7e:	4619      	mov	r1, r3
 8019a80:	4610      	mov	r0, r2
 8019a82:	f7fe faf0 	bl	8018066 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8019a86:	68fb      	ldr	r3, [r7, #12]
 8019a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019a8a:	4b23      	ldr	r3, [pc, #140]	; (8019b18 <xTaskResumeAll+0x128>)
 8019a8c:	681b      	ldr	r3, [r3, #0]
 8019a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019a90:	429a      	cmp	r2, r3
 8019a92:	d302      	bcc.n	8019a9a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8019a94:	4b21      	ldr	r3, [pc, #132]	; (8019b1c <xTaskResumeAll+0x12c>)
 8019a96:	2201      	movs	r2, #1
 8019a98:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8019a9a:	4b1c      	ldr	r3, [pc, #112]	; (8019b0c <xTaskResumeAll+0x11c>)
 8019a9c:	681b      	ldr	r3, [r3, #0]
 8019a9e:	2b00      	cmp	r3, #0
 8019aa0:	d1cb      	bne.n	8019a3a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8019aa2:	68fb      	ldr	r3, [r7, #12]
 8019aa4:	2b00      	cmp	r3, #0
 8019aa6:	d001      	beq.n	8019aac <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8019aa8:	f000 fb46 	bl	801a138 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8019aac:	4b1c      	ldr	r3, [pc, #112]	; (8019b20 <xTaskResumeAll+0x130>)
 8019aae:	681b      	ldr	r3, [r3, #0]
 8019ab0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8019ab2:	687b      	ldr	r3, [r7, #4]
 8019ab4:	2b00      	cmp	r3, #0
 8019ab6:	d010      	beq.n	8019ada <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8019ab8:	f000 f846 	bl	8019b48 <xTaskIncrementTick>
 8019abc:	4603      	mov	r3, r0
 8019abe:	2b00      	cmp	r3, #0
 8019ac0:	d002      	beq.n	8019ac8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8019ac2:	4b16      	ldr	r3, [pc, #88]	; (8019b1c <xTaskResumeAll+0x12c>)
 8019ac4:	2201      	movs	r2, #1
 8019ac6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8019ac8:	687b      	ldr	r3, [r7, #4]
 8019aca:	3b01      	subs	r3, #1
 8019acc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8019ace:	687b      	ldr	r3, [r7, #4]
 8019ad0:	2b00      	cmp	r3, #0
 8019ad2:	d1f1      	bne.n	8019ab8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8019ad4:	4b12      	ldr	r3, [pc, #72]	; (8019b20 <xTaskResumeAll+0x130>)
 8019ad6:	2200      	movs	r2, #0
 8019ad8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8019ada:	4b10      	ldr	r3, [pc, #64]	; (8019b1c <xTaskResumeAll+0x12c>)
 8019adc:	681b      	ldr	r3, [r3, #0]
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	d009      	beq.n	8019af6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8019ae2:	2301      	movs	r3, #1
 8019ae4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8019ae6:	4b0f      	ldr	r3, [pc, #60]	; (8019b24 <xTaskResumeAll+0x134>)
 8019ae8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019aec:	601a      	str	r2, [r3, #0]
 8019aee:	f3bf 8f4f 	dsb	sy
 8019af2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8019af6:	f7fe fc8f 	bl	8018418 <vPortExitCritical>

	return xAlreadyYielded;
 8019afa:	68bb      	ldr	r3, [r7, #8]
}
 8019afc:	4618      	mov	r0, r3
 8019afe:	3710      	adds	r7, #16
 8019b00:	46bd      	mov	sp, r7
 8019b02:	bd80      	pop	{r7, pc}
 8019b04:	20012768 	.word	0x20012768
 8019b08:	20012740 	.word	0x20012740
 8019b0c:	20012700 	.word	0x20012700
 8019b10:	20012748 	.word	0x20012748
 8019b14:	20012270 	.word	0x20012270
 8019b18:	2001226c 	.word	0x2001226c
 8019b1c:	20012754 	.word	0x20012754
 8019b20:	20012750 	.word	0x20012750
 8019b24:	e000ed04 	.word	0xe000ed04

08019b28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8019b28:	b480      	push	{r7}
 8019b2a:	b083      	sub	sp, #12
 8019b2c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8019b2e:	4b05      	ldr	r3, [pc, #20]	; (8019b44 <xTaskGetTickCount+0x1c>)
 8019b30:	681b      	ldr	r3, [r3, #0]
 8019b32:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8019b34:	687b      	ldr	r3, [r7, #4]
}
 8019b36:	4618      	mov	r0, r3
 8019b38:	370c      	adds	r7, #12
 8019b3a:	46bd      	mov	sp, r7
 8019b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b40:	4770      	bx	lr
 8019b42:	bf00      	nop
 8019b44:	20012744 	.word	0x20012744

08019b48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8019b48:	b580      	push	{r7, lr}
 8019b4a:	b086      	sub	sp, #24
 8019b4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8019b4e:	2300      	movs	r3, #0
 8019b50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019b52:	4b4e      	ldr	r3, [pc, #312]	; (8019c8c <xTaskIncrementTick+0x144>)
 8019b54:	681b      	ldr	r3, [r3, #0]
 8019b56:	2b00      	cmp	r3, #0
 8019b58:	f040 8088 	bne.w	8019c6c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8019b5c:	4b4c      	ldr	r3, [pc, #304]	; (8019c90 <xTaskIncrementTick+0x148>)
 8019b5e:	681b      	ldr	r3, [r3, #0]
 8019b60:	3301      	adds	r3, #1
 8019b62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8019b64:	4a4a      	ldr	r2, [pc, #296]	; (8019c90 <xTaskIncrementTick+0x148>)
 8019b66:	693b      	ldr	r3, [r7, #16]
 8019b68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8019b6a:	693b      	ldr	r3, [r7, #16]
 8019b6c:	2b00      	cmp	r3, #0
 8019b6e:	d11f      	bne.n	8019bb0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8019b70:	4b48      	ldr	r3, [pc, #288]	; (8019c94 <xTaskIncrementTick+0x14c>)
 8019b72:	681b      	ldr	r3, [r3, #0]
 8019b74:	681b      	ldr	r3, [r3, #0]
 8019b76:	2b00      	cmp	r3, #0
 8019b78:	d009      	beq.n	8019b8e <xTaskIncrementTick+0x46>
 8019b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b7e:	f383 8811 	msr	BASEPRI, r3
 8019b82:	f3bf 8f6f 	isb	sy
 8019b86:	f3bf 8f4f 	dsb	sy
 8019b8a:	603b      	str	r3, [r7, #0]
 8019b8c:	e7fe      	b.n	8019b8c <xTaskIncrementTick+0x44>
 8019b8e:	4b41      	ldr	r3, [pc, #260]	; (8019c94 <xTaskIncrementTick+0x14c>)
 8019b90:	681b      	ldr	r3, [r3, #0]
 8019b92:	60fb      	str	r3, [r7, #12]
 8019b94:	4b40      	ldr	r3, [pc, #256]	; (8019c98 <xTaskIncrementTick+0x150>)
 8019b96:	681b      	ldr	r3, [r3, #0]
 8019b98:	4a3e      	ldr	r2, [pc, #248]	; (8019c94 <xTaskIncrementTick+0x14c>)
 8019b9a:	6013      	str	r3, [r2, #0]
 8019b9c:	4a3e      	ldr	r2, [pc, #248]	; (8019c98 <xTaskIncrementTick+0x150>)
 8019b9e:	68fb      	ldr	r3, [r7, #12]
 8019ba0:	6013      	str	r3, [r2, #0]
 8019ba2:	4b3e      	ldr	r3, [pc, #248]	; (8019c9c <xTaskIncrementTick+0x154>)
 8019ba4:	681b      	ldr	r3, [r3, #0]
 8019ba6:	3301      	adds	r3, #1
 8019ba8:	4a3c      	ldr	r2, [pc, #240]	; (8019c9c <xTaskIncrementTick+0x154>)
 8019baa:	6013      	str	r3, [r2, #0]
 8019bac:	f000 fac4 	bl	801a138 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8019bb0:	4b3b      	ldr	r3, [pc, #236]	; (8019ca0 <xTaskIncrementTick+0x158>)
 8019bb2:	681b      	ldr	r3, [r3, #0]
 8019bb4:	693a      	ldr	r2, [r7, #16]
 8019bb6:	429a      	cmp	r2, r3
 8019bb8:	d349      	bcc.n	8019c4e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019bba:	4b36      	ldr	r3, [pc, #216]	; (8019c94 <xTaskIncrementTick+0x14c>)
 8019bbc:	681b      	ldr	r3, [r3, #0]
 8019bbe:	681b      	ldr	r3, [r3, #0]
 8019bc0:	2b00      	cmp	r3, #0
 8019bc2:	d104      	bne.n	8019bce <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019bc4:	4b36      	ldr	r3, [pc, #216]	; (8019ca0 <xTaskIncrementTick+0x158>)
 8019bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8019bca:	601a      	str	r2, [r3, #0]
					break;
 8019bcc:	e03f      	b.n	8019c4e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019bce:	4b31      	ldr	r3, [pc, #196]	; (8019c94 <xTaskIncrementTick+0x14c>)
 8019bd0:	681b      	ldr	r3, [r3, #0]
 8019bd2:	68db      	ldr	r3, [r3, #12]
 8019bd4:	68db      	ldr	r3, [r3, #12]
 8019bd6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8019bd8:	68bb      	ldr	r3, [r7, #8]
 8019bda:	685b      	ldr	r3, [r3, #4]
 8019bdc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8019bde:	693a      	ldr	r2, [r7, #16]
 8019be0:	687b      	ldr	r3, [r7, #4]
 8019be2:	429a      	cmp	r2, r3
 8019be4:	d203      	bcs.n	8019bee <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8019be6:	4a2e      	ldr	r2, [pc, #184]	; (8019ca0 <xTaskIncrementTick+0x158>)
 8019be8:	687b      	ldr	r3, [r7, #4]
 8019bea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8019bec:	e02f      	b.n	8019c4e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019bee:	68bb      	ldr	r3, [r7, #8]
 8019bf0:	3304      	adds	r3, #4
 8019bf2:	4618      	mov	r0, r3
 8019bf4:	f7fe fa94 	bl	8018120 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8019bf8:	68bb      	ldr	r3, [r7, #8]
 8019bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019bfc:	2b00      	cmp	r3, #0
 8019bfe:	d004      	beq.n	8019c0a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8019c00:	68bb      	ldr	r3, [r7, #8]
 8019c02:	3318      	adds	r3, #24
 8019c04:	4618      	mov	r0, r3
 8019c06:	f7fe fa8b 	bl	8018120 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8019c0a:	68bb      	ldr	r3, [r7, #8]
 8019c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019c0e:	4b25      	ldr	r3, [pc, #148]	; (8019ca4 <xTaskIncrementTick+0x15c>)
 8019c10:	681b      	ldr	r3, [r3, #0]
 8019c12:	429a      	cmp	r2, r3
 8019c14:	d903      	bls.n	8019c1e <xTaskIncrementTick+0xd6>
 8019c16:	68bb      	ldr	r3, [r7, #8]
 8019c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019c1a:	4a22      	ldr	r2, [pc, #136]	; (8019ca4 <xTaskIncrementTick+0x15c>)
 8019c1c:	6013      	str	r3, [r2, #0]
 8019c1e:	68bb      	ldr	r3, [r7, #8]
 8019c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019c22:	4613      	mov	r3, r2
 8019c24:	009b      	lsls	r3, r3, #2
 8019c26:	4413      	add	r3, r2
 8019c28:	009b      	lsls	r3, r3, #2
 8019c2a:	4a1f      	ldr	r2, [pc, #124]	; (8019ca8 <xTaskIncrementTick+0x160>)
 8019c2c:	441a      	add	r2, r3
 8019c2e:	68bb      	ldr	r3, [r7, #8]
 8019c30:	3304      	adds	r3, #4
 8019c32:	4619      	mov	r1, r3
 8019c34:	4610      	mov	r0, r2
 8019c36:	f7fe fa16 	bl	8018066 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8019c3a:	68bb      	ldr	r3, [r7, #8]
 8019c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019c3e:	4b1b      	ldr	r3, [pc, #108]	; (8019cac <xTaskIncrementTick+0x164>)
 8019c40:	681b      	ldr	r3, [r3, #0]
 8019c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019c44:	429a      	cmp	r2, r3
 8019c46:	d3b8      	bcc.n	8019bba <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8019c48:	2301      	movs	r3, #1
 8019c4a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019c4c:	e7b5      	b.n	8019bba <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8019c4e:	4b17      	ldr	r3, [pc, #92]	; (8019cac <xTaskIncrementTick+0x164>)
 8019c50:	681b      	ldr	r3, [r3, #0]
 8019c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019c54:	4914      	ldr	r1, [pc, #80]	; (8019ca8 <xTaskIncrementTick+0x160>)
 8019c56:	4613      	mov	r3, r2
 8019c58:	009b      	lsls	r3, r3, #2
 8019c5a:	4413      	add	r3, r2
 8019c5c:	009b      	lsls	r3, r3, #2
 8019c5e:	440b      	add	r3, r1
 8019c60:	681b      	ldr	r3, [r3, #0]
 8019c62:	2b01      	cmp	r3, #1
 8019c64:	d907      	bls.n	8019c76 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8019c66:	2301      	movs	r3, #1
 8019c68:	617b      	str	r3, [r7, #20]
 8019c6a:	e004      	b.n	8019c76 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8019c6c:	4b10      	ldr	r3, [pc, #64]	; (8019cb0 <xTaskIncrementTick+0x168>)
 8019c6e:	681b      	ldr	r3, [r3, #0]
 8019c70:	3301      	adds	r3, #1
 8019c72:	4a0f      	ldr	r2, [pc, #60]	; (8019cb0 <xTaskIncrementTick+0x168>)
 8019c74:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8019c76:	4b0f      	ldr	r3, [pc, #60]	; (8019cb4 <xTaskIncrementTick+0x16c>)
 8019c78:	681b      	ldr	r3, [r3, #0]
 8019c7a:	2b00      	cmp	r3, #0
 8019c7c:	d001      	beq.n	8019c82 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8019c7e:	2301      	movs	r3, #1
 8019c80:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8019c82:	697b      	ldr	r3, [r7, #20]
}
 8019c84:	4618      	mov	r0, r3
 8019c86:	3718      	adds	r7, #24
 8019c88:	46bd      	mov	sp, r7
 8019c8a:	bd80      	pop	{r7, pc}
 8019c8c:	20012768 	.word	0x20012768
 8019c90:	20012744 	.word	0x20012744
 8019c94:	200126f8 	.word	0x200126f8
 8019c98:	200126fc 	.word	0x200126fc
 8019c9c:	20012758 	.word	0x20012758
 8019ca0:	20012760 	.word	0x20012760
 8019ca4:	20012748 	.word	0x20012748
 8019ca8:	20012270 	.word	0x20012270
 8019cac:	2001226c 	.word	0x2001226c
 8019cb0:	20012750 	.word	0x20012750
 8019cb4:	20012754 	.word	0x20012754

08019cb8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8019cb8:	b480      	push	{r7}
 8019cba:	b085      	sub	sp, #20
 8019cbc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8019cbe:	4b27      	ldr	r3, [pc, #156]	; (8019d5c <vTaskSwitchContext+0xa4>)
 8019cc0:	681b      	ldr	r3, [r3, #0]
 8019cc2:	2b00      	cmp	r3, #0
 8019cc4:	d003      	beq.n	8019cce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8019cc6:	4b26      	ldr	r3, [pc, #152]	; (8019d60 <vTaskSwitchContext+0xa8>)
 8019cc8:	2201      	movs	r2, #1
 8019cca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8019ccc:	e040      	b.n	8019d50 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8019cce:	4b24      	ldr	r3, [pc, #144]	; (8019d60 <vTaskSwitchContext+0xa8>)
 8019cd0:	2200      	movs	r2, #0
 8019cd2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019cd4:	4b23      	ldr	r3, [pc, #140]	; (8019d64 <vTaskSwitchContext+0xac>)
 8019cd6:	681b      	ldr	r3, [r3, #0]
 8019cd8:	60fb      	str	r3, [r7, #12]
 8019cda:	e00f      	b.n	8019cfc <vTaskSwitchContext+0x44>
 8019cdc:	68fb      	ldr	r3, [r7, #12]
 8019cde:	2b00      	cmp	r3, #0
 8019ce0:	d109      	bne.n	8019cf6 <vTaskSwitchContext+0x3e>
 8019ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ce6:	f383 8811 	msr	BASEPRI, r3
 8019cea:	f3bf 8f6f 	isb	sy
 8019cee:	f3bf 8f4f 	dsb	sy
 8019cf2:	607b      	str	r3, [r7, #4]
 8019cf4:	e7fe      	b.n	8019cf4 <vTaskSwitchContext+0x3c>
 8019cf6:	68fb      	ldr	r3, [r7, #12]
 8019cf8:	3b01      	subs	r3, #1
 8019cfa:	60fb      	str	r3, [r7, #12]
 8019cfc:	491a      	ldr	r1, [pc, #104]	; (8019d68 <vTaskSwitchContext+0xb0>)
 8019cfe:	68fa      	ldr	r2, [r7, #12]
 8019d00:	4613      	mov	r3, r2
 8019d02:	009b      	lsls	r3, r3, #2
 8019d04:	4413      	add	r3, r2
 8019d06:	009b      	lsls	r3, r3, #2
 8019d08:	440b      	add	r3, r1
 8019d0a:	681b      	ldr	r3, [r3, #0]
 8019d0c:	2b00      	cmp	r3, #0
 8019d0e:	d0e5      	beq.n	8019cdc <vTaskSwitchContext+0x24>
 8019d10:	68fa      	ldr	r2, [r7, #12]
 8019d12:	4613      	mov	r3, r2
 8019d14:	009b      	lsls	r3, r3, #2
 8019d16:	4413      	add	r3, r2
 8019d18:	009b      	lsls	r3, r3, #2
 8019d1a:	4a13      	ldr	r2, [pc, #76]	; (8019d68 <vTaskSwitchContext+0xb0>)
 8019d1c:	4413      	add	r3, r2
 8019d1e:	60bb      	str	r3, [r7, #8]
 8019d20:	68bb      	ldr	r3, [r7, #8]
 8019d22:	685b      	ldr	r3, [r3, #4]
 8019d24:	685a      	ldr	r2, [r3, #4]
 8019d26:	68bb      	ldr	r3, [r7, #8]
 8019d28:	605a      	str	r2, [r3, #4]
 8019d2a:	68bb      	ldr	r3, [r7, #8]
 8019d2c:	685a      	ldr	r2, [r3, #4]
 8019d2e:	68bb      	ldr	r3, [r7, #8]
 8019d30:	3308      	adds	r3, #8
 8019d32:	429a      	cmp	r2, r3
 8019d34:	d104      	bne.n	8019d40 <vTaskSwitchContext+0x88>
 8019d36:	68bb      	ldr	r3, [r7, #8]
 8019d38:	685b      	ldr	r3, [r3, #4]
 8019d3a:	685a      	ldr	r2, [r3, #4]
 8019d3c:	68bb      	ldr	r3, [r7, #8]
 8019d3e:	605a      	str	r2, [r3, #4]
 8019d40:	68bb      	ldr	r3, [r7, #8]
 8019d42:	685b      	ldr	r3, [r3, #4]
 8019d44:	68db      	ldr	r3, [r3, #12]
 8019d46:	4a09      	ldr	r2, [pc, #36]	; (8019d6c <vTaskSwitchContext+0xb4>)
 8019d48:	6013      	str	r3, [r2, #0]
 8019d4a:	4a06      	ldr	r2, [pc, #24]	; (8019d64 <vTaskSwitchContext+0xac>)
 8019d4c:	68fb      	ldr	r3, [r7, #12]
 8019d4e:	6013      	str	r3, [r2, #0]
}
 8019d50:	bf00      	nop
 8019d52:	3714      	adds	r7, #20
 8019d54:	46bd      	mov	sp, r7
 8019d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d5a:	4770      	bx	lr
 8019d5c:	20012768 	.word	0x20012768
 8019d60:	20012754 	.word	0x20012754
 8019d64:	20012748 	.word	0x20012748
 8019d68:	20012270 	.word	0x20012270
 8019d6c:	2001226c 	.word	0x2001226c

08019d70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8019d70:	b580      	push	{r7, lr}
 8019d72:	b084      	sub	sp, #16
 8019d74:	af00      	add	r7, sp, #0
 8019d76:	6078      	str	r0, [r7, #4]
 8019d78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8019d7a:	687b      	ldr	r3, [r7, #4]
 8019d7c:	2b00      	cmp	r3, #0
 8019d7e:	d109      	bne.n	8019d94 <vTaskPlaceOnEventList+0x24>
 8019d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d84:	f383 8811 	msr	BASEPRI, r3
 8019d88:	f3bf 8f6f 	isb	sy
 8019d8c:	f3bf 8f4f 	dsb	sy
 8019d90:	60fb      	str	r3, [r7, #12]
 8019d92:	e7fe      	b.n	8019d92 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8019d94:	4b07      	ldr	r3, [pc, #28]	; (8019db4 <vTaskPlaceOnEventList+0x44>)
 8019d96:	681b      	ldr	r3, [r3, #0]
 8019d98:	3318      	adds	r3, #24
 8019d9a:	4619      	mov	r1, r3
 8019d9c:	6878      	ldr	r0, [r7, #4]
 8019d9e:	f7fe f986 	bl	80180ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8019da2:	2101      	movs	r1, #1
 8019da4:	6838      	ldr	r0, [r7, #0]
 8019da6:	f000 fb6d 	bl	801a484 <prvAddCurrentTaskToDelayedList>
}
 8019daa:	bf00      	nop
 8019dac:	3710      	adds	r7, #16
 8019dae:	46bd      	mov	sp, r7
 8019db0:	bd80      	pop	{r7, pc}
 8019db2:	bf00      	nop
 8019db4:	2001226c 	.word	0x2001226c

08019db8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8019db8:	b580      	push	{r7, lr}
 8019dba:	b086      	sub	sp, #24
 8019dbc:	af00      	add	r7, sp, #0
 8019dbe:	60f8      	str	r0, [r7, #12]
 8019dc0:	60b9      	str	r1, [r7, #8]
 8019dc2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8019dc4:	68fb      	ldr	r3, [r7, #12]
 8019dc6:	2b00      	cmp	r3, #0
 8019dc8:	d109      	bne.n	8019dde <vTaskPlaceOnEventListRestricted+0x26>
 8019dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019dce:	f383 8811 	msr	BASEPRI, r3
 8019dd2:	f3bf 8f6f 	isb	sy
 8019dd6:	f3bf 8f4f 	dsb	sy
 8019dda:	617b      	str	r3, [r7, #20]
 8019ddc:	e7fe      	b.n	8019ddc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8019dde:	4b0a      	ldr	r3, [pc, #40]	; (8019e08 <vTaskPlaceOnEventListRestricted+0x50>)
 8019de0:	681b      	ldr	r3, [r3, #0]
 8019de2:	3318      	adds	r3, #24
 8019de4:	4619      	mov	r1, r3
 8019de6:	68f8      	ldr	r0, [r7, #12]
 8019de8:	f7fe f93d 	bl	8018066 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8019dec:	687b      	ldr	r3, [r7, #4]
 8019dee:	2b00      	cmp	r3, #0
 8019df0:	d002      	beq.n	8019df8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8019df2:	f04f 33ff 	mov.w	r3, #4294967295
 8019df6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8019df8:	6879      	ldr	r1, [r7, #4]
 8019dfa:	68b8      	ldr	r0, [r7, #8]
 8019dfc:	f000 fb42 	bl	801a484 <prvAddCurrentTaskToDelayedList>
	}
 8019e00:	bf00      	nop
 8019e02:	3718      	adds	r7, #24
 8019e04:	46bd      	mov	sp, r7
 8019e06:	bd80      	pop	{r7, pc}
 8019e08:	2001226c 	.word	0x2001226c

08019e0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8019e0c:	b580      	push	{r7, lr}
 8019e0e:	b086      	sub	sp, #24
 8019e10:	af00      	add	r7, sp, #0
 8019e12:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019e14:	687b      	ldr	r3, [r7, #4]
 8019e16:	68db      	ldr	r3, [r3, #12]
 8019e18:	68db      	ldr	r3, [r3, #12]
 8019e1a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8019e1c:	693b      	ldr	r3, [r7, #16]
 8019e1e:	2b00      	cmp	r3, #0
 8019e20:	d109      	bne.n	8019e36 <xTaskRemoveFromEventList+0x2a>
 8019e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019e26:	f383 8811 	msr	BASEPRI, r3
 8019e2a:	f3bf 8f6f 	isb	sy
 8019e2e:	f3bf 8f4f 	dsb	sy
 8019e32:	60fb      	str	r3, [r7, #12]
 8019e34:	e7fe      	b.n	8019e34 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8019e36:	693b      	ldr	r3, [r7, #16]
 8019e38:	3318      	adds	r3, #24
 8019e3a:	4618      	mov	r0, r3
 8019e3c:	f7fe f970 	bl	8018120 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019e40:	4b1d      	ldr	r3, [pc, #116]	; (8019eb8 <xTaskRemoveFromEventList+0xac>)
 8019e42:	681b      	ldr	r3, [r3, #0]
 8019e44:	2b00      	cmp	r3, #0
 8019e46:	d11d      	bne.n	8019e84 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8019e48:	693b      	ldr	r3, [r7, #16]
 8019e4a:	3304      	adds	r3, #4
 8019e4c:	4618      	mov	r0, r3
 8019e4e:	f7fe f967 	bl	8018120 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8019e52:	693b      	ldr	r3, [r7, #16]
 8019e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019e56:	4b19      	ldr	r3, [pc, #100]	; (8019ebc <xTaskRemoveFromEventList+0xb0>)
 8019e58:	681b      	ldr	r3, [r3, #0]
 8019e5a:	429a      	cmp	r2, r3
 8019e5c:	d903      	bls.n	8019e66 <xTaskRemoveFromEventList+0x5a>
 8019e5e:	693b      	ldr	r3, [r7, #16]
 8019e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e62:	4a16      	ldr	r2, [pc, #88]	; (8019ebc <xTaskRemoveFromEventList+0xb0>)
 8019e64:	6013      	str	r3, [r2, #0]
 8019e66:	693b      	ldr	r3, [r7, #16]
 8019e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019e6a:	4613      	mov	r3, r2
 8019e6c:	009b      	lsls	r3, r3, #2
 8019e6e:	4413      	add	r3, r2
 8019e70:	009b      	lsls	r3, r3, #2
 8019e72:	4a13      	ldr	r2, [pc, #76]	; (8019ec0 <xTaskRemoveFromEventList+0xb4>)
 8019e74:	441a      	add	r2, r3
 8019e76:	693b      	ldr	r3, [r7, #16]
 8019e78:	3304      	adds	r3, #4
 8019e7a:	4619      	mov	r1, r3
 8019e7c:	4610      	mov	r0, r2
 8019e7e:	f7fe f8f2 	bl	8018066 <vListInsertEnd>
 8019e82:	e005      	b.n	8019e90 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8019e84:	693b      	ldr	r3, [r7, #16]
 8019e86:	3318      	adds	r3, #24
 8019e88:	4619      	mov	r1, r3
 8019e8a:	480e      	ldr	r0, [pc, #56]	; (8019ec4 <xTaskRemoveFromEventList+0xb8>)
 8019e8c:	f7fe f8eb 	bl	8018066 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8019e90:	693b      	ldr	r3, [r7, #16]
 8019e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019e94:	4b0c      	ldr	r3, [pc, #48]	; (8019ec8 <xTaskRemoveFromEventList+0xbc>)
 8019e96:	681b      	ldr	r3, [r3, #0]
 8019e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e9a:	429a      	cmp	r2, r3
 8019e9c:	d905      	bls.n	8019eaa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8019e9e:	2301      	movs	r3, #1
 8019ea0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8019ea2:	4b0a      	ldr	r3, [pc, #40]	; (8019ecc <xTaskRemoveFromEventList+0xc0>)
 8019ea4:	2201      	movs	r2, #1
 8019ea6:	601a      	str	r2, [r3, #0]
 8019ea8:	e001      	b.n	8019eae <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8019eaa:	2300      	movs	r3, #0
 8019eac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8019eae:	697b      	ldr	r3, [r7, #20]
}
 8019eb0:	4618      	mov	r0, r3
 8019eb2:	3718      	adds	r7, #24
 8019eb4:	46bd      	mov	sp, r7
 8019eb6:	bd80      	pop	{r7, pc}
 8019eb8:	20012768 	.word	0x20012768
 8019ebc:	20012748 	.word	0x20012748
 8019ec0:	20012270 	.word	0x20012270
 8019ec4:	20012700 	.word	0x20012700
 8019ec8:	2001226c 	.word	0x2001226c
 8019ecc:	20012754 	.word	0x20012754

08019ed0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8019ed0:	b480      	push	{r7}
 8019ed2:	b083      	sub	sp, #12
 8019ed4:	af00      	add	r7, sp, #0
 8019ed6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8019ed8:	4b06      	ldr	r3, [pc, #24]	; (8019ef4 <vTaskInternalSetTimeOutState+0x24>)
 8019eda:	681a      	ldr	r2, [r3, #0]
 8019edc:	687b      	ldr	r3, [r7, #4]
 8019ede:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8019ee0:	4b05      	ldr	r3, [pc, #20]	; (8019ef8 <vTaskInternalSetTimeOutState+0x28>)
 8019ee2:	681a      	ldr	r2, [r3, #0]
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	605a      	str	r2, [r3, #4]
}
 8019ee8:	bf00      	nop
 8019eea:	370c      	adds	r7, #12
 8019eec:	46bd      	mov	sp, r7
 8019eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ef2:	4770      	bx	lr
 8019ef4:	20012758 	.word	0x20012758
 8019ef8:	20012744 	.word	0x20012744

08019efc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8019efc:	b580      	push	{r7, lr}
 8019efe:	b088      	sub	sp, #32
 8019f00:	af00      	add	r7, sp, #0
 8019f02:	6078      	str	r0, [r7, #4]
 8019f04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8019f06:	687b      	ldr	r3, [r7, #4]
 8019f08:	2b00      	cmp	r3, #0
 8019f0a:	d109      	bne.n	8019f20 <xTaskCheckForTimeOut+0x24>
 8019f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f10:	f383 8811 	msr	BASEPRI, r3
 8019f14:	f3bf 8f6f 	isb	sy
 8019f18:	f3bf 8f4f 	dsb	sy
 8019f1c:	613b      	str	r3, [r7, #16]
 8019f1e:	e7fe      	b.n	8019f1e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8019f20:	683b      	ldr	r3, [r7, #0]
 8019f22:	2b00      	cmp	r3, #0
 8019f24:	d109      	bne.n	8019f3a <xTaskCheckForTimeOut+0x3e>
 8019f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f2a:	f383 8811 	msr	BASEPRI, r3
 8019f2e:	f3bf 8f6f 	isb	sy
 8019f32:	f3bf 8f4f 	dsb	sy
 8019f36:	60fb      	str	r3, [r7, #12]
 8019f38:	e7fe      	b.n	8019f38 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8019f3a:	f7fe fa3f 	bl	80183bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8019f3e:	4b1d      	ldr	r3, [pc, #116]	; (8019fb4 <xTaskCheckForTimeOut+0xb8>)
 8019f40:	681b      	ldr	r3, [r3, #0]
 8019f42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8019f44:	687b      	ldr	r3, [r7, #4]
 8019f46:	685b      	ldr	r3, [r3, #4]
 8019f48:	69ba      	ldr	r2, [r7, #24]
 8019f4a:	1ad3      	subs	r3, r2, r3
 8019f4c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8019f4e:	683b      	ldr	r3, [r7, #0]
 8019f50:	681b      	ldr	r3, [r3, #0]
 8019f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019f56:	d102      	bne.n	8019f5e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8019f58:	2300      	movs	r3, #0
 8019f5a:	61fb      	str	r3, [r7, #28]
 8019f5c:	e023      	b.n	8019fa6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8019f5e:	687b      	ldr	r3, [r7, #4]
 8019f60:	681a      	ldr	r2, [r3, #0]
 8019f62:	4b15      	ldr	r3, [pc, #84]	; (8019fb8 <xTaskCheckForTimeOut+0xbc>)
 8019f64:	681b      	ldr	r3, [r3, #0]
 8019f66:	429a      	cmp	r2, r3
 8019f68:	d007      	beq.n	8019f7a <xTaskCheckForTimeOut+0x7e>
 8019f6a:	687b      	ldr	r3, [r7, #4]
 8019f6c:	685b      	ldr	r3, [r3, #4]
 8019f6e:	69ba      	ldr	r2, [r7, #24]
 8019f70:	429a      	cmp	r2, r3
 8019f72:	d302      	bcc.n	8019f7a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8019f74:	2301      	movs	r3, #1
 8019f76:	61fb      	str	r3, [r7, #28]
 8019f78:	e015      	b.n	8019fa6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8019f7a:	683b      	ldr	r3, [r7, #0]
 8019f7c:	681b      	ldr	r3, [r3, #0]
 8019f7e:	697a      	ldr	r2, [r7, #20]
 8019f80:	429a      	cmp	r2, r3
 8019f82:	d20b      	bcs.n	8019f9c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8019f84:	683b      	ldr	r3, [r7, #0]
 8019f86:	681a      	ldr	r2, [r3, #0]
 8019f88:	697b      	ldr	r3, [r7, #20]
 8019f8a:	1ad2      	subs	r2, r2, r3
 8019f8c:	683b      	ldr	r3, [r7, #0]
 8019f8e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8019f90:	6878      	ldr	r0, [r7, #4]
 8019f92:	f7ff ff9d 	bl	8019ed0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8019f96:	2300      	movs	r3, #0
 8019f98:	61fb      	str	r3, [r7, #28]
 8019f9a:	e004      	b.n	8019fa6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8019f9c:	683b      	ldr	r3, [r7, #0]
 8019f9e:	2200      	movs	r2, #0
 8019fa0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8019fa2:	2301      	movs	r3, #1
 8019fa4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8019fa6:	f7fe fa37 	bl	8018418 <vPortExitCritical>

	return xReturn;
 8019faa:	69fb      	ldr	r3, [r7, #28]
}
 8019fac:	4618      	mov	r0, r3
 8019fae:	3720      	adds	r7, #32
 8019fb0:	46bd      	mov	sp, r7
 8019fb2:	bd80      	pop	{r7, pc}
 8019fb4:	20012744 	.word	0x20012744
 8019fb8:	20012758 	.word	0x20012758

08019fbc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8019fbc:	b480      	push	{r7}
 8019fbe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8019fc0:	4b03      	ldr	r3, [pc, #12]	; (8019fd0 <vTaskMissedYield+0x14>)
 8019fc2:	2201      	movs	r2, #1
 8019fc4:	601a      	str	r2, [r3, #0]
}
 8019fc6:	bf00      	nop
 8019fc8:	46bd      	mov	sp, r7
 8019fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fce:	4770      	bx	lr
 8019fd0:	20012754 	.word	0x20012754

08019fd4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8019fd4:	b580      	push	{r7, lr}
 8019fd6:	b082      	sub	sp, #8
 8019fd8:	af00      	add	r7, sp, #0
 8019fda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8019fdc:	f000 f852 	bl	801a084 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8019fe0:	4b06      	ldr	r3, [pc, #24]	; (8019ffc <prvIdleTask+0x28>)
 8019fe2:	681b      	ldr	r3, [r3, #0]
 8019fe4:	2b01      	cmp	r3, #1
 8019fe6:	d9f9      	bls.n	8019fdc <prvIdleTask+0x8>
			{
				taskYIELD();
 8019fe8:	4b05      	ldr	r3, [pc, #20]	; (801a000 <prvIdleTask+0x2c>)
 8019fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019fee:	601a      	str	r2, [r3, #0]
 8019ff0:	f3bf 8f4f 	dsb	sy
 8019ff4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8019ff8:	e7f0      	b.n	8019fdc <prvIdleTask+0x8>
 8019ffa:	bf00      	nop
 8019ffc:	20012270 	.word	0x20012270
 801a000:	e000ed04 	.word	0xe000ed04

0801a004 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801a004:	b580      	push	{r7, lr}
 801a006:	b082      	sub	sp, #8
 801a008:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801a00a:	2300      	movs	r3, #0
 801a00c:	607b      	str	r3, [r7, #4]
 801a00e:	e00c      	b.n	801a02a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801a010:	687a      	ldr	r2, [r7, #4]
 801a012:	4613      	mov	r3, r2
 801a014:	009b      	lsls	r3, r3, #2
 801a016:	4413      	add	r3, r2
 801a018:	009b      	lsls	r3, r3, #2
 801a01a:	4a12      	ldr	r2, [pc, #72]	; (801a064 <prvInitialiseTaskLists+0x60>)
 801a01c:	4413      	add	r3, r2
 801a01e:	4618      	mov	r0, r3
 801a020:	f7fd fff4 	bl	801800c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	3301      	adds	r3, #1
 801a028:	607b      	str	r3, [r7, #4]
 801a02a:	687b      	ldr	r3, [r7, #4]
 801a02c:	2b37      	cmp	r3, #55	; 0x37
 801a02e:	d9ef      	bls.n	801a010 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801a030:	480d      	ldr	r0, [pc, #52]	; (801a068 <prvInitialiseTaskLists+0x64>)
 801a032:	f7fd ffeb 	bl	801800c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801a036:	480d      	ldr	r0, [pc, #52]	; (801a06c <prvInitialiseTaskLists+0x68>)
 801a038:	f7fd ffe8 	bl	801800c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801a03c:	480c      	ldr	r0, [pc, #48]	; (801a070 <prvInitialiseTaskLists+0x6c>)
 801a03e:	f7fd ffe5 	bl	801800c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801a042:	480c      	ldr	r0, [pc, #48]	; (801a074 <prvInitialiseTaskLists+0x70>)
 801a044:	f7fd ffe2 	bl	801800c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801a048:	480b      	ldr	r0, [pc, #44]	; (801a078 <prvInitialiseTaskLists+0x74>)
 801a04a:	f7fd ffdf 	bl	801800c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801a04e:	4b0b      	ldr	r3, [pc, #44]	; (801a07c <prvInitialiseTaskLists+0x78>)
 801a050:	4a05      	ldr	r2, [pc, #20]	; (801a068 <prvInitialiseTaskLists+0x64>)
 801a052:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801a054:	4b0a      	ldr	r3, [pc, #40]	; (801a080 <prvInitialiseTaskLists+0x7c>)
 801a056:	4a05      	ldr	r2, [pc, #20]	; (801a06c <prvInitialiseTaskLists+0x68>)
 801a058:	601a      	str	r2, [r3, #0]
}
 801a05a:	bf00      	nop
 801a05c:	3708      	adds	r7, #8
 801a05e:	46bd      	mov	sp, r7
 801a060:	bd80      	pop	{r7, pc}
 801a062:	bf00      	nop
 801a064:	20012270 	.word	0x20012270
 801a068:	200126d0 	.word	0x200126d0
 801a06c:	200126e4 	.word	0x200126e4
 801a070:	20012700 	.word	0x20012700
 801a074:	20012714 	.word	0x20012714
 801a078:	2001272c 	.word	0x2001272c
 801a07c:	200126f8 	.word	0x200126f8
 801a080:	200126fc 	.word	0x200126fc

0801a084 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801a084:	b580      	push	{r7, lr}
 801a086:	b082      	sub	sp, #8
 801a088:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801a08a:	e019      	b.n	801a0c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801a08c:	f7fe f996 	bl	80183bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a090:	4b0f      	ldr	r3, [pc, #60]	; (801a0d0 <prvCheckTasksWaitingTermination+0x4c>)
 801a092:	68db      	ldr	r3, [r3, #12]
 801a094:	68db      	ldr	r3, [r3, #12]
 801a096:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a098:	687b      	ldr	r3, [r7, #4]
 801a09a:	3304      	adds	r3, #4
 801a09c:	4618      	mov	r0, r3
 801a09e:	f7fe f83f 	bl	8018120 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801a0a2:	4b0c      	ldr	r3, [pc, #48]	; (801a0d4 <prvCheckTasksWaitingTermination+0x50>)
 801a0a4:	681b      	ldr	r3, [r3, #0]
 801a0a6:	3b01      	subs	r3, #1
 801a0a8:	4a0a      	ldr	r2, [pc, #40]	; (801a0d4 <prvCheckTasksWaitingTermination+0x50>)
 801a0aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801a0ac:	4b0a      	ldr	r3, [pc, #40]	; (801a0d8 <prvCheckTasksWaitingTermination+0x54>)
 801a0ae:	681b      	ldr	r3, [r3, #0]
 801a0b0:	3b01      	subs	r3, #1
 801a0b2:	4a09      	ldr	r2, [pc, #36]	; (801a0d8 <prvCheckTasksWaitingTermination+0x54>)
 801a0b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801a0b6:	f7fe f9af 	bl	8018418 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801a0ba:	6878      	ldr	r0, [r7, #4]
 801a0bc:	f000 f80e 	bl	801a0dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801a0c0:	4b05      	ldr	r3, [pc, #20]	; (801a0d8 <prvCheckTasksWaitingTermination+0x54>)
 801a0c2:	681b      	ldr	r3, [r3, #0]
 801a0c4:	2b00      	cmp	r3, #0
 801a0c6:	d1e1      	bne.n	801a08c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801a0c8:	bf00      	nop
 801a0ca:	3708      	adds	r7, #8
 801a0cc:	46bd      	mov	sp, r7
 801a0ce:	bd80      	pop	{r7, pc}
 801a0d0:	20012714 	.word	0x20012714
 801a0d4:	20012740 	.word	0x20012740
 801a0d8:	20012728 	.word	0x20012728

0801a0dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801a0dc:	b580      	push	{r7, lr}
 801a0de:	b084      	sub	sp, #16
 801a0e0:	af00      	add	r7, sp, #0
 801a0e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801a0e4:	687b      	ldr	r3, [r7, #4]
 801a0e6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801a0ea:	2b00      	cmp	r3, #0
 801a0ec:	d108      	bne.n	801a100 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801a0ee:	687b      	ldr	r3, [r7, #4]
 801a0f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a0f2:	4618      	mov	r0, r3
 801a0f4:	f7fd fe76 	bl	8017de4 <vPortFree>
				vPortFree( pxTCB );
 801a0f8:	6878      	ldr	r0, [r7, #4]
 801a0fa:	f7fd fe73 	bl	8017de4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801a0fe:	e017      	b.n	801a130 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801a100:	687b      	ldr	r3, [r7, #4]
 801a102:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801a106:	2b01      	cmp	r3, #1
 801a108:	d103      	bne.n	801a112 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801a10a:	6878      	ldr	r0, [r7, #4]
 801a10c:	f7fd fe6a 	bl	8017de4 <vPortFree>
	}
 801a110:	e00e      	b.n	801a130 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801a112:	687b      	ldr	r3, [r7, #4]
 801a114:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801a118:	2b02      	cmp	r3, #2
 801a11a:	d009      	beq.n	801a130 <prvDeleteTCB+0x54>
 801a11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a120:	f383 8811 	msr	BASEPRI, r3
 801a124:	f3bf 8f6f 	isb	sy
 801a128:	f3bf 8f4f 	dsb	sy
 801a12c:	60fb      	str	r3, [r7, #12]
 801a12e:	e7fe      	b.n	801a12e <prvDeleteTCB+0x52>
	}
 801a130:	bf00      	nop
 801a132:	3710      	adds	r7, #16
 801a134:	46bd      	mov	sp, r7
 801a136:	bd80      	pop	{r7, pc}

0801a138 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801a138:	b480      	push	{r7}
 801a13a:	b083      	sub	sp, #12
 801a13c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a13e:	4b0c      	ldr	r3, [pc, #48]	; (801a170 <prvResetNextTaskUnblockTime+0x38>)
 801a140:	681b      	ldr	r3, [r3, #0]
 801a142:	681b      	ldr	r3, [r3, #0]
 801a144:	2b00      	cmp	r3, #0
 801a146:	d104      	bne.n	801a152 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801a148:	4b0a      	ldr	r3, [pc, #40]	; (801a174 <prvResetNextTaskUnblockTime+0x3c>)
 801a14a:	f04f 32ff 	mov.w	r2, #4294967295
 801a14e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801a150:	e008      	b.n	801a164 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a152:	4b07      	ldr	r3, [pc, #28]	; (801a170 <prvResetNextTaskUnblockTime+0x38>)
 801a154:	681b      	ldr	r3, [r3, #0]
 801a156:	68db      	ldr	r3, [r3, #12]
 801a158:	68db      	ldr	r3, [r3, #12]
 801a15a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801a15c:	687b      	ldr	r3, [r7, #4]
 801a15e:	685b      	ldr	r3, [r3, #4]
 801a160:	4a04      	ldr	r2, [pc, #16]	; (801a174 <prvResetNextTaskUnblockTime+0x3c>)
 801a162:	6013      	str	r3, [r2, #0]
}
 801a164:	bf00      	nop
 801a166:	370c      	adds	r7, #12
 801a168:	46bd      	mov	sp, r7
 801a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a16e:	4770      	bx	lr
 801a170:	200126f8 	.word	0x200126f8
 801a174:	20012760 	.word	0x20012760

0801a178 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801a178:	b480      	push	{r7}
 801a17a:	b083      	sub	sp, #12
 801a17c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801a17e:	4b0b      	ldr	r3, [pc, #44]	; (801a1ac <xTaskGetSchedulerState+0x34>)
 801a180:	681b      	ldr	r3, [r3, #0]
 801a182:	2b00      	cmp	r3, #0
 801a184:	d102      	bne.n	801a18c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801a186:	2301      	movs	r3, #1
 801a188:	607b      	str	r3, [r7, #4]
 801a18a:	e008      	b.n	801a19e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a18c:	4b08      	ldr	r3, [pc, #32]	; (801a1b0 <xTaskGetSchedulerState+0x38>)
 801a18e:	681b      	ldr	r3, [r3, #0]
 801a190:	2b00      	cmp	r3, #0
 801a192:	d102      	bne.n	801a19a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801a194:	2302      	movs	r3, #2
 801a196:	607b      	str	r3, [r7, #4]
 801a198:	e001      	b.n	801a19e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801a19a:	2300      	movs	r3, #0
 801a19c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801a19e:	687b      	ldr	r3, [r7, #4]
	}
 801a1a0:	4618      	mov	r0, r3
 801a1a2:	370c      	adds	r7, #12
 801a1a4:	46bd      	mov	sp, r7
 801a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1aa:	4770      	bx	lr
 801a1ac:	2001274c 	.word	0x2001274c
 801a1b0:	20012768 	.word	0x20012768

0801a1b4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801a1b4:	b580      	push	{r7, lr}
 801a1b6:	b084      	sub	sp, #16
 801a1b8:	af00      	add	r7, sp, #0
 801a1ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801a1bc:	687b      	ldr	r3, [r7, #4]
 801a1be:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801a1c0:	2300      	movs	r3, #0
 801a1c2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801a1c4:	687b      	ldr	r3, [r7, #4]
 801a1c6:	2b00      	cmp	r3, #0
 801a1c8:	d051      	beq.n	801a26e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801a1ca:	68bb      	ldr	r3, [r7, #8]
 801a1cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a1ce:	4b2a      	ldr	r3, [pc, #168]	; (801a278 <xTaskPriorityInherit+0xc4>)
 801a1d0:	681b      	ldr	r3, [r3, #0]
 801a1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a1d4:	429a      	cmp	r2, r3
 801a1d6:	d241      	bcs.n	801a25c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801a1d8:	68bb      	ldr	r3, [r7, #8]
 801a1da:	699b      	ldr	r3, [r3, #24]
 801a1dc:	2b00      	cmp	r3, #0
 801a1de:	db06      	blt.n	801a1ee <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a1e0:	4b25      	ldr	r3, [pc, #148]	; (801a278 <xTaskPriorityInherit+0xc4>)
 801a1e2:	681b      	ldr	r3, [r3, #0]
 801a1e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a1e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801a1ea:	68bb      	ldr	r3, [r7, #8]
 801a1ec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801a1ee:	68bb      	ldr	r3, [r7, #8]
 801a1f0:	6959      	ldr	r1, [r3, #20]
 801a1f2:	68bb      	ldr	r3, [r7, #8]
 801a1f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a1f6:	4613      	mov	r3, r2
 801a1f8:	009b      	lsls	r3, r3, #2
 801a1fa:	4413      	add	r3, r2
 801a1fc:	009b      	lsls	r3, r3, #2
 801a1fe:	4a1f      	ldr	r2, [pc, #124]	; (801a27c <xTaskPriorityInherit+0xc8>)
 801a200:	4413      	add	r3, r2
 801a202:	4299      	cmp	r1, r3
 801a204:	d122      	bne.n	801a24c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a206:	68bb      	ldr	r3, [r7, #8]
 801a208:	3304      	adds	r3, #4
 801a20a:	4618      	mov	r0, r3
 801a20c:	f7fd ff88 	bl	8018120 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801a210:	4b19      	ldr	r3, [pc, #100]	; (801a278 <xTaskPriorityInherit+0xc4>)
 801a212:	681b      	ldr	r3, [r3, #0]
 801a214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a216:	68bb      	ldr	r3, [r7, #8]
 801a218:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801a21a:	68bb      	ldr	r3, [r7, #8]
 801a21c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a21e:	4b18      	ldr	r3, [pc, #96]	; (801a280 <xTaskPriorityInherit+0xcc>)
 801a220:	681b      	ldr	r3, [r3, #0]
 801a222:	429a      	cmp	r2, r3
 801a224:	d903      	bls.n	801a22e <xTaskPriorityInherit+0x7a>
 801a226:	68bb      	ldr	r3, [r7, #8]
 801a228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a22a:	4a15      	ldr	r2, [pc, #84]	; (801a280 <xTaskPriorityInherit+0xcc>)
 801a22c:	6013      	str	r3, [r2, #0]
 801a22e:	68bb      	ldr	r3, [r7, #8]
 801a230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a232:	4613      	mov	r3, r2
 801a234:	009b      	lsls	r3, r3, #2
 801a236:	4413      	add	r3, r2
 801a238:	009b      	lsls	r3, r3, #2
 801a23a:	4a10      	ldr	r2, [pc, #64]	; (801a27c <xTaskPriorityInherit+0xc8>)
 801a23c:	441a      	add	r2, r3
 801a23e:	68bb      	ldr	r3, [r7, #8]
 801a240:	3304      	adds	r3, #4
 801a242:	4619      	mov	r1, r3
 801a244:	4610      	mov	r0, r2
 801a246:	f7fd ff0e 	bl	8018066 <vListInsertEnd>
 801a24a:	e004      	b.n	801a256 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801a24c:	4b0a      	ldr	r3, [pc, #40]	; (801a278 <xTaskPriorityInherit+0xc4>)
 801a24e:	681b      	ldr	r3, [r3, #0]
 801a250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a252:	68bb      	ldr	r3, [r7, #8]
 801a254:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801a256:	2301      	movs	r3, #1
 801a258:	60fb      	str	r3, [r7, #12]
 801a25a:	e008      	b.n	801a26e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801a25c:	68bb      	ldr	r3, [r7, #8]
 801a25e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801a260:	4b05      	ldr	r3, [pc, #20]	; (801a278 <xTaskPriorityInherit+0xc4>)
 801a262:	681b      	ldr	r3, [r3, #0]
 801a264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a266:	429a      	cmp	r2, r3
 801a268:	d201      	bcs.n	801a26e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801a26a:	2301      	movs	r3, #1
 801a26c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801a26e:	68fb      	ldr	r3, [r7, #12]
	}
 801a270:	4618      	mov	r0, r3
 801a272:	3710      	adds	r7, #16
 801a274:	46bd      	mov	sp, r7
 801a276:	bd80      	pop	{r7, pc}
 801a278:	2001226c 	.word	0x2001226c
 801a27c:	20012270 	.word	0x20012270
 801a280:	20012748 	.word	0x20012748

0801a284 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801a284:	b580      	push	{r7, lr}
 801a286:	b086      	sub	sp, #24
 801a288:	af00      	add	r7, sp, #0
 801a28a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801a28c:	687b      	ldr	r3, [r7, #4]
 801a28e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801a290:	2300      	movs	r3, #0
 801a292:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801a294:	687b      	ldr	r3, [r7, #4]
 801a296:	2b00      	cmp	r3, #0
 801a298:	d054      	beq.n	801a344 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801a29a:	4b2d      	ldr	r3, [pc, #180]	; (801a350 <xTaskPriorityDisinherit+0xcc>)
 801a29c:	681b      	ldr	r3, [r3, #0]
 801a29e:	693a      	ldr	r2, [r7, #16]
 801a2a0:	429a      	cmp	r2, r3
 801a2a2:	d009      	beq.n	801a2b8 <xTaskPriorityDisinherit+0x34>
 801a2a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a2a8:	f383 8811 	msr	BASEPRI, r3
 801a2ac:	f3bf 8f6f 	isb	sy
 801a2b0:	f3bf 8f4f 	dsb	sy
 801a2b4:	60fb      	str	r3, [r7, #12]
 801a2b6:	e7fe      	b.n	801a2b6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 801a2b8:	693b      	ldr	r3, [r7, #16]
 801a2ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a2bc:	2b00      	cmp	r3, #0
 801a2be:	d109      	bne.n	801a2d4 <xTaskPriorityDisinherit+0x50>
 801a2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a2c4:	f383 8811 	msr	BASEPRI, r3
 801a2c8:	f3bf 8f6f 	isb	sy
 801a2cc:	f3bf 8f4f 	dsb	sy
 801a2d0:	60bb      	str	r3, [r7, #8]
 801a2d2:	e7fe      	b.n	801a2d2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 801a2d4:	693b      	ldr	r3, [r7, #16]
 801a2d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a2d8:	1e5a      	subs	r2, r3, #1
 801a2da:	693b      	ldr	r3, [r7, #16]
 801a2dc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801a2de:	693b      	ldr	r3, [r7, #16]
 801a2e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a2e2:	693b      	ldr	r3, [r7, #16]
 801a2e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a2e6:	429a      	cmp	r2, r3
 801a2e8:	d02c      	beq.n	801a344 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801a2ea:	693b      	ldr	r3, [r7, #16]
 801a2ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a2ee:	2b00      	cmp	r3, #0
 801a2f0:	d128      	bne.n	801a344 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a2f2:	693b      	ldr	r3, [r7, #16]
 801a2f4:	3304      	adds	r3, #4
 801a2f6:	4618      	mov	r0, r3
 801a2f8:	f7fd ff12 	bl	8018120 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801a2fc:	693b      	ldr	r3, [r7, #16]
 801a2fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801a300:	693b      	ldr	r3, [r7, #16]
 801a302:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a304:	693b      	ldr	r3, [r7, #16]
 801a306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a308:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801a30c:	693b      	ldr	r3, [r7, #16]
 801a30e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801a310:	693b      	ldr	r3, [r7, #16]
 801a312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a314:	4b0f      	ldr	r3, [pc, #60]	; (801a354 <xTaskPriorityDisinherit+0xd0>)
 801a316:	681b      	ldr	r3, [r3, #0]
 801a318:	429a      	cmp	r2, r3
 801a31a:	d903      	bls.n	801a324 <xTaskPriorityDisinherit+0xa0>
 801a31c:	693b      	ldr	r3, [r7, #16]
 801a31e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a320:	4a0c      	ldr	r2, [pc, #48]	; (801a354 <xTaskPriorityDisinherit+0xd0>)
 801a322:	6013      	str	r3, [r2, #0]
 801a324:	693b      	ldr	r3, [r7, #16]
 801a326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a328:	4613      	mov	r3, r2
 801a32a:	009b      	lsls	r3, r3, #2
 801a32c:	4413      	add	r3, r2
 801a32e:	009b      	lsls	r3, r3, #2
 801a330:	4a09      	ldr	r2, [pc, #36]	; (801a358 <xTaskPriorityDisinherit+0xd4>)
 801a332:	441a      	add	r2, r3
 801a334:	693b      	ldr	r3, [r7, #16]
 801a336:	3304      	adds	r3, #4
 801a338:	4619      	mov	r1, r3
 801a33a:	4610      	mov	r0, r2
 801a33c:	f7fd fe93 	bl	8018066 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801a340:	2301      	movs	r3, #1
 801a342:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801a344:	697b      	ldr	r3, [r7, #20]
	}
 801a346:	4618      	mov	r0, r3
 801a348:	3718      	adds	r7, #24
 801a34a:	46bd      	mov	sp, r7
 801a34c:	bd80      	pop	{r7, pc}
 801a34e:	bf00      	nop
 801a350:	2001226c 	.word	0x2001226c
 801a354:	20012748 	.word	0x20012748
 801a358:	20012270 	.word	0x20012270

0801a35c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801a35c:	b580      	push	{r7, lr}
 801a35e:	b088      	sub	sp, #32
 801a360:	af00      	add	r7, sp, #0
 801a362:	6078      	str	r0, [r7, #4]
 801a364:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801a366:	687b      	ldr	r3, [r7, #4]
 801a368:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801a36a:	2301      	movs	r3, #1
 801a36c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801a36e:	687b      	ldr	r3, [r7, #4]
 801a370:	2b00      	cmp	r3, #0
 801a372:	d068      	beq.n	801a446 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801a374:	69bb      	ldr	r3, [r7, #24]
 801a376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a378:	2b00      	cmp	r3, #0
 801a37a:	d109      	bne.n	801a390 <vTaskPriorityDisinheritAfterTimeout+0x34>
 801a37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a380:	f383 8811 	msr	BASEPRI, r3
 801a384:	f3bf 8f6f 	isb	sy
 801a388:	f3bf 8f4f 	dsb	sy
 801a38c:	60fb      	str	r3, [r7, #12]
 801a38e:	e7fe      	b.n	801a38e <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801a390:	69bb      	ldr	r3, [r7, #24]
 801a392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a394:	683a      	ldr	r2, [r7, #0]
 801a396:	429a      	cmp	r2, r3
 801a398:	d902      	bls.n	801a3a0 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801a39a:	683b      	ldr	r3, [r7, #0]
 801a39c:	61fb      	str	r3, [r7, #28]
 801a39e:	e002      	b.n	801a3a6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801a3a0:	69bb      	ldr	r3, [r7, #24]
 801a3a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a3a4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801a3a6:	69bb      	ldr	r3, [r7, #24]
 801a3a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a3aa:	69fa      	ldr	r2, [r7, #28]
 801a3ac:	429a      	cmp	r2, r3
 801a3ae:	d04a      	beq.n	801a446 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801a3b0:	69bb      	ldr	r3, [r7, #24]
 801a3b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a3b4:	697a      	ldr	r2, [r7, #20]
 801a3b6:	429a      	cmp	r2, r3
 801a3b8:	d145      	bne.n	801a446 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801a3ba:	4b25      	ldr	r3, [pc, #148]	; (801a450 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 801a3bc:	681b      	ldr	r3, [r3, #0]
 801a3be:	69ba      	ldr	r2, [r7, #24]
 801a3c0:	429a      	cmp	r2, r3
 801a3c2:	d109      	bne.n	801a3d8 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 801a3c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a3c8:	f383 8811 	msr	BASEPRI, r3
 801a3cc:	f3bf 8f6f 	isb	sy
 801a3d0:	f3bf 8f4f 	dsb	sy
 801a3d4:	60bb      	str	r3, [r7, #8]
 801a3d6:	e7fe      	b.n	801a3d6 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801a3d8:	69bb      	ldr	r3, [r7, #24]
 801a3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a3dc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801a3de:	69bb      	ldr	r3, [r7, #24]
 801a3e0:	69fa      	ldr	r2, [r7, #28]
 801a3e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801a3e4:	69bb      	ldr	r3, [r7, #24]
 801a3e6:	699b      	ldr	r3, [r3, #24]
 801a3e8:	2b00      	cmp	r3, #0
 801a3ea:	db04      	blt.n	801a3f6 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a3ec:	69fb      	ldr	r3, [r7, #28]
 801a3ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801a3f2:	69bb      	ldr	r3, [r7, #24]
 801a3f4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801a3f6:	69bb      	ldr	r3, [r7, #24]
 801a3f8:	6959      	ldr	r1, [r3, #20]
 801a3fa:	693a      	ldr	r2, [r7, #16]
 801a3fc:	4613      	mov	r3, r2
 801a3fe:	009b      	lsls	r3, r3, #2
 801a400:	4413      	add	r3, r2
 801a402:	009b      	lsls	r3, r3, #2
 801a404:	4a13      	ldr	r2, [pc, #76]	; (801a454 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801a406:	4413      	add	r3, r2
 801a408:	4299      	cmp	r1, r3
 801a40a:	d11c      	bne.n	801a446 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a40c:	69bb      	ldr	r3, [r7, #24]
 801a40e:	3304      	adds	r3, #4
 801a410:	4618      	mov	r0, r3
 801a412:	f7fd fe85 	bl	8018120 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801a416:	69bb      	ldr	r3, [r7, #24]
 801a418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a41a:	4b0f      	ldr	r3, [pc, #60]	; (801a458 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801a41c:	681b      	ldr	r3, [r3, #0]
 801a41e:	429a      	cmp	r2, r3
 801a420:	d903      	bls.n	801a42a <vTaskPriorityDisinheritAfterTimeout+0xce>
 801a422:	69bb      	ldr	r3, [r7, #24]
 801a424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a426:	4a0c      	ldr	r2, [pc, #48]	; (801a458 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801a428:	6013      	str	r3, [r2, #0]
 801a42a:	69bb      	ldr	r3, [r7, #24]
 801a42c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a42e:	4613      	mov	r3, r2
 801a430:	009b      	lsls	r3, r3, #2
 801a432:	4413      	add	r3, r2
 801a434:	009b      	lsls	r3, r3, #2
 801a436:	4a07      	ldr	r2, [pc, #28]	; (801a454 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801a438:	441a      	add	r2, r3
 801a43a:	69bb      	ldr	r3, [r7, #24]
 801a43c:	3304      	adds	r3, #4
 801a43e:	4619      	mov	r1, r3
 801a440:	4610      	mov	r0, r2
 801a442:	f7fd fe10 	bl	8018066 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801a446:	bf00      	nop
 801a448:	3720      	adds	r7, #32
 801a44a:	46bd      	mov	sp, r7
 801a44c:	bd80      	pop	{r7, pc}
 801a44e:	bf00      	nop
 801a450:	2001226c 	.word	0x2001226c
 801a454:	20012270 	.word	0x20012270
 801a458:	20012748 	.word	0x20012748

0801a45c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801a45c:	b480      	push	{r7}
 801a45e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801a460:	4b07      	ldr	r3, [pc, #28]	; (801a480 <pvTaskIncrementMutexHeldCount+0x24>)
 801a462:	681b      	ldr	r3, [r3, #0]
 801a464:	2b00      	cmp	r3, #0
 801a466:	d004      	beq.n	801a472 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801a468:	4b05      	ldr	r3, [pc, #20]	; (801a480 <pvTaskIncrementMutexHeldCount+0x24>)
 801a46a:	681b      	ldr	r3, [r3, #0]
 801a46c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801a46e:	3201      	adds	r2, #1
 801a470:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801a472:	4b03      	ldr	r3, [pc, #12]	; (801a480 <pvTaskIncrementMutexHeldCount+0x24>)
 801a474:	681b      	ldr	r3, [r3, #0]
	}
 801a476:	4618      	mov	r0, r3
 801a478:	46bd      	mov	sp, r7
 801a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a47e:	4770      	bx	lr
 801a480:	2001226c 	.word	0x2001226c

0801a484 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801a484:	b580      	push	{r7, lr}
 801a486:	b084      	sub	sp, #16
 801a488:	af00      	add	r7, sp, #0
 801a48a:	6078      	str	r0, [r7, #4]
 801a48c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801a48e:	4b21      	ldr	r3, [pc, #132]	; (801a514 <prvAddCurrentTaskToDelayedList+0x90>)
 801a490:	681b      	ldr	r3, [r3, #0]
 801a492:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a494:	4b20      	ldr	r3, [pc, #128]	; (801a518 <prvAddCurrentTaskToDelayedList+0x94>)
 801a496:	681b      	ldr	r3, [r3, #0]
 801a498:	3304      	adds	r3, #4
 801a49a:	4618      	mov	r0, r3
 801a49c:	f7fd fe40 	bl	8018120 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801a4a0:	687b      	ldr	r3, [r7, #4]
 801a4a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a4a6:	d10a      	bne.n	801a4be <prvAddCurrentTaskToDelayedList+0x3a>
 801a4a8:	683b      	ldr	r3, [r7, #0]
 801a4aa:	2b00      	cmp	r3, #0
 801a4ac:	d007      	beq.n	801a4be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801a4ae:	4b1a      	ldr	r3, [pc, #104]	; (801a518 <prvAddCurrentTaskToDelayedList+0x94>)
 801a4b0:	681b      	ldr	r3, [r3, #0]
 801a4b2:	3304      	adds	r3, #4
 801a4b4:	4619      	mov	r1, r3
 801a4b6:	4819      	ldr	r0, [pc, #100]	; (801a51c <prvAddCurrentTaskToDelayedList+0x98>)
 801a4b8:	f7fd fdd5 	bl	8018066 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801a4bc:	e026      	b.n	801a50c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801a4be:	68fa      	ldr	r2, [r7, #12]
 801a4c0:	687b      	ldr	r3, [r7, #4]
 801a4c2:	4413      	add	r3, r2
 801a4c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801a4c6:	4b14      	ldr	r3, [pc, #80]	; (801a518 <prvAddCurrentTaskToDelayedList+0x94>)
 801a4c8:	681b      	ldr	r3, [r3, #0]
 801a4ca:	68ba      	ldr	r2, [r7, #8]
 801a4cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801a4ce:	68ba      	ldr	r2, [r7, #8]
 801a4d0:	68fb      	ldr	r3, [r7, #12]
 801a4d2:	429a      	cmp	r2, r3
 801a4d4:	d209      	bcs.n	801a4ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801a4d6:	4b12      	ldr	r3, [pc, #72]	; (801a520 <prvAddCurrentTaskToDelayedList+0x9c>)
 801a4d8:	681a      	ldr	r2, [r3, #0]
 801a4da:	4b0f      	ldr	r3, [pc, #60]	; (801a518 <prvAddCurrentTaskToDelayedList+0x94>)
 801a4dc:	681b      	ldr	r3, [r3, #0]
 801a4de:	3304      	adds	r3, #4
 801a4e0:	4619      	mov	r1, r3
 801a4e2:	4610      	mov	r0, r2
 801a4e4:	f7fd fde3 	bl	80180ae <vListInsert>
}
 801a4e8:	e010      	b.n	801a50c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801a4ea:	4b0e      	ldr	r3, [pc, #56]	; (801a524 <prvAddCurrentTaskToDelayedList+0xa0>)
 801a4ec:	681a      	ldr	r2, [r3, #0]
 801a4ee:	4b0a      	ldr	r3, [pc, #40]	; (801a518 <prvAddCurrentTaskToDelayedList+0x94>)
 801a4f0:	681b      	ldr	r3, [r3, #0]
 801a4f2:	3304      	adds	r3, #4
 801a4f4:	4619      	mov	r1, r3
 801a4f6:	4610      	mov	r0, r2
 801a4f8:	f7fd fdd9 	bl	80180ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801a4fc:	4b0a      	ldr	r3, [pc, #40]	; (801a528 <prvAddCurrentTaskToDelayedList+0xa4>)
 801a4fe:	681b      	ldr	r3, [r3, #0]
 801a500:	68ba      	ldr	r2, [r7, #8]
 801a502:	429a      	cmp	r2, r3
 801a504:	d202      	bcs.n	801a50c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801a506:	4a08      	ldr	r2, [pc, #32]	; (801a528 <prvAddCurrentTaskToDelayedList+0xa4>)
 801a508:	68bb      	ldr	r3, [r7, #8]
 801a50a:	6013      	str	r3, [r2, #0]
}
 801a50c:	bf00      	nop
 801a50e:	3710      	adds	r7, #16
 801a510:	46bd      	mov	sp, r7
 801a512:	bd80      	pop	{r7, pc}
 801a514:	20012744 	.word	0x20012744
 801a518:	2001226c 	.word	0x2001226c
 801a51c:	2001272c 	.word	0x2001272c
 801a520:	200126fc 	.word	0x200126fc
 801a524:	200126f8 	.word	0x200126f8
 801a528:	20012760 	.word	0x20012760

0801a52c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801a52c:	b580      	push	{r7, lr}
 801a52e:	b08a      	sub	sp, #40	; 0x28
 801a530:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801a532:	2300      	movs	r3, #0
 801a534:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801a536:	f000 faff 	bl	801ab38 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801a53a:	4b1c      	ldr	r3, [pc, #112]	; (801a5ac <xTimerCreateTimerTask+0x80>)
 801a53c:	681b      	ldr	r3, [r3, #0]
 801a53e:	2b00      	cmp	r3, #0
 801a540:	d021      	beq.n	801a586 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801a542:	2300      	movs	r3, #0
 801a544:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801a546:	2300      	movs	r3, #0
 801a548:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801a54a:	1d3a      	adds	r2, r7, #4
 801a54c:	f107 0108 	add.w	r1, r7, #8
 801a550:	f107 030c 	add.w	r3, r7, #12
 801a554:	4618      	mov	r0, r3
 801a556:	f7fd fb69 	bl	8017c2c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801a55a:	6879      	ldr	r1, [r7, #4]
 801a55c:	68bb      	ldr	r3, [r7, #8]
 801a55e:	68fa      	ldr	r2, [r7, #12]
 801a560:	9202      	str	r2, [sp, #8]
 801a562:	9301      	str	r3, [sp, #4]
 801a564:	2302      	movs	r3, #2
 801a566:	9300      	str	r3, [sp, #0]
 801a568:	2300      	movs	r3, #0
 801a56a:	460a      	mov	r2, r1
 801a56c:	4910      	ldr	r1, [pc, #64]	; (801a5b0 <xTimerCreateTimerTask+0x84>)
 801a56e:	4811      	ldr	r0, [pc, #68]	; (801a5b4 <xTimerCreateTimerTask+0x88>)
 801a570:	f7ff f82c 	bl	80195cc <xTaskCreateStatic>
 801a574:	4602      	mov	r2, r0
 801a576:	4b10      	ldr	r3, [pc, #64]	; (801a5b8 <xTimerCreateTimerTask+0x8c>)
 801a578:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801a57a:	4b0f      	ldr	r3, [pc, #60]	; (801a5b8 <xTimerCreateTimerTask+0x8c>)
 801a57c:	681b      	ldr	r3, [r3, #0]
 801a57e:	2b00      	cmp	r3, #0
 801a580:	d001      	beq.n	801a586 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801a582:	2301      	movs	r3, #1
 801a584:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801a586:	697b      	ldr	r3, [r7, #20]
 801a588:	2b00      	cmp	r3, #0
 801a58a:	d109      	bne.n	801a5a0 <xTimerCreateTimerTask+0x74>
 801a58c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a590:	f383 8811 	msr	BASEPRI, r3
 801a594:	f3bf 8f6f 	isb	sy
 801a598:	f3bf 8f4f 	dsb	sy
 801a59c:	613b      	str	r3, [r7, #16]
 801a59e:	e7fe      	b.n	801a59e <xTimerCreateTimerTask+0x72>
	return xReturn;
 801a5a0:	697b      	ldr	r3, [r7, #20]
}
 801a5a2:	4618      	mov	r0, r3
 801a5a4:	3718      	adds	r7, #24
 801a5a6:	46bd      	mov	sp, r7
 801a5a8:	bd80      	pop	{r7, pc}
 801a5aa:	bf00      	nop
 801a5ac:	2001279c 	.word	0x2001279c
 801a5b0:	08030130 	.word	0x08030130
 801a5b4:	0801a6ed 	.word	0x0801a6ed
 801a5b8:	200127a0 	.word	0x200127a0

0801a5bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801a5bc:	b580      	push	{r7, lr}
 801a5be:	b08a      	sub	sp, #40	; 0x28
 801a5c0:	af00      	add	r7, sp, #0
 801a5c2:	60f8      	str	r0, [r7, #12]
 801a5c4:	60b9      	str	r1, [r7, #8]
 801a5c6:	607a      	str	r2, [r7, #4]
 801a5c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801a5ca:	2300      	movs	r3, #0
 801a5cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801a5ce:	68fb      	ldr	r3, [r7, #12]
 801a5d0:	2b00      	cmp	r3, #0
 801a5d2:	d109      	bne.n	801a5e8 <xTimerGenericCommand+0x2c>
 801a5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a5d8:	f383 8811 	msr	BASEPRI, r3
 801a5dc:	f3bf 8f6f 	isb	sy
 801a5e0:	f3bf 8f4f 	dsb	sy
 801a5e4:	623b      	str	r3, [r7, #32]
 801a5e6:	e7fe      	b.n	801a5e6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801a5e8:	4b19      	ldr	r3, [pc, #100]	; (801a650 <xTimerGenericCommand+0x94>)
 801a5ea:	681b      	ldr	r3, [r3, #0]
 801a5ec:	2b00      	cmp	r3, #0
 801a5ee:	d02a      	beq.n	801a646 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801a5f0:	68bb      	ldr	r3, [r7, #8]
 801a5f2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801a5f4:	687b      	ldr	r3, [r7, #4]
 801a5f6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801a5f8:	68fb      	ldr	r3, [r7, #12]
 801a5fa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801a5fc:	68bb      	ldr	r3, [r7, #8]
 801a5fe:	2b05      	cmp	r3, #5
 801a600:	dc18      	bgt.n	801a634 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801a602:	f7ff fdb9 	bl	801a178 <xTaskGetSchedulerState>
 801a606:	4603      	mov	r3, r0
 801a608:	2b02      	cmp	r3, #2
 801a60a:	d109      	bne.n	801a620 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801a60c:	4b10      	ldr	r3, [pc, #64]	; (801a650 <xTimerGenericCommand+0x94>)
 801a60e:	6818      	ldr	r0, [r3, #0]
 801a610:	f107 0110 	add.w	r1, r7, #16
 801a614:	2300      	movs	r3, #0
 801a616:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a618:	f7fe f98e 	bl	8018938 <xQueueGenericSend>
 801a61c:	6278      	str	r0, [r7, #36]	; 0x24
 801a61e:	e012      	b.n	801a646 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801a620:	4b0b      	ldr	r3, [pc, #44]	; (801a650 <xTimerGenericCommand+0x94>)
 801a622:	6818      	ldr	r0, [r3, #0]
 801a624:	f107 0110 	add.w	r1, r7, #16
 801a628:	2300      	movs	r3, #0
 801a62a:	2200      	movs	r2, #0
 801a62c:	f7fe f984 	bl	8018938 <xQueueGenericSend>
 801a630:	6278      	str	r0, [r7, #36]	; 0x24
 801a632:	e008      	b.n	801a646 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801a634:	4b06      	ldr	r3, [pc, #24]	; (801a650 <xTimerGenericCommand+0x94>)
 801a636:	6818      	ldr	r0, [r3, #0]
 801a638:	f107 0110 	add.w	r1, r7, #16
 801a63c:	2300      	movs	r3, #0
 801a63e:	683a      	ldr	r2, [r7, #0]
 801a640:	f7fe fa74 	bl	8018b2c <xQueueGenericSendFromISR>
 801a644:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801a646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801a648:	4618      	mov	r0, r3
 801a64a:	3728      	adds	r7, #40	; 0x28
 801a64c:	46bd      	mov	sp, r7
 801a64e:	bd80      	pop	{r7, pc}
 801a650:	2001279c 	.word	0x2001279c

0801a654 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801a654:	b580      	push	{r7, lr}
 801a656:	b088      	sub	sp, #32
 801a658:	af02      	add	r7, sp, #8
 801a65a:	6078      	str	r0, [r7, #4]
 801a65c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a65e:	4b22      	ldr	r3, [pc, #136]	; (801a6e8 <prvProcessExpiredTimer+0x94>)
 801a660:	681b      	ldr	r3, [r3, #0]
 801a662:	68db      	ldr	r3, [r3, #12]
 801a664:	68db      	ldr	r3, [r3, #12]
 801a666:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801a668:	697b      	ldr	r3, [r7, #20]
 801a66a:	3304      	adds	r3, #4
 801a66c:	4618      	mov	r0, r3
 801a66e:	f7fd fd57 	bl	8018120 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801a672:	697b      	ldr	r3, [r7, #20]
 801a674:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801a678:	f003 0304 	and.w	r3, r3, #4
 801a67c:	2b00      	cmp	r3, #0
 801a67e:	d021      	beq.n	801a6c4 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801a680:	697b      	ldr	r3, [r7, #20]
 801a682:	699a      	ldr	r2, [r3, #24]
 801a684:	687b      	ldr	r3, [r7, #4]
 801a686:	18d1      	adds	r1, r2, r3
 801a688:	687b      	ldr	r3, [r7, #4]
 801a68a:	683a      	ldr	r2, [r7, #0]
 801a68c:	6978      	ldr	r0, [r7, #20]
 801a68e:	f000 f8d1 	bl	801a834 <prvInsertTimerInActiveList>
 801a692:	4603      	mov	r3, r0
 801a694:	2b00      	cmp	r3, #0
 801a696:	d01e      	beq.n	801a6d6 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801a698:	2300      	movs	r3, #0
 801a69a:	9300      	str	r3, [sp, #0]
 801a69c:	2300      	movs	r3, #0
 801a69e:	687a      	ldr	r2, [r7, #4]
 801a6a0:	2100      	movs	r1, #0
 801a6a2:	6978      	ldr	r0, [r7, #20]
 801a6a4:	f7ff ff8a 	bl	801a5bc <xTimerGenericCommand>
 801a6a8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801a6aa:	693b      	ldr	r3, [r7, #16]
 801a6ac:	2b00      	cmp	r3, #0
 801a6ae:	d112      	bne.n	801a6d6 <prvProcessExpiredTimer+0x82>
 801a6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a6b4:	f383 8811 	msr	BASEPRI, r3
 801a6b8:	f3bf 8f6f 	isb	sy
 801a6bc:	f3bf 8f4f 	dsb	sy
 801a6c0:	60fb      	str	r3, [r7, #12]
 801a6c2:	e7fe      	b.n	801a6c2 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801a6c4:	697b      	ldr	r3, [r7, #20]
 801a6c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801a6ca:	f023 0301 	bic.w	r3, r3, #1
 801a6ce:	b2da      	uxtb	r2, r3
 801a6d0:	697b      	ldr	r3, [r7, #20]
 801a6d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801a6d6:	697b      	ldr	r3, [r7, #20]
 801a6d8:	6a1b      	ldr	r3, [r3, #32]
 801a6da:	6978      	ldr	r0, [r7, #20]
 801a6dc:	4798      	blx	r3
}
 801a6de:	bf00      	nop
 801a6e0:	3718      	adds	r7, #24
 801a6e2:	46bd      	mov	sp, r7
 801a6e4:	bd80      	pop	{r7, pc}
 801a6e6:	bf00      	nop
 801a6e8:	20012794 	.word	0x20012794

0801a6ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801a6ec:	b580      	push	{r7, lr}
 801a6ee:	b084      	sub	sp, #16
 801a6f0:	af00      	add	r7, sp, #0
 801a6f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801a6f4:	f107 0308 	add.w	r3, r7, #8
 801a6f8:	4618      	mov	r0, r3
 801a6fa:	f000 f857 	bl	801a7ac <prvGetNextExpireTime>
 801a6fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801a700:	68bb      	ldr	r3, [r7, #8]
 801a702:	4619      	mov	r1, r3
 801a704:	68f8      	ldr	r0, [r7, #12]
 801a706:	f000 f803 	bl	801a710 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801a70a:	f000 f8d5 	bl	801a8b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801a70e:	e7f1      	b.n	801a6f4 <prvTimerTask+0x8>

0801a710 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801a710:	b580      	push	{r7, lr}
 801a712:	b084      	sub	sp, #16
 801a714:	af00      	add	r7, sp, #0
 801a716:	6078      	str	r0, [r7, #4]
 801a718:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801a71a:	f7ff f95b 	bl	80199d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801a71e:	f107 0308 	add.w	r3, r7, #8
 801a722:	4618      	mov	r0, r3
 801a724:	f000 f866 	bl	801a7f4 <prvSampleTimeNow>
 801a728:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801a72a:	68bb      	ldr	r3, [r7, #8]
 801a72c:	2b00      	cmp	r3, #0
 801a72e:	d130      	bne.n	801a792 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801a730:	683b      	ldr	r3, [r7, #0]
 801a732:	2b00      	cmp	r3, #0
 801a734:	d10a      	bne.n	801a74c <prvProcessTimerOrBlockTask+0x3c>
 801a736:	687a      	ldr	r2, [r7, #4]
 801a738:	68fb      	ldr	r3, [r7, #12]
 801a73a:	429a      	cmp	r2, r3
 801a73c:	d806      	bhi.n	801a74c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801a73e:	f7ff f957 	bl	80199f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801a742:	68f9      	ldr	r1, [r7, #12]
 801a744:	6878      	ldr	r0, [r7, #4]
 801a746:	f7ff ff85 	bl	801a654 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801a74a:	e024      	b.n	801a796 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801a74c:	683b      	ldr	r3, [r7, #0]
 801a74e:	2b00      	cmp	r3, #0
 801a750:	d008      	beq.n	801a764 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801a752:	4b13      	ldr	r3, [pc, #76]	; (801a7a0 <prvProcessTimerOrBlockTask+0x90>)
 801a754:	681b      	ldr	r3, [r3, #0]
 801a756:	681b      	ldr	r3, [r3, #0]
 801a758:	2b00      	cmp	r3, #0
 801a75a:	d101      	bne.n	801a760 <prvProcessTimerOrBlockTask+0x50>
 801a75c:	2301      	movs	r3, #1
 801a75e:	e000      	b.n	801a762 <prvProcessTimerOrBlockTask+0x52>
 801a760:	2300      	movs	r3, #0
 801a762:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801a764:	4b0f      	ldr	r3, [pc, #60]	; (801a7a4 <prvProcessTimerOrBlockTask+0x94>)
 801a766:	6818      	ldr	r0, [r3, #0]
 801a768:	687a      	ldr	r2, [r7, #4]
 801a76a:	68fb      	ldr	r3, [r7, #12]
 801a76c:	1ad3      	subs	r3, r2, r3
 801a76e:	683a      	ldr	r2, [r7, #0]
 801a770:	4619      	mov	r1, r3
 801a772:	f7fe fef7 	bl	8019564 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801a776:	f7ff f93b 	bl	80199f0 <xTaskResumeAll>
 801a77a:	4603      	mov	r3, r0
 801a77c:	2b00      	cmp	r3, #0
 801a77e:	d10a      	bne.n	801a796 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801a780:	4b09      	ldr	r3, [pc, #36]	; (801a7a8 <prvProcessTimerOrBlockTask+0x98>)
 801a782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a786:	601a      	str	r2, [r3, #0]
 801a788:	f3bf 8f4f 	dsb	sy
 801a78c:	f3bf 8f6f 	isb	sy
}
 801a790:	e001      	b.n	801a796 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801a792:	f7ff f92d 	bl	80199f0 <xTaskResumeAll>
}
 801a796:	bf00      	nop
 801a798:	3710      	adds	r7, #16
 801a79a:	46bd      	mov	sp, r7
 801a79c:	bd80      	pop	{r7, pc}
 801a79e:	bf00      	nop
 801a7a0:	20012798 	.word	0x20012798
 801a7a4:	2001279c 	.word	0x2001279c
 801a7a8:	e000ed04 	.word	0xe000ed04

0801a7ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801a7ac:	b480      	push	{r7}
 801a7ae:	b085      	sub	sp, #20
 801a7b0:	af00      	add	r7, sp, #0
 801a7b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801a7b4:	4b0e      	ldr	r3, [pc, #56]	; (801a7f0 <prvGetNextExpireTime+0x44>)
 801a7b6:	681b      	ldr	r3, [r3, #0]
 801a7b8:	681b      	ldr	r3, [r3, #0]
 801a7ba:	2b00      	cmp	r3, #0
 801a7bc:	d101      	bne.n	801a7c2 <prvGetNextExpireTime+0x16>
 801a7be:	2201      	movs	r2, #1
 801a7c0:	e000      	b.n	801a7c4 <prvGetNextExpireTime+0x18>
 801a7c2:	2200      	movs	r2, #0
 801a7c4:	687b      	ldr	r3, [r7, #4]
 801a7c6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801a7c8:	687b      	ldr	r3, [r7, #4]
 801a7ca:	681b      	ldr	r3, [r3, #0]
 801a7cc:	2b00      	cmp	r3, #0
 801a7ce:	d105      	bne.n	801a7dc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801a7d0:	4b07      	ldr	r3, [pc, #28]	; (801a7f0 <prvGetNextExpireTime+0x44>)
 801a7d2:	681b      	ldr	r3, [r3, #0]
 801a7d4:	68db      	ldr	r3, [r3, #12]
 801a7d6:	681b      	ldr	r3, [r3, #0]
 801a7d8:	60fb      	str	r3, [r7, #12]
 801a7da:	e001      	b.n	801a7e0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801a7dc:	2300      	movs	r3, #0
 801a7de:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801a7e0:	68fb      	ldr	r3, [r7, #12]
}
 801a7e2:	4618      	mov	r0, r3
 801a7e4:	3714      	adds	r7, #20
 801a7e6:	46bd      	mov	sp, r7
 801a7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7ec:	4770      	bx	lr
 801a7ee:	bf00      	nop
 801a7f0:	20012794 	.word	0x20012794

0801a7f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801a7f4:	b580      	push	{r7, lr}
 801a7f6:	b084      	sub	sp, #16
 801a7f8:	af00      	add	r7, sp, #0
 801a7fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801a7fc:	f7ff f994 	bl	8019b28 <xTaskGetTickCount>
 801a800:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801a802:	4b0b      	ldr	r3, [pc, #44]	; (801a830 <prvSampleTimeNow+0x3c>)
 801a804:	681b      	ldr	r3, [r3, #0]
 801a806:	68fa      	ldr	r2, [r7, #12]
 801a808:	429a      	cmp	r2, r3
 801a80a:	d205      	bcs.n	801a818 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801a80c:	f000 f930 	bl	801aa70 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801a810:	687b      	ldr	r3, [r7, #4]
 801a812:	2201      	movs	r2, #1
 801a814:	601a      	str	r2, [r3, #0]
 801a816:	e002      	b.n	801a81e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801a818:	687b      	ldr	r3, [r7, #4]
 801a81a:	2200      	movs	r2, #0
 801a81c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801a81e:	4a04      	ldr	r2, [pc, #16]	; (801a830 <prvSampleTimeNow+0x3c>)
 801a820:	68fb      	ldr	r3, [r7, #12]
 801a822:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801a824:	68fb      	ldr	r3, [r7, #12]
}
 801a826:	4618      	mov	r0, r3
 801a828:	3710      	adds	r7, #16
 801a82a:	46bd      	mov	sp, r7
 801a82c:	bd80      	pop	{r7, pc}
 801a82e:	bf00      	nop
 801a830:	200127a4 	.word	0x200127a4

0801a834 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801a834:	b580      	push	{r7, lr}
 801a836:	b086      	sub	sp, #24
 801a838:	af00      	add	r7, sp, #0
 801a83a:	60f8      	str	r0, [r7, #12]
 801a83c:	60b9      	str	r1, [r7, #8]
 801a83e:	607a      	str	r2, [r7, #4]
 801a840:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801a842:	2300      	movs	r3, #0
 801a844:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801a846:	68fb      	ldr	r3, [r7, #12]
 801a848:	68ba      	ldr	r2, [r7, #8]
 801a84a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801a84c:	68fb      	ldr	r3, [r7, #12]
 801a84e:	68fa      	ldr	r2, [r7, #12]
 801a850:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801a852:	68ba      	ldr	r2, [r7, #8]
 801a854:	687b      	ldr	r3, [r7, #4]
 801a856:	429a      	cmp	r2, r3
 801a858:	d812      	bhi.n	801a880 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a85a:	687a      	ldr	r2, [r7, #4]
 801a85c:	683b      	ldr	r3, [r7, #0]
 801a85e:	1ad2      	subs	r2, r2, r3
 801a860:	68fb      	ldr	r3, [r7, #12]
 801a862:	699b      	ldr	r3, [r3, #24]
 801a864:	429a      	cmp	r2, r3
 801a866:	d302      	bcc.n	801a86e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801a868:	2301      	movs	r3, #1
 801a86a:	617b      	str	r3, [r7, #20]
 801a86c:	e01b      	b.n	801a8a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801a86e:	4b10      	ldr	r3, [pc, #64]	; (801a8b0 <prvInsertTimerInActiveList+0x7c>)
 801a870:	681a      	ldr	r2, [r3, #0]
 801a872:	68fb      	ldr	r3, [r7, #12]
 801a874:	3304      	adds	r3, #4
 801a876:	4619      	mov	r1, r3
 801a878:	4610      	mov	r0, r2
 801a87a:	f7fd fc18 	bl	80180ae <vListInsert>
 801a87e:	e012      	b.n	801a8a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801a880:	687a      	ldr	r2, [r7, #4]
 801a882:	683b      	ldr	r3, [r7, #0]
 801a884:	429a      	cmp	r2, r3
 801a886:	d206      	bcs.n	801a896 <prvInsertTimerInActiveList+0x62>
 801a888:	68ba      	ldr	r2, [r7, #8]
 801a88a:	683b      	ldr	r3, [r7, #0]
 801a88c:	429a      	cmp	r2, r3
 801a88e:	d302      	bcc.n	801a896 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801a890:	2301      	movs	r3, #1
 801a892:	617b      	str	r3, [r7, #20]
 801a894:	e007      	b.n	801a8a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801a896:	4b07      	ldr	r3, [pc, #28]	; (801a8b4 <prvInsertTimerInActiveList+0x80>)
 801a898:	681a      	ldr	r2, [r3, #0]
 801a89a:	68fb      	ldr	r3, [r7, #12]
 801a89c:	3304      	adds	r3, #4
 801a89e:	4619      	mov	r1, r3
 801a8a0:	4610      	mov	r0, r2
 801a8a2:	f7fd fc04 	bl	80180ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 801a8a6:	697b      	ldr	r3, [r7, #20]
}
 801a8a8:	4618      	mov	r0, r3
 801a8aa:	3718      	adds	r7, #24
 801a8ac:	46bd      	mov	sp, r7
 801a8ae:	bd80      	pop	{r7, pc}
 801a8b0:	20012798 	.word	0x20012798
 801a8b4:	20012794 	.word	0x20012794

0801a8b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801a8b8:	b580      	push	{r7, lr}
 801a8ba:	b08e      	sub	sp, #56	; 0x38
 801a8bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801a8be:	e0c6      	b.n	801aa4e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801a8c0:	687b      	ldr	r3, [r7, #4]
 801a8c2:	2b00      	cmp	r3, #0
 801a8c4:	da17      	bge.n	801a8f6 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801a8c6:	1d3b      	adds	r3, r7, #4
 801a8c8:	3304      	adds	r3, #4
 801a8ca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801a8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8ce:	2b00      	cmp	r3, #0
 801a8d0:	d109      	bne.n	801a8e6 <prvProcessReceivedCommands+0x2e>
 801a8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a8d6:	f383 8811 	msr	BASEPRI, r3
 801a8da:	f3bf 8f6f 	isb	sy
 801a8de:	f3bf 8f4f 	dsb	sy
 801a8e2:	61fb      	str	r3, [r7, #28]
 801a8e4:	e7fe      	b.n	801a8e4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801a8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8e8:	681b      	ldr	r3, [r3, #0]
 801a8ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a8ec:	6850      	ldr	r0, [r2, #4]
 801a8ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a8f0:	6892      	ldr	r2, [r2, #8]
 801a8f2:	4611      	mov	r1, r2
 801a8f4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801a8f6:	687b      	ldr	r3, [r7, #4]
 801a8f8:	2b00      	cmp	r3, #0
 801a8fa:	f2c0 80a7 	blt.w	801aa4c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801a8fe:	68fb      	ldr	r3, [r7, #12]
 801a900:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801a902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a904:	695b      	ldr	r3, [r3, #20]
 801a906:	2b00      	cmp	r3, #0
 801a908:	d004      	beq.n	801a914 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801a90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a90c:	3304      	adds	r3, #4
 801a90e:	4618      	mov	r0, r3
 801a910:	f7fd fc06 	bl	8018120 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801a914:	463b      	mov	r3, r7
 801a916:	4618      	mov	r0, r3
 801a918:	f7ff ff6c 	bl	801a7f4 <prvSampleTimeNow>
 801a91c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801a91e:	687b      	ldr	r3, [r7, #4]
 801a920:	2b09      	cmp	r3, #9
 801a922:	f200 8094 	bhi.w	801aa4e <prvProcessReceivedCommands+0x196>
 801a926:	a201      	add	r2, pc, #4	; (adr r2, 801a92c <prvProcessReceivedCommands+0x74>)
 801a928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a92c:	0801a955 	.word	0x0801a955
 801a930:	0801a955 	.word	0x0801a955
 801a934:	0801a955 	.word	0x0801a955
 801a938:	0801a9c7 	.word	0x0801a9c7
 801a93c:	0801a9db 	.word	0x0801a9db
 801a940:	0801aa23 	.word	0x0801aa23
 801a944:	0801a955 	.word	0x0801a955
 801a948:	0801a955 	.word	0x0801a955
 801a94c:	0801a9c7 	.word	0x0801a9c7
 801a950:	0801a9db 	.word	0x0801a9db
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801a954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a956:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801a95a:	f043 0301 	orr.w	r3, r3, #1
 801a95e:	b2da      	uxtb	r2, r3
 801a960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a962:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801a966:	68ba      	ldr	r2, [r7, #8]
 801a968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a96a:	699b      	ldr	r3, [r3, #24]
 801a96c:	18d1      	adds	r1, r2, r3
 801a96e:	68bb      	ldr	r3, [r7, #8]
 801a970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a972:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a974:	f7ff ff5e 	bl	801a834 <prvInsertTimerInActiveList>
 801a978:	4603      	mov	r3, r0
 801a97a:	2b00      	cmp	r3, #0
 801a97c:	d067      	beq.n	801aa4e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801a97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a980:	6a1b      	ldr	r3, [r3, #32]
 801a982:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a984:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801a986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a988:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801a98c:	f003 0304 	and.w	r3, r3, #4
 801a990:	2b00      	cmp	r3, #0
 801a992:	d05c      	beq.n	801aa4e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801a994:	68ba      	ldr	r2, [r7, #8]
 801a996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a998:	699b      	ldr	r3, [r3, #24]
 801a99a:	441a      	add	r2, r3
 801a99c:	2300      	movs	r3, #0
 801a99e:	9300      	str	r3, [sp, #0]
 801a9a0:	2300      	movs	r3, #0
 801a9a2:	2100      	movs	r1, #0
 801a9a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a9a6:	f7ff fe09 	bl	801a5bc <xTimerGenericCommand>
 801a9aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801a9ac:	6a3b      	ldr	r3, [r7, #32]
 801a9ae:	2b00      	cmp	r3, #0
 801a9b0:	d14d      	bne.n	801aa4e <prvProcessReceivedCommands+0x196>
 801a9b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a9b6:	f383 8811 	msr	BASEPRI, r3
 801a9ba:	f3bf 8f6f 	isb	sy
 801a9be:	f3bf 8f4f 	dsb	sy
 801a9c2:	61bb      	str	r3, [r7, #24]
 801a9c4:	e7fe      	b.n	801a9c4 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801a9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801a9cc:	f023 0301 	bic.w	r3, r3, #1
 801a9d0:	b2da      	uxtb	r2, r3
 801a9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801a9d8:	e039      	b.n	801aa4e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801a9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801a9e0:	f043 0301 	orr.w	r3, r3, #1
 801a9e4:	b2da      	uxtb	r2, r3
 801a9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801a9ec:	68ba      	ldr	r2, [r7, #8]
 801a9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9f0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801a9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9f4:	699b      	ldr	r3, [r3, #24]
 801a9f6:	2b00      	cmp	r3, #0
 801a9f8:	d109      	bne.n	801aa0e <prvProcessReceivedCommands+0x156>
 801a9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a9fe:	f383 8811 	msr	BASEPRI, r3
 801aa02:	f3bf 8f6f 	isb	sy
 801aa06:	f3bf 8f4f 	dsb	sy
 801aa0a:	617b      	str	r3, [r7, #20]
 801aa0c:	e7fe      	b.n	801aa0c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801aa0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa10:	699a      	ldr	r2, [r3, #24]
 801aa12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa14:	18d1      	adds	r1, r2, r3
 801aa16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801aa1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801aa1c:	f7ff ff0a 	bl	801a834 <prvInsertTimerInActiveList>
					break;
 801aa20:	e015      	b.n	801aa4e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801aa22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801aa28:	f003 0302 	and.w	r3, r3, #2
 801aa2c:	2b00      	cmp	r3, #0
 801aa2e:	d103      	bne.n	801aa38 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 801aa30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801aa32:	f7fd f9d7 	bl	8017de4 <vPortFree>
 801aa36:	e00a      	b.n	801aa4e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801aa38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801aa3e:	f023 0301 	bic.w	r3, r3, #1
 801aa42:	b2da      	uxtb	r2, r3
 801aa44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801aa4a:	e000      	b.n	801aa4e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801aa4c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801aa4e:	4b07      	ldr	r3, [pc, #28]	; (801aa6c <prvProcessReceivedCommands+0x1b4>)
 801aa50:	681b      	ldr	r3, [r3, #0]
 801aa52:	1d39      	adds	r1, r7, #4
 801aa54:	2200      	movs	r2, #0
 801aa56:	4618      	mov	r0, r3
 801aa58:	f7fe f986 	bl	8018d68 <xQueueReceive>
 801aa5c:	4603      	mov	r3, r0
 801aa5e:	2b00      	cmp	r3, #0
 801aa60:	f47f af2e 	bne.w	801a8c0 <prvProcessReceivedCommands+0x8>
	}
}
 801aa64:	bf00      	nop
 801aa66:	3730      	adds	r7, #48	; 0x30
 801aa68:	46bd      	mov	sp, r7
 801aa6a:	bd80      	pop	{r7, pc}
 801aa6c:	2001279c 	.word	0x2001279c

0801aa70 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801aa70:	b580      	push	{r7, lr}
 801aa72:	b088      	sub	sp, #32
 801aa74:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801aa76:	e047      	b.n	801ab08 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801aa78:	4b2d      	ldr	r3, [pc, #180]	; (801ab30 <prvSwitchTimerLists+0xc0>)
 801aa7a:	681b      	ldr	r3, [r3, #0]
 801aa7c:	68db      	ldr	r3, [r3, #12]
 801aa7e:	681b      	ldr	r3, [r3, #0]
 801aa80:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801aa82:	4b2b      	ldr	r3, [pc, #172]	; (801ab30 <prvSwitchTimerLists+0xc0>)
 801aa84:	681b      	ldr	r3, [r3, #0]
 801aa86:	68db      	ldr	r3, [r3, #12]
 801aa88:	68db      	ldr	r3, [r3, #12]
 801aa8a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801aa8c:	68fb      	ldr	r3, [r7, #12]
 801aa8e:	3304      	adds	r3, #4
 801aa90:	4618      	mov	r0, r3
 801aa92:	f7fd fb45 	bl	8018120 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801aa96:	68fb      	ldr	r3, [r7, #12]
 801aa98:	6a1b      	ldr	r3, [r3, #32]
 801aa9a:	68f8      	ldr	r0, [r7, #12]
 801aa9c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801aa9e:	68fb      	ldr	r3, [r7, #12]
 801aaa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801aaa4:	f003 0304 	and.w	r3, r3, #4
 801aaa8:	2b00      	cmp	r3, #0
 801aaaa:	d02d      	beq.n	801ab08 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801aaac:	68fb      	ldr	r3, [r7, #12]
 801aaae:	699b      	ldr	r3, [r3, #24]
 801aab0:	693a      	ldr	r2, [r7, #16]
 801aab2:	4413      	add	r3, r2
 801aab4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801aab6:	68ba      	ldr	r2, [r7, #8]
 801aab8:	693b      	ldr	r3, [r7, #16]
 801aaba:	429a      	cmp	r2, r3
 801aabc:	d90e      	bls.n	801aadc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801aabe:	68fb      	ldr	r3, [r7, #12]
 801aac0:	68ba      	ldr	r2, [r7, #8]
 801aac2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801aac4:	68fb      	ldr	r3, [r7, #12]
 801aac6:	68fa      	ldr	r2, [r7, #12]
 801aac8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801aaca:	4b19      	ldr	r3, [pc, #100]	; (801ab30 <prvSwitchTimerLists+0xc0>)
 801aacc:	681a      	ldr	r2, [r3, #0]
 801aace:	68fb      	ldr	r3, [r7, #12]
 801aad0:	3304      	adds	r3, #4
 801aad2:	4619      	mov	r1, r3
 801aad4:	4610      	mov	r0, r2
 801aad6:	f7fd faea 	bl	80180ae <vListInsert>
 801aada:	e015      	b.n	801ab08 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801aadc:	2300      	movs	r3, #0
 801aade:	9300      	str	r3, [sp, #0]
 801aae0:	2300      	movs	r3, #0
 801aae2:	693a      	ldr	r2, [r7, #16]
 801aae4:	2100      	movs	r1, #0
 801aae6:	68f8      	ldr	r0, [r7, #12]
 801aae8:	f7ff fd68 	bl	801a5bc <xTimerGenericCommand>
 801aaec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801aaee:	687b      	ldr	r3, [r7, #4]
 801aaf0:	2b00      	cmp	r3, #0
 801aaf2:	d109      	bne.n	801ab08 <prvSwitchTimerLists+0x98>
 801aaf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aaf8:	f383 8811 	msr	BASEPRI, r3
 801aafc:	f3bf 8f6f 	isb	sy
 801ab00:	f3bf 8f4f 	dsb	sy
 801ab04:	603b      	str	r3, [r7, #0]
 801ab06:	e7fe      	b.n	801ab06 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801ab08:	4b09      	ldr	r3, [pc, #36]	; (801ab30 <prvSwitchTimerLists+0xc0>)
 801ab0a:	681b      	ldr	r3, [r3, #0]
 801ab0c:	681b      	ldr	r3, [r3, #0]
 801ab0e:	2b00      	cmp	r3, #0
 801ab10:	d1b2      	bne.n	801aa78 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801ab12:	4b07      	ldr	r3, [pc, #28]	; (801ab30 <prvSwitchTimerLists+0xc0>)
 801ab14:	681b      	ldr	r3, [r3, #0]
 801ab16:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801ab18:	4b06      	ldr	r3, [pc, #24]	; (801ab34 <prvSwitchTimerLists+0xc4>)
 801ab1a:	681b      	ldr	r3, [r3, #0]
 801ab1c:	4a04      	ldr	r2, [pc, #16]	; (801ab30 <prvSwitchTimerLists+0xc0>)
 801ab1e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801ab20:	4a04      	ldr	r2, [pc, #16]	; (801ab34 <prvSwitchTimerLists+0xc4>)
 801ab22:	697b      	ldr	r3, [r7, #20]
 801ab24:	6013      	str	r3, [r2, #0]
}
 801ab26:	bf00      	nop
 801ab28:	3718      	adds	r7, #24
 801ab2a:	46bd      	mov	sp, r7
 801ab2c:	bd80      	pop	{r7, pc}
 801ab2e:	bf00      	nop
 801ab30:	20012794 	.word	0x20012794
 801ab34:	20012798 	.word	0x20012798

0801ab38 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801ab38:	b580      	push	{r7, lr}
 801ab3a:	b082      	sub	sp, #8
 801ab3c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801ab3e:	f7fd fc3d 	bl	80183bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801ab42:	4b15      	ldr	r3, [pc, #84]	; (801ab98 <prvCheckForValidListAndQueue+0x60>)
 801ab44:	681b      	ldr	r3, [r3, #0]
 801ab46:	2b00      	cmp	r3, #0
 801ab48:	d120      	bne.n	801ab8c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801ab4a:	4814      	ldr	r0, [pc, #80]	; (801ab9c <prvCheckForValidListAndQueue+0x64>)
 801ab4c:	f7fd fa5e 	bl	801800c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801ab50:	4813      	ldr	r0, [pc, #76]	; (801aba0 <prvCheckForValidListAndQueue+0x68>)
 801ab52:	f7fd fa5b 	bl	801800c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801ab56:	4b13      	ldr	r3, [pc, #76]	; (801aba4 <prvCheckForValidListAndQueue+0x6c>)
 801ab58:	4a10      	ldr	r2, [pc, #64]	; (801ab9c <prvCheckForValidListAndQueue+0x64>)
 801ab5a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801ab5c:	4b12      	ldr	r3, [pc, #72]	; (801aba8 <prvCheckForValidListAndQueue+0x70>)
 801ab5e:	4a10      	ldr	r2, [pc, #64]	; (801aba0 <prvCheckForValidListAndQueue+0x68>)
 801ab60:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801ab62:	2300      	movs	r3, #0
 801ab64:	9300      	str	r3, [sp, #0]
 801ab66:	4b11      	ldr	r3, [pc, #68]	; (801abac <prvCheckForValidListAndQueue+0x74>)
 801ab68:	4a11      	ldr	r2, [pc, #68]	; (801abb0 <prvCheckForValidListAndQueue+0x78>)
 801ab6a:	2110      	movs	r1, #16
 801ab6c:	200a      	movs	r0, #10
 801ab6e:	f7fd fda7 	bl	80186c0 <xQueueGenericCreateStatic>
 801ab72:	4602      	mov	r2, r0
 801ab74:	4b08      	ldr	r3, [pc, #32]	; (801ab98 <prvCheckForValidListAndQueue+0x60>)
 801ab76:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801ab78:	4b07      	ldr	r3, [pc, #28]	; (801ab98 <prvCheckForValidListAndQueue+0x60>)
 801ab7a:	681b      	ldr	r3, [r3, #0]
 801ab7c:	2b00      	cmp	r3, #0
 801ab7e:	d005      	beq.n	801ab8c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801ab80:	4b05      	ldr	r3, [pc, #20]	; (801ab98 <prvCheckForValidListAndQueue+0x60>)
 801ab82:	681b      	ldr	r3, [r3, #0]
 801ab84:	490b      	ldr	r1, [pc, #44]	; (801abb4 <prvCheckForValidListAndQueue+0x7c>)
 801ab86:	4618      	mov	r0, r3
 801ab88:	f7fe fc9a 	bl	80194c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801ab8c:	f7fd fc44 	bl	8018418 <vPortExitCritical>
}
 801ab90:	bf00      	nop
 801ab92:	46bd      	mov	sp, r7
 801ab94:	bd80      	pop	{r7, pc}
 801ab96:	bf00      	nop
 801ab98:	2001279c 	.word	0x2001279c
 801ab9c:	2001276c 	.word	0x2001276c
 801aba0:	20012780 	.word	0x20012780
 801aba4:	20012794 	.word	0x20012794
 801aba8:	20012798 	.word	0x20012798
 801abac:	20012848 	.word	0x20012848
 801abb0:	200127a8 	.word	0x200127a8
 801abb4:	08030138 	.word	0x08030138

0801abb8 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 801abb8:	8880      	ldrh	r0, [r0, #4]
 801abba:	4770      	bx	lr

0801abbc <_ZN8touchgfx17AbstractPartition5clearEv>:
 801abbc:	2300      	movs	r3, #0
 801abbe:	8083      	strh	r3, [r0, #4]
 801abc0:	4770      	bx	lr
	...

0801abc4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 801abc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801abc6:	6803      	ldr	r3, [r0, #0]
 801abc8:	4605      	mov	r5, r0
 801abca:	460e      	mov	r6, r1
 801abcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801abce:	2100      	movs	r1, #0
 801abd0:	4798      	blx	r3
 801abd2:	682b      	ldr	r3, [r5, #0]
 801abd4:	4604      	mov	r4, r0
 801abd6:	6a1b      	ldr	r3, [r3, #32]
 801abd8:	4628      	mov	r0, r5
 801abda:	4798      	blx	r3
 801abdc:	88ab      	ldrh	r3, [r5, #4]
 801abde:	1b34      	subs	r4, r6, r4
 801abe0:	b2a4      	uxth	r4, r4
 801abe2:	fbb4 f4f0 	udiv	r4, r4, r0
 801abe6:	42a3      	cmp	r3, r4
 801abe8:	d805      	bhi.n	801abf6 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 801abea:	4b0e      	ldr	r3, [pc, #56]	; (801ac24 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 801abec:	4a0e      	ldr	r2, [pc, #56]	; (801ac28 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 801abee:	2120      	movs	r1, #32
 801abf0:	480e      	ldr	r0, [pc, #56]	; (801ac2c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 801abf2:	f013 fb39 	bl	802e268 <__assert_func>
 801abf6:	682b      	ldr	r3, [r5, #0]
 801abf8:	2100      	movs	r1, #0
 801abfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801abfc:	4628      	mov	r0, r5
 801abfe:	4798      	blx	r3
 801ac00:	682b      	ldr	r3, [r5, #0]
 801ac02:	4607      	mov	r7, r0
 801ac04:	6a1b      	ldr	r3, [r3, #32]
 801ac06:	4628      	mov	r0, r5
 801ac08:	4798      	blx	r3
 801ac0a:	1bf3      	subs	r3, r6, r7
 801ac0c:	b29b      	uxth	r3, r3
 801ac0e:	fbb3 f2f0 	udiv	r2, r3, r0
 801ac12:	fb02 3010 	mls	r0, r2, r0, r3
 801ac16:	b118      	cbz	r0, 801ac20 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 801ac18:	4b05      	ldr	r3, [pc, #20]	; (801ac30 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 801ac1a:	4a03      	ldr	r2, [pc, #12]	; (801ac28 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 801ac1c:	2121      	movs	r1, #33	; 0x21
 801ac1e:	e7e7      	b.n	801abf0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 801ac20:	4620      	mov	r0, r4
 801ac22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ac24:	08031d18 	.word	0x08031d18
 801ac28:	08031e86 	.word	0x08031e86
 801ac2c:	08031d2d 	.word	0x08031d2d
 801ac30:	08031d5b 	.word	0x08031d5b

0801ac34 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 801ac34:	b538      	push	{r3, r4, r5, lr}
 801ac36:	6803      	ldr	r3, [r0, #0]
 801ac38:	6a1b      	ldr	r3, [r3, #32]
 801ac3a:	460d      	mov	r5, r1
 801ac3c:	4604      	mov	r4, r0
 801ac3e:	4798      	blx	r3
 801ac40:	4285      	cmp	r5, r0
 801ac42:	d905      	bls.n	801ac50 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 801ac44:	4b0c      	ldr	r3, [pc, #48]	; (801ac78 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 801ac46:	4a0d      	ldr	r2, [pc, #52]	; (801ac7c <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 801ac48:	2132      	movs	r1, #50	; 0x32
 801ac4a:	480d      	ldr	r0, [pc, #52]	; (801ac80 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 801ac4c:	f013 fb0c 	bl	802e268 <__assert_func>
 801ac50:	6823      	ldr	r3, [r4, #0]
 801ac52:	88a5      	ldrh	r5, [r4, #4]
 801ac54:	69db      	ldr	r3, [r3, #28]
 801ac56:	4620      	mov	r0, r4
 801ac58:	4798      	blx	r3
 801ac5a:	4285      	cmp	r5, r0
 801ac5c:	d303      	bcc.n	801ac66 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 801ac5e:	4b09      	ldr	r3, [pc, #36]	; (801ac84 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 801ac60:	4a06      	ldr	r2, [pc, #24]	; (801ac7c <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 801ac62:	2133      	movs	r1, #51	; 0x33
 801ac64:	e7f1      	b.n	801ac4a <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 801ac66:	6823      	ldr	r3, [r4, #0]
 801ac68:	88a1      	ldrh	r1, [r4, #4]
 801ac6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ac6c:	4620      	mov	r0, r4
 801ac6e:	4798      	blx	r3
 801ac70:	88a3      	ldrh	r3, [r4, #4]
 801ac72:	3301      	adds	r3, #1
 801ac74:	80a3      	strh	r3, [r4, #4]
 801ac76:	bd38      	pop	{r3, r4, r5, pc}
 801ac78:	08031dd5 	.word	0x08031dd5
 801ac7c:	08031ec9 	.word	0x08031ec9
 801ac80:	08031d2d 	.word	0x08031d2d
 801ac84:	08031dec 	.word	0x08031dec

0801ac88 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 801ac88:	b570      	push	{r4, r5, r6, lr}
 801ac8a:	6803      	ldr	r3, [r0, #0]
 801ac8c:	6a1b      	ldr	r3, [r3, #32]
 801ac8e:	4616      	mov	r6, r2
 801ac90:	4604      	mov	r4, r0
 801ac92:	460d      	mov	r5, r1
 801ac94:	4798      	blx	r3
 801ac96:	4286      	cmp	r6, r0
 801ac98:	d905      	bls.n	801aca6 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 801ac9a:	4b06      	ldr	r3, [pc, #24]	; (801acb4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 801ac9c:	4a06      	ldr	r2, [pc, #24]	; (801acb8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 801ac9e:	4807      	ldr	r0, [pc, #28]	; (801acbc <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 801aca0:	213c      	movs	r1, #60	; 0x3c
 801aca2:	f013 fae1 	bl	802e268 <__assert_func>
 801aca6:	6823      	ldr	r3, [r4, #0]
 801aca8:	4629      	mov	r1, r5
 801acaa:	4620      	mov	r0, r4
 801acac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801acae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801acb2:	4718      	bx	r3
 801acb4:	08031dd5 	.word	0x08031dd5
 801acb8:	08031e3c 	.word	0x08031e3c
 801acbc:	08031d2d 	.word	0x08031d2d

0801acc0 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 801acc0:	4770      	bx	lr
	...

0801acc4 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 801acc4:	4a02      	ldr	r2, [pc, #8]	; (801acd0 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801acc6:	6002      	str	r2, [r0, #0]
 801acc8:	2200      	movs	r2, #0
 801acca:	8082      	strh	r2, [r0, #4]
 801accc:	4770      	bx	lr
 801acce:	bf00      	nop
 801acd0:	08031e10 	.word	0x08031e10

0801acd4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 801acd4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801acd6:	2000      	movs	r0, #0
 801acd8:	b12b      	cbz	r3, 801ace6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801acda:	b920      	cbnz	r0, 801ace6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801acdc:	1a5a      	subs	r2, r3, r1
 801acde:	4250      	negs	r0, r2
 801ace0:	4150      	adcs	r0, r2
 801ace2:	699b      	ldr	r3, [r3, #24]
 801ace4:	e7f8      	b.n	801acd8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 801ace6:	4770      	bx	lr

0801ace8 <_ZN8touchgfx9Container9removeAllEv>:
 801ace8:	2200      	movs	r2, #0
 801acea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801acec:	b123      	cbz	r3, 801acf8 <_ZN8touchgfx9Container9removeAllEv+0x10>
 801acee:	6999      	ldr	r1, [r3, #24]
 801acf0:	6281      	str	r1, [r0, #40]	; 0x28
 801acf2:	e9c3 2205 	strd	r2, r2, [r3, #20]
 801acf6:	e7f8      	b.n	801acea <_ZN8touchgfx9Container9removeAllEv+0x2>
 801acf8:	4770      	bx	lr

0801acfa <_ZN8touchgfx9Container6unlinkEv>:
 801acfa:	2300      	movs	r3, #0
 801acfc:	6283      	str	r3, [r0, #40]	; 0x28
 801acfe:	4770      	bx	lr

0801ad00 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 801ad00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad04:	461f      	mov	r7, r3
 801ad06:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 801ad0a:	460d      	mov	r5, r1
 801ad0c:	4616      	mov	r6, r2
 801ad0e:	b103      	cbz	r3, 801ad12 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 801ad10:	6038      	str	r0, [r7, #0]
 801ad12:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801ad14:	b314      	cbz	r4, 801ad5c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 801ad16:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801ad1a:	b1eb      	cbz	r3, 801ad58 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801ad1c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801ad20:	428d      	cmp	r5, r1
 801ad22:	db19      	blt.n	801ad58 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801ad24:	8923      	ldrh	r3, [r4, #8]
 801ad26:	b289      	uxth	r1, r1
 801ad28:	440b      	add	r3, r1
 801ad2a:	b21b      	sxth	r3, r3
 801ad2c:	429d      	cmp	r5, r3
 801ad2e:	da13      	bge.n	801ad58 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801ad30:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801ad34:	4296      	cmp	r6, r2
 801ad36:	db0f      	blt.n	801ad58 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801ad38:	8963      	ldrh	r3, [r4, #10]
 801ad3a:	b292      	uxth	r2, r2
 801ad3c:	4413      	add	r3, r2
 801ad3e:	b21b      	sxth	r3, r3
 801ad40:	429e      	cmp	r6, r3
 801ad42:	da09      	bge.n	801ad58 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801ad44:	6823      	ldr	r3, [r4, #0]
 801ad46:	1ab2      	subs	r2, r6, r2
 801ad48:	1a69      	subs	r1, r5, r1
 801ad4a:	f8d3 801c 	ldr.w	r8, [r3, #28]
 801ad4e:	b212      	sxth	r2, r2
 801ad50:	463b      	mov	r3, r7
 801ad52:	b209      	sxth	r1, r1
 801ad54:	4620      	mov	r0, r4
 801ad56:	47c0      	blx	r8
 801ad58:	69a4      	ldr	r4, [r4, #24]
 801ad5a:	e7db      	b.n	801ad14 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 801ad5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ad60 <_ZNK8touchgfx9Container12getSolidRectEv>:
 801ad60:	2200      	movs	r2, #0
 801ad62:	8002      	strh	r2, [r0, #0]
 801ad64:	8042      	strh	r2, [r0, #2]
 801ad66:	8082      	strh	r2, [r0, #4]
 801ad68:	80c2      	strh	r2, [r0, #6]
 801ad6a:	4770      	bx	lr

0801ad6c <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 801ad6c:	b570      	push	{r4, r5, r6, lr}
 801ad6e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801ad70:	460d      	mov	r5, r1
 801ad72:	4616      	mov	r6, r2
 801ad74:	b13c      	cbz	r4, 801ad86 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 801ad76:	6823      	ldr	r3, [r4, #0]
 801ad78:	4620      	mov	r0, r4
 801ad7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ad7c:	4632      	mov	r2, r6
 801ad7e:	4629      	mov	r1, r5
 801ad80:	4798      	blx	r3
 801ad82:	69a4      	ldr	r4, [r4, #24]
 801ad84:	e7f6      	b.n	801ad74 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 801ad86:	bd70      	pop	{r4, r5, r6, pc}

0801ad88 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 801ad88:	b538      	push	{r3, r4, r5, lr}
 801ad8a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801ad8c:	460d      	mov	r5, r1
 801ad8e:	b134      	cbz	r4, 801ad9e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 801ad90:	682b      	ldr	r3, [r5, #0]
 801ad92:	4621      	mov	r1, r4
 801ad94:	689b      	ldr	r3, [r3, #8]
 801ad96:	4628      	mov	r0, r5
 801ad98:	4798      	blx	r3
 801ad9a:	69a4      	ldr	r4, [r4, #24]
 801ad9c:	e7f7      	b.n	801ad8e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 801ad9e:	bd38      	pop	{r3, r4, r5, pc}

0801ada0 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 801ada0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801ada2:	b19b      	cbz	r3, 801adcc <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801ada4:	428b      	cmp	r3, r1
 801ada6:	d109      	bne.n	801adbc <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 801ada8:	699a      	ldr	r2, [r3, #24]
 801adaa:	2100      	movs	r1, #0
 801adac:	6159      	str	r1, [r3, #20]
 801adae:	6282      	str	r2, [r0, #40]	; 0x28
 801adb0:	b902      	cbnz	r2, 801adb4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 801adb2:	4770      	bx	lr
 801adb4:	6199      	str	r1, [r3, #24]
 801adb6:	4770      	bx	lr
 801adb8:	4613      	mov	r3, r2
 801adba:	b13a      	cbz	r2, 801adcc <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801adbc:	699a      	ldr	r2, [r3, #24]
 801adbe:	428a      	cmp	r2, r1
 801adc0:	d1fa      	bne.n	801adb8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 801adc2:	698a      	ldr	r2, [r1, #24]
 801adc4:	619a      	str	r2, [r3, #24]
 801adc6:	2300      	movs	r3, #0
 801adc8:	e9c1 3305 	strd	r3, r3, [r1, #20]
 801adcc:	4770      	bx	lr

0801adce <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 801adce:	b410      	push	{r4}
 801add0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801add2:	4604      	mov	r4, r0
 801add4:	b92b      	cbnz	r3, 801ade2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 801add6:	6803      	ldr	r3, [r0, #0]
 801add8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801addc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801adde:	4611      	mov	r1, r2
 801ade0:	4718      	bx	r3
 801ade2:	b941      	cbnz	r1, 801adf6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 801ade4:	6193      	str	r3, [r2, #24]
 801ade6:	6282      	str	r2, [r0, #40]	; 0x28
 801ade8:	6154      	str	r4, [r2, #20]
 801adea:	f85d 4b04 	ldr.w	r4, [sp], #4
 801adee:	4770      	bx	lr
 801adf0:	4603      	mov	r3, r0
 801adf2:	2800      	cmp	r0, #0
 801adf4:	d0f9      	beq.n	801adea <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 801adf6:	4299      	cmp	r1, r3
 801adf8:	6998      	ldr	r0, [r3, #24]
 801adfa:	d1f9      	bne.n	801adf0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 801adfc:	6190      	str	r0, [r2, #24]
 801adfe:	618a      	str	r2, [r1, #24]
 801ae00:	e7f2      	b.n	801ade8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

0801ae04 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 801ae04:	4288      	cmp	r0, r1
 801ae06:	b508      	push	{r3, lr}
 801ae08:	d105      	bne.n	801ae16 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 801ae0a:	4b11      	ldr	r3, [pc, #68]	; (801ae50 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 801ae0c:	4a11      	ldr	r2, [pc, #68]	; (801ae54 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801ae0e:	2123      	movs	r1, #35	; 0x23
 801ae10:	4811      	ldr	r0, [pc, #68]	; (801ae58 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 801ae12:	f013 fa29 	bl	802e268 <__assert_func>
 801ae16:	694b      	ldr	r3, [r1, #20]
 801ae18:	b11b      	cbz	r3, 801ae22 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 801ae1a:	4b10      	ldr	r3, [pc, #64]	; (801ae5c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 801ae1c:	4a0d      	ldr	r2, [pc, #52]	; (801ae54 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801ae1e:	2124      	movs	r1, #36	; 0x24
 801ae20:	e7f6      	b.n	801ae10 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801ae22:	e9c1 0305 	strd	r0, r3, [r1, #20]
 801ae26:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801ae28:	b913      	cbnz	r3, 801ae30 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 801ae2a:	6281      	str	r1, [r0, #40]	; 0x28
 801ae2c:	bd08      	pop	{r3, pc}
 801ae2e:	4613      	mov	r3, r2
 801ae30:	699a      	ldr	r2, [r3, #24]
 801ae32:	b12a      	cbz	r2, 801ae40 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 801ae34:	428b      	cmp	r3, r1
 801ae36:	d1fa      	bne.n	801ae2e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 801ae38:	4b09      	ldr	r3, [pc, #36]	; (801ae60 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 801ae3a:	4a06      	ldr	r2, [pc, #24]	; (801ae54 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801ae3c:	2135      	movs	r1, #53	; 0x35
 801ae3e:	e7e7      	b.n	801ae10 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801ae40:	428b      	cmp	r3, r1
 801ae42:	d103      	bne.n	801ae4c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 801ae44:	4b06      	ldr	r3, [pc, #24]	; (801ae60 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 801ae46:	4a03      	ldr	r2, [pc, #12]	; (801ae54 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801ae48:	2138      	movs	r1, #56	; 0x38
 801ae4a:	e7e1      	b.n	801ae10 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801ae4c:	6199      	str	r1, [r3, #24]
 801ae4e:	e7ed      	b.n	801ae2c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 801ae50:	08031f07 	.word	0x08031f07
 801ae54:	0803205c 	.word	0x0803205c
 801ae58:	08031f33 	.word	0x08031f33
 801ae5c:	08031f66 	.word	0x08031f66
 801ae60:	08031f9c 	.word	0x08031f9c

0801ae64 <_ZN8touchgfx4RectaNERKS0_>:
 801ae64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ae68:	f9b1 7000 	ldrsh.w	r7, [r1]
 801ae6c:	888c      	ldrh	r4, [r1, #4]
 801ae6e:	f9b0 9000 	ldrsh.w	r9, [r0]
 801ae72:	443c      	add	r4, r7
 801ae74:	b2a4      	uxth	r4, r4
 801ae76:	fa0f f884 	sxth.w	r8, r4
 801ae7a:	45c1      	cmp	r9, r8
 801ae7c:	da2f      	bge.n	801aede <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801ae7e:	8882      	ldrh	r2, [r0, #4]
 801ae80:	444a      	add	r2, r9
 801ae82:	b292      	uxth	r2, r2
 801ae84:	fa0f fe82 	sxth.w	lr, r2
 801ae88:	4577      	cmp	r7, lr
 801ae8a:	da28      	bge.n	801aede <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801ae8c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801ae90:	88cb      	ldrh	r3, [r1, #6]
 801ae92:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801ae96:	442b      	add	r3, r5
 801ae98:	b21b      	sxth	r3, r3
 801ae9a:	429e      	cmp	r6, r3
 801ae9c:	da1f      	bge.n	801aede <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801ae9e:	88c3      	ldrh	r3, [r0, #6]
 801aea0:	4433      	add	r3, r6
 801aea2:	b29b      	uxth	r3, r3
 801aea4:	fa0f fc83 	sxth.w	ip, r3
 801aea8:	4565      	cmp	r5, ip
 801aeaa:	da18      	bge.n	801aede <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801aeac:	454f      	cmp	r7, r9
 801aeae:	bfb8      	it	lt
 801aeb0:	464f      	movlt	r7, r9
 801aeb2:	42b5      	cmp	r5, r6
 801aeb4:	bfb8      	it	lt
 801aeb6:	4635      	movlt	r5, r6
 801aeb8:	45f0      	cmp	r8, lr
 801aeba:	bfd8      	it	le
 801aebc:	4622      	movle	r2, r4
 801aebe:	1bd2      	subs	r2, r2, r7
 801aec0:	8082      	strh	r2, [r0, #4]
 801aec2:	884a      	ldrh	r2, [r1, #2]
 801aec4:	88c9      	ldrh	r1, [r1, #6]
 801aec6:	8007      	strh	r7, [r0, #0]
 801aec8:	440a      	add	r2, r1
 801aeca:	b292      	uxth	r2, r2
 801aecc:	b211      	sxth	r1, r2
 801aece:	458c      	cmp	ip, r1
 801aed0:	bfa8      	it	ge
 801aed2:	4613      	movge	r3, r2
 801aed4:	1b5b      	subs	r3, r3, r5
 801aed6:	80c3      	strh	r3, [r0, #6]
 801aed8:	8045      	strh	r5, [r0, #2]
 801aeda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aede:	2300      	movs	r3, #0
 801aee0:	8003      	strh	r3, [r0, #0]
 801aee2:	8043      	strh	r3, [r0, #2]
 801aee4:	8083      	strh	r3, [r0, #4]
 801aee6:	80c3      	strh	r3, [r0, #6]
 801aee8:	e7f7      	b.n	801aeda <_ZN8touchgfx4RectaNERKS0_+0x76>

0801aeea <_ZNK8touchgfx4Rect7isEmptyEv>:
 801aeea:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801aeee:	2b00      	cmp	r3, #0
 801aef0:	dd06      	ble.n	801af00 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 801aef2:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801aef6:	2800      	cmp	r0, #0
 801aef8:	bfcc      	ite	gt
 801aefa:	2000      	movgt	r0, #0
 801aefc:	2001      	movle	r0, #1
 801aefe:	4770      	bx	lr
 801af00:	2001      	movs	r0, #1
 801af02:	4770      	bx	lr

0801af04 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 801af04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af08:	2300      	movs	r3, #0
 801af0a:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801af0c:	8003      	strh	r3, [r0, #0]
 801af0e:	4604      	mov	r4, r0
 801af10:	8043      	strh	r3, [r0, #2]
 801af12:	8083      	strh	r3, [r0, #4]
 801af14:	80c3      	strh	r3, [r0, #6]
 801af16:	2d00      	cmp	r5, #0
 801af18:	d040      	beq.n	801af9c <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801af1a:	1d28      	adds	r0, r5, #4
 801af1c:	f7ff ffe5 	bl	801aeea <_ZNK8touchgfx4Rect7isEmptyEv>
 801af20:	b988      	cbnz	r0, 801af46 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801af22:	4620      	mov	r0, r4
 801af24:	f7ff ffe1 	bl	801aeea <_ZNK8touchgfx4Rect7isEmptyEv>
 801af28:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801af2c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801af30:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 801af34:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 801af38:	b138      	cbz	r0, 801af4a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 801af3a:	8022      	strh	r2, [r4, #0]
 801af3c:	8063      	strh	r3, [r4, #2]
 801af3e:	f8a4 e004 	strh.w	lr, [r4, #4]
 801af42:	f8a4 c006 	strh.w	ip, [r4, #6]
 801af46:	69ad      	ldr	r5, [r5, #24]
 801af48:	e7e5      	b.n	801af16 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801af4a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801af4e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801af52:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801af56:	4290      	cmp	r0, r2
 801af58:	4607      	mov	r7, r0
 801af5a:	bfa8      	it	ge
 801af5c:	4617      	movge	r7, r2
 801af5e:	4472      	add	r2, lr
 801af60:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 801af64:	8027      	strh	r7, [r4, #0]
 801af66:	4299      	cmp	r1, r3
 801af68:	460e      	mov	r6, r1
 801af6a:	4440      	add	r0, r8
 801af6c:	bfa8      	it	ge
 801af6e:	461e      	movge	r6, r3
 801af70:	4471      	add	r1, lr
 801af72:	4463      	add	r3, ip
 801af74:	b200      	sxth	r0, r0
 801af76:	b212      	sxth	r2, r2
 801af78:	b209      	sxth	r1, r1
 801af7a:	b21b      	sxth	r3, r3
 801af7c:	4290      	cmp	r0, r2
 801af7e:	bfac      	ite	ge
 801af80:	ebc7 0200 	rsbge	r2, r7, r0
 801af84:	ebc7 0202 	rsblt	r2, r7, r2
 801af88:	4299      	cmp	r1, r3
 801af8a:	bfac      	ite	ge
 801af8c:	ebc6 0301 	rsbge	r3, r6, r1
 801af90:	ebc6 0303 	rsblt	r3, r6, r3
 801af94:	8066      	strh	r6, [r4, #2]
 801af96:	80a2      	strh	r2, [r4, #4]
 801af98:	80e3      	strh	r3, [r4, #6]
 801af9a:	e7d4      	b.n	801af46 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801af9c:	4620      	mov	r0, r4
 801af9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801afa2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 801afa2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801afa6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801afaa:	b383      	cbz	r3, 801b00e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801afac:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801afae:	b374      	cbz	r4, 801b00e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801afb0:	f9b1 5000 	ldrsh.w	r5, [r1]
 801afb4:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 801afb8:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 801afbc:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 801afc0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801afc4:	b303      	cbz	r3, 801b008 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801afc6:	4668      	mov	r0, sp
 801afc8:	1d21      	adds	r1, r4, #4
 801afca:	f8ad 5000 	strh.w	r5, [sp]
 801afce:	f8ad 6002 	strh.w	r6, [sp, #2]
 801afd2:	f8ad 7004 	strh.w	r7, [sp, #4]
 801afd6:	f8ad 8006 	strh.w	r8, [sp, #6]
 801afda:	f7ff ff43 	bl	801ae64 <_ZN8touchgfx4RectaNERKS0_>
 801afde:	4668      	mov	r0, sp
 801afe0:	f7ff ff83 	bl	801aeea <_ZNK8touchgfx4Rect7isEmptyEv>
 801afe4:	b980      	cbnz	r0, 801b008 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801afe6:	f8bd 3000 	ldrh.w	r3, [sp]
 801afea:	88a2      	ldrh	r2, [r4, #4]
 801afec:	1a9b      	subs	r3, r3, r2
 801afee:	f8ad 3000 	strh.w	r3, [sp]
 801aff2:	88e2      	ldrh	r2, [r4, #6]
 801aff4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801aff8:	1a9b      	subs	r3, r3, r2
 801affa:	f8ad 3002 	strh.w	r3, [sp, #2]
 801affe:	6823      	ldr	r3, [r4, #0]
 801b000:	4669      	mov	r1, sp
 801b002:	689b      	ldr	r3, [r3, #8]
 801b004:	4620      	mov	r0, r4
 801b006:	4798      	blx	r3
 801b008:	69a4      	ldr	r4, [r4, #24]
 801b00a:	2c00      	cmp	r4, #0
 801b00c:	d1d8      	bne.n	801afc0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801b00e:	b002      	add	sp, #8
 801b010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b014 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 801b014:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b016:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801b01a:	460d      	mov	r5, r1
 801b01c:	4616      	mov	r6, r2
 801b01e:	b323      	cbz	r3, 801b06a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801b020:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801b022:	b314      	cbz	r4, 801b06a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801b024:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801b028:	b1eb      	cbz	r3, 801b066 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801b02a:	6828      	ldr	r0, [r5, #0]
 801b02c:	6869      	ldr	r1, [r5, #4]
 801b02e:	466b      	mov	r3, sp
 801b030:	c303      	stmia	r3!, {r0, r1}
 801b032:	4668      	mov	r0, sp
 801b034:	1d21      	adds	r1, r4, #4
 801b036:	f7ff ff15 	bl	801ae64 <_ZN8touchgfx4RectaNERKS0_>
 801b03a:	4668      	mov	r0, sp
 801b03c:	f7ff ff55 	bl	801aeea <_ZNK8touchgfx4Rect7isEmptyEv>
 801b040:	b988      	cbnz	r0, 801b066 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801b042:	f8bd 3000 	ldrh.w	r3, [sp]
 801b046:	88a2      	ldrh	r2, [r4, #4]
 801b048:	1a9b      	subs	r3, r3, r2
 801b04a:	f8ad 3000 	strh.w	r3, [sp]
 801b04e:	88e2      	ldrh	r2, [r4, #6]
 801b050:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b054:	1a9b      	subs	r3, r3, r2
 801b056:	f8ad 3002 	strh.w	r3, [sp, #2]
 801b05a:	6823      	ldr	r3, [r4, #0]
 801b05c:	4632      	mov	r2, r6
 801b05e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b060:	4669      	mov	r1, sp
 801b062:	4620      	mov	r0, r4
 801b064:	4798      	blx	r3
 801b066:	69a4      	ldr	r4, [r4, #24]
 801b068:	e7db      	b.n	801b022 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801b06a:	b002      	add	sp, #8
 801b06c:	bd70      	pop	{r4, r5, r6, pc}

0801b06e <_ZNK8touchgfx6Slider15getIndicatorMinEv>:
 801b06e:	f8b0 00ee 	ldrh.w	r0, [r0, #238]	; 0xee
 801b072:	4770      	bx	lr

0801b074 <_ZNK8touchgfx6Slider15getIndicatorMaxEv>:
 801b074:	f8b0 00ee 	ldrh.w	r0, [r0, #238]	; 0xee
 801b078:	4770      	bx	lr

0801b07a <_ZNK8touchgfx6Slider11getMinValueEv>:
 801b07a:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 801b07c:	4770      	bx	lr

0801b07e <_ZNK8touchgfx6Slider11getMaxValueEv>:
 801b07e:	8f00      	ldrh	r0, [r0, #56]	; 0x38
 801b080:	4770      	bx	lr

0801b082 <_ZN8touchgfx6Slider8setValueEi>:
 801b082:	b570      	push	{r4, r5, r6, lr}
 801b084:	6803      	ldr	r3, [r0, #0]
 801b086:	e9d3 532a 	ldrd	r5, r3, [r3, #168]	; 0xa8
 801b08a:	4604      	mov	r4, r0
 801b08c:	4798      	blx	r3
 801b08e:	462b      	mov	r3, r5
 801b090:	4601      	mov	r1, r0
 801b092:	4620      	mov	r0, r4
 801b094:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b098:	4718      	bx	r3

0801b09a <_ZNK8touchgfx6Slider15valueToPositionEi>:
 801b09a:	b538      	push	{r3, r4, r5, lr}
 801b09c:	e9d0 340d 	ldrd	r3, r4, [r0, #52]	; 0x34
 801b0a0:	428c      	cmp	r4, r1
 801b0a2:	bfa8      	it	ge
 801b0a4:	460c      	movge	r4, r1
 801b0a6:	429c      	cmp	r4, r3
 801b0a8:	bfac      	ite	ge
 801b0aa:	ebc3 0404 	rsbge	r4, r3, r4
 801b0ae:	ebc3 0403 	rsblt	r4, r3, r3
 801b0b2:	6803      	ldr	r3, [r0, #0]
 801b0b4:	4605      	mov	r5, r0
 801b0b6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801b0ba:	4798      	blx	r3
 801b0bc:	682b      	ldr	r3, [r5, #0]
 801b0be:	fb00 4404 	mla	r4, r0, r4, r4
 801b0c2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801b0c6:	4628      	mov	r0, r5
 801b0c8:	4798      	blx	r3
 801b0ca:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 801b0ce:	f9b5 30ec 	ldrsh.w	r3, [r5, #236]	; 0xec
 801b0d2:	fb94 f0f0 	sdiv	r0, r4, r0
 801b0d6:	2a01      	cmp	r2, #1
 801b0d8:	bf08      	it	eq
 801b0da:	f9b5 20ee 	ldrsheq.w	r2, [r5, #238]	; 0xee
 801b0de:	4418      	add	r0, r3
 801b0e0:	bf04      	itt	eq
 801b0e2:	1a10      	subeq	r0, r2, r0
 801b0e4:	18c0      	addeq	r0, r0, r3
 801b0e6:	b200      	sxth	r0, r0
 801b0e8:	bd38      	pop	{r3, r4, r5, pc}

0801b0ea <_ZNK8touchgfx6Slider15positionToValueEs>:
 801b0ea:	b570      	push	{r4, r5, r6, lr}
 801b0ec:	f9b0 30ec 	ldrsh.w	r3, [r0, #236]	; 0xec
 801b0f0:	428b      	cmp	r3, r1
 801b0f2:	4605      	mov	r5, r0
 801b0f4:	460c      	mov	r4, r1
 801b0f6:	d109      	bne.n	801b10c <_ZNK8touchgfx6Slider15positionToValueEs+0x22>
 801b0f8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801b0fa:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 801b0fe:	2b01      	cmp	r3, #1
 801b100:	bf01      	itttt	eq
 801b102:	6bab      	ldreq	r3, [r5, #56]	; 0x38
 801b104:	1a18      	subeq	r0, r3, r0
 801b106:	6b6b      	ldreq	r3, [r5, #52]	; 0x34
 801b108:	18c0      	addeq	r0, r0, r3
 801b10a:	bd70      	pop	{r4, r5, r6, pc}
 801b10c:	f9b0 30ee 	ldrsh.w	r3, [r0, #238]	; 0xee
 801b110:	428b      	cmp	r3, r1
 801b112:	d101      	bne.n	801b118 <_ZNK8touchgfx6Slider15positionToValueEs+0x2e>
 801b114:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801b116:	e7f0      	b.n	801b0fa <_ZNK8touchgfx6Slider15positionToValueEs+0x10>
 801b118:	6803      	ldr	r3, [r0, #0]
 801b11a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801b11e:	4798      	blx	r3
 801b120:	682b      	ldr	r3, [r5, #0]
 801b122:	f9b5 10ec 	ldrsh.w	r1, [r5, #236]	; 0xec
 801b126:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801b12a:	4606      	mov	r6, r0
 801b12c:	4628      	mov	r0, r5
 801b12e:	1a64      	subs	r4, r4, r1
 801b130:	4798      	blx	r3
 801b132:	682b      	ldr	r3, [r5, #0]
 801b134:	2102      	movs	r1, #2
 801b136:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801b13a:	fb96 f6f1 	sdiv	r6, r6, r1
 801b13e:	fb00 6404 	mla	r4, r0, r4, r6
 801b142:	4628      	mov	r0, r5
 801b144:	4798      	blx	r3
 801b146:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801b148:	fb94 f0f0 	sdiv	r0, r4, r0
 801b14c:	4418      	add	r0, r3
 801b14e:	e7d4      	b.n	801b0fa <_ZNK8touchgfx6Slider15positionToValueEs+0x10>

0801b150 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv>:
 801b150:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 801b154:	2302      	movs	r3, #2
 801b156:	b92a      	cbnz	r2, 801b164 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0x14>
 801b158:	f9b0 009c 	ldrsh.w	r0, [r0, #156]	; 0x9c
 801b15c:	fb90 f0f3 	sdiv	r0, r0, r3
 801b160:	b280      	uxth	r0, r0
 801b162:	4770      	bx	lr
 801b164:	f9b0 009e 	ldrsh.w	r0, [r0, #158]	; 0x9e
 801b168:	e7f8      	b.n	801b15c <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0xc>

0801b16a <_ZN8touchgfx6Slider13setValueRangeEii>:
 801b16a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801b16c:	428b      	cmp	r3, r1
 801b16e:	b410      	push	{r4}
 801b170:	db09      	blt.n	801b186 <_ZN8touchgfx6Slider13setValueRangeEii+0x1c>
 801b172:	4293      	cmp	r3, r2
 801b174:	bfa8      	it	ge
 801b176:	4613      	movge	r3, r2
 801b178:	6804      	ldr	r4, [r0, #0]
 801b17a:	f8d4 4094 	ldr.w	r4, [r4, #148]	; 0x94
 801b17e:	46a4      	mov	ip, r4
 801b180:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b184:	4760      	bx	ip
 801b186:	460b      	mov	r3, r1
 801b188:	e7f6      	b.n	801b178 <_ZN8touchgfx6Slider13setValueRangeEii+0xe>

0801b18a <_ZNK8touchgfx6Slider29getIndicatorPositionRangeSizeEv>:
 801b18a:	f9b0 20ee 	ldrsh.w	r2, [r0, #238]	; 0xee
 801b18e:	f9b0 00ec 	ldrsh.w	r0, [r0, #236]	; 0xec
 801b192:	1a10      	subs	r0, r2, r0
 801b194:	4770      	bx	lr

0801b196 <_ZNK8touchgfx6Slider17getValueRangeSizeEv>:
 801b196:	e9d0 020d 	ldrd	r0, r2, [r0, #52]	; 0x34
 801b19a:	1a10      	subs	r0, r2, r0
 801b19c:	4770      	bx	lr

0801b19e <_ZN8touchgfx6Slider23updateIndicatorPositionEs>:
 801b19e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b1a2:	f9b0 60ec 	ldrsh.w	r6, [r0, #236]	; 0xec
 801b1a6:	428e      	cmp	r6, r1
 801b1a8:	4604      	mov	r4, r0
 801b1aa:	bfb8      	it	lt
 801b1ac:	460e      	movlt	r6, r1
 801b1ae:	f9b0 10ee 	ldrsh.w	r1, [r0, #238]	; 0xee
 801b1b2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801b1b6:	428e      	cmp	r6, r1
 801b1b8:	bfa8      	it	ge
 801b1ba:	460e      	movge	r6, r1
 801b1bc:	3094      	adds	r0, #148	; 0x94
 801b1be:	f104 07c0 	add.w	r7, r4, #192	; 0xc0
 801b1c2:	fa1f f886 	uxth.w	r8, r6
 801b1c6:	2b00      	cmp	r3, #0
 801b1c8:	d132      	bne.n	801b230 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x92>
 801b1ca:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	; 0x9a
 801b1ce:	4631      	mov	r1, r6
 801b1d0:	f7f1 fc88 	bl	800cae4 <_ZN8touchgfx8Drawable6moveToEss>
 801b1d4:	4638      	mov	r0, r7
 801b1d6:	f004 fc56 	bl	801fa86 <_ZNK8touchgfx8Drawable10invalidateEv>
 801b1da:	6823      	ldr	r3, [r4, #0]
 801b1dc:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
 801b1e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801b1e4:	4620      	mov	r0, r4
 801b1e6:	eba8 0802 	sub.w	r8, r8, r2
 801b1ea:	4798      	blx	r3
 801b1ec:	fa1f f888 	uxth.w	r8, r8
 801b1f0:	4480      	add	r8, r0
 801b1f2:	f8a4 80c8 	strh.w	r8, [r4, #200]	; 0xc8
 801b1f6:	4638      	mov	r0, r7
 801b1f8:	f004 fc45 	bl	801fa86 <_ZNK8touchgfx8Drawable10invalidateEv>
 801b1fc:	6823      	ldr	r3, [r4, #0]
 801b1fe:	4631      	mov	r1, r6
 801b200:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801b204:	4620      	mov	r0, r4
 801b206:	4798      	blx	r3
 801b208:	6320      	str	r0, [r4, #48]	; 0x30
 801b20a:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 801b20e:	2800      	cmp	r0, #0
 801b210:	d03c      	beq.n	801b28c <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xee>
 801b212:	6803      	ldr	r3, [r0, #0]
 801b214:	68db      	ldr	r3, [r3, #12]
 801b216:	4798      	blx	r3
 801b218:	2800      	cmp	r0, #0
 801b21a:	d037      	beq.n	801b28c <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xee>
 801b21c:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 801b220:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801b222:	6803      	ldr	r3, [r0, #0]
 801b224:	689b      	ldr	r3, [r3, #8]
 801b226:	4621      	mov	r1, r4
 801b228:	b003      	add	sp, #12
 801b22a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b22e:	4718      	bx	r3
 801b230:	4632      	mov	r2, r6
 801b232:	f9b4 1098 	ldrsh.w	r1, [r4, #152]	; 0x98
 801b236:	f7f1 fc55 	bl	800cae4 <_ZN8touchgfx8Drawable6moveToEss>
 801b23a:	4638      	mov	r0, r7
 801b23c:	f004 fc23 	bl	801fa86 <_ZNK8touchgfx8Drawable10invalidateEv>
 801b240:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
 801b244:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
 801b248:	6823      	ldr	r3, [r4, #0]
 801b24a:	4405      	add	r5, r0
 801b24c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801b250:	4620      	mov	r0, r4
 801b252:	4798      	blx	r3
 801b254:	b2ad      	uxth	r5, r5
 801b256:	6823      	ldr	r3, [r4, #0]
 801b258:	f9b4 90c4 	ldrsh.w	r9, [r4, #196]	; 0xc4
 801b25c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801b260:	eba5 0508 	sub.w	r5, r5, r8
 801b264:	1a2d      	subs	r5, r5, r0
 801b266:	4620      	mov	r0, r4
 801b268:	4798      	blx	r3
 801b26a:	b2ad      	uxth	r5, r5
 801b26c:	b22a      	sxth	r2, r5
 801b26e:	4440      	add	r0, r8
 801b270:	9200      	str	r2, [sp, #0]
 801b272:	f9b4 30c8 	ldrsh.w	r3, [r4, #200]	; 0xc8
 801b276:	b202      	sxth	r2, r0
 801b278:	4649      	mov	r1, r9
 801b27a:	4638      	mov	r0, r7
 801b27c:	f7f1 fb42 	bl	800c904 <_ZN8touchgfx8Drawable11setPositionEssss>
 801b280:	f8b4 0072 	ldrh.w	r0, [r4, #114]	; 0x72
 801b284:	1a2d      	subs	r5, r5, r0
 801b286:	f8a4 506e 	strh.w	r5, [r4, #110]	; 0x6e
 801b28a:	e7b4      	b.n	801b1f6 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x58>
 801b28c:	b003      	add	sp, #12
 801b28e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0801b294 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>:
 801b294:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b298:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 801b29c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
 801b2a0:	45b8      	cmp	r8, r7
 801b2a2:	4604      	mov	r4, r0
 801b2a4:	4689      	mov	r9, r1
 801b2a6:	4616      	mov	r6, r2
 801b2a8:	461d      	mov	r5, r3
 801b2aa:	d305      	bcc.n	801b2b8 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0x24>
 801b2ac:	4b28      	ldr	r3, [pc, #160]	; (801b350 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xbc>)
 801b2ae:	4a29      	ldr	r2, [pc, #164]	; (801b354 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xc0>)
 801b2b0:	4829      	ldr	r0, [pc, #164]	; (801b358 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xc4>)
 801b2b2:	2143      	movs	r1, #67	; 0x43
 801b2b4:	f012 ffd8 	bl	802e268 <__assert_func>
 801b2b8:	f04f 0a00 	mov.w	sl, #0
 801b2bc:	b213      	sxth	r3, r2
 801b2be:	fa0f fb81 	sxth.w	fp, r1
 801b2c2:	f880 a02c 	strb.w	sl, [r0, #44]	; 0x2c
 801b2c6:	461a      	mov	r2, r3
 801b2c8:	4659      	mov	r1, fp
 801b2ca:	303c      	adds	r0, #60	; 0x3c
 801b2cc:	9301      	str	r3, [sp, #4]
 801b2ce:	f7f1 fb7e 	bl	800c9ce <_ZN8touchgfx8Drawable5setXYEss>
 801b2d2:	9b01      	ldr	r3, [sp, #4]
 801b2d4:	4659      	mov	r1, fp
 801b2d6:	461a      	mov	r2, r3
 801b2d8:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 801b2dc:	f7f1 fb77 	bl	800c9ce <_ZN8touchgfx8Drawable5setXYEss>
 801b2e0:	4652      	mov	r2, sl
 801b2e2:	4651      	mov	r1, sl
 801b2e4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801b2e8:	f7f1 fb71 	bl	800c9ce <_ZN8touchgfx8Drawable5setXYEss>
 801b2ec:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
 801b2f0:	f8a4 509a 	strh.w	r5, [r4, #154]	; 0x9a
 801b2f4:	4449      	add	r1, r9
 801b2f6:	b28b      	uxth	r3, r1
 801b2f8:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 801b2fc:	f8a4 80ec 	strh.w	r8, [r4, #236]	; 0xec
 801b300:	4439      	add	r1, r7
 801b302:	b289      	uxth	r1, r1
 801b304:	428b      	cmp	r3, r1
 801b306:	bf88      	it	hi
 801b308:	b219      	sxthhi	r1, r3
 801b30a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 801b30e:	f8a4 70ee 	strh.w	r7, [r4, #238]	; 0xee
 801b312:	441e      	add	r6, r3
 801b314:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
 801b318:	441d      	add	r5, r3
 801b31a:	6823      	ldr	r3, [r4, #0]
 801b31c:	b2ad      	uxth	r5, r5
 801b31e:	b2b6      	uxth	r6, r6
 801b320:	bf98      	it	ls
 801b322:	b209      	sxthls	r1, r1
 801b324:	4620      	mov	r0, r4
 801b326:	42ae      	cmp	r6, r5
 801b328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b32a:	bf8c      	ite	hi
 801b32c:	b235      	sxthhi	r5, r6
 801b32e:	b22d      	sxthls	r5, r5
 801b330:	4798      	blx	r3
 801b332:	6823      	ldr	r3, [r4, #0]
 801b334:	4629      	mov	r1, r5
 801b336:	4620      	mov	r0, r4
 801b338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b33a:	4798      	blx	r3
 801b33c:	6823      	ldr	r3, [r4, #0]
 801b33e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801b340:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801b344:	4620      	mov	r0, r4
 801b346:	b003      	add	sp, #12
 801b348:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b34c:	4718      	bx	r3
 801b34e:	bf00      	nop
 801b350:	08032240 	.word	0x08032240
 801b354:	080324ba 	.word	0x080324ba
 801b358:	080322b4 	.word	0x080322b4

0801b35c <_ZN8touchgfx6Slider19setupVerticalSliderEttttt>:
 801b35c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b360:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
 801b364:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
 801b368:	42b7      	cmp	r7, r6
 801b36a:	4604      	mov	r4, r0
 801b36c:	4689      	mov	r9, r1
 801b36e:	4690      	mov	r8, r2
 801b370:	461d      	mov	r5, r3
 801b372:	d305      	bcc.n	801b380 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0x24>
 801b374:	4b25      	ldr	r3, [pc, #148]	; (801b40c <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xb0>)
 801b376:	4a26      	ldr	r2, [pc, #152]	; (801b410 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xb4>)
 801b378:	4826      	ldr	r0, [pc, #152]	; (801b414 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xb8>)
 801b37a:	215f      	movs	r1, #95	; 0x5f
 801b37c:	f012 ff74 	bl	802e268 <__assert_func>
 801b380:	2301      	movs	r3, #1
 801b382:	fa0f fa81 	sxth.w	sl, r1
 801b386:	fa0f fb82 	sxth.w	fp, r2
 801b38a:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801b38e:	465a      	mov	r2, fp
 801b390:	4651      	mov	r1, sl
 801b392:	303c      	adds	r0, #60	; 0x3c
 801b394:	f7f1 fb1b 	bl	800c9ce <_ZN8touchgfx8Drawable5setXYEss>
 801b398:	465a      	mov	r2, fp
 801b39a:	4651      	mov	r1, sl
 801b39c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 801b3a0:	f7f1 fb15 	bl	800c9ce <_ZN8touchgfx8Drawable5setXYEss>
 801b3a4:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
 801b3a8:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
 801b3ac:	4489      	add	r9, r1
 801b3ae:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 801b3b2:	6823      	ldr	r3, [r4, #0]
 801b3b4:	f8a4 70ec 	strh.w	r7, [r4, #236]	; 0xec
 801b3b8:	4429      	add	r1, r5
 801b3ba:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
 801b3be:	f8a4 60ee 	strh.w	r6, [r4, #238]	; 0xee
 801b3c2:	44a8      	add	r8, r5
 801b3c4:	f8b4 509e 	ldrh.w	r5, [r4, #158]	; 0x9e
 801b3c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b3ca:	b289      	uxth	r1, r1
 801b3cc:	fa1f f989 	uxth.w	r9, r9
 801b3d0:	4435      	add	r5, r6
 801b3d2:	4589      	cmp	r9, r1
 801b3d4:	b2ad      	uxth	r5, r5
 801b3d6:	fa1f f888 	uxth.w	r8, r8
 801b3da:	bf8c      	ite	hi
 801b3dc:	fa0f f189 	sxthhi.w	r1, r9
 801b3e0:	b209      	sxthls	r1, r1
 801b3e2:	4620      	mov	r0, r4
 801b3e4:	45a8      	cmp	r8, r5
 801b3e6:	bf8c      	ite	hi
 801b3e8:	fa0f f588 	sxthhi.w	r5, r8
 801b3ec:	b22d      	sxthls	r5, r5
 801b3ee:	4798      	blx	r3
 801b3f0:	6823      	ldr	r3, [r4, #0]
 801b3f2:	4629      	mov	r1, r5
 801b3f4:	4620      	mov	r0, r4
 801b3f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b3f8:	4798      	blx	r3
 801b3fa:	6823      	ldr	r3, [r4, #0]
 801b3fc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801b3fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801b402:	4620      	mov	r0, r4
 801b404:	b001      	add	sp, #4
 801b406:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b40a:	4718      	bx	r3
 801b40c:	080321ce 	.word	0x080321ce
 801b410:	08032455 	.word	0x08032455
 801b414:	080322b4 	.word	0x080322b4

0801b418 <_ZN8touchgfx6Slider13setValueRangeEiii>:
 801b418:	4291      	cmp	r1, r2
 801b41a:	b510      	push	{r4, lr}
 801b41c:	db06      	blt.n	801b42c <_ZN8touchgfx6Slider13setValueRangeEiii+0x14>
 801b41e:	4b08      	ldr	r3, [pc, #32]	; (801b440 <_ZN8touchgfx6Slider13setValueRangeEiii+0x28>)
 801b420:	4a08      	ldr	r2, [pc, #32]	; (801b444 <_ZN8touchgfx6Slider13setValueRangeEiii+0x2c>)
 801b422:	4809      	ldr	r0, [pc, #36]	; (801b448 <_ZN8touchgfx6Slider13setValueRangeEiii+0x30>)
 801b424:	f240 1107 	movw	r1, #263	; 0x107
 801b428:	f012 ff1e 	bl	802e268 <__assert_func>
 801b42c:	e9c0 120d 	strd	r1, r2, [r0, #52]	; 0x34
 801b430:	6802      	ldr	r2, [r0, #0]
 801b432:	4619      	mov	r1, r3
 801b434:	f8d2 20a4 	ldr.w	r2, [r2, #164]	; 0xa4
 801b438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b43c:	4710      	bx	r2
 801b43e:	bf00      	nop
 801b440:	08032176 	.word	0x08032176
 801b444:	08032419 	.word	0x08032419
 801b448:	080322b4 	.word	0x080322b4

0801b44c <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE>:
 801b44c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b450:	790b      	ldrb	r3, [r1, #4]
 801b452:	4604      	mov	r4, r0
 801b454:	460d      	mov	r5, r1
 801b456:	b323      	cbz	r3, 801b4a2 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x56>
 801b458:	2b01      	cmp	r3, #1
 801b45a:	d135      	bne.n	801b4c8 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 801b45c:	6823      	ldr	r3, [r4, #0]
 801b45e:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 801b462:	f8d3 70a8 	ldr.w	r7, [r3, #168]	; 0xa8
 801b466:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801b46a:	2a00      	cmp	r2, #0
 801b46c:	d12a      	bne.n	801b4c4 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x78>
 801b46e:	88ee      	ldrh	r6, [r5, #6]
 801b470:	4620      	mov	r0, r4
 801b472:	4798      	blx	r3
 801b474:	1a31      	subs	r1, r6, r0
 801b476:	b209      	sxth	r1, r1
 801b478:	4620      	mov	r0, r4
 801b47a:	47b8      	blx	r7
 801b47c:	792b      	ldrb	r3, [r5, #4]
 801b47e:	2b01      	cmp	r3, #1
 801b480:	d122      	bne.n	801b4c8 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 801b482:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 801b486:	b1f8      	cbz	r0, 801b4c8 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 801b488:	6803      	ldr	r3, [r0, #0]
 801b48a:	68db      	ldr	r3, [r3, #12]
 801b48c:	4798      	blx	r3
 801b48e:	b1d8      	cbz	r0, 801b4c8 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 801b490:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 801b494:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801b496:	6803      	ldr	r3, [r0, #0]
 801b498:	4621      	mov	r1, r4
 801b49a:	689b      	ldr	r3, [r3, #8]
 801b49c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b4a0:	4718      	bx	r3
 801b4a2:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
 801b4a6:	2800      	cmp	r0, #0
 801b4a8:	d0d8      	beq.n	801b45c <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 801b4aa:	6803      	ldr	r3, [r0, #0]
 801b4ac:	68db      	ldr	r3, [r3, #12]
 801b4ae:	4798      	blx	r3
 801b4b0:	2800      	cmp	r0, #0
 801b4b2:	d0d3      	beq.n	801b45c <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 801b4b4:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
 801b4b8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801b4ba:	6803      	ldr	r3, [r0, #0]
 801b4bc:	4621      	mov	r1, r4
 801b4be:	689b      	ldr	r3, [r3, #8]
 801b4c0:	4798      	blx	r3
 801b4c2:	e7cb      	b.n	801b45c <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 801b4c4:	892e      	ldrh	r6, [r5, #8]
 801b4c6:	e7d3      	b.n	801b470 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x24>
 801b4c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b4cc <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE>:
 801b4cc:	b570      	push	{r4, r5, r6, lr}
 801b4ce:	6803      	ldr	r3, [r0, #0]
 801b4d0:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 801b4d4:	f8d3 60a8 	ldr.w	r6, [r3, #168]	; 0xa8
 801b4d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801b4dc:	4604      	mov	r4, r0
 801b4de:	b942      	cbnz	r2, 801b4f2 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x26>
 801b4e0:	894d      	ldrh	r5, [r1, #10]
 801b4e2:	4798      	blx	r3
 801b4e4:	1a29      	subs	r1, r5, r0
 801b4e6:	4633      	mov	r3, r6
 801b4e8:	4620      	mov	r0, r4
 801b4ea:	b209      	sxth	r1, r1
 801b4ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b4f0:	4718      	bx	r3
 801b4f2:	898d      	ldrh	r5, [r1, #12]
 801b4f4:	e7f5      	b.n	801b4e2 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x16>
	...

0801b4f8 <_ZN8touchgfx6SliderC1Ev>:
 801b4f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4fc:	ae02      	add	r6, sp, #8
 801b4fe:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801b502:	4604      	mov	r4, r0
 801b504:	f7f4 fdb8 	bl	8010078 <_ZN8touchgfx9ContainerC1Ev>
 801b508:	f826 7d04 	strh.w	r7, [r6, #-4]!
 801b50c:	4b23      	ldr	r3, [pc, #140]	; (801b59c <_ZN8touchgfx6SliderC1Ev+0xa4>)
 801b50e:	6023      	str	r3, [r4, #0]
 801b510:	2500      	movs	r5, #0
 801b512:	f04f 0b01 	mov.w	fp, #1
 801b516:	f104 093c 	add.w	r9, r4, #60	; 0x3c
 801b51a:	4631      	mov	r1, r6
 801b51c:	f104 0a68 	add.w	sl, r4, #104	; 0x68
 801b520:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
 801b524:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
 801b528:	f8c4 b038 	str.w	fp, [r4, #56]	; 0x38
 801b52c:	4648      	mov	r0, r9
 801b52e:	f7f3 fd3b 	bl	800efa8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801b532:	f104 0894 	add.w	r8, r4, #148	; 0x94
 801b536:	4631      	mov	r1, r6
 801b538:	4650      	mov	r0, sl
 801b53a:	f8ad 7004 	strh.w	r7, [sp, #4]
 801b53e:	f7f3 fd33 	bl	800efa8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801b542:	4631      	mov	r1, r6
 801b544:	4640      	mov	r0, r8
 801b546:	f104 06c0 	add.w	r6, r4, #192	; 0xc0
 801b54a:	f8ad 7004 	strh.w	r7, [sp, #4]
 801b54e:	f7f3 fd2b 	bl	800efa8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801b552:	4630      	mov	r0, r6
 801b554:	f7f4 fd90 	bl	8010078 <_ZN8touchgfx9ContainerC1Ev>
 801b558:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801b55c:	e9c4 353b 	strd	r3, r5, [r4, #236]	; 0xec
 801b560:	4651      	mov	r1, sl
 801b562:	4630      	mov	r0, r6
 801b564:	e9c4 553d 	strd	r5, r5, [r4, #244]	; 0xf4
 801b568:	f884 b024 	strb.w	fp, [r4, #36]	; 0x24
 801b56c:	f7ff fc4a 	bl	801ae04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801b570:	4649      	mov	r1, r9
 801b572:	4620      	mov	r0, r4
 801b574:	f7ff fc46 	bl	801ae04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801b578:	4631      	mov	r1, r6
 801b57a:	4620      	mov	r0, r4
 801b57c:	f7ff fc42 	bl	801ae04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801b580:	4641      	mov	r1, r8
 801b582:	4620      	mov	r0, r4
 801b584:	f7ff fc3e 	bl	801ae04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801b588:	4620      	mov	r0, r4
 801b58a:	2264      	movs	r2, #100	; 0x64
 801b58c:	4629      	mov	r1, r5
 801b58e:	f7ff fdec 	bl	801b16a <_ZN8touchgfx6Slider13setValueRangeEii>
 801b592:	4620      	mov	r0, r4
 801b594:	b003      	add	sp, #12
 801b596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b59a:	bf00      	nop
 801b59c:	080322ec 	.word	0x080322ec

0801b5a0 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>:
 801b5a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b5a4:	4604      	mov	r4, r0
 801b5a6:	4608      	mov	r0, r1
 801b5a8:	4615      	mov	r5, r2
 801b5aa:	460e      	mov	r6, r1
 801b5ac:	461f      	mov	r7, r3
 801b5ae:	f006 f913 	bl	80217d8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b5b2:	4680      	mov	r8, r0
 801b5b4:	4628      	mov	r0, r5
 801b5b6:	f006 f90f 	bl	80217d8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b5ba:	4580      	cmp	r8, r0
 801b5bc:	d005      	beq.n	801b5ca <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x2a>
 801b5be:	4b14      	ldr	r3, [pc, #80]	; (801b610 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x70>)
 801b5c0:	4a14      	ldr	r2, [pc, #80]	; (801b614 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x74>)
 801b5c2:	4815      	ldr	r0, [pc, #84]	; (801b618 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x78>)
 801b5c4:	2133      	movs	r1, #51	; 0x33
 801b5c6:	f012 fe4f 	bl	802e268 <__assert_func>
 801b5ca:	4630      	mov	r0, r6
 801b5cc:	f006 f93e 	bl	802184c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b5d0:	4680      	mov	r8, r0
 801b5d2:	4628      	mov	r0, r5
 801b5d4:	f006 f93a 	bl	802184c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b5d8:	4580      	cmp	r8, r0
 801b5da:	d1f0      	bne.n	801b5be <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x1e>
 801b5dc:	4631      	mov	r1, r6
 801b5de:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 801b5e2:	f002 fd35 	bl	801e050 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801b5e6:	4629      	mov	r1, r5
 801b5e8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801b5ec:	f002 fd30 	bl	801e050 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801b5f0:	4639      	mov	r1, r7
 801b5f2:	f104 0094 	add.w	r0, r4, #148	; 0x94
 801b5f6:	f002 fd2b 	bl	801e050 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801b5fa:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
 801b5fe:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
 801b602:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
 801b606:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
 801b60a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b60e:	bf00      	nop
 801b610:	08032097 	.word	0x08032097
 801b614:	080323ac 	.word	0x080323ac
 801b618:	080322b4 	.word	0x080322b4

0801b61c <_ZNK8touchgfx10ListLayout12getDirectionEv>:
 801b61c:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 801b620:	4770      	bx	lr

0801b622 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE>:
 801b622:	b538      	push	{r3, r4, r5, lr}
 801b624:	7882      	ldrb	r2, [r0, #2]
 801b626:	6843      	ldr	r3, [r0, #4]
 801b628:	4604      	mov	r4, r0
 801b62a:	460d      	mov	r5, r1
 801b62c:	b98a      	cbnz	r2, 801b652 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x30>
 801b62e:	4299      	cmp	r1, r3
 801b630:	d101      	bne.n	801b636 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
 801b632:	2301      	movs	r3, #1
 801b634:	7083      	strb	r3, [r0, #2]
 801b636:	6863      	ldr	r3, [r4, #4]
 801b638:	42ab      	cmp	r3, r5
 801b63a:	d009      	beq.n	801b650 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x2e>
 801b63c:	7a23      	ldrb	r3, [r4, #8]
 801b63e:	2b01      	cmp	r3, #1
 801b640:	d11b      	bne.n	801b67a <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x58>
 801b642:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 801b646:	f9b4 2000 	ldrsh.w	r2, [r4]
 801b64a:	429a      	cmp	r2, r3
 801b64c:	bfb8      	it	lt
 801b64e:	8023      	strhlt	r3, [r4, #0]
 801b650:	bd38      	pop	{r3, r4, r5, pc}
 801b652:	7a02      	ldrb	r2, [r0, #8]
 801b654:	2a01      	cmp	r2, #1
 801b656:	d108      	bne.n	801b66a <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x48>
 801b658:	895b      	ldrh	r3, [r3, #10]
 801b65a:	88c9      	ldrh	r1, [r1, #6]
 801b65c:	1ac9      	subs	r1, r1, r3
 801b65e:	682b      	ldr	r3, [r5, #0]
 801b660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b662:	b209      	sxth	r1, r1
 801b664:	4628      	mov	r0, r5
 801b666:	4798      	blx	r3
 801b668:	e7e5      	b.n	801b636 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
 801b66a:	2a02      	cmp	r2, #2
 801b66c:	d1e3      	bne.n	801b636 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
 801b66e:	891b      	ldrh	r3, [r3, #8]
 801b670:	8889      	ldrh	r1, [r1, #4]
 801b672:	1ac9      	subs	r1, r1, r3
 801b674:	682b      	ldr	r3, [r5, #0]
 801b676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b678:	e7f3      	b.n	801b662 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x40>
 801b67a:	2b02      	cmp	r3, #2
 801b67c:	d1e8      	bne.n	801b650 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x2e>
 801b67e:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 801b682:	e7e0      	b.n	801b646 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x24>

0801b684 <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvED1Ev>:
 801b684:	4770      	bx	lr

0801b686 <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvED1Ev>:
 801b686:	4770      	bx	lr

0801b688 <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7executeES3_>:
 801b688:	b430      	push	{r4, r5}
 801b68a:	68c5      	ldr	r5, [r0, #12]
 801b68c:	6844      	ldr	r4, [r0, #4]
 801b68e:	106a      	asrs	r2, r5, #1
 801b690:	4603      	mov	r3, r0
 801b692:	07ed      	lsls	r5, r5, #31
 801b694:	eb04 0002 	add.w	r0, r4, r2
 801b698:	689b      	ldr	r3, [r3, #8]
 801b69a:	bf48      	it	mi
 801b69c:	58a2      	ldrmi	r2, [r4, r2]
 801b69e:	bc30      	pop	{r4, r5}
 801b6a0:	bf48      	it	mi
 801b6a2:	58d3      	ldrmi	r3, [r2, r3]
 801b6a4:	4718      	bx	r3

0801b6a6 <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv>:
 801b6a6:	6843      	ldr	r3, [r0, #4]
 801b6a8:	b12b      	cbz	r3, 801b6b6 <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv+0x10>
 801b6aa:	6883      	ldr	r3, [r0, #8]
 801b6ac:	b92b      	cbnz	r3, 801b6ba <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv+0x14>
 801b6ae:	68c0      	ldr	r0, [r0, #12]
 801b6b0:	f000 0001 	and.w	r0, r0, #1
 801b6b4:	4770      	bx	lr
 801b6b6:	4618      	mov	r0, r3
 801b6b8:	4770      	bx	lr
 801b6ba:	2001      	movs	r0, #1
 801b6bc:	4770      	bx	lr

0801b6be <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7executeES3_>:
 801b6be:	b430      	push	{r4, r5}
 801b6c0:	68c5      	ldr	r5, [r0, #12]
 801b6c2:	6844      	ldr	r4, [r0, #4]
 801b6c4:	106a      	asrs	r2, r5, #1
 801b6c6:	4603      	mov	r3, r0
 801b6c8:	07ed      	lsls	r5, r5, #31
 801b6ca:	eb04 0002 	add.w	r0, r4, r2
 801b6ce:	689b      	ldr	r3, [r3, #8]
 801b6d0:	bf48      	it	mi
 801b6d2:	58a2      	ldrmi	r2, [r4, r2]
 801b6d4:	bc30      	pop	{r4, r5}
 801b6d6:	bf48      	it	mi
 801b6d8:	58d3      	ldrmi	r3, [r2, r3]
 801b6da:	4718      	bx	r3

0801b6dc <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv>:
 801b6dc:	6843      	ldr	r3, [r0, #4]
 801b6de:	b12b      	cbz	r3, 801b6ec <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv+0x10>
 801b6e0:	6883      	ldr	r3, [r0, #8]
 801b6e2:	b92b      	cbnz	r3, 801b6f0 <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv+0x14>
 801b6e4:	68c0      	ldr	r0, [r0, #12]
 801b6e6:	f000 0001 	and.w	r0, r0, #1
 801b6ea:	4770      	bx	lr
 801b6ec:	4618      	mov	r0, r3
 801b6ee:	4770      	bx	lr
 801b6f0:	2001      	movs	r0, #1
 801b6f2:	4770      	bx	lr

0801b6f4 <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvED0Ev>:
 801b6f4:	b510      	push	{r4, lr}
 801b6f6:	2110      	movs	r1, #16
 801b6f8:	4604      	mov	r4, r0
 801b6fa:	f011 fce7 	bl	802d0cc <_ZdlPvj>
 801b6fe:	4620      	mov	r0, r4
 801b700:	bd10      	pop	{r4, pc}

0801b702 <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvED0Ev>:
 801b702:	b510      	push	{r4, lr}
 801b704:	2110      	movs	r1, #16
 801b706:	4604      	mov	r4, r0
 801b708:	f011 fce0 	bl	802d0cc <_ZdlPvj>
 801b70c:	4620      	mov	r0, r4
 801b70e:	bd10      	pop	{r4, pc}

0801b710 <_ZN8touchgfx10ListLayout9removeAllEv>:
 801b710:	b570      	push	{r4, r5, r6, lr}
 801b712:	2500      	movs	r5, #0
 801b714:	6803      	ldr	r3, [r0, #0]
 801b716:	85c5      	strh	r5, [r0, #46]	; 0x2e
 801b718:	4604      	mov	r4, r0
 801b71a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b71c:	4629      	mov	r1, r5
 801b71e:	4798      	blx	r3
 801b720:	6823      	ldr	r3, [r4, #0]
 801b722:	4629      	mov	r1, r5
 801b724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b726:	4620      	mov	r0, r4
 801b728:	4798      	blx	r3
 801b72a:	4620      	mov	r0, r4
 801b72c:	f7ff fadc 	bl	801ace8 <_ZN8touchgfx9Container9removeAllEv>
 801b730:	6960      	ldr	r0, [r4, #20]
 801b732:	b120      	cbz	r0, 801b73e <_ZN8touchgfx10ListLayout9removeAllEv+0x2e>
 801b734:	6803      	ldr	r3, [r0, #0]
 801b736:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b73a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b73c:	4718      	bx	r3
 801b73e:	bd70      	pop	{r4, r5, r6, pc}

0801b740 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE>:
 801b740:	4603      	mov	r3, r0
 801b742:	4608      	mov	r0, r1
 801b744:	789a      	ldrb	r2, [r3, #2]
 801b746:	b992      	cbnz	r2, 801b76e <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x2e>
 801b748:	685a      	ldr	r2, [r3, #4]
 801b74a:	428a      	cmp	r2, r1
 801b74c:	d102      	bne.n	801b754 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x14>
 801b74e:	2201      	movs	r2, #1
 801b750:	709a      	strb	r2, [r3, #2]
 801b752:	4770      	bx	lr
 801b754:	7a1a      	ldrb	r2, [r3, #8]
 801b756:	2a01      	cmp	r2, #1
 801b758:	d104      	bne.n	801b764 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x24>
 801b75a:	88ca      	ldrh	r2, [r1, #6]
 801b75c:	8949      	ldrh	r1, [r1, #10]
 801b75e:	440a      	add	r2, r1
 801b760:	801a      	strh	r2, [r3, #0]
 801b762:	4770      	bx	lr
 801b764:	2a02      	cmp	r2, #2
 801b766:	d116      	bne.n	801b796 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x56>
 801b768:	888a      	ldrh	r2, [r1, #4]
 801b76a:	8909      	ldrh	r1, [r1, #8]
 801b76c:	e7f7      	b.n	801b75e <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x1e>
 801b76e:	7a1a      	ldrb	r2, [r3, #8]
 801b770:	2a01      	cmp	r2, #1
 801b772:	d107      	bne.n	801b784 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x44>
 801b774:	685b      	ldr	r3, [r3, #4]
 801b776:	8959      	ldrh	r1, [r3, #10]
 801b778:	88c3      	ldrh	r3, [r0, #6]
 801b77a:	4419      	add	r1, r3
 801b77c:	6803      	ldr	r3, [r0, #0]
 801b77e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b780:	b209      	sxth	r1, r1
 801b782:	4718      	bx	r3
 801b784:	2a02      	cmp	r2, #2
 801b786:	d106      	bne.n	801b796 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x56>
 801b788:	685b      	ldr	r3, [r3, #4]
 801b78a:	8919      	ldrh	r1, [r3, #8]
 801b78c:	8883      	ldrh	r3, [r0, #4]
 801b78e:	4419      	add	r1, r3
 801b790:	6803      	ldr	r3, [r0, #0]
 801b792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b794:	e7f4      	b.n	801b780 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x40>
 801b796:	4770      	bx	lr

0801b798 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE>:
 801b798:	b530      	push	{r4, r5, lr}
 801b79a:	1e4b      	subs	r3, r1, #1
 801b79c:	2b01      	cmp	r3, #1
 801b79e:	b085      	sub	sp, #20
 801b7a0:	4604      	mov	r4, r0
 801b7a2:	d905      	bls.n	801b7b0 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x18>
 801b7a4:	4b14      	ldr	r3, [pc, #80]	; (801b7f8 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x60>)
 801b7a6:	4a15      	ldr	r2, [pc, #84]	; (801b7fc <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x64>)
 801b7a8:	4815      	ldr	r0, [pc, #84]	; (801b800 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x68>)
 801b7aa:	21af      	movs	r1, #175	; 0xaf
 801b7ac:	f012 fd5c 	bl	802e268 <__assert_func>
 801b7b0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801b7b4:	428b      	cmp	r3, r1
 801b7b6:	d01c      	beq.n	801b7f2 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x5a>
 801b7b8:	2500      	movs	r5, #0
 801b7ba:	6803      	ldr	r3, [r0, #0]
 801b7bc:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
 801b7c0:	85c5      	strh	r5, [r0, #46]	; 0x2e
 801b7c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b7c4:	4629      	mov	r1, r5
 801b7c6:	4798      	blx	r3
 801b7c8:	6823      	ldr	r3, [r4, #0]
 801b7ca:	4629      	mov	r1, r5
 801b7cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b7ce:	4620      	mov	r0, r4
 801b7d0:	4798      	blx	r3
 801b7d2:	4b0c      	ldr	r3, [pc, #48]	; (801b804 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x6c>)
 801b7d4:	e9cd 3400 	strd	r3, r4, [sp]
 801b7d8:	4b0b      	ldr	r3, [pc, #44]	; (801b808 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x70>)
 801b7da:	e9cd 3502 	strd	r3, r5, [sp, #8]
 801b7de:	6823      	ldr	r3, [r4, #0]
 801b7e0:	4620      	mov	r0, r4
 801b7e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b7e4:	4669      	mov	r1, sp
 801b7e6:	4798      	blx	r3
 801b7e8:	6960      	ldr	r0, [r4, #20]
 801b7ea:	b110      	cbz	r0, 801b7f2 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x5a>
 801b7ec:	6803      	ldr	r3, [r0, #0]
 801b7ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b7f0:	4798      	blx	r3
 801b7f2:	b005      	add	sp, #20
 801b7f4:	bd30      	pop	{r4, r5, pc}
 801b7f6:	bf00      	nop
 801b7f8:	08032554 	.word	0x08032554
 801b7fc:	0803265c 	.word	0x0803265c
 801b800:	08032592 	.word	0x08032592
 801b804:	0803252c 	.word	0x0803252c
 801b808:	0801b875 	.word	0x0801b875

0801b80c <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>:
 801b80c:	b538      	push	{r3, r4, r5, lr}
 801b80e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801b812:	2b01      	cmp	r3, #1
 801b814:	460d      	mov	r5, r1
 801b816:	4604      	mov	r4, r0
 801b818:	4611      	mov	r1, r2
 801b81a:	d002      	beq.n	801b822 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x16>
 801b81c:	2b02      	cmp	r3, #2
 801b81e:	d016      	beq.n	801b84e <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x42>
 801b820:	bd38      	pop	{r3, r4, r5, pc}
 801b822:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 801b826:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801b82a:	429a      	cmp	r2, r3
 801b82c:	bfb8      	it	lt
 801b82e:	8103      	strhlt	r3, [r0, #8]
 801b830:	896a      	ldrh	r2, [r5, #10]
 801b832:	8943      	ldrh	r3, [r0, #10]
 801b834:	4413      	add	r3, r2
 801b836:	8143      	strh	r3, [r0, #10]
 801b838:	682b      	ldr	r3, [r5, #0]
 801b83a:	460a      	mov	r2, r1
 801b83c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b83e:	2100      	movs	r1, #0
 801b840:	4628      	mov	r0, r5
 801b842:	4798      	blx	r3
 801b844:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801b846:	896a      	ldrh	r2, [r5, #10]
 801b848:	4413      	add	r3, r2
 801b84a:	85e3      	strh	r3, [r4, #46]	; 0x2e
 801b84c:	e7e8      	b.n	801b820 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x14>
 801b84e:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 801b852:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801b856:	429a      	cmp	r2, r3
 801b858:	bfb8      	it	lt
 801b85a:	8143      	strhlt	r3, [r0, #10]
 801b85c:	892a      	ldrh	r2, [r5, #8]
 801b85e:	8903      	ldrh	r3, [r0, #8]
 801b860:	4413      	add	r3, r2
 801b862:	8103      	strh	r3, [r0, #8]
 801b864:	682b      	ldr	r3, [r5, #0]
 801b866:	2200      	movs	r2, #0
 801b868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b86a:	4628      	mov	r0, r5
 801b86c:	4798      	blx	r3
 801b86e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801b870:	892a      	ldrh	r2, [r5, #8]
 801b872:	e7e9      	b.n	801b848 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x3c>

0801b874 <_ZN8touchgfx10ListLayout18internalAddElementERNS_8DrawableE>:
 801b874:	f9b0 202e 	ldrsh.w	r2, [r0, #46]	; 0x2e
 801b878:	f7ff bfc8 	b.w	801b80c <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>

0801b87c <_ZN8touchgfx10ListLayout3addERNS_8DrawableE>:
 801b87c:	b570      	push	{r4, r5, r6, lr}
 801b87e:	4604      	mov	r4, r0
 801b880:	460d      	mov	r5, r1
 801b882:	f7ff fff7 	bl	801b874 <_ZN8touchgfx10ListLayout18internalAddElementERNS_8DrawableE>
 801b886:	4620      	mov	r0, r4
 801b888:	4629      	mov	r1, r5
 801b88a:	f7ff fabb 	bl	801ae04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801b88e:	6960      	ldr	r0, [r4, #20]
 801b890:	b120      	cbz	r0, 801b89c <_ZN8touchgfx10ListLayout3addERNS_8DrawableE+0x20>
 801b892:	6803      	ldr	r3, [r0, #0]
 801b894:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b89a:	4718      	bx	r3
 801b89c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801b8a0 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_>:
 801b8a0:	b530      	push	{r4, r5, lr}
 801b8a2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801b8a4:	b089      	sub	sp, #36	; 0x24
 801b8a6:	4604      	mov	r4, r0
 801b8a8:	4615      	mov	r5, r2
 801b8aa:	b92b      	cbnz	r3, 801b8b8 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x18>
 801b8ac:	6803      	ldr	r3, [r0, #0]
 801b8ae:	4611      	mov	r1, r2
 801b8b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b8b2:	4798      	blx	r3
 801b8b4:	b009      	add	sp, #36	; 0x24
 801b8b6:	bd30      	pop	{r4, r5, pc}
 801b8b8:	f7ff fa89 	bl	801adce <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>
 801b8bc:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 801b8c0:	f88d 200c 	strb.w	r2, [sp, #12]
 801b8c4:	4a0f      	ldr	r2, [pc, #60]	; (801b904 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x64>)
 801b8c6:	9204      	str	r2, [sp, #16]
 801b8c8:	aa01      	add	r2, sp, #4
 801b8ca:	9205      	str	r2, [sp, #20]
 801b8cc:	4a0e      	ldr	r2, [pc, #56]	; (801b908 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x68>)
 801b8ce:	9502      	str	r5, [sp, #8]
 801b8d0:	2300      	movs	r3, #0
 801b8d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b8d6:	f8ad 3004 	strh.w	r3, [sp, #4]
 801b8da:	f88d 3006 	strb.w	r3, [sp, #6]
 801b8de:	6823      	ldr	r3, [r4, #0]
 801b8e0:	a904      	add	r1, sp, #16
 801b8e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b8e4:	4620      	mov	r0, r4
 801b8e6:	4798      	blx	r3
 801b8e8:	4620      	mov	r0, r4
 801b8ea:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801b8ee:	4629      	mov	r1, r5
 801b8f0:	f7ff ff8c 	bl	801b80c <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>
 801b8f4:	6960      	ldr	r0, [r4, #20]
 801b8f6:	2800      	cmp	r0, #0
 801b8f8:	d0dc      	beq.n	801b8b4 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x14>
 801b8fa:	6803      	ldr	r3, [r0, #0]
 801b8fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b8fe:	4798      	blx	r3
 801b900:	e7d8      	b.n	801b8b4 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x14>
 801b902:	bf00      	nop
 801b904:	08032544 	.word	0x08032544
 801b908:	0801b741 	.word	0x0801b741

0801b90c <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs>:
 801b90c:	b538      	push	{r3, r4, r5, lr}
 801b90e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801b912:	2b01      	cmp	r3, #1
 801b914:	4604      	mov	r4, r0
 801b916:	460d      	mov	r5, r1
 801b918:	d002      	beq.n	801b920 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x14>
 801b91a:	2b02      	cmp	r3, #2
 801b91c:	d018      	beq.n	801b950 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x44>
 801b91e:	bd38      	pop	{r3, r4, r5, pc}
 801b920:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801b924:	4293      	cmp	r3, r2
 801b926:	bfc8      	it	gt
 801b928:	8102      	strhgt	r2, [r0, #8]
 801b92a:	894a      	ldrh	r2, [r1, #10]
 801b92c:	8943      	ldrh	r3, [r0, #10]
 801b92e:	1a9b      	subs	r3, r3, r2
 801b930:	8143      	strh	r3, [r0, #10]
 801b932:	680b      	ldr	r3, [r1, #0]
 801b934:	4628      	mov	r0, r5
 801b936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b938:	2100      	movs	r1, #0
 801b93a:	4798      	blx	r3
 801b93c:	682b      	ldr	r3, [r5, #0]
 801b93e:	2100      	movs	r1, #0
 801b940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b942:	4628      	mov	r0, r5
 801b944:	4798      	blx	r3
 801b946:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801b948:	896a      	ldrh	r2, [r5, #10]
 801b94a:	1a9b      	subs	r3, r3, r2
 801b94c:	85e3      	strh	r3, [r4, #46]	; 0x2e
 801b94e:	e7e6      	b.n	801b91e <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x12>
 801b950:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801b954:	4293      	cmp	r3, r2
 801b956:	bfc8      	it	gt
 801b958:	8142      	strhgt	r2, [r0, #10]
 801b95a:	890a      	ldrh	r2, [r1, #8]
 801b95c:	8903      	ldrh	r3, [r0, #8]
 801b95e:	1a9b      	subs	r3, r3, r2
 801b960:	8103      	strh	r3, [r0, #8]
 801b962:	680b      	ldr	r3, [r1, #0]
 801b964:	4628      	mov	r0, r5
 801b966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b968:	2100      	movs	r1, #0
 801b96a:	4798      	blx	r3
 801b96c:	682b      	ldr	r3, [r5, #0]
 801b96e:	2100      	movs	r1, #0
 801b970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b972:	4628      	mov	r0, r5
 801b974:	4798      	blx	r3
 801b976:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801b978:	892a      	ldrh	r2, [r5, #8]
 801b97a:	e7e6      	b.n	801b94a <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x3e>

0801b97c <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE>:
 801b97c:	b530      	push	{r4, r5, lr}
 801b97e:	b089      	sub	sp, #36	; 0x24
 801b980:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 801b984:	f88d 200c 	strb.w	r2, [sp, #12]
 801b988:	4a13      	ldr	r2, [pc, #76]	; (801b9d8 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x5c>)
 801b98a:	9204      	str	r2, [sp, #16]
 801b98c:	aa01      	add	r2, sp, #4
 801b98e:	9205      	str	r2, [sp, #20]
 801b990:	4a12      	ldr	r2, [pc, #72]	; (801b9dc <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x60>)
 801b992:	9102      	str	r1, [sp, #8]
 801b994:	2300      	movs	r3, #0
 801b996:	f8ad 3004 	strh.w	r3, [sp, #4]
 801b99a:	f88d 3006 	strb.w	r3, [sp, #6]
 801b99e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b9a2:	6803      	ldr	r3, [r0, #0]
 801b9a4:	460d      	mov	r5, r1
 801b9a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b9a8:	a904      	add	r1, sp, #16
 801b9aa:	4604      	mov	r4, r0
 801b9ac:	4798      	blx	r3
 801b9ae:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801b9b2:	b14b      	cbz	r3, 801b9c8 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x4c>
 801b9b4:	4629      	mov	r1, r5
 801b9b6:	4620      	mov	r0, r4
 801b9b8:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801b9bc:	f7ff ffa6 	bl	801b90c <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs>
 801b9c0:	4629      	mov	r1, r5
 801b9c2:	4620      	mov	r0, r4
 801b9c4:	f7ff f9ec 	bl	801ada0 <_ZN8touchgfx9Container6removeERNS_8DrawableE>
 801b9c8:	6960      	ldr	r0, [r4, #20]
 801b9ca:	b110      	cbz	r0, 801b9d2 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x56>
 801b9cc:	6803      	ldr	r3, [r0, #0]
 801b9ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b9d0:	4798      	blx	r3
 801b9d2:	b009      	add	sp, #36	; 0x24
 801b9d4:	bd30      	pop	{r4, r5, pc}
 801b9d6:	bf00      	nop
 801b9d8:	08032544 	.word	0x08032544
 801b9dc:	0801b623 	.word	0x0801b623

0801b9e0 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801b9e0:	2000      	movs	r0, #0
 801b9e2:	4770      	bx	lr

0801b9e4 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801b9e4:	2001      	movs	r0, #1
 801b9e6:	4770      	bx	lr

0801b9e8 <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_>:
 801b9e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b9ea:	6803      	ldr	r3, [r0, #0]
 801b9ec:	4604      	mov	r4, r0
 801b9ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b9f0:	460e      	mov	r6, r1
 801b9f2:	4601      	mov	r1, r0
 801b9f4:	4668      	mov	r0, sp
 801b9f6:	4615      	mov	r5, r2
 801b9f8:	4798      	blx	r3
 801b9fa:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 801b9fe:	b13b      	cbz	r3, 801ba10 <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_+0x28>
 801ba00:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801ba04:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801ba08:	4293      	cmp	r3, r2
 801ba0a:	bfac      	ite	ge
 801ba0c:	2300      	movge	r3, #0
 801ba0e:	2301      	movlt	r3, #1
 801ba10:	7033      	strb	r3, [r6, #0]
 801ba12:	f894 30ad 	ldrb.w	r3, [r4, #173]	; 0xad
 801ba16:	b13b      	cbz	r3, 801ba28 <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_+0x40>
 801ba18:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801ba1c:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801ba20:	4293      	cmp	r3, r2
 801ba22:	bfac      	ite	ge
 801ba24:	2300      	movge	r3, #0
 801ba26:	2301      	movlt	r3, #1
 801ba28:	702b      	strb	r3, [r5, #0]
 801ba2a:	b002      	add	sp, #8
 801ba2c:	bd70      	pop	{r4, r5, r6, pc}

0801ba2e <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss>:
 801ba2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ba32:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801ba34:	460e      	mov	r6, r1
 801ba36:	4617      	mov	r7, r2
 801ba38:	f100 0838 	add.w	r8, r0, #56	; 0x38
 801ba3c:	f100 0568 	add.w	r5, r0, #104	; 0x68
 801ba40:	b15c      	cbz	r4, 801ba5a <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x2c>
 801ba42:	4544      	cmp	r4, r8
 801ba44:	d007      	beq.n	801ba56 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x28>
 801ba46:	42ac      	cmp	r4, r5
 801ba48:	d005      	beq.n	801ba56 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x28>
 801ba4a:	6823      	ldr	r3, [r4, #0]
 801ba4c:	463a      	mov	r2, r7
 801ba4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ba50:	4631      	mov	r1, r6
 801ba52:	4620      	mov	r0, r4
 801ba54:	4798      	blx	r3
 801ba56:	69a4      	ldr	r4, [r4, #24]
 801ba58:	e7f2      	b.n	801ba40 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x12>
 801ba5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ba5e <_ZN8touchgfx9DragEventD1Ev>:
 801ba5e:	4770      	bx	lr

0801ba60 <_ZN8touchgfx10ClickEventD1Ev>:
 801ba60:	4770      	bx	lr

0801ba62 <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE>:
 801ba62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ba64:	4605      	mov	r5, r0
 801ba66:	4604      	mov	r4, r0
 801ba68:	f855 3b68 	ldr.w	r3, [r5], #104
 801ba6c:	f100 0638 	add.w	r6, r0, #56	; 0x38
 801ba70:	460f      	mov	r7, r1
 801ba72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801ba74:	4631      	mov	r1, r6
 801ba76:	4798      	blx	r3
 801ba78:	6823      	ldr	r3, [r4, #0]
 801ba7a:	4629      	mov	r1, r5
 801ba7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801ba7e:	4620      	mov	r0, r4
 801ba80:	4798      	blx	r3
 801ba82:	4639      	mov	r1, r7
 801ba84:	4620      	mov	r0, r4
 801ba86:	f7ff f9bd 	bl	801ae04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801ba8a:	4631      	mov	r1, r6
 801ba8c:	4620      	mov	r0, r4
 801ba8e:	f7ff f9b9 	bl	801ae04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801ba92:	4629      	mov	r1, r5
 801ba94:	4620      	mov	r0, r4
 801ba96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801ba9a:	f7ff b9b3 	b.w	801ae04 <_ZN8touchgfx9Container3addERNS_8DrawableE>

0801ba9e <_ZN8touchgfx10ClickEventD0Ev>:
 801ba9e:	b510      	push	{r4, lr}
 801baa0:	210c      	movs	r1, #12
 801baa2:	4604      	mov	r4, r0
 801baa4:	f011 fb12 	bl	802d0cc <_ZdlPvj>
 801baa8:	4620      	mov	r0, r4
 801baaa:	bd10      	pop	{r4, pc}

0801baac <_ZN8touchgfx9DragEventD0Ev>:
 801baac:	b510      	push	{r4, lr}
 801baae:	2110      	movs	r1, #16
 801bab0:	4604      	mov	r4, r0
 801bab2:	f011 fb0b 	bl	802d0cc <_ZdlPvj>
 801bab6:	4620      	mov	r0, r4
 801bab8:	bd10      	pop	{r4, pc}
	...

0801babc <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE>:
 801babc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bac0:	b089      	sub	sp, #36	; 0x24
 801bac2:	aa08      	add	r2, sp, #32
 801bac4:	2300      	movs	r3, #0
 801bac6:	f88d 3006 	strb.w	r3, [sp, #6]
 801baca:	f802 3d19 	strb.w	r3, [r2, #-25]!
 801bace:	6803      	ldr	r3, [r0, #0]
 801bad0:	f9b1 9006 	ldrsh.w	r9, [r1, #6]
 801bad4:	f9b1 8008 	ldrsh.w	r8, [r1, #8]
 801bad8:	f9b1 700a 	ldrsh.w	r7, [r1, #10]
 801badc:	f9b1 600c 	ldrsh.w	r6, [r1, #12]
 801bae0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801bae4:	4604      	mov	r4, r0
 801bae6:	460d      	mov	r5, r1
 801bae8:	f10d 0106 	add.w	r1, sp, #6
 801baec:	4798      	blx	r3
 801baee:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 801baf2:	2900      	cmp	r1, #0
 801baf4:	d035      	beq.n	801bb62 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xa6>
 801baf6:	42a1      	cmp	r1, r4
 801baf8:	d033      	beq.n	801bb62 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xa6>
 801bafa:	a802      	add	r0, sp, #8
 801bafc:	f004 f86c 	bl	801fbd8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bb00:	f8b4 20ba 	ldrh.w	r2, [r4, #186]	; 0xba
 801bb04:	88a3      	ldrh	r3, [r4, #4]
 801bb06:	f8b4 00bc 	ldrh.w	r0, [r4, #188]	; 0xbc
 801bb0a:	88e9      	ldrh	r1, [r5, #6]
 801bb0c:	f89d c006 	ldrb.w	ip, [sp, #6]
 801bb10:	4413      	add	r3, r2
 801bb12:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801bb16:	1a9b      	subs	r3, r3, r2
 801bb18:	88e2      	ldrh	r2, [r4, #6]
 801bb1a:	4402      	add	r2, r0
 801bb1c:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 801bb20:	1a12      	subs	r2, r2, r0
 801bb22:	8928      	ldrh	r0, [r5, #8]
 801bb24:	b29b      	uxth	r3, r3
 801bb26:	b292      	uxth	r2, r2
 801bb28:	4419      	add	r1, r3
 801bb2a:	4410      	add	r0, r2
 801bb2c:	b209      	sxth	r1, r1
 801bb2e:	b200      	sxth	r0, r0
 801bb30:	f1bc 0f00 	cmp.w	ip, #0
 801bb34:	f040 808f 	bne.w	801bc56 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x19a>
 801bb38:	f8b5 e00a 	ldrh.w	lr, [r5, #10]
 801bb3c:	4473      	add	r3, lr
 801bb3e:	b21b      	sxth	r3, r3
 801bb40:	f89d e007 	ldrb.w	lr, [sp, #7]
 801bb44:	f1be 0f00 	cmp.w	lr, #0
 801bb48:	f040 80b3 	bne.w	801bcb2 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f6>
 801bb4c:	f8b5 e00c 	ldrh.w	lr, [r5, #12]
 801bb50:	4472      	add	r2, lr
 801bb52:	b212      	sxth	r2, r2
 801bb54:	f1bc 0f00 	cmp.w	ip, #0
 801bb58:	f000 80ca 	beq.w	801bcf0 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x234>
 801bb5c:	4290      	cmp	r0, r2
 801bb5e:	f040 80b0 	bne.w	801bcc2 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x206>
 801bb62:	f894 30ab 	ldrb.w	r3, [r4, #171]	; 0xab
 801bb66:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 801bb6a:	2b00      	cmp	r3, #0
 801bb6c:	f040 809b 	bne.w	801bca6 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1ea>
 801bb70:	896e      	ldrh	r6, [r5, #10]
 801bb72:	f8b4 30ba 	ldrh.w	r3, [r4, #186]	; 0xba
 801bb76:	f8b4 20bc 	ldrh.w	r2, [r4, #188]	; 0xbc
 801bb7a:	89ad      	ldrh	r5, [r5, #12]
 801bb7c:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
 801bb80:	f8b4 80a8 	ldrh.w	r8, [r4, #168]	; 0xa8
 801bb84:	4419      	add	r1, r3
 801bb86:	4490      	add	r8, r2
 801bb88:	4433      	add	r3, r6
 801bb8a:	442a      	add	r2, r5
 801bb8c:	f89d 5006 	ldrb.w	r5, [sp, #6]
 801bb90:	b29b      	uxth	r3, r3
 801bb92:	b292      	uxth	r2, r2
 801bb94:	b289      	uxth	r1, r1
 801bb96:	fa1f f888 	uxth.w	r8, r8
 801bb9a:	b21f      	sxth	r7, r3
 801bb9c:	b216      	sxth	r6, r2
 801bb9e:	b165      	cbz	r5, 801bbba <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xfe>
 801bba0:	1a5b      	subs	r3, r3, r1
 801bba2:	b29b      	uxth	r3, r3
 801bba4:	b21d      	sxth	r5, r3
 801bba6:	2d00      	cmp	r5, #0
 801bba8:	bfbc      	itt	lt
 801bbaa:	425b      	neglt	r3, r3
 801bbac:	b21d      	sxthlt	r5, r3
 801bbae:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 801bbb2:	42ab      	cmp	r3, r5
 801bbb4:	bfac      	ite	ge
 801bbb6:	2500      	movge	r5, #0
 801bbb8:	2501      	movlt	r5, #1
 801bbba:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801bbbe:	b15b      	cbz	r3, 801bbd8 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x11c>
 801bbc0:	eba2 0308 	sub.w	r3, r2, r8
 801bbc4:	b29b      	uxth	r3, r3
 801bbc6:	b21a      	sxth	r2, r3
 801bbc8:	2a00      	cmp	r2, #0
 801bbca:	bfbc      	itt	lt
 801bbcc:	425b      	neglt	r3, r3
 801bbce:	b21a      	sxthlt	r2, r3
 801bbd0:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 801bbd4:	4293      	cmp	r3, r2
 801bbd6:	db01      	blt.n	801bbdc <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x120>
 801bbd8:	2d00      	cmp	r5, #0
 801bbda:	d03e      	beq.n	801bc5a <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x19e>
 801bbdc:	2501      	movs	r5, #1
 801bbde:	fa0f f981 	sxth.w	r9, r1
 801bbe2:	fa0f f888 	sxth.w	r8, r8
 801bbe6:	f884 50ab 	strb.w	r5, [r4, #171]	; 0xab
 801bbea:	b1a0      	cbz	r0, 801bc16 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x15a>
 801bbec:	f894 30be 	ldrb.w	r3, [r4, #190]	; 0xbe
 801bbf0:	b98b      	cbnz	r3, 801bc16 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x15a>
 801bbf2:	4a41      	ldr	r2, [pc, #260]	; (801bcf8 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x23c>)
 801bbf4:	9204      	str	r2, [sp, #16]
 801bbf6:	2202      	movs	r2, #2
 801bbf8:	f88d 2014 	strb.w	r2, [sp, #20]
 801bbfc:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bc00:	f8ad 3018 	strh.w	r3, [sp, #24]
 801bc04:	f8ad 301a 	strh.w	r3, [sp, #26]
 801bc08:	6803      	ldr	r3, [r0, #0]
 801bc0a:	a904      	add	r1, sp, #16
 801bc0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bc0e:	4798      	blx	r3
 801bc10:	2301      	movs	r3, #1
 801bc12:	f884 30be 	strb.w	r3, [r4, #190]	; 0xbe
 801bc16:	f894 10ac 	ldrb.w	r1, [r4, #172]	; 0xac
 801bc1a:	b149      	cbz	r1, 801bc30 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x174>
 801bc1c:	eba7 0109 	sub.w	r1, r7, r9
 801bc20:	b209      	sxth	r1, r1
 801bc22:	b12d      	cbz	r5, 801bc30 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x174>
 801bc24:	2900      	cmp	r1, #0
 801bc26:	dc40      	bgt.n	801bcaa <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1ee>
 801bc28:	bf14      	ite	ne
 801bc2a:	f04f 31ff 	movne.w	r1, #4294967295
 801bc2e:	2100      	moveq	r1, #0
 801bc30:	f894 20ad 	ldrb.w	r2, [r4, #173]	; 0xad
 801bc34:	b14a      	cbz	r2, 801bc4a <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x18e>
 801bc36:	eba6 0608 	sub.w	r6, r6, r8
 801bc3a:	b232      	sxth	r2, r6
 801bc3c:	b12d      	cbz	r5, 801bc4a <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x18e>
 801bc3e:	2a00      	cmp	r2, #0
 801bc40:	dc35      	bgt.n	801bcae <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f2>
 801bc42:	bf14      	ite	ne
 801bc44:	f04f 32ff 	movne.w	r2, #4294967295
 801bc48:	2200      	moveq	r2, #0
 801bc4a:	6823      	ldr	r3, [r4, #0]
 801bc4c:	4620      	mov	r0, r4
 801bc4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bc52:	4798      	blx	r3
 801bc54:	e024      	b.n	801bca0 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1e4>
 801bc56:	460b      	mov	r3, r1
 801bc58:	e772      	b.n	801bb40 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x84>
 801bc5a:	b308      	cbz	r0, 801bca0 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1e4>
 801bc5c:	f894 30be 	ldrb.w	r3, [r4, #190]	; 0xbe
 801bc60:	b9f3      	cbnz	r3, 801bca0 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1e4>
 801bc62:	ab08      	add	r3, sp, #32
 801bc64:	4620      	mov	r0, r4
 801bc66:	f843 5d18 	str.w	r5, [r3, #-24]!
 801bc6a:	4632      	mov	r2, r6
 801bc6c:	4639      	mov	r1, r7
 801bc6e:	f7ff f847 	bl	801ad00 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801bc72:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 801bc76:	9b02      	ldr	r3, [sp, #8]
 801bc78:	4298      	cmp	r0, r3
 801bc7a:	d011      	beq.n	801bca0 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1e4>
 801bc7c:	4b1e      	ldr	r3, [pc, #120]	; (801bcf8 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x23c>)
 801bc7e:	9304      	str	r3, [sp, #16]
 801bc80:	2302      	movs	r3, #2
 801bc82:	f88d 3014 	strb.w	r3, [sp, #20]
 801bc86:	f8ad 5016 	strh.w	r5, [sp, #22]
 801bc8a:	f8ad 5018 	strh.w	r5, [sp, #24]
 801bc8e:	f8ad 501a 	strh.w	r5, [sp, #26]
 801bc92:	6803      	ldr	r3, [r0, #0]
 801bc94:	a904      	add	r1, sp, #16
 801bc96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bc98:	4798      	blx	r3
 801bc9a:	2301      	movs	r3, #1
 801bc9c:	f884 30be 	strb.w	r3, [r4, #190]	; 0xbe
 801bca0:	b009      	add	sp, #36	; 0x24
 801bca2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bca6:	2500      	movs	r5, #0
 801bca8:	e79f      	b.n	801bbea <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x12e>
 801bcaa:	2101      	movs	r1, #1
 801bcac:	e7c0      	b.n	801bc30 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x174>
 801bcae:	2201      	movs	r2, #1
 801bcb0:	e7cb      	b.n	801bc4a <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x18e>
 801bcb2:	f1bc 0f00 	cmp.w	ip, #0
 801bcb6:	f47f af54 	bne.w	801bb62 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xa6>
 801bcba:	428b      	cmp	r3, r1
 801bcbc:	f43f af51 	beq.w	801bb62 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xa6>
 801bcc0:	4602      	mov	r2, r0
 801bcc2:	f8df c038 	ldr.w	ip, [pc, #56]	; 801bcfc <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x240>
 801bcc6:	f8cd c010 	str.w	ip, [sp, #16]
 801bcca:	f8ad 0018 	strh.w	r0, [sp, #24]
 801bcce:	f04f 0c00 	mov.w	ip, #0
 801bcd2:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 801bcd6:	f8ad 1016 	strh.w	r1, [sp, #22]
 801bcda:	f88d c014 	strb.w	ip, [sp, #20]
 801bcde:	f8ad 301a 	strh.w	r3, [sp, #26]
 801bce2:	f8ad 201c 	strh.w	r2, [sp, #28]
 801bce6:	6803      	ldr	r3, [r0, #0]
 801bce8:	a904      	add	r1, sp, #16
 801bcea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801bcec:	4798      	blx	r3
 801bcee:	e738      	b.n	801bb62 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xa6>
 801bcf0:	428b      	cmp	r3, r1
 801bcf2:	f43f af33 	beq.w	801bb5c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xa0>
 801bcf6:	e7e4      	b.n	801bcc2 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x206>
 801bcf8:	080326ac 	.word	0x080326ac
 801bcfc:	080326c0 	.word	0x080326c0

0801bd00 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE>:
 801bd00:	b570      	push	{r4, r5, r6, lr}
 801bd02:	b086      	sub	sp, #24
 801bd04:	aa06      	add	r2, sp, #24
 801bd06:	2300      	movs	r3, #0
 801bd08:	f88d 3002 	strb.w	r3, [sp, #2]
 801bd0c:	f802 3d15 	strb.w	r3, [r2, #-21]!
 801bd10:	6803      	ldr	r3, [r0, #0]
 801bd12:	460c      	mov	r4, r1
 801bd14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801bd18:	f10d 0102 	add.w	r1, sp, #2
 801bd1c:	4605      	mov	r5, r0
 801bd1e:	4798      	blx	r3
 801bd20:	f89d 3002 	ldrb.w	r3, [sp, #2]
 801bd24:	b10b      	cbz	r3, 801bd2a <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x2a>
 801bd26:	7923      	ldrb	r3, [r4, #4]
 801bd28:	b133      	cbz	r3, 801bd38 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x38>
 801bd2a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801bd2e:	2b00      	cmp	r3, #0
 801bd30:	d068      	beq.n	801be04 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x104>
 801bd32:	7923      	ldrb	r3, [r4, #4]
 801bd34:	2b01      	cmp	r3, #1
 801bd36:	d165      	bne.n	801be04 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x104>
 801bd38:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801bd3c:	2a00      	cmp	r2, #0
 801bd3e:	bfbc      	itt	lt
 801bd40:	4253      	neglt	r3, r2
 801bd42:	b21a      	sxthlt	r2, r3
 801bd44:	f9b5 30a4 	ldrsh.w	r3, [r5, #164]	; 0xa4
 801bd48:	4293      	cmp	r3, r2
 801bd4a:	dc5b      	bgt.n	801be04 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x104>
 801bd4c:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 801bd4e:	f8b5 10c2 	ldrh.w	r1, [r5, #194]	; 0xc2
 801bd52:	4293      	cmp	r3, r2
 801bd54:	bfa8      	it	ge
 801bd56:	4613      	movge	r3, r2
 801bd58:	2b05      	cmp	r3, #5
 801bd5a:	bfb8      	it	lt
 801bd5c:	2305      	movlt	r3, #5
 801bd5e:	f8b5 20c0 	ldrh.w	r2, [r5, #192]	; 0xc0
 801bd62:	b21b      	sxth	r3, r3
 801bd64:	435a      	muls	r2, r3
 801bd66:	fb92 f2f1 	sdiv	r2, r2, r1
 801bd6a:	b290      	uxth	r0, r2
 801bd6c:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
 801bd70:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801bd74:	3b04      	subs	r3, #4
 801bd76:	2900      	cmp	r1, #0
 801bd78:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 801bd7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801bd80:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801bd84:	bfc8      	it	gt
 801bd86:	2101      	movgt	r1, #1
 801bd88:	fb13 f301 	smulbb	r3, r3, r1
 801bd8c:	b29b      	uxth	r3, r3
 801bd8e:	b219      	sxth	r1, r3
 801bd90:	2900      	cmp	r1, #0
 801bd92:	bfb8      	it	lt
 801bd94:	425b      	neglt	r3, r3
 801bd96:	f8a5 10b4 	strh.w	r1, [r5, #180]	; 0xb4
 801bd9a:	bfb8      	it	lt
 801bd9c:	b219      	sxthlt	r1, r3
 801bd9e:	4281      	cmp	r1, r0
 801bda0:	bfd8      	it	le
 801bda2:	b288      	uxthle	r0, r1
 801bda4:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
 801bda8:	7922      	ldrb	r2, [r4, #4]
 801bdaa:	682b      	ldr	r3, [r5, #0]
 801bdac:	2a01      	cmp	r2, #1
 801bdae:	4629      	mov	r1, r5
 801bdb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801bdb2:	d129      	bne.n	801be08 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x108>
 801bdb4:	a801      	add	r0, sp, #4
 801bdb6:	4798      	blx	r3
 801bdb8:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801bdbc:	f8a5 30b2 	strh.w	r3, [r5, #178]	; 0xb2
 801bdc0:	2601      	movs	r6, #1
 801bdc2:	f885 60b8 	strb.w	r6, [r5, #184]	; 0xb8
 801bdc6:	f003 f947 	bl	801f058 <_ZN8touchgfx11Application11getInstanceEv>
 801bdca:	4629      	mov	r1, r5
 801bdcc:	f003 f94a 	bl	801f064 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 801bdd0:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
 801bdd4:	7923      	ldrb	r3, [r4, #4]
 801bdd6:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 801bdda:	b198      	cbz	r0, 801be04 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x104>
 801bddc:	f895 30be 	ldrb.w	r3, [r5, #190]	; 0xbe
 801bde0:	b983      	cbnz	r3, 801be04 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x104>
 801bde2:	4a0c      	ldr	r2, [pc, #48]	; (801be14 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x114>)
 801bde4:	9203      	str	r2, [sp, #12]
 801bde6:	2202      	movs	r2, #2
 801bde8:	f88d 2010 	strb.w	r2, [sp, #16]
 801bdec:	f8ad 3012 	strh.w	r3, [sp, #18]
 801bdf0:	f8ad 3014 	strh.w	r3, [sp, #20]
 801bdf4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bdf8:	6803      	ldr	r3, [r0, #0]
 801bdfa:	a903      	add	r1, sp, #12
 801bdfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bdfe:	4798      	blx	r3
 801be00:	f885 60be 	strb.w	r6, [r5, #190]	; 0xbe
 801be04:	b006      	add	sp, #24
 801be06:	bd70      	pop	{r4, r5, r6, pc}
 801be08:	a803      	add	r0, sp, #12
 801be0a:	4798      	blx	r3
 801be0c:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801be10:	e7d4      	b.n	801bdbc <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0xbc>
 801be12:	bf00      	nop
 801be14:	080326ac 	.word	0x080326ac

0801be18 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv>:
 801be18:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801be1a:	f890 30b8 	ldrb.w	r3, [r0, #184]	; 0xb8
 801be1e:	4604      	mov	r4, r0
 801be20:	2b00      	cmp	r3, #0
 801be22:	d046      	beq.n	801beb2 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x9a>
 801be24:	f8b0 00b6 	ldrh.w	r0, [r0, #182]	; 0xb6
 801be28:	f8b4 30b0 	ldrh.w	r3, [r4, #176]	; 0xb0
 801be2c:	3001      	adds	r0, #1
 801be2e:	b280      	uxth	r0, r0
 801be30:	4298      	cmp	r0, r3
 801be32:	f8a4 00b6 	strh.w	r0, [r4, #182]	; 0xb6
 801be36:	d840      	bhi.n	801beba <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0xa2>
 801be38:	f9b4 20b4 	ldrsh.w	r2, [r4, #180]	; 0xb4
 801be3c:	f9b4 10b2 	ldrsh.w	r1, [r4, #178]	; 0xb2
 801be40:	f004 fac8 	bl	80203d4 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 801be44:	b282      	uxth	r2, r0
 801be46:	f012 0301 	ands.w	r3, r2, #1
 801be4a:	4605      	mov	r5, r0
 801be4c:	d006      	beq.n	801be5c <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x44>
 801be4e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801be52:	2800      	cmp	r0, #0
 801be54:	bfd8      	it	le
 801be56:	460b      	movle	r3, r1
 801be58:	18d5      	adds	r5, r2, r3
 801be5a:	b22d      	sxth	r5, r5
 801be5c:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 801be60:	2b01      	cmp	r3, #1
 801be62:	d028      	beq.n	801beb6 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x9e>
 801be64:	6823      	ldr	r3, [r4, #0]
 801be66:	4621      	mov	r1, r4
 801be68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801be6a:	4668      	mov	r0, sp
 801be6c:	4798      	blx	r3
 801be6e:	f8bd 6000 	ldrh.w	r6, [sp]
 801be72:	1bae      	subs	r6, r5, r6
 801be74:	b236      	sxth	r6, r6
 801be76:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
 801be7a:	b142      	cbz	r2, 801be8e <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x76>
 801be7c:	6823      	ldr	r3, [r4, #0]
 801be7e:	4621      	mov	r1, r4
 801be80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801be82:	4668      	mov	r0, sp
 801be84:	4798      	blx	r3
 801be86:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801be8a:	1aad      	subs	r5, r5, r2
 801be8c:	b22a      	sxth	r2, r5
 801be8e:	6823      	ldr	r3, [r4, #0]
 801be90:	4631      	mov	r1, r6
 801be92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801be96:	4620      	mov	r0, r4
 801be98:	4798      	blx	r3
 801be9a:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
 801be9e:	f894 50b8 	ldrb.w	r5, [r4, #184]	; 0xb8
 801bea2:	b935      	cbnz	r5, 801beb2 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x9a>
 801bea4:	f003 f8d8 	bl	801f058 <_ZN8touchgfx11Application11getInstanceEv>
 801bea8:	4621      	mov	r1, r4
 801beaa:	f003 f90d 	bl	801f0c8 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 801beae:	f8a4 50b6 	strh.w	r5, [r4, #182]	; 0xb6
 801beb2:	b002      	add	sp, #8
 801beb4:	bd70      	pop	{r4, r5, r6, pc}
 801beb6:	2600      	movs	r6, #0
 801beb8:	e7dd      	b.n	801be76 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x5e>
 801beba:	2300      	movs	r3, #0
 801bebc:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
 801bec0:	e7ed      	b.n	801be9e <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x86>

0801bec2 <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE>:
 801bec2:	b470      	push	{r4, r5, r6}
 801bec4:	f890 6025 	ldrb.w	r6, [r0, #37]	; 0x25
 801bec8:	461d      	mov	r5, r3
 801beca:	b11e      	cbz	r6, 801bed4 <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE+0x12>
 801becc:	f890 6024 	ldrb.w	r6, [r0, #36]	; 0x24
 801bed0:	b116      	cbz	r6, 801bed8 <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE+0x16>
 801bed2:	6028      	str	r0, [r5, #0]
 801bed4:	bc70      	pop	{r4, r5, r6}
 801bed6:	4770      	bx	lr
 801bed8:	bc70      	pop	{r4, r5, r6}
 801beda:	f7fe bf11 	b.w	801ad00 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>

0801bede <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801bede:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bee0:	4604      	mov	r4, r0
 801bee2:	4608      	mov	r0, r1
 801bee4:	460d      	mov	r5, r1
 801bee6:	f7ff f800 	bl	801aeea <_ZNK8touchgfx4Rect7isEmptyEv>
 801beea:	b978      	cbnz	r0, 801bf0c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801beec:	4620      	mov	r0, r4
 801beee:	f7fe fffc 	bl	801aeea <_ZNK8touchgfx4Rect7isEmptyEv>
 801bef2:	f9b5 6000 	ldrsh.w	r6, [r5]
 801bef6:	b150      	cbz	r0, 801bf0e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801bef8:	8026      	strh	r6, [r4, #0]
 801befa:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801befe:	8063      	strh	r3, [r4, #2]
 801bf00:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801bf04:	80a3      	strh	r3, [r4, #4]
 801bf06:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801bf0a:	80e3      	strh	r3, [r4, #6]
 801bf0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bf0e:	f9b4 1000 	ldrsh.w	r1, [r4]
 801bf12:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801bf16:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801bf1a:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801bf1e:	88ed      	ldrh	r5, [r5, #6]
 801bf20:	42b1      	cmp	r1, r6
 801bf22:	460f      	mov	r7, r1
 801bf24:	bfa8      	it	ge
 801bf26:	4637      	movge	r7, r6
 801bf28:	4293      	cmp	r3, r2
 801bf2a:	4618      	mov	r0, r3
 801bf2c:	4466      	add	r6, ip
 801bf2e:	bfa8      	it	ge
 801bf30:	4610      	movge	r0, r2
 801bf32:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801bf36:	8027      	strh	r7, [r4, #0]
 801bf38:	442a      	add	r2, r5
 801bf3a:	88e5      	ldrh	r5, [r4, #6]
 801bf3c:	8060      	strh	r0, [r4, #2]
 801bf3e:	4461      	add	r1, ip
 801bf40:	442b      	add	r3, r5
 801bf42:	b236      	sxth	r6, r6
 801bf44:	b209      	sxth	r1, r1
 801bf46:	b212      	sxth	r2, r2
 801bf48:	b21b      	sxth	r3, r3
 801bf4a:	428e      	cmp	r6, r1
 801bf4c:	bfac      	ite	ge
 801bf4e:	ebc7 0106 	rsbge	r1, r7, r6
 801bf52:	ebc7 0101 	rsblt	r1, r7, r1
 801bf56:	429a      	cmp	r2, r3
 801bf58:	bfac      	ite	ge
 801bf5a:	ebc0 0202 	rsbge	r2, r0, r2
 801bf5e:	ebc0 0203 	rsblt	r2, r0, r3
 801bf62:	80a1      	strh	r1, [r4, #4]
 801bf64:	80e2      	strh	r2, [r4, #6]
 801bf66:	e7d1      	b.n	801bf0c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

0801bf68 <_ZNK8touchgfx19ScrollableContainer16getContainedAreaEv>:
 801bf68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801bf6a:	460d      	mov	r5, r1
 801bf6c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801bf6e:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801bf72:	f9b5 200a 	ldrsh.w	r2, [r5, #10]
 801bf76:	f8ad 1004 	strh.w	r1, [sp, #4]
 801bf7a:	2300      	movs	r3, #0
 801bf7c:	4669      	mov	r1, sp
 801bf7e:	4606      	mov	r6, r0
 801bf80:	8003      	strh	r3, [r0, #0]
 801bf82:	8043      	strh	r3, [r0, #2]
 801bf84:	8083      	strh	r3, [r0, #4]
 801bf86:	80c3      	strh	r3, [r0, #6]
 801bf88:	9300      	str	r3, [sp, #0]
 801bf8a:	f8ad 2006 	strh.w	r2, [sp, #6]
 801bf8e:	f7ff ffa6 	bl	801bede <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801bf92:	f105 0738 	add.w	r7, r5, #56	; 0x38
 801bf96:	3568      	adds	r5, #104	; 0x68
 801bf98:	b164      	cbz	r4, 801bfb4 <_ZNK8touchgfx19ScrollableContainer16getContainedAreaEv+0x4c>
 801bf9a:	42bc      	cmp	r4, r7
 801bf9c:	d008      	beq.n	801bfb0 <_ZNK8touchgfx19ScrollableContainer16getContainedAreaEv+0x48>
 801bf9e:	42ac      	cmp	r4, r5
 801bfa0:	d006      	beq.n	801bfb0 <_ZNK8touchgfx19ScrollableContainer16getContainedAreaEv+0x48>
 801bfa2:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801bfa6:	b11b      	cbz	r3, 801bfb0 <_ZNK8touchgfx19ScrollableContainer16getContainedAreaEv+0x48>
 801bfa8:	1d21      	adds	r1, r4, #4
 801bfaa:	4630      	mov	r0, r6
 801bfac:	f7ff ff97 	bl	801bede <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801bfb0:	69a4      	ldr	r4, [r4, #24]
 801bfb2:	e7f1      	b.n	801bf98 <_ZNK8touchgfx19ScrollableContainer16getContainedAreaEv+0x30>
 801bfb4:	4630      	mov	r0, r6
 801bfb6:	b003      	add	sp, #12
 801bfb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801bfbc <_ZN8touchgfx19ScrollableContainerC1Ev>:
 801bfbc:	b538      	push	{r3, r4, r5, lr}
 801bfbe:	2300      	movs	r3, #0
 801bfc0:	8083      	strh	r3, [r0, #4]
 801bfc2:	80c3      	strh	r3, [r0, #6]
 801bfc4:	8103      	strh	r3, [r0, #8]
 801bfc6:	8143      	strh	r3, [r0, #10]
 801bfc8:	8183      	strh	r3, [r0, #12]
 801bfca:	81c3      	strh	r3, [r0, #14]
 801bfcc:	8203      	strh	r3, [r0, #16]
 801bfce:	8243      	strh	r3, [r0, #18]
 801bfd0:	e9c0 3305 	strd	r3, r3, [r0, #20]
 801bfd4:	61c3      	str	r3, [r0, #28]
 801bfd6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 801bfda:	6283      	str	r3, [r0, #40]	; 0x28
 801bfdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 801bfe0:	2201      	movs	r2, #1
 801bfe2:	8583      	strh	r3, [r0, #44]	; 0x2c
 801bfe4:	2378      	movs	r3, #120	; 0x78
 801bfe6:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 801bfea:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
 801bfee:	4a41      	ldr	r2, [pc, #260]	; (801c0f4 <_ZN8touchgfx19ScrollableContainerC1Ev+0x138>)
 801bff0:	4b41      	ldr	r3, [pc, #260]	; (801c0f8 <_ZN8touchgfx19ScrollableContainerC1Ev+0x13c>)
 801bff2:	6002      	str	r2, [r0, #0]
 801bff4:	681b      	ldr	r3, [r3, #0]
 801bff6:	4604      	mov	r4, r0
 801bff8:	b92b      	cbnz	r3, 801c006 <_ZN8touchgfx19ScrollableContainerC1Ev+0x4a>
 801bffa:	4b40      	ldr	r3, [pc, #256]	; (801c0fc <_ZN8touchgfx19ScrollableContainerC1Ev+0x140>)
 801bffc:	4a40      	ldr	r2, [pc, #256]	; (801c100 <_ZN8touchgfx19ScrollableContainerC1Ev+0x144>)
 801bffe:	4841      	ldr	r0, [pc, #260]	; (801c104 <_ZN8touchgfx19ScrollableContainerC1Ev+0x148>)
 801c000:	2135      	movs	r1, #53	; 0x35
 801c002:	f012 f931 	bl	802e268 <__assert_func>
 801c006:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801c00a:	b10a      	cbz	r2, 801c010 <_ZN8touchgfx19ScrollableContainerC1Ev+0x54>
 801c00c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801c00e:	b900      	cbnz	r0, 801c012 <_ZN8touchgfx19ScrollableContainerC1Ev+0x56>
 801c010:	6898      	ldr	r0, [r3, #8]
 801c012:	6803      	ldr	r3, [r0, #0]
 801c014:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 801c016:	23ff      	movs	r3, #255	; 0xff
 801c018:	461a      	mov	r2, r3
 801c01a:	4619      	mov	r1, r3
 801c01c:	47a8      	blx	r5
 801c01e:	2300      	movs	r3, #0
 801c020:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 801c024:	4938      	ldr	r1, [pc, #224]	; (801c108 <_ZN8touchgfx19ScrollableContainerC1Ev+0x14c>)
 801c026:	6320      	str	r0, [r4, #48]	; 0x30
 801c028:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
 801c02c:	87a3      	strh	r3, [r4, #60]	; 0x3c
 801c02e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 801c030:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801c034:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
 801c038:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
 801c03c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 801c040:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 801c044:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
 801c048:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 801c04c:	6563      	str	r3, [r4, #84]	; 0x54
 801c04e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 801c052:	63a1      	str	r1, [r4, #56]	; 0x38
 801c054:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
 801c058:	6620      	str	r0, [r4, #96]	; 0x60
 801c05a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 801c05e:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 801c062:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 801c066:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
 801c06a:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
 801c06e:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
 801c072:	f8a4 3076 	strh.w	r3, [r4, #118]	; 0x76
 801c076:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
 801c07a:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
 801c07e:	e9c4 331f 	strd	r3, r3, [r4, #124]	; 0x7c
 801c082:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 801c086:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
 801c08a:	66a1      	str	r1, [r4, #104]	; 0x68
 801c08c:	f884 208e 	strb.w	r2, [r4, #142]	; 0x8e
 801c090:	2205      	movs	r2, #5
 801c092:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
 801c096:	e9c4 3326 	strd	r3, r3, [r4, #152]	; 0x98
 801c09a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 801c09e:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
 801c0a2:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
 801c0a6:	2201      	movs	r2, #1
 801c0a8:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
 801c0ac:	f884 30ab 	strb.w	r3, [r4, #171]	; 0xab
 801c0b0:	f884 30af 	strb.w	r3, [r4, #175]	; 0xaf
 801c0b4:	e9c4 332c 	strd	r3, r3, [r4, #176]	; 0xb0
 801c0b8:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
 801c0bc:	f8a4 30ba 	strh.w	r3, [r4, #186]	; 0xba
 801c0c0:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
 801c0c4:	f884 30be 	strb.w	r3, [r4, #190]	; 0xbe
 801c0c8:	4910      	ldr	r1, [pc, #64]	; (801c10c <_ZN8touchgfx19ScrollableContainerC1Ev+0x150>)
 801c0ca:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 801c0ce:	f884 308d 	strb.w	r3, [r4, #141]	; 0x8d
 801c0d2:	2311      	movs	r3, #17
 801c0d4:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
 801c0d8:	f884 20ac 	strb.w	r2, [r4, #172]	; 0xac
 801c0dc:	f884 20ad 	strb.w	r2, [r4, #173]	; 0xad
 801c0e0:	f884 20ae 	strb.w	r2, [r4, #174]	; 0xae
 801c0e4:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
 801c0e8:	86a3      	strh	r3, [r4, #52]	; 0x34
 801c0ea:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 801c0ee:	4620      	mov	r0, r4
 801c0f0:	bd38      	pop	{r3, r4, r5, pc}
 801c0f2:	bf00      	nop
 801c0f4:	0803273c 	.word	0x0803273c
 801c0f8:	200128a4 	.word	0x200128a4
 801c0fc:	080326cc 	.word	0x080326cc
 801c100:	080327c8 	.word	0x080327c8
 801c104:	0803270f 	.word	0x0803270f
 801c108:	08033230 	.word	0x08033230
 801c10c:	00010007 	.word	0x00010007

0801c110 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv>:
 801c110:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c112:	f891 30ac 	ldrb.w	r3, [r1, #172]	; 0xac
 801c116:	2600      	movs	r6, #0
 801c118:	4605      	mov	r5, r0
 801c11a:	460c      	mov	r4, r1
 801c11c:	8006      	strh	r6, [r0, #0]
 801c11e:	8046      	strh	r6, [r0, #2]
 801c120:	8086      	strh	r6, [r0, #4]
 801c122:	80c6      	strh	r6, [r0, #6]
 801c124:	2b00      	cmp	r3, #0
 801c126:	d041      	beq.n	801c1ac <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x9c>
 801c128:	680b      	ldr	r3, [r1, #0]
 801c12a:	4668      	mov	r0, sp
 801c12c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801c12e:	4798      	blx	r3
 801c130:	f894 30ad 	ldrb.w	r3, [r4, #173]	; 0xad
 801c134:	f9bd 7004 	ldrsh.w	r7, [sp, #4]
 801c138:	2b00      	cmp	r3, #0
 801c13a:	d03a      	beq.n	801c1b2 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0xa2>
 801c13c:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801c140:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801c144:	429a      	cmp	r2, r3
 801c146:	dd05      	ble.n	801c154 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x44>
 801c148:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801c14c:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 801c150:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801c154:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801c158:	42bb      	cmp	r3, r7
 801c15a:	da27      	bge.n	801c1ac <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x9c>
 801c15c:	f9bd 1000 	ldrsh.w	r1, [sp]
 801c160:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801c164:	424a      	negs	r2, r1
 801c166:	4439      	add	r1, r7
 801c168:	b209      	sxth	r1, r1
 801c16a:	1ac9      	subs	r1, r1, r3
 801c16c:	435a      	muls	r2, r3
 801c16e:	eba3 0c40 	sub.w	ip, r3, r0, lsl #1
 801c172:	fb92 f2f7 	sdiv	r2, r2, r7
 801c176:	434b      	muls	r3, r1
 801c178:	fb93 f3f7 	sdiv	r3, r3, r7
 801c17c:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 801c180:	ebac 0606 	sub.w	r6, ip, r6
 801c184:	4413      	add	r3, r2
 801c186:	1af3      	subs	r3, r6, r3
 801c188:	0079      	lsls	r1, r7, #1
 801c18a:	4299      	cmp	r1, r3
 801c18c:	dd05      	ble.n	801c19a <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x8a>
 801c18e:	1acb      	subs	r3, r1, r3
 801c190:	4353      	muls	r3, r2
 801c192:	fb93 f3f6 	sdiv	r3, r3, r6
 801c196:	1ad2      	subs	r2, r2, r3
 801c198:	460b      	mov	r3, r1
 801c19a:	8961      	ldrh	r1, [r4, #10]
 801c19c:	80ab      	strh	r3, [r5, #4]
 801c19e:	b280      	uxth	r0, r0
 801c1a0:	1bc9      	subs	r1, r1, r7
 801c1a2:	1a09      	subs	r1, r1, r0
 801c1a4:	4410      	add	r0, r2
 801c1a6:	8028      	strh	r0, [r5, #0]
 801c1a8:	8069      	strh	r1, [r5, #2]
 801c1aa:	80ef      	strh	r7, [r5, #6]
 801c1ac:	4628      	mov	r0, r5
 801c1ae:	b003      	add	sp, #12
 801c1b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c1b2:	461e      	mov	r6, r3
 801c1b4:	e7ce      	b.n	801c154 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x44>

0801c1b6 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv>:
 801c1b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c1b8:	f891 30ad 	ldrb.w	r3, [r1, #173]	; 0xad
 801c1bc:	2600      	movs	r6, #0
 801c1be:	4605      	mov	r5, r0
 801c1c0:	460c      	mov	r4, r1
 801c1c2:	8006      	strh	r6, [r0, #0]
 801c1c4:	8046      	strh	r6, [r0, #2]
 801c1c6:	8086      	strh	r6, [r0, #4]
 801c1c8:	80c6      	strh	r6, [r0, #6]
 801c1ca:	2b00      	cmp	r3, #0
 801c1cc:	d041      	beq.n	801c252 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x9c>
 801c1ce:	680b      	ldr	r3, [r1, #0]
 801c1d0:	4668      	mov	r0, sp
 801c1d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801c1d4:	4798      	blx	r3
 801c1d6:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 801c1da:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 801c1de:	2b00      	cmp	r3, #0
 801c1e0:	d03a      	beq.n	801c258 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0xa2>
 801c1e2:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801c1e6:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801c1ea:	429a      	cmp	r2, r3
 801c1ec:	dd05      	ble.n	801c1fa <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x44>
 801c1ee:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801c1f2:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 801c1f6:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801c1fa:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801c1fe:	42bb      	cmp	r3, r7
 801c200:	da27      	bge.n	801c252 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x9c>
 801c202:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 801c206:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801c20a:	424a      	negs	r2, r1
 801c20c:	4439      	add	r1, r7
 801c20e:	b209      	sxth	r1, r1
 801c210:	1ac9      	subs	r1, r1, r3
 801c212:	435a      	muls	r2, r3
 801c214:	eba3 0c40 	sub.w	ip, r3, r0, lsl #1
 801c218:	fb92 f2f7 	sdiv	r2, r2, r7
 801c21c:	434b      	muls	r3, r1
 801c21e:	fb93 f3f7 	sdiv	r3, r3, r7
 801c222:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 801c226:	ebac 0606 	sub.w	r6, ip, r6
 801c22a:	4413      	add	r3, r2
 801c22c:	1af3      	subs	r3, r6, r3
 801c22e:	0079      	lsls	r1, r7, #1
 801c230:	4299      	cmp	r1, r3
 801c232:	dd05      	ble.n	801c240 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x8a>
 801c234:	1acb      	subs	r3, r1, r3
 801c236:	4353      	muls	r3, r2
 801c238:	fb93 f3f6 	sdiv	r3, r3, r6
 801c23c:	1ad2      	subs	r2, r2, r3
 801c23e:	460b      	mov	r3, r1
 801c240:	8921      	ldrh	r1, [r4, #8]
 801c242:	80af      	strh	r7, [r5, #4]
 801c244:	b280      	uxth	r0, r0
 801c246:	1bc9      	subs	r1, r1, r7
 801c248:	1a09      	subs	r1, r1, r0
 801c24a:	4410      	add	r0, r2
 801c24c:	8029      	strh	r1, [r5, #0]
 801c24e:	8068      	strh	r0, [r5, #2]
 801c250:	80eb      	strh	r3, [r5, #6]
 801c252:	4628      	mov	r0, r5
 801c254:	b003      	add	sp, #12
 801c256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c258:	461e      	mov	r6, r3
 801c25a:	e7ce      	b.n	801c1fa <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x44>

0801c25c <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_>:
 801c25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c260:	4617      	mov	r7, r2
 801c262:	2200      	movs	r2, #0
 801c264:	8002      	strh	r2, [r0, #0]
 801c266:	8042      	strh	r2, [r0, #2]
 801c268:	8082      	strh	r2, [r0, #4]
 801c26a:	80c2      	strh	r2, [r0, #6]
 801c26c:	4604      	mov	r4, r0
 801c26e:	4638      	mov	r0, r7
 801c270:	460e      	mov	r6, r1
 801c272:	4698      	mov	r8, r3
 801c274:	f7fe fe39 	bl	801aeea <_ZNK8touchgfx4Rect7isEmptyEv>
 801c278:	4605      	mov	r5, r0
 801c27a:	b998      	cbnz	r0, 801c2a4 <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_+0x48>
 801c27c:	4640      	mov	r0, r8
 801c27e:	f7fe fe34 	bl	801aeea <_ZNK8touchgfx4Rect7isEmptyEv>
 801c282:	f896 202c 	ldrb.w	r2, [r6, #44]	; 0x2c
 801c286:	f896 102d 	ldrb.w	r1, [r6, #45]	; 0x2d
 801c28a:	b908      	cbnz	r0, 801c290 <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_+0x34>
 801c28c:	eb01 0542 	add.w	r5, r1, r2, lsl #1
 801c290:	8933      	ldrh	r3, [r6, #8]
 801c292:	f9b7 7002 	ldrsh.w	r7, [r7, #2]
 801c296:	8022      	strh	r2, [r4, #0]
 801c298:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801c29c:	1b58      	subs	r0, r3, r5
 801c29e:	8067      	strh	r7, [r4, #2]
 801c2a0:	80a0      	strh	r0, [r4, #4]
 801c2a2:	80e1      	strh	r1, [r4, #6]
 801c2a4:	4620      	mov	r0, r4
 801c2a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c2aa <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_>:
 801c2aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c2ae:	4604      	mov	r4, r0
 801c2b0:	2000      	movs	r0, #0
 801c2b2:	8020      	strh	r0, [r4, #0]
 801c2b4:	8060      	strh	r0, [r4, #2]
 801c2b6:	80a0      	strh	r0, [r4, #4]
 801c2b8:	80e0      	strh	r0, [r4, #6]
 801c2ba:	4618      	mov	r0, r3
 801c2bc:	460f      	mov	r7, r1
 801c2be:	4616      	mov	r6, r2
 801c2c0:	4698      	mov	r8, r3
 801c2c2:	f7fe fe12 	bl	801aeea <_ZNK8touchgfx4Rect7isEmptyEv>
 801c2c6:	4605      	mov	r5, r0
 801c2c8:	b998      	cbnz	r0, 801c2f2 <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_+0x48>
 801c2ca:	4630      	mov	r0, r6
 801c2cc:	f7fe fe0d 	bl	801aeea <_ZNK8touchgfx4Rect7isEmptyEv>
 801c2d0:	f897 602c 	ldrb.w	r6, [r7, #44]	; 0x2c
 801c2d4:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 801c2d8:	b908      	cbnz	r0, 801c2de <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_+0x34>
 801c2da:	eb01 0546 	add.w	r5, r1, r6, lsl #1
 801c2de:	897a      	ldrh	r2, [r7, #10]
 801c2e0:	f8b8 3000 	ldrh.w	r3, [r8]
 801c2e4:	8023      	strh	r3, [r4, #0]
 801c2e6:	eba2 0246 	sub.w	r2, r2, r6, lsl #1
 801c2ea:	1b50      	subs	r0, r2, r5
 801c2ec:	8066      	strh	r6, [r4, #2]
 801c2ee:	80a1      	strh	r1, [r4, #4]
 801c2f0:	80e0      	strh	r0, [r4, #6]
 801c2f2:	4620      	mov	r0, r4
 801c2f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c2f8 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>:
 801c2f8:	b570      	push	{r4, r5, r6, lr}
 801c2fa:	b08a      	sub	sp, #40	; 0x28
 801c2fc:	4604      	mov	r4, r0
 801c2fe:	4601      	mov	r1, r0
 801c300:	a802      	add	r0, sp, #8
 801c302:	f7ff ff05 	bl	801c110 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv>
 801c306:	4621      	mov	r1, r4
 801c308:	a804      	add	r0, sp, #16
 801c30a:	f7ff ff54 	bl	801c1b6 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv>
 801c30e:	ab04      	add	r3, sp, #16
 801c310:	aa02      	add	r2, sp, #8
 801c312:	4621      	mov	r1, r4
 801c314:	a806      	add	r0, sp, #24
 801c316:	f7ff ffa1 	bl	801c25c <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_>
 801c31a:	ab04      	add	r3, sp, #16
 801c31c:	aa02      	add	r2, sp, #8
 801c31e:	4621      	mov	r1, r4
 801c320:	a808      	add	r0, sp, #32
 801c322:	f7ff ffc2 	bl	801c2aa <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_>
 801c326:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 801c32a:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 801c32e:	429a      	cmp	r2, r3
 801c330:	f104 0638 	add.w	r6, r4, #56	; 0x38
 801c334:	da02      	bge.n	801c33c <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0x44>
 801c336:	4630      	mov	r0, r6
 801c338:	f003 fba5 	bl	801fa86 <_ZNK8touchgfx8Drawable10invalidateEv>
 801c33c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801c340:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	; 0x6c
 801c344:	429a      	cmp	r2, r3
 801c346:	f104 0568 	add.w	r5, r4, #104	; 0x68
 801c34a:	da02      	bge.n	801c352 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0x5a>
 801c34c:	4628      	mov	r0, r5
 801c34e:	f003 fb9a 	bl	801fa86 <_ZNK8touchgfx8Drawable10invalidateEv>
 801c352:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
 801c356:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801c35a:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801c35e:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801c362:	9000      	str	r0, [sp, #0]
 801c364:	4630      	mov	r0, r6
 801c366:	f7f0 facd 	bl	800c904 <_ZN8touchgfx8Drawable11setPositionEssss>
 801c36a:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801c36e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801c372:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 801c376:	9000      	str	r0, [sp, #0]
 801c378:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 801c37c:	4628      	mov	r0, r5
 801c37e:	f7f0 fac1 	bl	800c904 <_ZN8touchgfx8Drawable11setPositionEssss>
 801c382:	8922      	ldrh	r2, [r4, #8]
 801c384:	f8ad 201c 	strh.w	r2, [sp, #28]
 801c388:	2300      	movs	r3, #0
 801c38a:	8962      	ldrh	r2, [r4, #10]
 801c38c:	f8ad 3018 	strh.w	r3, [sp, #24]
 801c390:	a806      	add	r0, sp, #24
 801c392:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801c396:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801c39a:	f7fe fda6 	bl	801aeea <_ZNK8touchgfx4Rect7isEmptyEv>
 801c39e:	b920      	cbnz	r0, 801c3aa <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0xb2>
 801c3a0:	6823      	ldr	r3, [r4, #0]
 801c3a2:	a906      	add	r1, sp, #24
 801c3a4:	691b      	ldr	r3, [r3, #16]
 801c3a6:	4620      	mov	r0, r4
 801c3a8:	4798      	blx	r3
 801c3aa:	a808      	add	r0, sp, #32
 801c3ac:	f7fe fd9d 	bl	801aeea <_ZNK8touchgfx4Rect7isEmptyEv>
 801c3b0:	b920      	cbnz	r0, 801c3bc <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0xc4>
 801c3b2:	6823      	ldr	r3, [r4, #0]
 801c3b4:	a908      	add	r1, sp, #32
 801c3b6:	691b      	ldr	r3, [r3, #16]
 801c3b8:	4620      	mov	r0, r4
 801c3ba:	4798      	blx	r3
 801c3bc:	b00a      	add	sp, #40	; 0x28
 801c3be:	bd70      	pop	{r4, r5, r6, pc}

0801c3c0 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE>:
 801c3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3c4:	790b      	ldrb	r3, [r1, #4]
 801c3c6:	b0a3      	sub	sp, #140	; 0x8c
 801c3c8:	4604      	mov	r4, r0
 801c3ca:	460d      	mov	r5, r1
 801c3cc:	2b00      	cmp	r3, #0
 801c3ce:	f040 8115 	bne.w	801c5fc <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x23c>
 801c3d2:	2201      	movs	r2, #1
 801c3d4:	f880 20aa 	strb.w	r2, [r0, #170]	; 0xaa
 801c3d8:	f890 20b8 	ldrb.w	r2, [r0, #184]	; 0xb8
 801c3dc:	b142      	cbz	r2, 801c3f0 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x30>
 801c3de:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 801c3e2:	f8a0 30b6 	strh.w	r3, [r0, #182]	; 0xb6
 801c3e6:	f002 fe37 	bl	801f058 <_ZN8touchgfx11Application11getInstanceEv>
 801c3ea:	4621      	mov	r1, r4
 801c3ec:	f002 fe6c 	bl	801f0c8 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 801c3f0:	4b9b      	ldr	r3, [pc, #620]	; (801c660 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x2a0>)
 801c3f2:	681b      	ldr	r3, [r3, #0]
 801c3f4:	f893 8049 	ldrb.w	r8, [r3, #73]	; 0x49
 801c3f8:	2300      	movs	r3, #0
 801c3fa:	f1b8 0f03 	cmp.w	r8, #3
 801c3fe:	f8a4 30ba 	strh.w	r3, [r4, #186]	; 0xba
 801c402:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
 801c406:	f340 80ef 	ble.w	801c5e8 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x228>
 801c40a:	f1b8 0f0c 	cmp.w	r8, #12
 801c40e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 801c412:	f04f 0303 	mov.w	r3, #3
 801c416:	bfd6      	itet	le
 801c418:	f108 32ff 	addle.w	r2, r8, #4294967295
 801c41c:	469a      	movgt	sl, r3
 801c41e:	fb92 faf3 	sdivle	sl, r2, r3
 801c422:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801c426:	9306      	str	r3, [sp, #24]
 801c428:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801c42c:	9307      	str	r3, [sp, #28]
 801c42e:	9b06      	ldr	r3, [sp, #24]
 801c430:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801c434:	9b07      	ldr	r3, [sp, #28]
 801c436:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801c43a:	6823      	ldr	r3, [r4, #0]
 801c43c:	2600      	movs	r6, #0
 801c43e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c440:	960a      	str	r6, [sp, #40]	; 0x28
 801c442:	a90a      	add	r1, sp, #40	; 0x28
 801c444:	4620      	mov	r0, r4
 801c446:	4798      	blx	r3
 801c448:	e9cd 6801 	strd	r6, r8, [sp, #4]
 801c44c:	f04f 33ff 	mov.w	r3, #4294967295
 801c450:	9305      	str	r3, [sp, #20]
 801c452:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
 801c456:	2250      	movs	r2, #80	; 0x50
 801c458:	4982      	ldr	r1, [pc, #520]	; (801c664 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x2a4>)
 801c45a:	9b02      	ldr	r3, [sp, #8]
 801c45c:	fb93 f7fa 	sdiv	r7, r3, sl
 801c460:	4658      	mov	r0, fp
 801c462:	f012 f866 	bl	802e532 <memcpy>
 801c466:	b2bb      	uxth	r3, r7
 801c468:	46b1      	mov	r9, r6
 801c46a:	9303      	str	r3, [sp, #12]
 801c46c:	2300      	movs	r3, #0
 801c46e:	9309      	str	r3, [sp, #36]	; 0x24
 801c470:	9a03      	ldr	r2, [sp, #12]
 801c472:	f85b 3039 	ldr.w	r3, [fp, r9, lsl #3]
 801c476:	88e9      	ldrh	r1, [r5, #6]
 801c478:	fb13 f302 	smulbb	r3, r3, r2
 801c47c:	b29b      	uxth	r3, r3
 801c47e:	4419      	add	r1, r3
 801c480:	b209      	sxth	r1, r1
 801c482:	2900      	cmp	r1, #0
 801c484:	9304      	str	r3, [sp, #16]
 801c486:	db49      	blt.n	801c51c <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x15c>
 801c488:	9b06      	ldr	r3, [sp, #24]
 801c48a:	4299      	cmp	r1, r3
 801c48c:	da46      	bge.n	801c51c <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x15c>
 801c48e:	eb0b 03c9 	add.w	r3, fp, r9, lsl #3
 801c492:	685f      	ldr	r7, [r3, #4]
 801c494:	fb17 f702 	smulbb	r7, r7, r2
 801c498:	892a      	ldrh	r2, [r5, #8]
 801c49a:	b2bf      	uxth	r7, r7
 801c49c:	443a      	add	r2, r7
 801c49e:	b212      	sxth	r2, r2
 801c4a0:	2a00      	cmp	r2, #0
 801c4a2:	db3b      	blt.n	801c51c <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x15c>
 801c4a4:	9b07      	ldr	r3, [sp, #28]
 801c4a6:	429a      	cmp	r2, r3
 801c4a8:	da38      	bge.n	801c51c <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x15c>
 801c4aa:	ab09      	add	r3, sp, #36	; 0x24
 801c4ac:	4620      	mov	r0, r4
 801c4ae:	f7fe fc27 	bl	801ad00 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801c4b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c4b4:	b391      	cbz	r1, 801c51c <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x15c>
 801c4b6:	9b01      	ldr	r3, [sp, #4]
 801c4b8:	4299      	cmp	r1, r3
 801c4ba:	d02f      	beq.n	801c51c <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x15c>
 801c4bc:	42a1      	cmp	r1, r4
 801c4be:	d02d      	beq.n	801c51c <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x15c>
 801c4c0:	a80c      	add	r0, sp, #48	; 0x30
 801c4c2:	f003 fb89 	bl	801fbd8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c4c6:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801c4ca:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801c4ce:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801c4d2:	440b      	add	r3, r1
 801c4d4:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801c4d8:	2002      	movs	r0, #2
 801c4da:	fb92 f2f0 	sdiv	r2, r2, r0
 801c4de:	440a      	add	r2, r1
 801c4e0:	1a99      	subs	r1, r3, r2
 801c4e2:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 801c4e6:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801c4ea:	441a      	add	r2, r3
 801c4ec:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801c4f0:	fb93 f3f0 	sdiv	r3, r3, r0
 801c4f4:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801c4f8:	4403      	add	r3, r0
 801c4fa:	1ad3      	subs	r3, r2, r3
 801c4fc:	435b      	muls	r3, r3
 801c4fe:	9a05      	ldr	r2, [sp, #20]
 801c500:	fb01 3301 	mla	r3, r1, r1, r3
 801c504:	4293      	cmp	r3, r2
 801c506:	d209      	bcs.n	801c51c <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x15c>
 801c508:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c50a:	9201      	str	r2, [sp, #4]
 801c50c:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
 801c510:	9a04      	ldr	r2, [sp, #16]
 801c512:	f8a4 20ba 	strh.w	r2, [r4, #186]	; 0xba
 801c516:	f8a4 70bc 	strh.w	r7, [r4, #188]	; 0xbc
 801c51a:	9305      	str	r3, [sp, #20]
 801c51c:	f109 0902 	add.w	r9, r9, #2
 801c520:	f1b9 0f09 	cmp.w	r9, #9
 801c524:	dda2      	ble.n	801c46c <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xac>
 801c526:	9b02      	ldr	r3, [sp, #8]
 801c528:	3601      	adds	r6, #1
 801c52a:	4443      	add	r3, r8
 801c52c:	45b2      	cmp	sl, r6
 801c52e:	9302      	str	r3, [sp, #8]
 801c530:	d191      	bne.n	801c456 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x96>
 801c532:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 801c536:	42a3      	cmp	r3, r4
 801c538:	bf04      	itt	eq
 801c53a:	2300      	moveq	r3, #0
 801c53c:	f8c4 3098 	streq.w	r3, [r4, #152]	; 0x98
 801c540:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 801c544:	2900      	cmp	r1, #0
 801c546:	d034      	beq.n	801c5b2 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x1f2>
 801c548:	2600      	movs	r6, #0
 801c54a:	f884 60be 	strb.w	r6, [r4, #190]	; 0xbe
 801c54e:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801c552:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 801c556:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 801c55a:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
 801c55e:	a80c      	add	r0, sp, #48	; 0x30
 801c560:	f003 fb3a 	bl	801fbd8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c564:	f8b4 30ba 	ldrh.w	r3, [r4, #186]	; 0xba
 801c568:	88a2      	ldrh	r2, [r4, #4]
 801c56a:	f8b4 00bc 	ldrh.w	r0, [r4, #188]	; 0xbc
 801c56e:	7929      	ldrb	r1, [r5, #4]
 801c570:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801c574:	441a      	add	r2, r3
 801c576:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801c57a:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801c57e:	1ad2      	subs	r2, r2, r3
 801c580:	88eb      	ldrh	r3, [r5, #6]
 801c582:	441a      	add	r2, r3
 801c584:	88e3      	ldrh	r3, [r4, #6]
 801c586:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801c58a:	4403      	add	r3, r0
 801c58c:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801c590:	1a1b      	subs	r3, r3, r0
 801c592:	8928      	ldrh	r0, [r5, #8]
 801c594:	4403      	add	r3, r0
 801c596:	4834      	ldr	r0, [pc, #208]	; (801c668 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x2a8>)
 801c598:	900e      	str	r0, [sp, #56]	; 0x38
 801c59a:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 801c59e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801c5a2:	6803      	ldr	r3, [r0, #0]
 801c5a4:	a90e      	add	r1, sp, #56	; 0x38
 801c5a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c5a8:	4798      	blx	r3
 801c5aa:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 801c5ae:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 801c5b2:	f894 20aa 	ldrb.w	r2, [r4, #170]	; 0xaa
 801c5b6:	2300      	movs	r3, #0
 801c5b8:	f884 30ab 	strb.w	r3, [r4, #171]	; 0xab
 801c5bc:	b112      	cbz	r2, 801c5c4 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x204>
 801c5be:	f894 30ae 	ldrb.w	r3, [r4, #174]	; 0xae
 801c5c2:	b90b      	cbnz	r3, 801c5c8 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x208>
 801c5c4:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
 801c5c8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 801c5cc:	b112      	cbz	r2, 801c5d4 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x214>
 801c5ce:	f894 30ae 	ldrb.w	r3, [r4, #174]	; 0xae
 801c5d2:	b90b      	cbnz	r3, 801c5d8 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x218>
 801c5d4:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
 801c5d8:	f884 308d 	strb.w	r3, [r4, #141]	; 0x8d
 801c5dc:	4620      	mov	r0, r4
 801c5de:	f7ff fe8b 	bl	801c2f8 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 801c5e2:	b023      	add	sp, #140	; 0x8c
 801c5e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c5e8:	f104 0398 	add.w	r3, r4, #152	; 0x98
 801c5ec:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801c5f0:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801c5f4:	4620      	mov	r0, r4
 801c5f6:	f7fe fb83 	bl	801ad00 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801c5fa:	e79a      	b.n	801c532 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x172>
 801c5fc:	2b02      	cmp	r3, #2
 801c5fe:	d0f0      	beq.n	801c5e2 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x222>
 801c600:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
 801c604:	b331      	cbz	r1, 801c654 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x294>
 801c606:	a80c      	add	r0, sp, #48	; 0x30
 801c608:	f003 fae6 	bl	801fbd8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c60c:	f8b4 30ba 	ldrh.w	r3, [r4, #186]	; 0xba
 801c610:	88a2      	ldrh	r2, [r4, #4]
 801c612:	f8b4 00bc 	ldrh.w	r0, [r4, #188]	; 0xbc
 801c616:	7929      	ldrb	r1, [r5, #4]
 801c618:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801c61c:	441a      	add	r2, r3
 801c61e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801c622:	1ad2      	subs	r2, r2, r3
 801c624:	88eb      	ldrh	r3, [r5, #6]
 801c626:	441a      	add	r2, r3
 801c628:	88e3      	ldrh	r3, [r4, #6]
 801c62a:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801c62e:	4403      	add	r3, r0
 801c630:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801c634:	1a1b      	subs	r3, r3, r0
 801c636:	8928      	ldrh	r0, [r5, #8]
 801c638:	4403      	add	r3, r0
 801c63a:	480b      	ldr	r0, [pc, #44]	; (801c668 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x2a8>)
 801c63c:	900e      	str	r0, [sp, #56]	; 0x38
 801c63e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801c642:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 801c646:	2300      	movs	r3, #0
 801c648:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801c64c:	6803      	ldr	r3, [r0, #0]
 801c64e:	a90e      	add	r1, sp, #56	; 0x38
 801c650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c652:	4798      	blx	r3
 801c654:	2300      	movs	r3, #0
 801c656:	e9c4 3326 	strd	r3, r3, [r4, #152]	; 0x98
 801c65a:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
 801c65e:	e7a8      	b.n	801c5b2 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x1f2>
 801c660:	200128a4 	.word	0x200128a4
 801c664:	08030140 	.word	0x08030140
 801c668:	080326ac 	.word	0x080326ac

0801c66c <_ZN8touchgfx19ScrollableContainer8doScrollEss>:
 801c66c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c66e:	4605      	mov	r5, r0
 801c670:	4616      	mov	r6, r2
 801c672:	460c      	mov	r4, r1
 801c674:	b919      	cbnz	r1, 801c67e <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x12>
 801c676:	b912      	cbnz	r2, 801c67e <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x12>
 801c678:	2000      	movs	r0, #0
 801c67a:	b003      	add	sp, #12
 801c67c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c67e:	682b      	ldr	r3, [r5, #0]
 801c680:	4629      	mov	r1, r5
 801c682:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801c684:	4668      	mov	r0, sp
 801c686:	4798      	blx	r3
 801c688:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 801c68c:	f9b5 0008 	ldrsh.w	r0, [r5, #8]
 801c690:	f9bd 3000 	ldrsh.w	r3, [sp]
 801c694:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 801c698:	4288      	cmp	r0, r1
 801c69a:	da36      	bge.n	801c70a <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x9e>
 801c69c:	2c00      	cmp	r4, #0
 801c69e:	dd2a      	ble.n	801c6f6 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x8a>
 801c6a0:	191a      	adds	r2, r3, r4
 801c6a2:	2a00      	cmp	r2, #0
 801c6a4:	dd01      	ble.n	801c6aa <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x3e>
 801c6a6:	425b      	negs	r3, r3
 801c6a8:	b21c      	sxth	r4, r3
 801c6aa:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 801c6ae:	429f      	cmp	r7, r3
 801c6b0:	dd36      	ble.n	801c720 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xb4>
 801c6b2:	2e00      	cmp	r6, #0
 801c6b4:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 801c6b8:	dd29      	ble.n	801c70e <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xa2>
 801c6ba:	1993      	adds	r3, r2, r6
 801c6bc:	2b00      	cmp	r3, #0
 801c6be:	dd04      	ble.n	801c6ca <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x5e>
 801c6c0:	4252      	negs	r2, r2
 801c6c2:	b216      	sxth	r6, r2
 801c6c4:	b90c      	cbnz	r4, 801c6ca <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x5e>
 801c6c6:	2e00      	cmp	r6, #0
 801c6c8:	d0d6      	beq.n	801c678 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xc>
 801c6ca:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
 801c6ce:	4423      	add	r3, r4
 801c6d0:	f8a5 30a0 	strh.w	r3, [r5, #160]	; 0xa0
 801c6d4:	f8b5 30a2 	ldrh.w	r3, [r5, #162]	; 0xa2
 801c6d8:	4433      	add	r3, r6
 801c6da:	f8a5 30a2 	strh.w	r3, [r5, #162]	; 0xa2
 801c6de:	682b      	ldr	r3, [r5, #0]
 801c6e0:	4632      	mov	r2, r6
 801c6e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c6e6:	4621      	mov	r1, r4
 801c6e8:	4628      	mov	r0, r5
 801c6ea:	4798      	blx	r3
 801c6ec:	4628      	mov	r0, r5
 801c6ee:	f7ff fe03 	bl	801c2f8 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 801c6f2:	2001      	movs	r0, #1
 801c6f4:	e7c1      	b.n	801c67a <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xe>
 801c6f6:	d0d8      	beq.n	801c6aa <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x3e>
 801c6f8:	440b      	add	r3, r1
 801c6fa:	b29b      	uxth	r3, r3
 801c6fc:	fa04 f283 	sxtah	r2, r4, r3
 801c700:	4282      	cmp	r2, r0
 801c702:	dad2      	bge.n	801c6aa <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x3e>
 801c704:	1ac4      	subs	r4, r0, r3
 801c706:	b224      	sxth	r4, r4
 801c708:	e7cf      	b.n	801c6aa <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x3e>
 801c70a:	2400      	movs	r4, #0
 801c70c:	e7cd      	b.n	801c6aa <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x3e>
 801c70e:	d007      	beq.n	801c720 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xb4>
 801c710:	443a      	add	r2, r7
 801c712:	b292      	uxth	r2, r2
 801c714:	fa06 f182 	sxtah	r1, r6, r2
 801c718:	4299      	cmp	r1, r3
 801c71a:	dad6      	bge.n	801c6ca <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x5e>
 801c71c:	1a9a      	subs	r2, r3, r2
 801c71e:	e7d0      	b.n	801c6c2 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x56>
 801c720:	2c00      	cmp	r4, #0
 801c722:	d0a9      	beq.n	801c678 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xc>
 801c724:	2600      	movs	r6, #0
 801c726:	e7d0      	b.n	801c6ca <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x5e>

0801c728 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv>:
 801c728:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c72c:	6803      	ldr	r3, [r0, #0]
 801c72e:	4601      	mov	r1, r0
 801c730:	4604      	mov	r4, r0
 801c732:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801c734:	4668      	mov	r0, sp
 801c736:	4798      	blx	r3
 801c738:	f9bd 9002 	ldrsh.w	r9, [sp, #2]
 801c73c:	f9bd 6000 	ldrsh.w	r6, [sp]
 801c740:	f9bd 8004 	ldrsh.w	r8, [sp, #4]
 801c744:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 801c748:	f1b9 0f00 	cmp.w	r9, #0
 801c74c:	dd08      	ble.n	801c760 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x38>
 801c74e:	6823      	ldr	r3, [r4, #0]
 801c750:	f1c9 0200 	rsb	r2, r9, #0
 801c754:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c758:	b212      	sxth	r2, r2
 801c75a:	2100      	movs	r1, #0
 801c75c:	4620      	mov	r0, r4
 801c75e:	4798      	blx	r3
 801c760:	2e00      	cmp	r6, #0
 801c762:	b2b7      	uxth	r7, r6
 801c764:	dd07      	ble.n	801c776 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x4e>
 801c766:	6823      	ldr	r3, [r4, #0]
 801c768:	4279      	negs	r1, r7
 801c76a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c76e:	2200      	movs	r2, #0
 801c770:	b209      	sxth	r1, r1
 801c772:	4620      	mov	r0, r4
 801c774:	4798      	blx	r3
 801c776:	eb05 0309 	add.w	r3, r5, r9
 801c77a:	b29b      	uxth	r3, r3
 801c77c:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 801c780:	b219      	sxth	r1, r3
 801c782:	428a      	cmp	r2, r1
 801c784:	dd12      	ble.n	801c7ac <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x84>
 801c786:	1a9a      	subs	r2, r3, r2
 801c788:	b212      	sxth	r2, r2
 801c78a:	454a      	cmp	r2, r9
 801c78c:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
 801c790:	bfb8      	it	lt
 801c792:	464a      	movlt	r2, r9
 801c794:	b292      	uxth	r2, r2
 801c796:	1a9b      	subs	r3, r3, r2
 801c798:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 801c79c:	6823      	ldr	r3, [r4, #0]
 801c79e:	4252      	negs	r2, r2
 801c7a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c7a4:	b212      	sxth	r2, r2
 801c7a6:	2100      	movs	r1, #0
 801c7a8:	4620      	mov	r0, r4
 801c7aa:	4798      	blx	r3
 801c7ac:	4447      	add	r7, r8
 801c7ae:	f9b4 8008 	ldrsh.w	r8, [r4, #8]
 801c7b2:	b23f      	sxth	r7, r7
 801c7b4:	45b8      	cmp	r8, r7
 801c7b6:	dd12      	ble.n	801c7de <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0xb6>
 801c7b8:	eba7 0708 	sub.w	r7, r7, r8
 801c7bc:	42be      	cmp	r6, r7
 801c7be:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
 801c7c2:	bfb8      	it	lt
 801c7c4:	463e      	movlt	r6, r7
 801c7c6:	b2b6      	uxth	r6, r6
 801c7c8:	1b9b      	subs	r3, r3, r6
 801c7ca:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 801c7ce:	6823      	ldr	r3, [r4, #0]
 801c7d0:	4276      	negs	r6, r6
 801c7d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c7d6:	2200      	movs	r2, #0
 801c7d8:	b231      	sxth	r1, r6
 801c7da:	4620      	mov	r0, r4
 801c7dc:	4798      	blx	r3
 801c7de:	4620      	mov	r0, r4
 801c7e0:	b003      	add	sp, #12
 801c7e2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c7e6:	f7ff bd87 	b.w	801c2f8 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>

0801c7ea <_ZN8touchgfx19ScrollableContainer18setScrollbarsColorENS_9colortypeE>:
 801c7ea:	6301      	str	r1, [r0, #48]	; 0x30
 801c7ec:	6601      	str	r1, [r0, #96]	; 0x60
 801c7ee:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
 801c7f2:	4770      	bx	lr

0801c7f4 <_ZN8touchgfx19ScrollableContainer20setScrollbarsVisibleEb>:
 801c7f4:	f880 10ae 	strb.w	r1, [r0, #174]	; 0xae
 801c7f8:	4770      	bx	lr

0801c7fa <_ZN8touchgfx19ScrollableContainer31setScrollbarsPermanentlyVisibleEv>:
 801c7fa:	2201      	movs	r2, #1
 801c7fc:	f880 20af 	strb.w	r2, [r0, #175]	; 0xaf
 801c800:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
 801c804:	f880 208d 	strb.w	r2, [r0, #141]	; 0x8d
 801c808:	f7ff bd76 	b.w	801c2f8 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>

0801c80c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801c80c:	b513      	push	{r0, r1, r4, lr}
 801c80e:	6803      	ldr	r3, [r0, #0]
 801c810:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
 801c814:	2300      	movs	r3, #0
 801c816:	e9cd 3300 	strd	r3, r3, [sp]
 801c81a:	466b      	mov	r3, sp
 801c81c:	47a0      	blx	r4
 801c81e:	b002      	add	sp, #8
 801c820:	bd10      	pop	{r4, pc}

0801c822 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 801c822:	2301      	movs	r3, #1
 801c824:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801c828:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801c82c:	4770      	bx	lr

0801c82e <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801c82e:	2301      	movs	r3, #1
 801c830:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801c834:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801c838:	4770      	bx	lr

0801c83a <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 801c83a:	6843      	ldr	r3, [r0, #4]
 801c83c:	2201      	movs	r2, #1
 801c83e:	725a      	strb	r2, [r3, #9]
 801c840:	6840      	ldr	r0, [r0, #4]
 801c842:	6803      	ldr	r3, [r0, #0]
 801c844:	691b      	ldr	r3, [r3, #16]
 801c846:	4718      	bx	r3

0801c848 <_ZN8touchgfx3HAL8flushDMAEv>:
 801c848:	6840      	ldr	r0, [r0, #4]
 801c84a:	6803      	ldr	r3, [r0, #0]
 801c84c:	689b      	ldr	r3, [r3, #8]
 801c84e:	4718      	bx	r3

0801c850 <_ZN8touchgfx3HAL10beginFrameEv>:
 801c850:	4b04      	ldr	r3, [pc, #16]	; (801c864 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801c852:	781b      	ldrb	r3, [r3, #0]
 801c854:	b123      	cbz	r3, 801c860 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801c856:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 801c85a:	f080 0001 	eor.w	r0, r0, #1
 801c85e:	4770      	bx	lr
 801c860:	2001      	movs	r0, #1
 801c862:	4770      	bx	lr
 801c864:	200128a2 	.word	0x200128a2

0801c868 <_ZN8touchgfx3HAL8endFrameEv>:
 801c868:	b510      	push	{r4, lr}
 801c86a:	4604      	mov	r4, r0
 801c86c:	6840      	ldr	r0, [r0, #4]
 801c86e:	6803      	ldr	r3, [r0, #0]
 801c870:	689b      	ldr	r3, [r3, #8]
 801c872:	4798      	blx	r3
 801c874:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 801c878:	b113      	cbz	r3, 801c880 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801c87a:	2301      	movs	r3, #1
 801c87c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801c880:	bd10      	pop	{r4, pc}

0801c882 <_ZN8touchgfx3HAL9taskEntryEv>:
 801c882:	b508      	push	{r3, lr}
 801c884:	6803      	ldr	r3, [r0, #0]
 801c886:	4604      	mov	r4, r0
 801c888:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801c88a:	4798      	blx	r3
 801c88c:	6823      	ldr	r3, [r4, #0]
 801c88e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c890:	4620      	mov	r0, r4
 801c892:	4798      	blx	r3
 801c894:	f7ec fc9e 	bl	80091d4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 801c898:	6823      	ldr	r3, [r4, #0]
 801c89a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c89c:	e7f8      	b.n	801c890 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

0801c8a0 <_ZN8touchgfx3HAL4tickEv>:
 801c8a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801c8a2:	6803      	ldr	r3, [r0, #0]
 801c8a4:	4d5c      	ldr	r5, [pc, #368]	; (801ca18 <_ZN8touchgfx3HAL4tickEv+0x178>)
 801c8a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c8aa:	4604      	mov	r4, r0
 801c8ac:	4798      	blx	r3
 801c8ae:	2800      	cmp	r0, #0
 801c8b0:	f000 8097 	beq.w	801c9e2 <_ZN8touchgfx3HAL4tickEv+0x142>
 801c8b4:	2001      	movs	r0, #1
 801c8b6:	f7ec f8fd 	bl	8008ab4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801c8ba:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 801c8be:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801c8c2:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 801c8c6:	2600      	movs	r6, #0
 801c8c8:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 801c8cc:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 801c8d0:	b133      	cbz	r3, 801c8e0 <_ZN8touchgfx3HAL4tickEv+0x40>
 801c8d2:	6823      	ldr	r3, [r4, #0]
 801c8d4:	4620      	mov	r0, r4
 801c8d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801c8da:	4798      	blx	r3
 801c8dc:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 801c8e0:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801c8e4:	6862      	ldr	r2, [r4, #4]
 801c8e6:	f083 0301 	eor.w	r3, r3, #1
 801c8ea:	7253      	strb	r3, [r2, #9]
 801c8ec:	2601      	movs	r6, #1
 801c8ee:	702e      	strb	r6, [r5, #0]
 801c8f0:	f002 fbb2 	bl	801f058 <_ZN8touchgfx11Application11getInstanceEv>
 801c8f4:	6803      	ldr	r3, [r0, #0]
 801c8f6:	4631      	mov	r1, r6
 801c8f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c8fa:	4798      	blx	r3
 801c8fc:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801c900:	b90b      	cbnz	r3, 801c906 <_ZN8touchgfx3HAL4tickEv+0x66>
 801c902:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 801c906:	f002 fba7 	bl	801f058 <_ZN8touchgfx11Application11getInstanceEv>
 801c90a:	6803      	ldr	r3, [r0, #0]
 801c90c:	695b      	ldr	r3, [r3, #20]
 801c90e:	4798      	blx	r3
 801c910:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c912:	6803      	ldr	r3, [r0, #0]
 801c914:	691b      	ldr	r3, [r3, #16]
 801c916:	4798      	blx	r3
 801c918:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801c91c:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801c920:	3b01      	subs	r3, #1
 801c922:	b2db      	uxtb	r3, r3
 801c924:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801c928:	b10a      	cbz	r2, 801c92e <_ZN8touchgfx3HAL4tickEv+0x8e>
 801c92a:	2b00      	cmp	r3, #0
 801c92c:	d1eb      	bne.n	801c906 <_ZN8touchgfx3HAL4tickEv+0x66>
 801c92e:	4a3b      	ldr	r2, [pc, #236]	; (801ca1c <_ZN8touchgfx3HAL4tickEv+0x17c>)
 801c930:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 801c934:	7813      	ldrb	r3, [r2, #0]
 801c936:	3301      	adds	r3, #1
 801c938:	b25b      	sxtb	r3, r3
 801c93a:	4299      	cmp	r1, r3
 801c93c:	7013      	strb	r3, [r2, #0]
 801c93e:	dc10      	bgt.n	801c962 <_ZN8touchgfx3HAL4tickEv+0xc2>
 801c940:	68e0      	ldr	r0, [r4, #12]
 801c942:	2300      	movs	r3, #0
 801c944:	7013      	strb	r3, [r2, #0]
 801c946:	6803      	ldr	r3, [r0, #0]
 801c948:	aa03      	add	r2, sp, #12
 801c94a:	68db      	ldr	r3, [r3, #12]
 801c94c:	a902      	add	r1, sp, #8
 801c94e:	4798      	blx	r3
 801c950:	6823      	ldr	r3, [r4, #0]
 801c952:	2800      	cmp	r0, #0
 801c954:	d051      	beq.n	801c9fa <_ZN8touchgfx3HAL4tickEv+0x15a>
 801c956:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801c95a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801c95e:	4620      	mov	r0, r4
 801c960:	4798      	blx	r3
 801c962:	6960      	ldr	r0, [r4, #20]
 801c964:	2300      	movs	r3, #0
 801c966:	f88d 3007 	strb.w	r3, [sp, #7]
 801c96a:	b158      	cbz	r0, 801c984 <_ZN8touchgfx3HAL4tickEv+0xe4>
 801c96c:	6803      	ldr	r3, [r0, #0]
 801c96e:	f10d 0107 	add.w	r1, sp, #7
 801c972:	68db      	ldr	r3, [r3, #12]
 801c974:	4798      	blx	r3
 801c976:	b128      	cbz	r0, 801c984 <_ZN8touchgfx3HAL4tickEv+0xe4>
 801c978:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c97a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801c97e:	6803      	ldr	r3, [r0, #0]
 801c980:	68db      	ldr	r3, [r3, #12]
 801c982:	4798      	blx	r3
 801c984:	f104 001c 	add.w	r0, r4, #28
 801c988:	f010 fadc 	bl	802cf44 <_ZN8touchgfx8Gestures4tickEv>
 801c98c:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 801c990:	b30b      	cbz	r3, 801c9d6 <_ZN8touchgfx3HAL4tickEv+0x136>
 801c992:	6920      	ldr	r0, [r4, #16]
 801c994:	6803      	ldr	r3, [r0, #0]
 801c996:	691b      	ldr	r3, [r3, #16]
 801c998:	4798      	blx	r3
 801c99a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801c99c:	4606      	mov	r6, r0
 801c99e:	b903      	cbnz	r3, 801c9a2 <_ZN8touchgfx3HAL4tickEv+0x102>
 801c9a0:	6720      	str	r0, [r4, #112]	; 0x70
 801c9a2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801c9a4:	4a1e      	ldr	r2, [pc, #120]	; (801ca20 <_ZN8touchgfx3HAL4tickEv+0x180>)
 801c9a6:	1af3      	subs	r3, r6, r3
 801c9a8:	4293      	cmp	r3, r2
 801c9aa:	d914      	bls.n	801c9d6 <_ZN8touchgfx3HAL4tickEv+0x136>
 801c9ac:	6920      	ldr	r0, [r4, #16]
 801c9ae:	6803      	ldr	r3, [r0, #0]
 801c9b0:	699b      	ldr	r3, [r3, #24]
 801c9b2:	4798      	blx	r3
 801c9b4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801c9b6:	2264      	movs	r2, #100	; 0x64
 801c9b8:	1af3      	subs	r3, r6, r3
 801c9ba:	fbb3 f3f2 	udiv	r3, r3, r2
 801c9be:	fbb0 f0f3 	udiv	r0, r0, r3
 801c9c2:	2800      	cmp	r0, #0
 801c9c4:	dc1e      	bgt.n	801ca04 <_ZN8touchgfx3HAL4tickEv+0x164>
 801c9c6:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 801c9ca:	6920      	ldr	r0, [r4, #16]
 801c9cc:	6803      	ldr	r3, [r0, #0]
 801c9ce:	2100      	movs	r1, #0
 801c9d0:	69db      	ldr	r3, [r3, #28]
 801c9d2:	4798      	blx	r3
 801c9d4:	6726      	str	r6, [r4, #112]	; 0x70
 801c9d6:	f002 fb3f 	bl	801f058 <_ZN8touchgfx11Application11getInstanceEv>
 801c9da:	6803      	ldr	r3, [r0, #0]
 801c9dc:	2100      	movs	r1, #0
 801c9de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c9e0:	4798      	blx	r3
 801c9e2:	6823      	ldr	r3, [r4, #0]
 801c9e4:	4620      	mov	r0, r4
 801c9e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801c9ea:	4798      	blx	r3
 801c9ec:	2001      	movs	r0, #1
 801c9ee:	f7ec f86c 	bl	8008aca <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801c9f2:	2300      	movs	r3, #0
 801c9f4:	702b      	strb	r3, [r5, #0]
 801c9f6:	b004      	add	sp, #16
 801c9f8:	bd70      	pop	{r4, r5, r6, pc}
 801c9fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801c9fe:	4620      	mov	r0, r4
 801ca00:	4798      	blx	r3
 801ca02:	e7ae      	b.n	801c962 <_ZN8touchgfx3HAL4tickEv+0xc2>
 801ca04:	2863      	cmp	r0, #99	; 0x63
 801ca06:	bfcb      	itete	gt
 801ca08:	2300      	movgt	r3, #0
 801ca0a:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801ca0e:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801ca12:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 801ca16:	e7d8      	b.n	801c9ca <_ZN8touchgfx3HAL4tickEv+0x12a>
 801ca18:	200128a8 	.word	0x200128a8
 801ca1c:	200128a9 	.word	0x200128a9
 801ca20:	05f5e100 	.word	0x05f5e100

0801ca24 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801ca24:	f7ec bb6e 	b.w	8009104 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801ca28 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 801ca28:	6581      	str	r1, [r0, #88]	; 0x58
 801ca2a:	301c      	adds	r0, #28
 801ca2c:	f010 ba88 	b.w	802cf40 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801ca30 <_ZN8touchgfx3HAL5touchEll>:
 801ca30:	b530      	push	{r4, r5, lr}
 801ca32:	b087      	sub	sp, #28
 801ca34:	4604      	mov	r4, r0
 801ca36:	a804      	add	r0, sp, #16
 801ca38:	e9cd 1204 	strd	r1, r2, [sp, #16]
 801ca3c:	f002 f90c 	bl	801ec58 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801ca40:	9b04      	ldr	r3, [sp, #16]
 801ca42:	f8ad 300c 	strh.w	r3, [sp, #12]
 801ca46:	a906      	add	r1, sp, #24
 801ca48:	9b05      	ldr	r3, [sp, #20]
 801ca4a:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 801ca4e:	a803      	add	r0, sp, #12
 801ca50:	f002 f950 	bl	801ecf4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 801ca54:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 801ca58:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801ca5c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801ca60:	f104 001c 	add.w	r0, r4, #28
 801ca64:	b189      	cbz	r1, 801ca8a <_ZN8touchgfx3HAL5touchEll+0x5a>
 801ca66:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 801ca6a:	9300      	str	r3, [sp, #0]
 801ca6c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801ca70:	4613      	mov	r3, r2
 801ca72:	462a      	mov	r2, r5
 801ca74:	f010 fa74 	bl	802cf60 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 801ca78:	b128      	cbz	r0, 801ca86 <_ZN8touchgfx3HAL5touchEll+0x56>
 801ca7a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801ca7e:	65e3      	str	r3, [r4, #92]	; 0x5c
 801ca80:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801ca84:	6623      	str	r3, [r4, #96]	; 0x60
 801ca86:	b007      	add	sp, #28
 801ca88:	bd30      	pop	{r4, r5, pc}
 801ca8a:	f010 faad 	bl	802cfe8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801ca8e:	2301      	movs	r3, #1
 801ca90:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801ca94:	e7f1      	b.n	801ca7a <_ZN8touchgfx3HAL5touchEll+0x4a>

0801ca96 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801ca96:	b570      	push	{r4, r5, r6, lr}
 801ca98:	2b00      	cmp	r3, #0
 801ca9a:	d050      	beq.n	801cb3e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 801ca9c:	ea81 0002 	eor.w	r0, r1, r2
 801caa0:	07c6      	lsls	r6, r0, #31
 801caa2:	d508      	bpl.n	801cab6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 801caa4:	3a01      	subs	r2, #1
 801caa6:	18cc      	adds	r4, r1, r3
 801caa8:	42a1      	cmp	r1, r4
 801caaa:	d048      	beq.n	801cb3e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 801caac:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801cab0:	f801 0b01 	strb.w	r0, [r1], #1
 801cab4:	e7f8      	b.n	801caa8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801cab6:	07d5      	lsls	r5, r2, #31
 801cab8:	bf42      	ittt	mi
 801caba:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801cabe:	f801 0b01 	strbmi.w	r0, [r1], #1
 801cac2:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801cac6:	2b01      	cmp	r3, #1
 801cac8:	d915      	bls.n	801caf6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801caca:	ea82 0001 	eor.w	r0, r2, r1
 801cace:	0784      	lsls	r4, r0, #30
 801cad0:	d02d      	beq.n	801cb2e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 801cad2:	1e94      	subs	r4, r2, #2
 801cad4:	4608      	mov	r0, r1
 801cad6:	18ce      	adds	r6, r1, r3
 801cad8:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 801cadc:	f820 5b02 	strh.w	r5, [r0], #2
 801cae0:	1a35      	subs	r5, r6, r0
 801cae2:	2d01      	cmp	r5, #1
 801cae4:	d8f8      	bhi.n	801cad8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 801cae6:	1e98      	subs	r0, r3, #2
 801cae8:	f020 0001 	bic.w	r0, r0, #1
 801caec:	3002      	adds	r0, #2
 801caee:	4401      	add	r1, r0
 801caf0:	4402      	add	r2, r0
 801caf2:	f003 0301 	and.w	r3, r3, #1
 801caf6:	1f14      	subs	r4, r2, #4
 801caf8:	4608      	mov	r0, r1
 801cafa:	18ce      	adds	r6, r1, r3
 801cafc:	1a35      	subs	r5, r6, r0
 801cafe:	2d03      	cmp	r5, #3
 801cb00:	d810      	bhi.n	801cb24 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 801cb02:	089c      	lsrs	r4, r3, #2
 801cb04:	00a0      	lsls	r0, r4, #2
 801cb06:	4401      	add	r1, r0
 801cb08:	3801      	subs	r0, #1
 801cb0a:	4402      	add	r2, r0
 801cb0c:	f06f 0003 	mvn.w	r0, #3
 801cb10:	fb00 3404 	mla	r4, r0, r4, r3
 801cb14:	440c      	add	r4, r1
 801cb16:	42a1      	cmp	r1, r4
 801cb18:	d011      	beq.n	801cb3e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 801cb1a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801cb1e:	f801 3b01 	strb.w	r3, [r1], #1
 801cb22:	e7f8      	b.n	801cb16 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 801cb24:	f854 5f04 	ldr.w	r5, [r4, #4]!
 801cb28:	f840 5b04 	str.w	r5, [r0], #4
 801cb2c:	e7e6      	b.n	801cafc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 801cb2e:	0790      	lsls	r0, r2, #30
 801cb30:	d0e1      	beq.n	801caf6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801cb32:	f832 0b02 	ldrh.w	r0, [r2], #2
 801cb36:	f821 0b02 	strh.w	r0, [r1], #2
 801cb3a:	3b02      	subs	r3, #2
 801cb3c:	e7db      	b.n	801caf6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801cb3e:	2001      	movs	r0, #1
 801cb40:	bd70      	pop	{r4, r5, r6, pc}

0801cb42 <_ZN8touchgfx3HAL7noTouchEv>:
 801cb42:	b510      	push	{r4, lr}
 801cb44:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 801cb48:	4604      	mov	r4, r0
 801cb4a:	b153      	cbz	r3, 801cb62 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 801cb4c:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 801cb50:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 801cb54:	2101      	movs	r1, #1
 801cb56:	301c      	adds	r0, #28
 801cb58:	f010 fa46 	bl	802cfe8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801cb5c:	2300      	movs	r3, #0
 801cb5e:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801cb62:	bd10      	pop	{r4, pc}

0801cb64 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 801cb64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cb68:	4605      	mov	r5, r0
 801cb6a:	6980      	ldr	r0, [r0, #24]
 801cb6c:	b085      	sub	sp, #20
 801cb6e:	460f      	mov	r7, r1
 801cb70:	4690      	mov	r8, r2
 801cb72:	4699      	mov	r9, r3
 801cb74:	b930      	cbnz	r0, 801cb84 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 801cb76:	4b1f      	ldr	r3, [pc, #124]	; (801cbf4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 801cb78:	4a1f      	ldr	r2, [pc, #124]	; (801cbf8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 801cb7a:	f240 112f 	movw	r1, #303	; 0x12f
 801cb7e:	481f      	ldr	r0, [pc, #124]	; (801cbfc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 801cb80:	f011 fb72 	bl	802e268 <__assert_func>
 801cb84:	ac04      	add	r4, sp, #16
 801cb86:	2600      	movs	r6, #0
 801cb88:	f844 6d04 	str.w	r6, [r4, #-4]!
 801cb8c:	6806      	ldr	r6, [r0, #0]
 801cb8e:	9401      	str	r4, [sp, #4]
 801cb90:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 801cb94:	9400      	str	r4, [sp, #0]
 801cb96:	6834      	ldr	r4, [r6, #0]
 801cb98:	47a0      	blx	r4
 801cb9a:	4c19      	ldr	r4, [pc, #100]	; (801cc00 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 801cb9c:	4606      	mov	r6, r0
 801cb9e:	f8a4 9000 	strh.w	r9, [r4]
 801cba2:	f7eb ffdd 	bl	8008b60 <_ZN8touchgfx3HAL3lcdEv>
 801cba6:	6803      	ldr	r3, [r0, #0]
 801cba8:	6a1b      	ldr	r3, [r3, #32]
 801cbaa:	4798      	blx	r3
 801cbac:	280c      	cmp	r0, #12
 801cbae:	d80f      	bhi.n	801cbd0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 801cbb0:	e8df f000 	tbb	[pc, r0]
 801cbb4:	1b1b1207 	.word	0x1b1b1207
 801cbb8:	1b1b1b1b 	.word	0x1b1b1b1b
 801cbbc:	1b1b1b1b 	.word	0x1b1b1b1b
 801cbc0:	1b          	.byte	0x1b
 801cbc1:	00          	.byte	0x00
 801cbc2:	8823      	ldrh	r3, [r4, #0]
 801cbc4:	fb08 7203 	mla	r2, r8, r3, r7
 801cbc8:	9b03      	ldr	r3, [sp, #12]
 801cbca:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801cbce:	63eb      	str	r3, [r5, #60]	; 0x3c
 801cbd0:	4630      	mov	r0, r6
 801cbd2:	b005      	add	sp, #20
 801cbd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cbd8:	8822      	ldrh	r2, [r4, #0]
 801cbda:	9b03      	ldr	r3, [sp, #12]
 801cbdc:	fb08 7202 	mla	r2, r8, r2, r7
 801cbe0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cbe4:	1a9a      	subs	r2, r3, r2
 801cbe6:	63ea      	str	r2, [r5, #60]	; 0x3c
 801cbe8:	e7f2      	b.n	801cbd0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 801cbea:	4b06      	ldr	r3, [pc, #24]	; (801cc04 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 801cbec:	4a02      	ldr	r2, [pc, #8]	; (801cbf8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 801cbee:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 801cbf2:	e7c4      	b.n	801cb7e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 801cbf4:	08032892 	.word	0x08032892
 801cbf8:	08032ba6 	.word	0x08032ba6
 801cbfc:	080328d7 	.word	0x080328d7
 801cc00:	2001289e 	.word	0x2001289e
 801cc04:	080328fd 	.word	0x080328fd

0801cc08 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 801cc08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cc0c:	4698      	mov	r8, r3
 801cc0e:	6803      	ldr	r3, [r0, #0]
 801cc10:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 801cc12:	4b0f      	ldr	r3, [pc, #60]	; (801cc50 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 801cc14:	b087      	sub	sp, #28
 801cc16:	f8b3 9000 	ldrh.w	r9, [r3]
 801cc1a:	460e      	mov	r6, r1
 801cc1c:	4617      	mov	r7, r2
 801cc1e:	4604      	mov	r4, r0
 801cc20:	f7eb ff9e 	bl	8008b60 <_ZN8touchgfx3HAL3lcdEv>
 801cc24:	6803      	ldr	r3, [r0, #0]
 801cc26:	6a1b      	ldr	r3, [r3, #32]
 801cc28:	4798      	blx	r3
 801cc2a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801cc2e:	9302      	str	r3, [sp, #8]
 801cc30:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801cc34:	9301      	str	r3, [sp, #4]
 801cc36:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801cc3a:	9300      	str	r3, [sp, #0]
 801cc3c:	e9cd 9003 	strd	r9, r0, [sp, #12]
 801cc40:	4643      	mov	r3, r8
 801cc42:	463a      	mov	r2, r7
 801cc44:	4631      	mov	r1, r6
 801cc46:	4620      	mov	r0, r4
 801cc48:	47a8      	blx	r5
 801cc4a:	b007      	add	sp, #28
 801cc4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cc50:	2001289e 	.word	0x2001289e

0801cc54 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 801cc54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc58:	4606      	mov	r6, r0
 801cc5a:	b089      	sub	sp, #36	; 0x24
 801cc5c:	4610      	mov	r0, r2
 801cc5e:	460c      	mov	r4, r1
 801cc60:	4691      	mov	r9, r2
 801cc62:	4698      	mov	r8, r3
 801cc64:	f004 fcf4 	bl	8021650 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801cc68:	2800      	cmp	r0, #0
 801cc6a:	f000 8093 	beq.w	801cd94 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x140>
 801cc6e:	f8df a13c 	ldr.w	sl, [pc, #316]	; 801cdac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 801cc72:	f8df b13c 	ldr.w	fp, [pc, #316]	; 801cdb0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 801cc76:	f8da 0000 	ldr.w	r0, [sl]
 801cc7a:	4f4b      	ldr	r7, [pc, #300]	; (801cda8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 801cc7c:	6802      	ldr	r2, [r0, #0]
 801cc7e:	6a12      	ldr	r2, [r2, #32]
 801cc80:	4790      	blx	r2
 801cc82:	f8da 0000 	ldr.w	r0, [sl]
 801cc86:	6802      	ldr	r2, [r0, #0]
 801cc88:	ad08      	add	r5, sp, #32
 801cc8a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801cc8c:	4790      	blx	r2
 801cc8e:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 801cc92:	f8bb 3000 	ldrh.w	r3, [fp]
 801cc96:	9300      	str	r3, [sp, #0]
 801cc98:	4628      	mov	r0, r5
 801cc9a:	883b      	ldrh	r3, [r7, #0]
 801cc9c:	9301      	str	r3, [sp, #4]
 801cc9e:	f004 fd9b 	bl	80217d8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801cca2:	f8ab 0000 	strh.w	r0, [fp]
 801cca6:	4628      	mov	r0, r5
 801cca8:	f004 fdd0 	bl	802184c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801ccac:	f8da b000 	ldr.w	fp, [sl]
 801ccb0:	8038      	strh	r0, [r7, #0]
 801ccb2:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 801ccb6:	9302      	str	r3, [sp, #8]
 801ccb8:	4648      	mov	r0, r9
 801ccba:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 801ccbe:	f004 fcc7 	bl	8021650 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801ccc2:	f8da 2000 	ldr.w	r2, [sl]
 801ccc6:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 801ccca:	63d0      	str	r0, [r2, #60]	; 0x3c
 801cccc:	6822      	ldr	r2, [r4, #0]
 801ccce:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 801ccd2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801ccd4:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 801ccd8:	2200      	movs	r2, #0
 801ccda:	4611      	mov	r1, r2
 801ccdc:	4620      	mov	r0, r4
 801ccde:	4798      	blx	r3
 801cce0:	2201      	movs	r2, #1
 801cce2:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 801cce6:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 801ccea:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 801ccee:	2a00      	cmp	r2, #0
 801ccf0:	f104 0204 	add.w	r2, r4, #4
 801ccf4:	dd51      	ble.n	801cd9a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x146>
 801ccf6:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 801ccfa:	2900      	cmp	r1, #0
 801ccfc:	dd4d      	ble.n	801cd9a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x146>
 801ccfe:	6810      	ldr	r0, [r2, #0]
 801cd00:	6851      	ldr	r1, [r2, #4]
 801cd02:	f10d 0c18 	add.w	ip, sp, #24
 801cd06:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801cd0a:	4641      	mov	r1, r8
 801cd0c:	a806      	add	r0, sp, #24
 801cd0e:	f7fe f8a9 	bl	801ae64 <_ZN8touchgfx4RectaNERKS0_>
 801cd12:	4628      	mov	r0, r5
 801cd14:	f004 feec 	bl	8021af0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801cd18:	4680      	mov	r8, r0
 801cd1a:	f7eb ff21 	bl	8008b60 <_ZN8touchgfx3HAL3lcdEv>
 801cd1e:	6802      	ldr	r2, [r0, #0]
 801cd20:	6a12      	ldr	r2, [r2, #32]
 801cd22:	4790      	blx	r2
 801cd24:	4580      	cmp	r8, r0
 801cd26:	d03d      	beq.n	801cda4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x150>
 801cd28:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 801cd2a:	b150      	cbz	r0, 801cd42 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xee>
 801cd2c:	4628      	mov	r0, r5
 801cd2e:	f004 fedf 	bl	8021af0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801cd32:	4605      	mov	r5, r0
 801cd34:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 801cd36:	6803      	ldr	r3, [r0, #0]
 801cd38:	6a1b      	ldr	r3, [r3, #32]
 801cd3a:	4798      	blx	r3
 801cd3c:	1a2b      	subs	r3, r5, r0
 801cd3e:	4258      	negs	r0, r3
 801cd40:	4158      	adcs	r0, r3
 801cd42:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 801cd46:	6822      	ldr	r2, [r4, #0]
 801cd48:	6963      	ldr	r3, [r4, #20]
 801cd4a:	9303      	str	r3, [sp, #12]
 801cd4c:	2500      	movs	r5, #0
 801cd4e:	6165      	str	r5, [r4, #20]
 801cd50:	4620      	mov	r0, r4
 801cd52:	6892      	ldr	r2, [r2, #8]
 801cd54:	a906      	add	r1, sp, #24
 801cd56:	4790      	blx	r2
 801cd58:	9b03      	ldr	r3, [sp, #12]
 801cd5a:	6163      	str	r3, [r4, #20]
 801cd5c:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 801cd60:	6823      	ldr	r3, [r4, #0]
 801cd62:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 801cd66:	4620      	mov	r0, r4
 801cd68:	4c10      	ldr	r4, [pc, #64]	; (801cdac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 801cd6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cd6c:	4652      	mov	r2, sl
 801cd6e:	4649      	mov	r1, r9
 801cd70:	4798      	blx	r3
 801cd72:	6820      	ldr	r0, [r4, #0]
 801cd74:	9b02      	ldr	r3, [sp, #8]
 801cd76:	9a00      	ldr	r2, [sp, #0]
 801cd78:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 801cd7c:	4b0c      	ldr	r3, [pc, #48]	; (801cdb0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 801cd7e:	801a      	strh	r2, [r3, #0]
 801cd80:	4b09      	ldr	r3, [pc, #36]	; (801cda8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 801cd82:	9a01      	ldr	r2, [sp, #4]
 801cd84:	801a      	strh	r2, [r3, #0]
 801cd86:	6803      	ldr	r3, [r0, #0]
 801cd88:	6a1b      	ldr	r3, [r3, #32]
 801cd8a:	4798      	blx	r3
 801cd8c:	6820      	ldr	r0, [r4, #0]
 801cd8e:	6803      	ldr	r3, [r0, #0]
 801cd90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cd92:	4798      	blx	r3
 801cd94:	b009      	add	sp, #36	; 0x24
 801cd96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd9a:	6810      	ldr	r0, [r2, #0]
 801cd9c:	6851      	ldr	r1, [r2, #4]
 801cd9e:	ab06      	add	r3, sp, #24
 801cda0:	c303      	stmia	r3!, {r0, r1}
 801cda2:	e7b6      	b.n	801cd12 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbe>
 801cda4:	2000      	movs	r0, #0
 801cda6:	e7cc      	b.n	801cd42 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xee>
 801cda8:	200128a0 	.word	0x200128a0
 801cdac:	200128a4 	.word	0x200128a4
 801cdb0:	2001289e 	.word	0x2001289e

0801cdb4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 801cdb4:	b510      	push	{r4, lr}
 801cdb6:	4b07      	ldr	r3, [pc, #28]	; (801cdd4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 801cdb8:	781b      	ldrb	r3, [r3, #0]
 801cdba:	4604      	mov	r4, r0
 801cdbc:	b13b      	cbz	r3, 801cdce <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801cdbe:	6803      	ldr	r3, [r0, #0]
 801cdc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cdc2:	4798      	blx	r3
 801cdc4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801cdc6:	4283      	cmp	r3, r0
 801cdc8:	d101      	bne.n	801cdce <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801cdca:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801cdcc:	bd10      	pop	{r4, pc}
 801cdce:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801cdd0:	e7fc      	b.n	801cdcc <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801cdd2:	bf00      	nop
 801cdd4:	200128a2 	.word	0x200128a2

0801cdd8 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 801cdd8:	b510      	push	{r4, lr}
 801cdda:	4b0b      	ldr	r3, [pc, #44]	; (801ce08 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 801cddc:	781b      	ldrb	r3, [r3, #0]
 801cdde:	4604      	mov	r4, r0
 801cde0:	b95b      	cbnz	r3, 801cdfa <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801cde2:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801cde6:	2b02      	cmp	r3, #2
 801cde8:	d007      	beq.n	801cdfa <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801cdea:	6840      	ldr	r0, [r0, #4]
 801cdec:	f000 fbc8 	bl	801d580 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801cdf0:	b118      	cbz	r0, 801cdfa <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801cdf2:	6862      	ldr	r2, [r4, #4]
 801cdf4:	7a53      	ldrb	r3, [r2, #9]
 801cdf6:	2b00      	cmp	r3, #0
 801cdf8:	d0fc      	beq.n	801cdf4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 801cdfa:	f7ec f965 	bl	80090c8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801cdfe:	4620      	mov	r0, r4
 801ce00:	f7ff ffd8 	bl	801cdb4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801ce04:	bd10      	pop	{r4, pc}
 801ce06:	bf00      	nop
 801ce08:	200128a2 	.word	0x200128a2

0801ce0c <_ZN8touchgfx3HAL10initializeEv>:
 801ce0c:	b510      	push	{r4, lr}
 801ce0e:	4604      	mov	r4, r0
 801ce10:	f7ec f93a 	bl	8009088 <_ZN8touchgfx10OSWrappers10initializeEv>
 801ce14:	6860      	ldr	r0, [r4, #4]
 801ce16:	6803      	ldr	r3, [r0, #0]
 801ce18:	68db      	ldr	r3, [r3, #12]
 801ce1a:	4798      	blx	r3
 801ce1c:	68e0      	ldr	r0, [r4, #12]
 801ce1e:	6803      	ldr	r3, [r0, #0]
 801ce20:	689b      	ldr	r3, [r3, #8]
 801ce22:	4798      	blx	r3
 801ce24:	6823      	ldr	r3, [r4, #0]
 801ce26:	4620      	mov	r0, r4
 801ce28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ce2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ce2e:	4718      	bx	r3

0801ce30 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 801ce30:	b508      	push	{r3, lr}
 801ce32:	290c      	cmp	r1, #12
 801ce34:	d817      	bhi.n	801ce66 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 801ce36:	e8df f001 	tbb	[pc, r1]
 801ce3a:	090b      	.short	0x090b
 801ce3c:	0d0d0d07 	.word	0x0d0d0d07
 801ce40:	1414140d 	.word	0x1414140d
 801ce44:	1414      	.short	0x1414
 801ce46:	0d          	.byte	0x0d
 801ce47:	00          	.byte	0x00
 801ce48:	2020      	movs	r0, #32
 801ce4a:	bd08      	pop	{r3, pc}
 801ce4c:	2018      	movs	r0, #24
 801ce4e:	e7fc      	b.n	801ce4a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801ce50:	2010      	movs	r0, #16
 801ce52:	e7fa      	b.n	801ce4a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801ce54:	4b05      	ldr	r3, [pc, #20]	; (801ce6c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 801ce56:	4a06      	ldr	r2, [pc, #24]	; (801ce70 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 801ce58:	4806      	ldr	r0, [pc, #24]	; (801ce74 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 801ce5a:	f240 212f 	movw	r1, #559	; 0x22f
 801ce5e:	f011 fa03 	bl	802e268 <__assert_func>
 801ce62:	2008      	movs	r0, #8
 801ce64:	e7f1      	b.n	801ce4a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801ce66:	2000      	movs	r0, #0
 801ce68:	e7ef      	b.n	801ce4a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801ce6a:	bf00      	nop
 801ce6c:	080329d0 	.word	0x080329d0
 801ce70:	08032d68 	.word	0x08032d68
 801ce74:	080328d7 	.word	0x080328d7

0801ce78 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 801ce78:	b570      	push	{r4, r5, r6, lr}
 801ce7a:	460d      	mov	r5, r1
 801ce7c:	f89d 1014 	ldrb.w	r1, [sp, #20]
 801ce80:	4616      	mov	r6, r2
 801ce82:	461c      	mov	r4, r3
 801ce84:	f7ff ffd4 	bl	801ce30 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 801ce88:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 801ce8c:	10c0      	asrs	r0, r0, #3
 801ce8e:	fb06 5101 	mla	r1, r6, r1, r5
 801ce92:	fb00 4001 	mla	r0, r0, r1, r4
 801ce96:	bd70      	pop	{r4, r5, r6, pc}

0801ce98 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 801ce98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ce9c:	b08a      	sub	sp, #40	; 0x28
 801ce9e:	f04f 0c00 	mov.w	ip, #0
 801cea2:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 801cea6:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 801ceaa:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 801ceae:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 801ceb2:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801ceb6:	f8cd c020 	str.w	ip, [sp, #32]
 801ceba:	f1b8 0f02 	cmp.w	r8, #2
 801cebe:	4604      	mov	r4, r0
 801cec0:	469a      	mov	sl, r3
 801cec2:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 801cec6:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801ceca:	d030      	beq.n	801cf2e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 801cecc:	2bff      	cmp	r3, #255	; 0xff
 801cece:	d12c      	bne.n	801cf2a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 801ced0:	4560      	cmp	r0, ip
 801ced2:	bf14      	ite	ne
 801ced4:	2004      	movne	r0, #4
 801ced6:	2001      	moveq	r0, #1
 801ced8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801cedc:	9204      	str	r2, [sp, #16]
 801cede:	4620      	mov	r0, r4
 801cee0:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801cee4:	f8ad 201c 	strh.w	r2, [sp, #28]
 801cee8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801ceec:	f8ad 6018 	strh.w	r6, [sp, #24]
 801cef0:	f8ad 501a 	strh.w	r5, [sp, #26]
 801cef4:	f7ff ff5e 	bl	801cdb4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801cef8:	e9cd 9700 	strd	r9, r7, [sp]
 801cefc:	4603      	mov	r3, r0
 801cefe:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 801cf02:	4651      	mov	r1, sl
 801cf04:	4620      	mov	r0, r4
 801cf06:	f7ff ffb7 	bl	801ce78 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801cf0a:	f8ad 901e 	strh.w	r9, [sp, #30]
 801cf0e:	9005      	str	r0, [sp, #20]
 801cf10:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 801cf14:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 801cf18:	b106      	cbz	r6, 801cf1c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 801cf1a:	b98d      	cbnz	r5, 801cf40 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 801cf1c:	4b12      	ldr	r3, [pc, #72]	; (801cf68 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 801cf1e:	4a13      	ldr	r2, [pc, #76]	; (801cf6c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 801cf20:	f240 11af 	movw	r1, #431	; 0x1af
 801cf24:	4812      	ldr	r0, [pc, #72]	; (801cf70 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 801cf26:	f011 f99f 	bl	802e268 <__assert_func>
 801cf2a:	2004      	movs	r0, #4
 801cf2c:	e7d4      	b.n	801ced8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 801cf2e:	2bff      	cmp	r3, #255	; 0xff
 801cf30:	d104      	bne.n	801cf3c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 801cf32:	2800      	cmp	r0, #0
 801cf34:	bf14      	ite	ne
 801cf36:	2040      	movne	r0, #64	; 0x40
 801cf38:	2020      	moveq	r0, #32
 801cf3a:	e7cd      	b.n	801ced8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 801cf3c:	2040      	movs	r0, #64	; 0x40
 801cf3e:	e7cb      	b.n	801ced8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 801cf40:	6823      	ldr	r3, [r4, #0]
 801cf42:	9d02      	ldr	r5, [sp, #8]
 801cf44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cf46:	4620      	mov	r0, r4
 801cf48:	4798      	blx	r3
 801cf4a:	4228      	tst	r0, r5
 801cf4c:	d104      	bne.n	801cf58 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 801cf4e:	4b09      	ldr	r3, [pc, #36]	; (801cf74 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 801cf50:	4a06      	ldr	r2, [pc, #24]	; (801cf6c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 801cf52:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 801cf56:	e7e5      	b.n	801cf24 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 801cf58:	6860      	ldr	r0, [r4, #4]
 801cf5a:	6803      	ldr	r3, [r0, #0]
 801cf5c:	a902      	add	r1, sp, #8
 801cf5e:	685b      	ldr	r3, [r3, #4]
 801cf60:	4798      	blx	r3
 801cf62:	b00a      	add	sp, #40	; 0x28
 801cf64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cf68:	08032953 	.word	0x08032953
 801cf6c:	08032c0a 	.word	0x08032c0a
 801cf70:	080328d7 	.word	0x080328d7
 801cf74:	0803298b 	.word	0x0803298b

0801cf78 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 801cf78:	b510      	push	{r4, lr}
 801cf7a:	b08a      	sub	sp, #40	; 0x28
 801cf7c:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801cf80:	9408      	str	r4, [sp, #32]
 801cf82:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 801cf86:	9407      	str	r4, [sp, #28]
 801cf88:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 801cf8c:	9406      	str	r4, [sp, #24]
 801cf8e:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 801cf92:	9405      	str	r4, [sp, #20]
 801cf94:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 801cf98:	9404      	str	r4, [sp, #16]
 801cf9a:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 801cf9e:	9403      	str	r4, [sp, #12]
 801cfa0:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 801cfa4:	9402      	str	r4, [sp, #8]
 801cfa6:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 801cfaa:	e9cd 3400 	strd	r3, r4, [sp]
 801cfae:	4613      	mov	r3, r2
 801cfb0:	2200      	movs	r2, #0
 801cfb2:	f7ff ff71 	bl	801ce98 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801cfb6:	b00a      	add	sp, #40	; 0x28
 801cfb8:	bd10      	pop	{r4, pc}
	...

0801cfbc <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 801cfbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cfbe:	b08b      	sub	sp, #44	; 0x2c
 801cfc0:	4616      	mov	r6, r2
 801cfc2:	460d      	mov	r5, r1
 801cfc4:	461f      	mov	r7, r3
 801cfc6:	4604      	mov	r4, r0
 801cfc8:	f7eb fdca 	bl	8008b60 <_ZN8touchgfx3HAL3lcdEv>
 801cfcc:	6803      	ldr	r3, [r0, #0]
 801cfce:	6a1b      	ldr	r3, [r3, #32]
 801cfd0:	4798      	blx	r3
 801cfd2:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801cfd6:	4b0d      	ldr	r3, [pc, #52]	; (801d00c <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 801cfd8:	881b      	ldrh	r3, [r3, #0]
 801cfda:	9306      	str	r3, [sp, #24]
 801cfdc:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801cfe0:	9305      	str	r3, [sp, #20]
 801cfe2:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801cfe6:	9304      	str	r3, [sp, #16]
 801cfe8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801cfec:	9303      	str	r3, [sp, #12]
 801cfee:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801cff2:	9302      	str	r3, [sp, #8]
 801cff4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801cff8:	2200      	movs	r2, #0
 801cffa:	e9cd 7300 	strd	r7, r3, [sp]
 801cffe:	4629      	mov	r1, r5
 801d000:	4633      	mov	r3, r6
 801d002:	4620      	mov	r0, r4
 801d004:	f7ff ff48 	bl	801ce98 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801d008:	b00b      	add	sp, #44	; 0x2c
 801d00a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d00c:	2001289e 	.word	0x2001289e

0801d010 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 801d010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d014:	461f      	mov	r7, r3
 801d016:	4b14      	ldr	r3, [pc, #80]	; (801d068 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 801d018:	b08a      	sub	sp, #40	; 0x28
 801d01a:	4616      	mov	r6, r2
 801d01c:	f8b3 8000 	ldrh.w	r8, [r3]
 801d020:	460d      	mov	r5, r1
 801d022:	4604      	mov	r4, r0
 801d024:	f7eb fd9c 	bl	8008b60 <_ZN8touchgfx3HAL3lcdEv>
 801d028:	6803      	ldr	r3, [r0, #0]
 801d02a:	6a1b      	ldr	r3, [r3, #32]
 801d02c:	4798      	blx	r3
 801d02e:	2302      	movs	r3, #2
 801d030:	e9cd 8306 	strd	r8, r3, [sp, #24]
 801d034:	2301      	movs	r3, #1
 801d036:	9305      	str	r3, [sp, #20]
 801d038:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801d03c:	9304      	str	r3, [sp, #16]
 801d03e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801d042:	9303      	str	r3, [sp, #12]
 801d044:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801d048:	9302      	str	r3, [sp, #8]
 801d04a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801d04e:	9008      	str	r0, [sp, #32]
 801d050:	e9cd 7300 	strd	r7, r3, [sp]
 801d054:	2200      	movs	r2, #0
 801d056:	4633      	mov	r3, r6
 801d058:	4629      	mov	r1, r5
 801d05a:	4620      	mov	r0, r4
 801d05c:	f7ff ff1c 	bl	801ce98 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801d060:	b00a      	add	sp, #40	; 0x28
 801d062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d066:	bf00      	nop
 801d068:	2001289e 	.word	0x2001289e

0801d06c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 801d06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d070:	b08b      	sub	sp, #44	; 0x2c
 801d072:	469b      	mov	fp, r3
 801d074:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801d078:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 801d07c:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 801d080:	2fff      	cmp	r7, #255	; 0xff
 801d082:	bf14      	ite	ne
 801d084:	2308      	movne	r3, #8
 801d086:	2302      	moveq	r3, #2
 801d088:	2600      	movs	r6, #0
 801d08a:	4604      	mov	r4, r0
 801d08c:	4689      	mov	r9, r1
 801d08e:	4692      	mov	sl, r2
 801d090:	e9cd 3602 	strd	r3, r6, [sp, #8]
 801d094:	9608      	str	r6, [sp, #32]
 801d096:	f7ff fe8d 	bl	801cdb4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801d09a:	e9cd 8500 	strd	r8, r5, [sp]
 801d09e:	4603      	mov	r3, r0
 801d0a0:	465a      	mov	r2, fp
 801d0a2:	4651      	mov	r1, sl
 801d0a4:	4620      	mov	r0, r4
 801d0a6:	f7ff fee7 	bl	801ce78 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801d0aa:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801d0ae:	f8ad 3018 	strh.w	r3, [sp, #24]
 801d0b2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801d0b6:	f8ad 301a 	strh.w	r3, [sp, #26]
 801d0ba:	6823      	ldr	r3, [r4, #0]
 801d0bc:	9005      	str	r0, [sp, #20]
 801d0be:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 801d0c2:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 801d0c6:	f8ad 601c 	strh.w	r6, [sp, #28]
 801d0ca:	f8ad 801e 	strh.w	r8, [sp, #30]
 801d0ce:	f8cd 9020 	str.w	r9, [sp, #32]
 801d0d2:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 801d0d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d0d8:	9d02      	ldr	r5, [sp, #8]
 801d0da:	4620      	mov	r0, r4
 801d0dc:	4798      	blx	r3
 801d0de:	4228      	tst	r0, r5
 801d0e0:	d106      	bne.n	801d0f0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 801d0e2:	4b07      	ldr	r3, [pc, #28]	; (801d100 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 801d0e4:	4a07      	ldr	r2, [pc, #28]	; (801d104 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 801d0e6:	4808      	ldr	r0, [pc, #32]	; (801d108 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 801d0e8:	f240 11e7 	movw	r1, #487	; 0x1e7
 801d0ec:	f011 f8bc 	bl	802e268 <__assert_func>
 801d0f0:	6860      	ldr	r0, [r4, #4]
 801d0f2:	6803      	ldr	r3, [r0, #0]
 801d0f4:	a902      	add	r1, sp, #8
 801d0f6:	685b      	ldr	r3, [r3, #4]
 801d0f8:	4798      	blx	r3
 801d0fa:	b00b      	add	sp, #44	; 0x2c
 801d0fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d100:	0803298b 	.word	0x0803298b
 801d104:	08032cd3 	.word	0x08032cd3
 801d108:	080328d7 	.word	0x080328d7

0801d10c <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 801d10c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801d110:	461f      	mov	r7, r3
 801d112:	4b0b      	ldr	r3, [pc, #44]	; (801d140 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801d114:	460d      	mov	r5, r1
 801d116:	f8b3 8000 	ldrh.w	r8, [r3]
 801d11a:	4616      	mov	r6, r2
 801d11c:	4604      	mov	r4, r0
 801d11e:	f7eb fd1f 	bl	8008b60 <_ZN8touchgfx3HAL3lcdEv>
 801d122:	6803      	ldr	r3, [r0, #0]
 801d124:	6a1b      	ldr	r3, [r3, #32]
 801d126:	4798      	blx	r3
 801d128:	463b      	mov	r3, r7
 801d12a:	e9cd 8000 	strd	r8, r0, [sp]
 801d12e:	4632      	mov	r2, r6
 801d130:	4629      	mov	r1, r5
 801d132:	4620      	mov	r0, r4
 801d134:	f7ff fea0 	bl	801ce78 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801d138:	b002      	add	sp, #8
 801d13a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d13e:	bf00      	nop
 801d140:	2001289e 	.word	0x2001289e

0801d144 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 801d144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d148:	b088      	sub	sp, #32
 801d14a:	4698      	mov	r8, r3
 801d14c:	2300      	movs	r3, #0
 801d14e:	9306      	str	r3, [sp, #24]
 801d150:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801d154:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 801d158:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801d15c:	f8ad 6010 	strh.w	r6, [sp, #16]
 801d160:	e9cd 3100 	strd	r3, r1, [sp]
 801d164:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801d168:	f8ad 3014 	strh.w	r3, [sp, #20]
 801d16c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801d170:	f88d 301c 	strb.w	r3, [sp, #28]
 801d174:	4617      	mov	r7, r2
 801d176:	4604      	mov	r4, r0
 801d178:	f8ad 5012 	strh.w	r5, [sp, #18]
 801d17c:	f7ff fe1a 	bl	801cdb4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801d180:	4642      	mov	r2, r8
 801d182:	4603      	mov	r3, r0
 801d184:	4639      	mov	r1, r7
 801d186:	4620      	mov	r0, r4
 801d188:	f7ff ffc0 	bl	801d10c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801d18c:	4b16      	ldr	r3, [pc, #88]	; (801d1e8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 801d18e:	9003      	str	r0, [sp, #12]
 801d190:	881b      	ldrh	r3, [r3, #0]
 801d192:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d196:	f7eb fce3 	bl	8008b60 <_ZN8touchgfx3HAL3lcdEv>
 801d19a:	6803      	ldr	r3, [r0, #0]
 801d19c:	6a1b      	ldr	r3, [r3, #32]
 801d19e:	4798      	blx	r3
 801d1a0:	f88d 001e 	strb.w	r0, [sp, #30]
 801d1a4:	f88d 001d 	strb.w	r0, [sp, #29]
 801d1a8:	b106      	cbz	r6, 801d1ac <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 801d1aa:	b935      	cbnz	r5, 801d1ba <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 801d1ac:	4b0f      	ldr	r3, [pc, #60]	; (801d1ec <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 801d1ae:	4a10      	ldr	r2, [pc, #64]	; (801d1f0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 801d1b0:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 801d1b4:	480f      	ldr	r0, [pc, #60]	; (801d1f4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 801d1b6:	f011 f857 	bl	802e268 <__assert_func>
 801d1ba:	6823      	ldr	r3, [r4, #0]
 801d1bc:	9d00      	ldr	r5, [sp, #0]
 801d1be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d1c0:	4620      	mov	r0, r4
 801d1c2:	4798      	blx	r3
 801d1c4:	4228      	tst	r0, r5
 801d1c6:	d104      	bne.n	801d1d2 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 801d1c8:	4b0b      	ldr	r3, [pc, #44]	; (801d1f8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 801d1ca:	4a09      	ldr	r2, [pc, #36]	; (801d1f0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 801d1cc:	f240 11cd 	movw	r1, #461	; 0x1cd
 801d1d0:	e7f0      	b.n	801d1b4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 801d1d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d1d4:	6860      	ldr	r0, [r4, #4]
 801d1d6:	9306      	str	r3, [sp, #24]
 801d1d8:	6803      	ldr	r3, [r0, #0]
 801d1da:	4669      	mov	r1, sp
 801d1dc:	685b      	ldr	r3, [r3, #4]
 801d1de:	4798      	blx	r3
 801d1e0:	b008      	add	sp, #32
 801d1e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d1e6:	bf00      	nop
 801d1e8:	2001289e 	.word	0x2001289e
 801d1ec:	08032953 	.word	0x08032953
 801d1f0:	08032abc 	.word	0x08032abc
 801d1f4:	080328d7 	.word	0x080328d7
 801d1f8:	0803298b 	.word	0x0803298b

0801d1fc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 801d1fc:	b570      	push	{r4, r5, r6, lr}
 801d1fe:	b08a      	sub	sp, #40	; 0x28
 801d200:	466b      	mov	r3, sp
 801d202:	e883 0006 	stmia.w	r3, {r1, r2}
 801d206:	4b20      	ldr	r3, [pc, #128]	; (801d288 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 801d208:	781b      	ldrb	r3, [r3, #0]
 801d20a:	4604      	mov	r4, r0
 801d20c:	b933      	cbnz	r3, 801d21c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 801d20e:	4b1f      	ldr	r3, [pc, #124]	; (801d28c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 801d210:	4a1f      	ldr	r2, [pc, #124]	; (801d290 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 801d212:	4820      	ldr	r0, [pc, #128]	; (801d294 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 801d214:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 801d218:	f011 f826 	bl	802e268 <__assert_func>
 801d21c:	2300      	movs	r3, #0
 801d21e:	9308      	str	r3, [sp, #32]
 801d220:	2301      	movs	r3, #1
 801d222:	9302      	str	r3, [sp, #8]
 801d224:	6803      	ldr	r3, [r0, #0]
 801d226:	f8bd 5000 	ldrh.w	r5, [sp]
 801d22a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d22c:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 801d230:	4798      	blx	r3
 801d232:	4632      	mov	r2, r6
 801d234:	4629      	mov	r1, r5
 801d236:	4603      	mov	r3, r0
 801d238:	4620      	mov	r0, r4
 801d23a:	f7ff ff67 	bl	801d10c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801d23e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801d240:	9305      	str	r3, [sp, #20]
 801d242:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801d246:	f8ad 3018 	strh.w	r3, [sp, #24]
 801d24a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801d24e:	f8ad 301a 	strh.w	r3, [sp, #26]
 801d252:	4b11      	ldr	r3, [pc, #68]	; (801d298 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 801d254:	9003      	str	r0, [sp, #12]
 801d256:	881b      	ldrh	r3, [r3, #0]
 801d258:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d25c:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d260:	f7eb fc7e 	bl	8008b60 <_ZN8touchgfx3HAL3lcdEv>
 801d264:	6803      	ldr	r3, [r0, #0]
 801d266:	6a1b      	ldr	r3, [r3, #32]
 801d268:	4798      	blx	r3
 801d26a:	23ff      	movs	r3, #255	; 0xff
 801d26c:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 801d270:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 801d274:	6860      	ldr	r0, [r4, #4]
 801d276:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801d27a:	6803      	ldr	r3, [r0, #0]
 801d27c:	a902      	add	r1, sp, #8
 801d27e:	685b      	ldr	r3, [r3, #4]
 801d280:	4798      	blx	r3
 801d282:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801d284:	b00a      	add	sp, #40	; 0x28
 801d286:	bd70      	pop	{r4, r5, r6, pc}
 801d288:	200128a3 	.word	0x200128a3
 801d28c:	08032824 	.word	0x08032824
 801d290:	08032b60 	.word	0x08032b60
 801d294:	080328d7 	.word	0x080328d7
 801d298:	2001289e 	.word	0x2001289e

0801d29c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 801d29c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d29e:	b08b      	sub	sp, #44	; 0x2c
 801d2a0:	466d      	mov	r5, sp
 801d2a2:	e885 0006 	stmia.w	r5, {r1, r2}
 801d2a6:	461d      	mov	r5, r3
 801d2a8:	2300      	movs	r3, #0
 801d2aa:	9308      	str	r3, [sp, #32]
 801d2ac:	2301      	movs	r3, #1
 801d2ae:	9302      	str	r3, [sp, #8]
 801d2b0:	6803      	ldr	r3, [r0, #0]
 801d2b2:	f8bd 6000 	ldrh.w	r6, [sp]
 801d2b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d2b8:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801d2bc:	4604      	mov	r4, r0
 801d2be:	4798      	blx	r3
 801d2c0:	463a      	mov	r2, r7
 801d2c2:	4631      	mov	r1, r6
 801d2c4:	4603      	mov	r3, r0
 801d2c6:	4620      	mov	r0, r4
 801d2c8:	f7ff ff20 	bl	801d10c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801d2cc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801d2d0:	f8ad 3018 	strh.w	r3, [sp, #24]
 801d2d4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801d2d8:	f8ad 301a 	strh.w	r3, [sp, #26]
 801d2dc:	4b0e      	ldr	r3, [pc, #56]	; (801d318 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 801d2de:	9003      	str	r0, [sp, #12]
 801d2e0:	881b      	ldrh	r3, [r3, #0]
 801d2e2:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d2e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d2e8:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d2ec:	9505      	str	r5, [sp, #20]
 801d2ee:	f7eb fc37 	bl	8008b60 <_ZN8touchgfx3HAL3lcdEv>
 801d2f2:	6803      	ldr	r3, [r0, #0]
 801d2f4:	6a1b      	ldr	r3, [r3, #32]
 801d2f6:	4798      	blx	r3
 801d2f8:	23ff      	movs	r3, #255	; 0xff
 801d2fa:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 801d2fe:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 801d302:	6860      	ldr	r0, [r4, #4]
 801d304:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801d308:	6803      	ldr	r3, [r0, #0]
 801d30a:	a902      	add	r1, sp, #8
 801d30c:	685b      	ldr	r3, [r3, #4]
 801d30e:	4798      	blx	r3
 801d310:	4628      	mov	r0, r5
 801d312:	b00b      	add	sp, #44	; 0x2c
 801d314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d316:	bf00      	nop
 801d318:	2001289e 	.word	0x2001289e

0801d31c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801d31c:	b570      	push	{r4, r5, r6, lr}
 801d31e:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801d322:	4604      	mov	r4, r0
 801d324:	b19b      	cbz	r3, 801d34e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801d326:	2002      	movs	r0, #2
 801d328:	f7eb fbda 	bl	8008ae0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 801d32c:	2300      	movs	r3, #0
 801d32e:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801d332:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 801d336:	6823      	ldr	r3, [r4, #0]
 801d338:	4620      	mov	r0, r4
 801d33a:	f8d3 50a0 	ldr.w	r5, [r3, #160]	; 0xa0
 801d33e:	f7ff fd39 	bl	801cdb4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801d342:	462b      	mov	r3, r5
 801d344:	4601      	mov	r1, r0
 801d346:	4620      	mov	r0, r4
 801d348:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d34c:	4718      	bx	r3
 801d34e:	bd70      	pop	{r4, r5, r6, pc}

0801d350 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 801d350:	4770      	bx	lr

0801d352 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801d352:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801d356:	1a13      	subs	r3, r2, r0
 801d358:	4258      	negs	r0, r3
 801d35a:	4158      	adcs	r0, r3
 801d35c:	4770      	bx	lr

0801d35e <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801d35e:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801d362:	1a9b      	subs	r3, r3, r2
 801d364:	2b00      	cmp	r3, #0
 801d366:	bfdc      	itt	le
 801d368:	6882      	ldrle	r2, [r0, #8]
 801d36a:	189b      	addle	r3, r3, r2
 801d36c:	2b01      	cmp	r3, #1
 801d36e:	bfcc      	ite	gt
 801d370:	2000      	movgt	r0, #0
 801d372:	2001      	movle	r0, #1
 801d374:	4770      	bx	lr

0801d376 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801d376:	6902      	ldr	r2, [r0, #16]
 801d378:	6840      	ldr	r0, [r0, #4]
 801d37a:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 801d37e:	4770      	bx	lr

0801d380 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801d380:	6803      	ldr	r3, [r0, #0]
 801d382:	691b      	ldr	r3, [r3, #16]
 801d384:	4718      	bx	r3

0801d386 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801d386:	4770      	bx	lr

0801d388 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801d388:	4770      	bx	lr
	...

0801d38c <_ZN8touchgfx13DMA_Interface7executeEv>:
 801d38c:	b570      	push	{r4, r5, r6, lr}
 801d38e:	2301      	movs	r3, #1
 801d390:	7203      	strb	r3, [r0, #8]
 801d392:	4604      	mov	r4, r0
 801d394:	6840      	ldr	r0, [r0, #4]
 801d396:	6803      	ldr	r3, [r0, #0]
 801d398:	699b      	ldr	r3, [r3, #24]
 801d39a:	4798      	blx	r3
 801d39c:	6803      	ldr	r3, [r0, #0]
 801d39e:	2b08      	cmp	r3, #8
 801d3a0:	4605      	mov	r5, r0
 801d3a2:	d01e      	beq.n	801d3e2 <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 801d3a4:	d80b      	bhi.n	801d3be <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801d3a6:	2b02      	cmp	r3, #2
 801d3a8:	d027      	beq.n	801d3fa <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 801d3aa:	2b04      	cmp	r3, #4
 801d3ac:	d011      	beq.n	801d3d2 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 801d3ae:	2b01      	cmp	r3, #1
 801d3b0:	d028      	beq.n	801d404 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801d3b2:	4b17      	ldr	r3, [pc, #92]	; (801d410 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 801d3b4:	4a17      	ldr	r2, [pc, #92]	; (801d414 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 801d3b6:	4818      	ldr	r0, [pc, #96]	; (801d418 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 801d3b8:	218b      	movs	r1, #139	; 0x8b
 801d3ba:	f010 ff55 	bl	802e268 <__assert_func>
 801d3be:	2b40      	cmp	r3, #64	; 0x40
 801d3c0:	d020      	beq.n	801d404 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801d3c2:	d801      	bhi.n	801d3c8 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 801d3c4:	2b20      	cmp	r3, #32
 801d3c6:	e7f3      	b.n	801d3b0 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 801d3c8:	2b80      	cmp	r3, #128	; 0x80
 801d3ca:	d01b      	beq.n	801d404 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801d3cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d3d0:	e7ee      	b.n	801d3b0 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 801d3d2:	6823      	ldr	r3, [r4, #0]
 801d3d4:	7f01      	ldrb	r1, [r0, #28]
 801d3d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d3d8:	4620      	mov	r0, r4
 801d3da:	4798      	blx	r3
 801d3dc:	6823      	ldr	r3, [r4, #0]
 801d3de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d3e0:	e006      	b.n	801d3f0 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801d3e2:	6823      	ldr	r3, [r4, #0]
 801d3e4:	7f01      	ldrb	r1, [r0, #28]
 801d3e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d3e8:	4620      	mov	r0, r4
 801d3ea:	4798      	blx	r3
 801d3ec:	6823      	ldr	r3, [r4, #0]
 801d3ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d3f0:	4629      	mov	r1, r5
 801d3f2:	4620      	mov	r0, r4
 801d3f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d3f8:	4718      	bx	r3
 801d3fa:	6823      	ldr	r3, [r4, #0]
 801d3fc:	4620      	mov	r0, r4
 801d3fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d400:	4798      	blx	r3
 801d402:	e7f3      	b.n	801d3ec <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 801d404:	6823      	ldr	r3, [r4, #0]
 801d406:	4620      	mov	r0, r4
 801d408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d40a:	4798      	blx	r3
 801d40c:	e7e6      	b.n	801d3dc <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 801d40e:	bf00      	nop
 801d410:	08032db1 	.word	0x08032db1
 801d414:	08032ec0 	.word	0x08032ec0
 801d418:	08032dd6 	.word	0x08032dd6

0801d41c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 801d41c:	b570      	push	{r4, r5, r6, lr}
 801d41e:	4604      	mov	r4, r0
 801d420:	460e      	mov	r6, r1
 801d422:	6860      	ldr	r0, [r4, #4]
 801d424:	6803      	ldr	r3, [r0, #0]
 801d426:	685b      	ldr	r3, [r3, #4]
 801d428:	4798      	blx	r3
 801d42a:	2800      	cmp	r0, #0
 801d42c:	d1f9      	bne.n	801d422 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801d42e:	4d0b      	ldr	r5, [pc, #44]	; (801d45c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 801d430:	6828      	ldr	r0, [r5, #0]
 801d432:	6803      	ldr	r3, [r0, #0]
 801d434:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801d436:	4798      	blx	r3
 801d438:	f7eb fe80 	bl	800913c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801d43c:	6860      	ldr	r0, [r4, #4]
 801d43e:	6803      	ldr	r3, [r0, #0]
 801d440:	4631      	mov	r1, r6
 801d442:	689b      	ldr	r3, [r3, #8]
 801d444:	4798      	blx	r3
 801d446:	6823      	ldr	r3, [r4, #0]
 801d448:	4620      	mov	r0, r4
 801d44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d44c:	4798      	blx	r3
 801d44e:	6828      	ldr	r0, [r5, #0]
 801d450:	6803      	ldr	r3, [r0, #0]
 801d452:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801d458:	4718      	bx	r3
 801d45a:	bf00      	nop
 801d45c:	200128a4 	.word	0x200128a4

0801d460 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 801d460:	b508      	push	{r3, lr}
 801d462:	f7eb fe31 	bl	80090c8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801d466:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801d46a:	f7eb be4b 	b.w	8009104 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801d46e <_ZN8touchgfx13DMA_Interface5startEv>:
 801d46e:	b510      	push	{r4, lr}
 801d470:	4604      	mov	r4, r0
 801d472:	6840      	ldr	r0, [r0, #4]
 801d474:	6803      	ldr	r3, [r0, #0]
 801d476:	681b      	ldr	r3, [r3, #0]
 801d478:	4798      	blx	r3
 801d47a:	b948      	cbnz	r0, 801d490 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801d47c:	7a63      	ldrb	r3, [r4, #9]
 801d47e:	b13b      	cbz	r3, 801d490 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801d480:	7a23      	ldrb	r3, [r4, #8]
 801d482:	b92b      	cbnz	r3, 801d490 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801d484:	6823      	ldr	r3, [r4, #0]
 801d486:	4620      	mov	r0, r4
 801d488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d48a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d48e:	4718      	bx	r3
 801d490:	bd10      	pop	{r4, pc}
	...

0801d494 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801d494:	b510      	push	{r4, lr}
 801d496:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 801d49a:	1b12      	subs	r2, r2, r4
 801d49c:	2a00      	cmp	r2, #0
 801d49e:	bfdc      	itt	le
 801d4a0:	6883      	ldrle	r3, [r0, #8]
 801d4a2:	18d2      	addle	r2, r2, r3
 801d4a4:	2a01      	cmp	r2, #1
 801d4a6:	dd18      	ble.n	801d4da <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 801d4a8:	6843      	ldr	r3, [r0, #4]
 801d4aa:	f101 021c 	add.w	r2, r1, #28
 801d4ae:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 801d4b2:	f851 4b04 	ldr.w	r4, [r1], #4
 801d4b6:	f843 4b04 	str.w	r4, [r3], #4
 801d4ba:	4291      	cmp	r1, r2
 801d4bc:	d1f9      	bne.n	801d4b2 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 801d4be:	880a      	ldrh	r2, [r1, #0]
 801d4c0:	801a      	strh	r2, [r3, #0]
 801d4c2:	788a      	ldrb	r2, [r1, #2]
 801d4c4:	709a      	strb	r2, [r3, #2]
 801d4c6:	68c3      	ldr	r3, [r0, #12]
 801d4c8:	6882      	ldr	r2, [r0, #8]
 801d4ca:	f3bf 8f5b 	dmb	ish
 801d4ce:	3301      	adds	r3, #1
 801d4d0:	429a      	cmp	r2, r3
 801d4d2:	bfd8      	it	le
 801d4d4:	1a9b      	suble	r3, r3, r2
 801d4d6:	60c3      	str	r3, [r0, #12]
 801d4d8:	bd10      	pop	{r4, pc}
 801d4da:	4b03      	ldr	r3, [pc, #12]	; (801d4e8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 801d4dc:	4a03      	ldr	r2, [pc, #12]	; (801d4ec <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 801d4de:	4804      	ldr	r0, [pc, #16]	; (801d4f0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 801d4e0:	2139      	movs	r1, #57	; 0x39
 801d4e2:	f010 fec1 	bl	802e268 <__assert_func>
 801d4e6:	bf00      	nop
 801d4e8:	08032dfc 	.word	0x08032dfc
 801d4ec:	08032ef0 	.word	0x08032ef0
 801d4f0:	08032dd6 	.word	0x08032dd6

0801d4f4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 801d4f4:	b510      	push	{r4, lr}
 801d4f6:	6803      	ldr	r3, [r0, #0]
 801d4f8:	681b      	ldr	r3, [r3, #0]
 801d4fa:	4604      	mov	r4, r0
 801d4fc:	4798      	blx	r3
 801d4fe:	b128      	cbz	r0, 801d50c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 801d500:	4b07      	ldr	r3, [pc, #28]	; (801d520 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 801d502:	4a08      	ldr	r2, [pc, #32]	; (801d524 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 801d504:	4808      	ldr	r0, [pc, #32]	; (801d528 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 801d506:	213f      	movs	r1, #63	; 0x3f
 801d508:	f010 feae 	bl	802e268 <__assert_func>
 801d50c:	6923      	ldr	r3, [r4, #16]
 801d50e:	68a2      	ldr	r2, [r4, #8]
 801d510:	f3bf 8f5b 	dmb	ish
 801d514:	3301      	adds	r3, #1
 801d516:	429a      	cmp	r2, r3
 801d518:	bfd8      	it	le
 801d51a:	1a9b      	suble	r3, r3, r2
 801d51c:	6123      	str	r3, [r4, #16]
 801d51e:	bd10      	pop	{r4, pc}
 801d520:	08032e1f 	.word	0x08032e1f
 801d524:	08032f3e 	.word	0x08032f3e
 801d528:	08032dd6 	.word	0x08032dd6

0801d52c <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801d52c:	b570      	push	{r4, r5, r6, lr}
 801d52e:	4604      	mov	r4, r0
 801d530:	6840      	ldr	r0, [r0, #4]
 801d532:	6803      	ldr	r3, [r0, #0]
 801d534:	681b      	ldr	r3, [r3, #0]
 801d536:	4798      	blx	r3
 801d538:	4605      	mov	r5, r0
 801d53a:	b930      	cbnz	r0, 801d54a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801d53c:	7a23      	ldrb	r3, [r4, #8]
 801d53e:	b123      	cbz	r3, 801d54a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801d540:	6860      	ldr	r0, [r4, #4]
 801d542:	6803      	ldr	r3, [r0, #0]
 801d544:	695b      	ldr	r3, [r3, #20]
 801d546:	4798      	blx	r3
 801d548:	7225      	strb	r5, [r4, #8]
 801d54a:	6860      	ldr	r0, [r4, #4]
 801d54c:	6803      	ldr	r3, [r0, #0]
 801d54e:	681b      	ldr	r3, [r3, #0]
 801d550:	4798      	blx	r3
 801d552:	b928      	cbnz	r0, 801d560 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 801d554:	6823      	ldr	r3, [r4, #0]
 801d556:	4620      	mov	r0, r4
 801d558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d55a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d55e:	4718      	bx	r3
 801d560:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d564:	f7eb be06 	b.w	8009174 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0801d568 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 801d568:	b510      	push	{r4, lr}
 801d56a:	4c04      	ldr	r4, [pc, #16]	; (801d57c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 801d56c:	6082      	str	r2, [r0, #8]
 801d56e:	2200      	movs	r2, #0
 801d570:	e9c0 4100 	strd	r4, r1, [r0]
 801d574:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801d578:	bd10      	pop	{r4, pc}
 801d57a:	bf00      	nop
 801d57c:	08032ea4 	.word	0x08032ea4

0801d580 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801d580:	6840      	ldr	r0, [r0, #4]
 801d582:	6803      	ldr	r3, [r0, #0]
 801d584:	681b      	ldr	r3, [r3, #0]
 801d586:	4718      	bx	r3

0801d588 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 801d588:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 801d58c:	4770      	bx	lr

0801d58e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 801d58e:	b570      	push	{r4, r5, r6, lr}
 801d590:	790b      	ldrb	r3, [r1, #4]
 801d592:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 801d596:	2b00      	cmp	r3, #0
 801d598:	bf0c      	ite	eq
 801d59a:	2301      	moveq	r3, #1
 801d59c:	2300      	movne	r3, #0
 801d59e:	4604      	mov	r4, r0
 801d5a0:	460e      	mov	r6, r1
 801d5a2:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801d5a6:	d110      	bne.n	801d5ca <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801d5a8:	b185      	cbz	r5, 801d5cc <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3e>
 801d5aa:	7933      	ldrb	r3, [r6, #4]
 801d5ac:	2b01      	cmp	r3, #1
 801d5ae:	d113      	bne.n	801d5d8 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801d5b0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801d5b2:	b188      	cbz	r0, 801d5d8 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801d5b4:	6803      	ldr	r3, [r0, #0]
 801d5b6:	68db      	ldr	r3, [r3, #12]
 801d5b8:	4798      	blx	r3
 801d5ba:	b168      	cbz	r0, 801d5d8 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801d5bc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801d5be:	6803      	ldr	r3, [r0, #0]
 801d5c0:	4621      	mov	r1, r4
 801d5c2:	689b      	ldr	r3, [r3, #8]
 801d5c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d5c8:	4718      	bx	r3
 801d5ca:	b12d      	cbz	r5, 801d5d8 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801d5cc:	6823      	ldr	r3, [r4, #0]
 801d5ce:	4620      	mov	r0, r4
 801d5d0:	695b      	ldr	r3, [r3, #20]
 801d5d2:	4798      	blx	r3
 801d5d4:	2d00      	cmp	r5, #0
 801d5d6:	d1e8      	bne.n	801d5aa <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 801d5d8:	bd70      	pop	{r4, r5, r6, pc}

0801d5da <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE>:
 801d5da:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801d5de:	b133      	cbz	r3, 801d5ee <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x14>
 801d5e0:	790b      	ldrb	r3, [r1, #4]
 801d5e2:	2b01      	cmp	r3, #1
 801d5e4:	bf01      	itttt	eq
 801d5e6:	8dc3      	ldrheq	r3, [r0, #46]	; 0x2e
 801d5e8:	8e02      	ldrheq	r2, [r0, #48]	; 0x30
 801d5ea:	85c2      	strheq	r2, [r0, #46]	; 0x2e
 801d5ec:	8603      	strheq	r3, [r0, #48]	; 0x30
 801d5ee:	f7ff bfce 	b.w	801d58e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>

0801d5f2 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:
 801d5f2:	6803      	ldr	r3, [r0, #0]
 801d5f4:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 801d5f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801d5fa:	4718      	bx	r3

0801d5fc <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:
 801d5fc:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801d600:	2bff      	cmp	r3, #255	; 0xff
 801d602:	b510      	push	{r4, lr}
 801d604:	d104      	bne.n	801d610 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x14>
 801d606:	8cca      	ldrh	r2, [r1, #38]	; 0x26
 801d608:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d60c:	429a      	cmp	r2, r3
 801d60e:	d105      	bne.n	801d61c <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
 801d610:	2300      	movs	r3, #0
 801d612:	8003      	strh	r3, [r0, #0]
 801d614:	8043      	strh	r3, [r0, #2]
 801d616:	8083      	strh	r3, [r0, #4]
 801d618:	80c3      	strh	r3, [r0, #6]
 801d61a:	bd10      	pop	{r4, pc}
 801d61c:	2300      	movs	r3, #0
 801d61e:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 801d622:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 801d626:	8003      	strh	r3, [r0, #0]
 801d628:	8043      	strh	r3, [r0, #2]
 801d62a:	8084      	strh	r4, [r0, #4]
 801d62c:	80c2      	strh	r2, [r0, #6]
 801d62e:	e7f4      	b.n	801d61a <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x1e>

0801d630 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:
 801d630:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d634:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 801d638:	b087      	sub	sp, #28
 801d63a:	4604      	mov	r4, r0
 801d63c:	4689      	mov	r9, r1
 801d63e:	b363      	cbz	r3, 801d69a <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 801d640:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801d642:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d646:	429a      	cmp	r2, r3
 801d648:	d027      	beq.n	801d69a <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 801d64a:	ad06      	add	r5, sp, #24
 801d64c:	2700      	movs	r7, #0
 801d64e:	f825 2d0c 	strh.w	r2, [r5, #-12]!
 801d652:	4628      	mov	r0, r5
 801d654:	f004 f8c0 	bl	80217d8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d658:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801d65c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d660:	6823      	ldr	r3, [r4, #0]
 801d662:	f8ad 0014 	strh.w	r0, [sp, #20]
 801d666:	a904      	add	r1, sp, #16
 801d668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d66a:	9704      	str	r7, [sp, #16]
 801d66c:	4620      	mov	r0, r4
 801d66e:	4798      	blx	r3
 801d670:	f7eb fa76 	bl	8008b60 <_ZN8touchgfx3HAL3lcdEv>
 801d674:	6803      	ldr	r3, [r0, #0]
 801d676:	4606      	mov	r6, r0
 801d678:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801d67c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801d67e:	f8ad 300c 	strh.w	r3, [sp, #12]
 801d682:	4628      	mov	r0, r5
 801d684:	f004 f9b0 	bl	80219e8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801d688:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801d68c:	9300      	str	r3, [sp, #0]
 801d68e:	4601      	mov	r1, r0
 801d690:	9701      	str	r7, [sp, #4]
 801d692:	464b      	mov	r3, r9
 801d694:	aa04      	add	r2, sp, #16
 801d696:	4630      	mov	r0, r6
 801d698:	47c0      	blx	r8
 801d69a:	b007      	add	sp, #28
 801d69c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801d6a0 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:
 801d6a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801d6a2:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801d6a6:	f8ad 3006 	strh.w	r3, [sp, #6]
 801d6aa:	6803      	ldr	r3, [r0, #0]
 801d6ac:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801d6b0:	f8ad 2004 	strh.w	r2, [sp, #4]
 801d6b4:	460d      	mov	r5, r1
 801d6b6:	2100      	movs	r1, #0
 801d6b8:	4604      	mov	r4, r0
 801d6ba:	6a1b      	ldr	r3, [r3, #32]
 801d6bc:	9100      	str	r1, [sp, #0]
 801d6be:	4669      	mov	r1, sp
 801d6c0:	4798      	blx	r3
 801d6c2:	4621      	mov	r1, r4
 801d6c4:	a802      	add	r0, sp, #8
 801d6c6:	f002 fa87 	bl	801fbd8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d6ca:	f7eb fa49 	bl	8008b60 <_ZN8touchgfx3HAL3lcdEv>
 801d6ce:	6803      	ldr	r3, [r0, #0]
 801d6d0:	aa02      	add	r2, sp, #8
 801d6d2:	695e      	ldr	r6, [r3, #20]
 801d6d4:	4669      	mov	r1, sp
 801d6d6:	462b      	mov	r3, r5
 801d6d8:	47b0      	blx	r6
 801d6da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d6de:	2800      	cmp	r0, #0
 801d6e0:	bf08      	it	eq
 801d6e2:	461d      	moveq	r5, r3
 801d6e4:	84e5      	strh	r5, [r4, #38]	; 0x26
 801d6e6:	b004      	add	sp, #16
 801d6e8:	bd70      	pop	{r4, r5, r6, pc}
	...

0801d6ec <_ZN8touchgfx14SnapshotWidgetC1Ev>:
 801d6ec:	2200      	movs	r2, #0
 801d6ee:	8082      	strh	r2, [r0, #4]
 801d6f0:	80c2      	strh	r2, [r0, #6]
 801d6f2:	8102      	strh	r2, [r0, #8]
 801d6f4:	8142      	strh	r2, [r0, #10]
 801d6f6:	8182      	strh	r2, [r0, #12]
 801d6f8:	81c2      	strh	r2, [r0, #14]
 801d6fa:	8202      	strh	r2, [r0, #16]
 801d6fc:	8242      	strh	r2, [r0, #18]
 801d6fe:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801d702:	61c2      	str	r2, [r0, #28]
 801d704:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 801d708:	2201      	movs	r2, #1
 801d70a:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 801d70e:	4a04      	ldr	r2, [pc, #16]	; (801d720 <_ZN8touchgfx14SnapshotWidgetC1Ev+0x34>)
 801d710:	6002      	str	r2, [r0, #0]
 801d712:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d716:	84c2      	strh	r2, [r0, #38]	; 0x26
 801d718:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801d71c:	4770      	bx	lr
 801d71e:	bf00      	nop
 801d720:	08033054 	.word	0x08033054

0801d724 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 801d724:	2200      	movs	r2, #0
 801d726:	8002      	strh	r2, [r0, #0]
 801d728:	8042      	strh	r2, [r0, #2]
 801d72a:	8082      	strh	r2, [r0, #4]
 801d72c:	80c2      	strh	r2, [r0, #6]
 801d72e:	4770      	bx	lr

0801d730 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 801d730:	b570      	push	{r4, r5, r6, lr}
 801d732:	6803      	ldr	r3, [r0, #0]
 801d734:	4604      	mov	r4, r0
 801d736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d738:	4615      	mov	r5, r2
 801d73a:	4798      	blx	r3
 801d73c:	6823      	ldr	r3, [r4, #0]
 801d73e:	4629      	mov	r1, r5
 801d740:	4620      	mov	r0, r4
 801d742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801d744:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d748:	4718      	bx	r3
	...

0801d74c <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 801d74c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d74e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801d750:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d754:	4299      	cmp	r1, r3
 801d756:	d029      	beq.n	801d7ac <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 801d758:	4b15      	ldr	r3, [pc, #84]	; (801d7b0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 801d75a:	681b      	ldr	r3, [r3, #0]
 801d75c:	b92b      	cbnz	r3, 801d76a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 801d75e:	4b15      	ldr	r3, [pc, #84]	; (801d7b4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 801d760:	4a15      	ldr	r2, [pc, #84]	; (801d7b8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 801d762:	21b1      	movs	r1, #177	; 0xb1
 801d764:	4815      	ldr	r0, [pc, #84]	; (801d7bc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 801d766:	f010 fd7f 	bl	802e268 <__assert_func>
 801d76a:	4a15      	ldr	r2, [pc, #84]	; (801d7c0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 801d76c:	8812      	ldrh	r2, [r2, #0]
 801d76e:	428a      	cmp	r2, r1
 801d770:	d803      	bhi.n	801d77a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 801d772:	4b14      	ldr	r3, [pc, #80]	; (801d7c4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 801d774:	4a10      	ldr	r2, [pc, #64]	; (801d7b8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 801d776:	21b2      	movs	r1, #178	; 0xb2
 801d778:	e7f4      	b.n	801d764 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 801d77a:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 801d77e:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 801d782:	4b11      	ldr	r3, [pc, #68]	; (801d7c8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 801d784:	7854      	ldrb	r4, [r2, #1]
 801d786:	681b      	ldr	r3, [r3, #0]
 801d788:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 801d78c:	682b      	ldr	r3, [r5, #0]
 801d78e:	69de      	ldr	r6, [r3, #28]
 801d790:	4b0e      	ldr	r3, [pc, #56]	; (801d7cc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 801d792:	6818      	ldr	r0, [r3, #0]
 801d794:	f7f1 fa0a 	bl	800ebac <_ZNK8touchgfx5Texts7getTextEt>
 801d798:	f3c4 0481 	ubfx	r4, r4, #2, #2
 801d79c:	2300      	movs	r3, #0
 801d79e:	4602      	mov	r2, r0
 801d7a0:	9300      	str	r3, [sp, #0]
 801d7a2:	4621      	mov	r1, r4
 801d7a4:	4628      	mov	r0, r5
 801d7a6:	47b0      	blx	r6
 801d7a8:	b002      	add	sp, #8
 801d7aa:	bd70      	pop	{r4, r5, r6, pc}
 801d7ac:	2000      	movs	r0, #0
 801d7ae:	e7fb      	b.n	801d7a8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 801d7b0:	20012914 	.word	0x20012914
 801d7b4:	080330bc 	.word	0x080330bc
 801d7b8:	080331f8 	.word	0x080331f8
 801d7bc:	080330fe 	.word	0x080330fe
 801d7c0:	20012918 	.word	0x20012918
 801d7c4:	08033127 	.word	0x08033127
 801d7c8:	2001291c 	.word	0x2001291c
 801d7cc:	20012920 	.word	0x20012920

0801d7d0 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 801d7d0:	b570      	push	{r4, r5, r6, lr}
 801d7d2:	6803      	ldr	r3, [r0, #0]
 801d7d4:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801d7d6:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 801d7d8:	4b11      	ldr	r3, [pc, #68]	; (801d820 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 801d7da:	681b      	ldr	r3, [r3, #0]
 801d7dc:	4604      	mov	r4, r0
 801d7de:	b28d      	uxth	r5, r1
 801d7e0:	b92b      	cbnz	r3, 801d7ee <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 801d7e2:	4b10      	ldr	r3, [pc, #64]	; (801d824 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 801d7e4:	4a10      	ldr	r2, [pc, #64]	; (801d828 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 801d7e6:	21b1      	movs	r1, #177	; 0xb1
 801d7e8:	4810      	ldr	r0, [pc, #64]	; (801d82c <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 801d7ea:	f010 fd3d 	bl	802e268 <__assert_func>
 801d7ee:	4910      	ldr	r1, [pc, #64]	; (801d830 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 801d7f0:	8809      	ldrh	r1, [r1, #0]
 801d7f2:	4291      	cmp	r1, r2
 801d7f4:	d803      	bhi.n	801d7fe <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 801d7f6:	4b0f      	ldr	r3, [pc, #60]	; (801d834 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 801d7f8:	4a0b      	ldr	r2, [pc, #44]	; (801d828 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 801d7fa:	21b2      	movs	r1, #178	; 0xb2
 801d7fc:	e7f4      	b.n	801d7e8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 801d7fe:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 801d802:	4b0d      	ldr	r3, [pc, #52]	; (801d838 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 801d804:	681b      	ldr	r3, [r3, #0]
 801d806:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801d80a:	6803      	ldr	r3, [r0, #0]
 801d80c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d80e:	4798      	blx	r3
 801d810:	1a29      	subs	r1, r5, r0
 801d812:	4633      	mov	r3, r6
 801d814:	4620      	mov	r0, r4
 801d816:	b209      	sxth	r1, r1
 801d818:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d81c:	4718      	bx	r3
 801d81e:	bf00      	nop
 801d820:	20012914 	.word	0x20012914
 801d824:	080330bc 	.word	0x080330bc
 801d828:	080331f8 	.word	0x080331f8
 801d82c:	080330fe 	.word	0x080330fe
 801d830:	20012918 	.word	0x20012918
 801d834:	08033127 	.word	0x08033127
 801d838:	2001291c 	.word	0x2001291c

0801d83c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 801d83c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d840:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801d842:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d846:	4293      	cmp	r3, r2
 801d848:	b08c      	sub	sp, #48	; 0x30
 801d84a:	4604      	mov	r4, r0
 801d84c:	4688      	mov	r8, r1
 801d84e:	d05f      	beq.n	801d910 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 801d850:	4e31      	ldr	r6, [pc, #196]	; (801d918 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 801d852:	6832      	ldr	r2, [r6, #0]
 801d854:	b92a      	cbnz	r2, 801d862 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 801d856:	4b31      	ldr	r3, [pc, #196]	; (801d91c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 801d858:	4a31      	ldr	r2, [pc, #196]	; (801d920 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 801d85a:	21b1      	movs	r1, #177	; 0xb1
 801d85c:	4831      	ldr	r0, [pc, #196]	; (801d924 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 801d85e:	f010 fd03 	bl	802e268 <__assert_func>
 801d862:	4d31      	ldr	r5, [pc, #196]	; (801d928 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 801d864:	8829      	ldrh	r1, [r5, #0]
 801d866:	4299      	cmp	r1, r3
 801d868:	d803      	bhi.n	801d872 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 801d86a:	4b30      	ldr	r3, [pc, #192]	; (801d92c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 801d86c:	4a2c      	ldr	r2, [pc, #176]	; (801d920 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 801d86e:	21b2      	movs	r1, #178	; 0xb2
 801d870:	e7f4      	b.n	801d85c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 801d872:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801d876:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801d87a:	4b2d      	ldr	r3, [pc, #180]	; (801d930 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 801d87c:	681b      	ldr	r3, [r3, #0]
 801d87e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801d882:	2a00      	cmp	r2, #0
 801d884:	d044      	beq.n	801d910 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 801d886:	784b      	ldrb	r3, [r1, #1]
 801d888:	9207      	str	r2, [sp, #28]
 801d88a:	f3c3 0901 	ubfx	r9, r3, #0, #2
 801d88e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801d892:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 801d896:	4b27      	ldr	r3, [pc, #156]	; (801d934 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 801d898:	f890 a036 	ldrb.w	sl, [r0, #54]	; 0x36
 801d89c:	681b      	ldr	r3, [r3, #0]
 801d89e:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 801d8a2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801d8a6:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 801d8aa:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 801d8ae:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 801d8b2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801d8b4:	9009      	str	r0, [sp, #36]	; 0x24
 801d8b6:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 801d8ba:	f88d 9020 	strb.w	r9, [sp, #32]
 801d8be:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 801d8c2:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 801d8c6:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 801d8ca:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 801d8ce:	b10a      	cbz	r2, 801d8d4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 801d8d0:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 801d8d2:	b907      	cbnz	r7, 801d8d6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 801d8d4:	689f      	ldr	r7, [r3, #8]
 801d8d6:	f10d 0914 	add.w	r9, sp, #20
 801d8da:	4621      	mov	r1, r4
 801d8dc:	4648      	mov	r0, r9
 801d8de:	f002 f97b 	bl	801fbd8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d8e2:	6833      	ldr	r3, [r6, #0]
 801d8e4:	2b00      	cmp	r3, #0
 801d8e6:	d0b6      	beq.n	801d856 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 801d8e8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801d8ea:	882b      	ldrh	r3, [r5, #0]
 801d8ec:	428b      	cmp	r3, r1
 801d8ee:	d9bc      	bls.n	801d86a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 801d8f0:	4b11      	ldr	r3, [pc, #68]	; (801d938 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 801d8f2:	6818      	ldr	r0, [r3, #0]
 801d8f4:	f7f1 f95a 	bl	800ebac <_ZNK8touchgfx5Texts7getTextEt>
 801d8f8:	2300      	movs	r3, #0
 801d8fa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801d8fe:	ab07      	add	r3, sp, #28
 801d900:	9001      	str	r0, [sp, #4]
 801d902:	9300      	str	r3, [sp, #0]
 801d904:	e899 0006 	ldmia.w	r9, {r1, r2}
 801d908:	4643      	mov	r3, r8
 801d90a:	4638      	mov	r0, r7
 801d90c:	f7f1 f8df 	bl	800eace <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801d910:	b00c      	add	sp, #48	; 0x30
 801d912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d916:	bf00      	nop
 801d918:	20012914 	.word	0x20012914
 801d91c:	080330bc 	.word	0x080330bc
 801d920:	080331f8 	.word	0x080331f8
 801d924:	080330fe 	.word	0x080330fe
 801d928:	20012918 	.word	0x20012918
 801d92c:	08033127 	.word	0x08033127
 801d930:	2001291c 	.word	0x2001291c
 801d934:	200128a4 	.word	0x200128a4
 801d938:	20012920 	.word	0x20012920

0801d93c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 801d93c:	b40e      	push	{r1, r2, r3}
 801d93e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d942:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801d944:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d948:	4293      	cmp	r3, r2
 801d94a:	b09b      	sub	sp, #108	; 0x6c
 801d94c:	4604      	mov	r4, r0
 801d94e:	d061      	beq.n	801da14 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd8>
 801d950:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801da28 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 801d954:	aa24      	add	r2, sp, #144	; 0x90
 801d956:	9203      	str	r2, [sp, #12]
 801d958:	f8da 2000 	ldr.w	r2, [sl]
 801d95c:	b92a      	cbnz	r2, 801d96a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 801d95e:	4b2e      	ldr	r3, [pc, #184]	; (801da18 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>)
 801d960:	4a2e      	ldr	r2, [pc, #184]	; (801da1c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
 801d962:	21b1      	movs	r1, #177	; 0xb1
 801d964:	482e      	ldr	r0, [pc, #184]	; (801da20 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe4>)
 801d966:	f010 fc7f 	bl	802e268 <__assert_func>
 801d96a:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 801da2c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>
 801d96e:	f8b8 1000 	ldrh.w	r1, [r8]
 801d972:	4299      	cmp	r1, r3
 801d974:	d803      	bhi.n	801d97e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 801d976:	4b2b      	ldr	r3, [pc, #172]	; (801da24 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>)
 801d978:	4a28      	ldr	r2, [pc, #160]	; (801da1c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
 801d97a:	21b2      	movs	r1, #178	; 0xb2
 801d97c:	e7f2      	b.n	801d964 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 801d97e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 801da30 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>
 801d982:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801d986:	f8d9 3000 	ldr.w	r3, [r9]
 801d98a:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801d98e:	683b      	ldr	r3, [r7, #0]
 801d990:	4638      	mov	r0, r7
 801d992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d994:	4798      	blx	r3
 801d996:	4606      	mov	r6, r0
 801d998:	b205      	sxth	r5, r0
 801d99a:	a804      	add	r0, sp, #16
 801d99c:	f002 fd4f 	bl	802043e <_ZN8touchgfx12TextProviderC1Ev>
 801d9a0:	683b      	ldr	r3, [r7, #0]
 801d9a2:	4638      	mov	r0, r7
 801d9a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d9a6:	4798      	blx	r3
 801d9a8:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801d9aa:	9a03      	ldr	r2, [sp, #12]
 801d9ac:	4603      	mov	r3, r0
 801d9ae:	a804      	add	r0, sp, #16
 801d9b0:	f002 fd8a 	bl	80204c8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801d9b4:	f8da 3000 	ldr.w	r3, [sl]
 801d9b8:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 801d9bc:	2b00      	cmp	r3, #0
 801d9be:	d0ce      	beq.n	801d95e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 801d9c0:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801d9c2:	f8b8 0000 	ldrh.w	r0, [r8]
 801d9c6:	4290      	cmp	r0, r2
 801d9c8:	d9d5      	bls.n	801d976 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 801d9ca:	eb03 0742 	add.w	r7, r3, r2, lsl #1
 801d9ce:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 801d9d2:	787a      	ldrb	r2, [r7, #1]
 801d9d4:	f8d9 3000 	ldr.w	r3, [r9]
 801d9d8:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
 801d9dc:	9700      	str	r7, [sp, #0]
 801d9de:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801d9e2:	f3c2 0281 	ubfx	r2, r2, #2, #2
 801d9e6:	a804      	add	r0, sp, #16
 801d9e8:	f000 ff70 	bl	801e8cc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 801d9ec:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 801d9f0:	18a9      	adds	r1, r5, r2
 801d9f2:	2900      	cmp	r1, #0
 801d9f4:	b203      	sxth	r3, r0
 801d9f6:	dd0b      	ble.n	801da10 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd4>
 801d9f8:	3b01      	subs	r3, #1
 801d9fa:	fb13 f302 	smulbb	r3, r3, r2
 801d9fe:	fb16 3300 	smlabb	r3, r6, r0, r3
 801da02:	b21d      	sxth	r5, r3
 801da04:	4628      	mov	r0, r5
 801da06:	b01b      	add	sp, #108	; 0x6c
 801da08:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801da0c:	b003      	add	sp, #12
 801da0e:	4770      	bx	lr
 801da10:	2b00      	cmp	r3, #0
 801da12:	dcf7      	bgt.n	801da04 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 801da14:	2500      	movs	r5, #0
 801da16:	e7f5      	b.n	801da04 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 801da18:	080330bc 	.word	0x080330bc
 801da1c:	080331f8 	.word	0x080331f8
 801da20:	080330fe 	.word	0x080330fe
 801da24:	08033127 	.word	0x08033127
 801da28:	20012914 	.word	0x20012914
 801da2c:	20012918 	.word	0x20012918
 801da30:	2001291c 	.word	0x2001291c

0801da34 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 801da34:	b570      	push	{r4, r5, r6, lr}
 801da36:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801da38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801da3c:	4299      	cmp	r1, r3
 801da3e:	4604      	mov	r4, r0
 801da40:	d01e      	beq.n	801da80 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 801da42:	6803      	ldr	r3, [r0, #0]
 801da44:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 801da46:	4b0f      	ldr	r3, [pc, #60]	; (801da84 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 801da48:	681b      	ldr	r3, [r3, #0]
 801da4a:	b92b      	cbnz	r3, 801da58 <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 801da4c:	4b0e      	ldr	r3, [pc, #56]	; (801da88 <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 801da4e:	4a0f      	ldr	r2, [pc, #60]	; (801da8c <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 801da50:	21b1      	movs	r1, #177	; 0xb1
 801da52:	480f      	ldr	r0, [pc, #60]	; (801da90 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 801da54:	f010 fc08 	bl	802e268 <__assert_func>
 801da58:	4b0e      	ldr	r3, [pc, #56]	; (801da94 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 801da5a:	881b      	ldrh	r3, [r3, #0]
 801da5c:	428b      	cmp	r3, r1
 801da5e:	d803      	bhi.n	801da68 <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 801da60:	4b0d      	ldr	r3, [pc, #52]	; (801da98 <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 801da62:	4a0a      	ldr	r2, [pc, #40]	; (801da8c <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 801da64:	21b2      	movs	r1, #178	; 0xb2
 801da66:	e7f4      	b.n	801da52 <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 801da68:	4b0c      	ldr	r3, [pc, #48]	; (801da9c <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 801da6a:	6818      	ldr	r0, [r3, #0]
 801da6c:	f7f1 f89e 	bl	800ebac <_ZNK8touchgfx5Texts7getTextEt>
 801da70:	2300      	movs	r3, #0
 801da72:	4601      	mov	r1, r0
 801da74:	46ac      	mov	ip, r5
 801da76:	4620      	mov	r0, r4
 801da78:	461a      	mov	r2, r3
 801da7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801da7e:	4760      	bx	ip
 801da80:	2000      	movs	r0, #0
 801da82:	bd70      	pop	{r4, r5, r6, pc}
 801da84:	20012914 	.word	0x20012914
 801da88:	080330bc 	.word	0x080330bc
 801da8c:	080331f8 	.word	0x080331f8
 801da90:	080330fe 	.word	0x080330fe
 801da94:	20012918 	.word	0x20012918
 801da98:	08033127 	.word	0x08033127
 801da9c:	20012920 	.word	0x20012920

0801daa0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 801daa0:	b570      	push	{r4, r5, r6, lr}
 801daa2:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801daa4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801daa8:	429a      	cmp	r2, r3
 801daaa:	4604      	mov	r4, r0
 801daac:	d021      	beq.n	801daf2 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 801daae:	6803      	ldr	r3, [r0, #0]
 801dab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801dab2:	4798      	blx	r3
 801dab4:	6823      	ldr	r3, [r4, #0]
 801dab6:	4605      	mov	r5, r0
 801dab8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801daba:	4620      	mov	r0, r4
 801dabc:	4798      	blx	r3
 801dabe:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801dac2:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801dac6:	6823      	ldr	r3, [r4, #0]
 801dac8:	4606      	mov	r6, r0
 801daca:	b22d      	sxth	r5, r5
 801dacc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dace:	d109      	bne.n	801dae4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 801dad0:	4629      	mov	r1, r5
 801dad2:	4620      	mov	r0, r4
 801dad4:	4798      	blx	r3
 801dad6:	6823      	ldr	r3, [r4, #0]
 801dad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801dada:	4631      	mov	r1, r6
 801dadc:	4620      	mov	r0, r4
 801dade:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dae2:	4718      	bx	r3
 801dae4:	4601      	mov	r1, r0
 801dae6:	4620      	mov	r0, r4
 801dae8:	4798      	blx	r3
 801daea:	6823      	ldr	r3, [r4, #0]
 801daec:	4629      	mov	r1, r5
 801daee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801daf0:	e7f4      	b.n	801dadc <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 801daf2:	bd70      	pop	{r4, r5, r6, pc}

0801daf4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 801daf4:	888a      	ldrh	r2, [r1, #4]
 801daf6:	8582      	strh	r2, [r0, #44]	; 0x2c
 801daf8:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801dafc:	b922      	cbnz	r2, 801db08 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
 801dafe:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801db02:	b90b      	cbnz	r3, 801db08 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
 801db04:	f7ff bfcc 	b.w	801daa0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801db08:	4770      	bx	lr

0801db0a <_ZNK8touchgfx3Box12getSolidRectEv>:
 801db0a:	2300      	movs	r3, #0
 801db0c:	8003      	strh	r3, [r0, #0]
 801db0e:	8043      	strh	r3, [r0, #2]
 801db10:	8083      	strh	r3, [r0, #4]
 801db12:	80c3      	strh	r3, [r0, #6]
 801db14:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801db18:	b91b      	cbnz	r3, 801db22 <_ZNK8touchgfx3Box12getSolidRectEv+0x18>
 801db1a:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801db1e:	2bff      	cmp	r3, #255	; 0xff
 801db20:	d103      	bne.n	801db2a <_ZNK8touchgfx3Box12getSolidRectEv+0x20>
 801db22:	890b      	ldrh	r3, [r1, #8]
 801db24:	8083      	strh	r3, [r0, #4]
 801db26:	894b      	ldrh	r3, [r1, #10]
 801db28:	80c3      	strh	r3, [r0, #6]
 801db2a:	4770      	bx	lr

0801db2c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801db2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801db2e:	4604      	mov	r4, r0
 801db30:	6808      	ldr	r0, [r1, #0]
 801db32:	6849      	ldr	r1, [r1, #4]
 801db34:	466b      	mov	r3, sp
 801db36:	c303      	stmia	r3!, {r0, r1}
 801db38:	6823      	ldr	r3, [r4, #0]
 801db3a:	4669      	mov	r1, sp
 801db3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801db3e:	4620      	mov	r0, r4
 801db40:	4798      	blx	r3
 801db42:	4b08      	ldr	r3, [pc, #32]	; (801db64 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801db44:	681b      	ldr	r3, [r3, #0]
 801db46:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801db4a:	b10a      	cbz	r2, 801db50 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801db4c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801db4e:	b900      	cbnz	r0, 801db52 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801db50:	6898      	ldr	r0, [r3, #8]
 801db52:	6803      	ldr	r3, [r0, #0]
 801db54:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801db56:	699d      	ldr	r5, [r3, #24]
 801db58:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801db5c:	4669      	mov	r1, sp
 801db5e:	47a8      	blx	r5
 801db60:	b003      	add	sp, #12
 801db62:	bd30      	pop	{r4, r5, pc}
 801db64:	200128a4 	.word	0x200128a4

0801db68 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 801db68:	b538      	push	{r3, r4, r5, lr}
 801db6a:	880b      	ldrh	r3, [r1, #0]
 801db6c:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801db6e:	4605      	mov	r5, r0
 801db70:	8813      	ldrh	r3, [r2, #0]
 801db72:	f825 3f30 	strh.w	r3, [r5, #48]!
 801db76:	4604      	mov	r4, r0
 801db78:	4628      	mov	r0, r5
 801db7a:	f003 fe2d 	bl	80217d8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801db7e:	8120      	strh	r0, [r4, #8]
 801db80:	4628      	mov	r0, r5
 801db82:	f003 fe63 	bl	802184c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801db86:	8160      	strh	r0, [r4, #10]
 801db88:	bd38      	pop	{r3, r4, r5, pc}

0801db8a <_ZNK8touchgfx6Button12getSolidRectEv>:
 801db8a:	b510      	push	{r4, lr}
 801db8c:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 801db90:	2bff      	cmp	r3, #255	; 0xff
 801db92:	4604      	mov	r4, r0
 801db94:	d006      	beq.n	801dba4 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 801db96:	2300      	movs	r3, #0
 801db98:	8003      	strh	r3, [r0, #0]
 801db9a:	8043      	strh	r3, [r0, #2]
 801db9c:	8083      	strh	r3, [r0, #4]
 801db9e:	80c3      	strh	r3, [r0, #6]
 801dba0:	4620      	mov	r0, r4
 801dba2:	bd10      	pop	{r4, pc}
 801dba4:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801dba8:	b11b      	cbz	r3, 801dbb2 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 801dbaa:	3130      	adds	r1, #48	; 0x30
 801dbac:	f003 fe88 	bl	80218c0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801dbb0:	e7f6      	b.n	801dba0 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 801dbb2:	312e      	adds	r1, #46	; 0x2e
 801dbb4:	e7fa      	b.n	801dbac <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

0801dbb8 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 801dbb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dbbc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801dbc0:	b08a      	sub	sp, #40	; 0x28
 801dbc2:	4604      	mov	r4, r0
 801dbc4:	4688      	mov	r8, r1
 801dbc6:	2b00      	cmp	r3, #0
 801dbc8:	d044      	beq.n	801dc54 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 801dbca:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801dbcc:	f8ad 3014 	strh.w	r3, [sp, #20]
 801dbd0:	a805      	add	r0, sp, #20
 801dbd2:	f003 fe01 	bl	80217d8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801dbd6:	4605      	mov	r5, r0
 801dbd8:	b206      	sxth	r6, r0
 801dbda:	a805      	add	r0, sp, #20
 801dbdc:	f003 fe36 	bl	802184c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801dbe0:	f9b8 2000 	ldrsh.w	r2, [r8]
 801dbe4:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 801dbe8:	4417      	add	r7, r2
 801dbea:	b2bf      	uxth	r7, r7
 801dbec:	2300      	movs	r3, #0
 801dbee:	fa0f fe87 	sxth.w	lr, r7
 801dbf2:	459e      	cmp	lr, r3
 801dbf4:	fa0f fc80 	sxth.w	ip, r0
 801dbf8:	9306      	str	r3, [sp, #24]
 801dbfa:	dd2d      	ble.n	801dc58 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 801dbfc:	4296      	cmp	r6, r2
 801dbfe:	dd2b      	ble.n	801dc58 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 801dc00:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 801dc04:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 801dc08:	4419      	add	r1, r3
 801dc0a:	b289      	uxth	r1, r1
 801dc0c:	fa0f f881 	sxth.w	r8, r1
 801dc10:	f1b8 0f00 	cmp.w	r8, #0
 801dc14:	dd20      	ble.n	801dc58 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 801dc16:	459c      	cmp	ip, r3
 801dc18:	dd1e      	ble.n	801dc58 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 801dc1a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 801dc1e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dc22:	4576      	cmp	r6, lr
 801dc24:	bfa8      	it	ge
 801dc26:	463d      	movge	r5, r7
 801dc28:	45c4      	cmp	ip, r8
 801dc2a:	bfa8      	it	ge
 801dc2c:	4608      	movge	r0, r1
 801dc2e:	1aad      	subs	r5, r5, r2
 801dc30:	1ac0      	subs	r0, r0, r3
 801dc32:	f8ad 501c 	strh.w	r5, [sp, #28]
 801dc36:	f8ad 001e 	strh.w	r0, [sp, #30]
 801dc3a:	f8ad 2018 	strh.w	r2, [sp, #24]
 801dc3e:	f8ad 301a 	strh.w	r3, [sp, #26]
 801dc42:	4b1f      	ldr	r3, [pc, #124]	; (801dcc0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 801dc44:	681b      	ldr	r3, [r3, #0]
 801dc46:	b953      	cbnz	r3, 801dc5e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 801dc48:	4b1e      	ldr	r3, [pc, #120]	; (801dcc4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 801dc4a:	4a1f      	ldr	r2, [pc, #124]	; (801dcc8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 801dc4c:	481f      	ldr	r0, [pc, #124]	; (801dccc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 801dc4e:	2189      	movs	r1, #137	; 0x89
 801dc50:	f010 fb0a 	bl	802e268 <__assert_func>
 801dc54:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801dc56:	e7b9      	b.n	801dbcc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 801dc58:	2300      	movs	r3, #0
 801dc5a:	9307      	str	r3, [sp, #28]
 801dc5c:	e7f1      	b.n	801dc42 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 801dc5e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801dc62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801dc66:	429a      	cmp	r2, r3
 801dc68:	d026      	beq.n	801dcb8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 801dc6a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801dc6e:	2b00      	cmp	r3, #0
 801dc70:	dd22      	ble.n	801dcb8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 801dc72:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801dc76:	2b00      	cmp	r3, #0
 801dc78:	dd1e      	ble.n	801dcb8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 801dc7a:	2300      	movs	r3, #0
 801dc7c:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801dc80:	6823      	ldr	r3, [r4, #0]
 801dc82:	a908      	add	r1, sp, #32
 801dc84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dc86:	4620      	mov	r0, r4
 801dc88:	4798      	blx	r3
 801dc8a:	4b11      	ldr	r3, [pc, #68]	; (801dcd0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 801dc8c:	681b      	ldr	r3, [r3, #0]
 801dc8e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801dc92:	b10a      	cbz	r2, 801dc98 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 801dc94:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801dc96:	b900      	cbnz	r0, 801dc9a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 801dc98:	6898      	ldr	r0, [r3, #8]
 801dc9a:	6801      	ldr	r1, [r0, #0]
 801dc9c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801dca0:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801dca4:	2501      	movs	r5, #1
 801dca6:	9502      	str	r5, [sp, #8]
 801dca8:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 801dcac:	9401      	str	r4, [sp, #4]
 801dcae:	ac06      	add	r4, sp, #24
 801dcb0:	9400      	str	r4, [sp, #0]
 801dcb2:	688c      	ldr	r4, [r1, #8]
 801dcb4:	a905      	add	r1, sp, #20
 801dcb6:	47a0      	blx	r4
 801dcb8:	b00a      	add	sp, #40	; 0x28
 801dcba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dcbe:	bf00      	nop
 801dcc0:	2001294c 	.word	0x2001294c
 801dcc4:	08033290 	.word	0x08033290
 801dcc8:	08033364 	.word	0x08033364
 801dccc:	080332cc 	.word	0x080332cc
 801dcd0:	200128a4 	.word	0x200128a4

0801dcd4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 801dcd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801dcd6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801dcd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801dcdc:	4299      	cmp	r1, r3
 801dcde:	4606      	mov	r6, r0
 801dce0:	d02a      	beq.n	801dd38 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 801dce2:	4b16      	ldr	r3, [pc, #88]	; (801dd3c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 801dce4:	681b      	ldr	r3, [r3, #0]
 801dce6:	b92b      	cbnz	r3, 801dcf4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 801dce8:	4b15      	ldr	r3, [pc, #84]	; (801dd40 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 801dcea:	4a16      	ldr	r2, [pc, #88]	; (801dd44 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 801dcec:	21b1      	movs	r1, #177	; 0xb1
 801dcee:	4816      	ldr	r0, [pc, #88]	; (801dd48 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 801dcf0:	f010 faba 	bl	802e268 <__assert_func>
 801dcf4:	4a15      	ldr	r2, [pc, #84]	; (801dd4c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 801dcf6:	8812      	ldrh	r2, [r2, #0]
 801dcf8:	428a      	cmp	r2, r1
 801dcfa:	d803      	bhi.n	801dd04 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 801dcfc:	4b14      	ldr	r3, [pc, #80]	; (801dd50 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 801dcfe:	4a11      	ldr	r2, [pc, #68]	; (801dd44 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 801dd00:	21b2      	movs	r1, #178	; 0xb2
 801dd02:	e7f4      	b.n	801dcee <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 801dd04:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 801dd08:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 801dd0c:	4b11      	ldr	r3, [pc, #68]	; (801dd54 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 801dd0e:	7854      	ldrb	r4, [r2, #1]
 801dd10:	681b      	ldr	r3, [r3, #0]
 801dd12:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 801dd16:	682b      	ldr	r3, [r5, #0]
 801dd18:	69df      	ldr	r7, [r3, #28]
 801dd1a:	4b0f      	ldr	r3, [pc, #60]	; (801dd58 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 801dd1c:	6818      	ldr	r0, [r3, #0]
 801dd1e:	f7f0 ff45 	bl	800ebac <_ZNK8touchgfx5Texts7getTextEt>
 801dd22:	f3c4 0481 	ubfx	r4, r4, #2, #2
 801dd26:	2300      	movs	r3, #0
 801dd28:	9300      	str	r3, [sp, #0]
 801dd2a:	4602      	mov	r2, r0
 801dd2c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 801dd2e:	4621      	mov	r1, r4
 801dd30:	4628      	mov	r0, r5
 801dd32:	47b8      	blx	r7
 801dd34:	b003      	add	sp, #12
 801dd36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dd38:	2000      	movs	r0, #0
 801dd3a:	e7fb      	b.n	801dd34 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 801dd3c:	20012914 	.word	0x20012914
 801dd40:	080330bc 	.word	0x080330bc
 801dd44:	08033414 	.word	0x08033414
 801dd48:	080330fe 	.word	0x080330fe
 801dd4c:	20012918 	.word	0x20012918
 801dd50:	08033127 	.word	0x08033127
 801dd54:	2001291c 	.word	0x2001291c
 801dd58:	20012920 	.word	0x20012920

0801dd5c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 801dd5c:	b570      	push	{r4, r5, r6, lr}
 801dd5e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801dd60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801dd64:	4299      	cmp	r1, r3
 801dd66:	4604      	mov	r4, r0
 801dd68:	d01e      	beq.n	801dda8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 801dd6a:	6803      	ldr	r3, [r0, #0]
 801dd6c:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 801dd6e:	4b0f      	ldr	r3, [pc, #60]	; (801ddac <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 801dd70:	681b      	ldr	r3, [r3, #0]
 801dd72:	b92b      	cbnz	r3, 801dd80 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 801dd74:	4b0e      	ldr	r3, [pc, #56]	; (801ddb0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 801dd76:	4a0f      	ldr	r2, [pc, #60]	; (801ddb4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 801dd78:	21b1      	movs	r1, #177	; 0xb1
 801dd7a:	480f      	ldr	r0, [pc, #60]	; (801ddb8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 801dd7c:	f010 fa74 	bl	802e268 <__assert_func>
 801dd80:	4b0e      	ldr	r3, [pc, #56]	; (801ddbc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 801dd82:	881b      	ldrh	r3, [r3, #0]
 801dd84:	428b      	cmp	r3, r1
 801dd86:	d803      	bhi.n	801dd90 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 801dd88:	4b0d      	ldr	r3, [pc, #52]	; (801ddc0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 801dd8a:	4a0a      	ldr	r2, [pc, #40]	; (801ddb4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 801dd8c:	21b2      	movs	r1, #178	; 0xb2
 801dd8e:	e7f4      	b.n	801dd7a <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 801dd90:	4b0c      	ldr	r3, [pc, #48]	; (801ddc4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 801dd92:	6818      	ldr	r0, [r3, #0]
 801dd94:	f7f0 ff0a 	bl	800ebac <_ZNK8touchgfx5Texts7getTextEt>
 801dd98:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801dd9a:	4601      	mov	r1, r0
 801dd9c:	46ac      	mov	ip, r5
 801dd9e:	4620      	mov	r0, r4
 801dda0:	2300      	movs	r3, #0
 801dda2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dda6:	4760      	bx	ip
 801dda8:	2000      	movs	r0, #0
 801ddaa:	bd70      	pop	{r4, r5, r6, pc}
 801ddac:	20012914 	.word	0x20012914
 801ddb0:	080330bc 	.word	0x080330bc
 801ddb4:	08033414 	.word	0x08033414
 801ddb8:	080330fe 	.word	0x080330fe
 801ddbc:	20012918 	.word	0x20012918
 801ddc0:	08033127 	.word	0x08033127
 801ddc4:	20012920 	.word	0x20012920

0801ddc8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 801ddc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ddcc:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801ddce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ddd2:	4293      	cmp	r3, r2
 801ddd4:	b08c      	sub	sp, #48	; 0x30
 801ddd6:	4604      	mov	r4, r0
 801ddd8:	460e      	mov	r6, r1
 801ddda:	d05d      	beq.n	801de98 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 801dddc:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 801debc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 801dde0:	f8d8 2000 	ldr.w	r2, [r8]
 801dde4:	b92a      	cbnz	r2, 801ddf2 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 801dde6:	4b2e      	ldr	r3, [pc, #184]	; (801dea0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 801dde8:	4a2e      	ldr	r2, [pc, #184]	; (801dea4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 801ddea:	21b1      	movs	r1, #177	; 0xb1
 801ddec:	482e      	ldr	r0, [pc, #184]	; (801dea8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 801ddee:	f010 fa3b 	bl	802e268 <__assert_func>
 801ddf2:	4f2e      	ldr	r7, [pc, #184]	; (801deac <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 801ddf4:	8839      	ldrh	r1, [r7, #0]
 801ddf6:	4299      	cmp	r1, r3
 801ddf8:	d803      	bhi.n	801de02 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 801ddfa:	4b2d      	ldr	r3, [pc, #180]	; (801deb0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 801ddfc:	4a29      	ldr	r2, [pc, #164]	; (801dea4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 801ddfe:	21b2      	movs	r1, #178	; 0xb2
 801de00:	e7f4      	b.n	801ddec <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 801de02:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801de06:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801de0a:	4b2a      	ldr	r3, [pc, #168]	; (801deb4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 801de0c:	681b      	ldr	r3, [r3, #0]
 801de0e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801de12:	2a00      	cmp	r2, #0
 801de14:	d040      	beq.n	801de98 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 801de16:	784b      	ldrb	r3, [r1, #1]
 801de18:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 801de1c:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 801de20:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 801de24:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 801de28:	f890 a036 	ldrb.w	sl, [r0, #54]	; 0x36
 801de2c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801de2e:	9207      	str	r2, [sp, #28]
 801de30:	f3c3 0901 	ubfx	r9, r3, #0, #2
 801de34:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801de38:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 801de3c:	f88d 9020 	strb.w	r9, [sp, #32]
 801de40:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 801de44:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 801de48:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801de4c:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 801de50:	9009      	str	r0, [sp, #36]	; 0x24
 801de52:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 801de56:	f7ea fe83 	bl	8008b60 <_ZN8touchgfx3HAL3lcdEv>
 801de5a:	ad05      	add	r5, sp, #20
 801de5c:	4681      	mov	r9, r0
 801de5e:	4621      	mov	r1, r4
 801de60:	4628      	mov	r0, r5
 801de62:	f001 feb9 	bl	801fbd8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801de66:	f8d8 3000 	ldr.w	r3, [r8]
 801de6a:	2b00      	cmp	r3, #0
 801de6c:	d0bb      	beq.n	801dde6 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 801de6e:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801de70:	883b      	ldrh	r3, [r7, #0]
 801de72:	428b      	cmp	r3, r1
 801de74:	d9c1      	bls.n	801ddfa <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 801de76:	4b10      	ldr	r3, [pc, #64]	; (801deb8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 801de78:	6818      	ldr	r0, [r3, #0]
 801de7a:	f7f0 fe97 	bl	800ebac <_ZNK8touchgfx5Texts7getTextEt>
 801de7e:	2300      	movs	r3, #0
 801de80:	9303      	str	r3, [sp, #12]
 801de82:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801de84:	e9cd 0301 	strd	r0, r3, [sp, #4]
 801de88:	ab07      	add	r3, sp, #28
 801de8a:	9300      	str	r3, [sp, #0]
 801de8c:	e895 0006 	ldmia.w	r5, {r1, r2}
 801de90:	4633      	mov	r3, r6
 801de92:	4648      	mov	r0, r9
 801de94:	f7f0 fe1b 	bl	800eace <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801de98:	b00c      	add	sp, #48	; 0x30
 801de9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801de9e:	bf00      	nop
 801dea0:	080330bc 	.word	0x080330bc
 801dea4:	08033414 	.word	0x08033414
 801dea8:	080330fe 	.word	0x080330fe
 801deac:	20012918 	.word	0x20012918
 801deb0:	08033127 	.word	0x08033127
 801deb4:	2001291c 	.word	0x2001291c
 801deb8:	20012920 	.word	0x20012920
 801debc:	20012914 	.word	0x20012914

0801dec0 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>:
 801dec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dec4:	461c      	mov	r4, r3
 801dec6:	4606      	mov	r6, r0
 801dec8:	9f06      	ldr	r7, [sp, #24]
 801deca:	f7ff fe4d 	bl	801db68 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 801dece:	8823      	ldrh	r3, [r4, #0]
 801ded0:	86b3      	strh	r3, [r6, #52]	; 0x34
 801ded2:	883b      	ldrh	r3, [r7, #0]
 801ded4:	86f3      	strh	r3, [r6, #54]	; 0x36
 801ded6:	4638      	mov	r0, r7
 801ded8:	f9b6 5008 	ldrsh.w	r5, [r6, #8]
 801dedc:	f003 fc7c 	bl	80217d8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801dee0:	f04f 0802 	mov.w	r8, #2
 801dee4:	fb95 f5f8 	sdiv	r5, r5, r8
 801dee8:	b2ad      	uxth	r5, r5
 801deea:	eba5 0050 	sub.w	r0, r5, r0, lsr #1
 801deee:	8730      	strh	r0, [r6, #56]	; 0x38
 801def0:	4638      	mov	r0, r7
 801def2:	f9b6 400a 	ldrsh.w	r4, [r6, #10]
 801def6:	fb94 f4f8 	sdiv	r4, r4, r8
 801defa:	f003 fca7 	bl	802184c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801defe:	b2a4      	uxth	r4, r4
 801df00:	eba4 0050 	sub.w	r0, r4, r0, lsr #1
 801df04:	8770      	strh	r0, [r6, #58]	; 0x3a
 801df06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801df0c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE>:
 801df0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df10:	4604      	mov	r4, r0
 801df12:	b08c      	sub	sp, #48	; 0x30
 801df14:	460d      	mov	r5, r1
 801df16:	f7ff fe4f 	bl	801dbb8 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 801df1a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801df1e:	b33b      	cbz	r3, 801df70 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x64>
 801df20:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801df22:	f8ad 3014 	strh.w	r3, [sp, #20]
 801df26:	a805      	add	r0, sp, #20
 801df28:	f9b4 8038 	ldrsh.w	r8, [r4, #56]	; 0x38
 801df2c:	f9b4 703a 	ldrsh.w	r7, [r4, #58]	; 0x3a
 801df30:	f003 fc52 	bl	80217d8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801df34:	4606      	mov	r6, r0
 801df36:	a805      	add	r0, sp, #20
 801df38:	f003 fc88 	bl	802184c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801df3c:	6869      	ldr	r1, [r5, #4]
 801df3e:	f8ad 001e 	strh.w	r0, [sp, #30]
 801df42:	6828      	ldr	r0, [r5, #0]
 801df44:	f8ad 8018 	strh.w	r8, [sp, #24]
 801df48:	ab08      	add	r3, sp, #32
 801df4a:	ad08      	add	r5, sp, #32
 801df4c:	c303      	stmia	r3!, {r0, r1}
 801df4e:	a906      	add	r1, sp, #24
 801df50:	4628      	mov	r0, r5
 801df52:	f8ad 701a 	strh.w	r7, [sp, #26]
 801df56:	f8ad 601c 	strh.w	r6, [sp, #28]
 801df5a:	f7fc ff83 	bl	801ae64 <_ZN8touchgfx4RectaNERKS0_>
 801df5e:	4b25      	ldr	r3, [pc, #148]	; (801dff4 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe8>)
 801df60:	681b      	ldr	r3, [r3, #0]
 801df62:	b93b      	cbnz	r3, 801df74 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x68>
 801df64:	4b24      	ldr	r3, [pc, #144]	; (801dff8 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xec>)
 801df66:	4a25      	ldr	r2, [pc, #148]	; (801dffc <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf0>)
 801df68:	4825      	ldr	r0, [pc, #148]	; (801e000 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf4>)
 801df6a:	2189      	movs	r1, #137	; 0x89
 801df6c:	f010 f97c 	bl	802e268 <__assert_func>
 801df70:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801df72:	e7d6      	b.n	801df22 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x16>
 801df74:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801df78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801df7c:	429a      	cmp	r2, r3
 801df7e:	d035      	beq.n	801dfec <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe0>
 801df80:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801df84:	2b00      	cmp	r3, #0
 801df86:	dd31      	ble.n	801dfec <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe0>
 801df88:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801df8c:	2b00      	cmp	r3, #0
 801df8e:	dd2d      	ble.n	801dfec <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe0>
 801df90:	2300      	movs	r3, #0
 801df92:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 801df96:	6823      	ldr	r3, [r4, #0]
 801df98:	a90a      	add	r1, sp, #40	; 0x28
 801df9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801df9c:	4620      	mov	r0, r4
 801df9e:	4798      	blx	r3
 801dfa0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801dfa4:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 801dfa6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801dfaa:	1a9b      	subs	r3, r3, r2
 801dfac:	f8ad 3020 	strh.w	r3, [sp, #32]
 801dfb0:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 801dfb2:	1ac9      	subs	r1, r1, r3
 801dfb4:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 801dfb8:	4912      	ldr	r1, [pc, #72]	; (801e004 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf8>)
 801dfba:	6809      	ldr	r1, [r1, #0]
 801dfbc:	f891 0076 	ldrb.w	r0, [r1, #118]	; 0x76
 801dfc0:	b108      	cbz	r0, 801dfc6 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xba>
 801dfc2:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 801dfc4:	b900      	cbnz	r0, 801dfc8 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xbc>
 801dfc6:	6888      	ldr	r0, [r1, #8]
 801dfc8:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
 801dfcc:	440b      	add	r3, r1
 801dfce:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801dfd2:	2601      	movs	r6, #1
 801dfd4:	440a      	add	r2, r1
 801dfd6:	6801      	ldr	r1, [r0, #0]
 801dfd8:	9602      	str	r6, [sp, #8]
 801dfda:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 801dfde:	e9cd 5400 	strd	r5, r4, [sp]
 801dfe2:	b21b      	sxth	r3, r3
 801dfe4:	688c      	ldr	r4, [r1, #8]
 801dfe6:	b212      	sxth	r2, r2
 801dfe8:	a905      	add	r1, sp, #20
 801dfea:	47a0      	blx	r4
 801dfec:	b00c      	add	sp, #48	; 0x30
 801dfee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dff2:	bf00      	nop
 801dff4:	2001294c 	.word	0x2001294c
 801dff8:	08033290 	.word	0x08033290
 801dffc:	080334b8 	.word	0x080334b8
 801e000:	080332cc 	.word	0x080332cc
 801e004:	200128a4 	.word	0x200128a4

0801e008 <_ZN8touchgfx14ButtonWithIconC1Ev>:
 801e008:	b510      	push	{r4, lr}
 801e00a:	2101      	movs	r1, #1
 801e00c:	2200      	movs	r2, #0
 801e00e:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 801e012:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 801e016:	4c0d      	ldr	r4, [pc, #52]	; (801e04c <_ZN8touchgfx14ButtonWithIconC1Ev+0x44>)
 801e018:	8082      	strh	r2, [r0, #4]
 801e01a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801e01e:	80c2      	strh	r2, [r0, #6]
 801e020:	8102      	strh	r2, [r0, #8]
 801e022:	8142      	strh	r2, [r0, #10]
 801e024:	8182      	strh	r2, [r0, #12]
 801e026:	81c2      	strh	r2, [r0, #14]
 801e028:	8202      	strh	r2, [r0, #16]
 801e02a:	8242      	strh	r2, [r0, #18]
 801e02c:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801e030:	61c2      	str	r2, [r0, #28]
 801e032:	6282      	str	r2, [r0, #40]	; 0x28
 801e034:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 801e038:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801e03a:	8601      	strh	r1, [r0, #48]	; 0x30
 801e03c:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 801e040:	6004      	str	r4, [r0, #0]
 801e042:	8681      	strh	r1, [r0, #52]	; 0x34
 801e044:	86c1      	strh	r1, [r0, #54]	; 0x36
 801e046:	8702      	strh	r2, [r0, #56]	; 0x38
 801e048:	8742      	strh	r2, [r0, #58]	; 0x3a
 801e04a:	bd10      	pop	{r4, pc}
 801e04c:	0803344c 	.word	0x0803344c

0801e050 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801e050:	b570      	push	{r4, r5, r6, lr}
 801e052:	4605      	mov	r5, r0
 801e054:	880b      	ldrh	r3, [r1, #0]
 801e056:	84c3      	strh	r3, [r0, #38]	; 0x26
 801e058:	f855 3b26 	ldr.w	r3, [r5], #38
 801e05c:	4604      	mov	r4, r0
 801e05e:	4628      	mov	r0, r5
 801e060:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 801e062:	f003 fbb9 	bl	80217d8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801e066:	b201      	sxth	r1, r0
 801e068:	4620      	mov	r0, r4
 801e06a:	47b0      	blx	r6
 801e06c:	6823      	ldr	r3, [r4, #0]
 801e06e:	4628      	mov	r0, r5
 801e070:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 801e072:	f003 fbeb 	bl	802184c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801e076:	4633      	mov	r3, r6
 801e078:	b201      	sxth	r1, r0
 801e07a:	4620      	mov	r0, r4
 801e07c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e080:	4718      	bx	r3

0801e082 <_ZNK8touchgfx5Image12getSolidRectEv>:
 801e082:	b510      	push	{r4, lr}
 801e084:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801e088:	2bff      	cmp	r3, #255	; 0xff
 801e08a:	4604      	mov	r4, r0
 801e08c:	d006      	beq.n	801e09c <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801e08e:	2300      	movs	r3, #0
 801e090:	8003      	strh	r3, [r0, #0]
 801e092:	8043      	strh	r3, [r0, #2]
 801e094:	8083      	strh	r3, [r0, #4]
 801e096:	80c3      	strh	r3, [r0, #6]
 801e098:	4620      	mov	r0, r4
 801e09a:	bd10      	pop	{r4, pc}
 801e09c:	3126      	adds	r1, #38	; 0x26
 801e09e:	f003 fc0f 	bl	80218c0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801e0a2:	e7f9      	b.n	801e098 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0801e0a4 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 801e0a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e0a8:	4604      	mov	r4, r0
 801e0aa:	b088      	sub	sp, #32
 801e0ac:	f854 3b26 	ldr.w	r3, [r4], #38
 801e0b0:	2500      	movs	r5, #0
 801e0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e0b4:	460f      	mov	r7, r1
 801e0b6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801e0ba:	a904      	add	r1, sp, #16
 801e0bc:	4606      	mov	r6, r0
 801e0be:	4798      	blx	r3
 801e0c0:	4620      	mov	r0, r4
 801e0c2:	f003 fb89 	bl	80217d8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801e0c6:	4680      	mov	r8, r0
 801e0c8:	4620      	mov	r0, r4
 801e0ca:	f003 fbbf 	bl	802184c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801e0ce:	9506      	str	r5, [sp, #24]
 801e0d0:	ad06      	add	r5, sp, #24
 801e0d2:	f8ad 001e 	strh.w	r0, [sp, #30]
 801e0d6:	4639      	mov	r1, r7
 801e0d8:	4628      	mov	r0, r5
 801e0da:	f8ad 801c 	strh.w	r8, [sp, #28]
 801e0de:	f7fc fec1 	bl	801ae64 <_ZN8touchgfx4RectaNERKS0_>
 801e0e2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801e0e6:	2b00      	cmp	r3, #0
 801e0e8:	dd19      	ble.n	801e11e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801e0ea:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801e0ee:	2b00      	cmp	r3, #0
 801e0f0:	dd15      	ble.n	801e11e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801e0f2:	4b0c      	ldr	r3, [pc, #48]	; (801e124 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 801e0f4:	681b      	ldr	r3, [r3, #0]
 801e0f6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801e0fa:	b10a      	cbz	r2, 801e100 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 801e0fc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801e0fe:	b900      	cbnz	r0, 801e102 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 801e100:	6898      	ldr	r0, [r3, #8]
 801e102:	6801      	ldr	r1, [r0, #0]
 801e104:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801e108:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801e10c:	2701      	movs	r7, #1
 801e10e:	9702      	str	r7, [sp, #8]
 801e110:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 801e114:	e9cd 5600 	strd	r5, r6, [sp]
 801e118:	688d      	ldr	r5, [r1, #8]
 801e11a:	4621      	mov	r1, r4
 801e11c:	47a8      	blx	r5
 801e11e:	b008      	add	sp, #32
 801e120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e124:	200128a4 	.word	0x200128a4

0801e128 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801e128:	2000      	movs	r0, #0
 801e12a:	4770      	bx	lr

0801e12c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801e12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e130:	b091      	sub	sp, #68	; 0x44
 801e132:	4699      	mov	r9, r3
 801e134:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 801e138:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 801e13a:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 801e13e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801e142:	4680      	mov	r8, r0
 801e144:	4617      	mov	r7, r2
 801e146:	a80e      	add	r0, sp, #56	; 0x38
 801e148:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 801e14c:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 801e150:	2500      	movs	r5, #0
 801e152:	910d      	str	r1, [sp, #52]	; 0x34
 801e154:	950e      	str	r5, [sp, #56]	; 0x38
 801e156:	f000 fe3b 	bl	801edd0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e15a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801e15c:	f8d9 6000 	ldr.w	r6, [r9]
 801e160:	6818      	ldr	r0, [r3, #0]
 801e162:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801e164:	f9b4 b000 	ldrsh.w	fp, [r4]
 801e168:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e16c:	eb02 0c06 	add.w	ip, r2, r6
 801e170:	1b80      	subs	r0, r0, r6
 801e172:	ebab 0e0c 	sub.w	lr, fp, ip
 801e176:	4570      	cmp	r0, lr
 801e178:	f340 80bd 	ble.w	801e2f6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ca>
 801e17c:	88a1      	ldrh	r1, [r4, #4]
 801e17e:	4459      	add	r1, fp
 801e180:	b209      	sxth	r1, r1
 801e182:	458c      	cmp	ip, r1
 801e184:	f300 80b7 	bgt.w	801e2f6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ca>
 801e188:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 801e18c:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 801e190:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 801e194:	edd9 6a07 	vldr	s13, [r9, #28]
 801e198:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 801e19c:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 801e1a0:	4283      	cmp	r3, r0
 801e1a2:	bfa8      	it	ge
 801e1a4:	4603      	movge	r3, r0
 801e1a6:	ee07 3a90 	vmov	s15, r3
 801e1aa:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801e1ae:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801e1b2:	ee25 4a04 	vmul.f32	s8, s10, s8
 801e1b6:	ee65 4a24 	vmul.f32	s9, s10, s9
 801e1ba:	ee25 5a27 	vmul.f32	s10, s10, s15
 801e1be:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801e1c2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801e1c6:	45e3      	cmp	fp, ip
 801e1c8:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801e1cc:	ee32 1a05 	vadd.f32	s2, s4, s10
 801e1d0:	ee36 0a84 	vadd.f32	s0, s13, s8
 801e1d4:	ee61 1a87 	vmul.f32	s3, s3, s14
 801e1d8:	ee22 2a07 	vmul.f32	s4, s4, s14
 801e1dc:	f340 808e 	ble.w	801e2fc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1d0>
 801e1e0:	fb9e f5f3 	sdiv	r5, lr, r3
 801e1e4:	ee07 5a10 	vmov	s14, r5
 801e1e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e1ec:	2d00      	cmp	r5, #0
 801e1ee:	fb03 e415 	mls	r4, r3, r5, lr
 801e1f2:	eea7 0a04 	vfma.f32	s0, s14, s8
 801e1f6:	eee7 0a24 	vfma.f32	s1, s14, s9
 801e1fa:	eea7 1a05 	vfma.f32	s2, s14, s10
 801e1fe:	dd13      	ble.n	801e228 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 801e200:	ee70 6a44 	vsub.f32	s13, s0, s8
 801e204:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801e208:	eef5 6a40 	vcmp.f32	s13, #0.0
 801e20c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e210:	bf18      	it	ne
 801e212:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801e216:	ee31 2a45 	vsub.f32	s4, s2, s10
 801e21a:	bf08      	it	eq
 801e21c:	eeb0 7a67 	vmoveq.f32	s14, s15
 801e220:	ee61 1a87 	vmul.f32	s3, s3, s14
 801e224:	ee22 2a07 	vmul.f32	s4, s4, s14
 801e228:	fb05 f703 	mul.w	r7, r5, r3
 801e22c:	1bc0      	subs	r0, r0, r7
 801e22e:	443e      	add	r6, r7
 801e230:	1997      	adds	r7, r2, r6
 801e232:	4407      	add	r7, r0
 801e234:	42b9      	cmp	r1, r7
 801e236:	bfbc      	itt	lt
 801e238:	1a88      	sublt	r0, r1, r2
 801e23a:	1b80      	sublt	r0, r0, r6
 801e23c:	2800      	cmp	r0, #0
 801e23e:	dd5a      	ble.n	801e2f6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ca>
 801e240:	fb90 f1f3 	sdiv	r1, r0, r3
 801e244:	fb03 0211 	mls	r2, r3, r1, r0
 801e248:	b90a      	cbnz	r2, 801e24e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x122>
 801e24a:	3901      	subs	r1, #1
 801e24c:	461a      	mov	r2, r3
 801e24e:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801e252:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 801e256:	44a4      	add	ip, r4
 801e258:	fb03 c505 	mla	r5, r3, r5, ip
 801e25c:	2900      	cmp	r1, #0
 801e25e:	bfcc      	ite	gt
 801e260:	469e      	movgt	lr, r3
 801e262:	4696      	movle	lr, r2
 801e264:	eef0 6a42 	vmov.f32	s13, s4
 801e268:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801e26c:	ee21 3a23 	vmul.f32	s6, s2, s7
 801e270:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801e274:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e278:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801e27c:	eeb0 7a61 	vmov.f32	s14, s3
 801e280:	ee17 0a90 	vmov	r0, s15
 801e284:	ee73 7a42 	vsub.f32	s15, s6, s4
 801e288:	fb90 f6f3 	sdiv	r6, r0, r3
 801e28c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801e290:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e294:	ee17 0a90 	vmov	r0, s15
 801e298:	fb90 f7f3 	sdiv	r7, r0, r3
 801e29c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801e2a0:	900c      	str	r0, [sp, #48]	; 0x30
 801e2a2:	f8d0 8000 	ldr.w	r8, [r0]
 801e2a6:	981c      	ldr	r0, [sp, #112]	; 0x70
 801e2a8:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801e2ac:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801e2b0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801e2b4:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801e2b8:	f8cd a020 	str.w	sl, [sp, #32]
 801e2bc:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 801e2c0:	980d      	ldr	r0, [sp, #52]	; 0x34
 801e2c2:	f8d9 9014 	ldr.w	r9, [r9, #20]
 801e2c6:	9603      	str	r6, [sp, #12]
 801e2c8:	e9cd 7004 	strd	r7, r0, [sp, #16]
 801e2cc:	ee16 0a90 	vmov	r0, s13
 801e2d0:	fb07 0704 	mla	r7, r7, r4, r0
 801e2d4:	ee17 0a10 	vmov	r0, s14
 801e2d8:	fb06 0604 	mla	r6, r6, r4, r0
 801e2dc:	e9cd 3600 	strd	r3, r6, [sp]
 801e2e0:	44ca      	add	sl, r9
 801e2e2:	f8cd a01c 	str.w	sl, [sp, #28]
 801e2e6:	9506      	str	r5, [sp, #24]
 801e2e8:	9702      	str	r7, [sp, #8]
 801e2ea:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801e2ee:	980c      	ldr	r0, [sp, #48]	; 0x30
 801e2f0:	ebae 0304 	sub.w	r3, lr, r4
 801e2f4:	47a8      	blx	r5
 801e2f6:	b011      	add	sp, #68	; 0x44
 801e2f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e2fc:	462c      	mov	r4, r5
 801e2fe:	e797      	b.n	801e230 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x104>

0801e300 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801e300:	b570      	push	{r4, r5, r6, lr}
 801e302:	4604      	mov	r4, r0
 801e304:	2500      	movs	r5, #0
 801e306:	7223      	strb	r3, [r4, #8]
 801e308:	9804      	ldr	r0, [sp, #16]
 801e30a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801e30e:	8025      	strh	r5, [r4, #0]
 801e310:	6061      	str	r1, [r4, #4]
 801e312:	7263      	strb	r3, [r4, #9]
 801e314:	60e0      	str	r0, [r4, #12]
 801e316:	8222      	strh	r2, [r4, #16]
 801e318:	8265      	strh	r5, [r4, #18]
 801e31a:	82a5      	strh	r5, [r4, #20]
 801e31c:	82e5      	strh	r5, [r4, #22]
 801e31e:	8325      	strh	r5, [r4, #24]
 801e320:	8365      	strh	r5, [r4, #26]
 801e322:	83a5      	strh	r5, [r4, #28]
 801e324:	77a5      	strb	r5, [r4, #30]
 801e326:	6803      	ldr	r3, [r0, #0]
 801e328:	695b      	ldr	r3, [r3, #20]
 801e32a:	4798      	blx	r3
 801e32c:	4606      	mov	r6, r0
 801e32e:	b1f8      	cbz	r0, 801e370 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801e330:	68e0      	ldr	r0, [r4, #12]
 801e332:	6803      	ldr	r3, [r0, #0]
 801e334:	4631      	mov	r1, r6
 801e336:	68db      	ldr	r3, [r3, #12]
 801e338:	4798      	blx	r3
 801e33a:	7b43      	ldrb	r3, [r0, #13]
 801e33c:	7a82      	ldrb	r2, [r0, #10]
 801e33e:	005b      	lsls	r3, r3, #1
 801e340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e344:	4313      	orrs	r3, r2
 801e346:	83a3      	strh	r3, [r4, #28]
 801e348:	7a63      	ldrb	r3, [r4, #9]
 801e34a:	2b04      	cmp	r3, #4
 801e34c:	4605      	mov	r5, r0
 801e34e:	d10f      	bne.n	801e370 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801e350:	68e0      	ldr	r0, [r4, #12]
 801e352:	6803      	ldr	r3, [r0, #0]
 801e354:	462a      	mov	r2, r5
 801e356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e358:	4631      	mov	r1, r6
 801e35a:	4798      	blx	r3
 801e35c:	7b6b      	ldrb	r3, [r5, #13]
 801e35e:	005b      	lsls	r3, r3, #1
 801e360:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801e364:	7aab      	ldrb	r3, [r5, #10]
 801e366:	4313      	orrs	r3, r2
 801e368:	4418      	add	r0, r3
 801e36a:	8ba3      	ldrh	r3, [r4, #28]
 801e36c:	4418      	add	r0, r3
 801e36e:	83a0      	strh	r0, [r4, #28]
 801e370:	4620      	mov	r0, r4
 801e372:	bd70      	pop	{r4, r5, r6, pc}

0801e374 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801e374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e378:	2400      	movs	r4, #0
 801e37a:	b085      	sub	sp, #20
 801e37c:	4681      	mov	r9, r0
 801e37e:	4688      	mov	r8, r1
 801e380:	4692      	mov	sl, r2
 801e382:	469b      	mov	fp, r3
 801e384:	4627      	mov	r7, r4
 801e386:	4625      	mov	r5, r4
 801e388:	4626      	mov	r6, r4
 801e38a:	4554      	cmp	r4, sl
 801e38c:	da2a      	bge.n	801e3e4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801e38e:	2300      	movs	r3, #0
 801e390:	9303      	str	r3, [sp, #12]
 801e392:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801e396:	429d      	cmp	r5, r3
 801e398:	d004      	beq.n	801e3a4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801e39a:	f242 030b 	movw	r3, #8203	; 0x200b
 801e39e:	429d      	cmp	r5, r3
 801e3a0:	bf18      	it	ne
 801e3a2:	462f      	movne	r7, r5
 801e3a4:	ab03      	add	r3, sp, #12
 801e3a6:	4642      	mov	r2, r8
 801e3a8:	4659      	mov	r1, fp
 801e3aa:	4648      	mov	r0, r9
 801e3ac:	f002 fb86 	bl	8020abc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801e3b0:	4605      	mov	r5, r0
 801e3b2:	b1b8      	cbz	r0, 801e3e4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801e3b4:	280a      	cmp	r0, #10
 801e3b6:	d015      	beq.n	801e3e4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801e3b8:	9a03      	ldr	r2, [sp, #12]
 801e3ba:	b18a      	cbz	r2, 801e3e0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801e3bc:	7b50      	ldrb	r0, [r2, #13]
 801e3be:	7a93      	ldrb	r3, [r2, #10]
 801e3c0:	8895      	ldrh	r5, [r2, #4]
 801e3c2:	0040      	lsls	r0, r0, #1
 801e3c4:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801e3c8:	4303      	orrs	r3, r0
 801e3ca:	9301      	str	r3, [sp, #4]
 801e3cc:	f8d8 3000 	ldr.w	r3, [r8]
 801e3d0:	4639      	mov	r1, r7
 801e3d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e3d4:	4640      	mov	r0, r8
 801e3d6:	4798      	blx	r3
 801e3d8:	9b01      	ldr	r3, [sp, #4]
 801e3da:	4418      	add	r0, r3
 801e3dc:	4406      	add	r6, r0
 801e3de:	b2b6      	uxth	r6, r6
 801e3e0:	3401      	adds	r4, #1
 801e3e2:	e7d2      	b.n	801e38a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801e3e4:	4630      	mov	r0, r6
 801e3e6:	b005      	add	sp, #20
 801e3e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e3ec <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801e3ec:	2a02      	cmp	r2, #2
 801e3ee:	b530      	push	{r4, r5, lr}
 801e3f0:	d011      	beq.n	801e416 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801e3f2:	2a03      	cmp	r2, #3
 801e3f4:	d01c      	beq.n	801e430 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801e3f6:	2a01      	cmp	r2, #1
 801e3f8:	d10c      	bne.n	801e414 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801e3fa:	888b      	ldrh	r3, [r1, #4]
 801e3fc:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801e400:	8801      	ldrh	r1, [r0, #0]
 801e402:	8844      	ldrh	r4, [r0, #2]
 801e404:	8004      	strh	r4, [r0, #0]
 801e406:	1a9b      	subs	r3, r3, r2
 801e408:	1a5b      	subs	r3, r3, r1
 801e40a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801e40e:	8043      	strh	r3, [r0, #2]
 801e410:	8081      	strh	r1, [r0, #4]
 801e412:	80c2      	strh	r2, [r0, #6]
 801e414:	bd30      	pop	{r4, r5, pc}
 801e416:	88cb      	ldrh	r3, [r1, #6]
 801e418:	88c2      	ldrh	r2, [r0, #6]
 801e41a:	1a9b      	subs	r3, r3, r2
 801e41c:	8842      	ldrh	r2, [r0, #2]
 801e41e:	1a9b      	subs	r3, r3, r2
 801e420:	888a      	ldrh	r2, [r1, #4]
 801e422:	8881      	ldrh	r1, [r0, #4]
 801e424:	8043      	strh	r3, [r0, #2]
 801e426:	1a52      	subs	r2, r2, r1
 801e428:	8801      	ldrh	r1, [r0, #0]
 801e42a:	1a52      	subs	r2, r2, r1
 801e42c:	8002      	strh	r2, [r0, #0]
 801e42e:	e7f1      	b.n	801e414 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801e430:	88cb      	ldrh	r3, [r1, #6]
 801e432:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801e436:	8841      	ldrh	r1, [r0, #2]
 801e438:	f9b0 5000 	ldrsh.w	r5, [r0]
 801e43c:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801e440:	8045      	strh	r5, [r0, #2]
 801e442:	1a9b      	subs	r3, r3, r2
 801e444:	1a5b      	subs	r3, r3, r1
 801e446:	8003      	strh	r3, [r0, #0]
 801e448:	8082      	strh	r2, [r0, #4]
 801e44a:	80c4      	strh	r4, [r0, #6]
 801e44c:	e7e2      	b.n	801e414 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801e44e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801e44e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e452:	b09f      	sub	sp, #124	; 0x7c
 801e454:	9116      	str	r1, [sp, #88]	; 0x58
 801e456:	9317      	str	r3, [sp, #92]	; 0x5c
 801e458:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801e45a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801e45c:	8809      	ldrh	r1, [r1, #0]
 801e45e:	889b      	ldrh	r3, [r3, #4]
 801e460:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 801e464:	9212      	str	r2, [sp, #72]	; 0x48
 801e466:	440b      	add	r3, r1
 801e468:	b21b      	sxth	r3, r3
 801e46a:	9310      	str	r3, [sp, #64]	; 0x40
 801e46c:	f8d8 3000 	ldr.w	r3, [r8]
 801e470:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 801e474:	7a59      	ldrb	r1, [r3, #9]
 801e476:	7a1b      	ldrb	r3, [r3, #8]
 801e478:	9315      	str	r3, [sp, #84]	; 0x54
 801e47a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e47c:	9011      	str	r0, [sp, #68]	; 0x44
 801e47e:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 801e482:	9114      	str	r1, [sp, #80]	; 0x50
 801e484:	f9b3 5000 	ldrsh.w	r5, [r3]
 801e488:	2a00      	cmp	r2, #0
 801e48a:	d067      	beq.n	801e55c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 801e48c:	f898 3010 	ldrb.w	r3, [r8, #16]
 801e490:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801e492:	2b04      	cmp	r3, #4
 801e494:	bf14      	ite	ne
 801e496:	2301      	movne	r3, #1
 801e498:	2302      	moveq	r3, #2
 801e49a:	4413      	add	r3, r2
 801e49c:	f04f 0900 	mov.w	r9, #0
 801e4a0:	930f      	str	r3, [sp, #60]	; 0x3c
 801e4a2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801e4a6:	464c      	mov	r4, r9
 801e4a8:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801e4ac:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 801e4b0:	4293      	cmp	r3, r2
 801e4b2:	f280 808c 	bge.w	801e5ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801e4b6:	2300      	movs	r3, #0
 801e4b8:	931c      	str	r3, [sp, #112]	; 0x70
 801e4ba:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801e4be:	429c      	cmp	r4, r3
 801e4c0:	d006      	beq.n	801e4d0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 801e4c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e4c4:	f242 020b 	movw	r2, #8203	; 0x200b
 801e4c8:	4294      	cmp	r4, r2
 801e4ca:	bf18      	it	ne
 801e4cc:	4623      	movne	r3, r4
 801e4ce:	930d      	str	r3, [sp, #52]	; 0x34
 801e4d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e4d2:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801e4d4:	f8d8 2000 	ldr.w	r2, [r8]
 801e4d8:	428b      	cmp	r3, r1
 801e4da:	db41      	blt.n	801e560 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801e4dc:	6813      	ldr	r3, [r2, #0]
 801e4de:	4610      	mov	r0, r2
 801e4e0:	695b      	ldr	r3, [r3, #20]
 801e4e2:	4798      	blx	r3
 801e4e4:	4604      	mov	r4, r0
 801e4e6:	f8d8 0000 	ldr.w	r0, [r8]
 801e4ea:	6803      	ldr	r3, [r0, #0]
 801e4ec:	aa1d      	add	r2, sp, #116	; 0x74
 801e4ee:	689e      	ldr	r6, [r3, #8]
 801e4f0:	4621      	mov	r1, r4
 801e4f2:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801e4f6:	47b0      	blx	r6
 801e4f8:	901c      	str	r0, [sp, #112]	; 0x70
 801e4fa:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801e4fe:	429c      	cmp	r4, r3
 801e500:	f000 80e9 	beq.w	801e6d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801e504:	f242 030b 	movw	r3, #8203	; 0x200b
 801e508:	429c      	cmp	r4, r3
 801e50a:	f000 80e4 	beq.w	801e6d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801e50e:	2c00      	cmp	r4, #0
 801e510:	f000 80f6 	beq.w	801e700 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 801e514:	2c0a      	cmp	r4, #10
 801e516:	d060      	beq.n	801e5da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801e518:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801e51a:	b36a      	cbz	r2, 801e578 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 801e51c:	8894      	ldrh	r4, [r2, #4]
 801e51e:	f1bb 0f00 	cmp.w	fp, #0
 801e522:	d03b      	beq.n	801e59c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 801e524:	f892 900d 	ldrb.w	r9, [r2, #13]
 801e528:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801e52c:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801e530:	f892 900a 	ldrb.w	r9, [r2, #10]
 801e534:	f1bb 0f01 	cmp.w	fp, #1
 801e538:	ea49 0903 	orr.w	r9, r9, r3
 801e53c:	d134      	bne.n	801e5a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 801e53e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e540:	eba5 0509 	sub.w	r5, r5, r9
 801e544:	2b00      	cmp	r3, #0
 801e546:	d14f      	bne.n	801e5e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801e548:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e54a:	eb09 0305 	add.w	r3, r9, r5
 801e54e:	4413      	add	r3, r2
 801e550:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e552:	f9b2 2000 	ldrsh.w	r2, [r2]
 801e556:	4293      	cmp	r3, r2
 801e558:	da51      	bge.n	801e5fe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801e55a:	e038      	b.n	801e5ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801e55c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801e55e:	e79d      	b.n	801e49c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 801e560:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801e564:	9301      	str	r3, [sp, #4]
 801e566:	ab1d      	add	r3, sp, #116	; 0x74
 801e568:	9300      	str	r3, [sp, #0]
 801e56a:	4659      	mov	r1, fp
 801e56c:	ab1c      	add	r3, sp, #112	; 0x70
 801e56e:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801e570:	f002 fafc 	bl	8020b6c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801e574:	4604      	mov	r4, r0
 801e576:	e7c0      	b.n	801e4fa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 801e578:	f8d8 0000 	ldr.w	r0, [r8]
 801e57c:	6803      	ldr	r3, [r0, #0]
 801e57e:	691b      	ldr	r3, [r3, #16]
 801e580:	4798      	blx	r3
 801e582:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801e586:	4298      	cmp	r0, r3
 801e588:	f000 80a5 	beq.w	801e6d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801e58c:	f242 030b 	movw	r3, #8203	; 0x200b
 801e590:	4298      	cmp	r0, r3
 801e592:	f000 80a0 	beq.w	801e6d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801e596:	f1bb 0f00 	cmp.w	fp, #0
 801e59a:	d100      	bne.n	801e59e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801e59c:	444d      	add	r5, r9
 801e59e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801e5a0:	2a00      	cmp	r2, #0
 801e5a2:	d1bf      	bne.n	801e524 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 801e5a4:	4691      	mov	r9, r2
 801e5a6:	e096      	b.n	801e6d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801e5a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e5aa:	2b00      	cmp	r3, #0
 801e5ac:	f000 80aa 	beq.w	801e704 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b6>
 801e5b0:	f1bb 0f00 	cmp.w	fp, #0
 801e5b4:	d118      	bne.n	801e5e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801e5b6:	f8d8 0000 	ldr.w	r0, [r8]
 801e5ba:	990d      	ldr	r1, [sp, #52]	; 0x34
 801e5bc:	6803      	ldr	r3, [r0, #0]
 801e5be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e5c0:	4798      	blx	r3
 801e5c2:	4405      	add	r5, r0
 801e5c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e5c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e5c8:	1aeb      	subs	r3, r5, r3
 801e5ca:	4293      	cmp	r3, r2
 801e5cc:	dd17      	ble.n	801e5fe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801e5ce:	2c00      	cmp	r4, #0
 801e5d0:	f000 8096 	beq.w	801e700 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 801e5d4:	2c0a      	cmp	r4, #10
 801e5d6:	f040 8084 	bne.w	801e6e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x294>
 801e5da:	240a      	movs	r4, #10
 801e5dc:	fab4 f084 	clz	r0, r4
 801e5e0:	0940      	lsrs	r0, r0, #5
 801e5e2:	b01f      	add	sp, #124	; 0x7c
 801e5e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e5e8:	f8d8 0000 	ldr.w	r0, [r8]
 801e5ec:	990d      	ldr	r1, [sp, #52]	; 0x34
 801e5ee:	6803      	ldr	r3, [r0, #0]
 801e5f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e5f2:	4798      	blx	r3
 801e5f4:	f1bb 0f01 	cmp.w	fp, #1
 801e5f8:	eba5 0500 	sub.w	r5, r5, r0
 801e5fc:	d0a4      	beq.n	801e548 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801e5fe:	981c      	ldr	r0, [sp, #112]	; 0x70
 801e600:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801e602:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801e606:	f9b3 6000 	ldrsh.w	r6, [r3]
 801e60a:	7b43      	ldrb	r3, [r0, #13]
 801e60c:	015b      	lsls	r3, r3, #5
 801e60e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801e612:	7983      	ldrb	r3, [r0, #6]
 801e614:	4429      	add	r1, r5
 801e616:	4313      	orrs	r3, r2
 801e618:	440b      	add	r3, r1
 801e61a:	42b3      	cmp	r3, r6
 801e61c:	db5b      	blt.n	801e6d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801e61e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e620:	4299      	cmp	r1, r3
 801e622:	da58      	bge.n	801e6d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801e624:	f8d8 0000 	ldr.w	r0, [r8]
 801e628:	6803      	ldr	r3, [r0, #0]
 801e62a:	42ae      	cmp	r6, r5
 801e62c:	bfc8      	it	gt
 801e62e:	1b76      	subgt	r6, r6, r5
 801e630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e632:	bfcc      	ite	gt
 801e634:	b2b6      	uxthgt	r6, r6
 801e636:	2600      	movle	r6, #0
 801e638:	4798      	blx	r3
 801e63a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801e63c:	7b5a      	ldrb	r2, [r3, #13]
 801e63e:	00d1      	lsls	r1, r2, #3
 801e640:	f401 7780 	and.w	r7, r1, #256	; 0x100
 801e644:	7a19      	ldrb	r1, [r3, #8]
 801e646:	4339      	orrs	r1, r7
 801e648:	0657      	lsls	r7, r2, #25
 801e64a:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801e64c:	bf44      	itt	mi
 801e64e:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 801e652:	b209      	sxthmi	r1, r1
 801e654:	19c7      	adds	r7, r0, r7
 801e656:	1a7f      	subs	r7, r7, r1
 801e658:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801e65a:	b2bf      	uxth	r7, r7
 801e65c:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801e660:	fa0f fa87 	sxth.w	sl, r7
 801e664:	4551      	cmp	r1, sl
 801e666:	dd3a      	ble.n	801e6de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801e668:	0112      	lsls	r2, r2, #4
 801e66a:	79d8      	ldrb	r0, [r3, #7]
 801e66c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801e670:	4302      	orrs	r2, r0
 801e672:	4492      	add	sl, r2
 801e674:	4551      	cmp	r1, sl
 801e676:	dc2e      	bgt.n	801e6d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801e678:	1bcf      	subs	r7, r1, r7
 801e67a:	b2bf      	uxth	r7, r7
 801e67c:	468a      	mov	sl, r1
 801e67e:	9319      	str	r3, [sp, #100]	; 0x64
 801e680:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e682:	f8d8 0000 	ldr.w	r0, [r8]
 801e686:	681a      	ldr	r2, [r3, #0]
 801e688:	6801      	ldr	r1, [r0, #0]
 801e68a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801e68c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801e68e:	9313      	str	r3, [sp, #76]	; 0x4c
 801e690:	9218      	str	r2, [sp, #96]	; 0x60
 801e692:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801e694:	4788      	blx	r1
 801e696:	f898 1006 	ldrb.w	r1, [r8, #6]
 801e69a:	910b      	str	r1, [sp, #44]	; 0x2c
 801e69c:	f898 100e 	ldrb.w	r1, [r8, #14]
 801e6a0:	910a      	str	r1, [sp, #40]	; 0x28
 801e6a2:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 801e6a6:	9109      	str	r1, [sp, #36]	; 0x24
 801e6a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801e6aa:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801e6ae:	9305      	str	r3, [sp, #20]
 801e6b0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801e6b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801e6b4:	9206      	str	r2, [sp, #24]
 801e6b6:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801e6ba:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801e6be:	e9cd a601 	strd	sl, r6, [sp, #4]
 801e6c2:	442e      	add	r6, r5
 801e6c4:	b236      	sxth	r6, r6
 801e6c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e6c8:	9600      	str	r6, [sp, #0]
 801e6ca:	681a      	ldr	r2, [r3, #0]
 801e6cc:	9916      	ldr	r1, [sp, #88]	; 0x58
 801e6ce:	685b      	ldr	r3, [r3, #4]
 801e6d0:	9811      	ldr	r0, [sp, #68]	; 0x44
 801e6d2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e6d4:	47b0      	blx	r6
 801e6d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e6d8:	3301      	adds	r3, #1
 801e6da:	930e      	str	r3, [sp, #56]	; 0x38
 801e6dc:	e6e6      	b.n	801e4ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 801e6de:	2700      	movs	r7, #0
 801e6e0:	e7cd      	b.n	801e67e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x230>
 801e6e2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801e6e4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801e6e6:	3501      	adds	r5, #1
 801e6e8:	429d      	cmp	r5, r3
 801e6ea:	f6bf af77 	bge.w	801e5dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801e6ee:	4659      	mov	r1, fp
 801e6f0:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801e6f2:	f7f0 f93d 	bl	800e970 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e6f6:	4604      	mov	r4, r0
 801e6f8:	b110      	cbz	r0, 801e700 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 801e6fa:	280a      	cmp	r0, #10
 801e6fc:	d1f2      	bne.n	801e6e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 801e6fe:	e76c      	b.n	801e5da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801e700:	2400      	movs	r4, #0
 801e702:	e76b      	b.n	801e5dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801e704:	f1bb 0f00 	cmp.w	fp, #0
 801e708:	f43f af5c 	beq.w	801e5c4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801e70c:	e777      	b.n	801e5fe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

0801e70e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801e70e:	b530      	push	{r4, r5, lr}
 801e710:	8a44      	ldrh	r4, [r0, #18]
 801e712:	8ac5      	ldrh	r5, [r0, #22]
 801e714:	82c3      	strh	r3, [r0, #22]
 801e716:	442c      	add	r4, r5
 801e718:	1ae4      	subs	r4, r4, r3
 801e71a:	8244      	strh	r4, [r0, #18]
 801e71c:	8b03      	ldrh	r3, [r0, #24]
 801e71e:	8a84      	ldrh	r4, [r0, #20]
 801e720:	4422      	add	r2, r4
 801e722:	440c      	add	r4, r1
 801e724:	1a59      	subs	r1, r3, r1
 801e726:	8342      	strh	r2, [r0, #26]
 801e728:	8284      	strh	r4, [r0, #20]
 801e72a:	8301      	strh	r1, [r0, #24]
 801e72c:	bd30      	pop	{r4, r5, pc}

0801e72e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801e72e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e732:	7a43      	ldrb	r3, [r0, #9]
 801e734:	1eda      	subs	r2, r3, #3
 801e736:	b087      	sub	sp, #28
 801e738:	4604      	mov	r4, r0
 801e73a:	b2d2      	uxtb	r2, r2
 801e73c:	460f      	mov	r7, r1
 801e73e:	2900      	cmp	r1, #0
 801e740:	d036      	beq.n	801e7b0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 801e742:	2a01      	cmp	r2, #1
 801e744:	d932      	bls.n	801e7ac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 801e746:	1e58      	subs	r0, r3, #1
 801e748:	f1d0 0b00 	rsbs	fp, r0, #0
 801e74c:	eb4b 0b00 	adc.w	fp, fp, r0
 801e750:	1e99      	subs	r1, r3, #2
 801e752:	424b      	negs	r3, r1
 801e754:	414b      	adcs	r3, r1
 801e756:	9303      	str	r3, [sp, #12]
 801e758:	2300      	movs	r3, #0
 801e75a:	e9cd 3301 	strd	r3, r3, [sp, #4]
 801e75e:	2500      	movs	r5, #0
 801e760:	8265      	strh	r5, [r4, #18]
 801e762:	82a5      	strh	r5, [r4, #20]
 801e764:	46a9      	mov	r9, r5
 801e766:	f242 0a0b 	movw	sl, #8203	; 0x200b
 801e76a:	2300      	movs	r3, #0
 801e76c:	9305      	str	r3, [sp, #20]
 801e76e:	8823      	ldrh	r3, [r4, #0]
 801e770:	2b20      	cmp	r3, #32
 801e772:	d02b      	beq.n	801e7cc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 801e774:	eba3 020a 	sub.w	r2, r3, sl
 801e778:	4256      	negs	r6, r2
 801e77a:	4156      	adcs	r6, r2
 801e77c:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801e780:	4293      	cmp	r3, r2
 801e782:	d004      	beq.n	801e78e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801e784:	4553      	cmp	r3, sl
 801e786:	bf16      	itet	ne
 801e788:	4699      	movne	r9, r3
 801e78a:	2601      	moveq	r6, #1
 801e78c:	2600      	movne	r6, #0
 801e78e:	ab05      	add	r3, sp, #20
 801e790:	68e2      	ldr	r2, [r4, #12]
 801e792:	7a21      	ldrb	r1, [r4, #8]
 801e794:	6860      	ldr	r0, [r4, #4]
 801e796:	f002 f991 	bl	8020abc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801e79a:	8020      	strh	r0, [r4, #0]
 801e79c:	b9c8      	cbnz	r0, 801e7d2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 801e79e:	8b22      	ldrh	r2, [r4, #24]
 801e7a0:	2300      	movs	r3, #0
 801e7a2:	4611      	mov	r1, r2
 801e7a4:	4620      	mov	r0, r4
 801e7a6:	f7ff ffb2 	bl	801e70e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801e7aa:	e066      	b.n	801e87a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801e7ac:	468b      	mov	fp, r1
 801e7ae:	e7cf      	b.n	801e750 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 801e7b0:	3b01      	subs	r3, #1
 801e7b2:	2a01      	cmp	r2, #1
 801e7b4:	bf8c      	ite	hi
 801e7b6:	2200      	movhi	r2, #0
 801e7b8:	2201      	movls	r2, #1
 801e7ba:	2b01      	cmp	r3, #1
 801e7bc:	bf8c      	ite	hi
 801e7be:	2300      	movhi	r3, #0
 801e7c0:	2301      	movls	r3, #1
 801e7c2:	9202      	str	r2, [sp, #8]
 801e7c4:	9301      	str	r3, [sp, #4]
 801e7c6:	9103      	str	r1, [sp, #12]
 801e7c8:	468b      	mov	fp, r1
 801e7ca:	e7c8      	b.n	801e75e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 801e7cc:	4699      	mov	r9, r3
 801e7ce:	2601      	movs	r6, #1
 801e7d0:	e7dd      	b.n	801e78e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801e7d2:	8ae3      	ldrh	r3, [r4, #22]
 801e7d4:	280a      	cmp	r0, #10
 801e7d6:	f103 0301 	add.w	r3, r3, #1
 801e7da:	82e3      	strh	r3, [r4, #22]
 801e7dc:	d0df      	beq.n	801e79e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 801e7de:	9a05      	ldr	r2, [sp, #20]
 801e7e0:	bb42      	cbnz	r2, 801e834 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 801e7e2:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801e7e6:	4298      	cmp	r0, r3
 801e7e8:	d001      	beq.n	801e7ee <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801e7ea:	4550      	cmp	r0, sl
 801e7ec:	d1bd      	bne.n	801e76a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801e7ee:	8823      	ldrh	r3, [r4, #0]
 801e7f0:	8b21      	ldrh	r1, [r4, #24]
 801e7f2:	2b20      	cmp	r3, #32
 801e7f4:	d001      	beq.n	801e7fa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 801e7f6:	4553      	cmp	r3, sl
 801e7f8:	d131      	bne.n	801e85e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 801e7fa:	2e00      	cmp	r6, #0
 801e7fc:	bf0a      	itet	eq
 801e7fe:	460d      	moveq	r5, r1
 801e800:	4630      	movne	r0, r6
 801e802:	2001      	moveq	r0, #1
 801e804:	440a      	add	r2, r1
 801e806:	8aa3      	ldrh	r3, [r4, #20]
 801e808:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801e80c:	b292      	uxth	r2, r2
 801e80e:	8322      	strh	r2, [r4, #24]
 801e810:	4413      	add	r3, r2
 801e812:	2f00      	cmp	r7, #0
 801e814:	d03a      	beq.n	801e88c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 801e816:	f1bb 0f00 	cmp.w	fp, #0
 801e81a:	d102      	bne.n	801e822 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 801e81c:	9903      	ldr	r1, [sp, #12]
 801e81e:	b301      	cbz	r1, 801e862 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801e820:	b1f8      	cbz	r0, 801e862 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801e822:	8ba1      	ldrh	r1, [r4, #28]
 801e824:	4419      	add	r1, r3
 801e826:	458c      	cmp	ip, r1
 801e828:	da2a      	bge.n	801e880 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801e82a:	8a61      	ldrh	r1, [r4, #18]
 801e82c:	b341      	cbz	r1, 801e880 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801e82e:	4563      	cmp	r3, ip
 801e830:	dd9b      	ble.n	801e76a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801e832:	e01c      	b.n	801e86e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801e834:	8893      	ldrh	r3, [r2, #4]
 801e836:	8023      	strh	r3, [r4, #0]
 801e838:	f892 800d 	ldrb.w	r8, [r2, #13]
 801e83c:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801e840:	f408 7080 	and.w	r0, r8, #256	; 0x100
 801e844:	f892 800a 	ldrb.w	r8, [r2, #10]
 801e848:	ea48 0800 	orr.w	r8, r8, r0
 801e84c:	68e0      	ldr	r0, [r4, #12]
 801e84e:	6803      	ldr	r3, [r0, #0]
 801e850:	4649      	mov	r1, r9
 801e852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e854:	4798      	blx	r3
 801e856:	eb08 0200 	add.w	r2, r8, r0
 801e85a:	b292      	uxth	r2, r2
 801e85c:	e7c7      	b.n	801e7ee <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801e85e:	2000      	movs	r0, #0
 801e860:	e7d0      	b.n	801e804 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 801e862:	4563      	cmp	r3, ip
 801e864:	dd81      	ble.n	801e76a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801e866:	8a63      	ldrh	r3, [r4, #18]
 801e868:	2b00      	cmp	r3, #0
 801e86a:	f43f af7e 	beq.w	801e76a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801e86e:	2301      	movs	r3, #1
 801e870:	77a3      	strb	r3, [r4, #30]
 801e872:	8ba2      	ldrh	r2, [r4, #28]
 801e874:	8b63      	ldrh	r3, [r4, #26]
 801e876:	4413      	add	r3, r2
 801e878:	8363      	strh	r3, [r4, #26]
 801e87a:	b007      	add	sp, #28
 801e87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e880:	2300      	movs	r3, #0
 801e882:	4611      	mov	r1, r2
 801e884:	4620      	mov	r0, r4
 801e886:	f7ff ff42 	bl	801e70e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801e88a:	e76e      	b.n	801e76a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801e88c:	4563      	cmp	r3, ip
 801e88e:	dd14      	ble.n	801e8ba <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 801e890:	9b02      	ldr	r3, [sp, #8]
 801e892:	b113      	cbz	r3, 801e89a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 801e894:	2301      	movs	r3, #1
 801e896:	460a      	mov	r2, r1
 801e898:	e783      	b.n	801e7a2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 801e89a:	9b01      	ldr	r3, [sp, #4]
 801e89c:	2b00      	cmp	r3, #0
 801e89e:	f43f af64 	beq.w	801e76a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801e8a2:	2800      	cmp	r0, #0
 801e8a4:	f47f af61 	bne.w	801e76a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801e8a8:	b116      	cbz	r6, 801e8b0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 801e8aa:	2301      	movs	r3, #1
 801e8ac:	462a      	mov	r2, r5
 801e8ae:	e779      	b.n	801e7a4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 801e8b0:	8a63      	ldrh	r3, [r4, #18]
 801e8b2:	2b00      	cmp	r3, #0
 801e8b4:	f43f af59 	beq.w	801e76a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801e8b8:	e7df      	b.n	801e87a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801e8ba:	2800      	cmp	r0, #0
 801e8bc:	f47f af55 	bne.w	801e76a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801e8c0:	2e00      	cmp	r6, #0
 801e8c2:	f43f af52 	beq.w	801e76a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801e8c6:	2301      	movs	r3, #1
 801e8c8:	462a      	mov	r2, r5
 801e8ca:	e7db      	b.n	801e884 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

0801e8cc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801e8cc:	b530      	push	{r4, r5, lr}
 801e8ce:	4605      	mov	r5, r0
 801e8d0:	b08b      	sub	sp, #44	; 0x2c
 801e8d2:	b191      	cbz	r1, 801e8fa <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 801e8d4:	e9cd 3100 	strd	r3, r1, [sp]
 801e8d8:	4613      	mov	r3, r2
 801e8da:	4601      	mov	r1, r0
 801e8dc:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801e8e0:	a802      	add	r0, sp, #8
 801e8e2:	f7ff fd0d 	bl	801e300 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801e8e6:	2401      	movs	r4, #1
 801e8e8:	2100      	movs	r1, #0
 801e8ea:	a802      	add	r0, sp, #8
 801e8ec:	f7ff ff1f 	bl	801e72e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801e8f0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801e8f4:	b163      	cbz	r3, 801e910 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801e8f6:	3401      	adds	r4, #1
 801e8f8:	e7f6      	b.n	801e8e8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 801e8fa:	f002 f9d7 	bl	8020cac <_ZN8touchgfx12TextProvider11getNextCharEv>
 801e8fe:	2401      	movs	r4, #1
 801e900:	280a      	cmp	r0, #10
 801e902:	4628      	mov	r0, r5
 801e904:	bf08      	it	eq
 801e906:	3401      	addeq	r4, #1
 801e908:	f002 f9d0 	bl	8020cac <_ZN8touchgfx12TextProvider11getNextCharEv>
 801e90c:	2800      	cmp	r0, #0
 801e90e:	d1f7      	bne.n	801e900 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801e910:	b2a0      	uxth	r0, r4
 801e912:	b00b      	add	sp, #44	; 0x2c
 801e914:	bd30      	pop	{r4, r5, pc}

0801e916 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801e916:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e91a:	b0db      	sub	sp, #364	; 0x16c
 801e91c:	4689      	mov	r9, r1
 801e91e:	f8dd a190 	ldr.w	sl, [sp, #400]	; 0x190
 801e922:	900a      	str	r0, [sp, #40]	; 0x28
 801e924:	461c      	mov	r4, r3
 801e926:	f1ba 0f00 	cmp.w	sl, #0
 801e92a:	f000 80a5 	beq.w	801ea78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801e92e:	681b      	ldr	r3, [r3, #0]
 801e930:	2b00      	cmp	r3, #0
 801e932:	f000 80a1 	beq.w	801ea78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801e936:	7ba3      	ldrb	r3, [r4, #14]
 801e938:	2b00      	cmp	r3, #0
 801e93a:	f000 809d 	beq.w	801ea78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801e93e:	6810      	ldr	r0, [r2, #0]
 801e940:	6851      	ldr	r1, [r2, #4]
 801e942:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 801e946:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 801e94a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 801e94e:	4643      	mov	r3, r8
 801e950:	c303      	stmia	r3!, {r0, r1}
 801e952:	2500      	movs	r5, #0
 801e954:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 801e958:	79a2      	ldrb	r2, [r4, #6]
 801e95a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801e95e:	a90e      	add	r1, sp, #56	; 0x38
 801e960:	4640      	mov	r0, r8
 801e962:	950e      	str	r5, [sp, #56]	; 0x38
 801e964:	f7ff fd42 	bl	801e3ec <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801e968:	a90e      	add	r1, sp, #56	; 0x38
 801e96a:	4608      	mov	r0, r1
 801e96c:	79a2      	ldrb	r2, [r4, #6]
 801e96e:	af18      	add	r7, sp, #96	; 0x60
 801e970:	f7ff fd3c 	bl	801e3ec <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801e974:	4638      	mov	r0, r7
 801e976:	f001 fd62 	bl	802043e <_ZN8touchgfx12TextProviderC1Ev>
 801e97a:	6820      	ldr	r0, [r4, #0]
 801e97c:	6803      	ldr	r3, [r0, #0]
 801e97e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e980:	4798      	blx	r3
 801e982:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801e984:	4603      	mov	r3, r0
 801e986:	4651      	mov	r1, sl
 801e988:	4638      	mov	r0, r7
 801e98a:	f001 fd9d 	bl	80204c8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801e98e:	6820      	ldr	r0, [r4, #0]
 801e990:	7923      	ldrb	r3, [r4, #4]
 801e992:	9308      	str	r3, [sp, #32]
 801e994:	6803      	ldr	r3, [r0, #0]
 801e996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e998:	4798      	blx	r3
 801e99a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e99e:	181e      	adds	r6, r3, r0
 801e9a0:	42ae      	cmp	r6, r5
 801e9a2:	dd06      	ble.n	801e9b2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 801e9a4:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 801e9a8:	4282      	cmp	r2, r0
 801e9aa:	bfa4      	itt	ge
 801e9ac:	189d      	addge	r5, r3, r2
 801e9ae:	fb95 f5f6 	sdivge	r5, r5, r6
 801e9b2:	a82e      	add	r0, sp, #184	; 0xb8
 801e9b4:	f001 fd43 	bl	802043e <_ZN8touchgfx12TextProviderC1Ev>
 801e9b8:	7c23      	ldrb	r3, [r4, #16]
 801e9ba:	b14b      	cbz	r3, 801e9d0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xba>
 801e9bc:	6820      	ldr	r0, [r4, #0]
 801e9be:	6803      	ldr	r3, [r0, #0]
 801e9c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e9c2:	4798      	blx	r3
 801e9c4:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801e9c6:	4603      	mov	r3, r0
 801e9c8:	4651      	mov	r1, sl
 801e9ca:	a82e      	add	r0, sp, #184	; 0xb8
 801e9cc:	f001 fd7c 	bl	80204c8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801e9d0:	7c21      	ldrb	r1, [r4, #16]
 801e9d2:	9101      	str	r1, [sp, #4]
 801e9d4:	6821      	ldr	r1, [r4, #0]
 801e9d6:	7963      	ldrb	r3, [r4, #5]
 801e9d8:	9100      	str	r1, [sp, #0]
 801e9da:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801e9de:	a92e      	add	r1, sp, #184	; 0xb8
 801e9e0:	a810      	add	r0, sp, #64	; 0x40
 801e9e2:	f7ff fc8d 	bl	801e300 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801e9e6:	7c23      	ldrb	r3, [r4, #16]
 801e9e8:	b9bb      	cbnz	r3, 801ea1a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x104>
 801e9ea:	fa1f fa86 	uxth.w	sl, r6
 801e9ee:	2d00      	cmp	r5, #0
 801e9f0:	dd45      	ble.n	801ea7e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 801e9f2:	4638      	mov	r0, r7
 801e9f4:	f002 f95a 	bl	8020cac <_ZN8touchgfx12TextProvider11getNextCharEv>
 801e9f8:	2800      	cmp	r0, #0
 801e9fa:	d03d      	beq.n	801ea78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801e9fc:	280a      	cmp	r0, #10
 801e9fe:	d1f6      	bne.n	801e9ee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 801ea00:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801ea04:	4453      	add	r3, sl
 801ea06:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801ea0a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801ea0e:	eba3 030a 	sub.w	r3, r3, sl
 801ea12:	3d01      	subs	r5, #1
 801ea14:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801ea18:	e7e9      	b.n	801e9ee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 801ea1a:	0073      	lsls	r3, r6, #1
 801ea1c:	9309      	str	r3, [sp, #36]	; 0x24
 801ea1e:	f64f 7bff 	movw	fp, #65535	; 0xffff
 801ea22:	fa1f fa86 	uxth.w	sl, r6
 801ea26:	2d00      	cmp	r5, #0
 801ea28:	dd29      	ble.n	801ea7e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 801ea2a:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 801ea2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ea30:	428b      	cmp	r3, r1
 801ea32:	bfd4      	ite	le
 801ea34:	2100      	movle	r1, #0
 801ea36:	2101      	movgt	r1, #1
 801ea38:	a810      	add	r0, sp, #64	; 0x40
 801ea3a:	f7ff fe78 	bl	801e72e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801ea3e:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 801ea42:	3b01      	subs	r3, #1
 801ea44:	b29b      	uxth	r3, r3
 801ea46:	455b      	cmp	r3, fp
 801ea48:	930b      	str	r3, [sp, #44]	; 0x2c
 801ea4a:	d005      	beq.n	801ea58 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 801ea4c:	7961      	ldrb	r1, [r4, #5]
 801ea4e:	4638      	mov	r0, r7
 801ea50:	f7ef ff8e 	bl	800e970 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ea54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ea56:	e7f4      	b.n	801ea42 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12c>
 801ea58:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801ea5c:	4453      	add	r3, sl
 801ea5e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801ea62:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801ea66:	eba3 030a 	sub.w	r3, r3, sl
 801ea6a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801ea6e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801ea72:	3d01      	subs	r5, #1
 801ea74:	2b00      	cmp	r3, #0
 801ea76:	d1d6      	bne.n	801ea26 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x110>
 801ea78:	b05b      	add	sp, #364	; 0x16c
 801ea7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea7e:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 801ea82:	ad44      	add	r5, sp, #272	; 0x110
 801ea84:	f04f 0b00 	mov.w	fp, #0
 801ea88:	7c23      	ldrb	r3, [r4, #16]
 801ea8a:	2b00      	cmp	r3, #0
 801ea8c:	d067      	beq.n	801eb5e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 801ea8e:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 801ea92:	458a      	cmp	sl, r1
 801ea94:	bfd4      	ite	le
 801ea96:	2100      	movle	r1, #0
 801ea98:	2101      	movgt	r1, #1
 801ea9a:	a810      	add	r0, sp, #64	; 0x40
 801ea9c:	f7ff fe47 	bl	801e72e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801eaa0:	9b08      	ldr	r3, [sp, #32]
 801eaa2:	2b00      	cmp	r3, #0
 801eaa4:	d056      	beq.n	801eb54 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 801eaa6:	7c23      	ldrb	r3, [r4, #16]
 801eaa8:	9309      	str	r3, [sp, #36]	; 0x24
 801eaaa:	2258      	movs	r2, #88	; 0x58
 801eaac:	4639      	mov	r1, r7
 801eaae:	4628      	mov	r0, r5
 801eab0:	f00f fd3f 	bl	802e532 <memcpy>
 801eab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eab6:	2b00      	cmp	r3, #0
 801eab8:	d059      	beq.n	801eb6e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 801eaba:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 801eabe:	7922      	ldrb	r2, [r4, #4]
 801eac0:	2a01      	cmp	r2, #1
 801eac2:	d13d      	bne.n	801eb40 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x22a>
 801eac4:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 801eac8:	1ac0      	subs	r0, r0, r3
 801eaca:	2302      	movs	r3, #2
 801eacc:	fb90 f0f3 	sdiv	r0, r0, r3
 801ead0:	b200      	sxth	r0, r0
 801ead2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801ead6:	4418      	add	r0, r3
 801ead8:	7c23      	ldrb	r3, [r4, #16]
 801eada:	f8ad 0110 	strh.w	r0, [sp, #272]	; 0x110
 801eade:	2b00      	cmp	r3, #0
 801eae0:	d03a      	beq.n	801eb58 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 801eae2:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 801eae6:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 801eaea:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801eaee:	9500      	str	r5, [sp, #0]
 801eaf0:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801eaf4:	e9cd b703 	strd	fp, r7, [sp, #12]
 801eaf8:	e9cd 8401 	strd	r8, r4, [sp, #4]
 801eafc:	464a      	mov	r2, r9
 801eafe:	2100      	movs	r1, #0
 801eb00:	980a      	ldr	r0, [sp, #40]	; 0x28
 801eb02:	f7ff fca4 	bl	801e44e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801eb06:	2800      	cmp	r0, #0
 801eb08:	d1b6      	bne.n	801ea78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801eb0a:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801eb0e:	b2b2      	uxth	r2, r6
 801eb10:	4611      	mov	r1, r2
 801eb12:	4413      	add	r3, r2
 801eb14:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 801eb18:	1a52      	subs	r2, r2, r1
 801eb1a:	7c21      	ldrb	r1, [r4, #16]
 801eb1c:	b21b      	sxth	r3, r3
 801eb1e:	b212      	sxth	r2, r2
 801eb20:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801eb24:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801eb28:	b109      	cbz	r1, 801eb2e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x218>
 801eb2a:	42b2      	cmp	r2, r6
 801eb2c:	dba4      	blt.n	801ea78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801eb2e:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 801eb32:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 801eb36:	440a      	add	r2, r1
 801eb38:	b212      	sxth	r2, r2
 801eb3a:	4293      	cmp	r3, r2
 801eb3c:	dda4      	ble.n	801ea88 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x172>
 801eb3e:	e79b      	b.n	801ea78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801eb40:	2a02      	cmp	r2, #2
 801eb42:	d105      	bne.n	801eb50 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23a>
 801eb44:	7be2      	ldrb	r2, [r4, #15]
 801eb46:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 801eb4a:	1a80      	subs	r0, r0, r2
 801eb4c:	1ac0      	subs	r0, r0, r3
 801eb4e:	e7bf      	b.n	801ead0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ba>
 801eb50:	2000      	movs	r0, #0
 801eb52:	e7be      	b.n	801ead2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 801eb54:	7be0      	ldrb	r0, [r4, #15]
 801eb56:	e7bc      	b.n	801ead2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 801eb58:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801eb5c:	e7c3      	b.n	801eae6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d0>
 801eb5e:	9b08      	ldr	r3, [sp, #32]
 801eb60:	2b00      	cmp	r3, #0
 801eb62:	d0f7      	beq.n	801eb54 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 801eb64:	2258      	movs	r2, #88	; 0x58
 801eb66:	4639      	mov	r1, r7
 801eb68:	4628      	mov	r0, r5
 801eb6a:	f00f fce2 	bl	802e532 <memcpy>
 801eb6e:	2300      	movs	r3, #0
 801eb70:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801eb74:	6821      	ldr	r1, [r4, #0]
 801eb76:	4628      	mov	r0, r5
 801eb78:	f7ff fbfc 	bl	801e374 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801eb7c:	b203      	sxth	r3, r0
 801eb7e:	e79e      	b.n	801eabe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a8>

0801eb80 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801eb80:	b510      	push	{r4, lr}
 801eb82:	2b02      	cmp	r3, #2
 801eb84:	f9b0 4000 	ldrsh.w	r4, [r0]
 801eb88:	d00b      	beq.n	801eba2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801eb8a:	2b03      	cmp	r3, #3
 801eb8c:	d00e      	beq.n	801ebac <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801eb8e:	2b01      	cmp	r3, #1
 801eb90:	d001      	beq.n	801eb96 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801eb92:	1860      	adds	r0, r4, r1
 801eb94:	bd10      	pop	{r4, pc}
 801eb96:	8880      	ldrh	r0, [r0, #4]
 801eb98:	4420      	add	r0, r4
 801eb9a:	b200      	sxth	r0, r0
 801eb9c:	1a80      	subs	r0, r0, r2
 801eb9e:	3801      	subs	r0, #1
 801eba0:	e7f8      	b.n	801eb94 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801eba2:	8880      	ldrh	r0, [r0, #4]
 801eba4:	4420      	add	r0, r4
 801eba6:	b200      	sxth	r0, r0
 801eba8:	1a40      	subs	r0, r0, r1
 801ebaa:	e7f8      	b.n	801eb9e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801ebac:	18a0      	adds	r0, r4, r2
 801ebae:	e7f1      	b.n	801eb94 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0801ebb0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801ebb0:	b510      	push	{r4, lr}
 801ebb2:	2b02      	cmp	r3, #2
 801ebb4:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801ebb8:	d006      	beq.n	801ebc8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801ebba:	2b03      	cmp	r3, #3
 801ebbc:	d00a      	beq.n	801ebd4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801ebbe:	2b01      	cmp	r3, #1
 801ebc0:	bf14      	ite	ne
 801ebc2:	18a0      	addne	r0, r4, r2
 801ebc4:	1860      	addeq	r0, r4, r1
 801ebc6:	bd10      	pop	{r4, pc}
 801ebc8:	88c0      	ldrh	r0, [r0, #6]
 801ebca:	4420      	add	r0, r4
 801ebcc:	b200      	sxth	r0, r0
 801ebce:	1a80      	subs	r0, r0, r2
 801ebd0:	3801      	subs	r0, #1
 801ebd2:	e7f8      	b.n	801ebc6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801ebd4:	88c0      	ldrh	r0, [r0, #6]
 801ebd6:	4420      	add	r0, r4
 801ebd8:	b200      	sxth	r0, r0
 801ebda:	1a40      	subs	r0, r0, r1
 801ebdc:	e7f8      	b.n	801ebd0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0801ebe0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801ebe0:	4b01      	ldr	r3, [pc, #4]	; (801ebe8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801ebe2:	2200      	movs	r2, #0
 801ebe4:	601a      	str	r2, [r3, #0]
 801ebe6:	4770      	bx	lr
 801ebe8:	200128ac 	.word	0x200128ac

0801ebec <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 801ebec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ebee:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 801ebf2:	1e05      	subs	r5, r0, #0
 801ebf4:	bfba      	itte	lt
 801ebf6:	f04f 37ff 	movlt.w	r7, #4294967295
 801ebfa:	426d      	neglt	r5, r5
 801ebfc:	2701      	movge	r7, #1
 801ebfe:	f1be 0f00 	cmp.w	lr, #0
 801ec02:	bfb8      	it	lt
 801ec04:	f1ce 0e00 	rsblt	lr, lr, #0
 801ec08:	f04f 0601 	mov.w	r6, #1
 801ec0c:	fa4e f001 	asr.w	r0, lr, r1
 801ec10:	fa06 f101 	lsl.w	r1, r6, r1
 801ec14:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801ec18:	f101 31ff 	add.w	r1, r1, #4294967295
 801ec1c:	ea01 010e 	and.w	r1, r1, lr
 801ec20:	bfb8      	it	lt
 801ec22:	427f      	neglt	r7, r7
 801ec24:	434d      	muls	r5, r1
 801ec26:	2c00      	cmp	r4, #0
 801ec28:	f8dc 1000 	ldr.w	r1, [ip]
 801ec2c:	bfb8      	it	lt
 801ec2e:	4264      	neglt	r4, r4
 801ec30:	fb03 1300 	mla	r3, r3, r0, r1
 801ec34:	fb95 f1f4 	sdiv	r1, r5, r4
 801ec38:	fb04 5511 	mls	r5, r4, r1, r5
 801ec3c:	441d      	add	r5, r3
 801ec3e:	fb95 f3f4 	sdiv	r3, r5, r4
 801ec42:	fb04 5413 	mls	r4, r4, r3, r5
 801ec46:	4419      	add	r1, r3
 801ec48:	bfb8      	it	lt
 801ec4a:	427f      	neglt	r7, r7
 801ec4c:	fb02 1000 	mla	r0, r2, r0, r1
 801ec50:	f8cc 4000 	str.w	r4, [ip]
 801ec54:	4378      	muls	r0, r7
 801ec56:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ec58 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801ec58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ec5c:	4c24      	ldr	r4, [pc, #144]	; (801ecf0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 801ec5e:	6807      	ldr	r7, [r0, #0]
 801ec60:	69a3      	ldr	r3, [r4, #24]
 801ec62:	b086      	sub	sp, #24
 801ec64:	4605      	mov	r5, r0
 801ec66:	b92b      	cbnz	r3, 801ec74 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 801ec68:	6840      	ldr	r0, [r0, #4]
 801ec6a:	e9c5 7000 	strd	r7, r0, [r5]
 801ec6e:	b006      	add	sp, #24
 801ec70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ec74:	68a2      	ldr	r2, [r4, #8]
 801ec76:	6820      	ldr	r0, [r4, #0]
 801ec78:	ae06      	add	r6, sp, #24
 801ec7a:	f04f 0802 	mov.w	r8, #2
 801ec7e:	fb93 f1f8 	sdiv	r1, r3, r8
 801ec82:	440a      	add	r2, r1
 801ec84:	f846 2d04 	str.w	r2, [r6, #-4]!
 801ec88:	69e1      	ldr	r1, [r4, #28]
 801ec8a:	9700      	str	r7, [sp, #0]
 801ec8c:	e9cd 3601 	strd	r3, r6, [sp, #4]
 801ec90:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801ec92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801ec94:	f7ff ffaa 	bl	801ebec <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801ec98:	69a3      	ldr	r3, [r4, #24]
 801ec9a:	9301      	str	r3, [sp, #4]
 801ec9c:	686b      	ldr	r3, [r5, #4]
 801ec9e:	9300      	str	r3, [sp, #0]
 801eca0:	4607      	mov	r7, r0
 801eca2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801eca4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801eca6:	6a21      	ldr	r1, [r4, #32]
 801eca8:	9602      	str	r6, [sp, #8]
 801ecaa:	6860      	ldr	r0, [r4, #4]
 801ecac:	f7ff ff9e 	bl	801ebec <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801ecb0:	6963      	ldr	r3, [r4, #20]
 801ecb2:	69a2      	ldr	r2, [r4, #24]
 801ecb4:	fb92 f8f8 	sdiv	r8, r2, r8
 801ecb8:	4443      	add	r3, r8
 801ecba:	9305      	str	r3, [sp, #20]
 801ecbc:	682b      	ldr	r3, [r5, #0]
 801ecbe:	9300      	str	r3, [sp, #0]
 801ecc0:	e9cd 2601 	strd	r2, r6, [sp, #4]
 801ecc4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801ecc6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801ecc8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801ecca:	4407      	add	r7, r0
 801eccc:	68e0      	ldr	r0, [r4, #12]
 801ecce:	f7ff ff8d 	bl	801ebec <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801ecd2:	69a3      	ldr	r3, [r4, #24]
 801ecd4:	9301      	str	r3, [sp, #4]
 801ecd6:	686b      	ldr	r3, [r5, #4]
 801ecd8:	9300      	str	r3, [sp, #0]
 801ecda:	4680      	mov	r8, r0
 801ecdc:	9602      	str	r6, [sp, #8]
 801ecde:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801ece0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801ece2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801ece4:	6920      	ldr	r0, [r4, #16]
 801ece6:	f7ff ff81 	bl	801ebec <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801ecea:	4440      	add	r0, r8
 801ecec:	e7bd      	b.n	801ec6a <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 801ecee:	bf00      	nop
 801ecf0:	200128b0 	.word	0x200128b0

0801ecf4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801ecf4:	b510      	push	{r4, lr}
 801ecf6:	4b07      	ldr	r3, [pc, #28]	; (801ed14 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801ecf8:	781b      	ldrb	r3, [r3, #0]
 801ecfa:	2b01      	cmp	r3, #1
 801ecfc:	d108      	bne.n	801ed10 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801ecfe:	4b06      	ldr	r3, [pc, #24]	; (801ed18 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801ed00:	880c      	ldrh	r4, [r1, #0]
 801ed02:	881b      	ldrh	r3, [r3, #0]
 801ed04:	f9b0 2000 	ldrsh.w	r2, [r0]
 801ed08:	3b01      	subs	r3, #1
 801ed0a:	1b1b      	subs	r3, r3, r4
 801ed0c:	8003      	strh	r3, [r0, #0]
 801ed0e:	800a      	strh	r2, [r1, #0]
 801ed10:	bd10      	pop	{r4, pc}
 801ed12:	bf00      	nop
 801ed14:	2001289c 	.word	0x2001289c
 801ed18:	200128a0 	.word	0x200128a0

0801ed1c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801ed1c:	b510      	push	{r4, lr}
 801ed1e:	4b0a      	ldr	r3, [pc, #40]	; (801ed48 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801ed20:	781b      	ldrb	r3, [r3, #0]
 801ed22:	2b01      	cmp	r3, #1
 801ed24:	d10e      	bne.n	801ed44 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801ed26:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801ed2a:	8843      	ldrh	r3, [r0, #2]
 801ed2c:	f9b0 4000 	ldrsh.w	r4, [r0]
 801ed30:	8044      	strh	r4, [r0, #2]
 801ed32:	18ca      	adds	r2, r1, r3
 801ed34:	4b05      	ldr	r3, [pc, #20]	; (801ed4c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801ed36:	881b      	ldrh	r3, [r3, #0]
 801ed38:	1a9b      	subs	r3, r3, r2
 801ed3a:	8003      	strh	r3, [r0, #0]
 801ed3c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801ed40:	80c3      	strh	r3, [r0, #6]
 801ed42:	8081      	strh	r1, [r0, #4]
 801ed44:	bd10      	pop	{r4, pc}
 801ed46:	bf00      	nop
 801ed48:	2001289c 	.word	0x2001289c
 801ed4c:	20012898 	.word	0x20012898

0801ed50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801ed50:	b510      	push	{r4, lr}
 801ed52:	4b07      	ldr	r3, [pc, #28]	; (801ed70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801ed54:	781b      	ldrb	r3, [r3, #0]
 801ed56:	2b01      	cmp	r3, #1
 801ed58:	d108      	bne.n	801ed6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801ed5a:	f9b1 3000 	ldrsh.w	r3, [r1]
 801ed5e:	f9b0 4000 	ldrsh.w	r4, [r0]
 801ed62:	8003      	strh	r3, [r0, #0]
 801ed64:	8893      	ldrh	r3, [r2, #4]
 801ed66:	3b01      	subs	r3, #1
 801ed68:	1b1b      	subs	r3, r3, r4
 801ed6a:	800b      	strh	r3, [r1, #0]
 801ed6c:	bd10      	pop	{r4, pc}
 801ed6e:	bf00      	nop
 801ed70:	2001289c 	.word	0x2001289c

0801ed74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801ed74:	b513      	push	{r0, r1, r4, lr}
 801ed76:	4b08      	ldr	r3, [pc, #32]	; (801ed98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801ed78:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ed7c:	4b07      	ldr	r3, [pc, #28]	; (801ed9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 801ed7e:	f8ad 2004 	strh.w	r2, [sp, #4]
 801ed82:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ed86:	f8ad 3006 	strh.w	r3, [sp, #6]
 801ed8a:	2400      	movs	r4, #0
 801ed8c:	466a      	mov	r2, sp
 801ed8e:	9400      	str	r4, [sp, #0]
 801ed90:	f7ff ffde 	bl	801ed50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801ed94:	b002      	add	sp, #8
 801ed96:	bd10      	pop	{r4, pc}
 801ed98:	20012898 	.word	0x20012898
 801ed9c:	2001289a 	.word	0x2001289a

0801eda0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801eda0:	b510      	push	{r4, lr}
 801eda2:	4b0a      	ldr	r3, [pc, #40]	; (801edcc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801eda4:	781b      	ldrb	r3, [r3, #0]
 801eda6:	2b01      	cmp	r3, #1
 801eda8:	460a      	mov	r2, r1
 801edaa:	d10d      	bne.n	801edc8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801edac:	8881      	ldrh	r1, [r0, #4]
 801edae:	8803      	ldrh	r3, [r0, #0]
 801edb0:	440b      	add	r3, r1
 801edb2:	4601      	mov	r1, r0
 801edb4:	3b01      	subs	r3, #1
 801edb6:	f821 3b02 	strh.w	r3, [r1], #2
 801edba:	f7ff ffc9 	bl	801ed50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801edbe:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801edc2:	88c2      	ldrh	r2, [r0, #6]
 801edc4:	8082      	strh	r2, [r0, #4]
 801edc6:	80c3      	strh	r3, [r0, #6]
 801edc8:	bd10      	pop	{r4, pc}
 801edca:	bf00      	nop
 801edcc:	2001289c 	.word	0x2001289c

0801edd0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801edd0:	b507      	push	{r0, r1, r2, lr}
 801edd2:	4b09      	ldr	r3, [pc, #36]	; (801edf8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801edd4:	f9b3 2000 	ldrsh.w	r2, [r3]
 801edd8:	4b08      	ldr	r3, [pc, #32]	; (801edfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 801edda:	f8ad 2004 	strh.w	r2, [sp, #4]
 801edde:	2100      	movs	r1, #0
 801ede0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ede4:	9100      	str	r1, [sp, #0]
 801ede6:	4669      	mov	r1, sp
 801ede8:	f8ad 3006 	strh.w	r3, [sp, #6]
 801edec:	f7ff ffd8 	bl	801eda0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801edf0:	b003      	add	sp, #12
 801edf2:	f85d fb04 	ldr.w	pc, [sp], #4
 801edf6:	bf00      	nop
 801edf8:	20012898 	.word	0x20012898
 801edfc:	2001289a 	.word	0x2001289a

0801ee00 <_ZN8touchgfx11Application13requestRedrawEv>:
 801ee00:	4b06      	ldr	r3, [pc, #24]	; (801ee1c <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801ee02:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ee06:	4b06      	ldr	r3, [pc, #24]	; (801ee20 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801ee08:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801ee0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ee10:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801ee14:	2100      	movs	r1, #0
 801ee16:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 801ee1a:	4770      	bx	lr
 801ee1c:	20012898 	.word	0x20012898
 801ee20:	2001289a 	.word	0x2001289a

0801ee24 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801ee24:	4b03      	ldr	r3, [pc, #12]	; (801ee34 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801ee26:	6818      	ldr	r0, [r3, #0]
 801ee28:	b110      	cbz	r0, 801ee30 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801ee2a:	6803      	ldr	r3, [r0, #0]
 801ee2c:	699b      	ldr	r3, [r3, #24]
 801ee2e:	4718      	bx	r3
 801ee30:	4770      	bx	lr
 801ee32:	bf00      	nop
 801ee34:	20012900 	.word	0x20012900

0801ee38 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801ee38:	4770      	bx	lr
	...

0801ee3c <_ZN8touchgfx11Application4drawEv>:
 801ee3c:	b507      	push	{r0, r1, r2, lr}
 801ee3e:	4b09      	ldr	r3, [pc, #36]	; (801ee64 <_ZN8touchgfx11Application4drawEv+0x28>)
 801ee40:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ee44:	4b08      	ldr	r3, [pc, #32]	; (801ee68 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801ee46:	f8ad 2004 	strh.w	r2, [sp, #4]
 801ee4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ee4e:	f8ad 3006 	strh.w	r3, [sp, #6]
 801ee52:	6803      	ldr	r3, [r0, #0]
 801ee54:	2100      	movs	r1, #0
 801ee56:	9100      	str	r1, [sp, #0]
 801ee58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ee5a:	4669      	mov	r1, sp
 801ee5c:	4798      	blx	r3
 801ee5e:	b003      	add	sp, #12
 801ee60:	f85d fb04 	ldr.w	pc, [sp], #4
 801ee64:	20012898 	.word	0x20012898
 801ee68:	2001289a 	.word	0x2001289a

0801ee6c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801ee6c:	4b03      	ldr	r3, [pc, #12]	; (801ee7c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801ee6e:	6818      	ldr	r0, [r3, #0]
 801ee70:	b110      	cbz	r0, 801ee78 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801ee72:	6803      	ldr	r3, [r0, #0]
 801ee74:	69db      	ldr	r3, [r3, #28]
 801ee76:	4718      	bx	r3
 801ee78:	4770      	bx	lr
 801ee7a:	bf00      	nop
 801ee7c:	20012900 	.word	0x20012900

0801ee80 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801ee80:	4b03      	ldr	r3, [pc, #12]	; (801ee90 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801ee82:	6818      	ldr	r0, [r3, #0]
 801ee84:	b110      	cbz	r0, 801ee8c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801ee86:	6803      	ldr	r3, [r0, #0]
 801ee88:	6a1b      	ldr	r3, [r3, #32]
 801ee8a:	4718      	bx	r3
 801ee8c:	4770      	bx	lr
 801ee8e:	bf00      	nop
 801ee90:	20012900 	.word	0x20012900

0801ee94 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801ee94:	4b03      	ldr	r3, [pc, #12]	; (801eea4 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801ee96:	6818      	ldr	r0, [r3, #0]
 801ee98:	b110      	cbz	r0, 801eea0 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801ee9a:	6803      	ldr	r3, [r0, #0]
 801ee9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ee9e:	4718      	bx	r3
 801eea0:	4770      	bx	lr
 801eea2:	bf00      	nop
 801eea4:	20012900 	.word	0x20012900

0801eea8 <_ZN8touchgfx11Application15handleTickEventEv>:
 801eea8:	b570      	push	{r4, r5, r6, lr}
 801eeaa:	4d34      	ldr	r5, [pc, #208]	; (801ef7c <_ZN8touchgfx11Application15handleTickEventEv+0xd4>)
 801eeac:	4604      	mov	r4, r0
 801eeae:	6828      	ldr	r0, [r5, #0]
 801eeb0:	b140      	cbz	r0, 801eec4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801eeb2:	7a03      	ldrb	r3, [r0, #8]
 801eeb4:	b933      	cbnz	r3, 801eec4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801eeb6:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801eeba:	6803      	ldr	r3, [r0, #0]
 801eebc:	689b      	ldr	r3, [r3, #8]
 801eebe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801eec2:	4718      	bx	r3
 801eec4:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 801eec8:	b97b      	cbnz	r3, 801eeea <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801eeca:	b170      	cbz	r0, 801eeea <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801eecc:	7a03      	ldrb	r3, [r0, #8]
 801eece:	b163      	cbz	r3, 801eeea <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801eed0:	4b2b      	ldr	r3, [pc, #172]	; (801ef80 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 801eed2:	6818      	ldr	r0, [r3, #0]
 801eed4:	b110      	cbz	r0, 801eedc <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801eed6:	6803      	ldr	r3, [r0, #0]
 801eed8:	691b      	ldr	r3, [r3, #16]
 801eeda:	4798      	blx	r3
 801eedc:	6828      	ldr	r0, [r5, #0]
 801eede:	6803      	ldr	r3, [r0, #0]
 801eee0:	68db      	ldr	r3, [r3, #12]
 801eee2:	4798      	blx	r3
 801eee4:	2301      	movs	r3, #1
 801eee6:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801eeea:	2500      	movs	r5, #0
 801eeec:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801eef0:	42a8      	cmp	r0, r5
 801eef2:	dd0c      	ble.n	801ef0e <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801eef4:	1963      	adds	r3, r4, r5
 801eef6:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801eefa:	b132      	cbz	r2, 801ef0a <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 801eefc:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801ef00:	4413      	add	r3, r2
 801ef02:	6858      	ldr	r0, [r3, #4]
 801ef04:	6803      	ldr	r3, [r0, #0]
 801ef06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ef08:	4798      	blx	r3
 801ef0a:	3501      	adds	r5, #1
 801ef0c:	e7ee      	b.n	801eeec <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801ef0e:	2300      	movs	r3, #0
 801ef10:	461a      	mov	r2, r3
 801ef12:	4298      	cmp	r0, r3
 801ef14:	d114      	bne.n	801ef40 <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 801ef16:	1d25      	adds	r5, r4, #4
 801ef18:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 801ef1c:	1e48      	subs	r0, r1, #1
 801ef1e:	b280      	uxth	r0, r0
 801ef20:	4291      	cmp	r1, r2
 801ef22:	dd24      	ble.n	801ef6e <_ZN8touchgfx11Application15handleTickEventEv+0xc6>
 801ef24:	4288      	cmp	r0, r1
 801ef26:	d2fb      	bcs.n	801ef20 <_ZN8touchgfx11Application15handleTickEventEv+0x78>
 801ef28:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 801ef2c:	3304      	adds	r3, #4
 801ef2e:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 801ef32:	428b      	cmp	r3, r1
 801ef34:	d018      	beq.n	801ef68 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 801ef36:	f853 6f04 	ldr.w	r6, [r3, #4]!
 801ef3a:	f843 6c04 	str.w	r6, [r3, #-4]
 801ef3e:	e7f8      	b.n	801ef32 <_ZN8touchgfx11Application15handleTickEventEv+0x8a>
 801ef40:	18e1      	adds	r1, r4, r3
 801ef42:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 801ef46:	b16d      	cbz	r5, 801ef64 <_ZN8touchgfx11Application15handleTickEventEv+0xbc>
 801ef48:	429a      	cmp	r2, r3
 801ef4a:	d00a      	beq.n	801ef62 <_ZN8touchgfx11Application15handleTickEventEv+0xba>
 801ef4c:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801ef50:	4431      	add	r1, r6
 801ef52:	684e      	ldr	r6, [r1, #4]
 801ef54:	b291      	uxth	r1, r2
 801ef56:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801ef5a:	604e      	str	r6, [r1, #4]
 801ef5c:	18a1      	adds	r1, r4, r2
 801ef5e:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801ef62:	3201      	adds	r2, #1
 801ef64:	3301      	adds	r3, #1
 801ef66:	e7d4      	b.n	801ef12 <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801ef68:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 801ef6c:	e7d4      	b.n	801ef18 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 801ef6e:	4b04      	ldr	r3, [pc, #16]	; (801ef80 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 801ef70:	6818      	ldr	r0, [r3, #0]
 801ef72:	b110      	cbz	r0, 801ef7a <_ZN8touchgfx11Application15handleTickEventEv+0xd2>
 801ef74:	6803      	ldr	r3, [r0, #0]
 801ef76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ef78:	e7a1      	b.n	801eebe <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801ef7a:	bd70      	pop	{r4, r5, r6, pc}
 801ef7c:	20012904 	.word	0x20012904
 801ef80:	20012900 	.word	0x20012900

0801ef84 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801ef84:	b570      	push	{r4, r5, r6, lr}
 801ef86:	4606      	mov	r6, r0
 801ef88:	460c      	mov	r4, r1
 801ef8a:	b929      	cbnz	r1, 801ef98 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801ef8c:	4b0c      	ldr	r3, [pc, #48]	; (801efc0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801ef8e:	4a0d      	ldr	r2, [pc, #52]	; (801efc4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801ef90:	480d      	ldr	r0, [pc, #52]	; (801efc8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801ef92:	2166      	movs	r1, #102	; 0x66
 801ef94:	f00f f968 	bl	802e268 <__assert_func>
 801ef98:	4d0c      	ldr	r5, [pc, #48]	; (801efcc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801ef9a:	2300      	movs	r3, #0
 801ef9c:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801efa0:	6828      	ldr	r0, [r5, #0]
 801efa2:	b110      	cbz	r0, 801efaa <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801efa4:	6803      	ldr	r3, [r0, #0]
 801efa6:	695b      	ldr	r3, [r3, #20]
 801efa8:	4798      	blx	r3
 801efaa:	602c      	str	r4, [r5, #0]
 801efac:	6823      	ldr	r3, [r4, #0]
 801efae:	4620      	mov	r0, r4
 801efb0:	68db      	ldr	r3, [r3, #12]
 801efb2:	4798      	blx	r3
 801efb4:	6833      	ldr	r3, [r6, #0]
 801efb6:	4630      	mov	r0, r6
 801efb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801efba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801efbe:	4718      	bx	r3
 801efc0:	080335a4 	.word	0x080335a4
 801efc4:	0803369c 	.word	0x0803369c
 801efc8:	080335ae 	.word	0x080335ae
 801efcc:	20012900 	.word	0x20012900

0801efd0 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801efd0:	b510      	push	{r4, lr}
 801efd2:	f9b1 4000 	ldrsh.w	r4, [r1]
 801efd6:	888a      	ldrh	r2, [r1, #4]
 801efd8:	f9b0 3000 	ldrsh.w	r3, [r0]
 801efdc:	4422      	add	r2, r4
 801efde:	b212      	sxth	r2, r2
 801efe0:	4293      	cmp	r3, r2
 801efe2:	da15      	bge.n	801f010 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801efe4:	8882      	ldrh	r2, [r0, #4]
 801efe6:	4413      	add	r3, r2
 801efe8:	b21b      	sxth	r3, r3
 801efea:	429c      	cmp	r4, r3
 801efec:	da10      	bge.n	801f010 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801efee:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801eff2:	88c9      	ldrh	r1, [r1, #6]
 801eff4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801eff8:	4419      	add	r1, r3
 801effa:	b209      	sxth	r1, r1
 801effc:	428a      	cmp	r2, r1
 801effe:	da07      	bge.n	801f010 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801f000:	88c0      	ldrh	r0, [r0, #6]
 801f002:	4410      	add	r0, r2
 801f004:	b200      	sxth	r0, r0
 801f006:	4283      	cmp	r3, r0
 801f008:	bfac      	ite	ge
 801f00a:	2000      	movge	r0, #0
 801f00c:	2001      	movlt	r0, #1
 801f00e:	bd10      	pop	{r4, pc}
 801f010:	2000      	movs	r0, #0
 801f012:	e7fc      	b.n	801f00e <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801f014 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801f014:	b570      	push	{r4, r5, r6, lr}
 801f016:	f9b1 4000 	ldrsh.w	r4, [r1]
 801f01a:	f9b0 5000 	ldrsh.w	r5, [r0]
 801f01e:	42ac      	cmp	r4, r5
 801f020:	db18      	blt.n	801f054 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801f022:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801f026:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801f02a:	429a      	cmp	r2, r3
 801f02c:	db12      	blt.n	801f054 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801f02e:	8886      	ldrh	r6, [r0, #4]
 801f030:	4435      	add	r5, r6
 801f032:	888e      	ldrh	r6, [r1, #4]
 801f034:	4434      	add	r4, r6
 801f036:	b22d      	sxth	r5, r5
 801f038:	b224      	sxth	r4, r4
 801f03a:	42a5      	cmp	r5, r4
 801f03c:	db0a      	blt.n	801f054 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801f03e:	88c0      	ldrh	r0, [r0, #6]
 801f040:	4418      	add	r0, r3
 801f042:	88cb      	ldrh	r3, [r1, #6]
 801f044:	441a      	add	r2, r3
 801f046:	b200      	sxth	r0, r0
 801f048:	b212      	sxth	r2, r2
 801f04a:	4290      	cmp	r0, r2
 801f04c:	bfb4      	ite	lt
 801f04e:	2000      	movlt	r0, #0
 801f050:	2001      	movge	r0, #1
 801f052:	bd70      	pop	{r4, r5, r6, pc}
 801f054:	2000      	movs	r0, #0
 801f056:	e7fc      	b.n	801f052 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801f058 <_ZN8touchgfx11Application11getInstanceEv>:
 801f058:	4b01      	ldr	r3, [pc, #4]	; (801f060 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801f05a:	6818      	ldr	r0, [r3, #0]
 801f05c:	4770      	bx	lr
 801f05e:	bf00      	nop
 801f060:	20012910 	.word	0x20012910

0801f064 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 801f064:	b570      	push	{r4, r5, r6, lr}
 801f066:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 801f06a:	1d04      	adds	r4, r0, #4
 801f06c:	2200      	movs	r2, #0
 801f06e:	b295      	uxth	r5, r2
 801f070:	42ab      	cmp	r3, r5
 801f072:	d90f      	bls.n	801f094 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x30>
 801f074:	f854 6b04 	ldr.w	r6, [r4], #4
 801f078:	428e      	cmp	r6, r1
 801f07a:	4615      	mov	r5, r2
 801f07c:	f102 0201 	add.w	r2, r2, #1
 801f080:	d1f5      	bne.n	801f06e <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0xa>
 801f082:	4428      	add	r0, r5
 801f084:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 801f088:	2bff      	cmp	r3, #255	; 0xff
 801f08a:	d002      	beq.n	801f092 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 801f08c:	3301      	adds	r3, #1
 801f08e:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
 801f092:	bd70      	pop	{r4, r5, r6, pc}
 801f094:	2b20      	cmp	r3, #32
 801f096:	d106      	bne.n	801f0a6 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x42>
 801f098:	4b08      	ldr	r3, [pc, #32]	; (801f0bc <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x58>)
 801f09a:	4a09      	ldr	r2, [pc, #36]	; (801f0c0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x5c>)
 801f09c:	4809      	ldr	r0, [pc, #36]	; (801f0c4 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x60>)
 801f09e:	f240 1137 	movw	r1, #311	; 0x137
 801f0a2:	f00f f8e1 	bl	802e268 <__assert_func>
 801f0a6:	18c2      	adds	r2, r0, r3
 801f0a8:	2401      	movs	r4, #1
 801f0aa:	f882 4088 	strb.w	r4, [r2, #136]	; 0x88
 801f0ae:	191a      	adds	r2, r3, r4
 801f0b0:	f8a0 2084 	strh.w	r2, [r0, #132]	; 0x84
 801f0b4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801f0b8:	6041      	str	r1, [r0, #4]
 801f0ba:	e7ea      	b.n	801f092 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 801f0bc:	080335d8 	.word	0x080335d8
 801f0c0:	080336e0 	.word	0x080336e0
 801f0c4:	080335ae 	.word	0x080335ae

0801f0c8 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 801f0c8:	b570      	push	{r4, r5, r6, lr}
 801f0ca:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 801f0ce:	1d04      	adds	r4, r0, #4
 801f0d0:	2300      	movs	r3, #0
 801f0d2:	b29a      	uxth	r2, r3
 801f0d4:	4296      	cmp	r6, r2
 801f0d6:	d90a      	bls.n	801f0ee <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 801f0d8:	f854 2b04 	ldr.w	r2, [r4], #4
 801f0dc:	428a      	cmp	r2, r1
 801f0de:	d107      	bne.n	801f0f0 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801f0e0:	18c5      	adds	r5, r0, r3
 801f0e2:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 801f0e6:	b11a      	cbz	r2, 801f0f0 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801f0e8:	3a01      	subs	r2, #1
 801f0ea:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 801f0ee:	bd70      	pop	{r4, r5, r6, pc}
 801f0f0:	3301      	adds	r3, #1
 801f0f2:	e7ee      	b.n	801f0d2 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

0801f0f4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801f0f4:	2300      	movs	r3, #0
 801f0f6:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801f0fa:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801f0fe:	30a8      	adds	r0, #168	; 0xa8
 801f100:	f802 3b01 	strb.w	r3, [r2], #1
 801f104:	4282      	cmp	r2, r0
 801f106:	d1fb      	bne.n	801f100 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801f108:	4770      	bx	lr

0801f10a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801f10a:	4603      	mov	r3, r0
 801f10c:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801f110:	2200      	movs	r2, #0
 801f112:	801a      	strh	r2, [r3, #0]
 801f114:	805a      	strh	r2, [r3, #2]
 801f116:	809a      	strh	r2, [r3, #4]
 801f118:	80da      	strh	r2, [r3, #6]
 801f11a:	3308      	adds	r3, #8
 801f11c:	428b      	cmp	r3, r1
 801f11e:	d1f8      	bne.n	801f112 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801f120:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801f124:	4770      	bx	lr
	...

0801f128 <_ZN8touchgfx11ApplicationC1Ev>:
 801f128:	b570      	push	{r4, r5, r6, lr}
 801f12a:	4b1a      	ldr	r3, [pc, #104]	; (801f194 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801f12c:	6003      	str	r3, [r0, #0]
 801f12e:	2500      	movs	r5, #0
 801f130:	4604      	mov	r4, r0
 801f132:	f8a0 5084 	strh.w	r5, [r0, #132]	; 0x84
 801f136:	30a8      	adds	r0, #168	; 0xa8
 801f138:	f7ff ffe7 	bl	801f10a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801f13c:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801f140:	f7ff ffe3 	bl	801f10a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801f144:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 801f148:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 801f14c:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801f150:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801f154:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801f158:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 801f15c:	490e      	ldr	r1, [pc, #56]	; (801f198 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801f15e:	480f      	ldr	r0, [pc, #60]	; (801f19c <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801f160:	4e0f      	ldr	r6, [pc, #60]	; (801f1a0 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801f162:	f00d fea1 	bl	802cea8 <CRC_Lock>
 801f166:	4b0f      	ldr	r3, [pc, #60]	; (801f1a4 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801f168:	b158      	cbz	r0, 801f182 <_ZN8touchgfx11ApplicationC1Ev+0x5a>
 801f16a:	801d      	strh	r5, [r3, #0]
 801f16c:	4a0e      	ldr	r2, [pc, #56]	; (801f1a8 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801f16e:	2300      	movs	r3, #0
 801f170:	6013      	str	r3, [r2, #0]
 801f172:	4a0e      	ldr	r2, [pc, #56]	; (801f1ac <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801f174:	6033      	str	r3, [r6, #0]
 801f176:	4620      	mov	r0, r4
 801f178:	6013      	str	r3, [r2, #0]
 801f17a:	f7ff ffbb 	bl	801f0f4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801f17e:	4620      	mov	r0, r4
 801f180:	bd70      	pop	{r4, r5, r6, pc}
 801f182:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801f186:	2002      	movs	r0, #2
 801f188:	801a      	strh	r2, [r3, #0]
 801f18a:	6030      	str	r0, [r6, #0]
 801f18c:	f000 ffda 	bl	8020144 <_ZN8touchgfx6Screen4drawEv>
 801f190:	e7ec      	b.n	801f16c <_ZN8touchgfx11ApplicationC1Ev+0x44>
 801f192:	bf00      	nop
 801f194:	08033660 	.word	0x08033660
 801f198:	b5e8b5cd 	.word	0xb5e8b5cd
 801f19c:	f407a5c2 	.word	0xf407a5c2
 801f1a0:	20012900 	.word	0x20012900
 801f1a4:	2000009c 	.word	0x2000009c
 801f1a8:	20012910 	.word	0x20012910
 801f1ac:	20012904 	.word	0x20012904

0801f1b0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801f1b0:	2300      	movs	r3, #0
 801f1b2:	8003      	strh	r3, [r0, #0]
 801f1b4:	8043      	strh	r3, [r0, #2]
 801f1b6:	8083      	strh	r3, [r0, #4]
 801f1b8:	80c3      	strh	r3, [r0, #6]
 801f1ba:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 801f1be:	4293      	cmp	r3, r2
 801f1c0:	b530      	push	{r4, r5, lr}
 801f1c2:	d912      	bls.n	801f1ea <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801f1c4:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 801f1c8:	3b01      	subs	r3, #1
 801f1ca:	6825      	ldr	r5, [r4, #0]
 801f1cc:	6005      	str	r5, [r0, #0]
 801f1ce:	b29b      	uxth	r3, r3
 801f1d0:	6865      	ldr	r5, [r4, #4]
 801f1d2:	6045      	str	r5, [r0, #4]
 801f1d4:	4293      	cmp	r3, r2
 801f1d6:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 801f1da:	d906      	bls.n	801f1ea <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801f1dc:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801f1e0:	681d      	ldr	r5, [r3, #0]
 801f1e2:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 801f1e6:	685d      	ldr	r5, [r3, #4]
 801f1e8:	6065      	str	r5, [r4, #4]
 801f1ea:	bd30      	pop	{r4, r5, pc}

0801f1ec <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801f1ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f1ee:	466b      	mov	r3, sp
 801f1f0:	e883 0006 	stmia.w	r3, {r1, r2}
 801f1f4:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801f1f8:	2a07      	cmp	r2, #7
 801f1fa:	4604      	mov	r4, r0
 801f1fc:	d906      	bls.n	801f20c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801f1fe:	4b09      	ldr	r3, [pc, #36]	; (801f224 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801f200:	4a09      	ldr	r2, [pc, #36]	; (801f228 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801f202:	480a      	ldr	r0, [pc, #40]	; (801f22c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801f204:	f240 118f 	movw	r1, #399	; 0x18f
 801f208:	f00f f82e 	bl	802e268 <__assert_func>
 801f20c:	1c51      	adds	r1, r2, #1
 801f20e:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801f212:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801f216:	cb03      	ldmia	r3!, {r0, r1}
 801f218:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801f21c:	6069      	str	r1, [r5, #4]
 801f21e:	b003      	add	sp, #12
 801f220:	bd30      	pop	{r4, r5, pc}
 801f222:	bf00      	nop
 801f224:	08033600 	.word	0x08033600
 801f228:	08033725 	.word	0x08033725
 801f22c:	0803362f 	.word	0x0803362f

0801f230 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801f230:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f234:	b089      	sub	sp, #36	; 0x24
 801f236:	466c      	mov	r4, sp
 801f238:	4606      	mov	r6, r0
 801f23a:	4620      	mov	r0, r4
 801f23c:	e884 0006 	stmia.w	r4, {r1, r2}
 801f240:	f7fb fe53 	bl	801aeea <_ZNK8touchgfx4Rect7isEmptyEv>
 801f244:	bbb0      	cbnz	r0, 801f2b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801f246:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 801f24a:	b1fd      	cbz	r5, 801f28c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 801f24c:	3d01      	subs	r5, #1
 801f24e:	af04      	add	r7, sp, #16
 801f250:	f04f 090a 	mov.w	r9, #10
 801f254:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 801f258:	ab02      	add	r3, sp, #8
 801f25a:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801f25e:	6851      	ldr	r1, [r2, #4]
 801f260:	c303      	stmia	r3!, {r0, r1}
 801f262:	4621      	mov	r1, r4
 801f264:	a802      	add	r0, sp, #8
 801f266:	fa1f f885 	uxth.w	r8, r5
 801f26a:	f7ff fed3 	bl	801f014 <_ZNK8touchgfx4Rect8includesERKS0_>
 801f26e:	bb08      	cbnz	r0, 801f2b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801f270:	a902      	add	r1, sp, #8
 801f272:	4620      	mov	r0, r4
 801f274:	f7ff fece 	bl	801f014 <_ZNK8touchgfx4Rect8includesERKS0_>
 801f278:	b1f8      	cbz	r0, 801f2ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 801f27a:	4642      	mov	r2, r8
 801f27c:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801f280:	a806      	add	r0, sp, #24
 801f282:	f7ff ff95 	bl	801f1b0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801f286:	f115 35ff 	adds.w	r5, r5, #4294967295
 801f28a:	d2e3      	bcs.n	801f254 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 801f28c:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 801f290:	2b08      	cmp	r3, #8
 801f292:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 801f296:	d108      	bne.n	801f2aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801f298:	4629      	mov	r1, r5
 801f29a:	a806      	add	r0, sp, #24
 801f29c:	2207      	movs	r2, #7
 801f29e:	f7ff ff87 	bl	801f1b0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801f2a2:	a906      	add	r1, sp, #24
 801f2a4:	4620      	mov	r0, r4
 801f2a6:	f7fc fe1a 	bl	801bede <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801f2aa:	e894 0006 	ldmia.w	r4, {r1, r2}
 801f2ae:	4628      	mov	r0, r5
 801f2b0:	f7ff ff9c 	bl	801f1ec <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801f2b4:	b009      	add	sp, #36	; 0x24
 801f2b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f2ba:	4621      	mov	r1, r4
 801f2bc:	a802      	add	r0, sp, #8
 801f2be:	f7ff fe87 	bl	801efd0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801f2c2:	b150      	cbz	r0, 801f2da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 801f2c4:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801f2c8:	a806      	add	r0, sp, #24
 801f2ca:	4642      	mov	r2, r8
 801f2cc:	f7ff ff70 	bl	801f1b0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801f2d0:	a902      	add	r1, sp, #8
 801f2d2:	4620      	mov	r0, r4
 801f2d4:	f7fc fe03 	bl	801bede <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801f2d8:	e7d5      	b.n	801f286 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801f2da:	e894 0003 	ldmia.w	r4, {r0, r1}
 801f2de:	e887 0003 	stmia.w	r7, {r0, r1}
 801f2e2:	a902      	add	r1, sp, #8
 801f2e4:	4638      	mov	r0, r7
 801f2e6:	f7fc fdfa 	bl	801bede <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801f2ea:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801f2ee:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801f2f2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801f2f6:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801f2fa:	fb13 f302 	smulbb	r3, r3, r2
 801f2fe:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801f302:	fb11 f102 	smulbb	r1, r1, r2
 801f306:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801f30a:	fb12 1100 	smlabb	r1, r2, r0, r1
 801f30e:	220b      	movs	r2, #11
 801f310:	fb09 f303 	mul.w	r3, r9, r3
 801f314:	434a      	muls	r2, r1
 801f316:	4293      	cmp	r3, r2
 801f318:	dab5      	bge.n	801f286 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801f31a:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801f31e:	a806      	add	r0, sp, #24
 801f320:	4642      	mov	r2, r8
 801f322:	f7ff ff45 	bl	801f1b0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801f326:	e897 0003 	ldmia.w	r7, {r0, r1}
 801f32a:	e884 0003 	stmia.w	r4, {r0, r1}
 801f32e:	e7aa      	b.n	801f286 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

0801f330 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801f330:	b530      	push	{r4, r5, lr}
 801f332:	4b1d      	ldr	r3, [pc, #116]	; (801f3a8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801f334:	b085      	sub	sp, #20
 801f336:	460c      	mov	r4, r1
 801f338:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f33c:	4b1b      	ldr	r3, [pc, #108]	; (801f3ac <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801f33e:	f8ad 2004 	strh.w	r2, [sp, #4]
 801f342:	2100      	movs	r1, #0
 801f344:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f348:	9100      	str	r1, [sp, #0]
 801f34a:	4605      	mov	r5, r0
 801f34c:	6861      	ldr	r1, [r4, #4]
 801f34e:	6820      	ldr	r0, [r4, #0]
 801f350:	f8ad 3006 	strh.w	r3, [sp, #6]
 801f354:	ab02      	add	r3, sp, #8
 801f356:	c303      	stmia	r3!, {r0, r1}
 801f358:	4669      	mov	r1, sp
 801f35a:	a802      	add	r0, sp, #8
 801f35c:	f7fb fd82 	bl	801ae64 <_ZN8touchgfx4RectaNERKS0_>
 801f360:	ab02      	add	r3, sp, #8
 801f362:	cb03      	ldmia	r3!, {r0, r1}
 801f364:	4b12      	ldr	r3, [pc, #72]	; (801f3b0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801f366:	6020      	str	r0, [r4, #0]
 801f368:	6818      	ldr	r0, [r3, #0]
 801f36a:	6061      	str	r1, [r4, #4]
 801f36c:	b138      	cbz	r0, 801f37e <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801f36e:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 801f372:	b133      	cbz	r3, 801f382 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801f374:	6821      	ldr	r1, [r4, #0]
 801f376:	6862      	ldr	r2, [r4, #4]
 801f378:	4628      	mov	r0, r5
 801f37a:	f7ff ff59 	bl	801f230 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801f37e:	b005      	add	sp, #20
 801f380:	bd30      	pop	{r4, r5, pc}
 801f382:	6803      	ldr	r3, [r0, #0]
 801f384:	4621      	mov	r1, r4
 801f386:	689b      	ldr	r3, [r3, #8]
 801f388:	4798      	blx	r3
 801f38a:	4b0a      	ldr	r3, [pc, #40]	; (801f3b4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801f38c:	6818      	ldr	r0, [r3, #0]
 801f38e:	b118      	cbz	r0, 801f398 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801f390:	6803      	ldr	r3, [r0, #0]
 801f392:	4621      	mov	r1, r4
 801f394:	689b      	ldr	r3, [r3, #8]
 801f396:	4798      	blx	r3
 801f398:	4b07      	ldr	r3, [pc, #28]	; (801f3b8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801f39a:	6818      	ldr	r0, [r3, #0]
 801f39c:	6803      	ldr	r3, [r0, #0]
 801f39e:	4621      	mov	r1, r4
 801f3a0:	695b      	ldr	r3, [r3, #20]
 801f3a2:	4798      	blx	r3
 801f3a4:	e7eb      	b.n	801f37e <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801f3a6:	bf00      	nop
 801f3a8:	20012898 	.word	0x20012898
 801f3ac:	2001289a 	.word	0x2001289a
 801f3b0:	20012900 	.word	0x20012900
 801f3b4:	200128fc 	.word	0x200128fc
 801f3b8:	200128a4 	.word	0x200128a4

0801f3bc <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801f3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f3c0:	4604      	mov	r4, r0
 801f3c2:	b09b      	sub	sp, #108	; 0x6c
 801f3c4:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 801f3c8:	b129      	cbz	r1, 801f3d6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801f3ca:	2300      	movs	r3, #0
 801f3cc:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801f3d0:	b01b      	add	sp, #108	; 0x6c
 801f3d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f3d6:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 801f3da:	4630      	mov	r0, r6
 801f3dc:	f7fb fd85 	bl	801aeea <_ZNK8touchgfx4Rect7isEmptyEv>
 801f3e0:	4605      	mov	r5, r0
 801f3e2:	b940      	cbnz	r0, 801f3f6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 801f3e4:	e896 0006 	ldmia.w	r6, {r1, r2}
 801f3e8:	4620      	mov	r0, r4
 801f3ea:	f7ff ff21 	bl	801f230 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801f3ee:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801f3f2:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801f3f6:	4b92      	ldr	r3, [pc, #584]	; (801f640 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x284>)
 801f3f8:	681b      	ldr	r3, [r3, #0]
 801f3fa:	b33b      	cbz	r3, 801f44c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801f3fc:	4d91      	ldr	r5, [pc, #580]	; (801f644 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x288>)
 801f3fe:	4628      	mov	r0, r5
 801f400:	f7fb fd73 	bl	801aeea <_ZNK8touchgfx4Rect7isEmptyEv>
 801f404:	4606      	mov	r6, r0
 801f406:	bb08      	cbnz	r0, 801f44c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801f408:	4628      	mov	r0, r5
 801f40a:	f7ff fc87 	bl	801ed1c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801f40e:	6829      	ldr	r1, [r5, #0]
 801f410:	686a      	ldr	r2, [r5, #4]
 801f412:	4620      	mov	r0, r4
 801f414:	f7ff ff0c 	bl	801f230 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801f418:	802e      	strh	r6, [r5, #0]
 801f41a:	806e      	strh	r6, [r5, #2]
 801f41c:	80ae      	strh	r6, [r5, #4]
 801f41e:	80ee      	strh	r6, [r5, #6]
 801f420:	4f89      	ldr	r7, [pc, #548]	; (801f648 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x28c>)
 801f422:	a809      	add	r0, sp, #36	; 0x24
 801f424:	f7ff fe71 	bl	801f10a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801f428:	883d      	ldrh	r5, [r7, #0]
 801f42a:	462e      	mov	r6, r5
 801f42c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801f430:	42b3      	cmp	r3, r6
 801f432:	d910      	bls.n	801f456 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 801f434:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801f438:	a809      	add	r0, sp, #36	; 0x24
 801f43a:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801f43e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801f442:	3601      	adds	r6, #1
 801f444:	f7ff fed2 	bl	801f1ec <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801f448:	b2b6      	uxth	r6, r6
 801f44a:	e7ef      	b.n	801f42c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801f44c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801f450:	2b00      	cmp	r3, #0
 801f452:	d1e5      	bne.n	801f420 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 801f454:	e7bc      	b.n	801f3d0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801f456:	462e      	mov	r6, r5
 801f458:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801f45c:	42b3      	cmp	r3, r6
 801f45e:	d90b      	bls.n	801f478 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 801f460:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801f464:	4620      	mov	r0, r4
 801f466:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801f46a:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801f46e:	3601      	adds	r6, #1
 801f470:	f7ff fede 	bl	801f230 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801f474:	b2b6      	uxth	r6, r6
 801f476:	e7ef      	b.n	801f458 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801f478:	4a74      	ldr	r2, [pc, #464]	; (801f64c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x290>)
 801f47a:	6813      	ldr	r3, [r2, #0]
 801f47c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801f480:	2b01      	cmp	r3, #1
 801f482:	4690      	mov	r8, r2
 801f484:	f040 8094 	bne.w	801f5b0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f4>
 801f488:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801f48c:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801f490:	33aa      	adds	r3, #170	; 0xaa
 801f492:	f04f 0900 	mov.w	r9, #0
 801f496:	42a8      	cmp	r0, r5
 801f498:	f103 0308 	add.w	r3, r3, #8
 801f49c:	dd0a      	ble.n	801f4b4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 801f49e:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801f4a2:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801f4a6:	440a      	add	r2, r1
 801f4a8:	b212      	sxth	r2, r2
 801f4aa:	4591      	cmp	r9, r2
 801f4ac:	bfb8      	it	lt
 801f4ae:	4691      	movlt	r9, r2
 801f4b0:	3501      	adds	r5, #1
 801f4b2:	e7f0      	b.n	801f496 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 801f4b4:	4b66      	ldr	r3, [pc, #408]	; (801f650 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x294>)
 801f4b6:	4e67      	ldr	r6, [pc, #412]	; (801f654 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x298>)
 801f4b8:	881d      	ldrh	r5, [r3, #0]
 801f4ba:	2300      	movs	r3, #0
 801f4bc:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801f4c0:	2d0f      	cmp	r5, #15
 801f4c2:	bf8c      	ite	hi
 801f4c4:	08ed      	lsrhi	r5, r5, #3
 801f4c6:	2501      	movls	r5, #1
 801f4c8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801f4cc:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801f4d0:	f8d8 0000 	ldr.w	r0, [r8]
 801f4d4:	440b      	add	r3, r1
 801f4d6:	b21b      	sxth	r3, r3
 801f4d8:	4599      	cmp	r9, r3
 801f4da:	6802      	ldr	r2, [r0, #0]
 801f4dc:	dd4b      	ble.n	801f576 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 801f4de:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 801f4e2:	4798      	blx	r3
 801f4e4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801f4e8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801f4ec:	4413      	add	r3, r2
 801f4ee:	b21b      	sxth	r3, r3
 801f4f0:	195a      	adds	r2, r3, r5
 801f4f2:	4290      	cmp	r0, r2
 801f4f4:	da07      	bge.n	801f506 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801f4f6:	4581      	cmp	r9, r0
 801f4f8:	dd05      	ble.n	801f506 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801f4fa:	4298      	cmp	r0, r3
 801f4fc:	da33      	bge.n	801f566 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801f4fe:	2b00      	cmp	r3, #0
 801f500:	dd31      	ble.n	801f566 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801f502:	4648      	mov	r0, r9
 801f504:	e004      	b.n	801f510 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 801f506:	4298      	cmp	r0, r3
 801f508:	dbfb      	blt.n	801f502 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 801f50a:	4548      	cmp	r0, r9
 801f50c:	bfa8      	it	ge
 801f50e:	4648      	movge	r0, r9
 801f510:	f9b6 2000 	ldrsh.w	r2, [r6]
 801f514:	f8b7 a000 	ldrh.w	sl, [r7]
 801f518:	f8ad 3016 	strh.w	r3, [sp, #22]
 801f51c:	2100      	movs	r1, #0
 801f51e:	1ac0      	subs	r0, r0, r3
 801f520:	f8ad 1014 	strh.w	r1, [sp, #20]
 801f524:	f8ad 2018 	strh.w	r2, [sp, #24]
 801f528:	f8ad 001a 	strh.w	r0, [sp, #26]
 801f52c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801f530:	4553      	cmp	r3, sl
 801f532:	d9c9      	bls.n	801f4c8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801f534:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801f538:	ab07      	add	r3, sp, #28
 801f53a:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801f53e:	6851      	ldr	r1, [r2, #4]
 801f540:	c303      	stmia	r3!, {r0, r1}
 801f542:	a807      	add	r0, sp, #28
 801f544:	a905      	add	r1, sp, #20
 801f546:	f7fb fc8d 	bl	801ae64 <_ZN8touchgfx4RectaNERKS0_>
 801f54a:	a807      	add	r0, sp, #28
 801f54c:	f7fb fccd 	bl	801aeea <_ZNK8touchgfx4Rect7isEmptyEv>
 801f550:	b920      	cbnz	r0, 801f55c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 801f552:	6823      	ldr	r3, [r4, #0]
 801f554:	a907      	add	r1, sp, #28
 801f556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f558:	4620      	mov	r0, r4
 801f55a:	4798      	blx	r3
 801f55c:	f10a 0a01 	add.w	sl, sl, #1
 801f560:	fa1f fa8a 	uxth.w	sl, sl
 801f564:	e7e2      	b.n	801f52c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 801f566:	f8d8 0000 	ldr.w	r0, [r8]
 801f56a:	6803      	ldr	r3, [r0, #0]
 801f56c:	2101      	movs	r1, #1
 801f56e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801f572:	4798      	blx	r3
 801f574:	e7a8      	b.n	801f4c8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801f576:	69d3      	ldr	r3, [r2, #28]
 801f578:	4798      	blx	r3
 801f57a:	4b37      	ldr	r3, [pc, #220]	; (801f658 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x29c>)
 801f57c:	781b      	ldrb	r3, [r3, #0]
 801f57e:	2b00      	cmp	r3, #0
 801f580:	f43f af26 	beq.w	801f3d0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801f584:	2300      	movs	r3, #0
 801f586:	883d      	ldrh	r5, [r7, #0]
 801f588:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 801f58c:	34ea      	adds	r4, #234	; 0xea
 801f58e:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801f592:	42ab      	cmp	r3, r5
 801f594:	f67f af1c 	bls.w	801f3d0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801f598:	ab1a      	add	r3, sp, #104	; 0x68
 801f59a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801f59e:	3b44      	subs	r3, #68	; 0x44
 801f5a0:	e893 0006 	ldmia.w	r3, {r1, r2}
 801f5a4:	4620      	mov	r0, r4
 801f5a6:	3501      	adds	r5, #1
 801f5a8:	f7ff fe20 	bl	801f1ec <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801f5ac:	b2ad      	uxth	r5, r5
 801f5ae:	e7ee      	b.n	801f58e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 801f5b0:	2b02      	cmp	r3, #2
 801f5b2:	f040 813d 	bne.w	801f830 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>
 801f5b6:	4b29      	ldr	r3, [pc, #164]	; (801f65c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a0>)
 801f5b8:	781b      	ldrb	r3, [r3, #0]
 801f5ba:	2b01      	cmp	r3, #1
 801f5bc:	f000 809d 	beq.w	801f6fa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x33e>
 801f5c0:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 801f5c4:	883a      	ldrh	r2, [r7, #0]
 801f5c6:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 801f5ca:	3201      	adds	r2, #1
 801f5cc:	b292      	uxth	r2, r2
 801f5ce:	2900      	cmp	r1, #0
 801f5d0:	d0d3      	beq.n	801f57a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801f5d2:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 801f5d6:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 801f5da:	441d      	add	r5, r3
 801f5dc:	b22d      	sxth	r5, r5
 801f5de:	4610      	mov	r0, r2
 801f5e0:	f04f 0a00 	mov.w	sl, #0
 801f5e4:	b283      	uxth	r3, r0
 801f5e6:	4299      	cmp	r1, r3
 801f5e8:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 801f5ec:	f240 80c3 	bls.w	801f776 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ba>
 801f5f0:	4426      	add	r6, r4
 801f5f2:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 801f5f6:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 801f5fa:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 801f5fe:	4573      	cmp	r3, lr
 801f600:	4684      	mov	ip, r0
 801f602:	f340 80a5 	ble.w	801f750 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x394>
 801f606:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 801f60a:	4475      	add	r5, lr
 801f60c:	b22d      	sxth	r5, r5
 801f60e:	429d      	cmp	r5, r3
 801f610:	bfa8      	it	ge
 801f612:	461d      	movge	r5, r3
 801f614:	3001      	adds	r0, #1
 801f616:	46e2      	mov	sl, ip
 801f618:	e7e4      	b.n	801f5e4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x228>
 801f61a:	d10b      	bne.n	801f634 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x278>
 801f61c:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 801f620:	f9b9 10ae 	ldrsh.w	r1, [r9, #174]	; 0xae
 801f624:	458c      	cmp	ip, r1
 801f626:	bfb4      	ite	lt
 801f628:	469c      	movlt	ip, r3
 801f62a:	46b4      	movge	ip, r6
 801f62c:	4572      	cmp	r2, lr
 801f62e:	bfb8      	it	lt
 801f630:	4672      	movlt	r2, lr
 801f632:	e08a      	b.n	801f74a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x38e>
 801f634:	428a      	cmp	r2, r1
 801f636:	bfb8      	it	lt
 801f638:	460a      	movlt	r2, r1
 801f63a:	46b4      	mov	ip, r6
 801f63c:	e085      	b.n	801f74a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x38e>
 801f63e:	bf00      	nop
 801f640:	200128fc 	.word	0x200128fc
 801f644:	20012908 	.word	0x20012908
 801f648:	2000009c 	.word	0x2000009c
 801f64c:	200128a4 	.word	0x200128a4
 801f650:	2001289a 	.word	0x2001289a
 801f654:	20012898 	.word	0x20012898
 801f658:	200128a2 	.word	0x200128a2
 801f65c:	2001289c 	.word	0x2001289c
 801f660:	1961      	adds	r1, r4, r5
 801f662:	ab05      	add	r3, sp, #20
 801f664:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 801f668:	6849      	ldr	r1, [r1, #4]
 801f66a:	c303      	stmia	r3!, {r0, r1}
 801f66c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801f670:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801f674:	2b13      	cmp	r3, #19
 801f676:	bfd8      	it	le
 801f678:	f9bd 2014 	ldrshle.w	r2, [sp, #20]
 801f67c:	f8ad 2014 	strh.w	r2, [sp, #20]
 801f680:	440b      	add	r3, r1
 801f682:	1a9b      	subs	r3, r3, r2
 801f684:	a805      	add	r0, sp, #20
 801f686:	f8ad 3018 	strh.w	r3, [sp, #24]
 801f68a:	f7ff fba1 	bl	801edd0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f68e:	a805      	add	r0, sp, #20
 801f690:	f7fb fc2b 	bl	801aeea <_ZNK8touchgfx4Rect7isEmptyEv>
 801f694:	bb88      	cbnz	r0, 801f6fa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x33e>
 801f696:	f9bd c01a 	ldrsh.w	ip, [sp, #26]
 801f69a:	f8d8 0000 	ldr.w	r0, [r8]
 801f69e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801f6a2:	f8d0 e000 	ldr.w	lr, [r0]
 801f6a6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801f6aa:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801f6ae:	f1bc 0f14 	cmp.w	ip, #20
 801f6b2:	bfa8      	it	ge
 801f6b4:	f04f 0c14 	movge.w	ip, #20
 801f6b8:	fa1f fc8c 	uxth.w	ip, ip
 801f6bc:	f8cd c000 	str.w	ip, [sp]
 801f6c0:	f8de 9078 	ldr.w	r9, [lr, #120]	; 0x78
 801f6c4:	47c8      	blx	r9
 801f6c6:	4681      	mov	r9, r0
 801f6c8:	f8ad 001a 	strh.w	r0, [sp, #26]
 801f6cc:	a805      	add	r0, sp, #20
 801f6ce:	f7ff fb25 	bl	801ed1c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801f6d2:	6823      	ldr	r3, [r4, #0]
 801f6d4:	4425      	add	r5, r4
 801f6d6:	4620      	mov	r0, r4
 801f6d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f6da:	a905      	add	r1, sp, #20
 801f6dc:	4798      	blx	r3
 801f6de:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801f6e2:	eba0 0009 	sub.w	r0, r0, r9
 801f6e6:	b200      	sxth	r0, r0
 801f6e8:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 801f6ec:	b928      	cbnz	r0, 801f6fa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x33e>
 801f6ee:	b2b2      	uxth	r2, r6
 801f6f0:	f104 01a8 	add.w	r1, r4, #168	; 0xa8
 801f6f4:	a807      	add	r0, sp, #28
 801f6f6:	f7ff fd5b 	bl	801f1b0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801f6fa:	f8b4 a0e8 	ldrh.w	sl, [r4, #232]	; 0xe8
 801f6fe:	f1ba 0f00 	cmp.w	sl, #0
 801f702:	f43f af3a 	beq.w	801f57a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801f706:	883b      	ldrh	r3, [r7, #0]
 801f708:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801f70c:	3301      	adds	r3, #1
 801f70e:	b29b      	uxth	r3, r3
 801f710:	2600      	movs	r6, #0
 801f712:	b299      	uxth	r1, r3
 801f714:	458a      	cmp	sl, r1
 801f716:	ea4f 05c6 	mov.w	r5, r6, lsl #3
 801f71a:	d9a1      	bls.n	801f660 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a4>
 801f71c:	4425      	add	r5, r4
 801f71e:	eb04 09c3 	add.w	r9, r4, r3, lsl #3
 801f722:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 801f726:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 801f72a:	f9b9 e0a8 	ldrsh.w	lr, [r9, #168]	; 0xa8
 801f72e:	4408      	add	r0, r1
 801f730:	f8b9 10ac 	ldrh.w	r1, [r9, #172]	; 0xac
 801f734:	4471      	add	r1, lr
 801f736:	b200      	sxth	r0, r0
 801f738:	b209      	sxth	r1, r1
 801f73a:	4288      	cmp	r0, r1
 801f73c:	469c      	mov	ip, r3
 801f73e:	f6bf af6c 	bge.w	801f61a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25e>
 801f742:	4586      	cmp	lr, r0
 801f744:	4672      	mov	r2, lr
 801f746:	bfb8      	it	lt
 801f748:	4602      	movlt	r2, r0
 801f74a:	3301      	adds	r3, #1
 801f74c:	4666      	mov	r6, ip
 801f74e:	e7e0      	b.n	801f712 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x356>
 801f750:	d10c      	bne.n	801f76c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b0>
 801f752:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 801f756:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 801f75a:	45b4      	cmp	ip, r6
 801f75c:	bfb4      	ite	lt
 801f75e:	4684      	movlt	ip, r0
 801f760:	46d4      	movge	ip, sl
 801f762:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 801f766:	4433      	add	r3, r6
 801f768:	b21b      	sxth	r3, r3
 801f76a:	e750      	b.n	801f60e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x252>
 801f76c:	4575      	cmp	r5, lr
 801f76e:	bfa8      	it	ge
 801f770:	4675      	movge	r5, lr
 801f772:	46d4      	mov	ip, sl
 801f774:	e74e      	b.n	801f614 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x258>
 801f776:	eb0b 0006 	add.w	r0, fp, r6
 801f77a:	4426      	add	r6, r4
 801f77c:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801f780:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 801f784:	f1b9 0f13 	cmp.w	r9, #19
 801f788:	bfde      	ittt	le
 801f78a:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 801f78e:	444d      	addle	r5, r9
 801f790:	b22d      	sxthle	r5, r5
 801f792:	f7fb fbaa 	bl	801aeea <_ZNK8touchgfx4Rect7isEmptyEv>
 801f796:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801f79a:	2800      	cmp	r0, #0
 801f79c:	f47f af17 	bne.w	801f5ce <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x212>
 801f7a0:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 801f7a4:	f8ad 001a 	strh.w	r0, [sp, #26]
 801f7a8:	eba5 050c 	sub.w	r5, r5, ip
 801f7ac:	fa1f f28c 	uxth.w	r2, ip
 801f7b0:	fa1f f989 	uxth.w	r9, r9
 801f7b4:	eb02 0009 	add.w	r0, r2, r9
 801f7b8:	2d14      	cmp	r5, #20
 801f7ba:	bfa8      	it	ge
 801f7bc:	2514      	movge	r5, #20
 801f7be:	b200      	sxth	r0, r0
 801f7c0:	fa1f fe85 	uxth.w	lr, r5
 801f7c4:	eba0 000c 	sub.w	r0, r0, ip
 801f7c8:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 801f7cc:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 801f7d0:	f8ad 1014 	strh.w	r1, [sp, #20]
 801f7d4:	4586      	cmp	lr, r0
 801f7d6:	f8d8 0000 	ldr.w	r0, [r8]
 801f7da:	f8ad c016 	strh.w	ip, [sp, #22]
 801f7de:	f8ad 3018 	strh.w	r3, [sp, #24]
 801f7e2:	bfb8      	it	lt
 801f7e4:	46f1      	movlt	r9, lr
 801f7e6:	6805      	ldr	r5, [r0, #0]
 801f7e8:	f8cd 9000 	str.w	r9, [sp]
 801f7ec:	b29b      	uxth	r3, r3
 801f7ee:	b289      	uxth	r1, r1
 801f7f0:	6fad      	ldr	r5, [r5, #120]	; 0x78
 801f7f2:	47a8      	blx	r5
 801f7f4:	6823      	ldr	r3, [r4, #0]
 801f7f6:	f8ad 001a 	strh.w	r0, [sp, #26]
 801f7fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f7fc:	a905      	add	r1, sp, #20
 801f7fe:	4620      	mov	r0, r4
 801f800:	4798      	blx	r3
 801f802:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801f806:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 801f80a:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 801f80e:	1a5b      	subs	r3, r3, r1
 801f810:	440a      	add	r2, r1
 801f812:	b21b      	sxth	r3, r3
 801f814:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 801f818:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 801f81c:	2b00      	cmp	r3, #0
 801f81e:	f47f aed1 	bne.w	801f5c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x208>
 801f822:	fa1f f28a 	uxth.w	r2, sl
 801f826:	4659      	mov	r1, fp
 801f828:	a807      	add	r0, sp, #28
 801f82a:	f7ff fcc1 	bl	801f1b0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801f82e:	e6c9      	b.n	801f5c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x208>
 801f830:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801f834:	42ab      	cmp	r3, r5
 801f836:	f67f aea0 	bls.w	801f57a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801f83a:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801f83e:	ab07      	add	r3, sp, #28
 801f840:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801f844:	6851      	ldr	r1, [r2, #4]
 801f846:	c303      	stmia	r3!, {r0, r1}
 801f848:	a807      	add	r0, sp, #28
 801f84a:	f7fb fb4e 	bl	801aeea <_ZNK8touchgfx4Rect7isEmptyEv>
 801f84e:	b920      	cbnz	r0, 801f85a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49e>
 801f850:	6823      	ldr	r3, [r4, #0]
 801f852:	a907      	add	r1, sp, #28
 801f854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f856:	4620      	mov	r0, r4
 801f858:	4798      	blx	r3
 801f85a:	3501      	adds	r5, #1
 801f85c:	b2ad      	uxth	r5, r5
 801f85e:	e7e7      	b.n	801f830 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>

0801f860 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801f860:	4b03      	ldr	r3, [pc, #12]	; (801f870 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801f862:	2200      	movs	r2, #0
 801f864:	801a      	strh	r2, [r3, #0]
 801f866:	805a      	strh	r2, [r3, #2]
 801f868:	809a      	strh	r2, [r3, #4]
 801f86a:	80da      	strh	r2, [r3, #6]
 801f86c:	4770      	bx	lr
 801f86e:	bf00      	nop
 801f870:	20012908 	.word	0x20012908

0801f874 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801f874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f878:	4607      	mov	r7, r0
 801f87a:	b099      	sub	sp, #100	; 0x64
 801f87c:	a802      	add	r0, sp, #8
 801f87e:	4614      	mov	r4, r2
 801f880:	461d      	mov	r5, r3
 801f882:	468a      	mov	sl, r1
 801f884:	f000 fddb 	bl	802043e <_ZN8touchgfx12TextProviderC1Ev>
 801f888:	683b      	ldr	r3, [r7, #0]
 801f88a:	4638      	mov	r0, r7
 801f88c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f88e:	4798      	blx	r3
 801f890:	462a      	mov	r2, r5
 801f892:	4603      	mov	r3, r0
 801f894:	4621      	mov	r1, r4
 801f896:	a802      	add	r0, sp, #8
 801f898:	f000 fe16 	bl	80204c8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801f89c:	2500      	movs	r5, #0
 801f89e:	462c      	mov	r4, r5
 801f8a0:	46a9      	mov	r9, r5
 801f8a2:	46a8      	mov	r8, r5
 801f8a4:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801f8a8:	2300      	movs	r3, #0
 801f8aa:	9301      	str	r3, [sp, #4]
 801f8ac:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801f8b0:	429c      	cmp	r4, r3
 801f8b2:	d002      	beq.n	801f8ba <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x46>
 801f8b4:	455c      	cmp	r4, fp
 801f8b6:	bf18      	it	ne
 801f8b8:	4625      	movne	r5, r4
 801f8ba:	ab01      	add	r3, sp, #4
 801f8bc:	463a      	mov	r2, r7
 801f8be:	4651      	mov	r1, sl
 801f8c0:	a802      	add	r0, sp, #8
 801f8c2:	f001 f8fb 	bl	8020abc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801f8c6:	4604      	mov	r4, r0
 801f8c8:	b108      	cbz	r0, 801f8ce <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5a>
 801f8ca:	280a      	cmp	r0, #10
 801f8cc:	d10a      	bne.n	801f8e4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>
 801f8ce:	45c1      	cmp	r9, r8
 801f8d0:	bf38      	it	cc
 801f8d2:	46c1      	movcc	r9, r8
 801f8d4:	f04f 0800 	mov.w	r8, #0
 801f8d8:	2c00      	cmp	r4, #0
 801f8da:	d1e5      	bne.n	801f8a8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 801f8dc:	4648      	mov	r0, r9
 801f8de:	b019      	add	sp, #100	; 0x64
 801f8e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f8e4:	9a01      	ldr	r2, [sp, #4]
 801f8e6:	2a00      	cmp	r2, #0
 801f8e8:	d0de      	beq.n	801f8a8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 801f8ea:	7b56      	ldrb	r6, [r2, #13]
 801f8ec:	683b      	ldr	r3, [r7, #0]
 801f8ee:	8894      	ldrh	r4, [r2, #4]
 801f8f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801f8f2:	0076      	lsls	r6, r6, #1
 801f8f4:	f406 7080 	and.w	r0, r6, #256	; 0x100
 801f8f8:	7a96      	ldrb	r6, [r2, #10]
 801f8fa:	4629      	mov	r1, r5
 801f8fc:	4306      	orrs	r6, r0
 801f8fe:	4638      	mov	r0, r7
 801f900:	4798      	blx	r3
 801f902:	4430      	add	r0, r6
 801f904:	4480      	add	r8, r0
 801f906:	fa1f f888 	uxth.w	r8, r8
 801f90a:	e7e5      	b.n	801f8d8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x64>

0801f90c <_ZNK8touchgfx4Font12getCharWidthEt>:
 801f90c:	b508      	push	{r3, lr}
 801f90e:	6803      	ldr	r3, [r0, #0]
 801f910:	68db      	ldr	r3, [r3, #12]
 801f912:	4798      	blx	r3
 801f914:	b128      	cbz	r0, 801f922 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801f916:	7b43      	ldrb	r3, [r0, #13]
 801f918:	7a80      	ldrb	r0, [r0, #10]
 801f91a:	005b      	lsls	r3, r3, #1
 801f91c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f920:	4318      	orrs	r0, r3
 801f922:	bd08      	pop	{r3, pc}

0801f924 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801f924:	b40e      	push	{r1, r2, r3}
 801f926:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f928:	b098      	sub	sp, #96	; 0x60
 801f92a:	ab1d      	add	r3, sp, #116	; 0x74
 801f92c:	4605      	mov	r5, r0
 801f92e:	f853 4b04 	ldr.w	r4, [r3], #4
 801f932:	9300      	str	r3, [sp, #0]
 801f934:	a802      	add	r0, sp, #8
 801f936:	f000 fd82 	bl	802043e <_ZN8touchgfx12TextProviderC1Ev>
 801f93a:	682b      	ldr	r3, [r5, #0]
 801f93c:	4628      	mov	r0, r5
 801f93e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f940:	4798      	blx	r3
 801f942:	ae18      	add	r6, sp, #96	; 0x60
 801f944:	4603      	mov	r3, r0
 801f946:	4621      	mov	r1, r4
 801f948:	9a00      	ldr	r2, [sp, #0]
 801f94a:	2400      	movs	r4, #0
 801f94c:	a802      	add	r0, sp, #8
 801f94e:	f000 fdbb 	bl	80204c8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801f952:	f846 4d5c 	str.w	r4, [r6, #-92]!
 801f956:	462a      	mov	r2, r5
 801f958:	4633      	mov	r3, r6
 801f95a:	4621      	mov	r1, r4
 801f95c:	a802      	add	r0, sp, #8
 801f95e:	f001 f8ad 	bl	8020abc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801f962:	b1f0      	cbz	r0, 801f9a2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7e>
 801f964:	280a      	cmp	r0, #10
 801f966:	d018      	beq.n	801f99a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x76>
 801f968:	9f01      	ldr	r7, [sp, #4]
 801f96a:	b1b7      	cbz	r7, 801f99a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x76>
 801f96c:	7b78      	ldrb	r0, [r7, #13]
 801f96e:	7a3b      	ldrb	r3, [r7, #8]
 801f970:	88aa      	ldrh	r2, [r5, #4]
 801f972:	00c1      	lsls	r1, r0, #3
 801f974:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801f978:	4319      	orrs	r1, r3
 801f97a:	0643      	lsls	r3, r0, #25
 801f97c:	bf44      	itt	mi
 801f97e:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801f982:	b219      	sxthmi	r1, r3
 801f984:	0100      	lsls	r0, r0, #4
 801f986:	79fb      	ldrb	r3, [r7, #7]
 801f988:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801f98c:	4303      	orrs	r3, r0
 801f98e:	4413      	add	r3, r2
 801f990:	1a5b      	subs	r3, r3, r1
 801f992:	b29b      	uxth	r3, r3
 801f994:	42a3      	cmp	r3, r4
 801f996:	bfc8      	it	gt
 801f998:	b21c      	sxthgt	r4, r3
 801f99a:	4633      	mov	r3, r6
 801f99c:	462a      	mov	r2, r5
 801f99e:	2100      	movs	r1, #0
 801f9a0:	e7dc      	b.n	801f95c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x38>
 801f9a2:	b2a0      	uxth	r0, r4
 801f9a4:	b018      	add	sp, #96	; 0x60
 801f9a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801f9aa:	b003      	add	sp, #12
 801f9ac:	4770      	bx	lr

0801f9ae <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801f9ae:	b40e      	push	{r1, r2, r3}
 801f9b0:	b530      	push	{r4, r5, lr}
 801f9b2:	b098      	sub	sp, #96	; 0x60
 801f9b4:	ab1b      	add	r3, sp, #108	; 0x6c
 801f9b6:	4604      	mov	r4, r0
 801f9b8:	f853 5b04 	ldr.w	r5, [r3], #4
 801f9bc:	9301      	str	r3, [sp, #4]
 801f9be:	a802      	add	r0, sp, #8
 801f9c0:	f000 fd3d 	bl	802043e <_ZN8touchgfx12TextProviderC1Ev>
 801f9c4:	6823      	ldr	r3, [r4, #0]
 801f9c6:	4620      	mov	r0, r4
 801f9c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f9ca:	4798      	blx	r3
 801f9cc:	9a01      	ldr	r2, [sp, #4]
 801f9ce:	4603      	mov	r3, r0
 801f9d0:	4629      	mov	r1, r5
 801f9d2:	a802      	add	r0, sp, #8
 801f9d4:	f000 fd78 	bl	80204c8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801f9d8:	a802      	add	r0, sp, #8
 801f9da:	f001 f967 	bl	8020cac <_ZN8touchgfx12TextProvider11getNextCharEv>
 801f9de:	2401      	movs	r4, #1
 801f9e0:	b2a3      	uxth	r3, r4
 801f9e2:	b140      	cbz	r0, 801f9f6 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x48>
 801f9e4:	280a      	cmp	r0, #10
 801f9e6:	bf08      	it	eq
 801f9e8:	3301      	addeq	r3, #1
 801f9ea:	a802      	add	r0, sp, #8
 801f9ec:	bf08      	it	eq
 801f9ee:	b21c      	sxtheq	r4, r3
 801f9f0:	f001 f95c 	bl	8020cac <_ZN8touchgfx12TextProvider11getNextCharEv>
 801f9f4:	e7f4      	b.n	801f9e0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 801f9f6:	4618      	mov	r0, r3
 801f9f8:	b018      	add	sp, #96	; 0x60
 801f9fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f9fe:	b003      	add	sp, #12
 801fa00:	4770      	bx	lr

0801fa02 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801fa02:	b40e      	push	{r1, r2, r3}
 801fa04:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fa06:	b098      	sub	sp, #96	; 0x60
 801fa08:	ab1d      	add	r3, sp, #116	; 0x74
 801fa0a:	4604      	mov	r4, r0
 801fa0c:	f853 5b04 	ldr.w	r5, [r3], #4
 801fa10:	9300      	str	r3, [sp, #0]
 801fa12:	a802      	add	r0, sp, #8
 801fa14:	f000 fd13 	bl	802043e <_ZN8touchgfx12TextProviderC1Ev>
 801fa18:	6823      	ldr	r3, [r4, #0]
 801fa1a:	4620      	mov	r0, r4
 801fa1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801fa1e:	4798      	blx	r3
 801fa20:	4629      	mov	r1, r5
 801fa22:	4603      	mov	r3, r0
 801fa24:	9a00      	ldr	r2, [sp, #0]
 801fa26:	a802      	add	r0, sp, #8
 801fa28:	ad18      	add	r5, sp, #96	; 0x60
 801fa2a:	f000 fd4d 	bl	80204c8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801fa2e:	2100      	movs	r1, #0
 801fa30:	f845 1d5c 	str.w	r1, [r5, #-92]!
 801fa34:	4622      	mov	r2, r4
 801fa36:	462b      	mov	r3, r5
 801fa38:	a802      	add	r0, sp, #8
 801fa3a:	f001 f83f 	bl	8020abc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801fa3e:	26ff      	movs	r6, #255	; 0xff
 801fa40:	b1d8      	cbz	r0, 801fa7a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801fa42:	280a      	cmp	r0, #10
 801fa44:	d012      	beq.n	801fa6c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 801fa46:	9801      	ldr	r0, [sp, #4]
 801fa48:	b180      	cbz	r0, 801fa6c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 801fa4a:	7b47      	ldrb	r7, [r0, #13]
 801fa4c:	7922      	ldrb	r2, [r4, #4]
 801fa4e:	00fb      	lsls	r3, r7, #3
 801fa50:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801fa54:	7a03      	ldrb	r3, [r0, #8]
 801fa56:	430b      	orrs	r3, r1
 801fa58:	0679      	lsls	r1, r7, #25
 801fa5a:	bf44      	itt	mi
 801fa5c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801fa60:	b21b      	sxthmi	r3, r3
 801fa62:	1ad3      	subs	r3, r2, r3
 801fa64:	b2db      	uxtb	r3, r3
 801fa66:	429e      	cmp	r6, r3
 801fa68:	bf28      	it	cs
 801fa6a:	461e      	movcs	r6, r3
 801fa6c:	462b      	mov	r3, r5
 801fa6e:	4622      	mov	r2, r4
 801fa70:	2100      	movs	r1, #0
 801fa72:	a802      	add	r0, sp, #8
 801fa74:	f001 f822 	bl	8020abc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801fa78:	e7e2      	b.n	801fa40 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 801fa7a:	4630      	mov	r0, r6
 801fa7c:	b018      	add	sp, #96	; 0x60
 801fa7e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801fa82:	b003      	add	sp, #12
 801fa84:	4770      	bx	lr

0801fa86 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801fa86:	b513      	push	{r0, r1, r4, lr}
 801fa88:	1d01      	adds	r1, r0, #4
 801fa8a:	4603      	mov	r3, r0
 801fa8c:	c903      	ldmia	r1, {r0, r1}
 801fa8e:	466a      	mov	r2, sp
 801fa90:	e882 0003 	stmia.w	r2, {r0, r1}
 801fa94:	2100      	movs	r1, #0
 801fa96:	9100      	str	r1, [sp, #0]
 801fa98:	6819      	ldr	r1, [r3, #0]
 801fa9a:	4618      	mov	r0, r3
 801fa9c:	690c      	ldr	r4, [r1, #16]
 801fa9e:	4611      	mov	r1, r2
 801faa0:	47a0      	blx	r4
 801faa2:	b002      	add	sp, #8
 801faa4:	bd10      	pop	{r4, pc}

0801faa6 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801faa6:	b538      	push	{r3, r4, r5, lr}
 801faa8:	680b      	ldr	r3, [r1, #0]
 801faaa:	460c      	mov	r4, r1
 801faac:	68db      	ldr	r3, [r3, #12]
 801faae:	4605      	mov	r5, r0
 801fab0:	4798      	blx	r3
 801fab2:	6823      	ldr	r3, [r4, #0]
 801fab4:	4620      	mov	r0, r4
 801fab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fab8:	4629      	mov	r1, r5
 801faba:	4798      	blx	r3
 801fabc:	4628      	mov	r0, r5
 801fabe:	bd38      	pop	{r3, r4, r5, pc}

0801fac0 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801fac0:	b410      	push	{r4}
 801fac2:	880a      	ldrh	r2, [r1, #0]
 801fac4:	8884      	ldrh	r4, [r0, #4]
 801fac6:	4422      	add	r2, r4
 801fac8:	800a      	strh	r2, [r1, #0]
 801faca:	88c4      	ldrh	r4, [r0, #6]
 801facc:	884a      	ldrh	r2, [r1, #2]
 801face:	4422      	add	r2, r4
 801fad0:	804a      	strh	r2, [r1, #2]
 801fad2:	6940      	ldr	r0, [r0, #20]
 801fad4:	b120      	cbz	r0, 801fae0 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801fad6:	6803      	ldr	r3, [r0, #0]
 801fad8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fadc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fade:	4718      	bx	r3
 801fae0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fae4:	4770      	bx	lr

0801fae6 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801fae6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fae8:	460b      	mov	r3, r1
 801faea:	b085      	sub	sp, #20
 801faec:	4604      	mov	r4, r0
 801faee:	b901      	cbnz	r1, 801faf2 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801faf0:	b1fa      	cbz	r2, 801fb32 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 801faf2:	1d27      	adds	r7, r4, #4
 801faf4:	e897 0003 	ldmia.w	r7, {r0, r1}
 801faf8:	466e      	mov	r6, sp
 801fafa:	e886 0003 	stmia.w	r6, {r0, r1}
 801fafe:	88e1      	ldrh	r1, [r4, #6]
 801fb00:	440a      	add	r2, r1
 801fb02:	88a1      	ldrh	r1, [r4, #4]
 801fb04:	4419      	add	r1, r3
 801fb06:	6823      	ldr	r3, [r4, #0]
 801fb08:	b209      	sxth	r1, r1
 801fb0a:	4620      	mov	r0, r4
 801fb0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801fb0e:	b212      	sxth	r2, r2
 801fb10:	4798      	blx	r3
 801fb12:	e897 0003 	ldmia.w	r7, {r0, r1}
 801fb16:	ad02      	add	r5, sp, #8
 801fb18:	e885 0003 	stmia.w	r5, {r0, r1}
 801fb1c:	6960      	ldr	r0, [r4, #20]
 801fb1e:	b150      	cbz	r0, 801fb36 <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 801fb20:	6803      	ldr	r3, [r0, #0]
 801fb22:	4631      	mov	r1, r6
 801fb24:	691b      	ldr	r3, [r3, #16]
 801fb26:	4798      	blx	r3
 801fb28:	6960      	ldr	r0, [r4, #20]
 801fb2a:	6803      	ldr	r3, [r0, #0]
 801fb2c:	691b      	ldr	r3, [r3, #16]
 801fb2e:	4629      	mov	r1, r5
 801fb30:	4798      	blx	r3
 801fb32:	b005      	add	sp, #20
 801fb34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fb36:	f7ff fa8f 	bl	801f058 <_ZN8touchgfx11Application11getInstanceEv>
 801fb3a:	6803      	ldr	r3, [r0, #0]
 801fb3c:	4631      	mov	r1, r6
 801fb3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801fb40:	4798      	blx	r3
 801fb42:	f7ff fa89 	bl	801f058 <_ZN8touchgfx11Application11getInstanceEv>
 801fb46:	6803      	ldr	r3, [r0, #0]
 801fb48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801fb4a:	e7f0      	b.n	801fb2e <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

0801fb4c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801fb4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801fb4e:	8882      	ldrh	r2, [r0, #4]
 801fb50:	880b      	ldrh	r3, [r1, #0]
 801fb52:	4413      	add	r3, r2
 801fb54:	800b      	strh	r3, [r1, #0]
 801fb56:	88c2      	ldrh	r2, [r0, #6]
 801fb58:	884b      	ldrh	r3, [r1, #2]
 801fb5a:	4413      	add	r3, r2
 801fb5c:	4602      	mov	r2, r0
 801fb5e:	804b      	strh	r3, [r1, #2]
 801fb60:	4605      	mov	r5, r0
 801fb62:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801fb66:	460c      	mov	r4, r1
 801fb68:	6851      	ldr	r1, [r2, #4]
 801fb6a:	466b      	mov	r3, sp
 801fb6c:	c303      	stmia	r3!, {r0, r1}
 801fb6e:	4621      	mov	r1, r4
 801fb70:	4668      	mov	r0, sp
 801fb72:	f7fb f977 	bl	801ae64 <_ZN8touchgfx4RectaNERKS0_>
 801fb76:	466b      	mov	r3, sp
 801fb78:	cb03      	ldmia	r3!, {r0, r1}
 801fb7a:	6020      	str	r0, [r4, #0]
 801fb7c:	6061      	str	r1, [r4, #4]
 801fb7e:	6968      	ldr	r0, [r5, #20]
 801fb80:	b128      	cbz	r0, 801fb8e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 801fb82:	6803      	ldr	r3, [r0, #0]
 801fb84:	691b      	ldr	r3, [r3, #16]
 801fb86:	4621      	mov	r1, r4
 801fb88:	4798      	blx	r3
 801fb8a:	b003      	add	sp, #12
 801fb8c:	bd30      	pop	{r4, r5, pc}
 801fb8e:	f7ff fa63 	bl	801f058 <_ZN8touchgfx11Application11getInstanceEv>
 801fb92:	6803      	ldr	r3, [r0, #0]
 801fb94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801fb96:	e7f6      	b.n	801fb86 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801fb98 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801fb98:	b570      	push	{r4, r5, r6, lr}
 801fb9a:	8882      	ldrh	r2, [r0, #4]
 801fb9c:	880b      	ldrh	r3, [r1, #0]
 801fb9e:	4413      	add	r3, r2
 801fba0:	800b      	strh	r3, [r1, #0]
 801fba2:	88c2      	ldrh	r2, [r0, #6]
 801fba4:	884b      	ldrh	r3, [r1, #2]
 801fba6:	460c      	mov	r4, r1
 801fba8:	4413      	add	r3, r2
 801fbaa:	804b      	strh	r3, [r1, #2]
 801fbac:	4605      	mov	r5, r0
 801fbae:	1d01      	adds	r1, r0, #4
 801fbb0:	4620      	mov	r0, r4
 801fbb2:	f7fb f957 	bl	801ae64 <_ZN8touchgfx4RectaNERKS0_>
 801fbb6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801fbba:	2b00      	cmp	r3, #0
 801fbbc:	dd0b      	ble.n	801fbd6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801fbbe:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801fbc2:	2b00      	cmp	r3, #0
 801fbc4:	dd07      	ble.n	801fbd6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801fbc6:	6968      	ldr	r0, [r5, #20]
 801fbc8:	b128      	cbz	r0, 801fbd6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801fbca:	6803      	ldr	r3, [r0, #0]
 801fbcc:	4621      	mov	r1, r4
 801fbce:	6a1b      	ldr	r3, [r3, #32]
 801fbd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801fbd4:	4718      	bx	r3
 801fbd6:	bd70      	pop	{r4, r5, r6, pc}

0801fbd8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801fbd8:	b510      	push	{r4, lr}
 801fbda:	4604      	mov	r4, r0
 801fbdc:	4608      	mov	r0, r1
 801fbde:	2300      	movs	r3, #0
 801fbe0:	8023      	strh	r3, [r4, #0]
 801fbe2:	8063      	strh	r3, [r4, #2]
 801fbe4:	6803      	ldr	r3, [r0, #0]
 801fbe6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801fbea:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801fbee:	80a1      	strh	r1, [r4, #4]
 801fbf0:	80e2      	strh	r2, [r4, #6]
 801fbf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fbf4:	4621      	mov	r1, r4
 801fbf6:	4798      	blx	r3
 801fbf8:	4620      	mov	r0, r4
 801fbfa:	bd10      	pop	{r4, pc}

0801fbfc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801fbfc:	b530      	push	{r4, r5, lr}
 801fbfe:	8083      	strh	r3, [r0, #4]
 801fc00:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801fc04:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801fc08:	7183      	strb	r3, [r0, #6]
 801fc0a:	79c3      	ldrb	r3, [r0, #7]
 801fc0c:	6101      	str	r1, [r0, #16]
 801fc0e:	f365 0306 	bfi	r3, r5, #0, #7
 801fc12:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801fc16:	8282      	strh	r2, [r0, #20]
 801fc18:	f365 13c7 	bfi	r3, r5, #7, #1
 801fc1c:	71c3      	strb	r3, [r0, #7]
 801fc1e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801fc22:	7203      	strb	r3, [r0, #8]
 801fc24:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801fc28:	7243      	strb	r3, [r0, #9]
 801fc2a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801fc2e:	8143      	strh	r3, [r0, #10]
 801fc30:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801fc34:	8183      	strh	r3, [r0, #12]
 801fc36:	4b01      	ldr	r3, [pc, #4]	; (801fc3c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801fc38:	6003      	str	r3, [r0, #0]
 801fc3a:	bd30      	pop	{r4, r5, pc}
 801fc3c:	080337fc 	.word	0x080337fc

0801fc40 <_ZNK8touchgfx9ConstFont4findEt>:
 801fc40:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fc42:	6904      	ldr	r4, [r0, #16]
 801fc44:	8a82      	ldrh	r2, [r0, #20]
 801fc46:	88a3      	ldrh	r3, [r4, #4]
 801fc48:	1acb      	subs	r3, r1, r3
 801fc4a:	f102 32ff 	add.w	r2, r2, #4294967295
 801fc4e:	d431      	bmi.n	801fcb4 <_ZNK8touchgfx9ConstFont4findEt+0x74>
 801fc50:	4293      	cmp	r3, r2
 801fc52:	dd0c      	ble.n	801fc6e <_ZNK8touchgfx9ConstFont4findEt+0x2e>
 801fc54:	230e      	movs	r3, #14
 801fc56:	fb03 4302 	mla	r3, r3, r2, r4
 801fc5a:	889b      	ldrh	r3, [r3, #4]
 801fc5c:	1a5b      	subs	r3, r3, r1
 801fc5e:	1ad3      	subs	r3, r2, r3
 801fc60:	429a      	cmp	r2, r3
 801fc62:	db27      	blt.n	801fcb4 <_ZNK8touchgfx9ConstFont4findEt+0x74>
 801fc64:	2b00      	cmp	r3, #0
 801fc66:	bfbc      	itt	lt
 801fc68:	2302      	movlt	r3, #2
 801fc6a:	fb92 f3f3 	sdivlt	r3, r2, r3
 801fc6e:	2500      	movs	r5, #0
 801fc70:	260e      	movs	r6, #14
 801fc72:	4295      	cmp	r5, r2
 801fc74:	dc1e      	bgt.n	801fcb4 <_ZNK8touchgfx9ConstFont4findEt+0x74>
 801fc76:	fb06 4003 	mla	r0, r6, r3, r4
 801fc7a:	8887      	ldrh	r7, [r0, #4]
 801fc7c:	42b9      	cmp	r1, r7
 801fc7e:	d01a      	beq.n	801fcb6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801fc80:	d20d      	bcs.n	801fc9e <_ZNK8touchgfx9ConstFont4findEt+0x5e>
 801fc82:	1e5a      	subs	r2, r3, #1
 801fc84:	4295      	cmp	r5, r2
 801fc86:	dc15      	bgt.n	801fcb4 <_ZNK8touchgfx9ConstFont4findEt+0x74>
 801fc88:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801fc8c:	1a5b      	subs	r3, r3, r1
 801fc8e:	1ad3      	subs	r3, r2, r3
 801fc90:	429a      	cmp	r2, r3
 801fc92:	db0f      	blt.n	801fcb4 <_ZNK8touchgfx9ConstFont4findEt+0x74>
 801fc94:	429d      	cmp	r5, r3
 801fc96:	ddec      	ble.n	801fc72 <_ZNK8touchgfx9ConstFont4findEt+0x32>
 801fc98:	1953      	adds	r3, r2, r5
 801fc9a:	105b      	asrs	r3, r3, #1
 801fc9c:	e7e9      	b.n	801fc72 <_ZNK8touchgfx9ConstFont4findEt+0x32>
 801fc9e:	1c5d      	adds	r5, r3, #1
 801fca0:	42aa      	cmp	r2, r5
 801fca2:	db07      	blt.n	801fcb4 <_ZNK8touchgfx9ConstFont4findEt+0x74>
 801fca4:	8a43      	ldrh	r3, [r0, #18]
 801fca6:	1acb      	subs	r3, r1, r3
 801fca8:	442b      	add	r3, r5
 801fcaa:	429d      	cmp	r5, r3
 801fcac:	dc02      	bgt.n	801fcb4 <_ZNK8touchgfx9ConstFont4findEt+0x74>
 801fcae:	429a      	cmp	r2, r3
 801fcb0:	dadf      	bge.n	801fc72 <_ZNK8touchgfx9ConstFont4findEt+0x32>
 801fcb2:	e7f1      	b.n	801fc98 <_ZNK8touchgfx9ConstFont4findEt+0x58>
 801fcb4:	2000      	movs	r0, #0
 801fcb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801fcb8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801fcb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fcba:	4604      	mov	r4, r0
 801fcbc:	4617      	mov	r7, r2
 801fcbe:	461e      	mov	r6, r3
 801fcc0:	b911      	cbnz	r1, 801fcc8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801fcc2:	2500      	movs	r5, #0
 801fcc4:	4628      	mov	r0, r5
 801fcc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fcc8:	290a      	cmp	r1, #10
 801fcca:	d0fa      	beq.n	801fcc2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801fccc:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801fcd0:	4291      	cmp	r1, r2
 801fcd2:	d0f6      	beq.n	801fcc2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801fcd4:	f242 020b 	movw	r2, #8203	; 0x200b
 801fcd8:	4291      	cmp	r1, r2
 801fcda:	d0f2      	beq.n	801fcc2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801fcdc:	f7ff ffb0 	bl	801fc40 <_ZNK8touchgfx9ConstFont4findEt>
 801fce0:	4605      	mov	r5, r0
 801fce2:	b950      	cbnz	r0, 801fcfa <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801fce4:	6823      	ldr	r3, [r4, #0]
 801fce6:	4620      	mov	r0, r4
 801fce8:	691b      	ldr	r3, [r3, #16]
 801fcea:	4798      	blx	r3
 801fcec:	4601      	mov	r1, r0
 801fcee:	4620      	mov	r0, r4
 801fcf0:	f7ff ffa6 	bl	801fc40 <_ZNK8touchgfx9ConstFont4findEt>
 801fcf4:	4605      	mov	r5, r0
 801fcf6:	2800      	cmp	r0, #0
 801fcf8:	d0e3      	beq.n	801fcc2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801fcfa:	6823      	ldr	r3, [r4, #0]
 801fcfc:	4629      	mov	r1, r5
 801fcfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801fd00:	4620      	mov	r0, r4
 801fd02:	4798      	blx	r3
 801fd04:	6038      	str	r0, [r7, #0]
 801fd06:	6823      	ldr	r3, [r4, #0]
 801fd08:	4620      	mov	r0, r4
 801fd0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801fd0c:	4798      	blx	r3
 801fd0e:	7030      	strb	r0, [r6, #0]
 801fd10:	e7d8      	b.n	801fcc4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801fd12 <_ZN8touchgfx6memsetEPvhm>:
 801fd12:	4402      	add	r2, r0
 801fd14:	4290      	cmp	r0, r2
 801fd16:	d002      	beq.n	801fd1e <_ZN8touchgfx6memsetEPvhm+0xc>
 801fd18:	f800 1b01 	strb.w	r1, [r0], #1
 801fd1c:	e7fa      	b.n	801fd14 <_ZN8touchgfx6memsetEPvhm+0x2>
 801fd1e:	4770      	bx	lr

0801fd20 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801fd20:	2002      	movs	r0, #2
 801fd22:	4770      	bx	lr

0801fd24 <_ZN8touchgfx12GestureEventD1Ev>:
 801fd24:	4770      	bx	lr

0801fd26 <_ZN8touchgfx12GestureEventD0Ev>:
 801fd26:	b510      	push	{r4, lr}
 801fd28:	210c      	movs	r1, #12
 801fd2a:	4604      	mov	r4, r0
 801fd2c:	f00d f9ce 	bl	802d0cc <_ZdlPvj>
 801fd30:	4620      	mov	r0, r4
 801fd32:	bd10      	pop	{r4, pc}

0801fd34 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801fd34:	b530      	push	{r4, r5, lr}
 801fd36:	460d      	mov	r5, r1
 801fd38:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801fd3a:	b087      	sub	sp, #28
 801fd3c:	4604      	mov	r4, r0
 801fd3e:	b301      	cbz	r1, 801fd82 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801fd40:	a801      	add	r0, sp, #4
 801fd42:	f7ff ff49 	bl	801fbd8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801fd46:	892a      	ldrh	r2, [r5, #8]
 801fd48:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801fd4c:	7928      	ldrb	r0, [r5, #4]
 801fd4e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801fd52:	f88d 0010 	strb.w	r0, [sp, #16]
 801fd56:	1ad2      	subs	r2, r2, r3
 801fd58:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801fd5a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801fd5c:	f8ad 1012 	strh.w	r1, [sp, #18]
 801fd60:	441a      	add	r2, r3
 801fd62:	896b      	ldrh	r3, [r5, #10]
 801fd64:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801fd68:	f8ad 2014 	strh.w	r2, [sp, #20]
 801fd6c:	1b5b      	subs	r3, r3, r5
 801fd6e:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801fd70:	442b      	add	r3, r5
 801fd72:	4d05      	ldr	r5, [pc, #20]	; (801fd88 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801fd74:	9503      	str	r5, [sp, #12]
 801fd76:	f8ad 3016 	strh.w	r3, [sp, #22]
 801fd7a:	6803      	ldr	r3, [r0, #0]
 801fd7c:	a903      	add	r1, sp, #12
 801fd7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801fd80:	4798      	blx	r3
 801fd82:	b007      	add	sp, #28
 801fd84:	bd30      	pop	{r4, r5, pc}
 801fd86:	bf00      	nop
 801fd88:	08033850 	.word	0x08033850

0801fd8c <_ZNK8touchgfx4Rect9intersectEss>:
 801fd8c:	b510      	push	{r4, lr}
 801fd8e:	f9b0 3000 	ldrsh.w	r3, [r0]
 801fd92:	428b      	cmp	r3, r1
 801fd94:	dc10      	bgt.n	801fdb8 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801fd96:	8884      	ldrh	r4, [r0, #4]
 801fd98:	4423      	add	r3, r4
 801fd9a:	b21b      	sxth	r3, r3
 801fd9c:	4299      	cmp	r1, r3
 801fd9e:	da0b      	bge.n	801fdb8 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801fda0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801fda4:	4293      	cmp	r3, r2
 801fda6:	dc07      	bgt.n	801fdb8 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801fda8:	88c0      	ldrh	r0, [r0, #6]
 801fdaa:	4418      	add	r0, r3
 801fdac:	b200      	sxth	r0, r0
 801fdae:	4282      	cmp	r2, r0
 801fdb0:	bfac      	ite	ge
 801fdb2:	2000      	movge	r0, #0
 801fdb4:	2001      	movlt	r0, #1
 801fdb6:	bd10      	pop	{r4, pc}
 801fdb8:	2000      	movs	r0, #0
 801fdba:	e7fc      	b.n	801fdb6 <_ZNK8touchgfx4Rect9intersectEss+0x2a>

0801fdbc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801fdbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fdbe:	460c      	mov	r4, r1
 801fdc0:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801fdc2:	b089      	sub	sp, #36	; 0x24
 801fdc4:	4605      	mov	r5, r0
 801fdc6:	2900      	cmp	r1, #0
 801fdc8:	d054      	beq.n	801fe74 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801fdca:	4668      	mov	r0, sp
 801fdcc:	f7ff ff04 	bl	801fbd8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801fdd0:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801fdd2:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801fdd4:	8922      	ldrh	r2, [r4, #8]
 801fdd6:	88e1      	ldrh	r1, [r4, #6]
 801fdd8:	443a      	add	r2, r7
 801fdda:	4431      	add	r1, r6
 801fddc:	b212      	sxth	r2, r2
 801fdde:	b209      	sxth	r1, r1
 801fde0:	4668      	mov	r0, sp
 801fde2:	f7ff ffd3 	bl	801fd8c <_ZNK8touchgfx4Rect9intersectEss>
 801fde6:	b1d0      	cbz	r0, 801fe1e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801fde8:	89a2      	ldrh	r2, [r4, #12]
 801fdea:	8961      	ldrh	r1, [r4, #10]
 801fdec:	443a      	add	r2, r7
 801fdee:	4431      	add	r1, r6
 801fdf0:	b212      	sxth	r2, r2
 801fdf2:	b209      	sxth	r1, r1
 801fdf4:	4668      	mov	r0, sp
 801fdf6:	f7ff ffc9 	bl	801fd8c <_ZNK8touchgfx4Rect9intersectEss>
 801fdfa:	4603      	mov	r3, r0
 801fdfc:	b978      	cbnz	r0, 801fe1e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801fdfe:	4a1e      	ldr	r2, [pc, #120]	; (801fe78 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801fe00:	9204      	str	r2, [sp, #16]
 801fe02:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801fe04:	f8ad 3016 	strh.w	r3, [sp, #22]
 801fe08:	2202      	movs	r2, #2
 801fe0a:	f88d 2014 	strb.w	r2, [sp, #20]
 801fe0e:	f8ad 3018 	strh.w	r3, [sp, #24]
 801fe12:	f8ad 301a 	strh.w	r3, [sp, #26]
 801fe16:	6803      	ldr	r3, [r0, #0]
 801fe18:	a904      	add	r1, sp, #16
 801fe1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801fe1c:	4798      	blx	r3
 801fe1e:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801fe20:	a802      	add	r0, sp, #8
 801fe22:	f7ff fed9 	bl	801fbd8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801fe26:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801fe2a:	88e0      	ldrh	r0, [r4, #6]
 801fe2c:	8961      	ldrh	r1, [r4, #10]
 801fe2e:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801fe32:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 801fe36:	8923      	ldrh	r3, [r4, #8]
 801fe38:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801fe3a:	7927      	ldrb	r7, [r4, #4]
 801fe3c:	f88d 7014 	strb.w	r7, [sp, #20]
 801fe40:	1a80      	subs	r0, r0, r2
 801fe42:	1a89      	subs	r1, r1, r2
 801fe44:	89a2      	ldrh	r2, [r4, #12]
 801fe46:	4c0d      	ldr	r4, [pc, #52]	; (801fe7c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801fe48:	9404      	str	r4, [sp, #16]
 801fe4a:	4460      	add	r0, ip
 801fe4c:	eba3 030e 	sub.w	r3, r3, lr
 801fe50:	eba2 020e 	sub.w	r2, r2, lr
 801fe54:	f8ad 0016 	strh.w	r0, [sp, #22]
 801fe58:	4433      	add	r3, r6
 801fe5a:	4461      	add	r1, ip
 801fe5c:	4432      	add	r2, r6
 801fe5e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801fe60:	f8ad 101a 	strh.w	r1, [sp, #26]
 801fe64:	f8ad 3018 	strh.w	r3, [sp, #24]
 801fe68:	f8ad 201c 	strh.w	r2, [sp, #28]
 801fe6c:	6803      	ldr	r3, [r0, #0]
 801fe6e:	a904      	add	r1, sp, #16
 801fe70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801fe72:	4798      	blx	r3
 801fe74:	b009      	add	sp, #36	; 0x24
 801fe76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fe78:	080326ac 	.word	0x080326ac
 801fe7c:	080326c0 	.word	0x080326c0

0801fe80 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801fe80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe84:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 801fe88:	790b      	ldrb	r3, [r1, #4]
 801fe8a:	b0a1      	sub	sp, #132	; 0x84
 801fe8c:	4604      	mov	r4, r0
 801fe8e:	460d      	mov	r5, r1
 801fe90:	f1b9 0f00 	cmp.w	r9, #0
 801fe94:	d00f      	beq.n	801feb6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 801fe96:	2b00      	cmp	r3, #0
 801fe98:	f040 80a0 	bne.w	801ffdc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x15c>
 801fe9c:	b021      	add	sp, #132	; 0x84
 801fe9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fea2:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801fea6:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801feaa:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801feae:	1d20      	adds	r0, r4, #4
 801feb0:	f7fa ff26 	bl	801ad00 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801feb4:	e092      	b.n	801ffdc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x15c>
 801feb6:	2b00      	cmp	r3, #0
 801feb8:	d1f0      	bne.n	801fe9c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801feba:	4b5e      	ldr	r3, [pc, #376]	; (8020034 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b4>)
 801febc:	681b      	ldr	r3, [r3, #0]
 801febe:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 801fec2:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 801fec6:	f1ba 0f03 	cmp.w	sl, #3
 801feca:	ddea      	ble.n	801fea2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 801fecc:	f1ba 0f0c 	cmp.w	sl, #12
 801fed0:	f04f 0303 	mov.w	r3, #3
 801fed4:	bfdc      	itt	le
 801fed6:	f10a 32ff 	addle.w	r2, sl, #4294967295
 801feda:	fb92 f3f3 	sdivle	r3, r2, r3
 801fede:	9301      	str	r3, [sp, #4]
 801fee0:	4b55      	ldr	r3, [pc, #340]	; (8020038 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 801fee2:	4956      	ldr	r1, [pc, #344]	; (802003c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 801fee4:	f9b3 2000 	ldrsh.w	r2, [r3]
 801fee8:	4b55      	ldr	r3, [pc, #340]	; (8020040 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 801feea:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801feee:	f9b3 3000 	ldrsh.w	r3, [r3]
 801fef2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801fef6:	ab0e      	add	r3, sp, #56	; 0x38
 801fef8:	2248      	movs	r2, #72	; 0x48
 801fefa:	2600      	movs	r6, #0
 801fefc:	4618      	mov	r0, r3
 801fefe:	960a      	str	r6, [sp, #40]	; 0x28
 801ff00:	f00e fb17 	bl	802e532 <memcpy>
 801ff04:	f04f 32ff 	mov.w	r2, #4294967295
 801ff08:	e9cd 2006 	strd	r2, r0, [sp, #24]
 801ff0c:	f8cd a008 	str.w	sl, [sp, #8]
 801ff10:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801ff14:	fb93 f3f2 	sdiv	r3, r3, r2
 801ff18:	b29b      	uxth	r3, r3
 801ff1a:	46b3      	mov	fp, r6
 801ff1c:	9303      	str	r3, [sp, #12]
 801ff1e:	2300      	movs	r3, #0
 801ff20:	9309      	str	r3, [sp, #36]	; 0x24
 801ff22:	9b07      	ldr	r3, [sp, #28]
 801ff24:	9a03      	ldr	r2, [sp, #12]
 801ff26:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 801ff2a:	88ef      	ldrh	r7, [r5, #6]
 801ff2c:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801ff30:	fb13 f302 	smulbb	r3, r3, r2
 801ff34:	b29b      	uxth	r3, r3
 801ff36:	9304      	str	r3, [sp, #16]
 801ff38:	9b07      	ldr	r3, [sp, #28]
 801ff3a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801ff3e:	a80a      	add	r0, sp, #40	; 0x28
 801ff40:	685b      	ldr	r3, [r3, #4]
 801ff42:	fb13 f302 	smulbb	r3, r3, r2
 801ff46:	b29b      	uxth	r3, r3
 801ff48:	9305      	str	r3, [sp, #20]
 801ff4a:	9b04      	ldr	r3, [sp, #16]
 801ff4c:	441f      	add	r7, r3
 801ff4e:	9b05      	ldr	r3, [sp, #20]
 801ff50:	4498      	add	r8, r3
 801ff52:	b23f      	sxth	r7, r7
 801ff54:	fa0f f888 	sxth.w	r8, r8
 801ff58:	4642      	mov	r2, r8
 801ff5a:	4639      	mov	r1, r7
 801ff5c:	f7ff ff16 	bl	801fd8c <_ZNK8touchgfx4Rect9intersectEss>
 801ff60:	b380      	cbz	r0, 801ffc4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 801ff62:	4639      	mov	r1, r7
 801ff64:	ab09      	add	r3, sp, #36	; 0x24
 801ff66:	4642      	mov	r2, r8
 801ff68:	1d20      	adds	r0, r4, #4
 801ff6a:	f7fa fec9 	bl	801ad00 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801ff6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ff70:	b341      	cbz	r1, 801ffc4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 801ff72:	4549      	cmp	r1, r9
 801ff74:	d026      	beq.n	801ffc4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 801ff76:	a80c      	add	r0, sp, #48	; 0x30
 801ff78:	f7ff fe2e 	bl	801fbd8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ff7c:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801ff80:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801ff84:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801ff88:	2002      	movs	r0, #2
 801ff8a:	fb92 f2f0 	sdiv	r2, r2, r0
 801ff8e:	440a      	add	r2, r1
 801ff90:	1a99      	subs	r1, r3, r2
 801ff92:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801ff96:	fb93 f3f0 	sdiv	r3, r3, r0
 801ff9a:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801ff9e:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801ffa2:	4403      	add	r3, r0
 801ffa4:	1ad3      	subs	r3, r2, r3
 801ffa6:	435b      	muls	r3, r3
 801ffa8:	9a06      	ldr	r2, [sp, #24]
 801ffaa:	fb01 3301 	mla	r3, r1, r1, r3
 801ffae:	4293      	cmp	r3, r2
 801ffb0:	d208      	bcs.n	801ffc4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 801ffb2:	9a04      	ldr	r2, [sp, #16]
 801ffb4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801ffb8:	86a2      	strh	r2, [r4, #52]	; 0x34
 801ffba:	9a05      	ldr	r2, [sp, #20]
 801ffbc:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 801ffc0:	86e2      	strh	r2, [r4, #54]	; 0x36
 801ffc2:	9306      	str	r3, [sp, #24]
 801ffc4:	f10b 0b02 	add.w	fp, fp, #2
 801ffc8:	f1bb 0f08 	cmp.w	fp, #8
 801ffcc:	dda7      	ble.n	801ff1e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801ffce:	9b02      	ldr	r3, [sp, #8]
 801ffd0:	4453      	add	r3, sl
 801ffd2:	9302      	str	r3, [sp, #8]
 801ffd4:	9b01      	ldr	r3, [sp, #4]
 801ffd6:	3601      	adds	r6, #1
 801ffd8:	42b3      	cmp	r3, r6
 801ffda:	d199      	bne.n	801ff10 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x90>
 801ffdc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801ffde:	2900      	cmp	r1, #0
 801ffe0:	f43f af5c 	beq.w	801fe9c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801ffe4:	a80c      	add	r0, sp, #48	; 0x30
 801ffe6:	f7ff fdf7 	bl	801fbd8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ffea:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801ffee:	88ea      	ldrh	r2, [r5, #6]
 801fff0:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801fff4:	7929      	ldrb	r1, [r5, #4]
 801fff6:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801fffa:	1ad2      	subs	r2, r2, r3
 801fffc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801fffe:	441a      	add	r2, r3
 8020000:	892b      	ldrh	r3, [r5, #8]
 8020002:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 8020006:	1a1b      	subs	r3, r3, r0
 8020008:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 802000a:	4403      	add	r3, r0
 802000c:	480d      	ldr	r0, [pc, #52]	; (8020044 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 802000e:	900e      	str	r0, [sp, #56]	; 0x38
 8020010:	2600      	movs	r6, #0
 8020012:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8020014:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8020018:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 802001c:	6803      	ldr	r3, [r0, #0]
 802001e:	a90e      	add	r1, sp, #56	; 0x38
 8020020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020022:	4798      	blx	r3
 8020024:	792b      	ldrb	r3, [r5, #4]
 8020026:	2b00      	cmp	r3, #0
 8020028:	f43f af38 	beq.w	801fe9c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 802002c:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8020030:	e734      	b.n	801fe9c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8020032:	bf00      	nop
 8020034:	200128a4 	.word	0x200128a4
 8020038:	20012898 	.word	0x20012898
 802003c:	08030190 	.word	0x08030190
 8020040:	2001289a 	.word	0x2001289a
 8020044:	080326ac 	.word	0x080326ac

08020048 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8020048:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802004a:	4604      	mov	r4, r0
 802004c:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8020050:	3201      	adds	r2, #1
 8020052:	d112      	bne.n	802007a <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8020054:	6803      	ldr	r3, [r0, #0]
 8020056:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 802005a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802005e:	f8ad 1004 	strh.w	r1, [sp, #4]
 8020062:	2500      	movs	r5, #0
 8020064:	9500      	str	r5, [sp, #0]
 8020066:	466d      	mov	r5, sp
 8020068:	4629      	mov	r1, r5
 802006a:	f8ad 2006 	strh.w	r2, [sp, #6]
 802006e:	6a1b      	ldr	r3, [r3, #32]
 8020070:	4798      	blx	r3
 8020072:	e895 0003 	ldmia.w	r5, {r0, r1}
 8020076:	e884 0003 	stmia.w	r4, {r0, r1}
 802007a:	4620      	mov	r0, r4
 802007c:	b003      	add	sp, #12
 802007e:	bd30      	pop	{r4, r5, pc}

08020080 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8020080:	b513      	push	{r0, r1, r4, lr}
 8020082:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8020086:	3301      	adds	r3, #1
 8020088:	4604      	mov	r4, r0
 802008a:	d109      	bne.n	80200a0 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 802008c:	4601      	mov	r1, r0
 802008e:	4668      	mov	r0, sp
 8020090:	f7ff fda2 	bl	801fbd8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8020094:	f8bd 3000 	ldrh.w	r3, [sp]
 8020098:	8423      	strh	r3, [r4, #32]
 802009a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 802009e:	8463      	strh	r3, [r4, #34]	; 0x22
 80200a0:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 80200a4:	b002      	add	sp, #8
 80200a6:	bd10      	pop	{r4, pc}

080200a8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 80200a8:	b513      	push	{r0, r1, r4, lr}
 80200aa:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 80200ae:	3301      	adds	r3, #1
 80200b0:	4604      	mov	r4, r0
 80200b2:	d109      	bne.n	80200c8 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 80200b4:	4601      	mov	r1, r0
 80200b6:	4668      	mov	r0, sp
 80200b8:	f7ff fd8e 	bl	801fbd8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80200bc:	f8bd 3000 	ldrh.w	r3, [sp]
 80200c0:	8423      	strh	r3, [r4, #32]
 80200c2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80200c6:	8463      	strh	r3, [r4, #34]	; 0x22
 80200c8:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 80200cc:	b002      	add	sp, #8
 80200ce:	bd10      	pop	{r4, pc}

080200d0 <_ZN8touchgfx6ScreenC1Ev>:
 80200d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80200d2:	4605      	mov	r5, r0
 80200d4:	4b17      	ldr	r3, [pc, #92]	; (8020134 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 80200d6:	f845 3b04 	str.w	r3, [r5], #4
 80200da:	2301      	movs	r3, #1
 80200dc:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 80200e0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 80200e4:	4b14      	ldr	r3, [pc, #80]	; (8020138 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 80200e6:	4915      	ldr	r1, [pc, #84]	; (802013c <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 80200e8:	f9b3 7000 	ldrsh.w	r7, [r3]
 80200ec:	4b14      	ldr	r3, [pc, #80]	; (8020140 <_ZN8touchgfx6ScreenC1Ev+0x70>)
 80200ee:	6041      	str	r1, [r0, #4]
 80200f0:	2200      	movs	r2, #0
 80200f2:	8102      	strh	r2, [r0, #8]
 80200f4:	8142      	strh	r2, [r0, #10]
 80200f6:	8182      	strh	r2, [r0, #12]
 80200f8:	81c2      	strh	r2, [r0, #14]
 80200fa:	8202      	strh	r2, [r0, #16]
 80200fc:	8242      	strh	r2, [r0, #18]
 80200fe:	8282      	strh	r2, [r0, #20]
 8020100:	82c2      	strh	r2, [r0, #22]
 8020102:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8020106:	6202      	str	r2, [r0, #32]
 8020108:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 802010c:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 8020110:	6342      	str	r2, [r0, #52]	; 0x34
 8020112:	f9b3 6000 	ldrsh.w	r6, [r3]
 8020116:	4611      	mov	r1, r2
 8020118:	4604      	mov	r4, r0
 802011a:	4628      	mov	r0, r5
 802011c:	f7ec fc57 	bl	800c9ce <_ZN8touchgfx8Drawable5setXYEss>
 8020120:	4639      	mov	r1, r7
 8020122:	4628      	mov	r0, r5
 8020124:	f7ec fc71 	bl	800ca0a <_ZN8touchgfx8Drawable8setWidthEs>
 8020128:	4628      	mov	r0, r5
 802012a:	4631      	mov	r1, r6
 802012c:	f7ec fc7c 	bl	800ca28 <_ZN8touchgfx8Drawable9setHeightEs>
 8020130:	4620      	mov	r0, r4
 8020132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020134:	08033864 	.word	0x08033864
 8020138:	20012898 	.word	0x20012898
 802013c:	08031fd8 	.word	0x08031fd8
 8020140:	2001289a 	.word	0x2001289a

08020144 <_ZN8touchgfx6Screen4drawEv>:
 8020144:	b507      	push	{r0, r1, r2, lr}
 8020146:	4b09      	ldr	r3, [pc, #36]	; (802016c <_ZN8touchgfx6Screen4drawEv+0x28>)
 8020148:	f9b3 2000 	ldrsh.w	r2, [r3]
 802014c:	4b08      	ldr	r3, [pc, #32]	; (8020170 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 802014e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8020152:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020156:	f8ad 3006 	strh.w	r3, [sp, #6]
 802015a:	6803      	ldr	r3, [r0, #0]
 802015c:	2100      	movs	r1, #0
 802015e:	9100      	str	r1, [sp, #0]
 8020160:	689b      	ldr	r3, [r3, #8]
 8020162:	4669      	mov	r1, sp
 8020164:	4798      	blx	r3
 8020166:	b003      	add	sp, #12
 8020168:	f85d fb04 	ldr.w	pc, [sp], #4
 802016c:	20012898 	.word	0x20012898
 8020170:	2001289a 	.word	0x2001289a

08020174 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8020174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020178:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 802017c:	2b00      	cmp	r3, #0
 802017e:	b089      	sub	sp, #36	; 0x24
 8020180:	4680      	mov	r8, r0
 8020182:	460c      	mov	r4, r1
 8020184:	4615      	mov	r5, r2
 8020186:	dd0e      	ble.n	80201a6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8020188:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 802018c:	2b00      	cmp	r3, #0
 802018e:	dd0a      	ble.n	80201a6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8020190:	4628      	mov	r0, r5
 8020192:	f7ff ff59 	bl	8020048 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8020196:	4621      	mov	r1, r4
 8020198:	f7fe ff1a 	bl	801efd0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 802019c:	69eb      	ldr	r3, [r5, #28]
 802019e:	b928      	cbnz	r0, 80201ac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 80201a0:	461d      	mov	r5, r3
 80201a2:	2b00      	cmp	r3, #0
 80201a4:	d1f4      	bne.n	8020190 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 80201a6:	b009      	add	sp, #36	; 0x24
 80201a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80201ac:	ae04      	add	r6, sp, #16
 80201ae:	2b00      	cmp	r3, #0
 80201b0:	d051      	beq.n	8020256 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xe2>
 80201b2:	682b      	ldr	r3, [r5, #0]
 80201b4:	4629      	mov	r1, r5
 80201b6:	68db      	ldr	r3, [r3, #12]
 80201b8:	a802      	add	r0, sp, #8
 80201ba:	4798      	blx	r3
 80201bc:	4628      	mov	r0, r5
 80201be:	f7ff ff5f 	bl	8020080 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80201c2:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 80201c6:	4407      	add	r7, r0
 80201c8:	4628      	mov	r0, r5
 80201ca:	f7ff ff6d 	bl	80200a8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80201ce:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80201d2:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80201d6:	f8ad 2014 	strh.w	r2, [sp, #20]
 80201da:	4418      	add	r0, r3
 80201dc:	4621      	mov	r1, r4
 80201de:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80201e2:	f8ad 0012 	strh.w	r0, [sp, #18]
 80201e6:	b23f      	sxth	r7, r7
 80201e8:	4630      	mov	r0, r6
 80201ea:	f8ad 3016 	strh.w	r3, [sp, #22]
 80201ee:	f8ad 7010 	strh.w	r7, [sp, #16]
 80201f2:	f7fa fe37 	bl	801ae64 <_ZN8touchgfx4RectaNERKS0_>
 80201f6:	4628      	mov	r0, r5
 80201f8:	f7ff ff26 	bl	8020048 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80201fc:	4602      	mov	r2, r0
 80201fe:	e896 0003 	ldmia.w	r6, {r0, r1}
 8020202:	ab06      	add	r3, sp, #24
 8020204:	e883 0003 	stmia.w	r3, {r0, r1}
 8020208:	4611      	mov	r1, r2
 802020a:	4618      	mov	r0, r3
 802020c:	f7fa fe2a 	bl	801ae64 <_ZN8touchgfx4RectaNERKS0_>
 8020210:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8020214:	f9b4 1000 	ldrsh.w	r1, [r4]
 8020218:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 802021c:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8020220:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8020224:	4299      	cmp	r1, r3
 8020226:	d10b      	bne.n	8020240 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xcc>
 8020228:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 802022c:	4552      	cmp	r2, sl
 802022e:	d107      	bne.n	8020240 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xcc>
 8020230:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8020234:	455a      	cmp	r2, fp
 8020236:	d103      	bne.n	8020240 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xcc>
 8020238:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 802023c:	454a      	cmp	r2, r9
 802023e:	d00a      	beq.n	8020256 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xe2>
 8020240:	f1bb 0f00 	cmp.w	fp, #0
 8020244:	d002      	beq.n	802024c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>
 8020246:	f1b9 0f00 	cmp.w	r9, #0
 802024a:	d12e      	bne.n	80202aa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x136>
 802024c:	69ea      	ldr	r2, [r5, #28]
 802024e:	4621      	mov	r1, r4
 8020250:	4640      	mov	r0, r8
 8020252:	f7ff ff8f 	bl	8020174 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8020256:	4628      	mov	r0, r5
 8020258:	f7ff fef6 	bl	8020048 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 802025c:	6861      	ldr	r1, [r4, #4]
 802025e:	4602      	mov	r2, r0
 8020260:	6820      	ldr	r0, [r4, #0]
 8020262:	4633      	mov	r3, r6
 8020264:	c303      	stmia	r3!, {r0, r1}
 8020266:	4611      	mov	r1, r2
 8020268:	4630      	mov	r0, r6
 802026a:	f7fa fdfb 	bl	801ae64 <_ZN8touchgfx4RectaNERKS0_>
 802026e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8020272:	2b00      	cmp	r3, #0
 8020274:	dd97      	ble.n	80201a6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8020276:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 802027a:	2b00      	cmp	r3, #0
 802027c:	dd93      	ble.n	80201a6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 802027e:	4628      	mov	r0, r5
 8020280:	f7ff fefe 	bl	8020080 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8020284:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8020288:	1a18      	subs	r0, r3, r0
 802028a:	f8ad 0010 	strh.w	r0, [sp, #16]
 802028e:	4628      	mov	r0, r5
 8020290:	f7ff ff0a 	bl	80200a8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8020294:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8020298:	1a18      	subs	r0, r3, r0
 802029a:	f8ad 0012 	strh.w	r0, [sp, #18]
 802029e:	682b      	ldr	r3, [r5, #0]
 80202a0:	4631      	mov	r1, r6
 80202a2:	689b      	ldr	r3, [r3, #8]
 80202a4:	4628      	mov	r0, r5
 80202a6:	4798      	blx	r3
 80202a8:	e77d      	b.n	80201a6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80202aa:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80202ae:	fa1f f08a 	uxth.w	r0, sl
 80202b2:	4552      	cmp	r2, sl
 80202b4:	9000      	str	r0, [sp, #0]
 80202b6:	da12      	bge.n	80202de <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x16a>
 80202b8:	9301      	str	r3, [sp, #4]
 80202ba:	9b00      	ldr	r3, [sp, #0]
 80202bc:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80202c0:	f8ad 2012 	strh.w	r2, [sp, #18]
 80202c4:	1a9a      	subs	r2, r3, r2
 80202c6:	f8ad 1010 	strh.w	r1, [sp, #16]
 80202ca:	f8ad 0014 	strh.w	r0, [sp, #20]
 80202ce:	f8ad 2016 	strh.w	r2, [sp, #22]
 80202d2:	69ea      	ldr	r2, [r5, #28]
 80202d4:	4631      	mov	r1, r6
 80202d6:	4640      	mov	r0, r8
 80202d8:	f7ff ff4c 	bl	8020174 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80202dc:	9b01      	ldr	r3, [sp, #4]
 80202de:	f9b4 2000 	ldrsh.w	r2, [r4]
 80202e2:	429a      	cmp	r2, r3
 80202e4:	b29f      	uxth	r7, r3
 80202e6:	da0d      	bge.n	8020304 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x190>
 80202e8:	f8ad 2010 	strh.w	r2, [sp, #16]
 80202ec:	1aba      	subs	r2, r7, r2
 80202ee:	f8ad a012 	strh.w	sl, [sp, #18]
 80202f2:	f8ad 2014 	strh.w	r2, [sp, #20]
 80202f6:	f8ad 9016 	strh.w	r9, [sp, #22]
 80202fa:	69ea      	ldr	r2, [r5, #28]
 80202fc:	4631      	mov	r1, r6
 80202fe:	4640      	mov	r0, r8
 8020300:	f7ff ff38 	bl	8020174 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8020304:	8822      	ldrh	r2, [r4, #0]
 8020306:	88a3      	ldrh	r3, [r4, #4]
 8020308:	445f      	add	r7, fp
 802030a:	4413      	add	r3, r2
 802030c:	b29b      	uxth	r3, r3
 802030e:	b2bf      	uxth	r7, r7
 8020310:	b23a      	sxth	r2, r7
 8020312:	b219      	sxth	r1, r3
 8020314:	4291      	cmp	r1, r2
 8020316:	dd0d      	ble.n	8020334 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c0>
 8020318:	1bdb      	subs	r3, r3, r7
 802031a:	f8ad 2010 	strh.w	r2, [sp, #16]
 802031e:	f8ad a012 	strh.w	sl, [sp, #18]
 8020322:	f8ad 3014 	strh.w	r3, [sp, #20]
 8020326:	f8ad 9016 	strh.w	r9, [sp, #22]
 802032a:	69ea      	ldr	r2, [r5, #28]
 802032c:	4631      	mov	r1, r6
 802032e:	4640      	mov	r0, r8
 8020330:	f7ff ff20 	bl	8020174 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8020334:	88e2      	ldrh	r2, [r4, #6]
 8020336:	8863      	ldrh	r3, [r4, #2]
 8020338:	4413      	add	r3, r2
 802033a:	9a00      	ldr	r2, [sp, #0]
 802033c:	444a      	add	r2, r9
 802033e:	b29b      	uxth	r3, r3
 8020340:	fa1f f982 	uxth.w	r9, r2
 8020344:	fa0f f289 	sxth.w	r2, r9
 8020348:	b219      	sxth	r1, r3
 802034a:	428a      	cmp	r2, r1
 802034c:	da83      	bge.n	8020256 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xe2>
 802034e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8020352:	f9b4 0000 	ldrsh.w	r0, [r4]
 8020356:	f8ad 1014 	strh.w	r1, [sp, #20]
 802035a:	eba3 0309 	sub.w	r3, r3, r9
 802035e:	f8ad 0010 	strh.w	r0, [sp, #16]
 8020362:	f8ad 2012 	strh.w	r2, [sp, #18]
 8020366:	f8ad 3016 	strh.w	r3, [sp, #22]
 802036a:	69ea      	ldr	r2, [r5, #28]
 802036c:	4631      	mov	r1, r6
 802036e:	e76f      	b.n	8020250 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xdc>

08020370 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8020370:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8020372:	aa02      	add	r2, sp, #8
 8020374:	2300      	movs	r3, #0
 8020376:	f842 3d04 	str.w	r3, [r2, #-4]!
 802037a:	4604      	mov	r4, r0
 802037c:	3004      	adds	r0, #4
 802037e:	460d      	mov	r5, r1
 8020380:	f7fa fe48 	bl	801b014 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8020384:	9a01      	ldr	r2, [sp, #4]
 8020386:	b11a      	cbz	r2, 8020390 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 8020388:	4629      	mov	r1, r5
 802038a:	4620      	mov	r0, r4
 802038c:	f7ff fef2 	bl	8020174 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8020390:	b003      	add	sp, #12
 8020392:	bd30      	pop	{r4, r5, pc}

08020394 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8020394:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8020396:	4602      	mov	r2, r0
 8020398:	4604      	mov	r4, r0
 802039a:	f852 0f08 	ldr.w	r0, [r2, #8]!
 802039e:	460d      	mov	r5, r1
 80203a0:	6851      	ldr	r1, [r2, #4]
 80203a2:	466b      	mov	r3, sp
 80203a4:	c303      	stmia	r3!, {r0, r1}
 80203a6:	4629      	mov	r1, r5
 80203a8:	4668      	mov	r0, sp
 80203aa:	f7fa fd5b 	bl	801ae64 <_ZN8touchgfx4RectaNERKS0_>
 80203ae:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80203b2:	4669      	mov	r1, sp
 80203b4:	b123      	cbz	r3, 80203c0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 80203b6:	4620      	mov	r0, r4
 80203b8:	f7ff ffda 	bl	8020370 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 80203bc:	b003      	add	sp, #12
 80203be:	bd30      	pop	{r4, r5, pc}
 80203c0:	1d20      	adds	r0, r4, #4
 80203c2:	f7fa fdee 	bl	801afa2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 80203c6:	e7f9      	b.n	80203bc <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

080203c8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 80203c8:	680a      	ldr	r2, [r1, #0]
 80203ca:	460b      	mov	r3, r1
 80203cc:	6992      	ldr	r2, [r2, #24]
 80203ce:	1d01      	adds	r1, r0, #4
 80203d0:	4618      	mov	r0, r3
 80203d2:	4710      	bx	r2

080203d4 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 80203d4:	b510      	push	{r4, lr}
 80203d6:	4298      	cmp	r0, r3
 80203d8:	eb01 0402 	add.w	r4, r1, r2
 80203dc:	b224      	sxth	r4, r4
 80203de:	d22c      	bcs.n	802043a <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x66>
 80203e0:	b35b      	cbz	r3, 802043a <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x66>
 80203e2:	ee07 0a90 	vmov	s15, r0
 80203e6:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 80203ea:	ee07 3a90 	vmov	s15, r3
 80203ee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80203f2:	ee07 2a90 	vmov	s15, r2
 80203f6:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80203fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80203fe:	ee37 7a66 	vsub.f32	s14, s14, s13
 8020402:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8020406:	ee67 5a07 	vmul.f32	s11, s14, s14
 802040a:	ee07 1a90 	vmov	s15, r1
 802040e:	eee5 6a87 	vfma.f32	s13, s11, s14
 8020412:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020416:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 802041a:	eee6 7a26 	vfma.f32	s15, s12, s13
 802041e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020426:	bfcc      	ite	gt
 8020428:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 802042c:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 8020430:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020434:	ee17 3a90 	vmov	r3, s15
 8020438:	b21c      	sxth	r4, r3
 802043a:	4620      	mov	r0, r4
 802043c:	bd10      	pop	{r4, pc}

0802043e <_ZN8touchgfx12TextProviderC1Ev>:
 802043e:	b510      	push	{r4, lr}
 8020440:	2300      	movs	r3, #0
 8020442:	2201      	movs	r2, #1
 8020444:	4604      	mov	r4, r0
 8020446:	e9c0 3300 	strd	r3, r3, [r0]
 802044a:	60c3      	str	r3, [r0, #12]
 802044c:	7403      	strb	r3, [r0, #16]
 802044e:	82c3      	strh	r3, [r0, #22]
 8020450:	8303      	strh	r3, [r0, #24]
 8020452:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8020454:	8603      	strh	r3, [r0, #48]	; 0x30
 8020456:	86c3      	strh	r3, [r0, #54]	; 0x36
 8020458:	8703      	strh	r3, [r0, #56]	; 0x38
 802045a:	63c3      	str	r3, [r0, #60]	; 0x3c
 802045c:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 8020460:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 8020464:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 8020468:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 802046c:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 8020470:	f7ee fb22 	bl	800eab8 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8020474:	4620      	mov	r0, r4
 8020476:	bd10      	pop	{r4, pc}

08020478 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8020478:	b530      	push	{r4, r5, lr}
 802047a:	2500      	movs	r5, #0
 802047c:	2401      	movs	r4, #1
 802047e:	6843      	ldr	r3, [r0, #4]
 8020480:	b913      	cbnz	r3, 8020488 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8020482:	6803      	ldr	r3, [r0, #0]
 8020484:	b1f3      	cbz	r3, 80204c4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8020486:	6043      	str	r3, [r0, #4]
 8020488:	7c03      	ldrb	r3, [r0, #16]
 802048a:	b143      	cbz	r3, 802049e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 802048c:	68c3      	ldr	r3, [r0, #12]
 802048e:	b12b      	cbz	r3, 802049c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8020490:	881a      	ldrh	r2, [r3, #0]
 8020492:	b11a      	cbz	r2, 802049c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8020494:	1c9a      	adds	r2, r3, #2
 8020496:	60c2      	str	r2, [r0, #12]
 8020498:	8818      	ldrh	r0, [r3, #0]
 802049a:	bd30      	pop	{r4, r5, pc}
 802049c:	7405      	strb	r5, [r0, #16]
 802049e:	6843      	ldr	r3, [r0, #4]
 80204a0:	8819      	ldrh	r1, [r3, #0]
 80204a2:	b179      	cbz	r1, 80204c4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 80204a4:	1c9a      	adds	r2, r3, #2
 80204a6:	2902      	cmp	r1, #2
 80204a8:	6042      	str	r2, [r0, #4]
 80204aa:	d1f5      	bne.n	8020498 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 80204ac:	6883      	ldr	r3, [r0, #8]
 80204ae:	1d1a      	adds	r2, r3, #4
 80204b0:	6082      	str	r2, [r0, #8]
 80204b2:	681b      	ldr	r3, [r3, #0]
 80204b4:	60c3      	str	r3, [r0, #12]
 80204b6:	2b00      	cmp	r3, #0
 80204b8:	d0e1      	beq.n	802047e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80204ba:	881b      	ldrh	r3, [r3, #0]
 80204bc:	2b00      	cmp	r3, #0
 80204be:	d0de      	beq.n	802047e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80204c0:	7404      	strb	r4, [r0, #16]
 80204c2:	e7dc      	b.n	802047e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80204c4:	2000      	movs	r0, #0
 80204c6:	e7e8      	b.n	802049a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

080204c8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 80204c8:	b410      	push	{r4}
 80204ca:	63c3      	str	r3, [r0, #60]	; 0x3c
 80204cc:	2300      	movs	r3, #0
 80204ce:	6082      	str	r2, [r0, #8]
 80204d0:	6001      	str	r1, [r0, #0]
 80204d2:	6043      	str	r3, [r0, #4]
 80204d4:	60c3      	str	r3, [r0, #12]
 80204d6:	7403      	strb	r3, [r0, #16]
 80204d8:	8603      	strh	r3, [r0, #48]	; 0x30
 80204da:	8303      	strh	r3, [r0, #24]
 80204dc:	8703      	strh	r3, [r0, #56]	; 0x38
 80204de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80204e2:	f7ee bae9 	b.w	800eab8 <_ZN8touchgfx12TextProvider18initializeInternalEv>

080204e6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 80204e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80204e8:	4605      	mov	r5, r0
 80204ea:	4608      	mov	r0, r1
 80204ec:	b1e9      	cbz	r1, 802052a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 80204ee:	f105 0440 	add.w	r4, r5, #64	; 0x40
 80204f2:	460b      	mov	r3, r1
 80204f4:	f101 0708 	add.w	r7, r1, #8
 80204f8:	4622      	mov	r2, r4
 80204fa:	6818      	ldr	r0, [r3, #0]
 80204fc:	6859      	ldr	r1, [r3, #4]
 80204fe:	4626      	mov	r6, r4
 8020500:	c603      	stmia	r6!, {r0, r1}
 8020502:	3308      	adds	r3, #8
 8020504:	42bb      	cmp	r3, r7
 8020506:	4634      	mov	r4, r6
 8020508:	d1f7      	bne.n	80204fa <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 802050a:	6818      	ldr	r0, [r3, #0]
 802050c:	6030      	str	r0, [r6, #0]
 802050e:	889b      	ldrh	r3, [r3, #4]
 8020510:	80b3      	strh	r3, [r6, #4]
 8020512:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 8020516:	015b      	lsls	r3, r3, #5
 8020518:	f403 7180 	and.w	r1, r3, #256	; 0x100
 802051c:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 8020520:	430b      	orrs	r3, r1
 8020522:	425b      	negs	r3, r3
 8020524:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 8020528:	4610      	mov	r0, r2
 802052a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802052c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 802052c:	b538      	push	{r3, r4, r5, lr}
 802052e:	460c      	mov	r4, r1
 8020530:	6811      	ldr	r1, [r2, #0]
 8020532:	4610      	mov	r0, r2
 8020534:	68cd      	ldr	r5, [r1, #12]
 8020536:	4619      	mov	r1, r3
 8020538:	47a8      	blx	r5
 802053a:	2800      	cmp	r0, #0
 802053c:	bf08      	it	eq
 802053e:	4620      	moveq	r0, r4
 8020540:	bd38      	pop	{r3, r4, r5, pc}
	...

08020544 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8020544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020546:	4604      	mov	r4, r0
 8020548:	4615      	mov	r5, r2
 802054a:	4608      	mov	r0, r1
 802054c:	b93a      	cbnz	r2, 802055e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 802054e:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 8020552:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 8020556:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 802055a:	4628      	mov	r0, r5
 802055c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802055e:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8020562:	8893      	ldrh	r3, [r2, #4]
 8020564:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8020568:	f406 7280 	and.w	r2, r6, #256	; 0x100
 802056c:	79ee      	ldrb	r6, [r5, #7]
 802056e:	4316      	orrs	r6, r2
 8020570:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 8020574:	189a      	adds	r2, r3, r2
 8020576:	b291      	uxth	r1, r2
 8020578:	291d      	cmp	r1, #29
 802057a:	b2b7      	uxth	r7, r6
 802057c:	f200 8083 	bhi.w	8020686 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 8020580:	2201      	movs	r2, #1
 8020582:	408a      	lsls	r2, r1
 8020584:	4978      	ldr	r1, [pc, #480]	; (8020768 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 8020586:	420a      	tst	r2, r1
 8020588:	ea4f 06e6 	mov.w	r6, r6, asr #3
 802058c:	d12d      	bne.n	80205ea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 802058e:	f412 7f60 	tst.w	r2, #896	; 0x380
 8020592:	d078      	beq.n	8020686 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 8020594:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8020598:	462b      	mov	r3, r5
 802059a:	f105 0e08 	add.w	lr, r5, #8
 802059e:	4615      	mov	r5, r2
 80205a0:	6818      	ldr	r0, [r3, #0]
 80205a2:	6859      	ldr	r1, [r3, #4]
 80205a4:	4694      	mov	ip, r2
 80205a6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80205aa:	3308      	adds	r3, #8
 80205ac:	4573      	cmp	r3, lr
 80205ae:	4662      	mov	r2, ip
 80205b0:	d1f6      	bne.n	80205a0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5c>
 80205b2:	6818      	ldr	r0, [r3, #0]
 80205b4:	f8cc 0000 	str.w	r0, [ip]
 80205b8:	889b      	ldrh	r3, [r3, #4]
 80205ba:	f8ac 3004 	strh.w	r3, [ip, #4]
 80205be:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 80205c2:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 80205c6:	b2b3      	uxth	r3, r6
 80205c8:	1aca      	subs	r2, r1, r3
 80205ca:	b292      	uxth	r2, r2
 80205cc:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
 80205d0:	10d2      	asrs	r2, r2, #3
 80205d2:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 80205d6:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80205da:	4302      	orrs	r2, r0
 80205dc:	1bcf      	subs	r7, r1, r7
 80205de:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
 80205e2:	1afb      	subs	r3, r7, r3
 80205e4:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 80205e8:	e7b7      	b.n	802055a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80205ea:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80205ec:	b92b      	cbnz	r3, 80205fa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 80205ee:	4b5f      	ldr	r3, [pc, #380]	; (802076c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 80205f0:	4a5f      	ldr	r2, [pc, #380]	; (8020770 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 80205f2:	4860      	ldr	r0, [pc, #384]	; (8020774 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 80205f4:	21c0      	movs	r1, #192	; 0xc0
 80205f6:	f00d fe37 	bl	802e268 <__assert_func>
 80205fa:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80205fc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8020600:	8b59      	ldrh	r1, [r3, #26]
 8020602:	f640 6333 	movw	r3, #3635	; 0xe33
 8020606:	4299      	cmp	r1, r3
 8020608:	d110      	bne.n	802062c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 802060a:	6803      	ldr	r3, [r0, #0]
 802060c:	68db      	ldr	r3, [r3, #12]
 802060e:	4798      	blx	r3
 8020610:	7b41      	ldrb	r1, [r0, #13]
 8020612:	00cb      	lsls	r3, r1, #3
 8020614:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8020618:	7a03      	ldrb	r3, [r0, #8]
 802061a:	0648      	lsls	r0, r1, #25
 802061c:	ea43 0302 	orr.w	r3, r3, r2
 8020620:	bf44      	itt	mi
 8020622:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8020626:	b21b      	sxthmi	r3, r3
 8020628:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 802062c:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 8020630:	443b      	add	r3, r7
 8020632:	4433      	add	r3, r6
 8020634:	b29b      	uxth	r3, r3
 8020636:	f104 0640 	add.w	r6, r4, #64	; 0x40
 802063a:	462a      	mov	r2, r5
 802063c:	f105 0c08 	add.w	ip, r5, #8
 8020640:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8020644:	4635      	mov	r5, r6
 8020646:	6810      	ldr	r0, [r2, #0]
 8020648:	6851      	ldr	r1, [r2, #4]
 802064a:	4637      	mov	r7, r6
 802064c:	c703      	stmia	r7!, {r0, r1}
 802064e:	3208      	adds	r2, #8
 8020650:	4562      	cmp	r2, ip
 8020652:	463e      	mov	r6, r7
 8020654:	d1f7      	bne.n	8020646 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 8020656:	6810      	ldr	r0, [r2, #0]
 8020658:	6038      	str	r0, [r7, #0]
 802065a:	8892      	ldrh	r2, [r2, #4]
 802065c:	80ba      	strh	r2, [r7, #4]
 802065e:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 8020662:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8020666:	10db      	asrs	r3, r3, #3
 8020668:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 802066c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8020670:	4313      	orrs	r3, r2
 8020672:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8020676:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 802067a:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 802067e:	1a9b      	subs	r3, r3, r2
 8020680:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 8020684:	e769      	b.n	802055a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8020686:	f023 0204 	bic.w	r2, r3, #4
 802068a:	f640 611b 	movw	r1, #3611	; 0xe1b
 802068e:	428a      	cmp	r2, r1
 8020690:	d003      	beq.n	802069a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x156>
 8020692:	f640 621d 	movw	r2, #3613	; 0xe1d
 8020696:	4293      	cmp	r3, r2
 8020698:	d120      	bne.n	80206dc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x198>
 802069a:	3b01      	subs	r3, #1
 802069c:	4602      	mov	r2, r0
 802069e:	b29b      	uxth	r3, r3
 80206a0:	4629      	mov	r1, r5
 80206a2:	4620      	mov	r0, r4
 80206a4:	f7ff ff42 	bl	802052c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80206a8:	7b41      	ldrb	r1, [r0, #13]
 80206aa:	00cb      	lsls	r3, r1, #3
 80206ac:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80206b0:	7a03      	ldrb	r3, [r0, #8]
 80206b2:	0649      	lsls	r1, r1, #25
 80206b4:	ea43 0302 	orr.w	r3, r3, r2
 80206b8:	bf44      	itt	mi
 80206ba:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80206be:	b21b      	sxthmi	r3, r3
 80206c0:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 80206c4:	7b6b      	ldrb	r3, [r5, #13]
 80206c6:	7aaa      	ldrb	r2, [r5, #10]
 80206c8:	005b      	lsls	r3, r3, #1
 80206ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80206ce:	4313      	orrs	r3, r2
 80206d0:	115a      	asrs	r2, r3, #5
 80206d2:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 80206d6:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 80206da:	e036      	b.n	802074a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 80206dc:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 80206e0:	f402 7180 	and.w	r1, r2, #256	; 0x100
 80206e4:	7a2a      	ldrb	r2, [r5, #8]
 80206e6:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80206ea:	ea42 0201 	orr.w	r2, r2, r1
 80206ee:	bf1c      	itt	ne
 80206f0:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 80206f4:	b212      	sxthne	r2, r2
 80206f6:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 80206fa:	f640 6109 	movw	r1, #3593	; 0xe09
 80206fe:	f023 0210 	bic.w	r2, r3, #16
 8020702:	428a      	cmp	r2, r1
 8020704:	d003      	beq.n	802070e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ca>
 8020706:	f640 6213 	movw	r2, #3603	; 0xe13
 802070a:	4293      	cmp	r3, r2
 802070c:	d12a      	bne.n	8020764 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 802070e:	7b6e      	ldrb	r6, [r5, #13]
 8020710:	0076      	lsls	r6, r6, #1
 8020712:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8020716:	7aae      	ldrb	r6, [r5, #10]
 8020718:	4316      	orrs	r6, r2
 802071a:	f640 6213 	movw	r2, #3603	; 0xe13
 802071e:	4293      	cmp	r3, r2
 8020720:	bf18      	it	ne
 8020722:	f103 33ff 	addne.w	r3, r3, #4294967295
 8020726:	4602      	mov	r2, r0
 8020728:	bf14      	ite	ne
 802072a:	b29b      	uxthne	r3, r3
 802072c:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8020730:	4629      	mov	r1, r5
 8020732:	4620      	mov	r0, r4
 8020734:	f7ff fefa 	bl	802052c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8020738:	7b43      	ldrb	r3, [r0, #13]
 802073a:	7a82      	ldrb	r2, [r0, #10]
 802073c:	005b      	lsls	r3, r3, #1
 802073e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8020742:	4313      	orrs	r3, r2
 8020744:	1af6      	subs	r6, r6, r3
 8020746:	f8a4 6052 	strh.w	r6, [r4, #82]	; 0x52
 802074a:	7b69      	ldrb	r1, [r5, #13]
 802074c:	00cb      	lsls	r3, r1, #3
 802074e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8020752:	7a2b      	ldrb	r3, [r5, #8]
 8020754:	4313      	orrs	r3, r2
 8020756:	064a      	lsls	r2, r1, #25
 8020758:	bf44      	itt	mi
 802075a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 802075e:	b21b      	sxthmi	r3, r3
 8020760:	1bdb      	subs	r3, r3, r7
 8020762:	e73f      	b.n	80205e4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 8020764:	2300      	movs	r3, #0
 8020766:	e7b6      	b.n	80206d6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x192>
 8020768:	3fc00079 	.word	0x3fc00079
 802076c:	08033890 	.word	0x08033890
 8020770:	08033b02 	.word	0x08033b02
 8020774:	08033899 	.word	0x08033899

08020778 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8020778:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802077c:	4604      	mov	r4, r0
 802077e:	b942      	cbnz	r2, 8020792 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8020780:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8020784:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 8020788:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 802078c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8020790:	e046      	b.n	8020820 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 8020792:	7b51      	ldrb	r1, [r2, #13]
 8020794:	8893      	ldrh	r3, [r2, #4]
 8020796:	010f      	lsls	r7, r1, #4
 8020798:	f407 7080 	and.w	r0, r7, #256	; 0x100
 802079c:	79d7      	ldrb	r7, [r2, #7]
 802079e:	4307      	orrs	r7, r0
 80207a0:	2f04      	cmp	r7, #4
 80207a2:	b2bd      	uxth	r5, r7
 80207a4:	bfcc      	ite	gt
 80207a6:	08bf      	lsrgt	r7, r7, #2
 80207a8:	2701      	movle	r7, #1
 80207aa:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 80207ae:	f200 80ab 	bhi.w	8020908 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 80207b2:	f240 60e7 	movw	r0, #1767	; 0x6e7
 80207b6:	4283      	cmp	r3, r0
 80207b8:	d216      	bcs.n	80207e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80207ba:	f240 605b 	movw	r0, #1627	; 0x65b
 80207be:	4283      	cmp	r3, r0
 80207c0:	d859      	bhi.n	8020876 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 80207c2:	f240 6057 	movw	r0, #1623	; 0x657
 80207c6:	4283      	cmp	r3, r0
 80207c8:	d20e      	bcs.n	80207e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80207ca:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80207ce:	d24a      	bcs.n	8020866 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 80207d0:	f240 604e 	movw	r0, #1614	; 0x64e
 80207d4:	4283      	cmp	r3, r0
 80207d6:	d207      	bcs.n	80207e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80207d8:	f240 601a 	movw	r0, #1562	; 0x61a
 80207dc:	4283      	cmp	r3, r0
 80207de:	d02a      	beq.n	8020836 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80207e0:	d821      	bhi.n	8020826 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 80207e2:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 80207e6:	d35b      	bcc.n	80208a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80207e8:	f9b4 304e 	ldrsh.w	r3, [r4, #78]	; 0x4e
 80207ec:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80207f0:	f040 80d0 	bne.w	8020994 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 80207f4:	f9b4 0050 	ldrsh.w	r0, [r4, #80]	; 0x50
 80207f8:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80207fc:	f040 80ca 	bne.w	8020994 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8020800:	00cb      	lsls	r3, r1, #3
 8020802:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8020806:	7a13      	ldrb	r3, [r2, #8]
 8020808:	0649      	lsls	r1, r1, #25
 802080a:	ea43 0300 	orr.w	r3, r3, r0
 802080e:	bf44      	itt	mi
 8020810:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8020814:	b21b      	sxthmi	r3, r3
 8020816:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 802081a:	1b5d      	subs	r5, r3, r5
 802081c:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 8020820:	4610      	mov	r0, r2
 8020822:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020826:	f240 604b 	movw	r0, #1611	; 0x64b
 802082a:	4283      	cmp	r3, r0
 802082c:	d338      	bcc.n	80208a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 802082e:	f240 604c 	movw	r0, #1612	; 0x64c
 8020832:	4283      	cmp	r3, r0
 8020834:	d9d8      	bls.n	80207e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8020836:	f9b4 004e 	ldrsh.w	r0, [r4, #78]	; 0x4e
 802083a:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	; 0x50
 802083e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8020842:	f040 80f1 	bne.w	8020a28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>
 8020846:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 802084a:	f040 80ed 	bne.w	8020a28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>
 802084e:	00cb      	lsls	r3, r1, #3
 8020850:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8020854:	7a13      	ldrb	r3, [r2, #8]
 8020856:	064e      	lsls	r6, r1, #25
 8020858:	ea43 0300 	orr.w	r3, r3, r0
 802085c:	bf44      	itt	mi
 802085e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8020862:	b21b      	sxthmi	r3, r3
 8020864:	e7d9      	b.n	802081a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 8020866:	f240 6054 	movw	r0, #1620	; 0x654
 802086a:	4283      	cmp	r3, r0
 802086c:	d8e3      	bhi.n	8020836 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 802086e:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8020872:	d9e0      	bls.n	8020836 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8020874:	e7b8      	b.n	80207e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8020876:	f240 6074 	movw	r0, #1652	; 0x674
 802087a:	4283      	cmp	r3, r0
 802087c:	d0b4      	beq.n	80207e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 802087e:	d82d      	bhi.n	80208dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 8020880:	f240 605e 	movw	r0, #1630	; 0x65e
 8020884:	4283      	cmp	r3, r0
 8020886:	d804      	bhi.n	8020892 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 8020888:	f240 605d 	movw	r0, #1629	; 0x65d
 802088c:	4283      	cmp	r3, r0
 802088e:	d3d2      	bcc.n	8020836 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8020890:	e7aa      	b.n	80207e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8020892:	f240 605f 	movw	r0, #1631	; 0x65f
 8020896:	4283      	cmp	r3, r0
 8020898:	d0cd      	beq.n	8020836 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 802089a:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 802089e:	d0a3      	beq.n	80207e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80208a0:	00cb      	lsls	r3, r1, #3
 80208a2:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80208a6:	7a13      	ldrb	r3, [r2, #8]
 80208a8:	0649      	lsls	r1, r1, #25
 80208aa:	ea43 0300 	orr.w	r3, r3, r0
 80208ae:	bf44      	itt	mi
 80208b0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80208b4:	b21b      	sxthmi	r3, r3
 80208b6:	1b5d      	subs	r5, r3, r5
 80208b8:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 80208bc:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 80208c0:	7b53      	ldrb	r3, [r2, #13]
 80208c2:	015b      	lsls	r3, r3, #5
 80208c4:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80208c8:	7993      	ldrb	r3, [r2, #6]
 80208ca:	430b      	orrs	r3, r1
 80208cc:	005b      	lsls	r3, r3, #1
 80208ce:	2105      	movs	r1, #5
 80208d0:	fb93 f3f1 	sdiv	r3, r3, r1
 80208d4:	f992 1009 	ldrsb.w	r1, [r2, #9]
 80208d8:	440b      	add	r3, r1
 80208da:	e757      	b.n	802078c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 80208dc:	f240 60e2 	movw	r0, #1762	; 0x6e2
 80208e0:	4283      	cmp	r3, r0
 80208e2:	d809      	bhi.n	80208f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 80208e4:	f240 60df 	movw	r0, #1759	; 0x6df
 80208e8:	4283      	cmp	r3, r0
 80208ea:	f4bf af7d 	bcs.w	80207e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80208ee:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 80208f2:	2b05      	cmp	r3, #5
 80208f4:	d8d4      	bhi.n	80208a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80208f6:	e777      	b.n	80207e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80208f8:	f240 60e3 	movw	r0, #1763	; 0x6e3
 80208fc:	4283      	cmp	r3, r0
 80208fe:	d09a      	beq.n	8020836 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8020900:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8020904:	4283      	cmp	r3, r0
 8020906:	e7ca      	b.n	802089e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 8020908:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 802090c:	d22b      	bcs.n	8020966 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 802090e:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8020912:	4283      	cmp	r3, r0
 8020914:	d28f      	bcs.n	8020836 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8020916:	f640 00e5 	movw	r0, #2277	; 0x8e5
 802091a:	4283      	cmp	r3, r0
 802091c:	d816      	bhi.n	802094c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 802091e:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8020922:	4283      	cmp	r3, r0
 8020924:	f4bf af60 	bcs.w	80207e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8020928:	f240 60ec 	movw	r0, #1772	; 0x6ec
 802092c:	4283      	cmp	r3, r0
 802092e:	d80a      	bhi.n	8020946 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 8020930:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8020934:	4283      	cmp	r3, r0
 8020936:	f4bf af57 	bcs.w	80207e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 802093a:	f240 60ea 	movw	r0, #1770	; 0x6ea
 802093e:	4283      	cmp	r3, r0
 8020940:	f43f af79 	beq.w	8020836 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8020944:	e7ac      	b.n	80208a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8020946:	f240 60ed 	movw	r0, #1773	; 0x6ed
 802094a:	e7f8      	b.n	802093e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 802094c:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8020950:	4283      	cmp	r3, r0
 8020952:	d802      	bhi.n	802095a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 8020954:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8020958:	e798      	b.n	802088c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 802095a:	f640 00e9 	movw	r0, #2281	; 0x8e9
 802095e:	4283      	cmp	r3, r0
 8020960:	f47f af42 	bne.w	80207e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8020964:	e767      	b.n	8020836 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8020966:	f640 00f6 	movw	r0, #2294	; 0x8f6
 802096a:	4283      	cmp	r3, r0
 802096c:	f43f af63 	beq.w	8020836 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8020970:	d802      	bhi.n	8020978 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 8020972:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8020976:	e7f2      	b.n	802095e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 8020978:	f640 00fa 	movw	r0, #2298	; 0x8fa
 802097c:	4283      	cmp	r3, r0
 802097e:	d805      	bhi.n	802098c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 8020980:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8020984:	4283      	cmp	r3, r0
 8020986:	f4ff af2f 	bcc.w	80207e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 802098a:	e754      	b.n	8020836 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 802098c:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8020990:	4283      	cmp	r3, r0
 8020992:	e7af      	b.n	80208f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 8020994:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 8020998:	4617      	mov	r7, r2
 802099a:	f102 0808 	add.w	r8, r2, #8
 802099e:	4666      	mov	r6, ip
 80209a0:	6838      	ldr	r0, [r7, #0]
 80209a2:	6879      	ldr	r1, [r7, #4]
 80209a4:	46e6      	mov	lr, ip
 80209a6:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80209aa:	3708      	adds	r7, #8
 80209ac:	4547      	cmp	r7, r8
 80209ae:	46f4      	mov	ip, lr
 80209b0:	d1f6      	bne.n	80209a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 80209b2:	6838      	ldr	r0, [r7, #0]
 80209b4:	f8ce 0000 	str.w	r0, [lr]
 80209b8:	88b9      	ldrh	r1, [r7, #4]
 80209ba:	f8ae 1004 	strh.w	r1, [lr, #4]
 80209be:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 80209c2:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80209c6:	d009      	beq.n	80209dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x264>
 80209c8:	7b51      	ldrb	r1, [r2, #13]
 80209ca:	7992      	ldrb	r2, [r2, #6]
 80209cc:	0149      	lsls	r1, r1, #5
 80209ce:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80209d2:	4311      	orrs	r1, r2
 80209d4:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80209d8:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 80209dc:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80209e0:	d00d      	beq.n	80209fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x286>
 80209e2:	442b      	add	r3, r5
 80209e4:	b29b      	uxth	r3, r3
 80209e6:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 80209ea:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 80209ee:	10db      	asrs	r3, r3, #3
 80209f0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80209f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80209f8:	4313      	orrs	r3, r2
 80209fa:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 80209fe:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8020a02:	00cb      	lsls	r3, r1, #3
 8020a04:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8020a08:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8020a0c:	064f      	lsls	r7, r1, #25
 8020a0e:	ea43 0302 	orr.w	r3, r3, r2
 8020a12:	bf44      	itt	mi
 8020a14:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8020a18:	b21b      	sxthmi	r3, r3
 8020a1a:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8020a1e:	1b5d      	subs	r5, r3, r5
 8020a20:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 8020a24:	4632      	mov	r2, r6
 8020a26:	e6fb      	b.n	8020820 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 8020a28:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8020a2c:	4694      	mov	ip, r2
 8020a2e:	f102 0908 	add.w	r9, r2, #8
 8020a32:	4676      	mov	r6, lr
 8020a34:	f8dc 0000 	ldr.w	r0, [ip]
 8020a38:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8020a3c:	46f0      	mov	r8, lr
 8020a3e:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8020a42:	f10c 0c08 	add.w	ip, ip, #8
 8020a46:	45cc      	cmp	ip, r9
 8020a48:	46c6      	mov	lr, r8
 8020a4a:	d1f3      	bne.n	8020a34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2bc>
 8020a4c:	f8dc 0000 	ldr.w	r0, [ip]
 8020a50:	f8c8 0000 	str.w	r0, [r8]
 8020a54:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 8020a58:	f8a8 1004 	strh.w	r1, [r8, #4]
 8020a5c:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 8020a60:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8020a64:	d009      	beq.n	8020a7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x302>
 8020a66:	7b51      	ldrb	r1, [r2, #13]
 8020a68:	7992      	ldrb	r2, [r2, #6]
 8020a6a:	0149      	lsls	r1, r1, #5
 8020a6c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8020a70:	4311      	orrs	r1, r2
 8020a72:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8020a76:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 8020a7a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8020a7e:	d00d      	beq.n	8020a9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8020a80:	1bdb      	subs	r3, r3, r7
 8020a82:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 8020a86:	b29b      	uxth	r3, r3
 8020a88:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8020a8c:	10db      	asrs	r3, r3, #3
 8020a8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8020a92:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8020a96:	4313      	orrs	r3, r2
 8020a98:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8020a9c:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8020aa0:	00cb      	lsls	r3, r1, #3
 8020aa2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8020aa6:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8020aaa:	0648      	lsls	r0, r1, #25
 8020aac:	ea43 0302 	orr.w	r3, r3, r2
 8020ab0:	bf44      	itt	mi
 8020ab2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8020ab6:	b21b      	sxthmi	r3, r3
 8020ab8:	e7b1      	b.n	8020a1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a6>
	...

08020abc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8020abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020ac0:	461e      	mov	r6, r3
 8020ac2:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8020ac4:	4604      	mov	r4, r0
 8020ac6:	4617      	mov	r7, r2
 8020ac8:	b92b      	cbnz	r3, 8020ad6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 8020aca:	4b25      	ldr	r3, [pc, #148]	; (8020b60 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 8020acc:	4a25      	ldr	r2, [pc, #148]	; (8020b64 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 8020ace:	4826      	ldr	r0, [pc, #152]	; (8020b68 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 8020ad0:	21c0      	movs	r1, #192	; 0xc0
 8020ad2:	f00d fbc9 	bl	802e268 <__assert_func>
 8020ad6:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8020ad8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8020adc:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 8020ae0:	f7ed ff46 	bl	800e970 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8020ae4:	4605      	mov	r5, r0
 8020ae6:	b918      	cbnz	r0, 8020af0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 8020ae8:	6030      	str	r0, [r6, #0]
 8020aea:	4628      	mov	r0, r5
 8020aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020af0:	683b      	ldr	r3, [r7, #0]
 8020af2:	4601      	mov	r1, r0
 8020af4:	68db      	ldr	r3, [r3, #12]
 8020af6:	4638      	mov	r0, r7
 8020af8:	4798      	blx	r3
 8020afa:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8020afe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8020b02:	4602      	mov	r2, r0
 8020b04:	6030      	str	r0, [r6, #0]
 8020b06:	d213      	bcs.n	8020b30 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 8020b08:	4643      	mov	r3, r8
 8020b0a:	4639      	mov	r1, r7
 8020b0c:	4620      	mov	r0, r4
 8020b0e:	f7ff fe33 	bl	8020778 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8020b12:	6030      	str	r0, [r6, #0]
 8020b14:	6833      	ldr	r3, [r6, #0]
 8020b16:	b143      	cbz	r3, 8020b2a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 8020b18:	7b5a      	ldrb	r2, [r3, #13]
 8020b1a:	7a9b      	ldrb	r3, [r3, #10]
 8020b1c:	0052      	lsls	r2, r2, #1
 8020b1e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8020b22:	4313      	orrs	r3, r2
 8020b24:	bf0c      	ite	eq
 8020b26:	2301      	moveq	r3, #1
 8020b28:	2300      	movne	r3, #0
 8020b2a:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8020b2e:	e7dc      	b.n	8020aea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 8020b30:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8020b34:	b29b      	uxth	r3, r3
 8020b36:	2b7f      	cmp	r3, #127	; 0x7f
 8020b38:	d804      	bhi.n	8020b44 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 8020b3a:	4639      	mov	r1, r7
 8020b3c:	4620      	mov	r0, r4
 8020b3e:	f7ff fd01 	bl	8020544 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8020b42:	e7e6      	b.n	8020b12 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8020b44:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8020b48:	2b00      	cmp	r3, #0
 8020b4a:	d0e3      	beq.n	8020b14 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8020b4c:	f640 1302 	movw	r3, #2306	; 0x902
 8020b50:	429d      	cmp	r5, r3
 8020b52:	d1df      	bne.n	8020b14 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8020b54:	4601      	mov	r1, r0
 8020b56:	4620      	mov	r0, r4
 8020b58:	f7ff fcc5 	bl	80204e6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8020b5c:	e7d9      	b.n	8020b12 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8020b5e:	bf00      	nop
 8020b60:	08033890 	.word	0x08033890
 8020b64:	08033b02 	.word	0x08033b02
 8020b68:	08033899 	.word	0x08033899

08020b6c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8020b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020b70:	461e      	mov	r6, r3
 8020b72:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8020b74:	4604      	mov	r4, r0
 8020b76:	4617      	mov	r7, r2
 8020b78:	b92b      	cbnz	r3, 8020b86 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 8020b7a:	4b26      	ldr	r3, [pc, #152]	; (8020c14 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 8020b7c:	4a26      	ldr	r2, [pc, #152]	; (8020c18 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 8020b7e:	4827      	ldr	r0, [pc, #156]	; (8020c1c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 8020b80:	21c0      	movs	r1, #192	; 0xc0
 8020b82:	f00d fb71 	bl	802e268 <__assert_func>
 8020b86:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8020b88:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8020b8c:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 8020b90:	f7ed feee 	bl	800e970 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8020b94:	4605      	mov	r5, r0
 8020b96:	b918      	cbnz	r0, 8020ba0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 8020b98:	6030      	str	r0, [r6, #0]
 8020b9a:	4628      	mov	r0, r5
 8020b9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020ba0:	683b      	ldr	r3, [r7, #0]
 8020ba2:	4601      	mov	r1, r0
 8020ba4:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8020ba8:	4638      	mov	r0, r7
 8020baa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8020bae:	47c8      	blx	r9
 8020bb0:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8020bb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8020bb8:	4602      	mov	r2, r0
 8020bba:	6030      	str	r0, [r6, #0]
 8020bbc:	d213      	bcs.n	8020be6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 8020bbe:	4643      	mov	r3, r8
 8020bc0:	4639      	mov	r1, r7
 8020bc2:	4620      	mov	r0, r4
 8020bc4:	f7ff fdd8 	bl	8020778 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8020bc8:	6030      	str	r0, [r6, #0]
 8020bca:	6833      	ldr	r3, [r6, #0]
 8020bcc:	b143      	cbz	r3, 8020be0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 8020bce:	7b5a      	ldrb	r2, [r3, #13]
 8020bd0:	7a9b      	ldrb	r3, [r3, #10]
 8020bd2:	0052      	lsls	r2, r2, #1
 8020bd4:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8020bd8:	4313      	orrs	r3, r2
 8020bda:	bf0c      	ite	eq
 8020bdc:	2301      	moveq	r3, #1
 8020bde:	2300      	movne	r3, #0
 8020be0:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8020be4:	e7d9      	b.n	8020b9a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 8020be6:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8020bea:	b29b      	uxth	r3, r3
 8020bec:	2b7f      	cmp	r3, #127	; 0x7f
 8020bee:	d804      	bhi.n	8020bfa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 8020bf0:	4639      	mov	r1, r7
 8020bf2:	4620      	mov	r0, r4
 8020bf4:	f7ff fca6 	bl	8020544 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8020bf8:	e7e6      	b.n	8020bc8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 8020bfa:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8020bfe:	2b00      	cmp	r3, #0
 8020c00:	d0e3      	beq.n	8020bca <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 8020c02:	f640 1302 	movw	r3, #2306	; 0x902
 8020c06:	429d      	cmp	r5, r3
 8020c08:	d1df      	bne.n	8020bca <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 8020c0a:	4601      	mov	r1, r0
 8020c0c:	4620      	mov	r0, r4
 8020c0e:	f7ff fc6a 	bl	80204e6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8020c12:	e7d9      	b.n	8020bc8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 8020c14:	08033890 	.word	0x08033890
 8020c18:	08033b02 	.word	0x08033b02
 8020c1c:	08033899 	.word	0x08033899

08020c20 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8020c20:	b510      	push	{r4, lr}
 8020c22:	4604      	mov	r4, r0
 8020c24:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 8020c26:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8020c28:	b9d9      	cbnz	r1, 8020c62 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x42>
 8020c2a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8020c2c:	2b0a      	cmp	r3, #10
 8020c2e:	d036      	beq.n	8020c9e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 8020c30:	4620      	mov	r0, r4
 8020c32:	f7ff fc21 	bl	8020478 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8020c36:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8020c38:	2b09      	cmp	r3, #9
 8020c3a:	d906      	bls.n	8020c4a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2a>
 8020c3c:	4b18      	ldr	r3, [pc, #96]	; (8020ca0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x80>)
 8020c3e:	4a19      	ldr	r2, [pc, #100]	; (8020ca4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 8020c40:	4819      	ldr	r0, [pc, #100]	; (8020ca8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 8020c42:	f44f 7182 	mov.w	r1, #260	; 0x104
 8020c46:	f00d fb0f 	bl	802e268 <__assert_func>
 8020c4a:	1c5a      	adds	r2, r3, #1
 8020c4c:	8622      	strh	r2, [r4, #48]	; 0x30
 8020c4e:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8020c50:	4413      	add	r3, r2
 8020c52:	b29b      	uxth	r3, r3
 8020c54:	2b09      	cmp	r3, #9
 8020c56:	bf88      	it	hi
 8020c58:	3b0a      	subhi	r3, #10
 8020c5a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8020c5e:	8358      	strh	r0, [r3, #26]
 8020c60:	e7e3      	b.n	8020c2a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xa>
 8020c62:	2b0a      	cmp	r3, #10
 8020c64:	d01b      	beq.n	8020c9e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 8020c66:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8020c68:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8020c6c:	3901      	subs	r1, #1
 8020c6e:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 8020c70:	8721      	strh	r1, [r4, #56]	; 0x38
 8020c72:	1c51      	adds	r1, r2, #1
 8020c74:	b289      	uxth	r1, r1
 8020c76:	2901      	cmp	r1, #1
 8020c78:	bf8a      	itet	hi
 8020c7a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8020c7e:	86e1      	strhls	r1, [r4, #54]	; 0x36
 8020c80:	86e2      	strhhi	r2, [r4, #54]	; 0x36
 8020c82:	2b09      	cmp	r3, #9
 8020c84:	d8da      	bhi.n	8020c3c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1c>
 8020c86:	1c5a      	adds	r2, r3, #1
 8020c88:	8622      	strh	r2, [r4, #48]	; 0x30
 8020c8a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8020c8c:	4413      	add	r3, r2
 8020c8e:	b29b      	uxth	r3, r3
 8020c90:	2b09      	cmp	r3, #9
 8020c92:	bf88      	it	hi
 8020c94:	3b0a      	subhi	r3, #10
 8020c96:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8020c9a:	8358      	strh	r0, [r3, #26]
 8020c9c:	e7c2      	b.n	8020c24 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8020c9e:	bd10      	pop	{r4, pc}
 8020ca0:	080338c5 	.word	0x080338c5
 8020ca4:	08033c58 	.word	0x08033c58
 8020ca8:	08033899 	.word	0x08033899

08020cac <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8020cac:	b538      	push	{r3, r4, r5, lr}
 8020cae:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 8020cb0:	4604      	mov	r4, r0
 8020cb2:	b92a      	cbnz	r2, 8020cc0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 8020cb4:	4b13      	ldr	r3, [pc, #76]	; (8020d04 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 8020cb6:	4a14      	ldr	r2, [pc, #80]	; (8020d08 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 8020cb8:	4814      	ldr	r0, [pc, #80]	; (8020d0c <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 8020cba:	21d5      	movs	r1, #213	; 0xd5
 8020cbc:	f00d fad4 	bl	802e268 <__assert_func>
 8020cc0:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8020cc2:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8020cc6:	3a01      	subs	r2, #1
 8020cc8:	8b4d      	ldrh	r5, [r1, #26]
 8020cca:	8602      	strh	r2, [r0, #48]	; 0x30
 8020ccc:	1c5a      	adds	r2, r3, #1
 8020cce:	b292      	uxth	r2, r2
 8020cd0:	2a09      	cmp	r2, #9
 8020cd2:	bf86      	itte	hi
 8020cd4:	3b09      	subhi	r3, #9
 8020cd6:	85c3      	strhhi	r3, [r0, #46]	; 0x2e
 8020cd8:	85c2      	strhls	r2, [r0, #46]	; 0x2e
 8020cda:	f7ff ffa1 	bl	8020c20 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8020cde:	8b23      	ldrh	r3, [r4, #24]
 8020ce0:	2b01      	cmp	r3, #1
 8020ce2:	bf9c      	itt	ls
 8020ce4:	3301      	addls	r3, #1
 8020ce6:	8323      	strhls	r3, [r4, #24]
 8020ce8:	8ae3      	ldrh	r3, [r4, #22]
 8020cea:	b90b      	cbnz	r3, 8020cf0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 8020cec:	2302      	movs	r3, #2
 8020cee:	82e3      	strh	r3, [r4, #22]
 8020cf0:	8ae3      	ldrh	r3, [r4, #22]
 8020cf2:	3b01      	subs	r3, #1
 8020cf4:	b29b      	uxth	r3, r3
 8020cf6:	82e3      	strh	r3, [r4, #22]
 8020cf8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020cfc:	4628      	mov	r0, r5
 8020cfe:	8265      	strh	r5, [r4, #18]
 8020d00:	bd38      	pop	{r3, r4, r5, pc}
 8020d02:	bf00      	nop
 8020d04:	08033890 	.word	0x08033890
 8020d08:	08033bad 	.word	0x08033bad
 8020d0c:	08033899 	.word	0x08033899

08020d10 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8020d10:	b538      	push	{r3, r4, r5, lr}
 8020d12:	428a      	cmp	r2, r1
 8020d14:	8e04      	ldrh	r4, [r0, #48]	; 0x30
 8020d16:	d90c      	bls.n	8020d32 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 8020d18:	b92c      	cbnz	r4, 8020d26 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 8020d1a:	4b1c      	ldr	r3, [pc, #112]	; (8020d8c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 8020d1c:	4a1c      	ldr	r2, [pc, #112]	; (8020d90 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 8020d1e:	21e1      	movs	r1, #225	; 0xe1
 8020d20:	481c      	ldr	r0, [pc, #112]	; (8020d94 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 8020d22:	f00d faa1 	bl	802e268 <__assert_func>
 8020d26:	3c01      	subs	r4, #1
 8020d28:	8604      	strh	r4, [r0, #48]	; 0x30
 8020d2a:	4b1b      	ldr	r3, [pc, #108]	; (8020d98 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 8020d2c:	4a1b      	ldr	r2, [pc, #108]	; (8020d9c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 8020d2e:	21c5      	movs	r1, #197	; 0xc5
 8020d30:	e7f6      	b.n	8020d20 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8020d32:	428c      	cmp	r4, r1
 8020d34:	d203      	bcs.n	8020d3e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 8020d36:	4b1a      	ldr	r3, [pc, #104]	; (8020da0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 8020d38:	4a1a      	ldr	r2, [pc, #104]	; (8020da4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 8020d3a:	21cb      	movs	r1, #203	; 0xcb
 8020d3c:	e7f0      	b.n	8020d20 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8020d3e:	1a64      	subs	r4, r4, r1
 8020d40:	8604      	strh	r4, [r0, #48]	; 0x30
 8020d42:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8020d44:	4421      	add	r1, r4
 8020d46:	b289      	uxth	r1, r1
 8020d48:	2909      	cmp	r1, #9
 8020d4a:	bf88      	it	hi
 8020d4c:	390a      	subhi	r1, #10
 8020d4e:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8020d50:	250a      	movs	r5, #10
 8020d52:	b1ba      	cbz	r2, 8020d84 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 8020d54:	3a01      	subs	r2, #1
 8020d56:	8e01      	ldrh	r1, [r0, #48]	; 0x30
 8020d58:	b292      	uxth	r2, r2
 8020d5a:	2909      	cmp	r1, #9
 8020d5c:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8020d60:	d903      	bls.n	8020d6a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 8020d62:	4b11      	ldr	r3, [pc, #68]	; (8020da8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 8020d64:	4a11      	ldr	r2, [pc, #68]	; (8020dac <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 8020d66:	21e6      	movs	r1, #230	; 0xe6
 8020d68:	e7da      	b.n	8020d20 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8020d6a:	3101      	adds	r1, #1
 8020d6c:	8601      	strh	r1, [r0, #48]	; 0x30
 8020d6e:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 8020d70:	b901      	cbnz	r1, 8020d74 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 8020d72:	85c5      	strh	r5, [r0, #46]	; 0x2e
 8020d74:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 8020d76:	3901      	subs	r1, #1
 8020d78:	b289      	uxth	r1, r1
 8020d7a:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8020d7c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8020d80:	834c      	strh	r4, [r1, #26]
 8020d82:	e7e6      	b.n	8020d52 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 8020d84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020d88:	f7ff bf4a 	b.w	8020c20 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8020d8c:	08033890 	.word	0x08033890
 8020d90:	08033986 	.word	0x08033986
 8020d94:	08033899 	.word	0x08033899
 8020d98:	080338d1 	.word	0x080338d1
 8020d9c:	08033a30 	.word	0x08033a30
 8020da0:	080338df 	.word	0x080338df
 8020da4:	08033d07 	.word	0x08033d07
 8020da8:	080338eb 	.word	0x080338eb
 8020dac:	080338fe 	.word	0x080338fe

08020db0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8020db0:	3a01      	subs	r2, #1
 8020db2:	b570      	push	{r4, r5, r6, lr}
 8020db4:	b292      	uxth	r2, r2
 8020db6:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8020dba:	42b2      	cmp	r2, r6
 8020dbc:	d019      	beq.n	8020df2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 8020dbe:	8b04      	ldrh	r4, [r0, #24]
 8020dc0:	f831 5b02 	ldrh.w	r5, [r1], #2
 8020dc4:	4294      	cmp	r4, r2
 8020dc6:	d805      	bhi.n	8020dd4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 8020dc8:	4b19      	ldr	r3, [pc, #100]	; (8020e30 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 8020dca:	4a1a      	ldr	r2, [pc, #104]	; (8020e34 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 8020dcc:	481a      	ldr	r0, [pc, #104]	; (8020e38 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 8020dce:	21c5      	movs	r1, #197	; 0xc5
 8020dd0:	f00d fa4a 	bl	802e268 <__assert_func>
 8020dd4:	8ac4      	ldrh	r4, [r0, #22]
 8020dd6:	4414      	add	r4, r2
 8020dd8:	b2a4      	uxth	r4, r4
 8020dda:	2c01      	cmp	r4, #1
 8020ddc:	bf88      	it	hi
 8020dde:	3c02      	subhi	r4, #2
 8020de0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8020de4:	3a01      	subs	r2, #1
 8020de6:	8a64      	ldrh	r4, [r4, #18]
 8020de8:	42ac      	cmp	r4, r5
 8020dea:	b292      	uxth	r2, r2
 8020dec:	d0e5      	beq.n	8020dba <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 8020dee:	2000      	movs	r0, #0
 8020df0:	bd70      	pop	{r4, r5, r6, pc}
 8020df2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8020df6:	2400      	movs	r4, #0
 8020df8:	4413      	add	r3, r2
 8020dfa:	b2a2      	uxth	r2, r4
 8020dfc:	429a      	cmp	r2, r3
 8020dfe:	da14      	bge.n	8020e2a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 8020e00:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 8020e02:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8020e06:	4296      	cmp	r6, r2
 8020e08:	d802      	bhi.n	8020e10 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 8020e0a:	4b09      	ldr	r3, [pc, #36]	; (8020e30 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 8020e0c:	4a0b      	ldr	r2, [pc, #44]	; (8020e3c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 8020e0e:	e7dd      	b.n	8020dcc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 8020e10:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
 8020e12:	4432      	add	r2, r6
 8020e14:	b292      	uxth	r2, r2
 8020e16:	2a09      	cmp	r2, #9
 8020e18:	bf88      	it	hi
 8020e1a:	3a0a      	subhi	r2, #10
 8020e1c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8020e20:	3401      	adds	r4, #1
 8020e22:	8b52      	ldrh	r2, [r2, #26]
 8020e24:	42aa      	cmp	r2, r5
 8020e26:	d0e8      	beq.n	8020dfa <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 8020e28:	e7e1      	b.n	8020dee <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 8020e2a:	2001      	movs	r0, #1
 8020e2c:	e7e0      	b.n	8020df0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 8020e2e:	bf00      	nop
 8020e30:	080338d1 	.word	0x080338d1
 8020e34:	08033d8b 	.word	0x08033d8b
 8020e38:	08033899 	.word	0x08033899
 8020e3c:	08033a30 	.word	0x08033a30

08020e40 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8020e40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e44:	4605      	mov	r5, r0
 8020e46:	4616      	mov	r6, r2
 8020e48:	1c8c      	adds	r4, r1, #2
 8020e4a:	8809      	ldrh	r1, [r1, #0]
 8020e4c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8020e50:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8020e54:	42b3      	cmp	r3, r6
 8020e56:	d124      	bne.n	8020ea2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8020e58:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8020e5c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8020e60:	f001 070f 	and.w	r7, r1, #15
 8020e64:	f8cd 8000 	str.w	r8, [sp]
 8020e68:	464b      	mov	r3, r9
 8020e6a:	4652      	mov	r2, sl
 8020e6c:	4621      	mov	r1, r4
 8020e6e:	4628      	mov	r0, r5
 8020e70:	f7ff ff9e 	bl	8020db0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8020e74:	4683      	mov	fp, r0
 8020e76:	b168      	cbz	r0, 8020e94 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8020e78:	eb0a 0109 	add.w	r1, sl, r9
 8020e7c:	4441      	add	r1, r8
 8020e7e:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8020e82:	463a      	mov	r2, r7
 8020e84:	4649      	mov	r1, r9
 8020e86:	4628      	mov	r0, r5
 8020e88:	f7ff ff42 	bl	8020d10 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8020e8c:	4658      	mov	r0, fp
 8020e8e:	b003      	add	sp, #12
 8020e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e94:	eb07 010a 	add.w	r1, r7, sl
 8020e98:	4449      	add	r1, r9
 8020e9a:	4441      	add	r1, r8
 8020e9c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8020ea0:	e7d2      	b.n	8020e48 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8020ea2:	f04f 0b00 	mov.w	fp, #0
 8020ea6:	e7f1      	b.n	8020e8c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08020ea8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8020ea8:	b570      	push	{r4, r5, r6, lr}
 8020eaa:	8810      	ldrh	r0, [r2, #0]
 8020eac:	4298      	cmp	r0, r3
 8020eae:	d817      	bhi.n	8020ee0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8020eb0:	1e48      	subs	r0, r1, #1
 8020eb2:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8020eb6:	4298      	cmp	r0, r3
 8020eb8:	d312      	bcc.n	8020ee0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8020eba:	2400      	movs	r4, #0
 8020ebc:	428c      	cmp	r4, r1
 8020ebe:	d20f      	bcs.n	8020ee0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8020ec0:	1860      	adds	r0, r4, r1
 8020ec2:	1040      	asrs	r0, r0, #1
 8020ec4:	0085      	lsls	r5, r0, #2
 8020ec6:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8020eca:	42b3      	cmp	r3, r6
 8020ecc:	d902      	bls.n	8020ed4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8020ece:	3001      	adds	r0, #1
 8020ed0:	b284      	uxth	r4, r0
 8020ed2:	e7f3      	b.n	8020ebc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8020ed4:	d201      	bcs.n	8020eda <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8020ed6:	b281      	uxth	r1, r0
 8020ed8:	e7f0      	b.n	8020ebc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8020eda:	442a      	add	r2, r5
 8020edc:	8850      	ldrh	r0, [r2, #2]
 8020ede:	bd70      	pop	{r4, r5, r6, pc}
 8020ee0:	2000      	movs	r0, #0
 8020ee2:	e7fc      	b.n	8020ede <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08020ee4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8020ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020ee8:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8020eea:	886f      	ldrh	r7, [r5, #2]
 8020eec:	4604      	mov	r4, r0
 8020eee:	087f      	lsrs	r7, r7, #1
 8020ef0:	260b      	movs	r6, #11
 8020ef2:	3e01      	subs	r6, #1
 8020ef4:	d01b      	beq.n	8020f2e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 8020ef6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8020ef8:	b92b      	cbnz	r3, 8020f06 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 8020efa:	4b0e      	ldr	r3, [pc, #56]	; (8020f34 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 8020efc:	4a0e      	ldr	r2, [pc, #56]	; (8020f38 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 8020efe:	480f      	ldr	r0, [pc, #60]	; (8020f3c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 8020f00:	21c0      	movs	r1, #192	; 0xc0
 8020f02:	f00d f9b1 	bl	802e268 <__assert_func>
 8020f06:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8020f08:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8020f0c:	462a      	mov	r2, r5
 8020f0e:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 8020f12:	4639      	mov	r1, r7
 8020f14:	4643      	mov	r3, r8
 8020f16:	4620      	mov	r0, r4
 8020f18:	f7ff ffc6 	bl	8020ea8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8020f1c:	b138      	cbz	r0, 8020f2e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 8020f1e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8020f22:	4642      	mov	r2, r8
 8020f24:	4620      	mov	r0, r4
 8020f26:	f7ff ff8b 	bl	8020e40 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8020f2a:	2800      	cmp	r0, #0
 8020f2c:	d1e1      	bne.n	8020ef2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8020f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020f32:	bf00      	nop
 8020f34:	08033890 	.word	0x08033890
 8020f38:	08033b02 	.word	0x08033b02
 8020f3c:	08033899 	.word	0x08033899

08020f40 <_ZN8touchgfx7Unicode6strlenEPKt>:
 8020f40:	4602      	mov	r2, r0
 8020f42:	b148      	cbz	r0, 8020f58 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8020f44:	2300      	movs	r3, #0
 8020f46:	b298      	uxth	r0, r3
 8020f48:	3301      	adds	r3, #1
 8020f4a:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8020f4e:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 8020f52:	2900      	cmp	r1, #0
 8020f54:	d1f7      	bne.n	8020f46 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 8020f56:	4770      	bx	lr
 8020f58:	4770      	bx	lr

08020f5a <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 8020f5a:	b530      	push	{r4, r5, lr}
 8020f5c:	4604      	mov	r4, r0
 8020f5e:	b159      	cbz	r1, 8020f78 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 8020f60:	b148      	cbz	r0, 8020f76 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8020f62:	2300      	movs	r3, #0
 8020f64:	b298      	uxth	r0, r3
 8020f66:	4282      	cmp	r2, r0
 8020f68:	d905      	bls.n	8020f76 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8020f6a:	5ccd      	ldrb	r5, [r1, r3]
 8020f6c:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8020f70:	3301      	adds	r3, #1
 8020f72:	2d00      	cmp	r5, #0
 8020f74:	d1f6      	bne.n	8020f64 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 8020f76:	bd30      	pop	{r4, r5, pc}
 8020f78:	4608      	mov	r0, r1
 8020f7a:	e7fc      	b.n	8020f76 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

08020f7c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 8020f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020f7e:	b08b      	sub	sp, #44	; 0x2c
 8020f80:	468c      	mov	ip, r1
 8020f82:	2100      	movs	r1, #0
 8020f84:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8020f88:	ae01      	add	r6, sp, #4
 8020f8a:	211f      	movs	r1, #31
 8020f8c:	fbb0 f7f3 	udiv	r7, r0, r3
 8020f90:	fb03 0517 	mls	r5, r3, r7, r0
 8020f94:	b2ec      	uxtb	r4, r5
 8020f96:	2d09      	cmp	r5, #9
 8020f98:	bfd4      	ite	le
 8020f9a:	3430      	addle	r4, #48	; 0x30
 8020f9c:	3457      	addgt	r4, #87	; 0x57
 8020f9e:	b2e4      	uxtb	r4, r4
 8020fa0:	558c      	strb	r4, [r1, r6]
 8020fa2:	4638      	mov	r0, r7
 8020fa4:	1e4c      	subs	r4, r1, #1
 8020fa6:	b92f      	cbnz	r7, 8020fb4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 8020fa8:	4431      	add	r1, r6
 8020faa:	4660      	mov	r0, ip
 8020fac:	f7ff ffd5 	bl	8020f5a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8020fb0:	b00b      	add	sp, #44	; 0x2c
 8020fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020fb4:	4621      	mov	r1, r4
 8020fb6:	e7e9      	b.n	8020f8c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

08020fb8 <_ZN8touchgfx7Unicode4itoaElPtti>:
 8020fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020fba:	4607      	mov	r7, r0
 8020fbc:	b08b      	sub	sp, #44	; 0x2c
 8020fbe:	4608      	mov	r0, r1
 8020fc0:	b341      	cbz	r1, 8021014 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8020fc2:	1e99      	subs	r1, r3, #2
 8020fc4:	290e      	cmp	r1, #14
 8020fc6:	d825      	bhi.n	8021014 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8020fc8:	2100      	movs	r1, #0
 8020fca:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8020fce:	463c      	mov	r4, r7
 8020fd0:	261f      	movs	r6, #31
 8020fd2:	f10d 0c04 	add.w	ip, sp, #4
 8020fd6:	fb94 fef3 	sdiv	lr, r4, r3
 8020fda:	fb03 441e 	mls	r4, r3, lr, r4
 8020fde:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 8020fe2:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 8020fe6:	b2ec      	uxtb	r4, r5
 8020fe8:	2d09      	cmp	r5, #9
 8020fea:	bfd4      	ite	le
 8020fec:	3430      	addle	r4, #48	; 0x30
 8020fee:	3457      	addgt	r4, #87	; 0x57
 8020ff0:	b2e4      	uxtb	r4, r4
 8020ff2:	f80c 4006 	strb.w	r4, [ip, r6]
 8020ff6:	4674      	mov	r4, lr
 8020ff8:	1e71      	subs	r1, r6, #1
 8020ffa:	b96c      	cbnz	r4, 8021018 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 8020ffc:	2f00      	cmp	r7, #0
 8020ffe:	da05      	bge.n	802100c <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 8021000:	ab0a      	add	r3, sp, #40	; 0x28
 8021002:	4419      	add	r1, r3
 8021004:	232d      	movs	r3, #45	; 0x2d
 8021006:	f801 3c24 	strb.w	r3, [r1, #-36]
 802100a:	1eb1      	subs	r1, r6, #2
 802100c:	3101      	adds	r1, #1
 802100e:	4461      	add	r1, ip
 8021010:	f7ff ffa3 	bl	8020f5a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8021014:	b00b      	add	sp, #44	; 0x2c
 8021016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021018:	460e      	mov	r6, r1
 802101a:	e7dc      	b.n	8020fd6 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0802101c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 802101c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021020:	4691      	mov	r9, r2
 8021022:	b085      	sub	sp, #20
 8021024:	6802      	ldr	r2, [r0, #0]
 8021026:	9201      	str	r2, [sp, #4]
 8021028:	4688      	mov	r8, r1
 802102a:	4683      	mov	fp, r0
 802102c:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 8021030:	9103      	str	r1, [sp, #12]
 8021032:	4610      	mov	r0, r2
 8021034:	461c      	mov	r4, r3
 8021036:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 802103a:	9302      	str	r3, [sp, #8]
 802103c:	f7ff ff80 	bl	8020f40 <_ZN8touchgfx7Unicode6strlenEPKt>
 8021040:	f1b8 0f00 	cmp.w	r8, #0
 8021044:	bf0c      	ite	eq
 8021046:	4684      	moveq	ip, r0
 8021048:	f100 0c01 	addne.w	ip, r0, #1
 802104c:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 8021050:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8021054:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8021056:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8021058:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 802105c:	9903      	ldr	r1, [sp, #12]
 802105e:	fa1f fc8c 	uxth.w	ip, ip
 8021062:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8021066:	d041      	beq.n	80210ec <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8021068:	d834      	bhi.n	80210d4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 802106a:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 802106e:	d059      	beq.n	8021124 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 8021070:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 8021074:	d03a      	beq.n	80210ec <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8021076:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 802107a:	d034      	beq.n	80210e6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 802107c:	2400      	movs	r4, #0
 802107e:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8021082:	3a01      	subs	r2, #1
 8021084:	b169      	cbz	r1, 80210a2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8021086:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021088:	458c      	cmp	ip, r1
 802108a:	da09      	bge.n	80210a0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 802108c:	eba1 010c 	sub.w	r1, r1, ip
 8021090:	b289      	uxth	r1, r1
 8021092:	b933      	cbnz	r3, 80210a2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8021094:	2e00      	cmp	r6, #0
 8021096:	d051      	beq.n	802113c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8021098:	2800      	cmp	r0, #0
 802109a:	d04f      	beq.n	802113c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 802109c:	440c      	add	r4, r1
 802109e:	b2a4      	uxth	r4, r4
 80210a0:	2100      	movs	r1, #0
 80210a2:	682b      	ldr	r3, [r5, #0]
 80210a4:	4293      	cmp	r3, r2
 80210a6:	da07      	bge.n	80210b8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 80210a8:	f1b8 0f00 	cmp.w	r8, #0
 80210ac:	d004      	beq.n	80210b8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 80210ae:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 80210b2:	682b      	ldr	r3, [r5, #0]
 80210b4:	3301      	adds	r3, #1
 80210b6:	602b      	str	r3, [r5, #0]
 80210b8:	2730      	movs	r7, #48	; 0x30
 80210ba:	2c00      	cmp	r4, #0
 80210bc:	d04e      	beq.n	802115c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 80210be:	682e      	ldr	r6, [r5, #0]
 80210c0:	3c01      	subs	r4, #1
 80210c2:	42b2      	cmp	r2, r6
 80210c4:	b2a4      	uxth	r4, r4
 80210c6:	dd49      	ble.n	802115c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 80210c8:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 80210cc:	682b      	ldr	r3, [r5, #0]
 80210ce:	3301      	adds	r3, #1
 80210d0:	602b      	str	r3, [r5, #0]
 80210d2:	e7f2      	b.n	80210ba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 80210d4:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 80210d8:	d01d      	beq.n	8021116 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 80210da:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 80210de:	d002      	beq.n	80210e6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 80210e0:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 80210e4:	e7c9      	b.n	802107a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 80210e6:	4684      	mov	ip, r0
 80210e8:	f04f 0800 	mov.w	r8, #0
 80210ec:	2c00      	cmp	r4, #0
 80210ee:	d0c6      	beq.n	802107e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 80210f0:	b947      	cbnz	r7, 8021104 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 80210f2:	2801      	cmp	r0, #1
 80210f4:	d106      	bne.n	8021104 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 80210f6:	8814      	ldrh	r4, [r2, #0]
 80210f8:	2c30      	cmp	r4, #48	; 0x30
 80210fa:	bf02      	ittt	eq
 80210fc:	3202      	addeq	r2, #2
 80210fe:	f8cb 2000 	streq.w	r2, [fp]
 8021102:	4638      	moveq	r0, r7
 8021104:	45bc      	cmp	ip, r7
 8021106:	da14      	bge.n	8021132 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 8021108:	b2bf      	uxth	r7, r7
 802110a:	eba7 040c 	sub.w	r4, r7, ip
 802110e:	b2a4      	uxth	r4, r4
 8021110:	46bc      	mov	ip, r7
 8021112:	2600      	movs	r6, #0
 8021114:	e7b3      	b.n	802107e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8021116:	4684      	mov	ip, r0
 8021118:	b16c      	cbz	r4, 8021136 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 802111a:	42b8      	cmp	r0, r7
 802111c:	dd00      	ble.n	8021120 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 802111e:	b2b8      	uxth	r0, r7
 8021120:	2400      	movs	r4, #0
 8021122:	e003      	b.n	802112c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 8021124:	f04f 0c01 	mov.w	ip, #1
 8021128:	2400      	movs	r4, #0
 802112a:	4660      	mov	r0, ip
 802112c:	4626      	mov	r6, r4
 802112e:	46a0      	mov	r8, r4
 8021130:	e7a5      	b.n	802107e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8021132:	2400      	movs	r4, #0
 8021134:	e7ed      	b.n	8021112 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 8021136:	4626      	mov	r6, r4
 8021138:	46a0      	mov	r8, r4
 802113a:	e7a0      	b.n	802107e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 802113c:	2900      	cmp	r1, #0
 802113e:	d0b0      	beq.n	80210a2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8021140:	2720      	movs	r7, #32
 8021142:	682e      	ldr	r6, [r5, #0]
 8021144:	2900      	cmp	r1, #0
 8021146:	d0ac      	beq.n	80210a2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8021148:	3901      	subs	r1, #1
 802114a:	4296      	cmp	r6, r2
 802114c:	b289      	uxth	r1, r1
 802114e:	daa7      	bge.n	80210a0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8021150:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8021154:	682b      	ldr	r3, [r5, #0]
 8021156:	3301      	adds	r3, #1
 8021158:	602b      	str	r3, [r5, #0]
 802115a:	e7f2      	b.n	8021142 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 802115c:	b188      	cbz	r0, 8021182 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 802115e:	682b      	ldr	r3, [r5, #0]
 8021160:	3801      	subs	r0, #1
 8021162:	429a      	cmp	r2, r3
 8021164:	b280      	uxth	r0, r0
 8021166:	dd0c      	ble.n	8021182 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8021168:	f8db 3000 	ldr.w	r3, [fp]
 802116c:	1c9c      	adds	r4, r3, #2
 802116e:	f8cb 4000 	str.w	r4, [fp]
 8021172:	881c      	ldrh	r4, [r3, #0]
 8021174:	682b      	ldr	r3, [r5, #0]
 8021176:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 802117a:	682b      	ldr	r3, [r5, #0]
 802117c:	3301      	adds	r3, #1
 802117e:	602b      	str	r3, [r5, #0]
 8021180:	e7ec      	b.n	802115c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8021182:	2620      	movs	r6, #32
 8021184:	b151      	cbz	r1, 802119c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8021186:	6828      	ldr	r0, [r5, #0]
 8021188:	3901      	subs	r1, #1
 802118a:	4282      	cmp	r2, r0
 802118c:	b289      	uxth	r1, r1
 802118e:	dd05      	ble.n	802119c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8021190:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 8021194:	682b      	ldr	r3, [r5, #0]
 8021196:	3301      	adds	r3, #1
 8021198:	602b      	str	r3, [r5, #0]
 802119a:	e7f3      	b.n	8021184 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 802119c:	b005      	add	sp, #20
 802119e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080211a2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 80211a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80211a6:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 80211aa:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 80211ae:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 80211b2:	2400      	movs	r4, #0
 80211b4:	8014      	strh	r4, [r2, #0]
 80211b6:	701c      	strb	r4, [r3, #0]
 80211b8:	f888 4000 	strb.w	r4, [r8]
 80211bc:	f88c 4000 	strb.w	r4, [ip]
 80211c0:	f88e 4000 	strb.w	r4, [lr]
 80211c4:	703c      	strb	r4, [r7, #0]
 80211c6:	6804      	ldr	r4, [r0, #0]
 80211c8:	b1a4      	cbz	r4, 80211f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 80211ca:	8824      	ldrh	r4, [r4, #0]
 80211cc:	f04f 0901 	mov.w	r9, #1
 80211d0:	b314      	cbz	r4, 8021218 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 80211d2:	2c2b      	cmp	r4, #43	; 0x2b
 80211d4:	d001      	beq.n	80211da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 80211d6:	2c20      	cmp	r4, #32
 80211d8:	d110      	bne.n	80211fc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 80211da:	8014      	strh	r4, [r2, #0]
 80211dc:	6804      	ldr	r4, [r0, #0]
 80211de:	b10c      	cbz	r4, 80211e4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 80211e0:	3402      	adds	r4, #2
 80211e2:	6004      	str	r4, [r0, #0]
 80211e4:	680c      	ldr	r4, [r1, #0]
 80211e6:	b10c      	cbz	r4, 80211ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 80211e8:	3401      	adds	r4, #1
 80211ea:	600c      	str	r4, [r1, #0]
 80211ec:	6804      	ldr	r4, [r0, #0]
 80211ee:	b17c      	cbz	r4, 8021210 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 80211f0:	8824      	ldrh	r4, [r4, #0]
 80211f2:	e7ed      	b.n	80211d0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 80211f4:	680c      	ldr	r4, [r1, #0]
 80211f6:	b17c      	cbz	r4, 8021218 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 80211f8:	7824      	ldrb	r4, [r4, #0]
 80211fa:	e7e7      	b.n	80211cc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 80211fc:	2c2d      	cmp	r4, #45	; 0x2d
 80211fe:	d102      	bne.n	8021206 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 8021200:	f883 9000 	strb.w	r9, [r3]
 8021204:	e7ea      	b.n	80211dc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8021206:	2c23      	cmp	r4, #35	; 0x23
 8021208:	d107      	bne.n	802121a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 802120a:	f888 9000 	strb.w	r9, [r8]
 802120e:	e7e5      	b.n	80211dc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8021210:	680c      	ldr	r4, [r1, #0]
 8021212:	b10c      	cbz	r4, 8021218 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8021214:	7824      	ldrb	r4, [r4, #0]
 8021216:	e7db      	b.n	80211d0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8021218:	2400      	movs	r4, #0
 802121a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 802121e:	2b09      	cmp	r3, #9
 8021220:	d901      	bls.n	8021226 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 8021222:	2c2a      	cmp	r4, #42	; 0x2a
 8021224:	d122      	bne.n	802126c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8021226:	2301      	movs	r3, #1
 8021228:	2c30      	cmp	r4, #48	; 0x30
 802122a:	f88e 3000 	strb.w	r3, [lr]
 802122e:	d10d      	bne.n	802124c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8021230:	f88c 3000 	strb.w	r3, [ip]
 8021234:	6803      	ldr	r3, [r0, #0]
 8021236:	b10b      	cbz	r3, 802123c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 8021238:	3302      	adds	r3, #2
 802123a:	6003      	str	r3, [r0, #0]
 802123c:	680b      	ldr	r3, [r1, #0]
 802123e:	b10b      	cbz	r3, 8021244 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 8021240:	3301      	adds	r3, #1
 8021242:	600b      	str	r3, [r1, #0]
 8021244:	6803      	ldr	r3, [r0, #0]
 8021246:	2b00      	cmp	r3, #0
 8021248:	d02f      	beq.n	80212aa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 802124a:	881c      	ldrh	r4, [r3, #0]
 802124c:	2c2a      	cmp	r4, #42	; 0x2a
 802124e:	d135      	bne.n	80212bc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8021250:	f04f 33ff 	mov.w	r3, #4294967295
 8021254:	6033      	str	r3, [r6, #0]
 8021256:	6803      	ldr	r3, [r0, #0]
 8021258:	b10b      	cbz	r3, 802125e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 802125a:	3302      	adds	r3, #2
 802125c:	6003      	str	r3, [r0, #0]
 802125e:	680b      	ldr	r3, [r1, #0]
 8021260:	b10b      	cbz	r3, 8021266 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 8021262:	3301      	adds	r3, #1
 8021264:	600b      	str	r3, [r1, #0]
 8021266:	6803      	ldr	r3, [r0, #0]
 8021268:	b31b      	cbz	r3, 80212b2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 802126a:	881c      	ldrh	r4, [r3, #0]
 802126c:	2c2e      	cmp	r4, #46	; 0x2e
 802126e:	d11a      	bne.n	80212a6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8021270:	2301      	movs	r3, #1
 8021272:	703b      	strb	r3, [r7, #0]
 8021274:	6803      	ldr	r3, [r0, #0]
 8021276:	b10b      	cbz	r3, 802127c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 8021278:	3302      	adds	r3, #2
 802127a:	6003      	str	r3, [r0, #0]
 802127c:	680b      	ldr	r3, [r1, #0]
 802127e:	b10b      	cbz	r3, 8021284 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 8021280:	3301      	adds	r3, #1
 8021282:	600b      	str	r3, [r1, #0]
 8021284:	6803      	ldr	r3, [r0, #0]
 8021286:	2b00      	cmp	r3, #0
 8021288:	d036      	beq.n	80212f8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 802128a:	881b      	ldrh	r3, [r3, #0]
 802128c:	2b2a      	cmp	r3, #42	; 0x2a
 802128e:	d137      	bne.n	8021300 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8021290:	f04f 33ff 	mov.w	r3, #4294967295
 8021294:	602b      	str	r3, [r5, #0]
 8021296:	6803      	ldr	r3, [r0, #0]
 8021298:	b10b      	cbz	r3, 802129e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 802129a:	3302      	adds	r3, #2
 802129c:	6003      	str	r3, [r0, #0]
 802129e:	680b      	ldr	r3, [r1, #0]
 80212a0:	b10b      	cbz	r3, 80212a6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 80212a2:	3301      	adds	r3, #1
 80212a4:	600b      	str	r3, [r1, #0]
 80212a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80212aa:	680c      	ldr	r4, [r1, #0]
 80212ac:	b134      	cbz	r4, 80212bc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 80212ae:	7824      	ldrb	r4, [r4, #0]
 80212b0:	e7cc      	b.n	802124c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 80212b2:	680b      	ldr	r3, [r1, #0]
 80212b4:	2b00      	cmp	r3, #0
 80212b6:	d0f6      	beq.n	80212a6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 80212b8:	781c      	ldrb	r4, [r3, #0]
 80212ba:	e7d7      	b.n	802126c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 80212bc:	2300      	movs	r3, #0
 80212be:	6033      	str	r3, [r6, #0]
 80212c0:	220a      	movs	r2, #10
 80212c2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80212c6:	fa1f f38c 	uxth.w	r3, ip
 80212ca:	2b09      	cmp	r3, #9
 80212cc:	d8ce      	bhi.n	802126c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 80212ce:	6833      	ldr	r3, [r6, #0]
 80212d0:	fb02 c303 	mla	r3, r2, r3, ip
 80212d4:	6033      	str	r3, [r6, #0]
 80212d6:	6803      	ldr	r3, [r0, #0]
 80212d8:	b10b      	cbz	r3, 80212de <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 80212da:	3302      	adds	r3, #2
 80212dc:	6003      	str	r3, [r0, #0]
 80212de:	680b      	ldr	r3, [r1, #0]
 80212e0:	b10b      	cbz	r3, 80212e6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 80212e2:	3301      	adds	r3, #1
 80212e4:	600b      	str	r3, [r1, #0]
 80212e6:	6803      	ldr	r3, [r0, #0]
 80212e8:	b10b      	cbz	r3, 80212ee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 80212ea:	881c      	ldrh	r4, [r3, #0]
 80212ec:	e7e9      	b.n	80212c2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 80212ee:	680c      	ldr	r4, [r1, #0]
 80212f0:	2c00      	cmp	r4, #0
 80212f2:	d0e6      	beq.n	80212c2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 80212f4:	7824      	ldrb	r4, [r4, #0]
 80212f6:	e7e4      	b.n	80212c2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 80212f8:	680b      	ldr	r3, [r1, #0]
 80212fa:	b10b      	cbz	r3, 8021300 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 80212fc:	781b      	ldrb	r3, [r3, #0]
 80212fe:	e7c5      	b.n	802128c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 8021300:	2200      	movs	r2, #0
 8021302:	602a      	str	r2, [r5, #0]
 8021304:	240a      	movs	r4, #10
 8021306:	3b30      	subs	r3, #48	; 0x30
 8021308:	b29e      	uxth	r6, r3
 802130a:	2e09      	cmp	r6, #9
 802130c:	682a      	ldr	r2, [r5, #0]
 802130e:	d813      	bhi.n	8021338 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 8021310:	fb04 3302 	mla	r3, r4, r2, r3
 8021314:	602b      	str	r3, [r5, #0]
 8021316:	6803      	ldr	r3, [r0, #0]
 8021318:	b10b      	cbz	r3, 802131e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 802131a:	3302      	adds	r3, #2
 802131c:	6003      	str	r3, [r0, #0]
 802131e:	680b      	ldr	r3, [r1, #0]
 8021320:	b10b      	cbz	r3, 8021326 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 8021322:	3301      	adds	r3, #1
 8021324:	600b      	str	r3, [r1, #0]
 8021326:	6803      	ldr	r3, [r0, #0]
 8021328:	b10b      	cbz	r3, 802132e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 802132a:	881b      	ldrh	r3, [r3, #0]
 802132c:	e7eb      	b.n	8021306 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 802132e:	680b      	ldr	r3, [r1, #0]
 8021330:	2b00      	cmp	r3, #0
 8021332:	d0e8      	beq.n	8021306 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8021334:	781b      	ldrb	r3, [r3, #0]
 8021336:	e7e6      	b.n	8021306 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8021338:	2a06      	cmp	r2, #6
 802133a:	bfa8      	it	ge
 802133c:	2206      	movge	r2, #6
 802133e:	602a      	str	r2, [r5, #0]
 8021340:	e7b1      	b.n	80212a6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

08021342 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 8021342:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021346:	b0a3      	sub	sp, #140	; 0x8c
 8021348:	2600      	movs	r6, #0
 802134a:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 802134e:	4607      	mov	r7, r0
 8021350:	4688      	mov	r8, r1
 8021352:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8021356:	4631      	mov	r1, r6
 8021358:	2242      	movs	r2, #66	; 0x42
 802135a:	4648      	mov	r0, r9
 802135c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 802135e:	960d      	str	r6, [sp, #52]	; 0x34
 8021360:	f7fe fcd7 	bl	801fd12 <_ZN8touchgfx6memsetEPvhm>
 8021364:	b15f      	cbz	r7, 802137e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 8021366:	f108 3aff 	add.w	sl, r8, #4294967295
 802136a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802136c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802136e:	b152      	cbz	r2, 8021386 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 8021370:	8812      	ldrh	r2, [r2, #0]
 8021372:	b10a      	cbz	r2, 8021378 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8021374:	459a      	cmp	sl, r3
 8021376:	dc2e      	bgt.n	80213d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 8021378:	2200      	movs	r2, #0
 802137a:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 802137e:	4638      	mov	r0, r7
 8021380:	b023      	add	sp, #140	; 0x8c
 8021382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021386:	9a08      	ldr	r2, [sp, #32]
 8021388:	2a00      	cmp	r2, #0
 802138a:	d0f5      	beq.n	8021378 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 802138c:	7812      	ldrb	r2, [r2, #0]
 802138e:	e7f0      	b.n	8021372 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 8021390:	2d00      	cmp	r5, #0
 8021392:	d0ea      	beq.n	802136a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8021394:	782a      	ldrb	r2, [r5, #0]
 8021396:	b142      	cbz	r2, 80213aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 8021398:	2a25      	cmp	r2, #37	; 0x25
 802139a:	d001      	beq.n	80213a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 802139c:	459a      	cmp	sl, r3
 802139e:	dc08      	bgt.n	80213b2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 80213a0:	f1bb 0f00 	cmp.w	fp, #0
 80213a4:	d121      	bne.n	80213ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 80213a6:	2d00      	cmp	r5, #0
 80213a8:	d0df      	beq.n	802136a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80213aa:	782a      	ldrb	r2, [r5, #0]
 80213ac:	f04f 0b00 	mov.w	fp, #0
 80213b0:	e01d      	b.n	80213ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 80213b2:	f1bb 0f00 	cmp.w	fp, #0
 80213b6:	d078      	beq.n	80214aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x168>
 80213b8:	f8bb 2000 	ldrh.w	r2, [fp]
 80213bc:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 80213c0:	f1bb 0f00 	cmp.w	fp, #0
 80213c4:	d002      	beq.n	80213cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 80213c6:	f10b 0202 	add.w	r2, fp, #2
 80213ca:	9209      	str	r2, [sp, #36]	; 0x24
 80213cc:	b10d      	cbz	r5, 80213d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 80213ce:	3501      	adds	r5, #1
 80213d0:	9508      	str	r5, [sp, #32]
 80213d2:	3301      	adds	r3, #1
 80213d4:	930d      	str	r3, [sp, #52]	; 0x34
 80213d6:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 80213da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80213dc:	f1bb 0f00 	cmp.w	fp, #0
 80213e0:	d0d6      	beq.n	8021390 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 80213e2:	f8bb 2000 	ldrh.w	r2, [fp]
 80213e6:	2a00      	cmp	r2, #0
 80213e8:	d1d6      	bne.n	8021398 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 80213ea:	f8bb 2000 	ldrh.w	r2, [fp]
 80213ee:	2a00      	cmp	r2, #0
 80213f0:	d0bb      	beq.n	802136a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80213f2:	459a      	cmp	sl, r3
 80213f4:	ddb9      	ble.n	802136a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80213f6:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 80213fa:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 80213fe:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 8021402:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 8021406:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 802140a:	960e      	str	r6, [sp, #56]	; 0x38
 802140c:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 8021410:	960f      	str	r6, [sp, #60]	; 0x3c
 8021412:	f1bb 0f00 	cmp.w	fp, #0
 8021416:	d002      	beq.n	802141e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 8021418:	f10b 0302 	add.w	r3, fp, #2
 802141c:	9309      	str	r3, [sp, #36]	; 0x24
 802141e:	b10d      	cbz	r5, 8021424 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 8021420:	1c6b      	adds	r3, r5, #1
 8021422:	9308      	str	r3, [sp, #32]
 8021424:	ab0f      	add	r3, sp, #60	; 0x3c
 8021426:	9305      	str	r3, [sp, #20]
 8021428:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 802142c:	9304      	str	r3, [sp, #16]
 802142e:	ab0e      	add	r3, sp, #56	; 0x38
 8021430:	9303      	str	r3, [sp, #12]
 8021432:	ab0c      	add	r3, sp, #48	; 0x30
 8021434:	9302      	str	r3, [sp, #8]
 8021436:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 802143a:	9301      	str	r3, [sp, #4]
 802143c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8021440:	9300      	str	r3, [sp, #0]
 8021442:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8021446:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 802144a:	a908      	add	r1, sp, #32
 802144c:	a809      	add	r0, sp, #36	; 0x24
 802144e:	f7ff fea8 	bl	80211a2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 8021452:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021454:	2b00      	cmp	r3, #0
 8021456:	bfbe      	ittt	lt
 8021458:	6823      	ldrlt	r3, [r4, #0]
 802145a:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 802145e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8021460:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021462:	bfb8      	it	lt
 8021464:	3404      	addlt	r4, #4
 8021466:	2b00      	cmp	r3, #0
 8021468:	bfb8      	it	lt
 802146a:	6823      	ldrlt	r3, [r4, #0]
 802146c:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8021470:	bfbe      	ittt	lt
 8021472:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8021476:	930f      	strlt	r3, [sp, #60]	; 0x3c
 8021478:	3404      	addlt	r4, #4
 802147a:	b1d9      	cbz	r1, 80214b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x172>
 802147c:	880b      	ldrh	r3, [r1, #0]
 802147e:	2b69      	cmp	r3, #105	; 0x69
 8021480:	d01f      	beq.n	80214c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8021482:	d82f      	bhi.n	80214e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a2>
 8021484:	2b58      	cmp	r3, #88	; 0x58
 8021486:	d01c      	beq.n	80214c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8021488:	d818      	bhi.n	80214bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17a>
 802148a:	2b25      	cmp	r3, #37	; 0x25
 802148c:	d034      	beq.n	80214f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b6>
 802148e:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 8021492:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021494:	f1bb 0f00 	cmp.w	fp, #0
 8021498:	f000 80b8 	beq.w	802160c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2ca>
 802149c:	f8bb 5000 	ldrh.w	r5, [fp]
 80214a0:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 80214a4:	3301      	adds	r3, #1
 80214a6:	930d      	str	r3, [sp, #52]	; 0x34
 80214a8:	e029      	b.n	80214fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 80214aa:	b10d      	cbz	r5, 80214b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16e>
 80214ac:	782a      	ldrb	r2, [r5, #0]
 80214ae:	e785      	b.n	80213bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 80214b0:	462a      	mov	r2, r5
 80214b2:	e783      	b.n	80213bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 80214b4:	2a00      	cmp	r2, #0
 80214b6:	d0ea      	beq.n	802148e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 80214b8:	7813      	ldrb	r3, [r2, #0]
 80214ba:	e7e0      	b.n	802147e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13c>
 80214bc:	3b63      	subs	r3, #99	; 0x63
 80214be:	2b01      	cmp	r3, #1
 80214c0:	d8e5      	bhi.n	802148e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 80214c2:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 80214c6:	b329      	cbz	r1, 8021514 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d2>
 80214c8:	880b      	ldrh	r3, [r1, #0]
 80214ca:	2b69      	cmp	r3, #105	; 0x69
 80214cc:	d063      	beq.n	8021596 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 80214ce:	d825      	bhi.n	802151c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1da>
 80214d0:	2b63      	cmp	r3, #99	; 0x63
 80214d2:	d038      	beq.n	8021546 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x204>
 80214d4:	2b64      	cmp	r3, #100	; 0x64
 80214d6:	d05e      	beq.n	8021596 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 80214d8:	2b58      	cmp	r3, #88	; 0x58
 80214da:	d07b      	beq.n	80215d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x292>
 80214dc:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 80214e0:	4625      	mov	r5, r4
 80214e2:	e036      	b.n	8021552 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 80214e4:	2b73      	cmp	r3, #115	; 0x73
 80214e6:	d0ec      	beq.n	80214c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 80214e8:	d802      	bhi.n	80214f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ae>
 80214ea:	2b6f      	cmp	r3, #111	; 0x6f
 80214ec:	d1cf      	bne.n	802148e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 80214ee:	e7e8      	b.n	80214c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 80214f0:	2b75      	cmp	r3, #117	; 0x75
 80214f2:	d0e6      	beq.n	80214c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 80214f4:	2b78      	cmp	r3, #120	; 0x78
 80214f6:	e7f9      	b.n	80214ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1aa>
 80214f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80214fa:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 80214fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021500:	b10b      	cbz	r3, 8021506 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c4>
 8021502:	3302      	adds	r3, #2
 8021504:	9309      	str	r3, [sp, #36]	; 0x24
 8021506:	9b08      	ldr	r3, [sp, #32]
 8021508:	2b00      	cmp	r3, #0
 802150a:	f43f af2e 	beq.w	802136a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 802150e:	3301      	adds	r3, #1
 8021510:	9308      	str	r3, [sp, #32]
 8021512:	e72a      	b.n	802136a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8021514:	2a00      	cmp	r2, #0
 8021516:	d0e1      	beq.n	80214dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 8021518:	7813      	ldrb	r3, [r2, #0]
 802151a:	e7d6      	b.n	80214ca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x188>
 802151c:	2b73      	cmp	r3, #115	; 0x73
 802151e:	d036      	beq.n	802158e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24c>
 8021520:	d807      	bhi.n	8021532 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1f0>
 8021522:	2b6f      	cmp	r3, #111	; 0x6f
 8021524:	d1da      	bne.n	80214dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 8021526:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021528:	1d25      	adds	r5, r4, #4
 802152a:	eba8 0202 	sub.w	r2, r8, r2
 802152e:	2308      	movs	r3, #8
 8021530:	e04a      	b.n	80215c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 8021532:	2b75      	cmp	r3, #117	; 0x75
 8021534:	d043      	beq.n	80215be <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x27c>
 8021536:	2b78      	cmp	r3, #120	; 0x78
 8021538:	d1d0      	bne.n	80214dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 802153a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802153c:	1d25      	adds	r5, r4, #4
 802153e:	eba8 0202 	sub.w	r2, r8, r2
 8021542:	2310      	movs	r3, #16
 8021544:	e040      	b.n	80215c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 8021546:	7823      	ldrb	r3, [r4, #0]
 8021548:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 802154c:	1d25      	adds	r5, r4, #4
 802154e:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 8021552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021554:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8021558:	2b00      	cmp	r3, #0
 802155a:	d052      	beq.n	8021602 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c0>
 802155c:	881a      	ldrh	r2, [r3, #0]
 802155e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8021562:	a80d      	add	r0, sp, #52	; 0x34
 8021564:	9005      	str	r0, [sp, #20]
 8021566:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 802156a:	9004      	str	r0, [sp, #16]
 802156c:	980e      	ldr	r0, [sp, #56]	; 0x38
 802156e:	9003      	str	r0, [sp, #12]
 8021570:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 8021574:	9002      	str	r0, [sp, #8]
 8021576:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8021578:	9001      	str	r0, [sp, #4]
 802157a:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 802157e:	9000      	str	r0, [sp, #0]
 8021580:	e9cd 8706 	strd	r8, r7, [sp, #24]
 8021584:	a810      	add	r0, sp, #64	; 0x40
 8021586:	f7ff fd49 	bl	802101c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 802158a:	462c      	mov	r4, r5
 802158c:	e7b7      	b.n	80214fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 802158e:	6823      	ldr	r3, [r4, #0]
 8021590:	1d25      	adds	r5, r4, #4
 8021592:	9310      	str	r3, [sp, #64]	; 0x40
 8021594:	e7dd      	b.n	8021552 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8021596:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021598:	6820      	ldr	r0, [r4, #0]
 802159a:	eba8 0202 	sub.w	r2, r8, r2
 802159e:	230a      	movs	r3, #10
 80215a0:	b292      	uxth	r2, r2
 80215a2:	4649      	mov	r1, r9
 80215a4:	f7ff fd08 	bl	8020fb8 <_ZN8touchgfx7Unicode4itoaElPtti>
 80215a8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80215ac:	2b2d      	cmp	r3, #45	; 0x2d
 80215ae:	f104 0504 	add.w	r5, r4, #4
 80215b2:	d1ce      	bne.n	8021552 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 80215b4:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80215b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80215ba:	3302      	adds	r3, #2
 80215bc:	e7e9      	b.n	8021592 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x250>
 80215be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80215c0:	1d25      	adds	r5, r4, #4
 80215c2:	eba8 0202 	sub.w	r2, r8, r2
 80215c6:	230a      	movs	r3, #10
 80215c8:	b292      	uxth	r2, r2
 80215ca:	4649      	mov	r1, r9
 80215cc:	6820      	ldr	r0, [r4, #0]
 80215ce:	f7ff fcd5 	bl	8020f7c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 80215d2:	e7be      	b.n	8021552 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 80215d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80215d6:	6820      	ldr	r0, [r4, #0]
 80215d8:	eba8 0202 	sub.w	r2, r8, r2
 80215dc:	b292      	uxth	r2, r2
 80215de:	2310      	movs	r3, #16
 80215e0:	4649      	mov	r1, r9
 80215e2:	f7ff fccb 	bl	8020f7c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 80215e6:	1d25      	adds	r5, r4, #4
 80215e8:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 80215ec:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 80215f0:	2b00      	cmp	r3, #0
 80215f2:	d0ae      	beq.n	8021552 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 80215f4:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 80215f8:	2919      	cmp	r1, #25
 80215fa:	d8f7      	bhi.n	80215ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 80215fc:	3b20      	subs	r3, #32
 80215fe:	8013      	strh	r3, [r2, #0]
 8021600:	e7f4      	b.n	80215ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 8021602:	9a08      	ldr	r2, [sp, #32]
 8021604:	2a00      	cmp	r2, #0
 8021606:	d0aa      	beq.n	802155e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 8021608:	7812      	ldrb	r2, [r2, #0]
 802160a:	e7a8      	b.n	802155e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 802160c:	2d00      	cmp	r5, #0
 802160e:	f43f af47 	beq.w	80214a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>
 8021612:	782d      	ldrb	r5, [r5, #0]
 8021614:	e744      	b.n	80214a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>

08021616 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 8021616:	b507      	push	{r0, r1, r2, lr}
 8021618:	9300      	str	r3, [sp, #0]
 802161a:	4613      	mov	r3, r2
 802161c:	2200      	movs	r2, #0
 802161e:	f7ff fe90 	bl	8021342 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 8021622:	b003      	add	sp, #12
 8021624:	f85d fb04 	ldr.w	pc, [sp], #4

08021628 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8021628:	b40c      	push	{r2, r3}
 802162a:	b507      	push	{r0, r1, r2, lr}
 802162c:	ab04      	add	r3, sp, #16
 802162e:	f853 2b04 	ldr.w	r2, [r3], #4
 8021632:	9301      	str	r3, [sp, #4]
 8021634:	f7ff ffef 	bl	8021616 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 8021638:	b003      	add	sp, #12
 802163a:	f85d eb04 	ldr.w	lr, [sp], #4
 802163e:	b002      	add	sp, #8
 8021640:	4770      	bx	lr
	...

08021644 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8021644:	4b01      	ldr	r3, [pc, #4]	; (802164c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8021646:	6018      	str	r0, [r3, #0]
 8021648:	4770      	bx	lr
 802164a:	bf00      	nop
 802164c:	20012924 	.word	0x20012924

08021650 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8021650:	4b07      	ldr	r3, [pc, #28]	; (8021670 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 8021652:	881a      	ldrh	r2, [r3, #0]
 8021654:	4282      	cmp	r2, r0
 8021656:	d809      	bhi.n	802166c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 8021658:	4b06      	ldr	r3, [pc, #24]	; (8021674 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 802165a:	881b      	ldrh	r3, [r3, #0]
 802165c:	4413      	add	r3, r2
 802165e:	4298      	cmp	r0, r3
 8021660:	da04      	bge.n	802166c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 8021662:	4b05      	ldr	r3, [pc, #20]	; (8021678 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 8021664:	681b      	ldr	r3, [r3, #0]
 8021666:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 802166a:	4770      	bx	lr
 802166c:	2000      	movs	r0, #0
 802166e:	4770      	bx	lr
 8021670:	20012944 	.word	0x20012944
 8021674:	20012948 	.word	0x20012948
 8021678:	20012928 	.word	0x20012928

0802167c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 802167c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021680:	4d28      	ldr	r5, [pc, #160]	; (8021724 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8021682:	682b      	ldr	r3, [r5, #0]
 8021684:	2b00      	cmp	r3, #0
 8021686:	d04a      	beq.n	802171e <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 8021688:	4a27      	ldr	r2, [pc, #156]	; (8021728 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 802168a:	4e28      	ldr	r6, [pc, #160]	; (802172c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 802168c:	8810      	ldrh	r0, [r2, #0]
 802168e:	f8b6 8000 	ldrh.w	r8, [r6]
 8021692:	4c27      	ldr	r4, [pc, #156]	; (8021730 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8021694:	4f27      	ldr	r7, [pc, #156]	; (8021734 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8021696:	4440      	add	r0, r8
 8021698:	1c41      	adds	r1, r0, #1
 802169a:	f021 0101 	bic.w	r1, r1, #1
 802169e:	0409      	lsls	r1, r1, #16
 80216a0:	0c09      	lsrs	r1, r1, #16
 80216a2:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 80216a6:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80216aa:	eb03 020e 	add.w	r2, r3, lr
 80216ae:	eb0e 010c 	add.w	r1, lr, ip
 80216b2:	6022      	str	r2, [r4, #0]
 80216b4:	185a      	adds	r2, r3, r1
 80216b6:	603a      	str	r2, [r7, #0]
 80216b8:	220e      	movs	r2, #14
 80216ba:	fb02 f208 	mul.w	r2, r2, r8
 80216be:	3203      	adds	r2, #3
 80216c0:	f022 0203 	bic.w	r2, r2, #3
 80216c4:	4411      	add	r1, r2
 80216c6:	440b      	add	r3, r1
 80216c8:	491b      	ldr	r1, [pc, #108]	; (8021738 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 80216ca:	600b      	str	r3, [r1, #0]
 80216cc:	491b      	ldr	r1, [pc, #108]	; (802173c <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 80216ce:	2300      	movs	r3, #0
 80216d0:	800b      	strh	r3, [r1, #0]
 80216d2:	491b      	ldr	r1, [pc, #108]	; (8021740 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 80216d4:	6809      	ldr	r1, [r1, #0]
 80216d6:	eba1 010e 	sub.w	r1, r1, lr
 80216da:	eba1 010c 	sub.w	r1, r1, ip
 80216de:	1a8a      	subs	r2, r1, r2
 80216e0:	4918      	ldr	r1, [pc, #96]	; (8021744 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 80216e2:	600a      	str	r2, [r1, #0]
 80216e4:	4a18      	ldr	r2, [pc, #96]	; (8021748 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 80216e6:	469c      	mov	ip, r3
 80216e8:	8013      	strh	r3, [r2, #0]
 80216ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80216ee:	4283      	cmp	r3, r0
 80216f0:	d10d      	bne.n	802170e <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 80216f2:	8835      	ldrh	r5, [r6, #0]
 80216f4:	6838      	ldr	r0, [r7, #0]
 80216f6:	2300      	movs	r3, #0
 80216f8:	240e      	movs	r4, #14
 80216fa:	429d      	cmp	r5, r3
 80216fc:	d90f      	bls.n	802171e <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 80216fe:	fb04 0203 	mla	r2, r4, r3, r0
 8021702:	3301      	adds	r3, #1
 8021704:	7b11      	ldrb	r1, [r2, #12]
 8021706:	f36f 1145 	bfc	r1, #5, #1
 802170a:	7311      	strb	r1, [r2, #12]
 802170c:	e7f5      	b.n	80216fa <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 802170e:	682a      	ldr	r2, [r5, #0]
 8021710:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8021714:	6822      	ldr	r2, [r4, #0]
 8021716:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 802171a:	3301      	adds	r3, #1
 802171c:	e7e7      	b.n	80216ee <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 802171e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021722:	bf00      	nop
 8021724:	20012928 	.word	0x20012928
 8021728:	20012944 	.word	0x20012944
 802172c:	20012948 	.word	0x20012948
 8021730:	2001293c 	.word	0x2001293c
 8021734:	2001292c 	.word	0x2001292c
 8021738:	20012934 	.word	0x20012934
 802173c:	20012946 	.word	0x20012946
 8021740:	20012930 	.word	0x20012930
 8021744:	20012940 	.word	0x20012940
 8021748:	20012938 	.word	0x20012938

0802174c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 802174c:	b510      	push	{r4, lr}
 802174e:	4b10      	ldr	r3, [pc, #64]	; (8021790 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 8021750:	681b      	ldr	r3, [r3, #0]
 8021752:	b9db      	cbnz	r3, 802178c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8021754:	b1d1      	cbz	r1, 802178c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8021756:	4b0f      	ldr	r3, [pc, #60]	; (8021794 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 8021758:	801a      	strh	r2, [r3, #0]
 802175a:	4b0f      	ldr	r3, [pc, #60]	; (8021798 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 802175c:	881b      	ldrh	r3, [r3, #0]
 802175e:	b292      	uxth	r2, r2
 8021760:	240e      	movs	r4, #14
 8021762:	4413      	add	r3, r2
 8021764:	4362      	muls	r2, r4
 8021766:	2406      	movs	r4, #6
 8021768:	fb04 2203 	mla	r2, r4, r3, r2
 802176c:	428a      	cmp	r2, r1
 802176e:	d305      	bcc.n	802177c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 8021770:	4b0a      	ldr	r3, [pc, #40]	; (802179c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 8021772:	4a0b      	ldr	r2, [pc, #44]	; (80217a0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 8021774:	480b      	ldr	r0, [pc, #44]	; (80217a4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 8021776:	2137      	movs	r1, #55	; 0x37
 8021778:	f00c fd76 	bl	802e268 <__assert_func>
 802177c:	4b0a      	ldr	r3, [pc, #40]	; (80217a8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 802177e:	6019      	str	r1, [r3, #0]
 8021780:	4b0a      	ldr	r3, [pc, #40]	; (80217ac <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 8021782:	6018      	str	r0, [r3, #0]
 8021784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021788:	f7ff bf78 	b.w	802167c <_ZN8touchgfx6Bitmap10clearCacheEv>
 802178c:	bd10      	pop	{r4, pc}
 802178e:	bf00      	nop
 8021790:	20012934 	.word	0x20012934
 8021794:	20012948 	.word	0x20012948
 8021798:	20012944 	.word	0x20012944
 802179c:	08033eb9 	.word	0x08033eb9
 80217a0:	08033f12 	.word	0x08033f12
 80217a4:	08033e94 	.word	0x08033e94
 80217a8:	20012930 	.word	0x20012930
 80217ac:	20012928 	.word	0x20012928

080217b0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 80217b0:	b470      	push	{r4, r5, r6}
 80217b2:	4c07      	ldr	r4, [pc, #28]	; (80217d0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 80217b4:	6826      	ldr	r6, [r4, #0]
 80217b6:	4605      	mov	r5, r0
 80217b8:	4610      	mov	r0, r2
 80217ba:	9a03      	ldr	r2, [sp, #12]
 80217bc:	b936      	cbnz	r6, 80217cc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 80217be:	6025      	str	r5, [r4, #0]
 80217c0:	4c04      	ldr	r4, [pc, #16]	; (80217d4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 80217c2:	8021      	strh	r1, [r4, #0]
 80217c4:	bc70      	pop	{r4, r5, r6}
 80217c6:	4619      	mov	r1, r3
 80217c8:	f7ff bfc0 	b.w	802174c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 80217cc:	bc70      	pop	{r4, r5, r6}
 80217ce:	4770      	bx	lr
 80217d0:	2001294c 	.word	0x2001294c
 80217d4:	20012944 	.word	0x20012944

080217d8 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 80217d8:	b508      	push	{r3, lr}
 80217da:	4b14      	ldr	r3, [pc, #80]	; (802182c <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 80217dc:	6819      	ldr	r1, [r3, #0]
 80217de:	b931      	cbnz	r1, 80217ee <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 80217e0:	4b13      	ldr	r3, [pc, #76]	; (8021830 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 80217e2:	4a14      	ldr	r2, [pc, #80]	; (8021834 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 80217e4:	4814      	ldr	r0, [pc, #80]	; (8021838 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 80217e6:	f44f 713e 	mov.w	r1, #760	; 0x2f8
 80217ea:	f00c fd3d 	bl	802e268 <__assert_func>
 80217ee:	4a13      	ldr	r2, [pc, #76]	; (802183c <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 80217f0:	8803      	ldrh	r3, [r0, #0]
 80217f2:	8812      	ldrh	r2, [r2, #0]
 80217f4:	4293      	cmp	r3, r2
 80217f6:	d204      	bcs.n	8021802 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 80217f8:	2214      	movs	r2, #20
 80217fa:	fb02 1303 	mla	r3, r2, r3, r1
 80217fe:	8918      	ldrh	r0, [r3, #8]
 8021800:	bd08      	pop	{r3, pc}
 8021802:	490f      	ldr	r1, [pc, #60]	; (8021840 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 8021804:	8809      	ldrh	r1, [r1, #0]
 8021806:	4411      	add	r1, r2
 8021808:	428b      	cmp	r3, r1
 802180a:	da06      	bge.n	802181a <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 802180c:	1a9b      	subs	r3, r3, r2
 802180e:	4a0d      	ldr	r2, [pc, #52]	; (8021844 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 8021810:	6812      	ldr	r2, [r2, #0]
 8021812:	210e      	movs	r1, #14
 8021814:	fb01 2303 	mla	r3, r1, r3, r2
 8021818:	e7f1      	b.n	80217fe <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 802181a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 802181e:	4293      	cmp	r3, r2
 8021820:	bf0a      	itet	eq
 8021822:	4b09      	ldreq	r3, [pc, #36]	; (8021848 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 8021824:	2000      	movne	r0, #0
 8021826:	8818      	ldrheq	r0, [r3, #0]
 8021828:	e7ea      	b.n	8021800 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 802182a:	bf00      	nop
 802182c:	2001294c 	.word	0x2001294c
 8021830:	08033290 	.word	0x08033290
 8021834:	08033fbf 	.word	0x08033fbf
 8021838:	08033e94 	.word	0x08033e94
 802183c:	20012944 	.word	0x20012944
 8021840:	20012948 	.word	0x20012948
 8021844:	2001292c 	.word	0x2001292c
 8021848:	20012898 	.word	0x20012898

0802184c <_ZNK8touchgfx6Bitmap9getHeightEv>:
 802184c:	b508      	push	{r3, lr}
 802184e:	4b14      	ldr	r3, [pc, #80]	; (80218a0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8021850:	6819      	ldr	r1, [r3, #0]
 8021852:	b931      	cbnz	r1, 8021862 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 8021854:	4b13      	ldr	r3, [pc, #76]	; (80218a4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8021856:	4a14      	ldr	r2, [pc, #80]	; (80218a8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8021858:	4814      	ldr	r0, [pc, #80]	; (80218ac <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 802185a:	f44f 7143 	mov.w	r1, #780	; 0x30c
 802185e:	f00c fd03 	bl	802e268 <__assert_func>
 8021862:	4a13      	ldr	r2, [pc, #76]	; (80218b0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8021864:	8803      	ldrh	r3, [r0, #0]
 8021866:	8812      	ldrh	r2, [r2, #0]
 8021868:	4293      	cmp	r3, r2
 802186a:	d204      	bcs.n	8021876 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 802186c:	2214      	movs	r2, #20
 802186e:	fb02 1303 	mla	r3, r2, r3, r1
 8021872:	8958      	ldrh	r0, [r3, #10]
 8021874:	bd08      	pop	{r3, pc}
 8021876:	490f      	ldr	r1, [pc, #60]	; (80218b4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 8021878:	8809      	ldrh	r1, [r1, #0]
 802187a:	4411      	add	r1, r2
 802187c:	428b      	cmp	r3, r1
 802187e:	da06      	bge.n	802188e <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 8021880:	1a9b      	subs	r3, r3, r2
 8021882:	4a0d      	ldr	r2, [pc, #52]	; (80218b8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 8021884:	6812      	ldr	r2, [r2, #0]
 8021886:	210e      	movs	r1, #14
 8021888:	fb01 2303 	mla	r3, r1, r3, r2
 802188c:	e7f1      	b.n	8021872 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 802188e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8021892:	4293      	cmp	r3, r2
 8021894:	bf0a      	itet	eq
 8021896:	4b09      	ldreq	r3, [pc, #36]	; (80218bc <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 8021898:	2000      	movne	r0, #0
 802189a:	8818      	ldrheq	r0, [r3, #0]
 802189c:	e7ea      	b.n	8021874 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 802189e:	bf00      	nop
 80218a0:	2001294c 	.word	0x2001294c
 80218a4:	08033290 	.word	0x08033290
 80218a8:	08033feb 	.word	0x08033feb
 80218ac:	08033e94 	.word	0x08033e94
 80218b0:	20012944 	.word	0x20012944
 80218b4:	20012948 	.word	0x20012948
 80218b8:	2001292c 	.word	0x2001292c
 80218bc:	2001289a 	.word	0x2001289a

080218c0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 80218c0:	b510      	push	{r4, lr}
 80218c2:	4b23      	ldr	r3, [pc, #140]	; (8021950 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 80218c4:	681c      	ldr	r4, [r3, #0]
 80218c6:	b934      	cbnz	r4, 80218d6 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 80218c8:	4b22      	ldr	r3, [pc, #136]	; (8021954 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 80218ca:	4a23      	ldr	r2, [pc, #140]	; (8021958 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 80218cc:	4823      	ldr	r0, [pc, #140]	; (802195c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 80218ce:	f44f 7148 	mov.w	r1, #800	; 0x320
 80218d2:	f00c fcc9 	bl	802e268 <__assert_func>
 80218d6:	4a22      	ldr	r2, [pc, #136]	; (8021960 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 80218d8:	880b      	ldrh	r3, [r1, #0]
 80218da:	8812      	ldrh	r2, [r2, #0]
 80218dc:	4293      	cmp	r3, r2
 80218de:	d211      	bcs.n	8021904 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 80218e0:	2214      	movs	r2, #20
 80218e2:	fb02 4303 	mla	r3, r2, r3, r4
 80218e6:	8a1a      	ldrh	r2, [r3, #16]
 80218e8:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 80218ec:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80218f0:	8a5b      	ldrh	r3, [r3, #18]
 80218f2:	8004      	strh	r4, [r0, #0]
 80218f4:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80218f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80218fc:	8041      	strh	r1, [r0, #2]
 80218fe:	8082      	strh	r2, [r0, #4]
 8021900:	80c3      	strh	r3, [r0, #6]
 8021902:	e00e      	b.n	8021922 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8021904:	4917      	ldr	r1, [pc, #92]	; (8021964 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 8021906:	8809      	ldrh	r1, [r1, #0]
 8021908:	4411      	add	r1, r2
 802190a:	428b      	cmp	r3, r1
 802190c:	da0a      	bge.n	8021924 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 802190e:	1a9b      	subs	r3, r3, r2
 8021910:	4a15      	ldr	r2, [pc, #84]	; (8021968 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 8021912:	6812      	ldr	r2, [r2, #0]
 8021914:	210e      	movs	r1, #14
 8021916:	fb01 2303 	mla	r3, r1, r3, r2
 802191a:	681a      	ldr	r2, [r3, #0]
 802191c:	6002      	str	r2, [r0, #0]
 802191e:	685a      	ldr	r2, [r3, #4]
 8021920:	6042      	str	r2, [r0, #4]
 8021922:	bd10      	pop	{r4, pc}
 8021924:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8021928:	4293      	cmp	r3, r2
 802192a:	d10b      	bne.n	8021944 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 802192c:	4b0f      	ldr	r3, [pc, #60]	; (802196c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 802192e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8021932:	4b0f      	ldr	r3, [pc, #60]	; (8021970 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 8021934:	8081      	strh	r1, [r0, #4]
 8021936:	f9b3 2000 	ldrsh.w	r2, [r3]
 802193a:	80c2      	strh	r2, [r0, #6]
 802193c:	2300      	movs	r3, #0
 802193e:	8003      	strh	r3, [r0, #0]
 8021940:	8043      	strh	r3, [r0, #2]
 8021942:	e7ee      	b.n	8021922 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8021944:	2300      	movs	r3, #0
 8021946:	8003      	strh	r3, [r0, #0]
 8021948:	8043      	strh	r3, [r0, #2]
 802194a:	8083      	strh	r3, [r0, #4]
 802194c:	e7d8      	b.n	8021900 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 802194e:	bf00      	nop
 8021950:	2001294c 	.word	0x2001294c
 8021954:	08033290 	.word	0x08033290
 8021958:	08033f58 	.word	0x08033f58
 802195c:	08033e94 	.word	0x08033e94
 8021960:	20012944 	.word	0x20012944
 8021964:	20012948 	.word	0x20012948
 8021968:	2001292c 	.word	0x2001292c
 802196c:	20012898 	.word	0x20012898
 8021970:	2001289a 	.word	0x2001289a

08021974 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8021974:	4b18      	ldr	r3, [pc, #96]	; (80219d8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8021976:	681b      	ldr	r3, [r3, #0]
 8021978:	b34b      	cbz	r3, 80219ce <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 802197a:	4a18      	ldr	r2, [pc, #96]	; (80219dc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 802197c:	8800      	ldrh	r0, [r0, #0]
 802197e:	8812      	ldrh	r2, [r2, #0]
 8021980:	4290      	cmp	r0, r2
 8021982:	d211      	bcs.n	80219a8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 8021984:	2214      	movs	r2, #20
 8021986:	fb02 3300 	mla	r3, r2, r0, r3
 802198a:	8a1a      	ldrh	r2, [r3, #16]
 802198c:	8919      	ldrh	r1, [r3, #8]
 802198e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8021992:	428a      	cmp	r2, r1
 8021994:	db1d      	blt.n	80219d2 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8021996:	8a58      	ldrh	r0, [r3, #18]
 8021998:	f3c0 000c 	ubfx	r0, r0, #0, #13
 802199c:	895b      	ldrh	r3, [r3, #10]
 802199e:	4298      	cmp	r0, r3
 80219a0:	bfac      	ite	ge
 80219a2:	2000      	movge	r0, #0
 80219a4:	2001      	movlt	r0, #1
 80219a6:	4770      	bx	lr
 80219a8:	4b0d      	ldr	r3, [pc, #52]	; (80219e0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 80219aa:	881b      	ldrh	r3, [r3, #0]
 80219ac:	4413      	add	r3, r2
 80219ae:	4298      	cmp	r0, r3
 80219b0:	da0d      	bge.n	80219ce <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 80219b2:	4b0c      	ldr	r3, [pc, #48]	; (80219e4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 80219b4:	681b      	ldr	r3, [r3, #0]
 80219b6:	1a80      	subs	r0, r0, r2
 80219b8:	220e      	movs	r2, #14
 80219ba:	fb02 3300 	mla	r3, r2, r0, r3
 80219be:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80219c2:	891a      	ldrh	r2, [r3, #8]
 80219c4:	4291      	cmp	r1, r2
 80219c6:	db04      	blt.n	80219d2 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 80219c8:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 80219cc:	e7e6      	b.n	802199c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 80219ce:	2000      	movs	r0, #0
 80219d0:	4770      	bx	lr
 80219d2:	2001      	movs	r0, #1
 80219d4:	4770      	bx	lr
 80219d6:	bf00      	nop
 80219d8:	2001294c 	.word	0x2001294c
 80219dc:	20012944 	.word	0x20012944
 80219e0:	20012948 	.word	0x20012948
 80219e4:	2001292c 	.word	0x2001292c

080219e8 <_ZNK8touchgfx6Bitmap7getDataEv>:
 80219e8:	b508      	push	{r3, lr}
 80219ea:	4b12      	ldr	r3, [pc, #72]	; (8021a34 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 80219ec:	6819      	ldr	r1, [r3, #0]
 80219ee:	b931      	cbnz	r1, 80219fe <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 80219f0:	4b11      	ldr	r3, [pc, #68]	; (8021a38 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80219f2:	4a12      	ldr	r2, [pc, #72]	; (8021a3c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 80219f4:	4812      	ldr	r0, [pc, #72]	; (8021a40 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 80219f6:	f44f 7151 	mov.w	r1, #836	; 0x344
 80219fa:	f00c fc35 	bl	802e268 <__assert_func>
 80219fe:	8803      	ldrh	r3, [r0, #0]
 8021a00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8021a04:	4293      	cmp	r3, r2
 8021a06:	d012      	beq.n	8021a2e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8021a08:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8021a0c:	4293      	cmp	r3, r2
 8021a0e:	d103      	bne.n	8021a18 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 8021a10:	4b0c      	ldr	r3, [pc, #48]	; (8021a44 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8021a12:	681b      	ldr	r3, [r3, #0]
 8021a14:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8021a16:	bd08      	pop	{r3, pc}
 8021a18:	4a0b      	ldr	r2, [pc, #44]	; (8021a48 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 8021a1a:	6812      	ldr	r2, [r2, #0]
 8021a1c:	b11a      	cbz	r2, 8021a26 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 8021a1e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8021a22:	2800      	cmp	r0, #0
 8021a24:	d1f7      	bne.n	8021a16 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8021a26:	2214      	movs	r2, #20
 8021a28:	4353      	muls	r3, r2
 8021a2a:	58c8      	ldr	r0, [r1, r3]
 8021a2c:	e7f3      	b.n	8021a16 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8021a2e:	2000      	movs	r0, #0
 8021a30:	e7f1      	b.n	8021a16 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8021a32:	bf00      	nop
 8021a34:	2001294c 	.word	0x2001294c
 8021a38:	08033290 	.word	0x08033290
 8021a3c:	08033f8e 	.word	0x08033f8e
 8021a40:	08033e94 	.word	0x08033e94
 8021a44:	200128a4 	.word	0x200128a4
 8021a48:	20012928 	.word	0x20012928

08021a4c <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8021a4c:	8802      	ldrh	r2, [r0, #0]
 8021a4e:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8021a52:	429a      	cmp	r2, r3
 8021a54:	d840      	bhi.n	8021ad8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 8021a56:	4b21      	ldr	r3, [pc, #132]	; (8021adc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 8021a58:	881b      	ldrh	r3, [r3, #0]
 8021a5a:	429a      	cmp	r2, r3
 8021a5c:	d220      	bcs.n	8021aa0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 8021a5e:	4b20      	ldr	r3, [pc, #128]	; (8021ae0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8021a60:	6819      	ldr	r1, [r3, #0]
 8021a62:	2314      	movs	r3, #20
 8021a64:	fb03 1302 	mla	r3, r3, r2, r1
 8021a68:	6858      	ldr	r0, [r3, #4]
 8021a6a:	2800      	cmp	r0, #0
 8021a6c:	d035      	beq.n	8021ada <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8021a6e:	491d      	ldr	r1, [pc, #116]	; (8021ae4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8021a70:	6809      	ldr	r1, [r1, #0]
 8021a72:	2900      	cmp	r1, #0
 8021a74:	d031      	beq.n	8021ada <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8021a76:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8021a7a:	b371      	cbz	r1, 8021ada <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8021a7c:	895a      	ldrh	r2, [r3, #10]
 8021a7e:	8918      	ldrh	r0, [r3, #8]
 8021a80:	4350      	muls	r0, r2
 8021a82:	7c5a      	ldrb	r2, [r3, #17]
 8021a84:	7cdb      	ldrb	r3, [r3, #19]
 8021a86:	0952      	lsrs	r2, r2, #5
 8021a88:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8021a8c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8021a90:	2b0b      	cmp	r3, #11
 8021a92:	bf18      	it	ne
 8021a94:	0040      	lslne	r0, r0, #1
 8021a96:	3003      	adds	r0, #3
 8021a98:	f020 0003 	bic.w	r0, r0, #3
 8021a9c:	4408      	add	r0, r1
 8021a9e:	4770      	bx	lr
 8021aa0:	4911      	ldr	r1, [pc, #68]	; (8021ae8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8021aa2:	8809      	ldrh	r1, [r1, #0]
 8021aa4:	4419      	add	r1, r3
 8021aa6:	428a      	cmp	r2, r1
 8021aa8:	da16      	bge.n	8021ad8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 8021aaa:	4910      	ldr	r1, [pc, #64]	; (8021aec <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8021aac:	6809      	ldr	r1, [r1, #0]
 8021aae:	1ad3      	subs	r3, r2, r3
 8021ab0:	200e      	movs	r0, #14
 8021ab2:	fb00 1303 	mla	r3, r0, r3, r1
 8021ab6:	7b19      	ldrb	r1, [r3, #12]
 8021ab8:	f001 011f 	and.w	r1, r1, #31
 8021abc:	290b      	cmp	r1, #11
 8021abe:	d10b      	bne.n	8021ad8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 8021ac0:	8919      	ldrh	r1, [r3, #8]
 8021ac2:	8958      	ldrh	r0, [r3, #10]
 8021ac4:	4b07      	ldr	r3, [pc, #28]	; (8021ae4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8021ac6:	4348      	muls	r0, r1
 8021ac8:	6819      	ldr	r1, [r3, #0]
 8021aca:	3003      	adds	r0, #3
 8021acc:	f020 0303 	bic.w	r3, r0, #3
 8021ad0:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8021ad4:	4418      	add	r0, r3
 8021ad6:	4770      	bx	lr
 8021ad8:	2000      	movs	r0, #0
 8021ada:	4770      	bx	lr
 8021adc:	20012944 	.word	0x20012944
 8021ae0:	2001294c 	.word	0x2001294c
 8021ae4:	20012928 	.word	0x20012928
 8021ae8:	20012948 	.word	0x20012948
 8021aec:	2001292c 	.word	0x2001292c

08021af0 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8021af0:	4b19      	ldr	r3, [pc, #100]	; (8021b58 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8021af2:	6819      	ldr	r1, [r3, #0]
 8021af4:	8803      	ldrh	r3, [r0, #0]
 8021af6:	b1e9      	cbz	r1, 8021b34 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8021af8:	4a18      	ldr	r2, [pc, #96]	; (8021b5c <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8021afa:	8812      	ldrh	r2, [r2, #0]
 8021afc:	429a      	cmp	r2, r3
 8021afe:	d90a      	bls.n	8021b16 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8021b00:	2214      	movs	r2, #20
 8021b02:	fb02 1303 	mla	r3, r2, r3, r1
 8021b06:	7c58      	ldrb	r0, [r3, #17]
 8021b08:	0942      	lsrs	r2, r0, #5
 8021b0a:	7cd8      	ldrb	r0, [r3, #19]
 8021b0c:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8021b10:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8021b14:	4770      	bx	lr
 8021b16:	4912      	ldr	r1, [pc, #72]	; (8021b60 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 8021b18:	8809      	ldrh	r1, [r1, #0]
 8021b1a:	4411      	add	r1, r2
 8021b1c:	428b      	cmp	r3, r1
 8021b1e:	da09      	bge.n	8021b34 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8021b20:	1a9b      	subs	r3, r3, r2
 8021b22:	4a10      	ldr	r2, [pc, #64]	; (8021b64 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 8021b24:	6812      	ldr	r2, [r2, #0]
 8021b26:	210e      	movs	r1, #14
 8021b28:	fb01 2303 	mla	r3, r1, r3, r2
 8021b2c:	7b18      	ldrb	r0, [r3, #12]
 8021b2e:	f000 001f 	and.w	r0, r0, #31
 8021b32:	4770      	bx	lr
 8021b34:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8021b38:	4293      	cmp	r3, r2
 8021b3a:	d10a      	bne.n	8021b52 <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 8021b3c:	4b0a      	ldr	r3, [pc, #40]	; (8021b68 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 8021b3e:	681b      	ldr	r3, [r3, #0]
 8021b40:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8021b44:	b10a      	cbz	r2, 8021b4a <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8021b46:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8021b48:	b900      	cbnz	r0, 8021b4c <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 8021b4a:	6898      	ldr	r0, [r3, #8]
 8021b4c:	6803      	ldr	r3, [r0, #0]
 8021b4e:	6a1b      	ldr	r3, [r3, #32]
 8021b50:	4718      	bx	r3
 8021b52:	2000      	movs	r0, #0
 8021b54:	4770      	bx	lr
 8021b56:	bf00      	nop
 8021b58:	2001294c 	.word	0x2001294c
 8021b5c:	20012944 	.word	0x20012944
 8021b60:	20012948 	.word	0x20012948
 8021b64:	2001292c 	.word	0x2001292c
 8021b68:	200128a4 	.word	0x200128a4

08021b6c <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 8021b6c:	2010      	movs	r0, #16
 8021b6e:	4770      	bx	lr

08021b70 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 8021b70:	2000      	movs	r0, #0
 8021b72:	4770      	bx	lr

08021b74 <_ZNK8touchgfx8LCD16bpp20getColorFrom24BitRGBEhhh>:
 8021b74:	00d2      	lsls	r2, r2, #3
 8021b76:	0209      	lsls	r1, r1, #8
 8021b78:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021b7c:	ea42 02d3 	orr.w	r2, r2, r3, lsr #3
 8021b80:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 8021b84:	4310      	orrs	r0, r2
 8021b86:	4770      	bx	lr

08021b88 <_ZNK8touchgfx8LCD16bpp11getRedColorENS_9colortypeE>:
 8021b88:	0a09      	lsrs	r1, r1, #8
 8021b8a:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 8021b8e:	4770      	bx	lr

08021b90 <_ZNK8touchgfx8LCD16bpp13getGreenColorENS_9colortypeE>:
 8021b90:	08c9      	lsrs	r1, r1, #3
 8021b92:	f001 00fc 	and.w	r0, r1, #252	; 0xfc
 8021b96:	4770      	bx	lr

08021b98 <_ZNK8touchgfx8LCD16bpp12getBlueColorENS_9colortypeE>:
 8021b98:	00c9      	lsls	r1, r1, #3
 8021b9a:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 8021b9e:	4770      	bx	lr

08021ba0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8021ba0:	2bff      	cmp	r3, #255	; 0xff
 8021ba2:	d050      	beq.n	8021c46 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8021ba4:	2a0b      	cmp	r2, #11
 8021ba6:	d04a      	beq.n	8021c3e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8021ba8:	d80e      	bhi.n	8021bc8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8021baa:	2a03      	cmp	r2, #3
 8021bac:	d03f      	beq.n	8021c2e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 8021bae:	d804      	bhi.n	8021bba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8021bb0:	2a01      	cmp	r2, #1
 8021bb2:	d03e      	beq.n	8021c32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8021bb4:	d93f      	bls.n	8021c36 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8021bb6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8021bb8:	4770      	bx	lr
 8021bba:	2a09      	cmp	r2, #9
 8021bbc:	d03f      	beq.n	8021c3e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8021bbe:	d83c      	bhi.n	8021c3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8021bc0:	2a08      	cmp	r2, #8
 8021bc2:	d03a      	beq.n	8021c3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8021bc4:	2000      	movs	r0, #0
 8021bc6:	4770      	bx	lr
 8021bc8:	2a2f      	cmp	r2, #47	; 0x2f
 8021bca:	d024      	beq.n	8021c16 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8021bcc:	d80d      	bhi.n	8021bea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8021bce:	2a2d      	cmp	r2, #45	; 0x2d
 8021bd0:	d014      	beq.n	8021bfc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 8021bd2:	d826      	bhi.n	8021c22 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8021bd4:	2a2c      	cmp	r2, #44	; 0x2c
 8021bd6:	d1f5      	bne.n	8021bc4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8021bd8:	684b      	ldr	r3, [r1, #4]
 8021bda:	781b      	ldrb	r3, [r3, #0]
 8021bdc:	2b01      	cmp	r3, #1
 8021bde:	d018      	beq.n	8021c12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8021be0:	d323      	bcc.n	8021c2a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 8021be2:	2b02      	cmp	r3, #2
 8021be4:	d1ee      	bne.n	8021bc4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8021be6:	6880      	ldr	r0, [r0, #8]
 8021be8:	4770      	bx	lr
 8021bea:	2a31      	cmp	r2, #49	; 0x31
 8021bec:	d004      	beq.n	8021bf8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 8021bee:	d328      	bcc.n	8021c42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8021bf0:	2a32      	cmp	r2, #50	; 0x32
 8021bf2:	d026      	beq.n	8021c42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8021bf4:	2a33      	cmp	r2, #51	; 0x33
 8021bf6:	d1e5      	bne.n	8021bc4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8021bf8:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8021bfa:	4770      	bx	lr
 8021bfc:	684b      	ldr	r3, [r1, #4]
 8021bfe:	781b      	ldrb	r3, [r3, #0]
 8021c00:	2b01      	cmp	r3, #1
 8021c02:	d004      	beq.n	8021c0e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8021c04:	d30b      	bcc.n	8021c1e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8021c06:	2b02      	cmp	r3, #2
 8021c08:	d1dc      	bne.n	8021bc4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8021c0a:	6900      	ldr	r0, [r0, #16]
 8021c0c:	4770      	bx	lr
 8021c0e:	6a00      	ldr	r0, [r0, #32]
 8021c10:	4770      	bx	lr
 8021c12:	6980      	ldr	r0, [r0, #24]
 8021c14:	4770      	bx	lr
 8021c16:	684b      	ldr	r3, [r1, #4]
 8021c18:	781b      	ldrb	r3, [r3, #0]
 8021c1a:	2b00      	cmp	r3, #0
 8021c1c:	d1d2      	bne.n	8021bc4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8021c1e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8021c20:	4770      	bx	lr
 8021c22:	684b      	ldr	r3, [r1, #4]
 8021c24:	781b      	ldrb	r3, [r3, #0]
 8021c26:	2b00      	cmp	r3, #0
 8021c28:	d1cc      	bne.n	8021bc4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8021c2a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8021c2c:	4770      	bx	lr
 8021c2e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8021c30:	4770      	bx	lr
 8021c32:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8021c34:	4770      	bx	lr
 8021c36:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8021c38:	4770      	bx	lr
 8021c3a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8021c3c:	4770      	bx	lr
 8021c3e:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8021c40:	4770      	bx	lr
 8021c42:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8021c44:	4770      	bx	lr
 8021c46:	2a0b      	cmp	r2, #11
 8021c48:	d049      	beq.n	8021cde <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8021c4a:	d80e      	bhi.n	8021c6a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 8021c4c:	2a03      	cmp	r2, #3
 8021c4e:	d040      	beq.n	8021cd2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8021c50:	d804      	bhi.n	8021c5c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 8021c52:	2a01      	cmp	r2, #1
 8021c54:	d03f      	beq.n	8021cd6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8021c56:	d940      	bls.n	8021cda <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8021c58:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8021c5a:	4770      	bx	lr
 8021c5c:	2a09      	cmp	r2, #9
 8021c5e:	d03e      	beq.n	8021cde <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8021c60:	d801      	bhi.n	8021c66 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 8021c62:	2a08      	cmp	r2, #8
 8021c64:	d1ae      	bne.n	8021bc4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8021c66:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8021c68:	4770      	bx	lr
 8021c6a:	2a2f      	cmp	r2, #47	; 0x2f
 8021c6c:	d024      	beq.n	8021cb8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 8021c6e:	d80d      	bhi.n	8021c8c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8021c70:	2a2d      	cmp	r2, #45	; 0x2d
 8021c72:	d014      	beq.n	8021c9e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 8021c74:	d826      	bhi.n	8021cc4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 8021c76:	2a2c      	cmp	r2, #44	; 0x2c
 8021c78:	d1a4      	bne.n	8021bc4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8021c7a:	684b      	ldr	r3, [r1, #4]
 8021c7c:	781b      	ldrb	r3, [r3, #0]
 8021c7e:	2b01      	cmp	r3, #1
 8021c80:	d018      	beq.n	8021cb4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 8021c82:	d324      	bcc.n	8021cce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8021c84:	2b02      	cmp	r3, #2
 8021c86:	d19d      	bne.n	8021bc4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8021c88:	68c0      	ldr	r0, [r0, #12]
 8021c8a:	4770      	bx	lr
 8021c8c:	2a31      	cmp	r2, #49	; 0x31
 8021c8e:	d004      	beq.n	8021c9a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 8021c90:	d327      	bcc.n	8021ce2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8021c92:	2a32      	cmp	r2, #50	; 0x32
 8021c94:	d025      	beq.n	8021ce2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8021c96:	2a33      	cmp	r2, #51	; 0x33
 8021c98:	d194      	bne.n	8021bc4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8021c9a:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8021c9c:	4770      	bx	lr
 8021c9e:	684b      	ldr	r3, [r1, #4]
 8021ca0:	781b      	ldrb	r3, [r3, #0]
 8021ca2:	2b01      	cmp	r3, #1
 8021ca4:	d004      	beq.n	8021cb0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 8021ca6:	d30b      	bcc.n	8021cc0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 8021ca8:	2b02      	cmp	r3, #2
 8021caa:	d18b      	bne.n	8021bc4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8021cac:	6940      	ldr	r0, [r0, #20]
 8021cae:	4770      	bx	lr
 8021cb0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8021cb2:	4770      	bx	lr
 8021cb4:	69c0      	ldr	r0, [r0, #28]
 8021cb6:	4770      	bx	lr
 8021cb8:	684b      	ldr	r3, [r1, #4]
 8021cba:	781b      	ldrb	r3, [r3, #0]
 8021cbc:	2b00      	cmp	r3, #0
 8021cbe:	d181      	bne.n	8021bc4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8021cc0:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8021cc2:	4770      	bx	lr
 8021cc4:	684b      	ldr	r3, [r1, #4]
 8021cc6:	781b      	ldrb	r3, [r3, #0]
 8021cc8:	2b00      	cmp	r3, #0
 8021cca:	f47f af7b 	bne.w	8021bc4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8021cce:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8021cd0:	4770      	bx	lr
 8021cd2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8021cd4:	4770      	bx	lr
 8021cd6:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8021cd8:	4770      	bx	lr
 8021cda:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8021cdc:	4770      	bx	lr
 8021cde:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8021ce0:	4770      	bx	lr
 8021ce2:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8021ce4:	4770      	bx	lr

08021ce6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021ce6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021cea:	b087      	sub	sp, #28
 8021cec:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8021cee:	9205      	str	r2, [sp, #20]
 8021cf0:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8021cf4:	9202      	str	r2, [sp, #8]
 8021cf6:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8021cfa:	9101      	str	r1, [sp, #4]
 8021cfc:	6871      	ldr	r1, [r6, #4]
 8021cfe:	981a      	ldr	r0, [sp, #104]	; 0x68
 8021d00:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
 8021d04:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 8021d08:	fb01 2505 	mla	r5, r1, r5, r2
 8021d0c:	6832      	ldr	r2, [r6, #0]
 8021d0e:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8021d12:	6802      	ldr	r2, [r0, #0]
 8021d14:	9203      	str	r2, [sp, #12]
 8021d16:	6842      	ldr	r2, [r0, #4]
 8021d18:	fa1f fe84 	uxth.w	lr, r4
 8021d1c:	3204      	adds	r2, #4
 8021d1e:	43e4      	mvns	r4, r4
 8021d20:	9204      	str	r2, [sp, #16]
 8021d22:	b2e4      	uxtb	r4, r4
 8021d24:	9a01      	ldr	r2, [sp, #4]
 8021d26:	2a00      	cmp	r2, #0
 8021d28:	dc03      	bgt.n	8021d32 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 8021d2a:	9a05      	ldr	r2, [sp, #20]
 8021d2c:	2a00      	cmp	r2, #0
 8021d2e:	f340 8119 	ble.w	8021f64 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 8021d32:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021d34:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8021d38:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021d3a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8021d3e:	2b00      	cmp	r3, #0
 8021d40:	dd0f      	ble.n	8021d62 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 8021d42:	1408      	asrs	r0, r1, #16
 8021d44:	d406      	bmi.n	8021d54 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8021d46:	4540      	cmp	r0, r8
 8021d48:	da04      	bge.n	8021d54 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8021d4a:	1410      	asrs	r0, r2, #16
 8021d4c:	d402      	bmi.n	8021d54 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8021d4e:	9e02      	ldr	r6, [sp, #8]
 8021d50:	42b0      	cmp	r0, r6
 8021d52:	db07      	blt.n	8021d64 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8021d54:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8021d56:	4401      	add	r1, r0
 8021d58:	9814      	ldr	r0, [sp, #80]	; 0x50
 8021d5a:	3b01      	subs	r3, #1
 8021d5c:	4402      	add	r2, r0
 8021d5e:	3502      	adds	r5, #2
 8021d60:	e7ed      	b.n	8021d3e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 8021d62:	d00f      	beq.n	8021d84 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 8021d64:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8021d66:	1e58      	subs	r0, r3, #1
 8021d68:	fb06 1600 	mla	r6, r6, r0, r1
 8021d6c:	1436      	asrs	r6, r6, #16
 8021d6e:	d547      	bpl.n	8021e00 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11a>
 8021d70:	469b      	mov	fp, r3
 8021d72:	46aa      	mov	sl, r5
 8021d74:	f1bb 0f00 	cmp.w	fp, #0
 8021d78:	f300 809e 	bgt.w	8021eb8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d2>
 8021d7c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021d80:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8021d84:	9b01      	ldr	r3, [sp, #4]
 8021d86:	2b00      	cmp	r3, #0
 8021d88:	f340 80ec 	ble.w	8021f64 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 8021d8c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021d90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021d94:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021d98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021d9a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021d9e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021da2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021da6:	eef0 6a62 	vmov.f32	s13, s5
 8021daa:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021dae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021db2:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021db6:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8021dba:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021dbe:	eef0 6a43 	vmov.f32	s13, s6
 8021dc2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021dc6:	ee12 2a90 	vmov	r2, s5
 8021dca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021dce:	fb92 f3f3 	sdiv	r3, r2, r3
 8021dd2:	ee13 2a10 	vmov	r2, s6
 8021dd6:	9313      	str	r3, [sp, #76]	; 0x4c
 8021dd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021dda:	fb92 f3f3 	sdiv	r3, r2, r3
 8021dde:	9314      	str	r3, [sp, #80]	; 0x50
 8021de0:	9b01      	ldr	r3, [sp, #4]
 8021de2:	9a05      	ldr	r2, [sp, #20]
 8021de4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021de8:	3b01      	subs	r3, #1
 8021dea:	9301      	str	r3, [sp, #4]
 8021dec:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8021df0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021df2:	eeb0 3a67 	vmov.f32	s6, s15
 8021df6:	bf08      	it	eq
 8021df8:	4613      	moveq	r3, r2
 8021dfa:	eef0 2a47 	vmov.f32	s5, s14
 8021dfe:	e791      	b.n	8021d24 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 8021e00:	4546      	cmp	r6, r8
 8021e02:	dab5      	bge.n	8021d70 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8021e04:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8021e06:	fb06 2000 	mla	r0, r6, r0, r2
 8021e0a:	1400      	asrs	r0, r0, #16
 8021e0c:	d4b0      	bmi.n	8021d70 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8021e0e:	9e02      	ldr	r6, [sp, #8]
 8021e10:	42b0      	cmp	r0, r6
 8021e12:	daad      	bge.n	8021d70 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8021e14:	469a      	mov	sl, r3
 8021e16:	46ab      	mov	fp, r5
 8021e18:	f1ba 0f00 	cmp.w	sl, #0
 8021e1c:	ddae      	ble.n	8021d7c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8021e1e:	9f03      	ldr	r7, [sp, #12]
 8021e20:	1410      	asrs	r0, r2, #16
 8021e22:	140e      	asrs	r6, r1, #16
 8021e24:	fb08 7000 	mla	r0, r8, r0, r7
 8021e28:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021e2c:	5d80      	ldrb	r0, [r0, r6]
 8021e2e:	9e04      	ldr	r6, [sp, #16]
 8021e30:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
 8021e34:	f8bb 6000 	ldrh.w	r6, [fp]
 8021e38:	1237      	asrs	r7, r6, #8
 8021e3a:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8021e3e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8021e42:	fb17 f704 	smulbb	r7, r7, r4
 8021e46:	ea4f 09e6 	mov.w	r9, r6, asr #3
 8021e4a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021e4e:	00f6      	lsls	r6, r6, #3
 8021e50:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8021e54:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8021e58:	10c7      	asrs	r7, r0, #3
 8021e5a:	b2f6      	uxtb	r6, r6
 8021e5c:	00c0      	lsls	r0, r0, #3
 8021e5e:	fb19 f904 	smulbb	r9, r9, r4
 8021e62:	fb16 f604 	smulbb	r6, r6, r4
 8021e66:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8021e6a:	b2c0      	uxtb	r0, r0
 8021e6c:	fa1f fc8c 	uxth.w	ip, ip
 8021e70:	fb07 970e 	mla	r7, r7, lr, r9
 8021e74:	fb00 600e 	mla	r0, r0, lr, r6
 8021e78:	b280      	uxth	r0, r0
 8021e7a:	b2bf      	uxth	r7, r7
 8021e7c:	f10c 0601 	add.w	r6, ip, #1
 8021e80:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8021e84:	f107 0901 	add.w	r9, r7, #1
 8021e88:	1c46      	adds	r6, r0, #1
 8021e8a:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 8021e8e:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8021e92:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8021e94:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8021e98:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8021e9c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8021ea0:	ea4c 0c06 	orr.w	ip, ip, r6
 8021ea4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021ea8:	4401      	add	r1, r0
 8021eaa:	9814      	ldr	r0, [sp, #80]	; 0x50
 8021eac:	ea4c 0c09 	orr.w	ip, ip, r9
 8021eb0:	f82b cb02 	strh.w	ip, [fp], #2
 8021eb4:	4402      	add	r2, r0
 8021eb6:	e7af      	b.n	8021e18 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 8021eb8:	140e      	asrs	r6, r1, #16
 8021eba:	d44a      	bmi.n	8021f52 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 8021ebc:	4546      	cmp	r6, r8
 8021ebe:	da48      	bge.n	8021f52 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 8021ec0:	1410      	asrs	r0, r2, #16
 8021ec2:	d446      	bmi.n	8021f52 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 8021ec4:	9f02      	ldr	r7, [sp, #8]
 8021ec6:	42b8      	cmp	r0, r7
 8021ec8:	da43      	bge.n	8021f52 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 8021eca:	9f03      	ldr	r7, [sp, #12]
 8021ecc:	fb08 7000 	mla	r0, r8, r0, r7
 8021ed0:	5d80      	ldrb	r0, [r0, r6]
 8021ed2:	9e04      	ldr	r6, [sp, #16]
 8021ed4:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
 8021ed8:	f8ba 6000 	ldrh.w	r6, [sl]
 8021edc:	1237      	asrs	r7, r6, #8
 8021ede:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8021ee2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8021ee6:	fb17 f704 	smulbb	r7, r7, r4
 8021eea:	ea4f 09e6 	mov.w	r9, r6, asr #3
 8021eee:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021ef2:	00f6      	lsls	r6, r6, #3
 8021ef4:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8021ef8:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8021efc:	10c7      	asrs	r7, r0, #3
 8021efe:	b2f6      	uxtb	r6, r6
 8021f00:	00c0      	lsls	r0, r0, #3
 8021f02:	fb19 f904 	smulbb	r9, r9, r4
 8021f06:	fb16 f604 	smulbb	r6, r6, r4
 8021f0a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8021f0e:	b2c0      	uxtb	r0, r0
 8021f10:	fa1f fc8c 	uxth.w	ip, ip
 8021f14:	fb07 970e 	mla	r7, r7, lr, r9
 8021f18:	fb00 600e 	mla	r0, r0, lr, r6
 8021f1c:	b2bf      	uxth	r7, r7
 8021f1e:	b280      	uxth	r0, r0
 8021f20:	f10c 0601 	add.w	r6, ip, #1
 8021f24:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8021f28:	f107 0901 	add.w	r9, r7, #1
 8021f2c:	1c46      	adds	r6, r0, #1
 8021f2e:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 8021f32:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8021f36:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8021f3a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8021f3e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8021f42:	ea4c 0c06 	orr.w	ip, ip, r6
 8021f46:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021f4a:	ea4c 0c09 	orr.w	ip, ip, r9
 8021f4e:	f8aa c000 	strh.w	ip, [sl]
 8021f52:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8021f54:	4401      	add	r1, r0
 8021f56:	9814      	ldr	r0, [sp, #80]	; 0x50
 8021f58:	f10a 0a02 	add.w	sl, sl, #2
 8021f5c:	4402      	add	r2, r0
 8021f5e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021f62:	e707      	b.n	8021d74 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 8021f64:	b007      	add	sp, #28
 8021f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021f6a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021f6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f6e:	b085      	sub	sp, #20
 8021f70:	e9dd 7611 	ldrd	r7, r6, [sp, #68]	; 0x44
 8021f74:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8021f76:	9203      	str	r2, [sp, #12]
 8021f78:	6842      	ldr	r2, [r0, #4]
 8021f7a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8021f7c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8021f7e:	6800      	ldr	r0, [r0, #0]
 8021f80:	f9bd c058 	ldrsh.w	ip, [sp, #88]	; 0x58
 8021f84:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 8021f88:	4696      	mov	lr, r2
 8021f8a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021f8c:	fb0e 2505 	mla	r5, lr, r5, r2
 8021f90:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8021f94:	6860      	ldr	r0, [r4, #4]
 8021f96:	6822      	ldr	r2, [r4, #0]
 8021f98:	9201      	str	r2, [sp, #4]
 8021f9a:	1d02      	adds	r2, r0, #4
 8021f9c:	9202      	str	r2, [sp, #8]
 8021f9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021fa2:	2900      	cmp	r1, #0
 8021fa4:	dc03      	bgt.n	8021fae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 8021fa6:	9a03      	ldr	r2, [sp, #12]
 8021fa8:	2a00      	cmp	r2, #0
 8021faa:	f340 809b 	ble.w	80220e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x17a>
 8021fae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021fb0:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8021fb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021fb6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8021fba:	2b00      	cmp	r3, #0
 8021fbc:	dd0e      	ble.n	8021fdc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8021fbe:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8021fc2:	d406      	bmi.n	8021fd2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8021fc4:	45e6      	cmp	lr, ip
 8021fc6:	da04      	bge.n	8021fd2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8021fc8:	ea5f 4e20 	movs.w	lr, r0, asr #16
 8021fcc:	d401      	bmi.n	8021fd2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8021fce:	45c6      	cmp	lr, r8
 8021fd0:	db05      	blt.n	8021fde <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8021fd2:	443c      	add	r4, r7
 8021fd4:	4430      	add	r0, r6
 8021fd6:	3b01      	subs	r3, #1
 8021fd8:	3502      	adds	r5, #2
 8021fda:	e7ee      	b.n	8021fba <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 8021fdc:	d010      	beq.n	8022000 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8021fde:	f103 3eff 	add.w	lr, r3, #4294967295
 8021fe2:	fb07 490e 	mla	r9, r7, lr, r4
 8021fe6:	ea5f 4929 	movs.w	r9, r9, asr #16
 8021fea:	d53d      	bpl.n	8022068 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8021fec:	469e      	mov	lr, r3
 8021fee:	eb05 0b43 	add.w	fp, r5, r3, lsl #1
 8021ff2:	f1be 0f00 	cmp.w	lr, #0
 8021ff6:	dc58      	bgt.n	80220aa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 8021ff8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021ffc:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8022000:	2900      	cmp	r1, #0
 8022002:	dd6f      	ble.n	80220e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x17a>
 8022004:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022008:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802200c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022010:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022012:	3901      	subs	r1, #1
 8022014:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022018:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802201c:	eeb0 6a62 	vmov.f32	s12, s5
 8022020:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022024:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022028:	ee77 2a62 	vsub.f32	s5, s14, s5
 802202c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8022030:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022034:	eeb0 6a43 	vmov.f32	s12, s6
 8022038:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802203c:	ee12 2a90 	vmov	r2, s5
 8022040:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022044:	fb92 f7f3 	sdiv	r7, r2, r3
 8022048:	ee13 2a10 	vmov	r2, s6
 802204c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022050:	fb92 f6f3 	sdiv	r6, r2, r3
 8022054:	9a03      	ldr	r2, [sp, #12]
 8022056:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 802205a:	bf08      	it	eq
 802205c:	4613      	moveq	r3, r2
 802205e:	eeb0 3a67 	vmov.f32	s6, s15
 8022062:	eef0 2a47 	vmov.f32	s5, s14
 8022066:	e79c      	b.n	8021fa2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 8022068:	45e1      	cmp	r9, ip
 802206a:	dabf      	bge.n	8021fec <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x82>
 802206c:	fb06 0e0e 	mla	lr, r6, lr, r0
 8022070:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 8022074:	d4ba      	bmi.n	8021fec <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x82>
 8022076:	45c6      	cmp	lr, r8
 8022078:	dab8      	bge.n	8021fec <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x82>
 802207a:	469e      	mov	lr, r3
 802207c:	46aa      	mov	sl, r5
 802207e:	f1be 0f00 	cmp.w	lr, #0
 8022082:	ddb9      	ble.n	8021ff8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 8022084:	9a01      	ldr	r2, [sp, #4]
 8022086:	ea4f 4920 	mov.w	r9, r0, asr #16
 802208a:	ea4f 4b24 	mov.w	fp, r4, asr #16
 802208e:	fb0c 2909 	mla	r9, ip, r9, r2
 8022092:	9a02      	ldr	r2, [sp, #8]
 8022094:	f819 900b 	ldrb.w	r9, [r9, fp]
 8022098:	f832 9019 	ldrh.w	r9, [r2, r9, lsl #1]
 802209c:	f82a 9b02 	strh.w	r9, [sl], #2
 80220a0:	443c      	add	r4, r7
 80220a2:	4430      	add	r0, r6
 80220a4:	f10e 3eff 	add.w	lr, lr, #4294967295
 80220a8:	e7e9      	b.n	802207e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 80220aa:	ea5f 4a24 	movs.w	sl, r4, asr #16
 80220ae:	d414      	bmi.n	80220da <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x170>
 80220b0:	45e2      	cmp	sl, ip
 80220b2:	da12      	bge.n	80220da <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x170>
 80220b4:	ea5f 4920 	movs.w	r9, r0, asr #16
 80220b8:	d40f      	bmi.n	80220da <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x170>
 80220ba:	45c1      	cmp	r9, r8
 80220bc:	da0d      	bge.n	80220da <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x170>
 80220be:	9a01      	ldr	r2, [sp, #4]
 80220c0:	fb0c 2909 	mla	r9, ip, r9, r2
 80220c4:	9a02      	ldr	r2, [sp, #8]
 80220c6:	f819 900a 	ldrb.w	r9, [r9, sl]
 80220ca:	f832 a019 	ldrh.w	sl, [r2, r9, lsl #1]
 80220ce:	f06f 0201 	mvn.w	r2, #1
 80220d2:	fb02 f90e 	mul.w	r9, r2, lr
 80220d6:	f82b a009 	strh.w	sl, [fp, r9]
 80220da:	443c      	add	r4, r7
 80220dc:	4430      	add	r0, r6
 80220de:	f10e 3eff 	add.w	lr, lr, #4294967295
 80220e2:	e786      	b.n	8021ff2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 80220e4:	b005      	add	sp, #20
 80220e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080220ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80220ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80220ee:	b087      	sub	sp, #28
 80220f0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80220f2:	9205      	str	r2, [sp, #20]
 80220f4:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 80220f8:	9202      	str	r2, [sp, #8]
 80220fa:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80220fe:	9101      	str	r1, [sp, #4]
 8022100:	6871      	ldr	r1, [r6, #4]
 8022102:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8022104:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
 8022108:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 802210c:	fb01 2404 	mla	r4, r1, r4, r2
 8022110:	6832      	ldr	r2, [r6, #0]
 8022112:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8022116:	682a      	ldr	r2, [r5, #0]
 8022118:	9203      	str	r2, [sp, #12]
 802211a:	686a      	ldr	r2, [r5, #4]
 802211c:	fa1f fc80 	uxth.w	ip, r0
 8022120:	3204      	adds	r2, #4
 8022122:	43c0      	mvns	r0, r0
 8022124:	9200      	str	r2, [sp, #0]
 8022126:	b2c0      	uxtb	r0, r0
 8022128:	9a01      	ldr	r2, [sp, #4]
 802212a:	2a00      	cmp	r2, #0
 802212c:	dc03      	bgt.n	8022136 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 802212e:	9a05      	ldr	r2, [sp, #20]
 8022130:	2a00      	cmp	r2, #0
 8022132:	f340 811b 	ble.w	802236c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8022136:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022138:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 802213c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802213e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8022142:	2b00      	cmp	r3, #0
 8022144:	dd0f      	ble.n	8022166 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 8022146:	140d      	asrs	r5, r1, #16
 8022148:	d406      	bmi.n	8022158 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 802214a:	4575      	cmp	r5, lr
 802214c:	da04      	bge.n	8022158 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 802214e:	1415      	asrs	r5, r2, #16
 8022150:	d402      	bmi.n	8022158 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8022152:	9e02      	ldr	r6, [sp, #8]
 8022154:	42b5      	cmp	r5, r6
 8022156:	db07      	blt.n	8022168 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8022158:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802215a:	4429      	add	r1, r5
 802215c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802215e:	3b01      	subs	r3, #1
 8022160:	442a      	add	r2, r5
 8022162:	3402      	adds	r4, #2
 8022164:	e7ed      	b.n	8022142 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 8022166:	d00f      	beq.n	8022188 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 8022168:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 802216a:	1e5d      	subs	r5, r3, #1
 802216c:	fb06 1605 	mla	r6, r6, r5, r1
 8022170:	1436      	asrs	r6, r6, #16
 8022172:	d547      	bpl.n	8022204 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11a>
 8022174:	469a      	mov	sl, r3
 8022176:	46a1      	mov	r9, r4
 8022178:	f1ba 0f00 	cmp.w	sl, #0
 802217c:	f300 809f 	bgt.w	80222be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 8022180:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022184:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8022188:	9b01      	ldr	r3, [sp, #4]
 802218a:	2b00      	cmp	r3, #0
 802218c:	f340 80ee 	ble.w	802236c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8022190:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022194:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022198:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802219c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802219e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80221a2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80221a6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80221aa:	eef0 6a62 	vmov.f32	s13, s5
 80221ae:	ee61 7a27 	vmul.f32	s15, s2, s15
 80221b2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80221b6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80221ba:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 80221be:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80221c2:	eef0 6a43 	vmov.f32	s13, s6
 80221c6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80221ca:	ee12 2a90 	vmov	r2, s5
 80221ce:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80221d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80221d6:	ee13 2a10 	vmov	r2, s6
 80221da:	9313      	str	r3, [sp, #76]	; 0x4c
 80221dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80221de:	fb92 f3f3 	sdiv	r3, r2, r3
 80221e2:	9314      	str	r3, [sp, #80]	; 0x50
 80221e4:	9b01      	ldr	r3, [sp, #4]
 80221e6:	9a05      	ldr	r2, [sp, #20]
 80221e8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80221ec:	3b01      	subs	r3, #1
 80221ee:	9301      	str	r3, [sp, #4]
 80221f0:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 80221f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80221f6:	eeb0 3a67 	vmov.f32	s6, s15
 80221fa:	bf08      	it	eq
 80221fc:	4613      	moveq	r3, r2
 80221fe:	eef0 2a47 	vmov.f32	s5, s14
 8022202:	e791      	b.n	8022128 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 8022204:	4576      	cmp	r6, lr
 8022206:	dab5      	bge.n	8022174 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8022208:	9e14      	ldr	r6, [sp, #80]	; 0x50
 802220a:	fb06 2505 	mla	r5, r6, r5, r2
 802220e:	142d      	asrs	r5, r5, #16
 8022210:	d4b0      	bmi.n	8022174 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8022212:	9e02      	ldr	r6, [sp, #8]
 8022214:	42b5      	cmp	r5, r6
 8022216:	daad      	bge.n	8022174 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8022218:	4699      	mov	r9, r3
 802221a:	46a2      	mov	sl, r4
 802221c:	f1b9 0f00 	cmp.w	r9, #0
 8022220:	ddae      	ble.n	8022180 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8022222:	9f03      	ldr	r7, [sp, #12]
 8022224:	1415      	asrs	r5, r2, #16
 8022226:	140e      	asrs	r6, r1, #16
 8022228:	fb0e 7505 	mla	r5, lr, r5, r7
 802222c:	f109 39ff 	add.w	r9, r9, #4294967295
 8022230:	f815 8006 	ldrb.w	r8, [r5, r6]
 8022234:	9d00      	ldr	r5, [sp, #0]
 8022236:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 802223a:	eb05 0b08 	add.w	fp, r5, r8
 802223e:	f8ba 5000 	ldrh.w	r5, [sl]
 8022242:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8022246:	f89b b001 	ldrb.w	fp, [fp, #1]
 802224a:	122f      	asrs	r7, r5, #8
 802224c:	fb16 f60c 	smulbb	r6, r6, ip
 8022250:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8022254:	fb07 6700 	mla	r7, r7, r0, r6
 8022258:	10ee      	asrs	r6, r5, #3
 802225a:	fb1b fb0c 	smulbb	fp, fp, ip
 802225e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8022262:	fb06 b600 	mla	r6, r6, r0, fp
 8022266:	b2b6      	uxth	r6, r6
 8022268:	9604      	str	r6, [sp, #16]
 802226a:	9e00      	ldr	r6, [sp, #0]
 802226c:	00ed      	lsls	r5, r5, #3
 802226e:	f816 8008 	ldrb.w	r8, [r6, r8]
 8022272:	b2ed      	uxtb	r5, r5
 8022274:	fb15 f500 	smulbb	r5, r5, r0
 8022278:	b2bf      	uxth	r7, r7
 802227a:	fb08 580c 	mla	r8, r8, ip, r5
 802227e:	fa1f f888 	uxth.w	r8, r8
 8022282:	1c7d      	adds	r5, r7, #1
 8022284:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 8022288:	f108 0501 	add.w	r5, r8, #1
 802228c:	eb05 2518 	add.w	r5, r5, r8, lsr #8
 8022290:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8022294:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8022298:	432f      	orrs	r7, r5
 802229a:	9d04      	ldr	r5, [sp, #16]
 802229c:	f105 0b01 	add.w	fp, r5, #1
 80222a0:	eb0b 2b15 	add.w	fp, fp, r5, lsr #8
 80222a4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80222a6:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80222aa:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80222ae:	4429      	add	r1, r5
 80222b0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80222b2:	ea47 070b 	orr.w	r7, r7, fp
 80222b6:	f82a 7b02 	strh.w	r7, [sl], #2
 80222ba:	442a      	add	r2, r5
 80222bc:	e7ae      	b.n	802221c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 80222be:	140e      	asrs	r6, r1, #16
 80222c0:	d44b      	bmi.n	802235a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 80222c2:	4576      	cmp	r6, lr
 80222c4:	da49      	bge.n	802235a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 80222c6:	1415      	asrs	r5, r2, #16
 80222c8:	d447      	bmi.n	802235a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 80222ca:	9f02      	ldr	r7, [sp, #8]
 80222cc:	42bd      	cmp	r5, r7
 80222ce:	da44      	bge.n	802235a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 80222d0:	9f03      	ldr	r7, [sp, #12]
 80222d2:	fb0e 7505 	mla	r5, lr, r5, r7
 80222d6:	f815 8006 	ldrb.w	r8, [r5, r6]
 80222da:	9d00      	ldr	r5, [sp, #0]
 80222dc:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80222e0:	eb05 0b08 	add.w	fp, r5, r8
 80222e4:	f8b9 5000 	ldrh.w	r5, [r9]
 80222e8:	f89b 6002 	ldrb.w	r6, [fp, #2]
 80222ec:	f89b b001 	ldrb.w	fp, [fp, #1]
 80222f0:	122f      	asrs	r7, r5, #8
 80222f2:	fb16 f60c 	smulbb	r6, r6, ip
 80222f6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80222fa:	fb07 6700 	mla	r7, r7, r0, r6
 80222fe:	10ee      	asrs	r6, r5, #3
 8022300:	fb1b fb0c 	smulbb	fp, fp, ip
 8022304:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8022308:	fb06 b600 	mla	r6, r6, r0, fp
 802230c:	b2b6      	uxth	r6, r6
 802230e:	9604      	str	r6, [sp, #16]
 8022310:	9e00      	ldr	r6, [sp, #0]
 8022312:	00ed      	lsls	r5, r5, #3
 8022314:	f816 8008 	ldrb.w	r8, [r6, r8]
 8022318:	b2ed      	uxtb	r5, r5
 802231a:	fb15 f500 	smulbb	r5, r5, r0
 802231e:	b2bf      	uxth	r7, r7
 8022320:	fb08 580c 	mla	r8, r8, ip, r5
 8022324:	fa1f f888 	uxth.w	r8, r8
 8022328:	1c7d      	adds	r5, r7, #1
 802232a:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 802232e:	f108 0501 	add.w	r5, r8, #1
 8022332:	eb05 2518 	add.w	r5, r5, r8, lsr #8
 8022336:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 802233a:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 802233e:	432f      	orrs	r7, r5
 8022340:	9d04      	ldr	r5, [sp, #16]
 8022342:	f105 0b01 	add.w	fp, r5, #1
 8022346:	eb0b 2b15 	add.w	fp, fp, r5, lsr #8
 802234a:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 802234e:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8022352:	ea47 070b 	orr.w	r7, r7, fp
 8022356:	f8a9 7000 	strh.w	r7, [r9]
 802235a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802235c:	4429      	add	r1, r5
 802235e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8022360:	f109 0902 	add.w	r9, r9, #2
 8022364:	442a      	add	r2, r5
 8022366:	f10a 3aff 	add.w	sl, sl, #4294967295
 802236a:	e705      	b.n	8022178 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 802236c:	b007      	add	sp, #28
 802236e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08022374 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022378:	b085      	sub	sp, #20
 802237a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802237e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8022380:	9203      	str	r2, [sp, #12]
 8022382:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8022386:	6870      	ldr	r0, [r6, #4]
 8022388:	9d18      	ldr	r5, [sp, #96]	; 0x60
 802238a:	f9bd 7058 	ldrsh.w	r7, [sp, #88]	; 0x58
 802238e:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 8022392:	9101      	str	r1, [sp, #4]
 8022394:	fb00 2404 	mla	r4, r0, r4, r2
 8022398:	6832      	ldr	r2, [r6, #0]
 802239a:	686e      	ldr	r6, [r5, #4]
 802239c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80223a0:	682a      	ldr	r2, [r5, #0]
 80223a2:	9202      	str	r2, [sp, #8]
 80223a4:	3604      	adds	r6, #4
 80223a6:	9a01      	ldr	r2, [sp, #4]
 80223a8:	2a00      	cmp	r2, #0
 80223aa:	dc03      	bgt.n	80223b4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 80223ac:	9a03      	ldr	r2, [sp, #12]
 80223ae:	2a00      	cmp	r2, #0
 80223b0:	f340 80c7 	ble.w	8022542 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ce>
 80223b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80223b6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80223ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80223bc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80223c0:	2b00      	cmp	r3, #0
 80223c2:	dd0e      	ble.n	80223e2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 80223c4:	1405      	asrs	r5, r0, #16
 80223c6:	d405      	bmi.n	80223d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 80223c8:	42bd      	cmp	r5, r7
 80223ca:	da03      	bge.n	80223d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 80223cc:	1415      	asrs	r5, r2, #16
 80223ce:	d401      	bmi.n	80223d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 80223d0:	4545      	cmp	r5, r8
 80223d2:	db07      	blt.n	80223e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80223d4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80223d6:	4428      	add	r0, r5
 80223d8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80223da:	3b01      	subs	r3, #1
 80223dc:	442a      	add	r2, r5
 80223de:	3402      	adds	r4, #2
 80223e0:	e7ee      	b.n	80223c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 80223e2:	d010      	beq.n	8022406 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 80223e4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80223e6:	1e5d      	subs	r5, r3, #1
 80223e8:	fb01 0c05 	mla	ip, r1, r5, r0
 80223ec:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 80223f0:	d545      	bpl.n	802247e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 80223f2:	469e      	mov	lr, r3
 80223f4:	eb04 0b43 	add.w	fp, r4, r3, lsl #1
 80223f8:	f1be 0f00 	cmp.w	lr, #0
 80223fc:	dc72      	bgt.n	80224e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x170>
 80223fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022402:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8022406:	9b01      	ldr	r3, [sp, #4]
 8022408:	2b00      	cmp	r3, #0
 802240a:	f340 809a 	ble.w	8022542 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ce>
 802240e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022412:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022416:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802241a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802241c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022420:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022424:	eeb0 6a62 	vmov.f32	s12, s5
 8022428:	ee61 7a27 	vmul.f32	s15, s2, s15
 802242c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022430:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022434:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8022438:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802243c:	eeb0 6a43 	vmov.f32	s12, s6
 8022440:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022444:	ee12 2a90 	vmov	r2, s5
 8022448:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802244c:	fb92 f3f3 	sdiv	r3, r2, r3
 8022450:	ee13 2a10 	vmov	r2, s6
 8022454:	9311      	str	r3, [sp, #68]	; 0x44
 8022456:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022458:	fb92 f3f3 	sdiv	r3, r2, r3
 802245c:	9312      	str	r3, [sp, #72]	; 0x48
 802245e:	9b01      	ldr	r3, [sp, #4]
 8022460:	9a03      	ldr	r2, [sp, #12]
 8022462:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022466:	3b01      	subs	r3, #1
 8022468:	9301      	str	r3, [sp, #4]
 802246a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 802246e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022470:	eeb0 3a67 	vmov.f32	s6, s15
 8022474:	bf08      	it	eq
 8022476:	4613      	moveq	r3, r2
 8022478:	eef0 2a47 	vmov.f32	s5, s14
 802247c:	e793      	b.n	80223a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32>
 802247e:	45bc      	cmp	ip, r7
 8022480:	dab7      	bge.n	80223f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8022482:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022484:	fb01 2505 	mla	r5, r1, r5, r2
 8022488:	142d      	asrs	r5, r5, #16
 802248a:	d4b2      	bmi.n	80223f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 802248c:	4545      	cmp	r5, r8
 802248e:	dab0      	bge.n	80223f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8022490:	469e      	mov	lr, r3
 8022492:	46a2      	mov	sl, r4
 8022494:	f1be 0f00 	cmp.w	lr, #0
 8022498:	ddb1      	ble.n	80223fe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 802249a:	9902      	ldr	r1, [sp, #8]
 802249c:	1415      	asrs	r5, r2, #16
 802249e:	fb07 1505 	mla	r5, r7, r5, r1
 80224a2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80224a6:	4928      	ldr	r1, [pc, #160]	; (8022548 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>)
 80224a8:	f815 c00c 	ldrb.w	ip, [r5, ip]
 80224ac:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80224b0:	eb06 0b0c 	add.w	fp, r6, ip
 80224b4:	f10e 3eff 	add.w	lr, lr, #4294967295
 80224b8:	f89b 5001 	ldrb.w	r5, [fp, #1]
 80224bc:	f89b 9002 	ldrb.w	r9, [fp, #2]
 80224c0:	00ed      	lsls	r5, r5, #3
 80224c2:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 80224c6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80224ca:	9911      	ldr	r1, [sp, #68]	; 0x44
 80224cc:	ea49 0505 	orr.w	r5, r9, r5
 80224d0:	f816 900c 	ldrb.w	r9, [r6, ip]
 80224d4:	4408      	add	r0, r1
 80224d6:	9912      	ldr	r1, [sp, #72]	; 0x48
 80224d8:	ea45 05d9 	orr.w	r5, r5, r9, lsr #3
 80224dc:	f82a 5b02 	strh.w	r5, [sl], #2
 80224e0:	440a      	add	r2, r1
 80224e2:	e7d7      	b.n	8022494 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x120>
 80224e4:	ea5f 4c20 	movs.w	ip, r0, asr #16
 80224e8:	d424      	bmi.n	8022534 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 80224ea:	45bc      	cmp	ip, r7
 80224ec:	da22      	bge.n	8022534 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 80224ee:	1415      	asrs	r5, r2, #16
 80224f0:	d420      	bmi.n	8022534 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 80224f2:	4545      	cmp	r5, r8
 80224f4:	da1e      	bge.n	8022534 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 80224f6:	9902      	ldr	r1, [sp, #8]
 80224f8:	fb07 1505 	mla	r5, r7, r5, r1
 80224fc:	f06f 0101 	mvn.w	r1, #1
 8022500:	f815 c00c 	ldrb.w	ip, [r5, ip]
 8022504:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8022508:	eb06 050c 	add.w	r5, r6, ip
 802250c:	fb01 f90e 	mul.w	r9, r1, lr
 8022510:	f895 a002 	ldrb.w	sl, [r5, #2]
 8022514:	786d      	ldrb	r5, [r5, #1]
 8022516:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 802251a:	00ed      	lsls	r5, r5, #3
 802251c:	ea01 2a0a 	and.w	sl, r1, sl, lsl #8
 8022520:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022524:	ea4a 0505 	orr.w	r5, sl, r5
 8022528:	f816 a00c 	ldrb.w	sl, [r6, ip]
 802252c:	ea45 05da 	orr.w	r5, r5, sl, lsr #3
 8022530:	f82b 5009 	strh.w	r5, [fp, r9]
 8022534:	9911      	ldr	r1, [sp, #68]	; 0x44
 8022536:	4408      	add	r0, r1
 8022538:	9912      	ldr	r1, [sp, #72]	; 0x48
 802253a:	f10e 3eff 	add.w	lr, lr, #4294967295
 802253e:	440a      	add	r2, r1
 8022540:	e75a      	b.n	80223f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x84>
 8022542:	b005      	add	sp, #20
 8022544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022548:	fffff800 	.word	0xfffff800

0802254c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802254c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022550:	b087      	sub	sp, #28
 8022552:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022556:	9204      	str	r2, [sp, #16]
 8022558:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 802255c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802255e:	9201      	str	r2, [sp, #4]
 8022560:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8022564:	9205      	str	r2, [sp, #20]
 8022566:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 802256a:	9100      	str	r1, [sp, #0]
 802256c:	6869      	ldr	r1, [r5, #4]
 802256e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8022570:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 8022574:	fb01 2404 	mla	r4, r1, r4, r2
 8022578:	682a      	ldr	r2, [r5, #0]
 802257a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 802257e:	6802      	ldr	r2, [r0, #0]
 8022580:	9202      	str	r2, [sp, #8]
 8022582:	6842      	ldr	r2, [r0, #4]
 8022584:	3204      	adds	r2, #4
 8022586:	9203      	str	r2, [sp, #12]
 8022588:	9a00      	ldr	r2, [sp, #0]
 802258a:	2a00      	cmp	r2, #0
 802258c:	dc03      	bgt.n	8022596 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 802258e:	9a04      	ldr	r2, [sp, #16]
 8022590:	2a00      	cmp	r2, #0
 8022592:	f340 812c 	ble.w	80227ee <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 8022596:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022598:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 802259c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802259e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80225a2:	2b00      	cmp	r3, #0
 80225a4:	dd0f      	ble.n	80225c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 80225a6:	1402      	asrs	r2, r0, #16
 80225a8:	d406      	bmi.n	80225b8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 80225aa:	4572      	cmp	r2, lr
 80225ac:	da04      	bge.n	80225b8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 80225ae:	140a      	asrs	r2, r1, #16
 80225b0:	d402      	bmi.n	80225b8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 80225b2:	9d01      	ldr	r5, [sp, #4]
 80225b4:	42aa      	cmp	r2, r5
 80225b6:	db07      	blt.n	80225c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 80225b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80225ba:	4410      	add	r0, r2
 80225bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80225be:	3b01      	subs	r3, #1
 80225c0:	4411      	add	r1, r2
 80225c2:	3402      	adds	r4, #2
 80225c4:	e7ed      	b.n	80225a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 80225c6:	d00f      	beq.n	80225e8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 80225c8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80225ca:	1e5a      	subs	r2, r3, #1
 80225cc:	fb05 0502 	mla	r5, r5, r2, r0
 80225d0:	142d      	asrs	r5, r5, #16
 80225d2:	d545      	bpl.n	8022660 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 80225d4:	4699      	mov	r9, r3
 80225d6:	46a0      	mov	r8, r4
 80225d8:	f1b9 0f00 	cmp.w	r9, #0
 80225dc:	f300 80a7 	bgt.w	802272e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e2>
 80225e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80225e4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80225e8:	9b00      	ldr	r3, [sp, #0]
 80225ea:	2b00      	cmp	r3, #0
 80225ec:	f340 80ff 	ble.w	80227ee <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 80225f0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80225f4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80225f8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80225fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80225fe:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022602:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022606:	eeb0 6a62 	vmov.f32	s12, s5
 802260a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802260e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022612:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022616:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 802261a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802261e:	eeb0 6a43 	vmov.f32	s12, s6
 8022622:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022626:	ee12 2a90 	vmov	r2, s5
 802262a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802262e:	fb92 f3f3 	sdiv	r3, r2, r3
 8022632:	ee13 2a10 	vmov	r2, s6
 8022636:	9313      	str	r3, [sp, #76]	; 0x4c
 8022638:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802263a:	fb92 f3f3 	sdiv	r3, r2, r3
 802263e:	9314      	str	r3, [sp, #80]	; 0x50
 8022640:	9b00      	ldr	r3, [sp, #0]
 8022642:	9a04      	ldr	r2, [sp, #16]
 8022644:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022648:	3b01      	subs	r3, #1
 802264a:	9300      	str	r3, [sp, #0]
 802264c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8022650:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022652:	eeb0 3a67 	vmov.f32	s6, s15
 8022656:	bf08      	it	eq
 8022658:	4613      	moveq	r3, r2
 802265a:	eef0 2a47 	vmov.f32	s5, s14
 802265e:	e793      	b.n	8022588 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 8022660:	4575      	cmp	r5, lr
 8022662:	dab7      	bge.n	80225d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8022664:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8022666:	fb05 1202 	mla	r2, r5, r2, r1
 802266a:	1412      	asrs	r2, r2, #16
 802266c:	d4b2      	bmi.n	80225d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 802266e:	9d01      	ldr	r5, [sp, #4]
 8022670:	42aa      	cmp	r2, r5
 8022672:	daaf      	bge.n	80225d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8022674:	f04f 0800 	mov.w	r8, #0
 8022678:	eba3 0208 	sub.w	r2, r3, r8
 802267c:	2a00      	cmp	r2, #0
 802267e:	ddaf      	ble.n	80225e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8022680:	9e02      	ldr	r6, [sp, #8]
 8022682:	140a      	asrs	r2, r1, #16
 8022684:	1405      	asrs	r5, r0, #16
 8022686:	fb0e 6202 	mla	r2, lr, r2, r6
 802268a:	5d52      	ldrb	r2, [r2, r5]
 802268c:	9d03      	ldr	r5, [sp, #12]
 802268e:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8022692:	0e2e      	lsrs	r6, r5, #24
 8022694:	d044      	beq.n	8022720 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 8022696:	9a05      	ldr	r2, [sp, #20]
 8022698:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 802269c:	4356      	muls	r6, r2
 802269e:	1c72      	adds	r2, r6, #1
 80226a0:	eb02 2226 	add.w	r2, r2, r6, asr #8
 80226a4:	1212      	asrs	r2, r2, #8
 80226a6:	fa1f f982 	uxth.w	r9, r2
 80226aa:	ea4f 272c 	mov.w	r7, ip, asr #8
 80226ae:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80226b2:	43d2      	mvns	r2, r2
 80226b4:	b2d2      	uxtb	r2, r2
 80226b6:	fb16 f609 	smulbb	r6, r6, r9
 80226ba:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80226be:	fb07 6702 	mla	r7, r7, r2, r6
 80226c2:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80226c6:	ea4f 06ec 	mov.w	r6, ip, asr #3
 80226ca:	b2ed      	uxtb	r5, r5
 80226cc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80226d0:	fa5f fc8c 	uxtb.w	ip, ip
 80226d4:	fb15 f509 	smulbb	r5, r5, r9
 80226d8:	fb0c 5502 	mla	r5, ip, r2, r5
 80226dc:	b2bf      	uxth	r7, r7
 80226de:	fb1a fa09 	smulbb	sl, sl, r9
 80226e2:	b2ad      	uxth	r5, r5
 80226e4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80226e8:	fb06 a602 	mla	r6, r6, r2, sl
 80226ec:	1c7a      	adds	r2, r7, #1
 80226ee:	f105 0a01 	add.w	sl, r5, #1
 80226f2:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80226f6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80226fa:	b2b6      	uxth	r6, r6
 80226fc:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8022700:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8022704:	ea47 070a 	orr.w	r7, r7, sl
 8022708:	f106 0a01 	add.w	sl, r6, #1
 802270c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8022710:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8022714:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8022718:	ea47 070a 	orr.w	r7, r7, sl
 802271c:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8022720:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022722:	4410      	add	r0, r2
 8022724:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022726:	f108 0801 	add.w	r8, r8, #1
 802272a:	4411      	add	r1, r2
 802272c:	e7a4      	b.n	8022678 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12c>
 802272e:	1405      	asrs	r5, r0, #16
 8022730:	d454      	bmi.n	80227dc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 8022732:	4575      	cmp	r5, lr
 8022734:	da52      	bge.n	80227dc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 8022736:	140a      	asrs	r2, r1, #16
 8022738:	d450      	bmi.n	80227dc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 802273a:	9e01      	ldr	r6, [sp, #4]
 802273c:	42b2      	cmp	r2, r6
 802273e:	da4d      	bge.n	80227dc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 8022740:	9e02      	ldr	r6, [sp, #8]
 8022742:	fb0e 6202 	mla	r2, lr, r2, r6
 8022746:	5d52      	ldrb	r2, [r2, r5]
 8022748:	9d03      	ldr	r5, [sp, #12]
 802274a:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 802274e:	0e2e      	lsrs	r6, r5, #24
 8022750:	d044      	beq.n	80227dc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 8022752:	9a05      	ldr	r2, [sp, #20]
 8022754:	f8b8 c000 	ldrh.w	ip, [r8]
 8022758:	4356      	muls	r6, r2
 802275a:	1c72      	adds	r2, r6, #1
 802275c:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8022760:	1212      	asrs	r2, r2, #8
 8022762:	fa1f fa82 	uxth.w	sl, r2
 8022766:	ea4f 272c 	mov.w	r7, ip, asr #8
 802276a:	f3c5 4607 	ubfx	r6, r5, #16, #8
 802276e:	43d2      	mvns	r2, r2
 8022770:	b2d2      	uxtb	r2, r2
 8022772:	fb16 f60a 	smulbb	r6, r6, sl
 8022776:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802277a:	fb07 6702 	mla	r7, r7, r2, r6
 802277e:	f3c5 2b07 	ubfx	fp, r5, #8, #8
 8022782:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8022786:	b2ed      	uxtb	r5, r5
 8022788:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802278c:	fa5f fc8c 	uxtb.w	ip, ip
 8022790:	fb15 f50a 	smulbb	r5, r5, sl
 8022794:	fb0c 5502 	mla	r5, ip, r2, r5
 8022798:	b2bf      	uxth	r7, r7
 802279a:	fb1b fb0a 	smulbb	fp, fp, sl
 802279e:	b2ad      	uxth	r5, r5
 80227a0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80227a4:	fb06 b602 	mla	r6, r6, r2, fp
 80227a8:	1c7a      	adds	r2, r7, #1
 80227aa:	f105 0b01 	add.w	fp, r5, #1
 80227ae:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80227b2:	eb0b 2b15 	add.w	fp, fp, r5, lsr #8
 80227b6:	b2b6      	uxth	r6, r6
 80227b8:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 80227bc:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80227c0:	ea47 070b 	orr.w	r7, r7, fp
 80227c4:	f106 0b01 	add.w	fp, r6, #1
 80227c8:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 80227cc:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80227d0:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80227d4:	ea47 070b 	orr.w	r7, r7, fp
 80227d8:	f8a8 7000 	strh.w	r7, [r8]
 80227dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80227de:	4410      	add	r0, r2
 80227e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80227e2:	f108 0802 	add.w	r8, r8, #2
 80227e6:	4411      	add	r1, r2
 80227e8:	f109 39ff 	add.w	r9, r9, #4294967295
 80227ec:	e6f4      	b.n	80225d8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 80227ee:	b007      	add	sp, #28
 80227f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080227f4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80227f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80227f8:	b087      	sub	sp, #28
 80227fa:	468b      	mov	fp, r1
 80227fc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80227fe:	9205      	str	r2, [sp, #20]
 8022800:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8022804:	9201      	str	r2, [sp, #4]
 8022806:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 802280a:	6869      	ldr	r1, [r5, #4]
 802280c:	981a      	ldr	r0, [sp, #104]	; 0x68
 802280e:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 8022812:	fb01 2404 	mla	r4, r1, r4, r2
 8022816:	682a      	ldr	r2, [r5, #0]
 8022818:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 802281c:	6802      	ldr	r2, [r0, #0]
 802281e:	9203      	str	r2, [sp, #12]
 8022820:	6842      	ldr	r2, [r0, #4]
 8022822:	3204      	adds	r2, #4
 8022824:	9204      	str	r2, [sp, #16]
 8022826:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802282a:	f1bb 0f00 	cmp.w	fp, #0
 802282e:	dc03      	bgt.n	8022838 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 8022830:	9a05      	ldr	r2, [sp, #20]
 8022832:	2a00      	cmp	r2, #0
 8022834:	f340 814a 	ble.w	8022acc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d8>
 8022838:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802283a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 802283e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022840:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8022844:	2b00      	cmp	r3, #0
 8022846:	dd0f      	ble.n	8022868 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8022848:	1408      	asrs	r0, r1, #16
 802284a:	d406      	bmi.n	802285a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 802284c:	4540      	cmp	r0, r8
 802284e:	da04      	bge.n	802285a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8022850:	1410      	asrs	r0, r2, #16
 8022852:	d402      	bmi.n	802285a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8022854:	9d01      	ldr	r5, [sp, #4]
 8022856:	42a8      	cmp	r0, r5
 8022858:	db07      	blt.n	802286a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802285a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802285c:	4401      	add	r1, r0
 802285e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8022860:	3b01      	subs	r3, #1
 8022862:	4402      	add	r2, r0
 8022864:	3402      	adds	r4, #2
 8022866:	e7ed      	b.n	8022844 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 8022868:	d018      	beq.n	802289c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa8>
 802286a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802286c:	1e58      	subs	r0, r3, #1
 802286e:	fb05 1500 	mla	r5, r5, r0, r1
 8022872:	142d      	asrs	r5, r5, #16
 8022874:	d40a      	bmi.n	802288c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8022876:	4545      	cmp	r5, r8
 8022878:	da08      	bge.n	802288c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 802287a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802287c:	fb05 2000 	mla	r0, r5, r0, r2
 8022880:	1400      	asrs	r0, r0, #16
 8022882:	d403      	bmi.n	802288c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8022884:	9d01      	ldr	r5, [sp, #4]
 8022886:	42a8      	cmp	r0, r5
 8022888:	f2c0 80b7 	blt.w	80229fa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 802288c:	2600      	movs	r6, #0
 802288e:	1998      	adds	r0, r3, r6
 8022890:	2800      	cmp	r0, #0
 8022892:	dc3e      	bgt.n	8022912 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 8022894:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022898:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802289c:	f1bb 0f00 	cmp.w	fp, #0
 80228a0:	f340 8114 	ble.w	8022acc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d8>
 80228a4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80228a8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80228ac:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80228b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80228b2:	f1bb 0b01 	subs.w	fp, fp, #1
 80228b6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80228ba:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80228be:	eeb0 6a62 	vmov.f32	s12, s5
 80228c2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80228c6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80228ca:	ee77 2a62 	vsub.f32	s5, s14, s5
 80228ce:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80228d2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80228d6:	eeb0 6a43 	vmov.f32	s12, s6
 80228da:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80228de:	ee12 2a90 	vmov	r2, s5
 80228e2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80228e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80228ea:	ee13 2a10 	vmov	r2, s6
 80228ee:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80228f2:	9313      	str	r3, [sp, #76]	; 0x4c
 80228f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80228f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80228fa:	9a05      	ldr	r2, [sp, #20]
 80228fc:	9314      	str	r3, [sp, #80]	; 0x50
 80228fe:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8022902:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022904:	eeb0 3a67 	vmov.f32	s6, s15
 8022908:	bf08      	it	eq
 802290a:	4613      	moveq	r3, r2
 802290c:	eef0 2a47 	vmov.f32	s5, s14
 8022910:	e78b      	b.n	802282a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 8022912:	140d      	asrs	r5, r1, #16
 8022914:	d459      	bmi.n	80229ca <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8022916:	4545      	cmp	r5, r8
 8022918:	da57      	bge.n	80229ca <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 802291a:	1410      	asrs	r0, r2, #16
 802291c:	d455      	bmi.n	80229ca <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 802291e:	9f01      	ldr	r7, [sp, #4]
 8022920:	42b8      	cmp	r0, r7
 8022922:	da52      	bge.n	80229ca <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8022924:	9f03      	ldr	r7, [sp, #12]
 8022926:	fb08 7000 	mla	r0, r8, r0, r7
 802292a:	5d40      	ldrb	r0, [r0, r5]
 802292c:	9d04      	ldr	r5, [sp, #16]
 802292e:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8022932:	0e07      	lsrs	r7, r0, #24
 8022934:	2fff      	cmp	r7, #255	; 0xff
 8022936:	d04e      	beq.n	80229d6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e2>
 8022938:	b2fd      	uxtb	r5, r7
 802293a:	2f00      	cmp	r7, #0
 802293c:	d045      	beq.n	80229ca <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 802293e:	f06f 0701 	mvn.w	r7, #1
 8022942:	4377      	muls	r7, r6
 8022944:	fa1f f985 	uxth.w	r9, r5
 8022948:	f834 e007 	ldrh.w	lr, [r4, r7]
 802294c:	9702      	str	r7, [sp, #8]
 802294e:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8022952:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8022956:	43ed      	mvns	r5, r5
 8022958:	b2ed      	uxtb	r5, r5
 802295a:	fb17 f709 	smulbb	r7, r7, r9
 802295e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022962:	fb0c 7c05 	mla	ip, ip, r5, r7
 8022966:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 802296a:	ea4f 07ee 	mov.w	r7, lr, asr #3
 802296e:	b2c0      	uxtb	r0, r0
 8022970:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8022974:	fa5f fe8e 	uxtb.w	lr, lr
 8022978:	fb10 f009 	smulbb	r0, r0, r9
 802297c:	fb0e 0005 	mla	r0, lr, r5, r0
 8022980:	b280      	uxth	r0, r0
 8022982:	fa1f fc8c 	uxth.w	ip, ip
 8022986:	fb1a fa09 	smulbb	sl, sl, r9
 802298a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802298e:	fb07 a705 	mla	r7, r7, r5, sl
 8022992:	f100 0a01 	add.w	sl, r0, #1
 8022996:	f10c 0501 	add.w	r5, ip, #1
 802299a:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 802299e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80229a2:	b2bf      	uxth	r7, r7
 80229a4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80229a8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80229ac:	ea4c 0c0a 	orr.w	ip, ip, sl
 80229b0:	f107 0a01 	add.w	sl, r7, #1
 80229b4:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80229b8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80229bc:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80229c0:	9802      	ldr	r0, [sp, #8]
 80229c2:	ea4c 0c0a 	orr.w	ip, ip, sl
 80229c6:	f824 c000 	strh.w	ip, [r4, r0]
 80229ca:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80229cc:	4401      	add	r1, r0
 80229ce:	9814      	ldr	r0, [sp, #80]	; 0x50
 80229d0:	3e01      	subs	r6, #1
 80229d2:	4402      	add	r2, r0
 80229d4:	e75b      	b.n	802288e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 80229d6:	f06f 0501 	mvn.w	r5, #1
 80229da:	fb05 f706 	mul.w	r7, r5, r6
 80229de:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 80229e2:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 80229e6:	0945      	lsrs	r5, r0, #5
 80229e8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80229ec:	ea4c 0505 	orr.w	r5, ip, r5
 80229f0:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 80229f4:	4305      	orrs	r5, r0
 80229f6:	53e5      	strh	r5, [r4, r7]
 80229f8:	e7e7      	b.n	80229ca <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 80229fa:	f04f 0e00 	mov.w	lr, #0
 80229fe:	eba3 000e 	sub.w	r0, r3, lr
 8022a02:	2800      	cmp	r0, #0
 8022a04:	f77f af46 	ble.w	8022894 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 8022a08:	9e03      	ldr	r6, [sp, #12]
 8022a0a:	1410      	asrs	r0, r2, #16
 8022a0c:	140d      	asrs	r5, r1, #16
 8022a0e:	fb08 6000 	mla	r0, r8, r0, r6
 8022a12:	5d40      	ldrb	r0, [r0, r5]
 8022a14:	9d04      	ldr	r5, [sp, #16]
 8022a16:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8022a1a:	0e06      	lsrs	r6, r0, #24
 8022a1c:	2eff      	cmp	r6, #255	; 0xff
 8022a1e:	d048      	beq.n	8022ab2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 8022a20:	b2f5      	uxtb	r5, r6
 8022a22:	2e00      	cmp	r6, #0
 8022a24:	d03e      	beq.n	8022aa4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8022a26:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8022a2a:	fa1f f985 	uxth.w	r9, r5
 8022a2e:	ea4f 272c 	mov.w	r7, ip, asr #8
 8022a32:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8022a36:	43ed      	mvns	r5, r5
 8022a38:	b2ed      	uxtb	r5, r5
 8022a3a:	fb16 f609 	smulbb	r6, r6, r9
 8022a3e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8022a42:	fb07 6705 	mla	r7, r7, r5, r6
 8022a46:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8022a4a:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8022a4e:	b2c0      	uxtb	r0, r0
 8022a50:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8022a54:	fa5f fc8c 	uxtb.w	ip, ip
 8022a58:	fb10 f009 	smulbb	r0, r0, r9
 8022a5c:	fb0c 0005 	mla	r0, ip, r5, r0
 8022a60:	b2bf      	uxth	r7, r7
 8022a62:	fb1a fa09 	smulbb	sl, sl, r9
 8022a66:	b280      	uxth	r0, r0
 8022a68:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8022a6c:	fb06 a605 	mla	r6, r6, r5, sl
 8022a70:	1c7d      	adds	r5, r7, #1
 8022a72:	f100 0a01 	add.w	sl, r0, #1
 8022a76:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 8022a7a:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8022a7e:	b2b6      	uxth	r6, r6
 8022a80:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8022a84:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8022a88:	ea47 070a 	orr.w	r7, r7, sl
 8022a8c:	f106 0a01 	add.w	sl, r6, #1
 8022a90:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8022a94:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8022a98:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8022a9c:	ea47 070a 	orr.w	r7, r7, sl
 8022aa0:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 8022aa4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8022aa6:	4401      	add	r1, r0
 8022aa8:	9814      	ldr	r0, [sp, #80]	; 0x50
 8022aaa:	f10e 0e01 	add.w	lr, lr, #1
 8022aae:	4402      	add	r2, r0
 8022ab0:	e7a5      	b.n	80229fe <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x20a>
 8022ab2:	4d08      	ldr	r5, [pc, #32]	; (8022ad4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e0>)
 8022ab4:	ea05 2610 	and.w	r6, r5, r0, lsr #8
 8022ab8:	0945      	lsrs	r5, r0, #5
 8022aba:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022abe:	4335      	orrs	r5, r6
 8022ac0:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8022ac4:	4305      	orrs	r5, r0
 8022ac6:	f824 501e 	strh.w	r5, [r4, lr, lsl #1]
 8022aca:	e7eb      	b.n	8022aa4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8022acc:	b007      	add	sp, #28
 8022ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022ad2:	bf00      	nop
 8022ad4:	fffff800 	.word	0xfffff800

08022ad8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022adc:	b087      	sub	sp, #28
 8022ade:	468b      	mov	fp, r1
 8022ae0:	9204      	str	r2, [sp, #16]
 8022ae2:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8022ae6:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8022ae8:	9201      	str	r2, [sp, #4]
 8022aea:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8022aee:	9205      	str	r2, [sp, #20]
 8022af0:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8022af4:	6869      	ldr	r1, [r5, #4]
 8022af6:	981a      	ldr	r0, [sp, #104]	; 0x68
 8022af8:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 8022afc:	fb01 2404 	mla	r4, r1, r4, r2
 8022b00:	682a      	ldr	r2, [r5, #0]
 8022b02:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8022b06:	6802      	ldr	r2, [r0, #0]
 8022b08:	9202      	str	r2, [sp, #8]
 8022b0a:	6842      	ldr	r2, [r0, #4]
 8022b0c:	9203      	str	r2, [sp, #12]
 8022b0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022b12:	f1bb 0f00 	cmp.w	fp, #0
 8022b16:	dc03      	bgt.n	8022b20 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 8022b18:	9a04      	ldr	r2, [sp, #16]
 8022b1a:	2a00      	cmp	r2, #0
 8022b1c:	f340 8136 	ble.w	8022d8c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b4>
 8022b20:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022b22:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8022b26:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022b28:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8022b2c:	2b00      	cmp	r3, #0
 8022b2e:	dd0f      	ble.n	8022b50 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8022b30:	1408      	asrs	r0, r1, #16
 8022b32:	d406      	bmi.n	8022b42 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8022b34:	4540      	cmp	r0, r8
 8022b36:	da04      	bge.n	8022b42 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8022b38:	1410      	asrs	r0, r2, #16
 8022b3a:	d402      	bmi.n	8022b42 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8022b3c:	9d01      	ldr	r5, [sp, #4]
 8022b3e:	42a8      	cmp	r0, r5
 8022b40:	db07      	blt.n	8022b52 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8022b42:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8022b44:	4401      	add	r1, r0
 8022b46:	9814      	ldr	r0, [sp, #80]	; 0x50
 8022b48:	3b01      	subs	r3, #1
 8022b4a:	4402      	add	r2, r0
 8022b4c:	3402      	adds	r4, #2
 8022b4e:	e7ed      	b.n	8022b2c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x54>
 8022b50:	d00f      	beq.n	8022b72 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 8022b52:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8022b54:	1e58      	subs	r0, r3, #1
 8022b56:	fb05 1500 	mla	r5, r5, r0, r1
 8022b5a:	142d      	asrs	r5, r5, #16
 8022b5c:	d544      	bpl.n	8022be8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8022b5e:	9300      	str	r3, [sp, #0]
 8022b60:	46a2      	mov	sl, r4
 8022b62:	9800      	ldr	r0, [sp, #0]
 8022b64:	2800      	cmp	r0, #0
 8022b66:	f300 80ab 	bgt.w	8022cc0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e8>
 8022b6a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022b6e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8022b72:	f1bb 0f00 	cmp.w	fp, #0
 8022b76:	f340 8109 	ble.w	8022d8c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b4>
 8022b7a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022b7e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022b82:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022b86:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022b88:	f1bb 0b01 	subs.w	fp, fp, #1
 8022b8c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022b90:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022b94:	eeb0 6a62 	vmov.f32	s12, s5
 8022b98:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022b9c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022ba0:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022ba4:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8022ba8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022bac:	eeb0 6a43 	vmov.f32	s12, s6
 8022bb0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022bb4:	ee12 2a90 	vmov	r2, s5
 8022bb8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022bbc:	fb92 f3f3 	sdiv	r3, r2, r3
 8022bc0:	ee13 2a10 	vmov	r2, s6
 8022bc4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022bc8:	9313      	str	r3, [sp, #76]	; 0x4c
 8022bca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022bcc:	fb92 f3f3 	sdiv	r3, r2, r3
 8022bd0:	9a04      	ldr	r2, [sp, #16]
 8022bd2:	9314      	str	r3, [sp, #80]	; 0x50
 8022bd4:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8022bd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022bda:	eeb0 3a67 	vmov.f32	s6, s15
 8022bde:	bf08      	it	eq
 8022be0:	4613      	moveq	r3, r2
 8022be2:	eef0 2a47 	vmov.f32	s5, s14
 8022be6:	e794      	b.n	8022b12 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a>
 8022be8:	4545      	cmp	r5, r8
 8022bea:	dab8      	bge.n	8022b5e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 8022bec:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8022bee:	fb05 2000 	mla	r0, r5, r0, r2
 8022bf2:	1400      	asrs	r0, r0, #16
 8022bf4:	d4b3      	bmi.n	8022b5e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 8022bf6:	9d01      	ldr	r5, [sp, #4]
 8022bf8:	42a8      	cmp	r0, r5
 8022bfa:	dab0      	bge.n	8022b5e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 8022bfc:	f04f 0900 	mov.w	r9, #0
 8022c00:	eba3 0009 	sub.w	r0, r3, r9
 8022c04:	2800      	cmp	r0, #0
 8022c06:	ddb0      	ble.n	8022b6a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8022c08:	140d      	asrs	r5, r1, #16
 8022c0a:	1410      	asrs	r0, r2, #16
 8022c0c:	fb08 5000 	mla	r0, r8, r0, r5
 8022c10:	9d03      	ldr	r5, [sp, #12]
 8022c12:	5c2e      	ldrb	r6, [r5, r0]
 8022c14:	2e00      	cmp	r6, #0
 8022c16:	d04c      	beq.n	8022cb2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1da>
 8022c18:	9d02      	ldr	r5, [sp, #8]
 8022c1a:	f835 e010 	ldrh.w	lr, [r5, r0, lsl #1]
 8022c1e:	9805      	ldr	r0, [sp, #20]
 8022c20:	f834 5019 	ldrh.w	r5, [r4, r9, lsl #1]
 8022c24:	4346      	muls	r6, r0
 8022c26:	1c70      	adds	r0, r6, #1
 8022c28:	eb00 2016 	add.w	r0, r0, r6, lsr #8
 8022c2c:	1200      	asrs	r0, r0, #8
 8022c2e:	b287      	uxth	r7, r0
 8022c30:	122e      	asrs	r6, r5, #8
 8022c32:	43c0      	mvns	r0, r0
 8022c34:	b2c0      	uxtb	r0, r0
 8022c36:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8022c3a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8022c3e:	fb16 f600 	smulbb	r6, r6, r0
 8022c42:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8022c46:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022c4a:	00ed      	lsls	r5, r5, #3
 8022c4c:	fb0c 6c07 	mla	ip, ip, r7, r6
 8022c50:	b2ed      	uxtb	r5, r5
 8022c52:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8022c56:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8022c5a:	fb15 f500 	smulbb	r5, r5, r0
 8022c5e:	fa5f fe8e 	uxtb.w	lr, lr
 8022c62:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8022c66:	fb0e 5507 	mla	r5, lr, r7, r5
 8022c6a:	fb1a fa00 	smulbb	sl, sl, r0
 8022c6e:	fa1f fc8c 	uxth.w	ip, ip
 8022c72:	b2ad      	uxth	r5, r5
 8022c74:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8022c78:	fb06 a607 	mla	r6, r6, r7, sl
 8022c7c:	f10c 0001 	add.w	r0, ip, #1
 8022c80:	f105 0a01 	add.w	sl, r5, #1
 8022c84:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 8022c88:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8022c8c:	b2b6      	uxth	r6, r6
 8022c8e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8022c92:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8022c96:	ea4c 0c0a 	orr.w	ip, ip, sl
 8022c9a:	f106 0a01 	add.w	sl, r6, #1
 8022c9e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8022ca2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8022ca6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8022caa:	ea4c 0c0a 	orr.w	ip, ip, sl
 8022cae:	f824 c019 	strh.w	ip, [r4, r9, lsl #1]
 8022cb2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8022cb4:	4401      	add	r1, r0
 8022cb6:	9814      	ldr	r0, [sp, #80]	; 0x50
 8022cb8:	f109 0901 	add.w	r9, r9, #1
 8022cbc:	4402      	add	r2, r0
 8022cbe:	e79f      	b.n	8022c00 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x128>
 8022cc0:	1408      	asrs	r0, r1, #16
 8022cc2:	d459      	bmi.n	8022d78 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a0>
 8022cc4:	4540      	cmp	r0, r8
 8022cc6:	da57      	bge.n	8022d78 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a0>
 8022cc8:	1415      	asrs	r5, r2, #16
 8022cca:	d455      	bmi.n	8022d78 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a0>
 8022ccc:	9e01      	ldr	r6, [sp, #4]
 8022cce:	42b5      	cmp	r5, r6
 8022cd0:	da52      	bge.n	8022d78 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a0>
 8022cd2:	fb08 0005 	mla	r0, r8, r5, r0
 8022cd6:	9d03      	ldr	r5, [sp, #12]
 8022cd8:	5c2e      	ldrb	r6, [r5, r0]
 8022cda:	2e00      	cmp	r6, #0
 8022cdc:	d04c      	beq.n	8022d78 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a0>
 8022cde:	9d02      	ldr	r5, [sp, #8]
 8022ce0:	f835 e010 	ldrh.w	lr, [r5, r0, lsl #1]
 8022ce4:	9805      	ldr	r0, [sp, #20]
 8022ce6:	f8ba 5000 	ldrh.w	r5, [sl]
 8022cea:	4346      	muls	r6, r0
 8022cec:	1c70      	adds	r0, r6, #1
 8022cee:	eb00 2016 	add.w	r0, r0, r6, lsr #8
 8022cf2:	1200      	asrs	r0, r0, #8
 8022cf4:	b287      	uxth	r7, r0
 8022cf6:	122e      	asrs	r6, r5, #8
 8022cf8:	43c0      	mvns	r0, r0
 8022cfa:	b2c0      	uxtb	r0, r0
 8022cfc:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8022d00:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8022d04:	fb16 f600 	smulbb	r6, r6, r0
 8022d08:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8022d0c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022d10:	00ed      	lsls	r5, r5, #3
 8022d12:	fb0c 6c07 	mla	ip, ip, r7, r6
 8022d16:	b2ed      	uxtb	r5, r5
 8022d18:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8022d1c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8022d20:	fb15 f500 	smulbb	r5, r5, r0
 8022d24:	fa5f fe8e 	uxtb.w	lr, lr
 8022d28:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8022d2c:	fb0e 5507 	mla	r5, lr, r7, r5
 8022d30:	fb19 f900 	smulbb	r9, r9, r0
 8022d34:	fa1f fc8c 	uxth.w	ip, ip
 8022d38:	b2ad      	uxth	r5, r5
 8022d3a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8022d3e:	fb06 9607 	mla	r6, r6, r7, r9
 8022d42:	f10c 0001 	add.w	r0, ip, #1
 8022d46:	f105 0901 	add.w	r9, r5, #1
 8022d4a:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 8022d4e:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8022d52:	b2b6      	uxth	r6, r6
 8022d54:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 8022d58:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8022d5c:	ea4c 0c09 	orr.w	ip, ip, r9
 8022d60:	f106 0901 	add.w	r9, r6, #1
 8022d64:	eb09 2916 	add.w	r9, r9, r6, lsr #8
 8022d68:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8022d6c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8022d70:	ea4c 0c09 	orr.w	ip, ip, r9
 8022d74:	f8aa c000 	strh.w	ip, [sl]
 8022d78:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8022d7a:	4401      	add	r1, r0
 8022d7c:	9814      	ldr	r0, [sp, #80]	; 0x50
 8022d7e:	4402      	add	r2, r0
 8022d80:	9800      	ldr	r0, [sp, #0]
 8022d82:	3801      	subs	r0, #1
 8022d84:	f10a 0a02 	add.w	sl, sl, #2
 8022d88:	9000      	str	r0, [sp, #0]
 8022d8a:	e6ea      	b.n	8022b62 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8022d8c:	b007      	add	sp, #28
 8022d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022d92 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022d92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d96:	b087      	sub	sp, #28
 8022d98:	468b      	mov	fp, r1
 8022d9a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8022d9c:	9205      	str	r2, [sp, #20]
 8022d9e:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8022da2:	9202      	str	r2, [sp, #8]
 8022da4:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8022da8:	6869      	ldr	r1, [r5, #4]
 8022daa:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8022dac:	f9bd 9060 	ldrsh.w	r9, [sp, #96]	; 0x60
 8022db0:	fb01 2000 	mla	r0, r1, r0, r2
 8022db4:	682a      	ldr	r2, [r5, #0]
 8022db6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8022dba:	6822      	ldr	r2, [r4, #0]
 8022dbc:	9201      	str	r2, [sp, #4]
 8022dbe:	6862      	ldr	r2, [r4, #4]
 8022dc0:	9204      	str	r2, [sp, #16]
 8022dc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022dc6:	f1bb 0f00 	cmp.w	fp, #0
 8022dca:	dc03      	bgt.n	8022dd4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 8022dcc:	9a05      	ldr	r2, [sp, #20]
 8022dce:	2a00      	cmp	r2, #0
 8022dd0:	f340 813d 	ble.w	802304e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2bc>
 8022dd4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022dd6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8022dda:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022ddc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8022de0:	2b00      	cmp	r3, #0
 8022de2:	dd0f      	ble.n	8022e04 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8022de4:	140c      	asrs	r4, r1, #16
 8022de6:	d406      	bmi.n	8022df6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8022de8:	454c      	cmp	r4, r9
 8022dea:	da04      	bge.n	8022df6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8022dec:	1414      	asrs	r4, r2, #16
 8022dee:	d402      	bmi.n	8022df6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8022df0:	9d02      	ldr	r5, [sp, #8]
 8022df2:	42ac      	cmp	r4, r5
 8022df4:	db07      	blt.n	8022e06 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8022df6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022df8:	4421      	add	r1, r4
 8022dfa:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022dfc:	3b01      	subs	r3, #1
 8022dfe:	4422      	add	r2, r4
 8022e00:	3002      	adds	r0, #2
 8022e02:	e7ed      	b.n	8022de0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 8022e04:	d018      	beq.n	8022e38 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa6>
 8022e06:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8022e08:	1e5c      	subs	r4, r3, #1
 8022e0a:	fb05 1504 	mla	r5, r5, r4, r1
 8022e0e:	142d      	asrs	r5, r5, #16
 8022e10:	d40a      	bmi.n	8022e28 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8022e12:	454d      	cmp	r5, r9
 8022e14:	da08      	bge.n	8022e28 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8022e16:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8022e18:	fb05 2404 	mla	r4, r5, r4, r2
 8022e1c:	1424      	asrs	r4, r4, #16
 8022e1e:	d403      	bmi.n	8022e28 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8022e20:	9d02      	ldr	r5, [sp, #8]
 8022e22:	42ac      	cmp	r4, r5
 8022e24:	f2c0 80ae 	blt.w	8022f84 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f2>
 8022e28:	2600      	movs	r6, #0
 8022e2a:	199c      	adds	r4, r3, r6
 8022e2c:	2c00      	cmp	r4, #0
 8022e2e:	dc3e      	bgt.n	8022eae <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11c>
 8022e30:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022e34:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022e38:	f1bb 0f00 	cmp.w	fp, #0
 8022e3c:	f340 8107 	ble.w	802304e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2bc>
 8022e40:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022e44:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022e48:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022e4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022e4e:	f1bb 0b01 	subs.w	fp, fp, #1
 8022e52:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022e56:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022e5a:	eeb0 6a62 	vmov.f32	s12, s5
 8022e5e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022e62:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022e66:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022e6a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8022e6e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022e72:	eeb0 6a43 	vmov.f32	s12, s6
 8022e76:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022e7a:	ee12 2a90 	vmov	r2, s5
 8022e7e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022e82:	fb92 f3f3 	sdiv	r3, r2, r3
 8022e86:	ee13 2a10 	vmov	r2, s6
 8022e8a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022e8e:	9313      	str	r3, [sp, #76]	; 0x4c
 8022e90:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022e92:	fb92 f3f3 	sdiv	r3, r2, r3
 8022e96:	9a05      	ldr	r2, [sp, #20]
 8022e98:	9314      	str	r3, [sp, #80]	; 0x50
 8022e9a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8022e9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022ea0:	eeb0 3a67 	vmov.f32	s6, s15
 8022ea4:	bf08      	it	eq
 8022ea6:	4613      	moveq	r3, r2
 8022ea8:	eef0 2a47 	vmov.f32	s5, s14
 8022eac:	e78b      	b.n	8022dc6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 8022eae:	140c      	asrs	r4, r1, #16
 8022eb0:	d45a      	bmi.n	8022f68 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8022eb2:	454c      	cmp	r4, r9
 8022eb4:	da58      	bge.n	8022f68 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8022eb6:	1415      	asrs	r5, r2, #16
 8022eb8:	d456      	bmi.n	8022f68 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8022eba:	9f02      	ldr	r7, [sp, #8]
 8022ebc:	42bd      	cmp	r5, r7
 8022ebe:	da53      	bge.n	8022f68 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8022ec0:	fb09 4505 	mla	r5, r9, r5, r4
 8022ec4:	9c04      	ldr	r4, [sp, #16]
 8022ec6:	5d64      	ldrb	r4, [r4, r5]
 8022ec8:	2cff      	cmp	r4, #255	; 0xff
 8022eca:	d053      	beq.n	8022f74 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e2>
 8022ecc:	2c00      	cmp	r4, #0
 8022ece:	d04b      	beq.n	8022f68 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8022ed0:	9f01      	ldr	r7, [sp, #4]
 8022ed2:	f837 8015 	ldrh.w	r8, [r7, r5, lsl #1]
 8022ed6:	f06f 0501 	mvn.w	r5, #1
 8022eda:	4375      	muls	r5, r6
 8022edc:	9503      	str	r5, [sp, #12]
 8022ede:	5b45      	ldrh	r5, [r0, r5]
 8022ee0:	fa1f fc84 	uxth.w	ip, r4
 8022ee4:	122f      	asrs	r7, r5, #8
 8022ee6:	43e4      	mvns	r4, r4
 8022ee8:	b2e4      	uxtb	r4, r4
 8022eea:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8022eee:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8022ef2:	fb17 f704 	smulbb	r7, r7, r4
 8022ef6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8022efa:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8022efe:	00ed      	lsls	r5, r5, #3
 8022f00:	fb0e 7e0c 	mla	lr, lr, ip, r7
 8022f04:	b2ed      	uxtb	r5, r5
 8022f06:	ea4f 07e8 	mov.w	r7, r8, asr #3
 8022f0a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8022f0e:	fb15 f504 	smulbb	r5, r5, r4
 8022f12:	fa5f f888 	uxtb.w	r8, r8
 8022f16:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8022f1a:	fb08 550c 	mla	r5, r8, ip, r5
 8022f1e:	fb1a fa04 	smulbb	sl, sl, r4
 8022f22:	fa1f fe8e 	uxth.w	lr, lr
 8022f26:	b2ad      	uxth	r5, r5
 8022f28:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8022f2c:	fb07 a70c 	mla	r7, r7, ip, sl
 8022f30:	f10e 0401 	add.w	r4, lr, #1
 8022f34:	f105 0a01 	add.w	sl, r5, #1
 8022f38:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 8022f3c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8022f40:	b2bf      	uxth	r7, r7
 8022f42:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8022f46:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8022f4a:	ea4e 0e0a 	orr.w	lr, lr, sl
 8022f4e:	f107 0a01 	add.w	sl, r7, #1
 8022f52:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8022f56:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8022f5a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8022f5e:	9c03      	ldr	r4, [sp, #12]
 8022f60:	ea4e 0e0a 	orr.w	lr, lr, sl
 8022f64:	f820 e004 	strh.w	lr, [r0, r4]
 8022f68:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022f6a:	4421      	add	r1, r4
 8022f6c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022f6e:	3e01      	subs	r6, #1
 8022f70:	4422      	add	r2, r4
 8022f72:	e75a      	b.n	8022e2a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8022f74:	9c01      	ldr	r4, [sp, #4]
 8022f76:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 8022f7a:	f06f 0401 	mvn.w	r4, #1
 8022f7e:	4374      	muls	r4, r6
 8022f80:	5305      	strh	r5, [r0, r4]
 8022f82:	e7f1      	b.n	8022f68 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8022f84:	f04f 0800 	mov.w	r8, #0
 8022f88:	eba3 0408 	sub.w	r4, r3, r8
 8022f8c:	2c00      	cmp	r4, #0
 8022f8e:	f77f af4f 	ble.w	8022e30 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 8022f92:	140c      	asrs	r4, r1, #16
 8022f94:	1415      	asrs	r5, r2, #16
 8022f96:	fb09 4505 	mla	r5, r9, r5, r4
 8022f9a:	9c04      	ldr	r4, [sp, #16]
 8022f9c:	5d64      	ldrb	r4, [r4, r5]
 8022f9e:	2cff      	cmp	r4, #255	; 0xff
 8022fa0:	d04f      	beq.n	8023042 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8022fa2:	2c00      	cmp	r4, #0
 8022fa4:	d046      	beq.n	8023034 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 8022fa6:	9e01      	ldr	r6, [sp, #4]
 8022fa8:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 8022fac:	f830 5018 	ldrh.w	r5, [r0, r8, lsl #1]
 8022fb0:	b2a7      	uxth	r7, r4
 8022fb2:	122e      	asrs	r6, r5, #8
 8022fb4:	43e4      	mvns	r4, r4
 8022fb6:	b2e4      	uxtb	r4, r4
 8022fb8:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8022fbc:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8022fc0:	fb16 f604 	smulbb	r6, r6, r4
 8022fc4:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8022fc8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022fcc:	00ed      	lsls	r5, r5, #3
 8022fce:	fb0c 6c07 	mla	ip, ip, r7, r6
 8022fd2:	b2ed      	uxtb	r5, r5
 8022fd4:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8022fd8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8022fdc:	fb15 f504 	smulbb	r5, r5, r4
 8022fe0:	fa5f fe8e 	uxtb.w	lr, lr
 8022fe4:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8022fe8:	fb0e 5507 	mla	r5, lr, r7, r5
 8022fec:	fb1a fa04 	smulbb	sl, sl, r4
 8022ff0:	fa1f fc8c 	uxth.w	ip, ip
 8022ff4:	b2ad      	uxth	r5, r5
 8022ff6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8022ffa:	fb06 a607 	mla	r6, r6, r7, sl
 8022ffe:	f10c 0401 	add.w	r4, ip, #1
 8023002:	f105 0a01 	add.w	sl, r5, #1
 8023006:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 802300a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 802300e:	b2b6      	uxth	r6, r6
 8023010:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8023014:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8023018:	ea4c 0c0a 	orr.w	ip, ip, sl
 802301c:	f106 0a01 	add.w	sl, r6, #1
 8023020:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8023024:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8023028:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 802302c:	ea4c 0c0a 	orr.w	ip, ip, sl
 8023030:	f820 c018 	strh.w	ip, [r0, r8, lsl #1]
 8023034:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023036:	4421      	add	r1, r4
 8023038:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802303a:	f108 0801 	add.w	r8, r8, #1
 802303e:	4422      	add	r2, r4
 8023040:	e7a2      	b.n	8022f88 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 8023042:	9c01      	ldr	r4, [sp, #4]
 8023044:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 8023048:	f820 4018 	strh.w	r4, [r0, r8, lsl #1]
 802304c:	e7f2      	b.n	8023034 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 802304e:	b007      	add	sp, #28
 8023050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023054 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8023054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023058:	b085      	sub	sp, #20
 802305a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802305c:	9203      	str	r2, [sp, #12]
 802305e:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 8023062:	9201      	str	r2, [sp, #4]
 8023064:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8023068:	9100      	str	r1, [sp, #0]
 802306a:	6841      	ldr	r1, [r0, #4]
 802306c:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 8023070:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 8023074:	fb01 2404 	mla	r4, r1, r4, r2
 8023078:	6802      	ldr	r2, [r0, #0]
 802307a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 802307e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8023080:	fa1f fe85 	uxth.w	lr, r5
 8023084:	6812      	ldr	r2, [r2, #0]
 8023086:	9202      	str	r2, [sp, #8]
 8023088:	43ed      	mvns	r5, r5
 802308a:	b2ed      	uxtb	r5, r5
 802308c:	9a00      	ldr	r2, [sp, #0]
 802308e:	2a00      	cmp	r2, #0
 8023090:	dc03      	bgt.n	802309a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 8023092:	9a03      	ldr	r2, [sp, #12]
 8023094:	2a00      	cmp	r2, #0
 8023096:	f340 8117 	ble.w	80232c8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 802309a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802309c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80230a0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80230a2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80230a6:	2b00      	cmp	r3, #0
 80230a8:	dd0f      	ble.n	80230ca <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 80230aa:	1408      	asrs	r0, r1, #16
 80230ac:	d406      	bmi.n	80230bc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 80230ae:	4540      	cmp	r0, r8
 80230b0:	da04      	bge.n	80230bc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 80230b2:	1410      	asrs	r0, r2, #16
 80230b4:	d402      	bmi.n	80230bc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 80230b6:	9e01      	ldr	r6, [sp, #4]
 80230b8:	42b0      	cmp	r0, r6
 80230ba:	db07      	blt.n	80230cc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 80230bc:	9811      	ldr	r0, [sp, #68]	; 0x44
 80230be:	4401      	add	r1, r0
 80230c0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80230c2:	3b01      	subs	r3, #1
 80230c4:	4402      	add	r2, r0
 80230c6:	3402      	adds	r4, #2
 80230c8:	e7ed      	b.n	80230a6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 80230ca:	d069      	beq.n	80231a0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 80230cc:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80230ce:	1e58      	subs	r0, r3, #1
 80230d0:	fb06 1600 	mla	r6, r6, r0, r1
 80230d4:	1436      	asrs	r6, r6, #16
 80230d6:	d459      	bmi.n	802318c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x138>
 80230d8:	4546      	cmp	r6, r8
 80230da:	da57      	bge.n	802318c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x138>
 80230dc:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80230de:	fb06 2000 	mla	r0, r6, r0, r2
 80230e2:	1400      	asrs	r0, r0, #16
 80230e4:	d452      	bmi.n	802318c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x138>
 80230e6:	9e01      	ldr	r6, [sp, #4]
 80230e8:	42b0      	cmp	r0, r6
 80230ea:	da4f      	bge.n	802318c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x138>
 80230ec:	469a      	mov	sl, r3
 80230ee:	46a3      	mov	fp, r4
 80230f0:	f1ba 0f00 	cmp.w	sl, #0
 80230f4:	dd50      	ble.n	8023198 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 80230f6:	140e      	asrs	r6, r1, #16
 80230f8:	1410      	asrs	r0, r2, #16
 80230fa:	fb08 6000 	mla	r0, r8, r0, r6
 80230fe:	9e02      	ldr	r6, [sp, #8]
 8023100:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
 8023104:	f8bb 6000 	ldrh.w	r6, [fp]
 8023108:	1237      	asrs	r7, r6, #8
 802310a:	ea4f 2c20 	mov.w	ip, r0, asr #8
 802310e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8023112:	fb17 f705 	smulbb	r7, r7, r5
 8023116:	ea4f 09e6 	mov.w	r9, r6, asr #3
 802311a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802311e:	00f6      	lsls	r6, r6, #3
 8023120:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8023124:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8023128:	10c7      	asrs	r7, r0, #3
 802312a:	b2f6      	uxtb	r6, r6
 802312c:	00c0      	lsls	r0, r0, #3
 802312e:	fb19 f905 	smulbb	r9, r9, r5
 8023132:	fb16 f605 	smulbb	r6, r6, r5
 8023136:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802313a:	b2c0      	uxtb	r0, r0
 802313c:	fa1f fc8c 	uxth.w	ip, ip
 8023140:	fb07 970e 	mla	r7, r7, lr, r9
 8023144:	fb00 600e 	mla	r0, r0, lr, r6
 8023148:	b280      	uxth	r0, r0
 802314a:	b2bf      	uxth	r7, r7
 802314c:	f10c 0601 	add.w	r6, ip, #1
 8023150:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8023154:	f107 0901 	add.w	r9, r7, #1
 8023158:	1c46      	adds	r6, r0, #1
 802315a:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 802315e:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8023162:	9811      	ldr	r0, [sp, #68]	; 0x44
 8023164:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8023168:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 802316c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8023170:	ea4c 0c06 	orr.w	ip, ip, r6
 8023174:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8023178:	4401      	add	r1, r0
 802317a:	9812      	ldr	r0, [sp, #72]	; 0x48
 802317c:	ea4c 0c09 	orr.w	ip, ip, r9
 8023180:	f82b cb02 	strh.w	ip, [fp], #2
 8023184:	4402      	add	r2, r0
 8023186:	f10a 3aff 	add.w	sl, sl, #4294967295
 802318a:	e7b1      	b.n	80230f0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 802318c:	f04f 0900 	mov.w	r9, #0
 8023190:	eb03 0009 	add.w	r0, r3, r9
 8023194:	2800      	cmp	r0, #0
 8023196:	dc41      	bgt.n	802321c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 8023198:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802319c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80231a0:	9b00      	ldr	r3, [sp, #0]
 80231a2:	2b00      	cmp	r3, #0
 80231a4:	f340 8090 	ble.w	80232c8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80231a8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80231ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80231b0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80231b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80231b6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80231ba:	ee31 1a05 	vadd.f32	s2, s2, s10
 80231be:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80231c2:	eef0 6a62 	vmov.f32	s13, s5
 80231c6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80231ca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80231ce:	ee77 2a62 	vsub.f32	s5, s14, s5
 80231d2:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 80231d6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80231da:	eef0 6a43 	vmov.f32	s13, s6
 80231de:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80231e2:	ee12 2a90 	vmov	r2, s5
 80231e6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80231ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80231ee:	ee13 2a10 	vmov	r2, s6
 80231f2:	9311      	str	r3, [sp, #68]	; 0x44
 80231f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80231f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80231fa:	9312      	str	r3, [sp, #72]	; 0x48
 80231fc:	9b00      	ldr	r3, [sp, #0]
 80231fe:	9a03      	ldr	r2, [sp, #12]
 8023200:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023204:	3b01      	subs	r3, #1
 8023206:	9300      	str	r3, [sp, #0]
 8023208:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 802320c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802320e:	eeb0 3a67 	vmov.f32	s6, s15
 8023212:	bf08      	it	eq
 8023214:	4613      	moveq	r3, r2
 8023216:	eef0 2a47 	vmov.f32	s5, s14
 802321a:	e737      	b.n	802308c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 802321c:	140e      	asrs	r6, r1, #16
 802321e:	d44c      	bmi.n	80232ba <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 8023220:	4546      	cmp	r6, r8
 8023222:	da4a      	bge.n	80232ba <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 8023224:	1410      	asrs	r0, r2, #16
 8023226:	d448      	bmi.n	80232ba <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 8023228:	9f01      	ldr	r7, [sp, #4]
 802322a:	42b8      	cmp	r0, r7
 802322c:	da45      	bge.n	80232ba <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 802322e:	fb08 6000 	mla	r0, r8, r0, r6
 8023232:	9e02      	ldr	r6, [sp, #8]
 8023234:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
 8023238:	f06f 0601 	mvn.w	r6, #1
 802323c:	fb06 fb09 	mul.w	fp, r6, r9
 8023240:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8023244:	f834 600b 	ldrh.w	r6, [r4, fp]
 8023248:	1237      	asrs	r7, r6, #8
 802324a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802324e:	fb17 f705 	smulbb	r7, r7, r5
 8023252:	ea4f 0ae6 	mov.w	sl, r6, asr #3
 8023256:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802325a:	00f6      	lsls	r6, r6, #3
 802325c:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8023260:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8023264:	10c7      	asrs	r7, r0, #3
 8023266:	b2f6      	uxtb	r6, r6
 8023268:	00c0      	lsls	r0, r0, #3
 802326a:	fb1a fa05 	smulbb	sl, sl, r5
 802326e:	fb16 f605 	smulbb	r6, r6, r5
 8023272:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8023276:	b2c0      	uxtb	r0, r0
 8023278:	fa1f fc8c 	uxth.w	ip, ip
 802327c:	fb07 a70e 	mla	r7, r7, lr, sl
 8023280:	fb00 600e 	mla	r0, r0, lr, r6
 8023284:	b2bf      	uxth	r7, r7
 8023286:	b280      	uxth	r0, r0
 8023288:	f10c 0601 	add.w	r6, ip, #1
 802328c:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8023290:	f107 0a01 	add.w	sl, r7, #1
 8023294:	1c46      	adds	r6, r0, #1
 8023296:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 802329a:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 802329e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80232a2:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80232a6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80232aa:	ea4c 0c06 	orr.w	ip, ip, r6
 80232ae:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80232b2:	ea4c 0c0a 	orr.w	ip, ip, sl
 80232b6:	f824 c00b 	strh.w	ip, [r4, fp]
 80232ba:	9811      	ldr	r0, [sp, #68]	; 0x44
 80232bc:	4401      	add	r1, r0
 80232be:	9812      	ldr	r0, [sp, #72]	; 0x48
 80232c0:	f109 39ff 	add.w	r9, r9, #4294967295
 80232c4:	4402      	add	r2, r0
 80232c6:	e763      	b.n	8023190 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13c>
 80232c8:	b005      	add	sp, #20
 80232ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080232ce <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80232ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80232d2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80232d4:	9201      	str	r2, [sp, #4]
 80232d6:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 80232da:	6844      	ldr	r4, [r0, #4]
 80232dc:	6800      	ldr	r0, [r0, #0]
 80232de:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 80232e2:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 80232e6:	fb04 2505 	mla	r5, r4, r5, r2
 80232ea:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80232ee:	9816      	ldr	r0, [sp, #88]	; 0x58
 80232f0:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 80232f4:	6802      	ldr	r2, [r0, #0]
 80232f6:	9200      	str	r2, [sp, #0]
 80232f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80232fc:	2900      	cmp	r1, #0
 80232fe:	dc03      	bgt.n	8023308 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a>
 8023300:	9a01      	ldr	r2, [sp, #4]
 8023302:	2a00      	cmp	r2, #0
 8023304:	f340 8095 	ble.w	8023432 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 8023308:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802330a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 802330e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023310:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8023314:	2b00      	cmp	r3, #0
 8023316:	dd0e      	ble.n	8023336 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8023318:	ea5f 4824 	movs.w	r8, r4, asr #16
 802331c:	d406      	bmi.n	802332c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 802331e:	45e0      	cmp	r8, ip
 8023320:	da04      	bge.n	802332c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 8023322:	ea5f 4820 	movs.w	r8, r0, asr #16
 8023326:	d401      	bmi.n	802332c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 8023328:	45f0      	cmp	r8, lr
 802332a:	db05      	blt.n	8023338 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 802332c:	443c      	add	r4, r7
 802332e:	4430      	add	r0, r6
 8023330:	3b01      	subs	r3, #1
 8023332:	3502      	adds	r5, #2
 8023334:	e7ee      	b.n	8023314 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 8023336:	d010      	beq.n	802335a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 8023338:	f103 38ff 	add.w	r8, r3, #4294967295
 802333c:	fb07 4908 	mla	r9, r7, r8, r4
 8023340:	ea5f 4929 	movs.w	r9, r9, asr #16
 8023344:	d53d      	bpl.n	80233c2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8023346:	4698      	mov	r8, r3
 8023348:	eb05 0b43 	add.w	fp, r5, r3, lsl #1
 802334c:	f1b8 0f00 	cmp.w	r8, #0
 8023350:	dc55      	bgt.n	80233fe <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 8023352:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023356:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 802335a:	2900      	cmp	r1, #0
 802335c:	dd69      	ble.n	8023432 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 802335e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023362:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023366:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802336a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802336c:	3901      	subs	r1, #1
 802336e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023372:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023376:	eeb0 6a62 	vmov.f32	s12, s5
 802337a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802337e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023382:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023386:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 802338a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802338e:	eeb0 6a43 	vmov.f32	s12, s6
 8023392:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023396:	ee12 2a90 	vmov	r2, s5
 802339a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802339e:	fb92 f7f3 	sdiv	r7, r2, r3
 80233a2:	ee13 2a10 	vmov	r2, s6
 80233a6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80233aa:	fb92 f6f3 	sdiv	r6, r2, r3
 80233ae:	9a01      	ldr	r2, [sp, #4]
 80233b0:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 80233b4:	bf08      	it	eq
 80233b6:	4613      	moveq	r3, r2
 80233b8:	eeb0 3a67 	vmov.f32	s6, s15
 80233bc:	eef0 2a47 	vmov.f32	s5, s14
 80233c0:	e79c      	b.n	80232fc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e>
 80233c2:	45e1      	cmp	r9, ip
 80233c4:	dabf      	bge.n	8023346 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 80233c6:	fb06 0808 	mla	r8, r6, r8, r0
 80233ca:	ea5f 4828 	movs.w	r8, r8, asr #16
 80233ce:	d4ba      	bmi.n	8023346 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 80233d0:	45f0      	cmp	r8, lr
 80233d2:	dab8      	bge.n	8023346 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 80233d4:	4698      	mov	r8, r3
 80233d6:	46aa      	mov	sl, r5
 80233d8:	f1b8 0f00 	cmp.w	r8, #0
 80233dc:	ddb9      	ble.n	8023352 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x84>
 80233de:	ea4f 4920 	mov.w	r9, r0, asr #16
 80233e2:	ea4f 4b24 	mov.w	fp, r4, asr #16
 80233e6:	fb0c b909 	mla	r9, ip, r9, fp
 80233ea:	9a00      	ldr	r2, [sp, #0]
 80233ec:	f832 9019 	ldrh.w	r9, [r2, r9, lsl #1]
 80233f0:	f82a 9b02 	strh.w	r9, [sl], #2
 80233f4:	443c      	add	r4, r7
 80233f6:	4430      	add	r0, r6
 80233f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80233fc:	e7ec      	b.n	80233d8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 80233fe:	ea5f 4a24 	movs.w	sl, r4, asr #16
 8023402:	d411      	bmi.n	8023428 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 8023404:	45e2      	cmp	sl, ip
 8023406:	da0f      	bge.n	8023428 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 8023408:	ea5f 4920 	movs.w	r9, r0, asr #16
 802340c:	d40c      	bmi.n	8023428 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 802340e:	45f1      	cmp	r9, lr
 8023410:	da0a      	bge.n	8023428 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 8023412:	fb0c a909 	mla	r9, ip, r9, sl
 8023416:	9a00      	ldr	r2, [sp, #0]
 8023418:	f832 a019 	ldrh.w	sl, [r2, r9, lsl #1]
 802341c:	f06f 0201 	mvn.w	r2, #1
 8023420:	fb02 f908 	mul.w	r9, r2, r8
 8023424:	f82b a009 	strh.w	sl, [fp, r9]
 8023428:	443c      	add	r4, r7
 802342a:	4430      	add	r0, r6
 802342c:	f108 38ff 	add.w	r8, r8, #4294967295
 8023430:	e78c      	b.n	802334c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8023432:	b003      	add	sp, #12
 8023434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023438 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8023438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802343c:	b087      	sub	sp, #28
 802343e:	468b      	mov	fp, r1
 8023440:	9204      	str	r2, [sp, #16]
 8023442:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8023446:	9815      	ldr	r0, [sp, #84]	; 0x54
 8023448:	9201      	str	r2, [sp, #4]
 802344a:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 802344e:	9205      	str	r2, [sp, #20]
 8023450:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8023454:	6841      	ldr	r1, [r0, #4]
 8023456:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 802345a:	fb01 2404 	mla	r4, r1, r4, r2
 802345e:	6802      	ldr	r2, [r0, #0]
 8023460:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8023464:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8023466:	6812      	ldr	r2, [r2, #0]
 8023468:	9203      	str	r2, [sp, #12]
 802346a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802346e:	f1bb 0f00 	cmp.w	fp, #0
 8023472:	dc03      	bgt.n	802347c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 8023474:	9a04      	ldr	r2, [sp, #16]
 8023476:	2a00      	cmp	r2, #0
 8023478:	f340 812c 	ble.w	80236d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29c>
 802347c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802347e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8023482:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023484:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8023488:	2b00      	cmp	r3, #0
 802348a:	dd0f      	ble.n	80234ac <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 802348c:	1402      	asrs	r2, r0, #16
 802348e:	d406      	bmi.n	802349e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8023490:	4542      	cmp	r2, r8
 8023492:	da04      	bge.n	802349e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8023494:	140a      	asrs	r2, r1, #16
 8023496:	d402      	bmi.n	802349e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8023498:	9d01      	ldr	r5, [sp, #4]
 802349a:	42aa      	cmp	r2, r5
 802349c:	db07      	blt.n	80234ae <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802349e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80234a0:	4410      	add	r0, r2
 80234a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80234a4:	3b01      	subs	r3, #1
 80234a6:	4411      	add	r1, r2
 80234a8:	3402      	adds	r4, #2
 80234aa:	e7ed      	b.n	8023488 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 80234ac:	d01a      	beq.n	80234e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xac>
 80234ae:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80234b0:	1e5a      	subs	r2, r3, #1
 80234b2:	fb05 0502 	mla	r5, r5, r2, r0
 80234b6:	142d      	asrs	r5, r5, #16
 80234b8:	d40a      	bmi.n	80234d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 80234ba:	4545      	cmp	r5, r8
 80234bc:	da08      	bge.n	80234d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 80234be:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80234c0:	fb05 1202 	mla	r2, r5, r2, r1
 80234c4:	1412      	asrs	r2, r2, #16
 80234c6:	d403      	bmi.n	80234d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 80234c8:	9d01      	ldr	r5, [sp, #4]
 80234ca:	42aa      	cmp	r2, r5
 80234cc:	f2c0 80a6 	blt.w	802361c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e4>
 80234d0:	f04f 0c00 	mov.w	ip, #0
 80234d4:	eb03 020c 	add.w	r2, r3, ip
 80234d8:	2a00      	cmp	r2, #0
 80234da:	dc3e      	bgt.n	802355a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 80234dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80234e0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80234e4:	f1bb 0f00 	cmp.w	fp, #0
 80234e8:	f340 80f4 	ble.w	80236d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29c>
 80234ec:	ee30 0a04 	vadd.f32	s0, s0, s8
 80234f0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80234f4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80234f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80234fa:	f1bb 0b01 	subs.w	fp, fp, #1
 80234fe:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023502:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023506:	eeb0 6a62 	vmov.f32	s12, s5
 802350a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802350e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023512:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023516:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 802351a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802351e:	eeb0 6a43 	vmov.f32	s12, s6
 8023522:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023526:	ee12 2a90 	vmov	r2, s5
 802352a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802352e:	fb92 f3f3 	sdiv	r3, r2, r3
 8023532:	ee13 2a10 	vmov	r2, s6
 8023536:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802353a:	9313      	str	r3, [sp, #76]	; 0x4c
 802353c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802353e:	fb92 f3f3 	sdiv	r3, r2, r3
 8023542:	9a04      	ldr	r2, [sp, #16]
 8023544:	9314      	str	r3, [sp, #80]	; 0x50
 8023546:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 802354a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802354c:	eeb0 3a67 	vmov.f32	s6, s15
 8023550:	bf08      	it	eq
 8023552:	4613      	moveq	r3, r2
 8023554:	eef0 2a47 	vmov.f32	s5, s14
 8023558:	e789      	b.n	802346e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 802355a:	1405      	asrs	r5, r0, #16
 802355c:	d457      	bmi.n	802360e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 802355e:	4545      	cmp	r5, r8
 8023560:	da55      	bge.n	802360e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8023562:	140a      	asrs	r2, r1, #16
 8023564:	d453      	bmi.n	802360e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8023566:	9e01      	ldr	r6, [sp, #4]
 8023568:	42b2      	cmp	r2, r6
 802356a:	da50      	bge.n	802360e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 802356c:	fb08 5202 	mla	r2, r8, r2, r5
 8023570:	9d03      	ldr	r5, [sp, #12]
 8023572:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8023576:	0e2e      	lsrs	r6, r5, #24
 8023578:	d049      	beq.n	802360e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 802357a:	f06f 0201 	mvn.w	r2, #1
 802357e:	fb02 f20c 	mul.w	r2, r2, ip
 8023582:	9202      	str	r2, [sp, #8]
 8023584:	f834 e002 	ldrh.w	lr, [r4, r2]
 8023588:	9a05      	ldr	r2, [sp, #20]
 802358a:	4356      	muls	r6, r2
 802358c:	1c72      	adds	r2, r6, #1
 802358e:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8023592:	1212      	asrs	r2, r2, #8
 8023594:	fa1f f982 	uxth.w	r9, r2
 8023598:	ea4f 272e 	mov.w	r7, lr, asr #8
 802359c:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80235a0:	43d2      	mvns	r2, r2
 80235a2:	b2d2      	uxtb	r2, r2
 80235a4:	fb16 f609 	smulbb	r6, r6, r9
 80235a8:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80235ac:	fb07 6702 	mla	r7, r7, r2, r6
 80235b0:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80235b4:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80235b8:	b2ed      	uxtb	r5, r5
 80235ba:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80235be:	fa5f fe8e 	uxtb.w	lr, lr
 80235c2:	fb15 f509 	smulbb	r5, r5, r9
 80235c6:	fb0e 5502 	mla	r5, lr, r2, r5
 80235ca:	b2bf      	uxth	r7, r7
 80235cc:	fb1a fa09 	smulbb	sl, sl, r9
 80235d0:	b2ad      	uxth	r5, r5
 80235d2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80235d6:	fb06 a602 	mla	r6, r6, r2, sl
 80235da:	1c7a      	adds	r2, r7, #1
 80235dc:	f105 0a01 	add.w	sl, r5, #1
 80235e0:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80235e4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80235e8:	b2b6      	uxth	r6, r6
 80235ea:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80235ee:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80235f2:	ea47 070a 	orr.w	r7, r7, sl
 80235f6:	f106 0a01 	add.w	sl, r6, #1
 80235fa:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80235fe:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8023602:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8023606:	9a02      	ldr	r2, [sp, #8]
 8023608:	ea47 070a 	orr.w	r7, r7, sl
 802360c:	52a7      	strh	r7, [r4, r2]
 802360e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8023610:	4410      	add	r0, r2
 8023612:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023614:	f10c 3cff 	add.w	ip, ip, #4294967295
 8023618:	4411      	add	r1, r2
 802361a:	e75b      	b.n	80234d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 802361c:	f04f 0e00 	mov.w	lr, #0
 8023620:	eba3 020e 	sub.w	r2, r3, lr
 8023624:	2a00      	cmp	r2, #0
 8023626:	f77f af59 	ble.w	80234dc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa4>
 802362a:	1405      	asrs	r5, r0, #16
 802362c:	140a      	asrs	r2, r1, #16
 802362e:	fb08 5202 	mla	r2, r8, r2, r5
 8023632:	9d03      	ldr	r5, [sp, #12]
 8023634:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8023638:	0e2e      	lsrs	r6, r5, #24
 802363a:	d044      	beq.n	80236c6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 802363c:	9a05      	ldr	r2, [sp, #20]
 802363e:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8023642:	4356      	muls	r6, r2
 8023644:	1c72      	adds	r2, r6, #1
 8023646:	eb02 2226 	add.w	r2, r2, r6, asr #8
 802364a:	1212      	asrs	r2, r2, #8
 802364c:	fa1f f982 	uxth.w	r9, r2
 8023650:	ea4f 272c 	mov.w	r7, ip, asr #8
 8023654:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8023658:	43d2      	mvns	r2, r2
 802365a:	b2d2      	uxtb	r2, r2
 802365c:	fb16 f609 	smulbb	r6, r6, r9
 8023660:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8023664:	fb07 6702 	mla	r7, r7, r2, r6
 8023668:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 802366c:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8023670:	b2ed      	uxtb	r5, r5
 8023672:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8023676:	fa5f fc8c 	uxtb.w	ip, ip
 802367a:	fb15 f509 	smulbb	r5, r5, r9
 802367e:	fb0c 5502 	mla	r5, ip, r2, r5
 8023682:	b2bf      	uxth	r7, r7
 8023684:	fb1a fa09 	smulbb	sl, sl, r9
 8023688:	b2ad      	uxth	r5, r5
 802368a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802368e:	fb06 a602 	mla	r6, r6, r2, sl
 8023692:	1c7a      	adds	r2, r7, #1
 8023694:	f105 0a01 	add.w	sl, r5, #1
 8023698:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 802369c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80236a0:	b2b6      	uxth	r6, r6
 80236a2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80236a6:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80236aa:	ea47 070a 	orr.w	r7, r7, sl
 80236ae:	f106 0a01 	add.w	sl, r6, #1
 80236b2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80236b6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80236ba:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80236be:	ea47 070a 	orr.w	r7, r7, sl
 80236c2:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 80236c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80236c8:	4410      	add	r0, r2
 80236ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80236cc:	f10e 0e01 	add.w	lr, lr, #1
 80236d0:	4411      	add	r1, r2
 80236d2:	e7a5      	b.n	8023620 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e8>
 80236d4:	b007      	add	sp, #28
 80236d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080236dc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80236dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80236e0:	b087      	sub	sp, #28
 80236e2:	468b      	mov	fp, r1
 80236e4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80236e6:	9205      	str	r2, [sp, #20]
 80236e8:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 80236ec:	9201      	str	r2, [sp, #4]
 80236ee:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 80236f2:	6861      	ldr	r1, [r4, #4]
 80236f4:	f9bd 9060 	ldrsh.w	r9, [sp, #96]	; 0x60
 80236f8:	fb01 2000 	mla	r0, r1, r0, r2
 80236fc:	6822      	ldr	r2, [r4, #0]
 80236fe:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8023702:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8023704:	6812      	ldr	r2, [r2, #0]
 8023706:	9203      	str	r2, [sp, #12]
 8023708:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802370c:	f1bb 0f00 	cmp.w	fp, #0
 8023710:	dc03      	bgt.n	802371a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 8023712:	9a05      	ldr	r2, [sp, #20]
 8023714:	2a00      	cmp	r2, #0
 8023716:	f340 814b 	ble.w	80239b0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d4>
 802371a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802371c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8023720:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023722:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8023726:	2b00      	cmp	r3, #0
 8023728:	dd0f      	ble.n	802374a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 802372a:	140c      	asrs	r4, r1, #16
 802372c:	d406      	bmi.n	802373c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 802372e:	454c      	cmp	r4, r9
 8023730:	da04      	bge.n	802373c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8023732:	1414      	asrs	r4, r2, #16
 8023734:	d402      	bmi.n	802373c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8023736:	9d01      	ldr	r5, [sp, #4]
 8023738:	42ac      	cmp	r4, r5
 802373a:	db07      	blt.n	802374c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 802373c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802373e:	4421      	add	r1, r4
 8023740:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023742:	3b01      	subs	r3, #1
 8023744:	4422      	add	r2, r4
 8023746:	3002      	adds	r0, #2
 8023748:	e7ed      	b.n	8023726 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 802374a:	d018      	beq.n	802377e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 802374c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802374e:	1e5c      	subs	r4, r3, #1
 8023750:	fb05 1504 	mla	r5, r5, r4, r1
 8023754:	142d      	asrs	r5, r5, #16
 8023756:	d40a      	bmi.n	802376e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8023758:	454d      	cmp	r5, r9
 802375a:	da08      	bge.n	802376e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 802375c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802375e:	fb05 2404 	mla	r4, r5, r4, r2
 8023762:	1424      	asrs	r4, r4, #16
 8023764:	d403      	bmi.n	802376e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8023766:	9d01      	ldr	r5, [sp, #4]
 8023768:	42ac      	cmp	r4, r5
 802376a:	f2c0 80bb 	blt.w	80238e4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x208>
 802376e:	2700      	movs	r7, #0
 8023770:	19dc      	adds	r4, r3, r7
 8023772:	2c00      	cmp	r4, #0
 8023774:	dc3e      	bgt.n	80237f4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8023776:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802377a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802377e:	f1bb 0f00 	cmp.w	fp, #0
 8023782:	f340 8115 	ble.w	80239b0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d4>
 8023786:	ee30 0a04 	vadd.f32	s0, s0, s8
 802378a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802378e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8023792:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023794:	f1bb 0b01 	subs.w	fp, fp, #1
 8023798:	ee31 1a05 	vadd.f32	s2, s2, s10
 802379c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80237a0:	eeb0 6a62 	vmov.f32	s12, s5
 80237a4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80237a8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80237ac:	ee77 2a62 	vsub.f32	s5, s14, s5
 80237b0:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80237b4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80237b8:	eeb0 6a43 	vmov.f32	s12, s6
 80237bc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80237c0:	ee12 2a90 	vmov	r2, s5
 80237c4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80237c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80237cc:	ee13 2a10 	vmov	r2, s6
 80237d0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80237d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80237d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80237d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80237dc:	9a05      	ldr	r2, [sp, #20]
 80237de:	9314      	str	r3, [sp, #80]	; 0x50
 80237e0:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80237e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80237e6:	eeb0 3a67 	vmov.f32	s6, s15
 80237ea:	bf08      	it	eq
 80237ec:	4613      	moveq	r3, r2
 80237ee:	eef0 2a47 	vmov.f32	s5, s14
 80237f2:	e78b      	b.n	802370c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 80237f4:	140d      	asrs	r5, r1, #16
 80237f6:	d45c      	bmi.n	80238b2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 80237f8:	454d      	cmp	r5, r9
 80237fa:	da5a      	bge.n	80238b2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 80237fc:	1414      	asrs	r4, r2, #16
 80237fe:	d458      	bmi.n	80238b2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8023800:	9e01      	ldr	r6, [sp, #4]
 8023802:	42b4      	cmp	r4, r6
 8023804:	da55      	bge.n	80238b2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8023806:	fb09 5404 	mla	r4, r9, r4, r5
 802380a:	9d03      	ldr	r5, [sp, #12]
 802380c:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 8023810:	ea5f 6e14 	movs.w	lr, r4, lsr #24
 8023814:	d04d      	beq.n	80238b2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8023816:	0a26      	lsrs	r6, r4, #8
 8023818:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802381c:	fa5f f58e 	uxtb.w	r5, lr
 8023820:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8023824:	9604      	str	r6, [sp, #16]
 8023826:	d04a      	beq.n	80238be <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e2>
 8023828:	f06f 0601 	mvn.w	r6, #1
 802382c:	437e      	muls	r6, r7
 802382e:	fa1f fa85 	uxth.w	sl, r5
 8023832:	f830 8006 	ldrh.w	r8, [r0, r6]
 8023836:	9602      	str	r6, [sp, #8]
 8023838:	ea4f 2e28 	mov.w	lr, r8, asr #8
 802383c:	43ed      	mvns	r5, r5
 802383e:	fa5f fc8c 	uxtb.w	ip, ip
 8023842:	b2ed      	uxtb	r5, r5
 8023844:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8023848:	fb1c fc0a 	smulbb	ip, ip, sl
 802384c:	fb0e cc05 	mla	ip, lr, r5, ip
 8023850:	b2e4      	uxtb	r4, r4
 8023852:	ea4f 0ee8 	mov.w	lr, r8, asr #3
 8023856:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 802385a:	f89d 6010 	ldrb.w	r6, [sp, #16]
 802385e:	fa5f f888 	uxtb.w	r8, r8
 8023862:	fb14 f40a 	smulbb	r4, r4, sl
 8023866:	fb08 4405 	mla	r4, r8, r5, r4
 802386a:	b2a4      	uxth	r4, r4
 802386c:	fa1f fc8c 	uxth.w	ip, ip
 8023870:	fb16 f60a 	smulbb	r6, r6, sl
 8023874:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8023878:	fb0e 6e05 	mla	lr, lr, r5, r6
 802387c:	1c66      	adds	r6, r4, #1
 802387e:	f10c 0501 	add.w	r5, ip, #1
 8023882:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8023886:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 802388a:	fa1f fe8e 	uxth.w	lr, lr
 802388e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8023892:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8023896:	ea4c 0c06 	orr.w	ip, ip, r6
 802389a:	f10e 0601 	add.w	r6, lr, #1
 802389e:	eb06 261e 	add.w	r6, r6, lr, lsr #8
 80238a2:	0976      	lsrs	r6, r6, #5
 80238a4:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80238a8:	9c02      	ldr	r4, [sp, #8]
 80238aa:	ea4c 0c06 	orr.w	ip, ip, r6
 80238ae:	f820 c004 	strh.w	ip, [r0, r4]
 80238b2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80238b4:	4421      	add	r1, r4
 80238b6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80238b8:	3f01      	subs	r7, #1
 80238ba:	4422      	add	r2, r4
 80238bc:	e758      	b.n	8023770 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 80238be:	4e3e      	ldr	r6, [pc, #248]	; (80239b8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2dc>)
 80238c0:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 80238c4:	ea06 2c0c 	and.w	ip, r6, ip, lsl #8
 80238c8:	ea4c 0c04 	orr.w	ip, ip, r4
 80238cc:	9c04      	ldr	r4, [sp, #16]
 80238ce:	f06f 0501 	mvn.w	r5, #1
 80238d2:	00e6      	lsls	r6, r4, #3
 80238d4:	437d      	muls	r5, r7
 80238d6:	f406 64fc 	and.w	r4, r6, #2016	; 0x7e0
 80238da:	ea4c 0c04 	orr.w	ip, ip, r4
 80238de:	f820 c005 	strh.w	ip, [r0, r5]
 80238e2:	e7e6      	b.n	80238b2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 80238e4:	f04f 0800 	mov.w	r8, #0
 80238e8:	eba3 0408 	sub.w	r4, r3, r8
 80238ec:	2c00      	cmp	r4, #0
 80238ee:	f77f af42 	ble.w	8023776 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 80238f2:	140d      	asrs	r5, r1, #16
 80238f4:	1414      	asrs	r4, r2, #16
 80238f6:	fb09 5404 	mla	r4, r9, r4, r5
 80238fa:	9d03      	ldr	r5, [sp, #12]
 80238fc:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 8023900:	ea5f 6c14 	movs.w	ip, r4, lsr #24
 8023904:	d042      	beq.n	802398c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8023906:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802390a:	fa5f f58c 	uxtb.w	r5, ip
 802390e:	ea4f 4714 	mov.w	r7, r4, lsr #16
 8023912:	ea4f 2614 	mov.w	r6, r4, lsr #8
 8023916:	d040      	beq.n	802399a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 8023918:	f830 e018 	ldrh.w	lr, [r0, r8, lsl #1]
 802391c:	fa1f fa85 	uxth.w	sl, r5
 8023920:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8023924:	43ed      	mvns	r5, r5
 8023926:	b2ff      	uxtb	r7, r7
 8023928:	b2ed      	uxtb	r5, r5
 802392a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802392e:	fb17 f70a 	smulbb	r7, r7, sl
 8023932:	fb0c 7705 	mla	r7, ip, r5, r7
 8023936:	b2e4      	uxtb	r4, r4
 8023938:	ea4f 0cee 	mov.w	ip, lr, asr #3
 802393c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8023940:	fa5f fe8e 	uxtb.w	lr, lr
 8023944:	fb14 f40a 	smulbb	r4, r4, sl
 8023948:	fb0e 4405 	mla	r4, lr, r5, r4
 802394c:	b2f6      	uxtb	r6, r6
 802394e:	b2bf      	uxth	r7, r7
 8023950:	fb16 f60a 	smulbb	r6, r6, sl
 8023954:	b2a4      	uxth	r4, r4
 8023956:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 802395a:	fb0c 6c05 	mla	ip, ip, r5, r6
 802395e:	1c7d      	adds	r5, r7, #1
 8023960:	1c66      	adds	r6, r4, #1
 8023962:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 8023966:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 802396a:	fa1f fc8c 	uxth.w	ip, ip
 802396e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8023972:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8023976:	4337      	orrs	r7, r6
 8023978:	f10c 0601 	add.w	r6, ip, #1
 802397c:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8023980:	0976      	lsrs	r6, r6, #5
 8023982:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8023986:	4337      	orrs	r7, r6
 8023988:	f820 7018 	strh.w	r7, [r0, r8, lsl #1]
 802398c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802398e:	4421      	add	r1, r4
 8023990:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023992:	f108 0801 	add.w	r8, r8, #1
 8023996:	4422      	add	r2, r4
 8023998:	e7a6      	b.n	80238e8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x20c>
 802399a:	4d07      	ldr	r5, [pc, #28]	; (80239b8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2dc>)
 802399c:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 80239a0:	ea05 2707 	and.w	r7, r5, r7, lsl #8
 80239a4:	00f6      	lsls	r6, r6, #3
 80239a6:	4327      	orrs	r7, r4
 80239a8:	f406 64fc 	and.w	r4, r6, #2016	; 0x7e0
 80239ac:	4327      	orrs	r7, r4
 80239ae:	e7eb      	b.n	8023988 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 80239b0:	b007      	add	sp, #28
 80239b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80239b6:	bf00      	nop
 80239b8:	fffff800 	.word	0xfffff800

080239bc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80239bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80239c0:	b087      	sub	sp, #28
 80239c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80239c6:	9204      	str	r2, [sp, #16]
 80239c8:	f9bd 2060 	ldrsh.w	r2, [sp, #96]	; 0x60
 80239cc:	9200      	str	r2, [sp, #0]
 80239ce:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 80239d2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80239d4:	9201      	str	r2, [sp, #4]
 80239d6:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 80239da:	9205      	str	r2, [sp, #20]
 80239dc:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 80239e0:	6860      	ldr	r0, [r4, #4]
 80239e2:	fb00 2505 	mla	r5, r0, r5, r2
 80239e6:	6822      	ldr	r2, [r4, #0]
 80239e8:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 80239ec:	9a00      	ldr	r2, [sp, #0]
 80239ee:	3201      	adds	r2, #1
 80239f0:	f022 0201 	bic.w	r2, r2, #1
 80239f4:	9202      	str	r2, [sp, #8]
 80239f6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80239f8:	6812      	ldr	r2, [r2, #0]
 80239fa:	9203      	str	r2, [sp, #12]
 80239fc:	2900      	cmp	r1, #0
 80239fe:	dc03      	bgt.n	8023a08 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 8023a00:	9a04      	ldr	r2, [sp, #16]
 8023a02:	2a00      	cmp	r2, #0
 8023a04:	f340 814c 	ble.w	8023ca0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e4>
 8023a08:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023a0a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8023a0e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023a10:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8023a14:	2b00      	cmp	r3, #0
 8023a16:	dd10      	ble.n	8023a3a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8023a18:	1422      	asrs	r2, r4, #16
 8023a1a:	d407      	bmi.n	8023a2c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8023a1c:	9e00      	ldr	r6, [sp, #0]
 8023a1e:	4296      	cmp	r6, r2
 8023a20:	dd04      	ble.n	8023a2c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8023a22:	1402      	asrs	r2, r0, #16
 8023a24:	d402      	bmi.n	8023a2c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8023a26:	9e01      	ldr	r6, [sp, #4]
 8023a28:	42b2      	cmp	r2, r6
 8023a2a:	db07      	blt.n	8023a3c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x80>
 8023a2c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8023a2e:	4414      	add	r4, r2
 8023a30:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023a32:	3b01      	subs	r3, #1
 8023a34:	4410      	add	r0, r2
 8023a36:	3502      	adds	r5, #2
 8023a38:	e7ec      	b.n	8023a14 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 8023a3a:	d00f      	beq.n	8023a5c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 8023a3c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8023a3e:	1e5a      	subs	r2, r3, #1
 8023a40:	fb06 4602 	mla	r6, r6, r2, r4
 8023a44:	1436      	asrs	r6, r6, #16
 8023a46:	d542      	bpl.n	8023ace <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x112>
 8023a48:	469a      	mov	sl, r3
 8023a4a:	46a9      	mov	r9, r5
 8023a4c:	f1ba 0f00 	cmp.w	sl, #0
 8023a50:	f300 80b5 	bgt.w	8023bbe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x202>
 8023a54:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023a58:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8023a5c:	2900      	cmp	r1, #0
 8023a5e:	f340 811f 	ble.w	8023ca0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e4>
 8023a62:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023a66:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023a6a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8023a6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023a70:	3901      	subs	r1, #1
 8023a72:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023a76:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023a7a:	eeb0 6a62 	vmov.f32	s12, s5
 8023a7e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023a82:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023a86:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023a8a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8023a8e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023a92:	eeb0 6a43 	vmov.f32	s12, s6
 8023a96:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023a9a:	ee12 2a90 	vmov	r2, s5
 8023a9e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023aa2:	fb92 f3f3 	sdiv	r3, r2, r3
 8023aa6:	ee13 2a10 	vmov	r2, s6
 8023aaa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023aae:	9313      	str	r3, [sp, #76]	; 0x4c
 8023ab0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023ab2:	fb92 f3f3 	sdiv	r3, r2, r3
 8023ab6:	9a04      	ldr	r2, [sp, #16]
 8023ab8:	9314      	str	r3, [sp, #80]	; 0x50
 8023aba:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8023abe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023ac0:	eeb0 3a67 	vmov.f32	s6, s15
 8023ac4:	bf08      	it	eq
 8023ac6:	4613      	moveq	r3, r2
 8023ac8:	eef0 2a47 	vmov.f32	s5, s14
 8023acc:	e796      	b.n	80239fc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 8023ace:	9f00      	ldr	r7, [sp, #0]
 8023ad0:	42b7      	cmp	r7, r6
 8023ad2:	ddb9      	ble.n	8023a48 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 8023ad4:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8023ad6:	fb06 0202 	mla	r2, r6, r2, r0
 8023ada:	1412      	asrs	r2, r2, #16
 8023adc:	d4b4      	bmi.n	8023a48 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 8023ade:	9e01      	ldr	r6, [sp, #4]
 8023ae0:	42b2      	cmp	r2, r6
 8023ae2:	dab1      	bge.n	8023a48 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 8023ae4:	f04f 0800 	mov.w	r8, #0
 8023ae8:	eba3 0208 	sub.w	r2, r3, r8
 8023aec:	2a00      	cmp	r2, #0
 8023aee:	ddb1      	ble.n	8023a54 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8023af0:	9f02      	ldr	r7, [sp, #8]
 8023af2:	1422      	asrs	r2, r4, #16
 8023af4:	1406      	asrs	r6, r0, #16
 8023af6:	fb07 2606 	mla	r6, r7, r6, r2
 8023afa:	0872      	lsrs	r2, r6, #1
 8023afc:	9f03      	ldr	r7, [sp, #12]
 8023afe:	5cba      	ldrb	r2, [r7, r2]
 8023b00:	07f6      	lsls	r6, r6, #31
 8023b02:	bf54      	ite	pl
 8023b04:	f002 020f 	andpl.w	r2, r2, #15
 8023b08:	1112      	asrmi	r2, r2, #4
 8023b0a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023b0e:	b2d2      	uxtb	r2, r2
 8023b10:	2a00      	cmp	r2, #0
 8023b12:	d04d      	beq.n	8023bb0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f4>
 8023b14:	9f05      	ldr	r7, [sp, #20]
 8023b16:	4e64      	ldr	r6, [pc, #400]	; (8023ca8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ec>)
 8023b18:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 8023b1c:	6836      	ldr	r6, [r6, #0]
 8023b1e:	437a      	muls	r2, r7
 8023b20:	1c57      	adds	r7, r2, #1
 8023b22:	eb07 2222 	add.w	r2, r7, r2, asr #8
 8023b26:	1212      	asrs	r2, r2, #8
 8023b28:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8023b2c:	fa1f fa82 	uxth.w	sl, r2
 8023b30:	ea4f 272e 	mov.w	r7, lr, asr #8
 8023b34:	43d2      	mvns	r2, r2
 8023b36:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8023b3a:	b2d2      	uxtb	r2, r2
 8023b3c:	fb1c fc0a 	smulbb	ip, ip, sl
 8023b40:	ea4f 09d6 	mov.w	r9, r6, lsr #3
 8023b44:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8023b48:	fb07 c702 	mla	r7, r7, r2, ip
 8023b4c:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8023b50:	ea4f 0cee 	mov.w	ip, lr, asr #3
 8023b54:	fb19 f90a 	smulbb	r9, r9, sl
 8023b58:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8023b5c:	00f6      	lsls	r6, r6, #3
 8023b5e:	fb0c 9c02 	mla	ip, ip, r2, r9
 8023b62:	b2f6      	uxtb	r6, r6
 8023b64:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8023b68:	fa1f fc8c 	uxth.w	ip, ip
 8023b6c:	fa5f fe8e 	uxtb.w	lr, lr
 8023b70:	fb16 f60a 	smulbb	r6, r6, sl
 8023b74:	b2bf      	uxth	r7, r7
 8023b76:	fb0e 6602 	mla	r6, lr, r2, r6
 8023b7a:	f10c 0901 	add.w	r9, ip, #1
 8023b7e:	b2b6      	uxth	r6, r6
 8023b80:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 8023b84:	f107 0b01 	add.w	fp, r7, #1
 8023b88:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8023b8c:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8023b90:	f106 0e01 	add.w	lr, r6, #1
 8023b94:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8023b98:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8023b9c:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 8023ba0:	ea4c 0c07 	orr.w	ip, ip, r7
 8023ba4:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8023ba8:	ea4c 0c0e 	orr.w	ip, ip, lr
 8023bac:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 8023bb0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8023bb2:	4414      	add	r4, r2
 8023bb4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023bb6:	f108 0801 	add.w	r8, r8, #1
 8023bba:	4410      	add	r0, r2
 8023bbc:	e794      	b.n	8023ae8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12c>
 8023bbe:	1422      	asrs	r2, r4, #16
 8023bc0:	d465      	bmi.n	8023c8e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d2>
 8023bc2:	9e00      	ldr	r6, [sp, #0]
 8023bc4:	4296      	cmp	r6, r2
 8023bc6:	dd62      	ble.n	8023c8e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d2>
 8023bc8:	1406      	asrs	r6, r0, #16
 8023bca:	d460      	bmi.n	8023c8e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d2>
 8023bcc:	9f01      	ldr	r7, [sp, #4]
 8023bce:	42be      	cmp	r6, r7
 8023bd0:	da5d      	bge.n	8023c8e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d2>
 8023bd2:	9f02      	ldr	r7, [sp, #8]
 8023bd4:	fb06 2607 	mla	r6, r6, r7, r2
 8023bd8:	0872      	lsrs	r2, r6, #1
 8023bda:	9f03      	ldr	r7, [sp, #12]
 8023bdc:	5cba      	ldrb	r2, [r7, r2]
 8023bde:	07f7      	lsls	r7, r6, #31
 8023be0:	bf54      	ite	pl
 8023be2:	f002 020f 	andpl.w	r2, r2, #15
 8023be6:	1112      	asrmi	r2, r2, #4
 8023be8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023bec:	b2d2      	uxtb	r2, r2
 8023bee:	2a00      	cmp	r2, #0
 8023bf0:	d04d      	beq.n	8023c8e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d2>
 8023bf2:	9f05      	ldr	r7, [sp, #20]
 8023bf4:	4e2c      	ldr	r6, [pc, #176]	; (8023ca8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ec>)
 8023bf6:	f8b9 e000 	ldrh.w	lr, [r9]
 8023bfa:	6836      	ldr	r6, [r6, #0]
 8023bfc:	437a      	muls	r2, r7
 8023bfe:	1c57      	adds	r7, r2, #1
 8023c00:	eb07 2222 	add.w	r2, r7, r2, asr #8
 8023c04:	1212      	asrs	r2, r2, #8
 8023c06:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8023c0a:	fa1f fb82 	uxth.w	fp, r2
 8023c0e:	ea4f 272e 	mov.w	r7, lr, asr #8
 8023c12:	43d2      	mvns	r2, r2
 8023c14:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8023c18:	b2d2      	uxtb	r2, r2
 8023c1a:	fb1c fc0b 	smulbb	ip, ip, fp
 8023c1e:	ea4f 08d6 	mov.w	r8, r6, lsr #3
 8023c22:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8023c26:	fb07 c702 	mla	r7, r7, r2, ip
 8023c2a:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8023c2e:	ea4f 0cee 	mov.w	ip, lr, asr #3
 8023c32:	fb18 f80b 	smulbb	r8, r8, fp
 8023c36:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8023c3a:	00f6      	lsls	r6, r6, #3
 8023c3c:	fb0c 8c02 	mla	ip, ip, r2, r8
 8023c40:	b2f6      	uxtb	r6, r6
 8023c42:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8023c46:	fa1f fc8c 	uxth.w	ip, ip
 8023c4a:	fa5f fe8e 	uxtb.w	lr, lr
 8023c4e:	fb16 f60b 	smulbb	r6, r6, fp
 8023c52:	b2bf      	uxth	r7, r7
 8023c54:	fb0e 6602 	mla	r6, lr, r2, r6
 8023c58:	f10c 0801 	add.w	r8, ip, #1
 8023c5c:	b2b6      	uxth	r6, r6
 8023c5e:	eb08 2c1c 	add.w	ip, r8, ip, lsr #8
 8023c62:	f107 0801 	add.w	r8, r7, #1
 8023c66:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8023c6a:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8023c6e:	f106 0e01 	add.w	lr, r6, #1
 8023c72:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8023c76:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8023c7a:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 8023c7e:	ea4c 0c07 	orr.w	ip, ip, r7
 8023c82:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8023c86:	ea4c 0c0e 	orr.w	ip, ip, lr
 8023c8a:	f8a9 c000 	strh.w	ip, [r9]
 8023c8e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8023c90:	4414      	add	r4, r2
 8023c92:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023c94:	f109 0902 	add.w	r9, r9, #2
 8023c98:	4410      	add	r0, r2
 8023c9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8023c9e:	e6d5      	b.n	8023a4c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 8023ca0:	b007      	add	sp, #28
 8023ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023ca6:	bf00      	nop
 8023ca8:	200128ac 	.word	0x200128ac

08023cac <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8023cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023cb0:	b087      	sub	sp, #28
 8023cb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8023cb6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023cb8:	9205      	str	r2, [sp, #20]
 8023cba:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8023cbe:	9201      	str	r2, [sp, #4]
 8023cc0:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8023cc4:	6860      	ldr	r0, [r4, #4]
 8023cc6:	f9bd b060 	ldrsh.w	fp, [sp, #96]	; 0x60
 8023cca:	9100      	str	r1, [sp, #0]
 8023ccc:	fb00 2505 	mla	r5, r0, r5, r2
 8023cd0:	6822      	ldr	r2, [r4, #0]
 8023cd2:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8023cd6:	f10b 0201 	add.w	r2, fp, #1
 8023cda:	f022 0201 	bic.w	r2, r2, #1
 8023cde:	9203      	str	r2, [sp, #12]
 8023ce0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8023ce2:	6812      	ldr	r2, [r2, #0]
 8023ce4:	9204      	str	r2, [sp, #16]
 8023ce6:	9a00      	ldr	r2, [sp, #0]
 8023ce8:	2a00      	cmp	r2, #0
 8023cea:	dc03      	bgt.n	8023cf4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 8023cec:	9a05      	ldr	r2, [sp, #20]
 8023cee:	2a00      	cmp	r2, #0
 8023cf0:	f340 8157 	ble.w	8023fa2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 8023cf4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023cf6:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8023cfa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023cfc:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8023d00:	2b00      	cmp	r3, #0
 8023d02:	dd0f      	ble.n	8023d24 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8023d04:	1422      	asrs	r2, r4, #16
 8023d06:	d406      	bmi.n	8023d16 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8023d08:	4593      	cmp	fp, r2
 8023d0a:	dd04      	ble.n	8023d16 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8023d0c:	1402      	asrs	r2, r0, #16
 8023d0e:	d402      	bmi.n	8023d16 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8023d10:	9e01      	ldr	r6, [sp, #4]
 8023d12:	42b2      	cmp	r2, r6
 8023d14:	db07      	blt.n	8023d26 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8023d16:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8023d18:	4414      	add	r4, r2
 8023d1a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023d1c:	3b01      	subs	r3, #1
 8023d1e:	4410      	add	r0, r2
 8023d20:	3502      	adds	r5, #2
 8023d22:	e7ed      	b.n	8023d00 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x54>
 8023d24:	d018      	beq.n	8023d58 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xac>
 8023d26:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8023d28:	1e5a      	subs	r2, r3, #1
 8023d2a:	fb06 4602 	mla	r6, r6, r2, r4
 8023d2e:	1436      	asrs	r6, r6, #16
 8023d30:	d40a      	bmi.n	8023d48 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 8023d32:	45b3      	cmp	fp, r6
 8023d34:	dd08      	ble.n	8023d48 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 8023d36:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8023d38:	fb06 0202 	mla	r2, r6, r2, r0
 8023d3c:	1412      	asrs	r2, r2, #16
 8023d3e:	d403      	bmi.n	8023d48 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 8023d40:	9e01      	ldr	r6, [sp, #4]
 8023d42:	42b2      	cmp	r2, r6
 8023d44:	f2c0 80bf 	blt.w	8023ec6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21a>
 8023d48:	2700      	movs	r7, #0
 8023d4a:	19da      	adds	r2, r3, r7
 8023d4c:	2a00      	cmp	r2, #0
 8023d4e:	dc3f      	bgt.n	8023dd0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 8023d50:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023d54:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8023d58:	9b00      	ldr	r3, [sp, #0]
 8023d5a:	2b00      	cmp	r3, #0
 8023d5c:	f340 8121 	ble.w	8023fa2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 8023d60:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023d64:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023d68:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8023d6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023d6e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023d72:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023d76:	eeb0 6a62 	vmov.f32	s12, s5
 8023d7a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023d7e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023d82:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023d86:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8023d8a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023d8e:	eeb0 6a43 	vmov.f32	s12, s6
 8023d92:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023d96:	ee12 2a90 	vmov	r2, s5
 8023d9a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023d9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8023da2:	ee13 2a10 	vmov	r2, s6
 8023da6:	9313      	str	r3, [sp, #76]	; 0x4c
 8023da8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023daa:	fb92 f3f3 	sdiv	r3, r2, r3
 8023dae:	9314      	str	r3, [sp, #80]	; 0x50
 8023db0:	9b00      	ldr	r3, [sp, #0]
 8023db2:	9a05      	ldr	r2, [sp, #20]
 8023db4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023db8:	3b01      	subs	r3, #1
 8023dba:	9300      	str	r3, [sp, #0]
 8023dbc:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8023dc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023dc2:	eeb0 3a67 	vmov.f32	s6, s15
 8023dc6:	bf08      	it	eq
 8023dc8:	4613      	moveq	r3, r2
 8023dca:	eef0 2a47 	vmov.f32	s5, s14
 8023dce:	e78a      	b.n	8023ce6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a>
 8023dd0:	1422      	asrs	r2, r4, #16
 8023dd2:	d466      	bmi.n	8023ea2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 8023dd4:	4593      	cmp	fp, r2
 8023dd6:	dd64      	ble.n	8023ea2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 8023dd8:	1406      	asrs	r6, r0, #16
 8023dda:	d462      	bmi.n	8023ea2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 8023ddc:	9901      	ldr	r1, [sp, #4]
 8023dde:	428e      	cmp	r6, r1
 8023de0:	da5f      	bge.n	8023ea2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 8023de2:	9903      	ldr	r1, [sp, #12]
 8023de4:	fb06 2601 	mla	r6, r6, r1, r2
 8023de8:	0872      	lsrs	r2, r6, #1
 8023dea:	9904      	ldr	r1, [sp, #16]
 8023dec:	5c8a      	ldrb	r2, [r1, r2]
 8023dee:	07f6      	lsls	r6, r6, #31
 8023df0:	bf54      	ite	pl
 8023df2:	f002 020f 	andpl.w	r2, r2, #15
 8023df6:	1112      	asrmi	r2, r2, #4
 8023df8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023dfc:	b2d2      	uxtb	r2, r2
 8023dfe:	2a00      	cmp	r2, #0
 8023e00:	d04f      	beq.n	8023ea2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 8023e02:	4969      	ldr	r1, [pc, #420]	; (8023fa8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fc>)
 8023e04:	f8d1 c000 	ldr.w	ip, [r1]
 8023e08:	2aff      	cmp	r2, #255	; 0xff
 8023e0a:	ea4f 291c 	mov.w	r9, ip, lsr #8
 8023e0e:	ea4f 06dc 	mov.w	r6, ip, lsr #3
 8023e12:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8023e16:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 8023e1a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8023e1e:	fa5f fc8c 	uxtb.w	ip, ip
 8023e22:	d044      	beq.n	8023eae <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x202>
 8023e24:	f06f 0101 	mvn.w	r1, #1
 8023e28:	4379      	muls	r1, r7
 8023e2a:	fa1f fa82 	uxth.w	sl, r2
 8023e2e:	f835 8001 	ldrh.w	r8, [r5, r1]
 8023e32:	9102      	str	r1, [sp, #8]
 8023e34:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8023e38:	43d2      	mvns	r2, r2
 8023e3a:	b2d2      	uxtb	r2, r2
 8023e3c:	fb19 f90a 	smulbb	r9, r9, sl
 8023e40:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8023e44:	fb0e 9e02 	mla	lr, lr, r2, r9
 8023e48:	ea4f 09e8 	mov.w	r9, r8, asr #3
 8023e4c:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8023e50:	fb16 f60a 	smulbb	r6, r6, sl
 8023e54:	fb09 6602 	mla	r6, r9, r2, r6
 8023e58:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8023e5c:	b2b6      	uxth	r6, r6
 8023e5e:	fa5f f888 	uxtb.w	r8, r8
 8023e62:	fb1c fc0a 	smulbb	ip, ip, sl
 8023e66:	fa1f fe8e 	uxth.w	lr, lr
 8023e6a:	fb08 cc02 	mla	ip, r8, r2, ip
 8023e6e:	f106 0901 	add.w	r9, r6, #1
 8023e72:	fa1f fc8c 	uxth.w	ip, ip
 8023e76:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 8023e7a:	f10e 0901 	add.w	r9, lr, #1
 8023e7e:	0976      	lsrs	r6, r6, #5
 8023e80:	eb09 2e1e 	add.w	lr, r9, lr, lsr #8
 8023e84:	f10c 0201 	add.w	r2, ip, #1
 8023e88:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8023e8c:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8023e90:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8023e94:	ea46 060e 	orr.w	r6, r6, lr
 8023e98:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8023e9c:	ea46 060c 	orr.w	r6, r6, ip
 8023ea0:	526e      	strh	r6, [r5, r1]
 8023ea2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8023ea4:	4414      	add	r4, r2
 8023ea6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023ea8:	3f01      	subs	r7, #1
 8023eaa:	4410      	add	r0, r2
 8023eac:	e74d      	b.n	8023d4a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 8023eae:	f06f 0201 	mvn.w	r2, #1
 8023eb2:	00f6      	lsls	r6, r6, #3
 8023eb4:	fb02 f807 	mul.w	r8, r2, r7
 8023eb8:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
 8023ebc:	ea46 06dc 	orr.w	r6, r6, ip, lsr #3
 8023ec0:	f825 6008 	strh.w	r6, [r5, r8]
 8023ec4:	e7ed      	b.n	8023ea2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 8023ec6:	f04f 0800 	mov.w	r8, #0
 8023eca:	eba3 0208 	sub.w	r2, r3, r8
 8023ece:	2a00      	cmp	r2, #0
 8023ed0:	f77f af3e 	ble.w	8023d50 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa4>
 8023ed4:	9903      	ldr	r1, [sp, #12]
 8023ed6:	1422      	asrs	r2, r4, #16
 8023ed8:	1406      	asrs	r6, r0, #16
 8023eda:	fb01 2606 	mla	r6, r1, r6, r2
 8023ede:	0872      	lsrs	r2, r6, #1
 8023ee0:	9904      	ldr	r1, [sp, #16]
 8023ee2:	5c8a      	ldrb	r2, [r1, r2]
 8023ee4:	07f1      	lsls	r1, r6, #31
 8023ee6:	bf54      	ite	pl
 8023ee8:	f002 020f 	andpl.w	r2, r2, #15
 8023eec:	1112      	asrmi	r2, r2, #4
 8023eee:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023ef2:	b2d2      	uxtb	r2, r2
 8023ef4:	2a00      	cmp	r2, #0
 8023ef6:	d047      	beq.n	8023f88 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2dc>
 8023ef8:	492b      	ldr	r1, [pc, #172]	; (8023fa8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fc>)
 8023efa:	680f      	ldr	r7, [r1, #0]
 8023efc:	2aff      	cmp	r2, #255	; 0xff
 8023efe:	ea4f 2917 	mov.w	r9, r7, lsr #8
 8023f02:	ea4f 06d7 	mov.w	r6, r7, lsr #3
 8023f06:	ea4f 07c7 	mov.w	r7, r7, lsl #3
 8023f0a:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 8023f0e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8023f12:	b2ff      	uxtb	r7, r7
 8023f14:	d03f      	beq.n	8023f96 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ea>
 8023f16:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 8023f1a:	fa1f fa82 	uxth.w	sl, r2
 8023f1e:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8023f22:	43d2      	mvns	r2, r2
 8023f24:	b2d2      	uxtb	r2, r2
 8023f26:	fb19 f90a 	smulbb	r9, r9, sl
 8023f2a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8023f2e:	fb0c 9c02 	mla	ip, ip, r2, r9
 8023f32:	ea4f 09ee 	mov.w	r9, lr, asr #3
 8023f36:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8023f3a:	fb16 f60a 	smulbb	r6, r6, sl
 8023f3e:	fb09 6602 	mla	r6, r9, r2, r6
 8023f42:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8023f46:	b2b6      	uxth	r6, r6
 8023f48:	fa5f fe8e 	uxtb.w	lr, lr
 8023f4c:	fb17 f70a 	smulbb	r7, r7, sl
 8023f50:	fa1f fc8c 	uxth.w	ip, ip
 8023f54:	fb0e 7702 	mla	r7, lr, r2, r7
 8023f58:	f106 0901 	add.w	r9, r6, #1
 8023f5c:	b2bf      	uxth	r7, r7
 8023f5e:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 8023f62:	f10c 0901 	add.w	r9, ip, #1
 8023f66:	0976      	lsrs	r6, r6, #5
 8023f68:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 8023f6c:	1c7a      	adds	r2, r7, #1
 8023f6e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8023f72:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8023f76:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8023f7a:	ea46 060c 	orr.w	r6, r6, ip
 8023f7e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8023f82:	433e      	orrs	r6, r7
 8023f84:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 8023f88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8023f8a:	4414      	add	r4, r2
 8023f8c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023f8e:	f108 0801 	add.w	r8, r8, #1
 8023f92:	4410      	add	r0, r2
 8023f94:	e799      	b.n	8023eca <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8023f96:	00f6      	lsls	r6, r6, #3
 8023f98:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
 8023f9c:	ea46 06d7 	orr.w	r6, r6, r7, lsr #3
 8023fa0:	e7f0      	b.n	8023f84 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d8>
 8023fa2:	b007      	add	sp, #28
 8023fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023fa8:	200128ac 	.word	0x200128ac

08023fac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8023fac:	4770      	bx	lr

08023fae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8023fae:	4770      	bx	lr

08023fb0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8023fb0:	4770      	bx	lr

08023fb2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8023fb2:	4770      	bx	lr

08023fb4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8023fb4:	4770      	bx	lr

08023fb6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8023fb6:	4770      	bx	lr

08023fb8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8023fb8:	4770      	bx	lr

08023fba <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8023fba:	4770      	bx	lr

08023fbc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8023fbc:	4770      	bx	lr

08023fbe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8023fbe:	4770      	bx	lr

08023fc0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8023fc0:	4770      	bx	lr

08023fc2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8023fc2:	4770      	bx	lr

08023fc4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8023fc4:	4770      	bx	lr

08023fc6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8023fc6:	4770      	bx	lr

08023fc8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8023fc8:	4770      	bx	lr

08023fca <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 8023fca:	4770      	bx	lr

08023fcc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8023fcc:	4770      	bx	lr

08023fce <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8023fce:	4770      	bx	lr

08023fd0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8023fd0:	4770      	bx	lr

08023fd2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8023fd2:	4770      	bx	lr

08023fd4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8023fd4:	4770      	bx	lr

08023fd6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8023fd6:	4770      	bx	lr

08023fd8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8023fd8:	4770      	bx	lr

08023fda <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8023fda:	4770      	bx	lr

08023fdc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8023fdc:	4770      	bx	lr

08023fde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8023fde:	4770      	bx	lr

08023fe0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8023fe0:	4770      	bx	lr

08023fe2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8023fe2:	4770      	bx	lr

08023fe4 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8023fe4:	b508      	push	{r3, lr}
 8023fe6:	4b06      	ldr	r3, [pc, #24]	; (8024000 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 8023fe8:	8818      	ldrh	r0, [r3, #0]
 8023fea:	b928      	cbnz	r0, 8023ff8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 8023fec:	4b05      	ldr	r3, [pc, #20]	; (8024004 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 8023fee:	4a06      	ldr	r2, [pc, #24]	; (8024008 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 8023ff0:	4806      	ldr	r0, [pc, #24]	; (802400c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 8023ff2:	2154      	movs	r1, #84	; 0x54
 8023ff4:	f00a f938 	bl	802e268 <__assert_func>
 8023ff8:	0040      	lsls	r0, r0, #1
 8023ffa:	b280      	uxth	r0, r0
 8023ffc:	bd08      	pop	{r3, pc}
 8023ffe:	bf00      	nop
 8024000:	2001289e 	.word	0x2001289e
 8024004:	080343b6 	.word	0x080343b6
 8024008:	08034937 	.word	0x08034937
 802400c:	080343f8 	.word	0x080343f8

08024010 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8024010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024014:	b08d      	sub	sp, #52	; 0x34
 8024016:	460f      	mov	r7, r1
 8024018:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 802401c:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 8024020:	4616      	mov	r6, r2
 8024022:	f1b9 0f00 	cmp.w	r9, #0
 8024026:	d046      	beq.n	80240b6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 8024028:	6810      	ldr	r0, [r2, #0]
 802402a:	6851      	ldr	r1, [r2, #4]
 802402c:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 80241f4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e4>
 8024030:	ad08      	add	r5, sp, #32
 8024032:	c503      	stmia	r5!, {r0, r1}
 8024034:	6818      	ldr	r0, [r3, #0]
 8024036:	6859      	ldr	r1, [r3, #4]
 8024038:	ad0a      	add	r5, sp, #40	; 0x28
 802403a:	c503      	stmia	r5!, {r0, r1}
 802403c:	a808      	add	r0, sp, #32
 802403e:	f7fa fec7 	bl	801edd0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024042:	4631      	mov	r1, r6
 8024044:	a80a      	add	r0, sp, #40	; 0x28
 8024046:	f7fa feab 	bl	801eda0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802404a:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 802404e:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8024052:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 8024056:	f8d8 0000 	ldr.w	r0, [r8]
 802405a:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 802405e:	fb16 2103 	smlabb	r1, r6, r3, r2
 8024062:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 8024066:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 802406a:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	; 0x2e
 802406e:	440a      	add	r2, r1
 8024070:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8024074:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8024078:	4413      	add	r3, r2
 802407a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 802407e:	6803      	ldr	r3, [r0, #0]
 8024080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024082:	4798      	blx	r3
 8024084:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8024088:	d018      	beq.n	80240bc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 802408a:	f010 0f04 	tst.w	r0, #4
 802408e:	d019      	beq.n	80240c4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 8024090:	f8d8 0000 	ldr.w	r0, [r8]
 8024094:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8024098:	6801      	ldr	r1, [r0, #0]
 802409a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 802409e:	e9cd 9403 	strd	r9, r4, [sp, #12]
 80240a2:	b2bf      	uxth	r7, r7
 80240a4:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 80240a8:	9402      	str	r4, [sp, #8]
 80240aa:	b2ad      	uxth	r5, r5
 80240ac:	9701      	str	r7, [sp, #4]
 80240ae:	9500      	str	r5, [sp, #0]
 80240b0:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 80240b2:	4631      	mov	r1, r6
 80240b4:	47a0      	blx	r4
 80240b6:	b00d      	add	sp, #52	; 0x34
 80240b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80240bc:	b914      	cbnz	r4, 80240c4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 80240be:	f010 0f01 	tst.w	r0, #1
 80240c2:	e7e4      	b.n	802408e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 80240c4:	f8d8 0000 	ldr.w	r0, [r8]
 80240c8:	6803      	ldr	r3, [r0, #0]
 80240ca:	6a1b      	ldr	r3, [r3, #32]
 80240cc:	4798      	blx	r3
 80240ce:	4a48      	ldr	r2, [pc, #288]	; (80241f0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e0>)
 80240d0:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 80240d4:	8814      	ldrh	r4, [r2, #0]
 80240d6:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 80240da:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80240de:	fb01 3404 	mla	r4, r1, r4, r3
 80240e2:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80240e6:	4692      	mov	sl, r2
 80240e8:	d118      	bne.n	802411c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x10c>
 80240ea:	ea4f 0b45 	mov.w	fp, r5, lsl #1
 80240ee:	f04f 0900 	mov.w	r9, #0
 80240f2:	f8d8 0000 	ldr.w	r0, [r8]
 80240f6:	45b9      	cmp	r9, r7
 80240f8:	6803      	ldr	r3, [r0, #0]
 80240fa:	da73      	bge.n	80241e4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>
 80240fc:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80240fe:	4632      	mov	r2, r6
 8024100:	465b      	mov	r3, fp
 8024102:	4621      	mov	r1, r4
 8024104:	47a8      	blx	r5
 8024106:	f8ba 3000 	ldrh.w	r3, [sl]
 802410a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802410e:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8024112:	f109 0901 	add.w	r9, r9, #1
 8024116:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 802411a:	e7ea      	b.n	80240f2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe2>
 802411c:	f1c9 08ff 	rsb	r8, r9, #255	; 0xff
 8024120:	ea25 7ae5 	bic.w	sl, r5, r5, asr #31
 8024124:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8024128:	f04f 0b00 	mov.w	fp, #0
 802412c:	fa1f f389 	uxth.w	r3, r9
 8024130:	fa1f f888 	uxth.w	r8, r8
 8024134:	9207      	str	r2, [sp, #28]
 8024136:	45bb      	cmp	fp, r7
 8024138:	da54      	bge.n	80241e4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>
 802413a:	f04f 0e00 	mov.w	lr, #0
 802413e:	45ae      	cmp	lr, r5
 8024140:	da41      	bge.n	80241c6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1b6>
 8024142:	f834 101e 	ldrh.w	r1, [r4, lr, lsl #1]
 8024146:	f836 201e 	ldrh.w	r2, [r6, lr, lsl #1]
 802414a:	1208      	asrs	r0, r1, #8
 802414c:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8024150:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024154:	fb10 f008 	smulbb	r0, r0, r8
 8024158:	ea4f 09e1 	mov.w	r9, r1, asr #3
 802415c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8024160:	00c9      	lsls	r1, r1, #3
 8024162:	fb0c 0c03 	mla	ip, ip, r3, r0
 8024166:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 802416a:	10d0      	asrs	r0, r2, #3
 802416c:	b2c9      	uxtb	r1, r1
 802416e:	00d2      	lsls	r2, r2, #3
 8024170:	fa1f fc8c 	uxth.w	ip, ip
 8024174:	fb19 f908 	smulbb	r9, r9, r8
 8024178:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802417c:	b2d2      	uxtb	r2, r2
 802417e:	fb11 f108 	smulbb	r1, r1, r8
 8024182:	fb00 9003 	mla	r0, r0, r3, r9
 8024186:	fb02 1203 	mla	r2, r2, r3, r1
 802418a:	f10c 0901 	add.w	r9, ip, #1
 802418e:	b292      	uxth	r2, r2
 8024190:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 8024194:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 8024198:	f102 0c01 	add.w	ip, r2, #1
 802419c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80241a0:	b280      	uxth	r0, r0
 80241a2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80241a6:	ea49 0c02 	orr.w	ip, r9, r2
 80241aa:	f100 0901 	add.w	r9, r0, #1
 80241ae:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 80241b2:	0940      	lsrs	r0, r0, #5
 80241b4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80241b8:	ea4c 0c00 	orr.w	ip, ip, r0
 80241bc:	f824 c01e 	strh.w	ip, [r4, lr, lsl #1]
 80241c0:	f10e 0e01 	add.w	lr, lr, #1
 80241c4:	e7bb      	b.n	802413e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x12e>
 80241c6:	9a07      	ldr	r2, [sp, #28]
 80241c8:	8812      	ldrh	r2, [r2, #0]
 80241ca:	1b52      	subs	r2, r2, r5
 80241cc:	eb0a 0242 	add.w	r2, sl, r2, lsl #1
 80241d0:	4414      	add	r4, r2
 80241d2:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 80241d6:	1b52      	subs	r2, r2, r5
 80241d8:	eb0a 0242 	add.w	r2, sl, r2, lsl #1
 80241dc:	4416      	add	r6, r2
 80241de:	f10b 0b01 	add.w	fp, fp, #1
 80241e2:	e7a8      	b.n	8024136 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x126>
 80241e4:	4b03      	ldr	r3, [pc, #12]	; (80241f4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e4>)
 80241e6:	6818      	ldr	r0, [r3, #0]
 80241e8:	6803      	ldr	r3, [r0, #0]
 80241ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80241ec:	4798      	blx	r3
 80241ee:	e762      	b.n	80240b6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 80241f0:	2001289e 	.word	0x2001289e
 80241f4:	200128a4 	.word	0x200128a4

080241f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80241f8:	b510      	push	{r4, lr}
 80241fa:	2104      	movs	r1, #4
 80241fc:	4604      	mov	r4, r0
 80241fe:	f008 ff65 	bl	802d0cc <_ZdlPvj>
 8024202:	4620      	mov	r0, r4
 8024204:	bd10      	pop	{r4, pc}

08024206 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8024206:	b510      	push	{r4, lr}
 8024208:	2104      	movs	r1, #4
 802420a:	4604      	mov	r4, r0
 802420c:	f008 ff5e 	bl	802d0cc <_ZdlPvj>
 8024210:	4620      	mov	r0, r4
 8024212:	bd10      	pop	{r4, pc}

08024214 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8024214:	b510      	push	{r4, lr}
 8024216:	2104      	movs	r1, #4
 8024218:	4604      	mov	r4, r0
 802421a:	f008 ff57 	bl	802d0cc <_ZdlPvj>
 802421e:	4620      	mov	r0, r4
 8024220:	bd10      	pop	{r4, pc}

08024222 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8024222:	b510      	push	{r4, lr}
 8024224:	2104      	movs	r1, #4
 8024226:	4604      	mov	r4, r0
 8024228:	f008 ff50 	bl	802d0cc <_ZdlPvj>
 802422c:	4620      	mov	r0, r4
 802422e:	bd10      	pop	{r4, pc}

08024230 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8024230:	b510      	push	{r4, lr}
 8024232:	2104      	movs	r1, #4
 8024234:	4604      	mov	r4, r0
 8024236:	f008 ff49 	bl	802d0cc <_ZdlPvj>
 802423a:	4620      	mov	r0, r4
 802423c:	bd10      	pop	{r4, pc}

0802423e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 802423e:	b510      	push	{r4, lr}
 8024240:	2104      	movs	r1, #4
 8024242:	4604      	mov	r4, r0
 8024244:	f008 ff42 	bl	802d0cc <_ZdlPvj>
 8024248:	4620      	mov	r0, r4
 802424a:	bd10      	pop	{r4, pc}

0802424c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 802424c:	b510      	push	{r4, lr}
 802424e:	2104      	movs	r1, #4
 8024250:	4604      	mov	r4, r0
 8024252:	f008 ff3b 	bl	802d0cc <_ZdlPvj>
 8024256:	4620      	mov	r0, r4
 8024258:	bd10      	pop	{r4, pc}

0802425a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 802425a:	b510      	push	{r4, lr}
 802425c:	2104      	movs	r1, #4
 802425e:	4604      	mov	r4, r0
 8024260:	f008 ff34 	bl	802d0cc <_ZdlPvj>
 8024264:	4620      	mov	r0, r4
 8024266:	bd10      	pop	{r4, pc}

08024268 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8024268:	b510      	push	{r4, lr}
 802426a:	2104      	movs	r1, #4
 802426c:	4604      	mov	r4, r0
 802426e:	f008 ff2d 	bl	802d0cc <_ZdlPvj>
 8024272:	4620      	mov	r0, r4
 8024274:	bd10      	pop	{r4, pc}

08024276 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8024276:	b510      	push	{r4, lr}
 8024278:	2104      	movs	r1, #4
 802427a:	4604      	mov	r4, r0
 802427c:	f008 ff26 	bl	802d0cc <_ZdlPvj>
 8024280:	4620      	mov	r0, r4
 8024282:	bd10      	pop	{r4, pc}

08024284 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8024284:	b510      	push	{r4, lr}
 8024286:	2104      	movs	r1, #4
 8024288:	4604      	mov	r4, r0
 802428a:	f008 ff1f 	bl	802d0cc <_ZdlPvj>
 802428e:	4620      	mov	r0, r4
 8024290:	bd10      	pop	{r4, pc}

08024292 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8024292:	b510      	push	{r4, lr}
 8024294:	2104      	movs	r1, #4
 8024296:	4604      	mov	r4, r0
 8024298:	f008 ff18 	bl	802d0cc <_ZdlPvj>
 802429c:	4620      	mov	r0, r4
 802429e:	bd10      	pop	{r4, pc}

080242a0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80242a0:	b510      	push	{r4, lr}
 80242a2:	2104      	movs	r1, #4
 80242a4:	4604      	mov	r4, r0
 80242a6:	f008 ff11 	bl	802d0cc <_ZdlPvj>
 80242aa:	4620      	mov	r0, r4
 80242ac:	bd10      	pop	{r4, pc}

080242ae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 80242ae:	b510      	push	{r4, lr}
 80242b0:	2104      	movs	r1, #4
 80242b2:	4604      	mov	r4, r0
 80242b4:	f008 ff0a 	bl	802d0cc <_ZdlPvj>
 80242b8:	4620      	mov	r0, r4
 80242ba:	bd10      	pop	{r4, pc}

080242bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80242bc:	b510      	push	{r4, lr}
 80242be:	2104      	movs	r1, #4
 80242c0:	4604      	mov	r4, r0
 80242c2:	f008 ff03 	bl	802d0cc <_ZdlPvj>
 80242c6:	4620      	mov	r0, r4
 80242c8:	bd10      	pop	{r4, pc}

080242ca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80242ca:	b510      	push	{r4, lr}
 80242cc:	2104      	movs	r1, #4
 80242ce:	4604      	mov	r4, r0
 80242d0:	f008 fefc 	bl	802d0cc <_ZdlPvj>
 80242d4:	4620      	mov	r0, r4
 80242d6:	bd10      	pop	{r4, pc}

080242d8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 80242d8:	b510      	push	{r4, lr}
 80242da:	2104      	movs	r1, #4
 80242dc:	4604      	mov	r4, r0
 80242de:	f008 fef5 	bl	802d0cc <_ZdlPvj>
 80242e2:	4620      	mov	r0, r4
 80242e4:	bd10      	pop	{r4, pc}

080242e6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 80242e6:	b510      	push	{r4, lr}
 80242e8:	2104      	movs	r1, #4
 80242ea:	4604      	mov	r4, r0
 80242ec:	f008 feee 	bl	802d0cc <_ZdlPvj>
 80242f0:	4620      	mov	r0, r4
 80242f2:	bd10      	pop	{r4, pc}

080242f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80242f4:	b510      	push	{r4, lr}
 80242f6:	2104      	movs	r1, #4
 80242f8:	4604      	mov	r4, r0
 80242fa:	f008 fee7 	bl	802d0cc <_ZdlPvj>
 80242fe:	4620      	mov	r0, r4
 8024300:	bd10      	pop	{r4, pc}

08024302 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 8024302:	b510      	push	{r4, lr}
 8024304:	2104      	movs	r1, #4
 8024306:	4604      	mov	r4, r0
 8024308:	f008 fee0 	bl	802d0cc <_ZdlPvj>
 802430c:	4620      	mov	r0, r4
 802430e:	bd10      	pop	{r4, pc}

08024310 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8024310:	b510      	push	{r4, lr}
 8024312:	2104      	movs	r1, #4
 8024314:	4604      	mov	r4, r0
 8024316:	f008 fed9 	bl	802d0cc <_ZdlPvj>
 802431a:	4620      	mov	r0, r4
 802431c:	bd10      	pop	{r4, pc}

0802431e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 802431e:	b510      	push	{r4, lr}
 8024320:	2104      	movs	r1, #4
 8024322:	4604      	mov	r4, r0
 8024324:	f008 fed2 	bl	802d0cc <_ZdlPvj>
 8024328:	4620      	mov	r0, r4
 802432a:	bd10      	pop	{r4, pc}

0802432c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 802432c:	b510      	push	{r4, lr}
 802432e:	2104      	movs	r1, #4
 8024330:	4604      	mov	r4, r0
 8024332:	f008 fecb 	bl	802d0cc <_ZdlPvj>
 8024336:	4620      	mov	r0, r4
 8024338:	bd10      	pop	{r4, pc}

0802433a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 802433a:	b510      	push	{r4, lr}
 802433c:	2104      	movs	r1, #4
 802433e:	4604      	mov	r4, r0
 8024340:	f008 fec4 	bl	802d0cc <_ZdlPvj>
 8024344:	4620      	mov	r0, r4
 8024346:	bd10      	pop	{r4, pc}

08024348 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8024348:	b510      	push	{r4, lr}
 802434a:	2104      	movs	r1, #4
 802434c:	4604      	mov	r4, r0
 802434e:	f008 febd 	bl	802d0cc <_ZdlPvj>
 8024352:	4620      	mov	r0, r4
 8024354:	bd10      	pop	{r4, pc}

08024356 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8024356:	b510      	push	{r4, lr}
 8024358:	2104      	movs	r1, #4
 802435a:	4604      	mov	r4, r0
 802435c:	f008 feb6 	bl	802d0cc <_ZdlPvj>
 8024360:	4620      	mov	r0, r4
 8024362:	bd10      	pop	{r4, pc}

08024364 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8024364:	b510      	push	{r4, lr}
 8024366:	2104      	movs	r1, #4
 8024368:	4604      	mov	r4, r0
 802436a:	f008 feaf 	bl	802d0cc <_ZdlPvj>
 802436e:	4620      	mov	r0, r4
 8024370:	bd10      	pop	{r4, pc}

08024372 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8024372:	b510      	push	{r4, lr}
 8024374:	2104      	movs	r1, #4
 8024376:	4604      	mov	r4, r0
 8024378:	f008 fea8 	bl	802d0cc <_ZdlPvj>
 802437c:	4620      	mov	r0, r4
 802437e:	bd10      	pop	{r4, pc}

08024380 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8024380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024384:	460e      	mov	r6, r1
 8024386:	b08b      	sub	sp, #44	; 0x2c
 8024388:	4615      	mov	r5, r2
 802438a:	461c      	mov	r4, r3
 802438c:	b323      	cbz	r3, 80243d8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x58>
 802438e:	4608      	mov	r0, r1
 8024390:	f7f6 fdab 	bl	801aeea <_ZNK8touchgfx4Rect7isEmptyEv>
 8024394:	bb00      	cbnz	r0, 80243d8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x58>
 8024396:	6830      	ldr	r0, [r6, #0]
 8024398:	6871      	ldr	r1, [r6, #4]
 802439a:	4e55      	ldr	r6, [pc, #340]	; (80244f0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x170>)
 802439c:	ab08      	add	r3, sp, #32
 802439e:	c303      	stmia	r3!, {r0, r1}
 80243a0:	a808      	add	r0, sp, #32
 80243a2:	f7fa fd15 	bl	801edd0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80243a6:	6830      	ldr	r0, [r6, #0]
 80243a8:	6803      	ldr	r3, [r0, #0]
 80243aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80243ac:	4798      	blx	r3
 80243ae:	2cff      	cmp	r4, #255	; 0xff
 80243b0:	d015      	beq.n	80243de <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 80243b2:	f010 0f08 	tst.w	r0, #8
 80243b6:	d015      	beq.n	80243e4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x64>
 80243b8:	6830      	ldr	r0, [r6, #0]
 80243ba:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80243be:	6801      	ldr	r1, [r0, #0]
 80243c0:	9402      	str	r4, [sp, #8]
 80243c2:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 80243c6:	9401      	str	r4, [sp, #4]
 80243c8:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 80243cc:	9400      	str	r4, [sp, #0]
 80243ce:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 80243d0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80243d4:	4629      	mov	r1, r5
 80243d6:	47a0      	blx	r4
 80243d8:	b00b      	add	sp, #44	; 0x2c
 80243da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80243de:	f010 0f02 	tst.w	r0, #2
 80243e2:	e7e8      	b.n	80243b6 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 80243e4:	6830      	ldr	r0, [r6, #0]
 80243e6:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 80243ea:	6803      	ldr	r3, [r0, #0]
 80243ec:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 80243f0:	6a1b      	ldr	r3, [r3, #32]
 80243f2:	4798      	blx	r3
 80243f4:	4a3f      	ldr	r2, [pc, #252]	; (80244f4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x174>)
 80243f6:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 80243fa:	8816      	ldrh	r6, [r2, #0]
 80243fc:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8024400:	2cff      	cmp	r4, #255	; 0xff
 8024402:	fb06 1303 	mla	r3, r6, r3, r1
 8024406:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802440a:	ea4f 0b48 	mov.w	fp, r8, lsl #1
 802440e:	4616      	mov	r6, r2
 8024410:	ea28 71e8 	bic.w	r1, r8, r8, asr #31
 8024414:	d10a      	bne.n	802442c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xac>
 8024416:	0049      	lsls	r1, r1, #1
 8024418:	2200      	movs	r2, #0
 802441a:	454a      	cmp	r2, r9
 802441c:	da61      	bge.n	80244e2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x162>
 802441e:	2300      	movs	r3, #0
 8024420:	4543      	cmp	r3, r8
 8024422:	da57      	bge.n	80244d4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x154>
 8024424:	f820 5013 	strh.w	r5, [r0, r3, lsl #1]
 8024428:	3301      	adds	r3, #1
 802442a:	e7f9      	b.n	8024420 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xa0>
 802442c:	0a2b      	lsrs	r3, r5, #8
 802442e:	f1c4 07ff 	rsb	r7, r4, #255	; 0xff
 8024432:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8024436:	b2a4      	uxth	r4, r4
 8024438:	4363      	muls	r3, r4
 802443a:	9305      	str	r3, [sp, #20]
 802443c:	08ee      	lsrs	r6, r5, #3
 802443e:	00eb      	lsls	r3, r5, #3
 8024440:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8024444:	b2db      	uxtb	r3, r3
 8024446:	0049      	lsls	r1, r1, #1
 8024448:	4366      	muls	r6, r4
 802444a:	4363      	muls	r3, r4
 802444c:	9106      	str	r1, [sp, #24]
 802444e:	f04f 0c00 	mov.w	ip, #0
 8024452:	b2bf      	uxth	r7, r7
 8024454:	9207      	str	r2, [sp, #28]
 8024456:	45cc      	cmp	ip, r9
 8024458:	da43      	bge.n	80244e2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x162>
 802445a:	4682      	mov	sl, r0
 802445c:	f04f 0e00 	mov.w	lr, #0
 8024460:	45c6      	cmp	lr, r8
 8024462:	da2d      	bge.n	80244c0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x140>
 8024464:	f8ba 2000 	ldrh.w	r2, [sl]
 8024468:	9905      	ldr	r1, [sp, #20]
 802446a:	1214      	asrs	r4, r2, #8
 802446c:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8024470:	fb14 f407 	smulbb	r4, r4, r7
 8024474:	440c      	add	r4, r1
 8024476:	10d1      	asrs	r1, r2, #3
 8024478:	00d2      	lsls	r2, r2, #3
 802447a:	b2d2      	uxtb	r2, r2
 802447c:	fb12 f207 	smulbb	r2, r2, r7
 8024480:	b2a4      	uxth	r4, r4
 8024482:	441a      	add	r2, r3
 8024484:	b292      	uxth	r2, r2
 8024486:	1c65      	adds	r5, r4, #1
 8024488:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802448c:	eb05 2414 	add.w	r4, r5, r4, lsr #8
 8024490:	fb11 f107 	smulbb	r1, r1, r7
 8024494:	1c55      	adds	r5, r2, #1
 8024496:	4431      	add	r1, r6
 8024498:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 802449c:	b289      	uxth	r1, r1
 802449e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80244a2:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 80244a6:	4314      	orrs	r4, r2
 80244a8:	1c4a      	adds	r2, r1, #1
 80244aa:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80244ae:	0949      	lsrs	r1, r1, #5
 80244b0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80244b4:	430c      	orrs	r4, r1
 80244b6:	f82a 4b02 	strh.w	r4, [sl], #2
 80244ba:	f10e 0e01 	add.w	lr, lr, #1
 80244be:	e7cf      	b.n	8024460 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xe0>
 80244c0:	9a07      	ldr	r2, [sp, #28]
 80244c2:	9906      	ldr	r1, [sp, #24]
 80244c4:	8812      	ldrh	r2, [r2, #0]
 80244c6:	ebcb 0242 	rsb	r2, fp, r2, lsl #1
 80244ca:	440a      	add	r2, r1
 80244cc:	4410      	add	r0, r2
 80244ce:	f10c 0c01 	add.w	ip, ip, #1
 80244d2:	e7c0      	b.n	8024456 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xd6>
 80244d4:	8833      	ldrh	r3, [r6, #0]
 80244d6:	ebcb 0343 	rsb	r3, fp, r3, lsl #1
 80244da:	440b      	add	r3, r1
 80244dc:	4418      	add	r0, r3
 80244de:	3201      	adds	r2, #1
 80244e0:	e79b      	b.n	802441a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x9a>
 80244e2:	4b03      	ldr	r3, [pc, #12]	; (80244f0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x170>)
 80244e4:	6818      	ldr	r0, [r3, #0]
 80244e6:	6803      	ldr	r3, [r0, #0]
 80244e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80244ea:	4798      	blx	r3
 80244ec:	e774      	b.n	80243d8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x58>
 80244ee:	bf00      	nop
 80244f0:	200128a4 	.word	0x200128a4
 80244f4:	2001289e 	.word	0x2001289e

080244f8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80244f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80244fc:	4d9b      	ldr	r5, [pc, #620]	; (802476c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 80244fe:	4690      	mov	r8, r2
 8024500:	682a      	ldr	r2, [r5, #0]
 8024502:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8024506:	2a02      	cmp	r2, #2
 8024508:	b08f      	sub	sp, #60	; 0x3c
 802450a:	4604      	mov	r4, r0
 802450c:	4689      	mov	r9, r1
 802450e:	d106      	bne.n	802451e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 8024510:	4b97      	ldr	r3, [pc, #604]	; (8024770 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 8024512:	4a98      	ldr	r2, [pc, #608]	; (8024774 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 8024514:	f240 21be 	movw	r1, #702	; 0x2be
 8024518:	4897      	ldr	r0, [pc, #604]	; (8024778 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 802451a:	f009 fea5 	bl	802e268 <__assert_func>
 802451e:	ae0e      	add	r6, sp, #56	; 0x38
 8024520:	f826 3d24 	strh.w	r3, [r6, #-36]!
 8024524:	4630      	mov	r0, r6
 8024526:	f7fd fae3 	bl	8021af0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 802452a:	6823      	ldr	r3, [r4, #0]
 802452c:	4607      	mov	r7, r0
 802452e:	6a1b      	ldr	r3, [r3, #32]
 8024530:	4620      	mov	r0, r4
 8024532:	4798      	blx	r3
 8024534:	4287      	cmp	r7, r0
 8024536:	d004      	beq.n	8024542 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 8024538:	4b90      	ldr	r3, [pc, #576]	; (802477c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 802453a:	4a8e      	ldr	r2, [pc, #568]	; (8024774 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 802453c:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8024540:	e7ea      	b.n	8024518 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8024542:	4630      	mov	r0, r6
 8024544:	f7fd fa50 	bl	80219e8 <_ZNK8touchgfx6Bitmap7getDataEv>
 8024548:	4607      	mov	r7, r0
 802454a:	b920      	cbnz	r0, 8024556 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 802454c:	4b8c      	ldr	r3, [pc, #560]	; (8024780 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 802454e:	4a89      	ldr	r2, [pc, #548]	; (8024774 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 8024550:	f240 21c2 	movw	r1, #706	; 0x2c2
 8024554:	e7e0      	b.n	8024518 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8024556:	f8d8 0000 	ldr.w	r0, [r8]
 802455a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 802455e:	f9b8 a000 	ldrsh.w	sl, [r8]
 8024562:	ab06      	add	r3, sp, #24
 8024564:	c303      	stmia	r3!, {r0, r1}
 8024566:	f8d9 1004 	ldr.w	r1, [r9, #4]
 802456a:	f8d9 0000 	ldr.w	r0, [r9]
 802456e:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 8024572:	ab08      	add	r3, sp, #32
 8024574:	c303      	stmia	r3!, {r0, r1}
 8024576:	4630      	mov	r0, r6
 8024578:	f7fd f92e 	bl	80217d8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 802457c:	4680      	mov	r8, r0
 802457e:	4630      	mov	r0, r6
 8024580:	f7fd f964 	bl	802184c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8024584:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8024588:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 802458c:	f10d 0920 	add.w	r9, sp, #32
 8024590:	a806      	add	r0, sp, #24
 8024592:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8024596:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 802459a:	f7fa fc19 	bl	801edd0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802459e:	4648      	mov	r0, r9
 80245a0:	f7fa fc16 	bl	801edd0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80245a4:	a80a      	add	r0, sp, #40	; 0x28
 80245a6:	f7fa fc13 	bl	801edd0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80245aa:	4e76      	ldr	r6, [pc, #472]	; (8024784 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 80245ac:	4b76      	ldr	r3, [pc, #472]	; (8024788 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 80245ae:	f9b6 2000 	ldrsh.w	r2, [r6]
 80245b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80245b6:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80245ba:	2100      	movs	r1, #0
 80245bc:	910c      	str	r1, [sp, #48]	; 0x30
 80245be:	4648      	mov	r0, r9
 80245c0:	a90c      	add	r1, sp, #48	; 0x30
 80245c2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80245c6:	f7f6 fc4d 	bl	801ae64 <_ZN8touchgfx4RectaNERKS0_>
 80245ca:	4648      	mov	r0, r9
 80245cc:	f7f6 fc8d 	bl	801aeea <_ZNK8touchgfx4Rect7isEmptyEv>
 80245d0:	2800      	cmp	r0, #0
 80245d2:	f040 80bd 	bne.w	8024750 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x258>
 80245d6:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 80245da:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 80245de:	4288      	cmp	r0, r1
 80245e0:	db37      	blt.n	8024652 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x15a>
 80245e2:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 80245e6:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80245ea:	429a      	cmp	r2, r3
 80245ec:	db31      	blt.n	8024652 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x15a>
 80245ee:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
 80245f2:	4460      	add	r0, ip
 80245f4:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 80245f8:	4461      	add	r1, ip
 80245fa:	b200      	sxth	r0, r0
 80245fc:	b209      	sxth	r1, r1
 80245fe:	4288      	cmp	r0, r1
 8024600:	dc27      	bgt.n	8024652 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x15a>
 8024602:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8024606:	440a      	add	r2, r1
 8024608:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 802460c:	440b      	add	r3, r1
 802460e:	b212      	sxth	r2, r2
 8024610:	b21b      	sxth	r3, r3
 8024612:	429a      	cmp	r2, r3
 8024614:	dc1d      	bgt.n	8024652 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x15a>
 8024616:	6823      	ldr	r3, [r4, #0]
 8024618:	4620      	mov	r0, r4
 802461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802461c:	4798      	blx	r3
 802461e:	4682      	mov	sl, r0
 8024620:	6828      	ldr	r0, [r5, #0]
 8024622:	6803      	ldr	r3, [r0, #0]
 8024624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024626:	4798      	blx	r3
 8024628:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 802462c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8024630:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 8024634:	1a9b      	subs	r3, r3, r2
 8024636:	b29b      	uxth	r3, r3
 8024638:	b21c      	sxth	r4, r3
 802463a:	2c00      	cmp	r4, #0
 802463c:	dc0e      	bgt.n	802465c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 802463e:	bf1f      	itttt	ne
 8024640:	f8ad 2020 	strhne.w	r2, [sp, #32]
 8024644:	f8bd 2024 	ldrhne.w	r2, [sp, #36]	; 0x24
 8024648:	189b      	addne	r3, r3, r2
 802464a:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 802464e:	463c      	mov	r4, r7
 8024650:	e00a      	b.n	8024668 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x170>
 8024652:	4b4e      	ldr	r3, [pc, #312]	; (802478c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 8024654:	4a47      	ldr	r2, [pc, #284]	; (8024774 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 8024656:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 802465a:	e75d      	b.n	8024518 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 802465c:	ebab 0303 	sub.w	r3, fp, r3
 8024660:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8024664:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8024668:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 802466c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8024670:	1a5b      	subs	r3, r3, r1
 8024672:	b29b      	uxth	r3, r3
 8024674:	b21a      	sxth	r2, r3
 8024676:	2a00      	cmp	r2, #0
 8024678:	dd4a      	ble.n	8024710 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x218>
 802467a:	fb02 f20b 	mul.w	r2, r2, fp
 802467e:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 8024682:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 8024686:	1ad3      	subs	r3, r2, r3
 8024688:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 802468c:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8024690:	2b00      	cmp	r3, #0
 8024692:	dd5d      	ble.n	8024750 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x258>
 8024694:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	; 0x2e
 8024698:	f1bc 0f00 	cmp.w	ip, #0
 802469c:	dd58      	ble.n	8024750 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x258>
 802469e:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 80246a2:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80246a6:	fb0a f801 	mul.w	r8, sl, r1
 80246aa:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 80246ae:	4480      	add	r8, r0
 80246b0:	8830      	ldrh	r0, [r6, #0]
 80246b2:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 80246b6:	42b3      	cmp	r3, r6
 80246b8:	bfa8      	it	ge
 80246ba:	4633      	movge	r3, r6
 80246bc:	1a82      	subs	r2, r0, r2
 80246be:	4293      	cmp	r3, r2
 80246c0:	bfa8      	it	ge
 80246c2:	4613      	movge	r3, r2
 80246c4:	4a30      	ldr	r2, [pc, #192]	; (8024788 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 80246c6:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 80246ca:	8812      	ldrh	r2, [r2, #0]
 80246cc:	4566      	cmp	r6, ip
 80246ce:	eba2 0101 	sub.w	r1, r2, r1
 80246d2:	bfa8      	it	ge
 80246d4:	4666      	movge	r6, ip
 80246d6:	428e      	cmp	r6, r1
 80246d8:	4632      	mov	r2, r6
 80246da:	bfa8      	it	ge
 80246dc:	460a      	movge	r2, r1
 80246de:	4298      	cmp	r0, r3
 80246e0:	9202      	str	r2, [sp, #8]
 80246e2:	d01e      	beq.n	8024722 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x22a>
 80246e4:	005b      	lsls	r3, r3, #1
 80246e6:	9303      	str	r3, [sp, #12]
 80246e8:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 80246ec:	f04f 0900 	mov.w	r9, #0
 80246f0:	9b02      	ldr	r3, [sp, #8]
 80246f2:	454b      	cmp	r3, r9
 80246f4:	dd2c      	ble.n	8024750 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x258>
 80246f6:	6828      	ldr	r0, [r5, #0]
 80246f8:	6803      	ldr	r3, [r0, #0]
 80246fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80246fc:	4642      	mov	r2, r8
 80246fe:	461e      	mov	r6, r3
 8024700:	4621      	mov	r1, r4
 8024702:	9b03      	ldr	r3, [sp, #12]
 8024704:	47b0      	blx	r6
 8024706:	44d0      	add	r8, sl
 8024708:	445c      	add	r4, fp
 802470a:	f109 0901 	add.w	r9, r9, #1
 802470e:	e7ef      	b.n	80246f0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1f8>
 8024710:	bf1f      	itttt	ne
 8024712:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 8024716:	f8ad 1022 	strhne.w	r1, [sp, #34]	; 0x22
 802471a:	189b      	addne	r3, r3, r2
 802471c:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 8024720:	e7b4      	b.n	802468c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x194>
 8024722:	4558      	cmp	r0, fp
 8024724:	d1de      	bne.n	80246e4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ec>
 8024726:	6828      	ldr	r0, [r5, #0]
 8024728:	6803      	ldr	r3, [r0, #0]
 802472a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802472c:	4798      	blx	r3
 802472e:	07c3      	lsls	r3, r0, #31
 8024730:	d512      	bpl.n	8024758 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x260>
 8024732:	6828      	ldr	r0, [r5, #0]
 8024734:	9b02      	ldr	r3, [sp, #8]
 8024736:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 802473a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 802473e:	6803      	ldr	r3, [r0, #0]
 8024740:	f8cd b000 	str.w	fp, [sp]
 8024744:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8024746:	e899 0006 	ldmia.w	r9, {r1, r2}
 802474a:	4623      	mov	r3, r4
 802474c:	47a8      	blx	r5
 802474e:	4607      	mov	r7, r0
 8024750:	4638      	mov	r0, r7
 8024752:	b00f      	add	sp, #60	; 0x3c
 8024754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024758:	6828      	ldr	r0, [r5, #0]
 802475a:	6803      	ldr	r3, [r0, #0]
 802475c:	6add      	ldr	r5, [r3, #44]	; 0x2c
 802475e:	9b02      	ldr	r3, [sp, #8]
 8024760:	4642      	mov	r2, r8
 8024762:	fb03 f30a 	mul.w	r3, r3, sl
 8024766:	4621      	mov	r1, r4
 8024768:	47a8      	blx	r5
 802476a:	e7f1      	b.n	8024750 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x258>
 802476c:	200128a4 	.word	0x200128a4
 8024770:	080341aa 	.word	0x080341aa
 8024774:	080349e7 	.word	0x080349e7
 8024778:	0803425c 	.word	0x0803425c
 802477c:	0803428e 	.word	0x0803428e
 8024780:	080342e3 	.word	0x080342e3
 8024784:	2001289e 	.word	0x2001289e
 8024788:	200128a0 	.word	0x200128a0
 802478c:	08034321 	.word	0x08034321

08024790 <_ZN8touchgfx8LCD16bppC1Ev>:
 8024790:	2200      	movs	r2, #0
 8024792:	4910      	ldr	r1, [pc, #64]	; (80247d4 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 8024794:	6042      	str	r2, [r0, #4]
 8024796:	6001      	str	r1, [r0, #0]
 8024798:	e9c0 2202 	strd	r2, r2, [r0, #8]
 802479c:	e9c0 2204 	strd	r2, r2, [r0, #16]
 80247a0:	e9c0 2206 	strd	r2, r2, [r0, #24]
 80247a4:	e9c0 2208 	strd	r2, r2, [r0, #32]
 80247a8:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 80247ac:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 80247b0:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 80247b4:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 80247b8:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 80247bc:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 80247c0:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 80247c4:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 80247c8:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 80247cc:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 80247d0:	4770      	bx	lr
 80247d2:	bf00      	nop
 80247d4:	08034664 	.word	0x08034664

080247d8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 80247d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80247dc:	460c      	mov	r4, r1
 80247de:	b08d      	sub	sp, #52	; 0x34
 80247e0:	4682      	mov	sl, r0
 80247e2:	6808      	ldr	r0, [r1, #0]
 80247e4:	6849      	ldr	r1, [r1, #4]
 80247e6:	469b      	mov	fp, r3
 80247e8:	ab08      	add	r3, sp, #32
 80247ea:	c303      	stmia	r3!, {r0, r1}
 80247ec:	6810      	ldr	r0, [r2, #0]
 80247ee:	6851      	ldr	r1, [r2, #4]
 80247f0:	ab0a      	add	r3, sp, #40	; 0x28
 80247f2:	c303      	stmia	r3!, {r0, r1}
 80247f4:	a808      	add	r0, sp, #32
 80247f6:	f7fa faeb 	bl	801edd0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80247fa:	4621      	mov	r1, r4
 80247fc:	a80a      	add	r0, sp, #40	; 0x28
 80247fe:	f7fa facf 	bl	801eda0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024802:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8024806:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 802480a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 802480e:	4c60      	ldr	r4, [pc, #384]	; (8024990 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b8>)
 8024810:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 8024814:	6820      	ldr	r0, [r4, #0]
 8024816:	f9bd 902e 	ldrsh.w	r9, [sp, #46]	; 0x2e
 802481a:	fb11 2103 	smlabb	r1, r1, r3, r2
 802481e:	eb0a 0a81 	add.w	sl, sl, r1, lsl #2
 8024822:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8024826:	440a      	add	r2, r1
 8024828:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 802482c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8024830:	4413      	add	r3, r2
 8024832:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8024836:	6803      	ldr	r3, [r0, #0]
 8024838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802483a:	4798      	blx	r3
 802483c:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8024840:	d119      	bne.n	8024876 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8024842:	f010 0f20 	tst.w	r0, #32
 8024846:	6820      	ldr	r0, [r4, #0]
 8024848:	d018      	beq.n	802487c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 802484a:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 802484e:	6801      	ldr	r1, [r0, #0]
 8024850:	9402      	str	r4, [sp, #8]
 8024852:	fa1f f489 	uxth.w	r4, r9
 8024856:	9401      	str	r4, [sp, #4]
 8024858:	fa1f f488 	uxth.w	r4, r8
 802485c:	f8cd b00c 	str.w	fp, [sp, #12]
 8024860:	9400      	str	r4, [sp, #0]
 8024862:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8024864:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8024868:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 802486c:	4651      	mov	r1, sl
 802486e:	47a0      	blx	r4
 8024870:	b00d      	add	sp, #52	; 0x34
 8024872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024876:	f010 0f40 	tst.w	r0, #64	; 0x40
 802487a:	e7e4      	b.n	8024846 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 802487c:	6803      	ldr	r3, [r0, #0]
 802487e:	6a1b      	ldr	r3, [r3, #32]
 8024880:	4798      	blx	r3
 8024882:	4a44      	ldr	r2, [pc, #272]	; (8024994 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1bc>)
 8024884:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8024888:	8813      	ldrh	r3, [r2, #0]
 802488a:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	; 0x2a
 802488e:	9207      	str	r2, [sp, #28]
 8024890:	fb04 1303 	mla	r3, r4, r3, r1
 8024894:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8024898:	ea28 73e8 	bic.w	r3, r8, r8, asr #31
 802489c:	0099      	lsls	r1, r3, #2
 802489e:	005b      	lsls	r3, r3, #1
 80248a0:	9106      	str	r1, [sp, #24]
 80248a2:	9305      	str	r3, [sp, #20]
 80248a4:	f04f 0c00 	mov.w	ip, #0
 80248a8:	45cc      	cmp	ip, r9
 80248aa:	da6b      	bge.n	8024984 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>
 80248ac:	2300      	movs	r3, #0
 80248ae:	4543      	cmp	r3, r8
 80248b0:	da55      	bge.n	802495e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x186>
 80248b2:	f85a 4023 	ldr.w	r4, [sl, r3, lsl #2]
 80248b6:	0e25      	lsrs	r5, r4, #24
 80248b8:	d013      	beq.n	80248e2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 80248ba:	2dff      	cmp	r5, #255	; 0xff
 80248bc:	ea4f 2714 	mov.w	r7, r4, lsr #8
 80248c0:	d111      	bne.n	80248e6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10e>
 80248c2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80248c6:	d10e      	bne.n	80248e6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10e>
 80248c8:	0962      	lsrs	r2, r4, #5
 80248ca:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 80248ce:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80248d2:	f027 0707 	bic.w	r7, r7, #7
 80248d6:	4317      	orrs	r7, r2
 80248d8:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 80248dc:	433c      	orrs	r4, r7
 80248de:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
 80248e2:	3301      	adds	r3, #1
 80248e4:	e7e3      	b.n	80248ae <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd6>
 80248e6:	fb0b f505 	mul.w	r5, fp, r5
 80248ea:	1c6a      	adds	r2, r5, #1
 80248ec:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
 80248f0:	eb02 2225 	add.w	r2, r2, r5, asr #8
 80248f4:	1212      	asrs	r2, r2, #8
 80248f6:	fa1f fe82 	uxth.w	lr, r2
 80248fa:	120e      	asrs	r6, r1, #8
 80248fc:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8024900:	43d2      	mvns	r2, r2
 8024902:	b2d2      	uxtb	r2, r2
 8024904:	fb15 f50e 	smulbb	r5, r5, lr
 8024908:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 802490c:	fb06 5602 	mla	r6, r6, r2, r5
 8024910:	b2e4      	uxtb	r4, r4
 8024912:	10cd      	asrs	r5, r1, #3
 8024914:	00c9      	lsls	r1, r1, #3
 8024916:	b2c9      	uxtb	r1, r1
 8024918:	fb14 f40e 	smulbb	r4, r4, lr
 802491c:	fb01 4402 	mla	r4, r1, r2, r4
 8024920:	b2ff      	uxtb	r7, r7
 8024922:	b2b6      	uxth	r6, r6
 8024924:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8024928:	b2a4      	uxth	r4, r4
 802492a:	fb17 f70e 	smulbb	r7, r7, lr
 802492e:	fb05 7702 	mla	r7, r5, r2, r7
 8024932:	1c72      	adds	r2, r6, #1
 8024934:	1c65      	adds	r5, r4, #1
 8024936:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 802493a:	eb05 2514 	add.w	r5, r5, r4, lsr #8
 802493e:	b2bf      	uxth	r7, r7
 8024940:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8024944:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8024948:	432e      	orrs	r6, r5
 802494a:	1c7d      	adds	r5, r7, #1
 802494c:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 8024950:	097f      	lsrs	r7, r7, #5
 8024952:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8024956:	433e      	orrs	r6, r7
 8024958:	f820 6013 	strh.w	r6, [r0, r3, lsl #1]
 802495c:	e7c1      	b.n	80248e2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 802495e:	9b07      	ldr	r3, [sp, #28]
 8024960:	9a05      	ldr	r2, [sp, #20]
 8024962:	881b      	ldrh	r3, [r3, #0]
 8024964:	eba3 0308 	sub.w	r3, r3, r8
 8024968:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802496c:	4418      	add	r0, r3
 802496e:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8024972:	9a06      	ldr	r2, [sp, #24]
 8024974:	eba3 0308 	sub.w	r3, r3, r8
 8024978:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802497c:	449a      	add	sl, r3
 802497e:	f10c 0c01 	add.w	ip, ip, #1
 8024982:	e791      	b.n	80248a8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 8024984:	4b02      	ldr	r3, [pc, #8]	; (8024990 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b8>)
 8024986:	6818      	ldr	r0, [r3, #0]
 8024988:	6803      	ldr	r3, [r0, #0]
 802498a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802498c:	4798      	blx	r3
 802498e:	e76f      	b.n	8024870 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8024990:	200128a4 	.word	0x200128a4
 8024994:	2001289e 	.word	0x2001289e

08024998 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8024998:	b570      	push	{r4, r5, r6, lr}
 802499a:	9d04      	ldr	r5, [sp, #16]
 802499c:	f89d 6018 	ldrb.w	r6, [sp, #24]
 80249a0:	460c      	mov	r4, r1
 80249a2:	4619      	mov	r1, r3
 80249a4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80249a8:	2a0c      	cmp	r2, #12
 80249aa:	d820      	bhi.n	80249ee <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x56>
 80249ac:	e8df f002 	tbb	[pc, r2]
 80249b0:	18121807 	.word	0x18121807
 80249b4:	18181818 	.word	0x18181818
 80249b8:	18181818 	.word	0x18181818
 80249bc:	18          	.byte	0x18
 80249bd:	00          	.byte	0x00
 80249be:	6802      	ldr	r2, [r0, #0]
 80249c0:	e9cd 3604 	strd	r3, r6, [sp, #16]
 80249c4:	68d6      	ldr	r6, [r2, #12]
 80249c6:	462b      	mov	r3, r5
 80249c8:	460a      	mov	r2, r1
 80249ca:	46b4      	mov	ip, r6
 80249cc:	4621      	mov	r1, r4
 80249ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80249d2:	4760      	bx	ip
 80249d4:	462a      	mov	r2, r5
 80249d6:	4620      	mov	r0, r4
 80249d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80249dc:	f7ff befc 	b.w	80247d8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80249e0:	4b03      	ldr	r3, [pc, #12]	; (80249f0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x58>)
 80249e2:	4a04      	ldr	r2, [pc, #16]	; (80249f4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5c>)
 80249e4:	4804      	ldr	r0, [pc, #16]	; (80249f8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 80249e6:	f240 21b7 	movw	r1, #695	; 0x2b7
 80249ea:	f009 fc3d 	bl	802e268 <__assert_func>
 80249ee:	bd70      	pop	{r4, r5, r6, pc}
 80249f0:	08034381 	.word	0x08034381
 80249f4:	08034a6d 	.word	0x08034a6d
 80249f8:	0803425c 	.word	0x0803425c

080249fc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 80249fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024a00:	b093      	sub	sp, #76	; 0x4c
 8024a02:	880f      	ldrh	r7, [r1, #0]
 8024a04:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 8024a08:	4681      	mov	r9, r0
 8024a0a:	4688      	mov	r8, r1
 8024a0c:	4615      	mov	r5, r2
 8024a0e:	b12f      	cbz	r7, 8024a1c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 8024a10:	4b71      	ldr	r3, [pc, #452]	; (8024bd8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 8024a12:	4a72      	ldr	r2, [pc, #456]	; (8024bdc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 8024a14:	4872      	ldr	r0, [pc, #456]	; (8024be0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 8024a16:	21e8      	movs	r1, #232	; 0xe8
 8024a18:	f009 fc26 	bl	802e268 <__assert_func>
 8024a1c:	6810      	ldr	r0, [r2, #0]
 8024a1e:	6851      	ldr	r1, [r2, #4]
 8024a20:	ac0e      	add	r4, sp, #56	; 0x38
 8024a22:	c403      	stmia	r4!, {r0, r1}
 8024a24:	6818      	ldr	r0, [r3, #0]
 8024a26:	6859      	ldr	r1, [r3, #4]
 8024a28:	ac10      	add	r4, sp, #64	; 0x40
 8024a2a:	c403      	stmia	r4!, {r0, r1}
 8024a2c:	a80e      	add	r0, sp, #56	; 0x38
 8024a2e:	f7fa f9cf 	bl	801edd0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024a32:	4629      	mov	r1, r5
 8024a34:	a810      	add	r0, sp, #64	; 0x40
 8024a36:	f7fa f9b3 	bl	801eda0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024a3a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8024a3e:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8024a42:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8024a46:	4d67      	ldr	r5, [pc, #412]	; (8024be4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 8024a48:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8024a4c:	6828      	ldr	r0, [r5, #0]
 8024a4e:	4c66      	ldr	r4, [pc, #408]	; (8024be8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>)
 8024a50:	fb11 2103 	smlabb	r1, r1, r3, r2
 8024a54:	4489      	add	r9, r1
 8024a56:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8024a5a:	440a      	add	r2, r1
 8024a5c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8024a60:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8024a64:	4413      	add	r3, r2
 8024a66:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8024a6a:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 8024a6e:	930a      	str	r3, [sp, #40]	; 0x28
 8024a70:	6803      	ldr	r3, [r0, #0]
 8024a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8024a76:	4798      	blx	r3
 8024a78:	2801      	cmp	r0, #1
 8024a7a:	d11d      	bne.n	8024ab8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbc>
 8024a7c:	220b      	movs	r2, #11
 8024a7e:	9708      	str	r7, [sp, #32]
 8024a80:	9207      	str	r2, [sp, #28]
 8024a82:	8822      	ldrh	r2, [r4, #0]
 8024a84:	f8cd a010 	str.w	sl, [sp, #16]
 8024a88:	e9cd 0205 	strd	r0, r2, [sp, #20]
 8024a8c:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8024a90:	9203      	str	r2, [sp, #12]
 8024a92:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8024a96:	9202      	str	r2, [sp, #8]
 8024a98:	fa1f f28b 	uxth.w	r2, fp
 8024a9c:	9201      	str	r2, [sp, #4]
 8024a9e:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8024aa2:	9200      	str	r2, [sp, #0]
 8024aa4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8024aa8:	6828      	ldr	r0, [r5, #0]
 8024aaa:	4642      	mov	r2, r8
 8024aac:	4649      	mov	r1, r9
 8024aae:	f7f8 f9f3 	bl	801ce98 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8024ab2:	b013      	add	sp, #76	; 0x4c
 8024ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024ab8:	6828      	ldr	r0, [r5, #0]
 8024aba:	6803      	ldr	r3, [r0, #0]
 8024abc:	6a1b      	ldr	r3, [r3, #32]
 8024abe:	4798      	blx	r3
 8024ac0:	8823      	ldrh	r3, [r4, #0]
 8024ac2:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8024ac6:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8024aca:	fb01 2303 	mla	r3, r1, r3, r2
 8024ace:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8024ad2:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
 8024ad6:	930b      	str	r3, [sp, #44]	; 0x2c
 8024ad8:	005b      	lsls	r3, r3, #1
 8024ada:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8024ade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024ae0:	429f      	cmp	r7, r3
 8024ae2:	da72      	bge.n	8024bca <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ce>
 8024ae4:	2100      	movs	r1, #0
 8024ae6:	4559      	cmp	r1, fp
 8024ae8:	da5e      	bge.n	8024ba8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8024aea:	f819 3001 	ldrb.w	r3, [r9, r1]
 8024aee:	2204      	movs	r2, #4
 8024af0:	fb12 2303 	smlabb	r3, r2, r3, r2
 8024af4:	f858 2003 	ldr.w	r2, [r8, r3]
 8024af8:	0e15      	lsrs	r5, r2, #24
 8024afa:	d013      	beq.n	8024b24 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8024afc:	2dff      	cmp	r5, #255	; 0xff
 8024afe:	ea4f 2412 	mov.w	r4, r2, lsr #8
 8024b02:	d111      	bne.n	8024b28 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8024b04:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8024b08:	d10e      	bne.n	8024b28 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8024b0a:	0953      	lsrs	r3, r2, #5
 8024b0c:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 8024b10:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024b14:	f024 0407 	bic.w	r4, r4, #7
 8024b18:	431c      	orrs	r4, r3
 8024b1a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8024b1e:	4314      	orrs	r4, r2
 8024b20:	f820 4011 	strh.w	r4, [r0, r1, lsl #1]
 8024b24:	3101      	adds	r1, #1
 8024b26:	e7de      	b.n	8024ae6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xea>
 8024b28:	fb0a f505 	mul.w	r5, sl, r5
 8024b2c:	1c6b      	adds	r3, r5, #1
 8024b2e:	f830 c011 	ldrh.w	ip, [r0, r1, lsl #1]
 8024b32:	eb03 2325 	add.w	r3, r3, r5, asr #8
 8024b36:	121b      	asrs	r3, r3, #8
 8024b38:	fa1f fe83 	uxth.w	lr, r3
 8024b3c:	ea4f 262c 	mov.w	r6, ip, asr #8
 8024b40:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8024b44:	43db      	mvns	r3, r3
 8024b46:	b2db      	uxtb	r3, r3
 8024b48:	fb15 f50e 	smulbb	r5, r5, lr
 8024b4c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8024b50:	fb06 5603 	mla	r6, r6, r3, r5
 8024b54:	b2d2      	uxtb	r2, r2
 8024b56:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8024b5a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8024b5e:	fa5f fc8c 	uxtb.w	ip, ip
 8024b62:	fb12 f20e 	smulbb	r2, r2, lr
 8024b66:	fb0c 2203 	mla	r2, ip, r3, r2
 8024b6a:	b2e4      	uxtb	r4, r4
 8024b6c:	b2b6      	uxth	r6, r6
 8024b6e:	fb14 f40e 	smulbb	r4, r4, lr
 8024b72:	b292      	uxth	r2, r2
 8024b74:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8024b78:	fb05 4503 	mla	r5, r5, r3, r4
 8024b7c:	1c73      	adds	r3, r6, #1
 8024b7e:	1c54      	adds	r4, r2, #1
 8024b80:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8024b84:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8024b88:	b2ad      	uxth	r5, r5
 8024b8a:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8024b8e:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8024b92:	4326      	orrs	r6, r4
 8024b94:	1c6c      	adds	r4, r5, #1
 8024b96:	eb04 2415 	add.w	r4, r4, r5, lsr #8
 8024b9a:	0964      	lsrs	r4, r4, #5
 8024b9c:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8024ba0:	4326      	orrs	r6, r4
 8024ba2:	f820 6011 	strh.w	r6, [r0, r1, lsl #1]
 8024ba6:	e7bd      	b.n	8024b24 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8024ba8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024baa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024bac:	881b      	ldrh	r3, [r3, #0]
 8024bae:	eba3 030b 	sub.w	r3, r3, fp
 8024bb2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024bb6:	4418      	add	r0, r3
 8024bb8:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8024bbc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024bbe:	eba3 030b 	sub.w	r3, r3, fp
 8024bc2:	4413      	add	r3, r2
 8024bc4:	4499      	add	r9, r3
 8024bc6:	3701      	adds	r7, #1
 8024bc8:	e789      	b.n	8024ade <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 8024bca:	4b06      	ldr	r3, [pc, #24]	; (8024be4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 8024bcc:	6818      	ldr	r0, [r3, #0]
 8024bce:	6803      	ldr	r3, [r0, #0]
 8024bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024bd2:	4798      	blx	r3
 8024bd4:	e76d      	b.n	8024ab2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb6>
 8024bd6:	bf00      	nop
 8024bd8:	0803415a 	.word	0x0803415a
 8024bdc:	0803483e 	.word	0x0803483e
 8024be0:	0803425c 	.word	0x0803425c
 8024be4:	200128a4 	.word	0x200128a4
 8024be8:	2001289e 	.word	0x2001289e

08024bec <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 8024bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024bf0:	4614      	mov	r4, r2
 8024bf2:	880a      	ldrh	r2, [r1, #0]
 8024bf4:	b093      	sub	sp, #76	; 0x4c
 8024bf6:	2a02      	cmp	r2, #2
 8024bf8:	4606      	mov	r6, r0
 8024bfa:	4689      	mov	r9, r1
 8024bfc:	f89d 7070 	ldrb.w	r7, [sp, #112]	; 0x70
 8024c00:	d006      	beq.n	8024c10 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 8024c02:	4b7a      	ldr	r3, [pc, #488]	; (8024dec <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x200>)
 8024c04:	4a7a      	ldr	r2, [pc, #488]	; (8024df0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x204>)
 8024c06:	487b      	ldr	r0, [pc, #492]	; (8024df4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x208>)
 8024c08:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8024c0c:	f009 fb2c 	bl	802e268 <__assert_func>
 8024c10:	2f00      	cmp	r7, #0
 8024c12:	d04b      	beq.n	8024cac <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 8024c14:	6820      	ldr	r0, [r4, #0]
 8024c16:	6861      	ldr	r1, [r4, #4]
 8024c18:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 8024dfc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x210>
 8024c1c:	ad0e      	add	r5, sp, #56	; 0x38
 8024c1e:	c503      	stmia	r5!, {r0, r1}
 8024c20:	6818      	ldr	r0, [r3, #0]
 8024c22:	6859      	ldr	r1, [r3, #4]
 8024c24:	ad10      	add	r5, sp, #64	; 0x40
 8024c26:	c503      	stmia	r5!, {r0, r1}
 8024c28:	a80e      	add	r0, sp, #56	; 0x38
 8024c2a:	f7fa f8d1 	bl	801edd0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024c2e:	4621      	mov	r1, r4
 8024c30:	a810      	add	r0, sp, #64	; 0x40
 8024c32:	f7fa f8b5 	bl	801eda0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024c36:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8024c3a:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8024c3e:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8024c42:	f8da 0000 	ldr.w	r0, [sl]
 8024c46:	f9bd 5044 	ldrsh.w	r5, [sp, #68]	; 0x44
 8024c4a:	f9bd 8046 	ldrsh.w	r8, [sp, #70]	; 0x46
 8024c4e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8024c52:	1874      	adds	r4, r6, r1
 8024c54:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8024c58:	4e67      	ldr	r6, [pc, #412]	; (8024df8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x20c>)
 8024c5a:	440a      	add	r2, r1
 8024c5c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8024c60:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8024c64:	4413      	add	r3, r2
 8024c66:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8024c6a:	6803      	ldr	r3, [r0, #0]
 8024c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8024c70:	4798      	blx	r3
 8024c72:	2801      	cmp	r0, #1
 8024c74:	d11d      	bne.n	8024cb2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc6>
 8024c76:	2200      	movs	r2, #0
 8024c78:	210b      	movs	r1, #11
 8024c7a:	e9cd 1207 	strd	r1, r2, [sp, #28]
 8024c7e:	8831      	ldrh	r1, [r6, #0]
 8024c80:	9704      	str	r7, [sp, #16]
 8024c82:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8024c86:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8024c8a:	9203      	str	r2, [sp, #12]
 8024c8c:	fa1f f288 	uxth.w	r2, r8
 8024c90:	9202      	str	r2, [sp, #8]
 8024c92:	b2ad      	uxth	r5, r5
 8024c94:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8024c98:	9200      	str	r2, [sp, #0]
 8024c9a:	9501      	str	r5, [sp, #4]
 8024c9c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8024ca0:	f8da 0000 	ldr.w	r0, [sl]
 8024ca4:	464a      	mov	r2, r9
 8024ca6:	4621      	mov	r1, r4
 8024ca8:	f7f8 f8f6 	bl	801ce98 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8024cac:	b013      	add	sp, #76	; 0x4c
 8024cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024cb2:	f8da 0000 	ldr.w	r0, [sl]
 8024cb6:	6803      	ldr	r3, [r0, #0]
 8024cb8:	6a1b      	ldr	r3, [r3, #32]
 8024cba:	4798      	blx	r3
 8024cbc:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8024cc0:	8833      	ldrh	r3, [r6, #0]
 8024cc2:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8024cc6:	fb01 2303 	mla	r3, r1, r3, r2
 8024cca:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8024cce:	2fff      	cmp	r7, #255	; 0xff
 8024cd0:	f109 0304 	add.w	r3, r9, #4
 8024cd4:	930a      	str	r3, [sp, #40]	; 0x28
 8024cd6:	ea25 72e5 	bic.w	r2, r5, r5, asr #31
 8024cda:	d111      	bne.n	8024d00 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x114>
 8024cdc:	b212      	sxth	r2, r2
 8024cde:	ea4f 0e42 	mov.w	lr, r2, lsl #1
 8024ce2:	2100      	movs	r1, #0
 8024ce4:	4541      	cmp	r1, r8
 8024ce6:	da7a      	bge.n	8024dde <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f2>
 8024ce8:	2300      	movs	r3, #0
 8024cea:	42ab      	cmp	r3, r5
 8024cec:	da6b      	bge.n	8024dc6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1da>
 8024cee:	f814 c003 	ldrb.w	ip, [r4, r3]
 8024cf2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8024cf4:	f837 c01c 	ldrh.w	ip, [r7, ip, lsl #1]
 8024cf8:	f820 c013 	strh.w	ip, [r0, r3, lsl #1]
 8024cfc:	3301      	adds	r3, #1
 8024cfe:	e7f4      	b.n	8024cea <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xfe>
 8024d00:	b213      	sxth	r3, r2
 8024d02:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 8024d06:	930b      	str	r3, [sp, #44]	; 0x2c
 8024d08:	005b      	lsls	r3, r3, #1
 8024d0a:	930c      	str	r3, [sp, #48]	; 0x30
 8024d0c:	f04f 0900 	mov.w	r9, #0
 8024d10:	b2ba      	uxth	r2, r7
 8024d12:	fa1f fc8c 	uxth.w	ip, ip
 8024d16:	960d      	str	r6, [sp, #52]	; 0x34
 8024d18:	45c1      	cmp	r9, r8
 8024d1a:	da60      	bge.n	8024dde <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f2>
 8024d1c:	46a3      	mov	fp, r4
 8024d1e:	4682      	mov	sl, r0
 8024d20:	ebab 0304 	sub.w	r3, fp, r4
 8024d24:	429d      	cmp	r5, r3
 8024d26:	dd3e      	ble.n	8024da6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ba>
 8024d28:	f81b 3b01 	ldrb.w	r3, [fp], #1
 8024d2c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8024d2e:	f8ba 1000 	ldrh.w	r1, [sl]
 8024d32:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024d36:	120e      	asrs	r6, r1, #8
 8024d38:	121f      	asrs	r7, r3, #8
 8024d3a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8024d3e:	fb16 f60c 	smulbb	r6, r6, ip
 8024d42:	ea4f 0ee1 	mov.w	lr, r1, asr #3
 8024d46:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8024d4a:	00c9      	lsls	r1, r1, #3
 8024d4c:	fb07 6702 	mla	r7, r7, r2, r6
 8024d50:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8024d54:	10de      	asrs	r6, r3, #3
 8024d56:	b2c9      	uxtb	r1, r1
 8024d58:	00db      	lsls	r3, r3, #3
 8024d5a:	fb1e fe0c 	smulbb	lr, lr, ip
 8024d5e:	fb11 f10c 	smulbb	r1, r1, ip
 8024d62:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8024d66:	b2db      	uxtb	r3, r3
 8024d68:	b2bf      	uxth	r7, r7
 8024d6a:	fb06 e602 	mla	r6, r6, r2, lr
 8024d6e:	fb03 1302 	mla	r3, r3, r2, r1
 8024d72:	b2b6      	uxth	r6, r6
 8024d74:	b29b      	uxth	r3, r3
 8024d76:	1c79      	adds	r1, r7, #1
 8024d78:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8024d7c:	f106 0e01 	add.w	lr, r6, #1
 8024d80:	1c59      	adds	r1, r3, #1
 8024d82:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8024d86:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 8024d8a:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8024d8e:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8024d92:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8024d96:	430f      	orrs	r7, r1
 8024d98:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8024d9c:	ea47 070e 	orr.w	r7, r7, lr
 8024da0:	f82a 7b02 	strh.w	r7, [sl], #2
 8024da4:	e7bc      	b.n	8024d20 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x134>
 8024da6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024da8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8024daa:	881b      	ldrh	r3, [r3, #0]
 8024dac:	1b5b      	subs	r3, r3, r5
 8024dae:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8024db2:	4418      	add	r0, r3
 8024db4:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8024db8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8024dba:	1b5b      	subs	r3, r3, r5
 8024dbc:	440b      	add	r3, r1
 8024dbe:	441c      	add	r4, r3
 8024dc0:	f109 0901 	add.w	r9, r9, #1
 8024dc4:	e7a8      	b.n	8024d18 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x12c>
 8024dc6:	8833      	ldrh	r3, [r6, #0]
 8024dc8:	1b5b      	subs	r3, r3, r5
 8024dca:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8024dce:	4418      	add	r0, r3
 8024dd0:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8024dd4:	1b5b      	subs	r3, r3, r5
 8024dd6:	4413      	add	r3, r2
 8024dd8:	441c      	add	r4, r3
 8024dda:	3101      	adds	r1, #1
 8024ddc:	e782      	b.n	8024ce4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xf8>
 8024dde:	4b07      	ldr	r3, [pc, #28]	; (8024dfc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x210>)
 8024de0:	6818      	ldr	r0, [r3, #0]
 8024de2:	6803      	ldr	r3, [r0, #0]
 8024de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024de6:	4798      	blx	r3
 8024de8:	e760      	b.n	8024cac <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 8024dea:	bf00      	nop
 8024dec:	08034018 	.word	0x08034018
 8024df0:	080346a8 	.word	0x080346a8
 8024df4:	0803425c 	.word	0x0803425c
 8024df8:	2001289e 	.word	0x2001289e
 8024dfc:	200128a4 	.word	0x200128a4

08024e00 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8024e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024e04:	4616      	mov	r6, r2
 8024e06:	880a      	ldrh	r2, [r1, #0]
 8024e08:	b093      	sub	sp, #76	; 0x4c
 8024e0a:	2a01      	cmp	r2, #1
 8024e0c:	4681      	mov	r9, r0
 8024e0e:	4688      	mov	r8, r1
 8024e10:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 8024e14:	d006      	beq.n	8024e24 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x24>
 8024e16:	4b6c      	ldr	r3, [pc, #432]	; (8024fc8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8024e18:	4a6c      	ldr	r2, [pc, #432]	; (8024fcc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 8024e1a:	486d      	ldr	r0, [pc, #436]	; (8024fd0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 8024e1c:	f240 119d 	movw	r1, #413	; 0x19d
 8024e20:	f009 fa22 	bl	802e268 <__assert_func>
 8024e24:	f1ba 0f00 	cmp.w	sl, #0
 8024e28:	d04a      	beq.n	8024ec0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 8024e2a:	6830      	ldr	r0, [r6, #0]
 8024e2c:	6871      	ldr	r1, [r6, #4]
 8024e2e:	4d69      	ldr	r5, [pc, #420]	; (8024fd4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 8024e30:	ac0e      	add	r4, sp, #56	; 0x38
 8024e32:	c403      	stmia	r4!, {r0, r1}
 8024e34:	6818      	ldr	r0, [r3, #0]
 8024e36:	6859      	ldr	r1, [r3, #4]
 8024e38:	ac10      	add	r4, sp, #64	; 0x40
 8024e3a:	c403      	stmia	r4!, {r0, r1}
 8024e3c:	a80e      	add	r0, sp, #56	; 0x38
 8024e3e:	f7f9 ffc7 	bl	801edd0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024e42:	4631      	mov	r1, r6
 8024e44:	a810      	add	r0, sp, #64	; 0x40
 8024e46:	f7f9 ffab 	bl	801eda0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024e4a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8024e4e:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8024e52:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8024e56:	6828      	ldr	r0, [r5, #0]
 8024e58:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 8024e5c:	4c5e      	ldr	r4, [pc, #376]	; (8024fd8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 8024e5e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8024e62:	4489      	add	r9, r1
 8024e64:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8024e68:	440a      	add	r2, r1
 8024e6a:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8024e6e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8024e72:	4413      	add	r3, r2
 8024e74:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8024e78:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 8024e7c:	930a      	str	r3, [sp, #40]	; 0x28
 8024e7e:	6803      	ldr	r3, [r0, #0]
 8024e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8024e84:	4798      	blx	r3
 8024e86:	2801      	cmp	r0, #1
 8024e88:	d11d      	bne.n	8024ec6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc6>
 8024e8a:	220b      	movs	r2, #11
 8024e8c:	2100      	movs	r1, #0
 8024e8e:	e9cd 2107 	strd	r2, r1, [sp, #28]
 8024e92:	8822      	ldrh	r2, [r4, #0]
 8024e94:	f8cd a010 	str.w	sl, [sp, #16]
 8024e98:	e9cd 0205 	strd	r0, r2, [sp, #20]
 8024e9c:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8024ea0:	9203      	str	r2, [sp, #12]
 8024ea2:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8024ea6:	9202      	str	r2, [sp, #8]
 8024ea8:	b2b6      	uxth	r6, r6
 8024eaa:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8024eae:	9200      	str	r2, [sp, #0]
 8024eb0:	9601      	str	r6, [sp, #4]
 8024eb2:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8024eb6:	6828      	ldr	r0, [r5, #0]
 8024eb8:	4642      	mov	r2, r8
 8024eba:	4649      	mov	r1, r9
 8024ebc:	f7f7 ffec 	bl	801ce98 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8024ec0:	b013      	add	sp, #76	; 0x4c
 8024ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024ec6:	6828      	ldr	r0, [r5, #0]
 8024ec8:	6803      	ldr	r3, [r0, #0]
 8024eca:	6a1b      	ldr	r3, [r3, #32]
 8024ecc:	4798      	blx	r3
 8024ece:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8024ed2:	8823      	ldrh	r3, [r4, #0]
 8024ed4:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8024ed8:	940d      	str	r4, [sp, #52]	; 0x34
 8024eda:	fb01 2303 	mla	r3, r1, r3, r2
 8024ede:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8024ee2:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 8024ee6:	930b      	str	r3, [sp, #44]	; 0x2c
 8024ee8:	ea6f 010a 	mvn.w	r1, sl
 8024eec:	005b      	lsls	r3, r3, #1
 8024eee:	930c      	str	r3, [sp, #48]	; 0x30
 8024ef0:	f04f 0e00 	mov.w	lr, #0
 8024ef4:	b2c9      	uxtb	r1, r1
 8024ef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024ef8:	459e      	cmp	lr, r3
 8024efa:	da5f      	bge.n	8024fbc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 8024efc:	2700      	movs	r7, #0
 8024efe:	fa1f fb8a 	uxth.w	fp, sl
 8024f02:	42b7      	cmp	r7, r6
 8024f04:	da4a      	bge.n	8024f9c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19c>
 8024f06:	f819 3007 	ldrb.w	r3, [r9, r7]
 8024f0a:	2203      	movs	r2, #3
 8024f0c:	2404      	movs	r4, #4
 8024f0e:	fb12 4303 	smlabb	r3, r2, r3, r4
 8024f12:	eb08 0403 	add.w	r4, r8, r3
 8024f16:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8024f1a:	78a2      	ldrb	r2, [r4, #2]
 8024f1c:	7865      	ldrb	r5, [r4, #1]
 8024f1e:	f818 c003 	ldrb.w	ip, [r8, r3]
 8024f22:	d10c      	bne.n	8024f3e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x13e>
 8024f24:	4b2d      	ldr	r3, [pc, #180]	; (8024fdc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 8024f26:	00ed      	lsls	r5, r5, #3
 8024f28:	ea03 2202 	and.w	r2, r3, r2, lsl #8
 8024f2c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8024f30:	432a      	orrs	r2, r5
 8024f32:	ea42 02dc 	orr.w	r2, r2, ip, lsr #3
 8024f36:	f820 2017 	strh.w	r2, [r0, r7, lsl #1]
 8024f3a:	3701      	adds	r7, #1
 8024f3c:	e7e1      	b.n	8024f02 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x102>
 8024f3e:	f830 3017 	ldrh.w	r3, [r0, r7, lsl #1]
 8024f42:	121c      	asrs	r4, r3, #8
 8024f44:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8024f48:	fb12 f20b 	smulbb	r2, r2, fp
 8024f4c:	fb04 2201 	mla	r2, r4, r1, r2
 8024f50:	10dc      	asrs	r4, r3, #3
 8024f52:	00db      	lsls	r3, r3, #3
 8024f54:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8024f58:	b2db      	uxtb	r3, r3
 8024f5a:	fb15 f50b 	smulbb	r5, r5, fp
 8024f5e:	fb1c fc0b 	smulbb	ip, ip, fp
 8024f62:	b292      	uxth	r2, r2
 8024f64:	fb04 5501 	mla	r5, r4, r1, r5
 8024f68:	fb03 cc01 	mla	ip, r3, r1, ip
 8024f6c:	b2ad      	uxth	r5, r5
 8024f6e:	fa1f fc8c 	uxth.w	ip, ip
 8024f72:	1c53      	adds	r3, r2, #1
 8024f74:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8024f78:	1c6c      	adds	r4, r5, #1
 8024f7a:	f10c 0301 	add.w	r3, ip, #1
 8024f7e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8024f82:	eb04 2515 	add.w	r5, r4, r5, lsr #8
 8024f86:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8024f8a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8024f8e:	096d      	lsrs	r5, r5, #5
 8024f90:	ea42 020c 	orr.w	r2, r2, ip
 8024f94:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8024f98:	432a      	orrs	r2, r5
 8024f9a:	e7cc      	b.n	8024f36 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x136>
 8024f9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024f9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024fa0:	881b      	ldrh	r3, [r3, #0]
 8024fa2:	1b9b      	subs	r3, r3, r6
 8024fa4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024fa8:	4418      	add	r0, r3
 8024faa:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8024fae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024fb0:	1b9b      	subs	r3, r3, r6
 8024fb2:	4413      	add	r3, r2
 8024fb4:	4499      	add	r9, r3
 8024fb6:	f10e 0e01 	add.w	lr, lr, #1
 8024fba:	e79c      	b.n	8024ef6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf6>
 8024fbc:	4b05      	ldr	r3, [pc, #20]	; (8024fd4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 8024fbe:	6818      	ldr	r0, [r3, #0]
 8024fc0:	6803      	ldr	r3, [r0, #0]
 8024fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024fc4:	4798      	blx	r3
 8024fc6:	e77b      	b.n	8024ec0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 8024fc8:	08034066 	.word	0x08034066
 8024fcc:	08034731 	.word	0x08034731
 8024fd0:	0803425c 	.word	0x0803425c
 8024fd4:	200128a4 	.word	0x200128a4
 8024fd8:	2001289e 	.word	0x2001289e
 8024fdc:	fffff800 	.word	0xfffff800

08024fe0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8024fe0:	b430      	push	{r4, r5}
 8024fe2:	780d      	ldrb	r5, [r1, #0]
 8024fe4:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8024fe8:	2d01      	cmp	r5, #1
 8024fea:	d00a      	beq.n	8025002 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 8024fec:	d305      	bcc.n	8024ffa <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8024fee:	2d02      	cmp	r5, #2
 8024ff0:	d10b      	bne.n	802500a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 8024ff2:	9402      	str	r4, [sp, #8]
 8024ff4:	bc30      	pop	{r4, r5}
 8024ff6:	f7ff bdf9 	b.w	8024bec <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 8024ffa:	9402      	str	r4, [sp, #8]
 8024ffc:	bc30      	pop	{r4, r5}
 8024ffe:	f7ff bcfd 	b.w	80249fc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8025002:	9402      	str	r4, [sp, #8]
 8025004:	bc30      	pop	{r4, r5}
 8025006:	f7ff befb 	b.w	8024e00 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 802500a:	bc30      	pop	{r4, r5}
 802500c:	4770      	bx	lr
	...

08025010 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8025010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025014:	4605      	mov	r5, r0
 8025016:	b089      	sub	sp, #36	; 0x24
 8025018:	6810      	ldr	r0, [r2, #0]
 802501a:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
 802501e:	460c      	mov	r4, r1
 8025020:	6851      	ldr	r1, [r2, #4]
 8025022:	ae04      	add	r6, sp, #16
 8025024:	c603      	stmia	r6!, {r0, r1}
 8025026:	6818      	ldr	r0, [r3, #0]
 8025028:	6859      	ldr	r1, [r3, #4]
 802502a:	ae06      	add	r6, sp, #24
 802502c:	4617      	mov	r7, r2
 802502e:	c603      	stmia	r6!, {r0, r1}
 8025030:	a804      	add	r0, sp, #16
 8025032:	f7f9 fecd 	bl	801edd0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8025036:	4639      	mov	r1, r7
 8025038:	a806      	add	r0, sp, #24
 802503a:	f7f9 feb1 	bl	801eda0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802503e:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8025042:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8025046:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 802504a:	f9bd 801c 	ldrsh.w	r8, [sp, #28]
 802504e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8025052:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 8025056:	440c      	add	r4, r1
 8025058:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 802505c:	440a      	add	r2, r1
 802505e:	f8ad 2018 	strh.w	r2, [sp, #24]
 8025062:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8025066:	4413      	add	r3, r2
 8025068:	f8ad 301a 	strh.w	r3, [sp, #26]
 802506c:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8025070:	9300      	str	r3, [sp, #0]
 8025072:	4b80      	ldr	r3, [pc, #512]	; (8025274 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x264>)
 8025074:	6818      	ldr	r0, [r3, #0]
 8025076:	6803      	ldr	r3, [r0, #0]
 8025078:	6a1b      	ldr	r3, [r3, #32]
 802507a:	4798      	blx	r3
 802507c:	4b7e      	ldr	r3, [pc, #504]	; (8025278 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x268>)
 802507e:	f9bd 601a 	ldrsh.w	r6, [sp, #26]
 8025082:	881a      	ldrh	r2, [r3, #0]
 8025084:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8025088:	fb06 1202 	mla	r2, r6, r2, r1
 802508c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8025090:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025094:	ea28 72e8 	bic.w	r2, r8, r8, asr #31
 8025098:	b212      	sxth	r2, r2
 802509a:	d117      	bne.n	80250cc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xbc>
 802509c:	9201      	str	r2, [sp, #4]
 802509e:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 80250a2:	f04f 0a00 	mov.w	sl, #0
 80250a6:	9302      	str	r3, [sp, #8]
 80250a8:	9b00      	ldr	r3, [sp, #0]
 80250aa:	459a      	cmp	sl, r3
 80250ac:	f280 80d9 	bge.w	8025262 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x252>
 80250b0:	2100      	movs	r1, #0
 80250b2:	4541      	cmp	r1, r8
 80250b4:	f280 80c1 	bge.w	802523a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x22a>
 80250b8:	5c63      	ldrb	r3, [r4, r1]
 80250ba:	b12b      	cbz	r3, 80250c8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xb8>
 80250bc:	2bff      	cmp	r3, #255	; 0xff
 80250be:	f835 e011 	ldrh.w	lr, [r5, r1, lsl #1]
 80250c2:	d176      	bne.n	80251b2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1a2>
 80250c4:	f820 e011 	strh.w	lr, [r0, r1, lsl #1]
 80250c8:	3101      	adds	r1, #1
 80250ca:	e7f2      	b.n	80250b2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa2>
 80250cc:	9202      	str	r2, [sp, #8]
 80250ce:	0052      	lsls	r2, r2, #1
 80250d0:	9201      	str	r2, [sp, #4]
 80250d2:	f04f 0b00 	mov.w	fp, #0
 80250d6:	9303      	str	r3, [sp, #12]
 80250d8:	9b00      	ldr	r3, [sp, #0]
 80250da:	459b      	cmp	fp, r3
 80250dc:	f280 80c1 	bge.w	8025262 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x252>
 80250e0:	f04f 0c00 	mov.w	ip, #0
 80250e4:	45c4      	cmp	ip, r8
 80250e6:	da4f      	bge.n	8025188 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x178>
 80250e8:	f814 300c 	ldrb.w	r3, [r4, ip]
 80250ec:	2b00      	cmp	r3, #0
 80250ee:	d048      	beq.n	8025182 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x172>
 80250f0:	fb09 f303 	mul.w	r3, r9, r3
 80250f4:	1c5a      	adds	r2, r3, #1
 80250f6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80250fa:	121b      	asrs	r3, r3, #8
 80250fc:	d041      	beq.n	8025182 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x172>
 80250fe:	f830 201c 	ldrh.w	r2, [r0, ip, lsl #1]
 8025102:	f835 e01c 	ldrh.w	lr, [r5, ip, lsl #1]
 8025106:	b29e      	uxth	r6, r3
 8025108:	1211      	asrs	r1, r2, #8
 802510a:	43db      	mvns	r3, r3
 802510c:	b2db      	uxtb	r3, r3
 802510e:	ea4f 272e 	mov.w	r7, lr, asr #8
 8025112:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8025116:	fb11 f103 	smulbb	r1, r1, r3
 802511a:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 802511e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8025122:	00d2      	lsls	r2, r2, #3
 8025124:	fb07 1706 	mla	r7, r7, r6, r1
 8025128:	b2d2      	uxtb	r2, r2
 802512a:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802512e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8025132:	fb12 f203 	smulbb	r2, r2, r3
 8025136:	fa5f fe8e 	uxtb.w	lr, lr
 802513a:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 802513e:	fb0e 2206 	mla	r2, lr, r6, r2
 8025142:	fb1a fa03 	smulbb	sl, sl, r3
 8025146:	b2bf      	uxth	r7, r7
 8025148:	b292      	uxth	r2, r2
 802514a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802514e:	fb01 a106 	mla	r1, r1, r6, sl
 8025152:	1c7b      	adds	r3, r7, #1
 8025154:	f102 0a01 	add.w	sl, r2, #1
 8025158:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 802515c:	eb0a 2a12 	add.w	sl, sl, r2, lsr #8
 8025160:	b289      	uxth	r1, r1
 8025162:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8025166:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 802516a:	ea47 070a 	orr.w	r7, r7, sl
 802516e:	f101 0a01 	add.w	sl, r1, #1
 8025172:	eb0a 2111 	add.w	r1, sl, r1, lsr #8
 8025176:	0949      	lsrs	r1, r1, #5
 8025178:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802517c:	430f      	orrs	r7, r1
 802517e:	f820 701c 	strh.w	r7, [r0, ip, lsl #1]
 8025182:	f10c 0c01 	add.w	ip, ip, #1
 8025186:	e7ad      	b.n	80250e4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xd4>
 8025188:	9b03      	ldr	r3, [sp, #12]
 802518a:	9a01      	ldr	r2, [sp, #4]
 802518c:	881b      	ldrh	r3, [r3, #0]
 802518e:	eba3 0308 	sub.w	r3, r3, r8
 8025192:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025196:	4418      	add	r0, r3
 8025198:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 802519c:	eba3 0308 	sub.w	r3, r3, r8
 80251a0:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80251a4:	4415      	add	r5, r2
 80251a6:	9a02      	ldr	r2, [sp, #8]
 80251a8:	4413      	add	r3, r2
 80251aa:	441c      	add	r4, r3
 80251ac:	f10b 0b01 	add.w	fp, fp, #1
 80251b0:	e792      	b.n	80250d8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xc8>
 80251b2:	f830 2011 	ldrh.w	r2, [r0, r1, lsl #1]
 80251b6:	b29f      	uxth	r7, r3
 80251b8:	1216      	asrs	r6, r2, #8
 80251ba:	43db      	mvns	r3, r3
 80251bc:	b2db      	uxtb	r3, r3
 80251be:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80251c2:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80251c6:	fb16 f603 	smulbb	r6, r6, r3
 80251ca:	ea4f 09e2 	mov.w	r9, r2, asr #3
 80251ce:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80251d2:	00d2      	lsls	r2, r2, #3
 80251d4:	fb0c 6c07 	mla	ip, ip, r7, r6
 80251d8:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80251dc:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80251e0:	b2d2      	uxtb	r2, r2
 80251e2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80251e6:	fa1f fc8c 	uxth.w	ip, ip
 80251ea:	fb19 f903 	smulbb	r9, r9, r3
 80251ee:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80251f2:	fa5f fe8e 	uxtb.w	lr, lr
 80251f6:	fb12 f203 	smulbb	r2, r2, r3
 80251fa:	fb06 9607 	mla	r6, r6, r7, r9
 80251fe:	fb0e 2207 	mla	r2, lr, r7, r2
 8025202:	f10c 0901 	add.w	r9, ip, #1
 8025206:	b292      	uxth	r2, r2
 8025208:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 802520c:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 8025210:	f102 0c01 	add.w	ip, r2, #1
 8025214:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8025218:	b2b6      	uxth	r6, r6
 802521a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802521e:	ea49 0c02 	orr.w	ip, r9, r2
 8025222:	f106 0901 	add.w	r9, r6, #1
 8025226:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 802522a:	0976      	lsrs	r6, r6, #5
 802522c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8025230:	ea4c 0c06 	orr.w	ip, ip, r6
 8025234:	f820 c011 	strh.w	ip, [r0, r1, lsl #1]
 8025238:	e746      	b.n	80250c8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xb8>
 802523a:	9b02      	ldr	r3, [sp, #8]
 802523c:	881b      	ldrh	r3, [r3, #0]
 802523e:	eba3 0308 	sub.w	r3, r3, r8
 8025242:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 8025246:	4418      	add	r0, r3
 8025248:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 802524c:	eba3 0308 	sub.w	r3, r3, r8
 8025250:	eb0b 0243 	add.w	r2, fp, r3, lsl #1
 8025254:	4415      	add	r5, r2
 8025256:	9a01      	ldr	r2, [sp, #4]
 8025258:	4413      	add	r3, r2
 802525a:	441c      	add	r4, r3
 802525c:	f10a 0a01 	add.w	sl, sl, #1
 8025260:	e722      	b.n	80250a8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x98>
 8025262:	4b04      	ldr	r3, [pc, #16]	; (8025274 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x264>)
 8025264:	6818      	ldr	r0, [r3, #0]
 8025266:	6803      	ldr	r3, [r0, #0]
 8025268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802526a:	4798      	blx	r3
 802526c:	b009      	add	sp, #36	; 0x24
 802526e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025272:	bf00      	nop
 8025274:	200128a4 	.word	0x200128a4
 8025278:	2001289e 	.word	0x2001289e

0802527c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 802527c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025280:	b089      	sub	sp, #36	; 0x24
 8025282:	4682      	mov	sl, r0
 8025284:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8025288:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802528a:	460d      	mov	r5, r1
 802528c:	4691      	mov	r9, r2
 802528e:	4698      	mov	r8, r3
 8025290:	b3ae      	cbz	r6, 80252fe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8025292:	4608      	mov	r0, r1
 8025294:	f7fc faa0 	bl	80217d8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8025298:	4607      	mov	r7, r0
 802529a:	4628      	mov	r0, r5
 802529c:	f7fc fad6 	bl	802184c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80252a0:	f8ad 000e 	strh.w	r0, [sp, #14]
 80252a4:	4628      	mov	r0, r5
 80252a6:	f8ad 9008 	strh.w	r9, [sp, #8]
 80252aa:	f8ad 800a 	strh.w	r8, [sp, #10]
 80252ae:	f8ad 700c 	strh.w	r7, [sp, #12]
 80252b2:	f7fc fc1d 	bl	8021af0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80252b6:	b178      	cbz	r0, 80252d8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80252b8:	4628      	mov	r0, r5
 80252ba:	f7fc fc19 	bl	8021af0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80252be:	2802      	cmp	r0, #2
 80252c0:	d00a      	beq.n	80252d8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80252c2:	4628      	mov	r0, r5
 80252c4:	f7fc fc14 	bl	8021af0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80252c8:	280b      	cmp	r0, #11
 80252ca:	d005      	beq.n	80252d8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80252cc:	4b69      	ldr	r3, [pc, #420]	; (8025474 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1f8>)
 80252ce:	4a6a      	ldr	r2, [pc, #424]	; (8025478 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fc>)
 80252d0:	486a      	ldr	r0, [pc, #424]	; (802547c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x200>)
 80252d2:	214b      	movs	r1, #75	; 0x4b
 80252d4:	f008 ffc8 	bl	802e268 <__assert_func>
 80252d8:	4628      	mov	r0, r5
 80252da:	f7fc fb85 	bl	80219e8 <_ZNK8touchgfx6Bitmap7getDataEv>
 80252de:	4607      	mov	r7, r0
 80252e0:	4628      	mov	r0, r5
 80252e2:	f7fc fbb3 	bl	8021a4c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80252e6:	4681      	mov	r9, r0
 80252e8:	4628      	mov	r0, r5
 80252ea:	f7fc fc01 	bl	8021af0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80252ee:	2802      	cmp	r0, #2
 80252f0:	d108      	bne.n	8025304 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 80252f2:	4633      	mov	r3, r6
 80252f4:	4622      	mov	r2, r4
 80252f6:	a902      	add	r1, sp, #8
 80252f8:	4638      	mov	r0, r7
 80252fa:	f7ff fa6d 	bl	80247d8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80252fe:	b009      	add	sp, #36	; 0x24
 8025300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025304:	4628      	mov	r0, r5
 8025306:	f7fc fbf3 	bl	8021af0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 802530a:	280b      	cmp	r0, #11
 802530c:	d107      	bne.n	802531e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 802530e:	9600      	str	r6, [sp, #0]
 8025310:	4623      	mov	r3, r4
 8025312:	aa02      	add	r2, sp, #8
 8025314:	4649      	mov	r1, r9
 8025316:	4638      	mov	r0, r7
 8025318:	f7ff fe62 	bl	8024fe0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 802531c:	e7ef      	b.n	80252fe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 802531e:	4628      	mov	r0, r5
 8025320:	f7fc fb28 	bl	8021974 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8025324:	b950      	cbnz	r0, 802533c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 8025326:	e9cd 6000 	strd	r6, r0, [sp]
 802532a:	f8da 3000 	ldr.w	r3, [sl]
 802532e:	aa02      	add	r2, sp, #8
 8025330:	68dd      	ldr	r5, [r3, #12]
 8025332:	4639      	mov	r1, r7
 8025334:	4623      	mov	r3, r4
 8025336:	4650      	mov	r0, sl
 8025338:	47a8      	blx	r5
 802533a:	e7e0      	b.n	80252fe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 802533c:	f10d 0818 	add.w	r8, sp, #24
 8025340:	4629      	mov	r1, r5
 8025342:	4640      	mov	r0, r8
 8025344:	f7fc fabc 	bl	80218c0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8025348:	e898 0003 	ldmia.w	r8, {r0, r1}
 802534c:	ad04      	add	r5, sp, #16
 802534e:	e885 0003 	stmia.w	r5, {r0, r1}
 8025352:	4628      	mov	r0, r5
 8025354:	4621      	mov	r1, r4
 8025356:	f7f5 fd85 	bl	801ae64 <_ZN8touchgfx4RectaNERKS0_>
 802535a:	4628      	mov	r0, r5
 802535c:	f7f5 fdc5 	bl	801aeea <_ZNK8touchgfx4Rect7isEmptyEv>
 8025360:	b138      	cbz	r0, 8025372 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf6>
 8025362:	9600      	str	r6, [sp, #0]
 8025364:	4623      	mov	r3, r4
 8025366:	aa02      	add	r2, sp, #8
 8025368:	4649      	mov	r1, r9
 802536a:	4638      	mov	r0, r7
 802536c:	f7ff fe50 	bl	8025010 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8025370:	e7c5      	b.n	80252fe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8025372:	e9cd 6000 	strd	r6, r0, [sp]
 8025376:	f8da 3000 	ldr.w	r3, [sl]
 802537a:	aa02      	add	r2, sp, #8
 802537c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8025380:	4639      	mov	r1, r7
 8025382:	462b      	mov	r3, r5
 8025384:	4650      	mov	r0, sl
 8025386:	47d8      	blx	fp
 8025388:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802538c:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8025390:	4293      	cmp	r3, r2
 8025392:	dd13      	ble.n	80253bc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x140>
 8025394:	f9b4 0000 	ldrsh.w	r0, [r4]
 8025398:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802539c:	f8ad 0018 	strh.w	r0, [sp, #24]
 80253a0:	1a9b      	subs	r3, r3, r2
 80253a2:	f8ad 201a 	strh.w	r2, [sp, #26]
 80253a6:	f8ad 101c 	strh.w	r1, [sp, #28]
 80253aa:	f8ad 301e 	strh.w	r3, [sp, #30]
 80253ae:	9600      	str	r6, [sp, #0]
 80253b0:	4643      	mov	r3, r8
 80253b2:	aa02      	add	r2, sp, #8
 80253b4:	4649      	mov	r1, r9
 80253b6:	4638      	mov	r0, r7
 80253b8:	f7ff fe2a 	bl	8025010 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80253bc:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 80253c0:	f9b4 2000 	ldrsh.w	r2, [r4]
 80253c4:	4293      	cmp	r3, r2
 80253c6:	dd13      	ble.n	80253f0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
 80253c8:	1a9b      	subs	r3, r3, r2
 80253ca:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 80253ce:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80253d2:	f8ad 2018 	strh.w	r2, [sp, #24]
 80253d6:	f8ad 001a 	strh.w	r0, [sp, #26]
 80253da:	f8ad 301c 	strh.w	r3, [sp, #28]
 80253de:	f8ad 101e 	strh.w	r1, [sp, #30]
 80253e2:	9600      	str	r6, [sp, #0]
 80253e4:	4643      	mov	r3, r8
 80253e6:	aa02      	add	r2, sp, #8
 80253e8:	4649      	mov	r1, r9
 80253ea:	4638      	mov	r0, r7
 80253ec:	f7ff fe10 	bl	8025010 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80253f0:	88a2      	ldrh	r2, [r4, #4]
 80253f2:	8823      	ldrh	r3, [r4, #0]
 80253f4:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80253f8:	4413      	add	r3, r2
 80253fa:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80253fe:	440a      	add	r2, r1
 8025400:	b29b      	uxth	r3, r3
 8025402:	b292      	uxth	r2, r2
 8025404:	b211      	sxth	r1, r2
 8025406:	b218      	sxth	r0, r3
 8025408:	4288      	cmp	r0, r1
 802540a:	dd13      	ble.n	8025434 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1b8>
 802540c:	1a9b      	subs	r3, r3, r2
 802540e:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8025412:	f9bd 5012 	ldrsh.w	r5, [sp, #18]
 8025416:	f8ad 1018 	strh.w	r1, [sp, #24]
 802541a:	f8ad 301c 	strh.w	r3, [sp, #28]
 802541e:	f8ad 001e 	strh.w	r0, [sp, #30]
 8025422:	9600      	str	r6, [sp, #0]
 8025424:	4643      	mov	r3, r8
 8025426:	aa02      	add	r2, sp, #8
 8025428:	4649      	mov	r1, r9
 802542a:	4638      	mov	r0, r7
 802542c:	f8ad 501a 	strh.w	r5, [sp, #26]
 8025430:	f7ff fdee 	bl	8025010 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8025434:	88e2      	ldrh	r2, [r4, #6]
 8025436:	8863      	ldrh	r3, [r4, #2]
 8025438:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 802543c:	4413      	add	r3, r2
 802543e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8025442:	440a      	add	r2, r1
 8025444:	b29b      	uxth	r3, r3
 8025446:	b292      	uxth	r2, r2
 8025448:	b211      	sxth	r1, r2
 802544a:	b218      	sxth	r0, r3
 802544c:	4288      	cmp	r0, r1
 802544e:	f77f af56 	ble.w	80252fe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8025452:	f9b4 5000 	ldrsh.w	r5, [r4]
 8025456:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 802545a:	f8ad 5018 	strh.w	r5, [sp, #24]
 802545e:	1a9b      	subs	r3, r3, r2
 8025460:	f8ad 301e 	strh.w	r3, [sp, #30]
 8025464:	f8ad 101a 	strh.w	r1, [sp, #26]
 8025468:	f8ad 001c 	strh.w	r0, [sp, #28]
 802546c:	9600      	str	r6, [sp, #0]
 802546e:	4643      	mov	r3, r8
 8025470:	e779      	b.n	8025366 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xea>
 8025472:	bf00      	nop
 8025474:	080340b4 	.word	0x080340b4
 8025478:	080347ba 	.word	0x080347ba
 802547c:	0803425c 	.word	0x0803425c

08025480 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8025480:	b508      	push	{r3, lr}
 8025482:	b180      	cbz	r0, 80254a6 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 8025484:	2902      	cmp	r1, #2
 8025486:	d014      	beq.n	80254b2 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 8025488:	2903      	cmp	r1, #3
 802548a:	d01d      	beq.n	80254c8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 802548c:	2901      	cmp	r1, #1
 802548e:	d101      	bne.n	8025494 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8025490:	2001      	movs	r0, #1
 8025492:	bd08      	pop	{r3, pc}
 8025494:	4b0e      	ldr	r3, [pc, #56]	; (80254d0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8025496:	8818      	ldrh	r0, [r3, #0]
 8025498:	b990      	cbnz	r0, 80254c0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 802549a:	4b0e      	ldr	r3, [pc, #56]	; (80254d4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 802549c:	4a0e      	ldr	r2, [pc, #56]	; (80254d8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 802549e:	480f      	ldr	r0, [pc, #60]	; (80254dc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 80254a0:	2154      	movs	r1, #84	; 0x54
 80254a2:	f008 fee1 	bl	802e268 <__assert_func>
 80254a6:	2902      	cmp	r1, #2
 80254a8:	d00e      	beq.n	80254c8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 80254aa:	2903      	cmp	r1, #3
 80254ac:	d0f2      	beq.n	8025494 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 80254ae:	2901      	cmp	r1, #1
 80254b0:	d1ee      	bne.n	8025490 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 80254b2:	4b07      	ldr	r3, [pc, #28]	; (80254d0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 80254b4:	8818      	ldrh	r0, [r3, #0]
 80254b6:	2800      	cmp	r0, #0
 80254b8:	d0ef      	beq.n	802549a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 80254ba:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80254be:	e7e8      	b.n	8025492 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 80254c0:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80254c4:	4240      	negs	r0, r0
 80254c6:	e7e4      	b.n	8025492 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 80254c8:	f04f 30ff 	mov.w	r0, #4294967295
 80254cc:	e7e1      	b.n	8025492 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 80254ce:	bf00      	nop
 80254d0:	2001289e 	.word	0x2001289e
 80254d4:	080343b6 	.word	0x080343b6
 80254d8:	08034937 	.word	0x08034937
 80254dc:	080343f8 	.word	0x080343f8

080254e0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 80254e0:	b508      	push	{r3, lr}
 80254e2:	b180      	cbz	r0, 8025506 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 80254e4:	2902      	cmp	r1, #2
 80254e6:	d014      	beq.n	8025512 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 80254e8:	2903      	cmp	r1, #3
 80254ea:	d018      	beq.n	802551e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 80254ec:	2901      	cmp	r1, #1
 80254ee:	d001      	beq.n	80254f4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 80254f0:	2001      	movs	r0, #1
 80254f2:	e013      	b.n	802551c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 80254f4:	4b0e      	ldr	r3, [pc, #56]	; (8025530 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 80254f6:	8818      	ldrh	r0, [r3, #0]
 80254f8:	b970      	cbnz	r0, 8025518 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 80254fa:	4b0e      	ldr	r3, [pc, #56]	; (8025534 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 80254fc:	4a0e      	ldr	r2, [pc, #56]	; (8025538 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 80254fe:	480f      	ldr	r0, [pc, #60]	; (802553c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 8025500:	2154      	movs	r1, #84	; 0x54
 8025502:	f008 feb1 	bl	802e268 <__assert_func>
 8025506:	2902      	cmp	r1, #2
 8025508:	d009      	beq.n	802551e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 802550a:	2903      	cmp	r1, #3
 802550c:	d0f0      	beq.n	80254f0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 802550e:	2901      	cmp	r1, #1
 8025510:	d1f0      	bne.n	80254f4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8025512:	f04f 30ff 	mov.w	r0, #4294967295
 8025516:	e001      	b.n	802551c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8025518:	f3c0 000e 	ubfx	r0, r0, #0, #15
 802551c:	bd08      	pop	{r3, pc}
 802551e:	4b04      	ldr	r3, [pc, #16]	; (8025530 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8025520:	8818      	ldrh	r0, [r3, #0]
 8025522:	2800      	cmp	r0, #0
 8025524:	d0e9      	beq.n	80254fa <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 8025526:	f3c0 000e 	ubfx	r0, r0, #0, #15
 802552a:	4240      	negs	r0, r0
 802552c:	e7f6      	b.n	802551c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 802552e:	bf00      	nop
 8025530:	2001289e 	.word	0x2001289e
 8025534:	080343b6 	.word	0x080343b6
 8025538:	08034937 	.word	0x08034937
 802553c:	080343f8 	.word	0x080343f8

08025540 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8025540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025544:	b097      	sub	sp, #92	; 0x5c
 8025546:	910a      	str	r1, [sp, #40]	; 0x28
 8025548:	a912      	add	r1, sp, #72	; 0x48
 802554a:	e881 000c 	stmia.w	r1, {r2, r3}
 802554e:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 8025552:	9307      	str	r3, [sp, #28]
 8025554:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 8025558:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 802555c:	930f      	str	r3, [sp, #60]	; 0x3c
 802555e:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 8025562:	930b      	str	r3, [sp, #44]	; 0x2c
 8025564:	7b4b      	ldrb	r3, [r1, #13]
 8025566:	798d      	ldrb	r5, [r1, #6]
 8025568:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 802556c:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 8025570:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 8025574:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 8025578:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 802557c:	0158      	lsls	r0, r3, #5
 802557e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8025582:	4328      	orrs	r0, r5
 8025584:	9006      	str	r0, [sp, #24]
 8025586:	f000 8156 	beq.w	8025836 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f6>
 802558a:	011b      	lsls	r3, r3, #4
 802558c:	79c8      	ldrb	r0, [r1, #7]
 802558e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8025592:	4303      	orrs	r3, r0
 8025594:	9308      	str	r3, [sp, #32]
 8025596:	f000 814e 	beq.w	8025836 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f6>
 802559a:	f991 3009 	ldrsb.w	r3, [r1, #9]
 802559e:	b29b      	uxth	r3, r3
 80255a0:	2f00      	cmp	r7, #0
 80255a2:	f000 80f2 	beq.w	802578a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x24a>
 80255a6:	1aff      	subs	r7, r7, r3
 80255a8:	b2bf      	uxth	r7, r7
 80255aa:	043b      	lsls	r3, r7, #16
 80255ac:	d502      	bpl.n	80255b4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80255ae:	1bf6      	subs	r6, r6, r7
 80255b0:	b236      	sxth	r6, r6
 80255b2:	2700      	movs	r7, #0
 80255b4:	f9b2 1000 	ldrsh.w	r1, [r2]
 80255b8:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 80255bc:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 80255c0:	428e      	cmp	r6, r1
 80255c2:	b28b      	uxth	r3, r1
 80255c4:	bfbf      	itttt	lt
 80255c6:	18ff      	addlt	r7, r7, r3
 80255c8:	1bbe      	sublt	r6, r7, r6
 80255ca:	b2b7      	uxthlt	r7, r6
 80255cc:	460e      	movlt	r6, r1
 80255ce:	8891      	ldrh	r1, [r2, #4]
 80255d0:	440b      	add	r3, r1
 80255d2:	b21b      	sxth	r3, r3
 80255d4:	930e      	str	r3, [sp, #56]	; 0x38
 80255d6:	88d3      	ldrh	r3, [r2, #6]
 80255d8:	9a07      	ldr	r2, [sp, #28]
 80255da:	449a      	add	sl, r3
 80255dc:	fa0f f38a 	sxth.w	r3, sl
 80255e0:	930d      	str	r3, [sp, #52]	; 0x34
 80255e2:	4bbc      	ldr	r3, [pc, #752]	; (80258d4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 80255e4:	f8bd a020 	ldrh.w	sl, [sp, #32]
 80255e8:	f893 b000 	ldrb.w	fp, [r3]
 80255ec:	f10b 3cff 	add.w	ip, fp, #4294967295
 80255f0:	f1dc 0300 	rsbs	r3, ip, #0
 80255f4:	eb43 030c 	adc.w	r3, r3, ip
 80255f8:	930c      	str	r3, [sp, #48]	; 0x30
 80255fa:	4631      	mov	r1, r6
 80255fc:	464b      	mov	r3, r9
 80255fe:	a812      	add	r0, sp, #72	; 0x48
 8025600:	f7f9 fabe 	bl	801eb80 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8025604:	4631      	mov	r1, r6
 8025606:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 802560a:	464b      	mov	r3, r9
 802560c:	9a07      	ldr	r2, [sp, #28]
 802560e:	a812      	add	r0, sp, #72	; 0x48
 8025610:	f7f9 face 	bl	801ebb0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8025614:	a916      	add	r1, sp, #88	; 0x58
 8025616:	f821 0d02 	strh.w	r0, [r1, #-2]!
 802561a:	a815      	add	r0, sp, #84	; 0x54
 802561c:	f7f9 fbaa 	bl	801ed74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8025620:	f1b9 0f00 	cmp.w	r9, #0
 8025624:	f040 80b4 	bne.w	8025790 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x250>
 8025628:	f1bb 0f01 	cmp.w	fp, #1
 802562c:	f040 80b8 	bne.w	80257a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x260>
 8025630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025632:	2b00      	cmp	r3, #0
 8025634:	f040 8104 	bne.w	8025840 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x300>
 8025638:	4ba7      	ldr	r3, [pc, #668]	; (80258d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>)
 802563a:	6818      	ldr	r0, [r3, #0]
 802563c:	6803      	ldr	r3, [r0, #0]
 802563e:	6a1b      	ldr	r3, [r3, #32]
 8025640:	4798      	blx	r3
 8025642:	4aa6      	ldr	r2, [pc, #664]	; (80258dc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 8025644:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8025648:	8811      	ldrh	r1, [r2, #0]
 802564a:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 802564e:	fb01 2303 	mla	r3, r1, r3, r2
 8025652:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8025656:	9308      	str	r3, [sp, #32]
 8025658:	2301      	movs	r3, #1
 802565a:	fa03 f308 	lsl.w	r3, r3, r8
 802565e:	3b01      	subs	r3, #1
 8025660:	b2db      	uxtb	r3, r3
 8025662:	f1b8 0f01 	cmp.w	r8, #1
 8025666:	9310      	str	r3, [sp, #64]	; 0x40
 8025668:	f000 80ec 	beq.w	8025844 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x304>
 802566c:	f1b8 0f02 	cmp.w	r8, #2
 8025670:	f000 80ea 	beq.w	8025848 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x308>
 8025674:	f1b8 0f04 	cmp.w	r8, #4
 8025678:	bf14      	ite	ne
 802567a:	2301      	movne	r3, #1
 802567c:	2311      	moveq	r3, #17
 802567e:	9309      	str	r3, [sp, #36]	; 0x24
 8025680:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025682:	b153      	cbz	r3, 802569a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x15a>
 8025684:	9a06      	ldr	r2, [sp, #24]
 8025686:	2508      	movs	r5, #8
 8025688:	fb95 f3f8 	sdiv	r3, r5, r8
 802568c:	1e5d      	subs	r5, r3, #1
 802568e:	4415      	add	r5, r2
 8025690:	fb95 f5f3 	sdiv	r5, r5, r3
 8025694:	fb15 f503 	smulbb	r5, r5, r3
 8025698:	b2ad      	uxth	r5, r5
 802569a:	b907      	cbnz	r7, 802569e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x15e>
 802569c:	b16c      	cbz	r4, 80256ba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x17a>
 802569e:	fb04 7305 	mla	r3, r4, r5, r7
 80256a2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80256a4:	fb08 f303 	mul.w	r3, r8, r3
 80256a8:	ebaa 0a04 	sub.w	sl, sl, r4
 80256ac:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 80256b0:	9226      	str	r2, [sp, #152]	; 0x98
 80256b2:	fa1f fa8a 	uxth.w	sl, sl
 80256b6:	f003 0407 	and.w	r4, r3, #7
 80256ba:	4649      	mov	r1, r9
 80256bc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80256be:	f7ff fedf 	bl	8025480 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 80256c2:	4649      	mov	r1, r9
 80256c4:	4683      	mov	fp, r0
 80256c6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80256c8:	f7ff ff0a 	bl	80254e0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 80256cc:	9a07      	ldr	r2, [sp, #28]
 80256ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80256d0:	1a9b      	subs	r3, r3, r2
 80256d2:	459a      	cmp	sl, r3
 80256d4:	bfa8      	it	ge
 80256d6:	469a      	movge	sl, r3
 80256d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80256da:	1bf6      	subs	r6, r6, r7
 80256dc:	1b9e      	subs	r6, r3, r6
 80256de:	9b06      	ldr	r3, [sp, #24]
 80256e0:	429e      	cmp	r6, r3
 80256e2:	bfd4      	ite	le
 80256e4:	ebc7 0706 	rsble	r7, r7, r6
 80256e8:	ebc7 0703 	rsbgt	r7, r7, r3
 80256ec:	1bed      	subs	r5, r5, r7
 80256ee:	fb08 f305 	mul.w	r3, r8, r5
 80256f2:	9307      	str	r3, [sp, #28]
 80256f4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80256f6:	781a      	ldrb	r2, [r3, #0]
 80256f8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80256fa:	0a1b      	lsrs	r3, r3, #8
 80256fc:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8025700:	930d      	str	r3, [sp, #52]	; 0x34
 8025702:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025704:	08db      	lsrs	r3, r3, #3
 8025706:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802570a:	930e      	str	r3, [sp, #56]	; 0x38
 802570c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802570e:	00db      	lsls	r3, r3, #3
 8025710:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8025714:	930f      	str	r3, [sp, #60]	; 0x3c
 8025716:	ea4f 034b 	mov.w	r3, fp, lsl #1
 802571a:	fb0b 0b17 	mls	fp, fp, r7, r0
 802571e:	ea27 70e7 	bic.w	r0, r7, r7, asr #31
 8025722:	4358      	muls	r0, r3
 8025724:	9306      	str	r3, [sp, #24]
 8025726:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025728:	4122      	asrs	r2, r4
 802572a:	b29b      	uxth	r3, r3
 802572c:	b2d2      	uxtb	r2, r2
 802572e:	9311      	str	r3, [sp, #68]	; 0x44
 8025730:	eb00 0b4b 	add.w	fp, r0, fp, lsl #1
 8025734:	f1ba 0f00 	cmp.w	sl, #0
 8025738:	f340 80e5 	ble.w	8025906 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c6>
 802573c:	f8dd c020 	ldr.w	ip, [sp, #32]
 8025740:	46be      	mov	lr, r7
 8025742:	f1be 0f00 	cmp.w	lr, #0
 8025746:	f340 80cb 	ble.w	80258e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 802574a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802574c:	4013      	ands	r3, r2
 802574e:	d00a      	beq.n	8025766 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x226>
 8025750:	9909      	ldr	r1, [sp, #36]	; 0x24
 8025752:	fb13 f301 	smulbb	r3, r3, r1
 8025756:	2bfe      	cmp	r3, #254	; 0xfe
 8025758:	dd78      	ble.n	802584c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x30c>
 802575a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802575c:	29ff      	cmp	r1, #255	; 0xff
 802575e:	d175      	bne.n	802584c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x30c>
 8025760:	9811      	ldr	r0, [sp, #68]	; 0x44
 8025762:	f8ac 0000 	strh.w	r0, [ip]
 8025766:	4444      	add	r4, r8
 8025768:	b2a4      	uxth	r4, r4
 802576a:	2c07      	cmp	r4, #7
 802576c:	bf81      	itttt	hi
 802576e:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 8025770:	785a      	ldrbhi	r2, [r3, #1]
 8025772:	3301      	addhi	r3, #1
 8025774:	9326      	strhi	r3, [sp, #152]	; 0x98
 8025776:	9b06      	ldr	r3, [sp, #24]
 8025778:	bf9a      	itte	ls
 802577a:	fa42 f208 	asrls.w	r2, r2, r8
 802577e:	b2d2      	uxtbls	r2, r2
 8025780:	2400      	movhi	r4, #0
 8025782:	449c      	add	ip, r3
 8025784:	f10e 3eff 	add.w	lr, lr, #4294967295
 8025788:	e7db      	b.n	8025742 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x202>
 802578a:	441e      	add	r6, r3
 802578c:	b236      	sxth	r6, r6
 802578e:	e711      	b.n	80255b4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8025790:	f1b9 0f01 	cmp.w	r9, #1
 8025794:	f47f af4c 	bne.w	8025630 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8025798:	f1bb 0f01 	cmp.w	fp, #1
 802579c:	f47f af48 	bne.w	8025630 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80257a0:	f8df b134 	ldr.w	fp, [pc, #308]	; 80258d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 80257a4:	f8db 0000 	ldr.w	r0, [fp]
 80257a8:	6803      	ldr	r3, [r0, #0]
 80257aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80257ac:	4798      	blx	r3
 80257ae:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 80257b2:	465a      	mov	r2, fp
 80257b4:	d006      	beq.n	80257c4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x284>
 80257b6:	f1b8 0f04 	cmp.w	r8, #4
 80257ba:	d13f      	bne.n	802583c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2fc>
 80257bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80257be:	3300      	adds	r3, #0
 80257c0:	bf18      	it	ne
 80257c2:	2301      	movne	r3, #1
 80257c4:	05c0      	lsls	r0, r0, #23
 80257c6:	f140 80a7 	bpl.w	8025918 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d8>
 80257ca:	f1b8 0f08 	cmp.w	r8, #8
 80257ce:	f040 80a3 	bne.w	8025918 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d8>
 80257d2:	2b00      	cmp	r3, #0
 80257d4:	bf0c      	ite	eq
 80257d6:	f44f 7180 	moveq.w	r1, #256	; 0x100
 80257da:	2180      	movne	r1, #128	; 0x80
 80257dc:	2f00      	cmp	r7, #0
 80257de:	f47f af27 	bne.w	8025630 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80257e2:	2c00      	cmp	r4, #0
 80257e4:	f47f af24 	bne.w	8025630 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80257e8:	9b06      	ldr	r3, [sp, #24]
 80257ea:	980e      	ldr	r0, [sp, #56]	; 0x38
 80257ec:	18f3      	adds	r3, r6, r3
 80257ee:	4283      	cmp	r3, r0
 80257f0:	f73f af1e 	bgt.w	8025630 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80257f4:	e9dd 0307 	ldrd	r0, r3, [sp, #28]
 80257f8:	4403      	add	r3, r0
 80257fa:	980d      	ldr	r0, [sp, #52]	; 0x34
 80257fc:	4283      	cmp	r3, r0
 80257fe:	f73f af17 	bgt.w	8025630 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8025802:	6810      	ldr	r0, [r2, #0]
 8025804:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8025808:	6804      	ldr	r4, [r0, #0]
 802580a:	9105      	str	r1, [sp, #20]
 802580c:	f1b8 0f08 	cmp.w	r8, #8
 8025810:	bf18      	it	ne
 8025812:	3501      	addne	r5, #1
 8025814:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8025816:	9104      	str	r1, [sp, #16]
 8025818:	bf18      	it	ne
 802581a:	f025 0501 	bicne.w	r5, r5, #1
 802581e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8025820:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8025824:	bf18      	it	ne
 8025826:	b2ad      	uxthne	r5, r5
 8025828:	e9cd 5102 	strd	r5, r1, [sp, #8]
 802582c:	e9cd 5a00 	strd	r5, sl, [sp]
 8025830:	9926      	ldr	r1, [sp, #152]	; 0x98
 8025832:	6c24      	ldr	r4, [r4, #64]	; 0x40
 8025834:	47a0      	blx	r4
 8025836:	b017      	add	sp, #92	; 0x5c
 8025838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802583c:	2300      	movs	r3, #0
 802583e:	e7c1      	b.n	80257c4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x284>
 8025840:	980a      	ldr	r0, [sp, #40]	; 0x28
 8025842:	e6fe      	b.n	8025642 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 8025844:	23ff      	movs	r3, #255	; 0xff
 8025846:	e71a      	b.n	802567e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 8025848:	2355      	movs	r3, #85	; 0x55
 802584a:	e718      	b.n	802567e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 802584c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802584e:	f8bc 5000 	ldrh.w	r5, [ip]
 8025852:	fb11 f303 	smulbb	r3, r1, r3
 8025856:	b29b      	uxth	r3, r3
 8025858:	1c59      	adds	r1, r3, #1
 802585a:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802585e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025862:	990d      	ldr	r1, [sp, #52]	; 0x34
 8025864:	b29e      	uxth	r6, r3
 8025866:	1228      	asrs	r0, r5, #8
 8025868:	43db      	mvns	r3, r3
 802586a:	b2db      	uxtb	r3, r3
 802586c:	fb11 f106 	smulbb	r1, r1, r6
 8025870:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025874:	fb00 1003 	mla	r0, r0, r3, r1
 8025878:	b281      	uxth	r1, r0
 802587a:	980e      	ldr	r0, [sp, #56]	; 0x38
 802587c:	910c      	str	r1, [sp, #48]	; 0x30
 802587e:	fb16 f900 	smulbb	r9, r6, r0
 8025882:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8025884:	10e9      	asrs	r1, r5, #3
 8025886:	00ed      	lsls	r5, r5, #3
 8025888:	fb16 f600 	smulbb	r6, r6, r0
 802588c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8025890:	b2ed      	uxtb	r5, r5
 8025892:	fb01 9103 	mla	r1, r1, r3, r9
 8025896:	fb05 6603 	mla	r6, r5, r3, r6
 802589a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802589c:	980c      	ldr	r0, [sp, #48]	; 0x30
 802589e:	b2b6      	uxth	r6, r6
 80258a0:	3301      	adds	r3, #1
 80258a2:	f106 0901 	add.w	r9, r6, #1
 80258a6:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80258aa:	eb09 2916 	add.w	r9, r9, r6, lsr #8
 80258ae:	b289      	uxth	r1, r1
 80258b0:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 80258b4:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80258b8:	ea40 0009 	orr.w	r0, r0, r9
 80258bc:	f101 0901 	add.w	r9, r1, #1
 80258c0:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 80258c4:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80258c8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80258cc:	ea40 0009 	orr.w	r0, r0, r9
 80258d0:	e747      	b.n	8025762 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x222>
 80258d2:	bf00      	nop
 80258d4:	2001289c 	.word	0x2001289c
 80258d8:	200128a4 	.word	0x200128a4
 80258dc:	2001289e 	.word	0x2001289e
 80258e0:	9b07      	ldr	r3, [sp, #28]
 80258e2:	b153      	cbz	r3, 80258fa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ba>
 80258e4:	441c      	add	r4, r3
 80258e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80258e8:	b2a4      	uxth	r4, r4
 80258ea:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 80258ee:	f004 0407 	and.w	r4, r4, #7
 80258f2:	781a      	ldrb	r2, [r3, #0]
 80258f4:	9326      	str	r3, [sp, #152]	; 0x98
 80258f6:	4122      	asrs	r2, r4
 80258f8:	b2d2      	uxtb	r2, r2
 80258fa:	9b08      	ldr	r3, [sp, #32]
 80258fc:	445b      	add	r3, fp
 80258fe:	9308      	str	r3, [sp, #32]
 8025900:	f10a 3aff 	add.w	sl, sl, #4294967295
 8025904:	e716      	b.n	8025734 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f4>
 8025906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025908:	2b00      	cmp	r3, #0
 802590a:	d194      	bne.n	8025836 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f6>
 802590c:	4b05      	ldr	r3, [pc, #20]	; (8025924 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>)
 802590e:	6818      	ldr	r0, [r3, #0]
 8025910:	6803      	ldr	r3, [r0, #0]
 8025912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025914:	4798      	blx	r3
 8025916:	e78e      	b.n	8025836 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f6>
 8025918:	2b00      	cmp	r3, #0
 802591a:	f43f ae89 	beq.w	8025630 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 802591e:	2180      	movs	r1, #128	; 0x80
 8025920:	e75c      	b.n	80257dc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x29c>
 8025922:	bf00      	nop
 8025924:	200128a4 	.word	0x200128a4

08025928 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8025928:	b538      	push	{r3, r4, r5, lr}
 802592a:	4c15      	ldr	r4, [pc, #84]	; (8025980 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 802592c:	7823      	ldrb	r3, [r4, #0]
 802592e:	f3bf 8f5b 	dmb	ish
 8025932:	07da      	lsls	r2, r3, #31
 8025934:	4605      	mov	r5, r0
 8025936:	d40b      	bmi.n	8025950 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8025938:	4620      	mov	r0, r4
 802593a:	f007 fbc9 	bl	802d0d0 <__cxa_guard_acquire>
 802593e:	b138      	cbz	r0, 8025950 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8025940:	4620      	mov	r0, r4
 8025942:	f007 fbe1 	bl	802d108 <__cxa_guard_release>
 8025946:	4a0f      	ldr	r2, [pc, #60]	; (8025984 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8025948:	490f      	ldr	r1, [pc, #60]	; (8025988 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 802594a:	4810      	ldr	r0, [pc, #64]	; (802598c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 802594c:	f007 fbae 	bl	802d0ac <__aeabi_atexit>
 8025950:	4c0f      	ldr	r4, [pc, #60]	; (8025990 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 8025952:	7823      	ldrb	r3, [r4, #0]
 8025954:	f3bf 8f5b 	dmb	ish
 8025958:	07db      	lsls	r3, r3, #31
 802595a:	d40b      	bmi.n	8025974 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 802595c:	4620      	mov	r0, r4
 802595e:	f007 fbb7 	bl	802d0d0 <__cxa_guard_acquire>
 8025962:	b138      	cbz	r0, 8025974 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8025964:	4620      	mov	r0, r4
 8025966:	f007 fbcf 	bl	802d108 <__cxa_guard_release>
 802596a:	4a06      	ldr	r2, [pc, #24]	; (8025984 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 802596c:	4909      	ldr	r1, [pc, #36]	; (8025994 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 802596e:	480a      	ldr	r0, [pc, #40]	; (8025998 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8025970:	f007 fb9c 	bl	802d0ac <__aeabi_atexit>
 8025974:	4b05      	ldr	r3, [pc, #20]	; (802598c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8025976:	612b      	str	r3, [r5, #16]
 8025978:	4b07      	ldr	r3, [pc, #28]	; (8025998 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 802597a:	616b      	str	r3, [r5, #20]
 802597c:	bd38      	pop	{r3, r4, r5, pc}
 802597e:	bf00      	nop
 8025980:	20012990 	.word	0x20012990
 8025984:	20000000 	.word	0x20000000
 8025988:	08023fdf 	.word	0x08023fdf
 802598c:	200000e0 	.word	0x200000e0
 8025990:	20012994 	.word	0x20012994
 8025994:	08023fdd 	.word	0x08023fdd
 8025998:	200000e4 	.word	0x200000e4

0802599c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 802599c:	b538      	push	{r3, r4, r5, lr}
 802599e:	4c15      	ldr	r4, [pc, #84]	; (80259f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 80259a0:	7823      	ldrb	r3, [r4, #0]
 80259a2:	f3bf 8f5b 	dmb	ish
 80259a6:	07da      	lsls	r2, r3, #31
 80259a8:	4605      	mov	r5, r0
 80259aa:	d40b      	bmi.n	80259c4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 80259ac:	4620      	mov	r0, r4
 80259ae:	f007 fb8f 	bl	802d0d0 <__cxa_guard_acquire>
 80259b2:	b138      	cbz	r0, 80259c4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 80259b4:	4620      	mov	r0, r4
 80259b6:	f007 fba7 	bl	802d108 <__cxa_guard_release>
 80259ba:	4a0f      	ldr	r2, [pc, #60]	; (80259f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 80259bc:	490f      	ldr	r1, [pc, #60]	; (80259fc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 80259be:	4810      	ldr	r0, [pc, #64]	; (8025a00 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 80259c0:	f007 fb74 	bl	802d0ac <__aeabi_atexit>
 80259c4:	4c0f      	ldr	r4, [pc, #60]	; (8025a04 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 80259c6:	7823      	ldrb	r3, [r4, #0]
 80259c8:	f3bf 8f5b 	dmb	ish
 80259cc:	07db      	lsls	r3, r3, #31
 80259ce:	d40b      	bmi.n	80259e8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 80259d0:	4620      	mov	r0, r4
 80259d2:	f007 fb7d 	bl	802d0d0 <__cxa_guard_acquire>
 80259d6:	b138      	cbz	r0, 80259e8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 80259d8:	4620      	mov	r0, r4
 80259da:	f007 fb95 	bl	802d108 <__cxa_guard_release>
 80259de:	4a06      	ldr	r2, [pc, #24]	; (80259f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 80259e0:	4909      	ldr	r1, [pc, #36]	; (8025a08 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 80259e2:	480a      	ldr	r0, [pc, #40]	; (8025a0c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 80259e4:	f007 fb62 	bl	802d0ac <__aeabi_atexit>
 80259e8:	4b05      	ldr	r3, [pc, #20]	; (8025a00 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 80259ea:	60ab      	str	r3, [r5, #8]
 80259ec:	4b07      	ldr	r3, [pc, #28]	; (8025a0c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 80259ee:	60eb      	str	r3, [r5, #12]
 80259f0:	bd38      	pop	{r3, r4, r5, pc}
 80259f2:	bf00      	nop
 80259f4:	20012968 	.word	0x20012968
 80259f8:	20000000 	.word	0x20000000
 80259fc:	08023fe3 	.word	0x08023fe3
 8025a00:	200000b8 	.word	0x200000b8
 8025a04:	2001296c 	.word	0x2001296c
 8025a08:	08023fe1 	.word	0x08023fe1
 8025a0c:	200000bc 	.word	0x200000bc

08025a10 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 8025a10:	b510      	push	{r4, lr}
 8025a12:	4604      	mov	r4, r0
 8025a14:	f7ff ff88 	bl	8025928 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8025a18:	4620      	mov	r0, r4
 8025a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025a1e:	f7ff bfbd 	b.w	802599c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

08025a24 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8025a24:	b538      	push	{r3, r4, r5, lr}
 8025a26:	4c15      	ldr	r4, [pc, #84]	; (8025a7c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8025a28:	7823      	ldrb	r3, [r4, #0]
 8025a2a:	f3bf 8f5b 	dmb	ish
 8025a2e:	07da      	lsls	r2, r3, #31
 8025a30:	4605      	mov	r5, r0
 8025a32:	d40b      	bmi.n	8025a4c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8025a34:	4620      	mov	r0, r4
 8025a36:	f007 fb4b 	bl	802d0d0 <__cxa_guard_acquire>
 8025a3a:	b138      	cbz	r0, 8025a4c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8025a3c:	4620      	mov	r0, r4
 8025a3e:	f007 fb63 	bl	802d108 <__cxa_guard_release>
 8025a42:	4a0f      	ldr	r2, [pc, #60]	; (8025a80 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8025a44:	490f      	ldr	r1, [pc, #60]	; (8025a84 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8025a46:	4810      	ldr	r0, [pc, #64]	; (8025a88 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8025a48:	f007 fb30 	bl	802d0ac <__aeabi_atexit>
 8025a4c:	4c0f      	ldr	r4, [pc, #60]	; (8025a8c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8025a4e:	7823      	ldrb	r3, [r4, #0]
 8025a50:	f3bf 8f5b 	dmb	ish
 8025a54:	07db      	lsls	r3, r3, #31
 8025a56:	d40b      	bmi.n	8025a70 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8025a58:	4620      	mov	r0, r4
 8025a5a:	f007 fb39 	bl	802d0d0 <__cxa_guard_acquire>
 8025a5e:	b138      	cbz	r0, 8025a70 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8025a60:	4620      	mov	r0, r4
 8025a62:	f007 fb51 	bl	802d108 <__cxa_guard_release>
 8025a66:	4a06      	ldr	r2, [pc, #24]	; (8025a80 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8025a68:	4909      	ldr	r1, [pc, #36]	; (8025a90 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8025a6a:	480a      	ldr	r0, [pc, #40]	; (8025a94 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8025a6c:	f007 fb1e 	bl	802d0ac <__aeabi_atexit>
 8025a70:	4b05      	ldr	r3, [pc, #20]	; (8025a88 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8025a72:	622b      	str	r3, [r5, #32]
 8025a74:	4b07      	ldr	r3, [pc, #28]	; (8025a94 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8025a76:	626b      	str	r3, [r5, #36]	; 0x24
 8025a78:	bd38      	pop	{r3, r4, r5, pc}
 8025a7a:	bf00      	nop
 8025a7c:	20012998 	.word	0x20012998
 8025a80:	20000000 	.word	0x20000000
 8025a84:	08023fd7 	.word	0x08023fd7
 8025a88:	200000e8 	.word	0x200000e8
 8025a8c:	2001299c 	.word	0x2001299c
 8025a90:	08023fd5 	.word	0x08023fd5
 8025a94:	200000ec 	.word	0x200000ec

08025a98 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8025a98:	b538      	push	{r3, r4, r5, lr}
 8025a9a:	4c15      	ldr	r4, [pc, #84]	; (8025af0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8025a9c:	7823      	ldrb	r3, [r4, #0]
 8025a9e:	f3bf 8f5b 	dmb	ish
 8025aa2:	07da      	lsls	r2, r3, #31
 8025aa4:	4605      	mov	r5, r0
 8025aa6:	d40b      	bmi.n	8025ac0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8025aa8:	4620      	mov	r0, r4
 8025aaa:	f007 fb11 	bl	802d0d0 <__cxa_guard_acquire>
 8025aae:	b138      	cbz	r0, 8025ac0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8025ab0:	4620      	mov	r0, r4
 8025ab2:	f007 fb29 	bl	802d108 <__cxa_guard_release>
 8025ab6:	4a0f      	ldr	r2, [pc, #60]	; (8025af4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8025ab8:	490f      	ldr	r1, [pc, #60]	; (8025af8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8025aba:	4810      	ldr	r0, [pc, #64]	; (8025afc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8025abc:	f007 faf6 	bl	802d0ac <__aeabi_atexit>
 8025ac0:	4c0f      	ldr	r4, [pc, #60]	; (8025b00 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8025ac2:	7823      	ldrb	r3, [r4, #0]
 8025ac4:	f3bf 8f5b 	dmb	ish
 8025ac8:	07db      	lsls	r3, r3, #31
 8025aca:	d40b      	bmi.n	8025ae4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8025acc:	4620      	mov	r0, r4
 8025ace:	f007 faff 	bl	802d0d0 <__cxa_guard_acquire>
 8025ad2:	b138      	cbz	r0, 8025ae4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8025ad4:	4620      	mov	r0, r4
 8025ad6:	f007 fb17 	bl	802d108 <__cxa_guard_release>
 8025ada:	4a06      	ldr	r2, [pc, #24]	; (8025af4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8025adc:	4909      	ldr	r1, [pc, #36]	; (8025b04 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8025ade:	480a      	ldr	r0, [pc, #40]	; (8025b08 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8025ae0:	f007 fae4 	bl	802d0ac <__aeabi_atexit>
 8025ae4:	4b05      	ldr	r3, [pc, #20]	; (8025afc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8025ae6:	61ab      	str	r3, [r5, #24]
 8025ae8:	4b07      	ldr	r3, [pc, #28]	; (8025b08 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8025aea:	61eb      	str	r3, [r5, #28]
 8025aec:	bd38      	pop	{r3, r4, r5, pc}
 8025aee:	bf00      	nop
 8025af0:	20012970 	.word	0x20012970
 8025af4:	20000000 	.word	0x20000000
 8025af8:	08023fdb 	.word	0x08023fdb
 8025afc:	200000c0 	.word	0x200000c0
 8025b00:	20012974 	.word	0x20012974
 8025b04:	08023fd9 	.word	0x08023fd9
 8025b08:	200000c4 	.word	0x200000c4

08025b0c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 8025b0c:	b510      	push	{r4, lr}
 8025b0e:	4604      	mov	r4, r0
 8025b10:	f7ff ff88 	bl	8025a24 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8025b14:	4620      	mov	r0, r4
 8025b16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025b1a:	f7ff bfbd 	b.w	8025a98 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08025b20 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8025b20:	b538      	push	{r3, r4, r5, lr}
 8025b22:	4c15      	ldr	r4, [pc, #84]	; (8025b78 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8025b24:	7823      	ldrb	r3, [r4, #0]
 8025b26:	f3bf 8f5b 	dmb	ish
 8025b2a:	07da      	lsls	r2, r3, #31
 8025b2c:	4605      	mov	r5, r0
 8025b2e:	d40b      	bmi.n	8025b48 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8025b30:	4620      	mov	r0, r4
 8025b32:	f007 facd 	bl	802d0d0 <__cxa_guard_acquire>
 8025b36:	b138      	cbz	r0, 8025b48 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8025b38:	4620      	mov	r0, r4
 8025b3a:	f007 fae5 	bl	802d108 <__cxa_guard_release>
 8025b3e:	4a0f      	ldr	r2, [pc, #60]	; (8025b7c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8025b40:	490f      	ldr	r1, [pc, #60]	; (8025b80 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8025b42:	4810      	ldr	r0, [pc, #64]	; (8025b84 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8025b44:	f007 fab2 	bl	802d0ac <__aeabi_atexit>
 8025b48:	4c0f      	ldr	r4, [pc, #60]	; (8025b88 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8025b4a:	7823      	ldrb	r3, [r4, #0]
 8025b4c:	f3bf 8f5b 	dmb	ish
 8025b50:	07db      	lsls	r3, r3, #31
 8025b52:	d40b      	bmi.n	8025b6c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8025b54:	4620      	mov	r0, r4
 8025b56:	f007 fabb 	bl	802d0d0 <__cxa_guard_acquire>
 8025b5a:	b138      	cbz	r0, 8025b6c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8025b5c:	4620      	mov	r0, r4
 8025b5e:	f007 fad3 	bl	802d108 <__cxa_guard_release>
 8025b62:	4a06      	ldr	r2, [pc, #24]	; (8025b7c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8025b64:	4909      	ldr	r1, [pc, #36]	; (8025b8c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8025b66:	480a      	ldr	r0, [pc, #40]	; (8025b90 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8025b68:	f007 faa0 	bl	802d0ac <__aeabi_atexit>
 8025b6c:	4b05      	ldr	r3, [pc, #20]	; (8025b84 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8025b6e:	632b      	str	r3, [r5, #48]	; 0x30
 8025b70:	4b07      	ldr	r3, [pc, #28]	; (8025b90 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8025b72:	636b      	str	r3, [r5, #52]	; 0x34
 8025b74:	bd38      	pop	{r3, r4, r5, pc}
 8025b76:	bf00      	nop
 8025b78:	200129a8 	.word	0x200129a8
 8025b7c:	20000000 	.word	0x20000000
 8025b80:	08023fcf 	.word	0x08023fcf
 8025b84:	200000f8 	.word	0x200000f8
 8025b88:	200129ac 	.word	0x200129ac
 8025b8c:	08023fcd 	.word	0x08023fcd
 8025b90:	200000fc 	.word	0x200000fc

08025b94 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8025b94:	b538      	push	{r3, r4, r5, lr}
 8025b96:	4c15      	ldr	r4, [pc, #84]	; (8025bec <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8025b98:	7823      	ldrb	r3, [r4, #0]
 8025b9a:	f3bf 8f5b 	dmb	ish
 8025b9e:	07da      	lsls	r2, r3, #31
 8025ba0:	4605      	mov	r5, r0
 8025ba2:	d40b      	bmi.n	8025bbc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8025ba4:	4620      	mov	r0, r4
 8025ba6:	f007 fa93 	bl	802d0d0 <__cxa_guard_acquire>
 8025baa:	b138      	cbz	r0, 8025bbc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8025bac:	4620      	mov	r0, r4
 8025bae:	f007 faab 	bl	802d108 <__cxa_guard_release>
 8025bb2:	4a0f      	ldr	r2, [pc, #60]	; (8025bf0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8025bb4:	490f      	ldr	r1, [pc, #60]	; (8025bf4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8025bb6:	4810      	ldr	r0, [pc, #64]	; (8025bf8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8025bb8:	f007 fa78 	bl	802d0ac <__aeabi_atexit>
 8025bbc:	4c0f      	ldr	r4, [pc, #60]	; (8025bfc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8025bbe:	7823      	ldrb	r3, [r4, #0]
 8025bc0:	f3bf 8f5b 	dmb	ish
 8025bc4:	07db      	lsls	r3, r3, #31
 8025bc6:	d40b      	bmi.n	8025be0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8025bc8:	4620      	mov	r0, r4
 8025bca:	f007 fa81 	bl	802d0d0 <__cxa_guard_acquire>
 8025bce:	b138      	cbz	r0, 8025be0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8025bd0:	4620      	mov	r0, r4
 8025bd2:	f007 fa99 	bl	802d108 <__cxa_guard_release>
 8025bd6:	4a06      	ldr	r2, [pc, #24]	; (8025bf0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8025bd8:	4909      	ldr	r1, [pc, #36]	; (8025c00 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8025bda:	480a      	ldr	r0, [pc, #40]	; (8025c04 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8025bdc:	f007 fa66 	bl	802d0ac <__aeabi_atexit>
 8025be0:	4b05      	ldr	r3, [pc, #20]	; (8025bf8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8025be2:	62ab      	str	r3, [r5, #40]	; 0x28
 8025be4:	4b07      	ldr	r3, [pc, #28]	; (8025c04 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8025be6:	62eb      	str	r3, [r5, #44]	; 0x2c
 8025be8:	bd38      	pop	{r3, r4, r5, pc}
 8025bea:	bf00      	nop
 8025bec:	20012978 	.word	0x20012978
 8025bf0:	20000000 	.word	0x20000000
 8025bf4:	08023fd3 	.word	0x08023fd3
 8025bf8:	200000c8 	.word	0x200000c8
 8025bfc:	2001297c 	.word	0x2001297c
 8025c00:	08023fd1 	.word	0x08023fd1
 8025c04:	200000cc 	.word	0x200000cc

08025c08 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 8025c08:	b510      	push	{r4, lr}
 8025c0a:	4604      	mov	r4, r0
 8025c0c:	f7ff ff88 	bl	8025b20 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8025c10:	4620      	mov	r0, r4
 8025c12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025c16:	f7ff bfbd 	b.w	8025b94 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08025c1c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8025c1c:	b538      	push	{r3, r4, r5, lr}
 8025c1e:	4c15      	ldr	r4, [pc, #84]	; (8025c74 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8025c20:	7823      	ldrb	r3, [r4, #0]
 8025c22:	f3bf 8f5b 	dmb	ish
 8025c26:	07da      	lsls	r2, r3, #31
 8025c28:	4605      	mov	r5, r0
 8025c2a:	d40b      	bmi.n	8025c44 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8025c2c:	4620      	mov	r0, r4
 8025c2e:	f007 fa4f 	bl	802d0d0 <__cxa_guard_acquire>
 8025c32:	b138      	cbz	r0, 8025c44 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8025c34:	4620      	mov	r0, r4
 8025c36:	f007 fa67 	bl	802d108 <__cxa_guard_release>
 8025c3a:	4a0f      	ldr	r2, [pc, #60]	; (8025c78 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8025c3c:	490f      	ldr	r1, [pc, #60]	; (8025c7c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 8025c3e:	4810      	ldr	r0, [pc, #64]	; (8025c80 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8025c40:	f007 fa34 	bl	802d0ac <__aeabi_atexit>
 8025c44:	4c0f      	ldr	r4, [pc, #60]	; (8025c84 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 8025c46:	7823      	ldrb	r3, [r4, #0]
 8025c48:	f3bf 8f5b 	dmb	ish
 8025c4c:	07db      	lsls	r3, r3, #31
 8025c4e:	d40b      	bmi.n	8025c68 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8025c50:	4620      	mov	r0, r4
 8025c52:	f007 fa3d 	bl	802d0d0 <__cxa_guard_acquire>
 8025c56:	b138      	cbz	r0, 8025c68 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8025c58:	4620      	mov	r0, r4
 8025c5a:	f007 fa55 	bl	802d108 <__cxa_guard_release>
 8025c5e:	4a06      	ldr	r2, [pc, #24]	; (8025c78 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8025c60:	4909      	ldr	r1, [pc, #36]	; (8025c88 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 8025c62:	480a      	ldr	r0, [pc, #40]	; (8025c8c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8025c64:	f007 fa22 	bl	802d0ac <__aeabi_atexit>
 8025c68:	4b05      	ldr	r3, [pc, #20]	; (8025c80 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8025c6a:	652b      	str	r3, [r5, #80]	; 0x50
 8025c6c:	4b07      	ldr	r3, [pc, #28]	; (8025c8c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8025c6e:	656b      	str	r3, [r5, #84]	; 0x54
 8025c70:	bd38      	pop	{r3, r4, r5, pc}
 8025c72:	bf00      	nop
 8025c74:	200129b0 	.word	0x200129b0
 8025c78:	20000000 	.word	0x20000000
 8025c7c:	08023fbf 	.word	0x08023fbf
 8025c80:	20000100 	.word	0x20000100
 8025c84:	200129b4 	.word	0x200129b4
 8025c88:	08023fbd 	.word	0x08023fbd
 8025c8c:	20000104 	.word	0x20000104

08025c90 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 8025c90:	b538      	push	{r3, r4, r5, lr}
 8025c92:	4c15      	ldr	r4, [pc, #84]	; (8025ce8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8025c94:	7823      	ldrb	r3, [r4, #0]
 8025c96:	f3bf 8f5b 	dmb	ish
 8025c9a:	07da      	lsls	r2, r3, #31
 8025c9c:	4605      	mov	r5, r0
 8025c9e:	d40b      	bmi.n	8025cb8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8025ca0:	4620      	mov	r0, r4
 8025ca2:	f007 fa15 	bl	802d0d0 <__cxa_guard_acquire>
 8025ca6:	b138      	cbz	r0, 8025cb8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8025ca8:	4620      	mov	r0, r4
 8025caa:	f007 fa2d 	bl	802d108 <__cxa_guard_release>
 8025cae:	4a0f      	ldr	r2, [pc, #60]	; (8025cec <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8025cb0:	490f      	ldr	r1, [pc, #60]	; (8025cf0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 8025cb2:	4810      	ldr	r0, [pc, #64]	; (8025cf4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8025cb4:	f007 f9fa 	bl	802d0ac <__aeabi_atexit>
 8025cb8:	4c0f      	ldr	r4, [pc, #60]	; (8025cf8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 8025cba:	7823      	ldrb	r3, [r4, #0]
 8025cbc:	f3bf 8f5b 	dmb	ish
 8025cc0:	07db      	lsls	r3, r3, #31
 8025cc2:	d40b      	bmi.n	8025cdc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8025cc4:	4620      	mov	r0, r4
 8025cc6:	f007 fa03 	bl	802d0d0 <__cxa_guard_acquire>
 8025cca:	b138      	cbz	r0, 8025cdc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8025ccc:	4620      	mov	r0, r4
 8025cce:	f007 fa1b 	bl	802d108 <__cxa_guard_release>
 8025cd2:	4a06      	ldr	r2, [pc, #24]	; (8025cec <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8025cd4:	4909      	ldr	r1, [pc, #36]	; (8025cfc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 8025cd6:	480a      	ldr	r0, [pc, #40]	; (8025d00 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8025cd8:	f007 f9e8 	bl	802d0ac <__aeabi_atexit>
 8025cdc:	4b05      	ldr	r3, [pc, #20]	; (8025cf4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8025cde:	64ab      	str	r3, [r5, #72]	; 0x48
 8025ce0:	4b07      	ldr	r3, [pc, #28]	; (8025d00 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8025ce2:	64eb      	str	r3, [r5, #76]	; 0x4c
 8025ce4:	bd38      	pop	{r3, r4, r5, pc}
 8025ce6:	bf00      	nop
 8025ce8:	200129b8 	.word	0x200129b8
 8025cec:	20000000 	.word	0x20000000
 8025cf0:	08023fc3 	.word	0x08023fc3
 8025cf4:	20000108 	.word	0x20000108
 8025cf8:	200129bc 	.word	0x200129bc
 8025cfc:	08023fc1 	.word	0x08023fc1
 8025d00:	2000010c 	.word	0x2000010c

08025d04 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8025d04:	b538      	push	{r3, r4, r5, lr}
 8025d06:	4c15      	ldr	r4, [pc, #84]	; (8025d5c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8025d08:	7823      	ldrb	r3, [r4, #0]
 8025d0a:	f3bf 8f5b 	dmb	ish
 8025d0e:	07da      	lsls	r2, r3, #31
 8025d10:	4605      	mov	r5, r0
 8025d12:	d40b      	bmi.n	8025d2c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8025d14:	4620      	mov	r0, r4
 8025d16:	f007 f9db 	bl	802d0d0 <__cxa_guard_acquire>
 8025d1a:	b138      	cbz	r0, 8025d2c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8025d1c:	4620      	mov	r0, r4
 8025d1e:	f007 f9f3 	bl	802d108 <__cxa_guard_release>
 8025d22:	4a0f      	ldr	r2, [pc, #60]	; (8025d60 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8025d24:	490f      	ldr	r1, [pc, #60]	; (8025d64 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 8025d26:	4810      	ldr	r0, [pc, #64]	; (8025d68 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8025d28:	f007 f9c0 	bl	802d0ac <__aeabi_atexit>
 8025d2c:	4c0f      	ldr	r4, [pc, #60]	; (8025d6c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 8025d2e:	7823      	ldrb	r3, [r4, #0]
 8025d30:	f3bf 8f5b 	dmb	ish
 8025d34:	07db      	lsls	r3, r3, #31
 8025d36:	d40b      	bmi.n	8025d50 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8025d38:	4620      	mov	r0, r4
 8025d3a:	f007 f9c9 	bl	802d0d0 <__cxa_guard_acquire>
 8025d3e:	b138      	cbz	r0, 8025d50 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8025d40:	4620      	mov	r0, r4
 8025d42:	f007 f9e1 	bl	802d108 <__cxa_guard_release>
 8025d46:	4a06      	ldr	r2, [pc, #24]	; (8025d60 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8025d48:	4909      	ldr	r1, [pc, #36]	; (8025d70 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8025d4a:	480a      	ldr	r0, [pc, #40]	; (8025d74 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8025d4c:	f007 f9ae 	bl	802d0ac <__aeabi_atexit>
 8025d50:	4b05      	ldr	r3, [pc, #20]	; (8025d68 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8025d52:	642b      	str	r3, [r5, #64]	; 0x40
 8025d54:	4b07      	ldr	r3, [pc, #28]	; (8025d74 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8025d56:	646b      	str	r3, [r5, #68]	; 0x44
 8025d58:	bd38      	pop	{r3, r4, r5, pc}
 8025d5a:	bf00      	nop
 8025d5c:	20012980 	.word	0x20012980
 8025d60:	20000000 	.word	0x20000000
 8025d64:	08023fc7 	.word	0x08023fc7
 8025d68:	200000d0 	.word	0x200000d0
 8025d6c:	20012984 	.word	0x20012984
 8025d70:	08023fc5 	.word	0x08023fc5
 8025d74:	200000d4 	.word	0x200000d4

08025d78 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 8025d78:	b538      	push	{r3, r4, r5, lr}
 8025d7a:	4c15      	ldr	r4, [pc, #84]	; (8025dd0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 8025d7c:	7823      	ldrb	r3, [r4, #0]
 8025d7e:	f3bf 8f5b 	dmb	ish
 8025d82:	07da      	lsls	r2, r3, #31
 8025d84:	4605      	mov	r5, r0
 8025d86:	d40b      	bmi.n	8025da0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8025d88:	4620      	mov	r0, r4
 8025d8a:	f007 f9a1 	bl	802d0d0 <__cxa_guard_acquire>
 8025d8e:	b138      	cbz	r0, 8025da0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8025d90:	4620      	mov	r0, r4
 8025d92:	f007 f9b9 	bl	802d108 <__cxa_guard_release>
 8025d96:	4a0f      	ldr	r2, [pc, #60]	; (8025dd4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8025d98:	490f      	ldr	r1, [pc, #60]	; (8025dd8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 8025d9a:	4810      	ldr	r0, [pc, #64]	; (8025ddc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8025d9c:	f007 f986 	bl	802d0ac <__aeabi_atexit>
 8025da0:	4c0f      	ldr	r4, [pc, #60]	; (8025de0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 8025da2:	7823      	ldrb	r3, [r4, #0]
 8025da4:	f3bf 8f5b 	dmb	ish
 8025da8:	07db      	lsls	r3, r3, #31
 8025daa:	d40b      	bmi.n	8025dc4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8025dac:	4620      	mov	r0, r4
 8025dae:	f007 f98f 	bl	802d0d0 <__cxa_guard_acquire>
 8025db2:	b138      	cbz	r0, 8025dc4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8025db4:	4620      	mov	r0, r4
 8025db6:	f007 f9a7 	bl	802d108 <__cxa_guard_release>
 8025dba:	4a06      	ldr	r2, [pc, #24]	; (8025dd4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8025dbc:	4909      	ldr	r1, [pc, #36]	; (8025de4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 8025dbe:	480a      	ldr	r0, [pc, #40]	; (8025de8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8025dc0:	f007 f974 	bl	802d0ac <__aeabi_atexit>
 8025dc4:	4b05      	ldr	r3, [pc, #20]	; (8025ddc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8025dc6:	63ab      	str	r3, [r5, #56]	; 0x38
 8025dc8:	4b07      	ldr	r3, [pc, #28]	; (8025de8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8025dca:	63eb      	str	r3, [r5, #60]	; 0x3c
 8025dcc:	bd38      	pop	{r3, r4, r5, pc}
 8025dce:	bf00      	nop
 8025dd0:	200129a0 	.word	0x200129a0
 8025dd4:	20000000 	.word	0x20000000
 8025dd8:	08023fcb 	.word	0x08023fcb
 8025ddc:	200000f0 	.word	0x200000f0
 8025de0:	200129a4 	.word	0x200129a4
 8025de4:	08023fc9 	.word	0x08023fc9
 8025de8:	200000f4 	.word	0x200000f4

08025dec <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 8025dec:	b510      	push	{r4, lr}
 8025dee:	4604      	mov	r4, r0
 8025df0:	f7ff ff14 	bl	8025c1c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8025df4:	4620      	mov	r0, r4
 8025df6:	f7ff ff85 	bl	8025d04 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 8025dfa:	4620      	mov	r0, r4
 8025dfc:	f7ff ff48 	bl	8025c90 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 8025e00:	4620      	mov	r0, r4
 8025e02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025e06:	f7ff bfb7 	b.w	8025d78 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

08025e0c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8025e0c:	b538      	push	{r3, r4, r5, lr}
 8025e0e:	4c15      	ldr	r4, [pc, #84]	; (8025e64 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8025e10:	7823      	ldrb	r3, [r4, #0]
 8025e12:	f3bf 8f5b 	dmb	ish
 8025e16:	07da      	lsls	r2, r3, #31
 8025e18:	4605      	mov	r5, r0
 8025e1a:	d40b      	bmi.n	8025e34 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8025e1c:	4620      	mov	r0, r4
 8025e1e:	f007 f957 	bl	802d0d0 <__cxa_guard_acquire>
 8025e22:	b138      	cbz	r0, 8025e34 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8025e24:	4620      	mov	r0, r4
 8025e26:	f007 f96f 	bl	802d108 <__cxa_guard_release>
 8025e2a:	4a0f      	ldr	r2, [pc, #60]	; (8025e68 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8025e2c:	490f      	ldr	r1, [pc, #60]	; (8025e6c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8025e2e:	4810      	ldr	r0, [pc, #64]	; (8025e70 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8025e30:	f007 f93c 	bl	802d0ac <__aeabi_atexit>
 8025e34:	4c0f      	ldr	r4, [pc, #60]	; (8025e74 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8025e36:	7823      	ldrb	r3, [r4, #0]
 8025e38:	f3bf 8f5b 	dmb	ish
 8025e3c:	07db      	lsls	r3, r3, #31
 8025e3e:	d40b      	bmi.n	8025e58 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8025e40:	4620      	mov	r0, r4
 8025e42:	f007 f945 	bl	802d0d0 <__cxa_guard_acquire>
 8025e46:	b138      	cbz	r0, 8025e58 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8025e48:	4620      	mov	r0, r4
 8025e4a:	f007 f95d 	bl	802d108 <__cxa_guard_release>
 8025e4e:	4a06      	ldr	r2, [pc, #24]	; (8025e68 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8025e50:	4909      	ldr	r1, [pc, #36]	; (8025e78 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8025e52:	480a      	ldr	r0, [pc, #40]	; (8025e7c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8025e54:	f007 f92a 	bl	802d0ac <__aeabi_atexit>
 8025e58:	4b05      	ldr	r3, [pc, #20]	; (8025e70 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8025e5a:	662b      	str	r3, [r5, #96]	; 0x60
 8025e5c:	4b07      	ldr	r3, [pc, #28]	; (8025e7c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8025e5e:	666b      	str	r3, [r5, #100]	; 0x64
 8025e60:	bd38      	pop	{r3, r4, r5, pc}
 8025e62:	bf00      	nop
 8025e64:	20012988 	.word	0x20012988
 8025e68:	20000000 	.word	0x20000000
 8025e6c:	08023fb7 	.word	0x08023fb7
 8025e70:	200000d8 	.word	0x200000d8
 8025e74:	2001298c 	.word	0x2001298c
 8025e78:	08023fb5 	.word	0x08023fb5
 8025e7c:	200000dc 	.word	0x200000dc

08025e80 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8025e80:	b538      	push	{r3, r4, r5, lr}
 8025e82:	4c15      	ldr	r4, [pc, #84]	; (8025ed8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8025e84:	7823      	ldrb	r3, [r4, #0]
 8025e86:	f3bf 8f5b 	dmb	ish
 8025e8a:	07da      	lsls	r2, r3, #31
 8025e8c:	4605      	mov	r5, r0
 8025e8e:	d40b      	bmi.n	8025ea8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8025e90:	4620      	mov	r0, r4
 8025e92:	f007 f91d 	bl	802d0d0 <__cxa_guard_acquire>
 8025e96:	b138      	cbz	r0, 8025ea8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8025e98:	4620      	mov	r0, r4
 8025e9a:	f007 f935 	bl	802d108 <__cxa_guard_release>
 8025e9e:	4a0f      	ldr	r2, [pc, #60]	; (8025edc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8025ea0:	490f      	ldr	r1, [pc, #60]	; (8025ee0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8025ea2:	4810      	ldr	r0, [pc, #64]	; (8025ee4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8025ea4:	f007 f902 	bl	802d0ac <__aeabi_atexit>
 8025ea8:	4c0f      	ldr	r4, [pc, #60]	; (8025ee8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8025eaa:	7823      	ldrb	r3, [r4, #0]
 8025eac:	f3bf 8f5b 	dmb	ish
 8025eb0:	07db      	lsls	r3, r3, #31
 8025eb2:	d40b      	bmi.n	8025ecc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8025eb4:	4620      	mov	r0, r4
 8025eb6:	f007 f90b 	bl	802d0d0 <__cxa_guard_acquire>
 8025eba:	b138      	cbz	r0, 8025ecc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8025ebc:	4620      	mov	r0, r4
 8025ebe:	f007 f923 	bl	802d108 <__cxa_guard_release>
 8025ec2:	4a06      	ldr	r2, [pc, #24]	; (8025edc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8025ec4:	4909      	ldr	r1, [pc, #36]	; (8025eec <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8025ec6:	480a      	ldr	r0, [pc, #40]	; (8025ef0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8025ec8:	f007 f8f0 	bl	802d0ac <__aeabi_atexit>
 8025ecc:	4b05      	ldr	r3, [pc, #20]	; (8025ee4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8025ece:	65ab      	str	r3, [r5, #88]	; 0x58
 8025ed0:	4b07      	ldr	r3, [pc, #28]	; (8025ef0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8025ed2:	65eb      	str	r3, [r5, #92]	; 0x5c
 8025ed4:	bd38      	pop	{r3, r4, r5, pc}
 8025ed6:	bf00      	nop
 8025ed8:	20012960 	.word	0x20012960
 8025edc:	20000000 	.word	0x20000000
 8025ee0:	08023fbb 	.word	0x08023fbb
 8025ee4:	200000b0 	.word	0x200000b0
 8025ee8:	20012964 	.word	0x20012964
 8025eec:	08023fb9 	.word	0x08023fb9
 8025ef0:	200000b4 	.word	0x200000b4

08025ef4 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 8025ef4:	b510      	push	{r4, lr}
 8025ef6:	4604      	mov	r4, r0
 8025ef8:	f7ff ff88 	bl	8025e0c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8025efc:	4620      	mov	r0, r4
 8025efe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025f02:	f7ff bfbd 	b.w	8025e80 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08025f08 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8025f08:	b538      	push	{r3, r4, r5, lr}
 8025f0a:	4c15      	ldr	r4, [pc, #84]	; (8025f60 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8025f0c:	7823      	ldrb	r3, [r4, #0]
 8025f0e:	f3bf 8f5b 	dmb	ish
 8025f12:	07da      	lsls	r2, r3, #31
 8025f14:	4605      	mov	r5, r0
 8025f16:	d40b      	bmi.n	8025f30 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8025f18:	4620      	mov	r0, r4
 8025f1a:	f007 f8d9 	bl	802d0d0 <__cxa_guard_acquire>
 8025f1e:	b138      	cbz	r0, 8025f30 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8025f20:	4620      	mov	r0, r4
 8025f22:	f007 f8f1 	bl	802d108 <__cxa_guard_release>
 8025f26:	4a0f      	ldr	r2, [pc, #60]	; (8025f64 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8025f28:	490f      	ldr	r1, [pc, #60]	; (8025f68 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8025f2a:	4810      	ldr	r0, [pc, #64]	; (8025f6c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8025f2c:	f007 f8be 	bl	802d0ac <__aeabi_atexit>
 8025f30:	4c0f      	ldr	r4, [pc, #60]	; (8025f70 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8025f32:	7823      	ldrb	r3, [r4, #0]
 8025f34:	f3bf 8f5b 	dmb	ish
 8025f38:	07db      	lsls	r3, r3, #31
 8025f3a:	d40b      	bmi.n	8025f54 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8025f3c:	4620      	mov	r0, r4
 8025f3e:	f007 f8c7 	bl	802d0d0 <__cxa_guard_acquire>
 8025f42:	b138      	cbz	r0, 8025f54 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8025f44:	4620      	mov	r0, r4
 8025f46:	f007 f8df 	bl	802d108 <__cxa_guard_release>
 8025f4a:	4a06      	ldr	r2, [pc, #24]	; (8025f64 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8025f4c:	4909      	ldr	r1, [pc, #36]	; (8025f74 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8025f4e:	480a      	ldr	r0, [pc, #40]	; (8025f78 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8025f50:	f007 f8ac 	bl	802d0ac <__aeabi_atexit>
 8025f54:	4b05      	ldr	r3, [pc, #20]	; (8025f6c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8025f56:	672b      	str	r3, [r5, #112]	; 0x70
 8025f58:	4b07      	ldr	r3, [pc, #28]	; (8025f78 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8025f5a:	676b      	str	r3, [r5, #116]	; 0x74
 8025f5c:	bd38      	pop	{r3, r4, r5, pc}
 8025f5e:	bf00      	nop
 8025f60:	20012958 	.word	0x20012958
 8025f64:	20000000 	.word	0x20000000
 8025f68:	08023faf 	.word	0x08023faf
 8025f6c:	200000a8 	.word	0x200000a8
 8025f70:	2001295c 	.word	0x2001295c
 8025f74:	08023fad 	.word	0x08023fad
 8025f78:	200000ac 	.word	0x200000ac

08025f7c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 8025f7c:	b538      	push	{r3, r4, r5, lr}
 8025f7e:	4c15      	ldr	r4, [pc, #84]	; (8025fd4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8025f80:	7823      	ldrb	r3, [r4, #0]
 8025f82:	f3bf 8f5b 	dmb	ish
 8025f86:	07da      	lsls	r2, r3, #31
 8025f88:	4605      	mov	r5, r0
 8025f8a:	d40b      	bmi.n	8025fa4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8025f8c:	4620      	mov	r0, r4
 8025f8e:	f007 f89f 	bl	802d0d0 <__cxa_guard_acquire>
 8025f92:	b138      	cbz	r0, 8025fa4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8025f94:	4620      	mov	r0, r4
 8025f96:	f007 f8b7 	bl	802d108 <__cxa_guard_release>
 8025f9a:	4a0f      	ldr	r2, [pc, #60]	; (8025fd8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8025f9c:	490f      	ldr	r1, [pc, #60]	; (8025fdc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8025f9e:	4810      	ldr	r0, [pc, #64]	; (8025fe0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8025fa0:	f007 f884 	bl	802d0ac <__aeabi_atexit>
 8025fa4:	4c0f      	ldr	r4, [pc, #60]	; (8025fe4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8025fa6:	7823      	ldrb	r3, [r4, #0]
 8025fa8:	f3bf 8f5b 	dmb	ish
 8025fac:	07db      	lsls	r3, r3, #31
 8025fae:	d40b      	bmi.n	8025fc8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8025fb0:	4620      	mov	r0, r4
 8025fb2:	f007 f88d 	bl	802d0d0 <__cxa_guard_acquire>
 8025fb6:	b138      	cbz	r0, 8025fc8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8025fb8:	4620      	mov	r0, r4
 8025fba:	f007 f8a5 	bl	802d108 <__cxa_guard_release>
 8025fbe:	4a06      	ldr	r2, [pc, #24]	; (8025fd8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8025fc0:	4909      	ldr	r1, [pc, #36]	; (8025fe8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8025fc2:	480a      	ldr	r0, [pc, #40]	; (8025fec <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8025fc4:	f007 f872 	bl	802d0ac <__aeabi_atexit>
 8025fc8:	4b05      	ldr	r3, [pc, #20]	; (8025fe0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8025fca:	66ab      	str	r3, [r5, #104]	; 0x68
 8025fcc:	4b07      	ldr	r3, [pc, #28]	; (8025fec <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8025fce:	66eb      	str	r3, [r5, #108]	; 0x6c
 8025fd0:	bd38      	pop	{r3, r4, r5, pc}
 8025fd2:	bf00      	nop
 8025fd4:	20012950 	.word	0x20012950
 8025fd8:	20000000 	.word	0x20000000
 8025fdc:	08023fb3 	.word	0x08023fb3
 8025fe0:	200000a0 	.word	0x200000a0
 8025fe4:	20012954 	.word	0x20012954
 8025fe8:	08023fb1 	.word	0x08023fb1
 8025fec:	200000a4 	.word	0x200000a4

08025ff0 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 8025ff0:	b510      	push	{r4, lr}
 8025ff2:	4604      	mov	r4, r0
 8025ff4:	f7ff ff88 	bl	8025f08 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8025ff8:	4620      	mov	r0, r4
 8025ffa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025ffe:	f7ff bfbd 	b.w	8025f7c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

08026002 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 8026002:	b510      	push	{r4, lr}
 8026004:	4604      	mov	r4, r0
 8026006:	f7ff fff3 	bl	8025ff0 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 802600a:	4620      	mov	r0, r4
 802600c:	f7ff ff72 	bl	8025ef4 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 8026010:	4620      	mov	r0, r4
 8026012:	f7ff fdf9 	bl	8025c08 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 8026016:	4620      	mov	r0, r4
 8026018:	f7ff fcfa 	bl	8025a10 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 802601c:	4620      	mov	r0, r4
 802601e:	f7ff fd75 	bl	8025b0c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 8026022:	4620      	mov	r0, r4
 8026024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026028:	f7ff bee0 	b.w	8025dec <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

0802602c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 802602c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026030:	e9dd 4e0c 	ldrd	r4, lr, [sp, #48]	; 0x30
 8026034:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8026038:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 802603c:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8026040:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
 8026044:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8026048:	8808      	ldrh	r0, [r1, #0]
 802604a:	fb0e 4708 	mla	r7, lr, r8, r4
 802604e:	f1be 0f00 	cmp.w	lr, #0
 8026052:	eb02 0a07 	add.w	sl, r2, r7
 8026056:	db37      	blt.n	80260c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 8026058:	45f3      	cmp	fp, lr
 802605a:	dd35      	ble.n	80260c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 802605c:	2c00      	cmp	r4, #0
 802605e:	db31      	blt.n	80260c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 8026060:	45a0      	cmp	r8, r4
 8026062:	dd2f      	ble.n	80260c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 8026064:	5dd2      	ldrb	r2, [r2, r7]
 8026066:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
 802606a:	1c62      	adds	r2, r4, #1
 802606c:	d42f      	bmi.n	80260ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 802606e:	4590      	cmp	r8, r2
 8026070:	dd2d      	ble.n	80260ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8026072:	b366      	cbz	r6, 80260ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8026074:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8026078:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 802607c:	f11e 0e01 	adds.w	lr, lr, #1
 8026080:	d429      	bmi.n	80260d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 8026082:	45f3      	cmp	fp, lr
 8026084:	dd27      	ble.n	80260d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 8026086:	f1bc 0f00 	cmp.w	ip, #0
 802608a:	f000 80a0 	beq.w	80261ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a2>
 802608e:	2c00      	cmp	r4, #0
 8026090:	db1f      	blt.n	80260d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8026092:	45a0      	cmp	r8, r4
 8026094:	dd1d      	ble.n	80260d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8026096:	f81a 2008 	ldrb.w	r2, [sl, r8]
 802609a:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 802609e:	3401      	adds	r4, #1
 80260a0:	d41c      	bmi.n	80260dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 80260a2:	45a0      	cmp	r8, r4
 80260a4:	dd1a      	ble.n	80260dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 80260a6:	b1de      	cbz	r6, 80260e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb4>
 80260a8:	44d0      	add	r8, sl
 80260aa:	f898 2001 	ldrb.w	r2, [r8, #1]
 80260ae:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80260b2:	2e0f      	cmp	r6, #15
 80260b4:	d915      	bls.n	80260e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb6>
 80260b6:	4b49      	ldr	r3, [pc, #292]	; (80261dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b0>)
 80260b8:	4a49      	ldr	r2, [pc, #292]	; (80261e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b4>)
 80260ba:	484a      	ldr	r0, [pc, #296]	; (80261e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b8>)
 80260bc:	f240 11ef 	movw	r1, #495	; 0x1ef
 80260c0:	f008 f8d2 	bl	802e268 <__assert_func>
 80260c4:	4681      	mov	r9, r0
 80260c6:	e7d0      	b.n	802606a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x3e>
 80260c8:	4607      	mov	r7, r0
 80260ca:	4681      	mov	r9, r0
 80260cc:	e7d6      	b.n	802607c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 80260ce:	4607      	mov	r7, r0
 80260d0:	e7d4      	b.n	802607c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 80260d2:	4686      	mov	lr, r0
 80260d4:	e7e3      	b.n	802609e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x72>
 80260d6:	4603      	mov	r3, r0
 80260d8:	4686      	mov	lr, r0
 80260da:	e7ea      	b.n	80260b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 80260dc:	4603      	mov	r3, r0
 80260de:	e7e8      	b.n	80260b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 80260e0:	4603      	mov	r3, r0
 80260e2:	f1bc 0f0f 	cmp.w	ip, #15
 80260e6:	d8e6      	bhi.n	80260b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 80260e8:	ea4f 4409 	mov.w	r4, r9, lsl #16
 80260ec:	fb16 f80c 	smulbb	r8, r6, ip
 80260f0:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80260f4:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80260f8:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80260fc:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8026100:	ea44 0909 	orr.w	r9, r4, r9
 8026104:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026108:	f1cc 0410 	rsb	r4, ip, #16
 802610c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8026110:	1ba4      	subs	r4, r4, r6
 8026112:	041a      	lsls	r2, r3, #16
 8026114:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 8026118:	ea4a 0707 	orr.w	r7, sl, r7
 802611c:	4377      	muls	r7, r6
 802611e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8026122:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8026126:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802612a:	fb04 7409 	mla	r4, r4, r9, r7
 802612e:	4313      	orrs	r3, r2
 8026130:	ea4f 420e 	mov.w	r2, lr, lsl #16
 8026134:	fb08 4303 	mla	r3, r8, r3, r4
 8026138:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802613c:	f42e 64fc 	bic.w	r4, lr, #2016	; 0x7e0
 8026140:	4322      	orrs	r2, r4
 8026142:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 8026146:	fb0c 3202 	mla	r2, ip, r2, r3
 802614a:	0d53      	lsrs	r3, r2, #21
 802614c:	0952      	lsrs	r2, r2, #5
 802614e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026152:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026156:	431a      	orrs	r2, r3
 8026158:	b293      	uxth	r3, r2
 802615a:	b2af      	uxth	r7, r5
 802615c:	1202      	asrs	r2, r0, #8
 802615e:	43ed      	mvns	r5, r5
 8026160:	b2ed      	uxtb	r5, r5
 8026162:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8026166:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802616a:	fb12 f205 	smulbb	r2, r2, r5
 802616e:	10c6      	asrs	r6, r0, #3
 8026170:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8026174:	fb0c 2c07 	mla	ip, ip, r7, r2
 8026178:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802617c:	10da      	asrs	r2, r3, #3
 802617e:	fb16 f605 	smulbb	r6, r6, r5
 8026182:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8026186:	fb02 6207 	mla	r2, r2, r7, r6
 802618a:	b296      	uxth	r6, r2
 802618c:	00c2      	lsls	r2, r0, #3
 802618e:	00dc      	lsls	r4, r3, #3
 8026190:	b2d2      	uxtb	r2, r2
 8026192:	b2e4      	uxtb	r4, r4
 8026194:	fb12 f205 	smulbb	r2, r2, r5
 8026198:	fb04 2207 	mla	r2, r4, r7, r2
 802619c:	fa1f fc8c 	uxth.w	ip, ip
 80261a0:	b292      	uxth	r2, r2
 80261a2:	f10c 0301 	add.w	r3, ip, #1
 80261a6:	1c50      	adds	r0, r2, #1
 80261a8:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 80261ac:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80261b0:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80261b4:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80261b8:	4313      	orrs	r3, r2
 80261ba:	1c72      	adds	r2, r6, #1
 80261bc:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 80261c0:	0952      	lsrs	r2, r2, #5
 80261c2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80261c6:	4313      	orrs	r3, r2
 80261c8:	800b      	strh	r3, [r1, #0]
 80261ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80261ce:	2e0f      	cmp	r6, #15
 80261d0:	f63f af71 	bhi.w	80260b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 80261d4:	4603      	mov	r3, r0
 80261d6:	4686      	mov	lr, r0
 80261d8:	e786      	b.n	80260e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xbc>
 80261da:	bf00      	nop
 80261dc:	08034370 	.word	0x08034370
 80261e0:	08034972 	.word	0x08034972
 80261e4:	080343f8 	.word	0x080343f8

080261e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80261e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80261ec:	ed2d 8b08 	vpush	{d8-d11}
 80261f0:	b09b      	sub	sp, #108	; 0x6c
 80261f2:	e9dd 982d 	ldrd	r9, r8, [sp, #180]	; 0xb4
 80261f6:	9309      	str	r3, [sp, #36]	; 0x24
 80261f8:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 80261fc:	9e31      	ldr	r6, [sp, #196]	; 0xc4
 80261fe:	930a      	str	r3, [sp, #40]	; 0x28
 8026200:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8026204:	930e      	str	r3, [sp, #56]	; 0x38
 8026206:	910d      	str	r1, [sp, #52]	; 0x34
 8026208:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 802620c:	9018      	str	r0, [sp, #96]	; 0x60
 802620e:	6870      	ldr	r0, [r6, #4]
 8026210:	9217      	str	r2, [sp, #92]	; 0x5c
 8026212:	fb00 1303 	mla	r3, r0, r3, r1
 8026216:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8026218:	6831      	ldr	r1, [r6, #0]
 802621a:	6856      	ldr	r6, [r2, #4]
 802621c:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 8026220:	eb01 0a43 	add.w	sl, r1, r3, lsl #1
 8026224:	6813      	ldr	r3, [r2, #0]
 8026226:	930c      	str	r3, [sp, #48]	; 0x30
 8026228:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802622a:	43db      	mvns	r3, r3
 802622c:	b2db      	uxtb	r3, r3
 802622e:	eeb0 aa40 	vmov.f32	s20, s0
 8026232:	eef0 9a60 	vmov.f32	s19, s1
 8026236:	eeb0 9a41 	vmov.f32	s18, s2
 802623a:	eeb0 8a62 	vmov.f32	s16, s5
 802623e:	eef0 8a43 	vmov.f32	s17, s6
 8026242:	eef0 ba44 	vmov.f32	s23, s8
 8026246:	eeb0 ba64 	vmov.f32	s22, s9
 802624a:	eef0 aa45 	vmov.f32	s21, s10
 802624e:	3604      	adds	r6, #4
 8026250:	930b      	str	r3, [sp, #44]	; 0x2c
 8026252:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026254:	2b00      	cmp	r3, #0
 8026256:	dc03      	bgt.n	8026260 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8026258:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802625a:	2b00      	cmp	r3, #0
 802625c:	f340 8215 	ble.w	802668a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8026260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026262:	2b00      	cmp	r3, #0
 8026264:	f340 8102 	ble.w	802646c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x284>
 8026268:	ea5f 4229 	movs.w	r2, r9, asr #16
 802626c:	ea4f 4328 	mov.w	r3, r8, asr #16
 8026270:	d42c      	bmi.n	80262cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8026272:	1c51      	adds	r1, r2, #1
 8026274:	428c      	cmp	r4, r1
 8026276:	dd2c      	ble.n	80262d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8026278:	2b00      	cmp	r3, #0
 802627a:	db2a      	blt.n	80262d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 802627c:	980a      	ldr	r0, [sp, #40]	; 0x28
 802627e:	1c59      	adds	r1, r3, #1
 8026280:	4288      	cmp	r0, r1
 8026282:	dd26      	ble.n	80262d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8026284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026286:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8026288:	3b01      	subs	r3, #1
 802628a:	fb02 9203 	mla	r2, r2, r3, r9
 802628e:	1412      	asrs	r2, r2, #16
 8026290:	d429      	bmi.n	80262e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8026292:	3201      	adds	r2, #1
 8026294:	4294      	cmp	r4, r2
 8026296:	dd26      	ble.n	80262e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8026298:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 802629a:	fb02 8303 	mla	r3, r2, r3, r8
 802629e:	141b      	asrs	r3, r3, #16
 80262a0:	d421      	bmi.n	80262e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 80262a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80262a4:	3301      	adds	r3, #1
 80262a6:	429a      	cmp	r2, r3
 80262a8:	dd1d      	ble.n	80262e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 80262aa:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80262ae:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 80262b2:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 80262b6:	9312      	str	r3, [sp, #72]	; 0x48
 80262b8:	f1be 0f00 	cmp.w	lr, #0
 80262bc:	f300 8138 	bgt.w	8026530 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x348>
 80262c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80262c2:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80262c6:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 80262ca:	e0d1      	b.n	8026470 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x288>
 80262cc:	1c51      	adds	r1, r2, #1
 80262ce:	f040 80c3 	bne.w	8026458 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 80262d2:	42a2      	cmp	r2, r4
 80262d4:	f280 80c0 	bge.w	8026458 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 80262d8:	1c5f      	adds	r7, r3, #1
 80262da:	f2c0 80bd 	blt.w	8026458 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 80262de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80262e0:	4293      	cmp	r3, r2
 80262e2:	f280 80b9 	bge.w	8026458 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 80262e6:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80262ea:	4657      	mov	r7, sl
 80262ec:	f1bb 0f00 	cmp.w	fp, #0
 80262f0:	dde6      	ble.n	80262c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 80262f2:	ea5f 4229 	movs.w	r2, r9, asr #16
 80262f6:	ea4f 4328 	mov.w	r3, r8, asr #16
 80262fa:	f3c9 3003 	ubfx	r0, r9, #12, #4
 80262fe:	f3c8 3103 	ubfx	r1, r8, #12, #4
 8026302:	f100 80fc 	bmi.w	80264fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x316>
 8026306:	f102 0c01 	add.w	ip, r2, #1
 802630a:	4564      	cmp	r4, ip
 802630c:	f340 80f9 	ble.w	8026502 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x31a>
 8026310:	2b00      	cmp	r3, #0
 8026312:	f2c0 80f6 	blt.w	8026502 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x31a>
 8026316:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8026318:	f103 0c01 	add.w	ip, r3, #1
 802631c:	4565      	cmp	r5, ip
 802631e:	f340 80f0 	ble.w	8026502 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x31a>
 8026322:	fb03 2304 	mla	r3, r3, r4, r2
 8026326:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026328:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802632a:	441a      	add	r2, r3
 802632c:	5ceb      	ldrb	r3, [r5, r3]
 802632e:	f836 e013 	ldrh.w	lr, [r6, r3, lsl #1]
 8026332:	2800      	cmp	r0, #0
 8026334:	f000 80db 	beq.w	80264ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x306>
 8026338:	7853      	ldrb	r3, [r2, #1]
 802633a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802633e:	9313      	str	r3, [sp, #76]	; 0x4c
 8026340:	b141      	cbz	r1, 8026354 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x16c>
 8026342:	1913      	adds	r3, r2, r4
 8026344:	5d12      	ldrb	r2, [r2, r4]
 8026346:	785b      	ldrb	r3, [r3, #1]
 8026348:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 802634c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8026350:	9210      	str	r2, [sp, #64]	; 0x40
 8026352:	9314      	str	r3, [sp, #80]	; 0x50
 8026354:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8026356:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8026358:	fb10 f201 	smulbb	r2, r0, r1
 802635c:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8026360:	10d2      	asrs	r2, r2, #3
 8026362:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8026366:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802636a:	ea4c 0c03 	orr.w	ip, ip, r3
 802636e:	ebc2 0340 	rsb	r3, r2, r0, lsl #1
 8026372:	930f      	str	r3, [sp, #60]	; 0x3c
 8026374:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8026376:	041b      	lsls	r3, r3, #16
 8026378:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 802637c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8026380:	432b      	orrs	r3, r5
 8026382:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8026384:	4353      	muls	r3, r2
 8026386:	fb05 330c 	mla	r3, r5, ip, r3
 802638a:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 802638e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8026392:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8026396:	ea4c 0e0e 	orr.w	lr, ip, lr
 802639a:	f1c1 0c10 	rsb	ip, r1, #16
 802639e:	ebac 0c00 	sub.w	ip, ip, r0
 80263a2:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80263a6:	fb0c 3c0e 	mla	ip, ip, lr, r3
 80263aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80263ac:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80263ae:	0418      	lsls	r0, r3, #16
 80263b0:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80263b4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80263b8:	4318      	orrs	r0, r3
 80263ba:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 80263be:	fb02 c200 	mla	r2, r2, r0, ip
 80263c2:	0d53      	lsrs	r3, r2, #21
 80263c4:	0952      	lsrs	r2, r2, #5
 80263c6:	f8b7 c000 	ldrh.w	ip, [r7]
 80263ca:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80263ce:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80263d2:	431a      	orrs	r2, r3
 80263d4:	b292      	uxth	r2, r2
 80263d6:	ea4f 212c 	mov.w	r1, ip, asr #8
 80263da:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80263de:	1210      	asrs	r0, r2, #8
 80263e0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80263e4:	fb11 f105 	smulbb	r1, r1, r5
 80263e8:	ea4f 0eec 	mov.w	lr, ip, asr #3
 80263ec:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80263f0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80263f4:	fb00 1003 	mla	r0, r0, r3, r1
 80263f8:	fa5f fc8c 	uxtb.w	ip, ip
 80263fc:	10d1      	asrs	r1, r2, #3
 80263fe:	00d2      	lsls	r2, r2, #3
 8026400:	fb1c fc05 	smulbb	ip, ip, r5
 8026404:	b2d2      	uxtb	r2, r2
 8026406:	fb02 c203 	mla	r2, r2, r3, ip
 802640a:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 802640e:	b280      	uxth	r0, r0
 8026410:	b292      	uxth	r2, r2
 8026412:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8026416:	fb1e fe05 	smulbb	lr, lr, r5
 802641a:	fb01 e103 	mla	r1, r1, r3, lr
 802641e:	f102 0c01 	add.w	ip, r2, #1
 8026422:	1c43      	adds	r3, r0, #1
 8026424:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8026428:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802642c:	b289      	uxth	r1, r1
 802642e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8026432:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8026436:	4313      	orrs	r3, r2
 8026438:	1c4a      	adds	r2, r1, #1
 802643a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802643e:	0949      	lsrs	r1, r1, #5
 8026440:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026444:	430b      	orrs	r3, r1
 8026446:	803b      	strh	r3, [r7, #0]
 8026448:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 802644a:	4499      	add	r9, r3
 802644c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802644e:	3702      	adds	r7, #2
 8026450:	4498      	add	r8, r3
 8026452:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026456:	e749      	b.n	80262ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8026458:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 802645a:	4499      	add	r9, r3
 802645c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802645e:	4498      	add	r8, r3
 8026460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026462:	3b01      	subs	r3, #1
 8026464:	9309      	str	r3, [sp, #36]	; 0x24
 8026466:	f10a 0a02 	add.w	sl, sl, #2
 802646a:	e6f9      	b.n	8026260 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 802646c:	f47f af0a 	bne.w	8026284 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 8026470:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026472:	2b00      	cmp	r3, #0
 8026474:	f340 8109 	ble.w	802668a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8026478:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802647c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026480:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8026484:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026486:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802648a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802648e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8026492:	eef0 6a48 	vmov.f32	s13, s16
 8026496:	ee69 7a27 	vmul.f32	s15, s18, s15
 802649a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802649e:	ee37 8a48 	vsub.f32	s16, s14, s16
 80264a2:	ee16 9a90 	vmov	r9, s13
 80264a6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80264aa:	eef0 6a68 	vmov.f32	s13, s17
 80264ae:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80264b2:	ee18 2a10 	vmov	r2, s16
 80264b6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80264ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80264be:	ee18 2a90 	vmov	r2, s17
 80264c2:	932f      	str	r3, [sp, #188]	; 0xbc
 80264c4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80264c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80264ca:	9330      	str	r3, [sp, #192]	; 0xc0
 80264cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80264ce:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80264d0:	3b01      	subs	r3, #1
 80264d2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80264d6:	930d      	str	r3, [sp, #52]	; 0x34
 80264d8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80264da:	bf08      	it	eq
 80264dc:	4613      	moveq	r3, r2
 80264de:	ee16 8a90 	vmov	r8, s13
 80264e2:	9309      	str	r3, [sp, #36]	; 0x24
 80264e4:	eef0 8a67 	vmov.f32	s17, s15
 80264e8:	eeb0 8a47 	vmov.f32	s16, s14
 80264ec:	e6b1      	b.n	8026252 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 80264ee:	2900      	cmp	r1, #0
 80264f0:	f43f af30 	beq.w	8026354 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x16c>
 80264f4:	5d13      	ldrb	r3, [r2, r4]
 80264f6:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80264fa:	9310      	str	r3, [sp, #64]	; 0x40
 80264fc:	e72a      	b.n	8026354 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x16c>
 80264fe:	1c55      	adds	r5, r2, #1
 8026500:	d1a2      	bne.n	8026448 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 8026502:	4294      	cmp	r4, r2
 8026504:	dda0      	ble.n	8026448 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 8026506:	1c5d      	adds	r5, r3, #1
 8026508:	db9e      	blt.n	8026448 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 802650a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802650c:	429d      	cmp	r5, r3
 802650e:	dd9b      	ble.n	8026448 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 8026510:	e9cd 3003 	strd	r3, r0, [sp, #12]
 8026514:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8026516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026518:	9202      	str	r2, [sp, #8]
 802651a:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802651e:	e9cd 4300 	strd	r4, r3, [sp]
 8026522:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026524:	9818      	ldr	r0, [sp, #96]	; 0x60
 8026526:	4633      	mov	r3, r6
 8026528:	4639      	mov	r1, r7
 802652a:	f7ff fd7f 	bl	802602c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 802652e:	e78b      	b.n	8026448 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 8026530:	ea4f 4329 	mov.w	r3, r9, asr #16
 8026534:	ea4f 4228 	mov.w	r2, r8, asr #16
 8026538:	fb04 3202 	mla	r2, r4, r2, r3
 802653c:	990c      	ldr	r1, [sp, #48]	; 0x30
 802653e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026540:	4413      	add	r3, r2
 8026542:	5c8a      	ldrb	r2, [r1, r2]
 8026544:	f3c9 3c03 	ubfx	ip, r9, #12, #4
 8026548:	f3c8 3003 	ubfx	r0, r8, #12, #4
 802654c:	f836 1012 	ldrh.w	r1, [r6, r2, lsl #1]
 8026550:	f1bc 0f00 	cmp.w	ip, #0
 8026554:	f000 8091 	beq.w	802667a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x492>
 8026558:	785a      	ldrb	r2, [r3, #1]
 802655a:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 802655e:	9215      	str	r2, [sp, #84]	; 0x54
 8026560:	b140      	cbz	r0, 8026574 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38c>
 8026562:	191a      	adds	r2, r3, r4
 8026564:	5d1b      	ldrb	r3, [r3, r4]
 8026566:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802656a:	9311      	str	r3, [sp, #68]	; 0x44
 802656c:	7853      	ldrb	r3, [r2, #1]
 802656e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8026572:	9316      	str	r3, [sp, #88]	; 0x58
 8026574:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8026576:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8026578:	fb1c f200 	smulbb	r2, ip, r0
 802657c:	041f      	lsls	r7, r3, #16
 802657e:	10d2      	asrs	r2, r2, #3
 8026580:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8026584:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 8026588:	431f      	orrs	r7, r3
 802658a:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 802658e:	9319      	str	r3, [sp, #100]	; 0x64
 8026590:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8026592:	041b      	lsls	r3, r3, #16
 8026594:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 8026598:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802659c:	ea43 030b 	orr.w	r3, r3, fp
 80265a0:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80265a2:	4353      	muls	r3, r2
 80265a4:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80265a8:	fb05 3707 	mla	r7, r5, r7, r3
 80265ac:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80265b0:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 80265b4:	ea43 0b01 	orr.w	fp, r3, r1
 80265b8:	f1c0 0110 	rsb	r1, r0, #16
 80265bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80265be:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80265c0:	eba1 0c0c 	sub.w	ip, r1, ip
 80265c4:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80265c8:	fb0c 770b 	mla	r7, ip, fp, r7
 80265cc:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80265d0:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 80265d4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80265d8:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 80265dc:	ea4c 0c0b 	orr.w	ip, ip, fp
 80265e0:	fb02 770c 	mla	r7, r2, ip, r7
 80265e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80265e6:	0d79      	lsrs	r1, r7, #21
 80265e8:	8812      	ldrh	r2, [r2, #0]
 80265ea:	097f      	lsrs	r7, r7, #5
 80265ec:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80265f0:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80265f4:	430f      	orrs	r7, r1
 80265f6:	1211      	asrs	r1, r2, #8
 80265f8:	b2bb      	uxth	r3, r7
 80265fa:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80265fe:	fb11 f105 	smulbb	r1, r1, r5
 8026602:	1218      	asrs	r0, r3, #8
 8026604:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8026606:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802660a:	fb00 1005 	mla	r0, r0, r5, r1
 802660e:	10d7      	asrs	r7, r2, #3
 8026610:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8026612:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8026616:	fb17 f705 	smulbb	r7, r7, r5
 802661a:	10d9      	asrs	r1, r3, #3
 802661c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802661e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8026622:	fb01 7105 	mla	r1, r1, r5, r7
 8026626:	00d2      	lsls	r2, r2, #3
 8026628:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802662a:	b2d2      	uxtb	r2, r2
 802662c:	fb12 f205 	smulbb	r2, r2, r5
 8026630:	00db      	lsls	r3, r3, #3
 8026632:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8026634:	b2db      	uxtb	r3, r3
 8026636:	b280      	uxth	r0, r0
 8026638:	fb03 2305 	mla	r3, r3, r5, r2
 802663c:	b29b      	uxth	r3, r3
 802663e:	b289      	uxth	r1, r1
 8026640:	1c42      	adds	r2, r0, #1
 8026642:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026646:	1c4f      	adds	r7, r1, #1
 8026648:	1c5a      	adds	r2, r3, #1
 802664a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802664e:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8026652:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8026656:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802665a:	0949      	lsrs	r1, r1, #5
 802665c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802665e:	4310      	orrs	r0, r2
 8026660:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026664:	4308      	orrs	r0, r1
 8026666:	f823 0b02 	strh.w	r0, [r3], #2
 802666a:	930f      	str	r3, [sp, #60]	; 0x3c
 802666c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 802666e:	4499      	add	r9, r3
 8026670:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026672:	f10e 3eff 	add.w	lr, lr, #4294967295
 8026676:	4498      	add	r8, r3
 8026678:	e61e      	b.n	80262b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 802667a:	2800      	cmp	r0, #0
 802667c:	f43f af7a 	beq.w	8026574 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38c>
 8026680:	5d1b      	ldrb	r3, [r3, r4]
 8026682:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8026686:	9311      	str	r3, [sp, #68]	; 0x44
 8026688:	e774      	b.n	8026574 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38c>
 802668a:	b01b      	add	sp, #108	; 0x6c
 802668c:	ecbd 8b08 	vpop	{d8-d11}
 8026690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026694 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8026694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026698:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 802669c:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 80266a0:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80266a4:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 80266a8:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 80266ac:	8808      	ldrh	r0, [r1, #0]
 80266ae:	fb06 570e 	mla	r7, r6, lr, r5
 80266b2:	2e00      	cmp	r6, #0
 80266b4:	eb02 0807 	add.w	r8, r2, r7
 80266b8:	db38      	blt.n	802672c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 80266ba:	45b1      	cmp	r9, r6
 80266bc:	dd36      	ble.n	802672c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 80266be:	2d00      	cmp	r5, #0
 80266c0:	db32      	blt.n	8026728 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 80266c2:	45ae      	cmp	lr, r5
 80266c4:	dd30      	ble.n	8026728 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 80266c6:	5dd2      	ldrb	r2, [r2, r7]
 80266c8:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 80266cc:	1c6a      	adds	r2, r5, #1
 80266ce:	d430      	bmi.n	8026732 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 80266d0:	4596      	cmp	lr, r2
 80266d2:	dd2e      	ble.n	8026732 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 80266d4:	b36c      	cbz	r4, 8026732 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 80266d6:	f898 2001 	ldrb.w	r2, [r8, #1]
 80266da:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80266de:	3601      	adds	r6, #1
 80266e0:	d42b      	bmi.n	802673a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 80266e2:	45b1      	cmp	r9, r6
 80266e4:	dd29      	ble.n	802673a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 80266e6:	f1bc 0f00 	cmp.w	ip, #0
 80266ea:	d028      	beq.n	802673e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xaa>
 80266ec:	2d00      	cmp	r5, #0
 80266ee:	db22      	blt.n	8026736 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 80266f0:	45ae      	cmp	lr, r5
 80266f2:	dd20      	ble.n	8026736 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 80266f4:	f818 600e 	ldrb.w	r6, [r8, lr]
 80266f8:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 80266fc:	3501      	adds	r5, #1
 80266fe:	d407      	bmi.n	8026710 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8026700:	45ae      	cmp	lr, r5
 8026702:	dd05      	ble.n	8026710 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8026704:	b134      	cbz	r4, 8026714 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8026706:	44c6      	add	lr, r8
 8026708:	f89e 0001 	ldrb.w	r0, [lr, #1]
 802670c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8026710:	2c0f      	cmp	r4, #15
 8026712:	d802      	bhi.n	802671a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8026714:	f1bc 0f0f 	cmp.w	ip, #15
 8026718:	d914      	bls.n	8026744 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xb0>
 802671a:	4b26      	ldr	r3, [pc, #152]	; (80267b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x120>)
 802671c:	4a26      	ldr	r2, [pc, #152]	; (80267b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x124>)
 802671e:	4827      	ldr	r0, [pc, #156]	; (80267bc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x128>)
 8026720:	f240 11ef 	movw	r1, #495	; 0x1ef
 8026724:	f007 fda0 	bl	802e268 <__assert_func>
 8026728:	4607      	mov	r7, r0
 802672a:	e7cf      	b.n	80266cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x38>
 802672c:	4602      	mov	r2, r0
 802672e:	4607      	mov	r7, r0
 8026730:	e7d5      	b.n	80266de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 8026732:	4602      	mov	r2, r0
 8026734:	e7d3      	b.n	80266de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 8026736:	4606      	mov	r6, r0
 8026738:	e7e0      	b.n	80266fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x68>
 802673a:	4606      	mov	r6, r0
 802673c:	e7e8      	b.n	8026710 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 802673e:	2c0f      	cmp	r4, #15
 8026740:	d8eb      	bhi.n	802671a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8026742:	4606      	mov	r6, r0
 8026744:	043d      	lsls	r5, r7, #16
 8026746:	fb14 f30c 	smulbb	r3, r4, ip
 802674a:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 802674e:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8026752:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8026756:	10db      	asrs	r3, r3, #3
 8026758:	432f      	orrs	r7, r5
 802675a:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802675e:	f1cc 0510 	rsb	r5, ip, #16
 8026762:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026766:	1b2d      	subs	r5, r5, r4
 8026768:	ea4e 0202 	orr.w	r2, lr, r2
 802676c:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8026770:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8026774:	4354      	muls	r4, r2
 8026776:	fb05 4507 	mla	r5, r5, r7, r4
 802677a:	0404      	lsls	r4, r0, #16
 802677c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8026780:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026784:	4320      	orrs	r0, r4
 8026786:	fb03 5400 	mla	r4, r3, r0, r5
 802678a:	0430      	lsls	r0, r6, #16
 802678c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8026790:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8026794:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8026798:	4330      	orrs	r0, r6
 802679a:	fb03 4000 	mla	r0, r3, r0, r4
 802679e:	0d43      	lsrs	r3, r0, #21
 80267a0:	0940      	lsrs	r0, r0, #5
 80267a2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80267a6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80267aa:	4318      	orrs	r0, r3
 80267ac:	8008      	strh	r0, [r1, #0]
 80267ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80267b2:	bf00      	nop
 80267b4:	08034370 	.word	0x08034370
 80267b8:	08034972 	.word	0x08034972
 80267bc:	080343f8 	.word	0x080343f8

080267c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80267c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80267c4:	ed2d 8b0a 	vpush	{d8-d12}
 80267c8:	b095      	sub	sp, #84	; 0x54
 80267ca:	e9dd 9629 	ldrd	r9, r6, [sp, #164]	; 0xa4
 80267ce:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
 80267d0:	9306      	str	r3, [sp, #24]
 80267d2:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 80267d6:	9109      	str	r1, [sp, #36]	; 0x24
 80267d8:	9307      	str	r3, [sp, #28]
 80267da:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80267de:	9012      	str	r0, [sp, #72]	; 0x48
 80267e0:	6878      	ldr	r0, [r7, #4]
 80267e2:	9211      	str	r2, [sp, #68]	; 0x44
 80267e4:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 80267e6:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 80267ea:	fb00 1303 	mla	r3, r0, r3, r1
 80267ee:	6839      	ldr	r1, [r7, #0]
 80267f0:	6857      	ldr	r7, [r2, #4]
 80267f2:	eb01 0a43 	add.w	sl, r1, r3, lsl #1
 80267f6:	6813      	ldr	r3, [r2, #0]
 80267f8:	9308      	str	r3, [sp, #32]
 80267fa:	eeb0 aa40 	vmov.f32	s20, s0
 80267fe:	eef0 9a60 	vmov.f32	s19, s1
 8026802:	eeb0 9a41 	vmov.f32	s18, s2
 8026806:	eeb0 8a62 	vmov.f32	s16, s5
 802680a:	eef0 8a43 	vmov.f32	s17, s6
 802680e:	eeb0 ca44 	vmov.f32	s24, s8
 8026812:	eef0 ba64 	vmov.f32	s23, s9
 8026816:	eeb0 ba45 	vmov.f32	s22, s10
 802681a:	3704      	adds	r7, #4
 802681c:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8026820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026822:	2b00      	cmp	r3, #0
 8026824:	dc03      	bgt.n	802682e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8026826:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8026828:	2b00      	cmp	r3, #0
 802682a:	f340 819a 	ble.w	8026b62 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a2>
 802682e:	9b06      	ldr	r3, [sp, #24]
 8026830:	2b00      	cmp	r3, #0
 8026832:	f340 80c4 	ble.w	80269be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 8026836:	ea5f 4229 	movs.w	r2, r9, asr #16
 802683a:	ea4f 4326 	mov.w	r3, r6, asr #16
 802683e:	d429      	bmi.n	8026894 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 8026840:	1c51      	adds	r1, r2, #1
 8026842:	428c      	cmp	r4, r1
 8026844:	dd29      	ble.n	802689a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 8026846:	2b00      	cmp	r3, #0
 8026848:	db27      	blt.n	802689a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 802684a:	9807      	ldr	r0, [sp, #28]
 802684c:	1c59      	adds	r1, r3, #1
 802684e:	4288      	cmp	r0, r1
 8026850:	dd23      	ble.n	802689a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 8026852:	9b06      	ldr	r3, [sp, #24]
 8026854:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8026856:	3b01      	subs	r3, #1
 8026858:	fb02 9203 	mla	r2, r2, r3, r9
 802685c:	1412      	asrs	r2, r2, #16
 802685e:	d425      	bmi.n	80268ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 8026860:	3201      	adds	r2, #1
 8026862:	4294      	cmp	r4, r2
 8026864:	dd22      	ble.n	80268ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 8026866:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8026868:	fb02 6303 	mla	r3, r2, r3, r6
 802686c:	141b      	asrs	r3, r3, #16
 802686e:	d41d      	bmi.n	80268ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 8026870:	9a07      	ldr	r2, [sp, #28]
 8026872:	3301      	adds	r3, #1
 8026874:	429a      	cmp	r2, r3
 8026876:	dd19      	ble.n	80268ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 8026878:	f8dd 8018 	ldr.w	r8, [sp, #24]
 802687c:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8026880:	f1b8 0f00 	cmp.w	r8, #0
 8026884:	f300 80f8 	bgt.w	8026a78 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 8026888:	9b06      	ldr	r3, [sp, #24]
 802688a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802688e:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 8026892:	e096      	b.n	80269c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x202>
 8026894:	1c51      	adds	r1, r2, #1
 8026896:	f040 8088 	bne.w	80269aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 802689a:	42a2      	cmp	r2, r4
 802689c:	f280 8085 	bge.w	80269aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 80268a0:	1c5a      	adds	r2, r3, #1
 80268a2:	f2c0 8082 	blt.w	80269aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 80268a6:	9a07      	ldr	r2, [sp, #28]
 80268a8:	4293      	cmp	r3, r2
 80268aa:	da7e      	bge.n	80269aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 80268ac:	f8dd b018 	ldr.w	fp, [sp, #24]
 80268b0:	46d0      	mov	r8, sl
 80268b2:	f1bb 0f00 	cmp.w	fp, #0
 80268b6:	dde7      	ble.n	8026888 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 80268b8:	ea5f 4229 	movs.w	r2, r9, asr #16
 80268bc:	ea4f 4326 	mov.w	r3, r6, asr #16
 80268c0:	f3c9 3003 	ubfx	r0, r9, #12, #4
 80268c4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80268c8:	f100 80c0 	bmi.w	8026a4c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28c>
 80268cc:	f102 0c01 	add.w	ip, r2, #1
 80268d0:	4564      	cmp	r4, ip
 80268d2:	f340 80bd 	ble.w	8026a50 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 80268d6:	2b00      	cmp	r3, #0
 80268d8:	f2c0 80ba 	blt.w	8026a50 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 80268dc:	9d07      	ldr	r5, [sp, #28]
 80268de:	f103 0c01 	add.w	ip, r3, #1
 80268e2:	4565      	cmp	r5, ip
 80268e4:	f340 80b4 	ble.w	8026a50 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 80268e8:	fb03 2304 	mla	r3, r3, r4, r2
 80268ec:	9d08      	ldr	r5, [sp, #32]
 80268ee:	9a08      	ldr	r2, [sp, #32]
 80268f0:	441a      	add	r2, r3
 80268f2:	5ceb      	ldrb	r3, [r5, r3]
 80268f4:	f837 e013 	ldrh.w	lr, [r7, r3, lsl #1]
 80268f8:	2800      	cmp	r0, #0
 80268fa:	f000 809f 	beq.w	8026a3c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27c>
 80268fe:	7853      	ldrb	r3, [r2, #1]
 8026900:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8026904:	930d      	str	r3, [sp, #52]	; 0x34
 8026906:	b141      	cbz	r1, 802691a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 8026908:	1913      	adds	r3, r2, r4
 802690a:	5d12      	ldrb	r2, [r2, r4]
 802690c:	785b      	ldrb	r3, [r3, #1]
 802690e:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8026912:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8026916:	920a      	str	r2, [sp, #40]	; 0x28
 8026918:	930e      	str	r3, [sp, #56]	; 0x38
 802691a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802691c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802691e:	fb10 f201 	smulbb	r2, r0, r1
 8026922:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8026926:	10d2      	asrs	r2, r2, #3
 8026928:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802692c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8026930:	ea4c 0c03 	orr.w	ip, ip, r3
 8026934:	ebc2 0340 	rsb	r3, r2, r0, lsl #1
 8026938:	930c      	str	r3, [sp, #48]	; 0x30
 802693a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802693c:	041b      	lsls	r3, r3, #16
 802693e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8026942:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8026946:	432b      	orrs	r3, r5
 8026948:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802694a:	4353      	muls	r3, r2
 802694c:	fb05 330c 	mla	r3, r5, ip, r3
 8026950:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8026954:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8026958:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802695c:	ea4c 0e0e 	orr.w	lr, ip, lr
 8026960:	f1c1 0c10 	rsb	ip, r1, #16
 8026964:	ebac 0c00 	sub.w	ip, ip, r0
 8026968:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 802696c:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8026970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026972:	0418      	lsls	r0, r3, #16
 8026974:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8026978:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802697c:	4318      	orrs	r0, r3
 802697e:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8026982:	fb02 c200 	mla	r2, r2, r0, ip
 8026986:	0d53      	lsrs	r3, r2, #21
 8026988:	0952      	lsrs	r2, r2, #5
 802698a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802698e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026992:	431a      	orrs	r2, r3
 8026994:	f8a8 2000 	strh.w	r2, [r8]
 8026998:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802699a:	4499      	add	r9, r3
 802699c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802699e:	f108 0802 	add.w	r8, r8, #2
 80269a2:	441e      	add	r6, r3
 80269a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80269a8:	e783      	b.n	80268b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 80269aa:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80269ac:	4499      	add	r9, r3
 80269ae:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80269b0:	441e      	add	r6, r3
 80269b2:	9b06      	ldr	r3, [sp, #24]
 80269b4:	3b01      	subs	r3, #1
 80269b6:	9306      	str	r3, [sp, #24]
 80269b8:	f10a 0a02 	add.w	sl, sl, #2
 80269bc:	e737      	b.n	802682e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 80269be:	f47f af48 	bne.w	8026852 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 80269c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80269c4:	2b00      	cmp	r3, #0
 80269c6:	f340 80cc 	ble.w	8026b62 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a2>
 80269ca:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80269ce:	ee79 9aab 	vadd.f32	s19, s19, s23
 80269d2:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 80269d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80269d8:	ee39 9a0b 	vadd.f32	s18, s18, s22
 80269dc:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80269e0:	eef0 6a48 	vmov.f32	s13, s16
 80269e4:	ee69 7a27 	vmul.f32	s15, s18, s15
 80269e8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80269ec:	ee37 8a48 	vsub.f32	s16, s14, s16
 80269f0:	ee16 9a90 	vmov	r9, s13
 80269f4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80269f8:	eef0 6a68 	vmov.f32	s13, s17
 80269fc:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8026a00:	ee18 2a10 	vmov	r2, s16
 8026a04:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8026a08:	fb92 f3f3 	sdiv	r3, r2, r3
 8026a0c:	ee18 2a90 	vmov	r2, s17
 8026a10:	932b      	str	r3, [sp, #172]	; 0xac
 8026a12:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026a14:	fb92 f3f3 	sdiv	r3, r2, r3
 8026a18:	932c      	str	r3, [sp, #176]	; 0xb0
 8026a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026a1c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8026a1e:	3b01      	subs	r3, #1
 8026a20:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026a24:	9309      	str	r3, [sp, #36]	; 0x24
 8026a26:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026a28:	bf08      	it	eq
 8026a2a:	4613      	moveq	r3, r2
 8026a2c:	ee16 6a90 	vmov	r6, s13
 8026a30:	9306      	str	r3, [sp, #24]
 8026a32:	eef0 8a67 	vmov.f32	s17, s15
 8026a36:	eeb0 8a47 	vmov.f32	s16, s14
 8026a3a:	e6f1      	b.n	8026820 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8026a3c:	2900      	cmp	r1, #0
 8026a3e:	f43f af6c 	beq.w	802691a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 8026a42:	5d13      	ldrb	r3, [r2, r4]
 8026a44:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8026a48:	930a      	str	r3, [sp, #40]	; 0x28
 8026a4a:	e766      	b.n	802691a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 8026a4c:	1c55      	adds	r5, r2, #1
 8026a4e:	d1a3      	bne.n	8026998 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d8>
 8026a50:	4294      	cmp	r4, r2
 8026a52:	dda1      	ble.n	8026998 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d8>
 8026a54:	1c5d      	adds	r5, r3, #1
 8026a56:	db9f      	blt.n	8026998 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d8>
 8026a58:	9d07      	ldr	r5, [sp, #28]
 8026a5a:	429d      	cmp	r5, r3
 8026a5c:	dd9c      	ble.n	8026998 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d8>
 8026a5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8026a62:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8026a66:	e9cd 4500 	strd	r4, r5, [sp]
 8026a6a:	463b      	mov	r3, r7
 8026a6c:	9a08      	ldr	r2, [sp, #32]
 8026a6e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8026a70:	4641      	mov	r1, r8
 8026a72:	f7ff fe0f 	bl	8026694 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8026a76:	e78f      	b.n	8026998 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d8>
 8026a78:	ea4f 4329 	mov.w	r3, r9, asr #16
 8026a7c:	1432      	asrs	r2, r6, #16
 8026a7e:	fb04 3202 	mla	r2, r4, r2, r3
 8026a82:	9908      	ldr	r1, [sp, #32]
 8026a84:	9b08      	ldr	r3, [sp, #32]
 8026a86:	4413      	add	r3, r2
 8026a88:	5c8a      	ldrb	r2, [r1, r2]
 8026a8a:	f3c9 3e03 	ubfx	lr, r9, #12, #4
 8026a8e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8026a92:	f837 1012 	ldrh.w	r1, [r7, r2, lsl #1]
 8026a96:	f1be 0f00 	cmp.w	lr, #0
 8026a9a:	d05b      	beq.n	8026b54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x394>
 8026a9c:	785a      	ldrb	r2, [r3, #1]
 8026a9e:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8026aa2:	920f      	str	r2, [sp, #60]	; 0x3c
 8026aa4:	b140      	cbz	r0, 8026ab8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f8>
 8026aa6:	191a      	adds	r2, r3, r4
 8026aa8:	5d1b      	ldrb	r3, [r3, r4]
 8026aaa:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8026aae:	930b      	str	r3, [sp, #44]	; 0x2c
 8026ab0:	7853      	ldrb	r3, [r2, #1]
 8026ab2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8026ab6:	9310      	str	r3, [sp, #64]	; 0x40
 8026ab8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8026aba:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8026abc:	fb1e f200 	smulbb	r2, lr, r0
 8026ac0:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8026ac4:	10d2      	asrs	r2, r2, #3
 8026ac6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8026aca:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8026ace:	ea4c 0c03 	orr.w	ip, ip, r3
 8026ad2:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 8026ad6:	9313      	str	r3, [sp, #76]	; 0x4c
 8026ad8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8026ada:	041b      	lsls	r3, r3, #16
 8026adc:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 8026ae0:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8026ae4:	ea43 030b 	orr.w	r3, r3, fp
 8026ae8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8026aea:	4353      	muls	r3, r2
 8026aec:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8026af0:	fb05 3c0c 	mla	ip, r5, ip, r3
 8026af4:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8026af8:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8026afc:	ea43 0b01 	orr.w	fp, r3, r1
 8026b00:	f1c0 0110 	rsb	r1, r0, #16
 8026b04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026b06:	eba1 0e0e 	sub.w	lr, r1, lr
 8026b0a:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 8026b0e:	fb0e cc0b 	mla	ip, lr, fp, ip
 8026b12:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8026b16:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 8026b1a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026b1e:	ea4b 0e0e 	orr.w	lr, fp, lr
 8026b22:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8026b26:	fb02 cc0e 	mla	ip, r2, lr, ip
 8026b2a:	ea4f 535c 	mov.w	r3, ip, lsr #21
 8026b2e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8026b32:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026b36:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8026b3a:	ea43 0c0c 	orr.w	ip, r3, ip
 8026b3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026b40:	f823 cb02 	strh.w	ip, [r3], #2
 8026b44:	930c      	str	r3, [sp, #48]	; 0x30
 8026b46:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8026b48:	4499      	add	r9, r3
 8026b4a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026b4c:	f108 38ff 	add.w	r8, r8, #4294967295
 8026b50:	441e      	add	r6, r3
 8026b52:	e695      	b.n	8026880 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc0>
 8026b54:	2800      	cmp	r0, #0
 8026b56:	d0af      	beq.n	8026ab8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f8>
 8026b58:	5d1b      	ldrb	r3, [r3, r4]
 8026b5a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8026b5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8026b60:	e7aa      	b.n	8026ab8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f8>
 8026b62:	b015      	add	sp, #84	; 0x54
 8026b64:	ecbd 8b0a 	vpop	{d8-d12}
 8026b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026b6c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 8026b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026b70:	468b      	mov	fp, r1
 8026b72:	8809      	ldrh	r1, [r1, #0]
 8026b74:	b089      	sub	sp, #36	; 0x24
 8026b76:	10cd      	asrs	r5, r1, #3
 8026b78:	e9dd 6414 	ldrd	r6, r4, [sp, #80]	; 0x50
 8026b7c:	ea4f 2921 	mov.w	r9, r1, asr #8
 8026b80:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8026b84:	00c9      	lsls	r1, r1, #3
 8026b86:	9500      	str	r5, [sp, #0]
 8026b88:	b2c9      	uxtb	r1, r1
 8026b8a:	f9bd e048 	ldrsh.w	lr, [sp, #72]	; 0x48
 8026b8e:	9101      	str	r1, [sp, #4]
 8026b90:	9900      	ldr	r1, [sp, #0]
 8026b92:	9202      	str	r2, [sp, #8]
 8026b94:	fb04 650e 	mla	r5, r4, lr, r6
 8026b98:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 8026b9c:	eb02 0805 	add.w	r8, r2, r5
 8026ba0:	0209      	lsls	r1, r1, #8
 8026ba2:	9a01      	ldr	r2, [sp, #4]
 8026ba4:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 8026ba8:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8026bac:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8026bb0:	f89d c060 	ldrb.w	ip, [sp, #96]	; 0x60
 8026bb4:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8026bb8:	4311      	orrs	r1, r2
 8026bba:	2c00      	cmp	r4, #0
 8026bbc:	9107      	str	r1, [sp, #28]
 8026bbe:	db43      	blt.n	8026c48 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xdc>
 8026bc0:	45a2      	cmp	sl, r4
 8026bc2:	dd41      	ble.n	8026c48 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xdc>
 8026bc4:	2e00      	cmp	r6, #0
 8026bc6:	db3d      	blt.n	8026c44 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd8>
 8026bc8:	45b6      	cmp	lr, r6
 8026bca:	dd3b      	ble.n	8026c44 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd8>
 8026bcc:	9a02      	ldr	r2, [sp, #8]
 8026bce:	5d55      	ldrb	r5, [r2, r5]
 8026bd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8026bd4:	441d      	add	r5, r3
 8026bd6:	1c72      	adds	r2, r6, #1
 8026bd8:	d439      	bmi.n	8026c4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 8026bda:	4596      	cmp	lr, r2
 8026bdc:	dd37      	ble.n	8026c4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 8026bde:	2f00      	cmp	r7, #0
 8026be0:	d035      	beq.n	8026c4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 8026be2:	f898 1001 	ldrb.w	r1, [r8, #1]
 8026be6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026bea:	4419      	add	r1, r3
 8026bec:	3401      	adds	r4, #1
 8026bee:	d432      	bmi.n	8026c56 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 8026bf0:	45a2      	cmp	sl, r4
 8026bf2:	dd30      	ble.n	8026c56 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 8026bf4:	b378      	cbz	r0, 8026c56 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 8026bf6:	2e00      	cmp	r6, #0
 8026bf8:	db2b      	blt.n	8026c52 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe6>
 8026bfa:	45b6      	cmp	lr, r6
 8026bfc:	dd29      	ble.n	8026c52 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe6>
 8026bfe:	f818 400e 	ldrb.w	r4, [r8, lr]
 8026c02:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8026c06:	441c      	add	r4, r3
 8026c08:	3601      	adds	r6, #1
 8026c0a:	d427      	bmi.n	8026c5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 8026c0c:	45b6      	cmp	lr, r6
 8026c0e:	dd25      	ble.n	8026c5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 8026c10:	b327      	cbz	r7, 8026c5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 8026c12:	44c6      	add	lr, r8
 8026c14:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8026c18:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8026c1c:	4413      	add	r3, r2
 8026c1e:	782a      	ldrb	r2, [r5, #0]
 8026c20:	9202      	str	r2, [sp, #8]
 8026c22:	780a      	ldrb	r2, [r1, #0]
 8026c24:	9203      	str	r2, [sp, #12]
 8026c26:	7822      	ldrb	r2, [r4, #0]
 8026c28:	9204      	str	r2, [sp, #16]
 8026c2a:	2f0f      	cmp	r7, #15
 8026c2c:	781a      	ldrb	r2, [r3, #0]
 8026c2e:	9205      	str	r2, [sp, #20]
 8026c30:	d801      	bhi.n	8026c36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xca>
 8026c32:	280f      	cmp	r0, #15
 8026c34:	d914      	bls.n	8026c60 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf4>
 8026c36:	4b3f      	ldr	r3, [pc, #252]	; (8026d34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c8>)
 8026c38:	4a3f      	ldr	r2, [pc, #252]	; (8026d38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1cc>)
 8026c3a:	4840      	ldr	r0, [pc, #256]	; (8026d3c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>)
 8026c3c:	f240 210d 	movw	r1, #525	; 0x20d
 8026c40:	f007 fb12 	bl	802e268 <__assert_func>
 8026c44:	ad07      	add	r5, sp, #28
 8026c46:	e7c6      	b.n	8026bd6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6a>
 8026c48:	a907      	add	r1, sp, #28
 8026c4a:	460d      	mov	r5, r1
 8026c4c:	e7ce      	b.n	8026bec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 8026c4e:	a907      	add	r1, sp, #28
 8026c50:	e7cc      	b.n	8026bec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 8026c52:	ac07      	add	r4, sp, #28
 8026c54:	e7d8      	b.n	8026c08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x9c>
 8026c56:	ab07      	add	r3, sp, #28
 8026c58:	461c      	mov	r4, r3
 8026c5a:	e7e0      	b.n	8026c1e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb2>
 8026c5c:	ab07      	add	r3, sp, #28
 8026c5e:	e7de      	b.n	8026c1e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb2>
 8026c60:	b2ba      	uxth	r2, r7
 8026c62:	b280      	uxth	r0, r0
 8026c64:	fb02 fa00 	mul.w	sl, r2, r0
 8026c68:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8026c6c:	0112      	lsls	r2, r2, #4
 8026c6e:	b280      	uxth	r0, r0
 8026c70:	f891 8002 	ldrb.w	r8, [r1, #2]
 8026c74:	7849      	ldrb	r1, [r1, #1]
 8026c76:	78ae      	ldrb	r6, [r5, #2]
 8026c78:	786d      	ldrb	r5, [r5, #1]
 8026c7a:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 8026c7e:	eba2 020a 	sub.w	r2, r2, sl
 8026c82:	b292      	uxth	r2, r2
 8026c84:	ebae 0e00 	sub.w	lr, lr, r0
 8026c88:	fa1f fe8e 	uxth.w	lr, lr
 8026c8c:	4351      	muls	r1, r2
 8026c8e:	fb02 f808 	mul.w	r8, r2, r8
 8026c92:	fb0e 8806 	mla	r8, lr, r6, r8
 8026c96:	fb0e 1505 	mla	r5, lr, r5, r1
 8026c9a:	78a6      	ldrb	r6, [r4, #2]
 8026c9c:	7861      	ldrb	r1, [r4, #1]
 8026c9e:	fa1f f78c 	uxth.w	r7, ip
 8026ca2:	fb00 8806 	mla	r8, r0, r6, r8
 8026ca6:	fb00 5501 	mla	r5, r0, r1, r5
 8026caa:	789e      	ldrb	r6, [r3, #2]
 8026cac:	7859      	ldrb	r1, [r3, #1]
 8026cae:	9b00      	ldr	r3, [sp, #0]
 8026cb0:	ea6f 0c0c 	mvn.w	ip, ip
 8026cb4:	fa5f fc8c 	uxtb.w	ip, ip
 8026cb8:	fb0a 5101 	mla	r1, sl, r1, r5
 8026cbc:	fb13 f50c 	smulbb	r5, r3, ip
 8026cc0:	9b03      	ldr	r3, [sp, #12]
 8026cc2:	435a      	muls	r2, r3
 8026cc4:	9b02      	ldr	r3, [sp, #8]
 8026cc6:	fb0e 2203 	mla	r2, lr, r3, r2
 8026cca:	9b04      	ldr	r3, [sp, #16]
 8026ccc:	fb00 2003 	mla	r0, r0, r3, r2
 8026cd0:	9b05      	ldr	r3, [sp, #20]
 8026cd2:	fb0a 8606 	mla	r6, sl, r6, r8
 8026cd6:	fb0a 0a03 	mla	sl, sl, r3, r0
 8026cda:	9b01      	ldr	r3, [sp, #4]
 8026cdc:	fb19 f90c 	smulbb	r9, r9, ip
 8026ce0:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8026ce4:	fb13 fc0c 	smulbb	ip, r3, ip
 8026ce8:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8026cec:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8026cf0:	fb06 9607 	mla	r6, r6, r7, r9
 8026cf4:	fb01 5107 	mla	r1, r1, r7, r5
 8026cf8:	fb0a c707 	mla	r7, sl, r7, ip
 8026cfc:	b2b6      	uxth	r6, r6
 8026cfe:	b289      	uxth	r1, r1
 8026d00:	b2bf      	uxth	r7, r7
 8026d02:	f106 0901 	add.w	r9, r6, #1
 8026d06:	f107 0c01 	add.w	ip, r7, #1
 8026d0a:	1c4d      	adds	r5, r1, #1
 8026d0c:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 8026d10:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8026d14:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 8026d18:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8026d1c:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8026d20:	0949      	lsrs	r1, r1, #5
 8026d22:	433e      	orrs	r6, r7
 8026d24:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026d28:	430e      	orrs	r6, r1
 8026d2a:	f8ab 6000 	strh.w	r6, [fp]
 8026d2e:	b009      	add	sp, #36	; 0x24
 8026d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026d34:	08034370 	.word	0x08034370
 8026d38:	080348c9 	.word	0x080348c9
 8026d3c:	080343f8 	.word	0x080343f8

08026d40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8026d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026d44:	ed2d 8b08 	vpush	{d8-d11}
 8026d48:	b097      	sub	sp, #92	; 0x5c
 8026d4a:	eeb0 aa40 	vmov.f32	s20, s0
 8026d4e:	9309      	str	r3, [sp, #36]	; 0x24
 8026d50:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8026d54:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8026d56:	930b      	str	r3, [sp, #44]	; 0x2c
 8026d58:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8026d5c:	9310      	str	r3, [sp, #64]	; 0x40
 8026d5e:	910f      	str	r1, [sp, #60]	; 0x3c
 8026d60:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8026d64:	9015      	str	r0, [sp, #84]	; 0x54
 8026d66:	6860      	ldr	r0, [r4, #4]
 8026d68:	9213      	str	r2, [sp, #76]	; 0x4c
 8026d6a:	fb00 1303 	mla	r3, r0, r3, r1
 8026d6e:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8026d70:	6821      	ldr	r1, [r4, #0]
 8026d72:	6854      	ldr	r4, [r2, #4]
 8026d74:	f9bd 50c0 	ldrsh.w	r5, [sp, #192]	; 0xc0
 8026d78:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8026d7c:	930a      	str	r3, [sp, #40]	; 0x28
 8026d7e:	6813      	ldr	r3, [r2, #0]
 8026d80:	930e      	str	r3, [sp, #56]	; 0x38
 8026d82:	1d23      	adds	r3, r4, #4
 8026d84:	9308      	str	r3, [sp, #32]
 8026d86:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8026d88:	43db      	mvns	r3, r3
 8026d8a:	b2db      	uxtb	r3, r3
 8026d8c:	eef0 9a60 	vmov.f32	s19, s1
 8026d90:	eeb0 9a41 	vmov.f32	s18, s2
 8026d94:	eeb0 8a62 	vmov.f32	s16, s5
 8026d98:	eef0 8a43 	vmov.f32	s17, s6
 8026d9c:	eef0 ba44 	vmov.f32	s23, s8
 8026da0:	eeb0 ba64 	vmov.f32	s22, s9
 8026da4:	eef0 aa45 	vmov.f32	s21, s10
 8026da8:	930c      	str	r3, [sp, #48]	; 0x30
 8026daa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8026dac:	2b00      	cmp	r3, #0
 8026dae:	dc03      	bgt.n	8026db8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8026db0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8026db2:	2b00      	cmp	r3, #0
 8026db4:	f340 825c 	ble.w	8027270 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x530>
 8026db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026dba:	2b00      	cmp	r3, #0
 8026dbc:	f340 8127 	ble.w	802700e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ce>
 8026dc0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8026dc2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026dc4:	1412      	asrs	r2, r2, #16
 8026dc6:	ea4f 4323 	mov.w	r3, r3, asr #16
 8026dca:	d430      	bmi.n	8026e2e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 8026dcc:	1c51      	adds	r1, r2, #1
 8026dce:	428d      	cmp	r5, r1
 8026dd0:	dd30      	ble.n	8026e34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8026dd2:	2b00      	cmp	r3, #0
 8026dd4:	db2e      	blt.n	8026e34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8026dd6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8026dd8:	1c59      	adds	r1, r3, #1
 8026dda:	4288      	cmp	r0, r1
 8026ddc:	dd2a      	ble.n	8026e34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8026dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026de0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8026de2:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8026de4:	3b01      	subs	r3, #1
 8026de6:	fb02 1203 	mla	r2, r2, r3, r1
 8026dea:	1412      	asrs	r2, r2, #16
 8026dec:	d42c      	bmi.n	8026e48 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8026dee:	3201      	adds	r2, #1
 8026df0:	4295      	cmp	r5, r2
 8026df2:	dd29      	ble.n	8026e48 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8026df4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8026df6:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8026df8:	fb02 1303 	mla	r3, r2, r3, r1
 8026dfc:	141b      	asrs	r3, r3, #16
 8026dfe:	d423      	bmi.n	8026e48 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8026e00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8026e02:	3301      	adds	r3, #1
 8026e04:	429a      	cmp	r2, r3
 8026e06:	dd1f      	ble.n	8026e48 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8026e08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026e0a:	9311      	str	r3, [sp, #68]	; 0x44
 8026e0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026e0e:	930d      	str	r3, [sp, #52]	; 0x34
 8026e10:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8026e14:	9312      	str	r3, [sp, #72]	; 0x48
 8026e16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8026e18:	2b00      	cmp	r3, #0
 8026e1a:	f300 8161 	bgt.w	80270e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8026e1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026e20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026e22:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8026e26:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026e2a:	930a      	str	r3, [sp, #40]	; 0x28
 8026e2c:	e0f1      	b.n	8027012 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d2>
 8026e2e:	1c51      	adds	r1, r2, #1
 8026e30:	f040 80de 	bne.w	8026ff0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8026e34:	42aa      	cmp	r2, r5
 8026e36:	f280 80db 	bge.w	8026ff0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8026e3a:	1c5f      	adds	r7, r3, #1
 8026e3c:	f2c0 80d8 	blt.w	8026ff0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8026e40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8026e42:	4293      	cmp	r3, r2
 8026e44:	f280 80d4 	bge.w	8026ff0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8026e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026e4a:	9311      	str	r3, [sp, #68]	; 0x44
 8026e4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026e4e:	930d      	str	r3, [sp, #52]	; 0x34
 8026e50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8026e52:	2b00      	cmp	r3, #0
 8026e54:	dde3      	ble.n	8026e1e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8026e56:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026e58:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8026e5a:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8026e5c:	141a      	asrs	r2, r3, #16
 8026e5e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026e60:	1400      	asrs	r0, r0, #16
 8026e62:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8026e66:	f3c1 3103 	ubfx	r1, r1, #12, #4
 8026e6a:	f100 8120 	bmi.w	80270ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36e>
 8026e6e:	1c46      	adds	r6, r0, #1
 8026e70:	42b5      	cmp	r5, r6
 8026e72:	f340 811e 	ble.w	80270b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x372>
 8026e76:	2a00      	cmp	r2, #0
 8026e78:	f2c0 811b 	blt.w	80270b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x372>
 8026e7c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8026e7e:	1c56      	adds	r6, r2, #1
 8026e80:	42b7      	cmp	r7, r6
 8026e82:	f340 8116 	ble.w	80270b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x372>
 8026e86:	fb02 0005 	mla	r0, r2, r5, r0
 8026e8a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8026e8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026e8e:	9c08      	ldr	r4, [sp, #32]
 8026e90:	4402      	add	r2, r0
 8026e92:	5c30      	ldrb	r0, [r6, r0]
 8026e94:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026e98:	9014      	str	r0, [sp, #80]	; 0x50
 8026e9a:	1826      	adds	r6, r4, r0
 8026e9c:	2b00      	cmp	r3, #0
 8026e9e:	f000 80f7 	beq.w	8027090 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 8026ea2:	f892 e001 	ldrb.w	lr, [r2, #1]
 8026ea6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8026eaa:	44a6      	add	lr, r4
 8026eac:	2900      	cmp	r1, #0
 8026eae:	f000 80f8 	beq.w	80270a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x362>
 8026eb2:	1950      	adds	r0, r2, r5
 8026eb4:	5d52      	ldrb	r2, [r2, r5]
 8026eb6:	7840      	ldrb	r0, [r0, #1]
 8026eb8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8026ebc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026ec0:	4422      	add	r2, r4
 8026ec2:	4420      	add	r0, r4
 8026ec4:	b29b      	uxth	r3, r3
 8026ec6:	b289      	uxth	r1, r1
 8026ec8:	fb03 fa01 	mul.w	sl, r3, r1
 8026ecc:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 8026ed0:	011b      	lsls	r3, r3, #4
 8026ed2:	b289      	uxth	r1, r1
 8026ed4:	f89e c002 	ldrb.w	ip, [lr, #2]
 8026ed8:	f896 b002 	ldrb.w	fp, [r6, #2]
 8026edc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8026ede:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026ee0:	f8b7 8000 	ldrh.w	r8, [r7]
 8026ee4:	f8bd 7040 	ldrh.w	r7, [sp, #64]	; 0x40
 8026ee8:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 8026eec:	eba3 030a 	sub.w	r3, r3, sl
 8026ef0:	b29b      	uxth	r3, r3
 8026ef2:	eba9 0901 	sub.w	r9, r9, r1
 8026ef6:	fa1f f989 	uxth.w	r9, r9
 8026efa:	fb03 fc0c 	mul.w	ip, r3, ip
 8026efe:	fb09 cc0b 	mla	ip, r9, fp, ip
 8026f02:	f892 b002 	ldrb.w	fp, [r2, #2]
 8026f06:	fb01 cc0b 	mla	ip, r1, fp, ip
 8026f0a:	f890 b002 	ldrb.w	fp, [r0, #2]
 8026f0e:	fb0a cc0b 	mla	ip, sl, fp, ip
 8026f12:	ea4f 2b28 	mov.w	fp, r8, asr #8
 8026f16:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8026f1a:	fb1b fb04 	smulbb	fp, fp, r4
 8026f1e:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8026f22:	fb0c bc07 	mla	ip, ip, r7, fp
 8026f26:	f896 b001 	ldrb.w	fp, [r6, #1]
 8026f2a:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8026f2e:	f89e e000 	ldrb.w	lr, [lr]
 8026f32:	435e      	muls	r6, r3
 8026f34:	fb09 660b 	mla	r6, r9, fp, r6
 8026f38:	f892 b001 	ldrb.w	fp, [r2, #1]
 8026f3c:	fb01 660b 	mla	r6, r1, fp, r6
 8026f40:	f890 b001 	ldrb.w	fp, [r0, #1]
 8026f44:	fb0a 660b 	mla	r6, sl, fp, r6
 8026f48:	ea4f 0be8 	mov.w	fp, r8, asr #3
 8026f4c:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8026f50:	fb1b fb04 	smulbb	fp, fp, r4
 8026f54:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8026f58:	fb06 b607 	mla	r6, r6, r7, fp
 8026f5c:	b2b4      	uxth	r4, r6
 8026f5e:	9412      	str	r4, [sp, #72]	; 0x48
 8026f60:	9e08      	ldr	r6, [sp, #32]
 8026f62:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026f64:	f816 b004 	ldrb.w	fp, [r6, r4]
 8026f68:	fb03 f30e 	mul.w	r3, r3, lr
 8026f6c:	f892 e000 	ldrb.w	lr, [r2]
 8026f70:	fb09 330b 	mla	r3, r9, fp, r3
 8026f74:	fb01 330e 	mla	r3, r1, lr, r3
 8026f78:	f890 e000 	ldrb.w	lr, [r0]
 8026f7c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8026f80:	fb0a 3e0e 	mla	lr, sl, lr, r3
 8026f84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026f86:	fa5f f888 	uxtb.w	r8, r8
 8026f8a:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8026f8e:	fb18 f803 	smulbb	r8, r8, r3
 8026f92:	fb0e 8807 	mla	r8, lr, r7, r8
 8026f96:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8026f98:	fa1f fc8c 	uxth.w	ip, ip
 8026f9c:	fa1f f888 	uxth.w	r8, r8
 8026fa0:	f103 0b01 	add.w	fp, r3, #1
 8026fa4:	f10c 0201 	add.w	r2, ip, #1
 8026fa8:	f108 0e01 	add.w	lr, r8, #1
 8026fac:	eb0b 2613 	add.w	r6, fp, r3, lsr #8
 8026fb0:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8026fb4:	eb0e 2818 	add.w	r8, lr, r8, lsr #8
 8026fb8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8026fbc:	f3c8 28c4 	ubfx	r8, r8, #11, #5
 8026fc0:	0976      	lsrs	r6, r6, #5
 8026fc2:	ea4c 0c08 	orr.w	ip, ip, r8
 8026fc6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8026fca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026fcc:	ea4c 0606 	orr.w	r6, ip, r6
 8026fd0:	801e      	strh	r6, [r3, #0]
 8026fd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026fd4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8026fd6:	3302      	adds	r3, #2
 8026fd8:	930d      	str	r3, [sp, #52]	; 0x34
 8026fda:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026fdc:	4413      	add	r3, r2
 8026fde:	9329      	str	r3, [sp, #164]	; 0xa4
 8026fe0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8026fe2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026fe4:	4413      	add	r3, r2
 8026fe6:	932a      	str	r3, [sp, #168]	; 0xa8
 8026fe8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8026fea:	3b01      	subs	r3, #1
 8026fec:	9311      	str	r3, [sp, #68]	; 0x44
 8026fee:	e72f      	b.n	8026e50 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8026ff0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026ff2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8026ff4:	4413      	add	r3, r2
 8026ff6:	9329      	str	r3, [sp, #164]	; 0xa4
 8026ff8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8026ffa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026ffc:	4413      	add	r3, r2
 8026ffe:	932a      	str	r3, [sp, #168]	; 0xa8
 8027000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027002:	3b01      	subs	r3, #1
 8027004:	9309      	str	r3, [sp, #36]	; 0x24
 8027006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027008:	3302      	adds	r3, #2
 802700a:	930a      	str	r3, [sp, #40]	; 0x28
 802700c:	e6d4      	b.n	8026db8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 802700e:	f47f aee6 	bne.w	8026dde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 8027012:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8027014:	2b00      	cmp	r3, #0
 8027016:	f340 812b 	ble.w	8027270 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x530>
 802701a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802701e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027022:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8027026:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027028:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802702c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8027030:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8027034:	eef0 6a48 	vmov.f32	s13, s16
 8027038:	ee69 7a27 	vmul.f32	s15, s18, s15
 802703c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027040:	ee37 8a48 	vsub.f32	s16, s14, s16
 8027044:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8027048:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802704c:	eef0 6a68 	vmov.f32	s13, s17
 8027050:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8027054:	ee18 2a10 	vmov	r2, s16
 8027058:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802705c:	fb92 f3f3 	sdiv	r3, r2, r3
 8027060:	ee18 2a90 	vmov	r2, s17
 8027064:	932b      	str	r3, [sp, #172]	; 0xac
 8027066:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027068:	fb92 f3f3 	sdiv	r3, r2, r3
 802706c:	932c      	str	r3, [sp, #176]	; 0xb0
 802706e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8027070:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8027072:	3b01      	subs	r3, #1
 8027074:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027078:	930f      	str	r3, [sp, #60]	; 0x3c
 802707a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802707c:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8027080:	bf08      	it	eq
 8027082:	4613      	moveq	r3, r2
 8027084:	9309      	str	r3, [sp, #36]	; 0x24
 8027086:	eef0 8a67 	vmov.f32	s17, s15
 802708a:	eeb0 8a47 	vmov.f32	s16, s14
 802708e:	e68c      	b.n	8026daa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8027090:	b151      	cbz	r1, 80270a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x368>
 8027092:	5d52      	ldrb	r2, [r2, r5]
 8027094:	9808      	ldr	r0, [sp, #32]
 8027096:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802709a:	4402      	add	r2, r0
 802709c:	4630      	mov	r0, r6
 802709e:	46b6      	mov	lr, r6
 80270a0:	e710      	b.n	8026ec4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 80270a2:	4630      	mov	r0, r6
 80270a4:	4632      	mov	r2, r6
 80270a6:	e70d      	b.n	8026ec4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 80270a8:	4630      	mov	r0, r6
 80270aa:	4632      	mov	r2, r6
 80270ac:	e7f7      	b.n	802709e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x35e>
 80270ae:	1c46      	adds	r6, r0, #1
 80270b0:	d18f      	bne.n	8026fd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 80270b2:	4285      	cmp	r5, r0
 80270b4:	dd8d      	ble.n	8026fd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 80270b6:	1c54      	adds	r4, r2, #1
 80270b8:	db8b      	blt.n	8026fd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 80270ba:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80270bc:	4294      	cmp	r4, r2
 80270be:	dd88      	ble.n	8026fd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 80270c0:	e9cd 2303 	strd	r2, r3, [sp, #12]
 80270c4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80270c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80270c8:	9002      	str	r0, [sp, #8]
 80270ca:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80270ce:	e9cd 5300 	strd	r5, r3, [sp]
 80270d2:	e9dd 120d 	ldrd	r1, r2, [sp, #52]	; 0x34
 80270d6:	9b08      	ldr	r3, [sp, #32]
 80270d8:	9815      	ldr	r0, [sp, #84]	; 0x54
 80270da:	f7ff fd47 	bl	8026b6c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 80270de:	e778      	b.n	8026fd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 80270e0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80270e2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80270e4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80270e6:	1410      	asrs	r0, r2, #16
 80270e8:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80270ec:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80270ee:	1412      	asrs	r2, r2, #16
 80270f0:	fb05 2000 	mla	r0, r5, r0, r2
 80270f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80270f6:	f814 a000 	ldrb.w	sl, [r4, r0]
 80270fa:	4402      	add	r2, r0
 80270fc:	9808      	ldr	r0, [sp, #32]
 80270fe:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8027102:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8027106:	eb00 060a 	add.w	r6, r0, sl
 802710a:	2b00      	cmp	r3, #0
 802710c:	f000 80a1 	beq.w	8027252 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x512>
 8027110:	f892 c001 	ldrb.w	ip, [r2, #1]
 8027114:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8027118:	4484      	add	ip, r0
 802711a:	2900      	cmp	r1, #0
 802711c:	f000 80a2 	beq.w	8027264 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x524>
 8027120:	1950      	adds	r0, r2, r5
 8027122:	5d52      	ldrb	r2, [r2, r5]
 8027124:	7840      	ldrb	r0, [r0, #1]
 8027126:	9c08      	ldr	r4, [sp, #32]
 8027128:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802712c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8027130:	4422      	add	r2, r4
 8027132:	4420      	add	r0, r4
 8027134:	b29b      	uxth	r3, r3
 8027136:	b289      	uxth	r1, r1
 8027138:	fb03 f901 	mul.w	r9, r3, r1
 802713c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8027140:	011b      	lsls	r3, r3, #4
 8027142:	b289      	uxth	r1, r1
 8027144:	f89c 7002 	ldrb.w	r7, [ip, #2]
 8027148:	f896 b002 	ldrb.w	fp, [r6, #2]
 802714c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802714e:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8027152:	eba3 0309 	sub.w	r3, r3, r9
 8027156:	b29b      	uxth	r3, r3
 8027158:	eba8 0801 	sub.w	r8, r8, r1
 802715c:	fa1f f888 	uxth.w	r8, r8
 8027160:	435f      	muls	r7, r3
 8027162:	fb08 770b 	mla	r7, r8, fp, r7
 8027166:	f892 b002 	ldrb.w	fp, [r2, #2]
 802716a:	f8b4 e000 	ldrh.w	lr, [r4]
 802716e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8027170:	fb01 770b 	mla	r7, r1, fp, r7
 8027174:	f890 b002 	ldrb.w	fp, [r0, #2]
 8027178:	fb09 770b 	mla	r7, r9, fp, r7
 802717c:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 8027180:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8027184:	fb1b fb04 	smulbb	fp, fp, r4
 8027188:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802718a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 802718e:	fb07 b704 	mla	r7, r7, r4, fp
 8027192:	f896 b001 	ldrb.w	fp, [r6, #1]
 8027196:	f89c 6001 	ldrb.w	r6, [ip, #1]
 802719a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802719c:	f89c c000 	ldrb.w	ip, [ip]
 80271a0:	435e      	muls	r6, r3
 80271a2:	fb08 660b 	mla	r6, r8, fp, r6
 80271a6:	f892 b001 	ldrb.w	fp, [r2, #1]
 80271aa:	fb01 660b 	mla	r6, r1, fp, r6
 80271ae:	f890 b001 	ldrb.w	fp, [r0, #1]
 80271b2:	fb09 660b 	mla	r6, r9, fp, r6
 80271b6:	ea4f 0bee 	mov.w	fp, lr, asr #3
 80271ba:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 80271be:	fb1b fb04 	smulbb	fp, fp, r4
 80271c2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80271c4:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80271c8:	fb06 b604 	mla	r6, r6, r4, fp
 80271cc:	9c08      	ldr	r4, [sp, #32]
 80271ce:	f814 a00a 	ldrb.w	sl, [r4, sl]
 80271d2:	fb03 f30c 	mul.w	r3, r3, ip
 80271d6:	f892 c000 	ldrb.w	ip, [r2]
 80271da:	fb08 330a 	mla	r3, r8, sl, r3
 80271de:	fb01 330c 	mla	r3, r1, ip, r3
 80271e2:	f890 c000 	ldrb.w	ip, [r0]
 80271e6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80271ea:	fb09 3c0c 	mla	ip, r9, ip, r3
 80271ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80271f0:	fa5f fe8e 	uxtb.w	lr, lr
 80271f4:	fb1e fe03 	smulbb	lr, lr, r3
 80271f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80271fa:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80271fe:	fb0c ec03 	mla	ip, ip, r3, lr
 8027202:	b2bf      	uxth	r7, r7
 8027204:	b2b6      	uxth	r6, r6
 8027206:	fa1f fc8c 	uxth.w	ip, ip
 802720a:	1c7b      	adds	r3, r7, #1
 802720c:	f10c 0201 	add.w	r2, ip, #1
 8027210:	f106 0b01 	add.w	fp, r6, #1
 8027214:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8027218:	eb02 221c 	add.w	r2, r2, ip, lsr #8
 802721c:	eb0b 2616 	add.w	r6, fp, r6, lsr #8
 8027220:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8027224:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8027228:	0976      	lsrs	r6, r6, #5
 802722a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802722c:	4317      	orrs	r7, r2
 802722e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8027232:	4337      	orrs	r7, r6
 8027234:	f823 7b02 	strh.w	r7, [r3], #2
 8027238:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802723a:	930d      	str	r3, [sp, #52]	; 0x34
 802723c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802723e:	4413      	add	r3, r2
 8027240:	9329      	str	r3, [sp, #164]	; 0xa4
 8027242:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8027244:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027246:	4413      	add	r3, r2
 8027248:	932a      	str	r3, [sp, #168]	; 0xa8
 802724a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802724c:	3b01      	subs	r3, #1
 802724e:	9311      	str	r3, [sp, #68]	; 0x44
 8027250:	e5e1      	b.n	8026e16 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd6>
 8027252:	b151      	cbz	r1, 802726a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52a>
 8027254:	5d52      	ldrb	r2, [r2, r5]
 8027256:	9808      	ldr	r0, [sp, #32]
 8027258:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802725c:	4402      	add	r2, r0
 802725e:	4630      	mov	r0, r6
 8027260:	46b4      	mov	ip, r6
 8027262:	e767      	b.n	8027134 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f4>
 8027264:	4630      	mov	r0, r6
 8027266:	4632      	mov	r2, r6
 8027268:	e764      	b.n	8027134 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f4>
 802726a:	4630      	mov	r0, r6
 802726c:	4632      	mov	r2, r6
 802726e:	e7f7      	b.n	8027260 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x520>
 8027270:	b017      	add	sp, #92	; 0x5c
 8027272:	ecbd 8b08 	vpop	{d8-d11}
 8027276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802727c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 802727c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027280:	880e      	ldrh	r6, [r1, #0]
 8027282:	b085      	sub	sp, #20
 8027284:	0230      	lsls	r0, r6, #8
 8027286:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 802728a:	f400 0b78 	and.w	fp, r0, #16252928	; 0xf80000
 802728e:	0170      	lsls	r0, r6, #5
 8027290:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8027294:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8027298:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 802729c:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 80272a0:	00f6      	lsls	r6, r6, #3
 80272a2:	ea4b 0000 	orr.w	r0, fp, r0
 80272a6:	b2f6      	uxtb	r6, r6
 80272a8:	4691      	mov	r9, r2
 80272aa:	fb05 7a0c 	mla	sl, r5, ip, r7
 80272ae:	4306      	orrs	r6, r0
 80272b0:	2d00      	cmp	r5, #0
 80272b2:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 80272b6:	9603      	str	r6, [sp, #12]
 80272b8:	eb09 0e0a 	add.w	lr, r9, sl
 80272bc:	db42      	blt.n	8027344 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc8>
 80272be:	45a8      	cmp	r8, r5
 80272c0:	dd40      	ble.n	8027344 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc8>
 80272c2:	2f00      	cmp	r7, #0
 80272c4:	db3c      	blt.n	8027340 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc4>
 80272c6:	45bc      	cmp	ip, r7
 80272c8:	dd3a      	ble.n	8027340 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc4>
 80272ca:	f819 600a 	ldrb.w	r6, [r9, sl]
 80272ce:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80272d2:	441e      	add	r6, r3
 80272d4:	1c78      	adds	r0, r7, #1
 80272d6:	d438      	bmi.n	802734a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 80272d8:	4584      	cmp	ip, r0
 80272da:	dd36      	ble.n	802734a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 80272dc:	b3aa      	cbz	r2, 802734a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 80272de:	f89e 0001 	ldrb.w	r0, [lr, #1]
 80272e2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80272e6:	4418      	add	r0, r3
 80272e8:	3501      	adds	r5, #1
 80272ea:	d432      	bmi.n	8027352 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 80272ec:	45a8      	cmp	r8, r5
 80272ee:	dd30      	ble.n	8027352 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 80272f0:	b37c      	cbz	r4, 8027352 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 80272f2:	2f00      	cmp	r7, #0
 80272f4:	db2b      	blt.n	802734e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd2>
 80272f6:	45bc      	cmp	ip, r7
 80272f8:	dd29      	ble.n	802734e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd2>
 80272fa:	f81e 500c 	ldrb.w	r5, [lr, ip]
 80272fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8027302:	441d      	add	r5, r3
 8027304:	3701      	adds	r7, #1
 8027306:	d427      	bmi.n	8027358 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 8027308:	45bc      	cmp	ip, r7
 802730a:	dd25      	ble.n	8027358 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 802730c:	b322      	cbz	r2, 8027358 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 802730e:	44f4      	add	ip, lr
 8027310:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8027314:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8027318:	443b      	add	r3, r7
 802731a:	781f      	ldrb	r7, [r3, #0]
 802731c:	f896 a000 	ldrb.w	sl, [r6]
 8027320:	f890 b000 	ldrb.w	fp, [r0]
 8027324:	f895 9000 	ldrb.w	r9, [r5]
 8027328:	9700      	str	r7, [sp, #0]
 802732a:	2a0f      	cmp	r2, #15
 802732c:	d801      	bhi.n	8027332 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xb6>
 802732e:	2c0f      	cmp	r4, #15
 8027330:	d914      	bls.n	802735c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xe0>
 8027332:	4b2c      	ldr	r3, [pc, #176]	; (80273e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x168>)
 8027334:	4a2c      	ldr	r2, [pc, #176]	; (80273e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16c>)
 8027336:	482d      	ldr	r0, [pc, #180]	; (80273ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x170>)
 8027338:	f240 210d 	movw	r1, #525	; 0x20d
 802733c:	f006 ff94 	bl	802e268 <__assert_func>
 8027340:	ae03      	add	r6, sp, #12
 8027342:	e7c7      	b.n	80272d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x58>
 8027344:	a803      	add	r0, sp, #12
 8027346:	4606      	mov	r6, r0
 8027348:	e7ce      	b.n	80272e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6c>
 802734a:	a803      	add	r0, sp, #12
 802734c:	e7cc      	b.n	80272e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6c>
 802734e:	ad03      	add	r5, sp, #12
 8027350:	e7d8      	b.n	8027304 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x88>
 8027352:	ab03      	add	r3, sp, #12
 8027354:	461d      	mov	r5, r3
 8027356:	e7e0      	b.n	802731a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x9e>
 8027358:	ab03      	add	r3, sp, #12
 802735a:	e7de      	b.n	802731a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x9e>
 802735c:	b292      	uxth	r2, r2
 802735e:	b2a4      	uxth	r4, r4
 8027360:	fb02 f804 	mul.w	r8, r2, r4
 8027364:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 8027368:	0112      	lsls	r2, r2, #4
 802736a:	b2a4      	uxth	r4, r4
 802736c:	f890 e002 	ldrb.w	lr, [r0, #2]
 8027370:	78b7      	ldrb	r7, [r6, #2]
 8027372:	7840      	ldrb	r0, [r0, #1]
 8027374:	7876      	ldrb	r6, [r6, #1]
 8027376:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 802737a:	eba2 0208 	sub.w	r2, r2, r8
 802737e:	b292      	uxth	r2, r2
 8027380:	ebac 0c04 	sub.w	ip, ip, r4
 8027384:	fa1f fc8c 	uxth.w	ip, ip
 8027388:	fb02 fe0e 	mul.w	lr, r2, lr
 802738c:	fb0c ee07 	mla	lr, ip, r7, lr
 8027390:	78af      	ldrb	r7, [r5, #2]
 8027392:	fb04 ee07 	mla	lr, r4, r7, lr
 8027396:	789f      	ldrb	r7, [r3, #2]
 8027398:	785b      	ldrb	r3, [r3, #1]
 802739a:	fb08 e707 	mla	r7, r8, r7, lr
 802739e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80273a2:	fb02 fe0b 	mul.w	lr, r2, fp
 80273a6:	4342      	muls	r2, r0
 80273a8:	7868      	ldrb	r0, [r5, #1]
 80273aa:	9701      	str	r7, [sp, #4]
 80273ac:	fb0c ee0a 	mla	lr, ip, sl, lr
 80273b0:	9f00      	ldr	r7, [sp, #0]
 80273b2:	fb0c 2206 	mla	r2, ip, r6, r2
 80273b6:	fb04 ee09 	mla	lr, r4, r9, lr
 80273ba:	fb04 2400 	mla	r4, r4, r0, r2
 80273be:	fb08 ee07 	mla	lr, r8, r7, lr
 80273c2:	9f01      	ldr	r7, [sp, #4]
 80273c4:	fb08 4803 	mla	r8, r8, r3, r4
 80273c8:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 80273cc:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80273d0:	ea47 070e 	orr.w	r7, r7, lr
 80273d4:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80273d8:	ea47 0708 	orr.w	r7, r7, r8
 80273dc:	800f      	strh	r7, [r1, #0]
 80273de:	b005      	add	sp, #20
 80273e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80273e4:	08034370 	.word	0x08034370
 80273e8:	080348c9 	.word	0x080348c9
 80273ec:	080343f8 	.word	0x080343f8

080273f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80273f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80273f4:	ed2d 8b0a 	vpush	{d8-d12}
 80273f8:	b091      	sub	sp, #68	; 0x44
 80273fa:	eeb0 aa40 	vmov.f32	s20, s0
 80273fe:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8027400:	9307      	str	r3, [sp, #28]
 8027402:	f9bd 30b4 	ldrsh.w	r3, [sp, #180]	; 0xb4
 8027406:	910c      	str	r1, [sp, #48]	; 0x30
 8027408:	9309      	str	r3, [sp, #36]	; 0x24
 802740a:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 802740e:	900f      	str	r0, [sp, #60]	; 0x3c
 8027410:	6860      	ldr	r0, [r4, #4]
 8027412:	920e      	str	r2, [sp, #56]	; 0x38
 8027414:	fb00 1303 	mla	r3, r0, r3, r1
 8027418:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 802741a:	6821      	ldr	r1, [r4, #0]
 802741c:	6854      	ldr	r4, [r2, #4]
 802741e:	f8dd b098 	ldr.w	fp, [sp, #152]	; 0x98
 8027422:	f9bd 50b0 	ldrsh.w	r5, [sp, #176]	; 0xb0
 8027426:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 802742a:	9308      	str	r3, [sp, #32]
 802742c:	6813      	ldr	r3, [r2, #0]
 802742e:	930a      	str	r3, [sp, #40]	; 0x28
 8027430:	eef0 9a60 	vmov.f32	s19, s1
 8027434:	eeb0 9a41 	vmov.f32	s18, s2
 8027438:	eeb0 8a62 	vmov.f32	s16, s5
 802743c:	eef0 8a43 	vmov.f32	s17, s6
 8027440:	eeb0 ca44 	vmov.f32	s24, s8
 8027444:	eef0 ba64 	vmov.f32	s23, s9
 8027448:	eeb0 ba45 	vmov.f32	s22, s10
 802744c:	3404      	adds	r4, #4
 802744e:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8027452:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027454:	2b00      	cmp	r3, #0
 8027456:	dc03      	bgt.n	8027460 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8027458:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802745a:	2b00      	cmp	r3, #0
 802745c:	f340 81cb 	ble.w	80277f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 8027460:	9b07      	ldr	r3, [sp, #28]
 8027462:	2b00      	cmp	r3, #0
 8027464:	f340 80dd 	ble.w	8027622 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x232>
 8027468:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802746a:	1412      	asrs	r2, r2, #16
 802746c:	ea4f 432b 	mov.w	r3, fp, asr #16
 8027470:	d42c      	bmi.n	80274cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 8027472:	1c51      	adds	r1, r2, #1
 8027474:	428d      	cmp	r5, r1
 8027476:	dd2c      	ble.n	80274d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 8027478:	2b00      	cmp	r3, #0
 802747a:	db2a      	blt.n	80274d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 802747c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802747e:	1c59      	adds	r1, r3, #1
 8027480:	4288      	cmp	r0, r1
 8027482:	dd26      	ble.n	80274d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 8027484:	9b07      	ldr	r3, [sp, #28]
 8027486:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8027488:	9925      	ldr	r1, [sp, #148]	; 0x94
 802748a:	3b01      	subs	r3, #1
 802748c:	fb02 1203 	mla	r2, r2, r3, r1
 8027490:	1412      	asrs	r2, r2, #16
 8027492:	d428      	bmi.n	80274e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf6>
 8027494:	3201      	adds	r2, #1
 8027496:	4295      	cmp	r5, r2
 8027498:	dd25      	ble.n	80274e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf6>
 802749a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 802749c:	fb02 b303 	mla	r3, r2, r3, fp
 80274a0:	141b      	asrs	r3, r3, #16
 80274a2:	d420      	bmi.n	80274e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf6>
 80274a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80274a6:	3301      	adds	r3, #1
 80274a8:	429a      	cmp	r2, r3
 80274aa:	dd1c      	ble.n	80274e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf6>
 80274ac:	9b07      	ldr	r3, [sp, #28]
 80274ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80274b0:	9b08      	ldr	r3, [sp, #32]
 80274b2:	930d      	str	r3, [sp, #52]	; 0x34
 80274b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80274b6:	2b00      	cmp	r3, #0
 80274b8:	f300 8116 	bgt.w	80276e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f8>
 80274bc:	9b07      	ldr	r3, [sp, #28]
 80274be:	9a08      	ldr	r2, [sp, #32]
 80274c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80274c4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80274c8:	9308      	str	r3, [sp, #32]
 80274ca:	e0ac      	b.n	8027626 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x236>
 80274cc:	1c51      	adds	r1, r2, #1
 80274ce:	f040 809b 	bne.w	8027608 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x218>
 80274d2:	42aa      	cmp	r2, r5
 80274d4:	f280 8098 	bge.w	8027608 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x218>
 80274d8:	1c5a      	adds	r2, r3, #1
 80274da:	f2c0 8095 	blt.w	8027608 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x218>
 80274de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80274e0:	4293      	cmp	r3, r2
 80274e2:	f280 8091 	bge.w	8027608 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x218>
 80274e6:	9b07      	ldr	r3, [sp, #28]
 80274e8:	930d      	str	r3, [sp, #52]	; 0x34
 80274ea:	9b08      	ldr	r3, [sp, #32]
 80274ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80274ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80274f0:	2b00      	cmp	r3, #0
 80274f2:	dde3      	ble.n	80274bc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 80274f4:	9825      	ldr	r0, [sp, #148]	; 0x94
 80274f6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80274f8:	1400      	asrs	r0, r0, #16
 80274fa:	ea4f 422b 	mov.w	r2, fp, asr #16
 80274fe:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8027502:	f3cb 3103 	ubfx	r1, fp, #12, #4
 8027506:	f100 80d9 	bmi.w	80276bc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 802750a:	1c46      	adds	r6, r0, #1
 802750c:	42b5      	cmp	r5, r6
 802750e:	f340 80d7 	ble.w	80276c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 8027512:	2a00      	cmp	r2, #0
 8027514:	f2c0 80d4 	blt.w	80276c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 8027518:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802751a:	1c56      	adds	r6, r2, #1
 802751c:	42b7      	cmp	r7, r6
 802751e:	f340 80cf 	ble.w	80276c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 8027522:	fb02 0005 	mla	r0, r2, r5, r0
 8027526:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8027528:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802752a:	4402      	add	r2, r0
 802752c:	5c30      	ldrb	r0, [r6, r0]
 802752e:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 8027532:	eb04 0c08 	add.w	ip, r4, r8
 8027536:	2b00      	cmp	r3, #0
 8027538:	f000 80b2 	beq.w	80276a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 802753c:	7856      	ldrb	r6, [r2, #1]
 802753e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8027542:	4426      	add	r6, r4
 8027544:	2900      	cmp	r1, #0
 8027546:	f000 80b3 	beq.w	80276b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c0>
 802754a:	1950      	adds	r0, r2, r5
 802754c:	5d52      	ldrb	r2, [r2, r5]
 802754e:	7840      	ldrb	r0, [r0, #1]
 8027550:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8027554:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8027558:	4422      	add	r2, r4
 802755a:	4420      	add	r0, r4
 802755c:	b29b      	uxth	r3, r3
 802755e:	b289      	uxth	r1, r1
 8027560:	fb03 f901 	mul.w	r9, r3, r1
 8027564:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8027568:	011b      	lsls	r3, r3, #4
 802756a:	b289      	uxth	r1, r1
 802756c:	78b7      	ldrb	r7, [r6, #2]
 802756e:	f89c a002 	ldrb.w	sl, [ip, #2]
 8027572:	f89c c001 	ldrb.w	ip, [ip, #1]
 8027576:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802757a:	eba3 0309 	sub.w	r3, r3, r9
 802757e:	b29b      	uxth	r3, r3
 8027580:	ebae 0e01 	sub.w	lr, lr, r1
 8027584:	fa1f fe8e 	uxth.w	lr, lr
 8027588:	435f      	muls	r7, r3
 802758a:	fb0e 770a 	mla	r7, lr, sl, r7
 802758e:	f892 a002 	ldrb.w	sl, [r2, #2]
 8027592:	fb01 770a 	mla	r7, r1, sl, r7
 8027596:	f890 a002 	ldrb.w	sl, [r0, #2]
 802759a:	fb09 7a0a 	mla	sl, r9, sl, r7
 802759e:	f814 7008 	ldrb.w	r7, [r4, r8]
 80275a2:	f896 8000 	ldrb.w	r8, [r6]
 80275a6:	7876      	ldrb	r6, [r6, #1]
 80275a8:	fb03 f808 	mul.w	r8, r3, r8
 80275ac:	fb0e 8807 	mla	r8, lr, r7, r8
 80275b0:	7817      	ldrb	r7, [r2, #0]
 80275b2:	fb01 8807 	mla	r8, r1, r7, r8
 80275b6:	7807      	ldrb	r7, [r0, #0]
 80275b8:	fb09 8707 	mla	r7, r9, r7, r8
 80275bc:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 80275c0:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80275c4:	ea4a 0707 	orr.w	r7, sl, r7
 80275c8:	4373      	muls	r3, r6
 80275ca:	f892 a001 	ldrb.w	sl, [r2, #1]
 80275ce:	fb0e 330c 	mla	r3, lr, ip, r3
 80275d2:	fb01 310a 	mla	r1, r1, sl, r3
 80275d6:	f890 a001 	ldrb.w	sl, [r0, #1]
 80275da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80275dc:	fb09 1a0a 	mla	sl, r9, sl, r1
 80275e0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80275e4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80275e8:	ea47 070a 	orr.w	r7, r7, sl
 80275ec:	801f      	strh	r7, [r3, #0]
 80275ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80275f0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80275f2:	3302      	adds	r3, #2
 80275f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80275f6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80275f8:	4413      	add	r3, r2
 80275fa:	9325      	str	r3, [sp, #148]	; 0x94
 80275fc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80275fe:	449b      	add	fp, r3
 8027600:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027602:	3b01      	subs	r3, #1
 8027604:	930d      	str	r3, [sp, #52]	; 0x34
 8027606:	e772      	b.n	80274ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8027608:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802760a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 802760c:	4413      	add	r3, r2
 802760e:	9325      	str	r3, [sp, #148]	; 0x94
 8027610:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027612:	449b      	add	fp, r3
 8027614:	9b07      	ldr	r3, [sp, #28]
 8027616:	3b01      	subs	r3, #1
 8027618:	9307      	str	r3, [sp, #28]
 802761a:	9b08      	ldr	r3, [sp, #32]
 802761c:	3302      	adds	r3, #2
 802761e:	9308      	str	r3, [sp, #32]
 8027620:	e71e      	b.n	8027460 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8027622:	f47f af2f 	bne.w	8027484 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8027626:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027628:	2b00      	cmp	r3, #0
 802762a:	f340 80e4 	ble.w	80277f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 802762e:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8027632:	ee79 9aab 	vadd.f32	s19, s19, s23
 8027636:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 802763a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802763c:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8027640:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8027644:	eef0 6a48 	vmov.f32	s13, s16
 8027648:	ee69 7a27 	vmul.f32	s15, s18, s15
 802764c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027650:	ee37 8a48 	vsub.f32	s16, s14, s16
 8027654:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8027658:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802765c:	eef0 6a68 	vmov.f32	s13, s17
 8027660:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8027664:	ee18 2a10 	vmov	r2, s16
 8027668:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802766c:	fb92 f3f3 	sdiv	r3, r2, r3
 8027670:	ee18 2a90 	vmov	r2, s17
 8027674:	9327      	str	r3, [sp, #156]	; 0x9c
 8027676:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027678:	fb92 f3f3 	sdiv	r3, r2, r3
 802767c:	9328      	str	r3, [sp, #160]	; 0xa0
 802767e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027680:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8027682:	3b01      	subs	r3, #1
 8027684:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027688:	930c      	str	r3, [sp, #48]	; 0x30
 802768a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802768c:	bf08      	it	eq
 802768e:	4613      	moveq	r3, r2
 8027690:	ee16 ba90 	vmov	fp, s13
 8027694:	9307      	str	r3, [sp, #28]
 8027696:	eef0 8a67 	vmov.f32	s17, s15
 802769a:	eeb0 8a47 	vmov.f32	s16, s14
 802769e:	e6d8      	b.n	8027452 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 80276a0:	b149      	cbz	r1, 80276b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 80276a2:	5d52      	ldrb	r2, [r2, r5]
 80276a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80276a8:	4422      	add	r2, r4
 80276aa:	4660      	mov	r0, ip
 80276ac:	4666      	mov	r6, ip
 80276ae:	e755      	b.n	802755c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x16c>
 80276b0:	4660      	mov	r0, ip
 80276b2:	4662      	mov	r2, ip
 80276b4:	e752      	b.n	802755c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x16c>
 80276b6:	4660      	mov	r0, ip
 80276b8:	4662      	mov	r2, ip
 80276ba:	e7f7      	b.n	80276ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2bc>
 80276bc:	1c47      	adds	r7, r0, #1
 80276be:	d196      	bne.n	80275ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 80276c0:	4285      	cmp	r5, r0
 80276c2:	dd94      	ble.n	80275ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 80276c4:	1c56      	adds	r6, r2, #1
 80276c6:	db92      	blt.n	80275ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 80276c8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80276ca:	4296      	cmp	r6, r2
 80276cc:	dd8f      	ble.n	80275ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 80276ce:	e9cd 3104 	strd	r3, r1, [sp, #16]
 80276d2:	e9cd 0202 	strd	r0, r2, [sp, #8]
 80276d6:	e9cd 5600 	strd	r5, r6, [sp]
 80276da:	4623      	mov	r3, r4
 80276dc:	e9dd 210a 	ldrd	r2, r1, [sp, #40]	; 0x28
 80276e0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80276e2:	f7ff fdcb 	bl	802727c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 80276e6:	e782      	b.n	80275ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 80276e8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80276ea:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80276ec:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80276ee:	1412      	asrs	r2, r2, #16
 80276f0:	ea4f 402b 	mov.w	r0, fp, asr #16
 80276f4:	fb05 2000 	mla	r0, r5, r0, r2
 80276f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80276fa:	f816 8000 	ldrb.w	r8, [r6, r0]
 80276fe:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8027702:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8027706:	f3cb 3103 	ubfx	r1, fp, #12, #4
 802770a:	4402      	add	r2, r0
 802770c:	eb04 0c08 	add.w	ip, r4, r8
 8027710:	2b00      	cmp	r3, #0
 8027712:	d062      	beq.n	80277da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ea>
 8027714:	7856      	ldrb	r6, [r2, #1]
 8027716:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802771a:	4426      	add	r6, r4
 802771c:	2900      	cmp	r1, #0
 802771e:	d064      	beq.n	80277ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fa>
 8027720:	1950      	adds	r0, r2, r5
 8027722:	5d52      	ldrb	r2, [r2, r5]
 8027724:	7840      	ldrb	r0, [r0, #1]
 8027726:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802772a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802772e:	4422      	add	r2, r4
 8027730:	4420      	add	r0, r4
 8027732:	b29b      	uxth	r3, r3
 8027734:	b289      	uxth	r1, r1
 8027736:	fb03 f901 	mul.w	r9, r3, r1
 802773a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802773e:	011b      	lsls	r3, r3, #4
 8027740:	b289      	uxth	r1, r1
 8027742:	78b7      	ldrb	r7, [r6, #2]
 8027744:	f89c a002 	ldrb.w	sl, [ip, #2]
 8027748:	f89c c001 	ldrb.w	ip, [ip, #1]
 802774c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8027750:	eba3 0309 	sub.w	r3, r3, r9
 8027754:	b29b      	uxth	r3, r3
 8027756:	ebae 0e01 	sub.w	lr, lr, r1
 802775a:	fa1f fe8e 	uxth.w	lr, lr
 802775e:	435f      	muls	r7, r3
 8027760:	fb0e 770a 	mla	r7, lr, sl, r7
 8027764:	f892 a002 	ldrb.w	sl, [r2, #2]
 8027768:	fb01 770a 	mla	r7, r1, sl, r7
 802776c:	f890 a002 	ldrb.w	sl, [r0, #2]
 8027770:	fb09 7a0a 	mla	sl, r9, sl, r7
 8027774:	f814 7008 	ldrb.w	r7, [r4, r8]
 8027778:	f896 8000 	ldrb.w	r8, [r6]
 802777c:	7876      	ldrb	r6, [r6, #1]
 802777e:	fb03 f808 	mul.w	r8, r3, r8
 8027782:	fb0e 8807 	mla	r8, lr, r7, r8
 8027786:	7817      	ldrb	r7, [r2, #0]
 8027788:	fb01 8807 	mla	r8, r1, r7, r8
 802778c:	7807      	ldrb	r7, [r0, #0]
 802778e:	fb09 8707 	mla	r7, r9, r7, r8
 8027792:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8027796:	4373      	muls	r3, r6
 8027798:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802779c:	7856      	ldrb	r6, [r2, #1]
 802779e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80277a0:	ea4a 0707 	orr.w	r7, sl, r7
 80277a4:	fb0e 330c 	mla	r3, lr, ip, r3
 80277a8:	f890 a001 	ldrb.w	sl, [r0, #1]
 80277ac:	fb01 3306 	mla	r3, r1, r6, r3
 80277b0:	fb09 3a0a 	mla	sl, r9, sl, r3
 80277b4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80277b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80277ba:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80277be:	ea47 070a 	orr.w	r7, r7, sl
 80277c2:	f823 7b02 	strh.w	r7, [r3], #2
 80277c6:	930d      	str	r3, [sp, #52]	; 0x34
 80277c8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80277ca:	4413      	add	r3, r2
 80277cc:	9325      	str	r3, [sp, #148]	; 0x94
 80277ce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80277d0:	449b      	add	fp, r3
 80277d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80277d4:	3b01      	subs	r3, #1
 80277d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80277d8:	e66c      	b.n	80274b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 80277da:	b149      	cbz	r1, 80277f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x400>
 80277dc:	5d52      	ldrb	r2, [r2, r5]
 80277de:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80277e2:	4422      	add	r2, r4
 80277e4:	4660      	mov	r0, ip
 80277e6:	4666      	mov	r6, ip
 80277e8:	e7a3      	b.n	8027732 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 80277ea:	4660      	mov	r0, ip
 80277ec:	4662      	mov	r2, ip
 80277ee:	e7a0      	b.n	8027732 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 80277f0:	4660      	mov	r0, ip
 80277f2:	4662      	mov	r2, ip
 80277f4:	e7f7      	b.n	80277e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 80277f6:	b011      	add	sp, #68	; 0x44
 80277f8:	ecbd 8b0a 	vpop	{d8-d12}
 80277fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027800 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8027800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027804:	8808      	ldrh	r0, [r1, #0]
 8027806:	b085      	sub	sp, #20
 8027808:	1206      	asrs	r6, r0, #8
 802780a:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 802780e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8027812:	9600      	str	r6, [sp, #0]
 8027814:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8027818:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 802781c:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8027820:	10c6      	asrs	r6, r0, #3
 8027822:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8027826:	9601      	str	r6, [sp, #4]
 8027828:	00c0      	lsls	r0, r0, #3
 802782a:	fb04 560c 	mla	r6, r4, ip, r5
 802782e:	b2c0      	uxtb	r0, r0
 8027830:	4692      	mov	sl, r2
 8027832:	eb02 0e06 	add.w	lr, r2, r6
 8027836:	9a00      	ldr	r2, [sp, #0]
 8027838:	9002      	str	r0, [sp, #8]
 802783a:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 802783e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8027842:	9a01      	ldr	r2, [sp, #4]
 8027844:	2c00      	cmp	r4, #0
 8027846:	4698      	mov	r8, r3
 8027848:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 802784c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8027850:	db3e      	blt.n	80278d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd0>
 8027852:	45a1      	cmp	r9, r4
 8027854:	dd3c      	ble.n	80278d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd0>
 8027856:	2d00      	cmp	r5, #0
 8027858:	db38      	blt.n	80278cc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xcc>
 802785a:	45ac      	cmp	ip, r5
 802785c:	dd36      	ble.n	80278cc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xcc>
 802785e:	f81a 2006 	ldrb.w	r2, [sl, r6]
 8027862:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8027866:	1c6e      	adds	r6, r5, #1
 8027868:	d435      	bmi.n	80278d6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd6>
 802786a:	45b4      	cmp	ip, r6
 802786c:	dd33      	ble.n	80278d6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd6>
 802786e:	b393      	cbz	r3, 80278d6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd6>
 8027870:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8027874:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 8027878:	3401      	adds	r4, #1
 802787a:	d430      	bmi.n	80278de <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xde>
 802787c:	45a1      	cmp	r9, r4
 802787e:	dd2e      	ble.n	80278de <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xde>
 8027880:	b36f      	cbz	r7, 80278de <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xde>
 8027882:	2d00      	cmp	r5, #0
 8027884:	db29      	blt.n	80278da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xda>
 8027886:	45ac      	cmp	ip, r5
 8027888:	dd27      	ble.n	80278da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xda>
 802788a:	f81e 400c 	ldrb.w	r4, [lr, ip]
 802788e:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8027892:	3501      	adds	r5, #1
 8027894:	d407      	bmi.n	80278a6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 8027896:	45ac      	cmp	ip, r5
 8027898:	dd05      	ble.n	80278a6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 802789a:	b123      	cbz	r3, 80278a6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 802789c:	44f4      	add	ip, lr
 802789e:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80278a2:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 80278a6:	2b0f      	cmp	r3, #15
 80278a8:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80278ac:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80278b0:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80278b4:	ea4f 6810 	mov.w	r8, r0, lsr #24
 80278b8:	d801      	bhi.n	80278be <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 80278ba:	2f0f      	cmp	r7, #15
 80278bc:	d911      	bls.n	80278e2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe2>
 80278be:	4b7f      	ldr	r3, [pc, #508]	; (8027abc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2bc>)
 80278c0:	4a7f      	ldr	r2, [pc, #508]	; (8027ac0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c0>)
 80278c2:	4880      	ldr	r0, [pc, #512]	; (8027ac4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c4>)
 80278c4:	f240 210d 	movw	r1, #525	; 0x20d
 80278c8:	f006 fcce 	bl	802e268 <__assert_func>
 80278cc:	4602      	mov	r2, r0
 80278ce:	e7ca      	b.n	8027866 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x66>
 80278d0:	4606      	mov	r6, r0
 80278d2:	4602      	mov	r2, r0
 80278d4:	e7d0      	b.n	8027878 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x78>
 80278d6:	4606      	mov	r6, r0
 80278d8:	e7ce      	b.n	8027878 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x78>
 80278da:	4604      	mov	r4, r0
 80278dc:	e7d9      	b.n	8027892 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x92>
 80278de:	4604      	mov	r4, r0
 80278e0:	e7e1      	b.n	80278a6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 80278e2:	b29b      	uxth	r3, r3
 80278e4:	b2bf      	uxth	r7, r7
 80278e6:	fb03 fe07 	mul.w	lr, r3, r7
 80278ea:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80278ee:	011b      	lsls	r3, r3, #4
 80278f0:	eba3 0c0e 	sub.w	ip, r3, lr
 80278f4:	b2bf      	uxth	r7, r7
 80278f6:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 80278fa:	fa1f fc8c 	uxth.w	ip, ip
 80278fe:	1bed      	subs	r5, r5, r7
 8027900:	b2ad      	uxth	r5, r5
 8027902:	fb0c f30a 	mul.w	r3, ip, sl
 8027906:	fb05 330b 	mla	r3, r5, fp, r3
 802790a:	fb07 3309 	mla	r3, r7, r9, r3
 802790e:	fb0e 3308 	mla	r3, lr, r8, r3
 8027912:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027916:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802791a:	9303      	str	r3, [sp, #12]
 802791c:	d018      	beq.n	8027950 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x150>
 802791e:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8027922:	fb0b f303 	mul.w	r3, fp, r3
 8027926:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802792a:	fb0b fb02 	mul.w	fp, fp, r2
 802792e:	0a1a      	lsrs	r2, r3, #8
 8027930:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027934:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8027938:	441a      	add	r2, r3
 802793a:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 802793e:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8027942:	0a12      	lsrs	r2, r2, #8
 8027944:	0a1b      	lsrs	r3, r3, #8
 8027946:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802794a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802794e:	431a      	orrs	r2, r3
 8027950:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8027954:	d019      	beq.n	802798a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x18a>
 8027956:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 802795a:	fb0a fb0b 	mul.w	fp, sl, fp
 802795e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8027962:	fb0a fa06 	mul.w	sl, sl, r6
 8027966:	ea4f 261b 	mov.w	r6, fp, lsr #8
 802796a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802796e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027972:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8027976:	445e      	add	r6, fp
 8027978:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 802797c:	0a36      	lsrs	r6, r6, #8
 802797e:	0a1b      	lsrs	r3, r3, #8
 8027980:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8027984:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027988:	431e      	orrs	r6, r3
 802798a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802798e:	d019      	beq.n	80279c4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1c4>
 8027990:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8027994:	fb09 fa0a 	mul.w	sl, r9, sl
 8027998:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802799c:	fb09 f904 	mul.w	r9, r9, r4
 80279a0:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80279a4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80279a8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80279ac:	f509 7380 	add.w	r3, r9, #256	; 0x100
 80279b0:	4454      	add	r4, sl
 80279b2:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 80279b6:	0a24      	lsrs	r4, r4, #8
 80279b8:	0a1b      	lsrs	r3, r3, #8
 80279ba:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80279be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80279c2:	431c      	orrs	r4, r3
 80279c4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80279c8:	d019      	beq.n	80279fe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1fe>
 80279ca:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 80279ce:	fb08 f909 	mul.w	r9, r8, r9
 80279d2:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80279d6:	fb08 f800 	mul.w	r8, r8, r0
 80279da:	ea4f 2019 	mov.w	r0, r9, lsr #8
 80279de:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80279e2:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80279e6:	f508 7380 	add.w	r3, r8, #256	; 0x100
 80279ea:	4448      	add	r0, r9
 80279ec:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 80279f0:	0a00      	lsrs	r0, r0, #8
 80279f2:	0a1b      	lsrs	r3, r3, #8
 80279f4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80279f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80279fc:	4318      	orrs	r0, r3
 80279fe:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8027a02:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8027a06:	fb0c f808 	mul.w	r8, ip, r8
 8027a0a:	fb05 8803 	mla	r8, r5, r3, r8
 8027a0e:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8027a12:	fb07 8803 	mla	r8, r7, r3, r8
 8027a16:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8027a1a:	fb0e 8303 	mla	r3, lr, r3, r8
 8027a1e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8027a22:	fb0c f606 	mul.w	r6, ip, r6
 8027a26:	0a1b      	lsrs	r3, r3, #8
 8027a28:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027a2c:	fb05 6202 	mla	r2, r5, r2, r6
 8027a30:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8027a34:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 8027a38:	fb07 2703 	mla	r7, r7, r3, r2
 8027a3c:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8027a40:	b295      	uxth	r5, r2
 8027a42:	9a03      	ldr	r2, [sp, #12]
 8027a44:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8027a48:	436a      	muls	r2, r5
 8027a4a:	fb0e 7303 	mla	r3, lr, r3, r7
 8027a4e:	1c50      	adds	r0, r2, #1
 8027a50:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8027a54:	0a1b      	lsrs	r3, r3, #8
 8027a56:	9a00      	ldr	r2, [sp, #0]
 8027a58:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027a5c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8027a60:	ea48 0303 	orr.w	r3, r8, r3
 8027a64:	b2c0      	uxtb	r0, r0
 8027a66:	fb12 f200 	smulbb	r2, r2, r0
 8027a6a:	0c1e      	lsrs	r6, r3, #16
 8027a6c:	fb06 2605 	mla	r6, r6, r5, r2
 8027a70:	9a01      	ldr	r2, [sp, #4]
 8027a72:	f3c3 2407 	ubfx	r4, r3, #8, #8
 8027a76:	fb12 f200 	smulbb	r2, r2, r0
 8027a7a:	fb04 2205 	mla	r2, r4, r5, r2
 8027a7e:	b294      	uxth	r4, r2
 8027a80:	9a02      	ldr	r2, [sp, #8]
 8027a82:	b2db      	uxtb	r3, r3
 8027a84:	fb12 f200 	smulbb	r2, r2, r0
 8027a88:	fb03 2205 	mla	r2, r3, r5, r2
 8027a8c:	b2b6      	uxth	r6, r6
 8027a8e:	b292      	uxth	r2, r2
 8027a90:	1c73      	adds	r3, r6, #1
 8027a92:	1c50      	adds	r0, r2, #1
 8027a94:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 8027a98:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8027a9c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8027aa0:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8027aa4:	4313      	orrs	r3, r2
 8027aa6:	1c62      	adds	r2, r4, #1
 8027aa8:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8027aac:	0952      	lsrs	r2, r2, #5
 8027aae:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027ab2:	4313      	orrs	r3, r2
 8027ab4:	800b      	strh	r3, [r1, #0]
 8027ab6:	b005      	add	sp, #20
 8027ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027abc:	08034370 	.word	0x08034370
 8027ac0:	080348c9 	.word	0x080348c9
 8027ac4:	080343f8 	.word	0x080343f8

08027ac8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8027ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027acc:	ed2d 8b08 	vpush	{d8-d11}
 8027ad0:	b09b      	sub	sp, #108	; 0x6c
 8027ad2:	eeb0 aa40 	vmov.f32	s20, s0
 8027ad6:	9309      	str	r3, [sp, #36]	; 0x24
 8027ad8:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 8027adc:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 8027ade:	9311      	str	r3, [sp, #68]	; 0x44
 8027ae0:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8027ae4:	9114      	str	r1, [sp, #80]	; 0x50
 8027ae6:	9317      	str	r3, [sp, #92]	; 0x5c
 8027ae8:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8027aec:	9019      	str	r0, [sp, #100]	; 0x64
 8027aee:	6868      	ldr	r0, [r5, #4]
 8027af0:	9218      	str	r2, [sp, #96]	; 0x60
 8027af2:	fb00 1303 	mla	r3, r0, r3, r1
 8027af6:	6829      	ldr	r1, [r5, #0]
 8027af8:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8027afa:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 8027afe:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8027b02:	930c      	str	r3, [sp, #48]	; 0x30
 8027b04:	6813      	ldr	r3, [r2, #0]
 8027b06:	9313      	str	r3, [sp, #76]	; 0x4c
 8027b08:	6853      	ldr	r3, [r2, #4]
 8027b0a:	3304      	adds	r3, #4
 8027b0c:	eef0 9a60 	vmov.f32	s19, s1
 8027b10:	eeb0 9a41 	vmov.f32	s18, s2
 8027b14:	eeb0 8a62 	vmov.f32	s16, s5
 8027b18:	eef0 8a43 	vmov.f32	s17, s6
 8027b1c:	eef0 ba44 	vmov.f32	s23, s8
 8027b20:	eeb0 ba64 	vmov.f32	s22, s9
 8027b24:	eef0 aa45 	vmov.f32	s21, s10
 8027b28:	9308      	str	r3, [sp, #32]
 8027b2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8027b2c:	2b00      	cmp	r3, #0
 8027b2e:	dc03      	bgt.n	8027b38 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8027b30:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8027b32:	2b00      	cmp	r3, #0
 8027b34:	f340 8363 	ble.w	80281fe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x736>
 8027b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027b3a:	2b00      	cmp	r3, #0
 8027b3c:	f340 81ad 	ble.w	8027e9a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d2>
 8027b40:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8027b42:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8027b44:	1412      	asrs	r2, r2, #16
 8027b46:	ea4f 4323 	mov.w	r3, r3, asr #16
 8027b4a:	d42f      	bmi.n	8027bac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8027b4c:	1c51      	adds	r1, r2, #1
 8027b4e:	428c      	cmp	r4, r1
 8027b50:	dd2f      	ble.n	8027bb2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8027b52:	2b00      	cmp	r3, #0
 8027b54:	db2d      	blt.n	8027bb2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8027b56:	9811      	ldr	r0, [sp, #68]	; 0x44
 8027b58:	1c59      	adds	r1, r3, #1
 8027b5a:	4288      	cmp	r0, r1
 8027b5c:	dd29      	ble.n	8027bb2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8027b5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027b60:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8027b62:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8027b64:	3b01      	subs	r3, #1
 8027b66:	fb02 1203 	mla	r2, r2, r3, r1
 8027b6a:	1412      	asrs	r2, r2, #16
 8027b6c:	d42b      	bmi.n	8027bc6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8027b6e:	3201      	adds	r2, #1
 8027b70:	4294      	cmp	r4, r2
 8027b72:	dd28      	ble.n	8027bc6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8027b74:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8027b76:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8027b78:	fb02 1303 	mla	r3, r2, r3, r1
 8027b7c:	141b      	asrs	r3, r3, #16
 8027b7e:	d422      	bmi.n	8027bc6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8027b80:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8027b82:	3301      	adds	r3, #1
 8027b84:	429a      	cmp	r2, r3
 8027b86:	dd1e      	ble.n	8027bc6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8027b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027b8a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8027b8e:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 8027b92:	9312      	str	r3, [sp, #72]	; 0x48
 8027b94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8027b96:	2b00      	cmp	r3, #0
 8027b98:	f300 81ea 	bgt.w	8027f70 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a8>
 8027b9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027b9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027ba0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8027ba4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8027ba8:	930c      	str	r3, [sp, #48]	; 0x30
 8027baa:	e178      	b.n	8027e9e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d6>
 8027bac:	1c51      	adds	r1, r2, #1
 8027bae:	f040 8165 	bne.w	8027e7c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8027bb2:	42a2      	cmp	r2, r4
 8027bb4:	f280 8162 	bge.w	8027e7c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8027bb8:	1c5f      	adds	r7, r3, #1
 8027bba:	f2c0 815f 	blt.w	8027e7c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8027bbe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8027bc0:	4293      	cmp	r3, r2
 8027bc2:	f280 815b 	bge.w	8027e7c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8027bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027bc8:	9316      	str	r3, [sp, #88]	; 0x58
 8027bca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027bcc:	9312      	str	r3, [sp, #72]	; 0x48
 8027bce:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 8027bd2:	9315      	str	r3, [sp, #84]	; 0x54
 8027bd4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8027bd6:	2b00      	cmp	r3, #0
 8027bd8:	dde0      	ble.n	8027b9c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 8027bda:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8027bdc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8027bde:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8027be2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8027be4:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8027be8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8027bea:	1412      	asrs	r2, r2, #16
 8027bec:	ea4f 4323 	mov.w	r3, r3, asr #16
 8027bf0:	f100 81a5 	bmi.w	8027f3e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x476>
 8027bf4:	1c55      	adds	r5, r2, #1
 8027bf6:	42ac      	cmp	r4, r5
 8027bf8:	f340 81a3 	ble.w	8027f42 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47a>
 8027bfc:	2b00      	cmp	r3, #0
 8027bfe:	f2c0 81a0 	blt.w	8027f42 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47a>
 8027c02:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8027c04:	1c5d      	adds	r5, r3, #1
 8027c06:	42af      	cmp	r7, r5
 8027c08:	f340 819b 	ble.w	8027f42 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47a>
 8027c0c:	fb03 2304 	mla	r3, r3, r4, r2
 8027c10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8027c12:	18d5      	adds	r5, r2, r3
 8027c14:	5cd3      	ldrb	r3, [r2, r3]
 8027c16:	9a08      	ldr	r2, [sp, #32]
 8027c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8027c1c:	0e1f      	lsrs	r7, r3, #24
 8027c1e:	2800      	cmp	r0, #0
 8027c20:	f000 817c 	beq.w	8027f1c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x454>
 8027c24:	786a      	ldrb	r2, [r5, #1]
 8027c26:	9e08      	ldr	r6, [sp, #32]
 8027c28:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8027c2c:	920d      	str	r2, [sp, #52]	; 0x34
 8027c2e:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8027c32:	2900      	cmp	r1, #0
 8027c34:	f000 817d 	beq.w	8027f32 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46a>
 8027c38:	192a      	adds	r2, r5, r4
 8027c3a:	5d2d      	ldrb	r5, [r5, r4]
 8027c3c:	7852      	ldrb	r2, [r2, #1]
 8027c3e:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 8027c42:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8027c46:	950a      	str	r5, [sp, #40]	; 0x28
 8027c48:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8027c4c:	920e      	str	r2, [sp, #56]	; 0x38
 8027c4e:	0e15      	lsrs	r5, r2, #24
 8027c50:	b280      	uxth	r0, r0
 8027c52:	b289      	uxth	r1, r1
 8027c54:	fb00 fa01 	mul.w	sl, r0, r1
 8027c58:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 8027c5c:	0100      	lsls	r0, r0, #4
 8027c5e:	eba0 080a 	sub.w	r8, r0, sl
 8027c62:	b289      	uxth	r1, r1
 8027c64:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 8027c68:	fa1f f888 	uxth.w	r8, r8
 8027c6c:	1a52      	subs	r2, r2, r1
 8027c6e:	b292      	uxth	r2, r2
 8027c70:	fb08 f00e 	mul.w	r0, r8, lr
 8027c74:	fb02 0007 	mla	r0, r2, r7, r0
 8027c78:	fb01 0009 	mla	r0, r1, r9, r0
 8027c7c:	fb0a 0005 	mla	r0, sl, r5, r0
 8027c80:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8027c84:	2800      	cmp	r0, #0
 8027c86:	f000 80ea 	beq.w	8027e5e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 8027c8a:	2fff      	cmp	r7, #255	; 0xff
 8027c8c:	d01a      	beq.n	8027cc4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fc>
 8027c8e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8027c92:	fb07 fc0c 	mul.w	ip, r7, ip
 8027c96:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027c9a:	435f      	muls	r7, r3
 8027c9c:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8027ca0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027ca4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8027ca8:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 8027cac:	4463      	add	r3, ip
 8027cae:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 8027cb2:	0a1b      	lsrs	r3, r3, #8
 8027cb4:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8027cb8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027cbc:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8027cc0:	ea43 030b 	orr.w	r3, r3, fp
 8027cc4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8027cc8:	d01e      	beq.n	8027d08 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 8027cca:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8027ccc:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8027cd0:	fb0e fb0b 	mul.w	fp, lr, fp
 8027cd4:	f406 477f 	and.w	r7, r6, #65280	; 0xff00
 8027cd8:	fb0e fe07 	mul.w	lr, lr, r7
 8027cdc:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8027ce0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027ce4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027ce8:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8027cec:	44dc      	add	ip, fp
 8027cee:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8027cf2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027cf6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027cfa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027cfe:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8027d02:	ea4c 060e 	orr.w	r6, ip, lr
 8027d06:	960d      	str	r6, [sp, #52]	; 0x34
 8027d08:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8027d0c:	d01e      	beq.n	8027d4c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x284>
 8027d0e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8027d10:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 8027d14:	fb09 fe0e 	mul.w	lr, r9, lr
 8027d18:	f406 477f 	and.w	r7, r6, #65280	; 0xff00
 8027d1c:	fb09 f907 	mul.w	r9, r9, r7
 8027d20:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8027d24:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027d28:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8027d2c:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8027d30:	44f4      	add	ip, lr
 8027d32:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8027d36:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027d3a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027d3e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027d42:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8027d46:	ea4c 0609 	orr.w	r6, ip, r9
 8027d4a:	960a      	str	r6, [sp, #40]	; 0x28
 8027d4c:	2dff      	cmp	r5, #255	; 0xff
 8027d4e:	d01c      	beq.n	8027d8a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 8027d50:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8027d52:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 8027d56:	fb05 fe0e 	mul.w	lr, r5, lr
 8027d5a:	f406 477f 	and.w	r7, r6, #65280	; 0xff00
 8027d5e:	437d      	muls	r5, r7
 8027d60:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8027d64:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027d68:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8027d6c:	f505 7780 	add.w	r7, r5, #256	; 0x100
 8027d70:	44f4      	add	ip, lr
 8027d72:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 8027d76:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027d7a:	0a2d      	lsrs	r5, r5, #8
 8027d7c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027d80:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8027d84:	ea4c 0505 	orr.w	r5, ip, r5
 8027d88:	950e      	str	r5, [sp, #56]	; 0x38
 8027d8a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027d8c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8027d8e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8027d92:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8027d96:	fb08 f505 	mul.w	r5, r8, r5
 8027d9a:	fb02 5507 	mla	r5, r2, r7, r5
 8027d9e:	f006 17ff 	and.w	r7, r6, #16711935	; 0xff00ff
 8027da2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8027da4:	fb01 5507 	mla	r5, r1, r7, r5
 8027da8:	f006 17ff 	and.w	r7, r6, #16711935	; 0xff00ff
 8027dac:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8027dae:	fb0a 5507 	mla	r5, sl, r7, r5
 8027db2:	f406 477f 	and.w	r7, r6, #65280	; 0xff00
 8027db6:	fb08 f807 	mul.w	r8, r8, r7
 8027dba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027dbe:	fb02 8303 	mla	r3, r2, r3, r8
 8027dc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027dc4:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8027dc6:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8027dca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8027dcc:	fb01 330c 	mla	r3, r1, ip, r3
 8027dd0:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8027dd4:	fb0a 3a01 	mla	sl, sl, r1, r3
 8027dd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8027dda:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8027ddc:	881f      	ldrh	r7, [r3, #0]
 8027dde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8027de0:	0a2d      	lsrs	r5, r5, #8
 8027de2:	4343      	muls	r3, r0
 8027de4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027de8:	1c58      	adds	r0, r3, #1
 8027dea:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8027dee:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027df2:	ea45 050a 	orr.w	r5, r5, sl
 8027df6:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8027dfa:	0c29      	lsrs	r1, r5, #16
 8027dfc:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8027e00:	123b      	asrs	r3, r7, #8
 8027e02:	b2c0      	uxtb	r0, r0
 8027e04:	fb11 f102 	smulbb	r1, r1, r2
 8027e08:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8027e0c:	fb03 1300 	mla	r3, r3, r0, r1
 8027e10:	b299      	uxth	r1, r3
 8027e12:	10fa      	asrs	r2, r7, #3
 8027e14:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8027e18:	fb13 f306 	smulbb	r3, r3, r6
 8027e1c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8027e20:	fb02 3200 	mla	r2, r2, r0, r3
 8027e24:	b2ed      	uxtb	r5, r5
 8027e26:	00fb      	lsls	r3, r7, #3
 8027e28:	b2db      	uxtb	r3, r3
 8027e2a:	fb15 f506 	smulbb	r5, r5, r6
 8027e2e:	fb03 5500 	mla	r5, r3, r0, r5
 8027e32:	b292      	uxth	r2, r2
 8027e34:	b2ad      	uxth	r5, r5
 8027e36:	1c4b      	adds	r3, r1, #1
 8027e38:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8027e3c:	1c68      	adds	r0, r5, #1
 8027e3e:	1c51      	adds	r1, r2, #1
 8027e40:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 8027e44:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8027e48:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8027e4c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8027e50:	0952      	lsrs	r2, r2, #5
 8027e52:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027e56:	432b      	orrs	r3, r5
 8027e58:	4313      	orrs	r3, r2
 8027e5a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8027e5c:	8013      	strh	r3, [r2, #0]
 8027e5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8027e60:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8027e62:	3302      	adds	r3, #2
 8027e64:	9312      	str	r3, [sp, #72]	; 0x48
 8027e66:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8027e68:	4413      	add	r3, r2
 8027e6a:	932d      	str	r3, [sp, #180]	; 0xb4
 8027e6c:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8027e6e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8027e70:	4413      	add	r3, r2
 8027e72:	932e      	str	r3, [sp, #184]	; 0xb8
 8027e74:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8027e76:	3b01      	subs	r3, #1
 8027e78:	9316      	str	r3, [sp, #88]	; 0x58
 8027e7a:	e6ab      	b.n	8027bd4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8027e7c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8027e7e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8027e80:	4413      	add	r3, r2
 8027e82:	932d      	str	r3, [sp, #180]	; 0xb4
 8027e84:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8027e86:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8027e88:	4413      	add	r3, r2
 8027e8a:	932e      	str	r3, [sp, #184]	; 0xb8
 8027e8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027e8e:	3b01      	subs	r3, #1
 8027e90:	9309      	str	r3, [sp, #36]	; 0x24
 8027e92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027e94:	3302      	adds	r3, #2
 8027e96:	930c      	str	r3, [sp, #48]	; 0x30
 8027e98:	e64e      	b.n	8027b38 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8027e9a:	f47f ae60 	bne.w	8027b5e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8027e9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8027ea0:	2b00      	cmp	r3, #0
 8027ea2:	f340 81ac 	ble.w	80281fe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x736>
 8027ea6:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8027eaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027eae:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8027eb2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027eb4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8027eb8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8027ebc:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8027ec0:	eef0 6a48 	vmov.f32	s13, s16
 8027ec4:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027ec8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027ecc:	ee37 8a48 	vsub.f32	s16, s14, s16
 8027ed0:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 8027ed4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8027ed8:	eef0 6a68 	vmov.f32	s13, s17
 8027edc:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8027ee0:	ee18 2a10 	vmov	r2, s16
 8027ee4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8027ee8:	fb92 f3f3 	sdiv	r3, r2, r3
 8027eec:	ee18 2a90 	vmov	r2, s17
 8027ef0:	932f      	str	r3, [sp, #188]	; 0xbc
 8027ef2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027ef4:	fb92 f3f3 	sdiv	r3, r2, r3
 8027ef8:	9330      	str	r3, [sp, #192]	; 0xc0
 8027efa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8027efc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8027efe:	3b01      	subs	r3, #1
 8027f00:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027f04:	9314      	str	r3, [sp, #80]	; 0x50
 8027f06:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027f08:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 8027f0c:	bf08      	it	eq
 8027f0e:	4613      	moveq	r3, r2
 8027f10:	9309      	str	r3, [sp, #36]	; 0x24
 8027f12:	eef0 8a67 	vmov.f32	s17, s15
 8027f16:	eeb0 8a47 	vmov.f32	s16, s14
 8027f1a:	e606      	b.n	8027b2a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 8027f1c:	b161      	cbz	r1, 8027f38 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x470>
 8027f1e:	5d2a      	ldrb	r2, [r5, r4]
 8027f20:	9d08      	ldr	r5, [sp, #32]
 8027f22:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8027f26:	920a      	str	r2, [sp, #40]	; 0x28
 8027f28:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8027f2c:	25ff      	movs	r5, #255	; 0xff
 8027f2e:	46ae      	mov	lr, r5
 8027f30:	e68e      	b.n	8027c50 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x188>
 8027f32:	25ff      	movs	r5, #255	; 0xff
 8027f34:	46a9      	mov	r9, r5
 8027f36:	e68b      	b.n	8027c50 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x188>
 8027f38:	25ff      	movs	r5, #255	; 0xff
 8027f3a:	46a9      	mov	r9, r5
 8027f3c:	e7f7      	b.n	8027f2e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8027f3e:	1c56      	adds	r6, r2, #1
 8027f40:	d18d      	bne.n	8027e5e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 8027f42:	4294      	cmp	r4, r2
 8027f44:	dd8b      	ble.n	8027e5e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 8027f46:	1c5d      	adds	r5, r3, #1
 8027f48:	db89      	blt.n	8027e5e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 8027f4a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027f4c:	429d      	cmp	r5, r3
 8027f4e:	dd86      	ble.n	8027e5e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 8027f50:	e9cd 3003 	strd	r3, r0, [sp, #12]
 8027f54:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8027f56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8027f58:	9202      	str	r2, [sp, #8]
 8027f5a:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8027f5e:	e9cd 4300 	strd	r4, r3, [sp]
 8027f62:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
 8027f66:	9b08      	ldr	r3, [sp, #32]
 8027f68:	9819      	ldr	r0, [sp, #100]	; 0x64
 8027f6a:	f7ff fc49 	bl	8027800 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8027f6e:	e776      	b.n	8027e5e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 8027f70:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8027f72:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8027f74:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8027f78:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8027f7a:	1412      	asrs	r2, r2, #16
 8027f7c:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8027f80:	141b      	asrs	r3, r3, #16
 8027f82:	fb04 2303 	mla	r3, r4, r3, r2
 8027f86:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8027f88:	18d5      	adds	r5, r2, r3
 8027f8a:	5cd3      	ldrb	r3, [r2, r3]
 8027f8c:	9a08      	ldr	r2, [sp, #32]
 8027f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8027f92:	0e1e      	lsrs	r6, r3, #24
 8027f94:	2900      	cmp	r1, #0
 8027f96:	f000 8121 	beq.w	80281dc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x714>
 8027f9a:	786a      	ldrb	r2, [r5, #1]
 8027f9c:	9f08      	ldr	r7, [sp, #32]
 8027f9e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8027fa2:	920f      	str	r2, [sp, #60]	; 0x3c
 8027fa4:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8027fa8:	2800      	cmp	r0, #0
 8027faa:	f000 8122 	beq.w	80281f2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72a>
 8027fae:	192a      	adds	r2, r5, r4
 8027fb0:	5d2d      	ldrb	r5, [r5, r4]
 8027fb2:	7852      	ldrb	r2, [r2, #1]
 8027fb4:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8027fb8:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8027fbc:	950b      	str	r5, [sp, #44]	; 0x2c
 8027fbe:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8027fc2:	9210      	str	r2, [sp, #64]	; 0x40
 8027fc4:	0e15      	lsrs	r5, r2, #24
 8027fc6:	b289      	uxth	r1, r1
 8027fc8:	b280      	uxth	r0, r0
 8027fca:	fb01 f900 	mul.w	r9, r1, r0
 8027fce:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8027fd2:	0109      	lsls	r1, r1, #4
 8027fd4:	eba1 0e09 	sub.w	lr, r1, r9
 8027fd8:	b280      	uxth	r0, r0
 8027fda:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8027fde:	fa1f fe8e 	uxth.w	lr, lr
 8027fe2:	1a12      	subs	r2, r2, r0
 8027fe4:	b292      	uxth	r2, r2
 8027fe6:	fb0e f10c 	mul.w	r1, lr, ip
 8027fea:	fb02 1106 	mla	r1, r2, r6, r1
 8027fee:	fb00 1108 	mla	r1, r0, r8, r1
 8027ff2:	fb09 1105 	mla	r1, r9, r5, r1
 8027ff6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8027ffa:	2900      	cmp	r1, #0
 8027ffc:	f000 80e0 	beq.w	80281c0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f8>
 8028000:	2eff      	cmp	r6, #255	; 0xff
 8028002:	d016      	beq.n	8028032 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56a>
 8028004:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8028008:	4377      	muls	r7, r6
 802800a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802800e:	435e      	muls	r6, r3
 8028010:	0a3b      	lsrs	r3, r7, #8
 8028012:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028016:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802801a:	443b      	add	r3, r7
 802801c:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8028020:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8028024:	0a1b      	lsrs	r3, r3, #8
 8028026:	0a3f      	lsrs	r7, r7, #8
 8028028:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802802c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8028030:	433b      	orrs	r3, r7
 8028032:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8028036:	d01d      	beq.n	8028074 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5ac>
 8028038:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 802803a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 802803c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8028040:	fb0c f606 	mul.w	r6, ip, r6
 8028044:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8028048:	fb0c fc07 	mul.w	ip, ip, r7
 802804c:	0a37      	lsrs	r7, r6, #8
 802804e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8028052:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8028056:	4437      	add	r7, r6
 8028058:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 802805c:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8028060:	0a3f      	lsrs	r7, r7, #8
 8028062:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028066:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802806a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802806e:	ea47 060c 	orr.w	r6, r7, ip
 8028072:	960f      	str	r6, [sp, #60]	; 0x3c
 8028074:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8028078:	d01d      	beq.n	80280b6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5ee>
 802807a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 802807c:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8028080:	fb08 fc0c 	mul.w	ip, r8, ip
 8028084:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8028088:	fb08 f806 	mul.w	r8, r8, r6
 802808c:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8028090:	f508 7680 	add.w	r6, r8, #256	; 0x100
 8028094:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8028098:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802809c:	eb06 2818 	add.w	r8, r6, r8, lsr #8
 80280a0:	4467      	add	r7, ip
 80280a2:	0a3f      	lsrs	r7, r7, #8
 80280a4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80280a8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80280ac:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80280b0:	ea47 0608 	orr.w	r6, r7, r8
 80280b4:	960b      	str	r6, [sp, #44]	; 0x2c
 80280b6:	2dff      	cmp	r5, #255	; 0xff
 80280b8:	d01a      	beq.n	80280f0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x628>
 80280ba:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80280bc:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80280c0:	fb05 fc0c 	mul.w	ip, r5, ip
 80280c4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80280c8:	4375      	muls	r5, r6
 80280ca:	ea4f 271c 	mov.w	r7, ip, lsr #8
 80280ce:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80280d2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80280d6:	f505 7680 	add.w	r6, r5, #256	; 0x100
 80280da:	4467      	add	r7, ip
 80280dc:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80280e0:	0a3f      	lsrs	r7, r7, #8
 80280e2:	0a2d      	lsrs	r5, r5, #8
 80280e4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80280e8:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80280ec:	433d      	orrs	r5, r7
 80280ee:	9510      	str	r5, [sp, #64]	; 0x40
 80280f0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80280f2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80280f6:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 80280fa:	fb0e f505 	mul.w	r5, lr, r5
 80280fe:	fb02 5506 	mla	r5, r2, r6, r5
 8028102:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8028104:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8028108:	fb00 5506 	mla	r5, r0, r6, r5
 802810c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 802810e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8028112:	fb09 5506 	mla	r5, r9, r6, r5
 8028116:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8028118:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802811c:	fb0e fe06 	mul.w	lr, lr, r6
 8028120:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028124:	fb02 e303 	mla	r3, r2, r3, lr
 8028128:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802812a:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 802812e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8028130:	fb00 3307 	mla	r3, r0, r7, r3
 8028134:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8028138:	fb09 3c0c 	mla	ip, r9, ip, r3
 802813c:	fb01 f10b 	mul.w	r1, r1, fp
 8028140:	0a2d      	lsrs	r5, r5, #8
 8028142:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028146:	f8ba 0000 	ldrh.w	r0, [sl]
 802814a:	1c4b      	adds	r3, r1, #1
 802814c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8028150:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8028154:	ea45 050c 	orr.w	r5, r5, ip
 8028158:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802815c:	1202      	asrs	r2, r0, #8
 802815e:	0c2b      	lsrs	r3, r5, #16
 8028160:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8028164:	b2c9      	uxtb	r1, r1
 8028166:	fb13 f30b 	smulbb	r3, r3, fp
 802816a:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802816e:	fb02 3201 	mla	r2, r2, r1, r3
 8028172:	f3c5 2607 	ubfx	r6, r5, #8, #8
 8028176:	10c3      	asrs	r3, r0, #3
 8028178:	b2ed      	uxtb	r5, r5
 802817a:	00c0      	lsls	r0, r0, #3
 802817c:	b2c0      	uxtb	r0, r0
 802817e:	fb15 f50b 	smulbb	r5, r5, fp
 8028182:	fb00 5001 	mla	r0, r0, r1, r5
 8028186:	b292      	uxth	r2, r2
 8028188:	fb16 f60b 	smulbb	r6, r6, fp
 802818c:	b280      	uxth	r0, r0
 802818e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8028192:	fb03 6301 	mla	r3, r3, r1, r6
 8028196:	1c51      	adds	r1, r2, #1
 8028198:	1c46      	adds	r6, r0, #1
 802819a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802819e:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 80281a2:	b29b      	uxth	r3, r3
 80281a4:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80281a8:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80281ac:	4332      	orrs	r2, r6
 80281ae:	1c5e      	adds	r6, r3, #1
 80281b0:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 80281b4:	095b      	lsrs	r3, r3, #5
 80281b6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80281ba:	431a      	orrs	r2, r3
 80281bc:	f8aa 2000 	strh.w	r2, [sl]
 80281c0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80281c2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80281c4:	4413      	add	r3, r2
 80281c6:	932d      	str	r3, [sp, #180]	; 0xb4
 80281c8:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80281ca:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80281cc:	4413      	add	r3, r2
 80281ce:	932e      	str	r3, [sp, #184]	; 0xb8
 80281d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80281d2:	3b01      	subs	r3, #1
 80281d4:	f10a 0a02 	add.w	sl, sl, #2
 80281d8:	9312      	str	r3, [sp, #72]	; 0x48
 80281da:	e4db      	b.n	8027b94 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 80281dc:	b160      	cbz	r0, 80281f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x730>
 80281de:	5d2a      	ldrb	r2, [r5, r4]
 80281e0:	9d08      	ldr	r5, [sp, #32]
 80281e2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80281e6:	920b      	str	r2, [sp, #44]	; 0x2c
 80281e8:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80281ec:	25ff      	movs	r5, #255	; 0xff
 80281ee:	46ac      	mov	ip, r5
 80281f0:	e6e9      	b.n	8027fc6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4fe>
 80281f2:	25ff      	movs	r5, #255	; 0xff
 80281f4:	46a8      	mov	r8, r5
 80281f6:	e6e6      	b.n	8027fc6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4fe>
 80281f8:	25ff      	movs	r5, #255	; 0xff
 80281fa:	46a8      	mov	r8, r5
 80281fc:	e7f7      	b.n	80281ee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x726>
 80281fe:	b01b      	add	sp, #108	; 0x6c
 8028200:	ecbd 8b08 	vpop	{d8-d11}
 8028204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028208 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8028208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802820c:	8808      	ldrh	r0, [r1, #0]
 802820e:	b085      	sub	sp, #20
 8028210:	1206      	asrs	r6, r0, #8
 8028212:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 8028216:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 802821a:	9600      	str	r6, [sp, #0]
 802821c:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8028220:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8028224:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8028228:	10c6      	asrs	r6, r0, #3
 802822a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802822e:	9601      	str	r6, [sp, #4]
 8028230:	00c0      	lsls	r0, r0, #3
 8028232:	fb04 560c 	mla	r6, r4, ip, r5
 8028236:	b2c0      	uxtb	r0, r0
 8028238:	4692      	mov	sl, r2
 802823a:	eb02 0e06 	add.w	lr, r2, r6
 802823e:	9a00      	ldr	r2, [sp, #0]
 8028240:	9002      	str	r0, [sp, #8]
 8028242:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8028246:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 802824a:	9a01      	ldr	r2, [sp, #4]
 802824c:	2c00      	cmp	r4, #0
 802824e:	4698      	mov	r8, r3
 8028250:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8028254:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8028258:	db3e      	blt.n	80282d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd0>
 802825a:	45a1      	cmp	r9, r4
 802825c:	dd3c      	ble.n	80282d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd0>
 802825e:	2d00      	cmp	r5, #0
 8028260:	db38      	blt.n	80282d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xcc>
 8028262:	45ac      	cmp	ip, r5
 8028264:	dd36      	ble.n	80282d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xcc>
 8028266:	f81a 2006 	ldrb.w	r2, [sl, r6]
 802826a:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 802826e:	1c6e      	adds	r6, r5, #1
 8028270:	d435      	bmi.n	80282de <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 8028272:	45b4      	cmp	ip, r6
 8028274:	dd33      	ble.n	80282de <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 8028276:	b393      	cbz	r3, 80282de <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 8028278:	f89e 6001 	ldrb.w	r6, [lr, #1]
 802827c:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 8028280:	3401      	adds	r4, #1
 8028282:	d430      	bmi.n	80282e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xde>
 8028284:	45a1      	cmp	r9, r4
 8028286:	dd2e      	ble.n	80282e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xde>
 8028288:	b36f      	cbz	r7, 80282e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xde>
 802828a:	2d00      	cmp	r5, #0
 802828c:	db29      	blt.n	80282e2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xda>
 802828e:	45ac      	cmp	ip, r5
 8028290:	dd27      	ble.n	80282e2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xda>
 8028292:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8028296:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 802829a:	3501      	adds	r5, #1
 802829c:	d407      	bmi.n	80282ae <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa6>
 802829e:	45ac      	cmp	ip, r5
 80282a0:	dd05      	ble.n	80282ae <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa6>
 80282a2:	b123      	cbz	r3, 80282ae <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa6>
 80282a4:	44f4      	add	ip, lr
 80282a6:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80282aa:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 80282ae:	2b0f      	cmp	r3, #15
 80282b0:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80282b4:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80282b8:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80282bc:	ea4f 6810 	mov.w	r8, r0, lsr #24
 80282c0:	d801      	bhi.n	80282c6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xbe>
 80282c2:	2f0f      	cmp	r7, #15
 80282c4:	d911      	bls.n	80282ea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 80282c6:	4b79      	ldr	r3, [pc, #484]	; (80284ac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2a4>)
 80282c8:	4a79      	ldr	r2, [pc, #484]	; (80284b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2a8>)
 80282ca:	487a      	ldr	r0, [pc, #488]	; (80284b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2ac>)
 80282cc:	f240 210d 	movw	r1, #525	; 0x20d
 80282d0:	f005 ffca 	bl	802e268 <__assert_func>
 80282d4:	4602      	mov	r2, r0
 80282d6:	e7ca      	b.n	802826e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x66>
 80282d8:	4606      	mov	r6, r0
 80282da:	4602      	mov	r2, r0
 80282dc:	e7d0      	b.n	8028280 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x78>
 80282de:	4606      	mov	r6, r0
 80282e0:	e7ce      	b.n	8028280 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x78>
 80282e2:	4604      	mov	r4, r0
 80282e4:	e7d9      	b.n	802829a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x92>
 80282e6:	4604      	mov	r4, r0
 80282e8:	e7e1      	b.n	80282ae <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa6>
 80282ea:	b29b      	uxth	r3, r3
 80282ec:	b2bf      	uxth	r7, r7
 80282ee:	fb03 fe07 	mul.w	lr, r3, r7
 80282f2:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80282f6:	011b      	lsls	r3, r3, #4
 80282f8:	eba3 0c0e 	sub.w	ip, r3, lr
 80282fc:	b2bf      	uxth	r7, r7
 80282fe:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8028302:	fa1f fc8c 	uxth.w	ip, ip
 8028306:	1bed      	subs	r5, r5, r7
 8028308:	b2ad      	uxth	r5, r5
 802830a:	fb0c f30a 	mul.w	r3, ip, sl
 802830e:	fb05 330b 	mla	r3, r5, fp, r3
 8028312:	fb07 3309 	mla	r3, r7, r9, r3
 8028316:	fb0e 3308 	mla	r3, lr, r8, r3
 802831a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802831e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8028322:	9303      	str	r3, [sp, #12]
 8028324:	d018      	beq.n	8028358 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x150>
 8028326:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 802832a:	fb0b f303 	mul.w	r3, fp, r3
 802832e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028332:	fb0b fb02 	mul.w	fp, fp, r2
 8028336:	0a1a      	lsrs	r2, r3, #8
 8028338:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802833c:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8028340:	441a      	add	r2, r3
 8028342:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8028346:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 802834a:	0a12      	lsrs	r2, r2, #8
 802834c:	0a1b      	lsrs	r3, r3, #8
 802834e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028352:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028356:	431a      	orrs	r2, r3
 8028358:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802835c:	d019      	beq.n	8028392 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x18a>
 802835e:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8028362:	fb0a fb0b 	mul.w	fp, sl, fp
 8028366:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802836a:	fb0a fa06 	mul.w	sl, sl, r6
 802836e:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8028372:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8028376:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802837a:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 802837e:	445e      	add	r6, fp
 8028380:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8028384:	0a36      	lsrs	r6, r6, #8
 8028386:	0a1b      	lsrs	r3, r3, #8
 8028388:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802838c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028390:	431e      	orrs	r6, r3
 8028392:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8028396:	d019      	beq.n	80283cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1c4>
 8028398:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 802839c:	fb09 fa0a 	mul.w	sl, r9, sl
 80283a0:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80283a4:	fb09 f904 	mul.w	r9, r9, r4
 80283a8:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80283ac:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80283b0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80283b4:	f509 7380 	add.w	r3, r9, #256	; 0x100
 80283b8:	4454      	add	r4, sl
 80283ba:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 80283be:	0a24      	lsrs	r4, r4, #8
 80283c0:	0a1b      	lsrs	r3, r3, #8
 80283c2:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80283c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80283ca:	431c      	orrs	r4, r3
 80283cc:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80283d0:	d019      	beq.n	8028406 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1fe>
 80283d2:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 80283d6:	fb08 f909 	mul.w	r9, r8, r9
 80283da:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80283de:	fb08 f800 	mul.w	r8, r8, r0
 80283e2:	ea4f 2019 	mov.w	r0, r9, lsr #8
 80283e6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80283ea:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80283ee:	f508 7380 	add.w	r3, r8, #256	; 0x100
 80283f2:	4448      	add	r0, r9
 80283f4:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 80283f8:	0a00      	lsrs	r0, r0, #8
 80283fa:	0a1b      	lsrs	r3, r3, #8
 80283fc:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8028400:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028404:	4318      	orrs	r0, r3
 8028406:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 802840a:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 802840e:	fb0c f808 	mul.w	r8, ip, r8
 8028412:	fb05 8803 	mla	r8, r5, r3, r8
 8028416:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 802841a:	fb07 8803 	mla	r8, r7, r3, r8
 802841e:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8028422:	fb0e 8303 	mla	r3, lr, r3, r8
 8028426:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802842a:	0a1b      	lsrs	r3, r3, #8
 802842c:	fb0c f606 	mul.w	r6, ip, r6
 8028430:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028434:	fb05 6202 	mla	r2, r5, r2, r6
 8028438:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 802843c:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 8028440:	fb07 2703 	mla	r7, r7, r3, r2
 8028444:	9a03      	ldr	r2, [sp, #12]
 8028446:	9c02      	ldr	r4, [sp, #8]
 8028448:	9d01      	ldr	r5, [sp, #4]
 802844a:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 802844e:	fb0e 7303 	mla	r3, lr, r3, r7
 8028452:	43d0      	mvns	r0, r2
 8028454:	9a00      	ldr	r2, [sp, #0]
 8028456:	b2c0      	uxtb	r0, r0
 8028458:	0a1b      	lsrs	r3, r3, #8
 802845a:	4342      	muls	r2, r0
 802845c:	4344      	muls	r4, r0
 802845e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028462:	ea48 0303 	orr.w	r3, r8, r3
 8028466:	4345      	muls	r5, r0
 8028468:	4620      	mov	r0, r4
 802846a:	1c54      	adds	r4, r2, #1
 802846c:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8028470:	0c1a      	lsrs	r2, r3, #16
 8028472:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8028476:	4a10      	ldr	r2, [pc, #64]	; (80284b8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b0>)
 8028478:	ea02 2204 	and.w	r2, r2, r4, lsl #8
 802847c:	1c44      	adds	r4, r0, #1
 802847e:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 8028482:	b2d8      	uxtb	r0, r3
 8028484:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8028488:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 802848c:	1c68      	adds	r0, r5, #1
 802848e:	eb00 2015 	add.w	r0, r0, r5, lsr #8
 8028492:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028496:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802849a:	00db      	lsls	r3, r3, #3
 802849c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80284a0:	4313      	orrs	r3, r2
 80284a2:	800b      	strh	r3, [r1, #0]
 80284a4:	b005      	add	sp, #20
 80284a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80284aa:	bf00      	nop
 80284ac:	08034370 	.word	0x08034370
 80284b0:	080348c9 	.word	0x080348c9
 80284b4:	080343f8 	.word	0x080343f8
 80284b8:	fffff800 	.word	0xfffff800

080284bc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80284bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80284c0:	ed2d 8b08 	vpush	{d8-d11}
 80284c4:	b097      	sub	sp, #92	; 0x5c
 80284c6:	eeb0 aa40 	vmov.f32	s20, s0
 80284ca:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 80284cc:	9307      	str	r3, [sp, #28]
 80284ce:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 80284d2:	9112      	str	r1, [sp, #72]	; 0x48
 80284d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80284d6:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80284da:	9015      	str	r0, [sp, #84]	; 0x54
 80284dc:	6868      	ldr	r0, [r5, #4]
 80284de:	9214      	str	r2, [sp, #80]	; 0x50
 80284e0:	fb00 1303 	mla	r3, r0, r3, r1
 80284e4:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 80284e6:	6829      	ldr	r1, [r5, #0]
 80284e8:	6855      	ldr	r5, [r2, #4]
 80284ea:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 80284ee:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80284f2:	930a      	str	r3, [sp, #40]	; 0x28
 80284f4:	6813      	ldr	r3, [r2, #0]
 80284f6:	9311      	str	r3, [sp, #68]	; 0x44
 80284f8:	eef0 9a60 	vmov.f32	s19, s1
 80284fc:	eeb0 9a41 	vmov.f32	s18, s2
 8028500:	eeb0 8a62 	vmov.f32	s16, s5
 8028504:	eef0 8a43 	vmov.f32	s17, s6
 8028508:	eef0 ba44 	vmov.f32	s23, s8
 802850c:	eeb0 ba64 	vmov.f32	s22, s9
 8028510:	eef0 aa45 	vmov.f32	s21, s10
 8028514:	3504      	adds	r5, #4
 8028516:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8028518:	2b00      	cmp	r3, #0
 802851a:	dc03      	bgt.n	8028524 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 802851c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802851e:	2b00      	cmp	r3, #0
 8028520:	f340 834d 	ble.w	8028bbe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x702>
 8028524:	9b07      	ldr	r3, [sp, #28]
 8028526:	2b00      	cmp	r3, #0
 8028528:	f340 819c 	ble.w	8028864 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a8>
 802852c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802852e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8028530:	1412      	asrs	r2, r2, #16
 8028532:	ea4f 4323 	mov.w	r3, r3, asr #16
 8028536:	d42d      	bmi.n	8028594 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8028538:	1c51      	adds	r1, r2, #1
 802853a:	428c      	cmp	r4, r1
 802853c:	dd2d      	ble.n	802859a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 802853e:	2b00      	cmp	r3, #0
 8028540:	db2b      	blt.n	802859a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8028542:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8028544:	1c59      	adds	r1, r3, #1
 8028546:	4288      	cmp	r0, r1
 8028548:	dd27      	ble.n	802859a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 802854a:	9b07      	ldr	r3, [sp, #28]
 802854c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802854e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8028550:	3b01      	subs	r3, #1
 8028552:	fb02 1203 	mla	r2, r2, r3, r1
 8028556:	1412      	asrs	r2, r2, #16
 8028558:	d429      	bmi.n	80285ae <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 802855a:	3201      	adds	r2, #1
 802855c:	4294      	cmp	r4, r2
 802855e:	dd26      	ble.n	80285ae <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8028560:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8028562:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8028564:	fb02 1303 	mla	r3, r2, r3, r1
 8028568:	141b      	asrs	r3, r3, #16
 802856a:	d420      	bmi.n	80285ae <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 802856c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802856e:	3301      	adds	r3, #1
 8028570:	429a      	cmp	r2, r3
 8028572:	dd1c      	ble.n	80285ae <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8028574:	9b07      	ldr	r3, [sp, #28]
 8028576:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 802857a:	9310      	str	r3, [sp, #64]	; 0x40
 802857c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802857e:	2b00      	cmp	r3, #0
 8028580:	f300 81da 	bgt.w	8028938 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47c>
 8028584:	9b07      	ldr	r3, [sp, #28]
 8028586:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8028588:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802858c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8028590:	930a      	str	r3, [sp, #40]	; 0x28
 8028592:	e169      	b.n	8028868 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 8028594:	1c51      	adds	r1, r2, #1
 8028596:	f040 8156 	bne.w	8028846 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38a>
 802859a:	42a2      	cmp	r2, r4
 802859c:	f280 8153 	bge.w	8028846 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38a>
 80285a0:	1c5a      	adds	r2, r3, #1
 80285a2:	f2c0 8150 	blt.w	8028846 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38a>
 80285a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80285a8:	4293      	cmp	r3, r2
 80285aa:	f280 814c 	bge.w	8028846 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38a>
 80285ae:	9b07      	ldr	r3, [sp, #28]
 80285b0:	9313      	str	r3, [sp, #76]	; 0x4c
 80285b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80285b4:	9310      	str	r3, [sp, #64]	; 0x40
 80285b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80285b8:	2b00      	cmp	r3, #0
 80285ba:	dde3      	ble.n	8028584 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 80285bc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80285be:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80285c0:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80285c4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80285c6:	f3c2 3003 	ubfx	r0, r2, #12, #4
 80285ca:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80285cc:	1412      	asrs	r2, r2, #16
 80285ce:	ea4f 4323 	mov.w	r3, r3, asr #16
 80285d2:	f100 8198 	bmi.w	8028906 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44a>
 80285d6:	1c56      	adds	r6, r2, #1
 80285d8:	42b4      	cmp	r4, r6
 80285da:	f340 8196 	ble.w	802890a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44e>
 80285de:	2b00      	cmp	r3, #0
 80285e0:	f2c0 8193 	blt.w	802890a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44e>
 80285e4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80285e6:	1c5e      	adds	r6, r3, #1
 80285e8:	42b7      	cmp	r7, r6
 80285ea:	f340 818e 	ble.w	802890a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44e>
 80285ee:	fb03 2304 	mla	r3, r3, r4, r2
 80285f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80285f4:	18d6      	adds	r6, r2, r3
 80285f6:	5cd3      	ldrb	r3, [r2, r3]
 80285f8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80285fc:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8028600:	2900      	cmp	r1, #0
 8028602:	f000 8170 	beq.w	80288e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 8028606:	7872      	ldrb	r2, [r6, #1]
 8028608:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802860c:	920b      	str	r2, [sp, #44]	; 0x2c
 802860e:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8028612:	2800      	cmp	r0, #0
 8028614:	f000 8171 	beq.w	80288fa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43e>
 8028618:	1932      	adds	r2, r6, r4
 802861a:	5d36      	ldrb	r6, [r6, r4]
 802861c:	7852      	ldrb	r2, [r2, #1]
 802861e:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8028622:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8028626:	9608      	str	r6, [sp, #32]
 8028628:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802862c:	920c      	str	r2, [sp, #48]	; 0x30
 802862e:	0e16      	lsrs	r6, r2, #24
 8028630:	b289      	uxth	r1, r1
 8028632:	b280      	uxth	r0, r0
 8028634:	fb01 fb00 	mul.w	fp, r1, r0
 8028638:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 802863c:	0109      	lsls	r1, r1, #4
 802863e:	eba1 090b 	sub.w	r9, r1, fp
 8028642:	b280      	uxth	r0, r0
 8028644:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8028648:	fa1f f989 	uxth.w	r9, r9
 802864c:	1a12      	subs	r2, r2, r0
 802864e:	b292      	uxth	r2, r2
 8028650:	fb09 f108 	mul.w	r1, r9, r8
 8028654:	fb02 110c 	mla	r1, r2, ip, r1
 8028658:	fb00 110a 	mla	r1, r0, sl, r1
 802865c:	fb0b 1106 	mla	r1, fp, r6, r1
 8028660:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8028664:	2900      	cmp	r1, #0
 8028666:	f000 80df 	beq.w	8028828 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 802866a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802866e:	d01b      	beq.n	80286a8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ec>
 8028670:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8028674:	fb0c fe0e 	mul.w	lr, ip, lr
 8028678:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802867c:	fb0c fc03 	mul.w	ip, ip, r3
 8028680:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8028684:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028688:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802868c:	4473      	add	r3, lr
 802868e:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8028692:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8028696:	0a1b      	lsrs	r3, r3, #8
 8028698:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802869c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80286a0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80286a4:	ea43 030e 	orr.w	r3, r3, lr
 80286a8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80286ac:	d01e      	beq.n	80286ec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x230>
 80286ae:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80286b0:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80286b4:	fb08 fc0c 	mul.w	ip, r8, ip
 80286b8:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 80286bc:	fb08 f80e 	mul.w	r8, r8, lr
 80286c0:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80286c4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80286c8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80286cc:	44e6      	add	lr, ip
 80286ce:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 80286d2:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 80286d6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80286da:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80286de:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80286e2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80286e6:	ea4e 0708 	orr.w	r7, lr, r8
 80286ea:	970b      	str	r7, [sp, #44]	; 0x2c
 80286ec:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80286f0:	d01e      	beq.n	8028730 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80286f2:	9f08      	ldr	r7, [sp, #32]
 80286f4:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 80286f8:	fb0a f808 	mul.w	r8, sl, r8
 80286fc:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8028700:	fb0a fa0c 	mul.w	sl, sl, ip
 8028704:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8028708:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802870c:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8028710:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028714:	44c6      	add	lr, r8
 8028716:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802871a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802871e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028722:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028726:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802872a:	ea4e 070a 	orr.w	r7, lr, sl
 802872e:	9708      	str	r7, [sp, #32]
 8028730:	2eff      	cmp	r6, #255	; 0xff
 8028732:	d01d      	beq.n	8028770 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b4>
 8028734:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8028736:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 802873a:	fb06 f808 	mul.w	r8, r6, r8
 802873e:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8028742:	fb06 f60c 	mul.w	r6, r6, ip
 8028746:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 802874a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802874e:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8028752:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8028756:	44c6      	add	lr, r8
 8028758:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 802875c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028760:	0a36      	lsrs	r6, r6, #8
 8028762:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028766:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802876a:	ea4e 0606 	orr.w	r6, lr, r6
 802876e:	960c      	str	r6, [sp, #48]	; 0x30
 8028770:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8028772:	9f08      	ldr	r7, [sp, #32]
 8028774:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8028778:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802877c:	fb09 f606 	mul.w	r6, r9, r6
 8028780:	fb02 660c 	mla	r6, r2, ip, r6
 8028784:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8028788:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 802878a:	fb00 660c 	mla	r6, r0, ip, r6
 802878e:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8028792:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8028794:	fb0b 660c 	mla	r6, fp, ip, r6
 8028798:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 802879c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80287a0:	fb09 f90c 	mul.w	r9, r9, ip
 80287a4:	fb02 9303 	mla	r3, r2, r3, r9
 80287a8:	9a08      	ldr	r2, [sp, #32]
 80287aa:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 80287ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80287b0:	fb00 330e 	mla	r3, r0, lr, r3
 80287b4:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 80287b8:	fb0b 3b00 	mla	fp, fp, r0, r3
 80287bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80287be:	881b      	ldrh	r3, [r3, #0]
 80287c0:	43c9      	mvns	r1, r1
 80287c2:	1218      	asrs	r0, r3, #8
 80287c4:	b2c9      	uxtb	r1, r1
 80287c6:	10da      	asrs	r2, r3, #3
 80287c8:	0a36      	lsrs	r6, r6, #8
 80287ca:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80287ce:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80287d2:	00db      	lsls	r3, r3, #3
 80287d4:	4348      	muls	r0, r1
 80287d6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80287da:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80287de:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80287e2:	b2db      	uxtb	r3, r3
 80287e4:	434b      	muls	r3, r1
 80287e6:	ea46 060b 	orr.w	r6, r6, fp
 80287ea:	434a      	muls	r2, r1
 80287ec:	1c41      	adds	r1, r0, #1
 80287ee:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80287f2:	0c30      	lsrs	r0, r6, #16
 80287f4:	eb00 2011 	add.w	r0, r0, r1, lsr #8
 80287f8:	494e      	ldr	r1, [pc, #312]	; (8028934 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x478>)
 80287fa:	ea01 2000 	and.w	r0, r1, r0, lsl #8
 80287fe:	1c59      	adds	r1, r3, #1
 8028800:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8028804:	b2f3      	uxtb	r3, r6
 8028806:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802880a:	1c51      	adds	r1, r2, #1
 802880c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8028810:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8028814:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8028818:	00f6      	lsls	r6, r6, #3
 802881a:	ea40 03d3 	orr.w	r3, r0, r3, lsr #3
 802881e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8028822:	431e      	orrs	r6, r3
 8028824:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8028826:	801e      	strh	r6, [r3, #0]
 8028828:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802882a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802882c:	3302      	adds	r3, #2
 802882e:	9310      	str	r3, [sp, #64]	; 0x40
 8028830:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8028832:	4413      	add	r3, r2
 8028834:	9329      	str	r3, [sp, #164]	; 0xa4
 8028836:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8028838:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802883a:	4413      	add	r3, r2
 802883c:	932a      	str	r3, [sp, #168]	; 0xa8
 802883e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8028840:	3b01      	subs	r3, #1
 8028842:	9313      	str	r3, [sp, #76]	; 0x4c
 8028844:	e6b7      	b.n	80285b6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8028846:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8028848:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802884a:	4413      	add	r3, r2
 802884c:	9329      	str	r3, [sp, #164]	; 0xa4
 802884e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8028850:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8028852:	4413      	add	r3, r2
 8028854:	932a      	str	r3, [sp, #168]	; 0xa8
 8028856:	9b07      	ldr	r3, [sp, #28]
 8028858:	3b01      	subs	r3, #1
 802885a:	9307      	str	r3, [sp, #28]
 802885c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802885e:	3302      	adds	r3, #2
 8028860:	930a      	str	r3, [sp, #40]	; 0x28
 8028862:	e65f      	b.n	8028524 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8028864:	f47f ae71 	bne.w	802854a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 8028868:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802886a:	2b00      	cmp	r3, #0
 802886c:	f340 81a7 	ble.w	8028bbe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x702>
 8028870:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8028874:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028878:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802887c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802887e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8028882:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8028886:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802888a:	eef0 6a48 	vmov.f32	s13, s16
 802888e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8028892:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028896:	ee37 8a48 	vsub.f32	s16, s14, s16
 802889a:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 802889e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80288a2:	eef0 6a68 	vmov.f32	s13, s17
 80288a6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80288aa:	ee18 2a10 	vmov	r2, s16
 80288ae:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80288b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80288b6:	ee18 2a90 	vmov	r2, s17
 80288ba:	932b      	str	r3, [sp, #172]	; 0xac
 80288bc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80288be:	fb92 f3f3 	sdiv	r3, r2, r3
 80288c2:	932c      	str	r3, [sp, #176]	; 0xb0
 80288c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80288c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80288c8:	3b01      	subs	r3, #1
 80288ca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80288ce:	9312      	str	r3, [sp, #72]	; 0x48
 80288d0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80288d2:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 80288d6:	bf08      	it	eq
 80288d8:	4613      	moveq	r3, r2
 80288da:	9307      	str	r3, [sp, #28]
 80288dc:	eef0 8a67 	vmov.f32	s17, s15
 80288e0:	eeb0 8a47 	vmov.f32	s16, s14
 80288e4:	e617      	b.n	8028516 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 80288e6:	b158      	cbz	r0, 8028900 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x444>
 80288e8:	5d32      	ldrb	r2, [r6, r4]
 80288ea:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80288ee:	9208      	str	r2, [sp, #32]
 80288f0:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 80288f4:	26ff      	movs	r6, #255	; 0xff
 80288f6:	46b0      	mov	r8, r6
 80288f8:	e69a      	b.n	8028630 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 80288fa:	26ff      	movs	r6, #255	; 0xff
 80288fc:	46b2      	mov	sl, r6
 80288fe:	e697      	b.n	8028630 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 8028900:	26ff      	movs	r6, #255	; 0xff
 8028902:	46b2      	mov	sl, r6
 8028904:	e7f7      	b.n	80288f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43a>
 8028906:	1c57      	adds	r7, r2, #1
 8028908:	d18e      	bne.n	8028828 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 802890a:	4294      	cmp	r4, r2
 802890c:	dd8c      	ble.n	8028828 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 802890e:	1c5e      	adds	r6, r3, #1
 8028910:	db8a      	blt.n	8028828 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 8028912:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8028914:	429e      	cmp	r6, r3
 8028916:	dd87      	ble.n	8028828 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 8028918:	e9cd 1004 	strd	r1, r0, [sp, #16]
 802891c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8028920:	e9cd 4600 	strd	r4, r6, [sp]
 8028924:	462b      	mov	r3, r5
 8028926:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
 802892a:	9815      	ldr	r0, [sp, #84]	; 0x54
 802892c:	f7ff fc6c 	bl	8028208 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8028930:	e77a      	b.n	8028828 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 8028932:	bf00      	nop
 8028934:	fffff800 	.word	0xfffff800
 8028938:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802893a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 802893c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8028940:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8028942:	1409      	asrs	r1, r1, #16
 8028944:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8028948:	141b      	asrs	r3, r3, #16
 802894a:	fb04 1303 	mla	r3, r4, r3, r1
 802894e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8028950:	18ce      	adds	r6, r1, r3
 8028952:	5ccb      	ldrb	r3, [r1, r3]
 8028954:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8028958:	0e1f      	lsrs	r7, r3, #24
 802895a:	2a00      	cmp	r2, #0
 802895c:	f000 811f 	beq.w	8028b9e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e2>
 8028960:	7871      	ldrb	r1, [r6, #1]
 8028962:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8028966:	910d      	str	r1, [sp, #52]	; 0x34
 8028968:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 802896c:	2800      	cmp	r0, #0
 802896e:	f000 8120 	beq.w	8028bb2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f6>
 8028972:	1931      	adds	r1, r6, r4
 8028974:	5d36      	ldrb	r6, [r6, r4]
 8028976:	7849      	ldrb	r1, [r1, #1]
 8028978:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 802897c:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8028980:	9609      	str	r6, [sp, #36]	; 0x24
 8028982:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8028986:	910e      	str	r1, [sp, #56]	; 0x38
 8028988:	0e0e      	lsrs	r6, r1, #24
 802898a:	b292      	uxth	r2, r2
 802898c:	b280      	uxth	r0, r0
 802898e:	fb02 fa00 	mul.w	sl, r2, r0
 8028992:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8028996:	0112      	lsls	r2, r2, #4
 8028998:	eba2 080a 	sub.w	r8, r2, sl
 802899c:	b280      	uxth	r0, r0
 802899e:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80289a2:	fa1f f888 	uxth.w	r8, r8
 80289a6:	1a09      	subs	r1, r1, r0
 80289a8:	b289      	uxth	r1, r1
 80289aa:	fb08 f20e 	mul.w	r2, r8, lr
 80289ae:	fb01 2207 	mla	r2, r1, r7, r2
 80289b2:	fb00 2209 	mla	r2, r0, r9, r2
 80289b6:	fb0a 2206 	mla	r2, sl, r6, r2
 80289ba:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80289be:	9213      	str	r2, [sp, #76]	; 0x4c
 80289c0:	2a00      	cmp	r2, #0
 80289c2:	f000 80de 	beq.w	8028b82 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c6>
 80289c6:	2fff      	cmp	r7, #255	; 0xff
 80289c8:	d01a      	beq.n	8028a00 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x544>
 80289ca:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80289ce:	fb07 fc0c 	mul.w	ip, r7, ip
 80289d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80289d6:	435f      	muls	r7, r3
 80289d8:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80289dc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80289e0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80289e4:	4463      	add	r3, ip
 80289e6:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 80289ea:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 80289ee:	0a1b      	lsrs	r3, r3, #8
 80289f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80289f4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80289f8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80289fc:	ea43 030c 	orr.w	r3, r3, ip
 8028a00:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8028a04:	d01f      	beq.n	8028a46 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58a>
 8028a06:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8028a08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8028a0a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8028a0e:	fb0e f707 	mul.w	r7, lr, r7
 8028a12:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8028a16:	fb0e fe0c 	mul.w	lr, lr, ip
 8028a1a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028a1e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028a22:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8028a26:	44bc      	add	ip, r7
 8028a28:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8028a2c:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8028a30:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028a34:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028a38:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028a3c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8028a40:	ea4c 020e 	orr.w	r2, ip, lr
 8028a44:	920d      	str	r2, [sp, #52]	; 0x34
 8028a46:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8028a4a:	d01e      	beq.n	8028a8a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5ce>
 8028a4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028a4e:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8028a52:	fb09 fe0e 	mul.w	lr, r9, lr
 8028a56:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8028a5a:	fb09 f907 	mul.w	r9, r9, r7
 8028a5e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8028a62:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028a66:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8028a6a:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8028a6e:	44f4      	add	ip, lr
 8028a70:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8028a74:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028a78:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028a7c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028a80:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8028a84:	ea4c 0209 	orr.w	r2, ip, r9
 8028a88:	9209      	str	r2, [sp, #36]	; 0x24
 8028a8a:	2eff      	cmp	r6, #255	; 0xff
 8028a8c:	d01c      	beq.n	8028ac8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60c>
 8028a8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8028a90:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8028a94:	fb06 fe0e 	mul.w	lr, r6, lr
 8028a98:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8028a9c:	437e      	muls	r6, r7
 8028a9e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8028aa2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028aa6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8028aaa:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8028aae:	44f4      	add	ip, lr
 8028ab0:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8028ab4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028ab8:	0a36      	lsrs	r6, r6, #8
 8028aba:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028abe:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8028ac2:	ea4c 0206 	orr.w	r2, ip, r6
 8028ac6:	920e      	str	r2, [sp, #56]	; 0x38
 8028ac8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8028aca:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8028ace:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028ad0:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8028ad4:	fb08 f606 	mul.w	r6, r8, r6
 8028ad8:	fb01 6607 	mla	r6, r1, r7, r6
 8028adc:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8028ae0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8028ae2:	fb00 6607 	mla	r6, r0, r7, r6
 8028ae6:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8028aea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8028aec:	fb0a 6607 	mla	r6, sl, r7, r6
 8028af0:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8028af4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028af6:	fb08 f807 	mul.w	r8, r8, r7
 8028afa:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8028afe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028b02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8028b04:	fb01 8303 	mla	r3, r1, r3, r8
 8028b08:	fb00 330c 	mla	r3, r0, ip, r3
 8028b0c:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8028b10:	fb0a 3e0e 	mla	lr, sl, lr, r3
 8028b14:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8028b16:	f8bb 3000 	ldrh.w	r3, [fp]
 8028b1a:	43d2      	mvns	r2, r2
 8028b1c:	1218      	asrs	r0, r3, #8
 8028b1e:	b2d2      	uxtb	r2, r2
 8028b20:	0a36      	lsrs	r6, r6, #8
 8028b22:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028b26:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8028b2a:	4350      	muls	r0, r2
 8028b2c:	10d9      	asrs	r1, r3, #3
 8028b2e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8028b32:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8028b36:	00db      	lsls	r3, r3, #3
 8028b38:	ea46 060e 	orr.w	r6, r6, lr
 8028b3c:	1c47      	adds	r7, r0, #1
 8028b3e:	b2db      	uxtb	r3, r3
 8028b40:	4353      	muls	r3, r2
 8028b42:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 8028b46:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8028b4a:	0c37      	lsrs	r7, r6, #16
 8028b4c:	4351      	muls	r1, r2
 8028b4e:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 8028b52:	4a1d      	ldr	r2, [pc, #116]	; (8028bc8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70c>)
 8028b54:	1c5f      	adds	r7, r3, #1
 8028b56:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8028b5a:	b2f7      	uxtb	r7, r6
 8028b5c:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8028b60:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8028b64:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
 8028b68:	1c4b      	adds	r3, r1, #1
 8028b6a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8028b6e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8028b72:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 8028b76:	00f6      	lsls	r6, r6, #3
 8028b78:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8028b7c:	4330      	orrs	r0, r6
 8028b7e:	f8ab 0000 	strh.w	r0, [fp]
 8028b82:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8028b84:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8028b86:	4413      	add	r3, r2
 8028b88:	9329      	str	r3, [sp, #164]	; 0xa4
 8028b8a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8028b8c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8028b8e:	4413      	add	r3, r2
 8028b90:	932a      	str	r3, [sp, #168]	; 0xa8
 8028b92:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8028b94:	3b01      	subs	r3, #1
 8028b96:	f10b 0b02 	add.w	fp, fp, #2
 8028b9a:	9310      	str	r3, [sp, #64]	; 0x40
 8028b9c:	e4ee      	b.n	802857c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc0>
 8028b9e:	b158      	cbz	r0, 8028bb8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6fc>
 8028ba0:	5d31      	ldrb	r1, [r6, r4]
 8028ba2:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8028ba6:	9109      	str	r1, [sp, #36]	; 0x24
 8028ba8:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8028bac:	26ff      	movs	r6, #255	; 0xff
 8028bae:	46b6      	mov	lr, r6
 8028bb0:	e6eb      	b.n	802898a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ce>
 8028bb2:	26ff      	movs	r6, #255	; 0xff
 8028bb4:	46b1      	mov	r9, r6
 8028bb6:	e6e8      	b.n	802898a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ce>
 8028bb8:	26ff      	movs	r6, #255	; 0xff
 8028bba:	46b1      	mov	r9, r6
 8028bbc:	e7f7      	b.n	8028bae <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f2>
 8028bbe:	b017      	add	sp, #92	; 0x5c
 8028bc0:	ecbd 8b08 	vpop	{d8-d11}
 8028bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028bc8:	fffff800 	.word	0xfffff800

08028bcc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8028bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028bd0:	b087      	sub	sp, #28
 8028bd2:	e9dd e012 	ldrd	lr, r0, [sp, #72]	; 0x48
 8028bd6:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
 8028bda:	9105      	str	r1, [sp, #20]
 8028bdc:	fb00 e604 	mla	r6, r0, r4, lr
 8028be0:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 8028be4:	9102      	str	r1, [sp, #8]
 8028be6:	eb02 0146 	add.w	r1, r2, r6, lsl #1
 8028bea:	9103      	str	r1, [sp, #12]
 8028bec:	9905      	ldr	r1, [sp, #20]
 8028bee:	f9bd 7044 	ldrsh.w	r7, [sp, #68]	; 0x44
 8028bf2:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8028bf6:	8809      	ldrh	r1, [r1, #0]
 8028bf8:	2800      	cmp	r0, #0
 8028bfa:	eb03 0a06 	add.w	sl, r3, r6
 8028bfe:	f2c0 80ca 	blt.w	8028d96 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ca>
 8028c02:	4287      	cmp	r7, r0
 8028c04:	f340 80c7 	ble.w	8028d96 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ca>
 8028c08:	f1be 0f00 	cmp.w	lr, #0
 8028c0c:	f2c0 80bf 	blt.w	8028d8e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c2>
 8028c10:	4574      	cmp	r4, lr
 8028c12:	f340 80bc 	ble.w	8028d8e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c2>
 8028c16:	f813 c006 	ldrb.w	ip, [r3, r6]
 8028c1a:	f832 9016 	ldrh.w	r9, [r2, r6, lsl #1]
 8028c1e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8028c22:	d01c      	beq.n	8028c5e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x92>
 8028c24:	f429 66fc 	bic.w	r6, r9, #2016	; 0x7e0
 8028c28:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8028c2c:	4372      	muls	r2, r6
 8028c2e:	f64f 081f 	movw	r8, #63519	; 0xf81f
 8028c32:	ea08 1352 	and.w	r3, r8, r2, lsr #5
 8028c36:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8028c3a:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8028c3e:	fb0c f609 	mul.w	r6, ip, r9
 8028c42:	eb03 0902 	add.w	r9, r3, r2
 8028c46:	ea08 1959 	and.w	r9, r8, r9, lsr #5
 8028c4a:	f106 0820 	add.w	r8, r6, #32
 8028c4e:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 8028c52:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8028c56:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8028c5a:	ea49 0908 	orr.w	r9, r9, r8
 8028c5e:	fa1f f989 	uxth.w	r9, r9
 8028c62:	f11e 0301 	adds.w	r3, lr, #1
 8028c66:	f100 809b 	bmi.w	8028da0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d4>
 8028c6a:	429c      	cmp	r4, r3
 8028c6c:	f340 8098 	ble.w	8028da0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d4>
 8028c70:	2d00      	cmp	r5, #0
 8028c72:	f000 8095 	beq.w	8028da0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d4>
 8028c76:	f89a 6001 	ldrb.w	r6, [sl, #1]
 8028c7a:	9b03      	ldr	r3, [sp, #12]
 8028c7c:	2eff      	cmp	r6, #255	; 0xff
 8028c7e:	885b      	ldrh	r3, [r3, #2]
 8028c80:	d01b      	beq.n	8028cba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xee>
 8028c82:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 8028c86:	ea4f 08e6 	mov.w	r8, r6, asr #3
 8028c8a:	fb08 f202 	mul.w	r2, r8, r2
 8028c8e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028c92:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8028c96:	fb06 f803 	mul.w	r8, r6, r3
 8028c9a:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 8028c9e:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8028ca2:	441a      	add	r2, r3
 8028ca4:	f108 0320 	add.w	r3, r8, #32
 8028ca8:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8028cac:	0a1b      	lsrs	r3, r3, #8
 8028cae:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 8028cb2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028cb6:	ea4b 0303 	orr.w	r3, fp, r3
 8028cba:	b29b      	uxth	r3, r3
 8028cbc:	9301      	str	r3, [sp, #4]
 8028cbe:	3001      	adds	r0, #1
 8028cc0:	d474      	bmi.n	8028dac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 8028cc2:	4287      	cmp	r7, r0
 8028cc4:	dd72      	ble.n	8028dac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 8028cc6:	9a02      	ldr	r2, [sp, #8]
 8028cc8:	2a00      	cmp	r2, #0
 8028cca:	f000 8121 	beq.w	8028f10 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x344>
 8028cce:	f1be 0f00 	cmp.w	lr, #0
 8028cd2:	db68      	blt.n	8028da6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1da>
 8028cd4:	4574      	cmp	r4, lr
 8028cd6:	dd66      	ble.n	8028da6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1da>
 8028cd8:	f81a 7004 	ldrb.w	r7, [sl, r4]
 8028cdc:	9a03      	ldr	r2, [sp, #12]
 8028cde:	2fff      	cmp	r7, #255	; 0xff
 8028ce0:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
 8028ce4:	d01c      	beq.n	8028d20 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x154>
 8028ce6:	f420 62fc 	bic.w	r2, r0, #2016	; 0x7e0
 8028cea:	ea4f 08e7 	mov.w	r8, r7, asr #3
 8028cee:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028cf2:	fb07 fb00 	mul.w	fp, r7, r0
 8028cf6:	fb08 f802 	mul.w	r8, r8, r2
 8028cfa:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8028cfe:	ea00 1258 	and.w	r2, r0, r8, lsr #5
 8028d02:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8028d06:	4490      	add	r8, r2
 8028d08:	f10b 0220 	add.w	r2, fp, #32
 8028d0c:	eb02 2b1b 	add.w	fp, r2, fp, lsr #8
 8028d10:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8028d14:	ea00 1058 	and.w	r0, r0, r8, lsr #5
 8028d18:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8028d1c:	ea40 000b 	orr.w	r0, r0, fp
 8028d20:	b280      	uxth	r0, r0
 8028d22:	f11e 0e01 	adds.w	lr, lr, #1
 8028d26:	d446      	bmi.n	8028db6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ea>
 8028d28:	4574      	cmp	r4, lr
 8028d2a:	dd44      	ble.n	8028db6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ea>
 8028d2c:	2d00      	cmp	r5, #0
 8028d2e:	d045      	beq.n	8028dbc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1f0>
 8028d30:	1c62      	adds	r2, r4, #1
 8028d32:	9b03      	ldr	r3, [sp, #12]
 8028d34:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8028d38:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8028d3c:	2cff      	cmp	r4, #255	; 0xff
 8028d3e:	d01c      	beq.n	8028d7a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ae>
 8028d40:	f422 6efc 	bic.w	lr, r2, #2016	; 0x7e0
 8028d44:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8028d48:	fb08 fe0e 	mul.w	lr, r8, lr
 8028d4c:	f64f 0a1f 	movw	sl, #63519	; 0xf81f
 8028d50:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028d54:	fb04 f802 	mul.w	r8, r4, r2
 8028d58:	ea0a 125e 	and.w	r2, sl, lr, lsr #5
 8028d5c:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8028d60:	4472      	add	r2, lr
 8028d62:	ea0a 1252 	and.w	r2, sl, r2, lsr #5
 8028d66:	f108 0a20 	add.w	sl, r8, #32
 8028d6a:	eb0a 2a18 	add.w	sl, sl, r8, lsr #8
 8028d6e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028d72:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8028d76:	ea42 020a 	orr.w	r2, r2, sl
 8028d7a:	b292      	uxth	r2, r2
 8028d7c:	2d0f      	cmp	r5, #15
 8028d7e:	d91f      	bls.n	8028dc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1f4>
 8028d80:	4b67      	ldr	r3, [pc, #412]	; (8028f20 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x354>)
 8028d82:	4a68      	ldr	r2, [pc, #416]	; (8028f24 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x358>)
 8028d84:	4868      	ldr	r0, [pc, #416]	; (8028f28 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x35c>)
 8028d86:	f240 210d 	movw	r1, #525	; 0x20d
 8028d8a:	f005 fa6d 	bl	802e268 <__assert_func>
 8028d8e:	4689      	mov	r9, r1
 8028d90:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8028d94:	e765      	b.n	8028c62 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x96>
 8028d96:	26ff      	movs	r6, #255	; 0xff
 8028d98:	9101      	str	r1, [sp, #4]
 8028d9a:	4689      	mov	r9, r1
 8028d9c:	46b4      	mov	ip, r6
 8028d9e:	e78e      	b.n	8028cbe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xf2>
 8028da0:	9101      	str	r1, [sp, #4]
 8028da2:	26ff      	movs	r6, #255	; 0xff
 8028da4:	e78b      	b.n	8028cbe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xf2>
 8028da6:	4608      	mov	r0, r1
 8028da8:	27ff      	movs	r7, #255	; 0xff
 8028daa:	e7ba      	b.n	8028d22 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x156>
 8028dac:	24ff      	movs	r4, #255	; 0xff
 8028dae:	460a      	mov	r2, r1
 8028db0:	4608      	mov	r0, r1
 8028db2:	4627      	mov	r7, r4
 8028db4:	e7e2      	b.n	8028d7c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 8028db6:	460a      	mov	r2, r1
 8028db8:	24ff      	movs	r4, #255	; 0xff
 8028dba:	e7df      	b.n	8028d7c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 8028dbc:	460a      	mov	r2, r1
 8028dbe:	24ff      	movs	r4, #255	; 0xff
 8028dc0:	9b02      	ldr	r3, [sp, #8]
 8028dc2:	2b0f      	cmp	r3, #15
 8028dc4:	d8dc      	bhi.n	8028d80 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b4>
 8028dc6:	f8bd e008 	ldrh.w	lr, [sp, #8]
 8028dca:	fa1f f885 	uxth.w	r8, r5
 8028dce:	fb08 fa0e 	mul.w	sl, r8, lr
 8028dd2:	ea4f 1308 	mov.w	r3, r8, lsl #4
 8028dd6:	ebca 1e0e 	rsb	lr, sl, lr, lsl #4
 8028dda:	9303      	str	r3, [sp, #12]
 8028ddc:	fa1f f38e 	uxth.w	r3, lr
 8028de0:	9304      	str	r3, [sp, #16]
 8028de2:	ea4f 4809 	mov.w	r8, r9, lsl #16
 8028de6:	9b02      	ldr	r3, [sp, #8]
 8028de8:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8028dec:	f008 68fc 	and.w	r8, r8, #132120576	; 0x7e00000
 8028df0:	fb15 fe03 	smulbb	lr, r5, r3
 8028df4:	ea48 0809 	orr.w	r8, r8, r9
 8028df8:	f1c3 0910 	rsb	r9, r3, #16
 8028dfc:	9b01      	ldr	r3, [sp, #4]
 8028dfe:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8028e02:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8028e06:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8028e0a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8028e0e:	eba9 0905 	sub.w	r9, r9, r5
 8028e12:	ea4b 0303 	orr.w	r3, fp, r3
 8028e16:	ebce 0545 	rsb	r5, lr, r5, lsl #1
 8028e1a:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8028e1e:	eb0e 0949 	add.w	r9, lr, r9, lsl #1
 8028e22:	436b      	muls	r3, r5
 8028e24:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8028e28:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8028e2c:	ea4b 0202 	orr.w	r2, fp, r2
 8028e30:	fb09 3308 	mla	r3, r9, r8, r3
 8028e34:	fb0e 3302 	mla	r3, lr, r2, r3
 8028e38:	0402      	lsls	r2, r0, #16
 8028e3a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8028e3e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8028e42:	4310      	orrs	r0, r2
 8028e44:	9a02      	ldr	r2, [sp, #8]
 8028e46:	ebce 0e42 	rsb	lr, lr, r2, lsl #1
 8028e4a:	fb0e 3e00 	mla	lr, lr, r0, r3
 8028e4e:	9803      	ldr	r0, [sp, #12]
 8028e50:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 8028e54:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8028e58:	9804      	ldr	r0, [sp, #16]
 8028e5a:	1a2d      	subs	r5, r5, r0
 8028e5c:	9803      	ldr	r0, [sp, #12]
 8028e5e:	eba0 000a 	sub.w	r0, r0, sl
 8028e62:	b280      	uxth	r0, r0
 8028e64:	b2ad      	uxth	r5, r5
 8028e66:	4346      	muls	r6, r0
 8028e68:	9804      	ldr	r0, [sp, #16]
 8028e6a:	fb0c 6605 	mla	r6, ip, r5, r6
 8028e6e:	fb00 6707 	mla	r7, r0, r7, r6
 8028e72:	fb0a 7404 	mla	r4, sl, r4, r7
 8028e76:	b292      	uxth	r2, r2
 8028e78:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8028e7c:	4354      	muls	r4, r2
 8028e7e:	ea4f 535e 	mov.w	r3, lr, lsr #21
 8028e82:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8028e86:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028e8a:	f104 0a01 	add.w	sl, r4, #1
 8028e8e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8028e92:	ea43 0e0e 	orr.w	lr, r3, lr
 8028e96:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8028e9a:	fa1f f38e 	uxth.w	r3, lr
 8028e9e:	1208      	asrs	r0, r1, #8
 8028ea0:	ea6f 2414 	mvn.w	r4, r4, lsr #8
 8028ea4:	b2e4      	uxtb	r4, r4
 8028ea6:	121d      	asrs	r5, r3, #8
 8028ea8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8028eac:	fb10 f004 	smulbb	r0, r0, r4
 8028eb0:	10ce      	asrs	r6, r1, #3
 8028eb2:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8028eb6:	00c9      	lsls	r1, r1, #3
 8028eb8:	fb05 0502 	mla	r5, r5, r2, r0
 8028ebc:	b2c9      	uxtb	r1, r1
 8028ebe:	10d8      	asrs	r0, r3, #3
 8028ec0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8028ec4:	00db      	lsls	r3, r3, #3
 8028ec6:	fb16 f604 	smulbb	r6, r6, r4
 8028eca:	b2db      	uxtb	r3, r3
 8028ecc:	fb11 f404 	smulbb	r4, r1, r4
 8028ed0:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8028ed4:	fb00 6002 	mla	r0, r0, r2, r6
 8028ed8:	fb03 4202 	mla	r2, r3, r2, r4
 8028edc:	b2ad      	uxth	r5, r5
 8028ede:	b292      	uxth	r2, r2
 8028ee0:	1c6b      	adds	r3, r5, #1
 8028ee2:	1c51      	adds	r1, r2, #1
 8028ee4:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 8028ee8:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8028eec:	b280      	uxth	r0, r0
 8028eee:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8028ef2:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8028ef6:	4313      	orrs	r3, r2
 8028ef8:	1c42      	adds	r2, r0, #1
 8028efa:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8028efe:	0940      	lsrs	r0, r0, #5
 8028f00:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028f04:	9a05      	ldr	r2, [sp, #20]
 8028f06:	4303      	orrs	r3, r0
 8028f08:	8013      	strh	r3, [r2, #0]
 8028f0a:	b007      	add	sp, #28
 8028f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028f10:	2d0f      	cmp	r5, #15
 8028f12:	f63f af35 	bhi.w	8028d80 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b4>
 8028f16:	24ff      	movs	r4, #255	; 0xff
 8028f18:	460a      	mov	r2, r1
 8028f1a:	4608      	mov	r0, r1
 8028f1c:	4627      	mov	r7, r4
 8028f1e:	e752      	b.n	8028dc6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1fa>
 8028f20:	08034370 	.word	0x08034370
 8028f24:	080348c9 	.word	0x080348c9
 8028f28:	080343f8 	.word	0x080343f8

08028f2c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8028f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028f30:	ed2d 8b08 	vpush	{d8-d11}
 8028f34:	b099      	sub	sp, #100	; 0x64
 8028f36:	eeb0 aa40 	vmov.f32	s20, s0
 8028f3a:	9308      	str	r3, [sp, #32]
 8028f3c:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 8028f40:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
 8028f42:	930b      	str	r3, [sp, #44]	; 0x2c
 8028f44:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 8028f48:	9314      	str	r3, [sp, #80]	; 0x50
 8028f4a:	9113      	str	r1, [sp, #76]	; 0x4c
 8028f4c:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8028f50:	9017      	str	r0, [sp, #92]	; 0x5c
 8028f52:	6870      	ldr	r0, [r6, #4]
 8028f54:	9216      	str	r2, [sp, #88]	; 0x58
 8028f56:	fb00 1303 	mla	r3, r0, r3, r1
 8028f5a:	6831      	ldr	r1, [r6, #0]
 8028f5c:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8028f5e:	f9bd 50c8 	ldrsh.w	r5, [sp, #200]	; 0xc8
 8028f62:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8028f66:	9309      	str	r3, [sp, #36]	; 0x24
 8028f68:	6813      	ldr	r3, [r2, #0]
 8028f6a:	930c      	str	r3, [sp, #48]	; 0x30
 8028f6c:	6853      	ldr	r3, [r2, #4]
 8028f6e:	930d      	str	r3, [sp, #52]	; 0x34
 8028f70:	006b      	lsls	r3, r5, #1
 8028f72:	9312      	str	r3, [sp, #72]	; 0x48
 8028f74:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8028f78:	930a      	str	r3, [sp, #40]	; 0x28
 8028f7a:	eef0 9a60 	vmov.f32	s19, s1
 8028f7e:	eeb0 9a41 	vmov.f32	s18, s2
 8028f82:	eeb0 8a62 	vmov.f32	s16, s5
 8028f86:	eef0 8a43 	vmov.f32	s17, s6
 8028f8a:	eef0 ba44 	vmov.f32	s23, s8
 8028f8e:	eeb0 ba64 	vmov.f32	s22, s9
 8028f92:	eef0 aa45 	vmov.f32	s21, s10
 8028f96:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8028f98:	2b00      	cmp	r3, #0
 8028f9a:	dc03      	bgt.n	8028fa4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8028f9c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8028f9e:	2b00      	cmp	r3, #0
 8028fa0:	f340 83bf 	ble.w	8029722 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7f6>
 8028fa4:	9b08      	ldr	r3, [sp, #32]
 8028fa6:	2b00      	cmp	r3, #0
 8028fa8:	f340 81cb 	ble.w	8029342 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x416>
 8028fac:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8028fae:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028fb0:	1412      	asrs	r2, r2, #16
 8028fb2:	ea4f 4323 	mov.w	r3, r3, asr #16
 8028fb6:	d42f      	bmi.n	8029018 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 8028fb8:	1c51      	adds	r1, r2, #1
 8028fba:	428d      	cmp	r5, r1
 8028fbc:	dd2f      	ble.n	802901e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8028fbe:	2b00      	cmp	r3, #0
 8028fc0:	db2d      	blt.n	802901e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8028fc2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8028fc4:	1c59      	adds	r1, r3, #1
 8028fc6:	4288      	cmp	r0, r1
 8028fc8:	dd29      	ble.n	802901e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8028fca:	9b08      	ldr	r3, [sp, #32]
 8028fcc:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8028fce:	992b      	ldr	r1, [sp, #172]	; 0xac
 8028fd0:	3b01      	subs	r3, #1
 8028fd2:	fb02 1203 	mla	r2, r2, r3, r1
 8028fd6:	1412      	asrs	r2, r2, #16
 8028fd8:	d42b      	bmi.n	8029032 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x106>
 8028fda:	3201      	adds	r2, #1
 8028fdc:	4295      	cmp	r5, r2
 8028fde:	dd28      	ble.n	8029032 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x106>
 8028fe0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8028fe2:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8028fe4:	fb02 1303 	mla	r3, r2, r3, r1
 8028fe8:	141b      	asrs	r3, r3, #16
 8028fea:	d422      	bmi.n	8029032 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x106>
 8028fec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8028fee:	3301      	adds	r3, #1
 8028ff0:	429a      	cmp	r2, r3
 8028ff2:	dd1e      	ble.n	8029032 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x106>
 8028ff4:	9b08      	ldr	r3, [sp, #32]
 8028ff6:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8028ffa:	9315      	str	r3, [sp, #84]	; 0x54
 8028ffc:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8029000:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8029002:	2b00      	cmp	r3, #0
 8029004:	f300 8217 	bgt.w	8029436 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50a>
 8029008:	9b08      	ldr	r3, [sp, #32]
 802900a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802900e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029010:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8029014:	9309      	str	r3, [sp, #36]	; 0x24
 8029016:	e196      	b.n	8029346 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41a>
 8029018:	1c57      	adds	r7, r2, #1
 802901a:	f040 8183 	bne.w	8029324 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 802901e:	42aa      	cmp	r2, r5
 8029020:	f280 8180 	bge.w	8029324 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8029024:	1c5e      	adds	r6, r3, #1
 8029026:	f2c0 817d 	blt.w	8029324 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 802902a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802902c:	4293      	cmp	r3, r2
 802902e:	f280 8179 	bge.w	8029324 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8029032:	9b08      	ldr	r3, [sp, #32]
 8029034:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8029036:	9315      	str	r3, [sp, #84]	; 0x54
 8029038:	f64f 061f 	movw	r6, #63519	; 0xf81f
 802903c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802903e:	2b00      	cmp	r3, #0
 8029040:	dde2      	ble.n	8029008 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 8029042:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029044:	1419      	asrs	r1, r3, #16
 8029046:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8029048:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802904c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802904e:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8029052:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8029054:	141b      	asrs	r3, r3, #16
 8029056:	f100 81d3 	bmi.w	8029400 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 802905a:	1c58      	adds	r0, r3, #1
 802905c:	4285      	cmp	r5, r0
 802905e:	f340 81d1 	ble.w	8029404 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d8>
 8029062:	2900      	cmp	r1, #0
 8029064:	f2c0 81ce 	blt.w	8029404 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d8>
 8029068:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802906a:	1c48      	adds	r0, r1, #1
 802906c:	4284      	cmp	r4, r0
 802906e:	f340 81c9 	ble.w	8029404 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d8>
 8029072:	fb01 3105 	mla	r1, r1, r5, r3
 8029076:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8029078:	fa1f fe82 	uxth.w	lr, r2
 802907c:	eb03 0a01 	add.w	sl, r3, r1
 8029080:	ea4f 100e 	mov.w	r0, lr, lsl #4
 8029084:	f813 9001 	ldrb.w	r9, [r3, r1]
 8029088:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802908c:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8029090:	b29b      	uxth	r3, r3
 8029092:	f1bc 0f00 	cmp.w	ip, #0
 8029096:	f000 8195 	beq.w	80293c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x498>
 802909a:	f81a 4005 	ldrb.w	r4, [sl, r5]
 802909e:	940e      	str	r4, [sp, #56]	; 0x38
 80290a0:	eb0a 0b05 	add.w	fp, sl, r5
 80290a4:	fa1f fa8c 	uxth.w	sl, ip
 80290a8:	fb0a fe0e 	mul.w	lr, sl, lr
 80290ac:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 80290b0:	fa1f fa8a 	uxth.w	sl, sl
 80290b4:	eba0 000e 	sub.w	r0, r0, lr
 80290b8:	eba3 030a 	sub.w	r3, r3, sl
 80290bc:	b280      	uxth	r0, r0
 80290be:	fb08 f000 	mul.w	r0, r8, r0
 80290c2:	b29b      	uxth	r3, r3
 80290c4:	fb09 0303 	mla	r3, r9, r3, r0
 80290c8:	980e      	ldr	r0, [sp, #56]	; 0x38
 80290ca:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80290ce:	940f      	str	r4, [sp, #60]	; 0x3c
 80290d0:	fb0a 3300 	mla	r3, sl, r0, r3
 80290d4:	fb0e 3304 	mla	r3, lr, r4, r3
 80290d8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80290dc:	2b00      	cmp	r3, #0
 80290de:	f000 8114 	beq.w	802930a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 80290e2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80290e4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80290e6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80290ea:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80290ee:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 80290f2:	f000 816c 	beq.w	80293ce <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 80290f6:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 80290fa:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80290fe:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8029102:	fb09 f101 	mul.w	r1, r9, r1
 8029106:	fb0a fe0e 	mul.w	lr, sl, lr
 802910a:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 802910e:	f101 0b20 	add.w	fp, r1, #32
 8029112:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8029116:	44ce      	add	lr, r9
 8029118:	eb0b 2911 	add.w	r9, fp, r1, lsr #8
 802911c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8029120:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8029124:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8029128:	ea4e 0909 	orr.w	r9, lr, r9
 802912c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8029130:	8841      	ldrh	r1, [r0, #2]
 8029132:	d019      	beq.n	8029168 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 8029134:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8029138:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 802913c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8029140:	fb0a fe0e 	mul.w	lr, sl, lr
 8029144:	fb08 f801 	mul.w	r8, r8, r1
 8029148:	f108 0b20 	add.w	fp, r8, #32
 802914c:	ea06 115e 	and.w	r1, r6, lr, lsr #5
 8029150:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8029154:	448e      	add	lr, r1
 8029156:	eb0b 2118 	add.w	r1, fp, r8, lsr #8
 802915a:	0a09      	lsrs	r1, r1, #8
 802915c:	ea06 1a5e 	and.w	sl, r6, lr, lsr #5
 8029160:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8029164:	ea4a 0101 	orr.w	r1, sl, r1
 8029168:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 802916c:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8029170:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8029174:	ea4e 0909 	orr.w	r9, lr, r9
 8029178:	ea4f 4e01 	mov.w	lr, r1, lsl #16
 802917c:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8029180:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8029184:	ea4e 0e01 	orr.w	lr, lr, r1
 8029188:	f1bc 0f00 	cmp.w	ip, #0
 802918c:	f000 8121 	beq.w	80293d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a6>
 8029190:	9912      	ldr	r1, [sp, #72]	; 0x48
 8029192:	eb00 0801 	add.w	r8, r0, r1
 8029196:	5a41      	ldrh	r1, [r0, r1]
 8029198:	980e      	ldr	r0, [sp, #56]	; 0x38
 802919a:	28ff      	cmp	r0, #255	; 0xff
 802919c:	d019      	beq.n	80291d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 802919e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80291a0:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 80291a4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80291a8:	fb04 fb01 	mul.w	fp, r4, r1
 80291ac:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 80291b0:	fb0a fa00 	mul.w	sl, sl, r0
 80291b4:	f10b 0020 	add.w	r0, fp, #32
 80291b8:	ea06 115a 	and.w	r1, r6, sl, lsr #5
 80291bc:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80291c0:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 80291c4:	4451      	add	r1, sl
 80291c6:	0a00      	lsrs	r0, r0, #8
 80291c8:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 80291cc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80291d0:	4301      	orrs	r1, r0
 80291d2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80291d4:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 80291d8:	2cff      	cmp	r4, #255	; 0xff
 80291da:	d01a      	beq.n	8029212 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e6>
 80291dc:	f420 68fc 	bic.w	r8, r0, #2016	; 0x7e0
 80291e0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80291e4:	fb04 fb00 	mul.w	fp, r4, r0
 80291e8:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 80291ec:	fb0a fa08 	mul.w	sl, sl, r8
 80291f0:	f10b 0820 	add.w	r8, fp, #32
 80291f4:	ea06 105a 	and.w	r0, r6, sl, lsr #5
 80291f8:	eb08 281b 	add.w	r8, r8, fp, lsr #8
 80291fc:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8029200:	4450      	add	r0, sl
 8029202:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8029206:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 802920a:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 802920e:	ea40 0008 	orr.w	r0, r0, r8
 8029212:	fb1c f802 	smulbb	r8, ip, r2
 8029216:	ea4f 08e8 	mov.w	r8, r8, asr #3
 802921a:	f1cc 0a10 	rsb	sl, ip, #16
 802921e:	ebaa 0a02 	sub.w	sl, sl, r2
 8029222:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8029226:	ebc8 0242 	rsb	r2, r8, r2, lsl #1
 802922a:	eb08 0a4a 	add.w	sl, r8, sl, lsl #1
 802922e:	fb0e f202 	mul.w	r2, lr, r2
 8029232:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8029236:	ea4f 4e00 	mov.w	lr, r0, lsl #16
 802923a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802923e:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 8029242:	fb09 220a 	mla	r2, r9, sl, r2
 8029246:	ea4b 0101 	orr.w	r1, fp, r1
 802924a:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802924e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8029252:	fb0c 2201 	mla	r2, ip, r1, r2
 8029256:	ea4e 0000 	orr.w	r0, lr, r0
 802925a:	fb08 2800 	mla	r8, r8, r0, r2
 802925e:	ea4f 5258 	mov.w	r2, r8, lsr #21
 8029262:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8029266:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802926a:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 802926e:	ea42 0808 	orr.w	r8, r2, r8
 8029272:	fa1f f288 	uxth.w	r2, r8
 8029276:	2bff      	cmp	r3, #255	; 0xff
 8029278:	d103      	bne.n	8029282 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 802927a:	9914      	ldr	r1, [sp, #80]	; 0x50
 802927c:	29ff      	cmp	r1, #255	; 0xff
 802927e:	f000 80bd 	beq.w	80293fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d0>
 8029282:	990a      	ldr	r1, [sp, #40]	; 0x28
 8029284:	f8b7 c000 	ldrh.w	ip, [r7]
 8029288:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802928a:	434b      	muls	r3, r1
 802928c:	f103 0e01 	add.w	lr, r3, #1
 8029290:	eb0e 2323 	add.w	r3, lr, r3, asr #8
 8029294:	ea6f 2e23 	mvn.w	lr, r3, asr #8
 8029298:	ea4f 202c 	mov.w	r0, ip, asr #8
 802929c:	fa5f fe8e 	uxtb.w	lr, lr
 80292a0:	1213      	asrs	r3, r2, #8
 80292a2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80292a6:	fb10 f00e 	smulbb	r0, r0, lr
 80292aa:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80292ae:	fb03 0301 	mla	r3, r3, r1, r0
 80292b2:	b298      	uxth	r0, r3
 80292b4:	ea4f 03ec 	mov.w	r3, ip, asr #3
 80292b8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80292bc:	10d1      	asrs	r1, r2, #3
 80292be:	fa5f fc8c 	uxtb.w	ip, ip
 80292c2:	00d2      	lsls	r2, r2, #3
 80292c4:	fb1c fc0e 	smulbb	ip, ip, lr
 80292c8:	b2d2      	uxtb	r2, r2
 80292ca:	fb02 c204 	mla	r2, r2, r4, ip
 80292ce:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80292d2:	fb13 f30e 	smulbb	r3, r3, lr
 80292d6:	b292      	uxth	r2, r2
 80292d8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80292dc:	fb01 3104 	mla	r1, r1, r4, r3
 80292e0:	f102 0c01 	add.w	ip, r2, #1
 80292e4:	1c43      	adds	r3, r0, #1
 80292e6:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80292ea:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80292ee:	b289      	uxth	r1, r1
 80292f0:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80292f4:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80292f8:	4313      	orrs	r3, r2
 80292fa:	1c4a      	adds	r2, r1, #1
 80292fc:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8029300:	0949      	lsrs	r1, r1, #5
 8029302:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8029306:	430b      	orrs	r3, r1
 8029308:	803b      	strh	r3, [r7, #0]
 802930a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802930c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802930e:	4413      	add	r3, r2
 8029310:	932b      	str	r3, [sp, #172]	; 0xac
 8029312:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8029314:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8029316:	441a      	add	r2, r3
 8029318:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802931a:	922c      	str	r2, [sp, #176]	; 0xb0
 802931c:	3b01      	subs	r3, #1
 802931e:	3702      	adds	r7, #2
 8029320:	9315      	str	r3, [sp, #84]	; 0x54
 8029322:	e68b      	b.n	802903c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8029324:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8029326:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8029328:	4413      	add	r3, r2
 802932a:	932b      	str	r3, [sp, #172]	; 0xac
 802932c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802932e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8029330:	441a      	add	r2, r3
 8029332:	9b08      	ldr	r3, [sp, #32]
 8029334:	922c      	str	r2, [sp, #176]	; 0xb0
 8029336:	3b01      	subs	r3, #1
 8029338:	9308      	str	r3, [sp, #32]
 802933a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802933c:	3302      	adds	r3, #2
 802933e:	9309      	str	r3, [sp, #36]	; 0x24
 8029340:	e630      	b.n	8028fa4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8029342:	f47f ae42 	bne.w	8028fca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 8029346:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8029348:	2b00      	cmp	r3, #0
 802934a:	f340 81ea 	ble.w	8029722 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7f6>
 802934e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8029352:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8029356:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802935a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802935c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8029360:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8029364:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8029368:	eef0 6a48 	vmov.f32	s13, s16
 802936c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8029370:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029374:	ee37 8a48 	vsub.f32	s16, s14, s16
 8029378:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 802937c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8029380:	eef0 6a68 	vmov.f32	s13, s17
 8029384:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8029388:	ee18 2a10 	vmov	r2, s16
 802938c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8029390:	fb92 f3f3 	sdiv	r3, r2, r3
 8029394:	ee18 2a90 	vmov	r2, s17
 8029398:	932d      	str	r3, [sp, #180]	; 0xb4
 802939a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802939c:	fb92 f3f3 	sdiv	r3, r2, r3
 80293a0:	932e      	str	r3, [sp, #184]	; 0xb8
 80293a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80293a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80293a6:	3b01      	subs	r3, #1
 80293a8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80293ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80293ae:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80293b0:	edcd 6a2c 	vstr	s13, [sp, #176]	; 0xb0
 80293b4:	bf08      	it	eq
 80293b6:	4613      	moveq	r3, r2
 80293b8:	9308      	str	r3, [sp, #32]
 80293ba:	eef0 8a67 	vmov.f32	s17, s15
 80293be:	eeb0 8a47 	vmov.f32	s16, s14
 80293c2:	e5e8      	b.n	8028f96 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 80293c4:	fb08 f000 	mul.w	r0, r8, r0
 80293c8:	fb09 0303 	mla	r3, r9, r3, r0
 80293cc:	e684      	b.n	80290d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ac>
 80293ce:	4689      	mov	r9, r1
 80293d0:	e6ac      	b.n	802912c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 80293d2:	f1c2 0010 	rsb	r0, r2, #16
 80293d6:	fb0e f202 	mul.w	r2, lr, r2
 80293da:	fb09 2900 	mla	r9, r9, r0, r2
 80293de:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80293e2:	ea4f 5259 	mov.w	r2, r9, lsr #21
 80293e6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80293ea:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80293ee:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80293f2:	ea42 0909 	orr.w	r9, r2, r9
 80293f6:	fa1f f289 	uxth.w	r2, r9
 80293fa:	e73c      	b.n	8029276 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34a>
 80293fc:	803a      	strh	r2, [r7, #0]
 80293fe:	e784      	b.n	802930a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 8029400:	1c5c      	adds	r4, r3, #1
 8029402:	d182      	bne.n	802930a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 8029404:	429d      	cmp	r5, r3
 8029406:	dd80      	ble.n	802930a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 8029408:	1c48      	adds	r0, r1, #1
 802940a:	f6ff af7e 	blt.w	802930a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 802940e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8029410:	4288      	cmp	r0, r1
 8029412:	f77f af7a 	ble.w	802930a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 8029416:	9814      	ldr	r0, [sp, #80]	; 0x50
 8029418:	9302      	str	r3, [sp, #8]
 802941a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802941c:	e9cd 1203 	strd	r1, r2, [sp, #12]
 8029420:	e9cd c005 	strd	ip, r0, [sp, #20]
 8029424:	e9cd 5300 	strd	r5, r3, [sp]
 8029428:	4639      	mov	r1, r7
 802942a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 802942e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8029430:	f7ff fbcc 	bl	8028bcc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8029434:	e769      	b.n	802930a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 8029436:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8029438:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802943c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802943e:	141f      	asrs	r7, r3, #16
 8029440:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8029444:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8029446:	141b      	asrs	r3, r3, #16
 8029448:	fb05 3707 	mla	r7, r5, r7, r3
 802944c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802944e:	fa1f fc82 	uxth.w	ip, r2
 8029452:	eb03 0a07 	add.w	sl, r3, r7
 8029456:	ea4f 110c 	mov.w	r1, ip, lsl #4
 802945a:	f813 9007 	ldrb.w	r9, [r3, r7]
 802945e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8029462:	f5c1 7380 	rsb	r3, r1, #256	; 0x100
 8029466:	b29b      	uxth	r3, r3
 8029468:	2800      	cmp	r0, #0
 802946a:	f000 813f 	beq.w	80296ec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c0>
 802946e:	f81a 4005 	ldrb.w	r4, [sl, r5]
 8029472:	9410      	str	r4, [sp, #64]	; 0x40
 8029474:	eb0a 0b05 	add.w	fp, sl, r5
 8029478:	fa1f fa80 	uxth.w	sl, r0
 802947c:	fb0a fc0c 	mul.w	ip, sl, ip
 8029480:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8029484:	fa1f fa8a 	uxth.w	sl, sl
 8029488:	eba1 010c 	sub.w	r1, r1, ip
 802948c:	eba3 030a 	sub.w	r3, r3, sl
 8029490:	b289      	uxth	r1, r1
 8029492:	fb08 f101 	mul.w	r1, r8, r1
 8029496:	b29b      	uxth	r3, r3
 8029498:	fb09 1303 	mla	r3, r9, r3, r1
 802949c:	9910      	ldr	r1, [sp, #64]	; 0x40
 802949e:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80294a2:	9411      	str	r4, [sp, #68]	; 0x44
 80294a4:	fb0a 3301 	mla	r3, sl, r1, r3
 80294a8:	fb0c 3304 	mla	r3, ip, r4, r3
 80294ac:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80294b0:	2b00      	cmp	r3, #0
 80294b2:	f000 810d 	beq.w	80296d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a4>
 80294b6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80294b8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80294ba:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80294be:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 80294c2:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 80294c6:	f000 8116 	beq.w	80296f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7ca>
 80294ca:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80294ce:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80294d2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80294d6:	fb09 f707 	mul.w	r7, r9, r7
 80294da:	fb0a fc0c 	mul.w	ip, sl, ip
 80294de:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 80294e2:	f107 0b20 	add.w	fp, r7, #32
 80294e6:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80294ea:	44cc      	add	ip, r9
 80294ec:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 80294f0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80294f4:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80294f8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80294fc:	ea4c 0909 	orr.w	r9, ip, r9
 8029500:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8029504:	884f      	ldrh	r7, [r1, #2]
 8029506:	d019      	beq.n	802953c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x610>
 8029508:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 802950c:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8029510:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8029514:	fb08 f807 	mul.w	r8, r8, r7
 8029518:	fb0a fc0c 	mul.w	ip, sl, ip
 802951c:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8029520:	f108 0b20 	add.w	fp, r8, #32
 8029524:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8029528:	44bc      	add	ip, r7
 802952a:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 802952e:	0a3f      	lsrs	r7, r7, #8
 8029530:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8029534:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8029538:	ea4c 0707 	orr.w	r7, ip, r7
 802953c:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8029540:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8029544:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8029548:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802954c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8029550:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8029554:	ea4c 0909 	orr.w	r9, ip, r9
 8029558:	ea4a 0707 	orr.w	r7, sl, r7
 802955c:	2800      	cmp	r0, #0
 802955e:	f000 80cc 	beq.w	80296fa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7ce>
 8029562:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8029564:	eb01 0c04 	add.w	ip, r1, r4
 8029568:	f831 8004 	ldrh.w	r8, [r1, r4]
 802956c:	9910      	ldr	r1, [sp, #64]	; 0x40
 802956e:	29ff      	cmp	r1, #255	; 0xff
 8029570:	d01a      	beq.n	80295a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x67c>
 8029572:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8029574:	f428 61fc 	bic.w	r1, r8, #2016	; 0x7e0
 8029578:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 802957c:	fb04 fb08 	mul.w	fp, r4, r8
 8029580:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8029584:	fb0a fa01 	mul.w	sl, sl, r1
 8029588:	f10b 0120 	add.w	r1, fp, #32
 802958c:	ea06 185a 	and.w	r8, r6, sl, lsr #5
 8029590:	eb01 211b 	add.w	r1, r1, fp, lsr #8
 8029594:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8029598:	44d0      	add	r8, sl
 802959a:	0a09      	lsrs	r1, r1, #8
 802959c:	ea06 1858 	and.w	r8, r6, r8, lsr #5
 80295a0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80295a4:	ea48 0801 	orr.w	r8, r8, r1
 80295a8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80295aa:	f8bc 1002 	ldrh.w	r1, [ip, #2]
 80295ae:	2cff      	cmp	r4, #255	; 0xff
 80295b0:	d01a      	beq.n	80295e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 80295b2:	f421 6cfc 	bic.w	ip, r1, #2016	; 0x7e0
 80295b6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80295ba:	fb04 fb01 	mul.w	fp, r4, r1
 80295be:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 80295c2:	fb0a fa0c 	mul.w	sl, sl, ip
 80295c6:	f10b 0c20 	add.w	ip, fp, #32
 80295ca:	ea06 115a 	and.w	r1, r6, sl, lsr #5
 80295ce:	eb0c 2c1b 	add.w	ip, ip, fp, lsr #8
 80295d2:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 80295d6:	4451      	add	r1, sl
 80295d8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80295dc:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 80295e0:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80295e4:	ea41 010c 	orr.w	r1, r1, ip
 80295e8:	fb10 fc02 	smulbb	ip, r0, r2
 80295ec:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80295f0:	f1c0 0a10 	rsb	sl, r0, #16
 80295f4:	ebaa 0a02 	sub.w	sl, sl, r2
 80295f8:	ea4f 4b08 	mov.w	fp, r8, lsl #16
 80295fc:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8029600:	437a      	muls	r2, r7
 8029602:	eb0c 0a4a 	add.w	sl, ip, sl, lsl #1
 8029606:	040f      	lsls	r7, r1, #16
 8029608:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802960c:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8029610:	fb09 220a 	mla	r2, r9, sl, r2
 8029614:	ea4b 0808 	orr.w	r8, fp, r8
 8029618:	ebcc 0040 	rsb	r0, ip, r0, lsl #1
 802961c:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 8029620:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8029624:	fb00 2208 	mla	r2, r0, r8, r2
 8029628:	4339      	orrs	r1, r7
 802962a:	fb0c 2201 	mla	r2, ip, r1, r2
 802962e:	ea4f 5952 	mov.w	r9, r2, lsr #21
 8029632:	0952      	lsrs	r2, r2, #5
 8029634:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8029638:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802963c:	ea49 0202 	orr.w	r2, r9, r2
 8029640:	2bff      	cmp	r3, #255	; 0xff
 8029642:	b292      	uxth	r2, r2
 8029644:	d102      	bne.n	802964c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x720>
 8029646:	9914      	ldr	r1, [sp, #80]	; 0x50
 8029648:	29ff      	cmp	r1, #255	; 0xff
 802964a:	d067      	beq.n	802971c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7f0>
 802964c:	990a      	ldr	r1, [sp, #40]	; 0x28
 802964e:	f8be 0000 	ldrh.w	r0, [lr]
 8029652:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8029654:	434b      	muls	r3, r1
 8029656:	1c59      	adds	r1, r3, #1
 8029658:	eb01 2323 	add.w	r3, r1, r3, asr #8
 802965c:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8029660:	1201      	asrs	r1, r0, #8
 8029662:	b2db      	uxtb	r3, r3
 8029664:	1217      	asrs	r7, r2, #8
 8029666:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802966a:	fb11 f103 	smulbb	r1, r1, r3
 802966e:	ea4f 0ce0 	mov.w	ip, r0, asr #3
 8029672:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8029676:	00c0      	lsls	r0, r0, #3
 8029678:	fb07 1704 	mla	r7, r7, r4, r1
 802967c:	b2c0      	uxtb	r0, r0
 802967e:	10d1      	asrs	r1, r2, #3
 8029680:	00d2      	lsls	r2, r2, #3
 8029682:	fb10 f003 	smulbb	r0, r0, r3
 8029686:	b2d2      	uxtb	r2, r2
 8029688:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 802968c:	fb02 0204 	mla	r2, r2, r4, r0
 8029690:	fb1c fc03 	smulbb	ip, ip, r3
 8029694:	b2bf      	uxth	r7, r7
 8029696:	b292      	uxth	r2, r2
 8029698:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802969c:	fb01 c104 	mla	r1, r1, r4, ip
 80296a0:	1c7b      	adds	r3, r7, #1
 80296a2:	f102 0c01 	add.w	ip, r2, #1
 80296a6:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80296aa:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 80296ae:	b289      	uxth	r1, r1
 80296b0:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80296b4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80296b8:	ea47 070c 	orr.w	r7, r7, ip
 80296bc:	f101 0c01 	add.w	ip, r1, #1
 80296c0:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 80296c4:	0949      	lsrs	r1, r1, #5
 80296c6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80296ca:	430f      	orrs	r7, r1
 80296cc:	f8ae 7000 	strh.w	r7, [lr]
 80296d0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80296d2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80296d4:	4413      	add	r3, r2
 80296d6:	932b      	str	r3, [sp, #172]	; 0xac
 80296d8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80296da:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80296dc:	441a      	add	r2, r3
 80296de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80296e0:	922c      	str	r2, [sp, #176]	; 0xb0
 80296e2:	3b01      	subs	r3, #1
 80296e4:	f10e 0e02 	add.w	lr, lr, #2
 80296e8:	9315      	str	r3, [sp, #84]	; 0x54
 80296ea:	e489      	b.n	8029000 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 80296ec:	fb08 f101 	mul.w	r1, r8, r1
 80296f0:	fb09 1303 	mla	r3, r9, r3, r1
 80296f4:	e6da      	b.n	80294ac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x580>
 80296f6:	46b9      	mov	r9, r7
 80296f8:	e702      	b.n	8029500 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5d4>
 80296fa:	f1c2 0110 	rsb	r1, r2, #16
 80296fe:	437a      	muls	r2, r7
 8029700:	fb09 2901 	mla	r9, r9, r1, r2
 8029704:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8029708:	ea4f 5059 	mov.w	r0, r9, lsr #21
 802970c:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8029710:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8029714:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8029718:	4302      	orrs	r2, r0
 802971a:	e791      	b.n	8029640 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x714>
 802971c:	f8ae 2000 	strh.w	r2, [lr]
 8029720:	e7d6      	b.n	80296d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a4>
 8029722:	b019      	add	sp, #100	; 0x64
 8029724:	ecbd 8b08 	vpop	{d8-d11}
 8029728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802972c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 802972c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029730:	b087      	sub	sp, #28
 8029732:	e9dd e012 	ldrd	lr, r0, [sp, #72]	; 0x48
 8029736:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
 802973a:	9105      	str	r1, [sp, #20]
 802973c:	fb00 e604 	mla	r6, r0, r4, lr
 8029740:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 8029744:	9102      	str	r1, [sp, #8]
 8029746:	eb03 0146 	add.w	r1, r3, r6, lsl #1
 802974a:	9103      	str	r1, [sp, #12]
 802974c:	9905      	ldr	r1, [sp, #20]
 802974e:	f9bd 7044 	ldrsh.w	r7, [sp, #68]	; 0x44
 8029752:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8029756:	8809      	ldrh	r1, [r1, #0]
 8029758:	2800      	cmp	r0, #0
 802975a:	eb02 0a06 	add.w	sl, r2, r6
 802975e:	f2c0 80ca 	blt.w	80298f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ca>
 8029762:	4287      	cmp	r7, r0
 8029764:	f340 80c7 	ble.w	80298f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ca>
 8029768:	f1be 0f00 	cmp.w	lr, #0
 802976c:	f2c0 80bf 	blt.w	80298ee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c2>
 8029770:	4574      	cmp	r4, lr
 8029772:	f340 80bc 	ble.w	80298ee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c2>
 8029776:	f812 c006 	ldrb.w	ip, [r2, r6]
 802977a:	f833 9016 	ldrh.w	r9, [r3, r6, lsl #1]
 802977e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8029782:	d01c      	beq.n	80297be <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x92>
 8029784:	f429 66fc 	bic.w	r6, r9, #2016	; 0x7e0
 8029788:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802978c:	4372      	muls	r2, r6
 802978e:	f64f 081f 	movw	r8, #63519	; 0xf81f
 8029792:	ea08 1352 	and.w	r3, r8, r2, lsr #5
 8029796:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802979a:	f602 0201 	addw	r2, r2, #2049	; 0x801
 802979e:	fb0c f609 	mul.w	r6, ip, r9
 80297a2:	eb03 0902 	add.w	r9, r3, r2
 80297a6:	ea08 1959 	and.w	r9, r8, r9, lsr #5
 80297aa:	f106 0820 	add.w	r8, r6, #32
 80297ae:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 80297b2:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80297b6:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80297ba:	ea49 0908 	orr.w	r9, r9, r8
 80297be:	fa1f f989 	uxth.w	r9, r9
 80297c2:	f11e 0301 	adds.w	r3, lr, #1
 80297c6:	f100 809b 	bmi.w	8029900 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d4>
 80297ca:	429c      	cmp	r4, r3
 80297cc:	f340 8098 	ble.w	8029900 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d4>
 80297d0:	2d00      	cmp	r5, #0
 80297d2:	f000 8095 	beq.w	8029900 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d4>
 80297d6:	f89a 6001 	ldrb.w	r6, [sl, #1]
 80297da:	9b03      	ldr	r3, [sp, #12]
 80297dc:	2eff      	cmp	r6, #255	; 0xff
 80297de:	885b      	ldrh	r3, [r3, #2]
 80297e0:	d01b      	beq.n	802981a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xee>
 80297e2:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 80297e6:	ea4f 08e6 	mov.w	r8, r6, asr #3
 80297ea:	fb08 f202 	mul.w	r2, r8, r2
 80297ee:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80297f2:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80297f6:	fb06 f803 	mul.w	r8, r6, r3
 80297fa:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 80297fe:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8029802:	441a      	add	r2, r3
 8029804:	f108 0320 	add.w	r3, r8, #32
 8029808:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 802980c:	0a1b      	lsrs	r3, r3, #8
 802980e:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 8029812:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8029816:	ea4b 0303 	orr.w	r3, fp, r3
 802981a:	b29b      	uxth	r3, r3
 802981c:	9301      	str	r3, [sp, #4]
 802981e:	3001      	adds	r0, #1
 8029820:	d474      	bmi.n	802990c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 8029822:	4287      	cmp	r7, r0
 8029824:	dd72      	ble.n	802990c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 8029826:	9a02      	ldr	r2, [sp, #8]
 8029828:	2a00      	cmp	r2, #0
 802982a:	f000 8111 	beq.w	8029a50 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x324>
 802982e:	f1be 0f00 	cmp.w	lr, #0
 8029832:	db68      	blt.n	8029906 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1da>
 8029834:	4574      	cmp	r4, lr
 8029836:	dd66      	ble.n	8029906 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1da>
 8029838:	f81a 7004 	ldrb.w	r7, [sl, r4]
 802983c:	9a03      	ldr	r2, [sp, #12]
 802983e:	2fff      	cmp	r7, #255	; 0xff
 8029840:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
 8029844:	d01c      	beq.n	8029880 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x154>
 8029846:	f420 62fc 	bic.w	r2, r0, #2016	; 0x7e0
 802984a:	ea4f 08e7 	mov.w	r8, r7, asr #3
 802984e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8029852:	fb07 fb00 	mul.w	fp, r7, r0
 8029856:	fb08 f802 	mul.w	r8, r8, r2
 802985a:	f64f 001f 	movw	r0, #63519	; 0xf81f
 802985e:	ea00 1258 	and.w	r2, r0, r8, lsr #5
 8029862:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8029866:	4490      	add	r8, r2
 8029868:	f10b 0220 	add.w	r2, fp, #32
 802986c:	eb02 2b1b 	add.w	fp, r2, fp, lsr #8
 8029870:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8029874:	ea00 1058 	and.w	r0, r0, r8, lsr #5
 8029878:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 802987c:	ea40 000b 	orr.w	r0, r0, fp
 8029880:	b280      	uxth	r0, r0
 8029882:	f11e 0e01 	adds.w	lr, lr, #1
 8029886:	d446      	bmi.n	8029916 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ea>
 8029888:	4574      	cmp	r4, lr
 802988a:	dd44      	ble.n	8029916 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ea>
 802988c:	2d00      	cmp	r5, #0
 802988e:	d045      	beq.n	802991c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1f0>
 8029890:	1c62      	adds	r2, r4, #1
 8029892:	9b03      	ldr	r3, [sp, #12]
 8029894:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8029898:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 802989c:	2cff      	cmp	r4, #255	; 0xff
 802989e:	d01c      	beq.n	80298da <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ae>
 80298a0:	f422 6efc 	bic.w	lr, r2, #2016	; 0x7e0
 80298a4:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80298a8:	fb08 fe0e 	mul.w	lr, r8, lr
 80298ac:	f64f 0a1f 	movw	sl, #63519	; 0xf81f
 80298b0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80298b4:	fb04 f802 	mul.w	r8, r4, r2
 80298b8:	ea0a 125e 	and.w	r2, sl, lr, lsr #5
 80298bc:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80298c0:	4472      	add	r2, lr
 80298c2:	ea0a 1252 	and.w	r2, sl, r2, lsr #5
 80298c6:	f108 0a20 	add.w	sl, r8, #32
 80298ca:	eb0a 2a18 	add.w	sl, sl, r8, lsr #8
 80298ce:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80298d2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80298d6:	ea42 020a 	orr.w	r2, r2, sl
 80298da:	b292      	uxth	r2, r2
 80298dc:	2d0f      	cmp	r5, #15
 80298de:	d91f      	bls.n	8029920 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1f4>
 80298e0:	4b5f      	ldr	r3, [pc, #380]	; (8029a60 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x334>)
 80298e2:	4a60      	ldr	r2, [pc, #384]	; (8029a64 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x338>)
 80298e4:	4860      	ldr	r0, [pc, #384]	; (8029a68 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x33c>)
 80298e6:	f240 210d 	movw	r1, #525	; 0x20d
 80298ea:	f004 fcbd 	bl	802e268 <__assert_func>
 80298ee:	4689      	mov	r9, r1
 80298f0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80298f4:	e765      	b.n	80297c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x96>
 80298f6:	26ff      	movs	r6, #255	; 0xff
 80298f8:	9101      	str	r1, [sp, #4]
 80298fa:	4689      	mov	r9, r1
 80298fc:	46b4      	mov	ip, r6
 80298fe:	e78e      	b.n	802981e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf2>
 8029900:	9101      	str	r1, [sp, #4]
 8029902:	26ff      	movs	r6, #255	; 0xff
 8029904:	e78b      	b.n	802981e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf2>
 8029906:	4608      	mov	r0, r1
 8029908:	27ff      	movs	r7, #255	; 0xff
 802990a:	e7ba      	b.n	8029882 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x156>
 802990c:	24ff      	movs	r4, #255	; 0xff
 802990e:	460a      	mov	r2, r1
 8029910:	4608      	mov	r0, r1
 8029912:	4627      	mov	r7, r4
 8029914:	e7e2      	b.n	80298dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 8029916:	460a      	mov	r2, r1
 8029918:	24ff      	movs	r4, #255	; 0xff
 802991a:	e7df      	b.n	80298dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 802991c:	460a      	mov	r2, r1
 802991e:	24ff      	movs	r4, #255	; 0xff
 8029920:	9b02      	ldr	r3, [sp, #8]
 8029922:	2b0f      	cmp	r3, #15
 8029924:	d8dc      	bhi.n	80298e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b4>
 8029926:	f8bd e008 	ldrh.w	lr, [sp, #8]
 802992a:	fa1f f885 	uxth.w	r8, r5
 802992e:	fb08 fa0e 	mul.w	sl, r8, lr
 8029932:	ea4f 1308 	mov.w	r3, r8, lsl #4
 8029936:	ebca 1e0e 	rsb	lr, sl, lr, lsl #4
 802993a:	9303      	str	r3, [sp, #12]
 802993c:	fa1f f38e 	uxth.w	r3, lr
 8029940:	9304      	str	r3, [sp, #16]
 8029942:	ea4f 4809 	mov.w	r8, r9, lsl #16
 8029946:	9b02      	ldr	r3, [sp, #8]
 8029948:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802994c:	f008 68fc 	and.w	r8, r8, #132120576	; 0x7e00000
 8029950:	fb15 fe03 	smulbb	lr, r5, r3
 8029954:	ea48 0809 	orr.w	r8, r8, r9
 8029958:	f1c3 0910 	rsb	r9, r3, #16
 802995c:	9b01      	ldr	r3, [sp, #4]
 802995e:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8029962:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8029966:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802996a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802996e:	eba9 0905 	sub.w	r9, r9, r5
 8029972:	ea4b 0303 	orr.w	r3, fp, r3
 8029976:	ebce 0545 	rsb	r5, lr, r5, lsl #1
 802997a:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 802997e:	eb0e 0949 	add.w	r9, lr, r9, lsl #1
 8029982:	436b      	muls	r3, r5
 8029984:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8029988:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802998c:	ea4b 0202 	orr.w	r2, fp, r2
 8029990:	fb09 3308 	mla	r3, r9, r8, r3
 8029994:	fb0e 3302 	mla	r3, lr, r2, r3
 8029998:	0402      	lsls	r2, r0, #16
 802999a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802999e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80299a2:	4310      	orrs	r0, r2
 80299a4:	9a02      	ldr	r2, [sp, #8]
 80299a6:	ebce 0e42 	rsb	lr, lr, r2, lsl #1
 80299aa:	9a03      	ldr	r2, [sp, #12]
 80299ac:	fb0e 3e00 	mla	lr, lr, r0, r3
 80299b0:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80299b4:	9a04      	ldr	r2, [sp, #16]
 80299b6:	1a80      	subs	r0, r0, r2
 80299b8:	9a03      	ldr	r2, [sp, #12]
 80299ba:	eba2 020a 	sub.w	r2, r2, sl
 80299be:	b292      	uxth	r2, r2
 80299c0:	b280      	uxth	r0, r0
 80299c2:	4356      	muls	r6, r2
 80299c4:	9a04      	ldr	r2, [sp, #16]
 80299c6:	fb0c 6600 	mla	r6, ip, r0, r6
 80299ca:	fb02 6707 	mla	r7, r2, r7, r6
 80299ce:	fb0a 7404 	mla	r4, sl, r4, r7
 80299d2:	ea4f 535e 	mov.w	r3, lr, lsr #21
 80299d6:	1208      	asrs	r0, r1, #8
 80299d8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80299dc:	ea6f 2424 	mvn.w	r4, r4, asr #8
 80299e0:	b2e4      	uxtb	r4, r4
 80299e2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80299e6:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80299ea:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80299ee:	4360      	muls	r0, r4
 80299f0:	ea43 0e0e 	orr.w	lr, r3, lr
 80299f4:	fa1f f38e 	uxth.w	r3, lr
 80299f8:	1c42      	adds	r2, r0, #1
 80299fa:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80299fe:	1218      	asrs	r0, r3, #8
 8029a00:	10cd      	asrs	r5, r1, #3
 8029a02:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8029a06:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8029a0a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8029a0e:	4a17      	ldr	r2, [pc, #92]	; (8029a6c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x340>)
 8029a10:	4365      	muls	r5, r4
 8029a12:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8029a16:	1c6a      	adds	r2, r5, #1
 8029a18:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 8029a1c:	00c9      	lsls	r1, r1, #3
 8029a1e:	10da      	asrs	r2, r3, #3
 8029a20:	b2c9      	uxtb	r1, r1
 8029a22:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8029a26:	434c      	muls	r4, r1
 8029a28:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8029a2c:	1c61      	adds	r1, r4, #1
 8029a2e:	00d2      	lsls	r2, r2, #3
 8029a30:	00db      	lsls	r3, r3, #3
 8029a32:	eb01 2414 	add.w	r4, r1, r4, lsr #8
 8029a36:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029a3a:	b2db      	uxtb	r3, r3
 8029a3c:	4302      	orrs	r2, r0
 8029a3e:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8029a42:	ea42 03d3 	orr.w	r3, r2, r3, lsr #3
 8029a46:	9a05      	ldr	r2, [sp, #20]
 8029a48:	8013      	strh	r3, [r2, #0]
 8029a4a:	b007      	add	sp, #28
 8029a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029a50:	2d0f      	cmp	r5, #15
 8029a52:	f63f af45 	bhi.w	80298e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b4>
 8029a56:	24ff      	movs	r4, #255	; 0xff
 8029a58:	460a      	mov	r2, r1
 8029a5a:	4608      	mov	r0, r1
 8029a5c:	4627      	mov	r7, r4
 8029a5e:	e762      	b.n	8029926 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1fa>
 8029a60:	08034370 	.word	0x08034370
 8029a64:	080348c9 	.word	0x080348c9
 8029a68:	080343f8 	.word	0x080343f8
 8029a6c:	fffff800 	.word	0xfffff800

08029a70 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8029a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029a74:	ed2d 8b08 	vpush	{d8-d11}
 8029a78:	b095      	sub	sp, #84	; 0x54
 8029a7a:	eeb0 aa40 	vmov.f32	s20, s0
 8029a7e:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 8029a80:	9306      	str	r3, [sp, #24]
 8029a82:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 8029a86:	9110      	str	r1, [sp, #64]	; 0x40
 8029a88:	9308      	str	r3, [sp, #32]
 8029a8a:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8029a8e:	9013      	str	r0, [sp, #76]	; 0x4c
 8029a90:	6870      	ldr	r0, [r6, #4]
 8029a92:	9212      	str	r2, [sp, #72]	; 0x48
 8029a94:	fb00 1303 	mla	r3, r0, r3, r1
 8029a98:	6831      	ldr	r1, [r6, #0]
 8029a9a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8029a9c:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 8029aa0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8029aa4:	9307      	str	r3, [sp, #28]
 8029aa6:	6813      	ldr	r3, [r2, #0]
 8029aa8:	9309      	str	r3, [sp, #36]	; 0x24
 8029aaa:	6853      	ldr	r3, [r2, #4]
 8029aac:	930a      	str	r3, [sp, #40]	; 0x28
 8029aae:	006b      	lsls	r3, r5, #1
 8029ab0:	eef0 9a60 	vmov.f32	s19, s1
 8029ab4:	eeb0 9a41 	vmov.f32	s18, s2
 8029ab8:	eeb0 8a62 	vmov.f32	s16, s5
 8029abc:	eef0 8a43 	vmov.f32	s17, s6
 8029ac0:	eef0 ba44 	vmov.f32	s23, s8
 8029ac4:	eeb0 ba64 	vmov.f32	s22, s9
 8029ac8:	eef0 aa45 	vmov.f32	s21, s10
 8029acc:	930f      	str	r3, [sp, #60]	; 0x3c
 8029ace:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8029ad0:	2b00      	cmp	r3, #0
 8029ad2:	dc03      	bgt.n	8029adc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8029ad4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8029ad6:	2b00      	cmp	r3, #0
 8029ad8:	f340 83a3 	ble.w	802a222 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7b2>
 8029adc:	9b06      	ldr	r3, [sp, #24]
 8029ade:	2b00      	cmp	r3, #0
 8029ae0:	f340 81bc 	ble.w	8029e5c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ec>
 8029ae4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8029ae6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029ae8:	1412      	asrs	r2, r2, #16
 8029aea:	ea4f 4323 	mov.w	r3, r3, asr #16
 8029aee:	d42f      	bmi.n	8029b50 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8029af0:	1c51      	adds	r1, r2, #1
 8029af2:	428d      	cmp	r5, r1
 8029af4:	dd2f      	ble.n	8029b56 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8029af6:	2b00      	cmp	r3, #0
 8029af8:	db2d      	blt.n	8029b56 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8029afa:	9808      	ldr	r0, [sp, #32]
 8029afc:	1c59      	adds	r1, r3, #1
 8029afe:	4288      	cmp	r0, r1
 8029b00:	dd29      	ble.n	8029b56 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8029b02:	9b06      	ldr	r3, [sp, #24]
 8029b04:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8029b06:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8029b08:	3b01      	subs	r3, #1
 8029b0a:	fb02 1203 	mla	r2, r2, r3, r1
 8029b0e:	1412      	asrs	r2, r2, #16
 8029b10:	d42b      	bmi.n	8029b6a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8029b12:	3201      	adds	r2, #1
 8029b14:	4295      	cmp	r5, r2
 8029b16:	dd28      	ble.n	8029b6a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8029b18:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8029b1a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8029b1c:	fb02 1303 	mla	r3, r2, r3, r1
 8029b20:	141b      	asrs	r3, r3, #16
 8029b22:	d422      	bmi.n	8029b6a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8029b24:	9a08      	ldr	r2, [sp, #32]
 8029b26:	3301      	adds	r3, #1
 8029b28:	429a      	cmp	r2, r3
 8029b2a:	dd1e      	ble.n	8029b6a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8029b2c:	9b06      	ldr	r3, [sp, #24]
 8029b2e:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8029b32:	9311      	str	r3, [sp, #68]	; 0x44
 8029b34:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8029b38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8029b3a:	2b00      	cmp	r3, #0
 8029b3c:	f300 8208 	bgt.w	8029f50 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e0>
 8029b40:	9b06      	ldr	r3, [sp, #24]
 8029b42:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8029b46:	9b07      	ldr	r3, [sp, #28]
 8029b48:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8029b4c:	9307      	str	r3, [sp, #28]
 8029b4e:	e187      	b.n	8029e60 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f0>
 8029b50:	1c57      	adds	r7, r2, #1
 8029b52:	f040 8174 	bne.w	8029e3e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ce>
 8029b56:	42aa      	cmp	r2, r5
 8029b58:	f280 8171 	bge.w	8029e3e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ce>
 8029b5c:	1c5e      	adds	r6, r3, #1
 8029b5e:	f2c0 816e 	blt.w	8029e3e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ce>
 8029b62:	9a08      	ldr	r2, [sp, #32]
 8029b64:	4293      	cmp	r3, r2
 8029b66:	f280 816a 	bge.w	8029e3e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ce>
 8029b6a:	9b06      	ldr	r3, [sp, #24]
 8029b6c:	9f07      	ldr	r7, [sp, #28]
 8029b6e:	9311      	str	r3, [sp, #68]	; 0x44
 8029b70:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8029b74:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8029b76:	2b00      	cmp	r3, #0
 8029b78:	dde2      	ble.n	8029b40 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 8029b7a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029b7c:	1419      	asrs	r1, r3, #16
 8029b7e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8029b80:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8029b84:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029b86:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8029b8a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8029b8c:	141b      	asrs	r3, r3, #16
 8029b8e:	f100 81c4 	bmi.w	8029f1a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4aa>
 8029b92:	1c58      	adds	r0, r3, #1
 8029b94:	4285      	cmp	r5, r0
 8029b96:	f340 81c2 	ble.w	8029f1e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 8029b9a:	2900      	cmp	r1, #0
 8029b9c:	f2c0 81bf 	blt.w	8029f1e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 8029ba0:	9c08      	ldr	r4, [sp, #32]
 8029ba2:	1c48      	adds	r0, r1, #1
 8029ba4:	4284      	cmp	r4, r0
 8029ba6:	f340 81ba 	ble.w	8029f1e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 8029baa:	fb01 3105 	mla	r1, r1, r5, r3
 8029bae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029bb0:	fa1f fe82 	uxth.w	lr, r2
 8029bb4:	eb03 0a01 	add.w	sl, r3, r1
 8029bb8:	ea4f 100e 	mov.w	r0, lr, lsl #4
 8029bbc:	f813 9001 	ldrb.w	r9, [r3, r1]
 8029bc0:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8029bc4:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8029bc8:	b29b      	uxth	r3, r3
 8029bca:	f1bc 0f00 	cmp.w	ip, #0
 8029bce:	f000 8186 	beq.w	8029ede <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46e>
 8029bd2:	f81a 4005 	ldrb.w	r4, [sl, r5]
 8029bd6:	940b      	str	r4, [sp, #44]	; 0x2c
 8029bd8:	eb0a 0b05 	add.w	fp, sl, r5
 8029bdc:	fa1f fa8c 	uxth.w	sl, ip
 8029be0:	fb0a fe0e 	mul.w	lr, sl, lr
 8029be4:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8029be8:	fa1f fa8a 	uxth.w	sl, sl
 8029bec:	eba0 000e 	sub.w	r0, r0, lr
 8029bf0:	eba3 030a 	sub.w	r3, r3, sl
 8029bf4:	b280      	uxth	r0, r0
 8029bf6:	fb08 f000 	mul.w	r0, r8, r0
 8029bfa:	b29b      	uxth	r3, r3
 8029bfc:	fb09 0303 	mla	r3, r9, r3, r0
 8029c00:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8029c02:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8029c06:	940c      	str	r4, [sp, #48]	; 0x30
 8029c08:	fb0a 3300 	mla	r3, sl, r0, r3
 8029c0c:	fb0e 3304 	mla	r3, lr, r4, r3
 8029c10:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029c14:	2b00      	cmp	r3, #0
 8029c16:	f000 8105 	beq.w	8029e24 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8029c1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8029c1c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8029c1e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8029c22:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8029c26:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 8029c2a:	f000 815d 	beq.w	8029ee8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x478>
 8029c2e:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8029c32:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8029c36:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8029c3a:	fb09 f101 	mul.w	r1, r9, r1
 8029c3e:	fb0a fe0e 	mul.w	lr, sl, lr
 8029c42:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8029c46:	f101 0b20 	add.w	fp, r1, #32
 8029c4a:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8029c4e:	44ce      	add	lr, r9
 8029c50:	eb0b 2911 	add.w	r9, fp, r1, lsr #8
 8029c54:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8029c58:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8029c5c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8029c60:	ea4e 0909 	orr.w	r9, lr, r9
 8029c64:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8029c68:	8841      	ldrh	r1, [r0, #2]
 8029c6a:	d019      	beq.n	8029ca0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x230>
 8029c6c:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8029c70:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8029c74:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8029c78:	fb0a fe0e 	mul.w	lr, sl, lr
 8029c7c:	fb08 f801 	mul.w	r8, r8, r1
 8029c80:	f108 0b20 	add.w	fp, r8, #32
 8029c84:	ea06 115e 	and.w	r1, r6, lr, lsr #5
 8029c88:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8029c8c:	448e      	add	lr, r1
 8029c8e:	eb0b 2118 	add.w	r1, fp, r8, lsr #8
 8029c92:	0a09      	lsrs	r1, r1, #8
 8029c94:	ea06 1a5e 	and.w	sl, r6, lr, lsr #5
 8029c98:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8029c9c:	ea4a 0101 	orr.w	r1, sl, r1
 8029ca0:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8029ca4:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8029ca8:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8029cac:	ea4e 0909 	orr.w	r9, lr, r9
 8029cb0:	ea4f 4e01 	mov.w	lr, r1, lsl #16
 8029cb4:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8029cb8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8029cbc:	ea4e 0e01 	orr.w	lr, lr, r1
 8029cc0:	f1bc 0f00 	cmp.w	ip, #0
 8029cc4:	f000 8112 	beq.w	8029eec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47c>
 8029cc8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8029cca:	eb00 0801 	add.w	r8, r0, r1
 8029cce:	5a41      	ldrh	r1, [r0, r1]
 8029cd0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8029cd2:	28ff      	cmp	r0, #255	; 0xff
 8029cd4:	d019      	beq.n	8029d0a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 8029cd6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8029cd8:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8029cdc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8029ce0:	fb04 fb01 	mul.w	fp, r4, r1
 8029ce4:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8029ce8:	fb0a fa00 	mul.w	sl, sl, r0
 8029cec:	f10b 0020 	add.w	r0, fp, #32
 8029cf0:	ea06 115a 	and.w	r1, r6, sl, lsr #5
 8029cf4:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8029cf8:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8029cfc:	4451      	add	r1, sl
 8029cfe:	0a00      	lsrs	r0, r0, #8
 8029d00:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8029d04:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8029d08:	4301      	orrs	r1, r0
 8029d0a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8029d0c:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 8029d10:	2cff      	cmp	r4, #255	; 0xff
 8029d12:	d01a      	beq.n	8029d4a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 8029d14:	f420 68fc 	bic.w	r8, r0, #2016	; 0x7e0
 8029d18:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8029d1c:	fb04 fb00 	mul.w	fp, r4, r0
 8029d20:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8029d24:	fb0a fa08 	mul.w	sl, sl, r8
 8029d28:	f10b 0820 	add.w	r8, fp, #32
 8029d2c:	ea06 105a 	and.w	r0, r6, sl, lsr #5
 8029d30:	eb08 281b 	add.w	r8, r8, fp, lsr #8
 8029d34:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8029d38:	4450      	add	r0, sl
 8029d3a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8029d3e:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8029d42:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8029d46:	ea40 0008 	orr.w	r0, r0, r8
 8029d4a:	fb1c f802 	smulbb	r8, ip, r2
 8029d4e:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8029d52:	f1cc 0a10 	rsb	sl, ip, #16
 8029d56:	ebaa 0a02 	sub.w	sl, sl, r2
 8029d5a:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8029d5e:	ebc8 0242 	rsb	r2, r8, r2, lsl #1
 8029d62:	eb08 0a4a 	add.w	sl, r8, sl, lsl #1
 8029d66:	fb0e f202 	mul.w	r2, lr, r2
 8029d6a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8029d6e:	ea4f 4e00 	mov.w	lr, r0, lsl #16
 8029d72:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8029d76:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 8029d7a:	fb09 220a 	mla	r2, r9, sl, r2
 8029d7e:	ea4b 0101 	orr.w	r1, fp, r1
 8029d82:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8029d86:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8029d8a:	fb0c 2201 	mla	r2, ip, r1, r2
 8029d8e:	ea4e 0000 	orr.w	r0, lr, r0
 8029d92:	fb08 2800 	mla	r8, r8, r0, r2
 8029d96:	ea4f 5258 	mov.w	r2, r8, lsr #21
 8029d9a:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8029d9e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029da2:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8029da6:	ea42 0808 	orr.w	r8, r2, r8
 8029daa:	fa1f f288 	uxth.w	r2, r8
 8029dae:	2bff      	cmp	r3, #255	; 0xff
 8029db0:	f000 80b1 	beq.w	8029f16 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a6>
 8029db4:	f8b7 8000 	ldrh.w	r8, [r7]
 8029db8:	43db      	mvns	r3, r3
 8029dba:	ea4f 2028 	mov.w	r0, r8, asr #8
 8029dbe:	fa5f fe83 	uxtb.w	lr, r3
 8029dc2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8029dc6:	fb00 f00e 	mul.w	r0, r0, lr
 8029dca:	1c41      	adds	r1, r0, #1
 8029dcc:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8029dd0:	1210      	asrs	r0, r2, #8
 8029dd2:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8029dd6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8029dda:	eb00 2011 	add.w	r0, r0, r1, lsr #8
 8029dde:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8029de2:	495a      	ldr	r1, [pc, #360]	; (8029f4c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4dc>)
 8029de4:	fb0c fc0e 	mul.w	ip, ip, lr
 8029de8:	ea01 2000 	and.w	r0, r1, r0, lsl #8
 8029dec:	f10c 0101 	add.w	r1, ip, #1
 8029df0:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8029df4:	10d1      	asrs	r1, r2, #3
 8029df6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8029dfa:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8029dfe:	eb01 211c 	add.w	r1, r1, ip, lsr #8
 8029e02:	b2db      	uxtb	r3, r3
 8029e04:	00c9      	lsls	r1, r1, #3
 8029e06:	fb03 f30e 	mul.w	r3, r3, lr
 8029e0a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8029e0e:	4301      	orrs	r1, r0
 8029e10:	1c58      	adds	r0, r3, #1
 8029e12:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8029e16:	00d3      	lsls	r3, r2, #3
 8029e18:	b2db      	uxtb	r3, r3
 8029e1a:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8029e1e:	ea41 03d3 	orr.w	r3, r1, r3, lsr #3
 8029e22:	803b      	strh	r3, [r7, #0]
 8029e24:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8029e26:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8029e28:	4413      	add	r3, r2
 8029e2a:	9327      	str	r3, [sp, #156]	; 0x9c
 8029e2c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8029e2e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8029e30:	441a      	add	r2, r3
 8029e32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8029e34:	9228      	str	r2, [sp, #160]	; 0xa0
 8029e36:	3b01      	subs	r3, #1
 8029e38:	3702      	adds	r7, #2
 8029e3a:	9311      	str	r3, [sp, #68]	; 0x44
 8029e3c:	e69a      	b.n	8029b74 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8029e3e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8029e40:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8029e42:	4413      	add	r3, r2
 8029e44:	9327      	str	r3, [sp, #156]	; 0x9c
 8029e46:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8029e48:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8029e4a:	441a      	add	r2, r3
 8029e4c:	9b06      	ldr	r3, [sp, #24]
 8029e4e:	9228      	str	r2, [sp, #160]	; 0xa0
 8029e50:	3b01      	subs	r3, #1
 8029e52:	9306      	str	r3, [sp, #24]
 8029e54:	9b07      	ldr	r3, [sp, #28]
 8029e56:	3302      	adds	r3, #2
 8029e58:	9307      	str	r3, [sp, #28]
 8029e5a:	e63f      	b.n	8029adc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8029e5c:	f47f ae51 	bne.w	8029b02 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8029e60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8029e62:	2b00      	cmp	r3, #0
 8029e64:	f340 81dd 	ble.w	802a222 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7b2>
 8029e68:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8029e6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8029e70:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8029e74:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8029e76:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8029e7a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8029e7e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8029e82:	eef0 6a48 	vmov.f32	s13, s16
 8029e86:	ee69 7a27 	vmul.f32	s15, s18, s15
 8029e8a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029e8e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8029e92:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 8029e96:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8029e9a:	eef0 6a68 	vmov.f32	s13, s17
 8029e9e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8029ea2:	ee18 2a10 	vmov	r2, s16
 8029ea6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8029eaa:	fb92 f3f3 	sdiv	r3, r2, r3
 8029eae:	ee18 2a90 	vmov	r2, s17
 8029eb2:	9329      	str	r3, [sp, #164]	; 0xa4
 8029eb4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8029eb6:	fb92 f3f3 	sdiv	r3, r2, r3
 8029eba:	932a      	str	r3, [sp, #168]	; 0xa8
 8029ebc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8029ebe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8029ec0:	3b01      	subs	r3, #1
 8029ec2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029ec6:	9310      	str	r3, [sp, #64]	; 0x40
 8029ec8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8029eca:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 8029ece:	bf08      	it	eq
 8029ed0:	4613      	moveq	r3, r2
 8029ed2:	9306      	str	r3, [sp, #24]
 8029ed4:	eef0 8a67 	vmov.f32	s17, s15
 8029ed8:	eeb0 8a47 	vmov.f32	s16, s14
 8029edc:	e5f7      	b.n	8029ace <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 8029ede:	fb08 f000 	mul.w	r0, r8, r0
 8029ee2:	fb09 0303 	mla	r3, r9, r3, r0
 8029ee6:	e693      	b.n	8029c10 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a0>
 8029ee8:	4689      	mov	r9, r1
 8029eea:	e6bb      	b.n	8029c64 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f4>
 8029eec:	f1c2 0010 	rsb	r0, r2, #16
 8029ef0:	fb0e f202 	mul.w	r2, lr, r2
 8029ef4:	fb09 2900 	mla	r9, r9, r0, r2
 8029ef8:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8029efc:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8029f00:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8029f04:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029f08:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8029f0c:	ea42 0909 	orr.w	r9, r2, r9
 8029f10:	fa1f f289 	uxth.w	r2, r9
 8029f14:	e74b      	b.n	8029dae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 8029f16:	803a      	strh	r2, [r7, #0]
 8029f18:	e784      	b.n	8029e24 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8029f1a:	1c5c      	adds	r4, r3, #1
 8029f1c:	d182      	bne.n	8029e24 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8029f1e:	429d      	cmp	r5, r3
 8029f20:	dd80      	ble.n	8029e24 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8029f22:	1c48      	adds	r0, r1, #1
 8029f24:	f6ff af7e 	blt.w	8029e24 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8029f28:	9808      	ldr	r0, [sp, #32]
 8029f2a:	4288      	cmp	r0, r1
 8029f2c:	f77f af7a 	ble.w	8029e24 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8029f30:	e9cd 3102 	strd	r3, r1, [sp, #8]
 8029f34:	e9cd 2c04 	strd	r2, ip, [sp, #16]
 8029f38:	e9cd 5000 	strd	r5, r0, [sp]
 8029f3c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8029f40:	4639      	mov	r1, r7
 8029f42:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8029f44:	f7ff fbf2 	bl	802972c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8029f48:	e76c      	b.n	8029e24 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8029f4a:	bf00      	nop
 8029f4c:	fffff800 	.word	0xfffff800
 8029f50:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8029f52:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8029f56:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029f58:	141f      	asrs	r7, r3, #16
 8029f5a:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8029f5e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8029f60:	141b      	asrs	r3, r3, #16
 8029f62:	fb05 3707 	mla	r7, r5, r7, r3
 8029f66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029f68:	fa1f fc82 	uxth.w	ip, r2
 8029f6c:	eb03 0a07 	add.w	sl, r3, r7
 8029f70:	ea4f 110c 	mov.w	r1, ip, lsl #4
 8029f74:	f813 9007 	ldrb.w	r9, [r3, r7]
 8029f78:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8029f7c:	f5c1 7380 	rsb	r3, r1, #256	; 0x100
 8029f80:	b29b      	uxth	r3, r3
 8029f82:	2800      	cmp	r0, #0
 8029f84:	f000 8132 	beq.w	802a1ec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x77c>
 8029f88:	f81a 4005 	ldrb.w	r4, [sl, r5]
 8029f8c:	940d      	str	r4, [sp, #52]	; 0x34
 8029f8e:	eb0a 0b05 	add.w	fp, sl, r5
 8029f92:	fa1f fa80 	uxth.w	sl, r0
 8029f96:	fb0a fc0c 	mul.w	ip, sl, ip
 8029f9a:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8029f9e:	fa1f fa8a 	uxth.w	sl, sl
 8029fa2:	eba1 010c 	sub.w	r1, r1, ip
 8029fa6:	eba3 030a 	sub.w	r3, r3, sl
 8029faa:	b289      	uxth	r1, r1
 8029fac:	fb08 f101 	mul.w	r1, r8, r1
 8029fb0:	b29b      	uxth	r3, r3
 8029fb2:	fb09 1303 	mla	r3, r9, r3, r1
 8029fb6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8029fb8:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8029fbc:	940e      	str	r4, [sp, #56]	; 0x38
 8029fbe:	fb0a 3301 	mla	r3, sl, r1, r3
 8029fc2:	fb0c 3304 	mla	r3, ip, r4, r3
 8029fc6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029fca:	2b00      	cmp	r3, #0
 8029fcc:	f000 8100 	beq.w	802a1d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x760>
 8029fd0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8029fd2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8029fd4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8029fd8:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 8029fdc:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8029fe0:	f000 8109 	beq.w	802a1f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x786>
 8029fe4:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8029fe8:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8029fec:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8029ff0:	fb09 f707 	mul.w	r7, r9, r7
 8029ff4:	fb0a fc0c 	mul.w	ip, sl, ip
 8029ff8:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8029ffc:	f107 0b20 	add.w	fp, r7, #32
 802a000:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 802a004:	44cc      	add	ip, r9
 802a006:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 802a00a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802a00e:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802a012:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802a016:	ea4c 0909 	orr.w	r9, ip, r9
 802a01a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802a01e:	884f      	ldrh	r7, [r1, #2]
 802a020:	d019      	beq.n	802a056 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e6>
 802a022:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 802a026:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802a02a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802a02e:	fb08 f807 	mul.w	r8, r8, r7
 802a032:	fb0a fc0c 	mul.w	ip, sl, ip
 802a036:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 802a03a:	f108 0b20 	add.w	fp, r8, #32
 802a03e:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 802a042:	44bc      	add	ip, r7
 802a044:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 802a048:	0a3f      	lsrs	r7, r7, #8
 802a04a:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802a04e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802a052:	ea4c 0707 	orr.w	r7, ip, r7
 802a056:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 802a05a:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 802a05e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802a062:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802a066:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802a06a:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 802a06e:	ea4c 0909 	orr.w	r9, ip, r9
 802a072:	ea4a 0707 	orr.w	r7, sl, r7
 802a076:	2800      	cmp	r0, #0
 802a078:	f000 80bf 	beq.w	802a1fa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78a>
 802a07c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802a07e:	eb01 0c04 	add.w	ip, r1, r4
 802a082:	f831 8004 	ldrh.w	r8, [r1, r4]
 802a086:	990d      	ldr	r1, [sp, #52]	; 0x34
 802a088:	29ff      	cmp	r1, #255	; 0xff
 802a08a:	d01a      	beq.n	802a0c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x652>
 802a08c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802a08e:	f428 61fc 	bic.w	r1, r8, #2016	; 0x7e0
 802a092:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 802a096:	fb04 fb08 	mul.w	fp, r4, r8
 802a09a:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 802a09e:	fb0a fa01 	mul.w	sl, sl, r1
 802a0a2:	f10b 0120 	add.w	r1, fp, #32
 802a0a6:	ea06 185a 	and.w	r8, r6, sl, lsr #5
 802a0aa:	eb01 211b 	add.w	r1, r1, fp, lsr #8
 802a0ae:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 802a0b2:	44d0      	add	r8, sl
 802a0b4:	0a09      	lsrs	r1, r1, #8
 802a0b6:	ea06 1858 	and.w	r8, r6, r8, lsr #5
 802a0ba:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802a0be:	ea48 0801 	orr.w	r8, r8, r1
 802a0c2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802a0c4:	f8bc 1002 	ldrh.w	r1, [ip, #2]
 802a0c8:	2cff      	cmp	r4, #255	; 0xff
 802a0ca:	d01a      	beq.n	802a102 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x692>
 802a0cc:	f421 6cfc 	bic.w	ip, r1, #2016	; 0x7e0
 802a0d0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802a0d4:	fb04 fb01 	mul.w	fp, r4, r1
 802a0d8:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 802a0dc:	fb0a fa0c 	mul.w	sl, sl, ip
 802a0e0:	f10b 0c20 	add.w	ip, fp, #32
 802a0e4:	ea06 115a 	and.w	r1, r6, sl, lsr #5
 802a0e8:	eb0c 2c1b 	add.w	ip, ip, fp, lsr #8
 802a0ec:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 802a0f0:	4451      	add	r1, sl
 802a0f2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a0f6:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 802a0fa:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802a0fe:	ea41 010c 	orr.w	r1, r1, ip
 802a102:	fb10 fc02 	smulbb	ip, r0, r2
 802a106:	ea4f 0cec 	mov.w	ip, ip, asr #3
 802a10a:	f1c0 0a10 	rsb	sl, r0, #16
 802a10e:	ebaa 0a02 	sub.w	sl, sl, r2
 802a112:	ea4f 4b08 	mov.w	fp, r8, lsl #16
 802a116:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 802a11a:	437a      	muls	r2, r7
 802a11c:	eb0c 0a4a 	add.w	sl, ip, sl, lsl #1
 802a120:	040f      	lsls	r7, r1, #16
 802a122:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802a126:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 802a12a:	fb09 220a 	mla	r2, r9, sl, r2
 802a12e:	ea4b 0808 	orr.w	r8, fp, r8
 802a132:	ebcc 0040 	rsb	r0, ip, r0, lsl #1
 802a136:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 802a13a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802a13e:	fb00 2208 	mla	r2, r0, r8, r2
 802a142:	4339      	orrs	r1, r7
 802a144:	fb0c 2201 	mla	r2, ip, r1, r2
 802a148:	ea4f 5952 	mov.w	r9, r2, lsr #21
 802a14c:	0952      	lsrs	r2, r2, #5
 802a14e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802a152:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802a156:	ea49 0202 	orr.w	r2, r9, r2
 802a15a:	2bff      	cmp	r3, #255	; 0xff
 802a15c:	b292      	uxth	r2, r2
 802a15e:	d05d      	beq.n	802a21c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7ac>
 802a160:	f8be 8000 	ldrh.w	r8, [lr]
 802a164:	4c31      	ldr	r4, [pc, #196]	; (802a22c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7bc>)
 802a166:	43db      	mvns	r3, r3
 802a168:	ea4f 2028 	mov.w	r0, r8, asr #8
 802a16c:	fa5f fc83 	uxtb.w	ip, r3
 802a170:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802a174:	ea4f 07e8 	mov.w	r7, r8, asr #3
 802a178:	fb00 f00c 	mul.w	r0, r0, ip
 802a17c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802a180:	fb07 f10c 	mul.w	r1, r7, ip
 802a184:	1c47      	adds	r7, r0, #1
 802a186:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 802a18a:	1217      	asrs	r7, r2, #8
 802a18c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802a190:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 802a194:	1c4f      	adds	r7, r1, #1
 802a196:	eb07 2711 	add.w	r7, r7, r1, lsr #8
 802a19a:	10d1      	asrs	r1, r2, #3
 802a19c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802a1a0:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 802a1a4:	eb01 2117 	add.w	r1, r1, r7, lsr #8
 802a1a8:	b2db      	uxtb	r3, r3
 802a1aa:	00c9      	lsls	r1, r1, #3
 802a1ac:	fb03 f30c 	mul.w	r3, r3, ip
 802a1b0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802a1b4:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 802a1b8:	4308      	orrs	r0, r1
 802a1ba:	00d2      	lsls	r2, r2, #3
 802a1bc:	1c59      	adds	r1, r3, #1
 802a1be:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802a1c2:	b2d2      	uxtb	r2, r2
 802a1c4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802a1c8:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
 802a1cc:	f8ae 0000 	strh.w	r0, [lr]
 802a1d0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802a1d2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802a1d4:	4413      	add	r3, r2
 802a1d6:	9327      	str	r3, [sp, #156]	; 0x9c
 802a1d8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 802a1da:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802a1dc:	441a      	add	r2, r3
 802a1de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802a1e0:	9228      	str	r2, [sp, #160]	; 0xa0
 802a1e2:	3b01      	subs	r3, #1
 802a1e4:	f10e 0e02 	add.w	lr, lr, #2
 802a1e8:	9311      	str	r3, [sp, #68]	; 0x44
 802a1ea:	e4a5      	b.n	8029b38 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 802a1ec:	fb08 f101 	mul.w	r1, r8, r1
 802a1f0:	fb09 1303 	mla	r3, r9, r3, r1
 802a1f4:	e6e7      	b.n	8029fc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 802a1f6:	46b9      	mov	r9, r7
 802a1f8:	e70f      	b.n	802a01a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5aa>
 802a1fa:	f1c2 0110 	rsb	r1, r2, #16
 802a1fe:	437a      	muls	r2, r7
 802a200:	fb09 2901 	mla	r9, r9, r1, r2
 802a204:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802a208:	ea4f 5059 	mov.w	r0, r9, lsr #21
 802a20c:	ea4f 1259 	mov.w	r2, r9, lsr #5
 802a210:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802a214:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802a218:	4302      	orrs	r2, r0
 802a21a:	e79e      	b.n	802a15a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ea>
 802a21c:	f8ae 2000 	strh.w	r2, [lr]
 802a220:	e7d6      	b.n	802a1d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x760>
 802a222:	b015      	add	sp, #84	; 0x54
 802a224:	ecbd 8b08 	vpop	{d8-d11}
 802a228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a22c:	fffff800 	.word	0xfffff800

0802a230 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 802a230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a234:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	; 0x24
 802a238:	fb0c 4e03 	mla	lr, ip, r3, r4
 802a23c:	f1bc 0f00 	cmp.w	ip, #0
 802a240:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 802a244:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 802a248:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 802a24c:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 802a250:	8808      	ldrh	r0, [r1, #0]
 802a252:	eb02 084e 	add.w	r8, r2, lr, lsl #1
 802a256:	db2f      	blt.n	802a2b8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 802a258:	45e2      	cmp	sl, ip
 802a25a:	dd2d      	ble.n	802a2b8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 802a25c:	2c00      	cmp	r4, #0
 802a25e:	db29      	blt.n	802a2b4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 802a260:	42a3      	cmp	r3, r4
 802a262:	dd27      	ble.n	802a2b4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 802a264:	f832 901e 	ldrh.w	r9, [r2, lr, lsl #1]
 802a268:	1c62      	adds	r2, r4, #1
 802a26a:	d428      	bmi.n	802a2be <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 802a26c:	4293      	cmp	r3, r2
 802a26e:	dd26      	ble.n	802a2be <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 802a270:	b32f      	cbz	r7, 802a2be <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 802a272:	f8b8 e002 	ldrh.w	lr, [r8, #2]
 802a276:	f11c 0c01 	adds.w	ip, ip, #1
 802a27a:	d424      	bmi.n	802a2c6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 802a27c:	45e2      	cmp	sl, ip
 802a27e:	dd22      	ble.n	802a2c6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 802a280:	2e00      	cmp	r6, #0
 802a282:	f000 809c 	beq.w	802a3be <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18e>
 802a286:	2c00      	cmp	r4, #0
 802a288:	db1b      	blt.n	802a2c2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 802a28a:	42a3      	cmp	r3, r4
 802a28c:	dd19      	ble.n	802a2c2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 802a28e:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 802a292:	3401      	adds	r4, #1
 802a294:	d41a      	bmi.n	802a2cc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 802a296:	42a3      	cmp	r3, r4
 802a298:	dd18      	ble.n	802a2cc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 802a29a:	b1cf      	cbz	r7, 802a2d0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa0>
 802a29c:	3301      	adds	r3, #1
 802a29e:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 802a2a2:	2f0f      	cmp	r7, #15
 802a2a4:	d915      	bls.n	802a2d2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa2>
 802a2a6:	4b49      	ldr	r3, [pc, #292]	; (802a3cc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x19c>)
 802a2a8:	4a49      	ldr	r2, [pc, #292]	; (802a3d0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a0>)
 802a2aa:	484a      	ldr	r0, [pc, #296]	; (802a3d4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a4>)
 802a2ac:	f240 11ef 	movw	r1, #495	; 0x1ef
 802a2b0:	f003 ffda 	bl	802e268 <__assert_func>
 802a2b4:	4681      	mov	r9, r0
 802a2b6:	e7d7      	b.n	802a268 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x38>
 802a2b8:	4686      	mov	lr, r0
 802a2ba:	4681      	mov	r9, r0
 802a2bc:	e7db      	b.n	802a276 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 802a2be:	4686      	mov	lr, r0
 802a2c0:	e7d9      	b.n	802a276 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 802a2c2:	4684      	mov	ip, r0
 802a2c4:	e7e5      	b.n	802a292 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x62>
 802a2c6:	4603      	mov	r3, r0
 802a2c8:	4684      	mov	ip, r0
 802a2ca:	e7ea      	b.n	802a2a2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 802a2cc:	4603      	mov	r3, r0
 802a2ce:	e7e8      	b.n	802a2a2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 802a2d0:	4603      	mov	r3, r0
 802a2d2:	2e0f      	cmp	r6, #15
 802a2d4:	d8e7      	bhi.n	802a2a6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 802a2d6:	ea4f 4409 	mov.w	r4, r9, lsl #16
 802a2da:	fb17 f806 	smulbb	r8, r7, r6
 802a2de:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 802a2e2:	ea4f 4a0e 	mov.w	sl, lr, lsl #16
 802a2e6:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802a2ea:	ea4f 08e8 	mov.w	r8, r8, asr #3
 802a2ee:	ea44 0909 	orr.w	r9, r4, r9
 802a2f2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802a2f6:	f1c6 0410 	rsb	r4, r6, #16
 802a2fa:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802a2fe:	1be4      	subs	r4, r4, r7
 802a300:	041a      	lsls	r2, r3, #16
 802a302:	ebc8 0747 	rsb	r7, r8, r7, lsl #1
 802a306:	ea4a 0e0e 	orr.w	lr, sl, lr
 802a30a:	fb07 fe0e 	mul.w	lr, r7, lr
 802a30e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802a312:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 802a316:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802a31a:	fb04 e409 	mla	r4, r4, r9, lr
 802a31e:	4313      	orrs	r3, r2
 802a320:	ea4f 420c 	mov.w	r2, ip, lsl #16
 802a324:	fb08 4303 	mla	r3, r8, r3, r4
 802a328:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802a32c:	f42c 64fc 	bic.w	r4, ip, #2016	; 0x7e0
 802a330:	4322      	orrs	r2, r4
 802a332:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 802a336:	fb06 3202 	mla	r2, r6, r2, r3
 802a33a:	0d53      	lsrs	r3, r2, #21
 802a33c:	0952      	lsrs	r2, r2, #5
 802a33e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802a342:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802a346:	431a      	orrs	r2, r3
 802a348:	b293      	uxth	r3, r2
 802a34a:	b2af      	uxth	r7, r5
 802a34c:	1202      	asrs	r2, r0, #8
 802a34e:	43ed      	mvns	r5, r5
 802a350:	b2ed      	uxtb	r5, r5
 802a352:	ea4f 2c23 	mov.w	ip, r3, asr #8
 802a356:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802a35a:	fb12 f205 	smulbb	r2, r2, r5
 802a35e:	10c6      	asrs	r6, r0, #3
 802a360:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802a364:	fb0c 2c07 	mla	ip, ip, r7, r2
 802a368:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802a36c:	10da      	asrs	r2, r3, #3
 802a36e:	fb16 f605 	smulbb	r6, r6, r5
 802a372:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802a376:	fb02 6207 	mla	r2, r2, r7, r6
 802a37a:	b296      	uxth	r6, r2
 802a37c:	00c2      	lsls	r2, r0, #3
 802a37e:	00dc      	lsls	r4, r3, #3
 802a380:	b2d2      	uxtb	r2, r2
 802a382:	b2e4      	uxtb	r4, r4
 802a384:	fb12 f205 	smulbb	r2, r2, r5
 802a388:	fb04 2207 	mla	r2, r4, r7, r2
 802a38c:	fa1f fc8c 	uxth.w	ip, ip
 802a390:	b292      	uxth	r2, r2
 802a392:	f10c 0301 	add.w	r3, ip, #1
 802a396:	1c50      	adds	r0, r2, #1
 802a398:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 802a39c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 802a3a0:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802a3a4:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 802a3a8:	4313      	orrs	r3, r2
 802a3aa:	1c72      	adds	r2, r6, #1
 802a3ac:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 802a3b0:	0952      	lsrs	r2, r2, #5
 802a3b2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802a3b6:	4313      	orrs	r3, r2
 802a3b8:	800b      	strh	r3, [r1, #0]
 802a3ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a3be:	2f0f      	cmp	r7, #15
 802a3c0:	f63f af71 	bhi.w	802a2a6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 802a3c4:	4603      	mov	r3, r0
 802a3c6:	4684      	mov	ip, r0
 802a3c8:	e785      	b.n	802a2d6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa6>
 802a3ca:	bf00      	nop
 802a3cc:	08034370 	.word	0x08034370
 802a3d0:	08034972 	.word	0x08034972
 802a3d4:	080343f8 	.word	0x080343f8

0802a3d8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802a3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a3dc:	ed2d 8b08 	vpush	{d8-d11}
 802a3e0:	b095      	sub	sp, #84	; 0x54
 802a3e2:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 802a3e6:	9306      	str	r3, [sp, #24]
 802a3e8:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 802a3ec:	9212      	str	r2, [sp, #72]	; 0x48
 802a3ee:	9307      	str	r3, [sp, #28]
 802a3f0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802a3f2:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 802a3f6:	930c      	str	r3, [sp, #48]	; 0x30
 802a3f8:	910b      	str	r1, [sp, #44]	; 0x2c
 802a3fa:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 802a3fe:	9013      	str	r0, [sp, #76]	; 0x4c
 802a400:	6850      	ldr	r0, [r2, #4]
 802a402:	6812      	ldr	r2, [r2, #0]
 802a404:	f9bd 70b8 	ldrsh.w	r7, [sp, #184]	; 0xb8
 802a408:	fb00 1303 	mla	r3, r0, r3, r1
 802a40c:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802a410:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802a412:	681b      	ldr	r3, [r3, #0]
 802a414:	9309      	str	r3, [sp, #36]	; 0x24
 802a416:	007b      	lsls	r3, r7, #1
 802a418:	930a      	str	r3, [sp, #40]	; 0x28
 802a41a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802a41c:	43db      	mvns	r3, r3
 802a41e:	b2db      	uxtb	r3, r3
 802a420:	eeb0 aa40 	vmov.f32	s20, s0
 802a424:	eef0 9a60 	vmov.f32	s19, s1
 802a428:	eeb0 9a41 	vmov.f32	s18, s2
 802a42c:	eeb0 8a62 	vmov.f32	s16, s5
 802a430:	eef0 8a43 	vmov.f32	s17, s6
 802a434:	eef0 ba44 	vmov.f32	s23, s8
 802a438:	eeb0 ba64 	vmov.f32	s22, s9
 802a43c:	eef0 aa45 	vmov.f32	s21, s10
 802a440:	9308      	str	r3, [sp, #32]
 802a442:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802a444:	2b00      	cmp	r3, #0
 802a446:	dc03      	bgt.n	802a450 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 802a448:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802a44a:	2b00      	cmp	r3, #0
 802a44c:	f340 81f3 	ble.w	802a836 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45e>
 802a450:	9b06      	ldr	r3, [sp, #24]
 802a452:	2b00      	cmp	r3, #0
 802a454:	f340 80fa 	ble.w	802a64c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 802a458:	1422      	asrs	r2, r4, #16
 802a45a:	ea4f 4326 	mov.w	r3, r6, asr #16
 802a45e:	d42b      	bmi.n	802a4b8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 802a460:	1c51      	adds	r1, r2, #1
 802a462:	428f      	cmp	r7, r1
 802a464:	dd2b      	ble.n	802a4be <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 802a466:	2b00      	cmp	r3, #0
 802a468:	db29      	blt.n	802a4be <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 802a46a:	9807      	ldr	r0, [sp, #28]
 802a46c:	1c59      	adds	r1, r3, #1
 802a46e:	4288      	cmp	r0, r1
 802a470:	dd25      	ble.n	802a4be <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 802a472:	9b06      	ldr	r3, [sp, #24]
 802a474:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802a476:	3b01      	subs	r3, #1
 802a478:	fb02 4203 	mla	r2, r2, r3, r4
 802a47c:	1412      	asrs	r2, r2, #16
 802a47e:	d428      	bmi.n	802a4d2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 802a480:	3201      	adds	r2, #1
 802a482:	4297      	cmp	r7, r2
 802a484:	dd25      	ble.n	802a4d2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 802a486:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802a488:	fb02 6303 	mla	r3, r2, r3, r6
 802a48c:	141b      	asrs	r3, r3, #16
 802a48e:	d420      	bmi.n	802a4d2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 802a490:	9a07      	ldr	r2, [sp, #28]
 802a492:	3301      	adds	r3, #1
 802a494:	429a      	cmp	r2, r3
 802a496:	dd1c      	ble.n	802a4d2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 802a498:	f8dd 8018 	ldr.w	r8, [sp, #24]
 802a49c:	f8bd a030 	ldrh.w	sl, [sp, #48]	; 0x30
 802a4a0:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 802a4a4:	f1b8 0f00 	cmp.w	r8, #0
 802a4a8:	f300 8129 	bgt.w	802a6fe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x326>
 802a4ac:	9b06      	ldr	r3, [sp, #24]
 802a4ae:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802a4b2:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802a4b6:	e0cb      	b.n	802a650 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 802a4b8:	1c51      	adds	r1, r2, #1
 802a4ba:	f040 80bd 	bne.w	802a638 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 802a4be:	42ba      	cmp	r2, r7
 802a4c0:	f280 80ba 	bge.w	802a638 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 802a4c4:	1c5a      	adds	r2, r3, #1
 802a4c6:	f2c0 80b7 	blt.w	802a638 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 802a4ca:	9a07      	ldr	r2, [sp, #28]
 802a4cc:	4293      	cmp	r3, r2
 802a4ce:	f280 80b3 	bge.w	802a638 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 802a4d2:	f8dd b018 	ldr.w	fp, [sp, #24]
 802a4d6:	46c8      	mov	r8, r9
 802a4d8:	f1bb 0f00 	cmp.w	fp, #0
 802a4dc:	dde6      	ble.n	802a4ac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 802a4de:	1421      	asrs	r1, r4, #16
 802a4e0:	ea4f 4226 	mov.w	r2, r6, asr #16
 802a4e4:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802a4e8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802a4ec:	f100 80ef 	bmi.w	802a6ce <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 802a4f0:	f101 0c01 	add.w	ip, r1, #1
 802a4f4:	4567      	cmp	r7, ip
 802a4f6:	f340 80ec 	ble.w	802a6d2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 802a4fa:	2a00      	cmp	r2, #0
 802a4fc:	f2c0 80e9 	blt.w	802a6d2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 802a500:	9d07      	ldr	r5, [sp, #28]
 802a502:	f102 0c01 	add.w	ip, r2, #1
 802a506:	4565      	cmp	r5, ip
 802a508:	f340 80e3 	ble.w	802a6d2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 802a50c:	fb02 1207 	mla	r2, r2, r7, r1
 802a510:	9909      	ldr	r1, [sp, #36]	; 0x24
 802a512:	eb01 0e42 	add.w	lr, r1, r2, lsl #1
 802a516:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 802a51a:	f8be 1002 	ldrh.w	r1, [lr, #2]
 802a51e:	b138      	cbz	r0, 802a530 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x158>
 802a520:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802a522:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802a524:	4472      	add	r2, lr
 802a526:	f83e 5005 	ldrh.w	r5, [lr, r5]
 802a52a:	8852      	ldrh	r2, [r2, #2]
 802a52c:	950e      	str	r5, [sp, #56]	; 0x38
 802a52e:	920f      	str	r2, [sp, #60]	; 0x3c
 802a530:	ea4f 4e0c 	mov.w	lr, ip, lsl #16
 802a534:	fb13 f200 	smulbb	r2, r3, r0
 802a538:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802a53c:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802a540:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802a544:	10d2      	asrs	r2, r2, #3
 802a546:	ea4e 0c0c 	orr.w	ip, lr, ip
 802a54a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802a54e:	f1c0 0e10 	rsb	lr, r0, #16
 802a552:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802a556:	ebae 0e03 	sub.w	lr, lr, r3
 802a55a:	ea4a 0101 	orr.w	r1, sl, r1
 802a55e:	ebc2 0343 	rsb	r3, r2, r3, lsl #1
 802a562:	4359      	muls	r1, r3
 802a564:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802a566:	9d08      	ldr	r5, [sp, #32]
 802a568:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 802a56c:	fb0e 1e0c 	mla	lr, lr, ip, r1
 802a570:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802a574:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802a578:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802a57c:	ea4c 0c03 	orr.w	ip, ip, r3
 802a580:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802a582:	990e      	ldr	r1, [sp, #56]	; 0x38
 802a584:	041b      	lsls	r3, r3, #16
 802a586:	fb02 ec0c 	mla	ip, r2, ip, lr
 802a58a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802a58e:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 802a592:	ea43 030e 	orr.w	r3, r3, lr
 802a596:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 802a59a:	fb02 c203 	mla	r2, r2, r3, ip
 802a59e:	0d53      	lsrs	r3, r2, #21
 802a5a0:	0952      	lsrs	r2, r2, #5
 802a5a2:	f8b8 c000 	ldrh.w	ip, [r8]
 802a5a6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802a5aa:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802a5ae:	431a      	orrs	r2, r3
 802a5b0:	b292      	uxth	r2, r2
 802a5b2:	ea4f 212c 	mov.w	r1, ip, asr #8
 802a5b6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 802a5ba:	1210      	asrs	r0, r2, #8
 802a5bc:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802a5c0:	fb11 f105 	smulbb	r1, r1, r5
 802a5c4:	ea4f 0eec 	mov.w	lr, ip, asr #3
 802a5c8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802a5cc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802a5d0:	fb00 1003 	mla	r0, r0, r3, r1
 802a5d4:	fa5f fc8c 	uxtb.w	ip, ip
 802a5d8:	10d1      	asrs	r1, r2, #3
 802a5da:	00d2      	lsls	r2, r2, #3
 802a5dc:	fb1c fc05 	smulbb	ip, ip, r5
 802a5e0:	b2d2      	uxtb	r2, r2
 802a5e2:	fb02 c203 	mla	r2, r2, r3, ip
 802a5e6:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 802a5ea:	b280      	uxth	r0, r0
 802a5ec:	b292      	uxth	r2, r2
 802a5ee:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802a5f2:	fb1e fe05 	smulbb	lr, lr, r5
 802a5f6:	fb01 e103 	mla	r1, r1, r3, lr
 802a5fa:	f102 0c01 	add.w	ip, r2, #1
 802a5fe:	1c43      	adds	r3, r0, #1
 802a600:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802a604:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802a608:	b289      	uxth	r1, r1
 802a60a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802a60e:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 802a612:	4313      	orrs	r3, r2
 802a614:	1c4a      	adds	r2, r1, #1
 802a616:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802a61a:	0949      	lsrs	r1, r1, #5
 802a61c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802a620:	430b      	orrs	r3, r1
 802a622:	f8a8 3000 	strh.w	r3, [r8]
 802a626:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802a628:	441c      	add	r4, r3
 802a62a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802a62c:	f108 0802 	add.w	r8, r8, #2
 802a630:	441e      	add	r6, r3
 802a632:	f10b 3bff 	add.w	fp, fp, #4294967295
 802a636:	e74f      	b.n	802a4d8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 802a638:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802a63a:	441c      	add	r4, r3
 802a63c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802a63e:	441e      	add	r6, r3
 802a640:	9b06      	ldr	r3, [sp, #24]
 802a642:	3b01      	subs	r3, #1
 802a644:	9306      	str	r3, [sp, #24]
 802a646:	f109 0902 	add.w	r9, r9, #2
 802a64a:	e701      	b.n	802a450 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 802a64c:	f47f af11 	bne.w	802a472 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 802a650:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802a652:	2b00      	cmp	r3, #0
 802a654:	f340 80ef 	ble.w	802a836 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45e>
 802a658:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802a65c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802a660:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802a664:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802a666:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802a66a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802a66e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802a672:	eef0 6a48 	vmov.f32	s13, s16
 802a676:	ee69 7a27 	vmul.f32	s15, s18, s15
 802a67a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a67e:	ee37 8a48 	vsub.f32	s16, s14, s16
 802a682:	ee16 4a90 	vmov	r4, s13
 802a686:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802a68a:	eef0 6a68 	vmov.f32	s13, s17
 802a68e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802a692:	ee18 2a10 	vmov	r2, s16
 802a696:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802a69a:	fb92 f3f3 	sdiv	r3, r2, r3
 802a69e:	ee18 2a90 	vmov	r2, s17
 802a6a2:	9329      	str	r3, [sp, #164]	; 0xa4
 802a6a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802a6a6:	fb92 f3f3 	sdiv	r3, r2, r3
 802a6aa:	932a      	str	r3, [sp, #168]	; 0xa8
 802a6ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802a6ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802a6b0:	3b01      	subs	r3, #1
 802a6b2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a6b6:	930b      	str	r3, [sp, #44]	; 0x2c
 802a6b8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802a6ba:	bf08      	it	eq
 802a6bc:	4613      	moveq	r3, r2
 802a6be:	ee16 6a90 	vmov	r6, s13
 802a6c2:	9306      	str	r3, [sp, #24]
 802a6c4:	eef0 8a67 	vmov.f32	s17, s15
 802a6c8:	eeb0 8a47 	vmov.f32	s16, s14
 802a6cc:	e6b9      	b.n	802a442 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 802a6ce:	1c4d      	adds	r5, r1, #1
 802a6d0:	d1a9      	bne.n	802a626 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 802a6d2:	428f      	cmp	r7, r1
 802a6d4:	dda7      	ble.n	802a626 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 802a6d6:	1c55      	adds	r5, r2, #1
 802a6d8:	dba5      	blt.n	802a626 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 802a6da:	9d07      	ldr	r5, [sp, #28]
 802a6dc:	4295      	cmp	r5, r2
 802a6de:	dda2      	ble.n	802a626 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 802a6e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802a6e2:	9101      	str	r1, [sp, #4]
 802a6e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802a6e8:	9b07      	ldr	r3, [sp, #28]
 802a6ea:	9300      	str	r3, [sp, #0]
 802a6ec:	e9cd 0504 	strd	r0, r5, [sp, #16]
 802a6f0:	463b      	mov	r3, r7
 802a6f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802a6f4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802a6f6:	4641      	mov	r1, r8
 802a6f8:	f7ff fd9a 	bl	802a230 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 802a6fc:	e793      	b.n	802a626 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 802a6fe:	1422      	asrs	r2, r4, #16
 802a700:	1431      	asrs	r1, r6, #16
 802a702:	fb07 2101 	mla	r1, r7, r1, r2
 802a706:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802a708:	9809      	ldr	r0, [sp, #36]	; 0x24
 802a70a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 802a70e:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 802a712:	f830 c011 	ldrh.w	ip, [r0, r1, lsl #1]
 802a716:	8851      	ldrh	r1, [r2, #2]
 802a718:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802a71c:	f1be 0f00 	cmp.w	lr, #0
 802a720:	d006      	beq.n	802a730 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x358>
 802a722:	980a      	ldr	r0, [sp, #40]	; 0x28
 802a724:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802a726:	1810      	adds	r0, r2, r0
 802a728:	5b52      	ldrh	r2, [r2, r5]
 802a72a:	9210      	str	r2, [sp, #64]	; 0x40
 802a72c:	8842      	ldrh	r2, [r0, #2]
 802a72e:	9211      	str	r2, [sp, #68]	; 0x44
 802a730:	ea4f 400c 	mov.w	r0, ip, lsl #16
 802a734:	fb13 f20e 	smulbb	r2, r3, lr
 802a738:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802a73c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802a740:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802a744:	10d2      	asrs	r2, r2, #3
 802a746:	ea40 000c 	orr.w	r0, r0, ip
 802a74a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802a74e:	f1ce 0c10 	rsb	ip, lr, #16
 802a752:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802a756:	ebac 0c03 	sub.w	ip, ip, r3
 802a75a:	ea4b 0101 	orr.w	r1, fp, r1
 802a75e:	ebc2 0343 	rsb	r3, r2, r3, lsl #1
 802a762:	4359      	muls	r1, r3
 802a764:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802a766:	9d08      	ldr	r5, [sp, #32]
 802a768:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 802a76c:	fb0c 1c00 	mla	ip, ip, r0, r1
 802a770:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 802a774:	f423 60fc 	bic.w	r0, r3, #2016	; 0x7e0
 802a778:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802a77a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802a77e:	ea4b 0000 	orr.w	r0, fp, r0
 802a782:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 802a786:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802a78a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802a78e:	fb02 c000 	mla	r0, r2, r0, ip
 802a792:	ea4b 0b03 	orr.w	fp, fp, r3
 802a796:	ebc2 024e 	rsb	r2, r2, lr, lsl #1
 802a79a:	fb02 0b0b 	mla	fp, r2, fp, r0
 802a79e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802a7a0:	ea4f 515b 	mov.w	r1, fp, lsr #21
 802a7a4:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 802a7a8:	8812      	ldrh	r2, [r2, #0]
 802a7aa:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802a7ae:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 802a7b2:	ea41 0b0b 	orr.w	fp, r1, fp
 802a7b6:	fa1f f38b 	uxth.w	r3, fp
 802a7ba:	1211      	asrs	r1, r2, #8
 802a7bc:	1218      	asrs	r0, r3, #8
 802a7be:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802a7c2:	fb11 f105 	smulbb	r1, r1, r5
 802a7c6:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 802a7ca:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802a7ce:	00d2      	lsls	r2, r2, #3
 802a7d0:	fb00 100a 	mla	r0, r0, sl, r1
 802a7d4:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 802a7d8:	10d9      	asrs	r1, r3, #3
 802a7da:	b2d2      	uxtb	r2, r2
 802a7dc:	00db      	lsls	r3, r3, #3
 802a7de:	fb1c fc05 	smulbb	ip, ip, r5
 802a7e2:	fb12 f205 	smulbb	r2, r2, r5
 802a7e6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802a7ea:	b2db      	uxtb	r3, r3
 802a7ec:	b280      	uxth	r0, r0
 802a7ee:	fb01 c10a 	mla	r1, r1, sl, ip
 802a7f2:	fb03 230a 	mla	r3, r3, sl, r2
 802a7f6:	b29b      	uxth	r3, r3
 802a7f8:	b289      	uxth	r1, r1
 802a7fa:	1c42      	adds	r2, r0, #1
 802a7fc:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802a800:	f101 0c01 	add.w	ip, r1, #1
 802a804:	1c5a      	adds	r2, r3, #1
 802a806:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802a80a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802a80e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802a812:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802a816:	0949      	lsrs	r1, r1, #5
 802a818:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802a81a:	4310      	orrs	r0, r2
 802a81c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802a820:	4308      	orrs	r0, r1
 802a822:	f823 0b02 	strh.w	r0, [r3], #2
 802a826:	930d      	str	r3, [sp, #52]	; 0x34
 802a828:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802a82a:	441c      	add	r4, r3
 802a82c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802a82e:	f108 38ff 	add.w	r8, r8, #4294967295
 802a832:	441e      	add	r6, r3
 802a834:	e636      	b.n	802a4a4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 802a836:	b015      	add	sp, #84	; 0x54
 802a838:	ecbd 8b08 	vpop	{d8-d11}
 802a83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802a840 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 802a840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a844:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 802a848:	fb06 5c03 	mla	ip, r6, r3, r5
 802a84c:	2e00      	cmp	r6, #0
 802a84e:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 802a852:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 802a856:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 802a85a:	8808      	ldrh	r0, [r1, #0]
 802a85c:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 802a860:	db2e      	blt.n	802a8c0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 802a862:	45b0      	cmp	r8, r6
 802a864:	dd2c      	ble.n	802a8c0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 802a866:	2d00      	cmp	r5, #0
 802a868:	db28      	blt.n	802a8bc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 802a86a:	42ab      	cmp	r3, r5
 802a86c:	dd26      	ble.n	802a8bc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 802a86e:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
 802a872:	1c6a      	adds	r2, r5, #1
 802a874:	d427      	bmi.n	802a8c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 802a876:	4293      	cmp	r3, r2
 802a878:	dd25      	ble.n	802a8c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 802a87a:	b324      	cbz	r4, 802a8c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 802a87c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 802a880:	3601      	adds	r6, #1
 802a882:	d424      	bmi.n	802a8ce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 802a884:	45b0      	cmp	r8, r6
 802a886:	dd22      	ble.n	802a8ce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 802a888:	b31f      	cbz	r7, 802a8d2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x92>
 802a88a:	2d00      	cmp	r5, #0
 802a88c:	db1d      	blt.n	802a8ca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 802a88e:	42ab      	cmp	r3, r5
 802a890:	dd1b      	ble.n	802a8ca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 802a892:	f83e 6013 	ldrh.w	r6, [lr, r3, lsl #1]
 802a896:	3501      	adds	r5, #1
 802a898:	d405      	bmi.n	802a8a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 802a89a:	42ab      	cmp	r3, r5
 802a89c:	dd03      	ble.n	802a8a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 802a89e:	b124      	cbz	r4, 802a8aa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6a>
 802a8a0:	3301      	adds	r3, #1
 802a8a2:	f83e 0013 	ldrh.w	r0, [lr, r3, lsl #1]
 802a8a6:	2c0f      	cmp	r4, #15
 802a8a8:	d801      	bhi.n	802a8ae <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802a8aa:	2f0f      	cmp	r7, #15
 802a8ac:	d914      	bls.n	802a8d8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x98>
 802a8ae:	4b27      	ldr	r3, [pc, #156]	; (802a94c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x10c>)
 802a8b0:	4a27      	ldr	r2, [pc, #156]	; (802a950 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x110>)
 802a8b2:	4828      	ldr	r0, [pc, #160]	; (802a954 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x114>)
 802a8b4:	f240 11ef 	movw	r1, #495	; 0x1ef
 802a8b8:	f003 fcd6 	bl	802e268 <__assert_func>
 802a8bc:	4684      	mov	ip, r0
 802a8be:	e7d8      	b.n	802a872 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x32>
 802a8c0:	4602      	mov	r2, r0
 802a8c2:	4684      	mov	ip, r0
 802a8c4:	e7dc      	b.n	802a880 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 802a8c6:	4602      	mov	r2, r0
 802a8c8:	e7da      	b.n	802a880 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 802a8ca:	4606      	mov	r6, r0
 802a8cc:	e7e3      	b.n	802a896 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x56>
 802a8ce:	4606      	mov	r6, r0
 802a8d0:	e7e9      	b.n	802a8a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 802a8d2:	2c0f      	cmp	r4, #15
 802a8d4:	d8eb      	bhi.n	802a8ae <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802a8d6:	4606      	mov	r6, r0
 802a8d8:	ea4f 450c 	mov.w	r5, ip, lsl #16
 802a8dc:	fb14 f307 	smulbb	r3, r4, r7
 802a8e0:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 802a8e4:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 802a8e8:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802a8ec:	10db      	asrs	r3, r3, #3
 802a8ee:	ea45 0c0c 	orr.w	ip, r5, ip
 802a8f2:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802a8f6:	f1c7 0510 	rsb	r5, r7, #16
 802a8fa:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802a8fe:	1b2d      	subs	r5, r5, r4
 802a900:	ea4e 0202 	orr.w	r2, lr, r2
 802a904:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 802a908:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 802a90c:	4354      	muls	r4, r2
 802a90e:	fb05 450c 	mla	r5, r5, ip, r4
 802a912:	0404      	lsls	r4, r0, #16
 802a914:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 802a918:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802a91c:	4320      	orrs	r0, r4
 802a91e:	fb03 5400 	mla	r4, r3, r0, r5
 802a922:	0430      	lsls	r0, r6, #16
 802a924:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802a928:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 802a92c:	ebc3 0747 	rsb	r7, r3, r7, lsl #1
 802a930:	4330      	orrs	r0, r6
 802a932:	fb07 4000 	mla	r0, r7, r0, r4
 802a936:	0d43      	lsrs	r3, r0, #21
 802a938:	0940      	lsrs	r0, r0, #5
 802a93a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802a93e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802a942:	4318      	orrs	r0, r3
 802a944:	8008      	strh	r0, [r1, #0]
 802a946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a94a:	bf00      	nop
 802a94c:	08034370 	.word	0x08034370
 802a950:	08034972 	.word	0x08034972
 802a954:	080343f8 	.word	0x080343f8

0802a958 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802a958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a95c:	ed2d 8b0a 	vpush	{d8-d12}
 802a960:	b093      	sub	sp, #76	; 0x4c
 802a962:	461d      	mov	r5, r3
 802a964:	9210      	str	r2, [sp, #64]	; 0x40
 802a966:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802a968:	f9bd 20bc 	ldrsh.w	r2, [sp, #188]	; 0xbc
 802a96c:	9208      	str	r2, [sp, #32]
 802a96e:	e9dd 272c 	ldrd	r2, r7, [sp, #176]	; 0xb0
 802a972:	910b      	str	r1, [sp, #44]	; 0x2c
 802a974:	6859      	ldr	r1, [r3, #4]
 802a976:	681b      	ldr	r3, [r3, #0]
 802a978:	f9bd 80b8 	ldrsh.w	r8, [sp, #184]	; 0xb8
 802a97c:	9011      	str	r0, [sp, #68]	; 0x44
 802a97e:	fb01 2707 	mla	r7, r1, r7, r2
 802a982:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 802a986:	9307      	str	r3, [sp, #28]
 802a988:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802a98a:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 802a98e:	681b      	ldr	r3, [r3, #0]
 802a990:	9309      	str	r3, [sp, #36]	; 0x24
 802a992:	ea4f 0348 	mov.w	r3, r8, lsl #1
 802a996:	eeb0 aa40 	vmov.f32	s20, s0
 802a99a:	eef0 9a60 	vmov.f32	s19, s1
 802a99e:	eeb0 9a41 	vmov.f32	s18, s2
 802a9a2:	eeb0 8a62 	vmov.f32	s16, s5
 802a9a6:	eef0 8a43 	vmov.f32	s17, s6
 802a9aa:	eeb0 ca44 	vmov.f32	s24, s8
 802a9ae:	eef0 ba64 	vmov.f32	s23, s9
 802a9b2:	eeb0 ba45 	vmov.f32	s22, s10
 802a9b6:	930a      	str	r3, [sp, #40]	; 0x28
 802a9b8:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 802a9bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802a9be:	2b00      	cmp	r3, #0
 802a9c0:	dc03      	bgt.n	802a9ca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 802a9c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802a9c4:	2b00      	cmp	r3, #0
 802a9c6:	f340 816c 	ble.w	802aca2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34a>
 802a9ca:	2d00      	cmp	r5, #0
 802a9cc:	f340 80b6 	ble.w	802ab3c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e4>
 802a9d0:	1422      	asrs	r2, r4, #16
 802a9d2:	ea4f 4326 	mov.w	r3, r6, asr #16
 802a9d6:	d428      	bmi.n	802aa2a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 802a9d8:	1c51      	adds	r1, r2, #1
 802a9da:	4588      	cmp	r8, r1
 802a9dc:	dd27      	ble.n	802aa2e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd6>
 802a9de:	2b00      	cmp	r3, #0
 802a9e0:	db25      	blt.n	802aa2e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd6>
 802a9e2:	9808      	ldr	r0, [sp, #32]
 802a9e4:	1c59      	adds	r1, r3, #1
 802a9e6:	4288      	cmp	r0, r1
 802a9e8:	dd21      	ble.n	802aa2e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd6>
 802a9ea:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802a9ec:	1e6b      	subs	r3, r5, #1
 802a9ee:	fb02 4203 	mla	r2, r2, r3, r4
 802a9f2:	1412      	asrs	r2, r2, #16
 802a9f4:	d422      	bmi.n	802aa3c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 802a9f6:	3201      	adds	r2, #1
 802a9f8:	4590      	cmp	r8, r2
 802a9fa:	dd1f      	ble.n	802aa3c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 802a9fc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802a9fe:	fb02 6303 	mla	r3, r2, r3, r6
 802aa02:	141b      	asrs	r3, r3, #16
 802aa04:	d41a      	bmi.n	802aa3c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 802aa06:	9a08      	ldr	r2, [sp, #32]
 802aa08:	3301      	adds	r3, #1
 802aa0a:	429a      	cmp	r2, r3
 802aa0c:	dd16      	ble.n	802aa3c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 802aa0e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802aa12:	46a9      	mov	r9, r5
 802aa14:	f1b9 0f00 	cmp.w	r9, #0
 802aa18:	f300 80e4 	bgt.w	802abe4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28c>
 802aa1c:	9b07      	ldr	r3, [sp, #28]
 802aa1e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802aa22:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802aa26:	9307      	str	r3, [sp, #28]
 802aa28:	e08a      	b.n	802ab40 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e8>
 802aa2a:	1c51      	adds	r1, r2, #1
 802aa2c:	d17d      	bne.n	802ab2a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d2>
 802aa2e:	4542      	cmp	r2, r8
 802aa30:	da7b      	bge.n	802ab2a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d2>
 802aa32:	1c5a      	adds	r2, r3, #1
 802aa34:	db79      	blt.n	802ab2a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d2>
 802aa36:	9a08      	ldr	r2, [sp, #32]
 802aa38:	4293      	cmp	r3, r2
 802aa3a:	da76      	bge.n	802ab2a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d2>
 802aa3c:	f8dd 901c 	ldr.w	r9, [sp, #28]
 802aa40:	46aa      	mov	sl, r5
 802aa42:	f1ba 0f00 	cmp.w	sl, #0
 802aa46:	dde9      	ble.n	802aa1c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 802aa48:	1421      	asrs	r1, r4, #16
 802aa4a:	ea4f 4226 	mov.w	r2, r6, asr #16
 802aa4e:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802aa52:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802aa56:	f100 80b0 	bmi.w	802abba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 802aa5a:	f101 0c01 	add.w	ip, r1, #1
 802aa5e:	45e0      	cmp	r8, ip
 802aa60:	f340 80ad 	ble.w	802abbe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 802aa64:	2a00      	cmp	r2, #0
 802aa66:	f2c0 80aa 	blt.w	802abbe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 802aa6a:	9f08      	ldr	r7, [sp, #32]
 802aa6c:	f102 0c01 	add.w	ip, r2, #1
 802aa70:	4567      	cmp	r7, ip
 802aa72:	f340 80a4 	ble.w	802abbe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 802aa76:	fb02 1208 	mla	r2, r2, r8, r1
 802aa7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 802aa7c:	eb01 0e42 	add.w	lr, r1, r2, lsl #1
 802aa80:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 802aa84:	f8be 1002 	ldrh.w	r1, [lr, #2]
 802aa88:	b138      	cbz	r0, 802aa9a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 802aa8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802aa8c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802aa8e:	4472      	add	r2, lr
 802aa90:	f83e 7007 	ldrh.w	r7, [lr, r7]
 802aa94:	8852      	ldrh	r2, [r2, #2]
 802aa96:	970c      	str	r7, [sp, #48]	; 0x30
 802aa98:	920d      	str	r2, [sp, #52]	; 0x34
 802aa9a:	ea4f 4e0c 	mov.w	lr, ip, lsl #16
 802aa9e:	fb13 f200 	smulbb	r2, r3, r0
 802aaa2:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802aaa6:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802aaaa:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802aaae:	10d2      	asrs	r2, r2, #3
 802aab0:	ea4e 0c0c 	orr.w	ip, lr, ip
 802aab4:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802aab8:	f1c0 0e10 	rsb	lr, r0, #16
 802aabc:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802aac0:	ebae 0e03 	sub.w	lr, lr, r3
 802aac4:	ea4b 0101 	orr.w	r1, fp, r1
 802aac8:	ebc2 0343 	rsb	r3, r2, r3, lsl #1
 802aacc:	4359      	muls	r1, r3
 802aace:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802aad0:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 802aad4:	fb0e 1e0c 	mla	lr, lr, ip, r1
 802aad8:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802aadc:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802aae0:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802aae4:	ea4c 0c03 	orr.w	ip, ip, r3
 802aae8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802aaea:	990c      	ldr	r1, [sp, #48]	; 0x30
 802aaec:	041b      	lsls	r3, r3, #16
 802aaee:	fb02 ec0c 	mla	ip, r2, ip, lr
 802aaf2:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802aaf6:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 802aafa:	ea43 030e 	orr.w	r3, r3, lr
 802aafe:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 802ab02:	fb02 c203 	mla	r2, r2, r3, ip
 802ab06:	0d53      	lsrs	r3, r2, #21
 802ab08:	0952      	lsrs	r2, r2, #5
 802ab0a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802ab0e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802ab12:	431a      	orrs	r2, r3
 802ab14:	f8a9 2000 	strh.w	r2, [r9]
 802ab18:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802ab1a:	441c      	add	r4, r3
 802ab1c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802ab1e:	f109 0902 	add.w	r9, r9, #2
 802ab22:	441e      	add	r6, r3
 802ab24:	f10a 3aff 	add.w	sl, sl, #4294967295
 802ab28:	e78b      	b.n	802aa42 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 802ab2a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802ab2c:	441c      	add	r4, r3
 802ab2e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802ab30:	441e      	add	r6, r3
 802ab32:	9b07      	ldr	r3, [sp, #28]
 802ab34:	3302      	adds	r3, #2
 802ab36:	3d01      	subs	r5, #1
 802ab38:	9307      	str	r3, [sp, #28]
 802ab3a:	e746      	b.n	802a9ca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 802ab3c:	f47f af55 	bne.w	802a9ea <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 802ab40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802ab42:	2b00      	cmp	r3, #0
 802ab44:	f340 80ad 	ble.w	802aca2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34a>
 802ab48:	ee3a aa0c 	vadd.f32	s20, s20, s24
 802ab4c:	ee79 9aab 	vadd.f32	s19, s19, s23
 802ab50:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 802ab54:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802ab56:	ee39 9a0b 	vadd.f32	s18, s18, s22
 802ab5a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802ab5e:	eef0 6a48 	vmov.f32	s13, s16
 802ab62:	ee69 7a27 	vmul.f32	s15, s18, s15
 802ab66:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802ab6a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802ab6e:	ee16 4a90 	vmov	r4, s13
 802ab72:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802ab76:	eef0 6a68 	vmov.f32	s13, s17
 802ab7a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802ab7e:	ee18 2a10 	vmov	r2, s16
 802ab82:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802ab86:	fb92 f3f3 	sdiv	r3, r2, r3
 802ab8a:	ee18 2a90 	vmov	r2, s17
 802ab8e:	9329      	str	r3, [sp, #164]	; 0xa4
 802ab90:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802ab92:	fb92 f3f3 	sdiv	r3, r2, r3
 802ab96:	932a      	str	r3, [sp, #168]	; 0xa8
 802ab98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802ab9a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802ab9c:	3b01      	subs	r3, #1
 802ab9e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802aba2:	930b      	str	r3, [sp, #44]	; 0x2c
 802aba4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802aba6:	ee16 6a90 	vmov	r6, s13
 802abaa:	bf14      	ite	ne
 802abac:	461d      	movne	r5, r3
 802abae:	4615      	moveq	r5, r2
 802abb0:	eef0 8a67 	vmov.f32	s17, s15
 802abb4:	eeb0 8a47 	vmov.f32	s16, s14
 802abb8:	e700      	b.n	802a9bc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 802abba:	1c4f      	adds	r7, r1, #1
 802abbc:	d1ac      	bne.n	802ab18 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 802abbe:	4588      	cmp	r8, r1
 802abc0:	ddaa      	ble.n	802ab18 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 802abc2:	1c57      	adds	r7, r2, #1
 802abc4:	dba8      	blt.n	802ab18 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 802abc6:	9f08      	ldr	r7, [sp, #32]
 802abc8:	4297      	cmp	r7, r2
 802abca:	dda5      	ble.n	802ab18 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 802abcc:	e9cd 3003 	strd	r3, r0, [sp, #12]
 802abd0:	e9cd 1201 	strd	r1, r2, [sp, #4]
 802abd4:	9700      	str	r7, [sp, #0]
 802abd6:	4643      	mov	r3, r8
 802abd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802abda:	9811      	ldr	r0, [sp, #68]	; 0x44
 802abdc:	4649      	mov	r1, r9
 802abde:	f7ff fe2f 	bl	802a840 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 802abe2:	e799      	b.n	802ab18 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 802abe4:	1422      	asrs	r2, r4, #16
 802abe6:	1431      	asrs	r1, r6, #16
 802abe8:	fb08 2101 	mla	r1, r8, r1, r2
 802abec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802abee:	9809      	ldr	r0, [sp, #36]	; 0x24
 802abf0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 802abf4:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 802abf8:	f830 c011 	ldrh.w	ip, [r0, r1, lsl #1]
 802abfc:	8851      	ldrh	r1, [r2, #2]
 802abfe:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802ac02:	f1be 0f00 	cmp.w	lr, #0
 802ac06:	d006      	beq.n	802ac16 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 802ac08:	980a      	ldr	r0, [sp, #40]	; 0x28
 802ac0a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802ac0c:	1810      	adds	r0, r2, r0
 802ac0e:	5bd2      	ldrh	r2, [r2, r7]
 802ac10:	920e      	str	r2, [sp, #56]	; 0x38
 802ac12:	8842      	ldrh	r2, [r0, #2]
 802ac14:	920f      	str	r2, [sp, #60]	; 0x3c
 802ac16:	ea4f 400c 	mov.w	r0, ip, lsl #16
 802ac1a:	fb13 f20e 	smulbb	r2, r3, lr
 802ac1e:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802ac22:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802ac26:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802ac2a:	10d2      	asrs	r2, r2, #3
 802ac2c:	ea40 000c 	orr.w	r0, r0, ip
 802ac30:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802ac34:	f1ce 0c10 	rsb	ip, lr, #16
 802ac38:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802ac3c:	ebac 0c03 	sub.w	ip, ip, r3
 802ac40:	ea4a 0101 	orr.w	r1, sl, r1
 802ac44:	ebc2 0343 	rsb	r3, r2, r3, lsl #1
 802ac48:	4359      	muls	r1, r3
 802ac4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802ac4c:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 802ac50:	fb0c 1c00 	mla	ip, ip, r0, r1
 802ac54:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 802ac58:	f423 60fc 	bic.w	r0, r3, #2016	; 0x7e0
 802ac5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802ac5e:	990e      	ldr	r1, [sp, #56]	; 0x38
 802ac60:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802ac64:	041b      	lsls	r3, r3, #16
 802ac66:	ea4a 0000 	orr.w	r0, sl, r0
 802ac6a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802ac6e:	f421 6afc 	bic.w	sl, r1, #2016	; 0x7e0
 802ac72:	fb02 c000 	mla	r0, r2, r0, ip
 802ac76:	ea43 0a0a 	orr.w	sl, r3, sl
 802ac7a:	ebc2 024e 	rsb	r2, r2, lr, lsl #1
 802ac7e:	fb02 000a 	mla	r0, r2, sl, r0
 802ac82:	0d43      	lsrs	r3, r0, #21
 802ac84:	0940      	lsrs	r0, r0, #5
 802ac86:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802ac8a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802ac8e:	4318      	orrs	r0, r3
 802ac90:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802ac92:	f82b 0b02 	strh.w	r0, [fp], #2
 802ac96:	441c      	add	r4, r3
 802ac98:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802ac9a:	f109 39ff 	add.w	r9, r9, #4294967295
 802ac9e:	441e      	add	r6, r3
 802aca0:	e6b8      	b.n	802aa14 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xbc>
 802aca2:	b013      	add	sp, #76	; 0x4c
 802aca4:	ecbd 8b0a 	vpop	{d8-d12}
 802aca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802acac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 802acac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802acb0:	8808      	ldrh	r0, [r1, #0]
 802acb2:	b085      	sub	sp, #20
 802acb4:	1206      	asrs	r6, r0, #8
 802acb6:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 802acba:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 802acbe:	9600      	str	r6, [sp, #0]
 802acc0:	10c6      	asrs	r6, r0, #3
 802acc2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802acc6:	9601      	str	r6, [sp, #4]
 802acc8:	00c0      	lsls	r0, r0, #3
 802acca:	fb04 c603 	mla	r6, r4, r3, ip
 802acce:	b2c0      	uxtb	r0, r0
 802acd0:	4691      	mov	r9, r2
 802acd2:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 802acd6:	9a00      	ldr	r2, [sp, #0]
 802acd8:	9002      	str	r0, [sp, #8]
 802acda:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 802acde:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 802ace2:	9a01      	ldr	r2, [sp, #4]
 802ace4:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 802ace8:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 802acec:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 802acf0:	2c00      	cmp	r4, #0
 802acf2:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 802acf6:	db3a      	blt.n	802ad6e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc2>
 802acf8:	45a0      	cmp	r8, r4
 802acfa:	dd38      	ble.n	802ad6e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc2>
 802acfc:	f1bc 0f00 	cmp.w	ip, #0
 802ad00:	db33      	blt.n	802ad6a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xbe>
 802ad02:	4563      	cmp	r3, ip
 802ad04:	dd31      	ble.n	802ad6a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xbe>
 802ad06:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 802ad0a:	f11c 0601 	adds.w	r6, ip, #1
 802ad0e:	d431      	bmi.n	802ad74 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc8>
 802ad10:	42b3      	cmp	r3, r6
 802ad12:	dd2f      	ble.n	802ad74 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc8>
 802ad14:	b375      	cbz	r5, 802ad74 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc8>
 802ad16:	f8de 6004 	ldr.w	r6, [lr, #4]
 802ad1a:	3401      	adds	r4, #1
 802ad1c:	d42e      	bmi.n	802ad7c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd0>
 802ad1e:	45a0      	cmp	r8, r4
 802ad20:	dd2c      	ble.n	802ad7c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd0>
 802ad22:	b35f      	cbz	r7, 802ad7c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd0>
 802ad24:	f1bc 0f00 	cmp.w	ip, #0
 802ad28:	db26      	blt.n	802ad78 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xcc>
 802ad2a:	4563      	cmp	r3, ip
 802ad2c:	dd24      	ble.n	802ad78 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xcc>
 802ad2e:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 802ad32:	f11c 0c01 	adds.w	ip, ip, #1
 802ad36:	d405      	bmi.n	802ad44 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 802ad38:	4563      	cmp	r3, ip
 802ad3a:	dd03      	ble.n	802ad44 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 802ad3c:	b115      	cbz	r5, 802ad44 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 802ad3e:	3301      	adds	r3, #1
 802ad40:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 802ad44:	2d0f      	cmp	r5, #15
 802ad46:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802ad4a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802ad4e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802ad52:	ea4f 6810 	mov.w	r8, r0, lsr #24
 802ad56:	d801      	bhi.n	802ad5c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb0>
 802ad58:	2f0f      	cmp	r7, #15
 802ad5a:	d911      	bls.n	802ad80 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd4>
 802ad5c:	4b82      	ldr	r3, [pc, #520]	; (802af68 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2bc>)
 802ad5e:	4a83      	ldr	r2, [pc, #524]	; (802af6c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2c0>)
 802ad60:	4883      	ldr	r0, [pc, #524]	; (802af70 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2c4>)
 802ad62:	f240 210d 	movw	r1, #525	; 0x20d
 802ad66:	f003 fa7f 	bl	802e268 <__assert_func>
 802ad6a:	4602      	mov	r2, r0
 802ad6c:	e7cd      	b.n	802ad0a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 802ad6e:	4606      	mov	r6, r0
 802ad70:	4602      	mov	r2, r0
 802ad72:	e7d2      	b.n	802ad1a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x6e>
 802ad74:	4606      	mov	r6, r0
 802ad76:	e7d0      	b.n	802ad1a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x6e>
 802ad78:	4604      	mov	r4, r0
 802ad7a:	e7da      	b.n	802ad32 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x86>
 802ad7c:	4604      	mov	r4, r0
 802ad7e:	e7e1      	b.n	802ad44 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 802ad80:	b2ab      	uxth	r3, r5
 802ad82:	b2bf      	uxth	r7, r7
 802ad84:	fb03 fe07 	mul.w	lr, r3, r7
 802ad88:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 802ad8c:	011b      	lsls	r3, r3, #4
 802ad8e:	eba3 0c0e 	sub.w	ip, r3, lr
 802ad92:	b2bf      	uxth	r7, r7
 802ad94:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 802ad98:	fa1f fc8c 	uxth.w	ip, ip
 802ad9c:	1bed      	subs	r5, r5, r7
 802ad9e:	b2ad      	uxth	r5, r5
 802ada0:	fb0c f30a 	mul.w	r3, ip, sl
 802ada4:	fb05 330b 	mla	r3, r5, fp, r3
 802ada8:	fb07 3309 	mla	r3, r7, r9, r3
 802adac:	fb0e 3308 	mla	r3, lr, r8, r3
 802adb0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802adb4:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802adb8:	9303      	str	r3, [sp, #12]
 802adba:	d018      	beq.n	802adee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x142>
 802adbc:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 802adc0:	fb0b f303 	mul.w	r3, fp, r3
 802adc4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802adc8:	fb0b fb02 	mul.w	fp, fp, r2
 802adcc:	0a1a      	lsrs	r2, r3, #8
 802adce:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802add2:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 802add6:	441a      	add	r2, r3
 802add8:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 802addc:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 802ade0:	0a12      	lsrs	r2, r2, #8
 802ade2:	0a1b      	lsrs	r3, r3, #8
 802ade4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802ade8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802adec:	431a      	orrs	r2, r3
 802adee:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802adf2:	d019      	beq.n	802ae28 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x17c>
 802adf4:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 802adf8:	fb0a fb0b 	mul.w	fp, sl, fp
 802adfc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802ae00:	fb0a fa06 	mul.w	sl, sl, r6
 802ae04:	ea4f 261b 	mov.w	r6, fp, lsr #8
 802ae08:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802ae0c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802ae10:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 802ae14:	445e      	add	r6, fp
 802ae16:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 802ae1a:	0a36      	lsrs	r6, r6, #8
 802ae1c:	0a1b      	lsrs	r3, r3, #8
 802ae1e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802ae22:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802ae26:	431e      	orrs	r6, r3
 802ae28:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802ae2c:	d019      	beq.n	802ae62 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1b6>
 802ae2e:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 802ae32:	fb09 fa0a 	mul.w	sl, r9, sl
 802ae36:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802ae3a:	fb09 f904 	mul.w	r9, r9, r4
 802ae3e:	ea4f 241a 	mov.w	r4, sl, lsr #8
 802ae42:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802ae46:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802ae4a:	f509 7380 	add.w	r3, r9, #256	; 0x100
 802ae4e:	4454      	add	r4, sl
 802ae50:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 802ae54:	0a24      	lsrs	r4, r4, #8
 802ae56:	0a1b      	lsrs	r3, r3, #8
 802ae58:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802ae5c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802ae60:	431c      	orrs	r4, r3
 802ae62:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802ae66:	d019      	beq.n	802ae9c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1f0>
 802ae68:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 802ae6c:	fb08 f909 	mul.w	r9, r8, r9
 802ae70:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802ae74:	fb08 f800 	mul.w	r8, r8, r0
 802ae78:	ea4f 2019 	mov.w	r0, r9, lsr #8
 802ae7c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802ae80:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 802ae84:	f508 7380 	add.w	r3, r8, #256	; 0x100
 802ae88:	4448      	add	r0, r9
 802ae8a:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 802ae8e:	0a00      	lsrs	r0, r0, #8
 802ae90:	0a1b      	lsrs	r3, r3, #8
 802ae92:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802ae96:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802ae9a:	4318      	orrs	r0, r3
 802ae9c:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 802aea0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802aea4:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 802aea8:	fb0c f808 	mul.w	r8, ip, r8
 802aeac:	fb0c f606 	mul.w	r6, ip, r6
 802aeb0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802aeb4:	fb05 6202 	mla	r2, r5, r2, r6
 802aeb8:	fb05 8803 	mla	r8, r5, r3, r8
 802aebc:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 802aec0:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802aec4:	fb07 8803 	mla	r8, r7, r3, r8
 802aec8:	fb07 2704 	mla	r7, r7, r4, r2
 802aecc:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 802aed0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802aed4:	fb0e 8303 	mla	r3, lr, r3, r8
 802aed8:	fb0e 7e00 	mla	lr, lr, r0, r7
 802aedc:	0a1b      	lsrs	r3, r3, #8
 802aede:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802aee2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802aee6:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 802aeea:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802aeee:	ea43 0e0e 	orr.w	lr, r3, lr
 802aef2:	9b03      	ldr	r3, [sp, #12]
 802aef4:	b2a4      	uxth	r4, r4
 802aef6:	4363      	muls	r3, r4
 802aef8:	1c5a      	adds	r2, r3, #1
 802aefa:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802aefe:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 802af02:	9b00      	ldr	r3, [sp, #0]
 802af04:	b2d2      	uxtb	r2, r2
 802af06:	ea4f 451e 	mov.w	r5, lr, lsr #16
 802af0a:	fb13 f302 	smulbb	r3, r3, r2
 802af0e:	fb05 3304 	mla	r3, r5, r4, r3
 802af12:	b29d      	uxth	r5, r3
 802af14:	9b01      	ldr	r3, [sp, #4]
 802af16:	f3ce 2007 	ubfx	r0, lr, #8, #8
 802af1a:	fb13 f302 	smulbb	r3, r3, r2
 802af1e:	fb00 3004 	mla	r0, r0, r4, r3
 802af22:	9b02      	ldr	r3, [sp, #8]
 802af24:	fa5f fe8e 	uxtb.w	lr, lr
 802af28:	fb13 f202 	smulbb	r2, r3, r2
 802af2c:	fb0e 2e04 	mla	lr, lr, r4, r2
 802af30:	fa1f fe8e 	uxth.w	lr, lr
 802af34:	b280      	uxth	r0, r0
 802af36:	f10e 0201 	add.w	r2, lr, #1
 802af3a:	1c6b      	adds	r3, r5, #1
 802af3c:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 802af40:	1c42      	adds	r2, r0, #1
 802af42:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 802af46:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802af4a:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 802af4e:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 802af52:	0952      	lsrs	r2, r2, #5
 802af54:	ea43 030e 	orr.w	r3, r3, lr
 802af58:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802af5c:	4313      	orrs	r3, r2
 802af5e:	800b      	strh	r3, [r1, #0]
 802af60:	b005      	add	sp, #20
 802af62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802af66:	bf00      	nop
 802af68:	08034370 	.word	0x08034370
 802af6c:	080348c9 	.word	0x080348c9
 802af70:	080343f8 	.word	0x080343f8

0802af74 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802af74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802af78:	ed2d 8b08 	vpush	{d8-d11}
 802af7c:	b099      	sub	sp, #100	; 0x64
 802af7e:	eeb0 aa40 	vmov.f32	s20, s0
 802af82:	9306      	str	r3, [sp, #24]
 802af84:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 802af88:	9307      	str	r3, [sp, #28]
 802af8a:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 802af8e:	9216      	str	r2, [sp, #88]	; 0x58
 802af90:	9310      	str	r3, [sp, #64]	; 0x40
 802af92:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 802af94:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 802af98:	9113      	str	r1, [sp, #76]	; 0x4c
 802af9a:	9315      	str	r3, [sp, #84]	; 0x54
 802af9c:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 802afa0:	9017      	str	r0, [sp, #92]	; 0x5c
 802afa2:	6850      	ldr	r0, [r2, #4]
 802afa4:	6812      	ldr	r2, [r2, #0]
 802afa6:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 802afa8:	fb00 1303 	mla	r3, r0, r3, r1
 802afac:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802afb0:	930a      	str	r3, [sp, #40]	; 0x28
 802afb2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802afb4:	681b      	ldr	r3, [r3, #0]
 802afb6:	9312      	str	r3, [sp, #72]	; 0x48
 802afb8:	9b07      	ldr	r3, [sp, #28]
 802afba:	009b      	lsls	r3, r3, #2
 802afbc:	eef0 9a60 	vmov.f32	s19, s1
 802afc0:	eeb0 9a41 	vmov.f32	s18, s2
 802afc4:	eeb0 8a62 	vmov.f32	s16, s5
 802afc8:	eef0 8a43 	vmov.f32	s17, s6
 802afcc:	eef0 ba44 	vmov.f32	s23, s8
 802afd0:	eeb0 ba64 	vmov.f32	s22, s9
 802afd4:	eef0 aa45 	vmov.f32	s21, s10
 802afd8:	930e      	str	r3, [sp, #56]	; 0x38
 802afda:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802afdc:	2b00      	cmp	r3, #0
 802afde:	dc03      	bgt.n	802afe8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 802afe0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802afe2:	2b00      	cmp	r3, #0
 802afe4:	f340 8352 	ble.w	802b68c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x718>
 802afe8:	9b06      	ldr	r3, [sp, #24]
 802afea:	2b00      	cmp	r3, #0
 802afec:	f340 81a8 	ble.w	802b340 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3cc>
 802aff0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802aff2:	1412      	asrs	r2, r2, #16
 802aff4:	ea4f 4324 	mov.w	r3, r4, asr #16
 802aff8:	d430      	bmi.n	802b05c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 802affa:	9807      	ldr	r0, [sp, #28]
 802affc:	1c51      	adds	r1, r2, #1
 802affe:	4288      	cmp	r0, r1
 802b000:	dd2f      	ble.n	802b062 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 802b002:	2b00      	cmp	r3, #0
 802b004:	db2d      	blt.n	802b062 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 802b006:	9810      	ldr	r0, [sp, #64]	; 0x40
 802b008:	1c59      	adds	r1, r3, #1
 802b00a:	4288      	cmp	r0, r1
 802b00c:	dd29      	ble.n	802b062 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 802b00e:	9b06      	ldr	r3, [sp, #24]
 802b010:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802b012:	992b      	ldr	r1, [sp, #172]	; 0xac
 802b014:	3b01      	subs	r3, #1
 802b016:	fb02 1203 	mla	r2, r2, r3, r1
 802b01a:	1412      	asrs	r2, r2, #16
 802b01c:	d42c      	bmi.n	802b078 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 802b01e:	9907      	ldr	r1, [sp, #28]
 802b020:	3201      	adds	r2, #1
 802b022:	4291      	cmp	r1, r2
 802b024:	dd28      	ble.n	802b078 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 802b026:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 802b028:	fb02 4303 	mla	r3, r2, r3, r4
 802b02c:	141b      	asrs	r3, r3, #16
 802b02e:	d423      	bmi.n	802b078 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 802b030:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802b032:	3301      	adds	r3, #1
 802b034:	429a      	cmp	r2, r3
 802b036:	dd1f      	ble.n	802b078 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 802b038:	9b06      	ldr	r3, [sp, #24]
 802b03a:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 802b03e:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 802b042:	9311      	str	r3, [sp, #68]	; 0x44
 802b044:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802b046:	2b00      	cmp	r3, #0
 802b048:	f300 81e3 	bgt.w	802b412 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x49e>
 802b04c:	9b06      	ldr	r3, [sp, #24]
 802b04e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802b052:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802b054:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802b058:	930a      	str	r3, [sp, #40]	; 0x28
 802b05a:	e173      	b.n	802b344 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 802b05c:	1c51      	adds	r1, r2, #1
 802b05e:	f040 8162 	bne.w	802b326 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b2>
 802b062:	9907      	ldr	r1, [sp, #28]
 802b064:	428a      	cmp	r2, r1
 802b066:	f280 815e 	bge.w	802b326 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b2>
 802b06a:	1c5f      	adds	r7, r3, #1
 802b06c:	f2c0 815b 	blt.w	802b326 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b2>
 802b070:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802b072:	4293      	cmp	r3, r2
 802b074:	f280 8157 	bge.w	802b326 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b2>
 802b078:	9b06      	ldr	r3, [sp, #24]
 802b07a:	9314      	str	r3, [sp, #80]	; 0x50
 802b07c:	f8bd 7054 	ldrh.w	r7, [sp, #84]	; 0x54
 802b080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802b082:	9311      	str	r3, [sp, #68]	; 0x44
 802b084:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802b086:	2b00      	cmp	r3, #0
 802b088:	dde0      	ble.n	802b04c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 802b08a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802b08c:	f3c2 3003 	ubfx	r0, r2, #12, #4
 802b090:	1412      	asrs	r2, r2, #16
 802b092:	ea4f 4324 	mov.w	r3, r4, asr #16
 802b096:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802b09a:	f100 81a1 	bmi.w	802b3e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46c>
 802b09e:	9e07      	ldr	r6, [sp, #28]
 802b0a0:	1c55      	adds	r5, r2, #1
 802b0a2:	42ae      	cmp	r6, r5
 802b0a4:	f340 819e 	ble.w	802b3e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x470>
 802b0a8:	2b00      	cmp	r3, #0
 802b0aa:	f2c0 819b 	blt.w	802b3e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x470>
 802b0ae:	9e10      	ldr	r6, [sp, #64]	; 0x40
 802b0b0:	1c5d      	adds	r5, r3, #1
 802b0b2:	42ae      	cmp	r6, r5
 802b0b4:	f340 8196 	ble.w	802b3e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x470>
 802b0b8:	9d07      	ldr	r5, [sp, #28]
 802b0ba:	fb03 2305 	mla	r3, r3, r5, r2
 802b0be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802b0c0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 802b0c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802b0c8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802b0cc:	2800      	cmp	r0, #0
 802b0ce:	f000 8178 	beq.w	802b3c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44e>
 802b0d2:	686a      	ldr	r2, [r5, #4]
 802b0d4:	920b      	str	r2, [sp, #44]	; 0x2c
 802b0d6:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802b0da:	2900      	cmp	r1, #0
 802b0dc:	f000 817a 	beq.w	802b3d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 802b0e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802b0e2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 802b0e4:	18aa      	adds	r2, r5, r2
 802b0e6:	59ad      	ldr	r5, [r5, r6]
 802b0e8:	6852      	ldr	r2, [r2, #4]
 802b0ea:	9508      	str	r5, [sp, #32]
 802b0ec:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 802b0f0:	920c      	str	r2, [sp, #48]	; 0x30
 802b0f2:	0e15      	lsrs	r5, r2, #24
 802b0f4:	b280      	uxth	r0, r0
 802b0f6:	b289      	uxth	r1, r1
 802b0f8:	fb00 fb01 	mul.w	fp, r0, r1
 802b0fc:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 802b100:	0100      	lsls	r0, r0, #4
 802b102:	eba0 090b 	sub.w	r9, r0, fp
 802b106:	b289      	uxth	r1, r1
 802b108:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 802b10c:	fa1f f989 	uxth.w	r9, r9
 802b110:	1a52      	subs	r2, r2, r1
 802b112:	b292      	uxth	r2, r2
 802b114:	fb09 f008 	mul.w	r0, r9, r8
 802b118:	fb02 000c 	mla	r0, r2, ip, r0
 802b11c:	fb01 000a 	mla	r0, r1, sl, r0
 802b120:	fb0b 0005 	mla	r0, fp, r5, r0
 802b124:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802b128:	2800      	cmp	r0, #0
 802b12a:	f000 80ef 	beq.w	802b30c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 802b12e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802b132:	d01b      	beq.n	802b16c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f8>
 802b134:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 802b138:	fb0c fe0e 	mul.w	lr, ip, lr
 802b13c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802b140:	fb0c fc03 	mul.w	ip, ip, r3
 802b144:	ea4f 231e 	mov.w	r3, lr, lsr #8
 802b148:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802b14c:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802b150:	4473      	add	r3, lr
 802b152:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 802b156:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 802b15a:	0a1b      	lsrs	r3, r3, #8
 802b15c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802b160:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802b164:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802b168:	ea43 030e 	orr.w	r3, r3, lr
 802b16c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802b170:	d01e      	beq.n	802b1b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 802b172:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 802b174:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 802b178:	fb08 fc0c 	mul.w	ip, r8, ip
 802b17c:	f406 4e7f 	and.w	lr, r6, #65280	; 0xff00
 802b180:	fb08 f80e 	mul.w	r8, r8, lr
 802b184:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802b188:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802b18c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802b190:	44e6      	add	lr, ip
 802b192:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 802b196:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 802b19a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802b19e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802b1a2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802b1a6:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802b1aa:	ea4e 0608 	orr.w	r6, lr, r8
 802b1ae:	960b      	str	r6, [sp, #44]	; 0x2c
 802b1b0:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802b1b4:	d01e      	beq.n	802b1f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 802b1b6:	9e08      	ldr	r6, [sp, #32]
 802b1b8:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 802b1bc:	fb0a f808 	mul.w	r8, sl, r8
 802b1c0:	f406 4c7f 	and.w	ip, r6, #65280	; 0xff00
 802b1c4:	fb0a fa0c 	mul.w	sl, sl, ip
 802b1c8:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 802b1cc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802b1d0:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 802b1d4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802b1d8:	44c6      	add	lr, r8
 802b1da:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802b1de:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802b1e2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802b1e6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802b1ea:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802b1ee:	ea4e 060a 	orr.w	r6, lr, sl
 802b1f2:	9608      	str	r6, [sp, #32]
 802b1f4:	2dff      	cmp	r5, #255	; 0xff
 802b1f6:	d01d      	beq.n	802b234 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c0>
 802b1f8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802b1fa:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 802b1fe:	fb05 f808 	mul.w	r8, r5, r8
 802b202:	f406 4c7f 	and.w	ip, r6, #65280	; 0xff00
 802b206:	fb05 f50c 	mul.w	r5, r5, ip
 802b20a:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 802b20e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802b212:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 802b216:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 802b21a:	44c6      	add	lr, r8
 802b21c:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802b220:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802b224:	0a2d      	lsrs	r5, r5, #8
 802b226:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802b22a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802b22e:	ea4e 0505 	orr.w	r5, lr, r5
 802b232:	950c      	str	r5, [sp, #48]	; 0x30
 802b234:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802b236:	9e08      	ldr	r6, [sp, #32]
 802b238:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802b23c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802b240:	fb09 f505 	mul.w	r5, r9, r5
 802b244:	fb02 550c 	mla	r5, r2, ip, r5
 802b248:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 802b24c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802b24e:	fb01 550c 	mla	r5, r1, ip, r5
 802b252:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 802b256:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 802b258:	fb0b 550c 	mla	r5, fp, ip, r5
 802b25c:	f406 4c7f 	and.w	ip, r6, #65280	; 0xff00
 802b260:	fb09 f90c 	mul.w	r9, r9, ip
 802b264:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802b268:	fb02 9303 	mla	r3, r2, r3, r9
 802b26c:	9a08      	ldr	r2, [sp, #32]
 802b26e:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 802b272:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802b274:	fb01 330e 	mla	r3, r1, lr, r3
 802b278:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 802b27c:	fb0b 3b01 	mla	fp, fp, r1, r3
 802b280:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802b282:	0a2d      	lsrs	r5, r5, #8
 802b284:	f8b3 c000 	ldrh.w	ip, [r3]
 802b288:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802b28c:	fb00 f307 	mul.w	r3, r0, r7
 802b290:	1c58      	adds	r0, r3, #1
 802b292:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802b296:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 802b29a:	ea45 050b 	orr.w	r5, r5, fp
 802b29e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802b2a2:	0c29      	lsrs	r1, r5, #16
 802b2a4:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802b2a8:	ea4f 232c 	mov.w	r3, ip, asr #8
 802b2ac:	b2c0      	uxtb	r0, r0
 802b2ae:	fb11 f107 	smulbb	r1, r1, r7
 802b2b2:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 802b2b6:	fb03 1300 	mla	r3, r3, r0, r1
 802b2ba:	b299      	uxth	r1, r3
 802b2bc:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802b2c0:	f3c5 2307 	ubfx	r3, r5, #8, #8
 802b2c4:	fb13 f307 	smulbb	r3, r3, r7
 802b2c8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802b2cc:	fb02 3200 	mla	r2, r2, r0, r3
 802b2d0:	b2ed      	uxtb	r5, r5
 802b2d2:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 802b2d6:	b2db      	uxtb	r3, r3
 802b2d8:	fb15 f507 	smulbb	r5, r5, r7
 802b2dc:	fb03 5500 	mla	r5, r3, r0, r5
 802b2e0:	b292      	uxth	r2, r2
 802b2e2:	b2ad      	uxth	r5, r5
 802b2e4:	1c4b      	adds	r3, r1, #1
 802b2e6:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802b2ea:	1c68      	adds	r0, r5, #1
 802b2ec:	1c51      	adds	r1, r2, #1
 802b2ee:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 802b2f2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802b2f6:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 802b2fa:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 802b2fe:	0952      	lsrs	r2, r2, #5
 802b300:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802b304:	432b      	orrs	r3, r5
 802b306:	4313      	orrs	r3, r2
 802b308:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802b30a:	8013      	strh	r3, [r2, #0]
 802b30c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802b30e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802b310:	3302      	adds	r3, #2
 802b312:	9311      	str	r3, [sp, #68]	; 0x44
 802b314:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802b316:	4413      	add	r3, r2
 802b318:	932b      	str	r3, [sp, #172]	; 0xac
 802b31a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802b31c:	441c      	add	r4, r3
 802b31e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802b320:	3b01      	subs	r3, #1
 802b322:	9314      	str	r3, [sp, #80]	; 0x50
 802b324:	e6ae      	b.n	802b084 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 802b326:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802b328:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802b32a:	4413      	add	r3, r2
 802b32c:	932b      	str	r3, [sp, #172]	; 0xac
 802b32e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802b330:	441c      	add	r4, r3
 802b332:	9b06      	ldr	r3, [sp, #24]
 802b334:	3b01      	subs	r3, #1
 802b336:	9306      	str	r3, [sp, #24]
 802b338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802b33a:	3302      	adds	r3, #2
 802b33c:	930a      	str	r3, [sp, #40]	; 0x28
 802b33e:	e653      	b.n	802afe8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 802b340:	f47f ae65 	bne.w	802b00e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 802b344:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802b346:	2b00      	cmp	r3, #0
 802b348:	f340 81a0 	ble.w	802b68c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x718>
 802b34c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802b350:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802b354:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802b358:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802b35a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802b35e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802b362:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802b366:	eef0 6a48 	vmov.f32	s13, s16
 802b36a:	ee69 7a27 	vmul.f32	s15, s18, s15
 802b36e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802b372:	ee37 8a48 	vsub.f32	s16, s14, s16
 802b376:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 802b37a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802b37e:	eef0 6a68 	vmov.f32	s13, s17
 802b382:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802b386:	ee18 2a10 	vmov	r2, s16
 802b38a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802b38e:	fb92 f3f3 	sdiv	r3, r2, r3
 802b392:	ee18 2a90 	vmov	r2, s17
 802b396:	932d      	str	r3, [sp, #180]	; 0xb4
 802b398:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802b39a:	fb92 f3f3 	sdiv	r3, r2, r3
 802b39e:	932e      	str	r3, [sp, #184]	; 0xb8
 802b3a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802b3a2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802b3a4:	3b01      	subs	r3, #1
 802b3a6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802b3aa:	9313      	str	r3, [sp, #76]	; 0x4c
 802b3ac:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802b3ae:	bf08      	it	eq
 802b3b0:	4613      	moveq	r3, r2
 802b3b2:	ee16 4a90 	vmov	r4, s13
 802b3b6:	9306      	str	r3, [sp, #24]
 802b3b8:	eef0 8a67 	vmov.f32	s17, s15
 802b3bc:	eeb0 8a47 	vmov.f32	s16, s14
 802b3c0:	e60b      	b.n	802afda <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 802b3c2:	b151      	cbz	r1, 802b3da <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 802b3c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802b3c6:	58aa      	ldr	r2, [r5, r2]
 802b3c8:	9208      	str	r2, [sp, #32]
 802b3ca:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 802b3ce:	25ff      	movs	r5, #255	; 0xff
 802b3d0:	46a8      	mov	r8, r5
 802b3d2:	e68f      	b.n	802b0f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x180>
 802b3d4:	25ff      	movs	r5, #255	; 0xff
 802b3d6:	46aa      	mov	sl, r5
 802b3d8:	e68c      	b.n	802b0f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x180>
 802b3da:	25ff      	movs	r5, #255	; 0xff
 802b3dc:	46aa      	mov	sl, r5
 802b3de:	e7f7      	b.n	802b3d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 802b3e0:	1c56      	adds	r6, r2, #1
 802b3e2:	d193      	bne.n	802b30c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 802b3e4:	9d07      	ldr	r5, [sp, #28]
 802b3e6:	4295      	cmp	r5, r2
 802b3e8:	dd90      	ble.n	802b30c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 802b3ea:	1c5d      	adds	r5, r3, #1
 802b3ec:	db8e      	blt.n	802b30c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 802b3ee:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802b3f0:	429d      	cmp	r5, r3
 802b3f2:	dd8b      	ble.n	802b30c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 802b3f4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802b3f6:	9201      	str	r2, [sp, #4]
 802b3f8:	e9cd 3002 	strd	r3, r0, [sp, #8]
 802b3fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802b3fe:	9300      	str	r3, [sp, #0]
 802b400:	e9cd 1504 	strd	r1, r5, [sp, #16]
 802b404:	9b07      	ldr	r3, [sp, #28]
 802b406:	9817      	ldr	r0, [sp, #92]	; 0x5c
 802b408:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
 802b40c:	f7ff fc4e 	bl	802acac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 802b410:	e77c      	b.n	802b30c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 802b412:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802b414:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802b416:	9d07      	ldr	r5, [sp, #28]
 802b418:	1412      	asrs	r2, r2, #16
 802b41a:	f3c3 3103 	ubfx	r1, r3, #12, #4
 802b41e:	1423      	asrs	r3, r4, #16
 802b420:	fb05 2303 	mla	r3, r5, r3, r2
 802b424:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802b426:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 802b42a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802b42e:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802b432:	0e1e      	lsrs	r6, r3, #24
 802b434:	2900      	cmp	r1, #0
 802b436:	f000 811a 	beq.w	802b66e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6fa>
 802b43a:	686a      	ldr	r2, [r5, #4]
 802b43c:	920d      	str	r2, [sp, #52]	; 0x34
 802b43e:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 802b442:	2800      	cmp	r0, #0
 802b444:	f000 811c 	beq.w	802b680 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70c>
 802b448:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802b44a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 802b44c:	18aa      	adds	r2, r5, r2
 802b44e:	59ed      	ldr	r5, [r5, r7]
 802b450:	6852      	ldr	r2, [r2, #4]
 802b452:	9509      	str	r5, [sp, #36]	; 0x24
 802b454:	ea4f 6815 	mov.w	r8, r5, lsr #24
 802b458:	920f      	str	r2, [sp, #60]	; 0x3c
 802b45a:	0e15      	lsrs	r5, r2, #24
 802b45c:	b289      	uxth	r1, r1
 802b45e:	b280      	uxth	r0, r0
 802b460:	fb01 f900 	mul.w	r9, r1, r0
 802b464:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802b468:	0109      	lsls	r1, r1, #4
 802b46a:	eba1 0e09 	sub.w	lr, r1, r9
 802b46e:	b280      	uxth	r0, r0
 802b470:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 802b474:	fa1f fe8e 	uxth.w	lr, lr
 802b478:	1a12      	subs	r2, r2, r0
 802b47a:	b292      	uxth	r2, r2
 802b47c:	fb0e f10c 	mul.w	r1, lr, ip
 802b480:	fb02 1106 	mla	r1, r2, r6, r1
 802b484:	fb00 1108 	mla	r1, r0, r8, r1
 802b488:	fb09 1105 	mla	r1, r9, r5, r1
 802b48c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802b490:	2900      	cmp	r1, #0
 802b492:	f000 80e0 	beq.w	802b656 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e2>
 802b496:	2eff      	cmp	r6, #255	; 0xff
 802b498:	d016      	beq.n	802b4c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x554>
 802b49a:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 802b49e:	4377      	muls	r7, r6
 802b4a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802b4a4:	435e      	muls	r6, r3
 802b4a6:	0a3b      	lsrs	r3, r7, #8
 802b4a8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802b4ac:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802b4b0:	443b      	add	r3, r7
 802b4b2:	f506 7780 	add.w	r7, r6, #256	; 0x100
 802b4b6:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 802b4ba:	0a1b      	lsrs	r3, r3, #8
 802b4bc:	0a3f      	lsrs	r7, r7, #8
 802b4be:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802b4c2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802b4c6:	433b      	orrs	r3, r7
 802b4c8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802b4cc:	d01d      	beq.n	802b50a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x596>
 802b4ce:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 802b4d0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802b4d2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802b4d6:	fb0c f606 	mul.w	r6, ip, r6
 802b4da:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802b4de:	fb0c fc07 	mul.w	ip, ip, r7
 802b4e2:	0a37      	lsrs	r7, r6, #8
 802b4e4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802b4e8:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 802b4ec:	4437      	add	r7, r6
 802b4ee:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 802b4f2:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 802b4f6:	0a3f      	lsrs	r7, r7, #8
 802b4f8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802b4fc:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802b500:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802b504:	ea47 060c 	orr.w	r6, r7, ip
 802b508:	960d      	str	r6, [sp, #52]	; 0x34
 802b50a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802b50e:	d01d      	beq.n	802b54c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5d8>
 802b510:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802b512:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 802b516:	fb08 fc0c 	mul.w	ip, r8, ip
 802b51a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802b51e:	fb08 f806 	mul.w	r8, r8, r6
 802b522:	ea4f 271c 	mov.w	r7, ip, lsr #8
 802b526:	f508 7680 	add.w	r6, r8, #256	; 0x100
 802b52a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802b52e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802b532:	eb06 2818 	add.w	r8, r6, r8, lsr #8
 802b536:	4467      	add	r7, ip
 802b538:	0a3f      	lsrs	r7, r7, #8
 802b53a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802b53e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802b542:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802b546:	ea47 0608 	orr.w	r6, r7, r8
 802b54a:	9609      	str	r6, [sp, #36]	; 0x24
 802b54c:	2dff      	cmp	r5, #255	; 0xff
 802b54e:	d01a      	beq.n	802b586 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x612>
 802b550:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 802b552:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 802b556:	fb05 fc0c 	mul.w	ip, r5, ip
 802b55a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802b55e:	4375      	muls	r5, r6
 802b560:	ea4f 271c 	mov.w	r7, ip, lsr #8
 802b564:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802b568:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802b56c:	f505 7680 	add.w	r6, r5, #256	; 0x100
 802b570:	4467      	add	r7, ip
 802b572:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 802b576:	0a3f      	lsrs	r7, r7, #8
 802b578:	0a2d      	lsrs	r5, r5, #8
 802b57a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802b57e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802b582:	433d      	orrs	r5, r7
 802b584:	950f      	str	r5, [sp, #60]	; 0x3c
 802b586:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802b588:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802b58c:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 802b590:	fb0e f505 	mul.w	r5, lr, r5
 802b594:	fb02 5506 	mla	r5, r2, r6, r5
 802b598:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802b59a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802b59e:	fb00 5506 	mla	r5, r0, r6, r5
 802b5a2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 802b5a4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802b5a8:	fb09 5506 	mla	r5, r9, r6, r5
 802b5ac:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 802b5ae:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802b5b2:	fb0e fe06 	mul.w	lr, lr, r6
 802b5b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802b5ba:	fb02 e303 	mla	r3, r2, r3, lr
 802b5be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802b5c0:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 802b5c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802b5c6:	fb00 3307 	mla	r3, r0, r7, r3
 802b5ca:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 802b5ce:	fb09 3c0c 	mla	ip, r9, ip, r3
 802b5d2:	fb01 f10b 	mul.w	r1, r1, fp
 802b5d6:	0a2d      	lsrs	r5, r5, #8
 802b5d8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802b5dc:	f8ba 0000 	ldrh.w	r0, [sl]
 802b5e0:	1c4b      	adds	r3, r1, #1
 802b5e2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802b5e6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802b5ea:	ea45 050c 	orr.w	r5, r5, ip
 802b5ee:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802b5f2:	1202      	asrs	r2, r0, #8
 802b5f4:	0c2b      	lsrs	r3, r5, #16
 802b5f6:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802b5fa:	b2c9      	uxtb	r1, r1
 802b5fc:	fb13 f30b 	smulbb	r3, r3, fp
 802b600:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802b604:	fb02 3201 	mla	r2, r2, r1, r3
 802b608:	f3c5 2607 	ubfx	r6, r5, #8, #8
 802b60c:	10c3      	asrs	r3, r0, #3
 802b60e:	b2ed      	uxtb	r5, r5
 802b610:	00c0      	lsls	r0, r0, #3
 802b612:	b2c0      	uxtb	r0, r0
 802b614:	fb15 f50b 	smulbb	r5, r5, fp
 802b618:	fb00 5001 	mla	r0, r0, r1, r5
 802b61c:	b292      	uxth	r2, r2
 802b61e:	fb16 f60b 	smulbb	r6, r6, fp
 802b622:	b280      	uxth	r0, r0
 802b624:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802b628:	fb03 6301 	mla	r3, r3, r1, r6
 802b62c:	1c51      	adds	r1, r2, #1
 802b62e:	1c46      	adds	r6, r0, #1
 802b630:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802b634:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 802b638:	b29b      	uxth	r3, r3
 802b63a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 802b63e:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 802b642:	4332      	orrs	r2, r6
 802b644:	1c5e      	adds	r6, r3, #1
 802b646:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 802b64a:	095b      	lsrs	r3, r3, #5
 802b64c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802b650:	431a      	orrs	r2, r3
 802b652:	f8aa 2000 	strh.w	r2, [sl]
 802b656:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802b658:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802b65a:	4413      	add	r3, r2
 802b65c:	932b      	str	r3, [sp, #172]	; 0xac
 802b65e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802b660:	441c      	add	r4, r3
 802b662:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802b664:	3b01      	subs	r3, #1
 802b666:	f10a 0a02 	add.w	sl, sl, #2
 802b66a:	9311      	str	r3, [sp, #68]	; 0x44
 802b66c:	e4ea      	b.n	802b044 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 802b66e:	b150      	cbz	r0, 802b686 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x712>
 802b670:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802b672:	58aa      	ldr	r2, [r5, r2]
 802b674:	9209      	str	r2, [sp, #36]	; 0x24
 802b676:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802b67a:	25ff      	movs	r5, #255	; 0xff
 802b67c:	46ac      	mov	ip, r5
 802b67e:	e6ed      	b.n	802b45c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e8>
 802b680:	25ff      	movs	r5, #255	; 0xff
 802b682:	46a8      	mov	r8, r5
 802b684:	e6ea      	b.n	802b45c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e8>
 802b686:	25ff      	movs	r5, #255	; 0xff
 802b688:	46a8      	mov	r8, r5
 802b68a:	e7f7      	b.n	802b67c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x708>
 802b68c:	b019      	add	sp, #100	; 0x64
 802b68e:	ecbd 8b08 	vpop	{d8-d11}
 802b692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802b698 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 802b698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b69c:	8808      	ldrh	r0, [r1, #0]
 802b69e:	b085      	sub	sp, #20
 802b6a0:	1206      	asrs	r6, r0, #8
 802b6a2:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 802b6a6:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 802b6aa:	9600      	str	r6, [sp, #0]
 802b6ac:	10c6      	asrs	r6, r0, #3
 802b6ae:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802b6b2:	9601      	str	r6, [sp, #4]
 802b6b4:	00c0      	lsls	r0, r0, #3
 802b6b6:	fb04 c603 	mla	r6, r4, r3, ip
 802b6ba:	b2c0      	uxtb	r0, r0
 802b6bc:	4691      	mov	r9, r2
 802b6be:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 802b6c2:	9a00      	ldr	r2, [sp, #0]
 802b6c4:	9002      	str	r0, [sp, #8]
 802b6c6:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 802b6ca:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 802b6ce:	9a01      	ldr	r2, [sp, #4]
 802b6d0:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 802b6d4:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 802b6d8:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 802b6dc:	2c00      	cmp	r4, #0
 802b6de:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 802b6e2:	db3a      	blt.n	802b75a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc2>
 802b6e4:	45a0      	cmp	r8, r4
 802b6e6:	dd38      	ble.n	802b75a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc2>
 802b6e8:	f1bc 0f00 	cmp.w	ip, #0
 802b6ec:	db33      	blt.n	802b756 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xbe>
 802b6ee:	4563      	cmp	r3, ip
 802b6f0:	dd31      	ble.n	802b756 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xbe>
 802b6f2:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 802b6f6:	f11c 0601 	adds.w	r6, ip, #1
 802b6fa:	d431      	bmi.n	802b760 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc8>
 802b6fc:	42b3      	cmp	r3, r6
 802b6fe:	dd2f      	ble.n	802b760 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc8>
 802b700:	b375      	cbz	r5, 802b760 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc8>
 802b702:	f8de 6004 	ldr.w	r6, [lr, #4]
 802b706:	3401      	adds	r4, #1
 802b708:	d42e      	bmi.n	802b768 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd0>
 802b70a:	45a0      	cmp	r8, r4
 802b70c:	dd2c      	ble.n	802b768 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd0>
 802b70e:	b35f      	cbz	r7, 802b768 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd0>
 802b710:	f1bc 0f00 	cmp.w	ip, #0
 802b714:	db26      	blt.n	802b764 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xcc>
 802b716:	4563      	cmp	r3, ip
 802b718:	dd24      	ble.n	802b764 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xcc>
 802b71a:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 802b71e:	f11c 0c01 	adds.w	ip, ip, #1
 802b722:	d405      	bmi.n	802b730 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x98>
 802b724:	4563      	cmp	r3, ip
 802b726:	dd03      	ble.n	802b730 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x98>
 802b728:	b115      	cbz	r5, 802b730 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x98>
 802b72a:	3301      	adds	r3, #1
 802b72c:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 802b730:	2d0f      	cmp	r5, #15
 802b732:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802b736:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802b73a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802b73e:	ea4f 6810 	mov.w	r8, r0, lsr #24
 802b742:	d801      	bhi.n	802b748 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb0>
 802b744:	2f0f      	cmp	r7, #15
 802b746:	d911      	bls.n	802b76c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd4>
 802b748:	4b7b      	ldr	r3, [pc, #492]	; (802b938 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a0>)
 802b74a:	4a7c      	ldr	r2, [pc, #496]	; (802b93c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a4>)
 802b74c:	487c      	ldr	r0, [pc, #496]	; (802b940 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a8>)
 802b74e:	f240 210d 	movw	r1, #525	; 0x20d
 802b752:	f002 fd89 	bl	802e268 <__assert_func>
 802b756:	4602      	mov	r2, r0
 802b758:	e7cd      	b.n	802b6f6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 802b75a:	4606      	mov	r6, r0
 802b75c:	4602      	mov	r2, r0
 802b75e:	e7d2      	b.n	802b706 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x6e>
 802b760:	4606      	mov	r6, r0
 802b762:	e7d0      	b.n	802b706 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x6e>
 802b764:	4604      	mov	r4, r0
 802b766:	e7da      	b.n	802b71e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x86>
 802b768:	4604      	mov	r4, r0
 802b76a:	e7e1      	b.n	802b730 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x98>
 802b76c:	b2ab      	uxth	r3, r5
 802b76e:	b2bf      	uxth	r7, r7
 802b770:	fb03 fe07 	mul.w	lr, r3, r7
 802b774:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 802b778:	011b      	lsls	r3, r3, #4
 802b77a:	eba3 0c0e 	sub.w	ip, r3, lr
 802b77e:	b2bf      	uxth	r7, r7
 802b780:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 802b784:	fa1f fc8c 	uxth.w	ip, ip
 802b788:	1bed      	subs	r5, r5, r7
 802b78a:	b2ad      	uxth	r5, r5
 802b78c:	fb0c f30a 	mul.w	r3, ip, sl
 802b790:	fb05 330b 	mla	r3, r5, fp, r3
 802b794:	fb07 3309 	mla	r3, r7, r9, r3
 802b798:	fb0e 3308 	mla	r3, lr, r8, r3
 802b79c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802b7a0:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802b7a4:	9303      	str	r3, [sp, #12]
 802b7a6:	d018      	beq.n	802b7da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x142>
 802b7a8:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 802b7ac:	fb0b f303 	mul.w	r3, fp, r3
 802b7b0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802b7b4:	fb0b fb02 	mul.w	fp, fp, r2
 802b7b8:	0a1a      	lsrs	r2, r3, #8
 802b7ba:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802b7be:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 802b7c2:	441a      	add	r2, r3
 802b7c4:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 802b7c8:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 802b7cc:	0a12      	lsrs	r2, r2, #8
 802b7ce:	0a1b      	lsrs	r3, r3, #8
 802b7d0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802b7d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802b7d8:	431a      	orrs	r2, r3
 802b7da:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802b7de:	d019      	beq.n	802b814 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x17c>
 802b7e0:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 802b7e4:	fb0a fb0b 	mul.w	fp, sl, fp
 802b7e8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802b7ec:	fb0a fa06 	mul.w	sl, sl, r6
 802b7f0:	ea4f 261b 	mov.w	r6, fp, lsr #8
 802b7f4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802b7f8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802b7fc:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 802b800:	445e      	add	r6, fp
 802b802:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 802b806:	0a36      	lsrs	r6, r6, #8
 802b808:	0a1b      	lsrs	r3, r3, #8
 802b80a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802b80e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802b812:	431e      	orrs	r6, r3
 802b814:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802b818:	d019      	beq.n	802b84e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1b6>
 802b81a:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 802b81e:	fb09 fa0a 	mul.w	sl, r9, sl
 802b822:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802b826:	fb09 f904 	mul.w	r9, r9, r4
 802b82a:	ea4f 241a 	mov.w	r4, sl, lsr #8
 802b82e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802b832:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802b836:	f509 7380 	add.w	r3, r9, #256	; 0x100
 802b83a:	4454      	add	r4, sl
 802b83c:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 802b840:	0a24      	lsrs	r4, r4, #8
 802b842:	0a1b      	lsrs	r3, r3, #8
 802b844:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802b848:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802b84c:	431c      	orrs	r4, r3
 802b84e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802b852:	d019      	beq.n	802b888 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1f0>
 802b854:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 802b858:	fb08 f909 	mul.w	r9, r8, r9
 802b85c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802b860:	fb08 f800 	mul.w	r8, r8, r0
 802b864:	ea4f 2019 	mov.w	r0, r9, lsr #8
 802b868:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802b86c:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 802b870:	f508 7380 	add.w	r3, r8, #256	; 0x100
 802b874:	4448      	add	r0, r9
 802b876:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 802b87a:	0a00      	lsrs	r0, r0, #8
 802b87c:	0a1b      	lsrs	r3, r3, #8
 802b87e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802b882:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802b886:	4318      	orrs	r0, r3
 802b888:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 802b88c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802b890:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 802b894:	fb0c f808 	mul.w	r8, ip, r8
 802b898:	fb0c f606 	mul.w	r6, ip, r6
 802b89c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802b8a0:	fb05 8803 	mla	r8, r5, r3, r8
 802b8a4:	fb05 6202 	mla	r2, r5, r2, r6
 802b8a8:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 802b8ac:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802b8b0:	fb07 8803 	mla	r8, r7, r3, r8
 802b8b4:	fb07 2704 	mla	r7, r7, r4, r2
 802b8b8:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 802b8bc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802b8c0:	fb0e 8303 	mla	r3, lr, r3, r8
 802b8c4:	fb0e 7e00 	mla	lr, lr, r0, r7
 802b8c8:	0a1b      	lsrs	r3, r3, #8
 802b8ca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802b8ce:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802b8d2:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802b8d6:	ea43 0e0e 	orr.w	lr, r3, lr
 802b8da:	9b03      	ldr	r3, [sp, #12]
 802b8dc:	9800      	ldr	r0, [sp, #0]
 802b8de:	9c01      	ldr	r4, [sp, #4]
 802b8e0:	9a02      	ldr	r2, [sp, #8]
 802b8e2:	43db      	mvns	r3, r3
 802b8e4:	b2db      	uxtb	r3, r3
 802b8e6:	4358      	muls	r0, r3
 802b8e8:	435c      	muls	r4, r3
 802b8ea:	435a      	muls	r2, r3
 802b8ec:	1c43      	adds	r3, r0, #1
 802b8ee:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802b8f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 802b8f6:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802b8fa:	4b12      	ldr	r3, [pc, #72]	; (802b944 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2ac>)
 802b8fc:	ea03 2300 	and.w	r3, r3, r0, lsl #8
 802b900:	1c50      	adds	r0, r2, #1
 802b902:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 802b906:	fa5f f28e 	uxtb.w	r2, lr
 802b90a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802b90e:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 802b912:	1c62      	adds	r2, r4, #1
 802b914:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802b918:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 802b91c:	eb0e 2e12 	add.w	lr, lr, r2, lsr #8
 802b920:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802b924:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 802b928:	ea43 0e0e 	orr.w	lr, r3, lr
 802b92c:	f8a1 e000 	strh.w	lr, [r1]
 802b930:	b005      	add	sp, #20
 802b932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b936:	bf00      	nop
 802b938:	08034370 	.word	0x08034370
 802b93c:	080348c9 	.word	0x080348c9
 802b940:	080343f8 	.word	0x080343f8
 802b944:	fffff800 	.word	0xfffff800

0802b948 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802b948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b94c:	ed2d 8b08 	vpush	{d8-d11}
 802b950:	b097      	sub	sp, #92	; 0x5c
 802b952:	eeb0 aa40 	vmov.f32	s20, s0
 802b956:	9306      	str	r3, [sp, #24]
 802b958:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 802b95c:	9307      	str	r3, [sp, #28]
 802b95e:	9214      	str	r2, [sp, #80]	; 0x50
 802b960:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 802b964:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802b966:	9112      	str	r1, [sp, #72]	; 0x48
 802b968:	9310      	str	r3, [sp, #64]	; 0x40
 802b96a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802b96e:	9015      	str	r0, [sp, #84]	; 0x54
 802b970:	6850      	ldr	r0, [r2, #4]
 802b972:	6812      	ldr	r2, [r2, #0]
 802b974:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 802b976:	fb00 1303 	mla	r3, r0, r3, r1
 802b97a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802b97e:	930a      	str	r3, [sp, #40]	; 0x28
 802b980:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802b982:	681b      	ldr	r3, [r3, #0]
 802b984:	9311      	str	r3, [sp, #68]	; 0x44
 802b986:	9b07      	ldr	r3, [sp, #28]
 802b988:	009b      	lsls	r3, r3, #2
 802b98a:	eef0 9a60 	vmov.f32	s19, s1
 802b98e:	eeb0 9a41 	vmov.f32	s18, s2
 802b992:	eeb0 8a62 	vmov.f32	s16, s5
 802b996:	eef0 8a43 	vmov.f32	s17, s6
 802b99a:	eef0 ba44 	vmov.f32	s23, s8
 802b99e:	eeb0 ba64 	vmov.f32	s22, s9
 802b9a2:	eef0 aa45 	vmov.f32	s21, s10
 802b9a6:	930e      	str	r3, [sp, #56]	; 0x38
 802b9a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802b9aa:	2b00      	cmp	r3, #0
 802b9ac:	dc03      	bgt.n	802b9b6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 802b9ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802b9b0:	2b00      	cmp	r3, #0
 802b9b2:	f340 8361 	ble.w	802c078 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x730>
 802b9b6:	9b06      	ldr	r3, [sp, #24]
 802b9b8:	2b00      	cmp	r3, #0
 802b9ba:	f340 819b 	ble.w	802bcf4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 802b9be:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802b9c0:	1412      	asrs	r2, r2, #16
 802b9c2:	ea4f 4325 	mov.w	r3, r5, asr #16
 802b9c6:	d42e      	bmi.n	802ba26 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 802b9c8:	9807      	ldr	r0, [sp, #28]
 802b9ca:	1c51      	adds	r1, r2, #1
 802b9cc:	4288      	cmp	r0, r1
 802b9ce:	dd2d      	ble.n	802ba2c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 802b9d0:	2b00      	cmp	r3, #0
 802b9d2:	db2b      	blt.n	802ba2c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 802b9d4:	9810      	ldr	r0, [sp, #64]	; 0x40
 802b9d6:	1c59      	adds	r1, r3, #1
 802b9d8:	4288      	cmp	r0, r1
 802b9da:	dd27      	ble.n	802ba2c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 802b9dc:	9b06      	ldr	r3, [sp, #24]
 802b9de:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802b9e0:	9929      	ldr	r1, [sp, #164]	; 0xa4
 802b9e2:	3b01      	subs	r3, #1
 802b9e4:	fb02 1203 	mla	r2, r2, r3, r1
 802b9e8:	1412      	asrs	r2, r2, #16
 802b9ea:	d42a      	bmi.n	802ba42 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 802b9ec:	9907      	ldr	r1, [sp, #28]
 802b9ee:	3201      	adds	r2, #1
 802b9f0:	4291      	cmp	r1, r2
 802b9f2:	dd26      	ble.n	802ba42 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 802b9f4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802b9f6:	fb02 5303 	mla	r3, r2, r3, r5
 802b9fa:	141b      	asrs	r3, r3, #16
 802b9fc:	d421      	bmi.n	802ba42 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 802b9fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802ba00:	3301      	adds	r3, #1
 802ba02:	429a      	cmp	r2, r3
 802ba04:	dd1d      	ble.n	802ba42 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 802ba06:	9b06      	ldr	r3, [sp, #24]
 802ba08:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 802ba0c:	9313      	str	r3, [sp, #76]	; 0x4c
 802ba0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802ba10:	2b00      	cmp	r3, #0
 802ba12:	f300 81e3 	bgt.w	802bddc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 802ba16:	9b06      	ldr	r3, [sp, #24]
 802ba18:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802ba1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802ba1e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802ba22:	930a      	str	r3, [sp, #40]	; 0x28
 802ba24:	e168      	b.n	802bcf8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 802ba26:	1c51      	adds	r1, r2, #1
 802ba28:	f040 8157 	bne.w	802bcda <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 802ba2c:	9907      	ldr	r1, [sp, #28]
 802ba2e:	428a      	cmp	r2, r1
 802ba30:	f280 8153 	bge.w	802bcda <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 802ba34:	1c5f      	adds	r7, r3, #1
 802ba36:	f2c0 8150 	blt.w	802bcda <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 802ba3a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802ba3c:	4293      	cmp	r3, r2
 802ba3e:	f280 814c 	bge.w	802bcda <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 802ba42:	9b06      	ldr	r3, [sp, #24]
 802ba44:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802ba46:	9313      	str	r3, [sp, #76]	; 0x4c
 802ba48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802ba4a:	2b00      	cmp	r3, #0
 802ba4c:	dde3      	ble.n	802ba16 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 802ba4e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 802ba50:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802ba52:	1409      	asrs	r1, r1, #16
 802ba54:	ea4f 4325 	mov.w	r3, r5, asr #16
 802ba58:	f3c2 3203 	ubfx	r2, r2, #12, #4
 802ba5c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802ba60:	f100 81a3 	bmi.w	802bdaa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 802ba64:	9c07      	ldr	r4, [sp, #28]
 802ba66:	1c4e      	adds	r6, r1, #1
 802ba68:	42b4      	cmp	r4, r6
 802ba6a:	f340 81a0 	ble.w	802bdae <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 802ba6e:	2b00      	cmp	r3, #0
 802ba70:	f2c0 819d 	blt.w	802bdae <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 802ba74:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802ba76:	1c5e      	adds	r6, r3, #1
 802ba78:	42b4      	cmp	r4, r6
 802ba7a:	f340 8198 	ble.w	802bdae <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 802ba7e:	9c07      	ldr	r4, [sp, #28]
 802ba80:	fb03 1304 	mla	r3, r3, r4, r1
 802ba84:	9911      	ldr	r1, [sp, #68]	; 0x44
 802ba86:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 802ba8a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802ba8e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802ba92:	2a00      	cmp	r2, #0
 802ba94:	f000 816f 	beq.w	802bd76 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 802ba98:	6871      	ldr	r1, [r6, #4]
 802ba9a:	910b      	str	r1, [sp, #44]	; 0x2c
 802ba9c:	ea4f 6811 	mov.w	r8, r1, lsr #24
 802baa0:	2800      	cmp	r0, #0
 802baa2:	f000 8171 	beq.w	802bd88 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 802baa6:	990e      	ldr	r1, [sp, #56]	; 0x38
 802baa8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802baaa:	1871      	adds	r1, r6, r1
 802baac:	5934      	ldr	r4, [r6, r4]
 802baae:	6849      	ldr	r1, [r1, #4]
 802bab0:	9408      	str	r4, [sp, #32]
 802bab2:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 802bab6:	910c      	str	r1, [sp, #48]	; 0x30
 802bab8:	0e0e      	lsrs	r6, r1, #24
 802baba:	b292      	uxth	r2, r2
 802babc:	b280      	uxth	r0, r0
 802babe:	fb02 fb00 	mul.w	fp, r2, r0
 802bac2:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 802bac6:	0112      	lsls	r2, r2, #4
 802bac8:	eba2 090b 	sub.w	r9, r2, fp
 802bacc:	b280      	uxth	r0, r0
 802bace:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802bad2:	fa1f f989 	uxth.w	r9, r9
 802bad6:	1a09      	subs	r1, r1, r0
 802bad8:	b289      	uxth	r1, r1
 802bada:	fb09 f208 	mul.w	r2, r9, r8
 802bade:	fb01 220c 	mla	r2, r1, ip, r2
 802bae2:	fb00 220a 	mla	r2, r0, sl, r2
 802bae6:	fb0b 2206 	mla	r2, fp, r6, r2
 802baea:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802baee:	2a00      	cmp	r2, #0
 802baf0:	f000 80e8 	beq.w	802bcc4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802baf4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802baf8:	d01b      	beq.n	802bb32 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 802bafa:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 802bafe:	fb0c fe0e 	mul.w	lr, ip, lr
 802bb02:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802bb06:	fb0c fc03 	mul.w	ip, ip, r3
 802bb0a:	ea4f 231e 	mov.w	r3, lr, lsr #8
 802bb0e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802bb12:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802bb16:	4473      	add	r3, lr
 802bb18:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 802bb1c:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 802bb20:	0a1b      	lsrs	r3, r3, #8
 802bb22:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802bb26:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802bb2a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802bb2e:	ea43 030e 	orr.w	r3, r3, lr
 802bb32:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802bb36:	d01e      	beq.n	802bb76 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22e>
 802bb38:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802bb3a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802bb3e:	fb08 fc0c 	mul.w	ip, r8, ip
 802bb42:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 802bb46:	fb08 f80e 	mul.w	r8, r8, lr
 802bb4a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802bb4e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802bb52:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802bb56:	44e6      	add	lr, ip
 802bb58:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 802bb5c:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 802bb60:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802bb64:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802bb68:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802bb6c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802bb70:	ea4e 0408 	orr.w	r4, lr, r8
 802bb74:	940b      	str	r4, [sp, #44]	; 0x2c
 802bb76:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802bb7a:	d01e      	beq.n	802bbba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 802bb7c:	9c08      	ldr	r4, [sp, #32]
 802bb7e:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 802bb82:	fb0a f808 	mul.w	r8, sl, r8
 802bb86:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802bb8a:	fb0a fa0c 	mul.w	sl, sl, ip
 802bb8e:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 802bb92:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802bb96:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 802bb9a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802bb9e:	44c6      	add	lr, r8
 802bba0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802bba4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802bba8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802bbac:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802bbb0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802bbb4:	ea4e 040a 	orr.w	r4, lr, sl
 802bbb8:	9408      	str	r4, [sp, #32]
 802bbba:	2eff      	cmp	r6, #255	; 0xff
 802bbbc:	d01d      	beq.n	802bbfa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 802bbbe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802bbc0:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 802bbc4:	fb06 f808 	mul.w	r8, r6, r8
 802bbc8:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802bbcc:	fb06 f60c 	mul.w	r6, r6, ip
 802bbd0:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 802bbd4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802bbd8:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 802bbdc:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 802bbe0:	44c6      	add	lr, r8
 802bbe2:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 802bbe6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802bbea:	0a36      	lsrs	r6, r6, #8
 802bbec:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802bbf0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802bbf4:	ea4e 0406 	orr.w	r4, lr, r6
 802bbf8:	940c      	str	r4, [sp, #48]	; 0x30
 802bbfa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802bbfc:	f004 16ff 	and.w	r6, r4, #16711935	; 0xff00ff
 802bc00:	9c08      	ldr	r4, [sp, #32]
 802bc02:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802bc06:	fb09 f606 	mul.w	r6, r9, r6
 802bc0a:	fb01 660c 	mla	r6, r1, ip, r6
 802bc0e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802bc12:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802bc14:	fb00 660c 	mla	r6, r0, ip, r6
 802bc18:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802bc1c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802bc1e:	fb0b 660c 	mla	r6, fp, ip, r6
 802bc22:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802bc26:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802bc2a:	fb09 f90c 	mul.w	r9, r9, ip
 802bc2e:	fb01 9303 	mla	r3, r1, r3, r9
 802bc32:	9908      	ldr	r1, [sp, #32]
 802bc34:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 802bc38:	990c      	ldr	r1, [sp, #48]	; 0x30
 802bc3a:	fb00 330e 	mla	r3, r0, lr, r3
 802bc3e:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 802bc42:	fb0b 3b00 	mla	fp, fp, r0, r3
 802bc46:	0a36      	lsrs	r6, r6, #8
 802bc48:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802bc4c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802bc50:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 802bc54:	ea46 060b 	orr.w	r6, r6, fp
 802bc58:	2aff      	cmp	r2, #255	; 0xff
 802bc5a:	ea4f 2316 	mov.w	r3, r6, lsr #8
 802bc5e:	f000 8099 	beq.w	802bd94 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 802bc62:	8839      	ldrh	r1, [r7, #0]
 802bc64:	43d2      	mvns	r2, r2
 802bc66:	ea4f 2c21 	mov.w	ip, r1, asr #8
 802bc6a:	fa5f fe82 	uxtb.w	lr, r2
 802bc6e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802bc72:	fb0c fc0e 	mul.w	ip, ip, lr
 802bc76:	10c8      	asrs	r0, r1, #3
 802bc78:	00ca      	lsls	r2, r1, #3
 802bc7a:	f10c 0101 	add.w	r1, ip, #1
 802bc7e:	eb01 211c 	add.w	r1, r1, ip, lsr #8
 802bc82:	ea4f 4c16 	mov.w	ip, r6, lsr #16
 802bc86:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802bc8a:	b2d2      	uxtb	r2, r2
 802bc8c:	4952      	ldr	r1, [pc, #328]	; (802bdd8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x490>)
 802bc8e:	fb02 f20e 	mul.w	r2, r2, lr
 802bc92:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 802bc96:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802bc9a:	1c51      	adds	r1, r2, #1
 802bc9c:	fb00 f00e 	mul.w	r0, r0, lr
 802bca0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802bca4:	b2f6      	uxtb	r6, r6
 802bca6:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 802bcaa:	1c42      	adds	r2, r0, #1
 802bcac:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802bcb0:	b2db      	uxtb	r3, r3
 802bcb2:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802bcb6:	00db      	lsls	r3, r3, #3
 802bcb8:	ea4c 06d6 	orr.w	r6, ip, r6, lsr #3
 802bcbc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802bcc0:	431e      	orrs	r6, r3
 802bcc2:	803e      	strh	r6, [r7, #0]
 802bcc4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802bcc6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802bcc8:	441a      	add	r2, r3
 802bcca:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802bccc:	9229      	str	r2, [sp, #164]	; 0xa4
 802bcce:	441d      	add	r5, r3
 802bcd0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802bcd2:	3b01      	subs	r3, #1
 802bcd4:	3702      	adds	r7, #2
 802bcd6:	9313      	str	r3, [sp, #76]	; 0x4c
 802bcd8:	e6b6      	b.n	802ba48 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 802bcda:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802bcdc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802bcde:	441a      	add	r2, r3
 802bce0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802bce2:	9229      	str	r2, [sp, #164]	; 0xa4
 802bce4:	441d      	add	r5, r3
 802bce6:	9b06      	ldr	r3, [sp, #24]
 802bce8:	3b01      	subs	r3, #1
 802bcea:	9306      	str	r3, [sp, #24]
 802bcec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802bcee:	3302      	adds	r3, #2
 802bcf0:	930a      	str	r3, [sp, #40]	; 0x28
 802bcf2:	e660      	b.n	802b9b6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 802bcf4:	f47f ae72 	bne.w	802b9dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 802bcf8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802bcfa:	2b00      	cmp	r3, #0
 802bcfc:	f340 81bc 	ble.w	802c078 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x730>
 802bd00:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802bd04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802bd08:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802bd0c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802bd0e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802bd12:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802bd16:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802bd1a:	eef0 6a48 	vmov.f32	s13, s16
 802bd1e:	ee69 7a27 	vmul.f32	s15, s18, s15
 802bd22:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802bd26:	ee37 8a48 	vsub.f32	s16, s14, s16
 802bd2a:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 802bd2e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802bd32:	eef0 6a68 	vmov.f32	s13, s17
 802bd36:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802bd3a:	ee18 2a10 	vmov	r2, s16
 802bd3e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802bd42:	fb92 f3f3 	sdiv	r3, r2, r3
 802bd46:	ee18 2a90 	vmov	r2, s17
 802bd4a:	932b      	str	r3, [sp, #172]	; 0xac
 802bd4c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802bd4e:	fb92 f3f3 	sdiv	r3, r2, r3
 802bd52:	932c      	str	r3, [sp, #176]	; 0xb0
 802bd54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802bd56:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802bd58:	3b01      	subs	r3, #1
 802bd5a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802bd5e:	9312      	str	r3, [sp, #72]	; 0x48
 802bd60:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802bd62:	bf08      	it	eq
 802bd64:	4613      	moveq	r3, r2
 802bd66:	ee16 5a90 	vmov	r5, s13
 802bd6a:	9306      	str	r3, [sp, #24]
 802bd6c:	eef0 8a67 	vmov.f32	s17, s15
 802bd70:	eeb0 8a47 	vmov.f32	s16, s14
 802bd74:	e618      	b.n	802b9a8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 802bd76:	b150      	cbz	r0, 802bd8e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 802bd78:	990e      	ldr	r1, [sp, #56]	; 0x38
 802bd7a:	5871      	ldr	r1, [r6, r1]
 802bd7c:	9108      	str	r1, [sp, #32]
 802bd7e:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 802bd82:	26ff      	movs	r6, #255	; 0xff
 802bd84:	46b0      	mov	r8, r6
 802bd86:	e698      	b.n	802baba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 802bd88:	26ff      	movs	r6, #255	; 0xff
 802bd8a:	46b2      	mov	sl, r6
 802bd8c:	e695      	b.n	802baba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 802bd8e:	26ff      	movs	r6, #255	; 0xff
 802bd90:	46b2      	mov	sl, r6
 802bd92:	e7f7      	b.n	802bd84 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 802bd94:	0972      	lsrs	r2, r6, #5
 802bd96:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 802bd9a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802bd9e:	f023 0307 	bic.w	r3, r3, #7
 802bda2:	4313      	orrs	r3, r2
 802bda4:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 802bda8:	e78a      	b.n	802bcc0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x378>
 802bdaa:	1c4e      	adds	r6, r1, #1
 802bdac:	d18a      	bne.n	802bcc4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802bdae:	9c07      	ldr	r4, [sp, #28]
 802bdb0:	428c      	cmp	r4, r1
 802bdb2:	dd87      	ble.n	802bcc4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802bdb4:	1c5c      	adds	r4, r3, #1
 802bdb6:	db85      	blt.n	802bcc4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802bdb8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802bdba:	429c      	cmp	r4, r3
 802bdbc:	dd82      	ble.n	802bcc4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802bdbe:	e9cd 2003 	strd	r2, r0, [sp, #12]
 802bdc2:	e9cd 1301 	strd	r1, r3, [sp, #4]
 802bdc6:	9400      	str	r4, [sp, #0]
 802bdc8:	9b07      	ldr	r3, [sp, #28]
 802bdca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802bdcc:	9815      	ldr	r0, [sp, #84]	; 0x54
 802bdce:	4639      	mov	r1, r7
 802bdd0:	f7ff fc62 	bl	802b698 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 802bdd4:	e776      	b.n	802bcc4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802bdd6:	bf00      	nop
 802bdd8:	fffff800 	.word	0xfffff800
 802bddc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802bdde:	9929      	ldr	r1, [sp, #164]	; 0xa4
 802bde0:	9c07      	ldr	r4, [sp, #28]
 802bde2:	1409      	asrs	r1, r1, #16
 802bde4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802bde8:	142b      	asrs	r3, r5, #16
 802bdea:	fb04 1303 	mla	r3, r4, r3, r1
 802bdee:	9911      	ldr	r1, [sp, #68]	; 0x44
 802bdf0:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 802bdf4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802bdf8:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802bdfc:	0e1f      	lsrs	r7, r3, #24
 802bdfe:	2a00      	cmp	r2, #0
 802be00:	f000 811d 	beq.w	802c03e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f6>
 802be04:	6871      	ldr	r1, [r6, #4]
 802be06:	910d      	str	r1, [sp, #52]	; 0x34
 802be08:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 802be0c:	2800      	cmp	r0, #0
 802be0e:	f000 811f 	beq.w	802c050 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x708>
 802be12:	990e      	ldr	r1, [sp, #56]	; 0x38
 802be14:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802be16:	1871      	adds	r1, r6, r1
 802be18:	5934      	ldr	r4, [r6, r4]
 802be1a:	6849      	ldr	r1, [r1, #4]
 802be1c:	9409      	str	r4, [sp, #36]	; 0x24
 802be1e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802be22:	910f      	str	r1, [sp, #60]	; 0x3c
 802be24:	0e0e      	lsrs	r6, r1, #24
 802be26:	b292      	uxth	r2, r2
 802be28:	b280      	uxth	r0, r0
 802be2a:	fb02 fb00 	mul.w	fp, r2, r0
 802be2e:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 802be32:	0112      	lsls	r2, r2, #4
 802be34:	eba2 080b 	sub.w	r8, r2, fp
 802be38:	b280      	uxth	r0, r0
 802be3a:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802be3e:	fa1f f888 	uxth.w	r8, r8
 802be42:	1a09      	subs	r1, r1, r0
 802be44:	b289      	uxth	r1, r1
 802be46:	fb08 f20e 	mul.w	r2, r8, lr
 802be4a:	fb01 2207 	mla	r2, r1, r7, r2
 802be4e:	fb00 2209 	mla	r2, r0, r9, r2
 802be52:	fb0b 2206 	mla	r2, fp, r6, r2
 802be56:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802be5a:	2a00      	cmp	r2, #0
 802be5c:	f000 80e3 	beq.w	802c026 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6de>
 802be60:	2fff      	cmp	r7, #255	; 0xff
 802be62:	d01a      	beq.n	802be9a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x552>
 802be64:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802be68:	fb07 fc0c 	mul.w	ip, r7, ip
 802be6c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802be70:	435f      	muls	r7, r3
 802be72:	ea4f 231c 	mov.w	r3, ip, lsr #8
 802be76:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802be7a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802be7e:	4463      	add	r3, ip
 802be80:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 802be84:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 802be88:	0a1b      	lsrs	r3, r3, #8
 802be8a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802be8e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802be92:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802be96:	ea43 030c 	orr.w	r3, r3, ip
 802be9a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802be9e:	d01e      	beq.n	802bede <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x596>
 802bea0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802bea2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802bea6:	fb0e f707 	mul.w	r7, lr, r7
 802beaa:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802beae:	fb0e fe0c 	mul.w	lr, lr, ip
 802beb2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802beb6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802beba:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802bebe:	44bc      	add	ip, r7
 802bec0:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 802bec4:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 802bec8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802becc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802bed0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802bed4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802bed8:	ea4c 040e 	orr.w	r4, ip, lr
 802bedc:	940d      	str	r4, [sp, #52]	; 0x34
 802bede:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802bee2:	d01e      	beq.n	802bf22 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 802bee4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802bee6:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802beea:	fb09 fe0e 	mul.w	lr, r9, lr
 802beee:	f404 477f 	and.w	r7, r4, #65280	; 0xff00
 802bef2:	fb09 f907 	mul.w	r9, r9, r7
 802bef6:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802befa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802befe:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802bf02:	f509 7780 	add.w	r7, r9, #256	; 0x100
 802bf06:	44f4      	add	ip, lr
 802bf08:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 802bf0c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802bf10:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802bf14:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802bf18:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802bf1c:	ea4c 0409 	orr.w	r4, ip, r9
 802bf20:	9409      	str	r4, [sp, #36]	; 0x24
 802bf22:	2eff      	cmp	r6, #255	; 0xff
 802bf24:	d01c      	beq.n	802bf60 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x618>
 802bf26:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802bf28:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802bf2c:	fb06 fe0e 	mul.w	lr, r6, lr
 802bf30:	f404 477f 	and.w	r7, r4, #65280	; 0xff00
 802bf34:	437e      	muls	r6, r7
 802bf36:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802bf3a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802bf3e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802bf42:	f506 7780 	add.w	r7, r6, #256	; 0x100
 802bf46:	44f4      	add	ip, lr
 802bf48:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 802bf4c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802bf50:	0a36      	lsrs	r6, r6, #8
 802bf52:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802bf56:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802bf5a:	ea4c 0406 	orr.w	r4, ip, r6
 802bf5e:	940f      	str	r4, [sp, #60]	; 0x3c
 802bf60:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802bf62:	f004 16ff 	and.w	r6, r4, #16711935	; 0xff00ff
 802bf66:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802bf68:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 802bf6c:	fb08 f606 	mul.w	r6, r8, r6
 802bf70:	fb01 6607 	mla	r6, r1, r7, r6
 802bf74:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802bf78:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802bf7a:	fb00 6607 	mla	r6, r0, r7, r6
 802bf7e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802bf82:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802bf84:	fb0b 6607 	mla	r6, fp, r7, r6
 802bf88:	f404 477f 	and.w	r7, r4, #65280	; 0xff00
 802bf8c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802bf90:	fb08 f807 	mul.w	r8, r8, r7
 802bf94:	fb01 8303 	mla	r3, r1, r3, r8
 802bf98:	9909      	ldr	r1, [sp, #36]	; 0x24
 802bf9a:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 802bf9e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802bfa0:	fb00 330c 	mla	r3, r0, ip, r3
 802bfa4:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 802bfa8:	fb0b 3e0e 	mla	lr, fp, lr, r3
 802bfac:	0a36      	lsrs	r6, r6, #8
 802bfae:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802bfb2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802bfb6:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802bfba:	ea46 060e 	orr.w	r6, r6, lr
 802bfbe:	2aff      	cmp	r2, #255	; 0xff
 802bfc0:	ea4f 2316 	mov.w	r3, r6, lsr #8
 802bfc4:	d04a      	beq.n	802c05c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x714>
 802bfc6:	f8ba 1000 	ldrh.w	r1, [sl]
 802bfca:	43d2      	mvns	r2, r2
 802bfcc:	120f      	asrs	r7, r1, #8
 802bfce:	fa5f fc82 	uxtb.w	ip, r2
 802bfd2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802bfd6:	fb07 f70c 	mul.w	r7, r7, ip
 802bfda:	10c8      	asrs	r0, r1, #3
 802bfdc:	00ca      	lsls	r2, r1, #3
 802bfde:	1c79      	adds	r1, r7, #1
 802bfe0:	eb01 2117 	add.w	r1, r1, r7, lsr #8
 802bfe4:	0c37      	lsrs	r7, r6, #16
 802bfe6:	eb07 2711 	add.w	r7, r7, r1, lsr #8
 802bfea:	b2d2      	uxtb	r2, r2
 802bfec:	4925      	ldr	r1, [pc, #148]	; (802c084 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x73c>)
 802bfee:	fb02 f20c 	mul.w	r2, r2, ip
 802bff2:	ea01 2707 	and.w	r7, r1, r7, lsl #8
 802bff6:	1c51      	adds	r1, r2, #1
 802bff8:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802bffc:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802c000:	b2f6      	uxtb	r6, r6
 802c002:	fb00 f00c 	mul.w	r0, r0, ip
 802c006:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 802c00a:	ea47 07d6 	orr.w	r7, r7, r6, lsr #3
 802c00e:	1c46      	adds	r6, r0, #1
 802c010:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 802c014:	b2de      	uxtb	r6, r3
 802c016:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 802c01a:	00f6      	lsls	r6, r6, #3
 802c01c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 802c020:	4337      	orrs	r7, r6
 802c022:	f8aa 7000 	strh.w	r7, [sl]
 802c026:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802c028:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802c02a:	441a      	add	r2, r3
 802c02c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802c02e:	9229      	str	r2, [sp, #164]	; 0xa4
 802c030:	441d      	add	r5, r3
 802c032:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802c034:	3b01      	subs	r3, #1
 802c036:	f10a 0a02 	add.w	sl, sl, #2
 802c03a:	9313      	str	r3, [sp, #76]	; 0x4c
 802c03c:	e4e7      	b.n	802ba0e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 802c03e:	b150      	cbz	r0, 802c056 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70e>
 802c040:	990e      	ldr	r1, [sp, #56]	; 0x38
 802c042:	5871      	ldr	r1, [r6, r1]
 802c044:	9109      	str	r1, [sp, #36]	; 0x24
 802c046:	ea4f 6911 	mov.w	r9, r1, lsr #24
 802c04a:	26ff      	movs	r6, #255	; 0xff
 802c04c:	46b6      	mov	lr, r6
 802c04e:	e6ea      	b.n	802be26 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4de>
 802c050:	26ff      	movs	r6, #255	; 0xff
 802c052:	46b1      	mov	r9, r6
 802c054:	e6e7      	b.n	802be26 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4de>
 802c056:	26ff      	movs	r6, #255	; 0xff
 802c058:	46b1      	mov	r9, r6
 802c05a:	e7f7      	b.n	802c04c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x704>
 802c05c:	0972      	lsrs	r2, r6, #5
 802c05e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 802c062:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802c066:	f023 0307 	bic.w	r3, r3, #7
 802c06a:	4313      	orrs	r3, r2
 802c06c:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 802c070:	431e      	orrs	r6, r3
 802c072:	f8aa 6000 	strh.w	r6, [sl]
 802c076:	e7d6      	b.n	802c026 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6de>
 802c078:	b017      	add	sp, #92	; 0x5c
 802c07a:	ecbd 8b08 	vpop	{d8-d11}
 802c07e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c082:	bf00      	nop
 802c084:	fffff800 	.word	0xfffff800

0802c088 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 802c088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802c08c:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 802c090:	2c00      	cmp	r4, #0
 802c092:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802c096:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802c09a:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 802c09e:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 802c0a2:	fb04 ce03 	mla	lr, r4, r3, ip
 802c0a6:	db60      	blt.n	802c16a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 802c0a8:	45a1      	cmp	r9, r4
 802c0aa:	dd5e      	ble.n	802c16a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 802c0ac:	f1bc 0f00 	cmp.w	ip, #0
 802c0b0:	db59      	blt.n	802c166 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 802c0b2:	45e0      	cmp	r8, ip
 802c0b4:	dd57      	ble.n	802c166 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 802c0b6:	ea4f 005e 	mov.w	r0, lr, lsr #1
 802c0ba:	f01e 0f01 	tst.w	lr, #1
 802c0be:	5c16      	ldrb	r6, [r2, r0]
 802c0c0:	bf0c      	ite	eq
 802c0c2:	f006 060f 	andeq.w	r6, r6, #15
 802c0c6:	1136      	asrne	r6, r6, #4
 802c0c8:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802c0cc:	b2f6      	uxtb	r6, r6
 802c0ce:	f11c 0001 	adds.w	r0, ip, #1
 802c0d2:	d44d      	bmi.n	802c170 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 802c0d4:	4580      	cmp	r8, r0
 802c0d6:	dd4b      	ble.n	802c170 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 802c0d8:	2d00      	cmp	r5, #0
 802c0da:	d04b      	beq.n	802c174 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xec>
 802c0dc:	f10e 0a01 	add.w	sl, lr, #1
 802c0e0:	ea4f 005a 	mov.w	r0, sl, lsr #1
 802c0e4:	f01a 0f01 	tst.w	sl, #1
 802c0e8:	5c10      	ldrb	r0, [r2, r0]
 802c0ea:	bf0c      	ite	eq
 802c0ec:	f000 000f 	andeq.w	r0, r0, #15
 802c0f0:	1100      	asrne	r0, r0, #4
 802c0f2:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802c0f6:	b2c0      	uxtb	r0, r0
 802c0f8:	3401      	adds	r4, #1
 802c0fa:	d43f      	bmi.n	802c17c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 802c0fc:	45a1      	cmp	r9, r4
 802c0fe:	dd3d      	ble.n	802c17c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 802c100:	2f00      	cmp	r7, #0
 802c102:	f000 809e 	beq.w	802c242 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ba>
 802c106:	f1bc 0f00 	cmp.w	ip, #0
 802c10a:	db35      	blt.n	802c178 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 802c10c:	45e0      	cmp	r8, ip
 802c10e:	dd33      	ble.n	802c178 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 802c110:	eb03 090e 	add.w	r9, r3, lr
 802c114:	ea4f 0459 	mov.w	r4, r9, lsr #1
 802c118:	f019 0f01 	tst.w	r9, #1
 802c11c:	5d14      	ldrb	r4, [r2, r4]
 802c11e:	bf0c      	ite	eq
 802c120:	f004 040f 	andeq.w	r4, r4, #15
 802c124:	1124      	asrne	r4, r4, #4
 802c126:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802c12a:	b2e4      	uxtb	r4, r4
 802c12c:	f11c 0c01 	adds.w	ip, ip, #1
 802c130:	d427      	bmi.n	802c182 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 802c132:	45e0      	cmp	r8, ip
 802c134:	dd25      	ble.n	802c182 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 802c136:	b335      	cbz	r5, 802c186 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfe>
 802c138:	3301      	adds	r3, #1
 802c13a:	449e      	add	lr, r3
 802c13c:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802c140:	f01e 0f01 	tst.w	lr, #1
 802c144:	5cd2      	ldrb	r2, [r2, r3]
 802c146:	bf0c      	ite	eq
 802c148:	f002 020f 	andeq.w	r2, r2, #15
 802c14c:	1112      	asrne	r2, r2, #4
 802c14e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802c152:	b2d3      	uxtb	r3, r2
 802c154:	2d0f      	cmp	r5, #15
 802c156:	d917      	bls.n	802c188 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x100>
 802c158:	4b3c      	ldr	r3, [pc, #240]	; (802c24c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c4>)
 802c15a:	4a3d      	ldr	r2, [pc, #244]	; (802c250 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 802c15c:	483d      	ldr	r0, [pc, #244]	; (802c254 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 802c15e:	f240 210d 	movw	r1, #525	; 0x20d
 802c162:	f002 f881 	bl	802e268 <__assert_func>
 802c166:	2600      	movs	r6, #0
 802c168:	e7b1      	b.n	802c0ce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x46>
 802c16a:	2000      	movs	r0, #0
 802c16c:	4606      	mov	r6, r0
 802c16e:	e7c3      	b.n	802c0f8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 802c170:	2000      	movs	r0, #0
 802c172:	e7c1      	b.n	802c0f8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 802c174:	4628      	mov	r0, r5
 802c176:	e7bf      	b.n	802c0f8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 802c178:	2400      	movs	r4, #0
 802c17a:	e7d7      	b.n	802c12c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa4>
 802c17c:	2300      	movs	r3, #0
 802c17e:	461c      	mov	r4, r3
 802c180:	e7e8      	b.n	802c154 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 802c182:	2300      	movs	r3, #0
 802c184:	e7e6      	b.n	802c154 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 802c186:	462b      	mov	r3, r5
 802c188:	2f0f      	cmp	r7, #15
 802c18a:	d8e5      	bhi.n	802c158 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 802c18c:	b2ad      	uxth	r5, r5
 802c18e:	b2bf      	uxth	r7, r7
 802c190:	fb05 fc07 	mul.w	ip, r5, r7
 802c194:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 802c198:	012d      	lsls	r5, r5, #4
 802c19a:	b2bf      	uxth	r7, r7
 802c19c:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 802c1a0:	eba5 050c 	sub.w	r5, r5, ip
 802c1a4:	1bd2      	subs	r2, r2, r7
 802c1a6:	b2ad      	uxth	r5, r5
 802c1a8:	b292      	uxth	r2, r2
 802c1aa:	4368      	muls	r0, r5
 802c1ac:	fb06 0002 	mla	r0, r6, r2, r0
 802c1b0:	fb07 0404 	mla	r4, r7, r4, r0
 802c1b4:	fb0c 4303 	mla	r3, ip, r3, r4
 802c1b8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802c1bc:	2b00      	cmp	r3, #0
 802c1be:	d03e      	beq.n	802c23e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1b6>
 802c1c0:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 802c1c4:	4a24      	ldr	r2, [pc, #144]	; (802c258 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1d0>)
 802c1c6:	4343      	muls	r3, r0
 802c1c8:	1c58      	adds	r0, r3, #1
 802c1ca:	6816      	ldr	r6, [r2, #0]
 802c1cc:	880a      	ldrh	r2, [r1, #0]
 802c1ce:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802c1d2:	1200      	asrs	r0, r0, #8
 802c1d4:	b284      	uxth	r4, r0
 802c1d6:	1215      	asrs	r5, r2, #8
 802c1d8:	43c0      	mvns	r0, r0
 802c1da:	b2c3      	uxtb	r3, r0
 802c1dc:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802c1e0:	0a30      	lsrs	r0, r6, #8
 802c1e2:	fb15 f503 	smulbb	r5, r5, r3
 802c1e6:	10d7      	asrs	r7, r2, #3
 802c1e8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802c1ec:	fb00 5004 	mla	r0, r0, r4, r5
 802c1f0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802c1f4:	08f5      	lsrs	r5, r6, #3
 802c1f6:	00d2      	lsls	r2, r2, #3
 802c1f8:	fb17 f703 	smulbb	r7, r7, r3
 802c1fc:	b2d2      	uxtb	r2, r2
 802c1fe:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802c202:	00f6      	lsls	r6, r6, #3
 802c204:	fb05 7504 	mla	r5, r5, r4, r7
 802c208:	fb12 f303 	smulbb	r3, r2, r3
 802c20c:	b2f6      	uxtb	r6, r6
 802c20e:	fb06 3304 	mla	r3, r6, r4, r3
 802c212:	b2ad      	uxth	r5, r5
 802c214:	b29a      	uxth	r2, r3
 802c216:	b280      	uxth	r0, r0
 802c218:	1c6b      	adds	r3, r5, #1
 802c21a:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 802c21e:	1c44      	adds	r4, r0, #1
 802c220:	095b      	lsrs	r3, r3, #5
 802c222:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 802c226:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802c22a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802c22e:	4303      	orrs	r3, r0
 802c230:	1c50      	adds	r0, r2, #1
 802c232:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 802c236:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802c23a:	4313      	orrs	r3, r2
 802c23c:	800b      	strh	r3, [r1, #0]
 802c23e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c242:	2d0f      	cmp	r5, #15
 802c244:	d888      	bhi.n	802c158 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 802c246:	463b      	mov	r3, r7
 802c248:	463c      	mov	r4, r7
 802c24a:	e79f      	b.n	802c18c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x104>
 802c24c:	08034370 	.word	0x08034370
 802c250:	080348c9 	.word	0x080348c9
 802c254:	080343f8 	.word	0x080343f8
 802c258:	200128ac 	.word	0x200128ac

0802c25c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802c25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c260:	ed2d 8b08 	vpush	{d8-d11}
 802c264:	b099      	sub	sp, #100	; 0x64
 802c266:	e9dd 462b 	ldrd	r4, r6, [sp, #172]	; 0xac
 802c26a:	9309      	str	r3, [sp, #36]	; 0x24
 802c26c:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 802c270:	930a      	str	r3, [sp, #40]	; 0x28
 802c272:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 802c276:	9216      	str	r2, [sp, #88]	; 0x58
 802c278:	930b      	str	r3, [sp, #44]	; 0x2c
 802c27a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 802c27c:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 802c280:	910f      	str	r1, [sp, #60]	; 0x3c
 802c282:	9310      	str	r3, [sp, #64]	; 0x40
 802c284:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 802c288:	9017      	str	r0, [sp, #92]	; 0x5c
 802c28a:	6850      	ldr	r0, [r2, #4]
 802c28c:	6812      	ldr	r2, [r2, #0]
 802c28e:	fb00 1303 	mla	r3, r0, r3, r1
 802c292:	eb02 0a43 	add.w	sl, r2, r3, lsl #1
 802c296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802c298:	3301      	adds	r3, #1
 802c29a:	f023 0301 	bic.w	r3, r3, #1
 802c29e:	930c      	str	r3, [sp, #48]	; 0x30
 802c2a0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802c2a2:	681f      	ldr	r7, [r3, #0]
 802c2a4:	eeb0 aa40 	vmov.f32	s20, s0
 802c2a8:	eef0 9a60 	vmov.f32	s19, s1
 802c2ac:	eeb0 9a41 	vmov.f32	s18, s2
 802c2b0:	eeb0 8a62 	vmov.f32	s16, s5
 802c2b4:	eef0 8a43 	vmov.f32	s17, s6
 802c2b8:	eef0 ba44 	vmov.f32	s23, s8
 802c2bc:	eeb0 ba64 	vmov.f32	s22, s9
 802c2c0:	eef0 aa45 	vmov.f32	s21, s10
 802c2c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802c2c6:	2b00      	cmp	r3, #0
 802c2c8:	dc03      	bgt.n	802c2d2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802c2ca:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802c2cc:	2b00      	cmp	r3, #0
 802c2ce:	f340 8267 	ble.w	802c7a0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x544>
 802c2d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c2d4:	2b00      	cmp	r3, #0
 802c2d6:	f340 811e 	ble.w	802c516 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 802c2da:	1422      	asrs	r2, r4, #16
 802c2dc:	ea4f 4326 	mov.w	r3, r6, asr #16
 802c2e0:	d42d      	bmi.n	802c33e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 802c2e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 802c2e4:	1c51      	adds	r1, r2, #1
 802c2e6:	4288      	cmp	r0, r1
 802c2e8:	dd2c      	ble.n	802c344 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 802c2ea:	2b00      	cmp	r3, #0
 802c2ec:	db2a      	blt.n	802c344 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 802c2ee:	980b      	ldr	r0, [sp, #44]	; 0x2c
 802c2f0:	1c59      	adds	r1, r3, #1
 802c2f2:	4288      	cmp	r0, r1
 802c2f4:	dd26      	ble.n	802c344 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 802c2f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c2f8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802c2fa:	3b01      	subs	r3, #1
 802c2fc:	fb02 4203 	mla	r2, r2, r3, r4
 802c300:	1412      	asrs	r2, r2, #16
 802c302:	d42a      	bmi.n	802c35a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 802c304:	990a      	ldr	r1, [sp, #40]	; 0x28
 802c306:	3201      	adds	r2, #1
 802c308:	4291      	cmp	r1, r2
 802c30a:	dd26      	ble.n	802c35a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 802c30c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 802c30e:	fb02 6303 	mla	r3, r2, r3, r6
 802c312:	141b      	asrs	r3, r3, #16
 802c314:	d421      	bmi.n	802c35a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 802c316:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802c318:	3301      	adds	r3, #1
 802c31a:	429a      	cmp	r2, r3
 802c31c:	dd1d      	ble.n	802c35a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 802c31e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 802c322:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 802c326:	9311      	str	r3, [sp, #68]	; 0x44
 802c328:	46d1      	mov	r9, sl
 802c32a:	f1bb 0f00 	cmp.w	fp, #0
 802c32e:	f300 8162 	bgt.w	802c5f6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x39a>
 802c332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c334:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802c338:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 802c33c:	e0ed      	b.n	802c51a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 802c33e:	1c51      	adds	r1, r2, #1
 802c340:	f040 80df 	bne.w	802c502 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 802c344:	990a      	ldr	r1, [sp, #40]	; 0x28
 802c346:	4291      	cmp	r1, r2
 802c348:	f340 80db 	ble.w	802c502 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 802c34c:	1c5a      	adds	r2, r3, #1
 802c34e:	f2c0 80d8 	blt.w	802c502 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 802c352:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802c354:	4293      	cmp	r3, r2
 802c356:	f280 80d4 	bge.w	802c502 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 802c35a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 802c35e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 802c362:	9311      	str	r3, [sp, #68]	; 0x44
 802c364:	46d0      	mov	r8, sl
 802c366:	f1b9 0f00 	cmp.w	r9, #0
 802c36a:	dde2      	ble.n	802c332 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd6>
 802c36c:	1420      	asrs	r0, r4, #16
 802c36e:	ea4f 4326 	mov.w	r3, r6, asr #16
 802c372:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802c376:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802c37a:	f100 8121 	bmi.w	802c5c0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x364>
 802c37e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802c380:	f100 0c01 	add.w	ip, r0, #1
 802c384:	4565      	cmp	r5, ip
 802c386:	f340 811d 	ble.w	802c5c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x368>
 802c38a:	2b00      	cmp	r3, #0
 802c38c:	f2c0 811a 	blt.w	802c5c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x368>
 802c390:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802c392:	f103 0c01 	add.w	ip, r3, #1
 802c396:	4565      	cmp	r5, ip
 802c398:	f340 8114 	ble.w	802c5c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x368>
 802c39c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802c39e:	fb03 0305 	mla	r3, r3, r5, r0
 802c3a2:	0858      	lsrs	r0, r3, #1
 802c3a4:	07dd      	lsls	r5, r3, #31
 802c3a6:	5c38      	ldrb	r0, [r7, r0]
 802c3a8:	bf54      	ite	pl
 802c3aa:	f000 000f 	andpl.w	r0, r0, #15
 802c3ae:	1100      	asrmi	r0, r0, #4
 802c3b0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802c3b4:	b2c0      	uxtb	r0, r0
 802c3b6:	2a00      	cmp	r2, #0
 802c3b8:	f000 80ee 	beq.w	802c598 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 802c3bc:	f103 0e01 	add.w	lr, r3, #1
 802c3c0:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802c3c4:	f01e 0f01 	tst.w	lr, #1
 802c3c8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802c3cc:	bf0c      	ite	eq
 802c3ce:	f00c 0c0f 	andeq.w	ip, ip, #15
 802c3d2:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802c3d6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802c3da:	fa5f f58c 	uxtb.w	r5, ip
 802c3de:	9512      	str	r5, [sp, #72]	; 0x48
 802c3e0:	b1f9      	cbz	r1, 802c422 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c6>
 802c3e2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802c3e4:	442b      	add	r3, r5
 802c3e6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802c3ea:	07dd      	lsls	r5, r3, #31
 802c3ec:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802c3f0:	bf54      	ite	pl
 802c3f2:	f00c 0c0f 	andpl.w	ip, ip, #15
 802c3f6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802c3fa:	3301      	adds	r3, #1
 802c3fc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802c400:	fa5f f58c 	uxtb.w	r5, ip
 802c404:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802c408:	950d      	str	r5, [sp, #52]	; 0x34
 802c40a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802c40e:	07dd      	lsls	r5, r3, #31
 802c410:	bf54      	ite	pl
 802c412:	f00c 030f 	andpl.w	r3, ip, #15
 802c416:	ea4f 132c 	movmi.w	r3, ip, asr #4
 802c41a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802c41e:	b2db      	uxtb	r3, r3
 802c420:	9313      	str	r3, [sp, #76]	; 0x4c
 802c422:	b292      	uxth	r2, r2
 802c424:	b289      	uxth	r1, r1
 802c426:	fb02 f301 	mul.w	r3, r2, r1
 802c42a:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802c42e:	0112      	lsls	r2, r2, #4
 802c430:	b289      	uxth	r1, r1
 802c432:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 802c436:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802c438:	1ad2      	subs	r2, r2, r3
 802c43a:	ebac 0c01 	sub.w	ip, ip, r1
 802c43e:	b292      	uxth	r2, r2
 802c440:	436a      	muls	r2, r5
 802c442:	fa1f fc8c 	uxth.w	ip, ip
 802c446:	fb00 200c 	mla	r0, r0, ip, r2
 802c44a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802c44c:	fb01 0102 	mla	r1, r1, r2, r0
 802c450:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802c452:	fb03 1302 	mla	r3, r3, r2, r1
 802c456:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802c45a:	2b00      	cmp	r3, #0
 802c45c:	d048      	beq.n	802c4f0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 802c45e:	9910      	ldr	r1, [sp, #64]	; 0x40
 802c460:	4ace      	ldr	r2, [pc, #824]	; (802c79c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x540>)
 802c462:	434b      	muls	r3, r1
 802c464:	1c59      	adds	r1, r3, #1
 802c466:	f8d2 e000 	ldr.w	lr, [r2]
 802c46a:	f8b8 2000 	ldrh.w	r2, [r8]
 802c46e:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802c472:	121b      	asrs	r3, r3, #8
 802c474:	b299      	uxth	r1, r3
 802c476:	ea4f 2c22 	mov.w	ip, r2, asr #8
 802c47a:	43db      	mvns	r3, r3
 802c47c:	b2db      	uxtb	r3, r3
 802c47e:	ea4f 201e 	mov.w	r0, lr, lsr #8
 802c482:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802c486:	fb1c fc03 	smulbb	ip, ip, r3
 802c48a:	ea4f 0be2 	mov.w	fp, r2, asr #3
 802c48e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802c492:	fb00 c001 	mla	r0, r0, r1, ip
 802c496:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 802c49a:	ea4f 0cde 	mov.w	ip, lr, lsr #3
 802c49e:	fb1b fb03 	smulbb	fp, fp, r3
 802c4a2:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 802c4a6:	00d2      	lsls	r2, r2, #3
 802c4a8:	fb0c bc01 	mla	ip, ip, r1, fp
 802c4ac:	b2d2      	uxtb	r2, r2
 802c4ae:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802c4b2:	fb12 f303 	smulbb	r3, r2, r3
 802c4b6:	fa1f fc8c 	uxth.w	ip, ip
 802c4ba:	fa5f fe8e 	uxtb.w	lr, lr
 802c4be:	b280      	uxth	r0, r0
 802c4c0:	fb0e 3101 	mla	r1, lr, r1, r3
 802c4c4:	f10c 0201 	add.w	r2, ip, #1
 802c4c8:	b289      	uxth	r1, r1
 802c4ca:	1c43      	adds	r3, r0, #1
 802c4cc:	eb02 221c 	add.w	r2, r2, ip, lsr #8
 802c4d0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802c4d4:	0952      	lsrs	r2, r2, #5
 802c4d6:	1c4b      	adds	r3, r1, #1
 802c4d8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802c4dc:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802c4e0:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802c4e4:	4310      	orrs	r0, r2
 802c4e6:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802c4ea:	4308      	orrs	r0, r1
 802c4ec:	f8a8 0000 	strh.w	r0, [r8]
 802c4f0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802c4f2:	441c      	add	r4, r3
 802c4f4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802c4f6:	f108 0802 	add.w	r8, r8, #2
 802c4fa:	441e      	add	r6, r3
 802c4fc:	f109 39ff 	add.w	r9, r9, #4294967295
 802c500:	e731      	b.n	802c366 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 802c502:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802c504:	441c      	add	r4, r3
 802c506:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802c508:	441e      	add	r6, r3
 802c50a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c50c:	3b01      	subs	r3, #1
 802c50e:	9309      	str	r3, [sp, #36]	; 0x24
 802c510:	f10a 0a02 	add.w	sl, sl, #2
 802c514:	e6dd      	b.n	802c2d2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802c516:	f47f aeee 	bne.w	802c2f6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 802c51a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802c51c:	2b00      	cmp	r3, #0
 802c51e:	f340 813f 	ble.w	802c7a0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x544>
 802c522:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802c526:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802c52a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802c52e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802c530:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802c534:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802c538:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802c53c:	eef0 6a48 	vmov.f32	s13, s16
 802c540:	ee69 7a27 	vmul.f32	s15, s18, s15
 802c544:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802c548:	ee37 8a48 	vsub.f32	s16, s14, s16
 802c54c:	ee16 4a90 	vmov	r4, s13
 802c550:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802c554:	eef0 6a68 	vmov.f32	s13, s17
 802c558:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802c55c:	ee18 2a10 	vmov	r2, s16
 802c560:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802c564:	fb92 f3f3 	sdiv	r3, r2, r3
 802c568:	ee18 2a90 	vmov	r2, s17
 802c56c:	932d      	str	r3, [sp, #180]	; 0xb4
 802c56e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802c570:	fb92 f3f3 	sdiv	r3, r2, r3
 802c574:	932e      	str	r3, [sp, #184]	; 0xb8
 802c576:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802c578:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802c57a:	3b01      	subs	r3, #1
 802c57c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802c580:	930f      	str	r3, [sp, #60]	; 0x3c
 802c582:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802c584:	bf08      	it	eq
 802c586:	4613      	moveq	r3, r2
 802c588:	ee16 6a90 	vmov	r6, s13
 802c58c:	9309      	str	r3, [sp, #36]	; 0x24
 802c58e:	eef0 8a67 	vmov.f32	s17, s15
 802c592:	eeb0 8a47 	vmov.f32	s16, s14
 802c596:	e695      	b.n	802c2c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 802c598:	2900      	cmp	r1, #0
 802c59a:	f43f af42 	beq.w	802c422 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c6>
 802c59e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802c5a0:	442b      	add	r3, r5
 802c5a2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802c5a6:	07db      	lsls	r3, r3, #31
 802c5a8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802c5ac:	bf54      	ite	pl
 802c5ae:	f00c 030f 	andpl.w	r3, ip, #15
 802c5b2:	ea4f 132c 	movmi.w	r3, ip, asr #4
 802c5b6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802c5ba:	b2db      	uxtb	r3, r3
 802c5bc:	930d      	str	r3, [sp, #52]	; 0x34
 802c5be:	e730      	b.n	802c422 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c6>
 802c5c0:	1c45      	adds	r5, r0, #1
 802c5c2:	d195      	bne.n	802c4f0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 802c5c4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802c5c6:	4285      	cmp	r5, r0
 802c5c8:	dd92      	ble.n	802c4f0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 802c5ca:	1c5d      	adds	r5, r3, #1
 802c5cc:	db90      	blt.n	802c4f0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 802c5ce:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802c5d0:	429d      	cmp	r5, r3
 802c5d2:	dd8d      	ble.n	802c4f0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 802c5d4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 802c5d8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802c5da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802c5dc:	9301      	str	r3, [sp, #4]
 802c5de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802c5e0:	9002      	str	r0, [sp, #8]
 802c5e2:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802c5e6:	9300      	str	r3, [sp, #0]
 802c5e8:	463a      	mov	r2, r7
 802c5ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802c5ec:	9817      	ldr	r0, [sp, #92]	; 0x5c
 802c5ee:	4641      	mov	r1, r8
 802c5f0:	f7ff fd4a 	bl	802c088 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 802c5f4:	e77c      	b.n	802c4f0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 802c5f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802c5f8:	1422      	asrs	r2, r4, #16
 802c5fa:	1433      	asrs	r3, r6, #16
 802c5fc:	fb05 2303 	mla	r3, r5, r3, r2
 802c600:	085a      	lsrs	r2, r3, #1
 802c602:	07dd      	lsls	r5, r3, #31
 802c604:	5cba      	ldrb	r2, [r7, r2]
 802c606:	bf54      	ite	pl
 802c608:	f002 020f 	andpl.w	r2, r2, #15
 802c60c:	1112      	asrmi	r2, r2, #4
 802c60e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802c612:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802c616:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802c61a:	b2d2      	uxtb	r2, r2
 802c61c:	2900      	cmp	r1, #0
 802c61e:	f000 80a8 	beq.w	802c772 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x516>
 802c622:	f103 0e01 	add.w	lr, r3, #1
 802c626:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802c62a:	f01e 0f01 	tst.w	lr, #1
 802c62e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802c632:	bf0c      	ite	eq
 802c634:	f00c 0c0f 	andeq.w	ip, ip, #15
 802c638:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802c63c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802c640:	fa5f f58c 	uxtb.w	r5, ip
 802c644:	9514      	str	r5, [sp, #80]	; 0x50
 802c646:	b300      	cbz	r0, 802c68a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 802c648:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802c64a:	442b      	add	r3, r5
 802c64c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802c650:	07dd      	lsls	r5, r3, #31
 802c652:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802c656:	bf54      	ite	pl
 802c658:	f00c 0c0f 	andpl.w	ip, ip, #15
 802c65c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802c660:	3301      	adds	r3, #1
 802c662:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802c666:	fa5f f58c 	uxtb.w	r5, ip
 802c66a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802c66e:	950e      	str	r5, [sp, #56]	; 0x38
 802c670:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802c674:	07dd      	lsls	r5, r3, #31
 802c676:	bf54      	ite	pl
 802c678:	f00c 0c0f 	andpl.w	ip, ip, #15
 802c67c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802c680:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802c684:	fa5f f38c 	uxtb.w	r3, ip
 802c688:	9315      	str	r3, [sp, #84]	; 0x54
 802c68a:	b289      	uxth	r1, r1
 802c68c:	b280      	uxth	r0, r0
 802c68e:	fb01 f300 	mul.w	r3, r1, r0
 802c692:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802c696:	0109      	lsls	r1, r1, #4
 802c698:	b280      	uxth	r0, r0
 802c69a:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 802c69e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802c6a0:	1ac9      	subs	r1, r1, r3
 802c6a2:	ebac 0c00 	sub.w	ip, ip, r0
 802c6a6:	b289      	uxth	r1, r1
 802c6a8:	4369      	muls	r1, r5
 802c6aa:	fa1f fc8c 	uxth.w	ip, ip
 802c6ae:	fb02 120c 	mla	r2, r2, ip, r1
 802c6b2:	990e      	ldr	r1, [sp, #56]	; 0x38
 802c6b4:	fb00 2001 	mla	r0, r0, r1, r2
 802c6b8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802c6ba:	fb03 0302 	mla	r3, r3, r2, r0
 802c6be:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802c6c2:	2b00      	cmp	r3, #0
 802c6c4:	d04c      	beq.n	802c760 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x504>
 802c6c6:	9910      	ldr	r1, [sp, #64]	; 0x40
 802c6c8:	4a34      	ldr	r2, [pc, #208]	; (802c79c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x540>)
 802c6ca:	434b      	muls	r3, r1
 802c6cc:	1c59      	adds	r1, r3, #1
 802c6ce:	f8d2 e000 	ldr.w	lr, [r2]
 802c6d2:	f8b9 2000 	ldrh.w	r2, [r9]
 802c6d6:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802c6da:	121b      	asrs	r3, r3, #8
 802c6dc:	b299      	uxth	r1, r3
 802c6de:	ea4f 2c22 	mov.w	ip, r2, asr #8
 802c6e2:	43db      	mvns	r3, r3
 802c6e4:	b2db      	uxtb	r3, r3
 802c6e6:	ea4f 201e 	mov.w	r0, lr, lsr #8
 802c6ea:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802c6ee:	fb1c fc03 	smulbb	ip, ip, r3
 802c6f2:	ea4f 08e2 	mov.w	r8, r2, asr #3
 802c6f6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802c6fa:	fb00 c001 	mla	r0, r0, r1, ip
 802c6fe:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 802c702:	ea4f 0cde 	mov.w	ip, lr, lsr #3
 802c706:	fb18 f803 	smulbb	r8, r8, r3
 802c70a:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 802c70e:	00d2      	lsls	r2, r2, #3
 802c710:	fb0c 8c01 	mla	ip, ip, r1, r8
 802c714:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802c718:	b2d2      	uxtb	r2, r2
 802c71a:	fa1f fc8c 	uxth.w	ip, ip
 802c71e:	fa5f fe8e 	uxtb.w	lr, lr
 802c722:	fb12 f203 	smulbb	r2, r2, r3
 802c726:	b280      	uxth	r0, r0
 802c728:	fb0e 2201 	mla	r2, lr, r1, r2
 802c72c:	f10c 0801 	add.w	r8, ip, #1
 802c730:	b292      	uxth	r2, r2
 802c732:	eb08 2c1c 	add.w	ip, r8, ip, lsr #8
 802c736:	f100 0801 	add.w	r8, r0, #1
 802c73a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802c73e:	eb08 2010 	add.w	r0, r8, r0, lsr #8
 802c742:	1c51      	adds	r1, r2, #1
 802c744:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802c748:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802c74c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802c750:	ea4c 0c00 	orr.w	ip, ip, r0
 802c754:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802c758:	ea4c 0c02 	orr.w	ip, ip, r2
 802c75c:	f8a9 c000 	strh.w	ip, [r9]
 802c760:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802c762:	441c      	add	r4, r3
 802c764:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802c766:	f109 0902 	add.w	r9, r9, #2
 802c76a:	441e      	add	r6, r3
 802c76c:	f10b 3bff 	add.w	fp, fp, #4294967295
 802c770:	e5db      	b.n	802c32a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 802c772:	2800      	cmp	r0, #0
 802c774:	d089      	beq.n	802c68a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 802c776:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802c778:	442b      	add	r3, r5
 802c77a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802c77e:	07db      	lsls	r3, r3, #31
 802c780:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802c784:	bf54      	ite	pl
 802c786:	f00c 0c0f 	andpl.w	ip, ip, #15
 802c78a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802c78e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802c792:	fa5f f38c 	uxtb.w	r3, ip
 802c796:	930e      	str	r3, [sp, #56]	; 0x38
 802c798:	e777      	b.n	802c68a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 802c79a:	bf00      	nop
 802c79c:	200128ac 	.word	0x200128ac
 802c7a0:	b019      	add	sp, #100	; 0x64
 802c7a2:	ecbd 8b08 	vpop	{d8-d11}
 802c7a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c7aa:	bf00      	nop

0802c7ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 802c7ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802c7b0:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 802c7b4:	2c00      	cmp	r4, #0
 802c7b6:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802c7ba:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802c7be:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 802c7c2:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 802c7c6:	fb04 ce03 	mla	lr, r4, r3, ip
 802c7ca:	db60      	blt.n	802c88e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 802c7cc:	45a1      	cmp	r9, r4
 802c7ce:	dd5e      	ble.n	802c88e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 802c7d0:	f1bc 0f00 	cmp.w	ip, #0
 802c7d4:	db59      	blt.n	802c88a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 802c7d6:	45e0      	cmp	r8, ip
 802c7d8:	dd57      	ble.n	802c88a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 802c7da:	ea4f 005e 	mov.w	r0, lr, lsr #1
 802c7de:	f01e 0f01 	tst.w	lr, #1
 802c7e2:	5c16      	ldrb	r6, [r2, r0]
 802c7e4:	bf0c      	ite	eq
 802c7e6:	f006 060f 	andeq.w	r6, r6, #15
 802c7ea:	1136      	asrne	r6, r6, #4
 802c7ec:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802c7f0:	b2f6      	uxtb	r6, r6
 802c7f2:	f11c 0001 	adds.w	r0, ip, #1
 802c7f6:	d44d      	bmi.n	802c894 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 802c7f8:	4580      	cmp	r8, r0
 802c7fa:	dd4b      	ble.n	802c894 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 802c7fc:	2d00      	cmp	r5, #0
 802c7fe:	d04b      	beq.n	802c898 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xec>
 802c800:	f10e 0a01 	add.w	sl, lr, #1
 802c804:	ea4f 005a 	mov.w	r0, sl, lsr #1
 802c808:	f01a 0f01 	tst.w	sl, #1
 802c80c:	5c10      	ldrb	r0, [r2, r0]
 802c80e:	bf0c      	ite	eq
 802c810:	f000 000f 	andeq.w	r0, r0, #15
 802c814:	1100      	asrne	r0, r0, #4
 802c816:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802c81a:	b2c0      	uxtb	r0, r0
 802c81c:	3401      	adds	r4, #1
 802c81e:	d43f      	bmi.n	802c8a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 802c820:	45a1      	cmp	r9, r4
 802c822:	dd3d      	ble.n	802c8a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 802c824:	2f00      	cmp	r7, #0
 802c826:	f000 8097 	beq.w	802c958 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1ac>
 802c82a:	f1bc 0f00 	cmp.w	ip, #0
 802c82e:	db35      	blt.n	802c89c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 802c830:	45e0      	cmp	r8, ip
 802c832:	dd33      	ble.n	802c89c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 802c834:	eb03 090e 	add.w	r9, r3, lr
 802c838:	ea4f 0459 	mov.w	r4, r9, lsr #1
 802c83c:	f019 0f01 	tst.w	r9, #1
 802c840:	5d14      	ldrb	r4, [r2, r4]
 802c842:	bf0c      	ite	eq
 802c844:	f004 040f 	andeq.w	r4, r4, #15
 802c848:	1124      	asrne	r4, r4, #4
 802c84a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802c84e:	b2e4      	uxtb	r4, r4
 802c850:	f11c 0c01 	adds.w	ip, ip, #1
 802c854:	d427      	bmi.n	802c8a6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 802c856:	45e0      	cmp	r8, ip
 802c858:	dd25      	ble.n	802c8a6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 802c85a:	b335      	cbz	r5, 802c8aa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfe>
 802c85c:	3301      	adds	r3, #1
 802c85e:	449e      	add	lr, r3
 802c860:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802c864:	f01e 0f01 	tst.w	lr, #1
 802c868:	5cd2      	ldrb	r2, [r2, r3]
 802c86a:	bf0c      	ite	eq
 802c86c:	f002 020f 	andeq.w	r2, r2, #15
 802c870:	1112      	asrne	r2, r2, #4
 802c872:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802c876:	b2d3      	uxtb	r3, r2
 802c878:	2d0f      	cmp	r5, #15
 802c87a:	d917      	bls.n	802c8ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x100>
 802c87c:	4b39      	ldr	r3, [pc, #228]	; (802c964 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b8>)
 802c87e:	4a3a      	ldr	r2, [pc, #232]	; (802c968 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1bc>)
 802c880:	483a      	ldr	r0, [pc, #232]	; (802c96c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1c0>)
 802c882:	f240 210d 	movw	r1, #525	; 0x20d
 802c886:	f001 fcef 	bl	802e268 <__assert_func>
 802c88a:	2600      	movs	r6, #0
 802c88c:	e7b1      	b.n	802c7f2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x46>
 802c88e:	2000      	movs	r0, #0
 802c890:	4606      	mov	r6, r0
 802c892:	e7c3      	b.n	802c81c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 802c894:	2000      	movs	r0, #0
 802c896:	e7c1      	b.n	802c81c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 802c898:	4628      	mov	r0, r5
 802c89a:	e7bf      	b.n	802c81c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 802c89c:	2400      	movs	r4, #0
 802c89e:	e7d7      	b.n	802c850 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xa4>
 802c8a0:	2300      	movs	r3, #0
 802c8a2:	461c      	mov	r4, r3
 802c8a4:	e7e8      	b.n	802c878 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 802c8a6:	2300      	movs	r3, #0
 802c8a8:	e7e6      	b.n	802c878 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 802c8aa:	462b      	mov	r3, r5
 802c8ac:	2f0f      	cmp	r7, #15
 802c8ae:	d8e5      	bhi.n	802c87c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 802c8b0:	b2ad      	uxth	r5, r5
 802c8b2:	b2bf      	uxth	r7, r7
 802c8b4:	fb05 fc07 	mul.w	ip, r5, r7
 802c8b8:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 802c8bc:	012d      	lsls	r5, r5, #4
 802c8be:	b2bf      	uxth	r7, r7
 802c8c0:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 802c8c4:	eba5 050c 	sub.w	r5, r5, ip
 802c8c8:	1bd2      	subs	r2, r2, r7
 802c8ca:	b2ad      	uxth	r5, r5
 802c8cc:	b292      	uxth	r2, r2
 802c8ce:	4368      	muls	r0, r5
 802c8d0:	fb06 0002 	mla	r0, r6, r2, r0
 802c8d4:	fb07 0404 	mla	r4, r7, r4, r0
 802c8d8:	fb0c 4303 	mla	r3, ip, r3, r4
 802c8dc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802c8e0:	2b00      	cmp	r3, #0
 802c8e2:	d037      	beq.n	802c954 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>
 802c8e4:	4a22      	ldr	r2, [pc, #136]	; (802c970 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1c4>)
 802c8e6:	6816      	ldr	r6, [r2, #0]
 802c8e8:	880a      	ldrh	r2, [r1, #0]
 802c8ea:	b298      	uxth	r0, r3
 802c8ec:	1215      	asrs	r5, r2, #8
 802c8ee:	43db      	mvns	r3, r3
 802c8f0:	b2db      	uxtb	r3, r3
 802c8f2:	0a34      	lsrs	r4, r6, #8
 802c8f4:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802c8f8:	fb15 f503 	smulbb	r5, r5, r3
 802c8fc:	10d7      	asrs	r7, r2, #3
 802c8fe:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802c902:	fb04 5400 	mla	r4, r4, r0, r5
 802c906:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802c90a:	08f5      	lsrs	r5, r6, #3
 802c90c:	fb17 f703 	smulbb	r7, r7, r3
 802c910:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802c914:	00d2      	lsls	r2, r2, #3
 802c916:	fb05 7500 	mla	r5, r5, r0, r7
 802c91a:	b2d2      	uxtb	r2, r2
 802c91c:	00f6      	lsls	r6, r6, #3
 802c91e:	fb12 f303 	smulbb	r3, r2, r3
 802c922:	b2ad      	uxth	r5, r5
 802c924:	b2f6      	uxtb	r6, r6
 802c926:	b2a4      	uxth	r4, r4
 802c928:	fb06 3000 	mla	r0, r6, r0, r3
 802c92c:	1c6b      	adds	r3, r5, #1
 802c92e:	b280      	uxth	r0, r0
 802c930:	1c62      	adds	r2, r4, #1
 802c932:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 802c936:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 802c93a:	095b      	lsrs	r3, r3, #5
 802c93c:	1c42      	adds	r2, r0, #1
 802c93e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802c942:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802c946:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802c94a:	4323      	orrs	r3, r4
 802c94c:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802c950:	4303      	orrs	r3, r0
 802c952:	800b      	strh	r3, [r1, #0]
 802c954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c958:	2d0f      	cmp	r5, #15
 802c95a:	d88f      	bhi.n	802c87c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 802c95c:	463b      	mov	r3, r7
 802c95e:	463c      	mov	r4, r7
 802c960:	e7a6      	b.n	802c8b0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x104>
 802c962:	bf00      	nop
 802c964:	08034370 	.word	0x08034370
 802c968:	080348c9 	.word	0x080348c9
 802c96c:	080343f8 	.word	0x080343f8
 802c970:	200128ac 	.word	0x200128ac

0802c974 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802c974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c978:	ed2d 8b08 	vpush	{d8-d11}
 802c97c:	b095      	sub	sp, #84	; 0x54
 802c97e:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 802c982:	9306      	str	r3, [sp, #24]
 802c984:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 802c988:	9307      	str	r3, [sp, #28]
 802c98a:	920d      	str	r2, [sp, #52]	; 0x34
 802c98c:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 802c990:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802c992:	910a      	str	r1, [sp, #40]	; 0x28
 802c994:	9308      	str	r3, [sp, #32]
 802c996:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 802c99a:	9013      	str	r0, [sp, #76]	; 0x4c
 802c99c:	6850      	ldr	r0, [r2, #4]
 802c99e:	6812      	ldr	r2, [r2, #0]
 802c9a0:	fb00 1303 	mla	r3, r0, r3, r1
 802c9a4:	eb02 0b43 	add.w	fp, r2, r3, lsl #1
 802c9a8:	9b07      	ldr	r3, [sp, #28]
 802c9aa:	3301      	adds	r3, #1
 802c9ac:	f023 0301 	bic.w	r3, r3, #1
 802c9b0:	9309      	str	r3, [sp, #36]	; 0x24
 802c9b2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802c9b4:	681f      	ldr	r7, [r3, #0]
 802c9b6:	eeb0 aa40 	vmov.f32	s20, s0
 802c9ba:	eef0 9a60 	vmov.f32	s19, s1
 802c9be:	eeb0 9a41 	vmov.f32	s18, s2
 802c9c2:	eeb0 8a62 	vmov.f32	s16, s5
 802c9c6:	eef0 8a43 	vmov.f32	s17, s6
 802c9ca:	eef0 ba44 	vmov.f32	s23, s8
 802c9ce:	eeb0 ba64 	vmov.f32	s22, s9
 802c9d2:	eef0 aa45 	vmov.f32	s21, s10
 802c9d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802c9d8:	2b00      	cmp	r3, #0
 802c9da:	dc03      	bgt.n	802c9e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 802c9dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802c9de:	2b00      	cmp	r3, #0
 802c9e0:	f340 825c 	ble.w	802ce9c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x528>
 802c9e4:	9b06      	ldr	r3, [sp, #24]
 802c9e6:	2b00      	cmp	r3, #0
 802c9e8:	f340 8119 	ble.w	802cc1e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2aa>
 802c9ec:	1422      	asrs	r2, r4, #16
 802c9ee:	ea4f 4326 	mov.w	r3, r6, asr #16
 802c9f2:	d42d      	bmi.n	802ca50 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 802c9f4:	9807      	ldr	r0, [sp, #28]
 802c9f6:	1c51      	adds	r1, r2, #1
 802c9f8:	4288      	cmp	r0, r1
 802c9fa:	dd2c      	ble.n	802ca56 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 802c9fc:	2b00      	cmp	r3, #0
 802c9fe:	db2a      	blt.n	802ca56 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 802ca00:	9808      	ldr	r0, [sp, #32]
 802ca02:	1c59      	adds	r1, r3, #1
 802ca04:	4288      	cmp	r0, r1
 802ca06:	dd26      	ble.n	802ca56 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 802ca08:	9b06      	ldr	r3, [sp, #24]
 802ca0a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802ca0c:	3b01      	subs	r3, #1
 802ca0e:	fb02 4203 	mla	r2, r2, r3, r4
 802ca12:	1412      	asrs	r2, r2, #16
 802ca14:	d42a      	bmi.n	802ca6c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 802ca16:	9907      	ldr	r1, [sp, #28]
 802ca18:	3201      	adds	r2, #1
 802ca1a:	4291      	cmp	r1, r2
 802ca1c:	dd26      	ble.n	802ca6c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 802ca1e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802ca20:	fb02 6303 	mla	r3, r2, r3, r6
 802ca24:	141b      	asrs	r3, r3, #16
 802ca26:	d421      	bmi.n	802ca6c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 802ca28:	9a08      	ldr	r2, [sp, #32]
 802ca2a:	3301      	adds	r3, #1
 802ca2c:	429a      	cmp	r2, r3
 802ca2e:	dd1d      	ble.n	802ca6c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 802ca30:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 802ca34:	f8dd a018 	ldr.w	sl, [sp, #24]
 802ca38:	930e      	str	r3, [sp, #56]	; 0x38
 802ca3a:	46d8      	mov	r8, fp
 802ca3c:	f1ba 0f00 	cmp.w	sl, #0
 802ca40:	f300 8161 	bgt.w	802cd06 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 802ca44:	9b06      	ldr	r3, [sp, #24]
 802ca46:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802ca4a:	eb0b 0b45 	add.w	fp, fp, r5, lsl #1
 802ca4e:	e0e8      	b.n	802cc22 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ae>
 802ca50:	1c51      	adds	r1, r2, #1
 802ca52:	f040 80da 	bne.w	802cc0a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 802ca56:	9907      	ldr	r1, [sp, #28]
 802ca58:	4291      	cmp	r1, r2
 802ca5a:	f340 80d6 	ble.w	802cc0a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 802ca5e:	1c5a      	adds	r2, r3, #1
 802ca60:	f2c0 80d3 	blt.w	802cc0a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 802ca64:	9a08      	ldr	r2, [sp, #32]
 802ca66:	4293      	cmp	r3, r2
 802ca68:	f280 80cf 	bge.w	802cc0a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 802ca6c:	f8dd 9018 	ldr.w	r9, [sp, #24]
 802ca70:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 802ca74:	46d8      	mov	r8, fp
 802ca76:	f1b9 0f00 	cmp.w	r9, #0
 802ca7a:	dde3      	ble.n	802ca44 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 802ca7c:	1420      	asrs	r0, r4, #16
 802ca7e:	ea4f 4326 	mov.w	r3, r6, asr #16
 802ca82:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802ca86:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802ca8a:	f100 8124 	bmi.w	802ccd6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x362>
 802ca8e:	9d07      	ldr	r5, [sp, #28]
 802ca90:	f100 0c01 	add.w	ip, r0, #1
 802ca94:	4565      	cmp	r5, ip
 802ca96:	f340 8120 	ble.w	802ccda <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x366>
 802ca9a:	2b00      	cmp	r3, #0
 802ca9c:	f2c0 811d 	blt.w	802ccda <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x366>
 802caa0:	9d08      	ldr	r5, [sp, #32]
 802caa2:	f103 0c01 	add.w	ip, r3, #1
 802caa6:	4565      	cmp	r5, ip
 802caa8:	f340 8117 	ble.w	802ccda <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x366>
 802caac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802caae:	fb03 0305 	mla	r3, r3, r5, r0
 802cab2:	0858      	lsrs	r0, r3, #1
 802cab4:	07dd      	lsls	r5, r3, #31
 802cab6:	5c38      	ldrb	r0, [r7, r0]
 802cab8:	bf54      	ite	pl
 802caba:	f000 000f 	andpl.w	r0, r0, #15
 802cabe:	1100      	asrmi	r0, r0, #4
 802cac0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802cac4:	b2c0      	uxtb	r0, r0
 802cac6:	2a00      	cmp	r2, #0
 802cac8:	f000 80ea 	beq.w	802cca0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32c>
 802cacc:	f103 0e01 	add.w	lr, r3, #1
 802cad0:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802cad4:	f01e 0f01 	tst.w	lr, #1
 802cad8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802cadc:	bf0c      	ite	eq
 802cade:	f00c 0c0f 	andeq.w	ip, ip, #15
 802cae2:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802cae6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802caea:	fa5f fc8c 	uxtb.w	ip, ip
 802caee:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 802caf2:	b1f9      	cbz	r1, 802cb34 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 802caf4:	4453      	add	r3, sl
 802caf6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802cafa:	07dd      	lsls	r5, r3, #31
 802cafc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802cb00:	bf54      	ite	pl
 802cb02:	f00c 0c0f 	andpl.w	ip, ip, #15
 802cb06:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802cb0a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802cb0e:	3301      	adds	r3, #1
 802cb10:	fa5f fc8c 	uxtb.w	ip, ip
 802cb14:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 802cb18:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802cb1c:	07dd      	lsls	r5, r3, #31
 802cb1e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802cb22:	bf54      	ite	pl
 802cb24:	f00c 030f 	andpl.w	r3, ip, #15
 802cb28:	ea4f 132c 	movmi.w	r3, ip, asr #4
 802cb2c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802cb30:	b2db      	uxtb	r3, r3
 802cb32:	9310      	str	r3, [sp, #64]	; 0x40
 802cb34:	b292      	uxth	r2, r2
 802cb36:	b289      	uxth	r1, r1
 802cb38:	fb02 f301 	mul.w	r3, r2, r1
 802cb3c:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802cb40:	0112      	lsls	r2, r2, #4
 802cb42:	b289      	uxth	r1, r1
 802cb44:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 802cb48:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802cb4a:	1ad2      	subs	r2, r2, r3
 802cb4c:	ebac 0c01 	sub.w	ip, ip, r1
 802cb50:	b292      	uxth	r2, r2
 802cb52:	436a      	muls	r2, r5
 802cb54:	fa1f fc8c 	uxth.w	ip, ip
 802cb58:	fb00 200c 	mla	r0, r0, ip, r2
 802cb5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802cb5e:	fb01 0102 	mla	r1, r1, r2, r0
 802cb62:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802cb64:	fb03 1302 	mla	r3, r3, r2, r1
 802cb68:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802cb6c:	2b00      	cmp	r3, #0
 802cb6e:	d043      	beq.n	802cbf8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x284>
 802cb70:	4ac9      	ldr	r2, [pc, #804]	; (802ce98 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x524>)
 802cb72:	6811      	ldr	r1, [r2, #0]
 802cb74:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 802cb78:	08ca      	lsrs	r2, r1, #3
 802cb7a:	00c9      	lsls	r1, r1, #3
 802cb7c:	b2c9      	uxtb	r1, r1
 802cb7e:	2bff      	cmp	r3, #255	; 0xff
 802cb80:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 802cb84:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802cb88:	460d      	mov	r5, r1
 802cb8a:	f000 809c 	beq.w	802ccc6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x352>
 802cb8e:	f8b8 c000 	ldrh.w	ip, [r8]
 802cb92:	b299      	uxth	r1, r3
 802cb94:	ea4f 202c 	mov.w	r0, ip, asr #8
 802cb98:	43db      	mvns	r3, r3
 802cb9a:	b2db      	uxtb	r3, r3
 802cb9c:	fb1e fe01 	smulbb	lr, lr, r1
 802cba0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802cba4:	fb00 e003 	mla	r0, r0, r3, lr
 802cba8:	ea4f 0eec 	mov.w	lr, ip, asr #3
 802cbac:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 802cbb0:	fb12 f201 	smulbb	r2, r2, r1
 802cbb4:	fb0e 2203 	mla	r2, lr, r3, r2
 802cbb8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802cbbc:	b292      	uxth	r2, r2
 802cbbe:	fb15 f101 	smulbb	r1, r5, r1
 802cbc2:	fa5f fc8c 	uxtb.w	ip, ip
 802cbc6:	b280      	uxth	r0, r0
 802cbc8:	fb0c 1303 	mla	r3, ip, r3, r1
 802cbcc:	f102 0e01 	add.w	lr, r2, #1
 802cbd0:	b29b      	uxth	r3, r3
 802cbd2:	1c41      	adds	r1, r0, #1
 802cbd4:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 802cbd8:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802cbdc:	0952      	lsrs	r2, r2, #5
 802cbde:	1c59      	adds	r1, r3, #1
 802cbe0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802cbe4:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802cbe8:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802cbec:	4310      	orrs	r0, r2
 802cbee:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802cbf2:	4318      	orrs	r0, r3
 802cbf4:	f8a8 0000 	strh.w	r0, [r8]
 802cbf8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802cbfa:	441c      	add	r4, r3
 802cbfc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802cbfe:	f108 0802 	add.w	r8, r8, #2
 802cc02:	441e      	add	r6, r3
 802cc04:	f109 39ff 	add.w	r9, r9, #4294967295
 802cc08:	e735      	b.n	802ca76 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 802cc0a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802cc0c:	441c      	add	r4, r3
 802cc0e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802cc10:	441e      	add	r6, r3
 802cc12:	9b06      	ldr	r3, [sp, #24]
 802cc14:	3b01      	subs	r3, #1
 802cc16:	9306      	str	r3, [sp, #24]
 802cc18:	f10b 0b02 	add.w	fp, fp, #2
 802cc1c:	e6e2      	b.n	802c9e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 802cc1e:	f47f aef3 	bne.w	802ca08 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 802cc22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802cc24:	2b00      	cmp	r3, #0
 802cc26:	f340 8139 	ble.w	802ce9c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x528>
 802cc2a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802cc2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802cc32:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802cc36:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802cc38:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802cc3c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802cc40:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802cc44:	eef0 6a48 	vmov.f32	s13, s16
 802cc48:	ee69 7a27 	vmul.f32	s15, s18, s15
 802cc4c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802cc50:	ee37 8a48 	vsub.f32	s16, s14, s16
 802cc54:	ee16 4a90 	vmov	r4, s13
 802cc58:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802cc5c:	eef0 6a68 	vmov.f32	s13, s17
 802cc60:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802cc64:	ee18 2a10 	vmov	r2, s16
 802cc68:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802cc6c:	fb92 f3f3 	sdiv	r3, r2, r3
 802cc70:	ee18 2a90 	vmov	r2, s17
 802cc74:	9329      	str	r3, [sp, #164]	; 0xa4
 802cc76:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802cc78:	fb92 f3f3 	sdiv	r3, r2, r3
 802cc7c:	932a      	str	r3, [sp, #168]	; 0xa8
 802cc7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802cc80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802cc82:	3b01      	subs	r3, #1
 802cc84:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802cc88:	930a      	str	r3, [sp, #40]	; 0x28
 802cc8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802cc8c:	bf08      	it	eq
 802cc8e:	4613      	moveq	r3, r2
 802cc90:	ee16 6a90 	vmov	r6, s13
 802cc94:	9306      	str	r3, [sp, #24]
 802cc96:	eef0 8a67 	vmov.f32	s17, s15
 802cc9a:	eeb0 8a47 	vmov.f32	s16, s14
 802cc9e:	e69a      	b.n	802c9d6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 802cca0:	2900      	cmp	r1, #0
 802cca2:	f43f af47 	beq.w	802cb34 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 802cca6:	4453      	add	r3, sl
 802cca8:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802ccac:	07db      	lsls	r3, r3, #31
 802ccae:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802ccb2:	bf54      	ite	pl
 802ccb4:	f00c 030f 	andpl.w	r3, ip, #15
 802ccb8:	ea4f 132c 	movmi.w	r3, ip, asr #4
 802ccbc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802ccc0:	b2db      	uxtb	r3, r3
 802ccc2:	930b      	str	r3, [sp, #44]	; 0x2c
 802ccc4:	e736      	b.n	802cb34 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 802ccc6:	00d2      	lsls	r2, r2, #3
 802ccc8:	ea42 2e0e 	orr.w	lr, r2, lr, lsl #8
 802cccc:	ea4e 01d1 	orr.w	r1, lr, r1, lsr #3
 802ccd0:	f8a8 1000 	strh.w	r1, [r8]
 802ccd4:	e790      	b.n	802cbf8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x284>
 802ccd6:	1c45      	adds	r5, r0, #1
 802ccd8:	d18e      	bne.n	802cbf8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x284>
 802ccda:	9d07      	ldr	r5, [sp, #28]
 802ccdc:	4285      	cmp	r5, r0
 802ccde:	dd8b      	ble.n	802cbf8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x284>
 802cce0:	1c5d      	adds	r5, r3, #1
 802cce2:	db89      	blt.n	802cbf8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x284>
 802cce4:	9d08      	ldr	r5, [sp, #32]
 802cce6:	429d      	cmp	r5, r3
 802cce8:	dd86      	ble.n	802cbf8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x284>
 802ccea:	e9cd 0302 	strd	r0, r3, [sp, #8]
 802ccee:	9b07      	ldr	r3, [sp, #28]
 802ccf0:	9300      	str	r3, [sp, #0]
 802ccf2:	e9cd 2104 	strd	r2, r1, [sp, #16]
 802ccf6:	9501      	str	r5, [sp, #4]
 802ccf8:	4653      	mov	r3, sl
 802ccfa:	463a      	mov	r2, r7
 802ccfc:	4641      	mov	r1, r8
 802ccfe:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802cd00:	f7ff fd54 	bl	802c7ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 802cd04:	e778      	b.n	802cbf8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x284>
 802cd06:	9909      	ldr	r1, [sp, #36]	; 0x24
 802cd08:	1422      	asrs	r2, r4, #16
 802cd0a:	1433      	asrs	r3, r6, #16
 802cd0c:	fb01 2303 	mla	r3, r1, r3, r2
 802cd10:	085a      	lsrs	r2, r3, #1
 802cd12:	07d9      	lsls	r1, r3, #31
 802cd14:	5cba      	ldrb	r2, [r7, r2]
 802cd16:	bf54      	ite	pl
 802cd18:	f002 020f 	andpl.w	r2, r2, #15
 802cd1c:	1112      	asrmi	r2, r2, #4
 802cd1e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802cd22:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802cd26:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802cd2a:	b2d2      	uxtb	r2, r2
 802cd2c:	2800      	cmp	r0, #0
 802cd2e:	f000 8099 	beq.w	802ce64 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>
 802cd32:	f103 0e01 	add.w	lr, r3, #1
 802cd36:	ea4f 015e 	mov.w	r1, lr, lsr #1
 802cd3a:	f01e 0f01 	tst.w	lr, #1
 802cd3e:	5c79      	ldrb	r1, [r7, r1]
 802cd40:	bf0c      	ite	eq
 802cd42:	f001 010f 	andeq.w	r1, r1, #15
 802cd46:	1109      	asrne	r1, r1, #4
 802cd48:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802cd4c:	b2c9      	uxtb	r1, r1
 802cd4e:	9111      	str	r1, [sp, #68]	; 0x44
 802cd50:	f1bc 0f00 	cmp.w	ip, #0
 802cd54:	d018      	beq.n	802cd88 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 802cd56:	990e      	ldr	r1, [sp, #56]	; 0x38
 802cd58:	440b      	add	r3, r1
 802cd5a:	0859      	lsrs	r1, r3, #1
 802cd5c:	07dd      	lsls	r5, r3, #31
 802cd5e:	5c79      	ldrb	r1, [r7, r1]
 802cd60:	bf54      	ite	pl
 802cd62:	f001 010f 	andpl.w	r1, r1, #15
 802cd66:	1109      	asrmi	r1, r1, #4
 802cd68:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802cd6c:	b2c9      	uxtb	r1, r1
 802cd6e:	3301      	adds	r3, #1
 802cd70:	910c      	str	r1, [sp, #48]	; 0x30
 802cd72:	0859      	lsrs	r1, r3, #1
 802cd74:	07dd      	lsls	r5, r3, #31
 802cd76:	5c79      	ldrb	r1, [r7, r1]
 802cd78:	bf54      	ite	pl
 802cd7a:	f001 010f 	andpl.w	r1, r1, #15
 802cd7e:	1109      	asrmi	r1, r1, #4
 802cd80:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802cd84:	b2c9      	uxtb	r1, r1
 802cd86:	9112      	str	r1, [sp, #72]	; 0x48
 802cd88:	b280      	uxth	r0, r0
 802cd8a:	fa1f fc8c 	uxth.w	ip, ip
 802cd8e:	fb00 f30c 	mul.w	r3, r0, ip
 802cd92:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 802cd96:	0100      	lsls	r0, r0, #4
 802cd98:	fa1f fc8c 	uxth.w	ip, ip
 802cd9c:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 802cda0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802cda2:	1ac0      	subs	r0, r0, r3
 802cda4:	eba1 010c 	sub.w	r1, r1, ip
 802cda8:	b280      	uxth	r0, r0
 802cdaa:	b289      	uxth	r1, r1
 802cdac:	4368      	muls	r0, r5
 802cdae:	fb02 0201 	mla	r2, r2, r1, r0
 802cdb2:	990c      	ldr	r1, [sp, #48]	; 0x30
 802cdb4:	fb0c 2c01 	mla	ip, ip, r1, r2
 802cdb8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802cdba:	fb03 c302 	mla	r3, r3, r2, ip
 802cdbe:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802cdc2:	2b00      	cmp	r3, #0
 802cdc4:	d045      	beq.n	802ce52 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4de>
 802cdc6:	4a34      	ldr	r2, [pc, #208]	; (802ce98 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x524>)
 802cdc8:	6811      	ldr	r1, [r2, #0]
 802cdca:	2bff      	cmp	r3, #255	; 0xff
 802cdcc:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 802cdd0:	ea4f 02d1 	mov.w	r2, r1, lsr #3
 802cdd4:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 802cdd8:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 802cddc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802cde0:	b2c9      	uxtb	r1, r1
 802cde2:	d050      	beq.n	802ce86 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x512>
 802cde4:	f8b8 c000 	ldrh.w	ip, [r8]
 802cde8:	fa1f f983 	uxth.w	r9, r3
 802cdec:	ea4f 202c 	mov.w	r0, ip, asr #8
 802cdf0:	43db      	mvns	r3, r3
 802cdf2:	b2db      	uxtb	r3, r3
 802cdf4:	fb1e fe09 	smulbb	lr, lr, r9
 802cdf8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802cdfc:	fb00 e003 	mla	r0, r0, r3, lr
 802ce00:	ea4f 0eec 	mov.w	lr, ip, asr #3
 802ce04:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 802ce08:	fb12 f209 	smulbb	r2, r2, r9
 802ce0c:	fb0e 2203 	mla	r2, lr, r3, r2
 802ce10:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802ce14:	b292      	uxth	r2, r2
 802ce16:	fa5f fc8c 	uxtb.w	ip, ip
 802ce1a:	fb11 f109 	smulbb	r1, r1, r9
 802ce1e:	b280      	uxth	r0, r0
 802ce20:	fb0c 1103 	mla	r1, ip, r3, r1
 802ce24:	f102 0e01 	add.w	lr, r2, #1
 802ce28:	b289      	uxth	r1, r1
 802ce2a:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 802ce2e:	f100 0e01 	add.w	lr, r0, #1
 802ce32:	0952      	lsrs	r2, r2, #5
 802ce34:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 802ce38:	1c4b      	adds	r3, r1, #1
 802ce3a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802ce3e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802ce42:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802ce46:	4302      	orrs	r2, r0
 802ce48:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802ce4c:	430a      	orrs	r2, r1
 802ce4e:	f8a8 2000 	strh.w	r2, [r8]
 802ce52:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802ce54:	441c      	add	r4, r3
 802ce56:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802ce58:	f108 0802 	add.w	r8, r8, #2
 802ce5c:	441e      	add	r6, r3
 802ce5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 802ce62:	e5eb      	b.n	802ca3c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 802ce64:	f1bc 0f00 	cmp.w	ip, #0
 802ce68:	d08e      	beq.n	802cd88 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 802ce6a:	990e      	ldr	r1, [sp, #56]	; 0x38
 802ce6c:	440b      	add	r3, r1
 802ce6e:	0859      	lsrs	r1, r3, #1
 802ce70:	07db      	lsls	r3, r3, #31
 802ce72:	5c79      	ldrb	r1, [r7, r1]
 802ce74:	bf54      	ite	pl
 802ce76:	f001 010f 	andpl.w	r1, r1, #15
 802ce7a:	1109      	asrmi	r1, r1, #4
 802ce7c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802ce80:	b2c9      	uxtb	r1, r1
 802ce82:	910c      	str	r1, [sp, #48]	; 0x30
 802ce84:	e780      	b.n	802cd88 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 802ce86:	00d2      	lsls	r2, r2, #3
 802ce88:	ea42 2e0e 	orr.w	lr, r2, lr, lsl #8
 802ce8c:	ea4e 01d1 	orr.w	r1, lr, r1, lsr #3
 802ce90:	f8a8 1000 	strh.w	r1, [r8]
 802ce94:	e7dd      	b.n	802ce52 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4de>
 802ce96:	bf00      	nop
 802ce98:	200128ac 	.word	0x200128ac
 802ce9c:	b015      	add	sp, #84	; 0x54
 802ce9e:	ecbd 8b08 	vpop	{d8-d11}
 802cea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802cea6:	bf00      	nop

0802cea8 <CRC_Lock>:
 802cea8:	b530      	push	{r4, r5, lr}
 802ceaa:	4a1d      	ldr	r2, [pc, #116]	; (802cf20 <CRC_Lock+0x78>)
 802ceac:	6813      	ldr	r3, [r2, #0]
 802ceae:	f023 0301 	bic.w	r3, r3, #1
 802ceb2:	6013      	str	r3, [r2, #0]
 802ceb4:	4b1b      	ldr	r3, [pc, #108]	; (802cf24 <CRC_Lock+0x7c>)
 802ceb6:	681a      	ldr	r2, [r3, #0]
 802ceb8:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 802cebc:	4022      	ands	r2, r4
 802cebe:	f24c 2540 	movw	r5, #49728	; 0xc240
 802cec2:	42aa      	cmp	r2, r5
 802cec4:	d005      	beq.n	802ced2 <CRC_Lock+0x2a>
 802cec6:	681b      	ldr	r3, [r3, #0]
 802cec8:	f24c 2270 	movw	r2, #49776	; 0xc270
 802cecc:	4023      	ands	r3, r4
 802cece:	4293      	cmp	r3, r2
 802ced0:	d11d      	bne.n	802cf0e <CRC_Lock+0x66>
 802ced2:	4b15      	ldr	r3, [pc, #84]	; (802cf28 <CRC_Lock+0x80>)
 802ced4:	681b      	ldr	r3, [r3, #0]
 802ced6:	b9d3      	cbnz	r3, 802cf0e <CRC_Lock+0x66>
 802ced8:	4a14      	ldr	r2, [pc, #80]	; (802cf2c <CRC_Lock+0x84>)
 802ceda:	6813      	ldr	r3, [r2, #0]
 802cedc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802cee0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 802cee4:	d006      	beq.n	802cef4 <CRC_Lock+0x4c>
 802cee6:	6813      	ldr	r3, [r2, #0]
 802cee8:	f240 4283 	movw	r2, #1155	; 0x483
 802ceec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802cef0:	4293      	cmp	r3, r2
 802cef2:	d10c      	bne.n	802cf0e <CRC_Lock+0x66>
 802cef4:	4b0e      	ldr	r3, [pc, #56]	; (802cf30 <CRC_Lock+0x88>)
 802cef6:	2201      	movs	r2, #1
 802cef8:	601a      	str	r2, [r3, #0]
 802cefa:	681a      	ldr	r2, [r3, #0]
 802cefc:	2a00      	cmp	r2, #0
 802cefe:	d1fc      	bne.n	802cefa <CRC_Lock+0x52>
 802cf00:	4b0c      	ldr	r3, [pc, #48]	; (802cf34 <CRC_Lock+0x8c>)
 802cf02:	6018      	str	r0, [r3, #0]
 802cf04:	6818      	ldr	r0, [r3, #0]
 802cf06:	1a43      	subs	r3, r0, r1
 802cf08:	4258      	negs	r0, r3
 802cf0a:	4158      	adcs	r0, r3
 802cf0c:	bd30      	pop	{r4, r5, pc}
 802cf0e:	4b0a      	ldr	r3, [pc, #40]	; (802cf38 <CRC_Lock+0x90>)
 802cf10:	2201      	movs	r2, #1
 802cf12:	601a      	str	r2, [r3, #0]
 802cf14:	681a      	ldr	r2, [r3, #0]
 802cf16:	2a00      	cmp	r2, #0
 802cf18:	d1fc      	bne.n	802cf14 <CRC_Lock+0x6c>
 802cf1a:	4b08      	ldr	r3, [pc, #32]	; (802cf3c <CRC_Lock+0x94>)
 802cf1c:	e7f1      	b.n	802cf02 <CRC_Lock+0x5a>
 802cf1e:	bf00      	nop
 802cf20:	e0002000 	.word	0xe0002000
 802cf24:	e000ed00 	.word	0xe000ed00
 802cf28:	e0042000 	.word	0xe0042000
 802cf2c:	5c001000 	.word	0x5c001000
 802cf30:	58024c08 	.word	0x58024c08
 802cf34:	58024c00 	.word	0x58024c00
 802cf38:	40023008 	.word	0x40023008
 802cf3c:	40023000 	.word	0x40023000

0802cf40 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802cf40:	6101      	str	r1, [r0, #16]
 802cf42:	4770      	bx	lr

0802cf44 <_ZN8touchgfx8Gestures4tickEv>:
 802cf44:	7b83      	ldrb	r3, [r0, #14]
 802cf46:	b14b      	cbz	r3, 802cf5c <_ZN8touchgfx8Gestures4tickEv+0x18>
 802cf48:	8903      	ldrh	r3, [r0, #8]
 802cf4a:	3301      	adds	r3, #1
 802cf4c:	b29b      	uxth	r3, r3
 802cf4e:	2b07      	cmp	r3, #7
 802cf50:	8103      	strh	r3, [r0, #8]
 802cf52:	bf81      	itttt	hi
 802cf54:	2300      	movhi	r3, #0
 802cf56:	8143      	strhhi	r3, [r0, #10]
 802cf58:	8183      	strhhi	r3, [r0, #12]
 802cf5a:	7383      	strbhi	r3, [r0, #14]
 802cf5c:	4770      	bx	lr
	...

0802cf60 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 802cf60:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802cf64:	4604      	mov	r4, r0
 802cf66:	8880      	ldrh	r0, [r0, #4]
 802cf68:	f8ad 0006 	strh.w	r0, [sp, #6]
 802cf6c:	4698      	mov	r8, r3
 802cf6e:	eba8 0000 	sub.w	r0, r8, r0
 802cf72:	4b1c      	ldr	r3, [pc, #112]	; (802cfe4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 802cf74:	9300      	str	r3, [sp, #0]
 802cf76:	b280      	uxth	r0, r0
 802cf78:	2300      	movs	r3, #0
 802cf7a:	f88d 3004 	strb.w	r3, [sp, #4]
 802cf7e:	b203      	sxth	r3, r0
 802cf80:	2b00      	cmp	r3, #0
 802cf82:	bfb8      	it	lt
 802cf84:	4240      	neglt	r0, r0
 802cf86:	4617      	mov	r7, r2
 802cf88:	8aa2      	ldrh	r2, [r4, #20]
 802cf8a:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 802cf8e:	f8ad 800a 	strh.w	r8, [sp, #10]
 802cf92:	bfb8      	it	lt
 802cf94:	b203      	sxthlt	r3, r0
 802cf96:	460e      	mov	r6, r1
 802cf98:	4293      	cmp	r3, r2
 802cf9a:	88e1      	ldrh	r1, [r4, #6]
 802cf9c:	f8ad 1008 	strh.w	r1, [sp, #8]
 802cfa0:	f8ad 500c 	strh.w	r5, [sp, #12]
 802cfa4:	dc08      	bgt.n	802cfb8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 802cfa6:	1a69      	subs	r1, r5, r1
 802cfa8:	b289      	uxth	r1, r1
 802cfaa:	b20b      	sxth	r3, r1
 802cfac:	2b00      	cmp	r3, #0
 802cfae:	bfbc      	itt	lt
 802cfb0:	4249      	neglt	r1, r1
 802cfb2:	b20b      	sxthlt	r3, r1
 802cfb4:	429a      	cmp	r2, r3
 802cfb6:	da13      	bge.n	802cfe0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 802cfb8:	6920      	ldr	r0, [r4, #16]
 802cfba:	6803      	ldr	r3, [r0, #0]
 802cfbc:	4669      	mov	r1, sp
 802cfbe:	685b      	ldr	r3, [r3, #4]
 802cfc0:	4798      	blx	r3
 802cfc2:	eba8 0606 	sub.w	r6, r8, r6
 802cfc6:	2300      	movs	r3, #0
 802cfc8:	1bef      	subs	r7, r5, r7
 802cfca:	2001      	movs	r0, #1
 802cfcc:	8123      	strh	r3, [r4, #8]
 802cfce:	8166      	strh	r6, [r4, #10]
 802cfd0:	81a7      	strh	r7, [r4, #12]
 802cfd2:	f8a4 8004 	strh.w	r8, [r4, #4]
 802cfd6:	80e5      	strh	r5, [r4, #6]
 802cfd8:	73a0      	strb	r0, [r4, #14]
 802cfda:	b004      	add	sp, #16
 802cfdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802cfe0:	2000      	movs	r0, #0
 802cfe2:	e7fa      	b.n	802cfda <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 802cfe4:	080326c0 	.word	0x080326c0

0802cfe8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802cfe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 802cfea:	461e      	mov	r6, r3
 802cfec:	1e4b      	subs	r3, r1, #1
 802cfee:	2b01      	cmp	r3, #1
 802cff0:	b085      	sub	sp, #20
 802cff2:	4604      	mov	r4, r0
 802cff4:	460d      	mov	r5, r1
 802cff6:	4617      	mov	r7, r2
 802cff8:	d84b      	bhi.n	802d092 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802cffa:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802cffe:	1cd3      	adds	r3, r2, #3
 802d000:	b29b      	uxth	r3, r3
 802d002:	2b06      	cmp	r3, #6
 802d004:	d916      	bls.n	802d034 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802d006:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 802d0a8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802d00a:	f8cd c004 	str.w	ip, [sp, #4]
 802d00e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802d012:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802d016:	6900      	ldr	r0, [r0, #16]
 802d018:	f8ad 100c 	strh.w	r1, [sp, #12]
 802d01c:	f04f 0c00 	mov.w	ip, #0
 802d020:	f88d c008 	strb.w	ip, [sp, #8]
 802d024:	f8ad 200a 	strh.w	r2, [sp, #10]
 802d028:	f8ad 300e 	strh.w	r3, [sp, #14]
 802d02c:	6803      	ldr	r3, [r0, #0]
 802d02e:	a901      	add	r1, sp, #4
 802d030:	689b      	ldr	r3, [r3, #8]
 802d032:	4798      	blx	r3
 802d034:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802d038:	1cd3      	adds	r3, r2, #3
 802d03a:	b29b      	uxth	r3, r3
 802d03c:	2b06      	cmp	r3, #6
 802d03e:	d916      	bls.n	802d06e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802d040:	f8df c064 	ldr.w	ip, [pc, #100]	; 802d0a8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802d044:	f8cd c004 	str.w	ip, [sp, #4]
 802d048:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802d04c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802d050:	6920      	ldr	r0, [r4, #16]
 802d052:	f8ad 100c 	strh.w	r1, [sp, #12]
 802d056:	f04f 0c01 	mov.w	ip, #1
 802d05a:	f88d c008 	strb.w	ip, [sp, #8]
 802d05e:	f8ad 200a 	strh.w	r2, [sp, #10]
 802d062:	f8ad 300e 	strh.w	r3, [sp, #14]
 802d066:	6803      	ldr	r3, [r0, #0]
 802d068:	a901      	add	r1, sp, #4
 802d06a:	689b      	ldr	r3, [r3, #8]
 802d06c:	4798      	blx	r3
 802d06e:	4b0d      	ldr	r3, [pc, #52]	; (802d0a4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 802d070:	9301      	str	r3, [sp, #4]
 802d072:	6920      	ldr	r0, [r4, #16]
 802d074:	f88d 5008 	strb.w	r5, [sp, #8]
 802d078:	2300      	movs	r3, #0
 802d07a:	f8ad 700a 	strh.w	r7, [sp, #10]
 802d07e:	f8ad 600c 	strh.w	r6, [sp, #12]
 802d082:	f8ad 300e 	strh.w	r3, [sp, #14]
 802d086:	6803      	ldr	r3, [r0, #0]
 802d088:	a901      	add	r1, sp, #4
 802d08a:	681b      	ldr	r3, [r3, #0]
 802d08c:	4798      	blx	r3
 802d08e:	b005      	add	sp, #20
 802d090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802d092:	2900      	cmp	r1, #0
 802d094:	d1eb      	bne.n	802d06e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802d096:	80a2      	strh	r2, [r4, #4]
 802d098:	80c6      	strh	r6, [r0, #6]
 802d09a:	60a1      	str	r1, [r4, #8]
 802d09c:	81a1      	strh	r1, [r4, #12]
 802d09e:	73a1      	strb	r1, [r4, #14]
 802d0a0:	e7e5      	b.n	802d06e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802d0a2:	bf00      	nop
 802d0a4:	080326ac 	.word	0x080326ac
 802d0a8:	08033850 	.word	0x08033850

0802d0ac <__aeabi_atexit>:
 802d0ac:	460b      	mov	r3, r1
 802d0ae:	4601      	mov	r1, r0
 802d0b0:	4618      	mov	r0, r3
 802d0b2:	f001 b8fd 	b.w	802e2b0 <__cxa_atexit>
 802d0b6:	bf00      	nop

0802d0b8 <__cxa_pure_virtual>:
 802d0b8:	b508      	push	{r3, lr}
 802d0ba:	221b      	movs	r2, #27
 802d0bc:	4902      	ldr	r1, [pc, #8]	; (802d0c8 <__cxa_pure_virtual+0x10>)
 802d0be:	2002      	movs	r0, #2
 802d0c0:	f001 feb2 	bl	802ee28 <write>
 802d0c4:	f000 f83a 	bl	802d13c <_ZSt9terminatev>
 802d0c8:	08034b04 	.word	0x08034b04

0802d0cc <_ZdlPvj>:
 802d0cc:	f000 b820 	b.w	802d110 <_ZdlPv>

0802d0d0 <__cxa_guard_acquire>:
 802d0d0:	b508      	push	{r3, lr}
 802d0d2:	6803      	ldr	r3, [r0, #0]
 802d0d4:	07db      	lsls	r3, r3, #31
 802d0d6:	d405      	bmi.n	802d0e4 <__cxa_guard_acquire+0x14>
 802d0d8:	7843      	ldrb	r3, [r0, #1]
 802d0da:	b92b      	cbnz	r3, 802d0e8 <__cxa_guard_acquire+0x18>
 802d0dc:	2301      	movs	r3, #1
 802d0de:	7043      	strb	r3, [r0, #1]
 802d0e0:	4618      	mov	r0, r3
 802d0e2:	bd08      	pop	{r3, pc}
 802d0e4:	2000      	movs	r0, #0
 802d0e6:	bd08      	pop	{r3, pc}
 802d0e8:	2004      	movs	r0, #4
 802d0ea:	f000 f8c9 	bl	802d280 <__cxa_allocate_exception>
 802d0ee:	4b03      	ldr	r3, [pc, #12]	; (802d0fc <__cxa_guard_acquire+0x2c>)
 802d0f0:	6003      	str	r3, [r0, #0]
 802d0f2:	4a03      	ldr	r2, [pc, #12]	; (802d100 <__cxa_guard_acquire+0x30>)
 802d0f4:	4903      	ldr	r1, [pc, #12]	; (802d104 <__cxa_guard_acquire+0x34>)
 802d0f6:	f000 fe09 	bl	802dd0c <__cxa_throw>
 802d0fa:	bf00      	nop
 802d0fc:	08034b58 	.word	0x08034b58
 802d100:	0802d5c1 	.word	0x0802d5c1
 802d104:	08034b20 	.word	0x08034b20

0802d108 <__cxa_guard_release>:
 802d108:	2301      	movs	r3, #1
 802d10a:	6003      	str	r3, [r0, #0]
 802d10c:	4770      	bx	lr
 802d10e:	bf00      	nop

0802d110 <_ZdlPv>:
 802d110:	f001 b9f8 	b.w	802e504 <free>

0802d114 <_ZN10__cxxabiv111__terminateEPFvvE>:
 802d114:	b508      	push	{r3, lr}
 802d116:	4780      	blx	r0
 802d118:	f001 f89e 	bl	802e258 <abort>
 802d11c:	f000 fe4a 	bl	802ddb4 <__cxa_begin_catch>
 802d120:	f001 f89a 	bl	802e258 <abort>
 802d124:	460d      	mov	r5, r1
 802d126:	4604      	mov	r4, r0
 802d128:	f000 fe84 	bl	802de34 <__cxa_end_catch>
 802d12c:	3501      	adds	r5, #1
 802d12e:	d001      	beq.n	802d134 <_ZN10__cxxabiv111__terminateEPFvvE+0x20>
 802d130:	f000 f97e 	bl	802d430 <__cxa_end_cleanup>
 802d134:	4620      	mov	r0, r4
 802d136:	f000 f90d 	bl	802d354 <__cxa_call_unexpected>
 802d13a:	bf00      	nop

0802d13c <_ZSt9terminatev>:
 802d13c:	b508      	push	{r3, lr}
 802d13e:	4b03      	ldr	r3, [pc, #12]	; (802d14c <_ZSt9terminatev+0x10>)
 802d140:	6818      	ldr	r0, [r3, #0]
 802d142:	f3bf 8f5b 	dmb	ish
 802d146:	f7ff ffe5 	bl	802d114 <_ZN10__cxxabiv111__terminateEPFvvE>
 802d14a:	bf00      	nop
 802d14c:	20000114 	.word	0x20000114

0802d150 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 802d150:	b508      	push	{r3, lr}
 802d152:	4780      	blx	r0
 802d154:	f7ff fff2 	bl	802d13c <_ZSt9terminatev>

0802d158 <_ZSt10unexpectedv>:
 802d158:	b508      	push	{r3, lr}
 802d15a:	4b03      	ldr	r3, [pc, #12]	; (802d168 <_ZSt10unexpectedv+0x10>)
 802d15c:	6818      	ldr	r0, [r3, #0]
 802d15e:	f3bf 8f5b 	dmb	ish
 802d162:	f7ff fff5 	bl	802d150 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 802d166:	bf00      	nop
 802d168:	20000110 	.word	0x20000110

0802d16c <_ZSt13get_terminatev>:
 802d16c:	4b02      	ldr	r3, [pc, #8]	; (802d178 <_ZSt13get_terminatev+0xc>)
 802d16e:	6818      	ldr	r0, [r3, #0]
 802d170:	f3bf 8f5b 	dmb	ish
 802d174:	4770      	bx	lr
 802d176:	bf00      	nop
 802d178:	20000114 	.word	0x20000114

0802d17c <_ZSt14get_unexpectedv>:
 802d17c:	4b02      	ldr	r3, [pc, #8]	; (802d188 <_ZSt14get_unexpectedv+0xc>)
 802d17e:	6818      	ldr	r0, [r3, #0]
 802d180:	f3bf 8f5b 	dmb	ish
 802d184:	4770      	bx	lr
 802d186:	bf00      	nop
 802d188:	20000110 	.word	0x20000110

0802d18c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
 802d18c:	b4f0      	push	{r4, r5, r6, r7}
 802d18e:	4c22      	ldr	r4, [pc, #136]	; (802d218 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x8c>)
 802d190:	6863      	ldr	r3, [r4, #4]
 802d192:	f1a0 0608 	sub.w	r6, r0, #8
 802d196:	b31b      	cbz	r3, 802d1e0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x54>
 802d198:	f850 7c08 	ldr.w	r7, [r0, #-8]
 802d19c:	19f5      	adds	r5, r6, r7
 802d19e:	42ab      	cmp	r3, r5
 802d1a0:	d81e      	bhi.n	802d1e0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x54>
 802d1a2:	d022      	beq.n	802d1ea <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x5e>
 802d1a4:	6859      	ldr	r1, [r3, #4]
 802d1a6:	2900      	cmp	r1, #0
 802d1a8:	d031      	beq.n	802d20e <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x82>
 802d1aa:	428d      	cmp	r5, r1
 802d1ac:	d303      	bcc.n	802d1b6 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x2a>
 802d1ae:	e02e      	b.n	802d20e <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x82>
 802d1b0:	4295      	cmp	r5, r2
 802d1b2:	d205      	bcs.n	802d1c0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x34>
 802d1b4:	4611      	mov	r1, r2
 802d1b6:	684a      	ldr	r2, [r1, #4]
 802d1b8:	1d1c      	adds	r4, r3, #4
 802d1ba:	460b      	mov	r3, r1
 802d1bc:	2a00      	cmp	r2, #0
 802d1be:	d1f7      	bne.n	802d1b0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x24>
 802d1c0:	4295      	cmp	r5, r2
 802d1c2:	d01c      	beq.n	802d1fe <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x72>
 802d1c4:	6823      	ldr	r3, [r4, #0]
 802d1c6:	681a      	ldr	r2, [r3, #0]
 802d1c8:	1899      	adds	r1, r3, r2
 802d1ca:	428e      	cmp	r6, r1
 802d1cc:	d01c      	beq.n	802d208 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x7c>
 802d1ce:	685b      	ldr	r3, [r3, #4]
 802d1d0:	f840 3c04 	str.w	r3, [r0, #-4]
 802d1d4:	6823      	ldr	r3, [r4, #0]
 802d1d6:	f840 7c08 	str.w	r7, [r0, #-8]
 802d1da:	605e      	str	r6, [r3, #4]
 802d1dc:	bcf0      	pop	{r4, r5, r6, r7}
 802d1de:	4770      	bx	lr
 802d1e0:	f840 3c04 	str.w	r3, [r0, #-4]
 802d1e4:	6066      	str	r6, [r4, #4]
 802d1e6:	bcf0      	pop	{r4, r5, r6, r7}
 802d1e8:	4770      	bx	lr
 802d1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d1ee:	4417      	add	r7, r2
 802d1f0:	f840 7c08 	str.w	r7, [r0, #-8]
 802d1f4:	f840 3c04 	str.w	r3, [r0, #-4]
 802d1f8:	6066      	str	r6, [r4, #4]
 802d1fa:	bcf0      	pop	{r4, r5, r6, r7}
 802d1fc:	4770      	bx	lr
 802d1fe:	e9d5 3200 	ldrd	r3, r2, [r5]
 802d202:	604a      	str	r2, [r1, #4]
 802d204:	441f      	add	r7, r3
 802d206:	e7dd      	b.n	802d1c4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x38>
 802d208:	4417      	add	r7, r2
 802d20a:	601f      	str	r7, [r3, #0]
 802d20c:	e7eb      	b.n	802d1e6 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x5a>
 802d20e:	460a      	mov	r2, r1
 802d210:	3404      	adds	r4, #4
 802d212:	4619      	mov	r1, r3
 802d214:	e7d4      	b.n	802d1c0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x34>
 802d216:	bf00      	nop
 802d218:	200129c0 	.word	0x200129c0

0802d21c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
 802d21c:	b430      	push	{r4, r5}
 802d21e:	4c17      	ldr	r4, [pc, #92]	; (802d27c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x60>)
 802d220:	f100 0208 	add.w	r2, r0, #8
 802d224:	6863      	ldr	r3, [r4, #4]
 802d226:	2a08      	cmp	r2, #8
 802d228:	bf38      	it	cc
 802d22a:	2208      	movcc	r2, #8
 802d22c:	b303      	cbz	r3, 802d270 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x54>
 802d22e:	3207      	adds	r2, #7
 802d230:	6819      	ldr	r1, [r3, #0]
 802d232:	f022 0207 	bic.w	r2, r2, #7
 802d236:	428a      	cmp	r2, r1
 802d238:	d804      	bhi.n	802d244 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x28>
 802d23a:	e01b      	b.n	802d274 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
 802d23c:	6801      	ldr	r1, [r0, #0]
 802d23e:	428a      	cmp	r2, r1
 802d240:	d905      	bls.n	802d24e <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x32>
 802d242:	4603      	mov	r3, r0
 802d244:	6858      	ldr	r0, [r3, #4]
 802d246:	2800      	cmp	r0, #0
 802d248:	d1f8      	bne.n	802d23c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x20>
 802d24a:	bc30      	pop	{r4, r5}
 802d24c:	4770      	bx	lr
 802d24e:	3304      	adds	r3, #4
 802d250:	1a8c      	subs	r4, r1, r2
 802d252:	2c07      	cmp	r4, #7
 802d254:	6845      	ldr	r5, [r0, #4]
 802d256:	d908      	bls.n	802d26a <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x4e>
 802d258:	1881      	adds	r1, r0, r2
 802d25a:	604d      	str	r5, [r1, #4]
 802d25c:	5084      	str	r4, [r0, r2]
 802d25e:	6818      	ldr	r0, [r3, #0]
 802d260:	6002      	str	r2, [r0, #0]
 802d262:	6019      	str	r1, [r3, #0]
 802d264:	3008      	adds	r0, #8
 802d266:	bc30      	pop	{r4, r5}
 802d268:	4770      	bx	lr
 802d26a:	6001      	str	r1, [r0, #0]
 802d26c:	601d      	str	r5, [r3, #0]
 802d26e:	e7f9      	b.n	802d264 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
 802d270:	4618      	mov	r0, r3
 802d272:	e7ea      	b.n	802d24a <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x2e>
 802d274:	4618      	mov	r0, r3
 802d276:	1d23      	adds	r3, r4, #4
 802d278:	e7ea      	b.n	802d250 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x34>
 802d27a:	bf00      	nop
 802d27c:	200129c0 	.word	0x200129c0

0802d280 <__cxa_allocate_exception>:
 802d280:	b510      	push	{r4, lr}
 802d282:	f100 0480 	add.w	r4, r0, #128	; 0x80
 802d286:	4620      	mov	r0, r4
 802d288:	f001 f934 	bl	802e4f4 <malloc>
 802d28c:	b138      	cbz	r0, 802d29e <__cxa_allocate_exception+0x1e>
 802d28e:	4603      	mov	r3, r0
 802d290:	2280      	movs	r2, #128	; 0x80
 802d292:	2100      	movs	r1, #0
 802d294:	4618      	mov	r0, r3
 802d296:	f001 f957 	bl	802e548 <memset>
 802d29a:	3080      	adds	r0, #128	; 0x80
 802d29c:	bd10      	pop	{r4, pc}
 802d29e:	4620      	mov	r0, r4
 802d2a0:	f7ff ffbc 	bl	802d21c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
 802d2a4:	4603      	mov	r3, r0
 802d2a6:	2800      	cmp	r0, #0
 802d2a8:	d1f2      	bne.n	802d290 <__cxa_allocate_exception+0x10>
 802d2aa:	f7ff ff47 	bl	802d13c <_ZSt9terminatev>
 802d2ae:	bf00      	nop

0802d2b0 <__cxa_free_exception>:
 802d2b0:	4a06      	ldr	r2, [pc, #24]	; (802d2cc <__cxa_free_exception+0x1c>)
 802d2b2:	6893      	ldr	r3, [r2, #8]
 802d2b4:	3880      	subs	r0, #128	; 0x80
 802d2b6:	4298      	cmp	r0, r3
 802d2b8:	d903      	bls.n	802d2c2 <__cxa_free_exception+0x12>
 802d2ba:	68d2      	ldr	r2, [r2, #12]
 802d2bc:	4413      	add	r3, r2
 802d2be:	4298      	cmp	r0, r3
 802d2c0:	d301      	bcc.n	802d2c6 <__cxa_free_exception+0x16>
 802d2c2:	f001 b91f 	b.w	802e504 <free>
 802d2c6:	f7ff bf61 	b.w	802d18c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
 802d2ca:	bf00      	nop
 802d2cc:	200129c0 	.word	0x200129c0

0802d2d0 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 802d2d0:	b538      	push	{r3, r4, r5, lr}
 802d2d2:	4c08      	ldr	r4, [pc, #32]	; (802d2f4 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 802d2d4:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
 802d2d8:	4628      	mov	r0, r5
 802d2da:	60e5      	str	r5, [r4, #12]
 802d2dc:	f001 f90a 	bl	802e4f4 <malloc>
 802d2e0:	60a0      	str	r0, [r4, #8]
 802d2e2:	b120      	cbz	r0, 802d2ee <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1e>
 802d2e4:	2300      	movs	r3, #0
 802d2e6:	6060      	str	r0, [r4, #4]
 802d2e8:	e9c0 5300 	strd	r5, r3, [r0]
 802d2ec:	bd38      	pop	{r3, r4, r5, pc}
 802d2ee:	60e0      	str	r0, [r4, #12]
 802d2f0:	6060      	str	r0, [r4, #4]
 802d2f2:	bd38      	pop	{r3, r4, r5, pc}
 802d2f4:	200129c0 	.word	0x200129c0

0802d2f8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 802d2f8:	7803      	ldrb	r3, [r0, #0]
 802d2fa:	2b47      	cmp	r3, #71	; 0x47
 802d2fc:	d001      	beq.n	802d302 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0xa>
 802d2fe:	2000      	movs	r0, #0
 802d300:	4770      	bx	lr
 802d302:	7843      	ldrb	r3, [r0, #1]
 802d304:	2b4e      	cmp	r3, #78	; 0x4e
 802d306:	d1fa      	bne.n	802d2fe <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 802d308:	7883      	ldrb	r3, [r0, #2]
 802d30a:	2b55      	cmp	r3, #85	; 0x55
 802d30c:	d1f7      	bne.n	802d2fe <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 802d30e:	78c3      	ldrb	r3, [r0, #3]
 802d310:	2b43      	cmp	r3, #67	; 0x43
 802d312:	d1f4      	bne.n	802d2fe <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 802d314:	7903      	ldrb	r3, [r0, #4]
 802d316:	2b43      	cmp	r3, #67	; 0x43
 802d318:	d1f1      	bne.n	802d2fe <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 802d31a:	7943      	ldrb	r3, [r0, #5]
 802d31c:	2b2b      	cmp	r3, #43	; 0x2b
 802d31e:	d1ee      	bne.n	802d2fe <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 802d320:	7983      	ldrb	r3, [r0, #6]
 802d322:	2b2b      	cmp	r3, #43	; 0x2b
 802d324:	d1eb      	bne.n	802d2fe <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 802d326:	79c0      	ldrb	r0, [r0, #7]
 802d328:	2801      	cmp	r0, #1
 802d32a:	bf8c      	ite	hi
 802d32c:	2000      	movhi	r0, #0
 802d32e:	2001      	movls	r0, #1
 802d330:	4770      	bx	lr
 802d332:	bf00      	nop

0802d334 <__cxa_call_terminate>:
 802d334:	b510      	push	{r4, lr}
 802d336:	b130      	cbz	r0, 802d346 <__cxa_call_terminate+0x12>
 802d338:	4604      	mov	r4, r0
 802d33a:	f000 fd3b 	bl	802ddb4 <__cxa_begin_catch>
 802d33e:	4620      	mov	r0, r4
 802d340:	f7ff ffda 	bl	802d2f8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 802d344:	b908      	cbnz	r0, 802d34a <__cxa_call_terminate+0x16>
 802d346:	f7ff fef9 	bl	802d13c <_ZSt9terminatev>
 802d34a:	f854 0c14 	ldr.w	r0, [r4, #-20]
 802d34e:	f7ff fee1 	bl	802d114 <_ZN10__cxxabiv111__terminateEPFvvE>
 802d352:	bf00      	nop

0802d354 <__cxa_call_unexpected>:
 802d354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d358:	b085      	sub	sp, #20
 802d35a:	4602      	mov	r2, r0
 802d35c:	f7ff ffcc 	bl	802d2f8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 802d360:	b150      	cbz	r0, 802d378 <__cxa_call_unexpected+0x24>
 802d362:	e952 8506 	ldrd	r8, r5, [r2, #-24]
 802d366:	4610      	mov	r0, r2
 802d368:	6a96      	ldr	r6, [r2, #40]	; 0x28
 802d36a:	e9d2 740c 	ldrd	r7, r4, [r2, #48]	; 0x30
 802d36e:	f000 fd21 	bl	802ddb4 <__cxa_begin_catch>
 802d372:	4640      	mov	r0, r8
 802d374:	f7ff feec 	bl	802d150 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 802d378:	4610      	mov	r0, r2
 802d37a:	f000 fd1b 	bl	802ddb4 <__cxa_begin_catch>
 802d37e:	f7ff feeb 	bl	802d158 <_ZSt10unexpectedv>
 802d382:	f000 fd17 	bl	802ddb4 <__cxa_begin_catch>
 802d386:	f7ff fed9 	bl	802d13c <_ZSt9terminatev>
 802d38a:	f000 fd13 	bl	802ddb4 <__cxa_begin_catch>
 802d38e:	f000 f92f 	bl	802d5f0 <__cxa_get_globals_fast>
 802d392:	6803      	ldr	r3, [r0, #0]
 802d394:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 802d398:	f10d 0a10 	add.w	sl, sp, #16
 802d39c:	2a01      	cmp	r2, #1
 802d39e:	bf0c      	ite	eq
 802d3a0:	681a      	ldreq	r2, [r3, #0]
 802d3a2:	f103 0278 	addne.w	r2, r3, #120	; 0x78
 802d3a6:	f04f 0800 	mov.w	r8, #0
 802d3aa:	3320      	adds	r3, #32
 802d3ac:	f84a 2d08 	str.w	r2, [sl, #-8]!
 802d3b0:	f027 0b03 	bic.w	fp, r7, #3
 802d3b4:	9301      	str	r3, [sp, #4]
 802d3b6:	46c1      	mov	r9, r8
 802d3b8:	45b1      	cmp	r9, r6
 802d3ba:	da1b      	bge.n	802d3f4 <__cxa_call_unexpected+0xa0>
 802d3bc:	6827      	ldr	r7, [r4, #0]
 802d3be:	b107      	cbz	r7, 802d3c2 <__cxa_call_unexpected+0x6e>
 802d3c0:	4427      	add	r7, r4
 802d3c2:	4653      	mov	r3, sl
 802d3c4:	2200      	movs	r2, #0
 802d3c6:	4639      	mov	r1, r7
 802d3c8:	9801      	ldr	r0, [sp, #4]
 802d3ca:	f000 f837 	bl	802d43c <__cxa_type_match>
 802d3ce:	b9e8      	cbnz	r0, 802d40c <__cxa_call_unexpected+0xb8>
 802d3d0:	683b      	ldr	r3, [r7, #0]
 802d3d2:	4914      	ldr	r1, [pc, #80]	; (802d424 <__cxa_call_unexpected+0xd0>)
 802d3d4:	691b      	ldr	r3, [r3, #16]
 802d3d6:	9300      	str	r3, [sp, #0]
 802d3d8:	aa04      	add	r2, sp, #16
 802d3da:	2301      	movs	r3, #1
 802d3dc:	f842 0d04 	str.w	r0, [r2, #-4]!
 802d3e0:	4638      	mov	r0, r7
 802d3e2:	9f00      	ldr	r7, [sp, #0]
 802d3e4:	47b8      	blx	r7
 802d3e6:	2800      	cmp	r0, #0
 802d3e8:	bf18      	it	ne
 802d3ea:	4680      	movne	r8, r0
 802d3ec:	f109 0901 	add.w	r9, r9, #1
 802d3f0:	445c      	add	r4, fp
 802d3f2:	e7e1      	b.n	802d3b8 <__cxa_call_unexpected+0x64>
 802d3f4:	f1b8 0f00 	cmp.w	r8, #0
 802d3f8:	d010      	beq.n	802d41c <__cxa_call_unexpected+0xc8>
 802d3fa:	2004      	movs	r0, #4
 802d3fc:	f7ff ff40 	bl	802d280 <__cxa_allocate_exception>
 802d400:	4b09      	ldr	r3, [pc, #36]	; (802d428 <__cxa_call_unexpected+0xd4>)
 802d402:	6003      	str	r3, [r0, #0]
 802d404:	4a09      	ldr	r2, [pc, #36]	; (802d42c <__cxa_call_unexpected+0xd8>)
 802d406:	4907      	ldr	r1, [pc, #28]	; (802d424 <__cxa_call_unexpected+0xd0>)
 802d408:	f000 fc80 	bl	802dd0c <__cxa_throw>
 802d40c:	f000 fc9a 	bl	802dd44 <__cxa_rethrow>
 802d410:	f000 fd10 	bl	802de34 <__cxa_end_catch>
 802d414:	f000 fd0e 	bl	802de34 <__cxa_end_catch>
 802d418:	f000 f80a 	bl	802d430 <__cxa_end_cleanup>
 802d41c:	4628      	mov	r0, r5
 802d41e:	f7ff fe79 	bl	802d114 <_ZN10__cxxabiv111__terminateEPFvvE>
 802d422:	bf00      	nop
 802d424:	08034bf8 	.word	0x08034bf8
 802d428:	08034c7c 	.word	0x08034c7c
 802d42c:	0802dfd9 	.word	0x0802dfd9

0802d430 <__cxa_end_cleanup>:
 802d430:	b41e      	push	{r1, r2, r3, r4}
 802d432:	f000 f88d 	bl	802d550 <__gnu_end_cleanup>
 802d436:	bc1e      	pop	{r1, r2, r3, r4}
 802d438:	f7da ffa2 	bl	8008380 <_Unwind_Resume>

0802d43c <__cxa_type_match>:
 802d43c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802d43e:	7802      	ldrb	r2, [r0, #0]
 802d440:	2a47      	cmp	r2, #71	; 0x47
 802d442:	b083      	sub	sp, #12
 802d444:	460d      	mov	r5, r1
 802d446:	461f      	mov	r7, r3
 802d448:	d01e      	beq.n	802d488 <__cxa_type_match+0x4c>
 802d44a:	2300      	movs	r3, #0
 802d44c:	4c25      	ldr	r4, [pc, #148]	; (802d4e4 <__cxa_type_match+0xa8>)
 802d44e:	9301      	str	r3, [sp, #4]
 802d450:	6823      	ldr	r3, [r4, #0]
 802d452:	4620      	mov	r0, r4
 802d454:	689b      	ldr	r3, [r3, #8]
 802d456:	4798      	blx	r3
 802d458:	b180      	cbz	r0, 802d47c <__cxa_type_match+0x40>
 802d45a:	9b01      	ldr	r3, [sp, #4]
 802d45c:	681b      	ldr	r3, [r3, #0]
 802d45e:	9301      	str	r3, [sp, #4]
 802d460:	2602      	movs	r6, #2
 802d462:	682b      	ldr	r3, [r5, #0]
 802d464:	4621      	mov	r1, r4
 802d466:	4628      	mov	r0, r5
 802d468:	691c      	ldr	r4, [r3, #16]
 802d46a:	aa01      	add	r2, sp, #4
 802d46c:	2301      	movs	r3, #1
 802d46e:	47a0      	blx	r4
 802d470:	b130      	cbz	r0, 802d480 <__cxa_type_match+0x44>
 802d472:	9b01      	ldr	r3, [sp, #4]
 802d474:	603b      	str	r3, [r7, #0]
 802d476:	4630      	mov	r0, r6
 802d478:	b003      	add	sp, #12
 802d47a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802d47c:	2601      	movs	r6, #1
 802d47e:	e7f0      	b.n	802d462 <__cxa_type_match+0x26>
 802d480:	4606      	mov	r6, r0
 802d482:	4630      	mov	r0, r6
 802d484:	b003      	add	sp, #12
 802d486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802d488:	7843      	ldrb	r3, [r0, #1]
 802d48a:	2b4e      	cmp	r3, #78	; 0x4e
 802d48c:	d1dd      	bne.n	802d44a <__cxa_type_match+0xe>
 802d48e:	7883      	ldrb	r3, [r0, #2]
 802d490:	2b55      	cmp	r3, #85	; 0x55
 802d492:	d1da      	bne.n	802d44a <__cxa_type_match+0xe>
 802d494:	78c3      	ldrb	r3, [r0, #3]
 802d496:	2b43      	cmp	r3, #67	; 0x43
 802d498:	d1d7      	bne.n	802d44a <__cxa_type_match+0xe>
 802d49a:	7903      	ldrb	r3, [r0, #4]
 802d49c:	2b46      	cmp	r3, #70	; 0x46
 802d49e:	d015      	beq.n	802d4cc <__cxa_type_match+0x90>
 802d4a0:	7903      	ldrb	r3, [r0, #4]
 802d4a2:	2b43      	cmp	r3, #67	; 0x43
 802d4a4:	d1d1      	bne.n	802d44a <__cxa_type_match+0xe>
 802d4a6:	7943      	ldrb	r3, [r0, #5]
 802d4a8:	2b2b      	cmp	r3, #43	; 0x2b
 802d4aa:	d1ce      	bne.n	802d44a <__cxa_type_match+0xe>
 802d4ac:	7983      	ldrb	r3, [r0, #6]
 802d4ae:	2b2b      	cmp	r3, #43	; 0x2b
 802d4b0:	d1cb      	bne.n	802d44a <__cxa_type_match+0xe>
 802d4b2:	79c3      	ldrb	r3, [r0, #7]
 802d4b4:	2b01      	cmp	r3, #1
 802d4b6:	d8c8      	bhi.n	802d44a <__cxa_type_match+0xe>
 802d4b8:	f850 4c20 	ldr.w	r4, [r0, #-32]
 802d4bc:	d002      	beq.n	802d4c4 <__cxa_type_match+0x88>
 802d4be:	3058      	adds	r0, #88	; 0x58
 802d4c0:	9001      	str	r0, [sp, #4]
 802d4c2:	e7c5      	b.n	802d450 <__cxa_type_match+0x14>
 802d4c4:	4620      	mov	r0, r4
 802d4c6:	f854 4c78 	ldr.w	r4, [r4, #-120]
 802d4ca:	e7f9      	b.n	802d4c0 <__cxa_type_match+0x84>
 802d4cc:	7943      	ldrb	r3, [r0, #5]
 802d4ce:	2b4f      	cmp	r3, #79	; 0x4f
 802d4d0:	d1e6      	bne.n	802d4a0 <__cxa_type_match+0x64>
 802d4d2:	7983      	ldrb	r3, [r0, #6]
 802d4d4:	2b52      	cmp	r3, #82	; 0x52
 802d4d6:	d1e3      	bne.n	802d4a0 <__cxa_type_match+0x64>
 802d4d8:	79c3      	ldrb	r3, [r0, #7]
 802d4da:	2b00      	cmp	r3, #0
 802d4dc:	d1e0      	bne.n	802d4a0 <__cxa_type_match+0x64>
 802d4de:	9301      	str	r3, [sp, #4]
 802d4e0:	4c01      	ldr	r4, [pc, #4]	; (802d4e8 <__cxa_type_match+0xac>)
 802d4e2:	e7b5      	b.n	802d450 <__cxa_type_match+0x14>
 802d4e4:	08034bf0 	.word	0x08034bf0
 802d4e8:	08034be8 	.word	0x08034be8

0802d4ec <__cxa_begin_cleanup>:
 802d4ec:	b510      	push	{r4, lr}
 802d4ee:	4604      	mov	r4, r0
 802d4f0:	f000 f882 	bl	802d5f8 <__cxa_get_globals>
 802d4f4:	7823      	ldrb	r3, [r4, #0]
 802d4f6:	2b47      	cmp	r3, #71	; 0x47
 802d4f8:	f1a4 0220 	sub.w	r2, r4, #32
 802d4fc:	d004      	beq.n	802d508 <__cxa_begin_cleanup+0x1c>
 802d4fe:	6883      	ldr	r3, [r0, #8]
 802d500:	bb23      	cbnz	r3, 802d54c <__cxa_begin_cleanup+0x60>
 802d502:	6082      	str	r2, [r0, #8]
 802d504:	2001      	movs	r0, #1
 802d506:	bd10      	pop	{r4, pc}
 802d508:	7863      	ldrb	r3, [r4, #1]
 802d50a:	2b4e      	cmp	r3, #78	; 0x4e
 802d50c:	d1f7      	bne.n	802d4fe <__cxa_begin_cleanup+0x12>
 802d50e:	78a3      	ldrb	r3, [r4, #2]
 802d510:	2b55      	cmp	r3, #85	; 0x55
 802d512:	d1f4      	bne.n	802d4fe <__cxa_begin_cleanup+0x12>
 802d514:	78e3      	ldrb	r3, [r4, #3]
 802d516:	2b43      	cmp	r3, #67	; 0x43
 802d518:	d1f1      	bne.n	802d4fe <__cxa_begin_cleanup+0x12>
 802d51a:	7923      	ldrb	r3, [r4, #4]
 802d51c:	2b43      	cmp	r3, #67	; 0x43
 802d51e:	d1ee      	bne.n	802d4fe <__cxa_begin_cleanup+0x12>
 802d520:	7963      	ldrb	r3, [r4, #5]
 802d522:	2b2b      	cmp	r3, #43	; 0x2b
 802d524:	d1eb      	bne.n	802d4fe <__cxa_begin_cleanup+0x12>
 802d526:	79a3      	ldrb	r3, [r4, #6]
 802d528:	2b2b      	cmp	r3, #43	; 0x2b
 802d52a:	d1e8      	bne.n	802d4fe <__cxa_begin_cleanup+0x12>
 802d52c:	79e3      	ldrb	r3, [r4, #7]
 802d52e:	2b01      	cmp	r3, #1
 802d530:	d8e5      	bhi.n	802d4fe <__cxa_begin_cleanup+0x12>
 802d532:	f854 3c04 	ldr.w	r3, [r4, #-4]
 802d536:	3301      	adds	r3, #1
 802d538:	2b01      	cmp	r3, #1
 802d53a:	f844 3c04 	str.w	r3, [r4, #-4]
 802d53e:	d1e1      	bne.n	802d504 <__cxa_begin_cleanup+0x18>
 802d540:	6883      	ldr	r3, [r0, #8]
 802d542:	f844 3c08 	str.w	r3, [r4, #-8]
 802d546:	6082      	str	r2, [r0, #8]
 802d548:	2001      	movs	r0, #1
 802d54a:	bd10      	pop	{r4, pc}
 802d54c:	f7ff fdf6 	bl	802d13c <_ZSt9terminatev>

0802d550 <__gnu_end_cleanup>:
 802d550:	b508      	push	{r3, lr}
 802d552:	f000 f851 	bl	802d5f8 <__cxa_get_globals>
 802d556:	6883      	ldr	r3, [r0, #8]
 802d558:	b383      	cbz	r3, 802d5bc <__gnu_end_cleanup+0x6c>
 802d55a:	f893 2020 	ldrb.w	r2, [r3, #32]
 802d55e:	2a47      	cmp	r2, #71	; 0x47
 802d560:	d004      	beq.n	802d56c <__gnu_end_cleanup+0x1c>
 802d562:	2200      	movs	r2, #0
 802d564:	6082      	str	r2, [r0, #8]
 802d566:	f103 0020 	add.w	r0, r3, #32
 802d56a:	bd08      	pop	{r3, pc}
 802d56c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 802d570:	2a4e      	cmp	r2, #78	; 0x4e
 802d572:	d1f6      	bne.n	802d562 <__gnu_end_cleanup+0x12>
 802d574:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 802d578:	2a55      	cmp	r2, #85	; 0x55
 802d57a:	d1f2      	bne.n	802d562 <__gnu_end_cleanup+0x12>
 802d57c:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 802d580:	2a43      	cmp	r2, #67	; 0x43
 802d582:	d1ee      	bne.n	802d562 <__gnu_end_cleanup+0x12>
 802d584:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 802d588:	2a43      	cmp	r2, #67	; 0x43
 802d58a:	d1ea      	bne.n	802d562 <__gnu_end_cleanup+0x12>
 802d58c:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 802d590:	2a2b      	cmp	r2, #43	; 0x2b
 802d592:	d1e6      	bne.n	802d562 <__gnu_end_cleanup+0x12>
 802d594:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 802d598:	2a2b      	cmp	r2, #43	; 0x2b
 802d59a:	d1e2      	bne.n	802d562 <__gnu_end_cleanup+0x12>
 802d59c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 802d5a0:	2a01      	cmp	r2, #1
 802d5a2:	d8de      	bhi.n	802d562 <__gnu_end_cleanup+0x12>
 802d5a4:	69da      	ldr	r2, [r3, #28]
 802d5a6:	3a01      	subs	r2, #1
 802d5a8:	61da      	str	r2, [r3, #28]
 802d5aa:	2a00      	cmp	r2, #0
 802d5ac:	d1db      	bne.n	802d566 <__gnu_end_cleanup+0x16>
 802d5ae:	699a      	ldr	r2, [r3, #24]
 802d5b0:	6082      	str	r2, [r0, #8]
 802d5b2:	2200      	movs	r2, #0
 802d5b4:	619a      	str	r2, [r3, #24]
 802d5b6:	f103 0020 	add.w	r0, r3, #32
 802d5ba:	bd08      	pop	{r3, pc}
 802d5bc:	f7ff fdbe 	bl	802d13c <_ZSt9terminatev>

0802d5c0 <_ZN9__gnu_cxx20recursive_init_errorD1Ev>:
 802d5c0:	b510      	push	{r4, lr}
 802d5c2:	4b03      	ldr	r3, [pc, #12]	; (802d5d0 <_ZN9__gnu_cxx20recursive_init_errorD1Ev+0x10>)
 802d5c4:	6003      	str	r3, [r0, #0]
 802d5c6:	4604      	mov	r4, r0
 802d5c8:	f000 fd04 	bl	802dfd4 <_ZNSt9exceptionD1Ev>
 802d5cc:	4620      	mov	r0, r4
 802d5ce:	bd10      	pop	{r4, pc}
 802d5d0:	08034b58 	.word	0x08034b58

0802d5d4 <_ZN9__gnu_cxx20recursive_init_errorD0Ev>:
 802d5d4:	b510      	push	{r4, lr}
 802d5d6:	4b05      	ldr	r3, [pc, #20]	; (802d5ec <_ZN9__gnu_cxx20recursive_init_errorD0Ev+0x18>)
 802d5d8:	6003      	str	r3, [r0, #0]
 802d5da:	4604      	mov	r4, r0
 802d5dc:	f000 fcfa 	bl	802dfd4 <_ZNSt9exceptionD1Ev>
 802d5e0:	4620      	mov	r0, r4
 802d5e2:	2104      	movs	r1, #4
 802d5e4:	f7ff fd72 	bl	802d0cc <_ZdlPvj>
 802d5e8:	4620      	mov	r0, r4
 802d5ea:	bd10      	pop	{r4, pc}
 802d5ec:	08034b58 	.word	0x08034b58

0802d5f0 <__cxa_get_globals_fast>:
 802d5f0:	4800      	ldr	r0, [pc, #0]	; (802d5f4 <__cxa_get_globals_fast+0x4>)
 802d5f2:	4770      	bx	lr
 802d5f4:	200129d0 	.word	0x200129d0

0802d5f8 <__cxa_get_globals>:
 802d5f8:	4800      	ldr	r0, [pc, #0]	; (802d5fc <__cxa_get_globals+0x4>)
 802d5fa:	4770      	bx	lr
 802d5fc:	200129d0 	.word	0x200129d0

0802d600 <_ZL28read_encoded_value_with_basehjPKhPj>:
 802d600:	2850      	cmp	r0, #80	; 0x50
 802d602:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d604:	d01c      	beq.n	802d640 <_ZL28read_encoded_value_with_basehjPKhPj+0x40>
 802d606:	f000 040f 	and.w	r4, r0, #15
 802d60a:	2c0c      	cmp	r4, #12
 802d60c:	d856      	bhi.n	802d6bc <_ZL28read_encoded_value_with_basehjPKhPj+0xbc>
 802d60e:	e8df f004 	tbb	[pc, r4]
 802d612:	4107      	.short	0x4107
 802d614:	551f0751 	.word	0x551f0751
 802d618:	27555555 	.word	0x27555555
 802d61c:	0723      	.short	0x0723
 802d61e:	1f          	.byte	0x1f
 802d61f:	00          	.byte	0x00
 802d620:	4614      	mov	r4, r2
 802d622:	f854 5b04 	ldr.w	r5, [r4], #4
 802d626:	b145      	cbz	r5, 802d63a <_ZL28read_encoded_value_with_basehjPKhPj+0x3a>
 802d628:	f000 0670 	and.w	r6, r0, #112	; 0x70
 802d62c:	2e10      	cmp	r6, #16
 802d62e:	bf08      	it	eq
 802d630:	4611      	moveq	r1, r2
 802d632:	440d      	add	r5, r1
 802d634:	0602      	lsls	r2, r0, #24
 802d636:	bf48      	it	mi
 802d638:	682d      	ldrmi	r5, [r5, #0]
 802d63a:	601d      	str	r5, [r3, #0]
 802d63c:	4620      	mov	r0, r4
 802d63e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802d640:	3203      	adds	r2, #3
 802d642:	f022 0403 	bic.w	r4, r2, #3
 802d646:	f854 5b04 	ldr.w	r5, [r4], #4
 802d64a:	601d      	str	r5, [r3, #0]
 802d64c:	4620      	mov	r0, r4
 802d64e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802d650:	4614      	mov	r4, r2
 802d652:	f854 5b08 	ldr.w	r5, [r4], #8
 802d656:	e7e6      	b.n	802d626 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 802d658:	4614      	mov	r4, r2
 802d65a:	f934 5b02 	ldrsh.w	r5, [r4], #2
 802d65e:	e7e2      	b.n	802d626 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 802d660:	2500      	movs	r5, #0
 802d662:	462f      	mov	r7, r5
 802d664:	4614      	mov	r4, r2
 802d666:	f814 cb01 	ldrb.w	ip, [r4], #1
 802d66a:	f00c 067f 	and.w	r6, ip, #127	; 0x7f
 802d66e:	40be      	lsls	r6, r7
 802d670:	f01c 0f80 	tst.w	ip, #128	; 0x80
 802d674:	ea45 0506 	orr.w	r5, r5, r6
 802d678:	f107 0707 	add.w	r7, r7, #7
 802d67c:	d1f3      	bne.n	802d666 <_ZL28read_encoded_value_with_basehjPKhPj+0x66>
 802d67e:	2f1f      	cmp	r7, #31
 802d680:	d8d1      	bhi.n	802d626 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 802d682:	f01c 0f40 	tst.w	ip, #64	; 0x40
 802d686:	d0ce      	beq.n	802d626 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 802d688:	f04f 36ff 	mov.w	r6, #4294967295
 802d68c:	fa06 f707 	lsl.w	r7, r6, r7
 802d690:	433d      	orrs	r5, r7
 802d692:	e7c9      	b.n	802d628 <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
 802d694:	2500      	movs	r5, #0
 802d696:	462f      	mov	r7, r5
 802d698:	4614      	mov	r4, r2
 802d69a:	f814 cb01 	ldrb.w	ip, [r4], #1
 802d69e:	f00c 067f 	and.w	r6, ip, #127	; 0x7f
 802d6a2:	40be      	lsls	r6, r7
 802d6a4:	f01c 0f80 	tst.w	ip, #128	; 0x80
 802d6a8:	ea45 0506 	orr.w	r5, r5, r6
 802d6ac:	f107 0707 	add.w	r7, r7, #7
 802d6b0:	d1f3      	bne.n	802d69a <_ZL28read_encoded_value_with_basehjPKhPj+0x9a>
 802d6b2:	e7b8      	b.n	802d626 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 802d6b4:	4614      	mov	r4, r2
 802d6b6:	f834 5b02 	ldrh.w	r5, [r4], #2
 802d6ba:	e7b4      	b.n	802d626 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 802d6bc:	f000 fdcc 	bl	802e258 <abort>

0802d6c0 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>:
 802d6c0:	f000 0070 	and.w	r0, r0, #112	; 0x70
 802d6c4:	2820      	cmp	r0, #32
 802d6c6:	d011      	beq.n	802d6ec <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x2c>
 802d6c8:	d90b      	bls.n	802d6e2 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x22>
 802d6ca:	2840      	cmp	r0, #64	; 0x40
 802d6cc:	d006      	beq.n	802d6dc <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x1c>
 802d6ce:	2850      	cmp	r0, #80	; 0x50
 802d6d0:	d00a      	beq.n	802d6e8 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x28>
 802d6d2:	2830      	cmp	r0, #48	; 0x30
 802d6d4:	d10d      	bne.n	802d6f2 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x32>
 802d6d6:	4608      	mov	r0, r1
 802d6d8:	f7db b84c 	b.w	8008774 <_Unwind_GetDataRelBase>
 802d6dc:	4608      	mov	r0, r1
 802d6de:	f7db b839 	b.w	8008754 <_Unwind_GetRegionStart>
 802d6e2:	b108      	cbz	r0, 802d6e8 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x28>
 802d6e4:	2810      	cmp	r0, #16
 802d6e6:	d104      	bne.n	802d6f2 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x32>
 802d6e8:	2000      	movs	r0, #0
 802d6ea:	4770      	bx	lr
 802d6ec:	4608      	mov	r0, r1
 802d6ee:	f7db b845 	b.w	800877c <_Unwind_GetTextRelBase>
 802d6f2:	b508      	push	{r3, lr}
 802d6f4:	f000 fdb0 	bl	802e258 <abort>

0802d6f8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 802d6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d6fa:	460c      	mov	r4, r1
 802d6fc:	4615      	mov	r5, r2
 802d6fe:	4607      	mov	r7, r0
 802d700:	b108      	cbz	r0, 802d706 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
 802d702:	f7db f827 	bl	8008754 <_Unwind_GetRegionStart>
 802d706:	6028      	str	r0, [r5, #0]
 802d708:	7826      	ldrb	r6, [r4, #0]
 802d70a:	2eff      	cmp	r6, #255	; 0xff
 802d70c:	f104 0401 	add.w	r4, r4, #1
 802d710:	d129      	bne.n	802d766 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x6e>
 802d712:	6068      	str	r0, [r5, #4]
 802d714:	7823      	ldrb	r3, [r4, #0]
 802d716:	752b      	strb	r3, [r5, #20]
 802d718:	2bff      	cmp	r3, #255	; 0xff
 802d71a:	f104 0001 	add.w	r0, r4, #1
 802d71e:	d032      	beq.n	802d786 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x8e>
 802d720:	2310      	movs	r3, #16
 802d722:	2400      	movs	r4, #0
 802d724:	752b      	strb	r3, [r5, #20]
 802d726:	4622      	mov	r2, r4
 802d728:	f810 1b01 	ldrb.w	r1, [r0], #1
 802d72c:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 802d730:	4093      	lsls	r3, r2
 802d732:	0609      	lsls	r1, r1, #24
 802d734:	ea44 0403 	orr.w	r4, r4, r3
 802d738:	f102 0207 	add.w	r2, r2, #7
 802d73c:	d4f4      	bmi.n	802d728 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x30>
 802d73e:	4404      	add	r4, r0
 802d740:	60ec      	str	r4, [r5, #12]
 802d742:	7803      	ldrb	r3, [r0, #0]
 802d744:	756b      	strb	r3, [r5, #21]
 802d746:	2400      	movs	r4, #0
 802d748:	3001      	adds	r0, #1
 802d74a:	4622      	mov	r2, r4
 802d74c:	f810 1b01 	ldrb.w	r1, [r0], #1
 802d750:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 802d754:	4093      	lsls	r3, r2
 802d756:	431c      	orrs	r4, r3
 802d758:	060b      	lsls	r3, r1, #24
 802d75a:	f102 0207 	add.w	r2, r2, #7
 802d75e:	d4f5      	bmi.n	802d74c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x54>
 802d760:	4404      	add	r4, r0
 802d762:	612c      	str	r4, [r5, #16]
 802d764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802d766:	4639      	mov	r1, r7
 802d768:	4630      	mov	r0, r6
 802d76a:	f7ff ffa9 	bl	802d6c0 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 802d76e:	4622      	mov	r2, r4
 802d770:	4601      	mov	r1, r0
 802d772:	1d2b      	adds	r3, r5, #4
 802d774:	4630      	mov	r0, r6
 802d776:	f7ff ff43 	bl	802d600 <_ZL28read_encoded_value_with_basehjPKhPj>
 802d77a:	4604      	mov	r4, r0
 802d77c:	1c60      	adds	r0, r4, #1
 802d77e:	7823      	ldrb	r3, [r4, #0]
 802d780:	752b      	strb	r3, [r5, #20]
 802d782:	2bff      	cmp	r3, #255	; 0xff
 802d784:	d1cc      	bne.n	802d720 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x28>
 802d786:	2300      	movs	r3, #0
 802d788:	60eb      	str	r3, [r5, #12]
 802d78a:	e7da      	b.n	802d742 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x4a>

0802d78c <__gxx_personality_v0>:
 802d78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d790:	f000 0403 	and.w	r4, r0, #3
 802d794:	b099      	sub	sp, #100	; 0x64
 802d796:	2300      	movs	r3, #0
 802d798:	2c01      	cmp	r4, #1
 802d79a:	4688      	mov	r8, r1
 802d79c:	4617      	mov	r7, r2
 802d79e:	930c      	str	r3, [sp, #48]	; 0x30
 802d7a0:	f000 8096 	beq.w	802d8d0 <__gxx_personality_v0+0x144>
 802d7a4:	d30d      	bcc.n	802d7c2 <__gxx_personality_v0+0x36>
 802d7a6:	2c02      	cmp	r4, #2
 802d7a8:	f040 825f 	bne.w	802dc6a <__gxx_personality_v0+0x4de>
 802d7ac:	4639      	mov	r1, r7
 802d7ae:	4640      	mov	r0, r8
 802d7b0:	f7da ffbc 	bl	800872c <__gnu_unwind_frame>
 802d7b4:	2800      	cmp	r0, #0
 802d7b6:	f000 809b 	beq.w	802d8f0 <__gxx_personality_v0+0x164>
 802d7ba:	2009      	movs	r0, #9
 802d7bc:	b019      	add	sp, #100	; 0x64
 802d7be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d7c2:	0702      	lsls	r2, r0, #28
 802d7c4:	d4f2      	bmi.n	802d7ac <__gxx_personality_v0+0x20>
 802d7c6:	2301      	movs	r3, #1
 802d7c8:	9304      	str	r3, [sp, #16]
 802d7ca:	aa18      	add	r2, sp, #96	; 0x60
 802d7cc:	2300      	movs	r3, #0
 802d7ce:	f842 8d2c 	str.w	r8, [r2, #-44]!
 802d7d2:	4619      	mov	r1, r3
 802d7d4:	9200      	str	r2, [sp, #0]
 802d7d6:	4638      	mov	r0, r7
 802d7d8:	220c      	movs	r2, #12
 802d7da:	f7da fa37 	bl	8007c4c <_Unwind_VRS_Set>
 802d7de:	4638      	mov	r0, r7
 802d7e0:	f7da ffbe 	bl	8008760 <_Unwind_GetLanguageSpecificData>
 802d7e4:	9005      	str	r0, [sp, #20]
 802d7e6:	2800      	cmp	r0, #0
 802d7e8:	d0e0      	beq.n	802d7ac <__gxx_personality_v0+0x20>
 802d7ea:	ab12      	add	r3, sp, #72	; 0x48
 802d7ec:	461a      	mov	r2, r3
 802d7ee:	9905      	ldr	r1, [sp, #20]
 802d7f0:	9306      	str	r3, [sp, #24]
 802d7f2:	4638      	mov	r0, r7
 802d7f4:	f7ff ff80 	bl	802d6f8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 802d7f8:	4605      	mov	r5, r0
 802d7fa:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 802d7fe:	28ff      	cmp	r0, #255	; 0xff
 802d800:	f000 80e5 	beq.w	802d9ce <__gxx_personality_v0+0x242>
 802d804:	4639      	mov	r1, r7
 802d806:	f7ff ff5b 	bl	802d6c0 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 802d80a:	4604      	mov	r4, r0
 802d80c:	2300      	movs	r3, #0
 802d80e:	f10d 0b44 	add.w	fp, sp, #68	; 0x44
 802d812:	4619      	mov	r1, r3
 802d814:	f8cd b000 	str.w	fp, [sp]
 802d818:	220f      	movs	r2, #15
 802d81a:	4638      	mov	r0, r7
 802d81c:	9414      	str	r4, [sp, #80]	; 0x50
 802d81e:	f7da f9f3 	bl	8007c08 <_Unwind_VRS_Get>
 802d822:	9e11      	ldr	r6, [sp, #68]	; 0x44
 802d824:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802d826:	f026 0601 	bic.w	r6, r6, #1
 802d82a:	429d      	cmp	r5, r3
 802d82c:	f106 36ff 	add.w	r6, r6, #4294967295
 802d830:	f080 80d4 	bcs.w	802d9dc <__gxx_personality_v0+0x250>
 802d834:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 802d838:	f10d 0940 	add.w	r9, sp, #64	; 0x40
 802d83c:	f89d 405d 	ldrb.w	r4, [sp, #93]	; 0x5d
 802d840:	2cff      	cmp	r4, #255	; 0xff
 802d842:	f04f 0100 	mov.w	r1, #0
 802d846:	d003      	beq.n	802d850 <__gxx_personality_v0+0xc4>
 802d848:	4620      	mov	r0, r4
 802d84a:	f7ff ff39 	bl	802d6c0 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 802d84e:	4601      	mov	r1, r0
 802d850:	462a      	mov	r2, r5
 802d852:	4620      	mov	r0, r4
 802d854:	4653      	mov	r3, sl
 802d856:	f7ff fed3 	bl	802d600 <_ZL28read_encoded_value_with_basehjPKhPj>
 802d85a:	f89d 405d 	ldrb.w	r4, [sp, #93]	; 0x5d
 802d85e:	2cff      	cmp	r4, #255	; 0xff
 802d860:	4605      	mov	r5, r0
 802d862:	f04f 0100 	mov.w	r1, #0
 802d866:	d003      	beq.n	802d870 <__gxx_personality_v0+0xe4>
 802d868:	4620      	mov	r0, r4
 802d86a:	f7ff ff29 	bl	802d6c0 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 802d86e:	4601      	mov	r1, r0
 802d870:	462a      	mov	r2, r5
 802d872:	4620      	mov	r0, r4
 802d874:	464b      	mov	r3, r9
 802d876:	f7ff fec3 	bl	802d600 <_ZL28read_encoded_value_with_basehjPKhPj>
 802d87a:	f89d 405d 	ldrb.w	r4, [sp, #93]	; 0x5d
 802d87e:	2cff      	cmp	r4, #255	; 0xff
 802d880:	4605      	mov	r5, r0
 802d882:	f04f 0100 	mov.w	r1, #0
 802d886:	d003      	beq.n	802d890 <__gxx_personality_v0+0x104>
 802d888:	4620      	mov	r0, r4
 802d88a:	f7ff ff19 	bl	802d6c0 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 802d88e:	4601      	mov	r1, r0
 802d890:	462a      	mov	r2, r5
 802d892:	4620      	mov	r0, r4
 802d894:	465b      	mov	r3, fp
 802d896:	f7ff feb3 	bl	802d600 <_ZL28read_encoded_value_with_basehjPKhPj>
 802d89a:	2400      	movs	r4, #0
 802d89c:	4605      	mov	r5, r0
 802d89e:	4621      	mov	r1, r4
 802d8a0:	f815 2b01 	ldrb.w	r2, [r5], #1
 802d8a4:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 802d8a8:	408b      	lsls	r3, r1
 802d8aa:	431c      	orrs	r4, r3
 802d8ac:	0613      	lsls	r3, r2, #24
 802d8ae:	f101 0107 	add.w	r1, r1, #7
 802d8b2:	d4f5      	bmi.n	802d8a0 <__gxx_personality_v0+0x114>
 802d8b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802d8b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802d8b8:	4413      	add	r3, r2
 802d8ba:	42b3      	cmp	r3, r6
 802d8bc:	d91f      	bls.n	802d8fe <__gxx_personality_v0+0x172>
 802d8be:	9b04      	ldr	r3, [sp, #16]
 802d8c0:	07db      	lsls	r3, r3, #31
 802d8c2:	f100 8091 	bmi.w	802d9e8 <__gxx_personality_v0+0x25c>
 802d8c6:	9b04      	ldr	r3, [sp, #16]
 802d8c8:	071c      	lsls	r4, r3, #28
 802d8ca:	d515      	bpl.n	802d8f8 <__gxx_personality_v0+0x16c>
 802d8cc:	f7ff fc36 	bl	802d13c <_ZSt9terminatev>
 802d8d0:	f010 0408 	ands.w	r4, r0, #8
 802d8d4:	d01c      	beq.n	802d910 <__gxx_personality_v0+0x184>
 802d8d6:	aa18      	add	r2, sp, #96	; 0x60
 802d8d8:	f044 0402 	orr.w	r4, r4, #2
 802d8dc:	f842 1d2c 	str.w	r1, [r2, #-44]!
 802d8e0:	4638      	mov	r0, r7
 802d8e2:	9200      	str	r2, [sp, #0]
 802d8e4:	4619      	mov	r1, r3
 802d8e6:	220c      	movs	r2, #12
 802d8e8:	9404      	str	r4, [sp, #16]
 802d8ea:	f7da f9af 	bl	8007c4c <_Unwind_VRS_Set>
 802d8ee:	e776      	b.n	802d7de <__gxx_personality_v0+0x52>
 802d8f0:	2008      	movs	r0, #8
 802d8f2:	b019      	add	sp, #100	; 0x64
 802d8f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d8f8:	4640      	mov	r0, r8
 802d8fa:	f7ff fd1b 	bl	802d334 <__cxa_call_terminate>
 802d8fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802d900:	4413      	add	r3, r2
 802d902:	42b3      	cmp	r3, r6
 802d904:	f200 8088 	bhi.w	802da18 <__gxx_personality_v0+0x28c>
 802d908:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802d90a:	42ab      	cmp	r3, r5
 802d90c:	d896      	bhi.n	802d83c <__gxx_personality_v0+0xb0>
 802d90e:	e7d6      	b.n	802d8be <__gxx_personality_v0+0x132>
 802d910:	ab12      	add	r3, sp, #72	; 0x48
 802d912:	9300      	str	r3, [sp, #0]
 802d914:	9306      	str	r3, [sp, #24]
 802d916:	220d      	movs	r2, #13
 802d918:	4623      	mov	r3, r4
 802d91a:	4621      	mov	r1, r4
 802d91c:	4638      	mov	r0, r7
 802d91e:	f8d8 5020 	ldr.w	r5, [r8, #32]
 802d922:	f7da f971 	bl	8007c08 <_Unwind_VRS_Get>
 802d926:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802d928:	429d      	cmp	r5, r3
 802d92a:	d002      	beq.n	802d932 <__gxx_personality_v0+0x1a6>
 802d92c:	2302      	movs	r3, #2
 802d92e:	9304      	str	r3, [sp, #16]
 802d930:	e74b      	b.n	802d7ca <__gxx_personality_v0+0x3e>
 802d932:	aa18      	add	r2, sp, #96	; 0x60
 802d934:	4623      	mov	r3, r4
 802d936:	f842 8d2c 	str.w	r8, [r2, #-44]!
 802d93a:	4621      	mov	r1, r4
 802d93c:	9200      	str	r2, [sp, #0]
 802d93e:	4638      	mov	r0, r7
 802d940:	220c      	movs	r2, #12
 802d942:	f7da f983 	bl	8007c4c <_Unwind_VRS_Set>
 802d946:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 802d94a:	9303      	str	r3, [sp, #12]
 802d94c:	2b00      	cmp	r3, #0
 802d94e:	d0d3      	beq.n	802d8f8 <__gxx_personality_v0+0x16c>
 802d950:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 802d954:	461a      	mov	r2, r3
 802d956:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 802d95a:	9305      	str	r3, [sp, #20]
 802d95c:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 802d960:	f10d 0940 	add.w	r9, sp, #64	; 0x40
 802d964:	4613      	mov	r3, r2
 802d966:	2b00      	cmp	r3, #0
 802d968:	461c      	mov	r4, r3
 802d96a:	f2c0 8127 	blt.w	802dbbc <__gxx_personality_v0+0x430>
 802d96e:	2503      	movs	r5, #3
 802d970:	a918      	add	r1, sp, #96	; 0x60
 802d972:	2300      	movs	r3, #0
 802d974:	f841 8d28 	str.w	r8, [r1, #-40]!
 802d978:	461a      	mov	r2, r3
 802d97a:	9100      	str	r1, [sp, #0]
 802d97c:	4638      	mov	r0, r7
 802d97e:	4619      	mov	r1, r3
 802d980:	f7da f964 	bl	8007c4c <_Unwind_VRS_Set>
 802d984:	2300      	movs	r3, #0
 802d986:	4619      	mov	r1, r3
 802d988:	2201      	movs	r2, #1
 802d98a:	f8cd a000 	str.w	sl, [sp]
 802d98e:	4638      	mov	r0, r7
 802d990:	940f      	str	r4, [sp, #60]	; 0x3c
 802d992:	f7da f95b 	bl	8007c4c <_Unwind_VRS_Set>
 802d996:	2300      	movs	r3, #0
 802d998:	4619      	mov	r1, r3
 802d99a:	220f      	movs	r2, #15
 802d99c:	f8cd 9000 	str.w	r9, [sp]
 802d9a0:	4638      	mov	r0, r7
 802d9a2:	f7da f931 	bl	8007c08 <_Unwind_VRS_Get>
 802d9a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802d9a8:	9a03      	ldr	r2, [sp, #12]
 802d9aa:	f8cd 9000 	str.w	r9, [sp]
 802d9ae:	f003 0401 	and.w	r4, r3, #1
 802d9b2:	2300      	movs	r3, #0
 802d9b4:	4314      	orrs	r4, r2
 802d9b6:	4638      	mov	r0, r7
 802d9b8:	4619      	mov	r1, r3
 802d9ba:	220f      	movs	r2, #15
 802d9bc:	9410      	str	r4, [sp, #64]	; 0x40
 802d9be:	f7da f945 	bl	8007c4c <_Unwind_VRS_Set>
 802d9c2:	2d02      	cmp	r5, #2
 802d9c4:	d005      	beq.n	802d9d2 <__gxx_personality_v0+0x246>
 802d9c6:	2007      	movs	r0, #7
 802d9c8:	b019      	add	sp, #100	; 0x64
 802d9ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d9ce:	2400      	movs	r4, #0
 802d9d0:	e71c      	b.n	802d80c <__gxx_personality_v0+0x80>
 802d9d2:	4640      	mov	r0, r8
 802d9d4:	f7ff fd8a 	bl	802d4ec <__cxa_begin_cleanup>
 802d9d8:	2007      	movs	r0, #7
 802d9da:	e6ef      	b.n	802d7bc <__gxx_personality_v0+0x30>
 802d9dc:	9b04      	ldr	r3, [sp, #16]
 802d9de:	07d9      	lsls	r1, r3, #31
 802d9e0:	f57f af71 	bpl.w	802d8c6 <__gxx_personality_v0+0x13a>
 802d9e4:	f10d 0940 	add.w	r9, sp, #64	; 0x40
 802d9e8:	2400      	movs	r4, #0
 802d9ea:	9403      	str	r4, [sp, #12]
 802d9ec:	2300      	movs	r3, #0
 802d9ee:	4619      	mov	r1, r3
 802d9f0:	220d      	movs	r2, #13
 802d9f2:	f8cd 9000 	str.w	r9, [sp]
 802d9f6:	4638      	mov	r0, r7
 802d9f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802d9fa:	f7da f905 	bl	8007c08 <_Unwind_VRS_Get>
 802d9fe:	9a05      	ldr	r2, [sp, #20]
 802da00:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802da02:	f8c8 202c 	str.w	r2, [r8, #44]	; 0x2c
 802da06:	9a03      	ldr	r2, [sp, #12]
 802da08:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
 802da0c:	e9c8 5409 	strd	r5, r4, [r8, #36]	; 0x24
 802da10:	f8c8 3020 	str.w	r3, [r8, #32]
 802da14:	2006      	movs	r0, #6
 802da16:	e6d1      	b.n	802d7bc <__gxx_personality_v0+0x30>
 802da18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802da1a:	2b00      	cmp	r3, #0
 802da1c:	f43f aec6 	beq.w	802d7ac <__gxx_personality_v0+0x20>
 802da20:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802da22:	189a      	adds	r2, r3, r2
 802da24:	9203      	str	r2, [sp, #12]
 802da26:	2c00      	cmp	r4, #0
 802da28:	f000 80f0 	beq.w	802dc0c <__gxx_personality_v0+0x480>
 802da2c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802da2e:	3c01      	subs	r4, #1
 802da30:	4423      	add	r3, r4
 802da32:	2a00      	cmp	r2, #0
 802da34:	f43f aeba 	beq.w	802d7ac <__gxx_personality_v0+0x20>
 802da38:	2b00      	cmp	r3, #0
 802da3a:	f000 80f8 	beq.w	802dc2e <__gxx_personality_v0+0x4a2>
 802da3e:	9a04      	ldr	r2, [sp, #16]
 802da40:	f012 0208 	ands.w	r2, r2, #8
 802da44:	9209      	str	r2, [sp, #36]	; 0x24
 802da46:	f000 8103 	beq.w	802dc50 <__gxx_personality_v0+0x4c4>
 802da4a:	2147      	movs	r1, #71	; 0x47
 802da4c:	224e      	movs	r2, #78	; 0x4e
 802da4e:	f888 1000 	strb.w	r1, [r8]
 802da52:	f888 2001 	strb.w	r2, [r8, #1]
 802da56:	2155      	movs	r1, #85	; 0x55
 802da58:	2243      	movs	r2, #67	; 0x43
 802da5a:	f888 1002 	strb.w	r1, [r8, #2]
 802da5e:	f888 2003 	strb.w	r2, [r8, #3]
 802da62:	2146      	movs	r1, #70	; 0x46
 802da64:	224f      	movs	r2, #79	; 0x4f
 802da66:	f888 1004 	strb.w	r1, [r8, #4]
 802da6a:	f888 2005 	strb.w	r2, [r8, #5]
 802da6e:	2152      	movs	r1, #82	; 0x52
 802da70:	2200      	movs	r2, #0
 802da72:	f888 1006 	strb.w	r1, [r8, #6]
 802da76:	f888 2007 	strb.w	r2, [r8, #7]
 802da7a:	e9cd 7a0a 	strd	r7, sl, [sp, #40]	; 0x28
 802da7e:	2200      	movs	r2, #0
 802da80:	9207      	str	r2, [sp, #28]
 802da82:	f8cd 9020 	str.w	r9, [sp, #32]
 802da86:	2400      	movs	r4, #0
 802da88:	4621      	mov	r1, r4
 802da8a:	e000      	b.n	802da8e <__gxx_personality_v0+0x302>
 802da8c:	462b      	mov	r3, r5
 802da8e:	461d      	mov	r5, r3
 802da90:	f815 0b01 	ldrb.w	r0, [r5], #1
 802da94:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 802da98:	408a      	lsls	r2, r1
 802da9a:	0606      	lsls	r6, r0, #24
 802da9c:	ea44 0402 	orr.w	r4, r4, r2
 802daa0:	f101 0107 	add.w	r1, r1, #7
 802daa4:	d4f2      	bmi.n	802da8c <__gxx_personality_v0+0x300>
 802daa6:	291f      	cmp	r1, #31
 802daa8:	d805      	bhi.n	802dab6 <__gxx_personality_v0+0x32a>
 802daaa:	0640      	lsls	r0, r0, #25
 802daac:	d503      	bpl.n	802dab6 <__gxx_personality_v0+0x32a>
 802daae:	2201      	movs	r2, #1
 802dab0:	408a      	lsls	r2, r1
 802dab2:	4252      	negs	r2, r2
 802dab4:	4314      	orrs	r4, r2
 802dab6:	2600      	movs	r6, #0
 802dab8:	4631      	mov	r1, r6
 802daba:	46a1      	mov	r9, r4
 802dabc:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 802dac0:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 802dac4:	408a      	lsls	r2, r1
 802dac6:	4316      	orrs	r6, r2
 802dac8:	0602      	lsls	r2, r0, #24
 802daca:	f101 0107 	add.w	r1, r1, #7
 802dace:	d4f5      	bmi.n	802dabc <__gxx_personality_v0+0x330>
 802dad0:	291f      	cmp	r1, #31
 802dad2:	d805      	bhi.n	802dae0 <__gxx_personality_v0+0x354>
 802dad4:	0647      	lsls	r7, r0, #25
 802dad6:	d503      	bpl.n	802dae0 <__gxx_personality_v0+0x354>
 802dad8:	2301      	movs	r3, #1
 802dada:	408b      	lsls	r3, r1
 802dadc:	425b      	negs	r3, r3
 802dade:	431e      	orrs	r6, r3
 802dae0:	2c00      	cmp	r4, #0
 802dae2:	d04c      	beq.n	802db7e <__gxx_personality_v0+0x3f2>
 802dae4:	dc4e      	bgt.n	802db84 <__gxx_personality_v0+0x3f8>
 802dae6:	f104 0a01 	add.w	sl, r4, #1
 802daea:	ebca 728a 	rsb	r2, sl, sl, lsl #30
 802daee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802daf0:	eb03 0782 	add.w	r7, r3, r2, lsl #2
 802daf4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802daf8:	f1b8 0f00 	cmp.w	r8, #0
 802dafc:	d001      	beq.n	802db02 <__gxx_personality_v0+0x376>
 802dafe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802db00:	b12b      	cbz	r3, 802db0e <__gxx_personality_v0+0x382>
 802db02:	b351      	cbz	r1, 802db5a <__gxx_personality_v0+0x3ce>
 802db04:	2e00      	cmp	r6, #0
 802db06:	f000 808b 	beq.w	802dc20 <__gxx_personality_v0+0x494>
 802db0a:	19ab      	adds	r3, r5, r6
 802db0c:	e7bb      	b.n	802da86 <__gxx_personality_v0+0x2fa>
 802db0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802db10:	9311      	str	r3, [sp, #68]	; 0x44
 802db12:	b929      	cbnz	r1, 802db20 <__gxx_personality_v0+0x394>
 802db14:	e091      	b.n	802dc3a <__gxx_personality_v0+0x4ae>
 802db16:	f857 1f04 	ldr.w	r1, [r7, #4]!
 802db1a:	2900      	cmp	r1, #0
 802db1c:	f000 808d 	beq.w	802dc3a <__gxx_personality_v0+0x4ae>
 802db20:	4439      	add	r1, r7
 802db22:	465b      	mov	r3, fp
 802db24:	2200      	movs	r2, #0
 802db26:	4640      	mov	r0, r8
 802db28:	f7ff fc88 	bl	802d43c <__cxa_type_match>
 802db2c:	2800      	cmp	r0, #0
 802db2e:	d0f2      	beq.n	802db16 <__gxx_personality_v0+0x38a>
 802db30:	e7e8      	b.n	802db04 <__gxx_personality_v0+0x378>
 802db32:	00e2      	lsls	r2, r4, #3
 802db34:	4252      	negs	r2, r2
 802db36:	e9dd 1314 	ldrd	r1, r3, [sp, #80]	; 0x50
 802db3a:	441a      	add	r2, r3
 802db3c:	9b08      	ldr	r3, [sp, #32]
 802db3e:	f7ff fd5f 	bl	802d600 <_ZL28read_encoded_value_with_basehjPKhPj>
 802db42:	9910      	ldr	r1, [sp, #64]	; 0x40
 802db44:	b149      	cbz	r1, 802db5a <__gxx_personality_v0+0x3ce>
 802db46:	f1b8 0f00 	cmp.w	r8, #0
 802db4a:	d0db      	beq.n	802db04 <__gxx_personality_v0+0x378>
 802db4c:	ab0c      	add	r3, sp, #48	; 0x30
 802db4e:	2200      	movs	r2, #0
 802db50:	4640      	mov	r0, r8
 802db52:	f7ff fc73 	bl	802d43c <__cxa_type_match>
 802db56:	2800      	cmp	r0, #0
 802db58:	d0d4      	beq.n	802db04 <__gxx_personality_v0+0x378>
 802db5a:	9b04      	ldr	r3, [sp, #16]
 802db5c:	07d8      	lsls	r0, r3, #31
 802db5e:	464a      	mov	r2, r9
 802db60:	e9dd 7a0a 	ldrd	r7, sl, [sp, #40]	; 0x28
 802db64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802db68:	f53f af40 	bmi.w	802d9ec <__gxx_personality_v0+0x260>
 802db6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802db6e:	2b00      	cmp	r3, #0
 802db70:	f43f aef8 	beq.w	802d964 <__gxx_personality_v0+0x1d8>
 802db74:	2c00      	cmp	r4, #0
 802db76:	f6bf aefa 	bge.w	802d96e <__gxx_personality_v0+0x1e2>
 802db7a:	f7ff faed 	bl	802d158 <_ZSt10unexpectedv>
 802db7e:	2301      	movs	r3, #1
 802db80:	9307      	str	r3, [sp, #28]
 802db82:	e7bf      	b.n	802db04 <__gxx_personality_v0+0x378>
 802db84:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 802db88:	28ff      	cmp	r0, #255	; 0xff
 802db8a:	d03b      	beq.n	802dc04 <__gxx_personality_v0+0x478>
 802db8c:	f000 0307 	and.w	r3, r0, #7
 802db90:	2b04      	cmp	r3, #4
 802db92:	d86a      	bhi.n	802dc6a <__gxx_personality_v0+0x4de>
 802db94:	a201      	add	r2, pc, #4	; (adr r2, 802db9c <__gxx_personality_v0+0x410>)
 802db96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802db9a:	bf00      	nop
 802db9c:	0802dbb7 	.word	0x0802dbb7
 802dba0:	0802dc6b 	.word	0x0802dc6b
 802dba4:	0802dbb1 	.word	0x0802dbb1
 802dba8:	0802dbb7 	.word	0x0802dbb7
 802dbac:	0802db33 	.word	0x0802db33
 802dbb0:	0062      	lsls	r2, r4, #1
 802dbb2:	4252      	negs	r2, r2
 802dbb4:	e7bf      	b.n	802db36 <__gxx_personality_v0+0x3aa>
 802dbb6:	00a2      	lsls	r2, r4, #2
 802dbb8:	4252      	negs	r2, r2
 802dbba:	e7bc      	b.n	802db36 <__gxx_personality_v0+0x3aa>
 802dbbc:	3301      	adds	r3, #1
 802dbbe:	461d      	mov	r5, r3
 802dbc0:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 802dbc4:	4638      	mov	r0, r7
 802dbc6:	f7ff fd97 	bl	802d6f8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 802dbca:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 802dbce:	28ff      	cmp	r0, #255	; 0xff
 802dbd0:	d01a      	beq.n	802dc08 <__gxx_personality_v0+0x47c>
 802dbd2:	4639      	mov	r1, r7
 802dbd4:	f7ff fd74 	bl	802d6c0 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 802dbd8:	ebc5 7285 	rsb	r2, r5, r5, lsl #30
 802dbdc:	0092      	lsls	r2, r2, #2
 802dbde:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802dbe0:	9014      	str	r0, [sp, #80]	; 0x50
 802dbe2:	58ab      	ldr	r3, [r5, r2]
 802dbe4:	4415      	add	r5, r2
 802dbe6:	b133      	cbz	r3, 802dbf6 <__gxx_personality_v0+0x46a>
 802dbe8:	462a      	mov	r2, r5
 802dbea:	2300      	movs	r3, #0
 802dbec:	f852 1f04 	ldr.w	r1, [r2, #4]!
 802dbf0:	3301      	adds	r3, #1
 802dbf2:	2900      	cmp	r1, #0
 802dbf4:	d1fa      	bne.n	802dbec <__gxx_personality_v0+0x460>
 802dbf6:	2204      	movs	r2, #4
 802dbf8:	e9c8 250c 	strd	r2, r5, [r8, #48]	; 0x30
 802dbfc:	e9c8 300a 	strd	r3, r0, [r8, #40]	; 0x28
 802dc00:	2503      	movs	r5, #3
 802dc02:	e6b5      	b.n	802d970 <__gxx_personality_v0+0x1e4>
 802dc04:	2200      	movs	r2, #0
 802dc06:	e796      	b.n	802db36 <__gxx_personality_v0+0x3aa>
 802dc08:	2000      	movs	r0, #0
 802dc0a:	e7e5      	b.n	802dbd8 <__gxx_personality_v0+0x44c>
 802dc0c:	9b03      	ldr	r3, [sp, #12]
 802dc0e:	2b00      	cmp	r3, #0
 802dc10:	f43f adcc 	beq.w	802d7ac <__gxx_personality_v0+0x20>
 802dc14:	9b04      	ldr	r3, [sp, #16]
 802dc16:	07da      	lsls	r2, r3, #31
 802dc18:	f53f adc8 	bmi.w	802d7ac <__gxx_personality_v0+0x20>
 802dc1c:	2502      	movs	r5, #2
 802dc1e:	e6a7      	b.n	802d970 <__gxx_personality_v0+0x1e4>
 802dc20:	e9dd 3907 	ldrd	r3, r9, [sp, #28]
 802dc24:	e9dd 7a0a 	ldrd	r7, sl, [sp, #40]	; 0x28
 802dc28:	2b00      	cmp	r3, #0
 802dc2a:	f43f adbf 	beq.w	802d7ac <__gxx_personality_v0+0x20>
 802dc2e:	9b04      	ldr	r3, [sp, #16]
 802dc30:	07dd      	lsls	r5, r3, #31
 802dc32:	f53f adbb 	bmi.w	802d7ac <__gxx_personality_v0+0x20>
 802dc36:	2400      	movs	r4, #0
 802dc38:	e7f0      	b.n	802dc1c <__gxx_personality_v0+0x490>
 802dc3a:	9b04      	ldr	r3, [sp, #16]
 802dc3c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802dc3e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802dc42:	07de      	lsls	r6, r3, #31
 802dc44:	4655      	mov	r5, sl
 802dc46:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 802dc4a:	f53f aecf 	bmi.w	802d9ec <__gxx_personality_v0+0x260>
 802dc4e:	e7b7      	b.n	802dbc0 <__gxx_personality_v0+0x434>
 802dc50:	f898 2007 	ldrb.w	r2, [r8, #7]
 802dc54:	2a01      	cmp	r2, #1
 802dc56:	bf0c      	ite	eq
 802dc58:	f858 2c20 	ldreq.w	r2, [r8, #-32]
 802dc5c:	f108 0258 	addne.w	r2, r8, #88	; 0x58
 802dc60:	920c      	str	r2, [sp, #48]	; 0x30
 802dc62:	e70a      	b.n	802da7a <__gxx_personality_v0+0x2ee>
 802dc64:	f000 f8a6 	bl	802ddb4 <__cxa_begin_catch>
 802dc68:	e630      	b.n	802d8cc <__gxx_personality_v0+0x140>
 802dc6a:	f000 faf5 	bl	802e258 <abort>
 802dc6e:	bf00      	nop

0802dc70 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
 802dc70:	2801      	cmp	r0, #1
 802dc72:	b510      	push	{r4, lr}
 802dc74:	d81a      	bhi.n	802dcac <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3c>
 802dc76:	f3bf 8f5b 	dmb	ish
 802dc7a:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
 802dc7e:	e853 2f00 	ldrex	r2, [r3]
 802dc82:	3a01      	subs	r2, #1
 802dc84:	e843 2000 	strex	r0, r2, [r3]
 802dc88:	2800      	cmp	r0, #0
 802dc8a:	d1f8      	bne.n	802dc7e <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
 802dc8c:	f3bf 8f5b 	dmb	ish
 802dc90:	b95a      	cbnz	r2, 802dcaa <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3a>
 802dc92:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 802dc96:	f101 0458 	add.w	r4, r1, #88	; 0x58
 802dc9a:	b10b      	cbz	r3, 802dca0 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x30>
 802dc9c:	4620      	mov	r0, r4
 802dc9e:	4798      	blx	r3
 802dca0:	4620      	mov	r0, r4
 802dca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802dca6:	f7ff bb03 	b.w	802d2b0 <__cxa_free_exception>
 802dcaa:	bd10      	pop	{r4, pc}
 802dcac:	f851 0c14 	ldr.w	r0, [r1, #-20]
 802dcb0:	f7ff fa30 	bl	802d114 <_ZN10__cxxabiv111__terminateEPFvvE>

0802dcb4 <__cxa_init_primary_exception>:
 802dcb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802dcb6:	2500      	movs	r5, #0
 802dcb8:	e940 121e 	strd	r1, r2, [r0, #-120]	; 0x78
 802dcbc:	f840 5c80 	str.w	r5, [r0, #-128]
 802dcc0:	4604      	mov	r4, r0
 802dcc2:	f7ff fa5b 	bl	802d17c <_ZSt14get_unexpectedv>
 802dcc6:	f844 0c70 	str.w	r0, [r4, #-112]
 802dcca:	f7ff fa4f 	bl	802d16c <_ZSt13get_terminatev>
 802dcce:	2347      	movs	r3, #71	; 0x47
 802dcd0:	2243      	movs	r2, #67	; 0x43
 802dcd2:	274e      	movs	r7, #78	; 0x4e
 802dcd4:	2655      	movs	r6, #85	; 0x55
 802dcd6:	490c      	ldr	r1, [pc, #48]	; (802dd08 <__cxa_init_primary_exception+0x54>)
 802dcd8:	f804 3c58 	strb.w	r3, [r4, #-88]
 802dcdc:	232b      	movs	r3, #43	; 0x2b
 802dcde:	f804 5c51 	strb.w	r5, [r4, #-81]
 802dce2:	f804 7c57 	strb.w	r7, [r4, #-87]
 802dce6:	f804 6c56 	strb.w	r6, [r4, #-86]
 802dcea:	f844 1c50 	str.w	r1, [r4, #-80]
 802dcee:	f804 2c55 	strb.w	r2, [r4, #-85]
 802dcf2:	f804 2c54 	strb.w	r2, [r4, #-84]
 802dcf6:	f804 3c53 	strb.w	r3, [r4, #-83]
 802dcfa:	f804 3c52 	strb.w	r3, [r4, #-82]
 802dcfe:	f844 0c6c 	str.w	r0, [r4, #-108]
 802dd02:	f1a4 0080 	sub.w	r0, r4, #128	; 0x80
 802dd06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802dd08:	0802dc71 	.word	0x0802dc71

0802dd0c <__cxa_throw>:
 802dd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802dd0e:	4605      	mov	r5, r0
 802dd10:	460e      	mov	r6, r1
 802dd12:	4617      	mov	r7, r2
 802dd14:	f7ff fc70 	bl	802d5f8 <__cxa_get_globals>
 802dd18:	6843      	ldr	r3, [r0, #4]
 802dd1a:	4604      	mov	r4, r0
 802dd1c:	3301      	adds	r3, #1
 802dd1e:	463a      	mov	r2, r7
 802dd20:	4631      	mov	r1, r6
 802dd22:	6063      	str	r3, [r4, #4]
 802dd24:	4628      	mov	r0, r5
 802dd26:	f7ff ffc5 	bl	802dcb4 <__cxa_init_primary_exception>
 802dd2a:	4604      	mov	r4, r0
 802dd2c:	2301      	movs	r3, #1
 802dd2e:	f844 3b28 	str.w	r3, [r4], #40
 802dd32:	4620      	mov	r0, r4
 802dd34:	f7da fb12 	bl	800835c <_Unwind_RaiseException>
 802dd38:	4620      	mov	r0, r4
 802dd3a:	f000 f83b 	bl	802ddb4 <__cxa_begin_catch>
 802dd3e:	f7ff f9fd 	bl	802d13c <_ZSt9terminatev>
 802dd42:	bf00      	nop

0802dd44 <__cxa_rethrow>:
 802dd44:	b510      	push	{r4, lr}
 802dd46:	f7ff fc57 	bl	802d5f8 <__cxa_get_globals>
 802dd4a:	e9d0 4200 	ldrd	r4, r2, [r0]
 802dd4e:	3201      	adds	r2, #1
 802dd50:	6042      	str	r2, [r0, #4]
 802dd52:	b164      	cbz	r4, 802dd6e <__cxa_rethrow+0x2a>
 802dd54:	f894 2020 	ldrb.w	r2, [r4, #32]
 802dd58:	2a47      	cmp	r2, #71	; 0x47
 802dd5a:	d00a      	beq.n	802dd72 <__cxa_rethrow+0x2e>
 802dd5c:	2200      	movs	r2, #0
 802dd5e:	6002      	str	r2, [r0, #0]
 802dd60:	3420      	adds	r4, #32
 802dd62:	4620      	mov	r0, r4
 802dd64:	f7da fb1e 	bl	80083a4 <_Unwind_Resume_or_Rethrow>
 802dd68:	4620      	mov	r0, r4
 802dd6a:	f000 f823 	bl	802ddb4 <__cxa_begin_catch>
 802dd6e:	f7ff f9e5 	bl	802d13c <_ZSt9terminatev>
 802dd72:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 802dd76:	2a4e      	cmp	r2, #78	; 0x4e
 802dd78:	d1f0      	bne.n	802dd5c <__cxa_rethrow+0x18>
 802dd7a:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 802dd7e:	2a55      	cmp	r2, #85	; 0x55
 802dd80:	d1ec      	bne.n	802dd5c <__cxa_rethrow+0x18>
 802dd82:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 802dd86:	2a43      	cmp	r2, #67	; 0x43
 802dd88:	d1e8      	bne.n	802dd5c <__cxa_rethrow+0x18>
 802dd8a:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 802dd8e:	2a43      	cmp	r2, #67	; 0x43
 802dd90:	d1e4      	bne.n	802dd5c <__cxa_rethrow+0x18>
 802dd92:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 802dd96:	2a2b      	cmp	r2, #43	; 0x2b
 802dd98:	d1e0      	bne.n	802dd5c <__cxa_rethrow+0x18>
 802dd9a:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 802dd9e:	2a2b      	cmp	r2, #43	; 0x2b
 802dda0:	d1dc      	bne.n	802dd5c <__cxa_rethrow+0x18>
 802dda2:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 802dda6:	2a01      	cmp	r2, #1
 802dda8:	d8d8      	bhi.n	802dd5c <__cxa_rethrow+0x18>
 802ddaa:	6962      	ldr	r2, [r4, #20]
 802ddac:	4252      	negs	r2, r2
 802ddae:	6162      	str	r2, [r4, #20]
 802ddb0:	e7d6      	b.n	802dd60 <__cxa_rethrow+0x1c>
 802ddb2:	bf00      	nop

0802ddb4 <__cxa_begin_catch>:
 802ddb4:	b538      	push	{r3, r4, r5, lr}
 802ddb6:	4604      	mov	r4, r0
 802ddb8:	f7ff fc1e 	bl	802d5f8 <__cxa_get_globals>
 802ddbc:	7822      	ldrb	r2, [r4, #0]
 802ddbe:	6803      	ldr	r3, [r0, #0]
 802ddc0:	2a47      	cmp	r2, #71	; 0x47
 802ddc2:	f1a4 0120 	sub.w	r1, r4, #32
 802ddc6:	d004      	beq.n	802ddd2 <__cxa_begin_catch+0x1e>
 802ddc8:	bb8b      	cbnz	r3, 802de2e <__cxa_begin_catch+0x7a>
 802ddca:	461c      	mov	r4, r3
 802ddcc:	6001      	str	r1, [r0, #0]
 802ddce:	4620      	mov	r0, r4
 802ddd0:	bd38      	pop	{r3, r4, r5, pc}
 802ddd2:	7862      	ldrb	r2, [r4, #1]
 802ddd4:	2a4e      	cmp	r2, #78	; 0x4e
 802ddd6:	d1f7      	bne.n	802ddc8 <__cxa_begin_catch+0x14>
 802ddd8:	78a2      	ldrb	r2, [r4, #2]
 802ddda:	2a55      	cmp	r2, #85	; 0x55
 802dddc:	d1f4      	bne.n	802ddc8 <__cxa_begin_catch+0x14>
 802ddde:	78e2      	ldrb	r2, [r4, #3]
 802dde0:	2a43      	cmp	r2, #67	; 0x43
 802dde2:	d1f1      	bne.n	802ddc8 <__cxa_begin_catch+0x14>
 802dde4:	7922      	ldrb	r2, [r4, #4]
 802dde6:	2a43      	cmp	r2, #67	; 0x43
 802dde8:	d1ee      	bne.n	802ddc8 <__cxa_begin_catch+0x14>
 802ddea:	7962      	ldrb	r2, [r4, #5]
 802ddec:	2a2b      	cmp	r2, #43	; 0x2b
 802ddee:	d1eb      	bne.n	802ddc8 <__cxa_begin_catch+0x14>
 802ddf0:	79a2      	ldrb	r2, [r4, #6]
 802ddf2:	2a2b      	cmp	r2, #43	; 0x2b
 802ddf4:	d1e8      	bne.n	802ddc8 <__cxa_begin_catch+0x14>
 802ddf6:	79e2      	ldrb	r2, [r4, #7]
 802ddf8:	2a01      	cmp	r2, #1
 802ddfa:	d8e5      	bhi.n	802ddc8 <__cxa_begin_catch+0x14>
 802ddfc:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 802de00:	2a00      	cmp	r2, #0
 802de02:	db11      	blt.n	802de28 <__cxa_begin_catch+0x74>
 802de04:	3201      	adds	r2, #1
 802de06:	6845      	ldr	r5, [r0, #4]
 802de08:	f844 2c0c 	str.w	r2, [r4, #-12]
 802de0c:	428b      	cmp	r3, r1
 802de0e:	f105 35ff 	add.w	r5, r5, #4294967295
 802de12:	6045      	str	r5, [r0, #4]
 802de14:	bf1c      	itt	ne
 802de16:	f844 3c10 	strne.w	r3, [r4, #-16]
 802de1a:	6001      	strne	r1, [r0, #0]
 802de1c:	4620      	mov	r0, r4
 802de1e:	6a64      	ldr	r4, [r4, #36]	; 0x24
 802de20:	f7d9 feea 	bl	8007bf8 <_Unwind_Complete>
 802de24:	4620      	mov	r0, r4
 802de26:	bd38      	pop	{r3, r4, r5, pc}
 802de28:	f1c2 0201 	rsb	r2, r2, #1
 802de2c:	e7eb      	b.n	802de06 <__cxa_begin_catch+0x52>
 802de2e:	f7ff f985 	bl	802d13c <_ZSt9terminatev>
 802de32:	bf00      	nop

0802de34 <__cxa_end_catch>:
 802de34:	b508      	push	{r3, lr}
 802de36:	f7ff fbdb 	bl	802d5f0 <__cxa_get_globals_fast>
 802de3a:	4602      	mov	r2, r0
 802de3c:	6800      	ldr	r0, [r0, #0]
 802de3e:	b370      	cbz	r0, 802de9e <__cxa_end_catch+0x6a>
 802de40:	f890 3020 	ldrb.w	r3, [r0, #32]
 802de44:	2b47      	cmp	r3, #71	; 0x47
 802de46:	d006      	beq.n	802de56 <__cxa_end_catch+0x22>
 802de48:	2300      	movs	r3, #0
 802de4a:	6013      	str	r3, [r2, #0]
 802de4c:	3020      	adds	r0, #32
 802de4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 802de52:	f7d9 bed3 	b.w	8007bfc <_Unwind_DeleteException>
 802de56:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 802de5a:	2b4e      	cmp	r3, #78	; 0x4e
 802de5c:	d1f4      	bne.n	802de48 <__cxa_end_catch+0x14>
 802de5e:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 802de62:	2b55      	cmp	r3, #85	; 0x55
 802de64:	d1f0      	bne.n	802de48 <__cxa_end_catch+0x14>
 802de66:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 802de6a:	2b43      	cmp	r3, #67	; 0x43
 802de6c:	d1ec      	bne.n	802de48 <__cxa_end_catch+0x14>
 802de6e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 802de72:	2b43      	cmp	r3, #67	; 0x43
 802de74:	d1e8      	bne.n	802de48 <__cxa_end_catch+0x14>
 802de76:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 802de7a:	2b2b      	cmp	r3, #43	; 0x2b
 802de7c:	d1e4      	bne.n	802de48 <__cxa_end_catch+0x14>
 802de7e:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 802de82:	2b2b      	cmp	r3, #43	; 0x2b
 802de84:	d1e0      	bne.n	802de48 <__cxa_end_catch+0x14>
 802de86:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 802de8a:	2b01      	cmp	r3, #1
 802de8c:	d8dc      	bhi.n	802de48 <__cxa_end_catch+0x14>
 802de8e:	6943      	ldr	r3, [r0, #20]
 802de90:	2b00      	cmp	r3, #0
 802de92:	db05      	blt.n	802dea0 <__cxa_end_catch+0x6c>
 802de94:	3b01      	subs	r3, #1
 802de96:	2b00      	cmp	r3, #0
 802de98:	d007      	beq.n	802deaa <__cxa_end_catch+0x76>
 802de9a:	db0d      	blt.n	802deb8 <__cxa_end_catch+0x84>
 802de9c:	6143      	str	r3, [r0, #20]
 802de9e:	bd08      	pop	{r3, pc}
 802dea0:	3301      	adds	r3, #1
 802dea2:	d1fb      	bne.n	802de9c <__cxa_end_catch+0x68>
 802dea4:	6901      	ldr	r1, [r0, #16]
 802dea6:	6011      	str	r1, [r2, #0]
 802dea8:	e7f8      	b.n	802de9c <__cxa_end_catch+0x68>
 802deaa:	6903      	ldr	r3, [r0, #16]
 802deac:	6013      	str	r3, [r2, #0]
 802deae:	3020      	adds	r0, #32
 802deb0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 802deb4:	f7d9 bea2 	b.w	8007bfc <_Unwind_DeleteException>
 802deb8:	f7ff f940 	bl	802d13c <_ZSt9terminatev>

0802debc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 802debc:	b510      	push	{r4, lr}
 802debe:	4b03      	ldr	r3, [pc, #12]	; (802decc <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 802dec0:	6003      	str	r3, [r0, #0]
 802dec2:	4604      	mov	r4, r0
 802dec4:	f000 f8d6 	bl	802e074 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 802dec8:	4620      	mov	r0, r4
 802deca:	bd10      	pop	{r4, pc}
 802decc:	08034ba0 	.word	0x08034ba0

0802ded0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 802ded0:	b510      	push	{r4, lr}
 802ded2:	4b05      	ldr	r3, [pc, #20]	; (802dee8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
 802ded4:	6003      	str	r3, [r0, #0]
 802ded6:	4604      	mov	r4, r0
 802ded8:	f000 f8cc 	bl	802e074 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 802dedc:	4620      	mov	r0, r4
 802dede:	210c      	movs	r1, #12
 802dee0:	f7ff f8f4 	bl	802d0cc <_ZdlPvj>
 802dee4:	4620      	mov	r0, r4
 802dee6:	bd10      	pop	{r4, pc}
 802dee8:	08034ba0 	.word	0x08034ba0

0802deec <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 802deec:	b570      	push	{r4, r5, r6, lr}
 802deee:	b082      	sub	sp, #8
 802def0:	460e      	mov	r6, r1
 802def2:	9c06      	ldr	r4, [sp, #24]
 802def4:	4294      	cmp	r4, r2
 802def6:	4605      	mov	r5, r0
 802def8:	d009      	beq.n	802df0e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x22>
 802defa:	68a8      	ldr	r0, [r5, #8]
 802defc:	6805      	ldr	r5, [r0, #0]
 802defe:	9406      	str	r4, [sp, #24]
 802df00:	6a2c      	ldr	r4, [r5, #32]
 802df02:	4631      	mov	r1, r6
 802df04:	46a4      	mov	ip, r4
 802df06:	b002      	add	sp, #8
 802df08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802df0c:	4760      	bx	ip
 802df0e:	4619      	mov	r1, r3
 802df10:	9201      	str	r2, [sp, #4]
 802df12:	9300      	str	r3, [sp, #0]
 802df14:	f000 f876 	bl	802e004 <_ZNKSt9type_infoeqERKS_>
 802df18:	e9dd 3200 	ldrd	r3, r2, [sp]
 802df1c:	2800      	cmp	r0, #0
 802df1e:	d0ec      	beq.n	802defa <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 802df20:	2006      	movs	r0, #6
 802df22:	b002      	add	sp, #8
 802df24:	bd70      	pop	{r4, r5, r6, pc}
 802df26:	bf00      	nop

0802df28 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 802df28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802df2c:	460e      	mov	r6, r1
 802df2e:	b081      	sub	sp, #4
 802df30:	4619      	mov	r1, r3
 802df32:	461f      	mov	r7, r3
 802df34:	4691      	mov	r9, r2
 802df36:	4683      	mov	fp, r0
 802df38:	e9dd 4a0a 	ldrd	r4, sl, [sp, #40]	; 0x28
 802df3c:	e9dd 850c 	ldrd	r8, r5, [sp, #48]	; 0x30
 802df40:	f000 f860 	bl	802e004 <_ZNKSt9type_infoeqERKS_>
 802df44:	b170      	cbz	r0, 802df64 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
 802df46:	2e00      	cmp	r6, #0
 802df48:	602c      	str	r4, [r5, #0]
 802df4a:	f885 9004 	strb.w	r9, [r5, #4]
 802df4e:	db1d      	blt.n	802df8c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x64>
 802df50:	4434      	add	r4, r6
 802df52:	45a0      	cmp	r8, r4
 802df54:	bf0c      	ite	eq
 802df56:	2406      	moveq	r4, #6
 802df58:	2401      	movne	r4, #1
 802df5a:	71ac      	strb	r4, [r5, #6]
 802df5c:	2000      	movs	r0, #0
 802df5e:	b001      	add	sp, #4
 802df60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802df64:	4544      	cmp	r4, r8
 802df66:	d016      	beq.n	802df96 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6e>
 802df68:	f8db 0008 	ldr.w	r0, [fp, #8]
 802df6c:	f8d0 c000 	ldr.w	ip, [r0]
 802df70:	e9cd 850c 	strd	r8, r5, [sp, #48]	; 0x30
 802df74:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	; 0x28
 802df78:	f8dc 401c 	ldr.w	r4, [ip, #28]
 802df7c:	463b      	mov	r3, r7
 802df7e:	464a      	mov	r2, r9
 802df80:	4631      	mov	r1, r6
 802df82:	46a4      	mov	ip, r4
 802df84:	b001      	add	sp, #4
 802df86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802df8a:	4760      	bx	ip
 802df8c:	3602      	adds	r6, #2
 802df8e:	d1e5      	bne.n	802df5c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 802df90:	2301      	movs	r3, #1
 802df92:	71ab      	strb	r3, [r5, #6]
 802df94:	e7e2      	b.n	802df5c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 802df96:	4651      	mov	r1, sl
 802df98:	4658      	mov	r0, fp
 802df9a:	f000 f833 	bl	802e004 <_ZNKSt9type_infoeqERKS_>
 802df9e:	2800      	cmp	r0, #0
 802dfa0:	d0e2      	beq.n	802df68 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
 802dfa2:	f885 9005 	strb.w	r9, [r5, #5]
 802dfa6:	e7d9      	b.n	802df5c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>

0802dfa8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 802dfa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802dfac:	4607      	mov	r7, r0
 802dfae:	460c      	mov	r4, r1
 802dfb0:	4615      	mov	r5, r2
 802dfb2:	461e      	mov	r6, r3
 802dfb4:	f000 f898 	bl	802e0e8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 802dfb8:	b108      	cbz	r0, 802dfbe <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x16>
 802dfba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802dfbe:	68b8      	ldr	r0, [r7, #8]
 802dfc0:	6807      	ldr	r7, [r0, #0]
 802dfc2:	4621      	mov	r1, r4
 802dfc4:	69bc      	ldr	r4, [r7, #24]
 802dfc6:	4633      	mov	r3, r6
 802dfc8:	462a      	mov	r2, r5
 802dfca:	46a4      	mov	ip, r4
 802dfcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802dfd0:	4760      	bx	ip
 802dfd2:	bf00      	nop

0802dfd4 <_ZNSt9exceptionD1Ev>:
 802dfd4:	4770      	bx	lr
 802dfd6:	bf00      	nop

0802dfd8 <_ZNSt13bad_exceptionD1Ev>:
 802dfd8:	4770      	bx	lr
 802dfda:	bf00      	nop

0802dfdc <_ZGTtNKSt9exception4whatEv>:
 802dfdc:	4800      	ldr	r0, [pc, #0]	; (802dfe0 <_ZGTtNKSt9exception4whatEv+0x4>)
 802dfde:	4770      	bx	lr
 802dfe0:	08034bd8 	.word	0x08034bd8

0802dfe4 <_ZGTtNKSt13bad_exception4whatEv>:
 802dfe4:	4800      	ldr	r0, [pc, #0]	; (802dfe8 <_ZGTtNKSt13bad_exception4whatEv+0x4>)
 802dfe6:	4770      	bx	lr
 802dfe8:	08034bc4 	.word	0x08034bc4

0802dfec <_ZNSt13bad_exceptionD0Ev>:
 802dfec:	b510      	push	{r4, lr}
 802dfee:	2104      	movs	r1, #4
 802dff0:	4604      	mov	r4, r0
 802dff2:	f7ff f86b 	bl	802d0cc <_ZdlPvj>
 802dff6:	4620      	mov	r0, r4
 802dff8:	bd10      	pop	{r4, pc}
 802dffa:	bf00      	nop

0802dffc <_ZNSt9type_infoD1Ev>:
 802dffc:	4770      	bx	lr
 802dffe:	bf00      	nop

0802e000 <_ZNKSt9type_info14__is_pointer_pEv>:
 802e000:	2000      	movs	r0, #0
 802e002:	4770      	bx	lr

0802e004 <_ZNKSt9type_infoeqERKS_>:
 802e004:	4281      	cmp	r1, r0
 802e006:	d00f      	beq.n	802e028 <_ZNKSt9type_infoeqERKS_+0x24>
 802e008:	b508      	push	{r3, lr}
 802e00a:	6840      	ldr	r0, [r0, #4]
 802e00c:	7803      	ldrb	r3, [r0, #0]
 802e00e:	2b2a      	cmp	r3, #42	; 0x2a
 802e010:	d00c      	beq.n	802e02c <_ZNKSt9type_infoeqERKS_+0x28>
 802e012:	6849      	ldr	r1, [r1, #4]
 802e014:	780b      	ldrb	r3, [r1, #0]
 802e016:	2b2a      	cmp	r3, #42	; 0x2a
 802e018:	bf08      	it	eq
 802e01a:	3101      	addeq	r1, #1
 802e01c:	f7d8 fe56 	bl	8006ccc <strcmp>
 802e020:	fab0 f080 	clz	r0, r0
 802e024:	0940      	lsrs	r0, r0, #5
 802e026:	bd08      	pop	{r3, pc}
 802e028:	2001      	movs	r0, #1
 802e02a:	4770      	bx	lr
 802e02c:	2000      	movs	r0, #0
 802e02e:	bd08      	pop	{r3, pc}

0802e030 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 802e030:	b570      	push	{r4, r5, r6, lr}
 802e032:	6803      	ldr	r3, [r0, #0]
 802e034:	b084      	sub	sp, #16
 802e036:	2400      	movs	r4, #0
 802e038:	699e      	ldr	r6, [r3, #24]
 802e03a:	9400      	str	r4, [sp, #0]
 802e03c:	2310      	movs	r3, #16
 802e03e:	4615      	mov	r5, r2
 802e040:	e9cd 3402 	strd	r3, r4, [sp, #8]
 802e044:	6812      	ldr	r2, [r2, #0]
 802e046:	f88d 4004 	strb.w	r4, [sp, #4]
 802e04a:	466b      	mov	r3, sp
 802e04c:	47b0      	blx	r6
 802e04e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 802e052:	f003 0306 	and.w	r3, r3, #6
 802e056:	2b06      	cmp	r3, #6
 802e058:	bf03      	ittte	eq
 802e05a:	9b00      	ldreq	r3, [sp, #0]
 802e05c:	602b      	streq	r3, [r5, #0]
 802e05e:	2001      	moveq	r0, #1
 802e060:	4620      	movne	r0, r4
 802e062:	b004      	add	sp, #16
 802e064:	bd70      	pop	{r4, r5, r6, pc}
 802e066:	bf00      	nop

0802e068 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 802e068:	9800      	ldr	r0, [sp, #0]
 802e06a:	4290      	cmp	r0, r2
 802e06c:	bf0c      	ite	eq
 802e06e:	2006      	moveq	r0, #6
 802e070:	2001      	movne	r0, #1
 802e072:	4770      	bx	lr

0802e074 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 802e074:	b510      	push	{r4, lr}
 802e076:	4b03      	ldr	r3, [pc, #12]	; (802e084 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 802e078:	6003      	str	r3, [r0, #0]
 802e07a:	4604      	mov	r4, r0
 802e07c:	f7ff ffbe 	bl	802dffc <_ZNSt9type_infoD1Ev>
 802e080:	4620      	mov	r0, r4
 802e082:	bd10      	pop	{r4, pc}
 802e084:	08034cd8 	.word	0x08034cd8

0802e088 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 802e088:	b510      	push	{r4, lr}
 802e08a:	4b05      	ldr	r3, [pc, #20]	; (802e0a0 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
 802e08c:	6003      	str	r3, [r0, #0]
 802e08e:	4604      	mov	r4, r0
 802e090:	f7ff ffb4 	bl	802dffc <_ZNSt9type_infoD1Ev>
 802e094:	4620      	mov	r0, r4
 802e096:	2108      	movs	r1, #8
 802e098:	f7ff f818 	bl	802d0cc <_ZdlPvj>
 802e09c:	4620      	mov	r0, r4
 802e09e:	bd10      	pop	{r4, pc}
 802e0a0:	08034cd8 	.word	0x08034cd8

0802e0a4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 802e0a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802e0a8:	e9dd 1408 	ldrd	r1, r4, [sp, #32]
 802e0ac:	9d06      	ldr	r5, [sp, #24]
 802e0ae:	428d      	cmp	r5, r1
 802e0b0:	4690      	mov	r8, r2
 802e0b2:	461f      	mov	r7, r3
 802e0b4:	4606      	mov	r6, r0
 802e0b6:	d00c      	beq.n	802e0d2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>
 802e0b8:	4639      	mov	r1, r7
 802e0ba:	4630      	mov	r0, r6
 802e0bc:	f7ff ffa2 	bl	802e004 <_ZNKSt9type_infoeqERKS_>
 802e0c0:	b120      	cbz	r0, 802e0cc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x28>
 802e0c2:	2301      	movs	r3, #1
 802e0c4:	6025      	str	r5, [r4, #0]
 802e0c6:	f884 8004 	strb.w	r8, [r4, #4]
 802e0ca:	71a3      	strb	r3, [r4, #6]
 802e0cc:	2000      	movs	r0, #0
 802e0ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802e0d2:	9907      	ldr	r1, [sp, #28]
 802e0d4:	f7ff ff96 	bl	802e004 <_ZNKSt9type_infoeqERKS_>
 802e0d8:	2800      	cmp	r0, #0
 802e0da:	d0ed      	beq.n	802e0b8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x14>
 802e0dc:	f884 8005 	strb.w	r8, [r4, #5]
 802e0e0:	2000      	movs	r0, #0
 802e0e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802e0e6:	bf00      	nop

0802e0e8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 802e0e8:	b538      	push	{r3, r4, r5, lr}
 802e0ea:	4615      	mov	r5, r2
 802e0ec:	461c      	mov	r4, r3
 802e0ee:	f7ff ff89 	bl	802e004 <_ZNKSt9type_infoeqERKS_>
 802e0f2:	b120      	cbz	r0, 802e0fe <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 802e0f4:	2208      	movs	r2, #8
 802e0f6:	2306      	movs	r3, #6
 802e0f8:	6025      	str	r5, [r4, #0]
 802e0fa:	60e2      	str	r2, [r4, #12]
 802e0fc:	7123      	strb	r3, [r4, #4]
 802e0fe:	bd38      	pop	{r3, r4, r5, pc}

0802e100 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 802e100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802e104:	4617      	mov	r7, r2
 802e106:	461c      	mov	r4, r3
 802e108:	4606      	mov	r6, r0
 802e10a:	460d      	mov	r5, r1
 802e10c:	f7ff ff7a 	bl	802e004 <_ZNKSt9type_infoeqERKS_>
 802e110:	b908      	cbnz	r0, 802e116 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
 802e112:	2c03      	cmp	r4, #3
 802e114:	d901      	bls.n	802e11a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x1a>
 802e116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802e11a:	682b      	ldr	r3, [r5, #0]
 802e11c:	463a      	mov	r2, r7
 802e11e:	4631      	mov	r1, r6
 802e120:	4628      	mov	r0, r5
 802e122:	695b      	ldr	r3, [r3, #20]
 802e124:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802e128:	4718      	bx	r3
 802e12a:	bf00      	nop

0802e12c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
 802e12c:	b570      	push	{r4, r5, r6, lr}
 802e12e:	4b3c      	ldr	r3, [pc, #240]	; (802e220 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
 802e130:	781a      	ldrb	r2, [r3, #0]
 802e132:	b082      	sub	sp, #8
 802e134:	2a00      	cmp	r2, #0
 802e136:	d135      	bne.n	802e1a4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x78>
 802e138:	2401      	movs	r4, #1
 802e13a:	701c      	strb	r4, [r3, #0]
 802e13c:	f000 f87e 	bl	802e23c <__cxa_current_exception_type>
 802e140:	2800      	cmp	r0, #0
 802e142:	d03d      	beq.n	802e1c0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x94>
 802e144:	6844      	ldr	r4, [r0, #4]
 802e146:	4d37      	ldr	r5, [pc, #220]	; (802e224 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 802e148:	7823      	ldrb	r3, [r4, #0]
 802e14a:	2b2a      	cmp	r3, #42	; 0x2a
 802e14c:	ab02      	add	r3, sp, #8
 802e14e:	f04f 32ff 	mov.w	r2, #4294967295
 802e152:	bf08      	it	eq
 802e154:	3401      	addeq	r4, #1
 802e156:	f843 2d04 	str.w	r2, [r3, #-4]!
 802e15a:	2200      	movs	r2, #0
 802e15c:	4611      	mov	r1, r2
 802e15e:	4620      	mov	r0, r4
 802e160:	f7d8 fd3e 	bl	8006be0 <__cxa_demangle>
 802e164:	682b      	ldr	r3, [r5, #0]
 802e166:	4606      	mov	r6, r0
 802e168:	68db      	ldr	r3, [r3, #12]
 802e16a:	482f      	ldr	r0, [pc, #188]	; (802e228 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
 802e16c:	2230      	movs	r2, #48	; 0x30
 802e16e:	2101      	movs	r1, #1
 802e170:	f000 f98e 	bl	802e490 <fwrite>
 802e174:	9b01      	ldr	r3, [sp, #4]
 802e176:	b17b      	cbz	r3, 802e198 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6c>
 802e178:	682b      	ldr	r3, [r5, #0]
 802e17a:	4620      	mov	r0, r4
 802e17c:	68d9      	ldr	r1, [r3, #12]
 802e17e:	f000 f931 	bl	802e3e4 <fputs>
 802e182:	682b      	ldr	r3, [r5, #0]
 802e184:	4829      	ldr	r0, [pc, #164]	; (802e22c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
 802e186:	68db      	ldr	r3, [r3, #12]
 802e188:	2202      	movs	r2, #2
 802e18a:	2101      	movs	r1, #1
 802e18c:	f000 f980 	bl	802e490 <fwrite>
 802e190:	9b01      	ldr	r3, [sp, #4]
 802e192:	b18b      	cbz	r3, 802e1b8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
 802e194:	f7ff fdd6 	bl	802dd44 <__cxa_rethrow>
 802e198:	682b      	ldr	r3, [r5, #0]
 802e19a:	4630      	mov	r0, r6
 802e19c:	68d9      	ldr	r1, [r3, #12]
 802e19e:	f000 f921 	bl	802e3e4 <fputs>
 802e1a2:	e7ee      	b.n	802e182 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x56>
 802e1a4:	4b1f      	ldr	r3, [pc, #124]	; (802e224 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 802e1a6:	4822      	ldr	r0, [pc, #136]	; (802e230 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
 802e1a8:	681b      	ldr	r3, [r3, #0]
 802e1aa:	221d      	movs	r2, #29
 802e1ac:	68db      	ldr	r3, [r3, #12]
 802e1ae:	2101      	movs	r1, #1
 802e1b0:	f000 f96e 	bl	802e490 <fwrite>
 802e1b4:	f000 f850 	bl	802e258 <abort>
 802e1b8:	4630      	mov	r0, r6
 802e1ba:	f000 f9a3 	bl	802e504 <free>
 802e1be:	e7e9      	b.n	802e194 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x68>
 802e1c0:	4b18      	ldr	r3, [pc, #96]	; (802e224 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 802e1c2:	481c      	ldr	r0, [pc, #112]	; (802e234 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
 802e1c4:	681b      	ldr	r3, [r3, #0]
 802e1c6:	4621      	mov	r1, r4
 802e1c8:	68db      	ldr	r3, [r3, #12]
 802e1ca:	222d      	movs	r2, #45	; 0x2d
 802e1cc:	f000 f960 	bl	802e490 <fwrite>
 802e1d0:	f000 f842 	bl	802e258 <abort>
 802e1d4:	2901      	cmp	r1, #1
 802e1d6:	460c      	mov	r4, r1
 802e1d8:	d119      	bne.n	802e20e <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xe2>
 802e1da:	f7ff fdeb 	bl	802ddb4 <__cxa_begin_catch>
 802e1de:	6803      	ldr	r3, [r0, #0]
 802e1e0:	689b      	ldr	r3, [r3, #8]
 802e1e2:	4798      	blx	r3
 802e1e4:	682b      	ldr	r3, [r5, #0]
 802e1e6:	4606      	mov	r6, r0
 802e1e8:	68db      	ldr	r3, [r3, #12]
 802e1ea:	4813      	ldr	r0, [pc, #76]	; (802e238 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
 802e1ec:	4621      	mov	r1, r4
 802e1ee:	220b      	movs	r2, #11
 802e1f0:	f000 f94e 	bl	802e490 <fwrite>
 802e1f4:	682b      	ldr	r3, [r5, #0]
 802e1f6:	4630      	mov	r0, r6
 802e1f8:	68d9      	ldr	r1, [r3, #12]
 802e1fa:	f000 f8f3 	bl	802e3e4 <fputs>
 802e1fe:	682b      	ldr	r3, [r5, #0]
 802e200:	200a      	movs	r0, #10
 802e202:	68d9      	ldr	r1, [r3, #12]
 802e204:	f000 f89e 	bl	802e344 <fputc>
 802e208:	f7ff fe14 	bl	802de34 <__cxa_end_catch>
 802e20c:	e7e0      	b.n	802e1d0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xa4>
 802e20e:	f7ff fdd1 	bl	802ddb4 <__cxa_begin_catch>
 802e212:	f7ff fe0f 	bl	802de34 <__cxa_end_catch>
 802e216:	e7db      	b.n	802e1d0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xa4>
 802e218:	f7ff fe0c 	bl	802de34 <__cxa_end_catch>
 802e21c:	f7ff f908 	bl	802d430 <__cxa_end_cleanup>
 802e220:	200129dc 	.word	0x200129dc
 802e224:	20000118 	.word	0x20000118
 802e228:	08034d1c 	.word	0x08034d1c
 802e22c:	08034d50 	.word	0x08034d50
 802e230:	08034cfc 	.word	0x08034cfc
 802e234:	08034d54 	.word	0x08034d54
 802e238:	08034d84 	.word	0x08034d84

0802e23c <__cxa_current_exception_type>:
 802e23c:	b508      	push	{r3, lr}
 802e23e:	f7ff f9db 	bl	802d5f8 <__cxa_get_globals>
 802e242:	6800      	ldr	r0, [r0, #0]
 802e244:	b130      	cbz	r0, 802e254 <__cxa_current_exception_type+0x18>
 802e246:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 802e24a:	6800      	ldr	r0, [r0, #0]
 802e24c:	2b01      	cmp	r3, #1
 802e24e:	bf08      	it	eq
 802e250:	f850 0c78 	ldreq.w	r0, [r0, #-120]
 802e254:	bd08      	pop	{r3, pc}
 802e256:	bf00      	nop

0802e258 <abort>:
 802e258:	b508      	push	{r3, lr}
 802e25a:	2006      	movs	r0, #6
 802e25c:	f000 fd62 	bl	802ed24 <raise>
 802e260:	2001      	movs	r0, #1
 802e262:	f7de f953 	bl	800c50c <_exit>
	...

0802e268 <__assert_func>:
 802e268:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802e26a:	461c      	mov	r4, r3
 802e26c:	4b09      	ldr	r3, [pc, #36]	; (802e294 <__assert_func+0x2c>)
 802e26e:	681b      	ldr	r3, [r3, #0]
 802e270:	4605      	mov	r5, r0
 802e272:	68d8      	ldr	r0, [r3, #12]
 802e274:	b152      	cbz	r2, 802e28c <__assert_func+0x24>
 802e276:	4b08      	ldr	r3, [pc, #32]	; (802e298 <__assert_func+0x30>)
 802e278:	9100      	str	r1, [sp, #0]
 802e27a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 802e27e:	4907      	ldr	r1, [pc, #28]	; (802e29c <__assert_func+0x34>)
 802e280:	462b      	mov	r3, r5
 802e282:	4622      	mov	r2, r4
 802e284:	f000 f828 	bl	802e2d8 <fiprintf>
 802e288:	f7ff ffe6 	bl	802e258 <abort>
 802e28c:	4b04      	ldr	r3, [pc, #16]	; (802e2a0 <__assert_func+0x38>)
 802e28e:	461a      	mov	r2, r3
 802e290:	e7f2      	b.n	802e278 <__assert_func+0x10>
 802e292:	bf00      	nop
 802e294:	20000118 	.word	0x20000118
 802e298:	080355f4 	.word	0x080355f4
 802e29c:	08035601 	.word	0x08035601
 802e2a0:	0803562f 	.word	0x0803562f

0802e2a4 <atexit>:
 802e2a4:	2300      	movs	r3, #0
 802e2a6:	4601      	mov	r1, r0
 802e2a8:	461a      	mov	r2, r3
 802e2aa:	4618      	mov	r0, r3
 802e2ac:	f000 be98 	b.w	802efe0 <__register_exitproc>

0802e2b0 <__cxa_atexit>:
 802e2b0:	b510      	push	{r4, lr}
 802e2b2:	4c05      	ldr	r4, [pc, #20]	; (802e2c8 <__cxa_atexit+0x18>)
 802e2b4:	4613      	mov	r3, r2
 802e2b6:	b12c      	cbz	r4, 802e2c4 <__cxa_atexit+0x14>
 802e2b8:	460a      	mov	r2, r1
 802e2ba:	4601      	mov	r1, r0
 802e2bc:	2002      	movs	r0, #2
 802e2be:	f000 fe8f 	bl	802efe0 <__register_exitproc>
 802e2c2:	bd10      	pop	{r4, pc}
 802e2c4:	4620      	mov	r0, r4
 802e2c6:	e7fc      	b.n	802e2c2 <__cxa_atexit+0x12>
 802e2c8:	0802efe1 	.word	0x0802efe1

0802e2cc <__errno>:
 802e2cc:	4b01      	ldr	r3, [pc, #4]	; (802e2d4 <__errno+0x8>)
 802e2ce:	6818      	ldr	r0, [r3, #0]
 802e2d0:	4770      	bx	lr
 802e2d2:	bf00      	nop
 802e2d4:	20000118 	.word	0x20000118

0802e2d8 <fiprintf>:
 802e2d8:	b40e      	push	{r1, r2, r3}
 802e2da:	b503      	push	{r0, r1, lr}
 802e2dc:	4601      	mov	r1, r0
 802e2de:	ab03      	add	r3, sp, #12
 802e2e0:	4805      	ldr	r0, [pc, #20]	; (802e2f8 <fiprintf+0x20>)
 802e2e2:	f853 2b04 	ldr.w	r2, [r3], #4
 802e2e6:	6800      	ldr	r0, [r0, #0]
 802e2e8:	9301      	str	r3, [sp, #4]
 802e2ea:	f000 fa07 	bl	802e6fc <_vfiprintf_r>
 802e2ee:	b002      	add	sp, #8
 802e2f0:	f85d eb04 	ldr.w	lr, [sp], #4
 802e2f4:	b003      	add	sp, #12
 802e2f6:	4770      	bx	lr
 802e2f8:	20000118 	.word	0x20000118

0802e2fc <_fputc_r>:
 802e2fc:	b570      	push	{r4, r5, r6, lr}
 802e2fe:	460e      	mov	r6, r1
 802e300:	4614      	mov	r4, r2
 802e302:	4605      	mov	r5, r0
 802e304:	b118      	cbz	r0, 802e30e <_fputc_r+0x12>
 802e306:	6983      	ldr	r3, [r0, #24]
 802e308:	b90b      	cbnz	r3, 802e30e <_fputc_r+0x12>
 802e30a:	f000 ffbd 	bl	802f288 <__sinit>
 802e30e:	4b0a      	ldr	r3, [pc, #40]	; (802e338 <_fputc_r+0x3c>)
 802e310:	429c      	cmp	r4, r3
 802e312:	d107      	bne.n	802e324 <_fputc_r+0x28>
 802e314:	686c      	ldr	r4, [r5, #4]
 802e316:	4622      	mov	r2, r4
 802e318:	4631      	mov	r1, r6
 802e31a:	4628      	mov	r0, r5
 802e31c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802e320:	f000 bc8a 	b.w	802ec38 <_putc_r>
 802e324:	4b05      	ldr	r3, [pc, #20]	; (802e33c <_fputc_r+0x40>)
 802e326:	429c      	cmp	r4, r3
 802e328:	d101      	bne.n	802e32e <_fputc_r+0x32>
 802e32a:	68ac      	ldr	r4, [r5, #8]
 802e32c:	e7f3      	b.n	802e316 <_fputc_r+0x1a>
 802e32e:	4b04      	ldr	r3, [pc, #16]	; (802e340 <_fputc_r+0x44>)
 802e330:	429c      	cmp	r4, r3
 802e332:	bf08      	it	eq
 802e334:	68ec      	ldreq	r4, [r5, #12]
 802e336:	e7ee      	b.n	802e316 <_fputc_r+0x1a>
 802e338:	0803568c 	.word	0x0803568c
 802e33c:	080356ac 	.word	0x080356ac
 802e340:	0803566c 	.word	0x0803566c

0802e344 <fputc>:
 802e344:	4b02      	ldr	r3, [pc, #8]	; (802e350 <fputc+0xc>)
 802e346:	460a      	mov	r2, r1
 802e348:	4601      	mov	r1, r0
 802e34a:	6818      	ldr	r0, [r3, #0]
 802e34c:	f7ff bfd6 	b.w	802e2fc <_fputc_r>
 802e350:	20000118 	.word	0x20000118

0802e354 <_fputs_r>:
 802e354:	b570      	push	{r4, r5, r6, lr}
 802e356:	460e      	mov	r6, r1
 802e358:	4614      	mov	r4, r2
 802e35a:	4605      	mov	r5, r0
 802e35c:	b118      	cbz	r0, 802e366 <_fputs_r+0x12>
 802e35e:	6983      	ldr	r3, [r0, #24]
 802e360:	b90b      	cbnz	r3, 802e366 <_fputs_r+0x12>
 802e362:	f000 ff91 	bl	802f288 <__sinit>
 802e366:	4b1c      	ldr	r3, [pc, #112]	; (802e3d8 <_fputs_r+0x84>)
 802e368:	429c      	cmp	r4, r3
 802e36a:	d10b      	bne.n	802e384 <_fputs_r+0x30>
 802e36c:	686c      	ldr	r4, [r5, #4]
 802e36e:	89a3      	ldrh	r3, [r4, #12]
 802e370:	071b      	lsls	r3, r3, #28
 802e372:	d511      	bpl.n	802e398 <_fputs_r+0x44>
 802e374:	6923      	ldr	r3, [r4, #16]
 802e376:	b17b      	cbz	r3, 802e398 <_fputs_r+0x44>
 802e378:	3e01      	subs	r6, #1
 802e37a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802e37e:	b9a1      	cbnz	r1, 802e3aa <_fputs_r+0x56>
 802e380:	4608      	mov	r0, r1
 802e382:	e011      	b.n	802e3a8 <_fputs_r+0x54>
 802e384:	4b15      	ldr	r3, [pc, #84]	; (802e3dc <_fputs_r+0x88>)
 802e386:	429c      	cmp	r4, r3
 802e388:	d101      	bne.n	802e38e <_fputs_r+0x3a>
 802e38a:	68ac      	ldr	r4, [r5, #8]
 802e38c:	e7ef      	b.n	802e36e <_fputs_r+0x1a>
 802e38e:	4b14      	ldr	r3, [pc, #80]	; (802e3e0 <_fputs_r+0x8c>)
 802e390:	429c      	cmp	r4, r3
 802e392:	bf08      	it	eq
 802e394:	68ec      	ldreq	r4, [r5, #12]
 802e396:	e7ea      	b.n	802e36e <_fputs_r+0x1a>
 802e398:	4621      	mov	r1, r4
 802e39a:	4628      	mov	r0, r5
 802e39c:	f000 fdb2 	bl	802ef04 <__swsetup_r>
 802e3a0:	2800      	cmp	r0, #0
 802e3a2:	d0e9      	beq.n	802e378 <_fputs_r+0x24>
 802e3a4:	f04f 30ff 	mov.w	r0, #4294967295
 802e3a8:	bd70      	pop	{r4, r5, r6, pc}
 802e3aa:	68a3      	ldr	r3, [r4, #8]
 802e3ac:	3b01      	subs	r3, #1
 802e3ae:	2b00      	cmp	r3, #0
 802e3b0:	60a3      	str	r3, [r4, #8]
 802e3b2:	da04      	bge.n	802e3be <_fputs_r+0x6a>
 802e3b4:	69a2      	ldr	r2, [r4, #24]
 802e3b6:	4293      	cmp	r3, r2
 802e3b8:	db06      	blt.n	802e3c8 <_fputs_r+0x74>
 802e3ba:	290a      	cmp	r1, #10
 802e3bc:	d004      	beq.n	802e3c8 <_fputs_r+0x74>
 802e3be:	6823      	ldr	r3, [r4, #0]
 802e3c0:	1c5a      	adds	r2, r3, #1
 802e3c2:	6022      	str	r2, [r4, #0]
 802e3c4:	7019      	strb	r1, [r3, #0]
 802e3c6:	e7d8      	b.n	802e37a <_fputs_r+0x26>
 802e3c8:	4622      	mov	r2, r4
 802e3ca:	4628      	mov	r0, r5
 802e3cc:	f000 fd36 	bl	802ee3c <__swbuf_r>
 802e3d0:	3001      	adds	r0, #1
 802e3d2:	d1d2      	bne.n	802e37a <_fputs_r+0x26>
 802e3d4:	e7e6      	b.n	802e3a4 <_fputs_r+0x50>
 802e3d6:	bf00      	nop
 802e3d8:	0803568c 	.word	0x0803568c
 802e3dc:	080356ac 	.word	0x080356ac
 802e3e0:	0803566c 	.word	0x0803566c

0802e3e4 <fputs>:
 802e3e4:	4b02      	ldr	r3, [pc, #8]	; (802e3f0 <fputs+0xc>)
 802e3e6:	460a      	mov	r2, r1
 802e3e8:	4601      	mov	r1, r0
 802e3ea:	6818      	ldr	r0, [r3, #0]
 802e3ec:	f7ff bfb2 	b.w	802e354 <_fputs_r>
 802e3f0:	20000118 	.word	0x20000118

0802e3f4 <_fwrite_r>:
 802e3f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802e3f8:	9c08      	ldr	r4, [sp, #32]
 802e3fa:	4689      	mov	r9, r1
 802e3fc:	4617      	mov	r7, r2
 802e3fe:	fb02 f803 	mul.w	r8, r2, r3
 802e402:	4606      	mov	r6, r0
 802e404:	b118      	cbz	r0, 802e40e <_fwrite_r+0x1a>
 802e406:	6983      	ldr	r3, [r0, #24]
 802e408:	b90b      	cbnz	r3, 802e40e <_fwrite_r+0x1a>
 802e40a:	f000 ff3d 	bl	802f288 <__sinit>
 802e40e:	4b1d      	ldr	r3, [pc, #116]	; (802e484 <_fwrite_r+0x90>)
 802e410:	429c      	cmp	r4, r3
 802e412:	d11a      	bne.n	802e44a <_fwrite_r+0x56>
 802e414:	6874      	ldr	r4, [r6, #4]
 802e416:	89a3      	ldrh	r3, [r4, #12]
 802e418:	071b      	lsls	r3, r3, #28
 802e41a:	d520      	bpl.n	802e45e <_fwrite_r+0x6a>
 802e41c:	6923      	ldr	r3, [r4, #16]
 802e41e:	b1f3      	cbz	r3, 802e45e <_fwrite_r+0x6a>
 802e420:	2500      	movs	r5, #0
 802e422:	4545      	cmp	r5, r8
 802e424:	d029      	beq.n	802e47a <_fwrite_r+0x86>
 802e426:	68a3      	ldr	r3, [r4, #8]
 802e428:	f819 1005 	ldrb.w	r1, [r9, r5]
 802e42c:	3b01      	subs	r3, #1
 802e42e:	2b00      	cmp	r3, #0
 802e430:	60a3      	str	r3, [r4, #8]
 802e432:	da04      	bge.n	802e43e <_fwrite_r+0x4a>
 802e434:	69a2      	ldr	r2, [r4, #24]
 802e436:	4293      	cmp	r3, r2
 802e438:	db19      	blt.n	802e46e <_fwrite_r+0x7a>
 802e43a:	290a      	cmp	r1, #10
 802e43c:	d017      	beq.n	802e46e <_fwrite_r+0x7a>
 802e43e:	6823      	ldr	r3, [r4, #0]
 802e440:	1c5a      	adds	r2, r3, #1
 802e442:	6022      	str	r2, [r4, #0]
 802e444:	7019      	strb	r1, [r3, #0]
 802e446:	3501      	adds	r5, #1
 802e448:	e7eb      	b.n	802e422 <_fwrite_r+0x2e>
 802e44a:	4b0f      	ldr	r3, [pc, #60]	; (802e488 <_fwrite_r+0x94>)
 802e44c:	429c      	cmp	r4, r3
 802e44e:	d101      	bne.n	802e454 <_fwrite_r+0x60>
 802e450:	68b4      	ldr	r4, [r6, #8]
 802e452:	e7e0      	b.n	802e416 <_fwrite_r+0x22>
 802e454:	4b0d      	ldr	r3, [pc, #52]	; (802e48c <_fwrite_r+0x98>)
 802e456:	429c      	cmp	r4, r3
 802e458:	bf08      	it	eq
 802e45a:	68f4      	ldreq	r4, [r6, #12]
 802e45c:	e7db      	b.n	802e416 <_fwrite_r+0x22>
 802e45e:	4621      	mov	r1, r4
 802e460:	4630      	mov	r0, r6
 802e462:	f000 fd4f 	bl	802ef04 <__swsetup_r>
 802e466:	2800      	cmp	r0, #0
 802e468:	d0da      	beq.n	802e420 <_fwrite_r+0x2c>
 802e46a:	2500      	movs	r5, #0
 802e46c:	e005      	b.n	802e47a <_fwrite_r+0x86>
 802e46e:	4622      	mov	r2, r4
 802e470:	4630      	mov	r0, r6
 802e472:	f000 fce3 	bl	802ee3c <__swbuf_r>
 802e476:	3001      	adds	r0, #1
 802e478:	d1e5      	bne.n	802e446 <_fwrite_r+0x52>
 802e47a:	fbb5 f0f7 	udiv	r0, r5, r7
 802e47e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802e482:	bf00      	nop
 802e484:	0803568c 	.word	0x0803568c
 802e488:	080356ac 	.word	0x080356ac
 802e48c:	0803566c 	.word	0x0803566c

0802e490 <fwrite>:
 802e490:	b507      	push	{r0, r1, r2, lr}
 802e492:	9300      	str	r3, [sp, #0]
 802e494:	4613      	mov	r3, r2
 802e496:	460a      	mov	r2, r1
 802e498:	4601      	mov	r1, r0
 802e49a:	4803      	ldr	r0, [pc, #12]	; (802e4a8 <fwrite+0x18>)
 802e49c:	6800      	ldr	r0, [r0, #0]
 802e49e:	f7ff ffa9 	bl	802e3f4 <_fwrite_r>
 802e4a2:	b003      	add	sp, #12
 802e4a4:	f85d fb04 	ldr.w	pc, [sp], #4
 802e4a8:	20000118 	.word	0x20000118

0802e4ac <__libc_init_array>:
 802e4ac:	b570      	push	{r4, r5, r6, lr}
 802e4ae:	4e0d      	ldr	r6, [pc, #52]	; (802e4e4 <__libc_init_array+0x38>)
 802e4b0:	4c0d      	ldr	r4, [pc, #52]	; (802e4e8 <__libc_init_array+0x3c>)
 802e4b2:	1ba4      	subs	r4, r4, r6
 802e4b4:	10a4      	asrs	r4, r4, #2
 802e4b6:	2500      	movs	r5, #0
 802e4b8:	42a5      	cmp	r5, r4
 802e4ba:	d109      	bne.n	802e4d0 <__libc_init_array+0x24>
 802e4bc:	4e0b      	ldr	r6, [pc, #44]	; (802e4ec <__libc_init_array+0x40>)
 802e4be:	4c0c      	ldr	r4, [pc, #48]	; (802e4f0 <__libc_init_array+0x44>)
 802e4c0:	f001 fa06 	bl	802f8d0 <_init>
 802e4c4:	1ba4      	subs	r4, r4, r6
 802e4c6:	10a4      	asrs	r4, r4, #2
 802e4c8:	2500      	movs	r5, #0
 802e4ca:	42a5      	cmp	r5, r4
 802e4cc:	d105      	bne.n	802e4da <__libc_init_array+0x2e>
 802e4ce:	bd70      	pop	{r4, r5, r6, pc}
 802e4d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802e4d4:	4798      	blx	r3
 802e4d6:	3501      	adds	r5, #1
 802e4d8:	e7ee      	b.n	802e4b8 <__libc_init_array+0xc>
 802e4da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802e4de:	4798      	blx	r3
 802e4e0:	3501      	adds	r5, #1
 802e4e2:	e7f2      	b.n	802e4ca <__libc_init_array+0x1e>
 802e4e4:	0807b3ac 	.word	0x0807b3ac
 802e4e8:	0807b3ac 	.word	0x0807b3ac
 802e4ec:	0807b3ac 	.word	0x0807b3ac
 802e4f0:	0807b3c4 	.word	0x0807b3c4

0802e4f4 <malloc>:
 802e4f4:	4b02      	ldr	r3, [pc, #8]	; (802e500 <malloc+0xc>)
 802e4f6:	4601      	mov	r1, r0
 802e4f8:	6818      	ldr	r0, [r3, #0]
 802e4fa:	f000 b87b 	b.w	802e5f4 <_malloc_r>
 802e4fe:	bf00      	nop
 802e500:	20000118 	.word	0x20000118

0802e504 <free>:
 802e504:	4b02      	ldr	r3, [pc, #8]	; (802e510 <free+0xc>)
 802e506:	4601      	mov	r1, r0
 802e508:	6818      	ldr	r0, [r3, #0]
 802e50a:	f000 b825 	b.w	802e558 <_free_r>
 802e50e:	bf00      	nop
 802e510:	20000118 	.word	0x20000118

0802e514 <memcmp>:
 802e514:	b530      	push	{r4, r5, lr}
 802e516:	2400      	movs	r4, #0
 802e518:	42a2      	cmp	r2, r4
 802e51a:	d101      	bne.n	802e520 <memcmp+0xc>
 802e51c:	2000      	movs	r0, #0
 802e51e:	e007      	b.n	802e530 <memcmp+0x1c>
 802e520:	5d03      	ldrb	r3, [r0, r4]
 802e522:	3401      	adds	r4, #1
 802e524:	190d      	adds	r5, r1, r4
 802e526:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 802e52a:	42ab      	cmp	r3, r5
 802e52c:	d0f4      	beq.n	802e518 <memcmp+0x4>
 802e52e:	1b58      	subs	r0, r3, r5
 802e530:	bd30      	pop	{r4, r5, pc}

0802e532 <memcpy>:
 802e532:	b510      	push	{r4, lr}
 802e534:	1e43      	subs	r3, r0, #1
 802e536:	440a      	add	r2, r1
 802e538:	4291      	cmp	r1, r2
 802e53a:	d100      	bne.n	802e53e <memcpy+0xc>
 802e53c:	bd10      	pop	{r4, pc}
 802e53e:	f811 4b01 	ldrb.w	r4, [r1], #1
 802e542:	f803 4f01 	strb.w	r4, [r3, #1]!
 802e546:	e7f7      	b.n	802e538 <memcpy+0x6>

0802e548 <memset>:
 802e548:	4402      	add	r2, r0
 802e54a:	4603      	mov	r3, r0
 802e54c:	4293      	cmp	r3, r2
 802e54e:	d100      	bne.n	802e552 <memset+0xa>
 802e550:	4770      	bx	lr
 802e552:	f803 1b01 	strb.w	r1, [r3], #1
 802e556:	e7f9      	b.n	802e54c <memset+0x4>

0802e558 <_free_r>:
 802e558:	b538      	push	{r3, r4, r5, lr}
 802e55a:	4605      	mov	r5, r0
 802e55c:	2900      	cmp	r1, #0
 802e55e:	d045      	beq.n	802e5ec <_free_r+0x94>
 802e560:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802e564:	1f0c      	subs	r4, r1, #4
 802e566:	2b00      	cmp	r3, #0
 802e568:	bfb8      	it	lt
 802e56a:	18e4      	addlt	r4, r4, r3
 802e56c:	f000 ff93 	bl	802f496 <__malloc_lock>
 802e570:	4a1f      	ldr	r2, [pc, #124]	; (802e5f0 <_free_r+0x98>)
 802e572:	6813      	ldr	r3, [r2, #0]
 802e574:	4610      	mov	r0, r2
 802e576:	b933      	cbnz	r3, 802e586 <_free_r+0x2e>
 802e578:	6063      	str	r3, [r4, #4]
 802e57a:	6014      	str	r4, [r2, #0]
 802e57c:	4628      	mov	r0, r5
 802e57e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802e582:	f000 bf89 	b.w	802f498 <__malloc_unlock>
 802e586:	42a3      	cmp	r3, r4
 802e588:	d90c      	bls.n	802e5a4 <_free_r+0x4c>
 802e58a:	6821      	ldr	r1, [r4, #0]
 802e58c:	1862      	adds	r2, r4, r1
 802e58e:	4293      	cmp	r3, r2
 802e590:	bf04      	itt	eq
 802e592:	681a      	ldreq	r2, [r3, #0]
 802e594:	685b      	ldreq	r3, [r3, #4]
 802e596:	6063      	str	r3, [r4, #4]
 802e598:	bf04      	itt	eq
 802e59a:	1852      	addeq	r2, r2, r1
 802e59c:	6022      	streq	r2, [r4, #0]
 802e59e:	6004      	str	r4, [r0, #0]
 802e5a0:	e7ec      	b.n	802e57c <_free_r+0x24>
 802e5a2:	4613      	mov	r3, r2
 802e5a4:	685a      	ldr	r2, [r3, #4]
 802e5a6:	b10a      	cbz	r2, 802e5ac <_free_r+0x54>
 802e5a8:	42a2      	cmp	r2, r4
 802e5aa:	d9fa      	bls.n	802e5a2 <_free_r+0x4a>
 802e5ac:	6819      	ldr	r1, [r3, #0]
 802e5ae:	1858      	adds	r0, r3, r1
 802e5b0:	42a0      	cmp	r0, r4
 802e5b2:	d10b      	bne.n	802e5cc <_free_r+0x74>
 802e5b4:	6820      	ldr	r0, [r4, #0]
 802e5b6:	4401      	add	r1, r0
 802e5b8:	1858      	adds	r0, r3, r1
 802e5ba:	4282      	cmp	r2, r0
 802e5bc:	6019      	str	r1, [r3, #0]
 802e5be:	d1dd      	bne.n	802e57c <_free_r+0x24>
 802e5c0:	6810      	ldr	r0, [r2, #0]
 802e5c2:	6852      	ldr	r2, [r2, #4]
 802e5c4:	605a      	str	r2, [r3, #4]
 802e5c6:	4401      	add	r1, r0
 802e5c8:	6019      	str	r1, [r3, #0]
 802e5ca:	e7d7      	b.n	802e57c <_free_r+0x24>
 802e5cc:	d902      	bls.n	802e5d4 <_free_r+0x7c>
 802e5ce:	230c      	movs	r3, #12
 802e5d0:	602b      	str	r3, [r5, #0]
 802e5d2:	e7d3      	b.n	802e57c <_free_r+0x24>
 802e5d4:	6820      	ldr	r0, [r4, #0]
 802e5d6:	1821      	adds	r1, r4, r0
 802e5d8:	428a      	cmp	r2, r1
 802e5da:	bf04      	itt	eq
 802e5dc:	6811      	ldreq	r1, [r2, #0]
 802e5de:	6852      	ldreq	r2, [r2, #4]
 802e5e0:	6062      	str	r2, [r4, #4]
 802e5e2:	bf04      	itt	eq
 802e5e4:	1809      	addeq	r1, r1, r0
 802e5e6:	6021      	streq	r1, [r4, #0]
 802e5e8:	605c      	str	r4, [r3, #4]
 802e5ea:	e7c7      	b.n	802e57c <_free_r+0x24>
 802e5ec:	bd38      	pop	{r3, r4, r5, pc}
 802e5ee:	bf00      	nop
 802e5f0:	200129e0 	.word	0x200129e0

0802e5f4 <_malloc_r>:
 802e5f4:	b570      	push	{r4, r5, r6, lr}
 802e5f6:	1ccd      	adds	r5, r1, #3
 802e5f8:	f025 0503 	bic.w	r5, r5, #3
 802e5fc:	3508      	adds	r5, #8
 802e5fe:	2d0c      	cmp	r5, #12
 802e600:	bf38      	it	cc
 802e602:	250c      	movcc	r5, #12
 802e604:	2d00      	cmp	r5, #0
 802e606:	4606      	mov	r6, r0
 802e608:	db01      	blt.n	802e60e <_malloc_r+0x1a>
 802e60a:	42a9      	cmp	r1, r5
 802e60c:	d903      	bls.n	802e616 <_malloc_r+0x22>
 802e60e:	230c      	movs	r3, #12
 802e610:	6033      	str	r3, [r6, #0]
 802e612:	2000      	movs	r0, #0
 802e614:	bd70      	pop	{r4, r5, r6, pc}
 802e616:	f000 ff3e 	bl	802f496 <__malloc_lock>
 802e61a:	4a21      	ldr	r2, [pc, #132]	; (802e6a0 <_malloc_r+0xac>)
 802e61c:	6814      	ldr	r4, [r2, #0]
 802e61e:	4621      	mov	r1, r4
 802e620:	b991      	cbnz	r1, 802e648 <_malloc_r+0x54>
 802e622:	4c20      	ldr	r4, [pc, #128]	; (802e6a4 <_malloc_r+0xb0>)
 802e624:	6823      	ldr	r3, [r4, #0]
 802e626:	b91b      	cbnz	r3, 802e630 <_malloc_r+0x3c>
 802e628:	4630      	mov	r0, r6
 802e62a:	f000 fb43 	bl	802ecb4 <_sbrk_r>
 802e62e:	6020      	str	r0, [r4, #0]
 802e630:	4629      	mov	r1, r5
 802e632:	4630      	mov	r0, r6
 802e634:	f000 fb3e 	bl	802ecb4 <_sbrk_r>
 802e638:	1c43      	adds	r3, r0, #1
 802e63a:	d124      	bne.n	802e686 <_malloc_r+0x92>
 802e63c:	230c      	movs	r3, #12
 802e63e:	6033      	str	r3, [r6, #0]
 802e640:	4630      	mov	r0, r6
 802e642:	f000 ff29 	bl	802f498 <__malloc_unlock>
 802e646:	e7e4      	b.n	802e612 <_malloc_r+0x1e>
 802e648:	680b      	ldr	r3, [r1, #0]
 802e64a:	1b5b      	subs	r3, r3, r5
 802e64c:	d418      	bmi.n	802e680 <_malloc_r+0x8c>
 802e64e:	2b0b      	cmp	r3, #11
 802e650:	d90f      	bls.n	802e672 <_malloc_r+0x7e>
 802e652:	600b      	str	r3, [r1, #0]
 802e654:	50cd      	str	r5, [r1, r3]
 802e656:	18cc      	adds	r4, r1, r3
 802e658:	4630      	mov	r0, r6
 802e65a:	f000 ff1d 	bl	802f498 <__malloc_unlock>
 802e65e:	f104 000b 	add.w	r0, r4, #11
 802e662:	1d23      	adds	r3, r4, #4
 802e664:	f020 0007 	bic.w	r0, r0, #7
 802e668:	1ac3      	subs	r3, r0, r3
 802e66a:	d0d3      	beq.n	802e614 <_malloc_r+0x20>
 802e66c:	425a      	negs	r2, r3
 802e66e:	50e2      	str	r2, [r4, r3]
 802e670:	e7d0      	b.n	802e614 <_malloc_r+0x20>
 802e672:	428c      	cmp	r4, r1
 802e674:	684b      	ldr	r3, [r1, #4]
 802e676:	bf16      	itet	ne
 802e678:	6063      	strne	r3, [r4, #4]
 802e67a:	6013      	streq	r3, [r2, #0]
 802e67c:	460c      	movne	r4, r1
 802e67e:	e7eb      	b.n	802e658 <_malloc_r+0x64>
 802e680:	460c      	mov	r4, r1
 802e682:	6849      	ldr	r1, [r1, #4]
 802e684:	e7cc      	b.n	802e620 <_malloc_r+0x2c>
 802e686:	1cc4      	adds	r4, r0, #3
 802e688:	f024 0403 	bic.w	r4, r4, #3
 802e68c:	42a0      	cmp	r0, r4
 802e68e:	d005      	beq.n	802e69c <_malloc_r+0xa8>
 802e690:	1a21      	subs	r1, r4, r0
 802e692:	4630      	mov	r0, r6
 802e694:	f000 fb0e 	bl	802ecb4 <_sbrk_r>
 802e698:	3001      	adds	r0, #1
 802e69a:	d0cf      	beq.n	802e63c <_malloc_r+0x48>
 802e69c:	6025      	str	r5, [r4, #0]
 802e69e:	e7db      	b.n	802e658 <_malloc_r+0x64>
 802e6a0:	200129e0 	.word	0x200129e0
 802e6a4:	200129e4 	.word	0x200129e4

0802e6a8 <__sfputc_r>:
 802e6a8:	6893      	ldr	r3, [r2, #8]
 802e6aa:	3b01      	subs	r3, #1
 802e6ac:	2b00      	cmp	r3, #0
 802e6ae:	b410      	push	{r4}
 802e6b0:	6093      	str	r3, [r2, #8]
 802e6b2:	da08      	bge.n	802e6c6 <__sfputc_r+0x1e>
 802e6b4:	6994      	ldr	r4, [r2, #24]
 802e6b6:	42a3      	cmp	r3, r4
 802e6b8:	db01      	blt.n	802e6be <__sfputc_r+0x16>
 802e6ba:	290a      	cmp	r1, #10
 802e6bc:	d103      	bne.n	802e6c6 <__sfputc_r+0x1e>
 802e6be:	f85d 4b04 	ldr.w	r4, [sp], #4
 802e6c2:	f000 bbbb 	b.w	802ee3c <__swbuf_r>
 802e6c6:	6813      	ldr	r3, [r2, #0]
 802e6c8:	1c58      	adds	r0, r3, #1
 802e6ca:	6010      	str	r0, [r2, #0]
 802e6cc:	7019      	strb	r1, [r3, #0]
 802e6ce:	4608      	mov	r0, r1
 802e6d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 802e6d4:	4770      	bx	lr

0802e6d6 <__sfputs_r>:
 802e6d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e6d8:	4606      	mov	r6, r0
 802e6da:	460f      	mov	r7, r1
 802e6dc:	4614      	mov	r4, r2
 802e6de:	18d5      	adds	r5, r2, r3
 802e6e0:	42ac      	cmp	r4, r5
 802e6e2:	d101      	bne.n	802e6e8 <__sfputs_r+0x12>
 802e6e4:	2000      	movs	r0, #0
 802e6e6:	e007      	b.n	802e6f8 <__sfputs_r+0x22>
 802e6e8:	463a      	mov	r2, r7
 802e6ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 802e6ee:	4630      	mov	r0, r6
 802e6f0:	f7ff ffda 	bl	802e6a8 <__sfputc_r>
 802e6f4:	1c43      	adds	r3, r0, #1
 802e6f6:	d1f3      	bne.n	802e6e0 <__sfputs_r+0xa>
 802e6f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802e6fc <_vfiprintf_r>:
 802e6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e700:	460c      	mov	r4, r1
 802e702:	b09d      	sub	sp, #116	; 0x74
 802e704:	4617      	mov	r7, r2
 802e706:	461d      	mov	r5, r3
 802e708:	4606      	mov	r6, r0
 802e70a:	b118      	cbz	r0, 802e714 <_vfiprintf_r+0x18>
 802e70c:	6983      	ldr	r3, [r0, #24]
 802e70e:	b90b      	cbnz	r3, 802e714 <_vfiprintf_r+0x18>
 802e710:	f000 fdba 	bl	802f288 <__sinit>
 802e714:	4b7c      	ldr	r3, [pc, #496]	; (802e908 <_vfiprintf_r+0x20c>)
 802e716:	429c      	cmp	r4, r3
 802e718:	d158      	bne.n	802e7cc <_vfiprintf_r+0xd0>
 802e71a:	6874      	ldr	r4, [r6, #4]
 802e71c:	89a3      	ldrh	r3, [r4, #12]
 802e71e:	0718      	lsls	r0, r3, #28
 802e720:	d55e      	bpl.n	802e7e0 <_vfiprintf_r+0xe4>
 802e722:	6923      	ldr	r3, [r4, #16]
 802e724:	2b00      	cmp	r3, #0
 802e726:	d05b      	beq.n	802e7e0 <_vfiprintf_r+0xe4>
 802e728:	2300      	movs	r3, #0
 802e72a:	9309      	str	r3, [sp, #36]	; 0x24
 802e72c:	2320      	movs	r3, #32
 802e72e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802e732:	2330      	movs	r3, #48	; 0x30
 802e734:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802e738:	9503      	str	r5, [sp, #12]
 802e73a:	f04f 0b01 	mov.w	fp, #1
 802e73e:	46b8      	mov	r8, r7
 802e740:	4645      	mov	r5, r8
 802e742:	f815 3b01 	ldrb.w	r3, [r5], #1
 802e746:	b10b      	cbz	r3, 802e74c <_vfiprintf_r+0x50>
 802e748:	2b25      	cmp	r3, #37	; 0x25
 802e74a:	d154      	bne.n	802e7f6 <_vfiprintf_r+0xfa>
 802e74c:	ebb8 0a07 	subs.w	sl, r8, r7
 802e750:	d00b      	beq.n	802e76a <_vfiprintf_r+0x6e>
 802e752:	4653      	mov	r3, sl
 802e754:	463a      	mov	r2, r7
 802e756:	4621      	mov	r1, r4
 802e758:	4630      	mov	r0, r6
 802e75a:	f7ff ffbc 	bl	802e6d6 <__sfputs_r>
 802e75e:	3001      	adds	r0, #1
 802e760:	f000 80c2 	beq.w	802e8e8 <_vfiprintf_r+0x1ec>
 802e764:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802e766:	4453      	add	r3, sl
 802e768:	9309      	str	r3, [sp, #36]	; 0x24
 802e76a:	f898 3000 	ldrb.w	r3, [r8]
 802e76e:	2b00      	cmp	r3, #0
 802e770:	f000 80ba 	beq.w	802e8e8 <_vfiprintf_r+0x1ec>
 802e774:	2300      	movs	r3, #0
 802e776:	f04f 32ff 	mov.w	r2, #4294967295
 802e77a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802e77e:	9304      	str	r3, [sp, #16]
 802e780:	9307      	str	r3, [sp, #28]
 802e782:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802e786:	931a      	str	r3, [sp, #104]	; 0x68
 802e788:	46a8      	mov	r8, r5
 802e78a:	2205      	movs	r2, #5
 802e78c:	f818 1b01 	ldrb.w	r1, [r8], #1
 802e790:	485e      	ldr	r0, [pc, #376]	; (802e90c <_vfiprintf_r+0x210>)
 802e792:	f7d8 faad 	bl	8006cf0 <memchr>
 802e796:	9b04      	ldr	r3, [sp, #16]
 802e798:	bb78      	cbnz	r0, 802e7fa <_vfiprintf_r+0xfe>
 802e79a:	06d9      	lsls	r1, r3, #27
 802e79c:	bf44      	itt	mi
 802e79e:	2220      	movmi	r2, #32
 802e7a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802e7a4:	071a      	lsls	r2, r3, #28
 802e7a6:	bf44      	itt	mi
 802e7a8:	222b      	movmi	r2, #43	; 0x2b
 802e7aa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802e7ae:	782a      	ldrb	r2, [r5, #0]
 802e7b0:	2a2a      	cmp	r2, #42	; 0x2a
 802e7b2:	d02a      	beq.n	802e80a <_vfiprintf_r+0x10e>
 802e7b4:	9a07      	ldr	r2, [sp, #28]
 802e7b6:	46a8      	mov	r8, r5
 802e7b8:	2000      	movs	r0, #0
 802e7ba:	250a      	movs	r5, #10
 802e7bc:	4641      	mov	r1, r8
 802e7be:	f811 3b01 	ldrb.w	r3, [r1], #1
 802e7c2:	3b30      	subs	r3, #48	; 0x30
 802e7c4:	2b09      	cmp	r3, #9
 802e7c6:	d969      	bls.n	802e89c <_vfiprintf_r+0x1a0>
 802e7c8:	b360      	cbz	r0, 802e824 <_vfiprintf_r+0x128>
 802e7ca:	e024      	b.n	802e816 <_vfiprintf_r+0x11a>
 802e7cc:	4b50      	ldr	r3, [pc, #320]	; (802e910 <_vfiprintf_r+0x214>)
 802e7ce:	429c      	cmp	r4, r3
 802e7d0:	d101      	bne.n	802e7d6 <_vfiprintf_r+0xda>
 802e7d2:	68b4      	ldr	r4, [r6, #8]
 802e7d4:	e7a2      	b.n	802e71c <_vfiprintf_r+0x20>
 802e7d6:	4b4f      	ldr	r3, [pc, #316]	; (802e914 <_vfiprintf_r+0x218>)
 802e7d8:	429c      	cmp	r4, r3
 802e7da:	bf08      	it	eq
 802e7dc:	68f4      	ldreq	r4, [r6, #12]
 802e7de:	e79d      	b.n	802e71c <_vfiprintf_r+0x20>
 802e7e0:	4621      	mov	r1, r4
 802e7e2:	4630      	mov	r0, r6
 802e7e4:	f000 fb8e 	bl	802ef04 <__swsetup_r>
 802e7e8:	2800      	cmp	r0, #0
 802e7ea:	d09d      	beq.n	802e728 <_vfiprintf_r+0x2c>
 802e7ec:	f04f 30ff 	mov.w	r0, #4294967295
 802e7f0:	b01d      	add	sp, #116	; 0x74
 802e7f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e7f6:	46a8      	mov	r8, r5
 802e7f8:	e7a2      	b.n	802e740 <_vfiprintf_r+0x44>
 802e7fa:	4a44      	ldr	r2, [pc, #272]	; (802e90c <_vfiprintf_r+0x210>)
 802e7fc:	1a80      	subs	r0, r0, r2
 802e7fe:	fa0b f000 	lsl.w	r0, fp, r0
 802e802:	4318      	orrs	r0, r3
 802e804:	9004      	str	r0, [sp, #16]
 802e806:	4645      	mov	r5, r8
 802e808:	e7be      	b.n	802e788 <_vfiprintf_r+0x8c>
 802e80a:	9a03      	ldr	r2, [sp, #12]
 802e80c:	1d11      	adds	r1, r2, #4
 802e80e:	6812      	ldr	r2, [r2, #0]
 802e810:	9103      	str	r1, [sp, #12]
 802e812:	2a00      	cmp	r2, #0
 802e814:	db01      	blt.n	802e81a <_vfiprintf_r+0x11e>
 802e816:	9207      	str	r2, [sp, #28]
 802e818:	e004      	b.n	802e824 <_vfiprintf_r+0x128>
 802e81a:	4252      	negs	r2, r2
 802e81c:	f043 0302 	orr.w	r3, r3, #2
 802e820:	9207      	str	r2, [sp, #28]
 802e822:	9304      	str	r3, [sp, #16]
 802e824:	f898 3000 	ldrb.w	r3, [r8]
 802e828:	2b2e      	cmp	r3, #46	; 0x2e
 802e82a:	d10e      	bne.n	802e84a <_vfiprintf_r+0x14e>
 802e82c:	f898 3001 	ldrb.w	r3, [r8, #1]
 802e830:	2b2a      	cmp	r3, #42	; 0x2a
 802e832:	d138      	bne.n	802e8a6 <_vfiprintf_r+0x1aa>
 802e834:	9b03      	ldr	r3, [sp, #12]
 802e836:	1d1a      	adds	r2, r3, #4
 802e838:	681b      	ldr	r3, [r3, #0]
 802e83a:	9203      	str	r2, [sp, #12]
 802e83c:	2b00      	cmp	r3, #0
 802e83e:	bfb8      	it	lt
 802e840:	f04f 33ff 	movlt.w	r3, #4294967295
 802e844:	f108 0802 	add.w	r8, r8, #2
 802e848:	9305      	str	r3, [sp, #20]
 802e84a:	4d33      	ldr	r5, [pc, #204]	; (802e918 <_vfiprintf_r+0x21c>)
 802e84c:	f898 1000 	ldrb.w	r1, [r8]
 802e850:	2203      	movs	r2, #3
 802e852:	4628      	mov	r0, r5
 802e854:	f7d8 fa4c 	bl	8006cf0 <memchr>
 802e858:	b140      	cbz	r0, 802e86c <_vfiprintf_r+0x170>
 802e85a:	2340      	movs	r3, #64	; 0x40
 802e85c:	1b40      	subs	r0, r0, r5
 802e85e:	fa03 f000 	lsl.w	r0, r3, r0
 802e862:	9b04      	ldr	r3, [sp, #16]
 802e864:	4303      	orrs	r3, r0
 802e866:	f108 0801 	add.w	r8, r8, #1
 802e86a:	9304      	str	r3, [sp, #16]
 802e86c:	f898 1000 	ldrb.w	r1, [r8]
 802e870:	482a      	ldr	r0, [pc, #168]	; (802e91c <_vfiprintf_r+0x220>)
 802e872:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802e876:	2206      	movs	r2, #6
 802e878:	f108 0701 	add.w	r7, r8, #1
 802e87c:	f7d8 fa38 	bl	8006cf0 <memchr>
 802e880:	2800      	cmp	r0, #0
 802e882:	d037      	beq.n	802e8f4 <_vfiprintf_r+0x1f8>
 802e884:	4b26      	ldr	r3, [pc, #152]	; (802e920 <_vfiprintf_r+0x224>)
 802e886:	bb1b      	cbnz	r3, 802e8d0 <_vfiprintf_r+0x1d4>
 802e888:	9b03      	ldr	r3, [sp, #12]
 802e88a:	3307      	adds	r3, #7
 802e88c:	f023 0307 	bic.w	r3, r3, #7
 802e890:	3308      	adds	r3, #8
 802e892:	9303      	str	r3, [sp, #12]
 802e894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802e896:	444b      	add	r3, r9
 802e898:	9309      	str	r3, [sp, #36]	; 0x24
 802e89a:	e750      	b.n	802e73e <_vfiprintf_r+0x42>
 802e89c:	fb05 3202 	mla	r2, r5, r2, r3
 802e8a0:	2001      	movs	r0, #1
 802e8a2:	4688      	mov	r8, r1
 802e8a4:	e78a      	b.n	802e7bc <_vfiprintf_r+0xc0>
 802e8a6:	2300      	movs	r3, #0
 802e8a8:	f108 0801 	add.w	r8, r8, #1
 802e8ac:	9305      	str	r3, [sp, #20]
 802e8ae:	4619      	mov	r1, r3
 802e8b0:	250a      	movs	r5, #10
 802e8b2:	4640      	mov	r0, r8
 802e8b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 802e8b8:	3a30      	subs	r2, #48	; 0x30
 802e8ba:	2a09      	cmp	r2, #9
 802e8bc:	d903      	bls.n	802e8c6 <_vfiprintf_r+0x1ca>
 802e8be:	2b00      	cmp	r3, #0
 802e8c0:	d0c3      	beq.n	802e84a <_vfiprintf_r+0x14e>
 802e8c2:	9105      	str	r1, [sp, #20]
 802e8c4:	e7c1      	b.n	802e84a <_vfiprintf_r+0x14e>
 802e8c6:	fb05 2101 	mla	r1, r5, r1, r2
 802e8ca:	2301      	movs	r3, #1
 802e8cc:	4680      	mov	r8, r0
 802e8ce:	e7f0      	b.n	802e8b2 <_vfiprintf_r+0x1b6>
 802e8d0:	ab03      	add	r3, sp, #12
 802e8d2:	9300      	str	r3, [sp, #0]
 802e8d4:	4622      	mov	r2, r4
 802e8d6:	4b13      	ldr	r3, [pc, #76]	; (802e924 <_vfiprintf_r+0x228>)
 802e8d8:	a904      	add	r1, sp, #16
 802e8da:	4630      	mov	r0, r6
 802e8dc:	f3af 8000 	nop.w
 802e8e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 802e8e4:	4681      	mov	r9, r0
 802e8e6:	d1d5      	bne.n	802e894 <_vfiprintf_r+0x198>
 802e8e8:	89a3      	ldrh	r3, [r4, #12]
 802e8ea:	065b      	lsls	r3, r3, #25
 802e8ec:	f53f af7e 	bmi.w	802e7ec <_vfiprintf_r+0xf0>
 802e8f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 802e8f2:	e77d      	b.n	802e7f0 <_vfiprintf_r+0xf4>
 802e8f4:	ab03      	add	r3, sp, #12
 802e8f6:	9300      	str	r3, [sp, #0]
 802e8f8:	4622      	mov	r2, r4
 802e8fa:	4b0a      	ldr	r3, [pc, #40]	; (802e924 <_vfiprintf_r+0x228>)
 802e8fc:	a904      	add	r1, sp, #16
 802e8fe:	4630      	mov	r0, r6
 802e900:	f000 f888 	bl	802ea14 <_printf_i>
 802e904:	e7ec      	b.n	802e8e0 <_vfiprintf_r+0x1e4>
 802e906:	bf00      	nop
 802e908:	0803568c 	.word	0x0803568c
 802e90c:	08035634 	.word	0x08035634
 802e910:	080356ac 	.word	0x080356ac
 802e914:	0803566c 	.word	0x0803566c
 802e918:	0803563a 	.word	0x0803563a
 802e91c:	0803563e 	.word	0x0803563e
 802e920:	00000000 	.word	0x00000000
 802e924:	0802e6d7 	.word	0x0802e6d7

0802e928 <_printf_common>:
 802e928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802e92c:	4691      	mov	r9, r2
 802e92e:	461f      	mov	r7, r3
 802e930:	688a      	ldr	r2, [r1, #8]
 802e932:	690b      	ldr	r3, [r1, #16]
 802e934:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802e938:	4293      	cmp	r3, r2
 802e93a:	bfb8      	it	lt
 802e93c:	4613      	movlt	r3, r2
 802e93e:	f8c9 3000 	str.w	r3, [r9]
 802e942:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802e946:	4606      	mov	r6, r0
 802e948:	460c      	mov	r4, r1
 802e94a:	b112      	cbz	r2, 802e952 <_printf_common+0x2a>
 802e94c:	3301      	adds	r3, #1
 802e94e:	f8c9 3000 	str.w	r3, [r9]
 802e952:	6823      	ldr	r3, [r4, #0]
 802e954:	0699      	lsls	r1, r3, #26
 802e956:	bf42      	ittt	mi
 802e958:	f8d9 3000 	ldrmi.w	r3, [r9]
 802e95c:	3302      	addmi	r3, #2
 802e95e:	f8c9 3000 	strmi.w	r3, [r9]
 802e962:	6825      	ldr	r5, [r4, #0]
 802e964:	f015 0506 	ands.w	r5, r5, #6
 802e968:	d107      	bne.n	802e97a <_printf_common+0x52>
 802e96a:	f104 0a19 	add.w	sl, r4, #25
 802e96e:	68e3      	ldr	r3, [r4, #12]
 802e970:	f8d9 2000 	ldr.w	r2, [r9]
 802e974:	1a9b      	subs	r3, r3, r2
 802e976:	42ab      	cmp	r3, r5
 802e978:	dc28      	bgt.n	802e9cc <_printf_common+0xa4>
 802e97a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 802e97e:	6822      	ldr	r2, [r4, #0]
 802e980:	3300      	adds	r3, #0
 802e982:	bf18      	it	ne
 802e984:	2301      	movne	r3, #1
 802e986:	0692      	lsls	r2, r2, #26
 802e988:	d42d      	bmi.n	802e9e6 <_printf_common+0xbe>
 802e98a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802e98e:	4639      	mov	r1, r7
 802e990:	4630      	mov	r0, r6
 802e992:	47c0      	blx	r8
 802e994:	3001      	adds	r0, #1
 802e996:	d020      	beq.n	802e9da <_printf_common+0xb2>
 802e998:	6823      	ldr	r3, [r4, #0]
 802e99a:	68e5      	ldr	r5, [r4, #12]
 802e99c:	f8d9 2000 	ldr.w	r2, [r9]
 802e9a0:	f003 0306 	and.w	r3, r3, #6
 802e9a4:	2b04      	cmp	r3, #4
 802e9a6:	bf08      	it	eq
 802e9a8:	1aad      	subeq	r5, r5, r2
 802e9aa:	68a3      	ldr	r3, [r4, #8]
 802e9ac:	6922      	ldr	r2, [r4, #16]
 802e9ae:	bf0c      	ite	eq
 802e9b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802e9b4:	2500      	movne	r5, #0
 802e9b6:	4293      	cmp	r3, r2
 802e9b8:	bfc4      	itt	gt
 802e9ba:	1a9b      	subgt	r3, r3, r2
 802e9bc:	18ed      	addgt	r5, r5, r3
 802e9be:	f04f 0900 	mov.w	r9, #0
 802e9c2:	341a      	adds	r4, #26
 802e9c4:	454d      	cmp	r5, r9
 802e9c6:	d11a      	bne.n	802e9fe <_printf_common+0xd6>
 802e9c8:	2000      	movs	r0, #0
 802e9ca:	e008      	b.n	802e9de <_printf_common+0xb6>
 802e9cc:	2301      	movs	r3, #1
 802e9ce:	4652      	mov	r2, sl
 802e9d0:	4639      	mov	r1, r7
 802e9d2:	4630      	mov	r0, r6
 802e9d4:	47c0      	blx	r8
 802e9d6:	3001      	adds	r0, #1
 802e9d8:	d103      	bne.n	802e9e2 <_printf_common+0xba>
 802e9da:	f04f 30ff 	mov.w	r0, #4294967295
 802e9de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802e9e2:	3501      	adds	r5, #1
 802e9e4:	e7c3      	b.n	802e96e <_printf_common+0x46>
 802e9e6:	18e1      	adds	r1, r4, r3
 802e9e8:	1c5a      	adds	r2, r3, #1
 802e9ea:	2030      	movs	r0, #48	; 0x30
 802e9ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802e9f0:	4422      	add	r2, r4
 802e9f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802e9f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802e9fa:	3302      	adds	r3, #2
 802e9fc:	e7c5      	b.n	802e98a <_printf_common+0x62>
 802e9fe:	2301      	movs	r3, #1
 802ea00:	4622      	mov	r2, r4
 802ea02:	4639      	mov	r1, r7
 802ea04:	4630      	mov	r0, r6
 802ea06:	47c0      	blx	r8
 802ea08:	3001      	adds	r0, #1
 802ea0a:	d0e6      	beq.n	802e9da <_printf_common+0xb2>
 802ea0c:	f109 0901 	add.w	r9, r9, #1
 802ea10:	e7d8      	b.n	802e9c4 <_printf_common+0x9c>
	...

0802ea14 <_printf_i>:
 802ea14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802ea18:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 802ea1c:	460c      	mov	r4, r1
 802ea1e:	7e09      	ldrb	r1, [r1, #24]
 802ea20:	b085      	sub	sp, #20
 802ea22:	296e      	cmp	r1, #110	; 0x6e
 802ea24:	4617      	mov	r7, r2
 802ea26:	4606      	mov	r6, r0
 802ea28:	4698      	mov	r8, r3
 802ea2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802ea2c:	f000 80b3 	beq.w	802eb96 <_printf_i+0x182>
 802ea30:	d822      	bhi.n	802ea78 <_printf_i+0x64>
 802ea32:	2963      	cmp	r1, #99	; 0x63
 802ea34:	d036      	beq.n	802eaa4 <_printf_i+0x90>
 802ea36:	d80a      	bhi.n	802ea4e <_printf_i+0x3a>
 802ea38:	2900      	cmp	r1, #0
 802ea3a:	f000 80b9 	beq.w	802ebb0 <_printf_i+0x19c>
 802ea3e:	2958      	cmp	r1, #88	; 0x58
 802ea40:	f000 8083 	beq.w	802eb4a <_printf_i+0x136>
 802ea44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802ea48:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 802ea4c:	e032      	b.n	802eab4 <_printf_i+0xa0>
 802ea4e:	2964      	cmp	r1, #100	; 0x64
 802ea50:	d001      	beq.n	802ea56 <_printf_i+0x42>
 802ea52:	2969      	cmp	r1, #105	; 0x69
 802ea54:	d1f6      	bne.n	802ea44 <_printf_i+0x30>
 802ea56:	6820      	ldr	r0, [r4, #0]
 802ea58:	6813      	ldr	r3, [r2, #0]
 802ea5a:	0605      	lsls	r5, r0, #24
 802ea5c:	f103 0104 	add.w	r1, r3, #4
 802ea60:	d52a      	bpl.n	802eab8 <_printf_i+0xa4>
 802ea62:	681b      	ldr	r3, [r3, #0]
 802ea64:	6011      	str	r1, [r2, #0]
 802ea66:	2b00      	cmp	r3, #0
 802ea68:	da03      	bge.n	802ea72 <_printf_i+0x5e>
 802ea6a:	222d      	movs	r2, #45	; 0x2d
 802ea6c:	425b      	negs	r3, r3
 802ea6e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 802ea72:	486f      	ldr	r0, [pc, #444]	; (802ec30 <_printf_i+0x21c>)
 802ea74:	220a      	movs	r2, #10
 802ea76:	e039      	b.n	802eaec <_printf_i+0xd8>
 802ea78:	2973      	cmp	r1, #115	; 0x73
 802ea7a:	f000 809d 	beq.w	802ebb8 <_printf_i+0x1a4>
 802ea7e:	d808      	bhi.n	802ea92 <_printf_i+0x7e>
 802ea80:	296f      	cmp	r1, #111	; 0x6f
 802ea82:	d020      	beq.n	802eac6 <_printf_i+0xb2>
 802ea84:	2970      	cmp	r1, #112	; 0x70
 802ea86:	d1dd      	bne.n	802ea44 <_printf_i+0x30>
 802ea88:	6823      	ldr	r3, [r4, #0]
 802ea8a:	f043 0320 	orr.w	r3, r3, #32
 802ea8e:	6023      	str	r3, [r4, #0]
 802ea90:	e003      	b.n	802ea9a <_printf_i+0x86>
 802ea92:	2975      	cmp	r1, #117	; 0x75
 802ea94:	d017      	beq.n	802eac6 <_printf_i+0xb2>
 802ea96:	2978      	cmp	r1, #120	; 0x78
 802ea98:	d1d4      	bne.n	802ea44 <_printf_i+0x30>
 802ea9a:	2378      	movs	r3, #120	; 0x78
 802ea9c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802eaa0:	4864      	ldr	r0, [pc, #400]	; (802ec34 <_printf_i+0x220>)
 802eaa2:	e055      	b.n	802eb50 <_printf_i+0x13c>
 802eaa4:	6813      	ldr	r3, [r2, #0]
 802eaa6:	1d19      	adds	r1, r3, #4
 802eaa8:	681b      	ldr	r3, [r3, #0]
 802eaaa:	6011      	str	r1, [r2, #0]
 802eaac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802eab0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802eab4:	2301      	movs	r3, #1
 802eab6:	e08c      	b.n	802ebd2 <_printf_i+0x1be>
 802eab8:	681b      	ldr	r3, [r3, #0]
 802eaba:	6011      	str	r1, [r2, #0]
 802eabc:	f010 0f40 	tst.w	r0, #64	; 0x40
 802eac0:	bf18      	it	ne
 802eac2:	b21b      	sxthne	r3, r3
 802eac4:	e7cf      	b.n	802ea66 <_printf_i+0x52>
 802eac6:	6813      	ldr	r3, [r2, #0]
 802eac8:	6825      	ldr	r5, [r4, #0]
 802eaca:	1d18      	adds	r0, r3, #4
 802eacc:	6010      	str	r0, [r2, #0]
 802eace:	0628      	lsls	r0, r5, #24
 802ead0:	d501      	bpl.n	802ead6 <_printf_i+0xc2>
 802ead2:	681b      	ldr	r3, [r3, #0]
 802ead4:	e002      	b.n	802eadc <_printf_i+0xc8>
 802ead6:	0668      	lsls	r0, r5, #25
 802ead8:	d5fb      	bpl.n	802ead2 <_printf_i+0xbe>
 802eada:	881b      	ldrh	r3, [r3, #0]
 802eadc:	4854      	ldr	r0, [pc, #336]	; (802ec30 <_printf_i+0x21c>)
 802eade:	296f      	cmp	r1, #111	; 0x6f
 802eae0:	bf14      	ite	ne
 802eae2:	220a      	movne	r2, #10
 802eae4:	2208      	moveq	r2, #8
 802eae6:	2100      	movs	r1, #0
 802eae8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802eaec:	6865      	ldr	r5, [r4, #4]
 802eaee:	60a5      	str	r5, [r4, #8]
 802eaf0:	2d00      	cmp	r5, #0
 802eaf2:	f2c0 8095 	blt.w	802ec20 <_printf_i+0x20c>
 802eaf6:	6821      	ldr	r1, [r4, #0]
 802eaf8:	f021 0104 	bic.w	r1, r1, #4
 802eafc:	6021      	str	r1, [r4, #0]
 802eafe:	2b00      	cmp	r3, #0
 802eb00:	d13d      	bne.n	802eb7e <_printf_i+0x16a>
 802eb02:	2d00      	cmp	r5, #0
 802eb04:	f040 808e 	bne.w	802ec24 <_printf_i+0x210>
 802eb08:	4665      	mov	r5, ip
 802eb0a:	2a08      	cmp	r2, #8
 802eb0c:	d10b      	bne.n	802eb26 <_printf_i+0x112>
 802eb0e:	6823      	ldr	r3, [r4, #0]
 802eb10:	07db      	lsls	r3, r3, #31
 802eb12:	d508      	bpl.n	802eb26 <_printf_i+0x112>
 802eb14:	6923      	ldr	r3, [r4, #16]
 802eb16:	6862      	ldr	r2, [r4, #4]
 802eb18:	429a      	cmp	r2, r3
 802eb1a:	bfde      	ittt	le
 802eb1c:	2330      	movle	r3, #48	; 0x30
 802eb1e:	f805 3c01 	strble.w	r3, [r5, #-1]
 802eb22:	f105 35ff 	addle.w	r5, r5, #4294967295
 802eb26:	ebac 0305 	sub.w	r3, ip, r5
 802eb2a:	6123      	str	r3, [r4, #16]
 802eb2c:	f8cd 8000 	str.w	r8, [sp]
 802eb30:	463b      	mov	r3, r7
 802eb32:	aa03      	add	r2, sp, #12
 802eb34:	4621      	mov	r1, r4
 802eb36:	4630      	mov	r0, r6
 802eb38:	f7ff fef6 	bl	802e928 <_printf_common>
 802eb3c:	3001      	adds	r0, #1
 802eb3e:	d14d      	bne.n	802ebdc <_printf_i+0x1c8>
 802eb40:	f04f 30ff 	mov.w	r0, #4294967295
 802eb44:	b005      	add	sp, #20
 802eb46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802eb4a:	4839      	ldr	r0, [pc, #228]	; (802ec30 <_printf_i+0x21c>)
 802eb4c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 802eb50:	6813      	ldr	r3, [r2, #0]
 802eb52:	6821      	ldr	r1, [r4, #0]
 802eb54:	1d1d      	adds	r5, r3, #4
 802eb56:	681b      	ldr	r3, [r3, #0]
 802eb58:	6015      	str	r5, [r2, #0]
 802eb5a:	060a      	lsls	r2, r1, #24
 802eb5c:	d50b      	bpl.n	802eb76 <_printf_i+0x162>
 802eb5e:	07ca      	lsls	r2, r1, #31
 802eb60:	bf44      	itt	mi
 802eb62:	f041 0120 	orrmi.w	r1, r1, #32
 802eb66:	6021      	strmi	r1, [r4, #0]
 802eb68:	b91b      	cbnz	r3, 802eb72 <_printf_i+0x15e>
 802eb6a:	6822      	ldr	r2, [r4, #0]
 802eb6c:	f022 0220 	bic.w	r2, r2, #32
 802eb70:	6022      	str	r2, [r4, #0]
 802eb72:	2210      	movs	r2, #16
 802eb74:	e7b7      	b.n	802eae6 <_printf_i+0xd2>
 802eb76:	064d      	lsls	r5, r1, #25
 802eb78:	bf48      	it	mi
 802eb7a:	b29b      	uxthmi	r3, r3
 802eb7c:	e7ef      	b.n	802eb5e <_printf_i+0x14a>
 802eb7e:	4665      	mov	r5, ip
 802eb80:	fbb3 f1f2 	udiv	r1, r3, r2
 802eb84:	fb02 3311 	mls	r3, r2, r1, r3
 802eb88:	5cc3      	ldrb	r3, [r0, r3]
 802eb8a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 802eb8e:	460b      	mov	r3, r1
 802eb90:	2900      	cmp	r1, #0
 802eb92:	d1f5      	bne.n	802eb80 <_printf_i+0x16c>
 802eb94:	e7b9      	b.n	802eb0a <_printf_i+0xf6>
 802eb96:	6813      	ldr	r3, [r2, #0]
 802eb98:	6825      	ldr	r5, [r4, #0]
 802eb9a:	6961      	ldr	r1, [r4, #20]
 802eb9c:	1d18      	adds	r0, r3, #4
 802eb9e:	6010      	str	r0, [r2, #0]
 802eba0:	0628      	lsls	r0, r5, #24
 802eba2:	681b      	ldr	r3, [r3, #0]
 802eba4:	d501      	bpl.n	802ebaa <_printf_i+0x196>
 802eba6:	6019      	str	r1, [r3, #0]
 802eba8:	e002      	b.n	802ebb0 <_printf_i+0x19c>
 802ebaa:	066a      	lsls	r2, r5, #25
 802ebac:	d5fb      	bpl.n	802eba6 <_printf_i+0x192>
 802ebae:	8019      	strh	r1, [r3, #0]
 802ebb0:	2300      	movs	r3, #0
 802ebb2:	6123      	str	r3, [r4, #16]
 802ebb4:	4665      	mov	r5, ip
 802ebb6:	e7b9      	b.n	802eb2c <_printf_i+0x118>
 802ebb8:	6813      	ldr	r3, [r2, #0]
 802ebba:	1d19      	adds	r1, r3, #4
 802ebbc:	6011      	str	r1, [r2, #0]
 802ebbe:	681d      	ldr	r5, [r3, #0]
 802ebc0:	6862      	ldr	r2, [r4, #4]
 802ebc2:	2100      	movs	r1, #0
 802ebc4:	4628      	mov	r0, r5
 802ebc6:	f7d8 f893 	bl	8006cf0 <memchr>
 802ebca:	b108      	cbz	r0, 802ebd0 <_printf_i+0x1bc>
 802ebcc:	1b40      	subs	r0, r0, r5
 802ebce:	6060      	str	r0, [r4, #4]
 802ebd0:	6863      	ldr	r3, [r4, #4]
 802ebd2:	6123      	str	r3, [r4, #16]
 802ebd4:	2300      	movs	r3, #0
 802ebd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802ebda:	e7a7      	b.n	802eb2c <_printf_i+0x118>
 802ebdc:	6923      	ldr	r3, [r4, #16]
 802ebde:	462a      	mov	r2, r5
 802ebe0:	4639      	mov	r1, r7
 802ebe2:	4630      	mov	r0, r6
 802ebe4:	47c0      	blx	r8
 802ebe6:	3001      	adds	r0, #1
 802ebe8:	d0aa      	beq.n	802eb40 <_printf_i+0x12c>
 802ebea:	6823      	ldr	r3, [r4, #0]
 802ebec:	079b      	lsls	r3, r3, #30
 802ebee:	d413      	bmi.n	802ec18 <_printf_i+0x204>
 802ebf0:	68e0      	ldr	r0, [r4, #12]
 802ebf2:	9b03      	ldr	r3, [sp, #12]
 802ebf4:	4298      	cmp	r0, r3
 802ebf6:	bfb8      	it	lt
 802ebf8:	4618      	movlt	r0, r3
 802ebfa:	e7a3      	b.n	802eb44 <_printf_i+0x130>
 802ebfc:	2301      	movs	r3, #1
 802ebfe:	464a      	mov	r2, r9
 802ec00:	4639      	mov	r1, r7
 802ec02:	4630      	mov	r0, r6
 802ec04:	47c0      	blx	r8
 802ec06:	3001      	adds	r0, #1
 802ec08:	d09a      	beq.n	802eb40 <_printf_i+0x12c>
 802ec0a:	3501      	adds	r5, #1
 802ec0c:	68e3      	ldr	r3, [r4, #12]
 802ec0e:	9a03      	ldr	r2, [sp, #12]
 802ec10:	1a9b      	subs	r3, r3, r2
 802ec12:	42ab      	cmp	r3, r5
 802ec14:	dcf2      	bgt.n	802ebfc <_printf_i+0x1e8>
 802ec16:	e7eb      	b.n	802ebf0 <_printf_i+0x1dc>
 802ec18:	2500      	movs	r5, #0
 802ec1a:	f104 0919 	add.w	r9, r4, #25
 802ec1e:	e7f5      	b.n	802ec0c <_printf_i+0x1f8>
 802ec20:	2b00      	cmp	r3, #0
 802ec22:	d1ac      	bne.n	802eb7e <_printf_i+0x16a>
 802ec24:	7803      	ldrb	r3, [r0, #0]
 802ec26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802ec2a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802ec2e:	e76c      	b.n	802eb0a <_printf_i+0xf6>
 802ec30:	08035645 	.word	0x08035645
 802ec34:	08035656 	.word	0x08035656

0802ec38 <_putc_r>:
 802ec38:	b570      	push	{r4, r5, r6, lr}
 802ec3a:	460d      	mov	r5, r1
 802ec3c:	4614      	mov	r4, r2
 802ec3e:	4606      	mov	r6, r0
 802ec40:	b118      	cbz	r0, 802ec4a <_putc_r+0x12>
 802ec42:	6983      	ldr	r3, [r0, #24]
 802ec44:	b90b      	cbnz	r3, 802ec4a <_putc_r+0x12>
 802ec46:	f000 fb1f 	bl	802f288 <__sinit>
 802ec4a:	4b13      	ldr	r3, [pc, #76]	; (802ec98 <_putc_r+0x60>)
 802ec4c:	429c      	cmp	r4, r3
 802ec4e:	d112      	bne.n	802ec76 <_putc_r+0x3e>
 802ec50:	6874      	ldr	r4, [r6, #4]
 802ec52:	68a3      	ldr	r3, [r4, #8]
 802ec54:	3b01      	subs	r3, #1
 802ec56:	2b00      	cmp	r3, #0
 802ec58:	60a3      	str	r3, [r4, #8]
 802ec5a:	da16      	bge.n	802ec8a <_putc_r+0x52>
 802ec5c:	69a2      	ldr	r2, [r4, #24]
 802ec5e:	4293      	cmp	r3, r2
 802ec60:	db02      	blt.n	802ec68 <_putc_r+0x30>
 802ec62:	b2eb      	uxtb	r3, r5
 802ec64:	2b0a      	cmp	r3, #10
 802ec66:	d110      	bne.n	802ec8a <_putc_r+0x52>
 802ec68:	4622      	mov	r2, r4
 802ec6a:	4629      	mov	r1, r5
 802ec6c:	4630      	mov	r0, r6
 802ec6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802ec72:	f000 b8e3 	b.w	802ee3c <__swbuf_r>
 802ec76:	4b09      	ldr	r3, [pc, #36]	; (802ec9c <_putc_r+0x64>)
 802ec78:	429c      	cmp	r4, r3
 802ec7a:	d101      	bne.n	802ec80 <_putc_r+0x48>
 802ec7c:	68b4      	ldr	r4, [r6, #8]
 802ec7e:	e7e8      	b.n	802ec52 <_putc_r+0x1a>
 802ec80:	4b07      	ldr	r3, [pc, #28]	; (802eca0 <_putc_r+0x68>)
 802ec82:	429c      	cmp	r4, r3
 802ec84:	bf08      	it	eq
 802ec86:	68f4      	ldreq	r4, [r6, #12]
 802ec88:	e7e3      	b.n	802ec52 <_putc_r+0x1a>
 802ec8a:	6823      	ldr	r3, [r4, #0]
 802ec8c:	1c5a      	adds	r2, r3, #1
 802ec8e:	6022      	str	r2, [r4, #0]
 802ec90:	701d      	strb	r5, [r3, #0]
 802ec92:	b2e8      	uxtb	r0, r5
 802ec94:	bd70      	pop	{r4, r5, r6, pc}
 802ec96:	bf00      	nop
 802ec98:	0803568c 	.word	0x0803568c
 802ec9c:	080356ac 	.word	0x080356ac
 802eca0:	0803566c 	.word	0x0803566c

0802eca4 <realloc>:
 802eca4:	4b02      	ldr	r3, [pc, #8]	; (802ecb0 <realloc+0xc>)
 802eca6:	460a      	mov	r2, r1
 802eca8:	4601      	mov	r1, r0
 802ecaa:	6818      	ldr	r0, [r3, #0]
 802ecac:	f000 bbf5 	b.w	802f49a <_realloc_r>
 802ecb0:	20000118 	.word	0x20000118

0802ecb4 <_sbrk_r>:
 802ecb4:	b538      	push	{r3, r4, r5, lr}
 802ecb6:	4c06      	ldr	r4, [pc, #24]	; (802ecd0 <_sbrk_r+0x1c>)
 802ecb8:	2300      	movs	r3, #0
 802ecba:	4605      	mov	r5, r0
 802ecbc:	4608      	mov	r0, r1
 802ecbe:	6023      	str	r3, [r4, #0]
 802ecc0:	f7dd fc9c 	bl	800c5fc <_sbrk>
 802ecc4:	1c43      	adds	r3, r0, #1
 802ecc6:	d102      	bne.n	802ecce <_sbrk_r+0x1a>
 802ecc8:	6823      	ldr	r3, [r4, #0]
 802ecca:	b103      	cbz	r3, 802ecce <_sbrk_r+0x1a>
 802eccc:	602b      	str	r3, [r5, #0]
 802ecce:	bd38      	pop	{r3, r4, r5, pc}
 802ecd0:	200130b8 	.word	0x200130b8

0802ecd4 <_raise_r>:
 802ecd4:	291f      	cmp	r1, #31
 802ecd6:	b538      	push	{r3, r4, r5, lr}
 802ecd8:	4604      	mov	r4, r0
 802ecda:	460d      	mov	r5, r1
 802ecdc:	d904      	bls.n	802ece8 <_raise_r+0x14>
 802ecde:	2316      	movs	r3, #22
 802ece0:	6003      	str	r3, [r0, #0]
 802ece2:	f04f 30ff 	mov.w	r0, #4294967295
 802ece6:	bd38      	pop	{r3, r4, r5, pc}
 802ece8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802ecea:	b112      	cbz	r2, 802ecf2 <_raise_r+0x1e>
 802ecec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802ecf0:	b94b      	cbnz	r3, 802ed06 <_raise_r+0x32>
 802ecf2:	4620      	mov	r0, r4
 802ecf4:	f000 f830 	bl	802ed58 <_getpid_r>
 802ecf8:	462a      	mov	r2, r5
 802ecfa:	4601      	mov	r1, r0
 802ecfc:	4620      	mov	r0, r4
 802ecfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802ed02:	f000 b817 	b.w	802ed34 <_kill_r>
 802ed06:	2b01      	cmp	r3, #1
 802ed08:	d00a      	beq.n	802ed20 <_raise_r+0x4c>
 802ed0a:	1c59      	adds	r1, r3, #1
 802ed0c:	d103      	bne.n	802ed16 <_raise_r+0x42>
 802ed0e:	2316      	movs	r3, #22
 802ed10:	6003      	str	r3, [r0, #0]
 802ed12:	2001      	movs	r0, #1
 802ed14:	e7e7      	b.n	802ece6 <_raise_r+0x12>
 802ed16:	2400      	movs	r4, #0
 802ed18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802ed1c:	4628      	mov	r0, r5
 802ed1e:	4798      	blx	r3
 802ed20:	2000      	movs	r0, #0
 802ed22:	e7e0      	b.n	802ece6 <_raise_r+0x12>

0802ed24 <raise>:
 802ed24:	4b02      	ldr	r3, [pc, #8]	; (802ed30 <raise+0xc>)
 802ed26:	4601      	mov	r1, r0
 802ed28:	6818      	ldr	r0, [r3, #0]
 802ed2a:	f7ff bfd3 	b.w	802ecd4 <_raise_r>
 802ed2e:	bf00      	nop
 802ed30:	20000118 	.word	0x20000118

0802ed34 <_kill_r>:
 802ed34:	b538      	push	{r3, r4, r5, lr}
 802ed36:	4c07      	ldr	r4, [pc, #28]	; (802ed54 <_kill_r+0x20>)
 802ed38:	2300      	movs	r3, #0
 802ed3a:	4605      	mov	r5, r0
 802ed3c:	4608      	mov	r0, r1
 802ed3e:	4611      	mov	r1, r2
 802ed40:	6023      	str	r3, [r4, #0]
 802ed42:	f7dd fbd3 	bl	800c4ec <_kill>
 802ed46:	1c43      	adds	r3, r0, #1
 802ed48:	d102      	bne.n	802ed50 <_kill_r+0x1c>
 802ed4a:	6823      	ldr	r3, [r4, #0]
 802ed4c:	b103      	cbz	r3, 802ed50 <_kill_r+0x1c>
 802ed4e:	602b      	str	r3, [r5, #0]
 802ed50:	bd38      	pop	{r3, r4, r5, pc}
 802ed52:	bf00      	nop
 802ed54:	200130b8 	.word	0x200130b8

0802ed58 <_getpid_r>:
 802ed58:	f7dd bbc0 	b.w	800c4dc <_getpid>

0802ed5c <sniprintf>:
 802ed5c:	b40c      	push	{r2, r3}
 802ed5e:	b530      	push	{r4, r5, lr}
 802ed60:	4b17      	ldr	r3, [pc, #92]	; (802edc0 <sniprintf+0x64>)
 802ed62:	1e0c      	subs	r4, r1, #0
 802ed64:	b09d      	sub	sp, #116	; 0x74
 802ed66:	681d      	ldr	r5, [r3, #0]
 802ed68:	da08      	bge.n	802ed7c <sniprintf+0x20>
 802ed6a:	238b      	movs	r3, #139	; 0x8b
 802ed6c:	602b      	str	r3, [r5, #0]
 802ed6e:	f04f 30ff 	mov.w	r0, #4294967295
 802ed72:	b01d      	add	sp, #116	; 0x74
 802ed74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802ed78:	b002      	add	sp, #8
 802ed7a:	4770      	bx	lr
 802ed7c:	f44f 7302 	mov.w	r3, #520	; 0x208
 802ed80:	f8ad 3014 	strh.w	r3, [sp, #20]
 802ed84:	bf14      	ite	ne
 802ed86:	f104 33ff 	addne.w	r3, r4, #4294967295
 802ed8a:	4623      	moveq	r3, r4
 802ed8c:	9304      	str	r3, [sp, #16]
 802ed8e:	9307      	str	r3, [sp, #28]
 802ed90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802ed94:	9002      	str	r0, [sp, #8]
 802ed96:	9006      	str	r0, [sp, #24]
 802ed98:	f8ad 3016 	strh.w	r3, [sp, #22]
 802ed9c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802ed9e:	ab21      	add	r3, sp, #132	; 0x84
 802eda0:	a902      	add	r1, sp, #8
 802eda2:	4628      	mov	r0, r5
 802eda4:	9301      	str	r3, [sp, #4]
 802eda6:	f000 fbf9 	bl	802f59c <_svfiprintf_r>
 802edaa:	1c43      	adds	r3, r0, #1
 802edac:	bfbc      	itt	lt
 802edae:	238b      	movlt	r3, #139	; 0x8b
 802edb0:	602b      	strlt	r3, [r5, #0]
 802edb2:	2c00      	cmp	r4, #0
 802edb4:	d0dd      	beq.n	802ed72 <sniprintf+0x16>
 802edb6:	9b02      	ldr	r3, [sp, #8]
 802edb8:	2200      	movs	r2, #0
 802edba:	701a      	strb	r2, [r3, #0]
 802edbc:	e7d9      	b.n	802ed72 <sniprintf+0x16>
 802edbe:	bf00      	nop
 802edc0:	20000118 	.word	0x20000118

0802edc4 <siprintf>:
 802edc4:	b40e      	push	{r1, r2, r3}
 802edc6:	b500      	push	{lr}
 802edc8:	b09c      	sub	sp, #112	; 0x70
 802edca:	ab1d      	add	r3, sp, #116	; 0x74
 802edcc:	9002      	str	r0, [sp, #8]
 802edce:	9006      	str	r0, [sp, #24]
 802edd0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802edd4:	4809      	ldr	r0, [pc, #36]	; (802edfc <siprintf+0x38>)
 802edd6:	9107      	str	r1, [sp, #28]
 802edd8:	9104      	str	r1, [sp, #16]
 802edda:	4909      	ldr	r1, [pc, #36]	; (802ee00 <siprintf+0x3c>)
 802eddc:	f853 2b04 	ldr.w	r2, [r3], #4
 802ede0:	9105      	str	r1, [sp, #20]
 802ede2:	6800      	ldr	r0, [r0, #0]
 802ede4:	9301      	str	r3, [sp, #4]
 802ede6:	a902      	add	r1, sp, #8
 802ede8:	f000 fbd8 	bl	802f59c <_svfiprintf_r>
 802edec:	9b02      	ldr	r3, [sp, #8]
 802edee:	2200      	movs	r2, #0
 802edf0:	701a      	strb	r2, [r3, #0]
 802edf2:	b01c      	add	sp, #112	; 0x70
 802edf4:	f85d eb04 	ldr.w	lr, [sp], #4
 802edf8:	b003      	add	sp, #12
 802edfa:	4770      	bx	lr
 802edfc:	20000118 	.word	0x20000118
 802ee00:	ffff0208 	.word	0xffff0208

0802ee04 <strncmp>:
 802ee04:	b510      	push	{r4, lr}
 802ee06:	b16a      	cbz	r2, 802ee24 <strncmp+0x20>
 802ee08:	3901      	subs	r1, #1
 802ee0a:	1884      	adds	r4, r0, r2
 802ee0c:	f810 3b01 	ldrb.w	r3, [r0], #1
 802ee10:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802ee14:	4293      	cmp	r3, r2
 802ee16:	d103      	bne.n	802ee20 <strncmp+0x1c>
 802ee18:	42a0      	cmp	r0, r4
 802ee1a:	d001      	beq.n	802ee20 <strncmp+0x1c>
 802ee1c:	2b00      	cmp	r3, #0
 802ee1e:	d1f5      	bne.n	802ee0c <strncmp+0x8>
 802ee20:	1a98      	subs	r0, r3, r2
 802ee22:	bd10      	pop	{r4, pc}
 802ee24:	4610      	mov	r0, r2
 802ee26:	e7fc      	b.n	802ee22 <strncmp+0x1e>

0802ee28 <write>:
 802ee28:	4613      	mov	r3, r2
 802ee2a:	460a      	mov	r2, r1
 802ee2c:	4601      	mov	r1, r0
 802ee2e:	4802      	ldr	r0, [pc, #8]	; (802ee38 <write+0x10>)
 802ee30:	6800      	ldr	r0, [r0, #0]
 802ee32:	f000 b855 	b.w	802eee0 <_write_r>
 802ee36:	bf00      	nop
 802ee38:	20000118 	.word	0x20000118

0802ee3c <__swbuf_r>:
 802ee3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ee3e:	460e      	mov	r6, r1
 802ee40:	4614      	mov	r4, r2
 802ee42:	4605      	mov	r5, r0
 802ee44:	b118      	cbz	r0, 802ee4e <__swbuf_r+0x12>
 802ee46:	6983      	ldr	r3, [r0, #24]
 802ee48:	b90b      	cbnz	r3, 802ee4e <__swbuf_r+0x12>
 802ee4a:	f000 fa1d 	bl	802f288 <__sinit>
 802ee4e:	4b21      	ldr	r3, [pc, #132]	; (802eed4 <__swbuf_r+0x98>)
 802ee50:	429c      	cmp	r4, r3
 802ee52:	d12a      	bne.n	802eeaa <__swbuf_r+0x6e>
 802ee54:	686c      	ldr	r4, [r5, #4]
 802ee56:	69a3      	ldr	r3, [r4, #24]
 802ee58:	60a3      	str	r3, [r4, #8]
 802ee5a:	89a3      	ldrh	r3, [r4, #12]
 802ee5c:	071a      	lsls	r2, r3, #28
 802ee5e:	d52e      	bpl.n	802eebe <__swbuf_r+0x82>
 802ee60:	6923      	ldr	r3, [r4, #16]
 802ee62:	b363      	cbz	r3, 802eebe <__swbuf_r+0x82>
 802ee64:	6923      	ldr	r3, [r4, #16]
 802ee66:	6820      	ldr	r0, [r4, #0]
 802ee68:	1ac0      	subs	r0, r0, r3
 802ee6a:	6963      	ldr	r3, [r4, #20]
 802ee6c:	b2f6      	uxtb	r6, r6
 802ee6e:	4283      	cmp	r3, r0
 802ee70:	4637      	mov	r7, r6
 802ee72:	dc04      	bgt.n	802ee7e <__swbuf_r+0x42>
 802ee74:	4621      	mov	r1, r4
 802ee76:	4628      	mov	r0, r5
 802ee78:	f000 f99c 	bl	802f1b4 <_fflush_r>
 802ee7c:	bb28      	cbnz	r0, 802eeca <__swbuf_r+0x8e>
 802ee7e:	68a3      	ldr	r3, [r4, #8]
 802ee80:	3b01      	subs	r3, #1
 802ee82:	60a3      	str	r3, [r4, #8]
 802ee84:	6823      	ldr	r3, [r4, #0]
 802ee86:	1c5a      	adds	r2, r3, #1
 802ee88:	6022      	str	r2, [r4, #0]
 802ee8a:	701e      	strb	r6, [r3, #0]
 802ee8c:	6963      	ldr	r3, [r4, #20]
 802ee8e:	3001      	adds	r0, #1
 802ee90:	4283      	cmp	r3, r0
 802ee92:	d004      	beq.n	802ee9e <__swbuf_r+0x62>
 802ee94:	89a3      	ldrh	r3, [r4, #12]
 802ee96:	07db      	lsls	r3, r3, #31
 802ee98:	d519      	bpl.n	802eece <__swbuf_r+0x92>
 802ee9a:	2e0a      	cmp	r6, #10
 802ee9c:	d117      	bne.n	802eece <__swbuf_r+0x92>
 802ee9e:	4621      	mov	r1, r4
 802eea0:	4628      	mov	r0, r5
 802eea2:	f000 f987 	bl	802f1b4 <_fflush_r>
 802eea6:	b190      	cbz	r0, 802eece <__swbuf_r+0x92>
 802eea8:	e00f      	b.n	802eeca <__swbuf_r+0x8e>
 802eeaa:	4b0b      	ldr	r3, [pc, #44]	; (802eed8 <__swbuf_r+0x9c>)
 802eeac:	429c      	cmp	r4, r3
 802eeae:	d101      	bne.n	802eeb4 <__swbuf_r+0x78>
 802eeb0:	68ac      	ldr	r4, [r5, #8]
 802eeb2:	e7d0      	b.n	802ee56 <__swbuf_r+0x1a>
 802eeb4:	4b09      	ldr	r3, [pc, #36]	; (802eedc <__swbuf_r+0xa0>)
 802eeb6:	429c      	cmp	r4, r3
 802eeb8:	bf08      	it	eq
 802eeba:	68ec      	ldreq	r4, [r5, #12]
 802eebc:	e7cb      	b.n	802ee56 <__swbuf_r+0x1a>
 802eebe:	4621      	mov	r1, r4
 802eec0:	4628      	mov	r0, r5
 802eec2:	f000 f81f 	bl	802ef04 <__swsetup_r>
 802eec6:	2800      	cmp	r0, #0
 802eec8:	d0cc      	beq.n	802ee64 <__swbuf_r+0x28>
 802eeca:	f04f 37ff 	mov.w	r7, #4294967295
 802eece:	4638      	mov	r0, r7
 802eed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802eed2:	bf00      	nop
 802eed4:	0803568c 	.word	0x0803568c
 802eed8:	080356ac 	.word	0x080356ac
 802eedc:	0803566c 	.word	0x0803566c

0802eee0 <_write_r>:
 802eee0:	b538      	push	{r3, r4, r5, lr}
 802eee2:	4c07      	ldr	r4, [pc, #28]	; (802ef00 <_write_r+0x20>)
 802eee4:	4605      	mov	r5, r0
 802eee6:	4608      	mov	r0, r1
 802eee8:	4611      	mov	r1, r2
 802eeea:	2200      	movs	r2, #0
 802eeec:	6022      	str	r2, [r4, #0]
 802eeee:	461a      	mov	r2, r3
 802eef0:	f7dd fb33 	bl	800c55a <_write>
 802eef4:	1c43      	adds	r3, r0, #1
 802eef6:	d102      	bne.n	802eefe <_write_r+0x1e>
 802eef8:	6823      	ldr	r3, [r4, #0]
 802eefa:	b103      	cbz	r3, 802eefe <_write_r+0x1e>
 802eefc:	602b      	str	r3, [r5, #0]
 802eefe:	bd38      	pop	{r3, r4, r5, pc}
 802ef00:	200130b8 	.word	0x200130b8

0802ef04 <__swsetup_r>:
 802ef04:	4b32      	ldr	r3, [pc, #200]	; (802efd0 <__swsetup_r+0xcc>)
 802ef06:	b570      	push	{r4, r5, r6, lr}
 802ef08:	681d      	ldr	r5, [r3, #0]
 802ef0a:	4606      	mov	r6, r0
 802ef0c:	460c      	mov	r4, r1
 802ef0e:	b125      	cbz	r5, 802ef1a <__swsetup_r+0x16>
 802ef10:	69ab      	ldr	r3, [r5, #24]
 802ef12:	b913      	cbnz	r3, 802ef1a <__swsetup_r+0x16>
 802ef14:	4628      	mov	r0, r5
 802ef16:	f000 f9b7 	bl	802f288 <__sinit>
 802ef1a:	4b2e      	ldr	r3, [pc, #184]	; (802efd4 <__swsetup_r+0xd0>)
 802ef1c:	429c      	cmp	r4, r3
 802ef1e:	d10f      	bne.n	802ef40 <__swsetup_r+0x3c>
 802ef20:	686c      	ldr	r4, [r5, #4]
 802ef22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802ef26:	b29a      	uxth	r2, r3
 802ef28:	0715      	lsls	r5, r2, #28
 802ef2a:	d42c      	bmi.n	802ef86 <__swsetup_r+0x82>
 802ef2c:	06d0      	lsls	r0, r2, #27
 802ef2e:	d411      	bmi.n	802ef54 <__swsetup_r+0x50>
 802ef30:	2209      	movs	r2, #9
 802ef32:	6032      	str	r2, [r6, #0]
 802ef34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802ef38:	81a3      	strh	r3, [r4, #12]
 802ef3a:	f04f 30ff 	mov.w	r0, #4294967295
 802ef3e:	e03e      	b.n	802efbe <__swsetup_r+0xba>
 802ef40:	4b25      	ldr	r3, [pc, #148]	; (802efd8 <__swsetup_r+0xd4>)
 802ef42:	429c      	cmp	r4, r3
 802ef44:	d101      	bne.n	802ef4a <__swsetup_r+0x46>
 802ef46:	68ac      	ldr	r4, [r5, #8]
 802ef48:	e7eb      	b.n	802ef22 <__swsetup_r+0x1e>
 802ef4a:	4b24      	ldr	r3, [pc, #144]	; (802efdc <__swsetup_r+0xd8>)
 802ef4c:	429c      	cmp	r4, r3
 802ef4e:	bf08      	it	eq
 802ef50:	68ec      	ldreq	r4, [r5, #12]
 802ef52:	e7e6      	b.n	802ef22 <__swsetup_r+0x1e>
 802ef54:	0751      	lsls	r1, r2, #29
 802ef56:	d512      	bpl.n	802ef7e <__swsetup_r+0x7a>
 802ef58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802ef5a:	b141      	cbz	r1, 802ef6e <__swsetup_r+0x6a>
 802ef5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802ef60:	4299      	cmp	r1, r3
 802ef62:	d002      	beq.n	802ef6a <__swsetup_r+0x66>
 802ef64:	4630      	mov	r0, r6
 802ef66:	f7ff faf7 	bl	802e558 <_free_r>
 802ef6a:	2300      	movs	r3, #0
 802ef6c:	6363      	str	r3, [r4, #52]	; 0x34
 802ef6e:	89a3      	ldrh	r3, [r4, #12]
 802ef70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802ef74:	81a3      	strh	r3, [r4, #12]
 802ef76:	2300      	movs	r3, #0
 802ef78:	6063      	str	r3, [r4, #4]
 802ef7a:	6923      	ldr	r3, [r4, #16]
 802ef7c:	6023      	str	r3, [r4, #0]
 802ef7e:	89a3      	ldrh	r3, [r4, #12]
 802ef80:	f043 0308 	orr.w	r3, r3, #8
 802ef84:	81a3      	strh	r3, [r4, #12]
 802ef86:	6923      	ldr	r3, [r4, #16]
 802ef88:	b94b      	cbnz	r3, 802ef9e <__swsetup_r+0x9a>
 802ef8a:	89a3      	ldrh	r3, [r4, #12]
 802ef8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802ef90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802ef94:	d003      	beq.n	802ef9e <__swsetup_r+0x9a>
 802ef96:	4621      	mov	r1, r4
 802ef98:	4630      	mov	r0, r6
 802ef9a:	f000 fa23 	bl	802f3e4 <__smakebuf_r>
 802ef9e:	89a2      	ldrh	r2, [r4, #12]
 802efa0:	f012 0301 	ands.w	r3, r2, #1
 802efa4:	d00c      	beq.n	802efc0 <__swsetup_r+0xbc>
 802efa6:	2300      	movs	r3, #0
 802efa8:	60a3      	str	r3, [r4, #8]
 802efaa:	6963      	ldr	r3, [r4, #20]
 802efac:	425b      	negs	r3, r3
 802efae:	61a3      	str	r3, [r4, #24]
 802efb0:	6923      	ldr	r3, [r4, #16]
 802efb2:	b953      	cbnz	r3, 802efca <__swsetup_r+0xc6>
 802efb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802efb8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 802efbc:	d1ba      	bne.n	802ef34 <__swsetup_r+0x30>
 802efbe:	bd70      	pop	{r4, r5, r6, pc}
 802efc0:	0792      	lsls	r2, r2, #30
 802efc2:	bf58      	it	pl
 802efc4:	6963      	ldrpl	r3, [r4, #20]
 802efc6:	60a3      	str	r3, [r4, #8]
 802efc8:	e7f2      	b.n	802efb0 <__swsetup_r+0xac>
 802efca:	2000      	movs	r0, #0
 802efcc:	e7f7      	b.n	802efbe <__swsetup_r+0xba>
 802efce:	bf00      	nop
 802efd0:	20000118 	.word	0x20000118
 802efd4:	0803568c 	.word	0x0803568c
 802efd8:	080356ac 	.word	0x080356ac
 802efdc:	0803566c 	.word	0x0803566c

0802efe0 <__register_exitproc>:
 802efe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802efe4:	4d2c      	ldr	r5, [pc, #176]	; (802f098 <__register_exitproc+0xb8>)
 802efe6:	682c      	ldr	r4, [r5, #0]
 802efe8:	4607      	mov	r7, r0
 802efea:	460e      	mov	r6, r1
 802efec:	4691      	mov	r9, r2
 802efee:	4698      	mov	r8, r3
 802eff0:	b934      	cbnz	r4, 802f000 <__register_exitproc+0x20>
 802eff2:	4b2a      	ldr	r3, [pc, #168]	; (802f09c <__register_exitproc+0xbc>)
 802eff4:	4c2a      	ldr	r4, [pc, #168]	; (802f0a0 <__register_exitproc+0xc0>)
 802eff6:	602c      	str	r4, [r5, #0]
 802eff8:	b113      	cbz	r3, 802f000 <__register_exitproc+0x20>
 802effa:	681b      	ldr	r3, [r3, #0]
 802effc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802f000:	6863      	ldr	r3, [r4, #4]
 802f002:	2b1f      	cmp	r3, #31
 802f004:	dd3d      	ble.n	802f082 <__register_exitproc+0xa2>
 802f006:	4b27      	ldr	r3, [pc, #156]	; (802f0a4 <__register_exitproc+0xc4>)
 802f008:	b91b      	cbnz	r3, 802f012 <__register_exitproc+0x32>
 802f00a:	f04f 30ff 	mov.w	r0, #4294967295
 802f00e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802f012:	208c      	movs	r0, #140	; 0x8c
 802f014:	f7ff fa6e 	bl	802e4f4 <malloc>
 802f018:	4604      	mov	r4, r0
 802f01a:	2800      	cmp	r0, #0
 802f01c:	d0f5      	beq.n	802f00a <__register_exitproc+0x2a>
 802f01e:	2300      	movs	r3, #0
 802f020:	682a      	ldr	r2, [r5, #0]
 802f022:	6002      	str	r2, [r0, #0]
 802f024:	6043      	str	r3, [r0, #4]
 802f026:	6028      	str	r0, [r5, #0]
 802f028:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 802f02c:	b30f      	cbz	r7, 802f072 <__register_exitproc+0x92>
 802f02e:	f44f 7084 	mov.w	r0, #264	; 0x108
 802f032:	f7ff fa5f 	bl	802e4f4 <malloc>
 802f036:	2800      	cmp	r0, #0
 802f038:	d0e7      	beq.n	802f00a <__register_exitproc+0x2a>
 802f03a:	2300      	movs	r3, #0
 802f03c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802f040:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 802f044:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802f048:	6862      	ldr	r2, [r4, #4]
 802f04a:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 802f04e:	2301      	movs	r3, #1
 802f050:	4093      	lsls	r3, r2
 802f052:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 802f056:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 802f05a:	431a      	orrs	r2, r3
 802f05c:	2f02      	cmp	r7, #2
 802f05e:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 802f062:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 802f066:	bf02      	ittt	eq
 802f068:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 802f06c:	4313      	orreq	r3, r2
 802f06e:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 802f072:	6863      	ldr	r3, [r4, #4]
 802f074:	1c5a      	adds	r2, r3, #1
 802f076:	3302      	adds	r3, #2
 802f078:	6062      	str	r2, [r4, #4]
 802f07a:	2000      	movs	r0, #0
 802f07c:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 802f080:	e7c5      	b.n	802f00e <__register_exitproc+0x2e>
 802f082:	2f00      	cmp	r7, #0
 802f084:	d0f5      	beq.n	802f072 <__register_exitproc+0x92>
 802f086:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802f08a:	2800      	cmp	r0, #0
 802f08c:	d1dc      	bne.n	802f048 <__register_exitproc+0x68>
 802f08e:	4b05      	ldr	r3, [pc, #20]	; (802f0a4 <__register_exitproc+0xc4>)
 802f090:	2b00      	cmp	r3, #0
 802f092:	d0ba      	beq.n	802f00a <__register_exitproc+0x2a>
 802f094:	e7cb      	b.n	802f02e <__register_exitproc+0x4e>
 802f096:	bf00      	nop
 802f098:	20012b7c 	.word	0x20012b7c
 802f09c:	08035668 	.word	0x08035668
 802f0a0:	20012af0 	.word	0x20012af0
 802f0a4:	0802e4f5 	.word	0x0802e4f5

0802f0a8 <__sflush_r>:
 802f0a8:	898a      	ldrh	r2, [r1, #12]
 802f0aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802f0ae:	4605      	mov	r5, r0
 802f0b0:	0710      	lsls	r0, r2, #28
 802f0b2:	460c      	mov	r4, r1
 802f0b4:	d458      	bmi.n	802f168 <__sflush_r+0xc0>
 802f0b6:	684b      	ldr	r3, [r1, #4]
 802f0b8:	2b00      	cmp	r3, #0
 802f0ba:	dc05      	bgt.n	802f0c8 <__sflush_r+0x20>
 802f0bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802f0be:	2b00      	cmp	r3, #0
 802f0c0:	dc02      	bgt.n	802f0c8 <__sflush_r+0x20>
 802f0c2:	2000      	movs	r0, #0
 802f0c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802f0c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802f0ca:	2e00      	cmp	r6, #0
 802f0cc:	d0f9      	beq.n	802f0c2 <__sflush_r+0x1a>
 802f0ce:	2300      	movs	r3, #0
 802f0d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802f0d4:	682f      	ldr	r7, [r5, #0]
 802f0d6:	6a21      	ldr	r1, [r4, #32]
 802f0d8:	602b      	str	r3, [r5, #0]
 802f0da:	d032      	beq.n	802f142 <__sflush_r+0x9a>
 802f0dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802f0de:	89a3      	ldrh	r3, [r4, #12]
 802f0e0:	075a      	lsls	r2, r3, #29
 802f0e2:	d505      	bpl.n	802f0f0 <__sflush_r+0x48>
 802f0e4:	6863      	ldr	r3, [r4, #4]
 802f0e6:	1ac0      	subs	r0, r0, r3
 802f0e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802f0ea:	b10b      	cbz	r3, 802f0f0 <__sflush_r+0x48>
 802f0ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802f0ee:	1ac0      	subs	r0, r0, r3
 802f0f0:	2300      	movs	r3, #0
 802f0f2:	4602      	mov	r2, r0
 802f0f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802f0f6:	6a21      	ldr	r1, [r4, #32]
 802f0f8:	4628      	mov	r0, r5
 802f0fa:	47b0      	blx	r6
 802f0fc:	1c43      	adds	r3, r0, #1
 802f0fe:	89a3      	ldrh	r3, [r4, #12]
 802f100:	d106      	bne.n	802f110 <__sflush_r+0x68>
 802f102:	6829      	ldr	r1, [r5, #0]
 802f104:	291d      	cmp	r1, #29
 802f106:	d848      	bhi.n	802f19a <__sflush_r+0xf2>
 802f108:	4a29      	ldr	r2, [pc, #164]	; (802f1b0 <__sflush_r+0x108>)
 802f10a:	40ca      	lsrs	r2, r1
 802f10c:	07d6      	lsls	r6, r2, #31
 802f10e:	d544      	bpl.n	802f19a <__sflush_r+0xf2>
 802f110:	2200      	movs	r2, #0
 802f112:	6062      	str	r2, [r4, #4]
 802f114:	04d9      	lsls	r1, r3, #19
 802f116:	6922      	ldr	r2, [r4, #16]
 802f118:	6022      	str	r2, [r4, #0]
 802f11a:	d504      	bpl.n	802f126 <__sflush_r+0x7e>
 802f11c:	1c42      	adds	r2, r0, #1
 802f11e:	d101      	bne.n	802f124 <__sflush_r+0x7c>
 802f120:	682b      	ldr	r3, [r5, #0]
 802f122:	b903      	cbnz	r3, 802f126 <__sflush_r+0x7e>
 802f124:	6560      	str	r0, [r4, #84]	; 0x54
 802f126:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802f128:	602f      	str	r7, [r5, #0]
 802f12a:	2900      	cmp	r1, #0
 802f12c:	d0c9      	beq.n	802f0c2 <__sflush_r+0x1a>
 802f12e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802f132:	4299      	cmp	r1, r3
 802f134:	d002      	beq.n	802f13c <__sflush_r+0x94>
 802f136:	4628      	mov	r0, r5
 802f138:	f7ff fa0e 	bl	802e558 <_free_r>
 802f13c:	2000      	movs	r0, #0
 802f13e:	6360      	str	r0, [r4, #52]	; 0x34
 802f140:	e7c0      	b.n	802f0c4 <__sflush_r+0x1c>
 802f142:	2301      	movs	r3, #1
 802f144:	4628      	mov	r0, r5
 802f146:	47b0      	blx	r6
 802f148:	1c41      	adds	r1, r0, #1
 802f14a:	d1c8      	bne.n	802f0de <__sflush_r+0x36>
 802f14c:	682b      	ldr	r3, [r5, #0]
 802f14e:	2b00      	cmp	r3, #0
 802f150:	d0c5      	beq.n	802f0de <__sflush_r+0x36>
 802f152:	2b1d      	cmp	r3, #29
 802f154:	d001      	beq.n	802f15a <__sflush_r+0xb2>
 802f156:	2b16      	cmp	r3, #22
 802f158:	d101      	bne.n	802f15e <__sflush_r+0xb6>
 802f15a:	602f      	str	r7, [r5, #0]
 802f15c:	e7b1      	b.n	802f0c2 <__sflush_r+0x1a>
 802f15e:	89a3      	ldrh	r3, [r4, #12]
 802f160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802f164:	81a3      	strh	r3, [r4, #12]
 802f166:	e7ad      	b.n	802f0c4 <__sflush_r+0x1c>
 802f168:	690f      	ldr	r7, [r1, #16]
 802f16a:	2f00      	cmp	r7, #0
 802f16c:	d0a9      	beq.n	802f0c2 <__sflush_r+0x1a>
 802f16e:	0793      	lsls	r3, r2, #30
 802f170:	680e      	ldr	r6, [r1, #0]
 802f172:	bf08      	it	eq
 802f174:	694b      	ldreq	r3, [r1, #20]
 802f176:	600f      	str	r7, [r1, #0]
 802f178:	bf18      	it	ne
 802f17a:	2300      	movne	r3, #0
 802f17c:	eba6 0807 	sub.w	r8, r6, r7
 802f180:	608b      	str	r3, [r1, #8]
 802f182:	f1b8 0f00 	cmp.w	r8, #0
 802f186:	dd9c      	ble.n	802f0c2 <__sflush_r+0x1a>
 802f188:	4643      	mov	r3, r8
 802f18a:	463a      	mov	r2, r7
 802f18c:	6a21      	ldr	r1, [r4, #32]
 802f18e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802f190:	4628      	mov	r0, r5
 802f192:	47b0      	blx	r6
 802f194:	2800      	cmp	r0, #0
 802f196:	dc06      	bgt.n	802f1a6 <__sflush_r+0xfe>
 802f198:	89a3      	ldrh	r3, [r4, #12]
 802f19a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802f19e:	81a3      	strh	r3, [r4, #12]
 802f1a0:	f04f 30ff 	mov.w	r0, #4294967295
 802f1a4:	e78e      	b.n	802f0c4 <__sflush_r+0x1c>
 802f1a6:	4407      	add	r7, r0
 802f1a8:	eba8 0800 	sub.w	r8, r8, r0
 802f1ac:	e7e9      	b.n	802f182 <__sflush_r+0xda>
 802f1ae:	bf00      	nop
 802f1b0:	20400001 	.word	0x20400001

0802f1b4 <_fflush_r>:
 802f1b4:	b538      	push	{r3, r4, r5, lr}
 802f1b6:	690b      	ldr	r3, [r1, #16]
 802f1b8:	4605      	mov	r5, r0
 802f1ba:	460c      	mov	r4, r1
 802f1bc:	b1db      	cbz	r3, 802f1f6 <_fflush_r+0x42>
 802f1be:	b118      	cbz	r0, 802f1c8 <_fflush_r+0x14>
 802f1c0:	6983      	ldr	r3, [r0, #24]
 802f1c2:	b90b      	cbnz	r3, 802f1c8 <_fflush_r+0x14>
 802f1c4:	f000 f860 	bl	802f288 <__sinit>
 802f1c8:	4b0c      	ldr	r3, [pc, #48]	; (802f1fc <_fflush_r+0x48>)
 802f1ca:	429c      	cmp	r4, r3
 802f1cc:	d109      	bne.n	802f1e2 <_fflush_r+0x2e>
 802f1ce:	686c      	ldr	r4, [r5, #4]
 802f1d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802f1d4:	b17b      	cbz	r3, 802f1f6 <_fflush_r+0x42>
 802f1d6:	4621      	mov	r1, r4
 802f1d8:	4628      	mov	r0, r5
 802f1da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802f1de:	f7ff bf63 	b.w	802f0a8 <__sflush_r>
 802f1e2:	4b07      	ldr	r3, [pc, #28]	; (802f200 <_fflush_r+0x4c>)
 802f1e4:	429c      	cmp	r4, r3
 802f1e6:	d101      	bne.n	802f1ec <_fflush_r+0x38>
 802f1e8:	68ac      	ldr	r4, [r5, #8]
 802f1ea:	e7f1      	b.n	802f1d0 <_fflush_r+0x1c>
 802f1ec:	4b05      	ldr	r3, [pc, #20]	; (802f204 <_fflush_r+0x50>)
 802f1ee:	429c      	cmp	r4, r3
 802f1f0:	bf08      	it	eq
 802f1f2:	68ec      	ldreq	r4, [r5, #12]
 802f1f4:	e7ec      	b.n	802f1d0 <_fflush_r+0x1c>
 802f1f6:	2000      	movs	r0, #0
 802f1f8:	bd38      	pop	{r3, r4, r5, pc}
 802f1fa:	bf00      	nop
 802f1fc:	0803568c 	.word	0x0803568c
 802f200:	080356ac 	.word	0x080356ac
 802f204:	0803566c 	.word	0x0803566c

0802f208 <std>:
 802f208:	2300      	movs	r3, #0
 802f20a:	b510      	push	{r4, lr}
 802f20c:	4604      	mov	r4, r0
 802f20e:	e9c0 3300 	strd	r3, r3, [r0]
 802f212:	6083      	str	r3, [r0, #8]
 802f214:	8181      	strh	r1, [r0, #12]
 802f216:	6643      	str	r3, [r0, #100]	; 0x64
 802f218:	81c2      	strh	r2, [r0, #14]
 802f21a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802f21e:	6183      	str	r3, [r0, #24]
 802f220:	4619      	mov	r1, r3
 802f222:	2208      	movs	r2, #8
 802f224:	305c      	adds	r0, #92	; 0x5c
 802f226:	f7ff f98f 	bl	802e548 <memset>
 802f22a:	4b05      	ldr	r3, [pc, #20]	; (802f240 <std+0x38>)
 802f22c:	6263      	str	r3, [r4, #36]	; 0x24
 802f22e:	4b05      	ldr	r3, [pc, #20]	; (802f244 <std+0x3c>)
 802f230:	62a3      	str	r3, [r4, #40]	; 0x28
 802f232:	4b05      	ldr	r3, [pc, #20]	; (802f248 <std+0x40>)
 802f234:	62e3      	str	r3, [r4, #44]	; 0x2c
 802f236:	4b05      	ldr	r3, [pc, #20]	; (802f24c <std+0x44>)
 802f238:	6224      	str	r4, [r4, #32]
 802f23a:	6323      	str	r3, [r4, #48]	; 0x30
 802f23c:	bd10      	pop	{r4, pc}
 802f23e:	bf00      	nop
 802f240:	0802f78d 	.word	0x0802f78d
 802f244:	0802f7af 	.word	0x0802f7af
 802f248:	0802f7e7 	.word	0x0802f7e7
 802f24c:	0802f80b 	.word	0x0802f80b

0802f250 <_cleanup_r>:
 802f250:	4901      	ldr	r1, [pc, #4]	; (802f258 <_cleanup_r+0x8>)
 802f252:	f000 b885 	b.w	802f360 <_fwalk_reent>
 802f256:	bf00      	nop
 802f258:	0802f1b5 	.word	0x0802f1b5

0802f25c <__sfmoreglue>:
 802f25c:	b570      	push	{r4, r5, r6, lr}
 802f25e:	1e4a      	subs	r2, r1, #1
 802f260:	2568      	movs	r5, #104	; 0x68
 802f262:	4355      	muls	r5, r2
 802f264:	460e      	mov	r6, r1
 802f266:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802f26a:	f7ff f9c3 	bl	802e5f4 <_malloc_r>
 802f26e:	4604      	mov	r4, r0
 802f270:	b140      	cbz	r0, 802f284 <__sfmoreglue+0x28>
 802f272:	2100      	movs	r1, #0
 802f274:	e9c0 1600 	strd	r1, r6, [r0]
 802f278:	300c      	adds	r0, #12
 802f27a:	60a0      	str	r0, [r4, #8]
 802f27c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802f280:	f7ff f962 	bl	802e548 <memset>
 802f284:	4620      	mov	r0, r4
 802f286:	bd70      	pop	{r4, r5, r6, pc}

0802f288 <__sinit>:
 802f288:	6983      	ldr	r3, [r0, #24]
 802f28a:	b510      	push	{r4, lr}
 802f28c:	4604      	mov	r4, r0
 802f28e:	bb33      	cbnz	r3, 802f2de <__sinit+0x56>
 802f290:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 802f294:	6503      	str	r3, [r0, #80]	; 0x50
 802f296:	4b12      	ldr	r3, [pc, #72]	; (802f2e0 <__sinit+0x58>)
 802f298:	4a12      	ldr	r2, [pc, #72]	; (802f2e4 <__sinit+0x5c>)
 802f29a:	681b      	ldr	r3, [r3, #0]
 802f29c:	6282      	str	r2, [r0, #40]	; 0x28
 802f29e:	4298      	cmp	r0, r3
 802f2a0:	bf04      	itt	eq
 802f2a2:	2301      	moveq	r3, #1
 802f2a4:	6183      	streq	r3, [r0, #24]
 802f2a6:	f000 f81f 	bl	802f2e8 <__sfp>
 802f2aa:	6060      	str	r0, [r4, #4]
 802f2ac:	4620      	mov	r0, r4
 802f2ae:	f000 f81b 	bl	802f2e8 <__sfp>
 802f2b2:	60a0      	str	r0, [r4, #8]
 802f2b4:	4620      	mov	r0, r4
 802f2b6:	f000 f817 	bl	802f2e8 <__sfp>
 802f2ba:	2200      	movs	r2, #0
 802f2bc:	60e0      	str	r0, [r4, #12]
 802f2be:	2104      	movs	r1, #4
 802f2c0:	6860      	ldr	r0, [r4, #4]
 802f2c2:	f7ff ffa1 	bl	802f208 <std>
 802f2c6:	2201      	movs	r2, #1
 802f2c8:	2109      	movs	r1, #9
 802f2ca:	68a0      	ldr	r0, [r4, #8]
 802f2cc:	f7ff ff9c 	bl	802f208 <std>
 802f2d0:	2202      	movs	r2, #2
 802f2d2:	2112      	movs	r1, #18
 802f2d4:	68e0      	ldr	r0, [r4, #12]
 802f2d6:	f7ff ff97 	bl	802f208 <std>
 802f2da:	2301      	movs	r3, #1
 802f2dc:	61a3      	str	r3, [r4, #24]
 802f2de:	bd10      	pop	{r4, pc}
 802f2e0:	08035630 	.word	0x08035630
 802f2e4:	0802f251 	.word	0x0802f251

0802f2e8 <__sfp>:
 802f2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802f2ea:	4b1b      	ldr	r3, [pc, #108]	; (802f358 <__sfp+0x70>)
 802f2ec:	681e      	ldr	r6, [r3, #0]
 802f2ee:	69b3      	ldr	r3, [r6, #24]
 802f2f0:	4607      	mov	r7, r0
 802f2f2:	b913      	cbnz	r3, 802f2fa <__sfp+0x12>
 802f2f4:	4630      	mov	r0, r6
 802f2f6:	f7ff ffc7 	bl	802f288 <__sinit>
 802f2fa:	3648      	adds	r6, #72	; 0x48
 802f2fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802f300:	3b01      	subs	r3, #1
 802f302:	d503      	bpl.n	802f30c <__sfp+0x24>
 802f304:	6833      	ldr	r3, [r6, #0]
 802f306:	b133      	cbz	r3, 802f316 <__sfp+0x2e>
 802f308:	6836      	ldr	r6, [r6, #0]
 802f30a:	e7f7      	b.n	802f2fc <__sfp+0x14>
 802f30c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802f310:	b16d      	cbz	r5, 802f32e <__sfp+0x46>
 802f312:	3468      	adds	r4, #104	; 0x68
 802f314:	e7f4      	b.n	802f300 <__sfp+0x18>
 802f316:	2104      	movs	r1, #4
 802f318:	4638      	mov	r0, r7
 802f31a:	f7ff ff9f 	bl	802f25c <__sfmoreglue>
 802f31e:	6030      	str	r0, [r6, #0]
 802f320:	2800      	cmp	r0, #0
 802f322:	d1f1      	bne.n	802f308 <__sfp+0x20>
 802f324:	230c      	movs	r3, #12
 802f326:	603b      	str	r3, [r7, #0]
 802f328:	4604      	mov	r4, r0
 802f32a:	4620      	mov	r0, r4
 802f32c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802f32e:	4b0b      	ldr	r3, [pc, #44]	; (802f35c <__sfp+0x74>)
 802f330:	6665      	str	r5, [r4, #100]	; 0x64
 802f332:	e9c4 5500 	strd	r5, r5, [r4]
 802f336:	60a5      	str	r5, [r4, #8]
 802f338:	e9c4 3503 	strd	r3, r5, [r4, #12]
 802f33c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 802f340:	2208      	movs	r2, #8
 802f342:	4629      	mov	r1, r5
 802f344:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802f348:	f7ff f8fe 	bl	802e548 <memset>
 802f34c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802f350:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802f354:	e7e9      	b.n	802f32a <__sfp+0x42>
 802f356:	bf00      	nop
 802f358:	08035630 	.word	0x08035630
 802f35c:	ffff0001 	.word	0xffff0001

0802f360 <_fwalk_reent>:
 802f360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802f364:	4680      	mov	r8, r0
 802f366:	4689      	mov	r9, r1
 802f368:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802f36c:	2600      	movs	r6, #0
 802f36e:	b914      	cbnz	r4, 802f376 <_fwalk_reent+0x16>
 802f370:	4630      	mov	r0, r6
 802f372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802f376:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 802f37a:	3f01      	subs	r7, #1
 802f37c:	d501      	bpl.n	802f382 <_fwalk_reent+0x22>
 802f37e:	6824      	ldr	r4, [r4, #0]
 802f380:	e7f5      	b.n	802f36e <_fwalk_reent+0xe>
 802f382:	89ab      	ldrh	r3, [r5, #12]
 802f384:	2b01      	cmp	r3, #1
 802f386:	d907      	bls.n	802f398 <_fwalk_reent+0x38>
 802f388:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802f38c:	3301      	adds	r3, #1
 802f38e:	d003      	beq.n	802f398 <_fwalk_reent+0x38>
 802f390:	4629      	mov	r1, r5
 802f392:	4640      	mov	r0, r8
 802f394:	47c8      	blx	r9
 802f396:	4306      	orrs	r6, r0
 802f398:	3568      	adds	r5, #104	; 0x68
 802f39a:	e7ee      	b.n	802f37a <_fwalk_reent+0x1a>

0802f39c <__swhatbuf_r>:
 802f39c:	b570      	push	{r4, r5, r6, lr}
 802f39e:	460e      	mov	r6, r1
 802f3a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802f3a4:	2900      	cmp	r1, #0
 802f3a6:	b096      	sub	sp, #88	; 0x58
 802f3a8:	4614      	mov	r4, r2
 802f3aa:	461d      	mov	r5, r3
 802f3ac:	da07      	bge.n	802f3be <__swhatbuf_r+0x22>
 802f3ae:	2300      	movs	r3, #0
 802f3b0:	602b      	str	r3, [r5, #0]
 802f3b2:	89b3      	ldrh	r3, [r6, #12]
 802f3b4:	061a      	lsls	r2, r3, #24
 802f3b6:	d410      	bmi.n	802f3da <__swhatbuf_r+0x3e>
 802f3b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802f3bc:	e00e      	b.n	802f3dc <__swhatbuf_r+0x40>
 802f3be:	466a      	mov	r2, sp
 802f3c0:	f000 fa38 	bl	802f834 <_fstat_r>
 802f3c4:	2800      	cmp	r0, #0
 802f3c6:	dbf2      	blt.n	802f3ae <__swhatbuf_r+0x12>
 802f3c8:	9a01      	ldr	r2, [sp, #4]
 802f3ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802f3ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802f3d2:	425a      	negs	r2, r3
 802f3d4:	415a      	adcs	r2, r3
 802f3d6:	602a      	str	r2, [r5, #0]
 802f3d8:	e7ee      	b.n	802f3b8 <__swhatbuf_r+0x1c>
 802f3da:	2340      	movs	r3, #64	; 0x40
 802f3dc:	2000      	movs	r0, #0
 802f3de:	6023      	str	r3, [r4, #0]
 802f3e0:	b016      	add	sp, #88	; 0x58
 802f3e2:	bd70      	pop	{r4, r5, r6, pc}

0802f3e4 <__smakebuf_r>:
 802f3e4:	898b      	ldrh	r3, [r1, #12]
 802f3e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802f3e8:	079d      	lsls	r5, r3, #30
 802f3ea:	4606      	mov	r6, r0
 802f3ec:	460c      	mov	r4, r1
 802f3ee:	d507      	bpl.n	802f400 <__smakebuf_r+0x1c>
 802f3f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802f3f4:	6023      	str	r3, [r4, #0]
 802f3f6:	6123      	str	r3, [r4, #16]
 802f3f8:	2301      	movs	r3, #1
 802f3fa:	6163      	str	r3, [r4, #20]
 802f3fc:	b002      	add	sp, #8
 802f3fe:	bd70      	pop	{r4, r5, r6, pc}
 802f400:	ab01      	add	r3, sp, #4
 802f402:	466a      	mov	r2, sp
 802f404:	f7ff ffca 	bl	802f39c <__swhatbuf_r>
 802f408:	9900      	ldr	r1, [sp, #0]
 802f40a:	4605      	mov	r5, r0
 802f40c:	4630      	mov	r0, r6
 802f40e:	f7ff f8f1 	bl	802e5f4 <_malloc_r>
 802f412:	b948      	cbnz	r0, 802f428 <__smakebuf_r+0x44>
 802f414:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802f418:	059a      	lsls	r2, r3, #22
 802f41a:	d4ef      	bmi.n	802f3fc <__smakebuf_r+0x18>
 802f41c:	f023 0303 	bic.w	r3, r3, #3
 802f420:	f043 0302 	orr.w	r3, r3, #2
 802f424:	81a3      	strh	r3, [r4, #12]
 802f426:	e7e3      	b.n	802f3f0 <__smakebuf_r+0xc>
 802f428:	4b0d      	ldr	r3, [pc, #52]	; (802f460 <__smakebuf_r+0x7c>)
 802f42a:	62b3      	str	r3, [r6, #40]	; 0x28
 802f42c:	89a3      	ldrh	r3, [r4, #12]
 802f42e:	6020      	str	r0, [r4, #0]
 802f430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802f434:	81a3      	strh	r3, [r4, #12]
 802f436:	9b00      	ldr	r3, [sp, #0]
 802f438:	6163      	str	r3, [r4, #20]
 802f43a:	9b01      	ldr	r3, [sp, #4]
 802f43c:	6120      	str	r0, [r4, #16]
 802f43e:	b15b      	cbz	r3, 802f458 <__smakebuf_r+0x74>
 802f440:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802f444:	4630      	mov	r0, r6
 802f446:	f000 fa07 	bl	802f858 <_isatty_r>
 802f44a:	b128      	cbz	r0, 802f458 <__smakebuf_r+0x74>
 802f44c:	89a3      	ldrh	r3, [r4, #12]
 802f44e:	f023 0303 	bic.w	r3, r3, #3
 802f452:	f043 0301 	orr.w	r3, r3, #1
 802f456:	81a3      	strh	r3, [r4, #12]
 802f458:	89a3      	ldrh	r3, [r4, #12]
 802f45a:	431d      	orrs	r5, r3
 802f45c:	81a5      	strh	r5, [r4, #12]
 802f45e:	e7cd      	b.n	802f3fc <__smakebuf_r+0x18>
 802f460:	0802f251 	.word	0x0802f251

0802f464 <memmove>:
 802f464:	4288      	cmp	r0, r1
 802f466:	b510      	push	{r4, lr}
 802f468:	eb01 0302 	add.w	r3, r1, r2
 802f46c:	d807      	bhi.n	802f47e <memmove+0x1a>
 802f46e:	1e42      	subs	r2, r0, #1
 802f470:	4299      	cmp	r1, r3
 802f472:	d00a      	beq.n	802f48a <memmove+0x26>
 802f474:	f811 4b01 	ldrb.w	r4, [r1], #1
 802f478:	f802 4f01 	strb.w	r4, [r2, #1]!
 802f47c:	e7f8      	b.n	802f470 <memmove+0xc>
 802f47e:	4283      	cmp	r3, r0
 802f480:	d9f5      	bls.n	802f46e <memmove+0xa>
 802f482:	1881      	adds	r1, r0, r2
 802f484:	1ad2      	subs	r2, r2, r3
 802f486:	42d3      	cmn	r3, r2
 802f488:	d100      	bne.n	802f48c <memmove+0x28>
 802f48a:	bd10      	pop	{r4, pc}
 802f48c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802f490:	f801 4d01 	strb.w	r4, [r1, #-1]!
 802f494:	e7f7      	b.n	802f486 <memmove+0x22>

0802f496 <__malloc_lock>:
 802f496:	4770      	bx	lr

0802f498 <__malloc_unlock>:
 802f498:	4770      	bx	lr

0802f49a <_realloc_r>:
 802f49a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802f49c:	4607      	mov	r7, r0
 802f49e:	4614      	mov	r4, r2
 802f4a0:	460e      	mov	r6, r1
 802f4a2:	b921      	cbnz	r1, 802f4ae <_realloc_r+0x14>
 802f4a4:	4611      	mov	r1, r2
 802f4a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802f4aa:	f7ff b8a3 	b.w	802e5f4 <_malloc_r>
 802f4ae:	b922      	cbnz	r2, 802f4ba <_realloc_r+0x20>
 802f4b0:	f7ff f852 	bl	802e558 <_free_r>
 802f4b4:	4625      	mov	r5, r4
 802f4b6:	4628      	mov	r0, r5
 802f4b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802f4ba:	f000 f9ef 	bl	802f89c <_malloc_usable_size_r>
 802f4be:	42a0      	cmp	r0, r4
 802f4c0:	d20f      	bcs.n	802f4e2 <_realloc_r+0x48>
 802f4c2:	4621      	mov	r1, r4
 802f4c4:	4638      	mov	r0, r7
 802f4c6:	f7ff f895 	bl	802e5f4 <_malloc_r>
 802f4ca:	4605      	mov	r5, r0
 802f4cc:	2800      	cmp	r0, #0
 802f4ce:	d0f2      	beq.n	802f4b6 <_realloc_r+0x1c>
 802f4d0:	4631      	mov	r1, r6
 802f4d2:	4622      	mov	r2, r4
 802f4d4:	f7ff f82d 	bl	802e532 <memcpy>
 802f4d8:	4631      	mov	r1, r6
 802f4da:	4638      	mov	r0, r7
 802f4dc:	f7ff f83c 	bl	802e558 <_free_r>
 802f4e0:	e7e9      	b.n	802f4b6 <_realloc_r+0x1c>
 802f4e2:	4635      	mov	r5, r6
 802f4e4:	e7e7      	b.n	802f4b6 <_realloc_r+0x1c>

0802f4e6 <__ssputs_r>:
 802f4e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802f4ea:	688e      	ldr	r6, [r1, #8]
 802f4ec:	429e      	cmp	r6, r3
 802f4ee:	4682      	mov	sl, r0
 802f4f0:	460c      	mov	r4, r1
 802f4f2:	4690      	mov	r8, r2
 802f4f4:	4699      	mov	r9, r3
 802f4f6:	d837      	bhi.n	802f568 <__ssputs_r+0x82>
 802f4f8:	898a      	ldrh	r2, [r1, #12]
 802f4fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802f4fe:	d031      	beq.n	802f564 <__ssputs_r+0x7e>
 802f500:	6825      	ldr	r5, [r4, #0]
 802f502:	6909      	ldr	r1, [r1, #16]
 802f504:	1a6f      	subs	r7, r5, r1
 802f506:	6965      	ldr	r5, [r4, #20]
 802f508:	2302      	movs	r3, #2
 802f50a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802f50e:	fb95 f5f3 	sdiv	r5, r5, r3
 802f512:	f109 0301 	add.w	r3, r9, #1
 802f516:	443b      	add	r3, r7
 802f518:	429d      	cmp	r5, r3
 802f51a:	bf38      	it	cc
 802f51c:	461d      	movcc	r5, r3
 802f51e:	0553      	lsls	r3, r2, #21
 802f520:	d530      	bpl.n	802f584 <__ssputs_r+0x9e>
 802f522:	4629      	mov	r1, r5
 802f524:	f7ff f866 	bl	802e5f4 <_malloc_r>
 802f528:	4606      	mov	r6, r0
 802f52a:	b950      	cbnz	r0, 802f542 <__ssputs_r+0x5c>
 802f52c:	230c      	movs	r3, #12
 802f52e:	f8ca 3000 	str.w	r3, [sl]
 802f532:	89a3      	ldrh	r3, [r4, #12]
 802f534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802f538:	81a3      	strh	r3, [r4, #12]
 802f53a:	f04f 30ff 	mov.w	r0, #4294967295
 802f53e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802f542:	463a      	mov	r2, r7
 802f544:	6921      	ldr	r1, [r4, #16]
 802f546:	f7fe fff4 	bl	802e532 <memcpy>
 802f54a:	89a3      	ldrh	r3, [r4, #12]
 802f54c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802f550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802f554:	81a3      	strh	r3, [r4, #12]
 802f556:	6126      	str	r6, [r4, #16]
 802f558:	6165      	str	r5, [r4, #20]
 802f55a:	443e      	add	r6, r7
 802f55c:	1bed      	subs	r5, r5, r7
 802f55e:	6026      	str	r6, [r4, #0]
 802f560:	60a5      	str	r5, [r4, #8]
 802f562:	464e      	mov	r6, r9
 802f564:	454e      	cmp	r6, r9
 802f566:	d900      	bls.n	802f56a <__ssputs_r+0x84>
 802f568:	464e      	mov	r6, r9
 802f56a:	4632      	mov	r2, r6
 802f56c:	4641      	mov	r1, r8
 802f56e:	6820      	ldr	r0, [r4, #0]
 802f570:	f7ff ff78 	bl	802f464 <memmove>
 802f574:	68a3      	ldr	r3, [r4, #8]
 802f576:	1b9b      	subs	r3, r3, r6
 802f578:	60a3      	str	r3, [r4, #8]
 802f57a:	6823      	ldr	r3, [r4, #0]
 802f57c:	441e      	add	r6, r3
 802f57e:	6026      	str	r6, [r4, #0]
 802f580:	2000      	movs	r0, #0
 802f582:	e7dc      	b.n	802f53e <__ssputs_r+0x58>
 802f584:	462a      	mov	r2, r5
 802f586:	f7ff ff88 	bl	802f49a <_realloc_r>
 802f58a:	4606      	mov	r6, r0
 802f58c:	2800      	cmp	r0, #0
 802f58e:	d1e2      	bne.n	802f556 <__ssputs_r+0x70>
 802f590:	6921      	ldr	r1, [r4, #16]
 802f592:	4650      	mov	r0, sl
 802f594:	f7fe ffe0 	bl	802e558 <_free_r>
 802f598:	e7c8      	b.n	802f52c <__ssputs_r+0x46>
	...

0802f59c <_svfiprintf_r>:
 802f59c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f5a0:	461d      	mov	r5, r3
 802f5a2:	898b      	ldrh	r3, [r1, #12]
 802f5a4:	061f      	lsls	r7, r3, #24
 802f5a6:	b09d      	sub	sp, #116	; 0x74
 802f5a8:	4680      	mov	r8, r0
 802f5aa:	460c      	mov	r4, r1
 802f5ac:	4616      	mov	r6, r2
 802f5ae:	d50f      	bpl.n	802f5d0 <_svfiprintf_r+0x34>
 802f5b0:	690b      	ldr	r3, [r1, #16]
 802f5b2:	b96b      	cbnz	r3, 802f5d0 <_svfiprintf_r+0x34>
 802f5b4:	2140      	movs	r1, #64	; 0x40
 802f5b6:	f7ff f81d 	bl	802e5f4 <_malloc_r>
 802f5ba:	6020      	str	r0, [r4, #0]
 802f5bc:	6120      	str	r0, [r4, #16]
 802f5be:	b928      	cbnz	r0, 802f5cc <_svfiprintf_r+0x30>
 802f5c0:	230c      	movs	r3, #12
 802f5c2:	f8c8 3000 	str.w	r3, [r8]
 802f5c6:	f04f 30ff 	mov.w	r0, #4294967295
 802f5ca:	e0c8      	b.n	802f75e <_svfiprintf_r+0x1c2>
 802f5cc:	2340      	movs	r3, #64	; 0x40
 802f5ce:	6163      	str	r3, [r4, #20]
 802f5d0:	2300      	movs	r3, #0
 802f5d2:	9309      	str	r3, [sp, #36]	; 0x24
 802f5d4:	2320      	movs	r3, #32
 802f5d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802f5da:	2330      	movs	r3, #48	; 0x30
 802f5dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802f5e0:	9503      	str	r5, [sp, #12]
 802f5e2:	f04f 0b01 	mov.w	fp, #1
 802f5e6:	4637      	mov	r7, r6
 802f5e8:	463d      	mov	r5, r7
 802f5ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 802f5ee:	b10b      	cbz	r3, 802f5f4 <_svfiprintf_r+0x58>
 802f5f0:	2b25      	cmp	r3, #37	; 0x25
 802f5f2:	d13e      	bne.n	802f672 <_svfiprintf_r+0xd6>
 802f5f4:	ebb7 0a06 	subs.w	sl, r7, r6
 802f5f8:	d00b      	beq.n	802f612 <_svfiprintf_r+0x76>
 802f5fa:	4653      	mov	r3, sl
 802f5fc:	4632      	mov	r2, r6
 802f5fe:	4621      	mov	r1, r4
 802f600:	4640      	mov	r0, r8
 802f602:	f7ff ff70 	bl	802f4e6 <__ssputs_r>
 802f606:	3001      	adds	r0, #1
 802f608:	f000 80a4 	beq.w	802f754 <_svfiprintf_r+0x1b8>
 802f60c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802f60e:	4453      	add	r3, sl
 802f610:	9309      	str	r3, [sp, #36]	; 0x24
 802f612:	783b      	ldrb	r3, [r7, #0]
 802f614:	2b00      	cmp	r3, #0
 802f616:	f000 809d 	beq.w	802f754 <_svfiprintf_r+0x1b8>
 802f61a:	2300      	movs	r3, #0
 802f61c:	f04f 32ff 	mov.w	r2, #4294967295
 802f620:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802f624:	9304      	str	r3, [sp, #16]
 802f626:	9307      	str	r3, [sp, #28]
 802f628:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802f62c:	931a      	str	r3, [sp, #104]	; 0x68
 802f62e:	462f      	mov	r7, r5
 802f630:	2205      	movs	r2, #5
 802f632:	f817 1b01 	ldrb.w	r1, [r7], #1
 802f636:	4850      	ldr	r0, [pc, #320]	; (802f778 <_svfiprintf_r+0x1dc>)
 802f638:	f7d7 fb5a 	bl	8006cf0 <memchr>
 802f63c:	9b04      	ldr	r3, [sp, #16]
 802f63e:	b9d0      	cbnz	r0, 802f676 <_svfiprintf_r+0xda>
 802f640:	06d9      	lsls	r1, r3, #27
 802f642:	bf44      	itt	mi
 802f644:	2220      	movmi	r2, #32
 802f646:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802f64a:	071a      	lsls	r2, r3, #28
 802f64c:	bf44      	itt	mi
 802f64e:	222b      	movmi	r2, #43	; 0x2b
 802f650:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802f654:	782a      	ldrb	r2, [r5, #0]
 802f656:	2a2a      	cmp	r2, #42	; 0x2a
 802f658:	d015      	beq.n	802f686 <_svfiprintf_r+0xea>
 802f65a:	9a07      	ldr	r2, [sp, #28]
 802f65c:	462f      	mov	r7, r5
 802f65e:	2000      	movs	r0, #0
 802f660:	250a      	movs	r5, #10
 802f662:	4639      	mov	r1, r7
 802f664:	f811 3b01 	ldrb.w	r3, [r1], #1
 802f668:	3b30      	subs	r3, #48	; 0x30
 802f66a:	2b09      	cmp	r3, #9
 802f66c:	d94d      	bls.n	802f70a <_svfiprintf_r+0x16e>
 802f66e:	b1b8      	cbz	r0, 802f6a0 <_svfiprintf_r+0x104>
 802f670:	e00f      	b.n	802f692 <_svfiprintf_r+0xf6>
 802f672:	462f      	mov	r7, r5
 802f674:	e7b8      	b.n	802f5e8 <_svfiprintf_r+0x4c>
 802f676:	4a40      	ldr	r2, [pc, #256]	; (802f778 <_svfiprintf_r+0x1dc>)
 802f678:	1a80      	subs	r0, r0, r2
 802f67a:	fa0b f000 	lsl.w	r0, fp, r0
 802f67e:	4318      	orrs	r0, r3
 802f680:	9004      	str	r0, [sp, #16]
 802f682:	463d      	mov	r5, r7
 802f684:	e7d3      	b.n	802f62e <_svfiprintf_r+0x92>
 802f686:	9a03      	ldr	r2, [sp, #12]
 802f688:	1d11      	adds	r1, r2, #4
 802f68a:	6812      	ldr	r2, [r2, #0]
 802f68c:	9103      	str	r1, [sp, #12]
 802f68e:	2a00      	cmp	r2, #0
 802f690:	db01      	blt.n	802f696 <_svfiprintf_r+0xfa>
 802f692:	9207      	str	r2, [sp, #28]
 802f694:	e004      	b.n	802f6a0 <_svfiprintf_r+0x104>
 802f696:	4252      	negs	r2, r2
 802f698:	f043 0302 	orr.w	r3, r3, #2
 802f69c:	9207      	str	r2, [sp, #28]
 802f69e:	9304      	str	r3, [sp, #16]
 802f6a0:	783b      	ldrb	r3, [r7, #0]
 802f6a2:	2b2e      	cmp	r3, #46	; 0x2e
 802f6a4:	d10c      	bne.n	802f6c0 <_svfiprintf_r+0x124>
 802f6a6:	787b      	ldrb	r3, [r7, #1]
 802f6a8:	2b2a      	cmp	r3, #42	; 0x2a
 802f6aa:	d133      	bne.n	802f714 <_svfiprintf_r+0x178>
 802f6ac:	9b03      	ldr	r3, [sp, #12]
 802f6ae:	1d1a      	adds	r2, r3, #4
 802f6b0:	681b      	ldr	r3, [r3, #0]
 802f6b2:	9203      	str	r2, [sp, #12]
 802f6b4:	2b00      	cmp	r3, #0
 802f6b6:	bfb8      	it	lt
 802f6b8:	f04f 33ff 	movlt.w	r3, #4294967295
 802f6bc:	3702      	adds	r7, #2
 802f6be:	9305      	str	r3, [sp, #20]
 802f6c0:	4d2e      	ldr	r5, [pc, #184]	; (802f77c <_svfiprintf_r+0x1e0>)
 802f6c2:	7839      	ldrb	r1, [r7, #0]
 802f6c4:	2203      	movs	r2, #3
 802f6c6:	4628      	mov	r0, r5
 802f6c8:	f7d7 fb12 	bl	8006cf0 <memchr>
 802f6cc:	b138      	cbz	r0, 802f6de <_svfiprintf_r+0x142>
 802f6ce:	2340      	movs	r3, #64	; 0x40
 802f6d0:	1b40      	subs	r0, r0, r5
 802f6d2:	fa03 f000 	lsl.w	r0, r3, r0
 802f6d6:	9b04      	ldr	r3, [sp, #16]
 802f6d8:	4303      	orrs	r3, r0
 802f6da:	3701      	adds	r7, #1
 802f6dc:	9304      	str	r3, [sp, #16]
 802f6de:	7839      	ldrb	r1, [r7, #0]
 802f6e0:	4827      	ldr	r0, [pc, #156]	; (802f780 <_svfiprintf_r+0x1e4>)
 802f6e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802f6e6:	2206      	movs	r2, #6
 802f6e8:	1c7e      	adds	r6, r7, #1
 802f6ea:	f7d7 fb01 	bl	8006cf0 <memchr>
 802f6ee:	2800      	cmp	r0, #0
 802f6f0:	d038      	beq.n	802f764 <_svfiprintf_r+0x1c8>
 802f6f2:	4b24      	ldr	r3, [pc, #144]	; (802f784 <_svfiprintf_r+0x1e8>)
 802f6f4:	bb13      	cbnz	r3, 802f73c <_svfiprintf_r+0x1a0>
 802f6f6:	9b03      	ldr	r3, [sp, #12]
 802f6f8:	3307      	adds	r3, #7
 802f6fa:	f023 0307 	bic.w	r3, r3, #7
 802f6fe:	3308      	adds	r3, #8
 802f700:	9303      	str	r3, [sp, #12]
 802f702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802f704:	444b      	add	r3, r9
 802f706:	9309      	str	r3, [sp, #36]	; 0x24
 802f708:	e76d      	b.n	802f5e6 <_svfiprintf_r+0x4a>
 802f70a:	fb05 3202 	mla	r2, r5, r2, r3
 802f70e:	2001      	movs	r0, #1
 802f710:	460f      	mov	r7, r1
 802f712:	e7a6      	b.n	802f662 <_svfiprintf_r+0xc6>
 802f714:	2300      	movs	r3, #0
 802f716:	3701      	adds	r7, #1
 802f718:	9305      	str	r3, [sp, #20]
 802f71a:	4619      	mov	r1, r3
 802f71c:	250a      	movs	r5, #10
 802f71e:	4638      	mov	r0, r7
 802f720:	f810 2b01 	ldrb.w	r2, [r0], #1
 802f724:	3a30      	subs	r2, #48	; 0x30
 802f726:	2a09      	cmp	r2, #9
 802f728:	d903      	bls.n	802f732 <_svfiprintf_r+0x196>
 802f72a:	2b00      	cmp	r3, #0
 802f72c:	d0c8      	beq.n	802f6c0 <_svfiprintf_r+0x124>
 802f72e:	9105      	str	r1, [sp, #20]
 802f730:	e7c6      	b.n	802f6c0 <_svfiprintf_r+0x124>
 802f732:	fb05 2101 	mla	r1, r5, r1, r2
 802f736:	2301      	movs	r3, #1
 802f738:	4607      	mov	r7, r0
 802f73a:	e7f0      	b.n	802f71e <_svfiprintf_r+0x182>
 802f73c:	ab03      	add	r3, sp, #12
 802f73e:	9300      	str	r3, [sp, #0]
 802f740:	4622      	mov	r2, r4
 802f742:	4b11      	ldr	r3, [pc, #68]	; (802f788 <_svfiprintf_r+0x1ec>)
 802f744:	a904      	add	r1, sp, #16
 802f746:	4640      	mov	r0, r8
 802f748:	f3af 8000 	nop.w
 802f74c:	f1b0 3fff 	cmp.w	r0, #4294967295
 802f750:	4681      	mov	r9, r0
 802f752:	d1d6      	bne.n	802f702 <_svfiprintf_r+0x166>
 802f754:	89a3      	ldrh	r3, [r4, #12]
 802f756:	065b      	lsls	r3, r3, #25
 802f758:	f53f af35 	bmi.w	802f5c6 <_svfiprintf_r+0x2a>
 802f75c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802f75e:	b01d      	add	sp, #116	; 0x74
 802f760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f764:	ab03      	add	r3, sp, #12
 802f766:	9300      	str	r3, [sp, #0]
 802f768:	4622      	mov	r2, r4
 802f76a:	4b07      	ldr	r3, [pc, #28]	; (802f788 <_svfiprintf_r+0x1ec>)
 802f76c:	a904      	add	r1, sp, #16
 802f76e:	4640      	mov	r0, r8
 802f770:	f7ff f950 	bl	802ea14 <_printf_i>
 802f774:	e7ea      	b.n	802f74c <_svfiprintf_r+0x1b0>
 802f776:	bf00      	nop
 802f778:	08035634 	.word	0x08035634
 802f77c:	0803563a 	.word	0x0803563a
 802f780:	0803563e 	.word	0x0803563e
 802f784:	00000000 	.word	0x00000000
 802f788:	0802f4e7 	.word	0x0802f4e7

0802f78c <__sread>:
 802f78c:	b510      	push	{r4, lr}
 802f78e:	460c      	mov	r4, r1
 802f790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802f794:	f000 f88a 	bl	802f8ac <_read_r>
 802f798:	2800      	cmp	r0, #0
 802f79a:	bfab      	itete	ge
 802f79c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802f79e:	89a3      	ldrhlt	r3, [r4, #12]
 802f7a0:	181b      	addge	r3, r3, r0
 802f7a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802f7a6:	bfac      	ite	ge
 802f7a8:	6563      	strge	r3, [r4, #84]	; 0x54
 802f7aa:	81a3      	strhlt	r3, [r4, #12]
 802f7ac:	bd10      	pop	{r4, pc}

0802f7ae <__swrite>:
 802f7ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802f7b2:	461f      	mov	r7, r3
 802f7b4:	898b      	ldrh	r3, [r1, #12]
 802f7b6:	05db      	lsls	r3, r3, #23
 802f7b8:	4605      	mov	r5, r0
 802f7ba:	460c      	mov	r4, r1
 802f7bc:	4616      	mov	r6, r2
 802f7be:	d505      	bpl.n	802f7cc <__swrite+0x1e>
 802f7c0:	2302      	movs	r3, #2
 802f7c2:	2200      	movs	r2, #0
 802f7c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802f7c8:	f000 f856 	bl	802f878 <_lseek_r>
 802f7cc:	89a3      	ldrh	r3, [r4, #12]
 802f7ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802f7d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802f7d6:	81a3      	strh	r3, [r4, #12]
 802f7d8:	4632      	mov	r2, r6
 802f7da:	463b      	mov	r3, r7
 802f7dc:	4628      	mov	r0, r5
 802f7de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802f7e2:	f7ff bb7d 	b.w	802eee0 <_write_r>

0802f7e6 <__sseek>:
 802f7e6:	b510      	push	{r4, lr}
 802f7e8:	460c      	mov	r4, r1
 802f7ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802f7ee:	f000 f843 	bl	802f878 <_lseek_r>
 802f7f2:	1c43      	adds	r3, r0, #1
 802f7f4:	89a3      	ldrh	r3, [r4, #12]
 802f7f6:	bf15      	itete	ne
 802f7f8:	6560      	strne	r0, [r4, #84]	; 0x54
 802f7fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802f7fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802f802:	81a3      	strheq	r3, [r4, #12]
 802f804:	bf18      	it	ne
 802f806:	81a3      	strhne	r3, [r4, #12]
 802f808:	bd10      	pop	{r4, pc}

0802f80a <__sclose>:
 802f80a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802f80e:	f000 b801 	b.w	802f814 <_close_r>
	...

0802f814 <_close_r>:
 802f814:	b538      	push	{r3, r4, r5, lr}
 802f816:	4c06      	ldr	r4, [pc, #24]	; (802f830 <_close_r+0x1c>)
 802f818:	2300      	movs	r3, #0
 802f81a:	4605      	mov	r5, r0
 802f81c:	4608      	mov	r0, r1
 802f81e:	6023      	str	r3, [r4, #0]
 802f820:	f7dc feb7 	bl	800c592 <_close>
 802f824:	1c43      	adds	r3, r0, #1
 802f826:	d102      	bne.n	802f82e <_close_r+0x1a>
 802f828:	6823      	ldr	r3, [r4, #0]
 802f82a:	b103      	cbz	r3, 802f82e <_close_r+0x1a>
 802f82c:	602b      	str	r3, [r5, #0]
 802f82e:	bd38      	pop	{r3, r4, r5, pc}
 802f830:	200130b8 	.word	0x200130b8

0802f834 <_fstat_r>:
 802f834:	b538      	push	{r3, r4, r5, lr}
 802f836:	4c07      	ldr	r4, [pc, #28]	; (802f854 <_fstat_r+0x20>)
 802f838:	2300      	movs	r3, #0
 802f83a:	4605      	mov	r5, r0
 802f83c:	4608      	mov	r0, r1
 802f83e:	4611      	mov	r1, r2
 802f840:	6023      	str	r3, [r4, #0]
 802f842:	f7dc feb2 	bl	800c5aa <_fstat>
 802f846:	1c43      	adds	r3, r0, #1
 802f848:	d102      	bne.n	802f850 <_fstat_r+0x1c>
 802f84a:	6823      	ldr	r3, [r4, #0]
 802f84c:	b103      	cbz	r3, 802f850 <_fstat_r+0x1c>
 802f84e:	602b      	str	r3, [r5, #0]
 802f850:	bd38      	pop	{r3, r4, r5, pc}
 802f852:	bf00      	nop
 802f854:	200130b8 	.word	0x200130b8

0802f858 <_isatty_r>:
 802f858:	b538      	push	{r3, r4, r5, lr}
 802f85a:	4c06      	ldr	r4, [pc, #24]	; (802f874 <_isatty_r+0x1c>)
 802f85c:	2300      	movs	r3, #0
 802f85e:	4605      	mov	r5, r0
 802f860:	4608      	mov	r0, r1
 802f862:	6023      	str	r3, [r4, #0]
 802f864:	f7dc feb1 	bl	800c5ca <_isatty>
 802f868:	1c43      	adds	r3, r0, #1
 802f86a:	d102      	bne.n	802f872 <_isatty_r+0x1a>
 802f86c:	6823      	ldr	r3, [r4, #0]
 802f86e:	b103      	cbz	r3, 802f872 <_isatty_r+0x1a>
 802f870:	602b      	str	r3, [r5, #0]
 802f872:	bd38      	pop	{r3, r4, r5, pc}
 802f874:	200130b8 	.word	0x200130b8

0802f878 <_lseek_r>:
 802f878:	b538      	push	{r3, r4, r5, lr}
 802f87a:	4c07      	ldr	r4, [pc, #28]	; (802f898 <_lseek_r+0x20>)
 802f87c:	4605      	mov	r5, r0
 802f87e:	4608      	mov	r0, r1
 802f880:	4611      	mov	r1, r2
 802f882:	2200      	movs	r2, #0
 802f884:	6022      	str	r2, [r4, #0]
 802f886:	461a      	mov	r2, r3
 802f888:	f7dc feaa 	bl	800c5e0 <_lseek>
 802f88c:	1c43      	adds	r3, r0, #1
 802f88e:	d102      	bne.n	802f896 <_lseek_r+0x1e>
 802f890:	6823      	ldr	r3, [r4, #0]
 802f892:	b103      	cbz	r3, 802f896 <_lseek_r+0x1e>
 802f894:	602b      	str	r3, [r5, #0]
 802f896:	bd38      	pop	{r3, r4, r5, pc}
 802f898:	200130b8 	.word	0x200130b8

0802f89c <_malloc_usable_size_r>:
 802f89c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802f8a0:	1f18      	subs	r0, r3, #4
 802f8a2:	2b00      	cmp	r3, #0
 802f8a4:	bfbc      	itt	lt
 802f8a6:	580b      	ldrlt	r3, [r1, r0]
 802f8a8:	18c0      	addlt	r0, r0, r3
 802f8aa:	4770      	bx	lr

0802f8ac <_read_r>:
 802f8ac:	b538      	push	{r3, r4, r5, lr}
 802f8ae:	4c07      	ldr	r4, [pc, #28]	; (802f8cc <_read_r+0x20>)
 802f8b0:	4605      	mov	r5, r0
 802f8b2:	4608      	mov	r0, r1
 802f8b4:	4611      	mov	r1, r2
 802f8b6:	2200      	movs	r2, #0
 802f8b8:	6022      	str	r2, [r4, #0]
 802f8ba:	461a      	mov	r2, r3
 802f8bc:	f7dc fe30 	bl	800c520 <_read>
 802f8c0:	1c43      	adds	r3, r0, #1
 802f8c2:	d102      	bne.n	802f8ca <_read_r+0x1e>
 802f8c4:	6823      	ldr	r3, [r4, #0]
 802f8c6:	b103      	cbz	r3, 802f8ca <_read_r+0x1e>
 802f8c8:	602b      	str	r3, [r5, #0]
 802f8ca:	bd38      	pop	{r3, r4, r5, pc}
 802f8cc:	200130b8 	.word	0x200130b8

0802f8d0 <_init>:
 802f8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802f8d2:	bf00      	nop
 802f8d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802f8d6:	bc08      	pop	{r3}
 802f8d8:	469e      	mov	lr, r3
 802f8da:	4770      	bx	lr

0802f8dc <_fini>:
 802f8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802f8de:	bf00      	nop
 802f8e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802f8e2:	bc08      	pop	{r3}
 802f8e4:	469e      	mov	lr, r3
 802f8e6:	4770      	bx	lr
