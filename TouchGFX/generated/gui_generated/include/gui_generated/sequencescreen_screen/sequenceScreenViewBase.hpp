/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef SEQUENCESCREENVIEWBASE_HPP
#define SEQUENCESCREENVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/sequencescreen_screen/sequenceScreenPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/ButtonWithIcon.hpp>
#include <touchgfx/containers/ScrollableContainer.hpp>
#include <touchgfx/containers/ListLayout.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/containers/ModalWindow.hpp>
#include <touchgfx/Color.hpp>
#include <touchgfx/widgets/BoxWithBorder.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/mixins/ClickListener.hpp>

class sequenceScreenViewBase : public touchgfx::View<sequenceScreenPresenter>
{
public:
    sequenceScreenViewBase();
    virtual ~sequenceScreenViewBase() {}
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void SaveSequenceButton_Clicked()
    {
        // Override and implement this function in sequenceScreen
    }

    virtual void PlaySequenceButton_Clicked()
    {
        // Override and implement this function in sequenceScreen
    }

    virtual void AddNewPositionButton_Clicked()
    {
        // Override and implement this function in sequenceScreen
    }

    virtual void DeletePositionButton_Clicked()
    {
        // Override and implement this function in sequenceScreen
    }

    virtual void StopSequenceButton_Clicked()
    {
        // Override and implement this function in sequenceScreen
    }

    virtual void PauseSequenceButton_Clicked()
    {
        // Override and implement this function in sequenceScreen
    }

    virtual void ChangeSequenceSpeedButton_Clicked()
    {
        // Override and implement this function in sequenceScreen
    }

    virtual void ResumeSequenceButton_Clicked()
    {
        // Override and implement this function in sequenceScreen
    }

    virtual void YesDeleteAllButton_Clicked()
    {
        // Override and implement this function in sequenceScreen
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Image backgroundImage;
    touchgfx::ButtonWithIcon backButton;
    touchgfx::ClickListener< touchgfx::ButtonWithIcon > deletePositionButton;
    touchgfx::ButtonWithIcon addNewPositionButton;
    touchgfx::ButtonWithIcon playSequenceButton;
    touchgfx::ButtonWithIcon saveSequenceButton;
    touchgfx::ScrollableContainer scrollableContainer;
    touchgfx::ListLayout positionsList;
    touchgfx::TextAreaWithOneWildcard infoTextArea;
    touchgfx::ButtonWithIcon stopSequenceButton;
    touchgfx::ButtonWithIcon changeSequenceSpeedButton;
    touchgfx::ButtonWithIcon pauseSequenceButton;
    touchgfx::ButtonWithIcon resumeSequenceButton;
    touchgfx::ModalWindow deleteAllModalWindow;
    touchgfx::BoxWithBorder boxWithBorderModalWindow;
    touchgfx::ButtonWithIcon yesDeleteAllButton;
    touchgfx::ButtonWithIcon noDeleteAllButton;
    touchgfx::TextArea warningTextArea;
    touchgfx::Image warningImage;

    /*
     * Wildcard Buffers
     */
    static const uint16_t INFOTEXTAREA_SIZE = 100;
    touchgfx::Unicode::UnicodeChar infoTextAreaBuffer[INFOTEXTAREA_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<sequenceScreenViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // SEQUENCESCREENVIEWBASE_HPP
